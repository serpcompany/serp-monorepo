[
  {
    "owner": "bitgetlimited",
    "repo": "ccxt",
    "content": "TITLE: Comprehensive JavaScript Example for Trading Operations\nDESCRIPTION: Complete JavaScript example demonstrating connection to multiple exchanges, loading markets, fetching data, and creating different types of orders.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/README.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use strict';\nconst ccxt = require ('ccxt');\n\n(async function () {\n    let kraken    = new ccxt.kraken ()\n    let bitfinex  = new ccxt.bitfinex ({ verbose: true })\n    let huobipro  = new ccxt.huobipro ()\n    let okcoinusd = new ccxt.okcoinusd ({\n        apiKey: 'YOUR_PUBLIC_API_KEY',\n        secret: 'YOUR_SECRET_PRIVATE_KEY',\n    })\n\n    const exchangeId = 'binance'\n        , exchangeClass = ccxt[exchangeId]\n        , exchange = new exchangeClass ({\n            'apiKey': 'YOUR_API_KEY',\n            'secret': 'YOUR_SECRET',\n            'timeout': 30000,\n            'enableRateLimit': true,\n        })\n\n    console.log (kraken.id,    await kraken.loadMarkets ())\n    console.log (bitfinex.id,  await bitfinex.loadMarkets  ())\n    console.log (huobipro.id,  await huobipro.loadMarkets ())\n\n    console.log (kraken.id,    await kraken.fetchOrderBook (kraken.symbols[0]))\n    console.log (bitfinex.id,  await bitfinex.fetchTicker ('BTC/USD'))\n    console.log (huobipro.id,  await huobipro.fetchTrades ('ETH/CNY'))\n\n    console.log (okcoinusd.id, await okcoinusd.fetchBalance ())\n\n    // sell 1 BTC/USD for market price, sell a bitcoin for dollars immediately\n    console.log (okcoinusd.id, await okcoinusd.createMarketSellOrder ('BTC/USD', 1))\n\n    // buy 1 BTC/USD for $2500, you pay $2500 and receive ฿1 when the order is closed\n    console.log (okcoinusd.id, await okcoinusd.createLimitBuyOrder ('BTC/USD', 1, 2500.00))\n\n    // pass/redefine custom exchange-specific order params: type, amount, price or whatever\n    // use a custom order type\n    bitfinex.createLimitSellOrder ('BTC/USD', 1, 10, { 'type': 'trailing-stop' })\n\n}) ();\n```\n\n----------------------------------------\n\nTITLE: Defining Order Structure in JavaScript\nDESCRIPTION: This snippet shows the structure of an order object in CCXT, including various properties such as id, timestamp, status, symbol, type, side, price, amount, and fee information. It demonstrates the comprehensive data available for each order.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_83\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'id':                '12345-67890:09876/54321', // string\n    'clientOrderId':     'abcdef-ghijklmnop-qrstuvwxyz', // a user-defined clientOrderId, if any\n    'datetime':          '2017-08-17 12:42:48.000', // ISO8601 datetime of 'timestamp' with milliseconds\n    'timestamp':          1502962946216, // order placing/opening Unix timestamp in milliseconds\n    'lastTradeTimestamp': 1502962956216, // Unix timestamp of the most recent trade on this order\n    'status':     'open',         // 'open', 'closed', 'canceled'\n    'symbol':     'ETH/BTC',      // symbol\n    'type':       'limit',        // 'market', 'limit'\n    'side':       'buy',          // 'buy', 'sell'\n    'price':       0.06917684,    // float price in quote currency\n    'amount':      1.5,           // ordered amount of base currency\n    'filled':      1.1,           // filled amount of base currency\n    'remaining':   0.4,           // remaining amount to fill\n    'cost':        0.076094524,   // 'filled' * 'price' (filling price used where available)\n    'trades':    [ ... ],         // a list of order trades/executions\n    'fee': {                      // fee info, if available\n        'currency': 'BTC',        // which currency the fee is (usually quote)\n        'cost': 0.0009,           // the fee amount in that currency\n        'rate': 0.002,            // the fee rate (if available)\n    },\n    'info': { ... },              // the original unparsed order structure as is\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Market Data in Python\nDESCRIPTION: Examples of accessing market data, symbols, and currencies using various methods in Python. Demonstrates how to work with market structures indexed by symbols and ids.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nprint (exchange.load_markets ())\n\netheur1 = exchange.markets['ETH/EUR']      # get market structure by symbol\netheur2 = exchange.market ('ETH/EUR')      # same result in a slightly different way\n\netheurId = exchange.market_id ('ETH/EUR')  # get market id by symbol\n\nsymbols = exchange.symbols                 # get a list of symbols\nsymbols2 = list (exchange.markets.keys ()) # same as previous line\n\nprint (exchange.id, symbols)               # print all symbols\n\ncurrencies = exchange.currencies           # a dictionary of currencies\n\nkraken = ccxt.kraken ()\nkraken.load_markets ()\n```\n\n----------------------------------------\n\nTITLE: Visualizing CCXT Library Structure with ASCII Diagram\nDESCRIPTION: An ASCII diagram showing the hierarchical structure of the CCXT library, illustrating how it provides a unified API layer on top of exchange-specific implementations. The diagram shows the separation between public and private APIs and the inheritance from the base Exchange class.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                 User\n    +-------------------------------------------------------------+\n    |                            CCXT                             |\n    +------------------------------+------------------------------+\n    |            Public            |           Private            |\n    +=============================================================+\n    │                              .                              |\n    │                    The Unified CCXT API                     |\n    │                              .                              |\n    |       loadMarkets            .           fetchBalance       |\n    |       fetchMarkets           .            createOrder       |\n    |       fetchCurrencies        .            cancelOrder       |\n    |       fetchTicker            .             fetchOrder       |\n    |       fetchTickers           .            fetchOrders       |\n    |       fetchOrderBook         .        fetchOpenOrders       |\n    |       fetchOHLCV             .      fetchClosedOrders       |\n    |       fetchStatus            .          fetchMyTrades       |\n    |       fetchTrades            .                deposit       |\n    |                              .               withdraw       |\n    │                              .                              |\n    +=============================================================+\n    │                              .                              |\n    |                     Custom Exchange API                     |\n    |         (Derived Classes And Their Implicit Methods)        |\n    │                              .                              |\n    |       publicGet...           .          privateGet...       |\n    |       publicPost...          .         privatePost...       |\n    |                              .          privatePut...       |\n    |                              .       privateDelete...       |\n    |                              .                   sign       |\n    │                              .                              |\n    +=============================================================+\n    │                              .                              |\n    |                      Base Exchange Class                    |\n    │                              .                              |\n    +=============================================================+\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys for CCXT in Python\nDESCRIPTION: This snippet shows how to set up API credentials for trading with CCXT in Python. It demonstrates assigning API keys to an existing exchange instance.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_68\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt\n\n# any time\nbitfinex = ccxt.bitfinex ()\nbitfinex.apiKey = 'YOUR_BFX_API_KEY'\nbitfinex.secret = 'YOUR_BFX_SECRET'\n```\n\n----------------------------------------\n\nTITLE: Transaction Structure in JavaScript\nDESCRIPTION: Comprehensive structure for both deposit and withdrawal transactions, including IDs, timestamps, addresses, amounts, status, and fee information.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_109\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'info':      { ... },    // the JSON response from the exchange as is\n    'id':       '123456',    // exchange-specific transaction id, string\n    'txid':     '0x68bfb29821c50ca35ef3762f887fd3211e4405aba1a94e448a4f218b850358f0',\n    'timestamp': 1534081184515,             // timestamp in milliseconds\n    'datetime': '2018-08-12T13:39:44.515Z', // ISO8601 string of the timestamp\n    'addressFrom': '0x38b1F8644ED1Dbd5DcAedb3610301Bf5fa640D6f', // sender\n    'address':  '0x02b0a9b7b4cDe774af0f8e47cb4f1c2ccdEa0806', // \"from\" or \"to\"\n    'addressTo': '0x304C68D441EF7EB0E2c056E836E8293BD28F8129', // receiver\n    'tagFrom', '0xabcdef', // \"tag\" or \"memo\" or \"payment_id\" associated with the sender\n    'tag':      '0xabcdef' // \"tag\" or \"memo\" or \"payment_id\" associated with the address\n    'tagTo': '0xhijgklmn', // \"tag\" or \"memo\" or \"payment_id\" associated with the receiver\n    'type':     'deposit',   // or 'withdrawal', string\n    'amount':    1.2345,     // float (does not include the fee)\n    'currency': 'ETH',       // a common unified currency code, string\n    'status':   'pending',   // 'ok', 'failed', 'canceled', string\n    'updated':   undefined,  // UTC timestamp of most recent status change in ms\n    'comment':  'a comment or message defined by the user if any',\n    'fee': {                 // the entire fee structure may be undefined\n        'currency': 'ETH',   // a unified fee currency code\n        'cost': 0.1234,      // float\n        'rate': undefined,   // approximately, fee['cost'] / amount, float\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Market Structure Definition in JavaScript\nDESCRIPTION: Illustrates the standard market object structure used throughout the CCXT library. This object contains key details about trading pairs including symbol, base/quote currencies, fees, and status.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'id':     ' btcusd',  // string literal for referencing within an exchange\n    'symbol':  'BTC/USD', // uppercase string literal of a pair of currencies\n    'base':    'BTC',     // uppercase string, unified base currency code, 3 or more letters\n    'quote':   'USD',     // uppercase string, unified quote currency code, 3 or more letters\n    'baseId':  'btc',     // any string, exchange-specific base currency id\n    'quoteId': 'usd',     // any string, exchange-specific quote currency id\n    'active':   true,     // boolean, market status\n    'taker':    0.002,    // taker fee rate, 0.002 = 0.2%\n    'maker':    0.0016,   // maker fee rate, 0.0016 = 0.16%\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing CCXT Pro Architecture with ASCII Diagram\nDESCRIPTION: An ASCII diagram showing the architecture of CCXT Pro. It illustrates how CCXT Pro sits on top of CCXT and is divided into public and private API sections. The diagram shows the unified API methods available in both sections and depicts the overall structure from the user level down to the base CCXT library.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_0\n\nLANGUAGE: ascii-art\nCODE:\n```\n                                 User\n\n    +-------------------------------------------------------------+\n    |                          CCXT Pro                           |\n    +------------------------------+------------------------------+\n    |            Public            .           Private            |\n    +=============================================================+\n    │                              .                              |\n    │                  The Unified CCXT Pro API                   |\n    |                              .                              |\n    |       loadMarkets            .           watchBalance       |\n    |       watchTicker            .       watchCreateOrder       |\n    |       watchTickers           .       watchCancelOrder       |\n    |       watchOrderBook         .             watchOrder       |\n    |       watchOHLCV             .            watchOrders       |\n    |       watchStatus            .        wathgOpenOrders       |\n    |       watchTrades            .      watchClosedOrders       |\n    |                              .          watchMyTrades       |\n    |                              .           watchDeposit       |\n    |                              .          watchWithdraw       |\n    │                              .                              |\n    +=============================================================+\n    │                              .                              |\n    |            The Underlying Exchange-Specific APIs            |\n    |         (Derived Classes And Their Implementations)         |\n    │                              .                              |\n    +=============================================================+\n    │                              .                              |\n    |                 CCXT Pro Base Exchange Class                |\n    │                              .                              |\n    +=============================================================+\n\n    +-------------------------------------------------------------+\n    |                                                             |\n    |                            CCXT                             |\n    |                                                             |\n    +=============================================================+\n```\n\n----------------------------------------\n\nTITLE: Initializing CCXT Exchange Instances in Python\nDESCRIPTION: Demonstrates how to create exchange instances in Python using CCXT, including direct instantiation and dynamic creation from exchange IDs. Also shows how to configure API credentials and other options.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncoinbasepro = getattr (ccxt, 'coinbasepro') ()\n\n# from variable id\nexchange_id = 'binance'\nexchange_class = getattr(ccxt, exchange_id)\nexchange = exchange_class({\n    'apiKey': 'YOUR_API_KEY',\n    'secret': 'YOUR_SECRET',\n    'timeout': 30000,\n    'enableRateLimit': True,\n})\n```\n\n----------------------------------------\n\nTITLE: CCXT Exchange Structure Overview in JavaScript\nDESCRIPTION: Provides a detailed example of the structure of a CCXT exchange object in JavaScript, including common properties such as ID, name, countries, URLs, API endpoints, capabilities, and configuration options.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'id':   'exchange'                  // lowercase string exchange id\n    'name': 'Exchange'                  // human-readable string\n    'countries': [ 'US', 'CN', 'EU' ],  // array of ISO country codes\n    'urls': {\n        'api': 'https://api.example.com/data',  // string or dictionary of base API URLs\n        'www': 'https://www.example.com'        // string website URL\n        'doc': 'https://docs.example.com/api',  // string URL or array of URLs\n    },\n    'version':         'v1',            // string ending with digits\n    'api':             { ... },         // dictionary of api endpoints\n    'has': {                            // exchange capabilities\n        'CORS': false,\n        'publicAPI': true,\n        'privateAPI': true,\n        'cancelOrder': true,\n        'createDepositAddress': false,\n        'createOrder': true,\n        'deposit': false,\n        'fetchBalance': true,\n        'fetchClosedOrders': false,\n        'fetchCurrencies': false,\n        'fetchDepositAddress': false,\n        'fetchMarkets': true,\n        'fetchMyTrades': false,\n        'fetchOHLCV': false,\n        'fetchOpenOrders': false,\n        'fetchOrder': false,\n        'fetchOrderBook': true,\n        'fetchOrders': false,\n        'fetchStatus': 'emulated',\n        'fetchTicker': true,\n        'fetchTickers': false,\n        'fetchBidsAsks': false,\n        'fetchTrades': true,\n        'withdraw': false,\n    },\n    'timeframes': {                     // empty if the exchange.has['fetchOHLCV'] !== true\n        '1m': '1minute',\n        '1h': '1hour',\n        '1d': '1day',\n        '1M': '1month',\n        '1y': '1year',\n    },\n    'timeout':          10000,          // number in milliseconds\n    'rateLimit':        2000,           // number in milliseconds\n    'userAgent':       'ccxt/1.1.1 ...' // string, HTTP User-Agent header\n    'verbose':          false,          // boolean, output error details\n    'markets':         { ... }          // dictionary of markets/pairs by symbol\n    'symbols':         [ ... ]          // sorted list of string symbols (traded pairs)\n    'currencies':      { ... }          // dictionary of currencies by currency code\n    'markets_by_id':   { ... },         // dictionary of dictionaries (markets) by id\n    'proxy': 'https://crossorigin.me/', // string URL\n    'apiKey':   '92560ffae9b8a0421...', // string public apiKey (ASCII, hex, Base64, ...)\n    'secret':   '9aHjPmW+EtRRKN/Oi...'  // string private secret key\n    'password': '6kszf4aci8r',          // string password\n    'uid':      '123456',               // string user id\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching OHLCV Candlestick Data with JavaScript\nDESCRIPTION: Code for retrieving OHLCV (Open, High, Low, Close, Volume) candlestick data for all available symbols using JavaScript with CCXT. Includes a sleep function to respect rate limits.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nlet sleep = (ms) => new Promise (resolve => setTimeout (resolve, ms));\nif (exchange.has.fetchOHLCV) {\n    for (symbol in exchange.markets) {\n        await sleep (exchange.rateLimit) // milliseconds\n        console.log (await exchange.fetchOHLCV (symbol, '1m')) // one minute\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CCXT for Cryptocurrency Exchange Operations in JavaScript\nDESCRIPTION: Demonstrates various operations using CCXT in JavaScript, including loading markets, fetching order books, tickers, trades, and creating orders.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/index.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\nvar ccxt = require ('ccxt')\n\n;(() => async function () {\n\n    let kraken    = new ccxt.kraken ()\n    let bitfinex  = new ccxt.bitfinex ({ verbose: true })\n    let huobi     = new ccxt.huobi ()\n    let okcoinusd = new ccxt.okcoinusd ({\n        apiKey: 'YOUR_PUBLIC_API_KEY',\n        secret: 'YOUR_SECRET_PRIVATE_KEY',\n    })\n\n    let krakenMarkets = await kraken.loadMarkets ()\n\n    console.log (kraken.id,    krakenMarkets)\n    console.log (bitfinex.id,  await bitfinex.loadMarkets  ())\n    console.log (huobi.id,     await huobi.loadMarkets ())\n\n    console.log (kraken.id,    await kraken.fetchOrderBook (kraken.symbols[0]))\n    console.log (bitfinex.id,  await bitfinex.fetchTicker ('BTC/USD'))\n    console.log (huobi.id,     await huobi.fetchTrades ('ETH/CNY'))\n\n    console.log (okcoinusd.id, await okcoinusd.fetchBalance ())\n\n    // sell 1 BTC/USD for market price, sell a bitcoin for dollars immediately\n    console.log (okcoinusd.id, await okcoinusd.createMarketSellOrder ('BTC/USD', 1))\n\n    // buy 1 BTC/USD for $2500, you pay $2500 and receive ฿1 when the order is closed\n    console.log (okcoinusd.id, await okcoinusd.createLimitBuyOrder ('BTC/USD', 1, 2500.00))\n\n    // pass/redefine custom exchange-specific order params: type, amount, price or whatever\n    // use a custom order type\n    bitfinex.createLimitSellOrder ('BTC/USD', 1, 10, { 'type': 'trailing-stop' })\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Creating Market Buy Orders with Direct Cost in JavaScript\nDESCRIPTION: Example of creating a market buy order by directly specifying the total cost. This approach switches off the createMarketBuyOrderRequiresPrice option and allows passing the calculated cost directly to createMarketBuyOrder method.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_88\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst exchange = new ccxt.cex ({\n    'apiKey': YOUR_API_KEY,\n    'secret': 'YOUR_SECRET',\n    'enableRateLimit': true,\n    'options': {\n        'createMarketBuyOrderRequiresPrice': false, // switch off\n    },\n})\n\n// or, to switch it off later, after the exchange instantiation, you can do\nexchange.options['createMarketBuyOrderRequiresPrice'] = false\n\n;(async () => {\n\n    // when `createMarketBuyOrderRequiresPrice` is true, we can pass the price\n    // so that the total cost of the order would be calculated inside the library\n    // by multiplying the amount over price (amount * price)\n\n    const symbol = 'BTC/USD'\n    const amount = 2 // BTC\n    const price = 9000 // USD\n    cost = amount * price // ← instead of the amount cost goes ↓ here\n    const order = await exchange.createMarketBuyOrder (symbol, cost)\n    console.log (order)\n})\n```\n\n----------------------------------------\n\nTITLE: Transaction Structure Definition\nDESCRIPTION: Detailed structure definition for cryptocurrency transactions including timestamps, addresses, amounts, fees and status information.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_110\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'info':      { ... },    // the JSON response from the exchange as is\n    'id':       '123456',    // exchange-specific transaction id, string\n    'txid':     '0x68bfb29821c50ca35ef3762f887fd3211e4405aba1a94e448a4f218b850358f0',\n    'timestamp': 1534081184515,             // timestamp in milliseconds\n    'datetime': '2018-08-12T13:39:44.515Z', // ISO8601 string of the timestamp\n    'addressFrom': '0x38b1F8644ED1Dbd5DcAedb3610301Bf5fa640D6f', // sender\n    'address':  '0x02b0a9b7b4cDe774af0f8e47cb4f1c2ccdEa0806', // \"from\" or \"to\"\n    'addressTo': '0x304C68D441EF7EB0E2c056E836E8293BD28F8129', // receiver\n    'tagFrom', '0xabcdef', // \"tag\" or \"memo\" or \"payment_id\" associated with the sender\n    'tag':      '0xabcdef' // \"tag\" or \"memo\" or \"payment_id\" associated with the address\n    'tagTo': '0xhijgklmn', // \"tag\" or \"memo\" or \"payment_id\" associated with the receiver\n    'type':     'deposit',   // or 'withdrawal', string\n    'amount':    1.2345,     // float (does not include the fee)\n    'currency': 'ETH',       // a common unified currency code, string\n    'status':   'pending',   // 'ok', 'failed', 'canceled', string\n    'updated':   undefined,  // UTC timestamp of most recent status change in ms\n    'comment':  'a comment or message defined by the user if any',\n    'fee': {                 // the entire fee structure may be undefined\n        'currency': 'ETH',   // a unified fee currency code\n        'cost': 0.1234,      // float\n        'rate': undefined,   // approximately, fee['cost'] / amount, float\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Exchange Objects in Python\nDESCRIPTION: Python examples for creating exchange instances with the CCXT library, including using default and custom IDs, creating multiple instances, and dynamically instantiating an exchange using a variable ID.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Python\nimport ccxt\nexchange = ccxt.okcoinusd () # default id\nokcoin1 = ccxt.okcoinusd ({ 'id': 'okcoin1' })\nokcoin2 = ccxt.okcoinusd ({ 'id': 'okcoin2' })\nid = 'btcchina'\nbtcchina = eval ('ccxt.%s ()' % id)\n```\n\n----------------------------------------\n\nTITLE: Exchange Documentation Table in Markdown\nDESCRIPTION: Markdown table showing cryptocurrency exchange platforms and their documentation URLs. Includes exchange names, API versions, links to documentation, and CCXT certification status.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| `poloniex <https://poloniex.com/signup?c=UBFZJRPJ>`__ | poloniex | `Poloniex <https://poloniex.com/signup?c=UBFZJRPJ>`__ | \\* | `API <https://docs.poloniex.com>`__ | `CCXT Certified <https://github.com/ccxt/ccxt/wiki/Certification>`__ | `CCXT Pro <https://ccxt.pro>`__ |\n+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+----------------------------------------------------------------------+---------------------------------+\n| `probit <https://www.probit.com/r/34608773>`__ | probit | `ProBit <https://www.probit.com/r/34608773>`__ | 1 | `API <https://docs-en.probit.com>`__ | | |\n+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+----------------------------------------------------------------------+---------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Using CCXT for Cryptocurrency Exchange Operations in Python\nDESCRIPTION: Demonstrates various operations using CCXT in Python, including initializing exchanges, loading markets, and printing exchange information.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/index.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# coding=utf-8\n\nimport ccxt\n\nhitbtc = ccxt.hitbtc({'verbose': True})\nbitmex = ccxt.bitmex()\nhuobi  = ccxt.huobi()\nexmo   = ccxt.exmo({\n    'apiKey': 'YOUR_PUBLIC_API_KEY',\n    'secret': 'YOUR_SECRET_PRIVATE_KEY',\n})\n\nhitbtc_markets = hitbtc.load_markets()\n\nprint(hitbtc.id, hitbtc_markets)\nprint(bitmex.id, bitmex.load_markets())\n```\n\n----------------------------------------\n\nTITLE: Initializing CCXT Exchanges in PHP\nDESCRIPTION: Shows how to create exchange instances in PHP with timezone configuration, direct instantiation, and dynamic instantiation from variables including API credential setup.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\ndate_default_timezone_set('UTC');\ninclude 'ccxt.php';\n$bitfinex = new \\ccxt\\bitfinex(); // default id\n$bitfinex1 = new \\ccxt\\bitfinex(array('id' => 'bitfinex1'));\n$bitfinex2 = new \\ccxt\\bitfinex(array('id' => 'bitfinex2'));\n$id = 'kraken';\n$exchange = '\\\\ccxt\\\\' . $id\n$kraken = new $exchange();\n\n// from variable id\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class(array(\n    'apiKey' => 'YOUR_API_KEY',\n    'secret' => 'YOUR_SECRET',\n    'timeout' => 30000,\n    'enableRateLimit' => true,\n));\n```\n\n----------------------------------------\n\nTITLE: Advanced Python CCXT Usage Example\nDESCRIPTION: Comprehensive Python example demonstrating how to initialize different exchanges, load markets, fetch market data, check balances, and create various types of orders.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/README.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# coding=utf-8\n\nimport ccxt\n\nhitbtc   = ccxt.hitbtc({'verbose': True})\nbitmex   = ccxt.bitmex()\nhuobipro = ccxt.huobipro()\nexmo     = ccxt.exmo({\n    'apiKey': 'YOUR_PUBLIC_API_KEY',\n    'secret': 'YOUR_SECRET_PRIVATE_KEY',\n})\nkraken = ccxt.kraken({\n    'apiKey': 'YOUR_PUBLIC_API_KEY',\n    'secret': 'YOUR_SECRET_PRIVATE_KEY',\n})\n\nexchange_id = 'binance'\nexchange_class = getattr(ccxt, exchange_id)\nexchange = exchange_class({\n    'apiKey': 'YOUR_API_KEY',\n    'secret': 'YOUR_SECRET',\n    'timeout': 30000,\n    'enableRateLimit': True,\n})\n\nhitbtc_markets = hitbtc.load_markets()\n\nprint(hitbtc.id, hitbtc_markets)\nprint(bitmex.id, bitmex.load_markets())\nprint(huobipro.id, huobipro.load_markets())\n\nprint(hitbtc.fetch_order_book(hitbtc.symbols[0]))\nprint(bitmex.fetch_ticker('BTC/USD'))\nprint(huobipro.fetch_trades('LTC/CNY'))\n\nprint(exmo.fetch_balance())\n\n# sell one ฿ for market price and receive $ right now\nprint(exmo.id, exmo.create_market_sell_order('BTC/USD', 1))\n\n# limit buy BTC/EUR, you pay €2500 and receive ฿1  when the order is closed\nprint(exmo.id, exmo.create_limit_buy_order('BTC/EUR', 1, 2500.00))\n\n# pass/redefine custom exchange-specific order params: type, amount, price, flags, etc...\nkraken.create_market_buy_order('BTC/USD', 1, {'trading_agreement': 'agree'})\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Funds in Multiple Languages\nDESCRIPTION: Method to withdraw funds from an exchange, which requires currency code, amount, address, and optional tag. Returns a dictionary with withdrawal ID and exchange response.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_107\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nexchange.withdraw (code, amount, address, tag = undefined, params = {})\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nexchange.withdraw(code, amount, address, tag=None, params={})\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\n$exchange->withdraw ($code, $amount, $address, $tag = null, $params = array ())\n```\n\n----------------------------------------\n\nTITLE: Address Structure Example in JavaScript\nDESCRIPTION: Structure returned by deposit address methods, containing currency code, address, optional tag for particular currencies, and the raw exchange response.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_106\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'currency': currency, // currency code\n    'address': address,   // address in terms of requested currency\n    'tag': tag,           // tag / memo / paymentId for particular currencies (XRP, XMR, ...)\n    'info': response,     // raw unparsed data as returned from the exchange\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in PHP\nDESCRIPTION: Example of handling CCXT exceptions in PHP using try-catch blocks. Demonstrates error handling patterns for NetworkError and ExchangeError when calling API methods.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_128\n\nLANGUAGE: php\nCODE:\n```\n// PHP\n\n// try to call a unified method\ntry {\n    $response = $exchange->fetch_trades('ETH/BTC');\n    print_r($response);\n} catch (\\ccxt\\NetworkError $e) {\n    echo $exchange->id . ' fetch_trades failed due to a network error: ' . $e->getMessage () . \"\\n\";\n    // retry or whatever\n    // ...\n} catch (\\ccxt\\ExchangeError $e) {\n    echo $exchange->id . ' fetch_trades failed due to exchange error: ' . $e->getMessage () . \"\\n\";\n    // retry or whatever\n    // ...\n} catch (Exception $e) {\n    echo $exchange->id . ' fetch_trades failed with: ' . $e->getMessage () . \"\\n\";\n    // retry or whatever\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Market and Currency Methods in Python\nDESCRIPTION: Demonstrates various market and currency operations using Python, including market lookup and symbol handling.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nprint (exchange.load_markets ())\n\netheur1 = exchange.markets['ETH/EUR']      # get market structure by symbol\netheur2 = exchange.market ('ETH/EUR')      # same result in a slightly different way\n\netheurId = exchange.market_id ('ETH/EUR')  # get market id by symbol\n\nsymbols = exchange.symbols                 # get a list of symbols\nsymbols2 = list (exchange.markets.keys ()) # same as previous line\n\nprint (exchange.id, symbols)               # print all symbols\n\ncurrencies = exchange.currencies           # a dictionary of currencies\n\nkraken = ccxt.kraken ()\nkraken.load_markets ()\n\nkraken.markets['BTC/USD']                  # symbol → market (get market by symbol)\nkraken.markets_by_id['XXRPZUSD']           # id → market (get market by id)\n\nkraken.markets['BTC/USD']['id']            # symbol → id (get id by symbol)\nkraken.markets_by_id['XXRPZUSD']['symbol'] # id → symbol (get symbol by id)\n```\n\n----------------------------------------\n\nTITLE: Advanced JavaScript CCXT Usage Example\nDESCRIPTION: Comprehensive JavaScript example demonstrating how to initialize different exchanges, load markets, fetch market data, check balances, and create various types of orders.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/README.rst#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\nconst ccxt = require ('ccxt');\n\n(async function () {\n    let kraken    = new ccxt.kraken ()\n    let bitfinex  = new ccxt.bitfinex ({ verbose: true })\n    let huobipro  = new ccxt.huobipro ()\n    let okcoinusd = new ccxt.okcoinusd ({\n        apiKey: 'YOUR_PUBLIC_API_KEY',\n        secret: 'YOUR_SECRET_PRIVATE_KEY',\n    })\n\n    const exchangeId = 'binance'\n        , exchangeClass = ccxt[exchangeId]\n        , exchange = new exchangeClass ({\n            'apiKey': 'YOUR_API_KEY',\n            'secret': 'YOUR_SECRET',\n            'timeout': 30000,\n            'enableRateLimit': true,\n        })\n\n    console.log (kraken.id,    await kraken.loadMarkets ())\n    console.log (bitfinex.id,  await bitfinex.loadMarkets  ())\n    console.log (huobipro.id,  await huobipro.loadMarkets ())\n\n    console.log (kraken.id,    await kraken.fetchOrderBook (kraken.symbols[0]))\n    console.log (bitfinex.id,  await bitfinex.fetchTicker ('BTC/USD'))\n    console.log (huobipro.id,  await huobipro.fetchTrades ('ETH/CNY'))\n\n    console.log (okcoinusd.id, await okcoinusd.fetchBalance ())\n\n    // sell 1 BTC/USD for market price, sell a bitcoin for dollars immediately\n    console.log (okcoinusd.id, await okcoinusd.createMarketSellOrder ('BTC/USD', 1))\n\n    // buy 1 BTC/USD for $2500, you pay $2500 and receive ฿1 when the order is closed\n    console.log (okcoinusd.id, await okcoinusd.createLimitBuyOrder ('BTC/USD', 1, 2500.00))\n\n    // pass/redefine custom exchange-specific order params: type, amount, price or whatever\n    // use a custom order type\n    bitfinex.createLimitSellOrder ('BTC/USD', 1, 10, { 'type': 'trailing-stop' })\n\n}) ();\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Book Data with Rate Limiting in JavaScript\nDESCRIPTION: A JavaScript implementation for fetching order book data for all available market symbols with rate limiting to avoid API request limits. The code introduces delays between consecutive requests.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\ndelay = 2000 // milliseconds = seconds * 1000\n(async () => {\n    for (symbol in exchange.markets) {\n        console.log (await exchange.fetchOrderBook (symbol))\n        await new Promise (resolve => setTimeout (resolve, delay)) // rate limit\n    }\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Basic Python Usage of CCXT\nDESCRIPTION: Simple Python example showing how to import the CCXT library and list available exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt\nprint(ccxt.exchanges) # print a list of all available exchange classes\n```\n\n----------------------------------------\n\nTITLE: Instantiating Exchange Objects in JavaScript\nDESCRIPTION: Demonstrates different ways to instantiate exchange objects in JavaScript, including using default IDs, custom IDs, and dynamic instantiation with configuration options\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ccxt = require ('ccxt')\nlet exchange = new ccxt.kraken () // default id\nlet kraken1 = new ccxt.kraken ({ id: 'kraken1' })\nlet kraken2 = new ccxt.kraken ({ id: 'kraken2' })\nlet id = 'coinbasepro'\nlet coinbasepro = new ccxt[id] ();\n\n// from variable id\nconst exchangeId = 'binance'\n    , exchangeClass = ccxt[exchangeId]\n    , exchange = new exchangeClass ({\n        'apiKey': 'YOUR_API_KEY',\n        'secret': 'YOUR_SECRET',\n        'timeout': 30000,\n        'enableRateLimit': true,\n    })\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Python Example for Trading Operations\nDESCRIPTION: Complete Python example demonstrating connection to multiple exchanges, loading markets, fetching data, and creating different types of orders.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/README.md#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n# coding=utf-8\n\nimport ccxt\n\nhitbtc   = ccxt.hitbtc({'verbose': True})\nbitmex   = ccxt.bitmex()\nhuobipro = ccxt.huobipro()\nexmo     = ccxt.exmo({\n    'apiKey': 'YOUR_PUBLIC_API_KEY',\n    'secret': 'YOUR_SECRET_PRIVATE_KEY',\n})\nkraken = ccxt.kraken({\n    'apiKey': 'YOUR_PUBLIC_API_KEY',\n    'secret': 'YOUR_SECRET_PRIVATE_KEY',\n})\n\nexchange_id = 'binance'\nexchange_class = getattr(ccxt, exchange_id)\nexchange = exchange_class({\n    'apiKey': 'YOUR_API_KEY',\n    'secret': 'YOUR_SECRET',\n    'timeout': 30000,\n    'enableRateLimit': True,\n})\n\nhitbtc_markets = hitbtc.load_markets()\n\nprint(hitbtc.id, hitbtc_markets)\nprint(bitmex.id, bitmex.load_markets())\nprint(huobipro.id, huobipro.load_markets())\n\nprint(hitbtc.fetch_order_book(hitbtc.symbols[0]))\nprint(bitmex.fetch_ticker('BTC/USD'))\nprint(huobipro.fetch_trades('LTC/CNY'))\n\nprint(exmo.fetch_balance())\n\n# sell one ฿ for market price and receive $ right now\nprint(exmo.id, exmo.create_market_sell_order('BTC/USD', 1))\n\n# limit buy BTC/EUR, you pay €2500 and receive ฿1  when the order is closed\nprint(exmo.id, exmo.create_limit_buy_order('BTC/EUR', 1, 2500.00))\n\n# pass/redefine custom exchange-specific order params: type, amount, price, flags, etc...\nkraken.create_market_buy_order('BTC/USD', 1, {'trading_agreement': 'agree'})\n```\n\n----------------------------------------\n\nTITLE: Cross-Language Ticker Streaming Implementation\nDESCRIPTION: Implementation examples of watchTicker method across JavaScript, Python and PHP, showing how to continuously stream and handle ticker data.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['watchTicker']) {\n    while (true) {\n        try {\n            const ticker = await exchange.watchTicker (symbol, params)\n            console.log (new Date (), ticker)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\nLANGUAGE: Python\nCODE:\n```\nif exchange.has['watchTicker']:\n    while True:\n        try:\n            ticker = await exchange.watch_ticker(symbol, params)\n            print(exchange.iso8601(exchange.milliseconds()), ticker)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # rasie e\n```\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['watchTicker']) {\n    $main = function () use (&$exchange, &$main, $symbol, $params) {\n        $exchange->watch_ticker($symbol, $params)->then(function($ticker) use (&$main) {\n            echo date('c'), ' ', json_encode($ticker), \"\\n\";\n            $main();\n        })->otherwise(function (\\Exception $e) use (&$main) {\n            echo get_class ($e), ' ', $e->getMessage (), \"\\n\";\n            $main();\n            // stop the loop on exception or leave it commented to retry\n            // throw $e;\n        });\n    };\n    $loop->futureTick($main);\n}\n```\n\n----------------------------------------\n\nTITLE: Using watchOHLCV in JavaScript, Python, and PHP\nDESCRIPTION: Code examples demonstrating how to use the watchOHLCV method to stream candlestick/OHLCV data from exchanges. This method accepts a symbol, optional since timestamp, limit, and additional params, returning real-time candlestick data.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nif (exchange.has['watchOHLCV']) {\n    while (true) {\n        try {\n            const candles = await exchange.watchOHLCV (symbol, since, limit, params)\n            console.log (new Date (), candles)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n# Python\nif exchange.has['watchOHLCV']:\n    while True:\n        try:\n            candles = await exchange.watch_ohlcv(symbol, since, limit, params)\n            print(exchange.iso8601(exchange.milliseconds()), candles)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # rasie e\n```\n\nLANGUAGE: php\nCODE:\n```\n// PHP\nif ($exchange->has['watchOHLCV']) {\n    $main = function () use (&$exchange, &$main, $symbol, $timeframe, $since, $limit, $params) {\n        $exchange->watch_ohlcv($symbol, $timeframe, $since, $limit, $params)->then(\n            function($candles) use (&$main, $symbol, $timeframe) {\n                echo date('c'), ' ', $symbol, ' ', $timeframe, ' ', json_encode($candles), \"\\n\";\n                $main();\n            }\n        )->otherwise(function (\\Exception $e) use (&$main) {\n            echo get_class ($e), ' ', $e->getMessage (), \"\\n\";\n            $main();\n            // stop the loop on exception or leave it commented to retry\n            // throw $e;\n        });\n    };\n    $loop->futureTick($main);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Rate Limiting in Python\nDESCRIPTION: Shows how to enable the built-in rate limiter in Python when creating an exchange instance or toggling it after creation. This prevents exceeding exchange request limits.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# enable built-in rate limiting upon instantiation of the exchange\nexchange = ccxt.bitfinex({\n    'enableRateLimit': True,\n})\n\n# or switch the built-in rate-limiter on or off later after instantiation\nexchange.enableRateLimit = True  # enable\nexchange.enableRateLimit = False  # disable\n```\n\n----------------------------------------\n\nTITLE: Fetching OHLCV Candlestick Data with Python\nDESCRIPTION: Code for retrieving OHLCV (Open, High, Low, Close, Volume) candlestick data for all available symbols using Python with CCXT. Uses time.sleep to respect exchange rate limits.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_68\n\nLANGUAGE: python\nCODE:\n```\n# Python\nimport time\nif exchange.has['fetchOHLCV']:\n    for symbol in exchange.markets:\n        time.sleep (exchange.rateLimit / 1000) # time.sleep wants seconds\n        print (symbol, exchange.fetch_ohlcv (symbol, '1d')) # one day\n```\n\n----------------------------------------\n\nTITLE: Calculating Market Price with CCXT in Python\nDESCRIPTION: This snippet shows how to fetch an order book and calculate the current market price, including bid, ask, and spread, using CCXT in Python.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_49\n\nLANGUAGE: Python\nCODE:\n```\norderbook = exchange.fetch_order_book (exchange.symbols[0])\nbid = orderbook['bids'][0][0] if len (orderbook['bids']) > 0 else None\nask = orderbook['asks'][0][0] if len (orderbook['asks']) > 0 else None\nspread = (ask - bid) if (bid and ask) else None\nprint (exchange.id, 'market price', { 'bid': bid, 'ask': ask, 'spread': spread })\n```\n\n----------------------------------------\n\nTITLE: Advanced Python CCXT Usage Examples\nDESCRIPTION: Comprehensive Python example demonstrating initialization of multiple exchanges, loading markets, fetching data, and creating orders.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/README.md#2025-04-23_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n# coding=utf-8\n\nimport ccxt\n\nhitbtc   = ccxt.hitbtc({'verbose': True})\nbitmex   = ccxt.bitmex()\nhuobipro = ccxt.huobipro()\nexmo     = ccxt.exmo({\n    'apiKey': 'YOUR_PUBLIC_API_KEY',\n    'secret': 'YOUR_SECRET_PRIVATE_KEY',\n})\nkraken = ccxt.kraken({\n    'apiKey': 'YOUR_PUBLIC_API_KEY',\n    'secret': 'YOUR_SECRET_PRIVATE_KEY',\n})\n\nexchange_id = 'binance'\nexchange_class = getattr(ccxt, exchange_id)\nexchange = exchange_class({\n    'apiKey': 'YOUR_API_KEY',\n    'secret': 'YOUR_SECRET',\n    'timeout': 30000,\n    'enableRateLimit': True,\n})\n\nhitbtc_markets = hitbtc.load_markets()\n\nprint(hitbtc.id, hitbtc_markets)\nprint(bitmex.id, bitmex.load_markets())\nprint(huobipro.id, huobipro.load_markets())\n\nprint(hitbtc.fetch_order_book(hitbtc.symbols[0]))\nprint(bitmex.fetch_ticker('BTC/USD'))\nprint(huobipro.fetch_trades('LTC/CNY'))\n\nprint(exmo.fetch_balance())\n\n# sell one ฿ for market price and receive $ right now\nprint(exmo.id, exmo.create_market_sell_order('BTC/USD', 1))\n\n# limit buy BTC/EUR, you pay €2500 and receive ฿1  when the order is closed\nprint(exmo.id, exmo.create_limit_buy_order('BTC/EUR', 1, 2500.00))\n\n# pass/redefine custom exchange-specific order params: type, amount, price, flags, etc...\nkraken.create_market_buy_order('BTC/USD', 1, {'trading_agreement': 'agree'})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Order Parameters in CCXT\nDESCRIPTION: Examples demonstrating how to specify custom exchange-specific parameters when creating orders in JavaScript, Python, and PHP. These parameters vary by exchange and allow for specialized order configurations.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\n// use a custom order type\nbitfinex.createLimitSellOrder ('BTC/USD', 1, 10, { 'type': 'trailing-stop' })\n```\n\nLANGUAGE: python\nCODE:\n```\n# Python\n# add a custom order flag\nkraken.create_market_buy_order('BTC/USD', 1, {'trading_agreement': 'agree'})\n```\n\nLANGUAGE: php\nCODE:\n```\n// PHP\n// add custom user id to your order\n$hitbtc->create_order ('BTC/USD', 'limit', 'buy', 1, 3000, array ('clientOrderId' => '123'));\n```\n\n----------------------------------------\n\nTITLE: Fetching Account Balance in Multiple Languages\nDESCRIPTION: Examples of how to fetch account balance information using the fetchBalance method in JavaScript, Python, and PHP.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_72\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\n(async () => {\n    console.log (await exchange.fetchBalance ())\n}) ()\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nprint (exchange.fetch_balance ())\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\nvar_dump ($exchange->fetch_balance ());\n```\n\n----------------------------------------\n\nTITLE: Fetching Market Data with Python CCXT\nDESCRIPTION: Python examples showing how to fetch market data like order books, tickers and trades from various crypto exchanges using CCXT. Also demonstrates creating market and limit orders.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/index.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprint(huobi.id, huobi.load_markets())\n\nprint(hitbtc.fetch_order_book(hitbtc.symbols[0]))\nprint(bitmex.fetch_ticker('BTC/USD'))\nprint(huobi.fetch_trades('LTC/CNY'))\n\nprint(exmo.fetch_balance())\n\n# sell one ฿ for market price and receive $ right now\nprint(exmo.id, exmo.create_market_sell_order('BTC/USD', 1))\n\n# limit buy BTC/EUR, you pay €2500 and receive ฿1  when the order is closed\nprint(exmo.id, exmo.create_limit_buy_order('BTC/EUR', 1, 2500.00))\n\n# pass/redefine custom exchange-specific order params: type, amount, price, flags, etc...\nkraken.create_market_buy_order('BTC/USD', 1, {'trading_agreement': 'agree'})\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Tickers in JavaScript with CCXT\nDESCRIPTION: Example showing how to fetch tickers for specific symbol pairs in JavaScript using async/await. This allows limiting API requests to only the tickers of interest.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_56\n\nLANGUAGE: JavaScript\nCODE:\n```\n//JavaScript\nif (exchange.has['fetchTickers']) {\n    console.log (await (exchange.fetchTickers ([ 'ETH/BTC', 'LTC/BTC' ]))) // listed tickers indexed by their symbols\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Book with CCXT in Python\nDESCRIPTION: This snippet demonstrates how to fetch an order book for BTC/USD using the CCXT library in Python. It limits the result to 10 bid/ask pairs on each side of the order book.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_46\n\nLANGUAGE: Python\nCODE:\n```\nlimit = 10\nccxt.cex().fetch_order_book('BTC/USD', limit)\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Book with Depth in JavaScript\nDESCRIPTION: Demonstrates how to fetch a limited order book with specific depth and grouping parameters using the CCXT library in JavaScript.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n(async function test () {\n    const ccxt = require ('ccxt')\n    const exchange = new ccxt.bitfinex ()\n    const limit = 5\n    const orders = await exchange.fetchOrderBook ('BTC/USD', limit, {\n        // this parameter is exchange-specific, all extra params have unique names per exchange\n        'group': 1, // 1 = orders are grouped by price, 0 = orders are separate\n    })\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Using watchOrderBook in JavaScript, Python, and PHP\nDESCRIPTION: Code examples demonstrating how to use the watchOrderBook method to stream order book data from exchanges. This method accepts a symbol, optional limit parameter, and additional params. It returns real-time order book data with bids and asks.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nif (exchange.has['watchOrderBook']) {\n    while (true) {\n        try {\n            const orderbook = await exchange.watchOrderBook (symbol, limit, params)\n            console.log (new Date (), symbol, orderbook['asks'][0], orderbook['bids'][0])\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n# Python\nif exchange.has['watchOrderBook']:\n    while True:\n        try:\n            orderbook = await exchange.watch_order_book(symbol, limit, params)\n            print(exchange.iso8601(exchange.milliseconds()), symbol, orderbook['asks'][0], orderbook['bids'][0])\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # rasie e\n```\n\nLANGUAGE: php\nCODE:\n```\n// PHP\nif ($exchange->has['watchOrderBook']) {\n    $main = function () use (&$exchange, &$main, $symbol, $limit, $params) {\n        $exchange->watch_order_book($symbol, $limit, $params)->then(function($orderbook) use (&$main, $symbol) {\n            echo date('c'), ' ', $symbol, ' ', json_encode(array($orderbook['asks'][0], $orderbook['bids'][0])), \"\\n\";\n            $main();\n        })->otherwise(function (\\Exception $e) use (&$main) {\n            echo get_class ($e), ' ', $e->getMessage (), \"\\n\";\n            $main();\n            // stop the loop on exception or leave it commented to retry\n            // throw $e;\n        });\n    };\n    $loop->futureTick($main);\n}\n```\n\n----------------------------------------\n\nTITLE: Placing Market Buy Order with Price in JavaScript\nDESCRIPTION: This example demonstrates how to place a market buy order on an exchange that requires specifying the total cost in quote currency, using the CCXT library in JavaScript.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\nconst exchange = new ccxt.cex ({\n    'apiKey': YOUR_API_KEY,\n    'secret': 'YOUR_SECRET',\n    'enableRateLimit': true,\n    // 'options': {\n    //     'createMarketBuyOrderRequiresPrice': true, // default\n    // },\n})\n\n;(async () => {\n\n    // when `createMarketBuyOrderRequiresPrice` is true, we can pass the price\n    // so that the total cost of the order would be calculated inside the library\n    // by multiplying the amount over price (amount * price)\n\n    const symbol = 'BTC/USD'\n    const amount = 2 // BTC\n    const price = 9000 // USD\n    // cost = amount * price = 2 * 9000 = 18000 (USD)\n\n```\n\n----------------------------------------\n\nTITLE: Asynchronous API Calls in Python with CCXT\nDESCRIPTION: Shows how to use Python's async/await syntax with CCXT's async support to make asynchronous API calls. This example fetches a ticker for ETH/BTC from the Poloniex exchange.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n# Python\n\nimport asyncio\nimport ccxt.async_support as ccxt\n\nasync def print_poloniex_ethbtc_ticker():\n    poloniex = ccxt.poloniex()\n    print(await poloniex.fetch_ticker('ETH/BTC'))\n\nasyncio.get_event_loop().run_until_complete(print_poloniex_ethbtc_ticker())\n```\n\n----------------------------------------\n\nTITLE: Real-time OrderBook Streaming in JavaScript\nDESCRIPTION: Example of real-time orderbook streaming using WebSocket in CCXT Pro. The code continuously receives orderbook updates as they arrive from the exchange.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst limit = 5 // optional\nwhile (true) {\n    try {\n        const orderbook = await exchange.watchOrderBook (symbol, limit)\n        // your reaction to the update takes place here\n        // you arrive here after receiving the update from the exchange in real time\n        console.log (orderbook) // every update\n    } catch (e) {\n        console.log (e)\n        // throw e // uncomment to stop the loop on exceptions\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Exchange Status in JavaScript\nDESCRIPTION: Shows the fetchStatus method that retrieves the latest known information on the availability of the exchange API. This information can be hardcoded or fetched live from the exchange.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_115\n\nLANGUAGE: javascript\nCODE:\n```\nfetchStatus(params = {})\n```\n\n----------------------------------------\n\nTITLE: CCXT Exchange Structure in JavaScript\nDESCRIPTION: Overview of the exchange object structure in CCXT, showing standard properties including capabilities, timeframes, API URLs, and credential fields. This structure is common across all supported exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'id':   'exchange'                  // lowercase string exchange id\n    'name': 'Exchange'                  // human-readable string\n    'countries': [ 'US', 'CN', 'EU' ],  // array of ISO country codes\n    'urls': {\n        'api': 'https://api.example.com/data',  // string or dictionary of base API URLs\n        'www': 'https://www.example.com'        // string website URL\n        'doc': 'https://docs.example.com/api',  // string URL or array of URLs\n    },\n    'version':         'v1',            // string ending with digits\n    'api':             { ... },         // dictionary of api endpoints\n    'has': {                            // exchange capabilities\n        'CORS': false,\n        'publicAPI': true,\n        'privateAPI': true,\n        'cancelOrder': true,\n        'createDepositAddress': false,\n        'createOrder': true,\n        'deposit': false,\n        'fetchBalance': true,\n        'fetchClosedOrders': false,\n        'fetchCurrencies': false,\n        'fetchDepositAddress': false,\n        'fetchMarkets': true,\n        'fetchMyTrades': false,\n        'fetchOHLCV': false,\n        'fetchOpenOrders': false,\n        'fetchOrder': false,\n        'fetchOrderBook': true,\n        'fetchOrders': false,\n        'fetchStatus': 'emulated',\n        'fetchTicker': true,\n        'fetchTickers': false,\n        'fetchBidsAsks': false,\n        'fetchTrades': true,\n        'withdraw': false,\n    },\n    'timeframes': {                     // empty if the exchange.has['fetchOHLCV'] !== true\n        '1m': '1minute',\n        '1h': '1hour',\n        '1d': '1day',\n        '1M': '1month',\n        '1y': '1year',\n    },\n    'timeout':          10000,          // number in milliseconds\n    'rateLimit':        2000,           // number in milliseconds\n    'userAgent':       'ccxt/1.1.1 ...' // string, HTTP User-Agent header\n    'verbose':          false,          // boolean, output error details\n    'markets':         { ... }          // dictionary of markets/pairs by symbol\n    'symbols':         [ ... ]          // sorted list of string symbols (traded pairs)\n    'currencies':      { ... }          // dictionary of currencies by currency code\n    'markets_by_id':   { ... },         // dictionary of dictionaries (markets) by id\n    'proxy': 'https://crossorigin.me/', // string URL\n    'apiKey':   '92560ffae9b8a0421...', // string public apiKey (ASCII, hex, Base64, ...)\n    'secret':   '9aHjPmW+EtRRKN/Oi...'  // string private secret key\n    'password': '6kszf4aci8r',          // string password\n    'uid':      '123456',               // string user id\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Tickers in Python with CCXT\nDESCRIPTION: Example showing how to fetch tickers for specific symbol pairs in Python. This allows limiting API requests to only the tickers of interest.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_57\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nif (exchange.has['fetchTickers']):\n    print(exchange.fetch_tickers(['ETH/BTC', 'LTC/BTC'])) # listed tickers indexed by their symbols\n```\n\n----------------------------------------\n\nTITLE: ID-based Pagination in Python\nDESCRIPTION: Demonstrates how to paginate through orders using ID-based pagination in Python with CCXT. Uses a from_id parameter to track position and accumulates results.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_42\n\nLANGUAGE: Python\nCODE:\n```\nif exchange.has['fetchOrders']:\n    from_id = 'abc123'  # all ids are strings\n    all_orders = []\n    while True:\n        symbol = None  # change for your symbol\n        since = None\n        limit = 20  # change for your limit\n        params = {\n            'from_id': from_id,  # exchange-specific non-unified parameter name\n        }\n        orders = await exchange.fetch_orders(symbol, since, limit, params)\n        if len(orders):\n            from_id = orders[len(orders) - 1]['id']\n            all_orders += orders\n        else:\n            break\n```\n\n----------------------------------------\n\nTITLE: Fetching All Tickers at Once with Python\nDESCRIPTION: Code for retrieving all tickers from an exchange simultaneously using Python with CCXT. Returns all available tickers indexed by their symbols.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_62\n\nLANGUAGE: python\nCODE:\n```\n# Python\nif (exchange.has['fetchTickers']):\n    print(exchange.fetch_tickers()) # all tickers indexed by their symbols\n```\n\n----------------------------------------\n\nTITLE: Checking Exchange Capabilities in PHP\nDESCRIPTION: Example of how to check which order-related methods are supported by an exchange using the .has property in PHP.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_75\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\n$exchange = new \\ccxt\\liqui ();\nprint_r ($exchange->has); // or var_dump\n```\n\n----------------------------------------\n\nTITLE: Fetching All Orders with JavaScript\nDESCRIPTION: Example of how to fetch all orders using the fetchOrders method. This method accepts optional parameters for filtering by symbol, timeframe, and limiting the number of results.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['fetchOrders'])\n    exchange.fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Personal Trades in Python with CCXT\nDESCRIPTION: This snippet shows how to fetch historical personal trades using the CCXT library in Python. It demonstrates the fetch_my_trades method with optional parameters for symbol, since (timestamp), limit, and additional parameters.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_104\n\nLANGUAGE: python\nCODE:\n```\n# Python\n# fetch_my_trades (symbol = None, since = None, limit = None, params = {})\n\nif exchange.has['fetchMyTrades']:\n    exchange.fetch_my_trades (symbol = None, since = None, limit = None, params = {})\n```\n\n----------------------------------------\n\nTITLE: Calculating Market Price with CCXT in JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch an order book and calculate the current market price, including bid, ask, and spread, using CCXT in JavaScript.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet orderbook = exchange.fetchOrderBook (exchange.symbols[0])\nlet bid = orderbook.bids.length ? orderbook.bids[0][0] : undefined\nlet ask = orderbook.asks.length ? orderbook.asks[0][0] : undefined\nlet spread = (bid && ask) ? ask - bid : undefined\nconsole.log (exchange.id, 'market price', { bid, ask, spread })\n```\n\n----------------------------------------\n\nTITLE: Placing Market Orders in CCXT\nDESCRIPTION: This snippet shows the various methods for creating market buy and sell orders using CCXT, including both camelCase and underscore notations.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\n// camelCaseNotation\nexchange.createMarketSellOrder (symbol, amount[, params])\nexchange.createMarketBuyOrder (symbol, amount[, params])\n\n// underscore_notation\nexchange.create_market_sell_order (symbol, amount[, params])\nexchange.create_market_buy_order (symbol, amount[, params])\n\n// using general createOrder, type = 'market' and side = 'buy' or 'sell'\nexchange.createOrder (symbol, 'market', 'sell', amount, ...)\nexchange.create_order (symbol, 'market', 'buy', amount, ...)\n```\n\n----------------------------------------\n\nTITLE: Instantiating Exchange Objects in JavaScript\nDESCRIPTION: JavaScript examples for creating exchange instances with the CCXT library, including using default and custom IDs, creating multiple instances, and configuring API credentials and other parameters.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nconst ccxt = require ('ccxt')\nlet exchange = new ccxt.kraken () // default id\nlet kraken1 = new ccxt.kraken ({ id: 'kraken1' })\nlet kraken2 = new ccxt.kraken ({ id: 'kraken2' })\nlet id = 'coinbasepro'\nlet coinbasepro = new ccxt[id] ();\n\n// from variable id\nconst exchangeId = 'binance'\n    , exchangeClass = ccxt[exchangeId]\n    , exchange = new exchangeClass ({\n        'apiKey': 'YOUR_API_KEY',\n        'secret': 'YOUR_SECRET',\n        'timeout': 30000,\n        'enableRateLimit': true,\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating Specialized Order Types in CCXT\nDESCRIPTION: Examples of how to create specialized order types (like stopLimit) by overriding the default parameters in JavaScript, Python, and PHP. This approach is necessary as order types beyond limit and market are not unified in CCXT.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\nconst symbol = 'ETH/BTC'\nconst type = 'limit' // or 'market', other types aren't unified yet\nconst side = 'sell'\nconst amount = 123.45 // your amount\nconst price = 54.321 // your price\n// overrides\nconst params = {\n    'stopPrice': 123.45, // your stop price\n    'type': 'stopLimit',\n}\nconst order = await exchange.createOrder (symbol, type, side, amount, price, params)\n```\n\nLANGUAGE: python\nCODE:\n```\nsymbol = 'ETH/BTC'\ntype = 'limit'  # or 'market', other types aren't unified yet\nside = 'sell'\namount = 123.45  # your amount\nprice = 54.321  # your price\n# overrides\nparams = {\n    'stopPrice': 123.45,  # your stop price\n    'type': 'stopLimit',\n}\norder = exchange.create_order(symbol, type, side, amount, price, params)\n```\n\nLANGUAGE: php\nCODE:\n```\n$symbol = 'ETH/BTC';\n$type = 'limit'; // or 'market', other types aren't unified yet\n$side = 'sell';\n$amount = 123.45; // your amount\n$price = 54.321; // your price\n// overrides\n$params = {\n    'stopPrice': 123.45, // your stop price\n    'type': 'stopLimit',\n}\n$order = $exchange->create_order ($symbol, $type, $side, $amount, $price, $params);\n```\n\n----------------------------------------\n\nTITLE: Order Book Fetching in Multiple Languages\nDESCRIPTION: Shows how to fetch order book data with rate limiting across JavaScript, Python and PHP implementations.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\ndelay = 2000 // milliseconds = seconds * 1000\n(async () => {\n    for (symbol in exchange.markets) {\n        console.log (await exchange.fetchOrderBook (symbol))\n        await new Promise (resolve => setTimeout (resolve, delay)) // rate limit\n    }\n}) ()\n```\n\nLANGUAGE: Python\nCODE:\n```\nimport time\ndelay = 2 # seconds\nfor symbol in exchange.markets:\n    print (exchange.fetch_order_book (symbol))\n    time.sleep (delay) # rate limit\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$delay = 2000000; // microseconds = seconds * 1000000\nforeach ($exchange->markets as $symbol => $market) {\n    var_dump ($exchange->fetch_order_book ($symbol));\n    usleep ($delay); // rate limit\n}\n```\n\n----------------------------------------\n\nTITLE: Exchange Capability Structure in CCXT\nDESCRIPTION: Example of the 'has' property structure that indicates which order-related methods are available for a particular exchange. Shows how flags indicate direct support, emulated functionality, or missing features.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nexchange.has = {\n\n    // ... other flags ...\n\n    'fetchOrder': true, // available from the exchange directly and implemented in ccxt\n    'fetchOrders': false, // not available from the exchange or not implemented in ccxt\n    'fetchOpenOrders': true,\n    'fetchClosedOrders': 'emulated', // not available from the exchange, but emulated in ccxt\n\n    // ... other flags ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Market Price and Spread in PHP\nDESCRIPTION: Shows how to calculate the current market price and bid-ask spread using the order book data in PHP.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n$orderbook = $exchange->fetch_order_book ($exchange->symbols[0]);\n$bid = count ($orderbook['bids']) ? $orderbook['bids'][0][0] : null;\n$ask = count ($orderbook['asks']) ? $orderbook['asks'][0][0] : null;\n$spread = ($bid && $ask) ? $ask - $bid : null;\n$result = array ('bid' => $bid, 'ask' => $ask, 'spread' => $spread);\nvar_dump ($exchange->id, 'market price', $result);\n```\n\n----------------------------------------\n\nTITLE: Comprehensive PHP Example for Trading Operations\nDESCRIPTION: Complete PHP example demonstrating connection to multiple exchanges, loading markets, fetching data, and creating different types of orders.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/README.md#2025-04-23_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\ninclude 'ccxt.php';\n\n$poloniex = new \\ccxt\\poloniex ();\n$bittrex  = new \\ccxt\\bittrex  (array ('verbose' => true));\n$quoinex  = new \\ccxt\\quoinex   ();\n$zaif     = new \\ccxt\\zaif     (array (\n    'apiKey' => 'YOUR_PUBLIC_API_KEY',\n    'secret' => 'YOUR_SECRET_PRIVATE_KEY',\n));\n$hitbtc   = new \\ccxt\\hitbtc   (array (\n    'apiKey' => 'YOUR_PUBLIC_API_KEY',\n    'secret' => 'YOUR_SECRET_PRIVATE_KEY',\n));\n\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class (array (\n    'apiKey' => 'YOUR_API_KEY',\n    'secret' => 'YOUR_SECRET',\n    'timeout' => 30000,\n    'enableRateLimit' => true,\n));\n\n$poloniex_markets = $poloniex->load_markets ();\n\nvar_dump ($poloniex_markets);\nvar_dump ($bittrex->load_markets ());\nvar_dump ($quoinex->load_markets ());\n\nvar_dump ($poloniex->fetch_order_book ($poloniex->symbols[0]));\nvar_dump ($bittrex->fetch_trades ('BTC/USD'));\nvar_dump ($quoinex->fetch_ticker ('ETH/EUR'));\nvar_dump ($zaif->fetch_ticker ('BTC/JPY'));\n\nvar_dump ($zaif->fetch_balance ());\n\n// sell 1 BTC/JPY for market price, you pay ¥ and receive ฿ immediately\nvar_dump ($zaif->id, $zaif->create_market_sell_order ('BTC/JPY', 1));\n\n// buy BTC/JPY, you receive ฿1 for ¥285000 when the order closes\nvar_dump ($zaif->id, $zaif->create_limit_buy_order ('BTC/JPY', 1, 285000));\n\n// set a custom user-defined id to your order\n$hitbtc->create_order ('BTC/USD', 'limit', 'buy', 1, 3000, array ('clientOrderId' => '123'));\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Order Types with clientOrderId in CCXT\nDESCRIPTION: Examples demonstrating how to specify a custom clientOrderId when creating orders in JavaScript, Python, and PHP. This allows users to distinguish between their own orders later.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\nexchange.createOrder (symbol, type, side, amount, price, {\n    'clientOrderId': 'Hello',\n})\n```\n\nLANGUAGE: python\nCODE:\n```\nexchange.create_order(symbol, type, side, amount, price, {\n    'clientOrderId': 'World',\n})\n```\n\nLANGUAGE: php\nCODE:\n```\n$exchange->create_order($symbol, $type, $side, $amount, $price, array(\n    'clientOrderId' => 'Foobar',\n))\n```\n\n----------------------------------------\n\nTITLE: Error Handling in JavaScript\nDESCRIPTION: Example of handling CCXT exceptions in JavaScript using try-catch blocks. Demonstrates how to handle different error types including NetworkError and ExchangeError when calling API methods.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_126\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\n\n// try to call a unified method\ntry {\n    const response = await exchange.fetchTicker ('ETH/BTC')\n    console.log (response)\n} catch (e) {\n    // if the exception is thrown, it is \"caught\" and can be handled here\n    // the handling reaction depends on the type of the exception\n    // and on the purpose or business logic of your application\n    if (e instanceof ccxt.NetworkError) {\n        console.log (exchange.id, 'fetchTicker failed due to a network error:', e.message)\n        // retry or whatever\n        // ...\n    } else if (e instanceof ccxt.ExchangeError) {\n        console.log (exchange.id, 'fetchTicker failed due to exchange error:', e.message)\n        // retry or whatever\n        // ...\n    } else {\n        console.log (exchange.id, 'fetchTicker failed with:', e.message)\n        // retry or whatever\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Market Orders in Multiple Languages\nDESCRIPTION: This snippet shows how to create market sell and buy orders using both camelCase and underscore notation in JavaScript, Python, and PHP. It also demonstrates using the general createOrder method with 'market' type.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_85\n\nLANGUAGE: JavaScript\nCODE:\n```\n// camelCaseNotation\nexchange.createMarketSellOrder (symbol, amount[, params])\nexchange.createMarketBuyOrder (symbol, amount[, params])\n\n// underscore_notation\nexchange.create_market_sell_order (symbol, amount[, params])\nexchange.create_market_buy_order (symbol, amount[, params])\n\n// using general createOrder, type = 'market' and side = 'buy' or 'sell'\nexchange.createOrder (symbol, 'market', 'sell', amount, ...)\nexchange.create_order (symbol, 'market', 'buy', amount, ...)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous API Call in JavaScript\nDESCRIPTION: This snippet demonstrates an asynchronous API call to fetch symbol details and ticker information from the Kraken exchange using JavaScript's async/await syntax.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\n(async () => {\n    let pairs = await kraken.publicGetSymbolsDetails()\n    let marketIds = Object.keys(pairs['result'])\n    let marketId = marketIds[0]\n    let ticker = await kraken.publicGetTicker({ pair: marketId })\n    console.log(kraken.id, marketId, ticker)\n})()\n```\n\n----------------------------------------\n\nTITLE: Checking Exchange Capabilities in JavaScript\nDESCRIPTION: Example of how to check which order-related methods are supported by an exchange using the .has property in JavaScript.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_73\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\n'use strict';\n\nconst ccxt = require ('ccxt')\nconst id = 'poloniex'\nexchange = new ccxt[id] ()\nconsole.log (exchange.has)\n```\n\n----------------------------------------\n\nTITLE: Date-based Pagination for Fetching My Trades in PHP\nDESCRIPTION: Implementation of date-based pagination in PHP to fetch all user trades within a time range. This code uses the since parameter and timestamp comparison to paginate through trade data.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_40\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['fetchMyTrades']) {\n    $since = exchange->milliseconds () - 86400000; // -1 day from now\n    // alternatively, fetch from a certain starting datetime\n    // $since = $exchange->parse8601 ('2018-01-01T00:00:00Z');\n    $all_trades = array ();\n    while (since < exchange->milliseconds ()) {\n        $symbol = null; // change for your symbol\n        $limit = 20; // change for your limit\n        $trades = $exchange->fetchMyTrades ($symbol, $since, $limit);\n        if (count($trades)) {\n            $since = $trades[count($trades) - 1]['timestamp'];\n            $all_trades = array_merge ($all_trades, $trades);\n        } else {\n            break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Exchange Capabilities in Multiple Languages\nDESCRIPTION: Examples showing how to check the 'has' property of an exchange instance across different programming languages. This helps determine which order-related methods are available for a specific exchange.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\n'use strict';\n\nconst ccxt = require ('ccxt')\nconst id = 'poloniex'\nexchange = new ccxt[id] ()\nconsole.log (exchange.has)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Python\nimport ccxt\nid = 'binance'\nexchange = getattr(ccxt, id) ()\nprint(exchange.has)\n```\n\nLANGUAGE: php\nCODE:\n```\n// PHP\n$exchange = new \\ccxt\\liqui ();\nprint_r ($exchange->has); // or var_dump\n```\n\n----------------------------------------\n\nTITLE: Watching OHLCV Candles in Python with CCXT Pro\nDESCRIPTION: Implementation of the watch_ohlcv method in Python to continuously monitor OHLCV candle data. Uses an infinite loop with error handling and outputs timestamp-formatted data for each update.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nif exchange.has['watchOHLCV']:\n    while True:\n        try:\n            candles = await exchange.watch_ohlcv(symbol, since, limit, params)\n            print(exchange.iso8601(exchange.milliseconds()), candles)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # rasie e\n```\n\n----------------------------------------\n\nTITLE: Watching Trades with PHP in CCXT Pro\nDESCRIPTION: This snippet demonstrates how to use the watchTrades method in PHP with CCXT Pro. It sets up a loop to continuously fetch and display trade data for a specified symbol, with error handling.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nif ($exchange->has['watchTrades']) {\n    $main = function () use (&$exchange, &$main, $symbol, $since, $limit, $params) {\n        $exchange->watch_trades($symbol, $since, $limit, $params)->then(function($trades) use (&$main) {\n            echo date('c'), ' ', json_encode($trades), \"\\n\";\n            $main();\n        })->otherwise(function (\\Exception $e) use (&$main) {\n            echo get_class ($e), ' ', $e->getMessage (), \"\\n\";\n            $main();\n            // stop the loop on exception or leave it commented to retry\n            // throw $e;\n        });\n    };\n    $loop->futureTick($main);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Special Order Types with Parameter Overrides in JavaScript\nDESCRIPTION: Example showing how to create a stop-limit order by overriding the unified API parameters in JavaScript. This demonstrates specifying a stopPrice and changing the order type to stopLimit.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_95\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst symbol = 'ETH/BTC'\nconst type = 'limit' // or 'market', other types aren't unified yet\nconst side = 'sell'\nconst amount = 123.45 // your amount\nconst price = 54.321 // your price\n// overrides\nconst params = {\n    'stopPrice': 123.45, // your stop price\n    'type': 'stopLimit',\n}\nconst order = await exchange.createOrder (symbol, type, side, amount, price, params)\n```\n\n----------------------------------------\n\nTITLE: Overriding Unified API Params in Python\nDESCRIPTION: Example of passing custom parameters to a CCXT unified API method in Python. This code shows how to use the params dictionary to override default settings when fetching an order book.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_36\n\nLANGUAGE: Python\nCODE:\n```\nparams = {\n    'foo': 'bar',       # exchange-specific overrides in unified queries\n    'Hello': 'World!',  # see their docs for more details on parameter names\n}\n\n# overrides go in the last argument to the unified call ↓ HERE\nresult = exchange.fetch_order_book(symbol, length, params)\n```\n\n----------------------------------------\n\nTITLE: Loading Markets in JavaScript\nDESCRIPTION: Demonstrates how to load markets for a specific exchange (Kraken in this example) using the CCXT library in JavaScript.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n(async () => {\n    let kraken = new ccxt.kraken ()\n    let markets = await kraken.load_markets ()\n    console.log (kraken.id, markets)\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Loading Market Data in Python with CCXT\nDESCRIPTION: Shows how to use CCXT with Poloniex exchange in Python, including market data loading, accessing market information, and forcing data reload.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\npoloniex = ccxt.poloniex({'verbose': True}) # log HTTP requests\npoloniex.load_markets() # request markets\nprint(poloniex.id, poloniex.markets)   # output a full list of all loaded markets\nprint(list(poloniex.markets.keys())) # output a short list of market symbols\nprint(poloniex.markets['BTC/ETH'])     # output single market details\npoloniex.load_markets() # return a locally cached version, no reload\nreloadedMarkets = poloniex.load_markets(True) # force HTTP reload = True\nprint(reloadedMarkets['ETH/ZEC'])\n```\n\n----------------------------------------\n\nTITLE: Basic Market Loading in Python\nDESCRIPTION: Demonstrates how to initialize an OKCoin exchange instance and load market data using Python.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nokcoin = ccxt.okcoinusd ()\nmarkets = okcoin.load_markets ()\nprint (okcoin.id, markets)\n```\n\n----------------------------------------\n\nTITLE: Market Fee Structure in JavaScript\nDESCRIPTION: Example of the fee information available in the markets object. This includes maker and taker fees, tier-based fee structures, and information about whether fees are percentage-based or fixed amounts.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_120\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'taker': 0.002,   // taker fee rate, 0.002 = 0.2%\n    'maker': 0.0016,  // maker fee rate, 0.0016 = 0.16%\n    'percentage': true, // whether the taker and maker fee rate is a multiplier or a fixed flat amount\n    'tierBased': false, // whether the fee depends on your trading tier (your trading volume)\n\n    'tiers': {\n        'taker': [\n            [0, 0.0026], // tupple (trade volume in USD, taker fee) ordered by increasing volume\n            [50000, 0.0024],\n            ...\n        ],\n        'maker': [\n            [0, 0.0016], // tupple (trade volume in USD, maker fee) ordered by increasing volume\n            [50000, 0.0014],\n            ...\n        ],\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous API Calls in JavaScript with CCXT\nDESCRIPTION: Demonstrates how to make asynchronous API calls using JavaScript's async/await syntax with the CCXT library. This example fetches symbol details and ticker information from the Kraken exchange.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\n\n(async () => {\n    let pairs = await kraken.publicGetSymbolsDetails ()\n    let marketIds = Object.keys (pairs['result'])\n    let marketId = marketIds[0]\n    let ticker = await kraken.publicGetTicker ({ pair: marketId })\n    console.log (kraken.id, marketId, ticker)\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Advanced PHP CCXT Usage Example\nDESCRIPTION: Comprehensive PHP example demonstrating how to initialize different exchanges, load markets, fetch market data, check balances, and create various types of orders.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/README.rst#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ninclude 'ccxt.php';\n\n$poloniex = new \\ccxt\\poloniex ();\n$bittrex  = new \\ccxt\\bittrex  (array ('verbose' => true));\n$quoinex  = new \\ccxt\\quoinex   ();\n$zaif     = new \\ccxt\\zaif     (array (\n    'apiKey' => 'YOUR_PUBLIC_API_KEY',\n    'secret' => 'YOUR_SECRET_PRIVATE_KEY',\n));\n$hitbtc   = new \\ccxt\\hitbtc   (array (\n    'apiKey' => 'YOUR_PUBLIC_API_KEY',\n    'secret' => 'YOUR_SECRET_PRIVATE_KEY',\n));\n\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class (array (\n    'apiKey' => 'YOUR_API_KEY',\n    'secret' => 'YOUR_SECRET',\n    'timeout' => 30000,\n    'enableRateLimit' => true,\n));\n\n$poloniex_markets = $poloniex->load_markets ();\n\nvar_dump ($poloniex_markets);\nvar_dump ($bittrex->load_markets ());\nvar_dump ($quoinex->load_markets ());\n\nvar_dump ($poloniex->fetch_order_book ($poloniex->symbols[0]));\nvar_dump ($bittrex->fetch_trades ('BTC/USD'));\nvar_dump ($quoinex->fetch_ticker ('ETH/EUR'));\nvar_dump ($zaif->fetch_ticker ('BTC/JPY'));\n\nvar_dump ($zaif->fetch_balance ());\n\n// sell 1 BTC/JPY for market price, you pay ¥ and receive ฿ immediately\nvar_dump ($zaif->id, $zaif->create_market_sell_order ('BTC/JPY', 1));\n\n// buy BTC/JPY, you receive ฿1 for ¥285000 when the order closes\nvar_dump ($zaif->id, $zaif->create_limit_buy_order ('BTC/JPY', 1, 285000));\n\n// set a custom user-defined id to your order\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxies Programmatically in Python CCXT\nDESCRIPTION: Python code examples showing how to configure HTTP and HTTPS proxies for a CCXT exchange instance during or after initialization.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt\nexchange = ccxt.poloniex({\n    'proxies': {\n        'http': 'http://10.10.1.10:3128',  # these proxies won't work for you, they are here for example\n        'https': 'https://10.10.1.10:1080',\n    },\n})\n```\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt\nexchange = ccxt.poloniex()\nexchange.proxies = {\n  'http': 'http://10.10.1.10:3128', # these proxies won't work for you, they are here for example\n  'https': 'https://10.10.1.10:1080',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Orders with User-defined clientOrderId in Python\nDESCRIPTION: Example demonstrating how to set a custom clientOrderId when creating orders in Python. This allows users to identify their own orders by a unique identifier.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_93\n\nLANGUAGE: Python\nCODE:\n```\nexchange.create_order(symbol, type, side, amount, price, {\n    'clientOrderId': 'World',\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Order by ID Using PHP\nDESCRIPTION: Demonstrates how to fetch a specific order using its ID with the fetch_order method in PHP. Includes feature detection to ensure the exchange supports this functionality.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_88\n\nLANGUAGE: php\nCODE:\n```\n// PHP\nif ($exchange->has['fetchOrder']) {\n    $order = $exchange->fetch_order ($id);\n    var_dump ($order);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Order by ID Using Python\nDESCRIPTION: Shows how to fetch a specific order using its ID with the fetch_order method in Python. Includes both synchronous and asynchronous implementations with error handling.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_87\n\nLANGUAGE: python\nCODE:\n```\n# Python 3 (synchronous)\nif exchange.has['fetchOrder']:\n    order = exchange.fetch_order(id)\n    print(order)\n\n# Python 3.5+ asyncio (asynchronous)\nimport asyncio\nimport ccxt.async_support as ccxt\nif exchange.has['fetchOrder']:\n    order = asyncio.get_event_loop().run_until_complete(exchange.fetch_order(id))\n    print(order)\n```\n\n----------------------------------------\n\nTITLE: Overriding Unified API Params in JavaScript\nDESCRIPTION: Example of how to pass custom parameters to a CCXT unified API method in JavaScript. This code demonstrates using the params dictionary to override default settings when fetching an order book.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\n(async () => {\n\n    const params = {\n        'foo': 'bar',      // exchange-specific overrides in unified queries\n        'Hello': 'World!', // see their docs for more details on parameter names\n    }\n\n    // the overrides go into the last argument to the unified call ↓ HERE\n    const result = await exchange.fetchOrderBook (symbol, length, params)\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Canceling Orders in CCXT\nDESCRIPTION: Examples showing how to cancel existing orders using the cancelOrder method in JavaScript, Python, and PHP. The method requires the order ID and sometimes the symbol parameter depending on the exchange.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nexchange.cancelOrder ('1234567890') // replace with your order id here (a string)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Python\nexchange.cancel_order ('1234567890') # replace with your order id here (a string)\n```\n\nLANGUAGE: php\nCODE:\n```\n// PHP\n$exchange->cancel_order ('1234567890'); // replace with your order id here (a string)\n```\n\n----------------------------------------\n\nTITLE: Creating Limit Orders with Custom Parameters in JavaScript\nDESCRIPTION: Example demonstrating how to create a limit sell order with custom parameters in JavaScript. This shows how to specify a custom order type ('trailing-stop') using the params argument.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_89\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\n// use a custom order type\nbitfinex.createLimitSellOrder ('BTC/USD', 1, 10, { 'type': 'trailing-stop' })\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket-based Orderbook Stream in JavaScript\nDESCRIPTION: This snippet shows how to implement a stream-based orderbook feed using CCXT Pro's WebSocket API. It continuously watches the orderbook for a specified symbol and limit, then processes the incoming data.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nwhile (condition) {\n\n    try {\n\n        // watch some of the public data\n        orderbook = await exchange.watchOrderBook (symbol, limit)\n\n        // do something or react somehow based on that data\n        // ...\n\n    } catch (e) {\n\n        // handle errors\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching OHLCV Data in Python with CCXT\nDESCRIPTION: Example showing how to fetch OHLCV candlestick data for all symbols in Python. Includes rate limiting for API requests and uses the daily timeframe.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_61\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nimport time\nif exchange.has['fetchOHLCV']:\n    for symbol in exchange.markets:\n        time.sleep (exchange.rateLimit / 1000) # time.sleep wants seconds\n        print (symbol, exchange.fetch_ohlcv (symbol, '1d')) # one day\n```\n\n----------------------------------------\n\nTITLE: Loading Market Data in PHP with CCXT\nDESCRIPTION: This PHP example shows how to initialize a Bitfinex exchange instance with verbose logging, load market data, and display different views of the market information including full listings and specific pair details.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n// PHP\n$bitfinex = new \\ccxt\\bitfinex (array ('verbose' => true)); // log HTTP requests\n$bitfinex.load_markets (); // request markets\nvar_dump ($bitfinex->id, $bitfinex->markets); // output a full list of all loaded markets\nvar_dump (array_keys ($bitfinex->markets));   // output a short list of market symbols\nvar_dump ($bitfinex->markets['XRP/USD']);     // output single market details\n$bitfinex->load_markets (); // return a locally cached version, no reload\n$reloadedMarkets = $bitfinex->load_markets (true); // force HTTP reload = true\nvar_dump ($bitfinex->markets['XRP/BTC']);\n```\n\n----------------------------------------\n\nTITLE: Watching Tickers in PHP with CCXT Pro\nDESCRIPTION: Implementation of the watch_tickers method in PHP to continuously monitor ticker data for specified symbols. Uses promises for asynchronous execution with error handling and recursive function calls to maintain the loop.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['watchTickers']) {\n    $main = function () use (&$exchange, &$main, $symbols, $params) {\n        $exchange->watch_tickers($symbols, $params)->then(function($tickers) use (&$main) {\n            echo date('c'), ' ', json_encode($tickers), \"\\n\";\n            $main();\n        })->otherwise(function (\\Exception $e) use (&$main) {\n            echo get_class ($e), ' ', $e->getMessage (), \"\\n\";\n            $main();\n            // stop the loop on exception or leave it commented to retry\n            // throw $e;\n        });\n    };\n    $loop->futureTick($main);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Order by ID in JavaScript\nDESCRIPTION: Demonstrates how to fetch details of a particular order by its ID using an asynchronous function in JavaScript.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_80\n\nLANGUAGE: JavaScript\nCODE:\n```\n(async function () {\n    const order = await exchange.fetchOrder (id)\n    console.log (order)\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Tickers with Python\nDESCRIPTION: Code for retrieving tickers for a specific list of symbols using Python with CCXT. Returns only the requested tickers indexed by their symbols.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_65\n\nLANGUAGE: python\nCODE:\n```\n# Python\nif (exchange.has['fetchTickers']):\n    print(exchange.fetch_tickers(['ETH/BTC', 'LTC/BTC'])) # listed tickers indexed by their symbols\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to API Methods\nDESCRIPTION: These snippets demonstrate how to pass parameters to API methods for different exchanges in JavaScript, Python, and PHP.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nbitso.publicGetTicker({ book: 'eth_mxn' })\n```\n\nLANGUAGE: Python\nCODE:\n```\nccxt.zaif().public_get_ticker_pair({ 'pair': 'btc_jpy' })\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$luno->public_get_ticker(array('pair' => 'XBTIDR'));\n```\n\n----------------------------------------\n\nTITLE: Deposit Address Functions in CCXT\nDESCRIPTION: This code block shows the methods for fetching and creating deposit addresses in CCXT. It includes the fetchDepositAddress and createDepositAddress methods, as well as fetchDepositAddresses for retrieving multiple addresses.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\nfetchDepositAddress (code, params = {})\ncreateDepositAddress (code, params = {})\n\nfetchDepositAddresses (codes = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Order by ID in Python\nDESCRIPTION: Shows how to fetch order details by ID in both synchronous and asynchronous Python code.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_81\n\nLANGUAGE: Python\nCODE:\n```\n# Python 3 (synchronous)\nif exchange.has['fetchOrder']:\n    order = exchange.fetch_order(id)\n    print(order)\n\n# Python 3.5+ asyncio (asynchronous)\nimport asyncio\nimport ccxt.async_support as ccxt\nif exchange.has['fetchOrder']:\n    order = asyncio.get_event_loop().run_until_complete(exchange.fetch_order(id))\n    print(order)\n```\n\n----------------------------------------\n\nTITLE: Using watchTickers in JavaScript, Python, and PHP\nDESCRIPTION: Code examples demonstrating how to use the watchTickers method to stream multiple tickers simultaneously. This method accepts an array of symbols and additional params, returning real-time ticker information for multiple markets.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nif (exchange.has['watchTickers']) {\n    while (true) {\n        try {\n            const tickers = await exchange.watchTickers (symbols, params)\n            console.log (new Date (), tickers)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n# Python\nif exchange.has['watchTickers']:\n    while True:\n        try:\n            tickers = await exchange.watch_tickers(symbols, params)\n            print(exchange.iso8601(exchange.milliseconds()), tickers)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # rasie e\n```\n\nLANGUAGE: php\nCODE:\n```\n// PHP\nif ($exchange->has['watchTickers']) {\n    $main = function () use (&$exchange, &$main, $symbols, $params) {\n        $exchange->watch_tickers($symbols, $params)->then(function($tickers) use (&$main) {\n            echo date('c'), ' ', json_encode($tickers), \"\\n\";\n            $main();\n        })->otherwise(function (\\Exception $e) use (&$main) {\n            echo get_class ($e), ' ', $e->getMessage (), \"\\n\";\n            $main();\n            // stop the loop on exception or leave it commented to retry\n            // throw $e;\n        });\n    };\n    $loop->futureTick($main);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Individual Ticker Data with JavaScript\nDESCRIPTION: Code for retrieving a ticker for a specific symbol or a random symbol using JavaScript with CCXT. The function first checks if the exchange supports the fetchTicker method, then retrieves the ticker data asynchronously.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nif (exchange.has['fetchTicker']) {\n    console.log (await (exchange.fetchTicker ('BTC/USD'))) // ticker for BTC/USD\n    let symbols = Object.keys (exchange.markets)\n    let random = Math.floor (Math.random () * (symbols.length - 1))\n    console.log (exchange.fetchTicker (symbols[random])) // ticker for a random symbol\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Market Data in JavaScript with CCXT\nDESCRIPTION: Demonstrates how to initialize a Kraken exchange instance, load market data, and force reload markets. Shows accessing market information and handling cached data.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\n(async () => {\n    let kraken = new ccxt.kraken ({ verbose: true }) // log HTTP requests\n    await kraken.load_markets () // request markets\n    console.log (kraken.id, kraken.markets)    // output a full list of all loaded markets\n    console.log (Object.keys (kraken.markets)) // output a short list of market symbols\n    console.log (kraken.markets['BTC/USD'])    // output single market details\n    await kraken.load_markets () // return a locally cached version, no reload\n    let reloadedMarkets = await kraken.load_markets (true) // force HTTP reload = true\n    console.log (reloadedMarkets['ETH/BTC'])\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Fetching All Tickers at Once with PHP\nDESCRIPTION: Code for retrieving all tickers from an exchange simultaneously using PHP with CCXT. Returns all available tickers indexed by their symbols.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_63\n\nLANGUAGE: php\nCODE:\n```\n// PHP\nif ($exchange->has['fetchTickers']) {\n    var_dump ($exchange->fetch_tickers ()); // all tickers indexed by their symbols\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Market Price and Spread in Python\nDESCRIPTION: Demonstrates how to calculate the current market price and bid-ask spread using the order book data in Python.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_56\n\nLANGUAGE: python\nCODE:\n```\norderbook = exchange.fetch_order_book (exchange.symbols[0])\nbid = orderbook['bids'][0][0] if len (orderbook['bids']) > 0 else None\nask = orderbook['asks'][0][0] if len (orderbook['asks']) > 0 else None\nspread = (ask - bid) if (bid and ask) else None\nprint (exchange.id, 'market price', { 'bid': bid, 'ask': ask, 'spread': spread })\n```\n\n----------------------------------------\n\nTITLE: CCXT Pro Real-Time Mode Example (JavaScript)\nDESCRIPTION: Pseudocode example of using CCXT Pro in real-time mode, where the function returns as soon as each new update arrives from the exchange.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// real-time mode\nconst limit = 5 // optional\nwhile (true) {\n    try {\n        const orderbook = await exchange.watchOrderBook (symbol, limit)\n        // your reaction to the update takes place here\n        // you arrive here after receiving the update from the exchange in real time\n        console.log (orderbook) // every update\n    } catch (e) {\n        console.log (e)\n        // throw e // uncomment to stop the loop on exceptions\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling an Order with CCXT in Python\nDESCRIPTION: Demonstrates how to cancel an order using the CCXT library in Python. The order ID is provided as a string argument to the cancel_order method.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_99\n\nLANGUAGE: Python\nCODE:\n```\nexchange.cancel_order ('1234567890') # replace with your order id here (a string)\n```\n\n----------------------------------------\n\nTITLE: Fetching All Tickers in Python with CCXT\nDESCRIPTION: Example of how to retrieve all tickers from an exchange using Python. This checks if the exchange supports the fetchTickers method before making the API call.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_54\n\nLANGUAGE: Python\nCODE:\n```\nif (exchange.has['fetchTickers']):\n    print(exchange.fetch_tickers()) # all tickers indexed by their symbols\n```\n\n----------------------------------------\n\nTITLE: Accessing Market Data in Python using CCXT\nDESCRIPTION: Demonstrates how to access market data for the Kraken exchange using Python in the CCXT library. Shows methods to retrieve market information by symbol and ID.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nkraken.markets['BTC/USD']                  # symbol → market (get market by symbol)\nkraken.markets_by_id['XXRPZUSD']           # id → market (get market by id)\n\nkraken.markets['BTC/USD']['id']            # symbol → id (get id by symbol)\nkraken.markets_by_id['XXRPZUSD']['symbol'] # id → symbol (get symbol by id)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous API Call in Python\nDESCRIPTION: This snippet shows how to make an asynchronous API call to fetch the ETH/BTC ticker from the Poloniex exchange using Python's asyncio and the ccxt.async_support subpackage.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nimport asyncio\nimport ccxt.async_support as ccxt\n\nasync def print_poloniex_ethbtc_ticker():\n    poloniex = ccxt.poloniex()\n    print(await poloniex.fetch_ticker('ETH/BTC'))\n\nasyncio.get_event_loop().run_until_complete(print_poloniex_ethbtc_ticker())\n```\n\n----------------------------------------\n\nTITLE: Implementing ID-Based Pagination in JavaScript for Fetching Trades\nDESCRIPTION: A JavaScript implementation of ID-based pagination that uses a trade ID as a reference point to fetch subsequent trades. The code incrementally builds a complete list of trades by using the ID of the last received trade.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nif (exchange.has['fetchTrades']) {\n    let from_id = 'abc123' // all ids are strings\n    let allTrades = []\n    while (true) {\n        const symbol = undefined // change for your symbol\n        const since = undefined\n        const limit = 20 // change for your limit\n        const params = {\n            'from_id': from_id, // exchange-specific non-unified parameter name\n        }\n        const trades = await exchange.fetchTrades (symbol, since, limit, params)\n        if (trades.length) {\n            from_id = trades[trades.length - 1]['id']\n            allTrades.push (trades)\n        } else {\n            break\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Market Order Support in Multiple Languages\nDESCRIPTION: This snippet demonstrates how to programmatically check if an exchange supports market orders using the .has['createMarketOrder'] property in JavaScript, Python, and PHP.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_86\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nif (exchange.has['createMarketOrder']) {\n    ...\n}\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nif exchange.has['createMarketOrder']:\n    ...\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\nif ($exchange->has['createMarketOrder']) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Ticker with CCXT in JavaScript\nDESCRIPTION: This snippet shows how to fetch a single ticker for a specific symbol using CCXT in JavaScript.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\n// one ticker\nfetchTicker (symbol, params = {})\n\n// example\nfetchTicker ('ETH/BTC')\nfetchTicker ('BTC/USDT')\n```\n\n----------------------------------------\n\nTITLE: Listing Available Exchange Methods\nDESCRIPTION: Examples of how to view all available methods for an exchange instance across languages\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log (new ccxt.kraken ())\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(dir(ccxt.hitbtc()))\n```\n\nLANGUAGE: php\nCODE:\n```\nvar_dump (new \\ccxt\\okcoinusd ());\n```\n\n----------------------------------------\n\nTITLE: Enabling DEBUG Logging in Python with CCXT\nDESCRIPTION: Code snippet demonstrating how to enable DEBUG level logging in Python when working with CCXT. This allows for verbose HTTP request logging through Python's standard logging mechanism.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Fetching OHLCV Data in JavaScript with CCXT\nDESCRIPTION: Example showing how to fetch OHLCV candlestick data for all symbols in JavaScript using async/await. Includes rate limiting for API requests.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_60\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nlet sleep = (ms) => new Promise (resolve => setTimeout (resolve, ms));\nif (exchange.has.fetchOHLCV) {\n    for (symbol in exchange.markets) {\n        await sleep (exchange.rateLimit) // milliseconds\n        console.log (await exchange.fetchOHLCV (symbol, '1m')) // one minute\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching All Tickers with CCXT in JavaScript\nDESCRIPTION: This snippet shows how to fetch all tickers at once using CCXT in JavaScript, if supported by the exchange.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['fetchTickers']) {\n    console.log (await (exchange.fetchTickers ())) // all tickers indexed by their symbols\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Market Price with CCXT in PHP\nDESCRIPTION: This snippet demonstrates how to fetch an order book and calculate the current market price, including bid, ask, and spread, using CCXT in PHP.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_50\n\nLANGUAGE: PHP\nCODE:\n```\n$orderbook = $exchange->fetch_order_book ($exchange->symbols[0]);\n$bid = count ($orderbook['bids']) ? $orderbook['bids'][0][0] : null;\n$ask = count ($orderbook['asks']) ? $orderbook['asks'][0][0] : null;\n$spread = ($bid && $ask) ? $ask - $bid : null;\n$result = array ('bid' => $bid, 'ask' => $ask, 'spread' => $spread);\nvar_dump ($exchange->id, 'market price', $result);\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Book Data with Rate Limiting in Python\nDESCRIPTION: A Python implementation for retrieving order book data for all market symbols with rate limiting. The code introduces sleep intervals between requests to avoid hitting exchange API limits.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_50\n\nLANGUAGE: python\nCODE:\n```\n# Python\nimport time\ndelay = 2 # seconds\nfor symbol in exchange.markets:\n    print (exchange.fetch_order_book (symbol))\n    time.sleep (delay) # rate limit\n```\n\n----------------------------------------\n\nTITLE: Implementing Time-Based Pagination in Python for Fetching Orders\nDESCRIPTION: A Python implementation of time-based pagination to fetch all orders from an exchange. This code uses a timestamp to paginate through order history by requesting orders newer than the last seen timestamp.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nwhile since < exchange.milliseconds():\n    symbol = None  # change for your symbol\n    limit = 20  # change for your limit\n    orders = await exchange.fetch_orders(symbol, since, limit)\n    if len(orders):\n        since = orders[len(orders) - 1]['timestamp']\n        all_orders += orders\n    else:\n        break\n```\n\n----------------------------------------\n\nTITLE: Canceling Orders in JavaScript\nDESCRIPTION: Example demonstrating how to cancel an existing order using its ID in JavaScript. This is a simple operation that requires passing the order ID to the cancelOrder method.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_98\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nexchange.cancelOrder ('1234567890') // replace with your order id here (a string)\n```\n\n----------------------------------------\n\nTITLE: Canceling an Order with CCXT in PHP\nDESCRIPTION: Shows how to cancel an order using the CCXT library in PHP. The order ID is provided as a string argument to the cancel_order method.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_100\n\nLANGUAGE: PHP\nCODE:\n```\n$exchange->cancel_order ('1234567890'); // replace with your order id here (a string)\n```\n\n----------------------------------------\n\nTITLE: Fetch All Transactions Implementation\nDESCRIPTION: Implementation of transaction fetching functionality across multiple languages with error handling for unsupported exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_113\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['fetchTransactions']) {\n    const transactions = await exchange.fetchTransactions (code, since, limit, params)\n} else {\n    throw new Error (exchange.id + ' does not have the fetchTransactions method')\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nif exchange.has['fetchTransactions']:\n    transactions = exchange.fetch_transactions(code, since, limit, params)\nelse:\n    raise Exception (exchange.id + ' does not have the fetch_transactions method')\n```\n\nLANGUAGE: php\nCODE:\n```\nif ($exchange->has['fetchTransactions']) {\n    $transactions = $exchange->fetch_transactions ($code, $since, $limit, $params);\n} else {\n    throw new Exception ($exchange->id . ' does not have the fetch_transactions method');\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CCXT Pro in PHP\nDESCRIPTION: Code example demonstrating how to import the CCXT Pro library in PHP and access version information and supported exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse \\ccxtpro; // optional, since you can use fully qualified names\necho 'CCXT Pro version ', \\ccxtpro\\Exchange::VERSION, \"\\n\";\necho 'Supported exchanges: ', json_encode(\\ccxtpro\\Exchange::$exchanges), \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades for All Symbols in JavaScript\nDESCRIPTION: JavaScript example demonstrating how to fetch recent trades for all symbols sequentially with rate limiting. This example uses async/await and includes a sleep function to respect exchange rate limits.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nif (exchange.has['fetchTrades']) {\n    let sleep = (ms) => new Promise (resolve => setTimeout (resolve, ms));\n    for (symbol in exchange.markets) {\n        await sleep (exchange.rateLimit) // milliseconds\n        console.log (await exchange.fetchTrades (symbol))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Transactions in JavaScript\nDESCRIPTION: Code example demonstrating how to fetch transaction history using the fetch_transactions method in JavaScript. It checks if the exchange supports this method before making the call, with parameters for currency code, time range, and limit.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_113\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['fetchTransactions']) {\n    transactions = exchange.fetch_transactions(code, since, limit, params);\n} else {\n    throw new Exception (exchange.id + ' does not have the fetch_transactions method');\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Rate Limiting in JavaScript with CCXT\nDESCRIPTION: Code example showing how to enable the built-in rate limiter in CCXT when instantiating an exchange object in JavaScript. Also demonstrates how to toggle rate limiting on or off after instantiation.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// enable built-in rate limiting upon instantiation of the exchange\nconst exchange = new ccxt.bitfinex ({\n    'enableRateLimit': true,\n})\n\n// or switch the built-in rate-limiter on or off later after instantiation\nexchange.enableRateLimit = true // enable\nexchange.enableRateLimit = false // disable\n```\n\n----------------------------------------\n\nTITLE: Fetching Deposit Address in JavaScript\nDESCRIPTION: Methods to retrieve or create cryptocurrency deposit addresses. These methods return an address structure with currency code, address, optional tag, and raw exchange response.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_104\n\nLANGUAGE: JavaScript\nCODE:\n```\nfetchDepositAddress (code, params = {})\ncreateDepositAddress (code, params = {})\n```\n\n----------------------------------------\n\nTITLE: ID-based Pagination for Fetching Trades in JavaScript\nDESCRIPTION: Implementation of ID-based pagination in JavaScript to fetch all trades using a from_id parameter. This code demonstrates how to use exchange-specific pagination parameters to iterate through trade data.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['fetchTrades']) {\n    let from_id = 'abc123' // all ids are strings\n    let allTrades = []\n    while (true) {\n        const symbol = undefined // change for your symbol\n        const since = undefined\n        const limit = 20 // change for your limit\n        const params = {\n            'from_id': from_id, // exchange-specific non-unified parameter name\n        }\n        const trades = await exchange.fetchTrades (symbol, since, limit, params)\n        if (trades.length) {\n            from_id = trades[trades.length - 1]['id']\n            allTrades.push (trades)\n        } else {\n            break\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Account Balance in JavaScript with CCXT Pro\nDESCRIPTION: Example of using the watchBalance method in JavaScript to continuously monitor account balance. Uses async/await pattern with error handling in an infinite loop to receive real-time balance updates.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['watchBalance']) {\n    while (true) {\n        try {\n            const balance = await exchange.watchBalance (params)\n            console.log (new Date (), balance)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Market Orders in CCXT with Price Requirement\nDESCRIPTION: Example showing how to create a market buy order when the exchange requires a price parameter. This is necessary when the exchange.options['createMarketBuyOrderRequiresPrice'] is set to true.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\n// note that we don't use createMarketBuyOrder here, instead we use createOrder\n// createMarketBuyOrder will omit the price and will not work when\n// exchange.options['createMarketBuyOrderRequiresPrice'] = true\nconst order = await exchange.createOrder (symbol, 'market', 'buy', amount, price)\n\nconsole.log (order)\n```\n\n----------------------------------------\n\nTITLE: Overriding API Parameters\nDESCRIPTION: Examples of passing custom parameters to unified API methods across languages\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n\n    const params = {\n        'foo': 'bar',      // exchange-specific overrides in unified queries\n        'Hello': 'World!', // see their docs for more details on parameter names\n    }\n\n    // the overrides go into the last argument to the unified call ↓ HERE\n    const result = await exchange.fetchOrderBook (symbol, length, params)\n}) ()\n```\n\nLANGUAGE: python\nCODE:\n```\nparams = {\n    'foo': 'bar',       # exchange-specific overrides in unified queries\n    'Hello': 'World!',  # see their docs for more details on parameter names\n}\n\n# overrides go in the last argument to the unified call ↓ HERE\nresult = exchange.fetch_order_book(symbol, length, params)\n```\n\nLANGUAGE: php\nCODE:\n```\n$params = array (\n    'foo' => 'bar',       // exchange-specific overrides in unified queries\n    'Hello' => 'World!',  // see their docs for more details on parameter names\n}\n\n// overrides go into the last argument to the unified call ↓ HERE\n$result = $exchange->fetch_order_book ($symbol, $length, $params);\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Examples with Node.js\nDESCRIPTION: Command for executing JavaScript example files using Node.js. Replace 'path/to/example.js' with the actual file path to run specific examples.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode path/to/example.js # substitute for actual filename here\n```\n\n----------------------------------------\n\nTITLE: Overriding CCXT Exchange Properties in Python\nDESCRIPTION: Example of customizing exchange properties, HTTP headers, and exchange-specific options during instantiation in Python, with the ability to modify options after creation.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nexchange = ccxt.binance ({\n    'rateLimit': 10000,  # unified exchange property\n    'headers': {\n        'YOUR_CUSTOM_HTTP_HEADER': 'YOUR_CUSTOM_VALUE',\n    },\n    'options': {\n        'adjustForTimeDifference': True,  # exchange-specific option\n    }\n})\nexchange.options['adjustForTimeDifference'] = False\n```\n\n----------------------------------------\n\nTITLE: Calculating Market Price and Spread in JavaScript\nDESCRIPTION: Shows how to calculate the current market price and bid-ask spread using the order book data in JavaScript.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nlet orderbook = exchange.fetchOrderBook (exchange.symbols[0])\nlet bid = orderbook.bids.length ? orderbook.bids[0][0] : undefined\nlet ask = orderbook.asks.length ? orderbook.asks[0][0] : undefined\nlet spread = (bid && ask) ? ask - bid : undefined\nconsole.log (exchange.id, 'market price', { bid, ask, spread })\n```\n\n----------------------------------------\n\nTITLE: Implementing Time-Based Pagination in PHP for Fetching Trades\nDESCRIPTION: A PHP implementation of time-based pagination for fetching all trades history. This code fetches trades incrementally by using the timestamp of the last received trade as the starting point for the next request.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n// PHP\nif ($exchange->has['fetchMyTrades']) {\n    $since = exchange->milliseconds () - 86400000; // -1 day from now\n    // alternatively, fetch from a certain starting datetime\n    // $since = $exchange->parse8601 ('2018-01-01T00:00:00Z');\n    $all_trades = array ();\n    while (since < exchange->milliseconds ()) {\n        $symbol = null; // change for your symbol\n        $limit = 20; // change for your limit\n        $trades = $exchange->fetchMyTrades ($symbol, $since, $limit);\n        if (count($trades)) {\n            $since = $trades[count($trades) - 1]['timestamp'];\n            $all_trades = array_merge ($all_trades, $trades);\n        } else {\n            break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CCXT Asynchronously in Python\nDESCRIPTION: Shows how to import and use the asynchronous version of CCXT in Python 3.5+.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/index.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt.async as ccxt # link against the asynchronous version of ccxt\n```\n\n----------------------------------------\n\nTITLE: Advanced PHP CCXT Usage Examples\nDESCRIPTION: Comprehensive PHP example demonstrating initialization of multiple exchanges, loading markets, fetching data, and creating orders.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/README.md#2025-04-23_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\ninclude 'ccxt.php';\n\n$poloniex = new \\ccxt\\poloniex ();\n$bittrex  = new \\ccxt\\bittrex  (array ('verbose' => true));\n$quoinex  = new \\ccxt\\quoinex   ();\n$zaif     = new \\ccxt\\zaif     (array (\n    'apiKey' => 'YOUR_PUBLIC_API_KEY',\n    'secret' => 'YOUR_SECRET_PRIVATE_KEY',\n));\n$hitbtc   = new \\ccxt\\hitbtc   (array (\n    'apiKey' => 'YOUR_PUBLIC_API_KEY',\n    'secret' => 'YOUR_SECRET_PRIVATE_KEY',\n));\n\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class (array (\n    'apiKey' => 'YOUR_API_KEY',\n    'secret' => 'YOUR_SECRET',\n    'timeout' => 30000,\n    'enableRateLimit' => true,\n));\n\n$poloniex_markets = $poloniex->load_markets ();\n\nvar_dump ($poloniex_markets);\nvar_dump ($bittrex->load_markets ());\nvar_dump ($quoinex->load_markets ());\n\nvar_dump ($poloniex->fetch_order_book ($poloniex->symbols[0]));\nvar_dump ($bittrex->fetch_trades ('BTC/USD'));\nvar_dump ($quoinex->fetch_ticker ('ETH/EUR'));\nvar_dump ($zaif->fetch_ticker ('BTC/JPY'));\n\nvar_dump ($zaif->fetch_balance ());\n\n// sell 1 BTC/JPY for market price, you pay ¥ and receive ฿ immediately\nvar_dump ($zaif->id, $zaif->create_market_sell_order ('BTC/JPY', 1));\n\n// buy BTC/JPY, you receive ฿1 for ¥285000 when the order closes\nvar_dump ($zaif->id, $zaif->create_limit_buy_order ('BTC/JPY', 1, 285000));\n\n// set a custom user-defined id to your order\n$hitbtc->create_order ('BTC/USD', 'limit', 'buy', 1, 3000, array ('clientOrderId' => '123'));\n```\n\n----------------------------------------\n\nTITLE: Date-based Pagination for Fetching Trades in JavaScript\nDESCRIPTION: Implementation of date-based pagination in JavaScript to fetch all trades within a time range. This code uses the since parameter and timestamp comparison to paginate through trade data.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['fetchTrades']) {\n    let since = exchange.milliseconds () - 86400000 // -1 day from now\n    // alternatively, fetch from a certain starting datetime\n    // let since = exchange.parse8601 ('2018-01-01T00:00:00Z')\n    let allTrades = []\n    while (since < exchange.milliseconds ()) {\n        const symbol = undefined // change for your symbol\n        const limit = 20 // change for your limit\n        const trades = await exchange.fetchTrades (symbol, since, limit)\n        if (trades.length) {\n            since = trades[trades.length - 1]['timestamp']\n            allTrades = allTrades.concat (trades)\n        } else {\n            break\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using watchTrades in JavaScript, Python, and PHP\nDESCRIPTION: Code examples demonstrating how to use the watchTrades method to stream trade data from exchanges. This method accepts a symbol, optional since timestamp, limit, and additional params, returning real-time trade data as it occurs on the exchange.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nif (exchange.has['watchTrades']) {\n    while (true) {\n        try {\n            const trades = await exchange.watchTrades (symbol, since, limit, params)\n            console.log (new Date (), trades)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n# Python\nif exchange.has['watchTrades']:\n    while True:\n        try:\n            trades = await exchange.watch_trades(symbol, since, limit, params)\n            print(exchange.iso8601(exchange.milliseconds()), trades)\n        except Exception as e:\n```\n\n----------------------------------------\n\nTITLE: Configuring Exchange Instance with createMarketBuyOrderRequiresPrice Option\nDESCRIPTION: Example showing how to configure a CCXT exchange instance with the createMarketBuyOrderRequiresPrice option set to false. This allows passing the total cost instead of amount when creating market buy orders.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\nconst exchange = new ccxt.cex ({\n    'apiKey': YOUR_API_KEY,\n    'secret': 'YOUR_SECRET',\n    'enableRateLimit': true,\n    'options': {\n        'createMarketBuyOrderRequiresPrice': false, // switch off\n    },\n})\n\n// or, to switch it off later, after the exchange instantiation, you can do\nexchange.options['createMarketBuyOrderRequiresPrice'] = false\n\n;(async () => {\n\n    // when `createMarketBuyOrderRequiresPrice` is true, we can pass the price\n    // so that the total cost of the order would be calculated inside the library\n    // by multiplying the amount over price (amount * price)\n\n    const symbol = 'BTC/USD'\n    const amount = 2 // BTC\n    const price = 9000 // USD\n    cost = amount * price // ← instead of the amount cost goes ↓ here\n    const order = await exchange.createMarketBuyOrder (symbol, cost)\n    console.log (order)\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Tickers with PHP\nDESCRIPTION: Code for retrieving tickers for a specific list of symbols using PHP with CCXT. Returns only the requested tickers indexed by their symbols.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_66\n\nLANGUAGE: php\nCODE:\n```\n// PHP\nif ($exchange->has['fetchTickers']) {\n    var_dump ($exchange->fetch_tickers (array ('ETH/BTC', 'LTC/BTC'))); // listed tickers indexed by their symbols\n}\n```\n\n----------------------------------------\n\nTITLE: Ledger Entry Structure in JavaScript\nDESCRIPTION: Standard format for ledger entries returned by the fetchLedger method. Includes information about the transaction type, direction, associated accounts, amounts, timestamps, and fees.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_122\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'id': 'hqfl-f125f9l2c9',                // string id of the ledger entry, e.g. an order id\n    'direction': 'out',                     // or 'in'\n    'account': '06d4ab58-dfcd-468a',        // string id of the account if any\n    'referenceId': 'bf7a-d4441fb3fd31',     // string id of the trade, transaction, etc...\n    'referenceAccount': '3146-4286-bb71',   // string id of the opposite account (if any)\n    'type': 'trade',                        // string, reference type, see below\n    'currency': 'BTC',                      // string, unified currency code, 'ETH', 'USDT'...\n    'amount': 123.45,                       // absolute number, float (does not include the fee)\n    'timestamp': 1544582941735,             // milliseconds since epoch time in UTC\n    'datetime': \"2018-12-12T02:49:01.735Z\", // string of timestamp, ISO8601\n    'before': 0,                            // amount of currency on balance before\n    'after': 0,                             // amount of currency on balance after\n    'status': 'ok',                         // 'ok, 'pending', 'canceled'\n    'fee': {                                // object or or undefined\n        'cost': 54.321,                     // absolute number on top of the amount\n        'currency': 'ETH',                  // string, unified currency code, 'ETH', 'USDT'...\n    },\n    'info': { ... },                        // raw ledger entry as is from the exchange\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Personal Trades with CCXT in JavaScript\nDESCRIPTION: Demonstrates how to fetch personal trades using the CCXT library in JavaScript. The fetchMyTrades method is called with optional parameters for symbol, since, limit, and additional params.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_101\n\nLANGUAGE: JavaScript\nCODE:\n```\n// fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {})\n\nif (exchange.has['fetchMyTrades']) {\n    const trades = await exchange.fetchMyTrades (symbol, since, limit, params)\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Personal Trades with CCXT in PHP\nDESCRIPTION: Illustrates how to fetch personal trades using the CCXT library in PHP. The fetch_my_trades method is called with optional parameters for symbol, since, limit, and additional params.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_103\n\nLANGUAGE: PHP\nCODE:\n```\n// fetch_my_trades ($symbol = null, $since = null, $limit = null, $params = array ())\n\nif ($exchange->has['fetchMyTrades']) {\n    $trades = $exchange->fetch_my_trades ($symbol, $since, $limit, $params);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Book with Depth in Python\nDESCRIPTION: Shows how to fetch an order book with a specified limit of bid/ask entries using CCXT in Python.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt\n# return up to ten bidasks on each side of the order book stack\nlimit = 10\nccxt.cex().fetch_order_book('BTC/USD', limit)\n```\n\n----------------------------------------\n\nTITLE: Creating Special Order Types with Parameter Overrides in PHP\nDESCRIPTION: Example showing how to create a stop-limit order by overriding the unified API parameters in PHP. This demonstrates specifying a stopPrice and changing the order type to stopLimit.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_97\n\nLANGUAGE: PHP\nCODE:\n```\n$symbol = 'ETH/BTC';\n$type = 'limit'; // or 'market', other types aren't unified yet\n$side = 'sell';\n$amount = 123.45; // your amount\n$price = 54.321; // your price\n// overrides\n$params = {\n    'stopPrice': 123.45, // your stop price\n    'type': 'stopLimit',\n}\n$order = $exchange->create_order ($symbol, $type, $side, $amount, $price, $params);\n```\n\n----------------------------------------\n\nTITLE: Fetch Deposits Implementation\nDESCRIPTION: Implementation of deposit fetching functionality across multiple languages with error handling for unsupported exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_111\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['fetchDeposits']) {\n    const deposits = await exchange.fetchDeposits (code, since, limit, params)\n} else {\n    throw new Error (exchange.id + ' does not have the fetchDeposits method')\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nif exchange.has['fetchDeposits']:\n    deposits = exchange.fetch_deposits(code, since, limit, params)\nelse:\n    raise Exception (exchange.id + ' does not have the fetch_deposits method')\n```\n\nLANGUAGE: php\nCODE:\n```\nif ($exchange->has['fetchDeposits']) {\n    $deposits = $exchange->fetch_deposits ($code, $since, $limit, $params);\n} else {\n    throw new Exception ($exchange->id . ' does not have the fetch_deposits method');\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Trades in Python with CCXT Pro\nDESCRIPTION: Python implementation of watch_trades method to continuously monitor trade data. Uses an infinite loop with try-except block for error handling and ISO8601-formatted timestamps in the output.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nif exchange.has['watchTrades']:\n    while True:\n        try:\n            trades = await exchange.watch_trades(symbol, since, limit, params)\n            print(exchange.iso8601(exchange.milliseconds()), trades)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # rasie e\n```\n\n----------------------------------------\n\nTITLE: Fetching Open Orders with JavaScript\nDESCRIPTION: Example of how to fetch only open orders using the fetchOpenOrders method. This method accepts optional parameters for filtering by symbol, timeframe, and limiting the number of results.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['fetchOpenOrders'])\n    exchange.fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Creating Market Buy Orders with Price Parameter in JavaScript\nDESCRIPTION: Example of creating a market buy order when the exchange requires the total cost calculation. This approach uses the default setting where createMarketBuyOrderRequiresPrice is true, and passes both amount and price so the total cost is calculated internally.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_87\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst exchange = new ccxt.cex ({\n    'apiKey': YOUR_API_KEY,\n    'secret': 'YOUR_SECRET',\n    'enableRateLimit': true,\n    // 'options': {\n    //     'createMarketBuyOrderRequiresPrice': true, // default\n    // },\n})\n\n;(async () => {\n\n    // when `createMarketBuyOrderRequiresPrice` is true, we can pass the price\n    // so that the total cost of the order would be calculated inside the library\n    // by multiplying the amount over price (amount * price)\n\n    const symbol = 'BTC/USD'\n    const amount = 2 // BTC\n    const price = 9000 // USD\n    // cost = amount * price = 2 * 9000 = 18000 (USD)\n\n    // note that we don't use createMarketBuyOrder here, instead we use createOrder\n    // createMarketBuyOrder will omit the price and will not work when\n    // exchange.options['createMarketBuyOrderRequiresPrice'] = true\n    const order = await exchange.createOrder (symbol, 'market', 'buy', amount, price)\n\n    console.log (order)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Proxies with Python Synchronous CCXT\nDESCRIPTION: Complete Python example demonstrating how to configure proxies with the synchronous version of CCXT and fetch ticker data.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\nimport ccxt\nfrom pprint import pprint\n\n\nexchange = ccxt.poloniex({\n    #\n    # ↓ The \"proxy\" property setting below is for CORS-proxying only!\n    # Do not use it if you don't know what a CORS proxy is.\n    # https://github.com/ccxt/ccxt/wiki/Install#cors-access-control-allow-origin\n    # You should only use the \"proxy\" setting if you're having a problem with Access-Control-Allow-Origin\n    # In Python you rarely need to use it, if ever at all.\n    #\n    # 'proxy': 'https://cors-anywhere.herokuapp.com/',\n    #\n    # ↓ On the other hand, the \"proxies\" setting is for HTTP(S)-proxying (SOCKS, etc...)\n    # It is a standard method of sending your requests through your proxies\n    # This gets passed to the `python-requests` implementation directly\n    # You can also enable this with environment variables, as described here:\n    # http://docs.python-requests.org/en/master/user/advanced/#proxies\n    # This is the setting you should be using with synchronous version of ccxt in Python 3\n    #\n    'proxies': {\n        'http': 'http://10.10.1.10:3128',\n        'https': 'http://10.10.1.10:1080',\n    },\n})\n\n# your code goes here...\n\npprint(exchange.fetch_ticker('ETH/BTC'))\n```\n\n----------------------------------------\n\nTITLE: Including CCXT in HTML using CDN\nDESCRIPTION: HTML script tag example for including the CCXT browser bundle from a CDN in a web page.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/README.rst#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/ccxt@1.29.75/dist/ccxt.browser.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades for All Symbols in PHP\nDESCRIPTION: PHP example demonstrating how to fetch recent trades for all symbols sequentially with rate limiting. Uses usleep to respect exchange rate limits between API calls.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_73\n\nLANGUAGE: php\nCODE:\n```\n// PHP\nif ($exchange->has['fetchTrades']) {\n    foreach ($exchange->markets as $symbol => $market) {\n        usleep ($exchange->rateLimit * 1000); // usleep wants microseconds\n        var_dump ($exchange->fetch_trades ($symbol));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Withdraw Implementation\nDESCRIPTION: Implementation of withdrawal functionality across multiple languages. Takes currency code, amount, address, optional tag and parameters as inputs.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_109\n\nLANGUAGE: javascript\nCODE:\n```\nexchange.withdraw (code, amount, address, tag = undefined, params = {})\n```\n\nLANGUAGE: python\nCODE:\n```\nexchange.withdraw(code, amount, address, tag=None, params={})\n```\n\nLANGUAGE: php\nCODE:\n```\n$exchange->withdraw ($code, $amount, $address, $tag = null, $params = array ())\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent Trades in JavaScript with CCXT\nDESCRIPTION: Example showing how to fetch recent trades for all symbols in JavaScript using async/await. Includes rate limiting between API requests.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_63\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nif (exchange.has['fetchTrades']) {\n    let sleep = (ms) => new Promise (resolve => setTimeout (resolve, ms));\n    for (symbol in exchange.markets) {\n        await sleep (exchange.rateLimit) // milliseconds\n        console.log (await exchange.fetchTrades (symbol))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching All Tickers at Once with JavaScript\nDESCRIPTION: Code for retrieving all tickers from an exchange simultaneously using JavaScript with CCXT. This method can be more efficient but may have higher rate-limit costs than individual ticker requests.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nif (exchange.has['fetchTickers']) {\n    console.log (await (exchange.fetchTickers ())) // all tickers indexed by their symbols\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Account Balance in Python with CCXT Pro\nDESCRIPTION: Python implementation of watch_balance method to continuously monitor account balance. Uses an infinite loop with try-except block for error handling and ISO8601-formatted timestamps in the output.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nif exchange.has['watchBalance']:\n    while True:\n        try:\n            balance = await exchange.watch_balance(params)\n            print(exchange.iso8601(exchange.milliseconds()), balance)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # rasie e\n```\n\n----------------------------------------\n\nTITLE: Fetching Personal Trades with CCXT in Python\nDESCRIPTION: Shows how to fetch personal trades using the CCXT library in Python. The fetch_my_trades method is called with optional parameters for symbol, since, limit, and additional params.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_102\n\nLANGUAGE: Python\nCODE:\n```\n# fetch_my_trades (symbol = None, since = None, limit = None, params = {})\n\nif exchange.has['fetchMyTrades']:\n    exchange.fetch_my_trades (symbol = None, since = None, limit = None, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Order by ID in PHP\nDESCRIPTION: Demonstrates how to fetch order details by ID in PHP, checking if the exchange supports this feature.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_82\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['fetchOrder']) {\n    $order = $exchange->fetch_order ($id);\n    var_dump ($order);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Buy Order with HitBTC Exchange in PHP\nDESCRIPTION: Example of creating a limit buy order for BTC/USD trading pair using the HitBTC exchange through CCXT library. Includes setting a custom client order ID.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/README.rst#2025-04-23_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n$hitbtc->create_order ('BTC/USD', 'limit', 'buy', 1, 3000, array ('clientOrderId' => '123'));\n```\n\n----------------------------------------\n\nTITLE: Correct Market Implementation Using market() Method in JavaScript\nDESCRIPTION: Proper implementation of fetchTicker using the market() method to get exchange-specific market ID from unified symbol.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync fetchTicker (symbol, params = {}) {\n   const market = this.market (symbol); // the entire market structure\n   const request = {\n      'pair': market['id'], // good, they may me equal, but often differ, it's ok\n   };\n   const response = await this.publicGetEndpoint (this.extend (request, params));\n   // parse in a unified way...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cursor-Based Pagination in PHP for Fetching Trades\nDESCRIPTION: A PHP implementation of cursor-based pagination for trade history retrieval. The code uses a start parameter and extracts the next pagination cursor from the exchange's JSON response.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n// PHP\nif ($exchange->has['fetchMyTrades']) {\n    $start = '0' // exchange-specific type and value\n    $all_trades = array ();\n    while (true) {\n        $symbol = null; // change for your symbol\n        $since = null;\n        $limit = 20; // change for your limit\n        $params = array (\n            'start' => $start, // exchange-specific non-unified parameter name\n        );\n        $trades = $exchange->fetchMyTrades ($symbol, $since, $limit, $params);\n        if (count($trades)) {\n            // not thread-safu and exchange-specific !\n            $start = $exchange->last_json_response['next'];\n            $all_trades = array_merge ($all_trades, $trades);\n        } else {\n            break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Order Structure in CCXT\nDESCRIPTION: This code block illustrates the structure of an order object returned by most methods in the CCXT unified API. It includes details such as order ID, status, symbol, type, and various price and amount fields.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'id':                '12345-67890:09876/54321', // string\n    'clientOrderId':     'abcdef-ghijklmnop-qrstuvwxyz', // a user-defined clientOrderId, if any\n    'datetime':          '2017-08-17 12:42:48.000', // ISO8601 datetime of 'timestamp' with milliseconds\n    'timestamp':          1502962946216, // order placing/opening Unix timestamp in milliseconds\n    'lastTradeTimestamp': 1502962956216, // Unix timestamp of the most recent trade on this order\n    'status':     'open',         // 'open', 'closed', 'canceled'\n    'symbol':     'ETH/BTC',      // symbol\n    'type':       'limit',        // 'market', 'limit'\n    'side':       'buy',          // 'buy', 'sell'\n    'price':       0.06917684,    // float price in quote currency\n    'amount':      1.5,           // ordered amount of base currency\n    'filled':      1.1,           // filled amount of base currency\n    'remaining':   0.4,           // remaining amount to fill\n    'cost':        0.076094524,   // 'filled' * 'price' (filling price used where available)\n    'trades':    [ ... ],         // a list of order trades/executions\n    'fee': {                      // fee info, if available\n        'currency': 'BTC',        // which currency the fee is (usually quote)\n        'cost': 0.0009,           // the fee amount in that currency\n        'rate': 0.002,            // the fee rate (if available)\n    },\n    'info': { ... },              // the original unparsed order structure as is\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging in Python for CCXT\nDESCRIPTION: Shows how to enable DEBUG level logging in Python when using CCXT to get additional debugging information using the standard Python logging module.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_134\n\nLANGUAGE: Python\nCODE:\n```\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Tickers with CCXT in JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch multiple tickers for all or specific symbols using CCXT in JavaScript.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\n// multiple tickers\nfetchTickers (symbols = undefined, params = {})  // for all tickers at once\n\n// for example\nfetchTickers () // all symbols\nfetchTickers ([ 'ETH/BTC', 'BTC/USDT' ]) // an array of specific symbols\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Python\nDESCRIPTION: Demonstrates error handling implementation in Python using try-except blocks with CCXT-specific exception types.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_127\n\nLANGUAGE: Python\nCODE:\n```\ntry:\n    response = await exchange.fetch_order_book('ETH/BTC')\n    print(response)\nexcept ccxt.NetworkError as e:\n    print(exchange.id, 'fetch_order_book failed due to a network error:', str(e))\nexcept ccxt.ExchangeError as e:\n    print(exchange.id, 'fetch_order_book failed due to exchange error:', str(e))\nexcept Exception as e:\n    print(exchange.id, 'fetch_order_book failed with:', str(e))\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Python\nDESCRIPTION: Example of handling CCXT exceptions in Python using try-except blocks. Shows how to catch and respond to different error types including NetworkError and ExchangeError when calling API methods.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_127\n\nLANGUAGE: python\nCODE:\n```\n# Python\n\n# try to call a unified method\ntry:\n    response = await exchange.fetch_order_book('ETH/BTC')\n    print(response)\nexcept ccxt.NetworkError as e:\n    print(exchange.id, 'fetch_order_book failed due to a network error:', str(e))\n    # retry or whatever\n    # ...\nexcept ccxt.ExchangeError as e:\n    print(exchange.id, 'fetch_order_book failed due to exchange error:', str(e))\n    # retry or whatever\n    # ...\nexcept Exception as e:\n    print(exchange.id, 'fetch_order_book failed with:', str(e))\n    # retry or whatever\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Watching Tickers in Python with CCXT Pro\nDESCRIPTION: Code example demonstrating how to use the watch_tickers method in Python to continuously retrieve and display ticker information for specified symbols. Includes error handling with the option to stop or retry on exceptions.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nif exchange.has['watchTickers']:\n    while True:\n        try:\n            tickers = await exchange.watch_tickers(symbols, params)\n            print(exchange.iso8601(exchange.milliseconds()), tickers)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # rasie e\n```\n\n----------------------------------------\n\nTITLE: Implementing ID-Based Pagination in PHP for Fetching Trades\nDESCRIPTION: A PHP implementation of ID-based pagination for trade history retrieval. This code uses a trade ID as reference for subsequent requests, collecting all trades into a single array.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n// PHP\nif ($exchange->has['fetchMyTrades']) {\n    $from_id = 'abc123' // all ids are strings\n    $all_trades = array ();\n    while (true) {\n        $symbol = null; // change for your symbol\n        $since = null;\n        $limit = 20; // change for your limit\n        $params = array (\n            'from_id' => $from_id, // exchange-specific non-unified parameter name\n        );\n        $trades = $exchange->fetchMyTrades ($symbol, $since, $limit, $params);\n        if (count($trades)) {\n            $from_id = $trades[count($trades) - 1]['id'];\n            $all_trades = array_merge ($all_trades, $trades);\n        } else {\n            break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Required Credentials in JavaScript, Python, and PHP\nDESCRIPTION: Code examples demonstrating how to check for required credentials across different programming languages. This helps users verify if they've provided all necessary authentication information before making API calls.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nconst ccxt = require ('ccxt')\nconst exchange = new ccxt.binance()\nconsole.log (exchange.requiredCredentials) // prints required credentials\nexchange.checkRequiredCredentials() // throw AuthenticationError\n```\n\nLANGUAGE: python\nCODE:\n```\n# Python\nimport ccxt\nexchange = ccxt.coinbasepro()\nprint(exchange.requiredCredentials)  # prints required credentials\nexchange.checkRequiredCredentials()  # raises AuthenticationError\n```\n\nLANGUAGE: php\nCODE:\n```\n// PHP\ninclude 'ccxt.php';\n$exchange = new \\ccxt\\bittrex ();\nvar_dump($exchange->requiredCredentials); // prints required credentials\n$exchange->check_required_credentials(); // throws AuthenticationError\n```\n\n----------------------------------------\n\nTITLE: Watching Balance with JavaScript in CCXT Pro\nDESCRIPTION: This snippet shows how to use the watchBalance method in JavaScript with CCXT Pro. It sets up an infinite loop to continuously fetch and log the account balance, with error handling.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['watchBalance']) {\n    while (true) {\n        try {\n            const balance = await exchange.watchBalance (params)\n            console.log (new Date (), balance)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CCXT in JavaScript Node.js\nDESCRIPTION: Basic JavaScript example showing how to import CCXT in a Node.js environment and print all available exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/README.rst#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar ccxt = require ('ccxt')\n\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n----------------------------------------\n\nTITLE: Returning Successful Order Placement Structure in JavaScript\nDESCRIPTION: This snippet demonstrates the structure returned by a successful call to a unified method for placing market or limit orders. It includes the order id and the original JSON response from the exchange.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_84\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'id': 'string',  // order id\n    'info': { ... }, // decoded original JSON response from the exchange as is\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Mode in Python CCXT\nDESCRIPTION: Shows how to enable verbose mode after loading markets to get detailed information about API requests and responses for troubleshooting connection issues.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_130\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt\nexchange = ccxt.binance({'enableRateLimit': True})\nexchange.load_markets()\nexchange.verbose = True  # enable verbose mode after loading the markets\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades with CCXT in Python\nDESCRIPTION: This snippet demonstrates how to fetch trades for all symbols in an exchange using CCXT in Python. It includes rate limiting to avoid overwhelming the exchange's API.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_64\n\nLANGUAGE: Python\nCODE:\n```\nimport time\nif exchange.has['fetchTrades']:\n    for symbol in exchange.markets:  # ensure you have called loadMarkets() or load_markets() method.\n        time.sleep (exchange.rateLimit / 1000)  # time.sleep wants seconds\n        print (symbol, exchange.fetch_trades (symbol))\n```\n\n----------------------------------------\n\nTITLE: Configuring Exchange API Credentials in JavaScript\nDESCRIPTION: Examples of instantiating exchange objects with API credentials in JavaScript, both directly specifying the exchange and using a variable exchange ID for dynamic instantiation.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_69\n\nLANGUAGE: JavaScript\nCODE:\n```\n# upon instantiation\nhitbtc = ccxt.hitbtc ({\n    'apiKey': 'YOUR_HITBTC_API_KEY',\n    'secret': 'YOUR_HITBTC_SECRET_KEY',\n})\n\n# from variable id\nexchange_id = 'binance'\nexchange_class = getattr(ccxt, exchange_id)\nexchange = exchange_class({\n    'apiKey': 'YOUR_API_KEY',\n    'secret': 'YOUR_SECRET',\n    'timeout': 30000,\n    'enableRateLimit': True,\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades for All Symbols in Python\nDESCRIPTION: Python example showing how to fetch recent trades for all symbols sequentially with rate limiting. The code includes time.sleep to respect exchange rate limits between API calls.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_72\n\nLANGUAGE: python\nCODE:\n```\n# Python\nimport time\nif exchange.has['fetchTrades']:\n    for symbol in exchange.markets:  # ensure you have called loadMarkets() or load_markets() method.\n        time.sleep (exchange.rateLimit / 1000)  # time.sleep wants seconds\n        print (symbol, exchange.fetch_trades (symbol))\n```\n\n----------------------------------------\n\nTITLE: Implementing ID-Based Pagination in Python for Fetching Orders\nDESCRIPTION: A Python implementation of ID-based pagination for orders retrieval. This code uses a specific order ID as the starting point for each subsequent request, allowing for complete order history retrieval.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\n# Python\nif exchange.has['fetchOrders']:\n    from_id = 'abc123'  # all ids are strings\n    all_orders = []\n    while True:\n        symbol = None  # change for your symbol\n        since = None\n        limit = 20  # change for your limit\n        params = {\n            'from_id': from_id,  # exchange-specific non-unified parameter name\n        }\n        orders = await exchange.fetch_orders(symbol, since, limit, params)\n        if len(orders):\n            from_id = orders[len(orders) - 1]['id']\n            all_orders += orders\n        else:\n            break\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy in JavaScript CCXT\nDESCRIPTION: JavaScript code demonstrating how to configure an HTTP proxy for a CCXT exchange instance using the https-proxy-agent package.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ccxt = require ('ccxt')\n    , HttpsProxyAgent = require ('https-proxy-agent')\n\nconst proxy = process.env.http_proxy || 'http://168.63.76.32:3128' // HTTP/HTTPS proxy to connect to\nconst agent = new HttpsProxyAgent (proxy)\n\nconst kraken = new ccxt.kraken ({ agent })\n```\n\n----------------------------------------\n\nTITLE: ID-based Pagination in PHP\nDESCRIPTION: Shows how to implement ID-based pagination for fetching trades in PHP using CCXT. Tracks position using from_id and merges results into an array.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_43\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['fetchMyTrades']) {\n    $from_id = 'abc123' // all ids are strings\n    $all_trades = array ();\n    while (true) {\n        $symbol = null; // change for your symbol\n        $since = null;\n        $limit = 20; // change for your limit\n        $params = array (\n            'from_id' => $from_id, // exchange-specific non-unified parameter name\n        );\n        $trades = $exchange->fetchMyTrades ($symbol, $since, $limit, $params);\n        if (count($trades)) {\n            $from_id = $trades[count($trades) - 1]['id'];\n            $all_trades = array_merge ($all_trades, $trades);\n        } else {\n            break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Date-based Pagination for Fetching Orders in Python\nDESCRIPTION: Implementation of date-based pagination in Python to fetch all orders within a time range. This code uses the since parameter and timestamp comparison to paginate through order data.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_39\n\nLANGUAGE: Python\nCODE:\n```\nif exchange.has['fetchOrders']:\n    since = exchange.milliseconds () - 86400000  # -1 day from now\n    # alternatively, fetch from a certain starting datetime\n    # since = exchange.parse8601('2018-01-01T00:00:00Z')\n    all_orders = []\n    while since < exchange.milliseconds ():\n        symbol = None  # change for your symbol\n        limit = 20  # change for your limit\n        orders = await exchange.fetch_orders(symbol, since, limit)\n        if len(orders):\n            since = orders[len(orders) - 1]['timestamp']\n            all_orders += orders\n        else:\n            break\n```\n\n----------------------------------------\n\nTITLE: Using CCXT with Python Async Support\nDESCRIPTION: Python code showing how to import the asynchronous version of CCXT for concurrent operations.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt.async_support as ccxt # link against the asynchronous version of ccxt\n```\n\n----------------------------------------\n\nTITLE: Querying Account Balance Structure in JavaScript\nDESCRIPTION: Shows the structure of the balance object returned by the fetchBalance method, which includes free, used, and total funds organized by currency.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_71\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'info':  { ... },    // the original untouched non-parsed reply with details\n\n    //-------------------------------------------------------------------------\n    // indexed by availability of funds first, then by currency\n\n    'free':  {           // money, available for trading, by currency\n        'BTC': 321.00,   // floats...\n        'USD': 123.00,\n        ...\n    },\n\n    'used':  { ... },    // money on hold, locked, frozen, or pending, by currency\n\n    'total': { ... },    // total (free + used), by currency\n\n    //-------------------------------------------------------------------------\n    // indexed by currency first, then by availability of funds\n\n    'BTC':   {           // string, three-letter currency code, uppercase\n        'free': 321.00   // float, money available for trading\n        'used': 234.00,  // float, money on hold, locked, frozen or pending\n        'total': 555.00, // float, total balance (free + used)\n    },\n\n    'USD':   {           // ...\n        'free': 123.00   // ...\n        'used': 456.00,\n        'total': 579.00,\n    },\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Rate Limiting in Python with CCXT\nDESCRIPTION: Code example showing how to enable the built-in rate limiter in CCXT when instantiating an exchange object in Python to avoid being banned by exchanges due to excessive API requests.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n# enable built-in rate limiting upon instantiation of the exchange\nexchange = ccxt.bitfinex({\n    'enableRateLimit': True,\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Tickers with JavaScript\nDESCRIPTION: Code for retrieving tickers for a specific list of symbols using JavaScript with CCXT. This approach can be used to work around exchange limitations that restrict the number of symbols in a single request.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n//JavaScript\nif (exchange.has['fetchTickers']) {\n    console.log (await (exchange.fetchTickers ([ 'ETH/BTC', 'LTC/BTC' ]))) // listed tickers indexed by their symbols\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Market Data in JavaScript\nDESCRIPTION: Examples of accessing market data, symbols, and currencies using various methods in JavaScript. Demonstrates how to work with market structures indexed by symbols and ids.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n\n    console.log (await exchange.loadMarkets ())\n\n    let btcusd1 = exchange.markets['BTC/USD']     // get market structure by symbol\n    let btcusd2 = exchange.market ('BTC/USD')     // same result in a slightly different way\n\n    let btcusdId = exchange.marketId ('BTC/USD')  // get market id by symbol\n\n    let symbols = exchange.symbols                // get an array of symbols\n    let symbols2 = Object.keys (exchange.markets) // same as previous line\n\n    console.log (exchange.id, symbols)            // print all symbols\n\n    let currencies = exchange.currencies          // a dictionary of currencies\n\n    let bitfinex = new ccxt.bitfinex ()\n    await bitfinex.loadMarkets ()\n\n    bitfinex.markets['BTC/USD']                   // symbol → market (get market by symbol)\n    bitfinex.markets_by_id['XRPBTC']              // id → market (get market by id)\n\n    bitfinex.markets['BTC/USD']['id']             // symbol → id (get id by symbol)\n    bitfinex.markets_by_id['XRPBTC']['symbol']    // id → symbol (get symbol by id)\n\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades with CCXT in PHP\nDESCRIPTION: This snippet shows how to fetch trades for all symbols in an exchange using CCXT in PHP. It includes rate limiting using microseconds to avoid API rate limits.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_65\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['fetchTrades']) {\n    foreach ($exchange->markets as $symbol => $market) {\n        usleep ($exchange->rateLimit * 1000); // usleep wants microseconds\n        var_dump ($exchange->fetch_trades ($symbol));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Exchange Fee Information in JavaScript\nDESCRIPTION: Methods for retrieving fee information from exchanges including trading and funding fees. These methods return standardized fee structures that represent the exchange's fee system.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_115\n\nLANGUAGE: JavaScript\nCODE:\n```\nfetchFees (params = {})\nfetchTradingFees (params = {})\nfetchFundingFees (params = {})\n```\n\n----------------------------------------\n\nTITLE: Enabling Rate Limiting in JavaScript\nDESCRIPTION: Demonstrates how to enable the built-in rate limiter when instantiating an exchange or toggling it afterwards. This helps prevent being banned by exchanges for making too many requests.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// enable built-in rate limiting upon instantiation of the exchange\nconst exchange = new ccxt.bitfinex ({\n    'enableRateLimit': true,\n})\n\n// or switch the built-in rate-limiter on or off later after instantiation\nexchange.enableRateLimit = true // enable\nexchange.enableRateLimit = false // disable\n```\n\n----------------------------------------\n\nTITLE: Formatting Decimals with decimalToPrecision in JavaScript\nDESCRIPTION: Example of the decimalToPrecision function signature in JavaScript, used for formatting values to required decimal precision with support for different rounding, counting, and padding modes.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nfunction decimalToPrecision (x, roundingMode, numPrecisionDigits, countingMode = DECIMAL_PLACES, paddingMode = NO_PADDING)\n```\n\n----------------------------------------\n\nTITLE: Querying Account Balance in Multiple Languages\nDESCRIPTION: Examples of how to retrieve account balance information across different programming languages. The fetchBalance method returns available, used, and total funds for each currency.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\n(async () => {\n    console.log (await exchange.fetchBalance ())\n}) ()\n```\n\nLANGUAGE: python\nCODE:\n```\n# Python\nprint (exchange.fetch_balance ())\n```\n\nLANGUAGE: php\nCODE:\n```\n// PHP\nvar_dump ($exchange->fetch_balance ());\n```\n\n----------------------------------------\n\nTITLE: Trade Object Structure in CCXT\nDESCRIPTION: This snippet illustrates the structure of a trade object returned by the fetchTrades method in CCXT. It includes details such as trade ID, timestamp, price, and amount.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_66\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n    {\n        'info':       { ... },                  // the original decoded JSON as is\n        'id':        '12345-67890:09876/54321', // string trade id\n        'timestamp':  1502962946216,            // Unix timestamp in milliseconds\n        'datetime':  '2017-08-17 12:42:48.000', // ISO8601 datetime with milliseconds\n        'symbol':    'ETH/BTC',                 // symbol\n        'order':     '12345-67890:09876/54321', // string order id or undefined/None/null\n        'type':      'limit',                   // order type, 'market', 'limit' or undefined/None/null\n        'side':      'buy',                     // direction of the trade, 'buy' or 'sell'\n        'price':      0.06917684,               // float price in quote currency\n        'amount':     1.5,                      // amount of base currency\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching OHLCV Candlestick Data with PHP\nDESCRIPTION: Code for retrieving OHLCV (Open, High, Low, Close, Volume) candlestick data for all available symbols using PHP with CCXT. Uses usleep to respect exchange rate limits.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_69\n\nLANGUAGE: php\nCODE:\n```\n// PHP\nif ($exchange->has['fetchOHLCV']) {\n    foreach ($exchange->markets as $symbol => $market) {\n        usleep ($exchange->rateLimit * 1000); // usleep wants microseconds\n        var_dump ($exchange->fetch_ohlcv ($symbol, '1M')); // one month\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Trades in JavaScript with CCXT Pro\nDESCRIPTION: Example of using the watchTrades method in JavaScript to continuously monitor trade data for a specified symbol. Uses async/await pattern with error handling in an infinite loop to receive real-time trade updates.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['watchTrades']) {\n    while (true) {\n        try {\n            const trades = await exchange.watchTrades (symbol, since, limit, params)\n            console.log (new Date (), trades)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Market Structure in CCXT (JavaScript)\nDESCRIPTION: Defines the structure of a market object in CCXT, including properties like id, symbol, base and quote currencies, fees, precision, and trading limits. This structure is used consistently across all exchanges in the library.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'id':     ' btcusd',  // string literal for referencing within an exchange\n    'symbol':  'BTC/USD', // uppercase string literal of a pair of currencies\n    'base':    'BTC',     // uppercase string, unified base currency code, 3 or more letters\n    'quote':   'USD',     // uppercase string, unified quote currency code, 3 or more letters\n    'baseId':  'btc',     // any string, exchange-specific base currency id\n    'quoteId': 'usd',     // any string, exchange-specific quote currency id\n    'active':   true,     // boolean, market status\n    'taker':    0.002,    // taker fee rate, 0.002 = 0.2%\n    'maker':    0.0016,   // maker fee rate, 0.0016 = 0.16%\n    'percentage': true,   // whether the taker and maker fee rate is a multiplier or a fixed flat amount\n    'tierBased': false,   // whether the fee depends on your trading tier (your trading volume)\n    'precision': {        // number of decimal digits \"after the dot\"\n        'price': 8,       // integer or float for TICK_SIZE roundingMode, might be missing if not supplied by the exchange\n        'amount': 8,      // integer, might be missing if not supplied by the exchange\n        'cost': 8,        // integer, very few exchanges actually have it\n    },\n    'limits': {           // value limits when placing orders on this market\n        'amount': {\n            'min': 0.01,  // order amount should be > min\n            'max': 1000,  // order amount should be < max\n        },\n        'price': { ... }, // same min/max limits for the price of the order\n        'cost':  { ... }, // same limits for order cost = price * amount\n    },\n    'info':      { ... }, // the original unparsed market info from the exchange\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching OHLCV Data in PHP with CCXT\nDESCRIPTION: Example showing how to fetch OHLCV candlestick data for all symbols in PHP. Includes rate limiting for API requests and uses the monthly timeframe.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_62\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\nif ($exchange->has['fetchOHLCV']) {\n    foreach ($exchange->markets as $symbol => $market) {\n        usleep ($exchange->rateLimit * 1000); // usleep wants microseconds\n        var_dump ($exchange->fetch_ohlcv ($symbol, '1M')); // one month\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Withdrawal Response Structure in JavaScript\nDESCRIPTION: Structure returned by the withdraw method, containing the exchange's raw response and a string withdrawal ID which may be a transaction ID or internal request ID.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_108\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'info' { ... },      // unparsed reply from the exchange, as is\n    'id': '12345567890', // string withdrawal id, if any\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Rate Limiting in PHP\nDESCRIPTION: Demonstrates how to enable the built-in rate limiter in PHP when instantiating an exchange object or toggling it afterwards. This helps manage request frequency to comply with exchange limits.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// enable built-in rate limiting upon instantiation of the exchange\n$exchange = new \\ccxt\\bitfinex (array (\n    'enableRateLimit' => true,\n));\n\n// or switch the built-in rate-limiter on or off later after instantiation\n$exchange->enableRateLimit = true; // enable\n$exchange->enableRateLimit = false; // disable\n```\n\n----------------------------------------\n\nTITLE: Safe Key Access with SafeValue Method in JavaScript\nDESCRIPTION: Demonstrates the use of a safe method to access object keys in a way that's compatible across different programming languages after transpilation.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst foo = this.safeValue (params, 'foo');\nif (foo !== undefined) {\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of CCXT in JavaScript\nDESCRIPTION: Simple JavaScript code that imports the CCXT library and displays all available exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar ccxt = require ('ccxt')\n\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n----------------------------------------\n\nTITLE: Error Handling in JavaScript\nDESCRIPTION: Example of implementing error handling using try-catch blocks in JavaScript with CCXT, showing how to handle different types of exceptions.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_126\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n    const response = await exchange.fetchTicker ('ETH/BTC')\n    console.log (response)\n} catch (e) {\n    if (e instanceof ccxt.NetworkError) {\n        console.log (exchange.id, 'fetchTicker failed due to a network error:', e.message)\n    } else if (e instanceof ccxt.ExchangeError) {\n        console.log (exchange.id, 'fetchTicker failed due to exchange error:', e.message)\n    } else {\n        console.log (exchange.id, 'fetchTicker failed with:', e.message)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Special Order Types with Parameter Overrides in Python\nDESCRIPTION: Example showing how to create a stop-limit order by overriding the unified API parameters in Python. This demonstrates specifying a stopPrice and changing the order type to stopLimit.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_96\n\nLANGUAGE: Python\nCODE:\n```\nsymbol = 'ETH/BTC'\ntype = 'limit'  # or 'market', other types aren't unified yet\nside = 'sell'\namount = 123.45  # your amount\nprice = 54.321  # your price\n# overrides\nparams = {\n    'stopPrice': 123.45,  # your stop price\n    'type': 'stopLimit',\n}\norder = exchange.create_order(symbol, type, side, amount, price, params)\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Book with Depth in PHP\nDESCRIPTION: Demonstrates fetching an order book with a specified limit using CCXT in PHP.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n// instantiate the exchange by id\n$exchange = '\\\\ccxt\\\\kraken';\n$exchange = new $exchange ();\n// up to ten orders on each side, for example\n$limit = 20;\nvar_dump ($exchange->fetch_order_book ('BTC/USD', $limit));\n```\n\n----------------------------------------\n\nTITLE: Currency Structure Object in CCXT\nDESCRIPTION: Defines the structure of a currency object in CCXT with properties like id, code, name, fee, precision, and limits. The object represents a cryptocurrency or fiat currency with its trading parameters and restrictions at an exchange.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'id':       'btc',       // string literal for referencing within an exchange\n    'code':     'BTC',       // uppercase unified string literal code the currency\n    'name':     'Bitcoin',   // string, human-readable name, if specified\n    'active':    true,       // boolean, currency status (tradeable and withdrawable)\n    'fee':       0.123,      // withdrawal fee, flat\n    'precision': 8,          // number of decimal digits \"after the dot\" (depends on exchange.precisionMode)\n    'limits': {              // value limits when placing orders on this market\n        'amount': {\n            'min': 0.01,     // order amount should be > min\n            'max': 1000,     // order amount should be < max\n        },\n        'price':    { ... }, // same min/max limits for the price of the order\n        'cost':     { ... }, // same limits for order cost = price * amount\n        'withdraw': { ... }, // withdrawal limits\n    },\n    'info': { ... }, // the original unparsed currency info from the exchange\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Trading Fees in JavaScript\nDESCRIPTION: Method for precalculating trading fees based on order parameters. This is marked as experimental and should be used with caution as actual fees may vary due to changing market conditions.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_119\n\nLANGUAGE: JavaScript\nCODE:\n```\ncalculateFee (symbol, type, side, amount, price, takerOrMaker = 'taker', params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Exchange Status in JavaScript\nDESCRIPTION: Method to retrieve the current operational status of an exchange. This provides information on whether the exchange API is functioning normally, under maintenance, or experiencing issues.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_117\n\nLANGUAGE: JavaScript\nCODE:\n```\nfetchStatus(params = {})\n```\n\n----------------------------------------\n\nTITLE: Enabling Rate Limiting in CCXT (PHP)\nDESCRIPTION: Demonstrates how to enable or disable the built-in rate limiter in CCXT using PHP. The rate limiter can be enabled during exchange instantiation or toggled on/off later.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n// enable built-in rate limiting upon instantiation of the exchange\n$exchange = new \\ccxt\\bitfinex (array (\n    'enableRateLimit' => true,\n));\n\n// or switch the built-in rate-limiter on or off later after instantiation\n$exchange->enableRateLimit = true; // enable\n$exchange->enableRateLimit = false; // disable\n```\n\n----------------------------------------\n\nTITLE: Defining Currency Structure in JavaScript\nDESCRIPTION: Demonstrates the structure of a currency object in CCXT, including properties like id, code, name, active status, fee, precision, and limits.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'id':       'btc',       // string literal for referencing within an exchange\n    'code':     'BTC',       // uppercase unified string literal code the currency\n    'name':     'Bitcoin',   // string, human-readable name, if specified\n    'active':    true,       // boolean, currency status (tradeable and withdrawable)\n    'fee':       0.123,      // withdrawal fee, flat\n    'precision': 8,          // number of decimal digits \"after the dot\" (depends on exchange.precisionMode)\n    'limits': {              // value limits when placing orders on this market\n        'amount': {\n            'min': 0.01,     // order amount should be > min\n            'max': 1000,     // order amount should be < max\n        },\n        'price':    { ... }, // same min/max limits for the price of the order\n        'cost':     { ... }, // same limits for order cost = price * amount\n        'withdraw': { ... }, // withdrawal limits\n    },\n    'info': { ... }, // the original unparsed currency info from the exchange\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Inheritance Hierarchy Outline\nDESCRIPTION: This code block outlines the complete exception inheritance hierarchy used in CCXT, showing the relationships between various error types.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_132\n\nLANGUAGE: plaintext\nCODE:\n```\n+ BaseError\n|\n+---+ ExchangeError\n|   |\n|   +---+ AuthenticationError\n|   |   |\n|   |   +---+ PermissionDenied\n|   |   |\n|   |   +---+ AccountSuspended\n|   |\n|   +---+ ArgumentsRequired\n|   |\n|   +---+ BadRequest\n|   |\n|   +---+ BadResponse\n|   |   |\n|   |   +---+ NullResponse\n|   |\n|   +---+ InsufficientFunds\n|   |\n|   +---+ InvalidAddress\n|   |   |\n|   |   +---+ AddressPending\n|   |\n|   +---+ InvalidOrder\n|   |   |\n|   |   +---+ OrderNotFound\n|   |   |\n|   |   +---+ OrderNotCached\n|   |   |\n|   |   +---+ CancelPending\n|   |   |\n|   |   +---+ OrderImmediatelyFillable\n|   |   |\n|   |   +---+ OrderNotFillable\n|   |   |\n|   |   +---+ DuplicateOrderId\n|   |\n|   +---+ NotSupported\n|\n+---+ NetworkError (recoverable)\n    |\n    +---+ InvalidNonce\n    |\n    +---+ RequestTimeout\n    |\n    +---+ ExchangeNotAvailable\n    |   |\n    |   +---+ OnMaintenance\n    |\n    +---+ DDoSProtection\n        |\n        +---+ RateLimitExceeded\n```\n\n----------------------------------------\n\nTITLE: Accessing CCXT in Browser JavaScript\nDESCRIPTION: JavaScript example showing how to access the CCXT global object in a browser environment to display available exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/README.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n----------------------------------------\n\nTITLE: Purging Cached Orders in JavaScript\nDESCRIPTION: Example of how to purge old non-open orders from the .orders cache to free up resources. This snippet demonstrates keeping the last 24 hours of order history in the cache and removing older entries.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\n\n// keep last 24 hours of history in cache\nbefore = exchange.milliseconds () - 24 * 60 * 60 * 1000\n\n// purge all closed and canceled orders \"older\" or issued \"before\" that time\nexchange.purgeCachedOrders (before)\n```\n\n----------------------------------------\n\nTITLE: Creating Orders with User-defined clientOrderId in JavaScript\nDESCRIPTION: Example demonstrating how to set a custom clientOrderId when creating orders in JavaScript. This allows users to identify their own orders by a unique identifier.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_92\n\nLANGUAGE: JavaScript\nCODE:\n```\nexchange.createOrder (symbol, type, side, amount, price, {\n    'clientOrderId': 'Hello',\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching All Transactions in JavaScript\nDESCRIPTION: Method to retrieve both deposit and withdrawal transactions with optional filtering by currency code, time range, and limit. Requires the exchange to support the fetchTransactions capability.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_112\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\n// fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {})\n\nif (exchange.has['fetchTransactions']) {\n    const transactions = await exchange.fetchTransactions (code, since, limit, params)\n} else {\n    throw new Error (exchange.id + ' does not have the fetchTransactions method')\n}\n```\n\n----------------------------------------\n\nTITLE: Using Proxies with Python Async CCXT\nDESCRIPTION: Complete Python example demonstrating how to configure proxies with the asynchronous version of CCXT and fetch ticker data using asyncio.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n# -*- coding: utf-8 -*-\n\nimport asyncio\nimport os\nimport sys\nimport ccxt.async_support as ccxt\nfrom pprint import pprint\n\n\nasync def test_gdax():\n\n    exchange = ccxt.poloniex({\n        #\n        # ↓ The \"proxy\" property setting below is for CORS-proxying only!\n        # Do not use it if you don't know what a CORS proxy is.\n        # https://github.com/ccxt/ccxt/wiki/Install#cors-access-control-allow-origin\n        # You should only use the \"proxy\" setting if you're having a problem with Access-Control-Allow-Origin\n        # In Python you rarely need to use it, if ever at all.\n        #\n        # 'proxy': 'https://cors-anywhere.herokuapp.com/',\n        #\n        # ↓ The \"aiohttp_proxy\" setting is for HTTP(S)-proxying (SOCKS, etc...)\n        # It is a standard method of sending your requests through your proxies\n        # This gets passed to the `asyncio` and `aiohttp` implementation directly\n        # You can use this setting as documented here:\n        # https://docs.aiohttp.org/en/stable/client_advanced.html#proxy-support\n        # This is the setting you should be using with async version of ccxt in Python 3.5+\n        #\n        'aiohttp_proxy': 'http://proxy.com',\n        # 'aiohttp_proxy': 'http://user:pass@some.proxy.com',\n        # 'aiohttp_proxy': 'http://10.10.1.10:3128',\n    })\n\n    # your code goes here...\n\n    ticker = await exchange.fetch_ticker('ETH/BTC')\n\n    # don't forget to free the used resources, when you don't need them anymore\n    await exchange.close()\n\n    return ticker\n\nif __name__ == '__main__':\n    pprint(asyncio.get_event_loop().run_until_complete(test_gdax()))\n```\n\n----------------------------------------\n\nTITLE: Checking Market Order Support in Multiple Languages\nDESCRIPTION: These code snippets demonstrate how to check if an exchange supports creating market orders in JavaScript, Python, and PHP using the CCXT library.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nif (exchange.has['createMarketOrder']) {\n    ...\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n# Python\nif exchange.has['createMarketOrder']:\n    ...\n```\n\nLANGUAGE: php\nCODE:\n```\n// PHP\nif ($exchange->has['createMarketOrder']) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys in JavaScript\nDESCRIPTION: Examples of how to configure API credentials for exchanges in JavaScript. Shows three different approaches: assigning keys to an existing instance, passing keys during instantiation, and creating an exchange from a variable ID.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\n\nconst ccxt = require ('ccxt')\n\n// any time\nlet kraken = new ccxt.kraken ()\nkraken.apiKey = 'YOUR_KRAKEN_API_KEY'\nkraken.secret = 'YOUR_KRAKEN_SECRET_KEY'\n\n// upon instantiation\nlet okcoinusd = new ccxt.okcoinusd ({\n    apiKey: 'YOUR_OKCOIN_API_KEY',\n    secret: 'YOUR_OKCOIN_SECRET_KEY',\n})\n\n// from variable id\nconst exchangeId = 'binance'\n    , exchangeClass = ccxt[exchangeId]\n    , exchange = new exchangeClass ({\n        'apiKey': 'YOUR_API_KEY',\n        'secret': 'YOUR_SECRET',\n        'timeout': 30000,\n        'enableRateLimit': true,\n    })\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Deposit Addresses in JavaScript\nDESCRIPTION: Method for retrieving multiple deposit addresses at once, which returns an array of address structures. May require a list of unified currency codes depending on the exchange.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_105\n\nLANGUAGE: JavaScript\nCODE:\n```\nfetchDepositAddresses (codes = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Creating a Node.js CORS Proxy Server\nDESCRIPTION: A JavaScript implementation of a CORS proxy server using the cors-anywhere package. The script takes an optional port parameter from the command line or defaults to port 8080.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/install.rst#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript CORS Proxy\n// Save this in a file like cors.js and run with `node cors [port]`\n// It will listen for your requests on the port you pass in command line or port 8080 by default\nlet port = (process.argv.length > 2) ? parseInt (process.argv[2]) : 8080; // default\nrequire ('cors-anywhere').createServer ().listen (port, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Basic PHP Usage of CCXT\nDESCRIPTION: Simple PHP example showing how to include the CCXT library and display all available exchange classes.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/README.md#2025-04-23_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\ninclude \"ccxt.php\";\nvar_dump (\\ccxt\\Exchange::$exchanges); // print a list of all available exchange classes\n```\n\n----------------------------------------\n\nTITLE: Checking Exchange Capabilities in Python\nDESCRIPTION: Example of how to check which order-related methods are supported by an exchange using the .has property in Python.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_74\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nimport ccxt\nid = 'binance'\nexchange = getattr(ccxt, id) ()\nprint(exchange.has)\n```\n\n----------------------------------------\n\nTITLE: Creating Market Buy Orders with Custom Parameters in Python\nDESCRIPTION: Example showing how to add a custom order flag when creating a market buy order in Python. This specifically demonstrates adding a 'trading_agreement' parameter for the Kraken exchange.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_90\n\nLANGUAGE: Python\nCODE:\n```\n# Python\n# add a custom order flag\nkraken.create_market_buy_order('BTC/USD', 1, {'trading_agreement': 'agree'})\n```\n\n----------------------------------------\n\nTITLE: Watching Balance with PHP in CCXT Pro\nDESCRIPTION: This snippet shows how to use the watch_balance method in PHP with CCXT Pro. It sets up a loop to continuously fetch and display the account balance, with error handling.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nif ($exchange->has['watchBalance']) {\n    $main = function () use (&$exchange, &$main, $params) {\n        $exchange->watch_balance($params)->then(function($balance) use (&$main) {\n            echo date('c'), ' ', json_encode($balance), \"\\n\";\n            $main();\n        })->otherwise(function (\\Exception $e) use (&$main) {\n            echo get_class ($e), ' ', $e->getMessage (), \"\\n\";\n            $main();\n            // stop the loop on exception or leave it commented to retry\n            // throw $e;\n        });\n    };\n    $loop->futureTick($main);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Nonce in Python\nDESCRIPTION: Examples of customizing the nonce function in Python when using the CCXT library. Shows various approaches including direct milliseconds method use, subclassing, and lambda functions.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_124\n\nLANGUAGE: python\nCODE:\n```\n# Python\n\n# A: the shortest\ncoinbasepro = ccxt.coinbasepro({'nonce': ccxt.Exchange.milliseconds})\n\n# B: custom nonce\nclass MyKraken(ccxt.kraken):\n    n = 1\n    def nonce(self):\n        return self.n += 1\n\n# C: milliseconds nonce\nclass MyBitfinex(ccxt.bitfinex):\n    def nonce(self):\n        return self.milliseconds()\n\n# D: milliseconds nonce inline\nhitbtc = ccxt.hitbtc({\n    'nonce': lambda: int(time.time() * 1000)\n})\n\n# E: milliseconds nonce\nacx = ccxt.acx({'nonce': lambda: ccxt.Exchange.milliseconds()})\n```\n\n----------------------------------------\n\nTITLE: Retrieving List of Supported Exchanges in PHP\nDESCRIPTION: PHP code to get the full list of supported exchange IDs programmatically using the CCXT library.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// PHP\ninclude 'ccxt.php';\nvar_dump (\\ccxt\\Exchange::$exchanges);\n```\n\n----------------------------------------\n\nTITLE: Loading and Accessing Market Data in PHP using CCXT\nDESCRIPTION: Shows how to load market data, access market structures, and retrieve symbols and currencies using PHP in the CCXT library. Includes examples for multiple exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$var_dump ($exchange->load_markets ());\n\n$dashcny1 = $exchange->markets['DASH/CNY'];     // get market structure by symbol\n$dashcny2 = $exchange->market ('DASH/CNY');     // same result in a slightly different way\n\n$dashcnyId = $exchange->market_id ('DASH/CNY'); // get market id by symbol\n\n$symbols = $exchange->symbols;                  // get an array of symbols\n$symbols2 = array_keys ($exchange->markets);    // same as previous line\n\nvar_dump ($exchange->id, $symbols);             // print all symbols\n\n$currencies = $exchange->currencies;            // an associative array of currencies\n\n$okcoinusd = '\\\\ccxt\\\\okcoinusd';\n$okcoinusd = new $okcoinusd ();\n\n$okcoinusd->load_markets ();\n\n$okcoinusd->markets['BTC/USD'];                 // symbol → market (get market by symbol)\n$okcoinusd->markets_by_id['btc_usd'];           // id → market (get market by id)\n\n$okcoinusd->markets['BTC/USD']['id'];           // symbol → id (get id by symbol)\n$okcoinusd->markets_by_id['btc_usd']['symbol']; // id → symbol (get symbol by id)\n```\n\n----------------------------------------\n\nTITLE: Fetching Deposits in Multiple Languages\nDESCRIPTION: Methods to retrieve deposit history with optional filtering by currency code, time range, and limit. Requires the exchange to support the fetchDeposits capability.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_110\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\n// fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {})\n\nif (exchange.has['fetchDeposits']) {\n    const deposits = await exchange.fetchDeposits (code, since, limit, params)\n} else {\n    throw new Error (exchange.id + ' does not have the fetchDeposits method')\n}\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Python\n# fetch_deposits(code = None, since = None, limit = None, params = {})\n\nif exchange.has['fetchDeposits']:\n    deposits = exchange.fetch_deposits(code, since, limit, params)\nelse:\n    raise Exception (exchange.id + ' does not have the fetch_deposits method')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\n// fetch_deposits ($code = null, $since = null, $limit = null, $params = {})\n\nif ($exchange->has['fetchDeposits']) {\n    $deposits = $exchange->fetch_deposits ($code, $since, $limit, $params);\n} else {\n    throw new Exception ($exchange->id . ' does not have the fetch_deposits method');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CCXT with SOCKS Proxy in Python\nDESCRIPTION: Example showing how to set up a CCXT exchange instance with a SOCKS5 proxy using aiohttp and aiohttp_socks. The code creates a proxy connector, establishes a session, and initializes a Binance exchange instance with the proxied session.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt.async_support as ccxt\nimport aiohttp\nimport aiohttp_socks\n\nasync def test():\n\n    connector = aiohttp_socks.ProxyConnector.from_url('socks5://user:password@127.0.0.1:1080')\n    session = aiohttp.ClientSession(connector=connector)\n\n    exchange = ccxt.binance({\n        'session': session,\n        'enableRateLimit': True,\n        # ...\n    })\n\n    # ...\n\n    await session.close()  # don't forget to close the session\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Multiple Tickers Streaming in JavaScript\nDESCRIPTION: Example of streaming multiple tickers simultaneously using watchTickers method in CCXT Pro.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['watchTickers']) {\n    while (true) {\n        try {\n            const tickers = await exchange.watchTickers (symbols, params)\n            console.log (new Date (), tickers)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Funding Fee Rates in JavaScript\nDESCRIPTION: Shows how to access funding fee rates from the currencies property in the exchange object. This is useful for getting transaction or withdrawal fee rates for specific cryptocurrencies.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_120\n\nLANGUAGE: javascript\nCODE:\n```\nexchange.currencies['ETH']['fee'] // tx/withdrawal fee rate for ETH\nexchange.currencies['BTC']['fee'] // tx/withdrawal fee rate for BTC\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Book Data with Rate Limiting in PHP\nDESCRIPTION: A PHP implementation for fetching order book data for all market symbols with rate limiting. The code uses microsecond sleep intervals between requests to avoid hitting exchange API rate limits.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n// PHP\n$delay = 2000000; // microseconds = seconds * 1000000\nforeach ($exchange->markets as $symbol => $market) {\n    var_dump ($exchange->fetch_order_book ($symbol));\n    usleep ($delay); // rate limit\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Ledger History in JavaScript\nDESCRIPTION: Method for retrieving the complete ledger history which shows all operations affecting the user's balance including trades, deposits, withdrawals, and fees. This may require currency code specification on some exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_121\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync fetchLedger (code = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Customizing Nonce in PHP\nDESCRIPTION: Examples of customizing the nonce function in PHP when using the CCXT library. Shows implementation through class extension with both incremental and milliseconds-based nonce generation.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_125\n\nLANGUAGE: php\nCODE:\n```\n// PHP\n\n// A: custom nonce value\nclass MyOKCoinUSD extends \\ccxt\\okcoinusd {\n    public function __construct ($options = array ()) {\n        parent::__construct (array_merge (array ('i' => 1), $options));\n    }\n    public function nonce () {\n        return $this->i++;\n    }\n}\n\n// B: milliseconds nonce\nclass MyZaif extends \\ccxt\\zaif {\n    public function __construct ($options = array ()) {\n        parent::__construct (array_merge (array ('i' => 1), $options));\n    }\n    public function nonce () {\n        return $this->milliseconds ();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exchange Status Structure Format in JavaScript\nDESCRIPTION: Demonstrates the data structure returned by the fetchStatus method, including status, updated timestamp, ETA for maintenance, and relevant URL information.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_116\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'status': 'ok', // 'ok', 'shutdown', 'error', 'maintenance'\n    'updated': undefined, // integer, last updated timestamp in milliseconds if updated via the API\n    'eta': undefined, // when the maintenance or outage is expected to end\n    'url': undefined, // a link to a GitHub issue or to an exchange post on the subject\n}\n```\n\n----------------------------------------\n\nTITLE: Purging Cached Orders in JavaScript\nDESCRIPTION: Demonstrates how to purge old non-open orders from the cache in JavaScript, keeping the last 24 hours of history.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_77\n\nLANGUAGE: JavaScript\nCODE:\n```\n// keep last 24 hours of history in cache\nbefore = exchange.milliseconds () - 24 * 60 * 60 * 1000\n\n// purge all closed and canceled orders \"older\" or issued \"before\" that time\nexchange.purgeCachedOrders (before)\n```\n\n----------------------------------------\n\nTITLE: Fetching Withdrawals in Multiple Languages\nDESCRIPTION: Methods to retrieve withdrawal history with optional filtering by currency code, time range, and limit. Requires the exchange to support the fetchWithdrawals capability.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_111\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\n// fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {})\n\nif (exchange.has['fetchWithdrawals']) {\n    const withdrawals = await exchange.fetchWithdrawals (code, since, limit, params)\n} else {\n    throw new Error (exchange.id + ' does not have the fetchWithdrawals method')\n}\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Python\n# fetch_withdrawals(code = None, since = None, limit = None, params = {})\n\nif exchange.has['fetchWithdrawals']:\n    withdrawals = exchange.fetch_withdrawals(code, since, limit, params)\nelse:\n    raise Exception (exchange.id + ' does not have the fetch_withdrawals method')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\n// fetch_withdrawals ($code = null, $since = null, $limit = null, $params = {})\n\nif ($exchange->has['fetchWithdrawals']) {\n    $withdrawals = $exchange->fetch_withdrawals ($code, $since, $limit, $params);\n} else {\n    throw new Exception ($exchange->id . ' does not have the fetch_withdrawals method');\n}\n```\n\n----------------------------------------\n\nTITLE: Ledger Entry Structure in JavaScript\nDESCRIPTION: Demonstrates the unified structure of ledger entries returned by the fetchLedger method, including transaction details, references, currency information, and fees.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_122\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'id': 'hqfl-f125f9l2c9',                // string id of the ledger entry, e.g. an order id\n    'direction': 'out',                     // or 'in'\n    'account': '06d4ab58-dfcd-468a',        // string id of the account if any\n    'referenceId': 'bf7a-d4441fb3fd31',     // string id of the trade, transaction, etc...\n    'referenceAccount': '3146-4286-bb71',   // string id of the opposite account (if any)\n    'type': 'trade',                        // string, reference type, see below\n    'currency': 'BTC',                      // string, unified currency code, 'ETH', 'USDT'...\n    'amount': 123.45,                       // absolute number, float (does not include the fee)\n    'timestamp': 1544582941735,             // milliseconds since epoch time in UTC\n    'datetime': \"2018-12-12T02:49:01.735Z\", // string of timestamp, ISO8601\n    'before': 0,                            // amount of currency on balance before\n    'after': 0,                             // amount of currency on balance after\n    'status': 'ok',                         // 'ok, 'pending', 'canceled'\n    'fee': {                                // object or or undefined\n        'cost': 54.321,                     // absolute number on top of the amount\n        'currency': 'ETH',                  // string, unified currency code, 'ETH', 'USDT'...\n    },\n    'info': { ... },                        // raw ledger entry as is from the exchange\n}\n```\n\n----------------------------------------\n\nTITLE: Python Proxy Configuration (Sync)\nDESCRIPTION: Example of configuring synchronous proxy settings in Python CCXT implementation\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/install.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt\nexchange = ccxt.poloniex({\n    'proxies': {\n        'http': 'http://10.10.1.10:3128',\n        'https': 'https://10.10.1.10:1080',\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Python CCXT Basic Usage\nDESCRIPTION: Example of importing and using CCXT in Python to list available exchanges\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/install.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt\nprint(ccxt.exchanges) # print a list of all available exchange classes\n```\n\n----------------------------------------\n\nTITLE: Exchange Status Structure in JavaScript\nDESCRIPTION: Response structure returned by the fetchStatus method. It includes the current operational status, last update timestamp, estimated time for maintenance completion, and reference URLs for more information.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_118\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'status': 'ok', // 'ok', 'shutdown', 'error', 'maintenance'\n    'updated': undefined, // integer, last updated timestamp in milliseconds if updated via the API\n    'eta': undefined, // when the maintenance or outage is expected to end\n    'url': undefined, // a link to a GitHub issue or to an exchange post on the subject\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to API Methods in CCXT\nDESCRIPTION: Examples showing how to pass parameters to API methods in different programming languages. These snippets demonstrate the standard way to send named parameters to exchange API endpoints.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nbitso.publicGetTicker ({ book: 'eth_mxn' })\n```\n\nLANGUAGE: python\nCODE:\n```\nccxt.zaif().public_get_ticker_pair ({ 'pair': 'btc_jpy' })\n```\n\n----------------------------------------\n\nTITLE: Balance Structure Format in CCXT\nDESCRIPTION: Detailed structure of the balance object returned from the fetchBalance method. Shows how funds are organized by availability (free, used, total) and by currency in the response.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'info':  { ... },    // the original untouched non-parsed reply with details\n\n    //-------------------------------------------------------------------------\n    // indexed by availability of funds first, then by currency\n\n    'free':  {           // money, available for trading, by currency\n        'BTC': 321.00,   // floats...\n        'USD': 123.00,\n        ...\n    },\n\n    'used':  { ... },    // money on hold, locked, frozen, or pending, by currency\n\n    'total': { ... },    // total (free + used), by currency\n\n    //-------------------------------------------------------------------------\n    // indexed by currency first, then by availability of funds\n\n    'BTC':   {           // string, three-letter currency code, uppercase\n        'free': 321.00   // float, money available for trading\n        'used': 234.00,  // float, money on hold, locked, frozen or pending\n        'total': 555.00, // float, total balance (free + used)\n    },\n\n    'USD':   {           // ...\n        'free': 123.00   // ...\n        'used': 456.00,\n        'total': 579.00,\n    },\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Tickers in PHP with CCXT\nDESCRIPTION: Example showing how to fetch tickers for specific symbol pairs in PHP. This allows limiting API requests to only the tickers of interest.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_58\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\nif ($exchange->has['fetchTickers']) {\n    var_dump ($exchange->fetch_tickers (array ('ETH/BTC', 'LTC/BTC'))); // listed tickers indexed by their symbols\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating CCXT Pro in Python with Event Loop\nDESCRIPTION: Example of how to create a CCXT Pro exchange instance in Python. This creates a Kraken exchange instance with asyncio event loop and demonstrates watching an orderbook.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Python\nimport ccxtpro\nimport asyncio\n\nasync def main(loop):\n    exchange = ccxtpro.kraken({'enableRateLimit': True, 'asyncio_loop': loop})\n    while True:\n        orderbook = await exchange.watch_order_book('BTC/USD')\n        print(orderbook['asks'][0], orderbook['bids'][0])\n    await exchange.close()\n\nloop = asyncio.new_event_loop()\nloop.run_until_complete(main(loop))\n```\n\n----------------------------------------\n\nTITLE: Purging Cached Orders in Python\nDESCRIPTION: Example of how to purge old non-open orders from the .orders cache in Python. This snippet demonstrates keeping the last hour of order history in the cache and removing older entries.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_84\n\nLANGUAGE: python\nCODE:\n```\n# Python\n\n# keep last hour of history in cache\nbefore = exchange.milliseconds () - 1 * 60 * 60 * 1000\n\n# purge all closed and canceled orders \"older\" or issued \"before\" that time\nexchange.purge_cached_orders (before)\n```\n\n----------------------------------------\n\nTITLE: Fetching Ledger Entries in JavaScript\nDESCRIPTION: Shows the fetchLedger method used to retrieve the ledger history, which includes all actions affecting the user's balance such as deposits, withdrawals, trades, and fees.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_121\n\nLANGUAGE: javascript\nCODE:\n```\nasync fetchLedger (code = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Calculating Trading Fees in JavaScript\nDESCRIPTION: Shows the calculateFee method that can be used to precalculate trading fees. Note that this method is experimental and actual fees may differ based on market conditions.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_117\n\nLANGUAGE: javascript\nCODE:\n```\ncalculateFee (symbol, type, side, amount, price, takerOrMaker = 'taker', params = {})\n```\n\n----------------------------------------\n\nTITLE: Importing Async CCXT in Python\nDESCRIPTION: Python example showing how to import the asynchronous version of CCXT for use with asyncio in Python 3.5.3+.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/README.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt.async_support as ccxt # link against the asynchronous version of ccxt\n```\n\n----------------------------------------\n\nTITLE: Fee Structure Format in JavaScript\nDESCRIPTION: Standard format for fee information used throughout the CCXT library. This structure includes the fee type, currency, rate, and actual cost, providing a unified representation across different exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_116\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'type': takerOrMaker,\n    'currency': 'BTC', // the unified fee currency code\n    'rate': percentage, // the fee rate, 0.05% = 0.0005, 1% = 0.01, ...\n    'cost': feePaid, // the fee cost (amount * fee rate)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys in PHP\nDESCRIPTION: Examples of how to configure API credentials for exchanges in PHP. Shows three methods: assigning keys to an existing instance, passing keys during instantiation, and creating an exchange from a variable ID.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_78\n\nLANGUAGE: php\nCODE:\n```\n// PHP\n\ninclude 'ccxt.php'\n\n// any time\n$quoinex = new \\ccxt\\quoinex ();\n$quoinex->apiKey = 'YOUR_QUOINE_API_KEY';\n$quoinex->secret = 'YOUR_QUOINE_SECRET_KEY';\n\n// upon instantiation\n$zaif = new \\ccxt\\zaif (array (\n    'apiKey' => 'YOUR_ZAIF_API_KEY',\n    'secret' => 'YOUR_ZAIF_SECRET_KEY'\n));\n\n// from variable id\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class (array (\n    'apiKey' => 'YOUR_API_KEY',\n    'secret' => 'YOUR_SECRET',\n    'timeout' => 30000,\n    'enableRateLimit' => true,\n));\n```\n\n----------------------------------------\n\nTITLE: Fetching Transactions in PHP\nDESCRIPTION: PHP implementation for fetching transaction history using the fetch_transactions method. Similar to the JavaScript version, it verifies method availability before attempting to retrieve transaction data.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_114\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\n// fetch_transactions ($code = null, $since = null, $limit = null, $params = {})\n\nif ($exchange->has['fetchTransactions']) {\n    $transactions = $exchange->fetch_transactions ($code, $since, $limit, $params);\n} else {\n    throw new Exception ($exchange->id . ' does not have the fetch_transactions method');\n}\n```\n\n----------------------------------------\n\nTITLE: Ticker Response Structure in JavaScript\nDESCRIPTION: Example showing the structure of the response from fetchTickers method. The response contains the original JSON from the exchange and individual ticker objects indexed by their symbols.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_59\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'info':    { ... }, // the original JSON response from the exchange as is\n    'BTC/USD': { ... }, // a single ticker for BTC/USD\n    'ETH/BTC': { ... }, // a ticker for ETH/BTC\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Unified API Params in PHP\nDESCRIPTION: Example of passing custom parameters to a CCXT unified API method in PHP. This code demonstrates using an associative array to override default settings when fetching an order book.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\n$params = array (\n    'foo' => 'bar',       // exchange-specific overrides in unified queries\n    'Hello' => 'World!',  // see their docs for more details on parameter names\n}\n\n// overrides go into the last argument to the unified call ↓ HERE\n$result = $exchange->fetch_order_book ($symbol, $length, $params);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Nonce in PHP\nDESCRIPTION: Demonstrates how to implement custom nonce behavior in PHP through class inheritance and constructor options.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_125\n\nLANGUAGE: PHP\nCODE:\n```\n// A: custom nonce value\nclass MyOKCoinUSD extends \\ccxt\\okcoinusd {\n    public function __construct ($options = array ()) {\n        parent::__construct (array_merge (array ('i' => 1), $options));\n    }\n    public function nonce () {\n        return $this->i++;\n    }\n}\n\n// B: milliseconds nonce\nclass MyZaif extends \\ccxt\\zaif {\n    public function __construct ($options = array ()) {\n        parent::__construct (array_merge (array ('i' => 1), $options));\n    }\n    public function nonce () {\n        return $this->milliseconds ();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Async Support in CCXT\nDESCRIPTION: Example showing how to import the asynchronous version of CCXT in Python 3.5.3+.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/README.md#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt.async_support as ccxt # link against the asynchronous version of ccxt\n```\n\n----------------------------------------\n\nTITLE: Proper Symbol Parsing in JavaScript (Good Example)\nDESCRIPTION: This example demonstrates the correct way to convert exchange-specific market IDs to unified symbols by using the markets dictionary and fallback parsing when needed.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nparseTrade (trade, market = undefined) {\n   let symbol = undefined;\n   const marketId = this.safeString (trade, 'pair');\n   if (marketId !== undefined) {\n      if (marketId in this.markets_by_id) {\n         // look up by an exchange-specific id in the preloaded markets first\n         market = this.markets_by_id[market];\n         symbol = market['symbol'];\n      } else {\n         // try to parse it somehow, if the format is known\n         const [ baseId, quoteId ] = marketId.split ('/');\n         const base = this.safeCurrencyCode (baseId); // unified\n         const quote = this.safeCurrencyCode (quoteId);\n         symbol = base + '/' + quote;\n      }\n   }\n   // parsing code...\n   return {\n      'info': trade,\n      'symbol': symbol, // very good, a unified symbol here now\n      // other fields...\n   };\n}\n```\n\n----------------------------------------\n\nTITLE: Running CCXT Tests with Node.js\nDESCRIPTION: Commands for running tests on different exchanges and programming languages using Node.js. Includes examples for testing Python 2, PHP, and Python 3 versions.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnode run-tests --python         # test Python 2 version, all exchanges\nnode run-tests --php bitfinex   # test Bitfinex with PHP\nnode run-tests --python3 kraken # test Kraken with Python 3, requires 'npm run build'\n```\n\n----------------------------------------\n\nTITLE: Watching OHLCV Candles in JavaScript with CCXT Pro\nDESCRIPTION: Example of using the watchOHLCV method in JavaScript to continuously retrieve and display OHLCV candle data for a specified symbol. Includes error handling and an infinite loop for continuous monitoring.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['watchOHLCV']) {\n    while (true) {\n        try {\n            const candles = await exchange.watchOHLCV (symbol, since, limit, params)\n            console.log (new Date (), candles)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone and Initializing CCXT Exchanges in PHP\nDESCRIPTION: Shows how to set the timezone to UTC in PHP before using CCXT, and demonstrates various ways to instantiate exchange objects, including direct instantiation and dynamic creation from exchange IDs.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// PHP\ndate_default_timezone_set('UTC');\ninclude 'ccxt.php';\n$bitfinex = new \\ccxt\\bitfinex(); // default id\n$bitfinex1 = new \\ccxt\\bitfinex(array('id' => 'bitfinex1'));\n$bitfinex2 = new \\ccxt\\bitfinex(array('id' => 'bitfinex2'));\n$id = 'kraken';\n$exchange = '\\\\ccxt\\\\' . $id\n$kraken = new $exchange();\n\n// from variable id\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class(array(\n    'apiKey' => 'YOUR_API_KEY',\n    'secret' => 'YOUR_SECRET',\n    'timeout' => 30000,\n    'enableRateLimit' => true,\n));\n```\n\n----------------------------------------\n\nTITLE: Creating Orders with User-defined clientOrderId in PHP\nDESCRIPTION: Example demonstrating how to set a custom clientOrderId when creating orders in PHP. This allows users to identify their own orders by a unique identifier.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_94\n\nLANGUAGE: PHP\nCODE:\n```\n$exchange->create_order($symbol, $type, $side, $amount, $price, array(\n    'clientOrderId' => 'Foobar',\n))\n```\n\n----------------------------------------\n\nTITLE: Enabling DEBUG Logging Level in Python CCXT\nDESCRIPTION: Code to enable DEBUG level logging in Python to get more detailed information about CCXT operations for troubleshooting purposes.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_131\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT via NPM in JavaScript\nDESCRIPTION: Demonstrates how to install the CCXT library using NPM and import it in a JavaScript file.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install ccxt\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar ccxt = require ('ccxt')\n\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n----------------------------------------\n\nTITLE: Listing Unified API Methods for WebSocket Support in CCXT\nDESCRIPTION: This code snippet lists the unified API methods that can potentially use WebSocket data feeds in the CCXT library. These methods cover various trading operations and market data retrieval.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/WebSocket-Support.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- fetchOrderBook\n- fetchOrderBooks\n- fetchTicker\n- fetchTickers\n- fetchTrades\n- fetchBalances\n- fetchOrders\n- fetchOpenOrders\n- fetchClosedOrders\n- fetchMyTrades\n- fetchTransactions\n- fetchDeposits\n- fetchWithdrawals\n```\n\n----------------------------------------\n\nTITLE: Initializing CCXT Exchanges in Python\nDESCRIPTION: Demonstrates various ways to create exchange instances in Python, including direct instantiation, dynamic instantiation from variables, and configuration with API credentials.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt\nexchange = ccxt.okcoinusd () # default id\nokcoin1 = ccxt.okcoinusd ({ 'id': 'okcoin1' })\nokcoin2 = ccxt.okcoinusd ({ 'id': 'okcoin2' })\nid = 'btcchina'\nbtcchina = eval ('ccxt.%s ()' % id)\ncoinbasepro = getattr (ccxt, 'coinbasepro') ()\n\n# from variable id\nexchange_id = 'binance'\nexchange_class = getattr(ccxt, exchange_id)\nexchange = exchange_class({\n    'apiKey': 'YOUR_API_KEY',\n    'secret': 'YOUR_SECRET',\n    'timeout': 30000,\n    'enableRateLimit': True,\n})\n```\n\n----------------------------------------\n\nTITLE: watchMyTrades Method Signatures in CCXT Pro\nDESCRIPTION: This snippet shows the method signatures for watchMyTrades in JavaScript, Python, and PHP. The method is used to watch for personal trades, with optional parameters for symbol, since, limit, and additional params.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nwatchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\nLANGUAGE: python\nCODE:\n```\nwatch_my_trades(symbol=None, since=None, limit=None, params={})\n```\n\nLANGUAGE: php\nCODE:\n```\nwatch_my_trades($symbol = null, $since = null, $lmit = null, $params = array());\n```\n\n----------------------------------------\n\nTITLE: Cursor-based Pagination in JavaScript\nDESCRIPTION: Implements cursor-based pagination for fetching trades using JavaScript. Uses a page parameter as cursor and accumulates results.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['fetchTrades']) {\n    let page = 0  // exchange-specific type and value\n    let allTrades = []\n    while (true) {\n        const symbol = undefined // change for your symbol\n        const since = undefined\n        const limit = 20 // change for your limit\n        const params = {\n            'page': page, // exchange-specific non-unified parameter name\n        }\n        const trades = await exchange.fetchTrades (symbol, since, limit, params)\n        if (trades.length) {\n            // not thread-safu and exchange-specific !\n            page = exchange.last_json_response['cursor']\n            allTrades.push (trades)\n        } else {\n            break\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Timestamp Conversion in JavaScript\nDESCRIPTION: Demonstrates proper timestamp conversion methods to ensure all timestamps are in milliseconds as required by the CCXT unified API structures.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst data = {\n   'unixTimestampInSeconds': 1565242530,\n   'unixTimestampInMilliseconds': 1565242530165,\n   'stringInSeconds': '1565242530',\n};\n\n// convert to integer if the underlying value is already in milliseconds\nconst timestamp = this.safeInteger (data, 'unixTimestampInMilliseconds'); // === 1565242530165\n\n// convert to integer and multiply by a thousand if the value is a UNIX timestamp in seconds\nconst timestamp = this.safeTimestamp (data, 'unixTimestampInSeconds'); // === 1565242530000\n\n// convert to integer and multiply by a thousand if the value is in seconds\nconst timestamp = this.safeTimestamp (data, 'stringInSeconds'); // === 1565242530000\n```\n\n----------------------------------------\n\nTITLE: Throttled OrderBook Streaming in JavaScript\nDESCRIPTION: Example of throttled orderbook streaming using WebSocket in CCXT Pro. Updates are checked at fixed intervals rather than in real-time.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst limit = 5 // optional\n// await is optional, alternatively you can launch it in bg without await\nawait exchange.watchOrderBook (symbol, limit)\nwhile (true) {\n    // your reaction takes place here\n    // you arrive here every 100 ms regardless of whether there was an update or not\n    // in throttling mode offloading the orderbook with .limit () is required\n    console.log (exchange.orderbooks[symbol].limit (limit))\n    await sleep (100) // every 100 ms\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Trading Fee Rates in JavaScript\nDESCRIPTION: Demonstrates how to access trading fee rates from the markets property in the exchange object. Shows how to get taker and maker fee rates for specific trading pairs.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_118\n\nLANGUAGE: javascript\nCODE:\n```\nexchange.markets['ETH/BTC']['taker'] // taker fee rate for ETH/BTC\nexchange.markets['BTC/USD']['maker'] // maker fee rate for BTC/USD\n```\n\n----------------------------------------\n\nTITLE: OHLCV Data Structure in JavaScript\nDESCRIPTION: Example of the OHLCV (Open, High, Low, Close, Volume) data structure returned by the fetchOHLCV method. Each candle is represented as an array with timestamp, open, high, low, close prices, and volume.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\n[\n   [\n       1504541580000, // UTC timestamp in milliseconds, integer\n       4235.4,        // (O)pen price, float\n       4240.6,        // (H)ighest price, float\n       4230.0,        // (L)owest price, float\n       4230.7,        // (C)losing price, float\n       37.72941911    // (V)olume (in terms of the base currency), float\n   ],\n   ...\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Rate Limiting in CCXT (Python)\nDESCRIPTION: Shows how to enable or disable the built-in rate limiter in CCXT using Python. The rate limiter can be enabled during exchange instantiation or toggled on/off later.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n# or switch the built-in rate-limiter on or off later after instantiation\nexchange.enableRateLimit = True  # enable\nexchange.enableRateLimit = False  # disable\n```\n\n----------------------------------------\n\nTITLE: Importing CCXT in Python\nDESCRIPTION: Basic Python example showing how to import CCXT and print a list of all available exchange classes.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/README.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt\nprint(ccxt.exchanges) # print a list of all available exchange classes\n```\n\n----------------------------------------\n\nTITLE: Loading Market Data in Python with CCXT\nDESCRIPTION: This snippet demonstrates how to initialize a Poloniex exchange instance with verbose logging, load market data, and print various market information including full listings, symbols, and specific market details.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n# Python\npoloniex = ccxt.poloniex({'verbose': True}) # log HTTP requests\npoloniex.load_markets() # request markets\nprint(poloniex.id, poloniex.markets)   # output a full list of all loaded markets\nprint(list(poloniex.markets.keys())) # output a short list of market symbols\nprint(poloniex.markets['BTC/ETH'])     # output single market details\npoloniex.load_markets() # return a locally cached version, no reload\nreloadedMarkets = poloniex.load_markets(True) # force HTTP reload = True\nprint(reloadedMarkets['ETH/ZEC'])\n```\n\n----------------------------------------\n\nTITLE: Using Keccak Hash Function in PHP\nDESCRIPTION: Examples of using the Keccak hash function with various output sizes (224, 256, 384, 512 bits) and the SHAKE extendable output function with 128 and 256 bit rates.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/php/static_dependencies/kornrunner/keccak/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse kornrunner\\Keccak;\n\nKeccak::hash('', 224);\n// f71837502ba8e10837bdd8d365adb85591895602fc552b48b7390abd\n\nKeccak::hash('', 256);\n// c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\n\nKeccak::hash('', 384);\n// 2c23146a63a29acf99e73b88f8c24eaa7dc60aa771780ccc006afbfa8fe2479b2dd2b21362337441ac12b515911957ff\n\nKeccak::hash('', 512);\n// 0eab42de4c3ceb9235fc91acffe746b29c29a8c366b7c60e4e67c466f36a4304c00fa9caf9d87976ba469bcbe06713b435f091ef2769fb160cdab33d3670680e\n\nKeccak::shake('', 128, 256);\n// 7f9c2ba4e88f827d616045507605853ed73b8093f6efbc88eb1a6eacfa66ef26\n\nKeccak::shake('', 256, 512);\n// 46b9dd2b0ba88d13233b3feb743eeb243fcd52ea62b81b82b50c27646ed5762fd75dc4ddd8c0f200cb05019d67b592f6fc821c49479ab48640292eacb3b7c4be\n```\n\n----------------------------------------\n\nTITLE: Basic Python Usage of CCXT\nDESCRIPTION: Simple Python example showing how to import the CCXT module and display all available exchange classes.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/README.md#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt\nprint(ccxt.exchanges) # print a list of all available exchange classes\n```\n\n----------------------------------------\n\nTITLE: Checking and Using fetchOrder Method with JavaScript\nDESCRIPTION: Shows how to check if an exchange supports the fetchOrder method and how to use it with optional parameters. This pattern is useful for exchanges that require additional parameters when fetching orders.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['fetchOrder']) {\n    //  you can use the params argument for custom overrides\n    let order = await exchange.fetchOrder (id, symbol = undefined, params = {})\n}\n```\n\n----------------------------------------\n\nTITLE: Watching OHLCV Candles in PHP with CCXT Pro\nDESCRIPTION: PHP implementation of the watch_ohlcv method to continuously monitor OHLCV candle data. Uses promises and recursive function calls to maintain a monitoring loop, with output including symbol and timeframe information.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['watchOHLCV']) {\n    $main = function () use (&$exchange, &$main, $symbol, $timeframe, $since, $limit, $params) {\n        $exchange->watch_ohlcv($symbol, $timeframe, $since, $limit, $params)->then(\n            function($candles) use (&$main, $symbol, $timeframe) {\n                echo date('c'), ' ', $symbol, ' ', $timeframe, ' ', json_encode($candles), \"\\n\";\n                $main();\n            }\n        )->otherwise(function (\\Exception $e) use (&$main) {\n            echo get_class ($e), ' ', $e->getMessage (), \"\\n\";\n            $main();\n            // stop the loop on exception or leave it commented to retry\n            // throw $e;\n        });\n    };\n    $loop->futureTick($main);\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Balance with Python in CCXT Pro\nDESCRIPTION: This snippet demonstrates how to use the watch_balance method in Python with CCXT Pro. It sets up an infinite loop to continuously fetch and print the account balance, with error handling.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nif exchange.has['watchBalance']:\n    while True:\n        try:\n            balance = await exchange.watch_balance(params)\n            print(exchange.iso8601(exchange.milliseconds()), balance)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # rasie e\n```\n\n----------------------------------------\n\nTITLE: Deposit Address Structure in JavaScript\nDESCRIPTION: Defines the structure for deposit addresses returned by fetchDepositAddress, fetchDepositAddresses and createDepositAddress methods. Includes currency code, address, optional tag for specific currencies, and raw exchange response.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'currency': currency, // currency code\n    'address': address,   // address in terms of requested currency\n    'tag': tag,           // tag / memo / paymentId for particular currencies (XRP, XMR, ...)\n    'info': response,     // raw unparsed data as returned from the exchange\n}\n```\n\n----------------------------------------\n\nTITLE: Understanding Exchange Capabilities Structure\nDESCRIPTION: Example showing the typical structure of the .has property for exchange capabilities, particularly for order-related methods.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_76\n\nLANGUAGE: JavaScript\nCODE:\n```\nexchange.has = {\n\n    // ... other flags ...\n\n    'fetchOrder': true, // available from the exchange directly and implemented in ccxt\n    'fetchOrders': false, // not available from the exchange or not implemented in ccxt\n    'fetchOpenOrders': true,\n    'fetchClosedOrders': 'emulated', // not available from the exchange, but emulated in ccxt\n\n    // ... other flags ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Markets in JavaScript\nDESCRIPTION: Example of loading markets manually using the loadMarkets() method in JavaScript. This returns an associative array of markets indexed by trading symbol.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n    let kraken = new ccxt.kraken ()\n    let markets = await kraken.load_markets ()\n    console.log (kraken.id, markets)\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT via pip for Python\nDESCRIPTION: Command to install the CCXT library using pip for Python applications.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/README.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npip install ccxt\n```\n\n----------------------------------------\n\nTITLE: Forcing Market Cache Reload in JavaScript using CCXT\nDESCRIPTION: Demonstrates how to load market data, access market information, and force a reload of the market cache using JavaScript in the CCXT library.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n    let kraken = new ccxt.kraken ({ verbose: true }) // log HTTP requests\n    await kraken.load_markets () // request markets\n    console.log (kraken.id, kraken.markets)    // output a full list of all loaded markets\n    console.log (Object.keys (kraken.markets)) // output a short list of market symbols\n    console.log (kraken.markets['BTC/USD'])    // output single market details\n    await kraken.load_markets () // return a locally cached version, no reload\n    let reloadedMarkets = await kraken.load_markets (true) // force HTTP reload = true\n```\n\n----------------------------------------\n\nTITLE: Market Fee Information Structure in JavaScript\nDESCRIPTION: Shows the structure of fee-related information that may be present in market objects, including taker/maker rates, tier-based information, and percentage indicators.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_119\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'taker': 0.002,   // taker fee rate, 0.002 = 0.2%\n    'maker': 0.0016,  // maker fee rate, 0.0016 = 0.16%\n    'percentage': true, // whether the taker and maker fee rate is a multiplier or a fixed flat amount\n    'tierBased': false, // whether the fee depends on your trading tier (your trading volume)\n\n    'tiers': {\n        'taker': [\n            [0, 0.0026], // tupple (trade volume in USD, taker fee) ordered by increasing volume\n            [50000, 0.0024],\n            ...\n        ],\n        'maker': [\n            [0, 0.0016], // tupple (trade volume in USD, maker fee) ordered by increasing volume\n            [50000, 0.0014],\n            ...\n        ],\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Usage of CCXT\nDESCRIPTION: Simple JavaScript example showing how to require the CCXT module and display all available exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/README.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar ccxt = require ('ccxt')\n\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n----------------------------------------\n\nTITLE: Fetch Withdrawals Implementation\nDESCRIPTION: Implementation of withdrawal fetching functionality across multiple languages with error handling for unsupported exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_112\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['fetchWithdrawals']) {\n    const withdrawals = await exchange.fetchWithdrawals (code, since, limit, params)\n} else {\n    throw new Error (exchange.id + ' does not have the fetchWithdrawals method')\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nif exchange.has['fetchWithdrawals']:\n    withdrawals = exchange.fetch_withdrawals(code, since, limit, params)\nelse:\n    raise Exception (exchange.id + ' does not have the fetch_withdrawals method')\n```\n\nLANGUAGE: php\nCODE:\n```\nif ($exchange->has['fetchWithdrawals']) {\n    $withdrawals = $exchange->fetch_withdrawals ($code, $since, $limit, $params);\n} else {\n    throw new Exception ($exchange->id . ' does not have the fetch_withdrawals method');\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Account Balance in PHP with CCXT Pro\nDESCRIPTION: PHP implementation of watch_balance method using promises to continuously monitor account balance. Includes error handling and recursive function calls to maintain the monitoring loop with JSON-encoded output of balance data.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['watchBalance']) {\n    $main = function () use (&$exchange, &$main, $params) {\n        $exchange->watch_balance($params)->then(function($balance) use (&$main) {\n            echo date('c'), ' ', json_encode($balance), \"\\n\";\n            $main();\n        })->otherwise(function (\\Exception $e) use (&$main) {\n            echo get_class ($e), ' ', $e->getMessage (), \"\\n\";\n            $main();\n            // stop the loop on exception or leave it commented to retry\n            // throw $e;\n        });\n    };\n    $loop->futureTick($main);\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Trades in PHP with CCXT Pro\nDESCRIPTION: PHP implementation of watch_trades method using promises to continuously monitor trade data. Includes error handling and recursive function calls to maintain the monitoring loop with JSON-encoded output of trade data.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['watchTrades']) {\n    $main = function () use (&$exchange, &$main, $symbol, $since, $limit, $params) {\n        $exchange->watch_trades($symbol, $since, $limit, $params)->then(function($trades) use (&$main) {\n            echo date('c'), ' ', json_encode($trades), \"\\n\";\n            $main();\n        })->otherwise(function (\\Exception $e) use (&$main) {\n            echo get_class ($e), ' ', $e->getMessage (), \"\\n\";\n            $main();\n            // stop the loop on exception or leave it commented to retry\n            // throw $e;\n        });\n    };\n    $loop->futureTick($main);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Fee Structure Format in JavaScript\nDESCRIPTION: Shows the unified fee structure format used throughout the CCXT library. This structure represents fee information and is usually indexed by market or currency.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_114\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'type': takerOrMaker,\n    'currency': 'BTC', // the unified fee currency code\n    'rate': percentage, // the fee rate, 0.05% = 0.0005, 1% = 0.01, ...\n    'cost': feePaid, // the fee cost (amount * fee rate)\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Exchanges in Python\nDESCRIPTION: Shows how to programmatically get the list of supported exchange IDs using the CCXT library in Python\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt\nprint (ccxt.exchanges)\n```\n\n----------------------------------------\n\nTITLE: Basic PHP Usage of CCXT\nDESCRIPTION: Simple PHP example showing how to include the CCXT library and list available exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\ninclude \"ccxt.php\";\nvar_dump (\\ccxt\\Exchange::$exchanges); // print a list of all available exchange classes\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Exchanges in JavaScript\nDESCRIPTION: Shows how to programmatically get the list of supported exchange IDs using the CCXT library in JavaScript\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ccxt = require ('ccxt')\nconsole.log (ccxt.exchanges)\n```\n\n----------------------------------------\n\nTITLE: Instantiating CCXT Pro Exchange in Python with asyncio\nDESCRIPTION: Example showing how to create a CCXT Pro exchange instance in Python using asyncio, including an event loop setup and a basic orderbook watching function.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxtpro\nimport asyncio\n\nasync def main(loop):\n    exchange = ccxtpro.kraken({'enableRateLimit': True, 'asyncio_loop': loop})\n    while True:\n        orderbook = await exchange.watch_order_book('BTC/USD')\n        print(orderbook['asks'][0], orderbook['bids'][0])\n    await exchange.close()\n\nloop = asyncio.new_event_loop()\nloop.run_until_complete(main(loop))\n```\n\n----------------------------------------\n\nTITLE: Formatting Decimals with decimalToPrecision in PHP\nDESCRIPTION: Example of the decimalToPrecision function signature in PHP, used for formatting values to required decimal precision with support for different rounding, counting, and padding modes.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nfunction decimalToPrecision ($x, $roundingMode = ROUND, $numPrecisionDigits = null, $countingMode = DECIMAL_PLACES, $paddingMode = NO_PADDING)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of CCXT in Python\nDESCRIPTION: Simple Python code that imports the CCXT library and displays all available exchange classes.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt\nprint(ccxt.exchanges) # print a list of all available exchange classes\n```\n\n----------------------------------------\n\nTITLE: Running CCXT JavaScript Examples via Command Line\nDESCRIPTION: Command to execute JavaScript examples from the CCXT library from any directory. The command requires specifying the path to the example file to be run.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/examples/js/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode path/to/example.js # substitute for actual filename here\n```\n\n----------------------------------------\n\nTITLE: Instantiating CCXT Pro in JavaScript\nDESCRIPTION: Example of how to create a CCXT Pro exchange instance in JavaScript. This creates a Binance exchange instance with rate limiting enabled.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nconst ccxtpro = require ('ccxt.pro')\nconst exchange = new ccxtpro.binance ({ enableRateLimit: true })\n```\n\n----------------------------------------\n\nTITLE: Cross-Language OrderBook Implementation\nDESCRIPTION: Implementation examples of watchOrderBook method across JavaScript, Python and PHP, showing how to continuously stream and handle orderbook data.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['watchOrderBook']) {\n    while (true) {\n        try {\n            const orderbook = await exchange.watchOrderBook (symbol, limit, params)\n            console.log (new Date (), symbol, orderbook['asks'][0], orderbook['bids'][0])\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\nLANGUAGE: Python\nCODE:\n```\nif exchange.has['watchOrderBook']:\n    while True:\n        try:\n            orderbook = await exchange.watch_order_book(symbol, limit, params)\n            print(exchange.iso8601(exchange.milliseconds()), symbol, orderbook['asks'][0], orderbook['bids'][0])\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # rasie e\n```\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['watchOrderBook']) {\n    $main = function () use (&$exchange, &$main, $symbol, $limit, $params) {\n        $exchange->watch_order_book($symbol, $limit, $params)->then(function($orderbook) use (&$main, $symbol) {\n            echo date('c'), ' ', $symbol, ' ', json_encode(array($orderbook['asks'][0], $orderbook['bids'][0])), \"\\n\";\n            $main();\n        })->otherwise(function (\\Exception $e) use (&$main) {\n            echo get_class ($e), ' ', $e->getMessage (), \"\\n\";\n            $main();\n            // stop the loop on exception or leave it commented to retry\n            // throw $e;\n        });\n    };\n    $loop->futureTick($main);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys in Python\nDESCRIPTION: Examples of how to configure API credentials for exchanges in Python. Demonstrates three approaches: assigning keys to an existing instance, passing keys during instantiation, and dynamically creating an exchange from a variable ID.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_77\n\nLANGUAGE: python\nCODE:\n```\n# Python\n\nimport ccxt\n\n# any time\nbitfinex = ccxt.bitfinex ()\nbitfinex.apiKey = 'YOUR_BFX_API_KEY'\nbitfinex.secret = 'YOUR_BFX_SECRET'\n\n# upon instantiation\nhitbtc = ccxt.hitbtc ({\n    'apiKey': 'YOUR_HITBTC_API_KEY',\n    'secret': 'YOUR_HITBTC_SECRET_KEY',\n})\n\n# from variable id\nexchange_id = 'binance'\nexchange_class = getattr(ccxt, exchange_id)\nexchange = exchange_class({\n    'apiKey': 'YOUR_API_KEY',\n    'secret': 'YOUR_SECRET',\n    'timeout': 30000,\n    'enableRateLimit': True,\n})\n```\n\n----------------------------------------\n\nTITLE: CCXT Pro Throttling Mode Example (JavaScript)\nDESCRIPTION: Pseudocode example of using CCXT Pro in throttling mode, where updates are checked at regular intervals regardless of whether there was an update from the exchange.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// throttling mode\nconst limit = 5 // optional\n// await is optional, alternatively you can launch it in bg without await\nawait exchange.watchOrderBook (symbol, limit)\nwhile (true) {\n    // your reaction takes place here\n    // you arrive here every 100 ms regardless of whether there was an update or not\n    // in throttling mode offloading the orderbook with .limit () is required\n    console.log (exchange.orderbooks[symbol].limit (limit))\n    await sleep (100) // every 100 ms\n}\n```\n\n----------------------------------------\n\nTITLE: Market and Currency Methods in JavaScript\nDESCRIPTION: Comprehensive example of market and currency operations using JavaScript, including symbol lookup and market access methods.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n(async () => {\n\n    console.log (await exchange.loadMarkets ())\n\n    let btcusd1 = exchange.markets['BTC/USD']     // get market structure by symbol\n    let btcusd2 = exchange.market ('BTC/USD')     // same result in a slightly different way\n\n    let btcusdId = exchange.marketId ('BTC/USD')  // get market id by symbol\n\n    let symbols = exchange.symbols                // get an array of symbols\n    let symbols2 = Object.keys (exchange.markets) // same as previous line\n\n    console.log (exchange.id, symbols)            // print all symbols\n\n    let currencies = exchange.currencies          // a dictionary of currencies\n\n    let bitfinex = new ccxt.bitfinex ()\n    await bitfinex.loadMarkets ()\n\n    bitfinex.markets['BTC/USD']                   // symbol → market (get market by symbol)\n    bitfinex.markets_by_id['XRPBTC']              // id → market (get market by id)\n\n    bitfinex.markets['BTC/USD']['id']             // symbol → id (get id by symbol)\n    bitfinex.markets_by_id['XRPBTC']['symbol']    // id → symbol (get symbol by id)\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using CCXT in Browser Environment\nDESCRIPTION: JavaScript code demonstrating how to access the global CCXT object in a browser environment.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n----------------------------------------\n\nTITLE: Customizing Nonce in JavaScript\nDESCRIPTION: Examples of customizing the nonce function in JavaScript when using the CCXT library. Shows different approaches including constructor parameters, explicit redefinition, and using milliseconds as nonce values.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_123\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\n\n// A: custom nonce redefined in constructor parameters\nlet nonce = 1\nlet kraken1 = new ccxt.kraken ({ nonce: () => nonce++ })\n\n// B: nonce redefined explicitly\nlet kraken2 = new ccxt.kraken ()\nkraken2.nonce = function () { return nonce++ } // uses same nonce as kraken1\n\n// C: milliseconds nonce\nlet kraken3 = new ccxt.kraken ({\n    nonce: function () { return this.milliseconds () },\n})\n\n// D: newer ES syntax\nlet kraken4 = new ccxt.kraken ({\n    nonce () { return this.milliseconds () },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of CCXT in PHP\nDESCRIPTION: PHP code example showing how to include the CCXT library and display all available exchange classes.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\ninclude \"ccxt.php\";\nvar_dump (\\ccxt\\Exchange::$exchanges); // print a list of all available exchange classes\n```\n\n----------------------------------------\n\nTITLE: Overriding Exchange Properties in JavaScript, Python, and PHP\nDESCRIPTION: Illustrates how to override exchange properties and options during instantiation or afterwards in JavaScript, Python, and PHP. This includes setting custom HTTP headers and exchange-specific options.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nconst exchange = new ccxt.binance ({\n    'rateLimit': 10000, // unified exchange property\n    'headers': {\n        'YOUR_CUSTOM_HTTP_HEADER': 'YOUR_CUSTOM_VALUE',\n    },\n    'options': {\n        'adjustForTimeDifference': true, // exchange-specific option\n    }\n})\nexchange.options['adjustForTimeDifference'] = false\n```\n\nLANGUAGE: python\nCODE:\n```\n# Python\nexchange = ccxt.binance ({\n    'rateLimit': 10000,  # unified exchange property\n    'headers': {\n        'YOUR_CUSTOM_HTTP_HEADER': 'YOUR_CUSTOM_VALUE',\n    },\n    'options': {\n        'adjustForTimeDifference': True,  # exchange-specific option\n    }\n})\nexchange.options['adjustForTimeDifference'] = False\n```\n\nLANGUAGE: php\nCODE:\n```\n// PHP\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class(array(\n    'rateLimit' => 10000, // unified exchange property\n    'headers' => array(\n        'YOUR_CUSTOM_HTTP_HEADER' => 'YOUR_CUSTOM_VALUE',\n    ),\n    'options' => array(\n        'adjustForTimeDifference' => true, // exchange-specific option\n    ),\n));\n$exchange->options['adjustForTimeDifference'] = false;\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT via pip in Python\nDESCRIPTION: Demonstrates how to install the CCXT library using pip and import it in a Python file.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/index.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install ccxt\n```\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt\nprint(ccxt.exchanges) # print a list of all available exchange classes\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Nonce in JavaScript\nDESCRIPTION: Examples of different ways to override the default nonce behavior in JavaScript, including constructor parameters, explicit definition, and milliseconds-based nonce.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_123\n\nLANGUAGE: JavaScript\nCODE:\n```\n// A: custom nonce redefined in constructor parameters\nlet nonce = 1\nlet kraken1 = new ccxt.kraken ({ nonce: () => nonce++ })\n\n// B: nonce redefined explicitly\nlet kraken2 = new ccxt.kraken ()\nkraken2.nonce = function () { return nonce++ } // uses same nonce as kraken1\n\n// C: milliseconds nonce\nlet kraken3 = new ccxt.kraken ({\n    nonce: function () { return this.milliseconds () },\n})\n\n// D: newer ES syntax\nlet kraken4 = new ccxt.kraken ({\n    nonce () { return this.milliseconds () },\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Markets in PHP\nDESCRIPTION: Example of loading markets manually using the load_markets() method in PHP. This returns an associative array of markets indexed by trading symbol.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$id = 'huobipro';\n$exchange = '\\\\ccxt\\\\' . $id;\n$huobipro = new $exchange ();\n$markets = $huobipro->load_markets ();\nvar_dump ($huobipro->id, $markets);\n```\n\n----------------------------------------\n\nTITLE: Basic Exchange API Call in PHP\nDESCRIPTION: Example of calling a public ticker endpoint using PHP syntax in CCXT\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$luno->public_get_ticker (array ('pair' => 'XBTIDR'));\n```\n\n----------------------------------------\n\nTITLE: Importing CCXT Pro in JavaScript\nDESCRIPTION: Code example demonstrating how to import the CCXT Pro library in JavaScript and access version information and supported exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ccxtpro = require ('ccxt.pro')\nconsole.log ('CCXT Pro version', ccxtpro.version)\nconsole.log ('Supported exchanges:', ccxtpro.exchanges)\n```\n\n----------------------------------------\n\nTITLE: Checking for Closed Orders Support in JavaScript\nDESCRIPTION: This snippet demonstrates how to check if an exchange supports fetching closed orders using the CCXT library in JavaScript.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['fetchClosedOrders'])\n    exchange.fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Market and Currency Methods in PHP\nDESCRIPTION: Shows market and currency operations implementation in PHP, including market data access and symbol handling.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\n$var_dump ($exchange->load_markets ());\n\n$dashcny1 = $exchange->markets['DASH/CNY'];     // get market structure by symbol\n$dashcny2 = $exchange->market ('DASH/CNY');     // same result in a slightly different way\n\n$dashcnyId = $exchange->market_id ('DASH/CNY'); // get market id by symbol\n\n$symbols = $exchange->symbols;                  // get an array of symbols\n$symbols2 = array_keys ($exchange->markets);    // same as previous line\n\nvar_dump ($exchange->id, $symbols);             // print all symbols\n\n$currencies = $exchange->currencies;            // an associative array of currencies\n\n$okcoinusd = '\\\\ccxt\\\\okcoinusd';\n$okcoinusd = new $okcoinusd ();\n\n$okcoinusd->load_markets ();\n\n$okcoinusd->markets['BTC/USD'];                 // symbol → market (get market by symbol)\n$okcoinusd->markets_by_id['btc_usd'];           // id → market (get market by id)\n\n$okcoinusd->markets['BTC/USD']['id'];           // symbol → id (get id by symbol)\n$okcoinusd->markets_by_id['btc_usd']['symbol']; // id → symbol (get symbol by id)\n```\n\n----------------------------------------\n\nTITLE: CCXT Exception Base Class Implementation\nDESCRIPTION: Implementation of the BaseError class in JavaScript, Python, and PHP. This is the base class from which all other CCXT exceptions are derived.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_129\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nclass BaseError extends Error {\n    constructor () {\n        super ()\n        // a workaround to make `instanceof BaseError` work in ES5\n        this.constructor = BaseError\n        this.__proto__   = BaseError.prototype\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n# Python\nclass BaseError (Exception):\n    pass\n```\n\nLANGUAGE: php\nCODE:\n```\n// PHP\nclass BaseError extends \\Exception {}\n```\n\n----------------------------------------\n\nTITLE: Fetching Personal Trades in PHP with CCXT\nDESCRIPTION: This snippet illustrates how to fetch historical personal trades using the CCXT library in PHP. It shows the fetch_my_trades method with optional parameters for symbol, since (timestamp), limit, and additional parameters.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_105\n\nLANGUAGE: php\nCODE:\n```\n// PHP\n// fetch_my_trades ($symbol = null, $since = null, $limit = null, $params = array ())\n\nif ($exchange->has['fetchMyTrades']) {\n    $trades = $exchange->fetch_my_trades ($symbol, $since, $limit, $params);\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning CCXT Repository from GitHub\nDESCRIPTION: Command to clone the CCXT library repository from GitHub into your local project directory. This provides access to all implementations of the library in JavaScript, Python, and PHP.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/ccxt/ccxt.git\n```\n\n----------------------------------------\n\nTITLE: Pagination Implementation\nDESCRIPTION: Examples showing date-based pagination implementation across languages\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['fetchTrades']) {\n    let since = exchange.milliseconds () - 86400000 // -1 day from now\n    // alternatively, fetch from a certain starting datetime\n    // let since = exchange.parse8601 ('2018-01-01T00:00:00Z')\n    let allTrades = []\n    while (since < exchange.milliseconds ()) {\n        const symbol = undefined // change for your symbol\n        const limit = 20 // change for your limit\n        const trades = await exchange.fetchTrades (symbol, since, limit)\n        if (trades.length) {\n            since = trades[trades.length - 1]['timestamp']\n            allTrades = allTrades.concat (trades)\n        } else {\n            break\n        }\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nif exchange.has['fetchOrders']:\n    since = exchange.milliseconds () - 86400000  # -1 day from now\n    # alternatively, fetch from a certain starting datetime\n    # since = exchange.parse8601('2018-01-01T00:00:00Z')\n    all_orders = []\n```\n\n----------------------------------------\n\nTITLE: Implementing RESTful Orderbook Polling Loop in JavaScript\nDESCRIPTION: This snippet demonstrates a basic loop for polling orderbook data using CCXT's RESTful API. It fetches the orderbook for a specified symbol and limit, then processes the data.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nwhile (condition) {\n\n    try {\n\n        // fetch some of the public data\n        orderbook = await exchange.fetchOrderBook (symbol, limit)\n\n        // do something or react somehow based on that data\n        // ...\n\n    } catch (e) {\n\n        // handle errors\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CCXT Async Support in Python\nDESCRIPTION: Python code showing how to import the asynchronous version of CCXT for use with asyncio and async/await syntax.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt.async_support as ccxt # link against the asynchronous version of ccxt\n```\n\n----------------------------------------\n\nTITLE: Linking CCXT Pro in Python\nDESCRIPTION: Example of how to import the CCXT Pro library in a Python application, displaying the version and supported exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Python\nimport ccxtpro\nprint('CCXT Pro version', ccxtpro.__version__)\nprint('Supported exchanges:', ccxtpro.exchanges)\n```\n\n----------------------------------------\n\nTITLE: Trade Object Structure in CCXT\nDESCRIPTION: This code block shows the structure of a trade object returned by CCXT's trade-related methods. It includes details such as trade ID, timestamp, price, amount, cost, fee information, and other trade-specific data.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'info':         { ... },                    // the original decoded JSON as is\n    'id':           '12345-67890:09876/54321',  // string trade id\n    'timestamp':    1502962946216,              // Unix timestamp in milliseconds\n    'datetime':     '2017-08-17 12:42:48.000',  // ISO8601 datetime with milliseconds\n    'symbol':       'ETH/BTC',                  // symbol\n    'order':        '12345-67890:09876/54321',  // string order id or undefined/None/null\n    'type':         'limit',                    // order type, 'market', 'limit' or undefined/None/null\n    'side':         'buy',                      // direction of the trade, 'buy' or 'sell'\n    'takerOrMaker': 'taker',                    // string, 'taker' or 'maker'\n    'price':        0.06917684,                 // float price in quote currency\n    'amount':       1.5,                        // amount of base currency\n    'cost':         0.10376526,                 // total cost (including fees), `price * amount`\n    'fee':          {                           // provided by exchange or calculated by ccxt\n        'cost':  0.0015,                        // float\n        'currency': 'ETH',                      // usually base currency for buys, quote currency for sells\n        'rate': 0.002,                          // the fee rate (if available)\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Markets in Python\nDESCRIPTION: Example of loading markets manually using the load_markets() method in Python. This returns an associative array of markets indexed by trading symbol.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nokcoin = ccxt.okcoinusd ()\nmarkets = okcoin.load_markets ()\nprint (okcoin.id, markets)\n```\n\n----------------------------------------\n\nTITLE: Loading Market Data in PHP with CCXT\nDESCRIPTION: Demonstrates CCXT usage with Bitfinex exchange in PHP, covering market data loading, symbol access, and cache management.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n$bitfinex = new \\ccxt\\bitfinex (array ('verbose' => true)); // log HTTP requests\n$bitfinex.load_markets (); // request markets\nvar_dump ($bitfinex->id, $bitfinex->markets); // output a full list of all loaded markets\nvar_dump (array_keys ($bitfinex->markets));   // output a short list of market symbols\nvar_dump ($bitfinex->markets['XRP/USD']);     // output single market details\n$bitfinex->load_markets (); // return a locally cached version, no reload\n$reloadedMarkets = $bitfinex->load_markets (true); // force HTTP reload = true\nvar_dump ($bitfinex->markets['XRP/BTC']);\n```\n\n----------------------------------------\n\nTITLE: Using watchTicker in JavaScript, Python, and PHP\nDESCRIPTION: Code examples demonstrating how to use the watchTicker method to stream ticker data from exchanges. This method accepts a symbol and additional params, returning real-time ticker information.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nif (exchange.has['watchTicker']) {\n    while (true) {\n        try {\n            const ticker = await exchange.watchTicker (symbol, params)\n            console.log (new Date (), ticker)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n# Python\nif exchange.has['watchTicker']:\n    while True:\n        try:\n            ticker = await exchange.watch_ticker(symbol, params)\n            print(exchange.iso8601(exchange.milliseconds()), ticker)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # rasie e\n```\n\nLANGUAGE: php\nCODE:\n```\n// PHP\nif ($exchange->has['watchTicker']) {\n    $main = function () use (&$exchange, &$main, $symbol, $params) {\n        $exchange->watch_ticker($symbol, $params)->then(function($ticker) use (&$main) {\n            echo date('c'), ' ', json_encode($ticker), \"\\n\";\n            $main();\n        })->otherwise(function (\\Exception $e) use (&$main) {\n            echo get_class ($e), ' ', $e->getMessage (), \"\\n\";\n            $main();\n            // stop the loop on exception or leave it commented to retry\n            // throw $e;\n        });\n    };\n    $loop->futureTick($main);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Orders with Custom Client ID in PHP\nDESCRIPTION: Example showing how to add a custom client order ID when creating an order in PHP. This demonstrates using the clientOrderId parameter with the HitBTC exchange.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_91\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\n// add custom user id to your order\n$hitbtc->create_order ('BTC/USD', 'limit', 'buy', 1, 3000, array ('clientOrderId' => '123'));\n```\n\n----------------------------------------\n\nTITLE: Date Handling Examples\nDESCRIPTION: Methods for working with UTC dates and timestamps in CCXT\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nexchange.parse8601 ('2018-01-01T00:00:00Z') == 1514764800000 // integer, Z = UTC\nexchange.iso8601 (1514764800000) == '2018-01-01T00:00:00Z'   // iso8601 string\nexchange.seconds ()      // integer UTC timestamp in seconds\nexchange.milliseconds () // integer UTC timestamp in milliseconds\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Nonce in Python\nDESCRIPTION: Shows various approaches to implement custom nonce functionality in Python, including direct milliseconds usage and class inheritance.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_124\n\nLANGUAGE: Python\nCODE:\n```\n# A: the shortest\ncoinbasepro = ccxt.coinbasepro({'nonce': ccxt.Exchange.milliseconds})\n\n# B: custom nonce\nclass MyKraken(ccxt.kraken):\n    n = 1\n    def nonce(self):\n        return self.n += 1\n\n# C: milliseconds nonce\nclass MyBitfinex(ccxt.bitfinex):\n    def nonce(self):\n        return self.milliseconds()\n\n# D: milliseconds nonce inline\nhitbtc = ccxt.hitbtc({\n    'nonce': lambda: int(time.time() * 1000)\n})\n\n# E: milliseconds nonce\nacx = ccxt.acx({'nonce': lambda: ccxt.Exchange.milliseconds()})\n```\n\n----------------------------------------\n\nTITLE: Method Style Examples\nDESCRIPTION: Shows both camelCase and underscore notation styles supported across languages\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_36\n\nLANGUAGE: pseudocode\nCODE:\n```\nexchange.methodName ()  // camelcase pseudocode\nexchange.method_name()  // underscore pseudocode\n```\n\n----------------------------------------\n\nTITLE: Purging Cached Orders in PHP\nDESCRIPTION: Example of how to purge old non-open orders from the .orders cache in PHP. This snippet demonstrates keeping the last 24 hours of order history in the cache and removing older entries.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_85\n\nLANGUAGE: php\nCODE:\n```\n// PHP\n\n// keep last 24 hours of history in cache\n$before = $exchange->milliseconds () - 24 * 60 * 60 * 1000;\n\n// purge all closed and canceled orders \"older\" or issued \"before\" that time\n$exchange->purge_cached_orders ($before);\n```\n\n----------------------------------------\n\nTITLE: Fetching Individual Ticker Data with PHP\nDESCRIPTION: Code for retrieving a ticker for a specific symbol or a random symbol using PHP with CCXT. The function checks for fetchTicker support and provides a reminder about timezone settings.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n// PHP (don't forget to set your timezone properly!)\nif ($exchange->has['fetchTicker']) {\n    var_dump ($exchange->fetch_ticker ('ETH/CNY')); // ticker for ETH/CNY\n    $symbols = array_keys ($exchange->markets);\n    $random = rand () % count ($symbols);\n    var_dump ($exchange->fetch_ticker ($symbols[$random])); // ticker for a random symbol\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Exchange Methods in Python\nDESCRIPTION: This snippet shows how to get a list of all available methods for a Hitbtc exchange instance in Python.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nprint(dir(ccxt.hitbtc()))\n```\n\n----------------------------------------\n\nTITLE: Market Loading in PHP\nDESCRIPTION: Shows how to create a Huobi Pro exchange instance and load market data using PHP.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n$id = 'huobipro';\n$exchange = '\\\\ccxt\\\\' . $id;\n$huobipro = new $exchange ();\n$markets = $huobipro->load_markets ();\nvar_dump ($huobipro->id, $markets);\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Book with CCXT in PHP\nDESCRIPTION: This snippet shows how to instantiate a Kraken exchange object and fetch its order book for BTC/USD using CCXT in PHP. It limits the result to 20 orders on each side.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_47\n\nLANGUAGE: PHP\nCODE:\n```\n// instantiate the exchange by id\n$exchange = '\\\\ccxt\\\\kraken';\n$exchange = new $exchange ();\n// up to ten orders on each side, for example\n$limit = 20;\nvar_dump ($exchange->fetch_order_book ('BTC/USD', $limit));\n```\n\n----------------------------------------\n\nTITLE: Configuring Exchange API Credentials in PHP\nDESCRIPTION: Examples of instantiating exchange objects with API credentials in PHP, showing different approaches including property assignment after instantiation and passing credentials during instantiation.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_70\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\n\ninclude 'ccxt.php'\n\n// any time\n$quoinex = new \\ccxt\\quoinex ();\n$quoinex->apiKey = 'YOUR_QUOINE_API_KEY';\n$quoinex->secret = 'YOUR_QUOINE_SECRET_KEY';\n\n// upon instantiation\n$zaif = new \\ccxt\\zaif (array (\n    'apiKey' => 'YOUR_ZAIF_API_KEY',\n    'secret' => 'YOUR_ZAIF_SECRET_KEY'\n));\n\n// from variable id\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class (array (\n    'apiKey' => 'YOUR_API_KEY',\n    'secret' => 'YOUR_SECRET',\n    'timeout' => 30000,\n    'enableRateLimit' => true,\n));\n```\n\n----------------------------------------\n\nTITLE: Implementing a Python CORS Proxy Server\nDESCRIPTION: A Python implementation of a CORS proxy server that works with both Python 2 and 3. It extends SimpleHTTPRequestHandler to add the Access-Control-Allow-Origin header to all responses, enabling cross-origin requests.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/install.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\n# Python CORS Proxy\n# Save this in a file like cors.py and run with `python cors.py [port]` or `cors [port]`\ntry:\n    # Python 3\n    from http.server import HTTPServer, SimpleHTTPRequestHandler, test as test_orig\n    import sys\n    def test (*args):\n        test_orig (*args, port = int (sys.argv[1]) if len (sys.argv) > 1 else 8080)\nexcept ImportError: # Python 2\n    from BaseHTTPServer import HTTPServer, test\n    from SimpleHTTPServer import SimpleHTTPRequestHandler\n\nclass CORSRequestHandler (SimpleHTTPRequestHandler):\n    def end_headers (self):\n        self.send_header ('Access-Control-Allow-Origin', '*')\n        SimpleHTTPRequestHandler.end_headers (self)\n\nif __name__ == '__main__':\n    test (CORSRequestHandler, HTTPServer)\n```\n\n----------------------------------------\n\nTITLE: Overriding CCXT Exchange Properties in PHP\nDESCRIPTION: Example of customizing exchange properties, HTTP headers, and exchange-specific options during instantiation in PHP, with the ability to modify options after creation.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class(array(\n    'rateLimit' => 10000, // unified exchange property\n    'headers' => array(\n        'YOUR_CUSTOM_HTTP_HEADER' => 'YOUR_CUSTOM_VALUE',\n    ),\n    'options' => array(\n        'adjustForTimeDifference' => true, // exchange-specific option\n    ),\n));\n$exchange->options['adjustForTimeDifference'] = false;\n```\n\n----------------------------------------\n\nTITLE: Creating a Node.js CORS Proxy Server\nDESCRIPTION: JavaScript implementation of a simple CORS proxy using cors-anywhere package. This script creates a local CORS proxy server that listens on a specified port (default 8080) and handles cross-origin requests to exchange APIs.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript CORS Proxy\n// Save this in a file like cors.js and run with `node cors [port]`\n// It will listen for your requests on the port you pass in command line or port 8080 by default\nlet port = (process.argv.length > 2) ? parseInt (process.argv[2]) : 8080; // default\nrequire ('cors-anywhere').createServer ().listen (port, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Instantiating CCXT Pro Exchange in PHP with ReactPHP\nDESCRIPTION: Example showing how to create a CCXT Pro exchange instance in PHP using ReactPHP, including the setup of an event loop from ReactPHP's Factory.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nerror_reporting(E_ALL | E_STRICT);\ndate_default_timezone_set('UTC');\nrequire_once 'vendor/autoload.php';\n\n$loop = \\React\\EventLoop\\Factory::create(); // the event loop goes here ↓\n$exchange = new \\ccxtpro\\kucoin(array('enableRateLimit' => true, 'loop' => $loop));\n```\n\n----------------------------------------\n\nTITLE: Fetching Individual Ticker Data with Python\nDESCRIPTION: Code for retrieving a ticker for a specific symbol or a random symbol using Python with CCXT. The function imports the random module to select a random symbol from the available markets.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_59\n\nLANGUAGE: python\nCODE:\n```\n# Python\nimport random\nif (exchange.has['fetchTicker']):\n    print(exchange.fetch_ticker('LTC/ZEC')) # ticker for LTC/ZEC\n    symbols = list(exchange.markets.keys())\n    print(exchange.fetch_ticker(random.choice(symbols))) # ticker for a random symbol\n```\n\n----------------------------------------\n\nTITLE: Listing Available Exchange Methods in JavaScript\nDESCRIPTION: This snippet demonstrates how to get a list of all available methods for a Kraken exchange instance in JavaScript.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(new ccxt.kraken())\n```\n\n----------------------------------------\n\nTITLE: CCXT Browser Global Object Usage\nDESCRIPTION: JavaScript code showing how to use the global CCXT object created by the browser script.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/README.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n----------------------------------------\n\nTITLE: Implementing SOCKS Proxy with async_support in CCXT\nDESCRIPTION: A Python code snippet showing how to set up a SOCKS proxy with the async version of CCXT. It uses aiohttp_socks to create a proxy connector and configures a Binance exchange instance with it.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/install.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt.async_support as ccxt\nimport aiohttp\nimport aiohttp_socks\n\nasync def test():\n\n    connector = aiohttp_socks.ProxyConnector.from_url('socks5://user:password@127.0.0.1:1080')\n    session = aiohttp.ClientSession(connector=connector)\n\n    exchange = ccxt.binance({\n        'session': session,\n        'enableRateLimit': True,\n        # ...\n    })\n\n    # ...\n\n    await session.close()  # don't forget to close the session\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Fetching All Tickers in PHP with CCXT\nDESCRIPTION: Example of how to retrieve all tickers from an exchange using PHP. This checks if the exchange supports the fetchTickers method before making the API call.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_55\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\nif ($exchange->has['fetchTickers']) {\n    var_dump ($exchange->fetch_tickers ()); // all tickers indexed by their symbols\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving List of Supported Exchanges in Python\nDESCRIPTION: Python code to get the full list of supported exchange IDs programmatically using the CCXT library.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Python\nimport ccxt\nprint (ccxt.exchanges)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cursor-Based Pagination in Python for Fetching Orders\nDESCRIPTION: A Python implementation of cursor-based pagination for order retrieval. This code extracts the cursor from response headers to paginate through all orders from an exchange.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\n# Python\nif exchange.has['fetchOrders']:\n    cursor = 0  # exchange-specific type and value\n    all_orders = []\n    while True:\n        symbol = None  # change for your symbol\n        since = None\n        limit = 20  # change for your limit\n        params = {\n            'cursor': cursor,  # exchange-specific non-unified parameter name\n        }\n        orders = await exchange.fetch_orders(symbol, since, limit, params)\n        if len(orders):\n            # not thread-safu and exchange-specific !\n            cursor = exchange.last_response_headers['CB-AFTER']\n            all_orders += orders\n        else:\n            break\n```\n\n----------------------------------------\n\nTITLE: Overriding CCXT Exchange Properties in JavaScript\nDESCRIPTION: Example of customizing exchange properties, HTTP headers, and exchange-specific options during instantiation in JavaScript, with the ability to modify options after creation.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nconst exchange = new ccxt.binance ({\n    'rateLimit': 10000, // unified exchange property\n    'headers': {\n        'YOUR_CUSTOM_HTTP_HEADER': 'YOUR_CUSTOM_VALUE',\n    },\n    'options': {\n        'adjustForTimeDifference': true, // exchange-specific option\n    }\n})\nexchange.options['adjustForTimeDifference'] = false\n```\n\n----------------------------------------\n\nTITLE: JavaScript Proxy Configuration\nDESCRIPTION: Example of configuring CCXT with an HTTPS proxy in JavaScript using https-proxy-agent\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/install.rst#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst ccxt = require ('ccxt')\n    , HttpsProxyAgent = require ('https-proxy-agent')\n\nconst proxy = process.env.http_proxy || 'http://168.63.76.32:3128' // HTTP/HTTPS proxy to connect to\nconst agent = new HttpsProxyAgent (proxy)\n\nconst kraken = new ccxt.kraken ({ agent })\n```\n\n----------------------------------------\n\nTITLE: Trade Object Structure in JavaScript\nDESCRIPTION: Structure of the trade objects returned by the fetchTrades method. Each trade includes information such as ID, timestamp, symbol, price, amount, and side (buy/sell).\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    {\n        'info':       { ... },                  // the original decoded JSON as is\n        'id':        '12345-67890:09876/54321', // string trade id\n        'timestamp':  1502962946216,            // Unix timestamp in milliseconds\n        'datetime':  '2017-08-17 12:42:48.000', // ISO8601 datetime with milliseconds\n        'symbol':    'ETH/BTC',                 // symbol\n        'order':     '12345-67890:09876/54321', // string order id or undefined/None/null\n        'type':      'limit',                   // order type, 'market', 'limit' or undefined/None/null\n        'side':      'buy',                     // direction of the trade, 'buy' or 'sell'\n        'price':      0.06917684,               // float price in quote currency\n        'amount':     1.5,                      // amount of base currency\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT Pro with pip\nDESCRIPTION: Shell commands for installing CCXT Pro in a Python project using either HTTPS or SSH authentication methods.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.install.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# if you're using Git/HTTPS authentication\npip3 install git+https://github.com/kroitor/ccxt.pro.git#subdirectory=python\n\n# if you are connecting to GitHub with SSH\npip3 install git+ssh://git@github.com/kroitor/ccxt.pro.git#subdirectory=python\n```\n\n----------------------------------------\n\nTITLE: Fetching Personal Trades in JavaScript with CCXT\nDESCRIPTION: This snippet demonstrates how to fetch historical personal trades using the CCXT library in JavaScript. It shows proper usage of the fetchMyTrades method with optional parameters for symbol, since (timestamp), limit, and additional parameters.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\n// fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {})\n\nif (exchange.has['fetchMyTrades']) {\n    const trades = await exchange.fetchMyTrades (symbol, since, limit, params)\n}\n```\n\n----------------------------------------\n\nTITLE: Python Async Proxy Configuration\nDESCRIPTION: Example of configuring proxy settings in Python async CCXT implementation\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/install.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def test_gdax():\n    exchange = ccxt.poloniex({\n        'aiohttp_proxy': 'http://proxy.com',\n    })\n    ticker = await exchange.fetch_ticker('ETH/BTC')\n    await exchange.close()\n    return ticker\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Cryptocurrency Exchange APIs\nDESCRIPTION: A structured table showing cryptocurrency exchanges, their API documentation links, and related information. The table includes columns for exchange names, identifiers, API versions, documentation URLs, and certification status.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| `exx <https://www.exx.com/r/fde4260159e53ab8a58cc9186d35501f?recommQd=1>`__ | exx | `EXX <https://www.exx.com/r/fde4260159e53ab8a58cc9186d35501f?recommQd=1>`__ | \\* | `API <https://www.exx.com/help/restApi>`__ | | |\n+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+----------------------------------------------------------------------+---------------------------------+\n| `fcoin <https://www.fcoin.com/i/Z5P7V>`__ | fcoin | `FCoin <https://www.fcoin.com/i/Z5P7V>`__ | 2 | `API <https://developer.fcoin.com>`__ | | |\n+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+----------------------------------------------------------------------+---------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Accessing Exchange Metadata with 'has' Property in JavaScript\nDESCRIPTION: Shows the structure of the 'has' property which contains flags for exchange capabilities. This object indicates which API methods are available, unavailable, or emulated by the library.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n'has': {\n\n    'CORS': false,  // has Cross-Origin Resource Sharing enabled (works from browser) or not\n\n    'publicAPI': true,  // has public API available and implemented, true/false\n    'privateAPI': true, // has private API available and implemented, true/false\n\n    // unified methods availability flags (can be true, false, or 'emulated'):\n\n    'cancelOrder': true,\n    'createDepositAddress': false,\n    'createOrder': true,\n    'deposit': false,\n    'fetchBalance': true,\n    'fetchClosedOrders': false,\n    'fetchCurrencies': false,\n    'fetchDepositAddress': false,\n    'fetchMarkets': true,\n    'fetchMyTrades': false,\n    'fetchOHLCV': false,\n    'fetchOpenOrders': false,\n    'fetchOrder': false,\n    'fetchOrderBook': true,\n    'fetchOrders': false,\n    'fetchStatus': 'emulated',\n    'fetchTicker': true,\n    'fetchTickers': false,\n    'fetchBidsAsks': false,\n    'fetchTrades': true,\n    'withdraw': false,\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Verbose Mode for Troubleshooting in CCXT\nDESCRIPTION: Example showing how to enable verbose mode in CCXT to get detailed request and response data for troubleshooting. This is a required step when reporting issues with the library.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/FAQ.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexchange.verbose = true\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT in Python using pip\nDESCRIPTION: Command to install the CCXT library in a Python project using pip package manager.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/README.rst#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npip install ccxt\n```\n\n----------------------------------------\n\nTITLE: Purging Cached Orders in Python\nDESCRIPTION: Shows how to purge old non-open orders from the cache in Python, keeping the last hour of history.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_78\n\nLANGUAGE: Python\nCODE:\n```\n# keep last hour of history in cache\nbefore = exchange.milliseconds () - 1 * 60 * 60 * 1000\n\n# purge all closed and canceled orders \"older\" or issued \"before\" that time\nexchange.purge_cached_orders (before)\n```\n\n----------------------------------------\n\nTITLE: Adding CCXT Pro to package.json\nDESCRIPTION: Configuration for adding CCXT Pro as a dependency in a Node.js project's package.json file.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.install.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// package.json\n{\n  // ...\n  \"dependencies\": {\n    \"ccxt.pro\": \"git+https://github.com/kroitor/ccxt.pro.git\"\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT Pro for JavaScript using npm\nDESCRIPTION: Shell commands to install CCXT Pro in a JavaScript project using npm. It includes options for both HTTPS and SSH authentication methods.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.install.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# in your project directory\n\n# if you're using Git/HTTPS authentication\nnpm install git+https://github.com/kroitor/ccxt.pro.git\n\n# if you are connecting to GitHub with SSH\nnpm install ssh://git@github.com/kroitor/ccxt.pro.git\n# or\nnpm install git@ssh://github.com/kroitor/ccxt.pro.git\n# or if you have git and github.com in your ~/.ssh/config\nnpm install ssh://github.com/kroitor/ccxt.pro.git\n```\n\n----------------------------------------\n\nTITLE: Retrieving List of Supported Exchanges in JavaScript\nDESCRIPTION: JavaScript code to get the full list of supported exchange IDs programmatically using the CCXT library.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nconst ccxt = require ('ccxt')\nconsole.log (ccxt.exchanges)\n```\n\n----------------------------------------\n\nTITLE: Instantiating CCXT Pro Exchange in JavaScript\nDESCRIPTION: Example showing how to create a new CCXT Pro exchange instance in JavaScript, specifically for the Binance exchange.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ccxtpro = require ('ccxt.pro')\nconst exchange = new ccxtpro.binance ({ enableRateLimit: true })\n```\n\n----------------------------------------\n\nTITLE: Instantiating CCXT Pro in PHP with Event Loop\nDESCRIPTION: Example of how to create a CCXT Pro exchange instance in PHP. This creates a KuCoin exchange instance with ReactPHP event loop.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// PHP\nerror_reporting(E_ALL | E_STRICT);\ndate_default_timezone_set('UTC');\nrequire_once 'vendor/autoload.php';\n\n$loop = \\React\\EventLoop\\Factory::create(); // the event loop goes here ↓\n$exchange = new \\ccxtpro\\kucoin(array('enableRateLimit' => true, 'loop' => $loop));\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT in Node.js Using NPM\nDESCRIPTION: Command to install the CCXT library in a Node.js project using NPM package manager.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install ccxt\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT Pro with npm\nDESCRIPTION: Shell commands for installing CCXT Pro in a JavaScript/Node.js project using either HTTPS or SSH authentication methods.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.install.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# in your project directory\n\n# if you're using Git/HTTPS authentication\nnpm install git+https://github.com/kroitor/ccxt.pro.git\n\n# if you are connecting to GitHub with SSH\nnpm install ssh://git@github.com/kroitor/ccxt.pro.git\n# or\nnpm install git@ssh://github.com/kroitor/ccxt.pro.git\n# or if you have git and github.com in your ~/.ssh/config\nnpm install ssh://github.com/kroitor/ccxt.pro.git\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Mode in CCXT Python\nDESCRIPTION: Demonstrates how to enable verbose mode in CCXT to get detailed HTTP request and response information for debugging. Shows initialization of a Binance exchange instance with rate limiting and market data loading.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_133\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt\nexchange = ccxt.binance({'enableRateLimit': True})\nexchange.load_markets()\nexchange.verbose = True  # enable verbose mode after loading the markets\n```\n\n----------------------------------------\n\nTITLE: Purging Cached Orders in PHP\nDESCRIPTION: Demonstrates how to purge old non-open orders from the cache in PHP, keeping the last 24 hours of history.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_79\n\nLANGUAGE: PHP\nCODE:\n```\n// keep last 24 hours of history in cache\n$before = $exchange->milliseconds () - 24 * 60 * 60 * 1000;\n\n// purge all closed and canceled orders \"older\" or issued \"before\" that time\n$exchange->purge_cached_orders ($before);\n```\n\n----------------------------------------\n\nTITLE: Safe Key Existence Check Example in JavaScript\nDESCRIPTION: Shows the recommended patterns for checking key existence in objects, using either the safe methods or explicit key existence checks.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (params['foo'] !== undefined) {\n}\n```\n\n----------------------------------------\n\nTITLE: PHP CCXT Exchange Integration Example\nDESCRIPTION: PHP example demonstrating initialization of exchange APIs, loading market data, and executing trades using CCXT. Shows market and limit order creation with custom parameters.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/index.rst#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ninclude 'ccxt.php';\n\n$poloniex = new \\ccxt\\poloniex  ();\n$bittrex  = new \\ccxt\\bittrex   (array ('verbose' => true));\n$quoine   = new \\ccxt\\zaif      ();\n$zaif     = new \\ccxt\\quoine    (array (\n    'apiKey' => 'YOUR_PUBLIC_API_KEY',\n    'secret' => 'YOUR_SECRET_PRIVATE_KEY',\n));\n\n$poloniex_markets = $poloniex->load_markets ();\n\nvar_dump ($poloniex_markets);\nvar_dump ($bittrex->load_markets ());\nvar_dump ($quoine->load_markets ());\n\nvar_dump ($poloniex->fetch_order_book ($poloniex->symbols[0]));\nvar_dump ($bittrex->fetch_trades ('BTC/USD'));\nvar_dump ($quoine->fetch_ticker ('ETH/EUR'));\nvar_dump ($zaif->fetch_ticker ('BTC/JPY'));\n\nvar_dump ($zaif->fetch_balance ());\n\n// sell 1 BTC/JPY for market price, you pay ¥ and receive ฿ immediately\nvar_dump ($zaif->id, $zaif->create_market_sell_order ('BTC/JPY', 1));\n\n// buy BTC/JPY, you receive ฿1 for ¥285000 when the order closes\nvar_dump ($zaif->id, $zaif->create_limit_buy_order ('BTC/JPY', 1, 285000));\n\n// set a custom user-defined id to your order\n$hitbtc->create_order ('BTC/USD', 'limit', 'buy', 1, 3000, array ('clientOrderId' => '123'));\n```\n\n----------------------------------------\n\nTITLE: CCXT Pro API Methods Overview in Markdown\nDESCRIPTION: A structured list of available API methods in CCXT Pro, including public methods for market data streaming and private methods for trading and funding operations. Each method is linked to its detailed documentation.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [CCXT Pro](https://ccxt.pro)\\n\\n- [Install](ccxt.pro.install)\\n- [User Manual](ccxt.pro.manual)\\n  - [Architecture Overview](ccxt.pro.manual#overview)\\n  - [Prerequisites](ccxt.pro.manual#prerequisites)\\n  - [Streaming Specifics](ccxt.pro.manual#streaming-specifics)\\n  - [Linking](ccxt.pro.manual#linking)\\n  - [Instantiation](ccxt.pro.manual#instantiation)\\n  - [Exchange Properties](ccxt.pro.manual#exchange-properties)\\n  - [Unified API](ccxt.pro.manual#unified-api)\\n    - [Public Methods](ccxt.pro.manual#public-methods)\\n      - [Market Data](ccxt.pro.manual#market-data)\\n        - [`watchOrderBook (symbol, limit, params)`](ccxt.pro.manual#watchOrderBook)\\n        - [`watchTicker (symbol, limit, params)`](ccxt.pro.manual#watchTicker)\\n        - [`watchTickers (symbols, params)`](ccxt.pro.manual#watchTickers)\\n        - [`watchOHLCV (symbol, timeframe, since, limit, params)`](ccxt.pro.manual#watchOHLCV)\\n        - [`watchTrades (symbol, since, limit, params)`](ccxt.pro.manual#watchTrades)\\n    - [Private Methods](ccxt.pro.manual#private-methods)\\n      - [Authentication](ccxt.pro.manual#authentication)\\n      - [Trading](ccxt.pro.manual#trading)\\n        - [`watchBalance (params)`](ccxt.pro.manual#watchBalance)\\n        - [`watchOrders (symbol, since, limit, params)`](ccxt.pro.manual#watchOrders)\\n        - [`watchCreateOrder (symbol, type, side, amount, price, params)`](ccxt.pro.manual#watchCreateOrder)\\n        - [`watchCancelOrder (id, symbol, params)`](ccxt.pro.manual#watchCancelOrder)\\n        - [`watchMyTrades (symbol, since, limit, params)`](https://github.com/ccxt-dev/ccxt/wiki/ccxt.pro/Manual#watchMyTrades)\\n      - [Funding](ccxt.pro.manual#funding)\\n        - [Deposit](https://github.com/ccxt/ccxt/wiki/Manual#deposit)\\n        - [Withdraw](https://github.com/ccxt/ccxt/wiki/Manual#withdraw)\\n        - [`watchTransactions (code, since, limit, params)`](https://github.com/ccxt/ccxt/wiki/Manual#watchTransactions)\n```\n\n----------------------------------------\n\nTITLE: CCXT Pro Exchange Properties Example (JavaScript)\nDESCRIPTION: Demonstration of the extended properties available in a CCXT Pro exchange instance, including WebSocket capabilities, URLs, and incremental data structures.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'has': { // an associative array of extended exchange capabilities\n        'ws': true, // only available in CCXT Pro\n        'watchOrderBook': true,\n        'watchTicker': true,\n        'watchTrades': true,\n        'watchOHLCV': true,\n        'watchBalance': true,\n        'watchCreateOrder': true,\n        'watchCancelOrder': true,\n        ...\n    },\n    'urls': {\n        'api': { // will contain a streaming API base URL, depending on the underlying protocol\n            'ws': 'wss://ws.exchange.com',            // https://en.wikipedia.org/wiki/WebSocket\n            'signalr': 'https://signalr.exchange.com' // https://en.wikipedia.org/wiki/SignalR\n            'socketio': 'wss://socket.exchange.io'    // https://socket.io\n        },\n    },\n    'version': '1.21',\n    'streaming': {\n        'keepAlive': 30000, // integer keep-alive rate in milliseconds\n        'maxPingPongMisses': 2.0, // how many ping pong misses to drop and reconnect\n        ... // other streaming options\n    },\n    // incremental data structures\n    'orderbooks':   {}, // incremental order books indexed by symbol\n    'ohlcvs':       {}, // standard CCXT OHLCVs indexed by symbol by timeframe\n    'balance':      {}, // a standard CCXT balance structure, accounts indexed by currency code\n    'orders':       {}, // standard CCXT order structures indexed by order id\n    'trades':       {}, // arrays of CCXT trades indexed by symbol\n    'tickers':      {}, // standard CCXT tickers indexed by symbol\n    'transactions': {}, // standard CCXT deposits and withdrawals indexed by id or txid\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Including CCXT in PHP\nDESCRIPTION: Demonstrates how to include the CCXT library in a PHP file and print available exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/index.rst#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ninclude \"ccxt.php\";\nvar_dump (\\ccxt\\Exchange::$exchanges); // print a list of all available exchange classes\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT Pro for Python using pip\nDESCRIPTION: Shell commands to install CCXT Pro in a Python project using pip. It includes options for both HTTPS and SSH authentication methods.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.install.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# if you're using Git/HTTPS authentication\npip3 install git+https://github.com/kroitor/ccxt.pro.git#subdirectory=python\n\n# if you are connecting to GitHub with SSH\npip3 install git+ssh://git@github.com/kroitor/ccxt.pro.git#subdirectory=python\n```\n\n----------------------------------------\n\nTITLE: Adding CCXT Pro as a dependency in composer.json\nDESCRIPTION: Example of how to manually add CCXT Pro as a dependency in a PHP project's composer.json file. It includes the required repository configuration.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.install.md#2025-04-23_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// composer.json\n{\n    // ...\n    \"require\": {\n        \"ccxt/ccxtpro\": \"^0.0.70\"\n    },\n    \"repositories\": {\n        \"ccxtpro\": {\n            \"type\": \"git\",\n            \"url\": \"https://github.com/kroitor/ccxt.pro.git\"\n        }\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Repository Structure Overview\nDESCRIPTION: A shell-formatted directory structure listing that shows the organization of files and folders in the CCXT repository, with descriptions of key files and their purposes.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n/                          # root directory aka npm module/package folder for Node.js\n/.babelrc                  # babel config used for making the ES5 version of the library\n/.eslintrc                 # linter\n/.gitattributes            # contains linguist settings for language detection in repo\n/.gitignore                # ignore it\n/.npmignore                # files to exclude from the NPM package\n/.travis.yml               # a YAML config for travis-ci (continuous integration)\n/CONTRIBUTING.md           # this file\n/LICENSE.txt               # MIT\n/README.md                 # master markdown for GitHub, npmjs.com, npms.io, yarn and others\n/build/                    # build scripts\n/build/export-exchanges.js # used to create tables of exchanges in the docs during the build\n/build/transpile.js        # the transpilation script\n/build/update-badges.js    # a JS script to update badges in the README and in docs\n/build/vss.js              # reads single-sourced version from package.json and writes it everywhere\n/dist/                     # a folder for the generated browser bundle of CCXT\n/ccxt.js                   # entry point for the master JS version of the ccxt library\n/ccxt.php                  # entry point for the PHP version of the ccxt library\n/doc/                      # Sphinx-generated rst-docs for http://ccxt.readthedocs.io/\n/js/                       # the JS version of the library\n/php/                      # PHP ccxt module/package folder\n/python/                   # Python ccxt module/package folder for PyPI\n/python/__init__.py        # entry point for the Python version of the ccxt.library\n/python/async/__init__.py  # asynchronous version of the ccxt.library for Python 3.5.3+ asyncio\n/python/base/              # base code for the Python version of the ccxt library\n/python/MANIFEST.in        # a PyPI-package file listing extra package files (license, configs, etc...)\n/python/README.md          # a copy of README.md for PyPI\n/python/setup.cfg          # wheels config file for the Python package\n/python/setup.py           # pip/setuptools script (build/install) for ccxt in Python\n/python/tox.ini            # tox config for Python\n/examples/                 # self-explanatory\n/examples/js               # ...\n/examples/php              # ...\n/examples/py               # ...\n/exchanges.cfg             # custom bundle config for including only the exchanges you need\n/package.json              # npm package file, also used in setup.py for version single-sourcing\n/run-tests.js              # a front-end to run invididual tests of all exchanges in all languages (JS/PHP/Python)\n/wiki/                     # the source of all docs (edits go here)\n```\n\n----------------------------------------\n\nTITLE: Installing aiohttp_socks Package for Python SOCKS Proxy Support\nDESCRIPTION: Command to install the aiohttp_socks package which enables SOCKS proxy support for aiohttp clients used with CCXT.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npip install aiohttp_socks\n```\n\n----------------------------------------\n\nTITLE: Using CCXT in Browser JavaScript\nDESCRIPTION: JavaScript code showing how to access the global ccxt object in a browser environment to list available exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n----------------------------------------\n\nTITLE: CCXT Browser Integration\nDESCRIPTION: HTML script tag for including CCXT in browser environments\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/install.rst#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/ccxt@1.29.75/dist/ccxt.browser.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Listing Available Exchange Methods in PHP\nDESCRIPTION: This snippet illustrates how to get a list of all available methods for an OKCoinUSD exchange instance in PHP.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\nvar_dump(new \\ccxt\\okcoinusd());\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Exchanges in PHP\nDESCRIPTION: Shows how to programmatically get the list of supported exchange IDs using the CCXT library in PHP\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\ninclude 'ccxt.php';\nvar_dump (\\ccxt\\Exchange::$exchanges);\n```\n\n----------------------------------------\n\nTITLE: Running PHP Examples with CCXT Library via Command Line\nDESCRIPTION: This command demonstrates how to execute PHP example files from the CCXT library using the PHP CLI. It allows running examples from any folder by specifying the full path to the example file.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/examples/php/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp -f path/to/example.php # substitute for actual filename here\n```\n\n----------------------------------------\n\nTITLE: Adding CCXT Pro to setup.py\nDESCRIPTION: Configuration for adding CCXT Pro as a dependency in a Python project's setup.py file using setuptools.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.install.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# setup.py\nsetup(\n    # ...\n    install_requires=[\n        # install the most recent version\n        'ccxtpro @ git+https://github.com/kroitor/ccxt.pro.git#subdirectory=python'\n        # install a specific version number\n        # 'ccxtpro @ git+https://github.com/kroitor/ccxt.pro.git@0.1.13#subdirectory=python'\n    ]\n    # ...\n)\n```\n\n----------------------------------------\n\nTITLE: Adding CCXT Pro as a dependency in package.json\nDESCRIPTION: Example of how to manually add CCXT Pro as a dependency in a JavaScript project's package.json file. This is an alternative to using npm install commands.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.install.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// package.json\n{\n  // ...\n  \"dependencies\": {\n    \"ccxt.pro\": \"git+https://github.com/kroitor/ccxt.pro.git\"\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Unsafe JavaScript Dictionary Access (Anti-pattern)\nDESCRIPTION: Shows unsafe patterns for accessing dictionary keys in JavaScript that won't work when transpiled to Python or PHP due to different error handling behaviors.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nconst value = object['key'] || other_value; // will not work in Python or PHP!\nif (object['key'] || other_value) { /* will not work in Python or PHP! */ }\n```\n\n----------------------------------------\n\nTITLE: Including CCXT in HTML Using CDN\nDESCRIPTION: HTML script tag to include the CCXT library in a web page via CDN, creating a global ccxt object.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/ccxt@1.30.51/dist/ccxt.browser.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT with pip for Python\nDESCRIPTION: Command to install the CCXT library using pip package manager for Python applications.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\npip install ccxt\n```\n\n----------------------------------------\n\nTITLE: Setting Verbose Mode in CCXT\nDESCRIPTION: Example showing how to enable verbose mode for debugging exchange API calls\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/FAQ.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexchange.verbose = true\n```\n\n----------------------------------------\n\nTITLE: Exchange Integration JSON Structure in JavaScript\nDESCRIPTION: Basic JSON skeleton for adding a new exchange integration to CCXT, including exchange metadata, API endpoints, and other required information.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n   'id': 'example',\n   'name': 'Example Exchange',\n   'country': [ 'US', 'EU', 'CN', 'RU' ],\n   'rateLimit': 1000,\n   'version': '1',\n   'comment': 'This comment is optional',\n   'urls': {\n      'logo': 'https://example.com/image.jpg',\n      'api': 'https://api.example.com/api',\n      'www': 'https://www.example.com',\n      'doc': [\n         'https://www.example.com/docs/api',\n         'https://www.example.com/docs/howto',\n         'https://github.com/example/docs',\n      ],\n   },\n   'api': {\n      'public': {\n         'get': [\n            'endpoint/example',\n            'orderbook/{pair}/full',\n            '{pair}/ticker',\n         ],\n      },\n      'private': {\n         'post': [\n            'balance',\n         ],\n      },\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript CCXT Usage\nDESCRIPTION: Example of importing and using CCXT in JavaScript to list available exchanges\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/install.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar ccxt = require ('ccxt')\n\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n----------------------------------------\n\nTITLE: Adding CCXT Pro as a dependency in setup.py\nDESCRIPTION: Example of how to add CCXT Pro as a dependency in a Python project's setup.py file using setuptools. It shows how to install the most recent version or a specific version number.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.install.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# setup.py\nsetup(\n    # ...\n    install_requires=[\n        # install the most recent version\n        'ccxtpro @ git+https://github.com/kroitor/ccxt.pro.git#subdirectory=python'\n        # install a specific version number\n        # 'ccxtpro @ git+https://github.com/kroitor/ccxt.pro.git@0.1.13#subdirectory=python'\n    ]\n    # ...\n)\n```\n\n----------------------------------------\n\nTITLE: Linking CCXT Pro in PHP\nDESCRIPTION: Example of how to use the CCXT Pro library in a PHP application, displaying the version and supported exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// PHP\nuse \\ccxtpro; // optional, since you can use fully qualified names\necho 'CCXT Pro version ', \\ccxtpro\\Exchange::VERSION, \"\\n\";\necho 'Supported exchanges: ', json_encode(\\ccxtpro\\Exchange::$exchanges), \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Including CCXT in Browser via CDN\nDESCRIPTION: HTML script tag for including CCXT in a browser environment using a CDN.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/ccxt@1.30.51/dist/ccxt.browser.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT via NPM for JavaScript\nDESCRIPTION: Command to install the CCXT library using NPM for JavaScript applications.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install ccxt\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys for CCXT in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up API credentials for trading with CCXT in JavaScript. It shows different ways to configure API keys for exchange instances.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_67\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ccxt = require ('ccxt')\n\n// any time\nlet kraken = new ccxt.kraken ()\nkraken.apiKey = 'YOUR_KRAKEN_API_KEY'\nkraken.secret = 'YOUR_KRAKEN_SECRET_KEY'\n\n// upon instantiation\nlet okcoinusd = new ccxt.okcoinusd ({\n    apiKey: 'YOUR_OKCOIN_API_KEY',\n    secret: 'YOUR_OKCOIN_SECRET_KEY',\n})\n\n// from variable id\nconst exchangeId = 'binance'\n    , exchangeClass = ccxt[exchangeId]\n    , exchange = new exchangeClass ({\n        'apiKey': 'YOUR_API_KEY',\n        'secret': 'YOUR_SECRET',\n        'timeout': 30000,\n        'enableRateLimit': true,\n    })\n```\n\n----------------------------------------\n\nTITLE: Base Error Class Definition in JavaScript\nDESCRIPTION: Shows the implementation of the base error class in JavaScript for CCXT library with ES5 compatibility.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_129\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass BaseError extends Error {\n    constructor () {\n        super ()\n        // a workaround to make `instanceof BaseError` work in ES5\n        this.constructor = BaseError\n        this.__proto__   = BaseError.prototype\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Length Handling in JavaScript\nDESCRIPTION: Explains how to properly handle array lengths in JavaScript code that will be transpiled to PHP and Python, with special consideration for the transpiler's hinting mechanism.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst arrayLength = someArray.length;\n// the above line ends with .length;\n// that ending is a hint for the transpiler that will recognize someArray\n// as an array variable in this place, rather than a string type variable\n// now we can use arrayLength for the arithmetic\n```\n\n----------------------------------------\n\nTITLE: Formatting Decimals in JavaScript, Python, and PHP\nDESCRIPTION: Shows the method signatures for formatting decimals in different programming languages supported by CCXT. These methods handle rounding, precision, and padding modes.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction decimalToPrecision (x, roundingMode, numPrecisionDigits, countingMode = DECIMAL_PLACES, paddingMode = NO_PADDING)\n```\n\nLANGUAGE: Python\nCODE:\n```\ndef decimal_to_precision(n, rounding_mode=ROUND, precision=None, counting_mode=DECIMAL_PLACES, padding_mode=NO_PADDING):\n```\n\nLANGUAGE: PHP\nCODE:\n```\nfunction decimalToPrecision ($x, $roundingMode = ROUND, $numPrecisionDigits = null, $countingMode = DECIMAL_PLACES, $paddingMode = NO_PADDING)\n```\n\n----------------------------------------\n\nTITLE: Including CCXT via CDN in HTML\nDESCRIPTION: Shows how to include the CCXT library in an HTML file using a CDN link.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/index.rst#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://unpkg.com/ccxt\"></script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n----------------------------------------\n\nTITLE: Running Test Script with asyncio for GDAX Exchange\nDESCRIPTION: A Python code snippet that demonstrates how to run a test function for the GDAX exchange using asyncio's event loop. The snippet prints the results using pprint.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/install.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == '__main__':\n    pprint(asyncio.get_event_loop().run_until_complete(test_gdax()))\n```\n\n----------------------------------------\n\nTITLE: Importing CCXT Pro in Python\nDESCRIPTION: Code example demonstrating how to import the CCXT Pro library in Python and access version information and supported exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxtpro\nprint('CCXT Pro version', ccxtpro.__version__)\nprint('Supported exchanges:', ccxtpro.exchanges)\n```\n\n----------------------------------------\n\nTITLE: Including CCXT in Browser via CDN\nDESCRIPTION: HTML script tag to include the CCXT library in a browser environment from a CDN.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/README.md#2025-04-23_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/ccxt@1.30.51/dist/ccxt.browser.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Cryptocurrency Exchange Information Table in Markdown\nDESCRIPTION: This markdown snippet creates a table with columns for exchange logo, name, API version, documentation link, and additional information. It includes entries for multiple cryptocurrency exchanges like Coinbase Pro, Coincheck, CoinEgg, and others.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|[![coinbasepro](https://user-images.githubusercontent.com/1294454/41764625-63b7ffde-760a-11e8-996d-a6328fa9347a.jpg)](https://pro.coinbase.com/)                                             | coinbasepro        | [Coinbase Pro](https://pro.coinbase.com/)                                            | *   | [API](https://docs.pro.coinbase.com)                                                         |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro)|\n|[![coincheck](https://user-images.githubusercontent.com/1294454/27766464-3b5c3c74-5ed9-11e7-840e-31b32968e1da.jpg)](https://coincheck.com)                                                   | coincheck          | [coincheck](https://coincheck.com)                                                   | *   | [API](https://coincheck.com/documents/exchange/api)                                          |                                                                                                                             |                                                                             |\n|[![coinegg](https://user-images.githubusercontent.com/1294454/36770310-adfa764e-1c5a-11e8-8e09-449daac3d2fb.jpg)](https://www.coinegg.com/user/register?invite=523218)                       | coinegg            | [CoinEgg](https://www.coinegg.com/user/register?invite=523218)                       | *   | [API](https://www.coinegg.com/explain.api.html)                                              |                                                                                                                             |                                                                             |\n|[![coinex](https://user-images.githubusercontent.com/1294454/38046312-0b450aac-32c8-11e8-99ab-bc6b136b6cc7.jpg)](https://www.coinex.com/register?refer_code=yw5fz)                           | coinex             | [CoinEx](https://www.coinex.com/register?refer_code=yw5fz)                           | 1   | [API](https://github.com/coinexcom/coinex_exchange_api/wiki)                                 |                                                                                                                             |                                                                             |\n|[![coinfalcon](https://user-images.githubusercontent.com/1294454/41822275-ed982188-77f5-11e8-92bb-496bcd14ca52.jpg)](https://coinfalcon.com/?ref=CFJSVGTUPASB)                               | coinfalcon         | [CoinFalcon](https://coinfalcon.com/?ref=CFJSVGTUPASB)                               | 1   | [API](https://docs.coinfalcon.com)                                                           |                                                                                                                             |                                                                             |\n|[![coinfloor](https://user-images.githubusercontent.com/1294454/28246081-623fc164-6a1c-11e7-913f-bac0d5576c90.jpg)](https://www.coinfloor.co.uk)                                             | coinfloor          | [coinfloor](https://www.coinfloor.co.uk)                                             | *   | [API](https://github.com/coinfloor/api)                                                      |                                                                                                                             |                                                                             |\n|[![coingi](https://user-images.githubusercontent.com/1294454/28619707-5c9232a8-7212-11e7-86d6-98fe5d15cc6e.jpg)](https://www.coingi.com/?r=XTPPMC)                                           | coingi             | [Coingi](https://www.coingi.com/?r=XTPPMC)                                           | *   | [API](https://coingi.docs.apiary.io)                                                         |                                                                                                                             |                                                                             |\n|[![coinmarketcap](https://user-images.githubusercontent.com/1294454/28244244-9be6312a-69ed-11e7-99c1-7c1797275265.jpg)](https://coinmarketcap.com)                                           | coinmarketcap      | [CoinMarketCap](https://coinmarketcap.com)                                           | 1   | [API](https://coinmarketcap.com/api)                                                         |                                                                                                                             |                                                                             |\n|[![coinmate](https://user-images.githubusercontent.com/1294454/27811229-c1efb510-606c-11e7-9a36-84ba2ce412d8.jpg)](https://coinmate.io?referral=YTFkM1RsOWFObVpmY1ZjMGREQmpTRnBsWjJJNVp3PT0) | coinmate           | [CoinMate](https://coinmate.io?referral=YTFkM1RsOWFObVpmY1ZjMGREQmpTRnBsWjJJNVp3PT0) | *   | [API](https://coinmate.docs.apiary.io)                                                       |                                                                                                                             |                                                                             |\n|[![coinone](https://user-images.githubusercontent.com/1294454/38003300-adc12fba-323f-11e8-8525-725f53c4a659.jpg)](https://coinone.co.kr)                                                     | coinone            | [CoinOne](https://coinone.co.kr)                                                     | 2   | [API](https://doc.coinone.co.kr)                                                             |                                                                                                                             |                                                                             |\n|[![coinspot](https://user-images.githubusercontent.com/1294454/28208429-3cacdf9a-6896-11e7-854e-4c79a772a30f.jpg)](https://www.coinspot.com.au/register?code=PJURCU)                         | coinspot           | [CoinSpot](https://www.coinspot.com.au/register?code=PJURCU)                         | *   | [API](https://www.coinspot.com.au/api)                                                       |                                                                                                                             |                                                                             |\n|[![coolcoin](https://user-images.githubusercontent.com/1294454/36770529-be7b1a04-1c5b-11e8-9600-d11f1996b539.jpg)](https://www.coolcoin.com/user/register?invite_code=bhaega)                | coolcoin           | [CoolCoin](https://www.coolcoin.com/user/register?invite_code=bhaega)                | *   | [API](https://www.coolcoin.com/help.api.html)                                                |                                                                                                                             |                                                                             |\n|[![coss](https://user-images.githubusercontent.com/1294454/50328158-22e53c00-0503-11e9-825c-c5cfd79bfa74.jpg)](https://www.coss.io/c/reg?r=OWCMHQVW2Q)                                       | coss               | [COSS](https://www.coss.io/c/reg?r=OWCMHQVW2Q)                                       | 1   | [API](https://api.coss.io/v1/spec)                                                           |                                                                                                                             |                                                                             |\n|[![crex24](https://user-images.githubusercontent.com/1294454/47813922-6f12cc00-dd5d-11e8-97c6-70f957712d47.jpg)](https://crex24.com/?refid=slxsjsjtil8xexl9hksr)                             | crex24             | [CREX24](https://crex24.com/?refid=slxsjsjtil8xexl9hksr)                             | 2   | [API](https://docs.crex24.com/trade-api/v2)                                                  |                                                                                                                             |                                                                             |\n|[![currencycom](https://user-images.githubusercontent.com/1294454/83718672-36745c00-a63e-11ea-81a9-677b1f789a4d.jpg)](https://currency.com/trading/signup?c=362jaimv&pid=referral)           | currencycom        | [Currency.com](https://currency.com/trading/signup?c=362jaimv&pid=referral)          | 1   | [API](https://currency.com/api)                                                              |                                                                                                                             |                                                                             |\n|[![deribit](https://user-images.githubusercontent.com/1294454/41933112-9e2dd65a-798b-11e8-8440-5bab2959fcb8.jpg)](https://www.deribit.com/reg-1189.4038)                                     | deribit            | [Deribit](https://www.deribit.com/reg-1189.4038)                                     | 2   | [API](https://docs.deribit.com/v2)                                                           |                                                                                                                             |                                                                             |\n```\n\n----------------------------------------\n\nTITLE: Implementing Cursor-Based Pagination in JavaScript for Fetching Trades\nDESCRIPTION: A JavaScript implementation of cursor-based pagination that uses a page number or cursor to navigate through trade data. The code extracts the next cursor from the exchange response to continue pagination.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nif (exchange.has['fetchTrades']) {\n    let page = 0  // exchange-specific type and value\n    let allTrades = []\n    while (true) {\n        const symbol = undefined // change for your symbol\n        const since = undefined\n        const limit = 20 // change for your limit\n        const params = {\n            'page': page, // exchange-specific non-unified parameter name\n        }\n        const trades = await exchange.fetchTrades (symbol, since, limit, params)\n        if (trades.length) {\n            // not thread-safu and exchange-specific !\n            page = exchange.last_json_response['cursor']\n            allTrades.push (trades)\n        } else {\n            break\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BaseError Exception Class in PHP\nDESCRIPTION: This snippet defines the BaseError class in PHP, extending the built-in Exception class to serve as the base exception for CCXT-related errors.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_131\n\nLANGUAGE: PHP\nCODE:\n```\nclass BaseError extends \\Exception {}\n```\n\n----------------------------------------\n\nTITLE: Safe Key Existence Check Alternative in JavaScript\nDESCRIPTION: Shows an alternative way to check for key existence in a dictionary using the 'in' operator, which works consistently across languages.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nif ('foo' in params) {\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT with NPM for JavaScript\nDESCRIPTION: Command to install the CCXT library using NPM package manager for JavaScript applications.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install ccxt\n```\n\n----------------------------------------\n\nTITLE: Running CCXT in Docker with Docker Compose\nDESCRIPTION: Command to run CCXT in a Docker container using docker-compose, useful for development and contributing to CCXT.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose run --rm ccxt\n```\n\n----------------------------------------\n\nTITLE: Running CCXT in Docker\nDESCRIPTION: Shell command to run CCXT in a Docker container using docker-compose, useful for development and testing.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/README.rst#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose run --rm ccxt\n```\n\n----------------------------------------\n\nTITLE: Market Structure Object in CCXT\nDESCRIPTION: This code snippet illustrates the structure of a market object in CCXT, showing properties like percentage, tierBased, precision, and limits. The market object contains essential information about a trading pair including fees, precision requirements, and trading limits.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n'percentage': true,   // whether the taker and maker fee rate is a multiplier or a fixed flat amount\n'tierBased': false,   // whether the fee depends on your trading tier (your trading volume)\n'precision': {        // number of decimal digits \"after the dot\"\n    'price': 8,       // integer or float for TICK_SIZE roundingMode, might be missing if not supplied by the exchange\n    'amount': 8,      // integer, might be missing if not supplied by the exchange\n    'cost': 8,        // integer, very few exchanges actually have it\n},\n'limits': {           // value limits when placing orders on this market\n    'amount': {\n        'min': 0.01,  // order amount should be > min\n        'max': 1000,  // order amount should be < max\n    },\n    'price': { ... }, // same min/max limits for the price of the order\n    'cost':  { ... }, // same limits for order cost = price * amount\n},\n'info':      { ... }, // the original unparsed market info from the exchange\n```\n\n----------------------------------------\n\nTITLE: Including CCXT in PHP\nDESCRIPTION: PHP example showing how to include the CCXT library and print a list of all available exchange classes.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/README.rst#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ninclude \"ccxt.php\";\nvar_dump (\\ccxt\\Exchange::$exchanges); // print a list of all available exchange classes\n```\n\n----------------------------------------\n\nTITLE: Cryptocurrency Exchange Reference Table in Markdown\nDESCRIPTION: A formatted markdown table containing cryptocurrency exchange information including logos, names, API versions, documentation links, and CCXT Pro badges\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/README.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|[![luno](https://user-images.githubusercontent.com/1294454/27766607-8c1a69d8-5ede-11e7-930c-540b5eb9be24.jpg)](https://www.luno.com/invite/44893A) | luno | [luno](https://www.luno.com/invite/44893A) | 1 | [API](https://www.luno.com/en/api) | | |\n|[![lykke](https://user-images.githubusercontent.com/1294454/34487620-3139a7b0-efe6-11e7-90f5-e520cef74451.jpg)](https://www.lykke.com) | lykke | [Lykke](https://www.lykke.com) | 1 | [API](https://hft-api.lykke.com/swagger/ui/) | | |\n```\n\n----------------------------------------\n\nTITLE: Fetching Order by ID Using JavaScript\nDESCRIPTION: Demonstrates how to fetch a specific order using its ID with the fetchOrder method in JavaScript. This is an asynchronous implementation using async/await syntax.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\n(async function () {\n    const order = await exchange.fetchOrder (id)\n    console.log (order)\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Correct Market Implementation Using marketId() Method in JavaScript\nDESCRIPTION: Alternative proper implementation of fetchTicker using the marketId() method for simplified market ID retrieval.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync fetchTicker (symbol, params = {}) {\n   const marketId = this.marketId (symbol); // just the id\n   const request = {\n      'symbol': marketId, // good, they may me equal, but often differ, it's ok\n   };\n   const response = await this.publicGetEndpoint (this.extend (request, params));\n   // parse in a unified way...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Environment Variables for Python\nDESCRIPTION: Shell commands to set HTTP and HTTPS proxy environment variables that will be used by the Python requests library within CCXT.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ export HTTP_PROXY=\"http://10.10.1.10:3128\"\n$ export HTTPS_PROXY=\"http://10.10.1.10:1080\"\n```\n\n----------------------------------------\n\nTITLE: Error Handling in PHP\nDESCRIPTION: Shows how to implement error handling in PHP using try-catch blocks with CCXT exception hierarchy.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_128\n\nLANGUAGE: PHP\nCODE:\n```\ntry {\n    $response = $exchange->fetch_trades('ETH/BTC');\n    print_r($response);\n} catch (\\ccxt\\NetworkError $e) {\n    echo $exchange->id . ' fetch_trades failed due to a network error: ' . $e->getMessage () . \"\\n\";\n} catch (\\ccxt\\ExchangeError $e) {\n    echo $exchange->id . ' fetch_trades failed due to exchange error: ' . $e->getMessage () . \"\\n\";\n} catch (Exception $e) {\n    echo $exchange->id . ' fetch_trades failed with: ' . $e->getMessage () . \"\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Running CCXT with Docker Compose\nDESCRIPTION: Command to run the CCXT library in a Docker container using docker-compose.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/README.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose run --rm ccxt\n```\n\n----------------------------------------\n\nTITLE: Advanced JavaScript CCXT Usage Examples\nDESCRIPTION: Comprehensive JavaScript example demonstrating initialization of multiple exchanges, loading markets, fetching data, and creating orders.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/README.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use strict';\nconst ccxt = require ('ccxt');\n\n(async function () {\n    let kraken    = new ccxt.kraken ()\n    let bitfinex  = new ccxt.bitfinex ({ verbose: true })\n    let huobipro  = new ccxt.huobipro ()\n    let okcoinusd = new ccxt.okcoinusd ({\n        apiKey: 'YOUR_PUBLIC_API_KEY',\n        secret: 'YOUR_SECRET_PRIVATE_KEY',\n    })\n\n    const exchangeId = 'binance'\n        , exchangeClass = ccxt[exchangeId]\n        , exchange = new exchangeClass ({\n            'apiKey': 'YOUR_API_KEY',\n            'secret': 'YOUR_SECRET',\n            'timeout': 30000,\n            'enableRateLimit': true,\n        })\n\n    console.log (kraken.id,    await kraken.loadMarkets ())\n    console.log (bitfinex.id,  await bitfinex.loadMarkets  ())\n    console.log (huobipro.id,  await huobipro.loadMarkets ())\n\n    console.log (kraken.id,    await kraken.fetchOrderBook (kraken.symbols[0]))\n    console.log (bitfinex.id,  await bitfinex.fetchTicker ('BTC/USD'))\n    console.log (huobipro.id,  await huobipro.fetchTrades ('ETH/CNY'))\n\n    console.log (okcoinusd.id, await okcoinusd.fetchBalance ())\n\n    // sell 1 BTC/USD for market price, sell a bitcoin for dollars immediately\n    console.log (okcoinusd.id, await okcoinusd.createMarketSellOrder ('BTC/USD', 1))\n\n    // buy 1 BTC/USD for $2500, you pay $2500 and receive ฿1 when the order is closed\n    console.log (okcoinusd.id, await okcoinusd.createLimitBuyOrder ('BTC/USD', 1, 2500.00))\n\n    // pass/redefine custom exchange-specific order params: type, amount, price or whatever\n    // use a custom order type\n    bitfinex.createLimitSellOrder ('BTC/USD', 1, 10, { 'type': 'trailing-stop' })\n\n}) ();\n```\n\n----------------------------------------\n\nTITLE: Displaying CCXT Pro Architecture Diagram in ASCII\nDESCRIPTION: An ASCII diagram showing the structure of CCXT Pro, illustrating how it extends CCXT and provides both public and private unified API methods for cryptocurrency trading.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                    User\n\n       +-------------------------------------------------------------+\n       |                          CCXT Pro                           |\n       +------------------------------+------------------------------+\n       |            Public            .           Private            |\n       +=============================================================+\n       │                              .                              |\n       │                  The Unified CCXT Pro API                   |\n       |                              .                              |\n       |       loadMarkets            .           watchBalance       |\n       |       watchTicker            .       watchCreateOrder       |\n       |       watchTickers           .       watchCancelOrder       |\n       |       watchOrderBook         .             watchOrder       |\n       |       watchOHLCV             .            watchOrders       |\n       |       watchStatus            .        wathgOpenOrders       |\n       |       watchTrades            .      watchClosedOrders       |\n       |                              .          watchMyTrades       |\n       |                              .           watchDeposit       |\n       |                              .          watchWithdraw       |\n       │                              .                              |\n       +=============================================================+\n       │                              .                              |\n       |            The Underlying Exchange-Specific APIs            |\n       |         (Derived Classes And Their Implementations)         |\n       │                              .                              |\n       +=============================================================+\n       │                              .                              |\n       |                 CCXT Pro Base Exchange Class                |\n       │                              .                              |\n       +=============================================================+\n\n       +-------------------------------------------------------------+\n       |                                                             |\n       |                            CCXT                             |\n       |                                                             |\n       +=============================================================\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT in Node.js using NPM\nDESCRIPTION: Command to install the CCXT library in a Node.js project using NPM package manager.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install ccxt\n```\n\n----------------------------------------\n\nTITLE: Running Python Examples Using Shell Commands\nDESCRIPTION: A basic shell command showing how to execute Python example files from the CCXT library. The user needs to replace 'example.py' with the actual filename they want to run.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/examples/py/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython path/to/example.py # substitute for actual filename here\n```\n\n----------------------------------------\n\nTITLE: Defining BaseError Exception Class in Python\nDESCRIPTION: This snippet defines the BaseError class in Python, which serves as the base exception class for all CCXT-related errors.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_130\n\nLANGUAGE: Python\nCODE:\n```\nclass BaseError (Exception):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Cryptocurrency Exchange APIs\nDESCRIPTION: A markdown table listing cryptocurrency exchanges with their logos, referral links, API versions, and documentation URLs. Each row contains an exchange's details including logo image, name, API version, documentation link, and CCXT Pro support status.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|[![luno](https://user-images.githubusercontent.com/1294454/27766607-8c1a69d8-5ede-11e7-930c-540b5eb9be24.jpg)](https://www.luno.com/invite/44893A) | luno | [luno](https://www.luno.com/invite/44893A) | 1 | [API](https://www.luno.com/en/api) | | |\n|[![lykke](https://user-images.githubusercontent.com/1294454/34487620-3139a7b0-efe6-11e7-90f5-e520cef74451.jpg)](https://www.lykke.com) | lykke | [Lykke](https://www.lykke.com) | 1 | [API](https://hft-api.lykke.com/swagger/ui/) | | |\n[...additional rows truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: PHP CCXT Integration\nDESCRIPTION: Example of including and using CCXT in PHP to list available exchanges\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/install.rst#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ninclude \"ccxt.php\";\nvar_dump (\\ccxt\\Exchange::$exchanges); // print a list of all available exchange classes\n```\n\n----------------------------------------\n\nTITLE: Formatting Decimals with decimal_to_precision in Python\nDESCRIPTION: Example of the decimal_to_precision function signature in Python, used for formatting values to required decimal precision. Includes a warning about susceptibility to getcontext().prec.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# WARNING! The `decimal_to_precision` method is susceptible to getcontext().prec!\ndef decimal_to_precision(n, rounding_mode=ROUND, precision=None, counting_mode=DECIMAL_PLACES, padding_mode=NO_PADDING):\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Cryptocurrency Exchange APIs by Country\nDESCRIPTION: A markdown formatted table listing cryptocurrency exchanges organized by country. Each row contains exchange information including logo link, exchange ID, name, API version, and documentation link.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Exchange-Markets-By-Country.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|Ukraine                | [![btctradeua](https://user-images.githubusercontent.com/1294454/27941483-79fc7350-62d9-11e7-9f61-ac47f28fcd96.jpg)](https://btc-trade.com.ua/registration/22689)                            | btctradeua         | [BTC Trade UA](https://btc-trade.com.ua/registration/22689)                          | *   | [API](https://docs.google.com/document/d/1ocYA0yMy_RXd561sfG3qEPZ80kyll36HUxvCRe5GbhE/edit) |\n|Ukraine                | [![kuna](https://user-images.githubusercontent.com/1294454/31697638-912824fa-b3c1-11e7-8c36-cf9606eb94ac.jpg)](https://kuna.io?r=kunaid-gvfihe8az7o4)                                        | kuna               | [Kuna](https://kuna.io?r=kunaid-gvfihe8az7o4)                                        | 2   | [API](https://kuna.io/documents/api)                                                        |\n|United Arab Emirates   | [![rightbtc](https://user-images.githubusercontent.com/1294454/42633917-7d20757e-85ea-11e8-9f53-fffe9fbb7695.jpg)](https://www.rightbtc.com)                                                 | rightbtc           | [RightBTC](https://www.rightbtc.com)                                                 | *   | [API](https://docs.rightbtc.com/api/)                                                       |\n|US                     | [![kraken](https://user-images.githubusercontent.com/51840849/76173629-fc67fb00-61b1-11ea-84fe-f2de582f58a3.jpg)](https://www.kraken.com)                                                    | kraken             | [Kraken](https://www.kraken.com)                                                     | 0   | [API](https://www.kraken.com/features/api)                                                  |\n|US                     | [![btcalpha](https://user-images.githubusercontent.com/1294454/42625213-dabaa5da-85cf-11e8-8f99-aa8f8f7699f0.jpg)](https://btc-alpha.com/?r=123788)                                          | btcalpha           | [BTC-Alpha](https://btc-alpha.com/?r=123788)                                         | 1   | [API](https://btc-alpha.github.io/api-docs)                                                 |\n|US                     | [![coinbase](https://user-images.githubusercontent.com/1294454/40811661-b6eceae2-653a-11e8-829e-10bfadb078cf.jpg)](https://www.coinbase.com/join/58cbe25a355148797479dbd2)                   | coinbase           | [Coinbase](https://www.coinbase.com/join/58cbe25a355148797479dbd2)                   | 2   | [API](https://developers.coinbase.com/api/v2)                                               |\n|US                     | [![coinbaseprime](https://user-images.githubusercontent.com/1294454/44539184-29f26e00-a70c-11e8-868f-e907fc236a7c.jpg)](https://prime.coinbase.com)                                          | coinbaseprime      | [Coinbase Prime](https://prime.coinbase.com)                                         | *   | [API](https://docs.prime.coinbase.com)                                                      |\n|US                     | [![coinbasepro](https://user-images.githubusercontent.com/1294454/41764625-63b7ffde-760a-11e8-996d-a6328fa9347a.jpg)](https://pro.coinbase.com/)                                             | coinbasepro        | [Coinbase Pro](https://pro.coinbase.com/)                                            | *   | [API](https://docs.pro.coinbase.com)                                                        |\n|US                     | [![coingi](https://user-images.githubusercontent.com/1294454/28619707-5c9232a8-7212-11e7-86d6-98fe5d15cc6e.jpg)](https://www.coingi.com/?r=XTPPMC)                                           | coingi             | [Coingi](https://www.coingi.com/?r=XTPPMC)                                           | *   | [API](https://coingi.docs.apiary.io)                                                        |\n|US                     | [![coinmarketcap](https://user-images.githubusercontent.com/1294454/28244244-9be6312a-69ed-11e7-99c1-7c1797275265.jpg)](https://coinmarketcap.com)                                           | coinmarketcap      | [CoinMarketCap](https://coinmarketcap.com)                                           | 1   | [API](https://coinmarketcap.com/api)                                                        |\n|US                     | [![gemini](https://user-images.githubusercontent.com/1294454/27816857-ce7be644-6096-11e7-82d6-3c257263229c.jpg)](https://gemini.com/)                                                        | gemini             | [Gemini](https://gemini.com/)                                                        | 1   | [API](https://docs.gemini.com/rest-api)                                                     |\n|US                     | [![idex](https://user-images.githubusercontent.com/1294454/63693236-3415e380-c81c-11e9-8600-ba1634f1407d.jpg)](https://idex.market)                                                          | idex               | [IDEX](https://idex.market)                                                          | *   | [API](https://docs.idex.market/)                                                            |\n|US                     | [![itbit](https://user-images.githubusercontent.com/1294454/27822159-66153620-60ad-11e7-89e7-005f6d7f3de0.jpg)](https://www.itbit.com)                                                       | itbit              | [itBit](https://www.itbit.com)                                                       | 1   | [API](https://api.itbit.com/docs)                                                           |\n|US                     | [![binanceus](https://user-images.githubusercontent.com/1294454/65177307-217b7c80-da5f-11e9-876e-0b748ba0a358.jpg)](https://www.binance.us/?ref=35005074)                                    | binanceus          | [Binance US](https://www.binance.us/?ref=35005074)                                   | *   | [API](https://github.com/binance-us/binance-official-api-docs)                              |\n|US                     | [![lakebtc](https://user-images.githubusercontent.com/1294454/28074120-72b7c38a-6660-11e7-92d9-d9027502281d.jpg)](https://www.lakebtc.com)                                                   | lakebtc            | [LakeBTC](https://www.lakebtc.com)                                                   | 2   | [API](https://www.lakebtc.com/s/api_v2)                                                     |\n|US                     | [![livecoin](https://user-images.githubusercontent.com/1294454/27980768-f22fc424-638a-11e7-89c9-6010a54ff9be.jpg)](https://livecoin.net/?from=Livecoin-CQ1hfx44)                             | livecoin           | [LiveCoin](https://livecoin.net/?from=Livecoin-CQ1hfx44)                             | *   | [API](https://www.livecoin.net/api?lang=en)                                                 |\n|US                     | [![oceanex](https://user-images.githubusercontent.com/1294454/58385970-794e2d80-8001-11e9-889c-0567cd79b78e.jpg)](https://oceanex.pro/signup?referral=VE24QX)                                | oceanex            | [OceanEx](https://oceanex.pro/signup?referral=VE24QX)                                | 1   | [API](https://api.oceanex.pro/doc/v1)                                                       |\n|US                     | [![okcoin](https://user-images.githubusercontent.com/1294454/27766791-89ffb502-5ee5-11e7-8a5b-c5950b68ac65.jpg)](https://www.okcoin.com/account/register?flag=activity&channelId=600001513)  | okcoin             | [OKCoin](https://www.okcoin.com/account/register?flag=activity&channelId=600001513)  | 3   | [API](https://www.okcoin.com/docs/en/)                                                      |\n|US                     | [![okex](https://user-images.githubusercontent.com/1294454/32552768-0d6dd3c6-c4a6-11e7-90f8-c043b64756a7.jpg)](https://www.okex.com/join/1888677)                                            | okex               | [OKEX](https://www.okex.com/join/1888677)                                            | 3   | [API](https://www.okex.com/docs/en/)                                                        |\n|US                     | [![poloniex](https://user-images.githubusercontent.com/1294454/27766817-e9456312-5ee6-11e7-9b3c-b628ca5626a5.jpg)](https://poloniex.com/signup?c=UBFZJRPJ)                                   | poloniex           | [Poloniex](https://poloniex.com/signup?c=UBFZJRPJ)                                   | *   | [API](https://docs.poloniex.com)                                                            |\n|US                     | [![qtrade](https://user-images.githubusercontent.com/51840849/80491487-74a99c00-896b-11ea-821e-d307e832f13e.jpg)](https://qtrade.io/?ref=BKOQWVFGRH2C)                                       | qtrade             | [qTrade](https://qtrade.io/?ref=BKOQWVFGRH2C)                                        | 1   | [API](https://qtrade-exchange.github.io/qtrade-docs)                                        |\n|US                     | [![bitmart](https://user-images.githubusercontent.com/1294454/61835713-a2662f80-ae85-11e9-9d00-6442919701fd.jpg)](http://www.bitmart.com/?r=rQCFLh)                                          | bitmart            | [BitMart](http://www.bitmart.com/?r=rQCFLh)                                          | 2   | [API](https://github.com/bitmartexchange/bitmart-official-api-docs)                         |\n|US                     | [![bibox](https://user-images.githubusercontent.com/51840849/77257418-3262b000-6c85-11ea-8fb8-20bdf20b3592.jpg)](https://w2.bibox.com/login/register?invite_code=05Kj3I)                     | bibox              | [Bibox](https://w2.bibox.com/login/register?invite_code=05Kj3I)                      | 1   | [API](https://biboxcom.github.io/en/)                                                       |\n```\n\n----------------------------------------\n\nTITLE: Using Ternary Operators in JavaScript\nDESCRIPTION: Examples of poorly formatted ternary conditionals that may break the transpiler, followed by improved versions using brackets for clarity.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst foo = {\n   'bar': 'a' + qux === 'baz' ? this.a () : this.b () + 'b',\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst foo = 'bar' + baz + qux ? 'a' : '' + this.c ();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst foo = {\n   'bar': (qux === 'baz') ? this.a () : this.b (), // much better now\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst bar = (qux === 'baz') ? this.a () : this.b ();\nconst foo = {\n   'bar': 'a' + bar + 'b',\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet foo = 'bar' + baz;\nif (qux) {\n   foo += 'a';\n};\nfoo += this.c ();\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Usage of CCXT\nDESCRIPTION: Simple JavaScript example showing how to require the CCXT library and list available exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar ccxt = require ('ccxt')\n\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n----------------------------------------\n\nTITLE: Running Python Examples\nDESCRIPTION: Command for executing Python example files. Replace 'path/to/example.py' with the actual file path to run specific examples.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/examples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython path/to/example.py # substitute for actual filename here\n```\n\n----------------------------------------\n\nTITLE: Building and Running CCXT Docker Container\nDESCRIPTION: Commands to build a Docker image for CCXT and run it as a container, providing an isolated environment with all dependencies.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --tag ccxt\ndocker run -it ccxt\n```\n\n----------------------------------------\n\nTITLE: Python Dictionary Access Example\nDESCRIPTION: Demonstrates how Python handles dictionary access differently from JavaScript, requiring explicit key existence checks to avoid KeyError exceptions.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nsome_dictionary = {}\n\n# breaks\nif some_dictionary['nonExistentKey']:\n    # in Python the attempt to dereference the nonExistentKey value\n    # will throw a standard built-in KeyError exception\n\n# works\nif 'nonExistentKey' in some_dictionary and some_dictionary['nonExistentKey']:\n    # this is a way to check if the key exists before accessing the value\n\n# also works\nif some_dictionary.get('nonExistentKey'):\n    # another a way to check if the key exists before accessing the value...\n```\n\n----------------------------------------\n\nTITLE: Running PHP Examples\nDESCRIPTION: Command for executing PHP example files. The -f flag specifies a file to parse, and 'path/to/example.php' should be replaced with the actual file path.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/examples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp -f path/to/example.php # substitute for actual filename here\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT Pro for PHP using Composer\nDESCRIPTION: Shell commands to install CCXT Pro in a PHP project using Composer. It configures the repository and adds CCXT Pro as a requirement.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.install.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# in your project directory\ncomposer config repositories.ccxtpro '{\"type\": \"git\", \"url\": \"https://github.com/kroitor/ccxt.pro.git\"}'\ncomposer require ccxt/ccxtpro\n```\n\n----------------------------------------\n\nTITLE: Running Docker for CCXT Development Environment\nDESCRIPTION: Command to create an isolated development environment using Docker, which provides all the necessary dependencies for building and testing CCXT.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose run --rm ccxt\n```\n\n----------------------------------------\n\nTITLE: Cryptocurrency Exchange Reference Table in Markdown\nDESCRIPTION: A markdown table containing detailed information about cryptocurrency exchanges including their logos, API versions, documentation links, and CCXT certification status. The table is formatted with images, links, and badges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|[![bitfinex](https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg)](https://www.bitfinex.com/?refcode=P61eYxFL)                               | bitfinex           | [Bitfinex](https://www.bitfinex.com/?refcode=P61eYxFL)                               | 1   | [API](https://docs.bitfinex.com/v1/docs)                                                     | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro)|\n```\n\n----------------------------------------\n\nTITLE: Managing Generated Files in Git for CCXT\nDESCRIPTION: Commands for ignoring and un-ignoring generated files in Git to avoid committing unnecessary changes. These commands help manage the build process and version control for the CCXT project.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nnpm run git-ignore-generated-files\n\nnpm run git-unignore-generated-files\n```\n\n----------------------------------------\n\nTITLE: Implementing a Python CORS Proxy Server\nDESCRIPTION: Python implementation of a simple CORS proxy that works with both Python 2 and 3. The script creates an HTTP server that adds the Access-Control-Allow-Origin header to responses, enabling cross-origin requests to exchange APIs.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\n#!/usr/bin/env python\n# Python CORS Proxy\n# Save this in a file like cors.py and run with `python cors.py [port]` or `cors [port]`\ntry:\n    # Python 3\n    from http.server import HTTPServer, SimpleHTTPRequestHandler, test as test_orig\n    import sys\n    def test (*args):\n        test_orig (*args, port = int (sys.argv[1]) if len (sys.argv) > 1 else 8080)\nexcept ImportError: # Python 2\n    from BaseHTTPServer import HTTPServer, test\n    from SimpleHTTPServer import SimpleHTTPRequestHandler\n\nclass CORSRequestHandler (SimpleHTTPRequestHandler):\n    def end_headers (self):\n        self.send_header ('Access-Control-Allow-Origin', '*')\n        SimpleHTTPRequestHandler.end_headers (self)\n\nif __name__ == '__main__':\n    test (CORSRequestHandler, HTTPServer)\n```\n\n----------------------------------------\n\nTITLE: Cloning CCXT Repository Using Git\nDESCRIPTION: Command to clone the CCXT library repository from GitHub, which allows for manual installation or customization of the library.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/ccxt/ccxt.git\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Cryptocurrency Exchange APIs\nDESCRIPTION: A formatted markdown table containing cryptocurrency exchange information including country, logo, name, API version and documentation links. Each row represents a different exchange with its associated details.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Exchange-Markets-By-Country.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Panama                 | [![_1btcxe](https://user-images.githubusercontent.com/1294454/27766049-2b294408-5ecc-11e7-85cc-adaff013dc1a.jpg)](https://1btcxe.com)                                                        | _1btcxe            | [1BTCXE](https://1btcxe.com)                                                         | *   | [API](https://1btcxe.com/api-docs.php)                                                      |\n|Panama                 | [![coingi](https://user-images.githubusercontent.com/1294454/28619707-5c9232a8-7212-11e7-86d6-98fe5d15cc6e.jpg)](https://www.coingi.com/?r=XTPPMC)                                           | coingi             | [Coingi](https://www.coingi.com/?r=XTPPMC)                                           | *   | [API](https://coingi.docs.apiary.io)                                                        |\n```\n\n----------------------------------------\n\nTITLE: Code Block Formatting Example - Bad\nDESCRIPTION: Examples of incorrect code block formatting using quotes or single backticks\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/FAQ.rst#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n'''BAD'''\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`BAD`\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT Pro with Composer\nDESCRIPTION: Shell commands for installing CCXT Pro in a PHP project using Composer package manager.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.install.rst#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# in your project directory\ncomposer config repositories.ccxtpro '{\"type\": \"git\", \"url\": \"https://github.com/kroitor/ccxt.pro.git\"}'\ncomposer require ccxt/ccxtpro\n```\n\n----------------------------------------\n\nTITLE: Running CCXT with Docker Compose\nDESCRIPTION: Docker command to run CCXT in a container with all dependencies included, useful for development purposes.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ndocker-compose run --rm ccxt\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT via Git Clone\nDESCRIPTION: Command to clone the CCXT repository from GitHub\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/install.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/ccxt/ccxt.git\n```\n\n----------------------------------------\n\nTITLE: Cryptocurrency Exchange Reference Table in Markdown\nDESCRIPTION: A formatted markdown table containing cryptocurrency exchange information including logos, names, API links, and CCXT Pro compatibility status. The table provides direct links to exchange signup pages and their respective API documentation.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Manual.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|[![luno](https://user-images.githubusercontent.com/1294454/27766607-8c1a69d8-5ede-11e7-930c-540b5eb9be24.jpg)](https://www.luno.com/invite/44893A) | luno | [luno](https://www.luno.com/invite/44893A) | 1 | [API](https://www.luno.com/en/api) | | |\n|[![lykke](https://user-images.githubusercontent.com/1294454/34487620-3139a7b0-efe6-11e7-90f5-e520cef74451.jpg)](https://www.lykke.com) | lykke | [Lykke](https://www.lykke.com) | 1 | [API](https://hft-api.lykke.com/swagger/ui/) | | |\n[...additional rows truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Another Incorrect Market Symbol Implementation in JavaScript\nDESCRIPTION: Second example of incorrect fetchTicker implementation that should be avoided, showing direct symbol usage.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync fetchTicker (symbol, params = {}) {\n   const request = {\n      'symbol': symbol, // very bad, sending unified symbols to the exchange directly\n   };\n   const response = await this.publicGetEndpoint (request);\n   // parse in a unified way...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT in Python Using Pip\nDESCRIPTION: Command to install the CCXT library in a Python environment using pip package manager.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npip install ccxt\n```\n\n----------------------------------------\n\nTITLE: Exchange Reference Table in Markdown\nDESCRIPTION: A formatted markdown table containing cryptocurrency exchange information including exchange names, API endpoints, and additional features. Each row represents a different exchange with columns for name, identifier, API documentation link and CCXT Pro support status.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/exchanges.rst#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| `coinbasepro <https://pro.coinbase.com/>`__                                             | coinbasepro        | `Coinbase Pro <https://pro.coinbase.com/>`__                                            | \\*  | `API <https://docs.pro.coinbase.com>`__                                                         |                                                                      | `CCXT Pro <https://ccxt.pro>`__ |\n+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+----------------------------------------------------------------------+---------------------------------+\n| `coincheck <https://coincheck.com>`__                                                   | coincheck          | `coincheck <https://coincheck.com>`__                                                   | \\*  | `API <https://coincheck.com/documents/exchange/api>`__                                          |                                                                      |                                 |\n```\n\n----------------------------------------\n\nTITLE: My Trades Watching Method Signatures in Multiple Languages\nDESCRIPTION: Function signatures for the watchMyTrades method in JavaScript, Python, and PHP. This method is marked as work in progress and may be unavailable, but the signatures show the expected parameters for monitoring user's own trades.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/ccxt.pro.manual.md#2025-04-23_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nwatchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\nLANGUAGE: Python\nCODE:\n```\nwatch_my_trades(symbol=None, since=None, limit=None, params={})\n```\n\nLANGUAGE: PHP\nCODE:\n```\nwatch_my_trades($symbol = null, $since = null, $lmit = null, $params = array());\n```\n\n----------------------------------------\n\nTITLE: Adding CCXT Pro to composer.json\nDESCRIPTION: Configuration for adding CCXT Pro as a dependency in a PHP project's composer.json file.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.install.rst#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// composer.json\n{\n    // ...\n    \"require\": {\n        \"ccxt/ccxtpro\": \"^0.0.70\"\n    },\n    \"repositories\": {\n        \"ccxtpro\": {\n            \"type\": \"git\",\n            \"url\": \"https://github.com/kroitor/ccxt.pro.git\"\n        }\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning CCXT Repository using Git\nDESCRIPTION: Command to clone the CCXT repository from GitHub into your local project directory.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/ccxt/ccxt.git\n```\n\n----------------------------------------\n\nTITLE: JavaScript Dictionary Access Example\nDESCRIPTION: Shows how JavaScript allows two different notations for accessing dictionary keys - string key notation and property notation, but explains why the string key notation is preferred for transpilability.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\n\nconst someObject = {}\n\nif (someObject['nonExistentKey']) {\n    // the body of this conditional will not execute in JavaScript\n    // because someObject['nonExistentKey'] === undefined === false\n    // but JavaScript will not throw an exception on the if-clause\n}\n```\n\n----------------------------------------\n\nTITLE: Another Incorrect Symbol Parsing in JavaScript (Bad Example)\nDESCRIPTION: Similar to the first bad example, this code incorrectly uses the 'symbol' field from the exchange response without proper conversion to unified symbols.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nparseTrade (trade, market = undefined) {\n   // parsing code...\n   return {\n      'info': trade,\n      'symbol': trade['symbol'], // very bad, returning exchange-specific market-ids in a unified structure!\n      // other fields...\n   };\n}\n```\n\n----------------------------------------\n\nTITLE: Linking CCXT Pro in JavaScript\nDESCRIPTION: Example of how to include the CCXT Pro library in a JavaScript application, displaying the version and supported exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nconst ccxtpro = require ('ccxt.pro')\nconsole.log ('CCXT Pro version', ccxtpro.version)\nconsole.log ('Supported exchanges:', ccxtpro.exchanges)\n```\n\n----------------------------------------\n\nTITLE: Warning Message about Documentation Status in Diff Format\nDESCRIPTION: A diff block indicating that the contributing guidelines document is still a work in progress and being actively developed.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- This file is a work in progress, guidelines for contributing are being developed right now!\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT via Git Clone\nDESCRIPTION: Command to clone the CCXT repository from GitHub into a local project directory.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/ccxt/ccxt.git\n```\n\n----------------------------------------\n\nTITLE: Adding Web3 and CryptoJS Dependencies to CCXT Project\nDESCRIPTION: This comment indicates a pending task to add web3 and cryptoJS dependencies to the project. These libraries are likely required for cryptocurrency-related operations within the CCXT framework.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/js/static_dependencies/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// TODO: add web3 and cryptoJS here\n```\n\n----------------------------------------\n\nTITLE: Code Block Formatting Example - Good\nDESCRIPTION: Demonstration of proper code block formatting using triple backticks\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/FAQ.rst#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```GOOD```\n```\n\n----------------------------------------\n\nTITLE: Web3 Integration Note in CCXT Library\nDESCRIPTION: A TODO comment indicating that web3 functionality needs to be added to the CCXT cryptocurrency trading library. Web3 typically refers to libraries that allow direct interaction with blockchain networks.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/ccxt/static_dependencies/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// TODO: add web3\n```\n\n----------------------------------------\n\nTITLE: Adding Web3 Placeholder Comment\nDESCRIPTION: A simple TODO comment indicating the intention to add web3 functionality in this location. Related to the CCXT cryptocurrency trading library context.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/php/static_dependencies/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// TODO: add web3 here\n```\n\n----------------------------------------\n\nTITLE: Installing Web3 Dependency for Windows Users\nDESCRIPTION: Command to install web3 dependency globally with specific permissions for Windows users who are having difficulties with ccxt dependencies.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Install.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g web3 --unsafe-perm=true --allow-root\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo npm install -g web3 --unsafe-perm=true --allow-root\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings in JavaScript\nDESCRIPTION: Examples of incorrect and correct ways to concatenate strings containing control characters in JavaScript. Double quotes should be used for strings with escape sequences.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst a = 'GET' + method.toLowerCase () + '\\n' + path;\nconst b = 'api\\nfoobar.com\\n';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst a = 'GET' + method.toLowerCase () + \"\\n\" + path; // eslint-disable-line quotes\n// eslint-disable-next-line quotes\nconst b = \"api\\nfoobar.com\\n\";\n```\n\n----------------------------------------\n\nTITLE: Incorrect Market Symbol Implementation in JavaScript\nDESCRIPTION: Example showing incorrect implementation of fetchTicker method that directly sends unified symbols to exchange API. This is demonstrated as an anti-pattern that should be avoided.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync fetchTicker (symbol, params = {}) {\n   const request = {\n      'pair': symbol, // very bad, sending unified symbols to the exchange directly\n   };\n   const response = await this.publicGetEndpoint (request);\n   // parse in a unified way...\n}\n```\n\n----------------------------------------\n\nTITLE: Cryptocurrency Donation Addresses for CCXT Project\nDESCRIPTION: Lists cryptocurrency wallet addresses for ETH, BTC, BCH, and LTC donations to support the CCXT project. Each address is specifically designated for its respective cryptocurrency.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/README.md#2025-04-23_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nETH 0x26a3CB49578F07000575405a57888681249c35Fd (ETH only)\nBTC 33RmVRfhK2WZVQR1R83h2e9yXoqRNDvJva\nBCH 1GN9p233TvNcNQFthCgfiHUnj5JRKEc2Ze\nLTC LgM5hkvPzytEFfQGGDFGKYkE743jwUA7qv\n```\n\n----------------------------------------\n\nTITLE: Incorrect Symbol Parsing in JavaScript (Bad Example)\nDESCRIPTION: This example demonstrates improper handling of exchange-specific market IDs by directly using the 'pair' field from the exchange response as a unified symbol, which breaks the library's symbol standardization.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nparseTrade (trade, market = undefined) {\n   // parsing code...\n   return {\n      'info': trade,\n      'symbol': trade['pair'], // very bad, returning exchange-specific market-ids in a unified structure!\n      // other fields...\n   };\n}\n```\n\n----------------------------------------\n\nTITLE: Cryptocurrency Donation Addresses for CCXT Project\nDESCRIPTION: Lists cryptocurrency wallet addresses for making donations to the CCXT project. Includes addresses for Ethereum (ETH), Bitcoin (BTC), Bitcoin Cash (BCH), and Litecoin (LTC).\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/README.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\nETH 0x26a3CB49578F07000575405a57888681249c35Fd (ETH only)\nBTC 33RmVRfhK2WZVQR1R83h2e9yXoqRNDvJva\nBCH 1GN9p233TvNcNQFthCgfiHUnj5JRKEc2Ze\nLTC LgM5hkvPzytEFfQGGDFGKYkE743jwUA7qv\n```\n\n----------------------------------------\n\nTITLE: Cryptocurrency Exchange Reference Table in Markdown\nDESCRIPTION: A markdown formatted table containing cryptocurrency exchange information including logos, names, API versions and documentation links. The table uses image references and hyperlinks to display exchange information in an organized format.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/wiki/Exchange-Markets.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|[![luno](https://user-images.githubusercontent.com/1294454/27766607-8c1a69d8-5ede-11e7-930c-540b5eb9be24.jpg)](https://www.luno.com/invite/44893A) | luno | [luno](https://www.luno.com/invite/44893A) | 1 | [API](https://www.luno.com/en/api) | | |\n|[![lykke](https://user-images.githubusercontent.com/1294454/34487620-3139a7b0-efe6-11e7-90f5-e520cef74451.jpg)](https://www.lykke.com) | lykke | [Lykke](https://www.lykke.com) | 1 | [API](https://hft-api.lykke.com/swagger/ui/) | | |\n```\n\n----------------------------------------\n\nTITLE: Cryptocurrency Wallet Addresses for CCXT Contributions\nDESCRIPTION: Wallet addresses for various cryptocurrencies to accept financial contributions for the CCXT project. Includes addresses for ETH, BTC, BCH, and LTC.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/CONTRIBUTING.md#2025-04-23_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\nETH 0x26a3CB49578F07000575405a57888681249c35Fd (ETH only!)\nBTC 33RmVRfhK2WZVQR1R83h2e9yXoqRNDvJva\nBCH 1GN9p233TvNcNQFthCgfiHUnj5JRKEc2Ze\nLTC LbT8mkAqQBphc4yxLXEDgYDfEax74et3bP\n```\n\n----------------------------------------\n\nTITLE: Exchange API Reference Table in Markdown\nDESCRIPTION: Markdown table containing exchange names, API documentation links, certification levels and CCXT Pro integration status for various cryptocurrency exchanges.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/manual.rst#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| `cex <https://cex.io/r/0/up105393824/0/>`__ | cex | `CEX.IO <https://cex.io/r/0/up105393824/0/>`__ | \\* | `API <https://cex.io/cex-api>`__ | | |\n| `chilebit <https://chilebit.net>`__ | chilebit | `ChileBit <https://chilebit.net>`__ | 1 | `API <https://blinktrade.com/docs>`__ | | |\n| `coinbase <https://www.coinbase.com/join/58cbe25a355148797479dbd2>`__ | coinbase | `Coinbase <https://www.coinbase.com/join/58cbe25a355148797479dbd2>`__ | 2 | `API <https://developers.coinbase.com/api/v2>`__ | | |\n| `coinbaseprime <https://prime.coinbase.com>`__ | coinbaseprime | `Coinbase Prime <https://prime.coinbase.com>`__ | \\* | `API <https://docs.prime.coinbase.com>`__ | | `CCXT Pro <https://ccxt.pro>`__ |\n| `coinbasepro <https://pro.coinbase.com/>`__ | coinbasepro | `Coinbase Pro <https://pro.coinbase.com/>`__ | \\* | `API <https://docs.pro.coinbase.com>`__ | | `CCXT Pro <https://ccxt.pro>`__ |\n| `coincheck <https://coincheck.com>`__ | coincheck | `coincheck <https://coincheck.com>`__ | \\* | `API <https://coincheck.com/documents/exchange/api>`__ | | |\n| `coinegg <https://www.coinegg.com/user/register?invite=523218>`__ | coinegg | `CoinEgg <https://www.coinegg.com/user/register?invite=523218>`__ | \\* | `API <https://www.coinegg.com/explain.api.html>`__ | | |\n| `coinex <https://www.coinex.com/register?refer_code=yw5fz>`__ | coinex | `CoinEx <https://www.coinex.com/register?refer_code=yw5fz>`__ | 1 | `API <https://github.com/coinexcom/coinex_exchange_api/wiki>`__ | | |\n| `coinfalcon <https://coinfalcon.com/?ref=CFJSVGTUPASB>`__ | coinfalcon | `CoinFalcon <https://coinfalcon.com/?ref=CFJSVGTUPASB>`__ | 1 | `API <https://docs.coinfalcon.com>`__ | | |\n| `coinfloor <https://www.coinfloor.co.uk>`__ | coinfloor | `coinfloor <https://www.coinfloor.co.uk>`__ | \\* | `API <https://github.com/coinfloor/api>`__ | | |\n| `coingi <https://www.coingi.com/?r=XTPPMC>`__ | coingi | `Coingi <https://www.coingi.com/?r=XTPPMC>`__ | \\* | `API <https://coingi.docs.apiary.io>`__ | | |\n| `coinmarketcap <https://coinmarketcap.com>`__ | coinmarketcap | `CoinMarketCap <https://coinmarketcap.com>`__ | 1 | `API <https://coinmarketcap.com/api>`__ | | |\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Cryptocurrency Exchanges\nDESCRIPTION: A markdown table listing cryptocurrency exchanges with their logos, names, API versions, and documentation links. It includes information for exchanges like Bleutrade, Braziliex, BTC-Alpha, BtcBox, and others.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/python/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|[![bleutrade](https://user-images.githubusercontent.com/1294454/30303000-b602dbe6-976d-11e7-956d-36c5049c01e7.jpg)](https://bleutrade.com)                                                   | bleutrade          | [Bleutrade](https://bleutrade.com)                                                   | *   | [API](https://app.swaggerhub.com/apis-docs/bleu/white-label/3.0.0)                           |                                                                                                                             |                                                                             |\n|[![braziliex](https://user-images.githubusercontent.com/1294454/34703593-c4498674-f504-11e7-8d14-ff8e44fb78c1.jpg)](https://braziliex.com/?ref=5FE61AB6F6D67DA885BC98BA27223465)             | braziliex          | [Braziliex](https://braziliex.com/?ref=5FE61AB6F6D67DA885BC98BA27223465)             | *   | [API](https://braziliex.com/exchange/api.php)                                                |                                                                                                                             |                                                                             |\n|[![btcalpha](https://user-images.githubusercontent.com/1294454/42625213-dabaa5da-85cf-11e8-8f99-aa8f8f7699f0.jpg)](https://btc-alpha.com/?r=123788)                                          | btcalpha           | [BTC-Alpha](https://btc-alpha.com/?r=123788)                                         | 1   | [API](https://btc-alpha.github.io/api-docs)                                                  |                                                                                                                             |                                                                             |\n|[![btcbox](https://user-images.githubusercontent.com/1294454/31275803-4df755a8-aaa1-11e7-9abb-11ec2fad9f2d.jpg)](https://www.btcbox.co.jp/)                                                  | btcbox             | [BtcBox](https://www.btcbox.co.jp/)                                                  | 1   | [API](https://www.btcbox.co.jp/help/asm)                                                     |                                                                                                                             |                                                                             |\n|[![btcmarkets](https://user-images.githubusercontent.com/1294454/29142911-0e1acfc2-7d5c-11e7-98c4-07d9532b29d7.jpg)](https://btcmarkets.net)                                                 | btcmarkets         | [BTC Markets](https://btcmarkets.net)                                                | *   | [API](https://github.com/BTCMarkets/API)                                                     |                                                                                                                             |                                                                             |\n|[![btctradeim](https://user-images.githubusercontent.com/1294454/36770531-c2142444-1c5b-11e8-91e2-a4d90dc85fe8.jpg)](https://m.baobi.com/invite?inv=1765b2)                                  | btctradeim         | [BtcTrade.im](https://m.baobi.com/invite?inv=1765b2)                                 | *   | [API](https://www.btctrade.im/help.api.html)                                                 |                                                                                                                             |                                                                             |\n|[![btctradeua](https://user-images.githubusercontent.com/1294454/27941483-79fc7350-62d9-11e7-9f61-ac47f28fcd96.jpg)](https://btc-trade.com.ua/registration/22689)                            | btctradeua         | [BTC Trade UA](https://btc-trade.com.ua/registration/22689)                          | *   | [API](https://docs.google.com/document/d/1ocYA0yMy_RXd561sfG3qEPZ80kyll36HUxvCRe5GbhE/edit)  |                                                                                                                             |                                                                             |\n|[![btcturk](https://user-images.githubusercontent.com/1294454/27992709-18e15646-64a3-11e7-9fa2-b0950ec7712f.jpg)](https://www.btcturk.com)                                                   | btcturk            | [BTCTurk](https://www.btcturk.com)                                                   | *   | [API](https://github.com/BTCTrader/broker-api-docs)                                          |                                                                                                                             |                                                                             |\n|[![buda](https://user-images.githubusercontent.com/1294454/47380619-8a029200-d706-11e8-91e0-8a391fe48de3.jpg)](https://www.buda.com)                                                         | buda               | [Buda](https://www.buda.com)                                                         | 2   | [API](https://api.buda.com)                                                                  |                                                                                                                             |                                                                             |\n|[![bw](https://user-images.githubusercontent.com/1294454/69436317-31128c80-0d52-11ea-91d1-eb7bb5818812.jpg)](https://www.bw.com/regGetCommission/N3JuT1R3bWxKTE0)                            | bw                 | [BW](https://www.bw.com/regGetCommission/N3JuT1R3bWxKTE0)                            | 1   | [API](https://github.com/bw-exchange/api_docs_en/wiki)                                       |                                                                                                                             |                                                                             |\n|[![bybit](https://user-images.githubusercontent.com/51840849/76547799-daff5b80-649e-11ea-87fb-3be9bac08954.jpg)](https://www.bybit.com/app/register?ref=X7Prm)                               | bybit              | [Bybit](https://www.bybit.com/app/register?ref=X7Prm)                                | 2   | [API](https://bybit-exchange.github.io/docs/inverse/)                                        |                                                                                                                             |                                                                             |\n|[![bytetrade](https://user-images.githubusercontent.com/1294454/67288762-2f04a600-f4e6-11e9-9fd6-c60641919491.jpg)](https://www.byte-trade.com)                                              | bytetrade          | [ByteTrade](https://www.byte-trade.com)                                              | *   | [API](https://github.com/Bytetrade/bytetrade-official-api-docs/wiki)                         | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) |                                                                             |\n|[![cex](https://user-images.githubusercontent.com/1294454/27766442-8ddc33b0-5ed8-11e7-8b98-f786aef0f3c9.jpg)](https://cex.io/r/0/up105393824/0/)                                             | cex                | [CEX.IO](https://cex.io/r/0/up105393824/0/)                                          | *   | [API](https://cex.io/cex-api)                                                                |                                                                                                                             |                                                                             |\n|[![chilebit](https://user-images.githubusercontent.com/1294454/27991414-1298f0d8-647f-11e7-9c40-d56409266336.jpg)](https://chilebit.net)                                                     | chilebit           | [ChileBit](https://chilebit.net)                                                     | 1   | [API](https://blinktrade.com/docs)                                                           |                                                                                                                             |                                                                             |\n|[![coinbase](https://user-images.githubusercontent.com/1294454/40811661-b6eceae2-653a-11e8-829e-10bfadb078cf.jpg)](https://www.coinbase.com/join/58cbe25a355148797479dbd2)                   | coinbase           | [Coinbase](https://www.coinbase.com/join/58cbe25a355148797479dbd2)                   | 2   | [API](https://developers.coinbase.com/api/v2)                                                |                                                                                                                             |                                                                             |\n|[![coinbaseprime](https://user-images.githubusercontent.com/1294454/44539184-29f26e00-a70c-11e8-868f-e907fc236a7c.jpg)](https://prime.coinbase.com)                                          | coinbaseprime      | [Coinbase Prime](https://prime.coinbase.com)                                         | *   | [API](https://docs.prime.coinbase.com)                                                       |                                                                                                                             | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro)|\n```\n\n----------------------------------------\n\nTITLE: Cryptocurrency Exchange Listing Table in Markdown\nDESCRIPTION: A markdown table containing cryptocurrency exchange information organized by country, including exchange names, API versions, and documentation links. The table uses RST-style formatting with grid layout.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/exchanges-by-country.rst#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| New Zealand            | `anxpro <https://anxpro.com>`__                                                         | anxpro             | `ANXPro <https://anxpro.com>`__                                                         | \\*  | `API <https://anxv2.docs.apiary.io>`__                                                          |\n+------------------------+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+\n| New Zealand            | `independentreserve <https://www.independentreserve.com>`__                             | independentreserve | `Independent Reserve <https://www.independentreserve.com>`__                            | \\*  | `API <https://www.independentreserve.com/API>`__                                                |\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Table of Cryptocurrency Exchanges and API Information\nDESCRIPTION: This markdown snippet creates a table listing cryptocurrency exchanges, their locations, website URLs, API versions, and links to API documentation. It covers exchanges from Hong Kong, Indonesia, Israel, and Japan.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/doc/exchanges-by-country.rst#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Hong Kong              | `mixcoins <https://mixcoins.com>`__                                                     | mixcoins           | `MixCoins <https://mixcoins.com>`__                                                     | 1   | `API <https://mixcoins.com/help/api/>`__                                                        |\n+------------------------+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+\n| Hong Kong              | `tidebit <http://bit.ly/2IX0LrM>`__                                                     | tidebit            | `TideBit <http://bit.ly/2IX0LrM>`__                                                     | 2   | `API <https://www.tidebit.com/documents/api/guide>`__                                           |\n+------------------------+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+\n| Hong Kong              | `bitz <https://u.bitz.com/register?invite_code=1429193>`__                              | bitz               | `Bit-Z <https://u.bitz.com/register?invite_code=1429193>`__                             | 2   | `API <https://apidoc.bitz.com/en/>`__                                                           |\n+------------------------+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+\n| Hong Kong              | `ftx <https://ftx.com/#a=1623029>`__                                                    | ftx                | `FTX <https://ftx.com/#a=1623029>`__                                                    | \\*  | `API <https://github.com/ftexchange/ftx>`__                                                     |\n+------------------------+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+\n| Hong Kong              | `btctradeim <https://m.baobi.com/invite?inv=1765b2>`__                                  | btctradeim         | `BtcTrade.im <https://m.baobi.com/invite?inv=1765b2>`__                                 | \\*  | `API <https://www.btctrade.im/help.api.html>`__                                                 |\n+------------------------+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+\n| Hong Kong              | `coolcoin <https://www.coolcoin.com/user/register?invite_code=bhaega>`__                | coolcoin           | `CoolCoin <https://www.coolcoin.com/user/register?invite_code=bhaega>`__                | \\*  | `API <https://www.coolcoin.com/help.api.html>`__                                                |\n+------------------------+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+\n| Hong Kong              | `anxpro <https://anxpro.com>`__                                                         | anxpro             | `ANXPro <https://anxpro.com>`__                                                         | \\*  | `API <https://anxv2.docs.apiary.io>`__                                                          |\n+------------------------+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+\n| Indonesia              | `coincheck <https://coincheck.com>`__                                                   | coincheck          | `coincheck <https://coincheck.com>`__                                                   | \\*  | `API <https://coincheck.com/documents/exchange/api>`__                                          |\n+------------------------+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+\n| Indonesia              | `indodax <https://indodax.com/ref/testbitcoincoid/1>`__                                 | indodax            | `INDODAX <https://indodax.com/ref/testbitcoincoid/1>`__                                 | 2.0 | `API <https://indodax.com/downloads/BITCOINCOID-API-DOCUMENTATION.pdf>`__                       |\n+------------------------+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+\n| Israel                 | `bit2c <https://bit2c.co.il/Aff/63bfed10-e359-420c-ab5a-ad368dab0baf>`__                | bit2c              | `Bit2C <https://bit2c.co.il/Aff/63bfed10-e359-420c-ab5a-ad368dab0baf>`__                | \\*  | `API <https://www.bit2c.co.il/home/api>`__                                                      |\n+------------------------+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+\n| Japan                  | `btcbox <https://www.btcbox.co.jp/>`__                                                  | btcbox             | `BtcBox <https://www.btcbox.co.jp/>`__                                                  | 1   | `API <https://www.btcbox.co.jp/help/asm>`__                                                     |\n+------------------------+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+\n| Japan                  | `coincheck <https://coincheck.com>`__                                                   | coincheck          | `coincheck <https://coincheck.com>`__                                                   | \\*  | `API <https://coincheck.com/documents/exchange/api>`__                                          |\n+------------------------+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+\n| Japan                  | `fcoinjp <https://www.fcoinjp.com>`__                                                   | fcoinjp            | `FCoinJP <https://www.fcoinjp.com>`__                                                   | 2   | `API <https://developer.fcoin.com>`__                                                           |\n+------------------------+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+\n| Japan                  | `kkex <https://kkex.com>`__                                                             | kkex               | `KKEX <https://kkex.com>`__                                                             | 2   | `API <https://kkex.com/api_wiki/cn/>`__                                                         |\n+------------------------+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+\n| Japan                  | `liquid <https://www.liquid.com?affiliate=SbzC62lt30976>`__                             | liquid             | `Liquid <https://www.liquid.com?affiliate=SbzC62lt30976>`__                             | 2   | `API <https://developers.liquid.com>`__                                                         |\n+------------------------+-----------------------------------------------------------------------------------------+--------------------+-----------------------------------------------------------------------------------------+-----+-------------------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Issue Reproduction Code Template\nDESCRIPTION: Placeholder section for users to provide code that reproduces their issue, with instruction to remove sensitive API keys.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/ISSUE_TEMPLATE.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nREPLACE_THIS_WITH_YOUR_CODE_TO_REPRODUCE_THE_ISSUE_WITHOUT_YOUR_KEYS\n```\n\n----------------------------------------\n\nTITLE: Error Output Template\nDESCRIPTION: Placeholder section for users to provide error messages or exceptions encountered, with instruction to provide text rather than screenshots.\nSOURCE: https://github.com/bitgetlimited/ccxt/blob/master/ISSUE_TEMPLATE.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nREPLACE_THIS_WITH_YOUR_OUTPUT_ERROR_EXCEPTION_IN_TEXT_NO_SCREENSHOTS\n```"
  }
]