[
  {
    "owner": "josephalevin",
    "repo": "fson",
    "content": "TITLE: Parsing JSON with FSON in Fortran\nDESCRIPTION: This code snippet demonstrates how to parse a JSON file using the FSON library in Fortran. It includes using the `fson` module, declaring a `fson_value` pointer, parsing the JSON file with `fson_parse`, printing the parsed data, and cleaning up memory with `fson_destroy`.\nSOURCE: https://github.com/josephalevin/fson/blob/master/readme.md#_snippet_0\n\nLANGUAGE: Fortran\nCODE:\n```\nprogram example1\n\n    ! Typical usage should only require an explicit use of the fson module.\n    ! The other modules will be used privately by fson as required.  \n    use fson\n\n    ! declare a pointer variable.  Always use a pointer with fson_value.\n    type(fson_value), pointer :: value\n\n    ! parse the json file\n    value => fson_parse(\"test1.json\")\n\n    ! print the parsed data to the console\n    call fson_print(value)    \n\n    ! extract data from the parsed value        \n\n    ! clean up\n    call fson_destroy(value)\n\nend program example1\n```\n\n----------------------------------------\n\nTITLE: Extracting Data from JSON with FSON in Fortran\nDESCRIPTION: This code snippet illustrates how to extract data from a parsed JSON object using the `fson_get` subroutine in Fortran. It shows how to access nested values using dot notation and array indices, and how to iterate over JSON arrays using `fson_value_count` and `fson_value_get`.  It requires the `fson` and `fson_value_m` modules.\nSOURCE: https://github.com/josephalevin/fson/blob/master/readme.md#_snippet_1\n\nLANGUAGE: Fortran\nCODE:\n```\nprogram example1\n\n! The fson mudule has the basic parser and lookup \nuse fson\n\n! Functions for accessing data as an array\nuse fson_value_m, only: fson_value_count, fson_value_get\ncharacter(len=1024) :: strval, strval2\ninteger i\n\n! Declare a pointer variables.  Always use a pointer with fson_value.\ntype(fson_value), pointer :: json_data, array, item\n\n! Parse the json file\njson_data => fson_parse(\"test1.json\")\n\n! Get the first and last name and print them\ncall fson_get(json_data, \"name.first\", strval)\ncall fson_get(json_data, \"name.last\",  strval2)\nprint *, \"name.first = \", trim(strval)\nprint *, \"name.last  = \", trim(strval2)\n\n! Use a lookup string to get the first phone number\ncall fson_get(json_data, \"PhoneNumber[1].number\", strval)     \nprint *, \"PhoneNumber[1].number = \", trim(strval)\nprint *, \"\"\n\n! Get the phone numbers as an array\ncall fson_get(json_data, \"PhoneNumber\", array)\n\n! Loop through each array item\ndo i = 1, fson_value_count(array)\n  ! Get the array item (this is an associative array)\n  item => fson_value_get(array, i)\n  \n  ! Lookup the values from the array\n  call fson_get(item, \"type\", strval)\n  call fson_get(item, \"number\", strval2)\n  \n  ! Print out the values\n  print *, \"Phone Number:\"\n  print *, \"type = \", trim(strval), \", number = \", trim(strval2)\nend do\n\n! clean up\ncall fson_destroy(json_data)\n\nend program example1\n```\n\n----------------------------------------\n\nTITLE: Extracting Arrays with FSON in Fortran\nDESCRIPTION: This snippet demonstrates how to extract JSON arrays as Fortran allocatable arrays using `fson_get`. It covers extracting integer and real arrays, and emphasizes the need to specify the string length when extracting character arrays. It requires the `fson` module and proper allocation/deallocation of the Fortran arrays.\nSOURCE: https://github.com/josephalevin/fson/blob/master/readme.md#_snippet_2\n\nLANGUAGE: Fortran\nCODE:\n```\nprogram extract_array\n\n  use fson\n  implicit none\n  type(fson_value), pointer :: data\n  integer, allocatable :: vec(:)\n  real, allocatable :: mat(:,:)\n    \n  data => fson_parse(\"data.json\")\n\n  call fson_get(data, \"v\", vec)\n  call fson_get(data, \"m\", mat)\n  print *, vec\n  print *, mat\n\n  call fson_destroy(data)\n  deallocate(vec, mat)\n\nend program extract_array\n```\n\nLANGUAGE: Fortran\nCODE:\n```\ninteger, parameter :: str_len = 8\ncharacter(len = str_len), allocatable :: m(:)\n\ndata => fson_parse(\"data.json\")\ncall fson_get(data, \"char_array\", m)\n```\n\n----------------------------------------\n\nTITLE: Using FSON in a CMake Project\nDESCRIPTION: This code snippet shows how to integrate FSON into a CMake-managed Fortran project. It uses `find_package` to locate the FSON installation and `target_link_libraries` to link the FSON library to the target executable.\nSOURCE: https://github.com/josephalevin/fson/blob/master/readme.md#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(FSON)\n...\nadd_executable(mytarget\n...\ntarget_link_libraries(mytarget FSON::FSON)\n```\n\n----------------------------------------\n\nTITLE: Adding FSON Library\nDESCRIPTION: Adds the FSON library, specifying source files to include and creating an alias for easier target linking. The library is configured as a SHARED library.\nSOURCE: https://github.com/josephalevin/fson/blob/master/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(FSON SHARED\n    src/fson_string_m.f90\n    src/fson_value_m.f90\n    src/fson_path_m.f90\n    src/fson.f90\n)\n\nadd_library(FSON::FSON ALIAS FSON)\n```\n\n----------------------------------------\n\nTITLE: CMake Minimum Version and Project Setup\nDESCRIPTION: Specifies the minimum required CMake version and sets up the project with versioning and language support (Fortran and C). It also enables RPATH on macOS.\nSOURCE: https://github.com/josephalevin/fson/blob/master/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.6.1)\n\ncmake_policy(SET CMP0048 NEW) # To get package versioning working\nproject(FSON VERSION 1.0.5 LANGUAGES Fortran C)\n\nset(CMAKE_MACOSX_RPATH 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Sets the include directories for the FSON library, distinguishing between public and private include paths using install and build interfaces. This ensures that the include directories are correctly configured for both building and installing the library.\nSOURCE: https://github.com/josephalevin/fson/blob/master/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(FSON_MODULE_DIR \"fson/${CMAKE_Fortran_COMPILER_ID}-${CMAKE_Fortran_COMPILER_VERSION}\")\ntarget_include_directories(FSON\n    PUBLIC\n        $<INSTALL_INTERFACE:include/${FSON_MODULE_DIR}>\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\n    PRIVATE\n        ${CMAKE_CURRENT_SOURCE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing FSON using CMake\nDESCRIPTION: This snippet shows the commands to build and install FSON using CMake. It includes the basic steps of creating a build directory, running CMake, and then using `make` to build and install. It also demonstrates how to enable shared libraries and override the installation prefix using CMake flags.\nSOURCE: https://github.com/josephalevin/fson/blob/master/readme.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir bld\ncd bld\ncmake3 ..\nmake\nmake test # optional unit tests\nmake install\n```\n\nLANGUAGE: Bash\nCODE:\n```\ncmake3 -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_INSTALL_PREFIX=$HOME\n```\n\n----------------------------------------\n\nTITLE: Installation Details\nDESCRIPTION: Includes GNUInstallDirs for standard installation directories and defines the installation path for CMake configuration files. The library is installed to the standard library directory, and the Fortran module files are installed to the appropriate include directory.\nSOURCE: https://github.com/josephalevin/fson/blob/master/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(GNUInstallDirs)\nset(INSTALL_CONFIGDIR ${CMAKE_INSTALL_LIBDIR}/cmake/fson)\n\ninstall(TARGETS FSON\n    EXPORT fson-targets\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n\n# Add the correct module for `use` here.\ninstall(FILES\n    ${CMAKE_CURRENT_BINARY_DIR}/fson.mod\n    ${CMAKE_CURRENT_BINARY_DIR}/fson_path_m.mod\n    ${CMAKE_CURRENT_BINARY_DIR}/fson_value_m.mod\n    ${CMAKE_CURRENT_BINARY_DIR}/fson_string_m.mod\n    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${FSON_MODULE_DIR})\n\ninstall(EXPORT fson-targets\n    FILE\n        FSONTargets.cmake\n    NAMESPACE\n        FSON::\n    DESTINATION\n        ${INSTALL_CONFIGDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Package Configuration\nDESCRIPTION: Includes CMakePackageConfigHelpers to generate package configuration files, sets the version compatibility, and configures the main package configuration file. These files are installed to the CMake configuration directory to allow other projects to find and use the FSON library.\nSOURCE: https://github.com/josephalevin/fson/blob/master/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CMakePackageConfigHelpers)\nwrite_basic_package_version_file(\n    ${CMAKE_CURRENT_BINARY_DIR}/FSONConfigVersion.cmake\n    VERSION ${PROJECT_VERSION}\n    COMPATIBILITY AnyNewerVersion\n)\n\nconfigure_package_config_file(\n    ${CMAKE_CURRENT_LIST_DIR}/cmake/FSONConfig.cmake.in\n    ${CMAKE_CURRENT_BINARY_DIR}/FSONConfig.cmake\n    INSTALL_DESTINATION ${INSTALL_CONFIGDIR}\n)\n\ninstall(FILES\n    ${CMAKE_CURRENT_BINARY_DIR}/FSONConfig.cmake\n    ${CMAKE_CURRENT_BINARY_DIR}/FSONConfigVersion.cmake\n    DESTINATION ${INSTALL_CONFIGDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing FSON using Meson\nDESCRIPTION: This snippet demonstrates how to install FSON using the Meson build system.  It assumes Meson and Ninja are installed and shows the commands to configure, build, test, and install FSON.\nSOURCE: https://github.com/josephalevin/fson/blob/master/readme.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nmeson build\ncd build\nninja\nninja test # optional unit tests\nninja install\n```\n\n----------------------------------------\n\nTITLE: Testing Setup\nDESCRIPTION: Sets up the test routines for FSON. It includes FetchContent to download the zofu testing framework, adds zofu as a library, creates a driver executable for zofu, and defines individual tests using custom commands to generate test drivers. Finally, tests are added to the CTest test runner.\nSOURCE: https://github.com/josephalevin/fson/blob/master/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\noption(FSON_ENABLE_TESTS \"Build and enable unit tests\" ON)\n\nif (FSON_ENABLE_TESTS)\n    include(FetchContent OPTIONAL RESULT_VARIABLE fc_LOADED)\n    if (${fc_LOADED} MATCHES NOTFOUND)\n        include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/FetchContent.cmake)\n    endif()\n    FetchContent_Declare(zofu\n        GIT_REPOSITORY https://github.com/acroucher/zofu.git\n    )\n    FetchContent_GetProperties(zofu)\n    if (NOT zofu_POPULATED)\n        FetchContent_Populate(zofu)\n    endif()\n\n    # Building zofu could be replaced with the proper target if it had a\n    # CMake build.\n    add_library(zofu SHARED\n        ${zofu_SOURCE_DIR}/src/zofu.F90\n        ${zofu_SOURCE_DIR}/src/zofu_kinds.F90\n        ${zofu_SOURCE_DIR}/src/zofu_scan.F90\n        ${zofu_SOURCE_DIR}/src/zofu_str_utils.F90\n    )\n    add_executable(zofu-driver ${zofu_SOURCE_DIR}/src/zofu_driver.F90)\n    target_link_libraries(zofu-driver zofu)\n\n    # Defining each test is a matter of generating the source, building the\n    # executable, and adding the test.\n    enable_testing()\n    foreach(test_name fson_test fson_test2)\n        add_library(${test_name}_lib\n            src/tests/${test_name}_zofu.f90\n        )\n        target_link_libraries(${test_name}_lib FSON::FSON zofu)\n\n        add_custom_command(OUTPUT\n            ${CMAKE_CURRENT_BINARY_DIR}/${test_name}_driver.f90\n            COMMAND ${CMAKE_CURRENT_BINARY_DIR}/zofu-driver\n                ${CMAKE_CURRENT_SOURCE_DIR}/src/tests/${test_name}_zofu.f90\n                ${CMAKE_CURRENT_BINARY_DIR}/${test_name}_driver.f90\n                DEPENDS zofu-driver\n            )\n\n        add_executable(${test_name}\n            ${CMAKE_CURRENT_SOURCE_DIR}/src/tests/${test_name}_zofu.f90\n            ${CMAKE_CURRENT_BINARY_DIR}/${test_name}_driver.f90)\n        target_link_libraries(${test_name} FSON::FSON zofu)\n        add_test(NAME ${test_name} COMMAND ${test_name}\n                 WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/tests)\n    endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Options\nDESCRIPTION: Sets compile options for the FSON library. It disables the \"maybe-uninitialized\" warning for GNU and G95 Fortran compilers.\nSOURCE: https://github.com/josephalevin/fson/blob/master/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_options(FSON\n    PUBLIC\n    PRIVATE\n    $<$<OR:$<STREQUAL:\"${CMAKE_Fortran_COMPILER_ID}\",\"GNU\">,\n           $<STREQUAL:\"${CMAKE_Fortran_COMPILER_ID}\",\"G95\">>:\n        -Wno-maybe-uninitialized\n    >\n)\n```\n\n----------------------------------------\n\nTITLE: Installing FSON using Makefile\nDESCRIPTION: This snippet shows the commands to install FSON using the provided Makefile.  It involves updating variables in the `makefile`, and running `make` and `make install` to build and install the library.\nSOURCE: https://github.com/josephalevin/fson/blob/master/readme.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Exporting for Testing\nDESCRIPTION: Exports the FSON target for use in testing.  The exported target information is written to `FSONTargets.cmake`.\nSOURCE: https://github.com/josephalevin/fson/blob/master/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nexport(EXPORT fson-targets\n    FILE\n        ${CMAKE_CURRENT_BINARY_DIR}/FSONTargets.cmake\n    NAMESPACE\n        FSON::\n)\n```"
  }
]