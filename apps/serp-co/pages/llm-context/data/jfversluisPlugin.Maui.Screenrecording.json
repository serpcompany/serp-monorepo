[
  {
    "owner": "jfversluis",
    "repo": "plugin.maui.screenrecording",
    "content": "TITLE: Initializing ScreenRecording Plugin in MauiProgram.cs\nDESCRIPTION: This snippet shows how to add the ScreenRecording plugin to the MAUI app builder. It includes importing the necessary namespace and calling the UseScreenRecording() method.\nSOURCE: https://github.com/jfversluis/plugin.maui.screenrecording/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Plugin.Maui.ScreenRecording;\n\nvar builder = MauiApp.CreateBuilder();\nbuilder\n    .UseMauiApp<App>()\n    .UseScreenRecording() // This line was added\n    .ConfigureFonts(fonts =>\n    {\n        fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n        fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n    });\n```\n\n----------------------------------------\n\nTITLE: Starting Screen Recording with Custom Options in C#\nDESCRIPTION: This code shows how to start a screen recording with custom ScreenRecordingOptions, including enabling microphone, saving to gallery, and specifying a save path.\nSOURCE: https://github.com/jfversluis/plugin.maui.screenrecording/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nScreenRecordingOptions options = new()\n{\n\tEnableMicrophone = true,\n\tSaveToGallery = true,\n\tSavePath = Path.Combine(Path.GetTempPath(), \"myRecording.mp4\"),\n};\n\nscreenRecording.StartRecording(options);\n```\n\n----------------------------------------\n\nTITLE: Stopping Screen Recording in C#\nDESCRIPTION: This snippet demonstrates how to stop a screen recording and retrieve the resulting ScreenRecordingFile object.\nSOURCE: https://github.com/jfversluis/plugin.maui.screenrecording/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nScreenRecordingFile screenResult = await screenRecording.StopRecording();\n```\n\n----------------------------------------\n\nTITLE: Initializing ScreenRecording Instance in C#\nDESCRIPTION: This snippet demonstrates how to create a variable and retrieve the static instance of the ScreenRecording object in a C# class.\nSOURCE: https://github.com/jfversluis/plugin.maui.screenrecording/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nreadonly IScreenRecording screenRecording;\n\nthis.screenRecording = ScreenRecording.Default;\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for ScreenRecording\nDESCRIPTION: This XML snippet shows the necessary configurations in the AndroidManifest.xml file for Android. It includes service declaration and required permissions for screen recording functionality.\nSOURCE: https://github.com/jfversluis/plugin.maui.screenrecording/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<application>\n\t<service android:name=\"Plugin.Maui.ScreenRecording.ScreenRecordingImplementation.ScreenRecordingService\" android:exported=\"false\" android:foregroundServiceType=\"mediaProjection\" />\n</application>\n\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n<uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" />\n\n<!-- This one is only needed when targeting API 34 and up -->\n<uses-permission android:name=\"android.permission.FOREGROUND_SERVICE_MEDIA_PROJECTION\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS/macOS Info.plist for Photo Library Access\nDESCRIPTION: This XML snippet shows how to declare the NSPhotoLibraryAddUsageDescription permission in the Info.plist file for iOS and macOS. This is required to save recordings to the Photos app.\nSOURCE: https://github.com/jfversluis/plugin.maui.screenrecording/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSPhotoLibraryAddUsageDescription</key>\n<string>We'd like to add the screen recordings to your Photos app!</string>\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in MAUI Project\nDESCRIPTION: This XML snippet shows how to include raw assets in the project's .csproj file for automatic deployment with the application package.\nSOURCE: https://github.com/jfversluis/plugin.maui.screenrecording/blob/main/samples/ScreenRecordingSample/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File Using Essentials FileSystem\nDESCRIPTION: This C# code demonstrates how to asynchronously open and read the contents of a deployed asset file using the FileSystem class from Essentials.\nSOURCE: https://github.com/jfversluis/plugin.maui.screenrecording/blob/main/samples/ScreenRecordingSample/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```"
  }
]