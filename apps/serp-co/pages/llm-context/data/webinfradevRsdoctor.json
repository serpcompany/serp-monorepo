[
  {
    "owner": "web-infra-dev",
    "repo": "rsdoctor",
    "content": "TITLE: Installing Rsdoctor for Rspack Projects\nDESCRIPTION: Command to install Rsdoctor plugin for Rspack or Rsbuild based projects using package manager.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/quick-start.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nadd @rsdoctor/rspack-plugin -D\n```\n\n----------------------------------------\n\nTITLE: Initializing RsdoctorRspackPlugin in Rspack Configuration\nDESCRIPTION: This snippet shows how to register the RsdoctorRspackPlugin in the plugins array of an Rspack configuration file. The plugin is conditionally added based on an environment variable to avoid increasing build time unnecessarily.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/quick-start-shared.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { RsdoctorRspackPlugin } = require('@rsdoctor/rspack-plugin');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    // Only register the plugin when RSDOCTOR is true, as the plugin will increase the build time.\n    process.env.RSDOCTOR &&\n      new RsdoctorRspackPlugin({\n        // plugin options\n      }),\n  ].filter(Boolean),\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing RsdoctorWebpackPlugin in Webpack Configuration\nDESCRIPTION: This code demonstrates how to add the RsdoctorWebpackPlugin to a Webpack configuration file. The plugin is conditionally instantiated based on an environment variable to control when it's active.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/quick-start-shared.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { RsdoctorWebpackPlugin } = require('@rsdoctor/webpack-plugin');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    // Only register the plugin when RSDOCTOR is true, as the plugin will increase the build time.\n    process.env.RSDOCTOR &&\n      new RsdoctorWebpackPlugin({\n        // plugin options\n      }),\n  ].filter(Boolean),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Asset Count Rule in TypeScript\nDESCRIPTION: Example of defining a custom rule to limit asset count using Rsdoctor's defineRule API. The rule checks if the number of assets exceeds a configured limit and reports a warning if the threshold is exceeded.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/rules/rule-custom.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineRule } from '@rsdoctor/core/rules';\n\nexport const AssetsCountLimit = defineRule(() => ({\n  meta: {\n    category: 'bundle',\n    severity: 'Warn',\n    title: 'assets-count-limit',\n    defaultConfig: {\n      limit: 10,\n    },\n  },\n  check({ chunkGraph, report, ruleConfig }) {\n    const assets = chunkGraph.getAssets();\n\n    if (assets.length > ruleConfig.limit) {\n      report({\n        message: 'The count of assets is bigger than limit',\n        detail: {\n          type: 'link',\n          link: 'https://rsdoctor.dev/zh/guide/start/quick-start', // This link just for show case.\n        },\n      });\n    }\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Installing Rsdoctor for Webpack Projects\nDESCRIPTION: Command to install Rsdoctor plugin for Webpack 5+ projects using package manager. Note that Webpack version must be 5 or higher.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/quick-start.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nadd @rsdoctor/webpack-plugin -D\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Asset Count Limit Rule in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a custom rule using the defineRule function from @rsdoctor/core/rules. The rule checks if the number of assets exceeds a specified limit and reports a warning if the limit is exceeded.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/guide/rules/rule-custom.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineRule } from '@rsdoctor/core/rules';\n\nexport const AssetsCountLimit = defineRule(() => ({\n  meta: {\n    category: 'bundle',\n    severity: 'Warn',\n    title: 'assets-count-limit',\n    defaultConfig: {\n      limit: 10,\n    },\n  },\n  check({ chunkGraph, report, ruleConfig }) {\n    const assets = chunkGraph.getAssets();\n\n    if (assets.length > ruleConfig.limit) {\n      report({\n        message: 'The count of assets is bigger than limit',\n        detail: {\n          type: 'link',\n          link: 'https://rsdoctor.dev/zh/guide/start/quick-start', // This link just for show case.\n        },\n      });\n    }\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Duplicate Package Rule in RsDoctor\nDESCRIPTION: Example configuration for the duplicate package detection rule showing how to set severity levels and ignore specific packages.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/rules/rules.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RsdoctorRspackPlugin } from '@rsdoctor/rspack-plugin';\n\nexport default {\n  plugin: [\n    new RsdoctorRspackPlugin({\n      linter: {\n        level: 'Error',\n        extends: [],\n        rules: {\n          'duplicate-package': [\n            'Error',\n            {\n              checkVersion: 'minor',\n              ignore: ['chalk', '@babel/runtime'],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RuleCheckerContext Interface in TypeScript\nDESCRIPTION: Defines the RuleCheckerContext interface which provides context for rule checking, including project configuration, error reporting, and various graphs.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/rules/rule-custom.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RuleCheckerContext<Config> {\n  /** Project root directory */\n  root: string;\n  /** Current rule configuration */\n  ruleConfig: Config;\n  /** Project configuration */\n  configs: ConfigData;\n  /** Build errors */\n  errors: Error[];\n  /** Chunk graph */\n  chunkGraph: ChunkGraph;\n  /** Module graph */\n  moduleGraph: ModuleGraph;\n  /** Package graph */\n  packageGraph: PackageGraph;\n  /** Loader data */\n  loader: LoaderData;\n  /**\n   * Report Error\n   * @param {any} error - error info\n   * @param {any} replacer - Replace the original error\n   */\n  report(error: ReportData, replacer?: any): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RsdoctorWebpackPlugin with CommonJS\nDESCRIPTION: Example code showing how to require and instantiate RsdoctorWebpackPlugin in a CommonJS environment with configuration options.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/config/options/options.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { RsdoctorWebpackPlugin } = require('@rsdoctor/webpack-plugin');\n\nnew RsdoctorWebpackPlugin({\n  /** RsdoctorWebpackPluginOptions */\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring RsdoctorWebpackPlugin in Next.js with Webpack\nDESCRIPTION: This snippet demonstrates how to configure the RsdoctorWebpackPlugin in a Next.js project using Webpack. It sets up the plugin differently for client and server builds, specifying options like output directory.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/quick-start-shared.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next';\nimport { RsdoctorWebpackPlugin } from '@rsdoctor/webpack-plugin';\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  webpack: (config) => {\n    if (config.name === 'client') {\n      config.plugins.push(\n        new RsdoctorWebpackPlugin({\n          disableClientServer: true,\n        }),\n      );\n    } else if (config.name === 'server') {\n      config.plugins.push(\n        new RsdoctorWebpackPlugin({\n          disableClientServer: true,\n          output: {\n            reportDir: './.next/server',\n          },\n        }),\n      );\n    }\n    return config;\n  },\n};\n\nexport default nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining LinkRuleStoreData Interface in TypeScript\nDESCRIPTION: Defines interfaces for rule store data, including base rule data and link-specific rule data.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/rules/rule-custom.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BaseRuleStoreData extends Pick<RuleMessage, 'code' | 'category'> {\n  /**\n   * unique of error\n   */\n  id: number | string;\n  /**\n   * title of alerts\n   */\n  title: string;\n  /**\n   * description of alerts\n   */\n  description?: string;\n  /**\n   * level of error\n   */\n  level: 'warn' | 'error';\n  /**\n   * rule doc link\n   */\n  link?: string;\n}\n\ninterface LinkRuleStoreData extends BaseRuleStoreData {\n  type: 'link';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rsdoctor Plugin with Custom Rule\nDESCRIPTION: Configuration example showing how to integrate a custom rule into the Rsdoctor plugin using the extends field and specifying rule configurations.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/rules/rule-custom.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AssetsCountLimit } from './rules/assets-count-limit';\n\nexport default {\n  tools: {\n    bundlerChain: (chain) => {\n      chain.plugin('Rsdoctor').use(RsdoctorRspackPlugin, [\n        {\n          linter: {\n            level: 'Error',\n            extends: [AssetsCountLimit],\n            rules: {\n              'assets-count-limit': [\n                'on',\n                {\n                  limit: 1, // rule custom configs\n                },\n              ],\n            },\n          },\n        },\n      ]);\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing RsdoctorRspackPlugin with ESM\nDESCRIPTION: Example code showing how to import and instantiate RsdoctorRspackPlugin in an ES module environment with configuration options.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/config/options/options.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RsdoctorRspackPlugin } from '@rsdoctor/rspack-plugin';\n\nnew RsdoctorRspackPlugin({\n  /** RsdoctorRspackPluginOptions */\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @rsdoctor/cli using Package Manager\nDESCRIPTION: Command to install @rsdoctor/cli as a development dependency. The CLI tool should have the same major and minor versions as @rsdoctor/webpack-plugin and @rsdoctor/rspack-plugin.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/cli.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrsdoctor <command> [options]\n```\n\n----------------------------------------\n\nTITLE: Integrating RsdoctorRspackPlugin in Vue Project with Rsbuild\nDESCRIPTION: This code example shows how to integrate the RsdoctorRspackPlugin into a Vue project using Rsbuild. It uses the bundlerChain configuration to add the plugin to the build process.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/quick-start-shared.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@rsbuild/core';\nimport { pluginVue } from '@rsbuild/plugin-vue';\nimport { RsdoctorRspackPlugin } from '@rsdoctor/rspack-plugin';\n\nexport default defineConfig({\n  plugins: [pluginVue()],\n  performance: {\n    buildCache: false,\n  },\n  tools: {\n    bundlerChain: (chain, { CHAIN_ID }) => {\n      chain.plugin('Rsdoctor').use(RsdoctorRspackPlugin, [\n        {\n          // plugin options\n        },\n      ]);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing RsdoctorWebpackPlugin with ESM\nDESCRIPTION: Example code showing how to import and instantiate RsdoctorWebpackPlugin in an ES module environment with configuration options.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/config/options/options.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RsdoctorWebpackPlugin } from '@rsdoctor/webpack-plugin';\n\nnew RsdoctorWebpackPlugin({\n  /** RsdoctorWebpackPluginOptions */\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Resolve Alias in Rspack to Handle Duplicate Dependencies\nDESCRIPTION: This snippet demonstrates how to use the resolve.alias configuration in Rspack or Webpack to specify the resolution path for duplicated packages like lodash, ensuring only one version is included in the bundle.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/topic/duplicate-pkg-problem.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = {\n  //...\n  resolve: {\n    alias: {\n      lodash: path.resolve(__dirname, 'node_modules/lodash'),\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Rsdoctor Plugin with Custom Rule in TypeScript\nDESCRIPTION: This snippet shows how to configure the Rsdoctor plugin in a Rsbuild configuration file. It demonstrates importing a custom rule and applying it to the Rsdoctor plugin with specific settings.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/guide/rules/rule-custom.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AssetsCountLimit } from './rules/assets-count-limit';\n\nexport default {\n  tools: {\n    bundlerChain: (chain) => {\n      chain.plugin('Rsdoctor').use(RsdoctorRspackPlugin, [\n        {\n          linter: {\n            level: 'Error',\n            extends: [AssetsCountLimit],\n            rules: {\n              'assets-count-limit': [\n                'on',\n                {\n                  limit: 1, // rule custom configs\n                },\n              ],\n            },\n          },\n        },\n      ]);\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Rule Template\nDESCRIPTION: Template showing the basic structure for defining a custom rule using defineRule with meta configuration and check function.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/rules/rule-custom.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineRule } from '@rsdoctor/core/rules';\n\nconst ruleTitle = 'check-rule';\nconst ruleConfig = {\n  // some rule configs\n};\n\nexport const CheckRule = defineRule<typeof ruleTitle, config>(() => ({\n  meta: {\n    category: 'bundle', // rule category\n    severity: 'Warn', // rule severity\n    title: ruleTitle, // rule title\n    defaultConfig: {\n      // rule default config\n    },\n  },\n  check(ruleContext) {\n    // rule check...\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Reporting Code Position in TypeScript\nDESCRIPTION: Demonstrates how to report code positions, handling both transformed and source code, using SourceMap for conversion when available.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/rules/rule-custom.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst module: SDK.ModuleInstance;\nconst node: Node.ImportDeclaration;\n/** The default type is optional, but in reality, they all have values */\nconst transformedRange = node.loc!;\n/** If the module's SourceMap is not available, this value is null */\nconst sourceRange = module.getSourceRange(transformedRange);\n/** Get the code */\nconst source = mod.getSource();\n\n// Determine which value to use based on whether the original position is generated\nconst range = (sourceRange ?? transformed) as Linter.Range;\nconst content = sourceRange ? source.source : source.transformed;\n\nreport({\n  document: {\n    path: module.path,\n    content,\n    range,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Rules Configuration Example\nDESCRIPTION: Example showing how to disable specific rules in the RsDoctor configuration.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/rules/rules.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RsdoctorRspackPlugin } from '@rsdoctor/rspack-plugin';\n\nexport default {\n  plugin: [\n    new RsdoctorRspackPlugin({\n      linter: {\n        level: 'Error',\n        extends: [],\n        rules: {\n          'duplicate-package': 'off',\n        },\n      },\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Compilation Hook Implementation\nDESCRIPTION: Implementation of various compilation hooks including beforeCompile, afterCompile, and done hooks\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/usage/compile-overall.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ncompiler.hooks.beforeCompile\ncompiler.hooks.afterCompile\ncompiler.hooks.done\n```\n\n----------------------------------------\n\nTITLE: Configuring RsdoctorRspackPlugin in Lite Mode\nDESCRIPTION: Example demonstrating how to configure RsdoctorRspackPlugin in lite mode to avoid memory issues while enabling specific features like loader timing analysis, plugin analysis, and bundle analysis.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/more/faq.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { RsdoctorRspackPlugin } = require('@rsdoctor/rspack-plugin');\n\n// adding the plugin to your configuration\nmodule.exports = {\n  // ...\n  plugins: [\n    new RsdoctorRspackPlugin({\n      disableClientServer: false,\n      features: ['lite', 'loader', 'plugins', 'bundle'],\n    }),\n  ].filter(Boolean),\n};\n```\n\n----------------------------------------\n\nTITLE: Resolving Duplicate React Versions in pnpm Workspace with Rspack\nDESCRIPTION: This configuration for Rspack resolves duplicate React versions in a pnpm workspace by aliasing all React imports to a specific version, ensuring only one version is included in the final build.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/blog/topic/duplicate-pkg-problem.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// apps/web/rspack.config.js\nconst path = require('path');\n\nmodule.exports = {\n  //...\n  resolve: {\n    alias: {\n      react: path.dirname(require.resolve('react/package.json')),\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing RsdoctorRspackPlugin with CommonJS\nDESCRIPTION: Example code showing how to require and instantiate RsdoctorRspackPlugin in a CommonJS environment with configuration options.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/config/options/options.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { RsdoctorRspackPlugin } = require('@rsdoctor/rspack-plugin');\n\nnew RsdoctorRspackPlugin({\n  /** RsdoctorRspackPluginOptions */\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Features in RsdoctorRspackPlugin\nDESCRIPTION: Example showing how to configure the RsdoctorRspackPlugin to enable only specific features like bundle size analysis. This allows more targeted usage of Rsdoctor functionality.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/more/faq.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RsdoctorRspackPlugin } from '@rsdoctor/rspack-plugin';\n\nnew RsdoctorRspackPlugin({\n  features: ['bundle'], // Represents enabling only the bundle size analysis feature\n});\n```\n\n----------------------------------------\n\nTITLE: ECMA Version Check Configuration\nDESCRIPTION: Configuration example for ECMA version checking rule with options for version and browser targets.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/rules/rules.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RsdoctorRspackPlugin } from '@rsdoctor/rspack-plugin';\n\nexport default {\n  plugin: [\n    new RsdoctorRspackPlugin({\n      linter: {\n        rules: {\n          'ecma-version-check': [\n            'Warn',\n            {\n              ecmaVersion: 2015,\n              // targets: [\"chrome >= 53\"],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ECMA Version Checking Rule in Rsdoctor\nDESCRIPTION: Example configuration for the ECMA version checking rule in Rsdoctor, which detects incompatible advanced syntax by specifying the target ECMA version to enforce.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/release/release-note-1_0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew RsdoctorRspackPlugin({\n  linter: {\n    rules: {\n      'ecma-version-check': [\n        'Warn',\n        {\n          ecmaVersion: 2015,\n        },\n      ],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Report Code Type\nDESCRIPTION: Example showing how to configure the output analysis data to exclude module source code for optimized output size.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/config/options/options.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnew RsdoctorRspackPlugin({\n  reportCodeType: { noModuleSource: true } // { noAssetsAndModuleSource: true }\n}),\n```\n\n----------------------------------------\n\nTITLE: Linter Configuration Type Definitions\nDESCRIPTION: Core type definitions for the linter configuration including rules, severity levels, and rule configuration format.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/rules/rules.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/** Linter options */\ninterface Options {\n  rules?: RulesMap;\n  level?: SeverityString;\n  extends?: ExtendRuleData[];\n}\n\n/**\n * Linting level\n *   - `'Warn'` runs only rules categorized as `'Warn'`\n *   - `'Error'` runs all rules\n */\ntype SeverityString = 'Warn' | 'Error';\n\n/** Rule level */\ntype SeverityInput = SeverityString | 'off' | 'on';\n\n/** Rule configuration */\ntype RulesMap = Record<string, RuleConfigItem>;\n\n/** Single rule configuration */\ntype RuleConfigItem =\n  // Only error level, this level has higher priority than the rule's own configuration\n  | SeverityInput\n  // In the case of an array, the first item is the error level, and the second item is the rule configuration\n  | [SeverityInput, unknown];\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Plugin in Rsdoctor Configuration\nDESCRIPTION: Configuration example showing how to enable the native plugin for Rsdoctor to improve analysis performance by using Rust-based processing, reducing analysis time by over 20%.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/release/release-note-1_0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew RsdoctorRspackPlugin({\n  experiments: {\n    enableNativePlugin: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Rsdoctor Analyze Command\nDESCRIPTION: The analyze command loads a manifest.json file and starts Rsdoctor's analysis report page without requiring a rebuild.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/cli.mdx#2025-04-21_snippet_1\n\nLANGUAGE: linux\nCODE:\n```\nrsdoctor analyze --profile <manifestFile>\n```\n\n----------------------------------------\n\nTITLE: Defining RsdoctorWebpackPluginFeatures Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the features configuration of RsdoctorWebpackPlugin. It specifies the available feature flags and their types.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/config/options/options-shared.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RsdoctorWebpackPluginFeatures {\n  loader?: boolean;\n  plugins?: boolean;\n  bundle?: boolean;\n  resolver?: boolean;\n  lite?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Rsdoctor CLI in ESM\nDESCRIPTION: Example of importing the execute function from @rsdoctor/cli in an ES Modules environment.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/cli.mdx#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { execute } from '@rsdoctor/cli';\n```\n\n----------------------------------------\n\nTITLE: Integrating RsdoctorRspackPlugin in Modern.js Configuration\nDESCRIPTION: This snippet illustrates how to integrate the RsdoctorRspackPlugin into a Modern.js project configuration. It uses the tools.rspack option to append the plugin when a specific environment variable is set.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/quick-start-shared.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RsdoctorRspackPlugin } from '@rsdoctor/rspack-plugin';\n\nexport default {\n  // ...\n  tools: {\n    rspack(config, { appendPlugins }) {\n      // Only register the plugin when RSDOCTOR is true, as the plugin will increase the build time.\n      if (process.env.RSDOCTOR) {\n        appendPlugins(\n          new RsdoctorRspackPlugin({\n            // plugin options\n          }),\n        );\n      }\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RsdoctorRspackPluginFeatures Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the features configuration of RsdoctorRspackPlugin. It specifies the available feature flags and their types for Rspack.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/config/options/options-shared.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RsdoctorRspackPluginFeatures {\n  loader?: boolean;\n  plugins?: boolean;\n  bundle?: boolean;\n  lite?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Rsdoctor CLI in CommonJS\nDESCRIPTION: How to import the execute function from @rsdoctor/cli in CommonJS format.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/guide/start/cli.mdx#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst { execute } = require('@rsdoctor/cli');\n```\n\n----------------------------------------\n\nTITLE: Defining RsdoctorRspackPluginFeatures Interface in TypeScript\nDESCRIPTION: Interface that specifies configuration options for the Rsdoctor Rspack plugin. It includes boolean flags to control analysis of loaders, plugins, bundle output, and a deprecated lite mode option.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/shared/features-rspack.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RsdoctorRspackPluginFeatures {\n  /**\n   * turn off it if you need not to analyze the executions of webpack loaders.\n   * @default true\n   */\n  loader?: boolean;\n  /**\n   * turn off it if you need not to analyze the executions of webpack plugins.\n   * @default true\n   */\n  plugins?: boolean;\n  /**\n   * turn off it if you need not to analyze the output bundle.\n   * @default true\n   */\n  bundle?: boolean;\n  /**\n   * turn on it if you just use lite mode. This mode do not have source codes.\n   * @default false\n   * @deprecated\n   */\n  lite?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cross-Compatible Test Cases in Rsdoctor\nDESCRIPTION: Example of how to create test cases that will run in both webpack and Rspack environments. It shows the basic structure of a Playwright test that will be executed across both bundler types.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/e2e/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect, test } from '@playwright/test';\n// will passed in webpack, and rspack\ntest('test 1 + 1', () => {\n  expect(1 + 1).toBe(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring RsdoctorRspackPlugin in Next.js with Rspack\nDESCRIPTION: This code shows how to set up the RsdoctorRspackPlugin in a Next.js project using Rspack. It configures the plugin differently for client and server builds, adjusting options like output directory.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/quick-start-shared.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from 'next';\nimport { RsdoctorRspackPlugin } from '@rsdoctor/rspack-plugin';\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  webpack: (config) => {\n    if (config.name === 'client') {\n      config.plugins.push(\n        new RsdoctorRspackPlugin({\n          disableClientServer: true,\n        }),\n      );\n    } else if (config.name === 'server') {\n      config.plugins.push(\n        new RsdoctorRspackPlugin({\n          disableClientServer: true,\n          output: {\n            reportDir: './.next/server',\n          },\n        }),\n      );\n    }\n    return config;\n  },\n};\n\nexport default nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Enabling BannerPlugin Support in Rsdoctor Configuration\nDESCRIPTION: This code demonstrates how to explicitly enable BannerPlugin support in Rsdoctor through the supports.banner configuration option. This is necessary when BannerPlugin isn't detected automatically in your webpack or Rspack configuration.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/usage/bundle-size.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew RsdoctorRspackPlugin({\n  supports: {\n    banner: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests in Rsdoctor\nDESCRIPTION: Bash commands for setting up and running e2e tests in the Rsdoctor project. The first command installs the Chromium browser for Playwright, and the second command runs all test cases across both Rspack and webpack environments.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/e2e/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install playwright browser\nnpx playwright install chromium\n\n# Run all test cases, including Rspack and webpack\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: Enabling Resolver Analysis in Rsdoctor Webpack Plugin\nDESCRIPTION: This code snippet shows how to enable the Resolver analysis feature in the Rsdoctor Webpack plugin configuration. The 'resolver' feature is added to the features array in the plugin options.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/usage/resolver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew rsdoctorWebpackPlugin({\n  features: [\n    'resolver',\n    // ...other features\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining RsdoctorWebpackPluginFeatures Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines configuration options for the Rsdoctor Webpack plugin. It includes boolean flags for enabling or disabling analysis of loaders, plugins, resolver, and bundle output. It also has a deprecated 'lite' mode option.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/shared/features.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RsdoctorWebpackPluginFeatures {\n  /**\n   * turn off it if you need not to analyze the executions of webpack loaders.\n   * @default true\n   */\n  loader?: boolean;\n  /**\n   * turn off it if you need not to analyze the executions of webpack plugins.\n   * @default true\n   */\n  plugins?: boolean;\n  /**\n   * turn off it if you need not to analyze the executions of resolver.\n   * @default false\n   */\n  resolver?: boolean;\n  /**\n   * turn off it if you need not to analyze the output bundle.\n   * @default true\n   */\n  bundle?: boolean;\n  /**\n   * turn on it if you just use lite mode. This mode do not have source codes.\n   * @default false\n   * @deprecated\n   */\n  lite?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rsdoctor Brief Mode in Rspack\nDESCRIPTION: Configuration example showing how to enable brief mode in Rsdoctor using the RsdoctorRspackPlugin. Brief mode generates a single HTML report file for simplified build analysis viewing.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/cicd.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { RsdoctorRspackPlugin } = require('@rsdoctor/rspack-plugin');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    process.env.RSDOCTOR &&\n      new RsdoctorRspackPlugin({\n        // other options\n        mode: 'brief',\n      }),\n  ].filter(Boolean),\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Resolver Analysis in Rsdoctor Rspack Plugin\nDESCRIPTION: This code snippet demonstrates how to enable the Resolver analysis feature in the Rsdoctor Rspack plugin configuration. The 'resolver' feature is added to the features array in the plugin options.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/guide/usage/resolver.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew rsdoctorRspackPlugin({\n  features: [\n    'resolver',\n    // ...other features\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining RsdoctorRspackPluginFeatures Interface in TypeScript\nDESCRIPTION: TypeScript interface that specifies configuration options for the Rsdoctor Rspack plugin. It allows toggling analysis of loader executions, plugin executions, and bundle output. It also includes a deprecated 'lite' mode option that disables source code analysis.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/shared/features-rspack.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RsdoctorRspackPluginFeatures {\n  /**\n   * turn off it if you need not to analyze the executions of webpack loaders.\n   * @default true\n   */\n  loader?: boolean;\n  /**\n   * turn off it if you need not to analyze the executions of webpack plugins.\n   * @default true\n   */\n  plugins?: boolean;\n  /**\n   * turn off it if you need not to analyze the output bundle.\n   * @default true\n   */\n  bundle?: boolean;\n  /**\n   * turn on it if you just use lite mode. This mode do not have source codes.\n   * @default false\n   * @deprecated\n   */\n  lite?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rsdoctor Brief Mode in Rspack\nDESCRIPTION: This snippet demonstrates how to configure RsdoctorRspackPlugin with Brief mode in an Rspack configuration file. The plugin is conditionally activated based on an environment variable to avoid unnecessary build time overhead in non-diagnostic environments.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/guide/start/cicd.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { RsdoctorRspackPlugin } = require('@rsdoctor/rspack-plugin');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    // 仅在 RSDOCTOR 为 true 时注册插件，因为插件会增加构建耗时\n    process.env.RSDOCTOR &&\n      new RsdoctorRspackPlugin({\n        // 其他插件选项\n        mode: 'brief',\n      }),\n  ].filter(Boolean),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RsdoctorWebpackPlugin Features Interface in TypeScript\nDESCRIPTION: Interface defining configuration options for the Rsdoctor Webpack plugin. Controls which analysis features are enabled/disabled including loader execution analysis, plugin execution analysis, resolver analysis, and bundle output analysis. Also includes a deprecated lite mode option.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/shared/features.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RsdoctorWebpackPluginFeatures {\n  /**\n   * turn off it if you need not to analyze the executions of webpack loaders.\n   * @default true\n   */\n  loader?: boolean;\n  /**\n   * turn off it if you need not to analyze the executions of webpack plugins.\n   * @default true\n   */\n  plugins?: boolean;\n  /**\n   * turn off it if you need not to analyze the executions of resolver.\n   * @default false\n   */\n  resolver?: boolean;\n  /**\n   * turn off it if you need not to analyze the output bundle.\n   * @default true\n   */\n  bundle?: boolean;\n  /**\n   * turn on it if you just use lite mode. This mode do not have source codes.\n   * @default false\n   * @deprecated\n   */\n  lite?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Plugin in Rspack\nDESCRIPTION: Example showing how to enable the Rspack native plugin integration for improved build analysis efficiency and reduced analysis time.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/config/options/options.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew RsdoctorRspackPlugin({\n  experiments: { enableNativePlugin: true }\n}),\n```\n\n----------------------------------------\n\nTITLE: Running Rsdoctor Analysis via CLI\nDESCRIPTION: Command to analyze a Rsdoctor manifest file using the CLI tool. The command requires specifying the path to the manifest.json file as a parameter.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/cli/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @rsdoctor/cli analyze --profile [.rsdoctor/manifest.json filepath]\n```\n\n----------------------------------------\n\nTITLE: BriefConfig TypeScript Interface\nDESCRIPTION: TypeScript interface defining the configuration options for Brief mode, including report HTML name and data JSON output options.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/config/options/options.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BriefConfig {\n  reportHtmlName?: string | undefined;\n  writeDataJson: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Rsdoctor Bundle-Diff Command\nDESCRIPTION: The bundle-diff command loads two manifest.json files and opens the Bundle Diff page to compare build results.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/cli.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrsdoctor bundle-diff --baseline <baselineManifestJsonPath> --current <currentManifestJsonPath>\n```\n\n----------------------------------------\n\nTITLE: Building All Packages with pnpm in Bash\nDESCRIPTION: This command builds all packages in the project using pnpm.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Upload Rule in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom rule for uploading data in Rsdoctor. It defines a rule that collects and uploads bundle data without reporting errors, using the defineRule function from the Rsdoctor core.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/rules/upload-data.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/rules/upload-data.ts\nimport { defineRule } from '@rsdoctor/core/rules';\n\nexport const UploadData = defineRule(() => ({\n  meta: {\n    category: 'bundle',\n    severity: 'Warn',\n    title: 'upload-data',\n    defaultConfig: {\n      limit: 10,\n    },\n  },\n  check({ chunkGraph, moduleGraph, ruleConfig }) {\n    // upload some data\n    Upload({ chunkGraph, moduleGraph });\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Using the Analyze Command with Rsdoctor CLI\nDESCRIPTION: Command to load a manifest.json file and start the Rsdoctor analysis report page without rebuilding.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/guide/start/cli.mdx#2025-04-21_snippet_2\n\nLANGUAGE: linux\nCODE:\n```\nrsdoctor analyze --profile <manifestFile>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm in Bash\nDESCRIPTION: This command installs all project dependencies using pnpm.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Analyze Command Example with Rsdoctor CLI\nDESCRIPTION: Example of using the analyze command with a specific manifest.json file path.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/guide/start/cli.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrsdoctor analyze --profile \"./dist/.rsdoctor/manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with pnpm in Bash\nDESCRIPTION: This command runs the end-to-end (E2E) tests for the project using pnpm.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/CONTRIBUTING.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm run e2e\n```\n\n----------------------------------------\n\nTITLE: Integrating Upload Rule in Rsbuild Configuration\nDESCRIPTION: This snippet shows how to configure Rsbuild to use the custom upload rule. It imports the UploadData rule and adds it to the Rsdoctor Rspack plugin configuration, setting the linting level to 'Warn'.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/rules/upload-data.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// rsbuild.config.ts\nimport { UploadData } from './rules/upload-data';\n\nexport default {\n  tools: {\n    bundlerChain: (chain) => {\n      chain.plugin('Rsdoctor').use(RsdoctorRspackPlugin, [\n        {\n          linter: {\n            level: 'Warn',\n            extends: [UploadData],\n          },\n        },\n      ]);\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Bundle-Diff Command Example with Rsdoctor CLI\nDESCRIPTION: Example of using the bundle-diff command to compare baseline and current manifest files.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/guide/start/cli.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrsdoctor bundle-diff --baseline=\"baseline/.rsdoctor/manifest.json\" --current=\"current/.rsdoctor/manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Running Linter with pnpm in Bash\nDESCRIPTION: This command runs the Biome linter on the project codebase using pnpm.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/CONTRIBUTING.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Importing Rsdoctor CLI in ESM\nDESCRIPTION: How to import the execute function from @rsdoctor/cli in ESM format.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/guide/start/cli.mdx#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { execute } from '@rsdoctor/cli';\n```\n\n----------------------------------------\n\nTITLE: Running Rsdoctor Analysis in Bash\nDESCRIPTION: This command runs the Rsdoctor analysis build in an example project.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/CONTRIBUTING.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build:analysis\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Extension Rule in TypeScript for Rsdoctor\nDESCRIPTION: This snippet demonstrates how to create a custom extension rule for Rsdoctor. It defines an 'AssetsCountLimit' rule that checks if the number of assets exceeds a specified limit. The rule uses the defineRule function from @rsdoctor/core/rules and includes metadata and a check function.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/release/release-note-0_3.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/rules/assets-count-limit.ts\nimport { defineRule } from '@rsdoctor/core/rules';\n\nexport const AssetsCountLimit = defineRule(() => ({\n  meta: {\n    category: 'bundle',\n    severity: 'Warn',\n    title: 'assets-count-limit',\n    defaultConfig: {\n      limit: 10,\n    },\n  },\n  check({ chunkGraph, report, ruleConfig }) {\n    const assets = chunkGraph.getAssets();\n\n    if (assets.length > ruleConfig.limit) {\n      report({\n        message: 'The count of assets is bigger than limit',\n        detail: {\n          type: 'link',\n          link: 'https://rsdoctor.dev/zh/guide/start/quick-start', // This link just for show case.\n        },\n      });\n    }\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Executing Analyze Command via Node.js API\nDESCRIPTION: Example of using the execute function to run the analyze command programmatically with the ability to stop the server when needed.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/guide/start/cli.mdx#2025-04-21_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nexecute('analyze', {\n  profile: 'input the manifest.json path or url',\n}).then((sdk) => {\n  console.log('execute \"analyze\" command success');\n  // you can stop the Rsdoctor's dev-server by calling the sdk'api below:\n  // sdk.dispose();\n});\n```\n\n----------------------------------------\n\nTITLE: Measuring Bootstrap Duration with NodeJS\nDESCRIPTION: Uses process.uptime() to measure the duration from project startup to before compilation starts\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/usage/compile-overall.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nprocess.uptime()\n```\n\n----------------------------------------\n\nTITLE: Defining ReportData and ReportDocument Interfaces in TypeScript\nDESCRIPTION: Defines interfaces for error reporting data and document information, including error messages, file data, and diagnostic suggestions.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/rules/rule-custom.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReportData {\n  /** Error message */\n  message: string;\n  /** File data */\n  document?: ReportDocument;\n  /** Diagnostic suggestions */\n  suggestions?: Suggestion;\n  /**\n   * Detailed information\n   *   - Mainly provides additional data for the frontend\n   */\n  detail?: any;\n}\n\n/** Error file information */\ninterface ReportDocument {\n  /** file path */\n  path: string;\n  /**  Is it a transformed code */\n  isTransformed?: boolean;\n  /** code content */\n  content: string;\n  range: Range;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Compilation Analysis Features\nDESCRIPTION: Table detailing the compilation analysis features including compilation overview, alerts, loader analysis, plugins analysis, and resolver analysis.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/features.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Feature                                           | Description                                                                                                                  | Related Links                                                            |\n| ------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ |\n| Compilation Overview                              | View data information about the current project's compilation process                                                        | [Compile Overall](../usage/compile-overall)                              |\n| Compilation Alert                                 | The ability to perform detection based on compilation data                                                                   | [Compilation Alert](../usage/compile-alerts)                             |\n| Loader Compilation Behavior Analysis              | Loader analysis data in directory and file dimensions, displaying the compilation behavior of a single file at the same time | [Loaders Analysis](../usage/loaders-analysis)                            |\n| Loader Time Consumption Analysis                  | Execution sequence diagram of all Loaders in the current project                                                             | [Loaders Timeline](../usage/loaders-timeline)                            |\n| Plugins Analysis                                  | Data analysis of the plugins used in the project                                                                             | [Plugins Analysis](../usage/plugins-analysis)                            |\n| Resolver Analysis                                 | Analysis data on Resolver parsing capabilities                                                                               | [Resolver Analysis](../usage/resolver)                                   |\n| Loader Time Consumption Analysis and Optimization | This document describes how to use Rsdoctor to analyze and optimize build time consumption                                   | [Loader Analysis and Optimization](../../blog/topic/loader-optimization) |\n```\n\n----------------------------------------\n\nTITLE: Using Execute Function with Analyze Command\nDESCRIPTION: Example of using the execute function to run the analyze command programmatically with Node.js API. The function returns a promise with an SDK that can be used to manage the Rsdoctor dev server.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/cli.mdx#2025-04-21_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nexecute('analyze', {\n  profile: 'input the manifest.json path or url',\n}).then((sdk) => {\n  console.log('execute \"analyze\" command success');\n  // you can stop the Rsdoctor's dev-server by calling the sdk'api below:\n  // sdk.dispose();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Alias for Resolving Duplicate Axios in pnpm Workspace\nDESCRIPTION: This code snippet shows how to resolve duplicate instances of the same axios version by configuring a specific alias in the Rspack configuration to use only one path for resolution.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/topic/duplicate-pkg-problem.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// apps/web/rspack.config.js\nalias: {\n  'axios': path.resolve(__dirname, 'node_modules/axios')\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Home Page Layout in YAML for Rsdoctor Website\nDESCRIPTION: YAML configuration that defines the structure of a website home page, including hero section with actions and an image, plus six feature blocks that highlight the platform's capabilities. This declarative approach allows easy editing of the page content without changing the underlying code.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/examples/rspress-minimal/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\npageType: home\n\nhero:\n  name: My Site\n  text: A cool website!\n  tagline: This is the tagline\n  actions:\n    - theme: brand\n      text: Quick Start\n      link: /guide/\n    - theme: alt\n      text: GitHub\n      link: https://github.com/web-infra-dev/rspress\n  image:\n    src: /rspress-icon.png\n    alt: Logo\nfeatures:\n  - title: Blazing fast build speed\n    details: The core compilation module is based on the Rust front-end toolchain, providing a more ultimate development experience.\n    icon: 🏃🏻‍♀️\n  - title: Support for MDX content writing\n    details: MDX is a powerful way to write content, allowing you to use React components in Markdown.\n    icon: 📦\n  - title: Built-in full-text search\n    details: Automatically generates a full-text search index for you during construction, providing out-of-the-box full-text search capabilities.\n    icon: 🎨\n  - title: Simpler I18n solution\n    details: With the built-in I18n solution, you can easily provide multi-language support for documents or components.\n    icon: 🌍\n  - title: Static site generation\n    details: In production, it automatically builds into static HTML files, which can be easily deployed anywhere.\n    icon: 🌈\n  - title: Providing multiple custom capabilities\n    details: Through its extension mechanism, you can easily extend theme UI and build process.\n    icon: 🔥\n---\n```\n\n----------------------------------------\n\nTITLE: Resolving Duplicate Axios in pnpm Workspace with Rspack\nDESCRIPTION: This Rspack configuration addresses duplicate Axios packages in a pnpm workspace by aliasing all Axios imports to a specific path, ensuring only one version is used across the project.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/blog/topic/duplicate-pkg-problem.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// apps/web/rspack.config.js\nalias: {\n  'axios': path.resolve(__dirname, 'node_modules/axios')\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Code Wrapping in Rspress\nDESCRIPTION: Demonstrates how to enable automatic code wrapping for long lines in code blocks using the Rspress config file.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/examples/rspress-minimal/docs/guide/index.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  markdown: {\n    defaultWrapCode: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Rsdoctor Plugin Features Type\nDESCRIPTION: Type definition showing the available feature flags for the Rsdoctor plugin configuration. Includes options for loader, plugins, bundle, resolver, and lite mode analysis.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/config/options/options-shared.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RsdoctorPluginFeatures {\n  loader?: boolean;\n  plugins?: boolean;\n  bundle?: boolean;\n  resolver?: boolean;\n  lite?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Asset Optimization Hooks\nDESCRIPTION: Hooks used for asset optimization and minification during compilation\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/usage/compile-overall.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ncompilation.hooks.optimizeChunkAssets\ncompilation.hooks.processAssets\n```\n\n----------------------------------------\n\nTITLE: Custom Containers in Markdown\nDESCRIPTION: Illustrates the syntax for creating various types of custom containers in Markdown.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/examples/rspress-minimal/docs/guide/index.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n:::tip\nThis is a `block` of type `tip`\n:::\n\n:::info\nThis is a `block` of type `info`\n:::\n\n:::warning\nThis is a `block` of type `warning`\n:::\n\n:::danger\nThis is a `block` of type `danger`\n:::\n\n::: details\nThis is a `block` of type `details`\n:::\n\n:::tip Custom Title\nThis is a `block` of `Custom Title`\n:::\n\n:::tip{title=\"Custom Title\"}\nThis is a `block` of `Custom Title`\n:::\n```\n\n----------------------------------------\n\nTITLE: Hook Event Tap Implementation\nDESCRIPTION: Reference to the tap method used for hooking into compilation events\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/usage/compile-overall.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n.tap\n```\n\n----------------------------------------\n\nTITLE: Using React Components in MDX Files\nDESCRIPTION: Shows how to import and use a React component within an MDX file.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/examples/rspress-minimal/docs/guide/index.md#2025-04-21_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n// docs/index.mdx\nimport { CustomComponent } from './custom';\n\n# Hello world\n\n<CustomComponent />\n```\n\n----------------------------------------\n\nTITLE: Resolving Duplicate React in pnpm-workspace Using Rspack Alias\nDESCRIPTION: This configuration shows how to resolve the issue of duplicate React versions in a pnpm workspace by configuring Rspack's resolve.alias to use only one version of React throughout the project.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/topic/duplicate-pkg-problem.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// apps/web/rspack.config.js\nconst path = require('path');\n\nmodule.exports = {\n  //...\n  resolve: {\n    alias: {\n      react: path.dirname(require.resolve('react/package.json')),\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Bundle Analysis Features\nDESCRIPTION: Table listing bundle analysis features including bundle overview, alerts, analysis, module dependencies, and optimization capabilities.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/features.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Feature                         | Description                                                                                                                                            | Related Links                                                             |\n| ------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------- |\n| Bundle Overview                 | View information about the artifacts built for the current project                                                                                     | [Bundle Overall](../usage/bundle-overall)                                 |\n| Bundle Alert                    | The ability to perform detection based on build artifact data                                                                                          | [Bundle Alert](../usage/bundle-alerts)                                    |\n| Bundle Analysis                 | Analysis of the relationships between assets, chunks, and modules in the artifact, as well as the packaged code and size analysis of each module, etc. | [Bundle Analysis](../usage/bundle-size)                                   |\n| Module Analysis                 | Analysis of module dependencies                                                                                                                        | [Modules Dependency Analysis](../usage/module-analysis)                   |\n| Duplicate Packages Optimization | Inspection of duplicate dependencies used in the project                                                                                               | [Duplicate Packages Optimization](../../blog/topic/duplicate-pkg-problem) |\n| Bundle Diff                     | Comparative analysis of two artifacts                                                                                                                  | [Bundle Diff](../usage/bundle-diff)                                       |\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Example in Rspress\nDESCRIPTION: Demonstrates the simplest Markdown syntax for creating a heading.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/examples/rspress-minimal/docs/guide/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Hello world\n```\n\n----------------------------------------\n\nTITLE: Using Code View Component for Rule Reporting in JavaScript\nDESCRIPTION: This example shows how to use the code view component to display rule violations with specific code highlighting. It demonstrates setting up the detail object with file information and ranges for highlighting.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/guide/rules/rule-custom.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst detail = {\n  type: 'code-view',\n  file: {\n    path: document.path,\n    content: document.content,\n    ranges: [node.loc!],\n  },\n};\n\nreport({\n  message,\n  document,\n  detail,\n});\n```\n\n----------------------------------------\n\nTITLE: Previewing Rspress Production Build\nDESCRIPTION: Command to preview the production build locally before deployment.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/examples/rspress-minimal/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run preview\n```\n\n----------------------------------------\n\nTITLE: Defining CodeViewRule Interfaces in TypeScript\nDESCRIPTION: Defines interfaces for code view rules, including file information and source code ranges.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/rules/rule-custom.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CodeViewRuleStoreData extends BaseRuleStoreData {\n  type: 'code-view';\n  file: {\n    /**\n     * file path\n     */\n    path: string;\n    /**\n     * the code content\n     */\n    content: string;\n    /**\n     * fix highlight range in source\n     */\n    ranges?: SourceRange[];\n  };\n}\n\n/** Source code location */\ninterface SourcePosition {\n  line?: number;\n  column?: number;\n  index?: number;\n}\n\n/** Source code range */\ninterface SourceRange {\n  start: SourcePosition;\n  end?: SourcePosition;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Custom Rule in TypeScript\nDESCRIPTION: This example illustrates the structure of a generic custom rule definition using the defineRule function. It includes placeholders for rule title, configuration, and the check function implementation.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/guide/rules/rule-custom.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineRule } from '@rsdoctor/core/rules';\n\nconst ruleTitle = 'check-rule';\nconst ruleConfig = {\n  // some rule configs\n};\n\nexport const CheckRule = defineRule<typeof ruleTitle, config>(() => ({\n  meta: {\n    category: 'bundle', // rule category\n    severity: 'Warn', // rule severity\n    title: ruleTitle, // rule title\n    defaultConfig: {\n      // rule default config\n    },\n  },\n  check(ruleContext) {\n    // rule check...\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Building Rspress Website for Production\nDESCRIPTION: Command to create a production build of the website.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/examples/rspress-minimal/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Project Structure Example for Duplicate Packages in pnpm-workspace\nDESCRIPTION: This text snippet shows the directory structure of a project using pnpm workspace where duplicate React packages occur due to different versions in the web app and component package.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/topic/duplicate-pkg-problem.mdx#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n├── node_modules\n├── apps\n│   └── web\n│       ├── node_modules\n│       │   ├── component  -> ../../packages/component\n│       │   └── react      -> ../../../node_modules/.pnpm/react@18.2.0\n│       ├── src\n│       │   └── index.js\n│       ├── rspack.config.js\n│       └── package.json\n└── packages\n    └── component\n        ├── node_modules\n        │   └── react      -> ../../../node_modules/.pnpm/react@18.1.0\n        ├── src\n        │   └── index.js\n        └── package.json\n```\n\n----------------------------------------\n\nTITLE: Starting Rspress Development Server\nDESCRIPTION: Command to start the development server for local development.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/examples/rspress-minimal/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining AST Processing Tools in TypeScript\nDESCRIPTION: Defines interfaces for AST processing tools, including parser functions and document class for code position handling.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/rules/rule-custom.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/** This includes the type definitions for all AST nodes */\ntype Node = /* SyntaxNode */;\n\ninterface parser {\n  /** AST iterator */\n  walk,\n  /**\n   * Compile code\n   *   - The root node is `Node.Program`\n   */\n  parse,\n  /**\n   * Compile the next expression\n   *   - The root node is `Node.ExpressionStatement`\n   */\n  parseExpressionAt,\n  /** Assertion methods */\n  asserts,\n  /** Utility methods */\n  utils,\n}\n\n/** Document class */\ninterface Document {\n  /** Get the position in the text at the given offset */\n  positionAt!: (offset: number) => Position | undefined;\n  /** Get the position in the file at the given point */\n  offsetAt!: (position: Position) => number | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Project Structure Example for Duplicate Packages Caused by Peer Dependencies\nDESCRIPTION: This text snippet illustrates the directory structure of a project where duplicate packages occur due to peer dependencies in a pnpm workspace, resulting in multiple instances of the same package version.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/topic/duplicate-pkg-problem.mdx#2025-04-21_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n├── node_modules\n├── apps\n│   └── web\n│       ├── node_modules\n│       │   ├── component  ->  ../../packages/component\n│       │   ├── axios      ->  ../../../node_modules/.pnpm/axios@0.27.2_debug@4.3.4\n│       │   └── debug      ->  ../../../node_modules/.pnpm/debug@4.3.4\n│       ├── src\n│       │   └── index.js\n│       ├── rspack.config.js\n│       └── package.json\n└── packages\n    └── component\n        ├── node_modules\n        │   └── axios      ->  ../../../node_modules/.pnpm/axios@0.27.2\n        ├── src\n        │   └── index.js\n        └── package.json\n```\n\n----------------------------------------\n\nTITLE: Rendering Version Badge in JSX\nDESCRIPTION: JSX code that renders a Badge component with warning type to display the version information for the Bundle Diff feature.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/release/release-note-0_4.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Badge text=\"Version: 0.4.5\" type=\"warning\" />\n```\n\n----------------------------------------\n\nTITLE: Embedding Images in Markdown for Rsdoctor Feature Demonstration\nDESCRIPTION: This snippet shows how to embed images in Markdown to illustrate Rsdoctor's features. It includes examples for displaying overall project information, alerts, and analysis views.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/intro.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![Overall](https://assets.rspack.dev/others/assets/rsdoctor/project-overall-1.jpg)\n\n![Overall-Alerts](https://assets.rspack.dev/others/assets/rsdoctor/overall-alerts.png)\n\n<img\n  src=\"https://assets.rspack.dev/others/assets/rsdoctor/loader-timeline-overall.png\"\n  style={{ margin: 'auto' }}\n/>\n\n<img\n  src=\"https://assets.rspack.dev/others/assets/rsdoctor/loader-analysis-all.png\"\n  style={{ margin: 'auto' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in JSX\nDESCRIPTION: A JSX import statement for the Badge component from a theme, used in the documentation to display version badges.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/release/release-note-0_4.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge } from '@theme';\n```\n\n----------------------------------------\n\nTITLE: ECMA Version Check Type Definitions\nDESCRIPTION: Type definitions for ECMA version check configuration including targets, exclude patterns, and version options.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/rules/rules.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype CheckSyntaxOptions = {\n  /**\n   * The target browser range of the project.\n   * Its value is a standard browserslist array.\n   */\n  targets?: string[];\n  /**\n   * Used to exclude a portion of source files during detection.\n   * You can pass in one or more regular expressions to match the paths of source files.\n   */\n  exclude?: CheckSyntaxExclude;\n  /**\n   * Used to exclude files by output path before detection.\n   * You can pass in one or more regular expressions to match the paths of source files.\n   */\n  excludeOutput?: CheckSyntaxExclude;\n  /**\n   * The minimum ECMAScript syntax version that can be used in the build artifact.\n   * The priority of `ecmaVersion` is higher than `targets`.\n   */\n  ecmaVersion?: EcmaVersion;\n  /**\n   * Used to ignore specified syntax error messages after detection.\n   * You can pass in one or more error message types to ignore.\n   */\n  excludeErrorLogs?: SyntaxErrorKey[];\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Bundle Diff Images in JSX\nDESCRIPTION: JSX code that creates a flex container to display two side-by-side images showing bundle diff features with styling for layout and width.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/release/release-note-0_4.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ display: 'flex', justifyContent: 'space-between' }}>\n  <img\n    src=\"https://assets.rspack.dev/others/assets/rsdoctor/bundle-diff-cards.png\"\n    style={{ width: '48%' }}\n  />\n  <img\n    src=\"https://assets.rspack.dev/others/assets/rsdoctor/bundle-diff-module-list.png\"\n    style={{ width: '48%' }}\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using NextSteps Component with Step Children in JSX\nDESCRIPTION: Implementation of the NextSteps component with Step children to create a navigation section that links to additional documentation about Loader analysis modules.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/blog/topic/loader-optimization.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<NextSteps>\n  <Step\n    href=\"/guide/usage/loaders-timeline\"\n    title=\"Loader Timeline 使用介绍\"\n    description=\"了解 Rsdoctor 内 Loader Timeline 中的图表使用说明\"\n  />\n  <Step\n    href=\"/guide/usage/loaders-analysis\"\n    title=\"Loader Analysis 使用介绍\"\n    description=\"了解 Rsdoctor 内 Loader Analysis 的操作和使用方式\"\n  />\n</NextSteps>\n```\n\n----------------------------------------\n\nTITLE: Rendering Vue Loader Analysis Badge in JSX\nDESCRIPTION: JSX code that renders a Badge component with warning type to display the version information for the Vue Loader Analysis feature.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/release/release-note-0_4.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Badge text=\"Version: 0.4.5\" type=\"warning\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Rsdoctor Build Analyzer Home Page in YAML\nDESCRIPTION: This YAML configuration sets up the home page for the Rsdoctor Build Analyzer project. It specifies the page type as 'home' and adds a custom title suffix ' - Build Analyzer' to be appended to the main title.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\npageType: home\ntitleSuffix: ' - Build Analyzer'\n---\n```\n\n----------------------------------------\n\nTITLE: Example of Bundle-Diff Command Usage\nDESCRIPTION: Practical example of using the bundle-diff command to compare baseline and current manifest files.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/cli.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrsdoctor bundle-diff --baseline=\"baseline/.rsdoctor/manifest.json\" --current=\"current/.rsdoctor/manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Vue Loader Image in JSX\nDESCRIPTION: JSX code that renders an image showing the Vue loader analysis feature interface.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/release/release-note-0_4.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<img src=\"https://assets.rspack.dev/others/assets/rsdoctor/vue-loader.png\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Bundle Size Analysis in Markdown for Rsdoctor\nDESCRIPTION: This snippet shows how to embed an image in Markdown to display the bundle size analysis view in Rsdoctor, including styling for centering and width control.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/intro.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<p>\n  <img\n    alt=\"bundle\"\n    src={\n      'https://assets.rspack.dev/others/assets/rsdoctor/bundle-size-overall.png'\n    }\n    width=\"700px\"\n    style={{ margin: 'auto' }}\n  />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Size Comparison Image in JSX\nDESCRIPTION: JSX code that displays an image showing package size differences with custom styling for width and margin.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/release/release-note-0_4.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<img\n    src=\"https://assets.rspack.dev/others/assets/rsdoctor/package-size-diff.png\"\n    style={{ width: '60%', margin: 'auto' }}\n  />\n```\n\n----------------------------------------\n\nTITLE: Displaying Rsdoctor Banner Image\nDESCRIPTION: HTML code to display the Rsdoctor banner image with responsive sizing.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/README.zh-CN.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <img alt=\"Rsdoctor Banner\" width=\"100%\" src=\"https://github.com/web-infra-dev/rsdoctor/assets/7237365/0f9d2e86-d919-451a-befa-fa84603a87cf\" />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Example of Analyze Command Usage\nDESCRIPTION: Practical example of using the analyze command with a local manifest.json file path.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/cli.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrsdoctor analyze --profile \"./dist/.rsdoctor/manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Badge Component in JSX\nDESCRIPTION: JSX code for rendering a version badge component with warning type.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/usage/bundle-diff.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Badge text=\"Version: 0.4.5\" type=\"warning\" />\n```\n\n----------------------------------------\n\nTITLE: HTML Badge Links\nDESCRIPTION: HTML code block containing badge links for Discord, NPM version, downloads and license information using anchor and image tags.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<p>\n  <a href=\"https://discord.gg/wrBPBT6rkM\"><img src=\"https://img.shields.io/badge/chat-discord-blue?style=flat-square&logo=discord&colorA=564341&colorB=EDED91\" alt=\"discord channel\" /></a>\n  <a href=\"https://npmjs.com/package/@rsdoctor/core?activeTab=readme\"><img src=\"https://img.shields.io/npm/v/@rsdoctor/core?style=flat-square&colorA=564341&colorB=EDED91\" alt=\"npm version\" /></a>\n  <a href=\"https://npmcharts.com/compare/@rsdoctor/core?minimal=true\"><img src=\"https://img.shields.io/npm/dm/@rsdoctor/core.svg?style=flat-square&colorA=564341&colorB=EDED91\" alt=\"downloads\" /></a>\n  <a href=\"https://github.com/web-infra-dev/rsbuild/blob/main/LICENSE\"><img src=\"https://img.shields.io/npm/l/@rsdoctor/core?style=flat-square&colorA=564341&colorB=EDED91\" alt=\"license\" /></a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using RuleIndex React Component\nDESCRIPTION: Imports the RuleIndex component from @components directory and renders it directly in the page. The implementation demonstrates a simple component usage pattern.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/guide/more/rules.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport RuleIndex from '@components/RuleIndex';\n\n<RuleIndex />\n```\n\n----------------------------------------\n\nTITLE: HTML Image Element with Picture Tag\nDESCRIPTION: HTML code for displaying the Rsdoctor banner image using picture and img tags with full width styling.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<picture>\n  <img alt=\"Rsdoctor Banner\" width=\"100%\" src=\"https://github.com/web-infra-dev/rsdoctor/assets/7237365/0f9d2e86-d919-451a-befa-fa84603a87cf\" />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Importing Rsdoctor CLI in CommonJS\nDESCRIPTION: Example of importing the execute function from @rsdoctor/cli in a CommonJS environment.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/cli.mdx#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst { execute } = require('@rsdoctor/cli');\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Rule Index React Component\nDESCRIPTION: Imports a RuleIndex component from the @components directory and renders it directly in the page. Uses JSX syntax to implement a simple component-based page layout.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/more/rules.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport RuleIndex from '@components/RuleIndex';\n\n<RuleIndex />\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: A standard robots.txt configuration that allows all web crawlers (User-agent: *) to access all content on the website (empty Disallow directive).\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/examples/rspack-layers-minimal/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Importing Next Steps Components in JSX\nDESCRIPTION: Imports the NextSteps and Step components that are used to create a navigation section at the end of the document for further reading suggestions.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/blog/topic/loader-optimization.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NextSteps from '@components/NextSteps';\nimport Step from '@components/Step';\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Access in robots.txt\nDESCRIPTION: This robots.txt configuration specifies that all web crawlers ('User-agent: *') are allowed to access all content on the site as there are no path restrictions specified after 'Disallow:'.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/examples/rspack-minimal/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Disabling Parse Bundle Capability\nDESCRIPTION: Example showing how to disable the Parse Bundle capability to reduce analysis time for large repositories using Webpack chain configuration.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/config/options/options.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nchain.plugin('Rsdoctor').use(RsdoctorRspackPlugin, [\n  {\n    supports: {\n      parseBundle: false,\n    },\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in JSX\nDESCRIPTION: Imports the NextSteps and Step components from the components directory to be used in the guide for navigation purposes.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/topic/loader-optimization.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NextSteps from '@components/NextSteps';\nimport Step from '@components/Step';\n```\n\n----------------------------------------\n\nTITLE: Setting Global Git Email in Bash\nDESCRIPTION: This command sets the global Git email configuration.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.email \"SOME_EMAIL@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Installing Rsdoctor CLI with Package Manager\nDESCRIPTION: Command to install @rsdoctor/cli as a development dependency using package manager tabs component.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/guide/start/cli.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n<PackageManagerTabs command=\"add @rsdoctor/cli -D\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version in Bash\nDESCRIPTION: This command displays the currently installed version of Node.js.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Configuring Rsdoctor Plugin Port in TypeScript\nDESCRIPTION: This snippet demonstrates how to set a custom port for the Rsdoctor service in the plugin configuration. It uses the 'port' option to specify the desired port number for the Rsdoctor service to run on.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/release/release-note-0_3.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nchain.plugin('Rsdoctor').use(RsdoctorRspackPlugin, [\n  {\n    port: 8888, // port\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Resolve Alias for Duplicate Packages in Rspack/Webpack\nDESCRIPTION: This snippet demonstrates how to use the resolve.alias configuration in Rspack or Webpack to specify a single resolution path for a package (lodash in this example) to eliminate duplicate dependencies.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/blog/topic/duplicate-pkg-problem.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = {\n  //...\n  resolve: {\n    alias: {\n      lodash: path.resolve(__dirname, 'node_modules/lodash'),\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Parse Bundle in Rsdoctor Configuration\nDESCRIPTION: This code snippet shows how to disable the Parse Bundle capability in Rsdoctor. It uses the 'supports.parseBundle' option set to false, which can improve performance by skipping bundle parsing in large repositories where this feature is not needed.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/release/release-note-0_3.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nchain.plugin('Rsdoctor').use(RsdoctorRspackPlugin, [\n  {\n    supports: {\n      parseBundle: false,\n    },\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Build Overview Features\nDESCRIPTION: Table describing the core build overview features of Rsdoctor, including project overview, bundle overview, compilation overview, and alert systems.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/features.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Feature              | Description                                                            | Related Links                                |\n| -------------------- | ---------------------------------------------------------------------- | -------------------------------------------- |\n| Project Overview     | View information such as the current project configuration and version | [Project Overall](../usage/project-overall)  |\n| Bundle Overview      | View information about the artifacts built for the current project     | [Bundle Overall](../usage/bundle-overall)    |\n| Compilation Overview | View data information about the current project's compilation process  | [Compile Overall](../usage/compile-overall)  |\n| Bundle Alert         | The ability to perform detection based on build artifact data          | [Bundle Alert](../usage/bundle-alerts)       |\n| Compilation Alert    | The ability to perform detection based on compilation data             | [Compilation Alert](../usage/compile-alerts) |\n```\n\n----------------------------------------\n\nTITLE: Creating Image Table in Markdown for Bundle Diff Comparison\nDESCRIPTION: This snippet demonstrates how to create a table with images in Markdown to compare bundle diff views in Rsdoctor, showcasing changes in resource sizes and other product data.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/intro.mdx#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| ![bundle-diff-1](https://assets.rspack.dev/others/assets/rsdoctor/bundle-diff-1.png) | ![bundle-diff-2](https://assets.rspack.dev/others/assets/rsdoctor/bundle-diff-2.png) |\n| ------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------ |\n```\n\n----------------------------------------\n\nTITLE: Embedding Styled Images in Markdown for Rsdoctor Analysis Views\nDESCRIPTION: This snippet demonstrates how to embed and style images in Markdown to showcase various analysis views in Rsdoctor, including plugin analysis and resolver analysis.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/intro.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<p>\n  <img\n    alt=\"bundle\"\n    src={'https://assets.rspack.dev/others/assets/rsdoctor/compile-plugin.jpg'}\n    width=\"600px\"\n    style={{ margin: 'auto' }}\n  />\n</p>\n\n<p>\n  <img\n    alt=\"bundle\"\n    src={'https://assets.rspack.dev/others/assets/rsdoctor/resolver.png'}\n    width=\"700px\"\n    style={{ margin: 'auto' }}\n  />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Embedding Video in Markdown for Rsdoctor UI Demo\nDESCRIPTION: This snippet demonstrates how to embed a video in Markdown, specifically showcasing the Rsdoctor UI. It includes styling for responsive video display and autoplay settings.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/start/intro.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<video\n  src=\"https://assets.rspack.dev/others/assets/rsdoctor/rsdoctor-1.0-ui.mp4\"\n  style={{\n    width: '100%',\n    height: 'auto',\n    maxHeight: '50vh',\n    objectFit: 'cover',\n    display: 'block',\n  }}\n  autoPlay={true}\n  muted={true}\n  controls={true}\n  loop={true}\n  playsInline\n/>\n```\n\n----------------------------------------\n\nTITLE: Front Matter Usage in Markdown\nDESCRIPTION: Demonstrates how to add and use Front Matter in Markdown files for metadata.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/examples/rspress-minimal/docs/guide/index.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Hello world\n---\n```\n\n----------------------------------------\n\nTITLE: Accessing Front Matter Properties in Markdown\nDESCRIPTION: Shows how to access Front Matter properties within the Markdown content.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/examples/rspress-minimal/docs/guide/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Hello world\n---\n\n# {frontmatter.title}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rsdoctor Plugin with Custom Rule in TypeScript\nDESCRIPTION: This code snippet shows how to configure the Rsdoctor plugin in a Rsbuild configuration file. It demonstrates importing a custom rule (AssetsCountLimit) and applying it to the Rsdoctor plugin configuration. The configuration includes enabling the custom rule and setting its parameters.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/release/release-note-0_3.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// rsbuild.config.ts\nimport { AssetsCountLimit } from './rules/assets-count-limit';\n\nexport default {\n  tools: {\n    bundlerChain: (chain) => {\n      chain.plugin('Rsdoctor').use(RsdoctorRspackPlugin, [\n        {\n          linter: {\n            level: 'Error',\n            extends: [AssetsCountLimit],\n            rules: {\n              'assets-count-limit': [\n                'on',\n                {\n                  limit: 1, // rule custom configs\n                },\n              ],\n            },\n          },\n        },\n      ]);\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Code Block Examples in Markdown\nDESCRIPTION: Demonstrates various ways to create and customize code blocks in Markdown, including language specification and custom titles.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/examples/rspress-minimal/docs/guide/index.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```js\nconsole.log('Hello World');\n```\n\n```js title=\"hello.js\"\nconsole.log('Hello World');\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Line Numbers in Code Blocks\nDESCRIPTION: Shows how to configure Rspress to display line numbers in code blocks using the config file.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/examples/rspress-minimal/docs/guide/index.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  markdown: {\n    showLineNumbers: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Line Highlighting in Code Blocks\nDESCRIPTION: Shows how to apply line highlighting to specific lines in a code block, along with a custom title.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/examples/rspress-minimal/docs/guide/index.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n```js title=\"hello.js\" {1,3-5}\nconsole.log('Hello World');\n\nconst a = 1;\n\nconsole.log(a);\n\nconst b = 2;\n\nconsole.log(b);\n```\n```\n\n----------------------------------------\n\nTITLE: Reporting Rule Results in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the report function within a custom rule to report rule violations. It includes an example of providing detailed information for the rule result display.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/guide/rules/rule-custom.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst CheckRule = defineRule<typeof ruleTitle, config>(() => ({\n  // .....\n\n  check({ chunkGraph, report, ruleConfig }) {\n    const assets = chunkGraph.getAssets();\n\n    if (assets.length > ruleConfig.limit) {\n      report({\n        message: 'The count of assets is bigger than limit',\n        detail: {\n          type: 'link',\n          link: 'https://rsdoctor.dev/zh/guide/start/quick-start', // This link just for show case.\n        },\n      });\n    }\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: NextSteps Navigation Component with Step Items\nDESCRIPTION: JSX component that provides navigation links to related documentation pages about Loader Timeline and Loader Analysis usage in Rsdoctor.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/blog/topic/loader-optimization.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<NextSteps>\n  <Step\n    href=\"/guide/usage/loaders-timeline\"\n    title=\"Loader Timeline Usage\"\n    description=\"Learn how to use the Loader Timeline in Rsdoctor\"\n  />\n  <Step\n    href=\"/guide/usage/loaders-analysis\"\n    title=\"Loader Analysis Usage\"\n    description=\"Learn how to operate and use the Loader Analysis in Rsdoctor\"\n  />\n</NextSteps>\n```\n\n----------------------------------------\n\nTITLE: Using the Bundle-Diff Command with Rsdoctor CLI\nDESCRIPTION: Command to load two manifest.json files for comparing build outputs in the Bundle Diff page.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/guide/start/cli.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrsdoctor bundle-diff --baseline <baselineManifestJsonPath> --current <currentManifestJsonPath>\n```\n\n----------------------------------------\n\nTITLE: Duplicate Package Configuration Type Definition\nDESCRIPTION: Type definitions for the duplicate package rule configuration including version check levels and ignore options.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/rules/rules.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Config {\n  checkVersion: keyof typeof CheckVersion;\n  ignore: string[];\n}\n\nenum CheckVersion {\n  null = 0,\n  prerelease = 0x1,\n  prepatch = 0x10,\n  patch = 0x100,\n  preminor = 0x1000,\n  minor = 0x10000,\n  premajor = 0x100000,\n  major = 0x1000000,\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in JSX\nDESCRIPTION: Import statement for the Badge component used in the documentation header.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/en/guide/usage/bundle-diff.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge } from '@theme';\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Badges\nDESCRIPTION: Markdown code to display various project badges including chat, npm version, downloads, and license.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/README.zh-CN.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<p>\n  <a href=\"https://discord.gg/wrBPBT6rkM\"><img src=\"https://img.shields.io/badge/chat-discord-blue?style=flat-square&logo=discord&colorA=564341&colorB=EDED91\" alt=\"discord channel\" /></a>\n  <a href=\"https://npmjs.com/package/@rsdoctor/core?activeTab=readme\"><img src=\"https://img.shields.io/npm/v/@rsdoctor/core?style=flat-square&colorA=564341&colorB=EDED91\" alt=\"npm version\" /></a>\n  <a href=\"https://npmcharts.com/compare/@rsdoctor/core?minimal=true\"><img src=\"https://img.shields.io/npm/dm/@rsdoctor/core.svg?style=flat-square&colorA=564341&colorB=EDED91\" alt=\"downloads\" /></a>\n  <a href=\"https://github.com/web-infra-dev/rsbuild/blob/main/LICENSE\"><img src=\"https://img.shields.io/npm/l/@rsdoctor/core?style=flat-square&colorA=564341&colorB=EDED91\" alt=\"license\" /></a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js 22 LTS with NVM in Bash\nDESCRIPTION: These commands install the Node.js 22 LTS version using NVM, set it as the default version, and switch to it.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install the LTS version of Node.js 22\nnvm install 22 --lts\n\n# Make the newly installed Node.js 22 as the default version\nnvm alias default 22\n\n# Switch to the newly installed Node.js 22\nnvm use 22\n```\n\n----------------------------------------\n\nTITLE: Enabling pnpm with Corepack in Bash\nDESCRIPTION: This command enables pnpm using corepack for package management.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncorepack enable\n```\n\n----------------------------------------\n\nTITLE: Checking Git Email Configuration in Bash\nDESCRIPTION: This command checks the current Git email configuration.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit config --list | grep email\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Rspress Website\nDESCRIPTION: Command to install all required npm dependencies for the project.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/examples/rspress-minimal/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Local Git Email in Bash\nDESCRIPTION: This command sets the Git email configuration for the local repository.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit config user.email \"SOME_EMAIL@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Basic Rsdoctor CLI Command Structure\nDESCRIPTION: The basic command structure for using the Rsdoctor CLI tool.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/docs/zh/guide/start/cli.mdx#2025-04-21_snippet_1\n\nLANGUAGE: linux\nCODE:\n```\nrsdoctor <command> [options]\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch in Bash\nDESCRIPTION: This command creates and switches to a new Git branch for development.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b MY_BRANCH_NAME\n```\n\n----------------------------------------\n\nTITLE: Package Name Definition in Markdown\nDESCRIPTION: Package name definition in a markdown heading format\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/graph/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @rsdoctor/graph\n```\n\n----------------------------------------\n\nTITLE: Building a Specific Package with nx in Bash\nDESCRIPTION: This command builds a specific package (e.g., @rsdoctor/core) using nx.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx build @rsdoctor/core\n```\n\n----------------------------------------\n\nTITLE: Running All Unit Tests with pnpm in Bash\nDESCRIPTION: This command runs all unit tests in the project using pnpm.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/CONTRIBUTING.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for a Specific Package in Bash\nDESCRIPTION: This command runs unit tests for a specific package using pnpm with the --filter option.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/CONTRIBUTING.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm run --filter @rsdoctor/some-package test\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Rspack Style Guide\nDESCRIPTION: A markdown link referencing the writing style guide from the Rspack project repository.\nSOURCE: https://github.com/web-infra-dev/rsdoctor/blob/main/packages/document/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Writing style guide](https://github.com/web-infra-dev/rspack/tree/main/website#writing-style-guide)\n```"
  }
]