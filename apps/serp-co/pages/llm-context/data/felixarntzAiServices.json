[
  {
    "owner": "felixarntz",
    "repo": "ai-services",
    "content": "TITLE: Streaming Text Responses from an AI Model - Felix_Arntz AI Services - PHP\nDESCRIPTION: This snippet illustrates how to stream text responses from an AI model using the Felix_Arntz AI Services PHP library. It obtains a model supporting text generation, calls the streaming method with a user prompt, and iterates over incremental candidate chunks, printing the extracted text for the user as soon as it is received. The example uses AI_Capability constants, the Helpers class, and relies on exception handling for robustness. Inputs include a service instance, capabilities, and optionally a feature string; output is streamed text displayed immediately.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nuse Felix_Arntz\\\\AI_Services\\\\Services\\\\API\\\\Enums\\\\AI_Capability;\\nuse Felix_Arntz\\\\AI_Services\\\\Services\\\\API\\\\Helpers;\\n\\ntry {\\n\\t$candidates_generator = $service\\n\\t\\t->get_model(\\n\\t\\t\\tarray(\\n\\t\\t\\t\\t'feature'      => 'my-test-feature',\\n\\t\\t\\t\\t'capabilities' => array( AI_Capability::TEXT_GENERATION ),\\n\\t\\t\\t)\\n\\t\\t)\\n\\t\\t->stream_generate_text( 'What can I do with WordPress?' );\\n\\n\\tforeach ( $candidates_generator as $candidates ) {\\n\\t\\t$text = Helpers::get_text_from_contents(\\n\\t\\t\\tHelpers::get_candidate_contents( $candidates )\\n\\t\\t);\\n\\n\\t\\techo $text;\\n\\t}\\n} catch ( Exception $e ) {\\n\\t// Handle the exception.\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Generating AI Text Responses Using WordPress AI Services Plugin API in PHP\nDESCRIPTION: This PHP snippet demonstrates how to interact with the AI Services plugin to generate an AI-assisted answer from a general prompt. It checks for available services, retrieves the first one, invokes a model supporting text generation, and processes the candidate responses using provided helper utilities. Dependencies include the AI Services plugin (with correct namespace imports), and proper exception handling is incorporated. The input is a prompt string and feature context, while the output is plain text printed to the screen; potential exceptions must be handled for robustness.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/readme.txt#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Felix_Arntz\\AI_Services\\Services\\API\\Enums\\AI_Capability;\nuse Felix_Arntz\\AI_Services\\Services\\API\\Helpers;\n\nif ( ai_services()->has_available_services() ) {\n\t$service = ai_services()->get_available_service();\n\ttry {\n\t\t$candidates = $service\n\t\t\t->get_model(\n\t\t\t\tarray(\n\t\t\t\t\t'feature'      => 'my-test-feature',\n\t\t\t\t\t'capabilities' => array( AI_Capability::TEXT_GENERATION ),\n\t\t\t\t)\n\t\t\t)\n\t\t\t->generate_text( 'What can I do with WordPress?' );\n\n\t\t$text = Helpers::get_text_from_contents(\n\t\t\tHelpers::get_candidate_contents( $candidates )\n\t\t);\n\n\t\techo $text;\n\t} catch ( Exception $e ) {\n\t\t// Handle the exception.\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating AI Text Responses Using WordPress AI Services Plugin API in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to leverage the AI Services plugin in a WordPress JavaScript environment using the data API and built-in helpers. It checks for available services, retrieves one, performs text generation asynchronously, and formats the response with helper utilities. Dependencies include the 'ai-services/ai' store and the aiServices global object; proper asynchronous (await) and error handling are demonstrated. Input is a prompt and feature string, with the resulting answer logged to the console. Limitations include requirement of modern JS features (async/await), and plugin-provided globals must be available.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/readme.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst helpers = aiServices.ai.helpers;\nconst { hasAvailableServices, getAvailableService } = wp.data.select( 'ai-services/ai' );\nif ( hasAvailableServices() ) {\n\tconst service = getAvailableService();\n\ttry {\n\t\tconst candidates = await service.generateText(\n\t\t\t'What can I do with WordPress?',\n\t\t\t{ feature: 'my-test-feature' }\n\t\t);\n\n\t\tconst text = helpers.getTextFromContents(\n\t\t\t\thelpers.getCandidateContents( candidates )\n\t\t\t);\n\n\t\tconsole.log( text );\n\t} catch ( error ) {\n\t\t// Handle the error.\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating AI Text Responses Using the PHP API in WordPress\nDESCRIPTION: This PHP snippet demonstrates how to check for available AI services within WordPress, select one, and generate a text response to a prompt using the AI Services plugin. It uses the plugin's abstraction for fetching available services and the API for text generation, with robust exception handling. Required dependencies include the AI Services plugin, and relevant classes must be imported. Inputs include the prompt string, and outputs are the AI-generated textual responses. Limitations include plugin dependency and available service/API credentials.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Felix_Arntz\\AI_Services\\Services\\API\\Enums\\AI_Capability;\nuse Felix_Arntz\\AI_Services\\Services\\API\\Helpers;\n\nif ( ai_services()->has_available_services() ) {\n  $service = ai_services()->get_available_service();\n  try {\n    $candidates = $service\n      ->get_model(\n        array(\n          'feature'      => 'my-test-feature',\n          'capabilities' => array( AI_Capability::TEXT_GENERATION ),\n        )\n      )\n      ->generate_text( 'What can I do with WordPress?' );\n\n    $text = Helpers::get_text_from_contents(\n      Helpers::get_candidate_contents( $candidates )\n    );\n\n    echo $text;\n  } catch ( Exception $e ) {\n    // Handle the exception.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Multimodal Prompts to AI Service in PHP\nDESCRIPTION: This snippet demonstrates how to send multimodal prompts (text and image) to an AI service that supports multimodal input. It uses Content and Parts classes to construct the prompt.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Felix_Arntz\\AI_Services\\Services\\API\\Enums\\AI_Capability;\nuse Felix_Arntz\\AI_Services\\Services\\API\\Enums\\Content_Role;\nuse Felix_Arntz\\AI_Services\\Services\\API\\Types\\Content;\nuse Felix_Arntz\\AI_Services\\Services\\API\\Types\\Parts;\n\n$parts = new Parts();\n$parts->add_text_part( 'Briefly describe what is displayed in the following image using a single sentence.' );\n$parts->add_file_data_part( 'image/jpeg', 'https://example.com/image.jpg' );\n$content = new Content( Content_Role::USER, $parts );\ntry {\n\t$candidates = $service\n\t\t->get_model(\n\t\t\tarray(\n\t\t\t\t'feature'      => 'my-test-feature',\n\t\t\t\t'capabilities' => array(\n\t\t\t\t\tAI_Capability::MULTIMODAL_INPUT,\n\t\t\t\t\tAI_Capability::TEXT_GENERATION,\n\t\t\t\t),\n\t\t\t)\n\t\t)\n\t\t->generate_text( $content );\n} catch ( Exception $e ) {\n\t// Handle the exception.\n}\n```\n\n----------------------------------------\n\nTITLE: Generating AI Text Responses Using the JavaScript API in WordPress\nDESCRIPTION: This JavaScript snippet illustrates the process of interacting with the AI Services plugin from client-side code in WordPress. It checks for available services, prompts the AI to generate a response, and then extracts and logs the textual content using built-in helper functions. The snippet requires the AI Services plugin, the aiServices global JavaScript object, and WordPress data APIs. Inputs are the user prompt and feature options; output is the AI-generated text. Asynchronous handling and proper error processing are shown.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst helpers = aiServices.ai.helpers;\nconst { hasAvailableServices, getAvailableService } = wp.data.select( 'ai-services/ai' );\nif ( hasAvailableServices() ) {\n  const service = getAvailableService();\n  try {\n    const candidates = await service.generateText(\n      'What can I do with WordPress?',\n      { feature: 'my-test-feature' }\n    );\n\n    const text = helpers.getTextFromContents(\n      helpers.getCandidateContents( candidates )\n    );\n\n    console.log( text );\n  } catch ( error ) {\n    // Handle the error.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Multimodal Prompts for AI Text Generation in JavaScript\nDESCRIPTION: This code shows how to send a multimodal prompt (text and image) to an AI service for text generation. It uses content objects and part arrays to structure the prompt and specifies required AI capabilities.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst enums = aiServices.ai.enums;\n\nconst content = {\n\trole: enums.ContentRole.USER,\n\tparts: [\n\t\t{\n\t\t\ttext: 'Briefly describe what is displayed in the following image using a single sentence.'\n\t\t},\n\t\t{\n\t\t\tmimeType: 'image/jpeg',\n\t\t\tfileUri: 'https://example.com/image.jpg'\n\t\t}\n\t]\n};\ntry {\n\tconst candidates = await service.generateText(\n\t\tcontent,\n\t\t{\n\t\t\tfeature: 'my-test-feature',\n\t\t\tcapabilities: [\n\t\t\t\tenums.AiCapability.MULTIMODAL_INPUT,\n\t\t\t\tenums.AiCapability.TEXT_GENERATION,\n\t\t\t],\n\t\t}\n\t);\n} catch ( error ) {\n\t// Handle the error.\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing a Specific AI Service Without Explicit Availability Check (JavaScript)\nDESCRIPTION: Fetches a specific AI service using getAvailableService and verifies the result is not null before proceeding, offering an alternative to using isServiceAvailable. This approach may suit situations where you want to act on the service object directly.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst { getAvailableService } = wp.data.select( 'ai-services/ai' );\nconst service = getAvailableService( 'google' );\nif ( service !== null ) {\n\t// Do something with the AI service.\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Images Using AI Services in PHP\nDESCRIPTION: This snippet shows how to generate images using the AI Services library. It finds an available service with image generation capability and creates an image based on a text prompt.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Felix_Arntz\\AI_Services\\Services\\API\\Enums\\AI_Capability;\n\ntry {\n\t$service = ai_services()->get_available_service( array( 'capabilities' => array( AI_Capability::IMAGE_GENERATION ) ) );\n} catch ( InvalidArgumentException $e ) {\n\t// Handle the exception.\n}\n\ntry {\n\t$candidates = $service\n\t\t->get_model(\n\t\t\tarray(\n\t\t\t\t'feature'      => 'my-test-feature',\n\t\t\t\t'capabilities' => array( AI_Capability::IMAGE_GENERATION ),\n\t\t\t)\n\t\t)\n\t\t->generate_image( 'Photorealistic image with an aerial shot of a Cavalier King Charles Spaniel tanning himself at an oasis in a desert.' );\n} catch ( Exception $e ) {\n\t// Handle the exception.\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Any Available AI Service by Capability (JavaScript)\nDESCRIPTION: Checks for any AI service that meets capability requirements (e.g., text generation) using hasAvailableServices and retrieves such a service with getAvailableService. Utilizes aiServices.ai.enums to build capability arguments. Designed for plugins that can work generically with any suitable AI provider.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst enums = aiServices.ai.enums;\n\nconst SERVICE_ARGS = { capabilities: [ enums.AiCapability.TEXT_GENERATION ] };\nconst { hasAvailableServices, getAvailableService } = wp.data.select( 'ai-services/ai' );\nif ( hasAvailableServices( SERVICE_ARGS ) ) {\n\tconst service = getAvailableService( SERVICE_ARGS );\n\t// Do something with the AI service.\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Text with Preferred Model in PHP\nDESCRIPTION: This snippet demonstrates how to generate text using the preferred model for text generation capability. It assumes an available service instance that supports text generation.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Felix_Arntz\\AI_Services\\Services\\API\\Enums\\AI_Capability;\n\ntry {\n\t$candidates = $service\n\t\t->get_model(\n\t\t\tarray(\n\t\t\t\t'feature'      => 'my-test-feature',\n\t\t\t\t'capabilities' => array( AI_Capability::TEXT_GENERATION ),\n\t\t\t)\n\t\t)\n\t\t->generate_text( 'What can I do with WordPress?' );\n} catch ( Exception $e ) {\n\t// Handle the exception.\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming AI-Generated Text Responses in JavaScript\nDESCRIPTION: This code example shows how to use the streamGenerateText() method to stream AI-generated text responses. It demonstrates iterating over the generator to process chunks of text as they arrive, which can improve user experience for longer responses.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst enums = aiServices.ai.enums;\nconst helpers = aiServices.ai.helpers;\n\ntry {\n\tconst candidatesGenerator = await service.streamGenerateText(\n\t\t'What can I do with WordPress?',\n\t\t{\n\t\t\tfeature: 'my-test-feature',\n\t\t\tcapabilities: [ enums.AiCapability.TEXT_GENERATION ],\n\t\t}\n\t);\n\n\tfor await ( const candidates of candidatesGenerator ) {\n\t\tconst text = helpers.getTextFromContents(\n\t\t\thelpers.getCandidateContents( candidates )\n\t\t);\n\n\t\t// Append text chunk to user-facing response.\n\t}\n} catch ( error ) {\n\t// Handle the error.\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Any Available AI Service with Text Generation Capability in PHP\nDESCRIPTION: This snippet shows how to retrieve any available AI service that supports text generation capability. It uses the has_available_services() method to check availability before retrieving the service.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Felix_Arntz\\AI_Services\\Services\\API\\Enums\\AI_Capability;\n\n$required_capabilities = array( 'capabilities' => array( AI_Capability::TEXT_GENERATION ) );\nif ( ai_services()->has_available_services( $required_capabilities ) ) {\n\t$service = ai_services()->get_available_service( $required_capabilities );\n\t// Do something with the AI service.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multimodal Output in AI Services (JavaScript)\nDESCRIPTION: This snippet demonstrates how to select a model supporting both text generation and multimodal output using the ai-services plugin. The configuration specifies expected output modalities (\"text\" and \"image\") in the generation configuration argument. Required dependencies include the aiServices.ai.enums object and a service instance with access to available models. The model can be used to generate both text and images, with error handling managed in a try-catch block.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst enums = aiServices.ai.enums;\n\ntry {\n\tconst model = service.getModel(\n\t\t{\n\t\t\tfeature: 'my-test-feature',\n\t\t\tcapabilities: [ enums.AiCapability.TEXT_GENERATION, enums.AiCapability.MULTIMODAL_OUTPUT ],\n\t\t\tgenerationConfig: {\n\t\t\t\toutputModalities: [ 'text', 'image' ],\n\t\t\t},\n\t\t}\n\t);\n\n\t// Generate text and images using the model.\n} catch ( error ) {\n\t// Handle the error.\n}\n```\n\n----------------------------------------\n\nTITLE: Processing AI-Generated Text Responses in JavaScript\nDESCRIPTION: This snippet demonstrates how to process text responses from AI-generated candidates. It includes a manual approach to extract text content and a simpler method using helper functions provided by the AI Services API.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlet text = '';\nfor ( const part of candidates[ 0 ].content.parts ) {\n\tif ( part.text ) {\n\t\tif ( text ) {\n\t\t\ttext += '\\n\\n';\n\t\t}\n\t\ttext += part.text;\n\t}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst helpers = aiServices.ai.helpers;\nconst text = helpers.getTextFromContents(\n\thelpers.getCandidateContents( candidates )\n);\n```\n\n----------------------------------------\n\nTITLE: Providing Function Declarations for Function Calling AI Models (JavaScript)\nDESCRIPTION: This code defines and passes function declarations to the AI model via the tools parameter for enabling function calling. Functions are described using JSON schema, facilitating user queries such as weather lookup with named arguments. Dependencies include enums from aiServices.ai, and the AI service instance. The snippet shows asynchronous text generation with custom capabilities, error handling, and structured content input.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst enums = aiServices.ai.enums;\n\nconst functionDeclarations = [\n\t{\n\t\tname: 'get_weather',\n\t\tdescription: 'Returns the weather for a given location and a given timeframe.',\n\t\tparameters: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tlocation: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: 'The location to get the weather forecast for, such as a city or region.',\n\t\t\t\t},\n\t\t\t\ttimeframe: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tenum: [ 'today', 'tonight', 'tomorrow', 'next-week' ],\n\t\t\t\t\tdescription: 'The timeframe for when to get the weather forecast for.'\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n];\n\nconst tools = [ { functionDeclarations } ];\n\nconst content = {\n\trole: enums.ContentRole.USER,\n\tparts: [\n\t\t{\n\t\t\ttext: 'What is the weather like today in Austin?'\n\t\t},\n\t]\n};\ntry {\n\tconst candidates = await service.generateText(\n\t\tcontent,\n\t\t{\n\t\t\tfeature: 'my-test-feature',\n\t\t\ttools: tools,\n\t\t\tcapabilities: [\n\t\t\t\tenums.AiCapability.FUNCTION_CALLING,\n\t\t\t\tenums.AiCapability.TEXT_GENERATION,\n\t\t\t],\n\t\t}\n\t);\n} catch ( error ) {\n\t// Handle the error.\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text Content from Candidates - Felix_Arntz AI Services - PHP\nDESCRIPTION: This snippet demonstrates how to iterate through an AI response's candidate content parts and extract text content using PHP. It checks for text parts within the candidate, appending each to a single string, and separates segments by double newlines. Dependencies include the Candidates collection containing at least one Candidate object and the relevant parts classes from the Felix_Arntz AI_Services API. The result is a combined text string of all content parts, handling the case where the candidate contains multiple pieces of text.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n$text = '';\\nforeach ( $candidates->get( 0 )->get_content()->get_parts() as $part ) {\\n\\tif ( $part instanceof \\\\Felix_Arntz\\\\AI_Services\\\\Services\\\\API\\\\Types\\\\Parts\\\\Text_Part ) {\\n\\t\\tif ( $text !== '' ) {\\n\\t\\t\\t$text .= \"\\\\n\\\\n\";\\n\\t\\t}\\n\\t\\t$text .= $part->get_text();\\n\\t}\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Generating Multimodal Text Using an Attachment (Bash)\nDESCRIPTION: This WP-CLI command processes a text prompt with reference to a WordPress media attachment, leveraging multimodal AI models. '--attachment-id' specifies the media file, allowing models to consider both prompt and image context. Requires AI services and supporting models to be configured. Inputs are text prompt and attachment ID; output is context-aware generated text.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-with-WP-CLI.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwp ai-services generate-text \"Generate alternative text for this image.\" --feature=alt-text-generator --attachment-id=123\n```\n\n----------------------------------------\n\nTITLE: Generating Text with Custom Model in PHP\nDESCRIPTION: This snippet shows how to generate text using a custom model based on the service (Google or OpenAI). It demonstrates how to select a specific model for different services.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nif( $service->get_service_slug() === 'openai' ) {\n\t$model = 'gpt-4o';\n} else {\n\t$model = 'gemini-1.5-pro';\n}\ntry {\n\t$candidates = $service\n\t\t->get_model(\n\t\t\tarray(\n\t\t\t\t'feature' => 'my-test-feature',\n\t\t\t\t'model'   => $model,\n\t\t\t)\n\t\t)\n\t\t->generate_text( 'What can I do with WordPress?' );\n} catch ( Exception $e ) {\n\t// Handle the exception.\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific AI Service in PHP\nDESCRIPTION: This snippet shows how to retrieve a specific AI service (Google in this case) after checking its availability. It demonstrates the recommended approach using is_service_available() method.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif ( ai_services()->is_service_available( 'google' ) ) {\n\t$service = ai_services()->get_available_service( 'google' );\n\t// Do something with the AI service.\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Custom Model for Text Generation in JavaScript\nDESCRIPTION: This snippet demonstrates how to select a specific AI model based on the service provider (OpenAI or Google) and use it for text generation. It includes error handling and model-specific configuration.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst model = service.getServiceSlug() === 'openai' ? 'gpt-4o' : 'gemini-1.5-pro';\ntry {\n\tconst candidates = await service.generateText(\n\t\t'What can I do with WordPress?',\n\t\t{\n\t\t\tfeature: 'my-test-feature',\n\t\t\tmodel,\n\t\t}\n\t);\n} catch ( error ) {\n\t// Handle the error.\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Text Content with Google AI Service in PHP\nDESCRIPTION: This snippet demonstrates how to generate text content using the Google AI service. It checks for service availability, retrieves the service, and generates text based on a prompt.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif ( ai_services()->is_service_available( 'google' ) ) {\n\t$service = ai_services()->get_available_service( 'google' );\n\ttry {\n\t\t$candidates = $service\n\t\t\t->get_model(\n\t\t\t\tarray(\n\t\t\t\t\t'feature'      => 'my-test-feature',\n\t\t\t\t\t'capabilities' => array( \\Felix_Arntz\\AI_Services\\Services\\API\\Enums\\AI_Capability::TEXT_GENERATION ),\n\t\t\t\t)\n\t\t\t)\n\t\t\t->generate_text( 'What can I do with WordPress?' );\n\t} catch ( Exception $e ) {\n\t\t// Handle the exception.\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Text with Any Available AI Service (Bash)\nDESCRIPTION: This command streams text generated by the first available and configured AI service for a given prompt, without specifying service or model slugs. Suitable for flexible use-cases where the provider can be abstracted. Requires at least one AI service with text generation enabled. Returns generated text; fails if no service is available.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-with-WP-CLI.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwp ai-services generate-text \"What can I do with WordPress?\" --feature=my-test-feature\n```\n\n----------------------------------------\n\nTITLE: Checking AI Service Availability Before Generating Text (Bash)\nDESCRIPTION: This Bash snippet checks if the 'google' AI service is available by querying its status using WP-CLI before running a text generation command. It ensures commands are only executed if the specified service is properly configured, preventing errors from unavailable services. Input is the service slug and prompt; output will either be the generated text or an availability message.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-with-WP-CLI.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nif [ \"$(wp ai-services get google --field=is_available)\" == \"true\" ]; then\n  wp ai-services generate-text google \"What can I do with WordPress?\" --feature=my-test-feature\nelse\n  echo \"The google service is not available.\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Generating AI Text Responses Using the WP-CLI Interface in Bash\nDESCRIPTION: This Bash snippet demonstrates how to generate an AI-powered response to a prompt using the WP-CLI interface provided by the AI Services plugin. The command invokes the 'ai-services generate-text' subcommand, optionally with a feature flag. Prerequisites include a properly installed and configured WP-CLI and the AI Services plugin. Inputs are the user prompt and an optional feature; output is the AI-generated response to stdout. Limitations involve proper authentication and service configuration inside WordPress.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwp ai-services generate-text \"What can I do with WordPress?\" --feature=my-test-feature\n```\n\n----------------------------------------\n\nTITLE: Disabling Streaming of WP-CLI AI Service Text Responses (PHP)\nDESCRIPTION: This PHP snippet disables streaming for text responses by applying the 'ai_services_wp_cli_use_streaming' filter. Place this filter in your WordPress site's custom plugin or theme to receive AI-generated text in complete chunks rather than as a live stream. No parameters required. Affects all WP-CLI AI text generation outputs site-wide.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-with-WP-CLI.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'ai_services_wp_cli_use_streaming', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Generation Configuration in PHP\nDESCRIPTION: This snippet shows how to customize the image generation configuration using the Image_Generation_Config class. It sets the number of candidates to generate and specifies the aspect ratio for the generated images.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Felix_Arntz\\AI_Services\\Services\\API\\Enums\\AI_Capability;\nuse Felix_Arntz\\AI_Services\\Services\\API\\Types\\Image_Generation_Config;\n\ntry {\n\t$model = $service\n\t\t->get_model(\n\t\t\tarray(\n\t\t\t\t'feature'          => 'my-test-feature',\n\t\t\t\t'capabilities'     => array( AI_Capability::IMAGE_GENERATION ),\n\t\t\t\t'generationConfig' => Image_Generation_Config::from_array(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'candidateCount' => 4,\n\t\t\t\t\t\t'aspectRatio'    => '16:9',\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\n\t// Generate an image using the model.\n} catch ( Exception $e ) {\n\t// Handle the exception.\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing AI Model Parameters via WordPress Filter – PHP\nDESCRIPTION: Demonstrates how to use the 'ai_services_model_params' filter in PHP to inject a custom system instruction for feature-specific usage of an AI model (e.g., 'my-movie-expert' with a 'google' model). Requires the AI Services plugin for WordPress. The filter provides access to all model parameters and the current service slug; key parameters include 'feature' and 'systemInstruction'. Returns modified parameters as an array; the 'feature' parameter cannot be changed via filter, only the others. Limitations: Only works on the server side, and the system instruction is injected dynamically based on context.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/readme.txt#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nadd_filter(\n\t'ai_services_model_params',\n\tfunction ( $params, $service ) {\n\t\tif ( 'my-movie-expert' === $params['feature'] && 'google' === $service ) {\n\t\t\t$params['systemInstruction']  = 'You are a movie expert. You can answer questions about movies, actors, directors, and movie references.';\n\t\t\t$params['systemInstruction'] .= ' If the user asks you about anything unrelated to movies, you should politely deny the request.';\n\t\t\t$params['systemInstruction'] .= ' You may use famous movie quotes in your responses to make the conversation more engaging.';\n\t\t}\n\t\treturn $params;\n\t},\n\t10,\n\t2\n);\n```\n\n----------------------------------------\n\nTITLE: Generating AI Text Responses Using WP-CLI Command for AI Services Plugin\nDESCRIPTION: This WP-CLI command demonstrates how to obtain an AI-generated response by invoking the plugin's built-in CLI support. It requires the ai-services plugin to be installed and active, and allows specifying the prompt directly, along with optional feature/context flags. The command outputs the AI response as standard output. Dependency is on working WP-CLI setup and plugin activation. Constraints include running on command line with sufficient permissions and proper environment variable/API key setup.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/readme.txt#_snippet_2\n\nLANGUAGE: WP-CLI\nCODE:\n```\nwp ai-services generate-text \"What can I do with WordPress?\" --feature=my-test-feature\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Multimodal Output in Text Generation - Felix_Arntz AI Services - PHP\nDESCRIPTION: This snippet demonstrates how to enable multimodal output (text and images) in text generation for compatible AI models, such as recent Google models. The 'outputModalities' parameter is specified in the generationConfig as part of get_model(), using AI_Capability constants for both TEXT_GENERATION and MULTIMODAL_OUTPUT. Requires an up-to-date version of the Felix_Arntz AI_Services plugin and a backend that supports multimodal output. Inputs are the intended modalities (e.g., 'text' and 'image'); the output is a model instance ready to return multimodal responses.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nuse Felix_Arntz\\\\AI_Services\\\\Services\\\\API\\\\Enums\\\\AI_Capability;\\nuse Felix_Arntz\\\\AI_Services\\\\Services\\\\API\\\\Types\\\\Text_Generation_Config;\\n\\ntry {\\n\\t$model = $service\\n\\t\\t->get_model(\\n\\t\\t\\tarray(\\n\\t\\t\\t\\t'feature'           => 'my-test-feature',\\n\\t\\t\\t\\t'capabilities'      => array( AI_Capability::TEXT_GENERATION, AI_Capability::MULTIMODAL_OUTPUT ),\\n\\t\\t\\t\\t'generationConfig'  => Text_Generation_Config::from_array(\\n\\t\\t\\t\\t\\tarray(\\n\\t\\t\\t\\t\\t\\t'outputModalities' => array( 'text', 'image' ),\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t),\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t// Generate text and images using the model.\\n} catch ( Exception $e ) {\\n\\t// Handle the exception.\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Generating Text Using a Specific AI Service via Datastore (JavaScript)\nDESCRIPTION: Shows how to safely access the 'ai-services/ai' datastore from WordPress's wp.data registry to check for a specific AI service (e.g., 'google'), and generate text asynchronously using service.generateText(). The snippet handles potential errors and awaits the AI-generated candidates. Requires WordPress's wp.data and aiServices JavaScript objects to be loaded.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst { isServiceAvailable, getAvailableService } = wp.data.select( 'ai-services/ai' );\nif ( isServiceAvailable( 'google' ) ) {\n\tconst service = getAvailableService( 'google' );\n\ttry {\n\t\tconst candidates = await service.generateText(\n\t\t\t'What can I do with WordPress?',\n\t\t\t{ feature: 'my-test-feature' }\n\t\t);\n\t} catch ( error ) {\n\t\t// Handle the error.\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Google API Key Control with PHP and WordPress Settings API\nDESCRIPTION: This PHP snippet demonstrates how to use the AI Services plugin's API_Key_Control class to add an API key input field for the Google AI service into the WordPress 'Settings > General' screen. It creates a Service_Entity instance, ensures the option slug is whitelisted, and then registers the API_Key_Control instance's render_input method as the callback for the settings field. Dependencies are the Felix_Arntz\\AI_Services plugin, Service_Entity, and WordPress Settings API. Required parameters: the target service slug ('google') and option slugs. The code is designed for WordPress admin and manipulates global allowed options; it expects the relevant plugin files to be loaded and is intended for traditional PHP admin screens.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Rendering-AI-API-Key-Controls-in-Your-Own-UI.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Felix_Arntz\\AI_Services\\Services\\Components\\API_Key_Control;\\nuse Felix_Arntz\\AI_Services\\Services\\Entities\\Service_Entity;\\n\\nadd_action(\\n\\t'admin_init',\\n\\tfunction () {\\n\\t\\t// See below for why this global is included here.\\n\\t\\tglobal $new_allowed_options;\\n\\n\\t\\tadd_settings_section(\\n\\t\\t\\t'ais_api_keys',\\n\\t\\t\\t__( 'API Keys', 'ai-services' ),\\n\\t\\t\\tnull,\\n\\t\\t\\t'general'\\n\\t\\t);\\n\\n\\t\\t$service_entity = new Service_Entity( ai_services(), 'google' );\\n\\n\\t\\t$option_slugs = $service_entity->get_field_value( 'authentication_option_slugs' );\\n\\t\\tforeach ( $option_slugs as $option_slug ) {\\n\\t\\t\\t/*\\n\\t\\t\\t * This workaround is necessary since WordPress Core does not provide a function for this specifically.\\n\\t\\t\\t * The `register_setting()` function is not suitable here, as the setting will already be registered in\\n\\t\\t\\t * WordPress generally, so calling it again here just to assign it to the allowlist would cause problems.\\n\\t\\t\\t */\\n\\t\\t\\t$new_allowed_options['general'][] = $option_slug;\\n\\t\\t}\\n\\n\\t\\t$field_id      = 'ais-api-key-' . $service_entity->get_field_value( 'slug' );\\n\\t\\t$field_control = new API_Key_Control(\\n\\t\\t\\t$service_entity,\\n\\t\\t\\tget_option( $option_slug ),\\n\\t\\t\\tarray(\\n\\t\\t\\t\\t'id_attr'   => $field_id,\\n\\t\\t\\t\\t'name_attr' => $option_slug,\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tadd_settings_field(\\n\\t\\t\\t$field_id,\\n\\t\\t\\t$service_entity->get_field_value( 'name' ),\\n\\t\\t\\tarray( $field_control, 'render_input' ),\\n\\t\\t\\t'general',\\n\\t\\t\\t'ais_api_keys',\\n\\t\\t\\tarray( 'label_for' => $field_id )\\n\\t\\t);\\n\\t}\\n);\n```\n\n----------------------------------------\n\nTITLE: Selecting a Specific Available AI Service (JavaScript)\nDESCRIPTION: Retrieves a particular AI service by slug using the getAvailableService selector, after confirming availability with isServiceAvailable. Demonstrates the recommended check sequence before acting on the service. Relies on WordPress's wp.data and the 'ai-services/ai' store being accessible.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst { isServiceAvailable, getAvailableService } = wp.data.select( 'ai-services/ai' );\nif ( isServiceAvailable( 'google' ) ) {\n\tconst service = getAvailableService( 'google' );\n\t// Do something with the AI service.\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Function Declarations for AI Model in PHP\nDESCRIPTION: This snippet demonstrates how to define function declarations for an AI model to enable function calling. It creates a weather forecasting tool that accepts location and timeframe parameters, then sends a query to the AI service.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Felix_Arntz\\AI_Services\\Services\\API\\Enums\\AI_Capability;\nuse Felix_Arntz\\AI_Services\\Services\\API\\Enums\\Content_Role;\nuse Felix_Arntz\\AI_Services\\Services\\API\\Types\\Content;\nuse Felix_Arntz\\AI_Services\\Services\\API\\Types\\Parts;\nuse Felix_Arntz\\AI_Services\\Services\\API\\Types\\Tools;\n\n$function_declarations = array(\n\tarray(\n\t\t'name'        => 'get_weather',\n\t\t'description' => 'Returns the weather for a given location and a given timeframe.',\n\t\t'parameters'  => array(\n\t\t\t'type'       => 'object',\n\t\t\t'properties' => array(\n\t\t\t\t'location'  => array(\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'description' => 'The location to get the weather forecast for, such as a city or region.',\n\t\t\t\t),\n\t\t\t\t'timeframe' => array(\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'enum'        => array( 'today', 'tonight', 'tomorrow', 'next-week' ),\n\t\t\t\t\t'description' => 'The timeframe for when to get the weather forecast for.'\n\t\t\t\t),\n\t\t\t),\n\t\t),\n\t),\n);\n\n$tools = new Tools();\n$tools->add_function_declarations_tool( $function_declarations );\n$parts = new Parts();\n$parts->add_text_part( 'What is the weather like today in Austin?' );\n$content = new Content( Content_Role::USER, $parts );\ntry {\n\t$candidates = $service\n\t\t->get_model(\n\t\t\tarray(\n\t\t\t\t'feature'      => 'my-test-feature',\n\t\t\t\t'tools'        => $tools,\n\t\t\t\t'capabilities' => array(\n\t\t\t\t\tAI_Capability::FUNCTION_CALLING,\n\t\t\t\t\tAI_Capability::TEXT_GENERATION,\n\t\t\t\t),\n\t\t\t)\n\t\t)\n\t\t->generate_text( $content );\n} catch ( Exception $e ) {\n\t// Handle the exception.\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Any Available AI Service with Exception Handling in PHP\nDESCRIPTION: This snippet demonstrates an alternative approach to retrieve any available AI service with text generation capability using a try-catch block to handle potential exceptions if no suitable service is available.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Felix_Arntz\\AI_Services\\Services\\API\\Enums\\AI_Capability;\n\ntry {\n\t$service = ai_services()->get_available_service( array( 'capabilities' => array( AI_Capability::TEXT_GENERATION ) ) );\n} catch ( InvalidArgumentException $e ) {\n\t// Handle the exception.\n}\n// Do something with the AI service.\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Generation via Model Configuration - Felix_Arntz AI Services - PHP\nDESCRIPTION: This code example shows how to customize the AI model's behavior for text generation using a 'generationConfig' and an optional 'systemInstruction'. Configuration options like max output tokens and temperature are provided through an instance of Text_Generation_Config created from an array. The snippet requires use of AI_Capability, Text_Generation_Config, and proper exception handling. Inputs to get_model() should include desired feature, required capabilities, custom configuration, and a system instruction string when needed. Output is a ready-to-use AI model instance with customized behavior.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nuse Felix_Arntz\\\\AI_Services\\\\Services\\\\API\\\\Enums\\\\AI_Capability;\\nuse Felix_Arntz\\\\AI_Services\\\\Services\\\\API\\\\Types\\\\Text_Generation_Config;\\n\\ntry {\\n\\t$model = $service\\n\\t\\t->get_model(\\n\\t\\t\\tarray(\\n\\t\\t\\t\\t'feature'           => 'my-test-feature',\\n\\t\\t\\t\\t'capabilities'      => array( AI_Capability::TEXT_GENERATION ),\\n\\t\\t\\t\\t'generationConfig'  => Text_Generation_Config::from_array(\\n\\t\\t\\t\\t\\tarray(\\n\\t\\t\\t\\t\\t\\t'maxOutputTokens' => 128,\\n\\t\\t\\t\\t\\t\\t'temperature'     => 0.2,\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\t'systemInstruction' => 'You are a WordPress expert. You should respond exclusively to prompts and questions about WordPress.',\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t// Generate text using the model.\\n} catch ( Exception $e ) {\\n\\t// Handle the exception.\\n}\\n?>\n```\n\n----------------------------------------\n\nTITLE: Processing Image Response Candidates in JavaScript\nDESCRIPTION: Code to extract image URL from response candidates, handling both inline data URLs and file URIs from the image generation response. This processes the first candidate's content parts to find either inlineData or fileData.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nlet imageUrl = '';\nfor ( const part of candidates[ 0 ].content.parts ) {\n\tif ( part.inlineData ) {\n\t\timageUrl = part.inlineData.data; // Data URL.\n\t\tbreak;\n\t}\n\tif ( part.fileData ) {\n\t\timageUrl = part.fileData.fileUri; // Actual URL. May have limited TTL (often 1 hour).\n\t\tbreak;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Generated Image URL from Candidates in PHP\nDESCRIPTION: This code snippet demonstrates how to extract the image URL from the first candidate in the response. It handles both inline data (base64 encoded) and file data (actual URL) types.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$image_url = '';\nforeach ( $candidates->get( 0 )->get_content()->get_parts() as $part ) {\n\tif ( $part instanceof \\Felix_Arntz\\AI_Services\\Services\\API\\Types\\Parts\\Inline_Data_Part ) {\n\t\t$image_url = $part->get_base64_data(); // Data URL.\n\t\tbreak;\n\t}\n\tif ( $part instanceof \\Felix_Arntz\\AI_Services\\Services\\API\\Types\\Parts\\File_Data_Part ) {\n\t\t$image_url = $part->get_file_uri(); // Actual URL. May have limited TTL (often 1 hour).\n\t\tbreak;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Image with Specific Model in OpenAI Service (Bash)\nDESCRIPTION: This WP-CLI command directs the 'openai' AI service to use the 'dall-e-2' model for generating an image from a user description. The user provides a service slug, model slug, prompt, and any additional parameters. Requires ai-services plugin and valid API setup. Outputs an image generated by the specified model.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-with-WP-CLI.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nwp ai-services generate-image openai dall-e-2 \"Photorealistic image with an aerial shot of a Cavalier King Charles Spaniel tanning himself at an oasis in a desert.\" --feature=my-test-feature\n```\n\n----------------------------------------\n\nTITLE: Altering Capability Requirements for Accessing AI Services - WordPress PHP\nDESCRIPTION: This PHP snippet customizes which WordPress Core capabilities are required to receive a specific plugin capability. By using the ais_load_services_capabilities action, it upgrades the ais_access_services requirement to manage_options, usually restrict­ing AI features to administrators. Requires WordPress and the AI Services plugin. Parameters: $capability_controller (capability controller instance). Input: none. Output: updated capability mappings. Limitation: Only affects ais_access_services capability.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Customizing-the-Available-Capabilities.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n\t'ais_load_services_capabilities',\n\tfunction ( $capability_controller ) {\n\t\t$capability_controller->grant_cap_for_base_caps(\n\t\t\t'ais_access_services',\n\t\t\tarray( 'manage_options' )\n\t\t);\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Generating AI Text Responses Using a Specific Provider (Google) with AI Services Plugin API in PHP\nDESCRIPTION: This PHP code demonstrates how to target a specific AI provider (e.g., Google) with the AI Services plugin, ensuring precise integration with a chosen backend. It checks for the availability of the named provider, selects the appropriate service, and follows the typical flow of querying, processing, and outputting an AI-generated response. All relevant dependencies from the plugin must be present (namespaces, helper classes). Inputs include the service slug, prompt, and feature metadata; output is echoed text. Limitations comprise dependency on correct provider configuration and error handling.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/readme.txt#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Felix_Arntz\\AI_Services\\Services\\API\\Enums\\AI_Capability;\nuse Felix_Arntz\\AI_Services\\Services\\API\\Helpers;\n\nif ( ai_services()->is_service_available( 'google' ) ) {\n\t$service = ai_services()->get_available_service( 'google' );\n\ttry {\n\t\t$candidates = $service\n\t\t\t->get_model(\n\t\t\t\tarray(\n\t\t\t\t\t'feature'      => 'my-test-feature',\n\t\t\t\t\t'capabilities' => array( AI_Capability::TEXT_GENERATION ),\n\t\t\t\t)\n\t\t\t)\n\t\t\t->generate_text( 'What can I do with WordPress?' );\n\n\t\t$text = Helpers::get_text_from_contents(\n\t\t\tHelpers::get_candidate_contents( $candidates )\n\t\t);\n\n\t\techo $text;\n\t} catch ( Exception $e ) {\n\t\t// Handle the exception.\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Preferred AI Service by Multiple Slugs (JavaScript)\nDESCRIPTION: Selects a preferred AI service from multiple possible slugs ('google', 'openai') using hasAvailableServices and getAvailableService. This flexible selection pattern is useful for plugins supporting several third-party AI providers based on user configuration.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst SERVICE_ARGS = { slugs: [ 'google', 'openai' ] };\nconst { hasAvailableServices, getAvailableService } = wp.data.select( 'ai-services/ai' );\nif ( hasAvailableServices( SERVICE_ARGS ) ) {\n\tconst service = getAvailableService( SERVICE_ARGS );\n\t// Do something with the AI service.\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing a Simple Text Response from an AI Model in JSON\nDESCRIPTION: This snippet shows the format of a simple text response from an AI model. It uses the Content data type with a \"model\" role and contains a single text part with the model's response.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Technical-Concepts-of-AI-Services.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"role\": \"model\",\n\t\"parts\": [\n\t\t{\n\t\t\t\"text\": \"WordPress is the most popular content management system in the world.\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating AI Text with a Specific Service in PHP via WordPress API\nDESCRIPTION: This PHP snippet focuses on generating AI-generated text from a specifically chosen AI provider—here, the 'google' service—via the plugin's PHP API. It checks the service's availability, selects it, and performs text generation using a given feature, handling exceptions as required. Dependencies include the AI Services plugin, required classes, and proper configuration of the named service. Inputs are the prompt string and the service identifier; output is the generated text from the specified provider. If the named service isn't configured or available, the code will not proceed.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Felix_Arntz\\AI_Services\\Services\\API\\Enums\\AI_Capability;\nuse Felix_Arntz\\AI_Services\\Services\\API\\Helpers;\n\nif ( ai_services()->is_service_available( 'google' ) ) {\n  $service = ai_services()->get_available_service( 'google' );\n  try {\n    $candidates = $service\n      ->get_model(\n        array(\n          'feature'      => 'my-test-feature',\n          'capabilities' => array( AI_Capability::TEXT_GENERATION ),\n        )\n      )\n      ->generate_text( 'What can I do with WordPress?' );\n\n    $text = Helpers::get_text_from_contents(\n      Helpers::get_candidate_contents( $candidates )\n    );\n\n    echo $text;\n  } catch ( Exception $e ) {\n    // Handle the exception.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Response Candidates from an AI Model in JSON\nDESCRIPTION: This snippet illustrates how AI model responses may be wrapped in an array of candidates, each containing a Content object. This format allows the AI service to provide multiple alternative responses, which can be selected from based on application needs.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Technical-Concepts-of-AI-Services.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"content\": {\n\t\t\t\"role\": \"model\",\n\t\t\t\"parts\": [\n\t\t\t\t{\n\t\t\t\t\t\"text\": \"WordPress is the most popular content management system in the world.\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t// Other properties of the candidate.\n\t},\n\t// Other candidates.\n]\n```\n\n----------------------------------------\n\nTITLE: Customizing AI Text Generation Configuration in JavaScript\nDESCRIPTION: This snippet illustrates how to customize the default text generation configuration when retrieving an AI model. It shows setting generation config parameters and a system instruction to guide the model's behavior.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst enums = aiServices.ai.enums;\n\ntry {\n\tconst model = service.getModel(\n\t\t{\n\t\t\tfeature: 'my-test-feature',\n\t\t\tcapabilities: [ enums.AiCapability.TEXT_GENERATION ],\n\t\t\tgenerationConfig: {\n\t\t\t\tmaxOutputTokens: 128,\n\t\t\t\ttemperature: 0.2,\n\t\t\t},\n\t\t\tsystemInstruction: 'You are a WordPress expert. You should respond exclusively to prompts and questions about WordPress.',\n\t\t}\n\t);\n\n\t// Generate text using the model.\n} catch ( error ) {\n\t// Handle the error.\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting AI Services JavaScript API Availability (JavaScript)\nDESCRIPTION: Checks if the AI Services JavaScript API has been loaded by verifying the existence of window.aiServices.ai. This guard ensures that AI-dependent code executes only when the API is available, supporting progressive enhancement in the plugin's client-side logic.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nif ( window.aiServices && window.aiServices.ai ) {\n\t// Run AI-dependent logic.\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Any AI Service by Capability Without Capability Check (JavaScript)\nDESCRIPTION: Directly attempts to retrieve an AI service matching certain capabilities using getAvailableService. Only proceeds if the returned service is not null, serving as a concise form where explicit capability presence checks are not required.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst enums = aiServices.ai.enums;\n\nconst SERVICE_ARGS = { capabilities: [ enums.AiCapability.TEXT_GENERATION ] };\nconst { hasAvailableServices, getAvailableService } = wp.data.select( 'ai-services/ai' );\nconst service = getAvailableService( SERVICE_ARGS );\nif ( service !== null ) {\n\t// Do something with the AI service.\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Key Controls for All AI Services in React (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a React component for displaying API key controls for every registered AI service using the AI Services plugin's React UI component. It dynamically retrieves all services and their API keys from the datastore and maps them to individual APIKeyControl UI elements. Dependencies include @wordpress/data, @wordpress/element, and the aiServices global. The onChange callback updates the local state per service slug; no database persistence is performed by default. For saving to the backend, a separate action must be called after updates.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Rendering-AI-API-Key-Controls-in-Your-Own-UI.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/**\\n * WordPress dependencies\\n */\\nimport { useDispatch, useSelect } from '@wordpress/data';\\nimport { useCallback } from '@wordpress/element';\\n\\n/**\\n * AI Services dependencies\\n */\\nconst { store: aiSettingsStore } = window.aiServices.settings;\\nconst { ApiKeyControl } = window.aiServices.components;\\n\\nconst EMPTY_ARRAY = [];\\n\\nfunction MyApiKeyControlList() {\\n\\tconst services = useSelect( ( select ) => {\\n\\t\\tconst { getServices, getApiKey } = select( aiSettingsStore );\\n\\t\\tif ( getServices() === undefined ) { // Loading state.\\n\\t\\t\\treturn EMPTY_ARRAY;\\n\\t\\t}\\n\\t\\treturn Object.values( getServices() ).map( ( service ) => {\\n\\t\\t\\treturn {\\n\\t\\t\\t\\t...service,\\n\\t\\t\\t\\tapiKey: getApiKey( service.slug ),\\n\\t\\t\\t};\\n\\t\\t} );\\n\\t} );\\n\\tconst { setApiKey } = useDispatch( aiSettingsStore );\\n\\n\\t// The callback receives the service slug as second parameter.\\n\\tconst onChangeApiKey = useCallback(\\n\\t\\t( newApiKey, serviceSlug ) => setApiKey( serviceSlug, newApiKey ),\\n\\t\\t[ setApiKey ]\\n\\t);\\n\\n\\treturn (\\n\\t\\t<>\\n\\t\\t\\t{ services.map( ( { apiKey, ...service } ) => (\\n\\t\\t\\t\\t<ApiKeyControl\\n\\t\\t\\t\\t\\tkey={ service.slug }\\n\\t\\t\\t\\t\\tservice={ service }\\n\\t\\t\\t\\t\\tapiKey={ apiKey }\\n\\t\\t\\t\\t\\tonChangeApiKey={ onChangeApiKey }\\n\\t\\t\\t\\t/>\\n\\t\\t\\t) ) }\\n\\t\\t</>\\n\\t);\\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Text via Model Instance for a Specific Capability (JavaScript)\nDESCRIPTION: Illustrates the explicit sequence of retrieving a model instance from a service using service.getModel, passing in features and required capabilities, and then generating text by calling model.generateText(). Error handling is included for asynchronous operations. Dependencies include the aiServices global, WordPress wp.data, and appropriate AI service configuration.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst enums = aiServices.ai.enums;\nconst { isServiceAvailable, getAvailableService } = wp.data.select( 'ai-services/ai' );\nif ( isServiceAvailable( 'google' ) ) {\n\tconst service = getAvailableService( 'google' );\n\ttry {\n\t\tconst model = service.getModel(\n\t\t\t{\n\t\t\t\tfeature: 'my-test-feature',\n\t\t\t\tcapabilities: [ enums.AiCapability.TEXT_GENERATION ],\n\t\t\t}\n\t\t);\n\t\tconst candidates = await model.generateText(\n\t\t\t'What can I do with WordPress?'\n\t\t);\n\t} catch ( error ) {\n\t\t// Handle the error.\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering OpenAI API Key Control with React Component (JavaScript)\nDESCRIPTION: This code snippet defines a React component for rendering the API key control for the OpenAI service using the AI Services plugin's React UI component. It utilizes the WordPress data store ('ai-services/settings') to get and update the API key in application state. Dependencies include @wordpress/data and @wordpress/element. Inputs are service identifier ('openai') and changes to the API key state via setApiKey. The output is a UI field for editing the API key; however, the code only updates local state and does not persist to the database. Saving state to the backend requires additional steps described elsewhere.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Rendering-AI-API-Key-Controls-in-Your-Own-UI.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/**\\n * WordPress dependencies\\n */\\nimport { useDispatch, useSelect } from '@wordpress/data';\\nimport { useCallback } from '@wordpress/element';\\n\\n/**\\n * AI Services dependencies\\n */\\nconst { store: aiSettingsStore } = window.aiServices.settings;\\nconst { ApiKeyControl } = window.aiServices.components;\\n\\nfunction MyOpenAiApiKeyControl() {\\n\\tconst service = useSelect( ( select ) =>\\n\\t\\tselect( aiSettingsStore ).getService( 'openai' )\\n\\t);\\n\\tconst apiKey = useSelect( ( select ) =>\\n\\t\\tselect( aiSettingsStore ).getApiKey( 'openai' )\\n\\t);\\n\\tconst { setApiKey } = useDispatch( aiSettingsStore );\\n\\n\\tconst onChangeApiKey = useCallback(\\n\\t\\t( newApiKey ) => setApiKey( 'openai', newApiKey ),\\n\\t\\t[ setApiKey ]\\n\\t);\\n\\n\\treturn (\\n\\t\\t<ApiKeyControl\\n\\t\\t\\tservice={ service }\\n\\t\\t\\tapiKey={ apiKey }\\n\\t\\t\\tonChangeApiKey={ onChangeApiKey }\\n\\t\\t/>\\n\\t);\\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Image with Any Available AI Service (Bash)\nDESCRIPTION: This WP-CLI command generates an image using the first capable and available AI service, without explicitly naming a service or model. Relies on the ai-services plugin's default service selection. Inputs are just the descriptive prompt and optional parameters. Output is a generated image if a supporting service is configured, or an error if not.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-with-WP-CLI.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nwp ai-services generate-image \"Photorealistic image with an aerial shot of a Cavalier King Charles Spaniel tanning himself at an oasis in a desert.\" --feature=my-test-feature\n```\n\n----------------------------------------\n\nTITLE: Enqueueing AI Services JavaScript API in WordPress (PHP)\nDESCRIPTION: Demonstrates how to conditionally enqueue a plugin JavaScript file with the 'ais-ai' AI Services API as a dependency if the AI Services plugin is active. This function should be used in WordPress hooks like 'wp_enqueue_scripts' or 'admin_enqueue_scripts'. Ensures scripts are only loaded if the AI Services PHP function exists, improving performance by avoiding unnecessary asset loading.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction myplugin_enqueue_ai_script() {\n\t// Check if the AI Services plugin is active.\n\tif ( ! function_exists( 'ai_services' ) ) {\n\t\treturn;\n\t}\n\twp_enqueue_script(\n\t\t'myplugin-ai-script',\n\t\tplugin_dir_url( __FILE__ ) . 'js/ai-script.js',\n\t\tarray( 'ais-ai' )\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-modal Prompt with Text and Image in JSON\nDESCRIPTION: This snippet shows how to format a multi-modal prompt containing both text and an image. It demonstrates the Content structure with multiple parts of different types, allowing for complex interactions like asking an AI to describe an image.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Technical-Concepts-of-AI-Services.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"role\": \"user\",\n\t\"parts\": [\n\t\t{\n\t\t\t\"text\": \"Please describe this image.\"\n\t\t},\n\t\t{\n\t\t\t\"mimeType\": \"image/jpeg\",\n\t\t\t\"fileUri\": \"https://example.com/image.jpg\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Enqueueing Plugin Script with Optional AI Dependency (PHP)\nDESCRIPTION: Illustrates an approach to optionally add the AI Services JavaScript API as a dependency for a plugin script. The dependency is included only if the AI Services plugin is active by checking the ai_services() PHP function. The resulting $dependencies array is used in wp_enqueue_script for robust, performance-conscious enhancement.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction myplugin_enqueue_script_with_optional_ai() {\n\t$dependencies = array();\n\n\t// Add AI script dependency only if the AI Services plugin is active.\n\tif ( function_exists( 'ai_services' ) ) {\n\t\t$dependencies[] = 'ais-ai';\n\t}\n\n\twp_enqueue_script(\n\t\t'myplugin-ai-script',\n\t\tplugin_dir_url( __FILE__ ) . 'js/ai-script.js',\n\t\t$dependencies\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Enqueuing AI Services React Assets in WordPress Admin (PHP)\nDESCRIPTION: This snippet demonstrates how to enqueue the required scripts and stylesheet so that the AI Services React-based API key controls can be used in a custom plugin administration screen. The assets 'ais-settings' and 'ais-components' must be loaded for component and datastore availability. No parameters are expected. It should be called within the appropriate admin screen action.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Rendering-AI-API-Key-Controls-in-Your-Own-UI.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwp_enqueue_script( 'ais-settings' );\\nwp_enqueue_script( 'ais-components' );\\nwp_enqueue_style( 'ais-components' );\n```\n\n----------------------------------------\n\nTITLE: Debounced Saving of API Key Updates in React (JavaScript)\nDESCRIPTION: This code demonstrates how to debounce API key saves so that changes are not immediately and repeatedly sent to the backend with every keystroke. It uses the 'useDebounce' hook from '@wordpress/compose' to throttle saveSettings calls, set at 500 ms in this example. The debounced function is invoked within an onChange handler for API key input. The snippet must be integrated into an existing React setup with the required AI Services plugin and WordPress compose/data dependencies.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Rendering-AI-API-Key-Controls-in-Your-Own-UI.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n/*\\n * `useDebounce` can be imported from `@wordpress/compose`.\\n * Here it is used to only saved at most every 500 milliseconds.\\n */\\nconst debouncedSaveSettings = useDebounce( saveSettings, 500 );\\n\\nconst onChangeApiKey = useCallback(\\n\\t( newApiKey, serviceSlug ) => {\\n\\t\\tsetApiKey( serviceSlug, newApiKey );\\n\\t\\tdebouncedSaveSettings();\\n\\t},\\n\\t[ setApiKey ]\\n);\n```\n\n----------------------------------------\n\nTITLE: Safely Retrieving Candidate Text with Helper Methods - Felix_Arntz AI Services - PHP\nDESCRIPTION: This snippet utilizes the AI Services Helper class to extract text content from a candidates collection in a concise and robust way. It leverages static helper methods to both obtain candidate contents and derive a text string from them, simplifying error handling in cases where no textual content exists. Required dependencies include the Felix_Arntz AI_Services' Helpers class, and a valid candidates instance as input, resulting in the extracted text as a string.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nuse Felix_Arntz\\\\AI_Services\\\\Services\\\\API\\\\Helpers;\\n\\n$text = Helpers::get_text_from_contents(\\n\\tHelpers::get_candidate_contents( $candidates )\\n);\\n?>\n```\n\n----------------------------------------\n\nTITLE: Disabling Streaming for AI Services WP-CLI Command via Filter – PHP\nDESCRIPTION: This snippet disables streaming for the 'wp ai-services generate-text' WP-CLI command by hooking the 'ai_services_wp_cli_use_streaming' filter and returning false. Intended for advanced users of the AI Services plugin who wish to display complete text responses at once, rather than in a streamed fashion. Requires the plugin and WP-CLI. No parameters; the filter should return a boolean. By setting to false, responses will be returned in entirety only after model processing completes. This may delay feedback compared to the default behavior.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/readme.txt#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nadd_filter( 'ai_services_wp_cli_use_streaming', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Generation Configuration in JavaScript\nDESCRIPTION: Example of configuring image generation parameters using generationConfig object, including setting candidate count and aspect ratio. Shows how to initialize a model with specific image generation capabilities and configuration.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst enums = aiServices.ai.enums;\n\ntry {\n\tconst model = service.getModel(\n\t\t{\n\t\t\tfeature: 'my-test-feature',\n\t\t\tcapabilities: [ enums.AiCapability.IMAGE_GENERATION ],\n\t\t\tgenerationConfig: {\n\t\t\t\tcandidateCount: 4,\n\t\t\t\taspectRatio: '16:9',\n\t\t\t},\n\t\t}\n\t);\n\n\t// Generate an image using the model.\n} catch ( error ) {\n\t// Handle the error.\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Access for Specific AI Services with Meta Capability Callback - WordPress PHP\nDESCRIPTION: This PHP snippet demonstrates setting a meta mapping callback for ais_access_service using ais_load_services_capabilities. It restricts the 'openai' service to users with both ais_access_services and manage_options, while all other services require only ais_access_services. Requires WordPress and AI Services plugin. Parameters: $capability_controller, user_id (int), service_slug (string). Input: user/service context. Output: relevant capability list. Limitation: Only affects access to the 'openai' service.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Customizing-the-Available-Capabilities.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n\t'ais_load_services_capabilities',\n\tfunction ( $capability_controller ) {\n\t\t$capability_controller->set_meta_map_callback(\n\t\t\t'ais_access_service',\n\t\t\tfunction ( int $user_id, string $service_slug ) {\n\t\t\t\t$required_base_caps = array( 'ais_access_services' );\n\t\t\t\tif ( 'openai' === $service_slug ) {\n\t\t\t\t\t$required_base_caps[] = 'manage_options';\n\t\t\t\t}\n\t\t\t\treturn $required_base_caps;\n\t\t\t}\n\t\t);\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Checking AI Service Availability Before Generating Image (Bash)\nDESCRIPTION: This Bash script checks if the 'google' AI service is available before attempting image generation, preventing errors from unconfigured or unavailable services. Uses WP-CLI to check service status and then conditionally generates the image. Inputs are service status and image prompt; outputs generated image or unavailability message.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-with-WP-CLI.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nif [ \"$(wp ai-services get google --field=is_available)\" == \"true\" ]; then\n  wp ai-services generate-image google \"Photorealistic image with an aerial shot of a Cavalier King Charles Spaniel tanning himself at an oasis in a desert.\" --feature=my-test-feature\nelse\n  echo \"The google service is not available.\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Capability Granting for Base Plugin Capabilities - WordPress PHP\nDESCRIPTION: This PHP example sets the required WordPress Core capabilities for the main plugin capabilities to empty arrays via the ais_load_services_capabilities hook. It prevents any users from automatically receiving ais_access_services or ais_manage_services based on Core capabilities. Dependencies: WordPress, AI Services plugin. Input: none. Output: neither capability is auto-granted. Limitation: Other mechanisms are needed to grant users these plugin capabilities.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Customizing-the-Available-Capabilities.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n\t'ais_load_services_capabilities',\n\tfunction ( $capability_controller ) {\n\t\t$capability_controller->grant_cap_for_base_caps( 'ais_access_services', array() );\n\t\t$capability_controller->grant_cap_for_base_caps( 'ais_manage_services', array() );\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Providing AI Service API Keys Programmatically – PHP\nDESCRIPTION: This code snippet shows how to hardcode an API key for the Google AI service in the AI Services plugin using the 'pre_option_ais_google_api_key' filter. Useful where admins do not want to expose API key controls in the site’s UI. The anonymous function returns a hardcoded API key string. This pattern is extensible to other supported services (e.g., OpenAI, Anthropic) by changing the service slug. Limitations: All users with access to this code will have access to the API key.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/readme.txt#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nadd_filter(\n\t'pre_option_ais_google_api_key',\n\tfunction () {\n\t\treturn 'my-google-api-key';\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Access to AI Playground via Capability Callback - WordPress PHP\nDESCRIPTION: This PHP example disables access to AI Playground by mapping the ais_use_playground meta capability to the special Core capability do_not_allow using a callback in ais_load_services_capabilities. Dependencies: WordPress, AI Services plugin. Input: none. Output: Prevents any user from accessing the specified admin screen. Limitation: Playground feature becomes inaccessible to all.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Customizing-the-Available-Capabilities.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n\t'ais_load_services_capabilities',\n\tfunction ( $capability_controller ) {\n\t\t$capability_controller->set_meta_map_callback(\n\t\t\t'ais_use_playground',\n\t\t\tfunction () {\n\t\t\t\treturn array( 'do_not_allow' );\n\t\t\t}\n\t\t);\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Images with AI Service Plugin (JavaScript)\nDESCRIPTION: This code queries an AI service for image generation using the generateImage method. The example checks for available services supporting image generation capability, and if found, generates an image based on a descriptive prompt. Prerequisites include aiServices.ai.enums and integration with the wp.data.select API, and inputs/outputs are text prompts and array of AI-candidate images. Error handling covers failed or unavailable service states.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst enums = aiServices.ai.enums;\n\nconst SERVICE_ARGS = { capabilities: [ enums.AiCapability.IMAGE_GENERATION ] };\nconst { hasAvailableServices, getAvailableService } = wp.data.select( 'ai-services/ai' );\nif ( hasAvailableServices( SERVICE_ARGS ) ) {\n\tconst service = getAvailableService( SERVICE_ARGS );\n\n\ttry {\n\t\tconst candidates = await service.generateImage(\n\t\t\t'Photorealistic image with an aerial shot of a Cavalier King Charles Spaniel tanning himself at an oasis in a desert.',\n\t\t\t{\n\t\t\t\tfeature: 'my-test-feature',\n\t\t\t\tcapabilities: [ enums.AiCapability.IMAGE_GENERATION ],\n\t\t\t}\n\t\t);\n\t} catch ( error ) {\n\t\t// Handle the error.\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling AI Services WordPress Assistant Chatbot via Filter – PHP\nDESCRIPTION: This PHP snippet enables the experimental WordPress Assistant chatbot in the AI Services plugin by hooking the 'ai_services_chatbot_enabled' filter and returning true. Requires the AI Services plugin to be installed and active. There are no input parameters; the filter simply needs to return a boolean. Enabling this feature makes the chatbot available throughout the WordPress admin. Limitation: Chatbot is disabled by default and considered experimental.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/readme.txt#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nadd_filter( 'ai_services_chatbot_enabled', '__return_true' );\n```\n\n----------------------------------------\n\nTITLE: Returning Function Response to AI Model in ai-services (JavaScript)\nDESCRIPTION: This snippet demonstrates how to provide a function's response back to the AI model as part of a subsequent interaction, maintaining conversational context by including previous prompts and function call history. Function results are returned using a special functionResponse object, and previous content is kept in order to preserve context. Dependencies include enums and a consistent structure for functionDeclarations and contents arrays for seamless interaction.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst enums = aiServices.ai.enums;\n\n// This should contain the same function declarations provided before.\nconst functionDeclarations = [\n\t// ...\n];\n\nconst tools = [ { functionDeclarations } ];\n\n/*\n * This should contain both the content object with the initial user prompt, and the content object with the function\n * call received by the AI model.\n */\nconst contents = [\n\t// ...\n];\n\n// This adds the function response to the overall prompt.\nconst content = {\n\trole: enums.ContentRole.USER,\n\tparts: [\n\t\t{\n\t\t\tfunctionResponse: {\n        id: functionCall.id,\n        name: functionCall.name,\n        response: functionResult,\n      },\n\t\t},\n\t]\n};\ncontents.push( content );\n\ntry {\n\tconst candidates = await service.generateText(\n\t\tcontents,\n\t\t{\n\t\t\tfeature: 'my-test-feature',\n\t\t\ttools: tools,\n\t\t\tcapabilities: [\n\t\t\t\tenums.AiCapability.FUNCTION_CALLING,\n\t\t\t\tenums.AiCapability.TEXT_GENERATION,\n\t\t\t],\n\t\t}\n\t);\n} catch ( error ) {\n\t// Handle the error.\n}\n```\n\n----------------------------------------\n\nTITLE: Processing AI Function Call Responses in PHP\nDESCRIPTION: This snippet shows how to process responses from an AI model that may contain text, function calls, or both. It extracts text content and function call parameters, then sets up a sample function result with weather data.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$text          = '';\n$function_call = null;\nforeach ( $candidates->get( 0 )->get_content()->get_parts() as $part ) {\n\tif ( $part instanceof \\Felix_Arntz\\AI_Services\\Services\\API\\Types\\Parts\\Text_Part ) {\n\t\tif ( $text !== '' ) {\n\t\t\t$text .= \"\\n\\n\";\n\t\t}\n\t\t$text .= $part->get_text();\n\t} elseif ( $part instanceof \\Felix_Arntz\\AI_Services\\Services\\API\\Types\\Parts\\Function_Call_Part ) {\n\t\t$function_call = array(\n\t\t\t'id'   => $part->get_id(),\n\t\t\t'name' => $part->get_name(),\n\t\t\t'args' => $part->get_args(),\n\t\t);\n\t}\n}\n\n// Business logic calling the relevant function...\n\n// The function result could have any shape, from a simple scalar value to a complex array of data.\n$function_result = array(\n\t'location' => array(\n\t\t'city'    => 'Austin',\n\t\t'state'   => 'TX',\n\t\t'country' => 'US',\n\t),\n\t'weather'  => array(\n\t\t'summary'          => 'sunny',\n\t\t'temperature_high' => 92,\n\t\t'temperature_low'  => 77,\n\t),\n);\n```\n\n----------------------------------------\n\nTITLE: Providing Function Declarations for AI-Assisted Function Calling (Bash)\nDESCRIPTION: This example demonstrates how to pass custom function declarations as JSON via WP-CLI to enable advanced function-calling features in AI models. The 'function_declarations' shell variable holds the JSON schema, which is injected into the 'generate-text' command with the '--function-declarations' flag. Requires properly formatted JSON; outputs AI-generated structured function call suggestions.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-with-WP-CLI.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nlocal function_declarations='[\n  {\n    \"name\": \"get_weather\",\n    \"description\": \"Returns the weather for today for a given location.\",\n    \"parameters\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"location\": {\n          \"type\":\"string\",\n          \"description\": \"The location to get the weather for, such as a city or region.\"\n        }\n      }\n    }\n  }\n]'\nwp ai-services generate-text \"What is the weather today in Austin?\" --feature=weather-info --function-declarations=\"$function_declarations\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Assistant Chatbot Using WordPress Filter in PHP\nDESCRIPTION: This PHP snippet demonstrates how to enable the experimental Assistant chatbot in a WordPress AI services plugin by applying a filter hook. To use it, add the code to your theme's functions.php file or a custom plugin. It registers the filter 'ai_services_chatbot_enabled' with a callback to '__return_true', thereby activating the chatbot feature. The filter can be toggled according to your site’s requirements. The chatbot is disabled by default, so this is required for activation.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Enabling-the-Assistant-Chatbot-Feature.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'ai_services_chatbot_enabled', '__return_true' );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Preferred AI Services in PHP\nDESCRIPTION: This snippet shows how to retrieve an AI service from a list of preferred services (Google or OpenAI in this case). It checks for availability before retrieving the service.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nif ( ai_services()->has_available_services( array( 'slugs' => array( 'google', 'openai' ) ) ) ) {\n\t$service = ai_services()->get_available_service( array( 'slugs' => array( 'google', 'openai' ) ) );\n\t// Do something with the AI service.\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific AI Service with Exception Handling in PHP\nDESCRIPTION: This snippet demonstrates an alternative approach to retrieve a specific AI service (Google) using a try-catch block to handle potential exceptions if the service is not available.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ntry {\n\t$service = ai_services()->get_available_service( 'google' );\n} catch ( InvalidArgumentException $e ) {\n\t// Handle the exception.\n}\n// Do something with the AI service.\n```\n\n----------------------------------------\n\nTITLE: Generating Text with a Specific Model in Google AI Service (Bash)\nDESCRIPTION: This command uses WP-CLI to generate text with the 'google' AI service, explicitly selecting the 'gemini-1.5-pro' model. The user supplies the prompt, service, model slugs, and any desired flags. Requires ai-services plugin, valid credentials, and model availability. Returns generated text from the specified model.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-with-WP-CLI.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwp ai-services generate-text google gemini-1.5-pro \"What can I do with WordPress?\" --feature=my-test-feature\n```\n\n----------------------------------------\n\nTITLE: Generating Image with Google AI Service via WP-CLI (Bash)\nDESCRIPTION: This command uses WP-CLI to generate an image from a descriptive prompt using the 'google' AI service. Requires the ai-services plugin, valid configuration, and image generation support in the service. Arguments are the service slug, prompt, and optional feature flag. Output is an AI-generated image.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-with-WP-CLI.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nwp ai-services generate-image google \"Photorealistic image with an aerial shot of a Cavalier King Charles Spaniel tanning himself at an oasis in a desert.\" --feature=my-test-feature\n```\n\n----------------------------------------\n\nTITLE: Processing AI Function Call Responses (JavaScript)\nDESCRIPTION: This code processes responses from the AI model that may include text and/or function call directives. It iterates through candidate response parts, extracting plain text into a variable and structured function call data into a functionCall object, which can then be executed in business logic. Constraints include handling both response types and preparing function result data for further use. This snippet is a key part of closing the loop on model-assisted business process integration.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet text = '';\nlet functionCall;\nfor ( const part of candidates[ 0 ].content.parts ) {\n\tif ( part.text ) {\n\t\tif ( text ) {\n\t\t\ttext += '\\n\\n';\n\t\t}\n\t\ttext += part.text;\n\t} else if ( part.functionCall ) {\n\t\tfunctionCall = {\n\t\t\tid: part.functionCall.id,\n\t\t\tname: part.functionCall.name,\n\t\t\targs: part.functionCall.args,\n\t\t};\n\t}\n}\n\n// Business logic calling the relevant function...\n\n// The function result could have any shape, from a simple scalar value to a complex array of data.\nconst functionResult = {\n\tlocation: {\n\t\tcity: 'Austin',\n\t\tstate: 'TX',\n\t\tcountry: 'US',\n\t},\n\tweather: {\n\t\tsummary: 'sunny',\n\t\ttemperature_high: 92,\n\t\ttemperature_low: 77,\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Saving AI Service API Keys to the Database via Store Action (JavaScript)\nDESCRIPTION: This snippet shows how to save API key changes from the WordPress datastore to the WordPress database using the AI Services plugin's store actions. It extracts the 'saveSettings' dispatch action and calls it from an onSave handler, typically tied to a Save button on an admin screen. No parameters are needed; the action saves all pending changes in the settings store. Required dependencies are the aiServices global and @wordpress/data.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Rendering-AI-API-Key-Controls-in-Your-Own-UI.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst { saveSettings } = useDispatch( aiSettingsStore );\\n\\nconst onSave = () => {\\n\\t// ... (other save logic related to your screen)\\n\\n\\tsaveSettings();\\n};\n```\n\n----------------------------------------\n\nTITLE: Formatting a Simple Text Prompt for AI Services in JSON\nDESCRIPTION: This snippet demonstrates how to format a simple text prompt in JSON using the Content data type. It includes the user role and a single text part, which is the standard format for sending basic text prompts to AI services.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Technical-Concepts-of-AI-Services.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"role\": \"user\",\n\t\"parts\": [\n\t\t{\n\t\t\t\"text\": \"What can I do with WordPress?\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Text with Google AI Service via WP-CLI (Bash)\nDESCRIPTION: This command generates text content by invoking the google AI service through the WP-CLI 'generate-text' subcommand. It requires WP-CLI and the ai-services plugin configured with valid credentials for the 'google' service. The '--feature' parameter specifies the AI feature in use, while the text prompt is passed as an argument. Input is the prompt and optional parameters; output is streamed/generated text.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-with-WP-CLI.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp ai-services generate-text google \"What can I do with WordPress?\" --feature=my-test-feature\n```\n\n----------------------------------------\n\nTITLE: Generating Text Response with Specified Capabilities (JavaScript)\nDESCRIPTION: Generates a text response from an AI service using the generateText method, optionally passing features and capabilities (such as 'text_generation'). The snippet demonstrates error handling for the asynchronous AI call. This is the recommended approach for generating content if an appropriate service is already available.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-JavaScript.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst enums = aiServices.ai.enums;\n\ntry {\n\tconst candidates = await service.generateText(\n\t\t'What can I do with WordPress?',\n\t\t{\n\t\t\tfeature: 'my-test-feature',\n\t\t\tcapabilities: [ enums.AiCapability.TEXT_GENERATION ],\n\t\t}\n\t);\n} catch ( error ) {\n\t// Handle the error.\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Function Response Back to AI Model in PHP\nDESCRIPTION: This snippet demonstrates how to return function results back to the AI model for further processing. It includes the original content, function call, and function response to maintain context in the conversation.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Accessing-AI-Services-in-PHP.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Felix_Arntz\\AI_Services\\Services\\API\\Enums\\AI_Capability;\nuse Felix_Arntz\\AI_Services\\Services\\API\\Enums\\Content_Role;\nuse Felix_Arntz\\AI_Services\\Services\\API\\Types\\Content;\nuse Felix_Arntz\\AI_Services\\Services\\API\\Types\\Parts;\nuse Felix_Arntz\\AI_Services\\Services\\API\\Types\\Tools;\n\n// This should contain the same function declarations provided before.\n$function_declarations = array(\n\t// ...\n);\n\n$tools = new Tools();\n$tools->add_function_declarations_tool( $function_declarations );\n\n/*\n * This should contain both the content object with the initial user prompt, and the content object with the function\n * call received by the AI model.\n */\n$contents = array(\n\t// ...\n);\n\n// This adds the function response to the overall prompt.\n$parts = new Parts();\n$parts->add_function_response_part( $function_call['id'], $function_call['name'], $function_result );\n$content    = new Content( Content_Role::USER, $parts );\n$contents[] = $content;\n\ntry {\n\t$candidates = $service\n\t\t->get_model(\n\t\t\tarray(\n\t\t\t\t'feature'      => 'my-test-feature',\n\t\t\t\t'tools'        => $tools,\n\t\t\t\t'capabilities' => array(\n\t\t\t\t\tAI_Capability::FUNCTION_CALLING,\n\t\t\t\t\tAI_Capability::TEXT_GENERATION,\n\t\t\t\t),\n\t\t\t)\n\t\t)\n\t\t->generate_text( $contents );\n} catch ( Exception $e ) {\n\t// Handle the exception.\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom AI Service in PHP\nDESCRIPTION: This code snippet demonstrates how to register a custom AI service named 'demo-service' using the ai_services() function. It creates an instance of the Demo_Service_AI_Service class and provides a name for the service.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/Implementing-and-Registering-a-New-AI-Service.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nai_services()->register_service(\n  'demo-service',\n  static function ( $authentication, $http ) {\n    return new Demo_Service_AI_Service( $authentication, $http );\n  },\n  array(\n    'name' => 'Demo Service',\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Running Initial Project Setup Commands - Shell\nDESCRIPTION: These commands install PHP and JavaScript dependencies and build the project's assets. Prerequisites include Composer and Node.js installed on the local machine. Each command addresses a specific step: installing PHP packages, installing Node modules, and building JS/CSS assets. The inputs are individual CLI commands, and the output is a fully initialized local development environment. Limitations: Must be run in the project's root folder and assumes no prior setup.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer install\nnpm install\nnpm run build\n\n```\n\n----------------------------------------\n\nTITLE: Installing AI Services WordPress Plugin from GitHub\nDESCRIPTION: Shell commands to clone the plugin repository, install dependencies, and build the plugin from source. This includes installing both Composer and npm dependencies.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/felixarntz/ai-services.git wp-content/plugins/ai-services\ncd wp-content/plugins/ai-services\ncomposer install\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining Layout and Content for 404 Page with Front Matter - Markdown\nDESCRIPTION: Specifies the base layout to use for this page via YAML front matter and defines the primary Markdown content to be rendered. There are no external dependencies beyond the static site generator's ability to parse front matter. The input is a page request to a nonexistent route; the output is a user-facing 404 error message. The Markdown structure is simple and intended for static rendering, with no dynamic parameters involved.\nSOURCE: https://github.com/felixarntz/ai-services/blob/main/docs/404.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\nlayout: base\n---\n\n# 404\n\n## Page not found :(\n\nThe requested page could not be found.\n```"
  }
]