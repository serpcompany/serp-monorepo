[
  {
    "owner": "zenstackhq",
    "repo": "zenstack-docs",
    "content": "TITLE: Initializing Project for ZenStack\nDESCRIPTION: Command to initialize an existing project for ZenStack usage.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@1 init\n```\n\n----------------------------------------\n\nTITLE: Setting up Express.js API with ZenStack Middleware\nDESCRIPTION: Implementation of Express.js API setup with ZenStack middleware for RESTful endpoints\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/rest-api-on-vercel/index.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nimport { ZenStackMiddleware } from '@zenstackhq/server/express';\nimport RestApiHandler from '@zenstackhq/server/api/rest';\nimport express from 'express';\n\nconst app = express();\napp.use(express.json());\n\nconst prisma = new PrismaClient();\n\n// create a RESTful-style API handler\nconst apiHandler = RestApiHandler({ endpoint: 'http://localhost:3000/api' });\n\napp.use('/api', ZenStackMiddleware({ \n    getPrisma: () => prisma,\n    handler: apiHandler \n}));\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Space-Based Access Control Implementation\nDESCRIPTION: Comprehensive implementation of relation-based access control for a multi-user Todo application, including space membership and administrative privileges\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.4-relations.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Space {\n  ...\n\n  // require login\n  @@deny('all', auth() == null)\n\n  // everyone can create a space\n  @@allow('create', true)\n\n  // users in the space can read the space\n  @@allow('read', members?[user == auth()])\n\n  // space admin can update and delete\n  @@allow('update,delete', members?[user == auth() && role == 'ADMIN'])\n}\n\nmodel SpaceUser {\n  ...\n\n  // require login\n  @@deny('all', auth() == null)\n\n  // space owner can add any one\n  @@allow('create', space.owner == auth())\n  \n  // space admin can add anyone but not himself\n  @@allow('create', auth() != user && space.members?[user == auth() && role == 'ADMIN'])\n\n  // space admin can update/delete\n  @@allow('update,delete', space.members?[user == auth() && role == 'ADMIN'])\n\n  // user can read members of spaces that he's a member of\n  @@allow('read', space.members?[user == auth()])\n}\n\nmodel User {\n  ...\n\n  // everyone can sign up\n  @@allow('create', true)\n\n  // full access by oneself\n  @@allow('all', auth() == this)\n\n  // can be read by users sharing any space\n  @@allow('read', spaces?[space.members?[user == auth()]])\n}\n\nmodel List {\n  ...\n\n  // require login\n  @@deny('all', auth() == null)\n\n  // can be read by space members if not private\n  @@allow('read', owner == auth() || (space.members?[user == auth()] && !private))\n\n  // when create, owner must be set to current user, and user must be in the space\n  @@allow('create,update', owner == auth() && space.members?[user == auth()])\n\n  // can be deleted by owner\n  @@allow('delete', owner == auth())\n}\n\nmodel Todo {\n  ...\n\n  // require login\n  @@deny('all', auth() == null)\n\n  // owner has full access\n  @@allow('all', list.owner == auth())\n\n  // space members have full access if the parent List is not private\n  @@allow('all', list.space.members?[user == auth()] && !list.private)\n}\n```\n\n----------------------------------------\n\nTITLE: Space-Based Access Control Implementation\nDESCRIPTION: Comprehensive implementation of relation-based access control for a multi-user Todo application, including space membership and administrative privileges\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.4-relations.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Space {\n  ...\n\n  // require login\n  @@deny('all', auth() == null)\n\n  // everyone can create a space\n  @@allow('create', true)\n\n  // users in the space can read the space\n  @@allow('read', members?[user == auth()])\n\n  // space admin can update and delete\n  @@allow('update,delete', members?[user == auth() && role == 'ADMIN'])\n}\n\nmodel SpaceUser {\n  ...\n\n  // require login\n  @@deny('all', auth() == null)\n\n  // space owner can add any one\n  @@allow('create', space.owner == auth())\n  \n  // space admin can add anyone but not himself\n  @@allow('create', auth() != user && space.members?[user == auth() && role == 'ADMIN'])\n\n  // space admin can update/delete\n  @@allow('update,delete', space.members?[user == auth() && role == 'ADMIN'])\n\n  // user can read members of spaces that he's a member of\n  @@allow('read', space.members?[user == auth()])\n}\n\nmodel User {\n  ...\n\n  // everyone can sign up\n  @@allow('create', true)\n\n  // full access by oneself\n  @@allow('all', auth() == this)\n\n  // can be read by users sharing any space\n  @@allow('read', spaces?[space.members?[user == auth()]])\n}\n\nmodel List {\n  ...\n\n  // require login\n  @@deny('all', auth() == null)\n\n  // can be read by space members if not private\n  @@allow('read', owner == auth() || (space.members?[user == auth()] && !private))\n\n  // when create, owner must be set to current user, and user must be in the space\n  @@allow('create,update', owner == auth() && space.members?[user == auth()])\n\n  // can be deleted by owner\n  @@allow('delete', owner == auth())\n}\n\nmodel Todo {\n  ...\n\n  // require login\n  @@deny('all', auth() == null)\n\n  // owner has full access\n  @@allow('all', list.owner == auth())\n\n  // space members have full access if the parent List is not private\n  @@allow('all', list.space.members?[user == auth()] && !list.private)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Project for ZenStack\nDESCRIPTION: Command to initialize an existing project for ZenStack usage.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@1 init\n```\n\n----------------------------------------\n\nTITLE: Complete Post Model Example in ZModel\nDESCRIPTION: Example showing a Post model with various field types including ID, timestamps, primitive types, optional fields, arrays and relations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_46\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    // \"id\" field is a mandatory unique identifier of this model\n    id String @id @default(uuid())\n\n    // fields can be DateTime\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n\n    // or string\n    title String\n\n    // or integer\n    viewCount Int @default(0)\n\n    // and optional\n    content String?\n\n    // and a list too\n    tags String[]\n\n    // and can reference another model too\n    comments Comment[]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with Custom Attributes and Access Policies\nDESCRIPTION: This snippet demonstrates a User model in ZModel with custom attributes for email validation, password hashing, and field omission, along with access policies for user creation and data access.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/1-zmodel.md#2025-04-10_snippet_6\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id @default(autoincrement())\n\n    // during create and update, ZenStack validates the field is a valid email address\n    email String @unique @email\n\n    // the field is automatically hashed upon saving, and omitted from query results\n    password String @omit @password\n\n    // access policy: open to sign up\n    @@allow('create', true)\n\n    // access policy: the user has full access to self\n    @@allow('all', auth() == this)\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Post Model Example in ZModel\nDESCRIPTION: Example showing a Post model with various field types including ID, timestamps, primitive types, optional fields, arrays and relations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_46\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    // \"id\" field is a mandatory unique identifier of this model\n    id String @id @default(uuid())\n\n    // fields can be DateTime\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n\n    // or string\n    title String\n\n    // or integer\n    viewCount Int @default(0)\n\n    // and optional\n    content String?\n\n    // and a list too\n    tags String[]\n\n    // and can reference another model too\n    comments Comment[]\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting ZenStack Middleware in Express.js Application\nDESCRIPTION: Code example showing how to set up ZenStack middleware in an Express.js application. It demonstrates importing required modules, enhancing a Prisma client with user context, and mounting the API routes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/express.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nimport { enhance } from '@zenstackhq/runtime';\nimport { ZenStackMiddleware } from '@zenstackhq/server/express';\nimport express from 'express';\n\nconst prisma = new PrismaClient();\nconst app = express();\n\napp.use(express.json());\n\napp.use(\n    '/api/model',\n    ZenStackMiddleware({\n        // getSessionUser extracts the current session user from the request, its\n        // implementation depends on your auth solution\n        getPrisma: (request) => enhance(prisma, { user: getSessionUser(request) }),\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Using Field and Model Attributes in ZModel\nDESCRIPTION: Example demonstrating common field and model attributes in ZModel, including @id, @unique, @password, @omit, @default, @updatedAt, @map, @@map, @@index, and access policies with @@allow.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_35\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    // unique id field with a default UUID value\n    id String @id @default(uuid())\n\n    // require email field to be unique\n    email String @unique\n\n    // password is hashed with bcrypt with length of 16, omitted when returned from the CRUD services\n    password String @password(saltLength: 16) @omit\n\n    // default to current date-time\n    createdAt DateTime @default(now())\n\n    // auto-updated when the entity is modified\n    updatedAt DateTime @updatedAt\n\n    // mapping to a different column name in database\n    description String @map(\"desc\")\n\n    // mapping to a different table name in database\n    @@map(\"users\")\n\n    // use @@index to specify fields to create database index for\n    @@index([email])\n\n    // use @@allow to specify access policies\n    @@allow(\"create,read\", true)\n\n    // use auth() to reference the current user\n    // use future() to access the \"post-update\" state\n    @@allow(\"update\", auth() == this && future().email == email)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Control with ZenStack ORM\nDESCRIPTION: This example shows how to implement access control in ZenStack, an extension of Prisma ORM. The schema defines User and Chat models with declarative access control rules that restrict who can read, create, and update records based on user relationships and authentication status.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/secure-api/index.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\n// auth() function returns the current user\n// future() function returns the post-update entity value\n\nmodel User {\n  id Int @id @default(autoincrement())\n  username String\n  sent Chat[] @relation('sent')\n  received Chat[] @relation('received')\n\n  // allow user to read his own profile\n  @@allow('read', auth() == this)\n}\n\nmodel Chat {\n  id Int @id @default(autoincrement())\n  subject String\n  fromUser User @relation('sent', fields: [fromUserId], references: [id])\n  fromUserId Int\n  toUser User @relation('received', fields: [toUserId], references: [id])\n  toUserId Int\n\n  // allow user to read his own chats\n  @@allow('read', auth() == fromUser || auth() == toUser)\n\n  // allow user to create a chat as sender\n  @@allow('create', auth() == fromUser)\n\n  // allow sender to update a chat, but disallow to change sender\n  @@allow('update', auth() == fromUser && auth() == future().fromUser)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Model Schema with ZenStack/Prisma\nDESCRIPTION: Schema definition for the User model in ZenStack/Prisma. The model includes fields for user identity and authentication, with relationships to Account and Session models for NextAuth integration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/firebase-alternative/index.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id            String    @id @default(cuid())\n  name          String?\n  email         String?   @unique\n  emailVerified DateTime?\n  image         String?\n  accounts      Account[]\n  sessions      Session[]\n}\n```\n\n----------------------------------------\n\nTITLE: User Model Validation Example\nDESCRIPTION: Demonstrates various field and model-level validations including regex patterns, email validation, URL validation, and conditional validation rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_60\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id\n    handle String @regex(\"^[0-9a-zA-Z]{4,16}$\")\n    email String? @email @endsWith(\"@myorg.com\", \"must be an email from myorg.com\")\n    profileImage String? @url\n    age Int @gte(18)\n    activated Boolean @default(false)\n\n    @@validate(!activated || email != null, \"activated user must have an email\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Blog Home Page with Next.js, NextAuth, and ZenStack Hooks\nDESCRIPTION: This code creates a blog home page that handles user authentication, displays posts, and allows post management operations (create, update, delete). It uses NextAuth for authentication and ZenStack-generated hooks for data operations. The page implements access control where published posts are visible to all users, while modification operations are protected by policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs-app-router.mdx#2025-04-10_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport type { Post } from \"@prisma/client\";\nimport { type NextPage } from \"next\";\nimport { signOut, useSession } from \"next-auth/react\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/navigation\";\nimport {\n  useFindManyPost,\n  useCreatePost,\n  useUpdatePost,\n  useDeletePost,\n} from \"../lib/hooks\";\n\ntype AuthUser = { id: string; email?: string | null };\n\nconst Welcome = ({ user }: { user: AuthUser }) => {\n  const router = useRouter();\n  async function onSignout() {\n    await signOut({ redirect: false });\n    router.push(\"/signin\");\n  }\n  return (\n    <div className=\"flex gap-4\">\n      <h3 className=\"text-lg\">Welcome back, {user?.email}</h3>\n      <button\n        className=\"text-gray-300 underline\"\n        onClick={() => void onSignout()}\n      >\n        Signout\n      </button>\n    </div>\n  );\n};\n\nconst SigninSignup = () => {\n  return (\n    <div className=\"flex gap-4 text-2xl\">\n      <Link href=\"/signin\" className=\"rounded-lg border px-4 py-2\">\n        Signin\n      </Link>\n      <Link href=\"/signup\" className=\"rounded-lg border px-4 py-2\">\n        Signup\n      </Link>\n    </div>\n  );\n};\n\nconst Posts = ({ user }: { user: AuthUser }) => {\n  // Post crud hooks\n  const { mutateAsync: createPost } = useCreatePost();\n  const { mutateAsync: updatePost } = useUpdatePost();\n  const { mutateAsync: deletePost } = useDeletePost();\n\n  // list all posts that're visible to the current user, together with their authors\n  const { data: posts } = useFindManyPost({\n    include: { createdBy: true },\n    orderBy: { createdAt: \"desc\" },\n  });\n\n  async function onCreatePost() {\n    const name = prompt(\"Enter post name\");\n    if (name) {\n      await createPost({ data: { name } });\n    }\n  }\n\n  async function onTogglePublished(post: Post) {\n    await updatePost({\n      where: { id: post.id },\n      data: { published: !post.published },\n    });\n  }\n\n  async function onDelete(post: Post) {\n    await deletePost({ where: { id: post.id } });\n  }\n\n  return (\n    <div className=\"container flex flex-col text-white\">\n      <button\n        className=\"rounded border border-white p-2 text-lg\"\n        onClick={() => void onCreatePost()}\n      >\n        + Create Post\n      </button>\n\n      <ul className=\"container mt-8 flex flex-col gap-2\">\n        {posts?.map((post) => (\n          <li key={post.id} className=\"flex items-end justify-between gap-4\">\n            <p className={`text-2xl ${!post.published ? \"text-gray-400\" : \"\"}`}>\n              {post.name}\n              <span className=\"text-lg\"> by {post.createdBy.email}</span>\n            </p>\n            <div className=\"flex w-32 justify-end gap-1 text-left\">\n              <button\n                className=\"underline\"\n                onClick={() => void onTogglePublished(post)}\n              >\n                {post.published ? \"Unpublish\" : \"Publish\"}\n              </button>\n              <button className=\"underline\" onClick={() => void onDelete(post)}>\n                Delete\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nconst Home: NextPage = () => {\n  const { data: session, status } = useSession();\n\n  if (status === \"loading\") return <p>Loading ...</p>;\n\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\">\n      <div className=\"container flex flex-col items-center justify-center gap-12 px-4 py-16 text-white\">\n        <h1 className=\"text-5xl font-extrabold\">My Awesome Blog</h1>\n\n        {session?.user ? (\n          // welcome & blog posts\n          <div className=\"flex flex-col\">\n            <Welcome user={session.user} />\n            <section className=\"mt-10\">\n              <Posts user={session.user} />\n            </section>\n          </div>\n        ) : (\n          // if not logged in\n          <SigninSignup />\n        )}\n      </div>\n    </main>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Creating a CRUD Middleware with ZenStack in NestJS\nDESCRIPTION: This middleware integrates ZenStack's RESTful API handler into a NestJS application. It automatically creates CRUD endpoints for all models defined in the schema while enforcing the access policies based on the current user extracted from request headers.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/nest-api/index.md#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, NestMiddleware } from '@nestjs/common';\nimport { enhance } from '@zenstackhq/runtime';\nimport RESTHandler from '@zenstackhq/server/api/rest';\nimport { ZenStackMiddleware } from '@zenstackhq/server/express';\nimport { Request, Response } from 'express';\nimport { PrismaService } from '../prisma.service';\n\n@Injectable()\nexport class CrudMiddleware implements NestMiddleware {\n  constructor(private readonly prismaService: PrismaService) {}\n\n  use(req: Request, _res: Response, next: (error?: any) => void) {\n    // base url for RESTful resource linkage\n    const baseUrl = `${req.protocol}://${req.headers.host}${req.baseUrl}`;\n\n    // get the current user from request\n    const userId = req.headers['x-user-id'];\n    const userRole = req.headers['x-user-role'] ?? 'USER';\n    const user = userId ? { id: Number(userId), role: userRole } : undefined;\n\n    // construct an Express middleware and forward the request/response\n    const inner = ZenStackMiddleware({\n      // get an enhanced PrismaClient for the current user\n      getPrisma: () => enhance(this.prismaService, { user }),\n      // use RESTful style API\n      handler: RESTHandler({ endpoint: baseUrl }),\n    });\n    inner(req, _res, next);\n  }}\n```\n\n----------------------------------------\n\nTITLE: Importing ZModel Files in ZModel\nDESCRIPTION: Demonstrates how to import other ZModel files using relative or absolute paths, or from NPM packages. Imports allow splitting schemas into multiple files for better organization.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nimport \"user\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Enhanced Prisma Client in TypeScript\nDESCRIPTION: Demonstrates how to create an enhanced Prisma Client by importing the required dependencies and using the enhance function to wrap a regular Prisma Client instance.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/3-enhancement.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nimport { enhance } from '@zenstackhq/runtime';\n\nconst prisma = new PrismaClient();\nconst db = enhance(prisma);\n\n// db has the same typing as prisma\nawait db.user.findMany();\nawait db.user.create({ data: { email: 'zen@stack.dev'} });\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Enhanced Prisma Types from ZenStack\nDESCRIPTION: This snippet demonstrates how to import enhanced model and input types from ZenStack's runtime module instead of directly from Prisma Client. It shows how to explicitly type variables with these enhanced types when working with an enhanced Prisma client.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/enhanced-types.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Post, Prisma } from '@zenstackhq/runtime/models'\nimport { getEnhancedPrisma } from '~/db'\n\nconst db = getEnhancedPrisma();\n\n// explicitly refer to the enhanced model type\nconst post: Post = await db.post.findUnique({...});\n\n// explicitly refer to the enhanced input type\nconst createInput: Prisma.PostCreateInput = { ... };\nawait db.post.create({ data: createInput });\n```\n\n----------------------------------------\n\nTITLE: Implementing SpaceUser Model Access Rules with ZenStack\nDESCRIPTION: Defines access policies for the SpaceUser model, which controls space membership. It implements role-based permissions where only space admins can manage members.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nmodel SpaceUser {\n    ...\n    space Space @relation(fields:[spaceId], references: [id], onDelete: Cascade)\n    ...\n    // require login\n    @@deny('all', auth() == null)\n\n    // space admin can create/update/delete\n    @@allow('create,update,delete', space.members?[user == auth() && role == ADMIN])\n\n    // user can read entries for spaces which he's a member of\n    @@allow('read', space.members?[user == auth()])\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-user Space Model with Complex Access Policies in ZModel\nDESCRIPTION: A comprehensive example demonstrating complex access policies for a multi-user space system with User, Space, and Membership models and their relationships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_58\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Space {\n    id String @id\n    members Membership[]\n    owner User @relation(fields: [ownerId], references: [id])\n    ownerId String\n\n    // require login\n    @@deny('all', auth() == null)\n\n    // everyone can create a space\n    @@allow('create', true)\n\n    // owner can do everything\n    @@allow('all', auth() == owner)\n\n    // any user in the space can read the space\n    //\n    // Here the <collection>?[condition] syntax is called\n    // \"Collection Predicate\", used to check if any element\n    // in the \"collection\" matches the \"condition\"\n    @@allow('read', members?[user == auth()])\n}\n\n// Membership is the \"join-model\" between User and Space\nmodel Membership {\n    id String @id()\n\n    // one-to-many from Space\n    space Space @relation(fields: [spaceId], references: [id])\n    spaceId String\n\n    // one-to-many from User\n    user User @relation(fields: [userId], references: [id])\n    userId String\n\n    // a user can be member of a space for only once\n    @@unique([userId, spaceId])\n\n    // require login\n    @@deny('all', auth() == null)\n\n    // space owner can create/update/delete\n    @@allow('create,update,delete', space.owner == auth())\n\n    // user can read entries for spaces which he's a member of\n    @@allow('read', space.members?[user == auth()])\n}\n\nmodel User {\n    id String @id\n    email String @unique\n    membership Membership[]\n    ownedSpaces Space[]\n\n    // allow signup\n    @@allow('create', true)\n\n    // user can do everything to herself; note that \"this\" represents\n    // the current entity\n    @@allow('all', auth() == this)\n\n    // can be read by users sharing a space\n    @@allow('read', membership?[space.members?[user == auth()]])\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ZModel Files in ZModel\nDESCRIPTION: Demonstrates how to import other ZModel files using relative or absolute paths, or from NPM packages. Imports allow splitting schemas into multiple files for better organization.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nimport \"user\"\n```\n\n----------------------------------------\n\nTITLE: Simple Post Model with Access Policies in ZModel\nDESCRIPTION: A complete example of a Post model with access policies that reject operations for unauthenticated users, allow operations for owners, and permit public reading of posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_57\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    // reject all operations if user's not logged in\n    @@deny('all', auth() == null)\n\n    // allow all operations if the entity's owner matches the current user\n    @@allow('all', auth() == owner)\n\n    // posts are readable to anyone\n    @allow('read', true)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ACL with ZenStack and Prisma\nDESCRIPTION: Demonstrates the implementation of Access Control List (ACL) using ZenStack and Prisma. It shows creating users, granting access, and attempting operations with different permissions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/model-authz/index.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// create two users\nconst emily = await prisma.user.create({\n  data: { name: 'Emily' },\n});\n\nconst adam = await prisma.user.create({\n  data: { name: 'Adam' },\n});\n\n// create an enhanced PrismaClient for each user\nconst emilyDb = enhance(prisma, { user: emily });\nconst adamDb = enhance(prisma, { user: adam });\n\n// create a resource with Emily's identity\nconst res = await emilyDb.resource.create({\n  data: { name: 'resource1', owner: { connect: { id: emily.id } } },\n});\nconsole.log('Resource created by Emily:', inspect(res));\n\n// Adam should see an empty list because he's not in the ACL\nlet allResourcesByAdam = await adamDb.resource.findMany();\nexpect(allResourcesByAdam).toHaveLength(0);\n\n// Emily should be able to grant Adam access\nawait emilyDb.resource.update({\n  where: { id: res.id },\n  data: {\n    access: {\n      create: { user: { connect: { id: adam.id } }, view: true },\n    },\n  },\n});\nconsole.log('Resource access granted to Adam with view access');\n\n// Adam should see the resource now\nallResourcesByAdam = await adamDb.resource.findMany();\nexpect(allResourcesByAdam).toHaveLength(1);\n\n// ❌ update will fail with an error because Adam doesn't have \"manage\" permission\nawait expect(adamDb.resource.update({\n  where: { id: res.id },\n  data: { name: 'resource2' },\n})).rejects.toThrow();\n```\n\n----------------------------------------\n\nTITLE: One-to-One Relation Example in ZModel\nDESCRIPTION: Demonstrates how to define a one-to-one relation between User and Profile models using @relation attribute.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_47\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id\n    profile Profile?\n}\n\nmodel Profile {\n    id String @id\n    user User @relation(fields: [userId], references: [id])\n    userId String @unique\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Policies for Pet and Order Models in ZenStack\nDESCRIPTION: ZenStack model definitions for Pet and Order with access policies that control read/update operations based on authentication state and user ownership. Policies ensure pets can only be purchased once and orders can only be created and viewed by their owners.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nmodel Pet {\n    id String @id @default(cuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    name String\n    category String\n    order Order? @relation(fields: [orderId], references: [id])\n    orderId String?\n\n    // unsold pets are readable to all; sold ones are readable to buyers only\n    @@allow('read', orderId == null || order.user == auth())\n\n    // only allow update to 'orderId' field if it's not set yet (unsold)\n    @@allow('update', name == future().name && category == future().category && orderId == null )\n}\n\nmodel Order {\n    id String @id @default(cuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    pets Pet[]\n    user User @relation(fields: [userId], references: [id])\n    userId String\n\n    // users can read their orders\n    @@allow('read,create', auth() == user)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Credential-based Authentication\nDESCRIPTION: NextAuth configuration with credential-based authentication and JWT session strategy, including user authorization logic.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nextjs.mdx#2025-04-10_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { PrismaAdapter } from '@next-auth/prisma-adapter';\nimport type { PrismaClient } from '@prisma/client';\nimport { compare } from 'bcryptjs';\nimport type { GetServerSidePropsContext } from 'next';\nimport NextAuth, { getServerSession, type DefaultSession, type NextAuthOptions } from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport { db } from './db';\n/**\n * Module augmentation for `next-auth` types.\n * Allows us to add custom properties to the `session` object and keep type\n * safety.\n *\n * @see https://next-auth.js.org/getting-started/typescript#module-augmentation\n **/\ndeclare module 'next-auth' {\n    interface Session extends DefaultSession {\n        user: {\n            id: string;\n        } & DefaultSession['user'];\n    }\n}\n\n/**\n * Options for NextAuth.js used to configure adapters, providers, callbacks,\n * etc.\n *\n * @see https://next-auth.js.org/configuration/options\n **/\nexport const authOptions: NextAuthOptions = {\n    session: {\n        strategy: 'jwt',\n    },\n    // Include user.id on session\n    callbacks: {\n        session({ session, token }) {\n            if (session.user) {\n                session.user.id = token.sub!;\n            }\n            return session;\n        },\n    },\n    // Configure one or more authentication providers\n    adapter: PrismaAdapter(db),\n    providers: [\n        CredentialsProvider({\n            credentials: {\n                email: { type: 'email' },\n                password: { type: 'password' },\n            },\n            authorize: authorize(db),\n        }),\n    ],\n};\n\nfunction authorize(prisma: PrismaClient) {\n    return async (credentials: Record<'email' | 'password', string> | undefined) => {\n        if (!credentials) throw new Error('Missing credentials');\n        if (!credentials.email) throw new Error('\"email\" is required in credentials');\n        if (!credentials.password) throw new Error('\"password\" is required in credentials');\n        const maybeUser = await prisma.user.findFirst({\n            where: { email: credentials.email },\n            select: { id: true, email: true, password: true },\n        });\n        if (!maybeUser || !maybeUser.password) return null;\n        // verify the input password with stored hash\n        const isValid = await compare(credentials.password, maybeUser.password);\n        if (!isValid) return null;\n        return { id: maybeUser.id, email: maybeUser.email };\n    };\n}\n\n/**\n * Wrapper for `getServerSession` so that you don't need to import the\n * `authOptions` in every file.\n *\n * @see https://next-auth.js.org/configuration/nextjs\n **/\nexport const getServerAuthSession = (ctx: {\n    req: GetServerSidePropsContext['req'];\n    res: GetServerSidePropsContext['res'];\n}) => {\n    return getServerSession(ctx.req, ctx.res, authOptions);\n};\n\nexport default NextAuth(authOptions);\n```\n\n----------------------------------------\n\nTITLE: Defining Field-Level Access Policies in ZenStack\nDESCRIPTION: Shows how to attach a field-level access policy to restrict updates to the 'published' field to users with EDITOR role.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.7-field-level.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    ...\n    published Boolean @allow('update', auth().role == EDITOR)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Control Policies for Todo Lists in ZModel\nDESCRIPTION: Adds access control policies to the List model using ZenStack's @@allow and @@deny attributes. The policies enforce tenant segregation, role-based access, and ownership rules for the multi-tenant Todo application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/clerk-multitenancy/index.mdx#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel List {\n  ...\n\n  // deny anonymous access\n  @@deny('all', auth() == null)\n\n  // tenant segregation: deny access if the user's current org doesn't match\n  @@deny('all', auth().currentOrgId != orgId)\n\n  // owner/admin has full access\n  @@allow('all', auth().userId == ownerId || auth().currentOrgRole == 'org:admin')\n\n  // can be read by org members if not private\n  @@allow('read', !private)\n\n  // when create, owner must be set to current user\n  @@allow('create', ownerId == auth().userId)\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript signature of withPolicy function\nDESCRIPTION: Function signature for withPolicy which adds access policy and field validation enhancements to a Prisma client. It accepts a Prisma client, optional context, and options.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/runtime-api.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction withPolicy<DbClient extends object>(\n    prisma: DbClient,\n    context?: WithPolicyContext,\n    options?: WithPolicyOptions\n): DbClient;\n```\n\n----------------------------------------\n\nTITLE: Using Model Inheritance for Reusable Access Policies in ZModel\nDESCRIPTION: Demonstrates how to create an abstract Basic model with common fields and access policies that can be reused through inheritance, reducing duplication in multi-tenant applications.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/multi-tenant/index.md#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\nabstract model Basic {\n    id String @id @default(uuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n    ownerId String\n    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)\n    spaceId String\n\n    @@allow('read', owner == auth() || space.members?[user == auth()] )\n    @@allow('create', owner == auth() && space.members?[user == auth()])\n    @@allow('update', owner == auth() && space.members?[user == auth()] && future().owner == owner)\n    @@allow('delete', owner == auth())\n}\n\nmodel Post extends Basic {\n    title String\n    content String?\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring @zenstackhq/trpc Plugin in ZModel\nDESCRIPTION: ZModel configuration for the @zenstackhq/trpc plugin, specifying output directory and client helper generation for Next.js.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/trpc.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin trpc {\n  provider = '@zenstackhq/trpc'\n  output = 'server/routers/generated'\n  generateClientHelpers = 'next'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login API Route with JWT Authentication\nDESCRIPTION: Express route handler for user login that verifies email/password credentials, compares the hashed password, and issues a JWT token upon successful authentication. The token contains the user ID and is signed with the JWT secret.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport { compareSync } from 'bcryptjs';\n\n// load .env environment variables\ndotenv.config();\n\napp.post('/api/login', async (req, res) => {\n    const { email, password } = req.body;\n    const user = await prisma.user.findFirst({\n        where: { email },\n    });\n    if (!user || !compareSync(password, user.password)) {\n        res.status(401).json({ error: 'Invalid credentials' });\n    } else {\n        // sign a JWT token and return it in the response\n        const token = jwt.sign({ sub: user.id }, process.env.JWT_SECRET!);\n        res.json({ id: user.id, email: user.email, token });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: To-One Relation Policy Example in ZModel\nDESCRIPTION: Demonstrates basic policy rules using *-to-one relations with dot notation for field access\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.4-relations.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel List {\n  id Int\n  private Boolean\n}\n\nmodel Todo {\n  id Int\n  list List @relation(...)\n\n  // `list` references a to-one relation\n  @@allow('update', !list.private)\n}\n```\n\n----------------------------------------\n\nTITLE: Using withPassword Enhancer in TypeScript\nDESCRIPTION: Example showing how to enhance a Prisma client with withPassword functionality, which automatically hashes password fields before storing them in the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/runtime-api.md#2025-04-10_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst enhanced = withPassword(prisma);\n// password field is hashed before stored into the database\nconst user = enhanced.user.create({\n    data: { email: 'foo@bar.com', password: 'mysecurepassword' },\n});\n```\n\n----------------------------------------\n\nTITLE: Using enhanced PrismaClient in Next.js server components with Auth.js\nDESCRIPTION: This snippet shows how to create an enhanced PrismaClient in a Next.js server component by retrieving the current authenticated user from Auth.js and passing it to ZenStack's enhance() function.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/next-auth.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from '~/auth';\nimport { prisma } from '~/db';\nimport Post from '~/components/Post';\n\nexport default function Page() {\n  const authObj = await auth();\n  const db = enhance(prisma, { user: authObj?.user });\n  const posts = await db.post.findMany()\n\n  return (\n    <div>\n      {posts.map((post) => (\n        <Post key={post.id} value={post} />\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Delete with Prisma Client Extensions\nDESCRIPTION: Shows how to implement soft delete functionality by extending the Prisma Client. This transforms delete operations into updates that set a 'deleted' flag, and filters out deleted records from queries.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-client-extensions/index.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst xprisma = prisma.$extends({\n    name: 'soft-delete',\n    query: {\n        $allModels: {\n            async findMany({ args, query }) {\n                // inject read filter\n                args.where = { deleted: false, ...args };\n                return query(args);\n            },\n\n            // ... other query methods like findUnique, etc.\n\n            async delete({ model, args }) {\n                // translate \"delete\" to \"update\"\n                return (prisma as any)[model].update({\n                    ...args,\n                    data: { deleted: true },\n                });\n            },\n\n            // ... deleteMany\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a RESTful API Handler in ZenStack\nDESCRIPTION: Example of creating a RESTful API handler that provides resource-centric endpoints using JSON:API as the transportation format. It requires configuring an endpoint URL.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/_options.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport RestApiHandler from '@zenstackhq/server/api/rest';\nconst handler = RestApiHandler({ endpoint: 'http://myhost/api' });\n```\n\n----------------------------------------\n\nTITLE: Injecting Enhanced Prisma Service in NestJS Controller\nDESCRIPTION: Shows how to inject and use the enhanced Prisma service in a NestJS controller using the ENHANCED_PRISMA token.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/nestjs.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ENHANCED_PRISMA } from '@zenstackhq/server/nestjs';\n\n@Controller()\nexport class MyController {\n  constructor(\n    @Inject(ENHANCED_PRISMA) private readonly prismaService: PrismaService,\n  ) {}\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Relation Definition in ZModel\nDESCRIPTION: Example of defining a one-to-many relation between User and Post models using the @relation attribute, list field, and foreign key fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_39\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id\n    posts Post[]\n}\n\nmodel Post {\n    id String @id\n    author User? @relation(fields: [authorId], references: [id])\n    authorId String?\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting API with Next.js App Router\nDESCRIPTION: TypeScript code for creating a request handler in a Next.js 13 API endpoint using the App Router. It demonstrates how to use NextRequestHandler with enhanced Prisma client and session user context.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/next.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequestHandler } from '@zenstackhq/server/next';\nimport type { NextRequest } from \"next/server\";\nimport { enhance } from '@zenstackhq/runtime';\nimport { prisma } from '~/lib/db.ts';\nimport { getSessionUser } from '~/lib/auth.ts';\n\n// create an enhanced Prisma client with user context\nfunction getPrisma(req: NextRequest) {\n    // getSessionUser extracts the current session user from the request, its\n    // implementation depends on your auth solution\n    return enhance(prisma, { user: getSessionUser(req) });\n}\n\nconst handler = NextRequestHandler({ getPrisma, useAppDir: true });\n\nexport {\n  handler as GET,\n  handler as POST,\n  handler as PUT,\n  handler as PATCH,\n  handler as DELETE,\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Extending Abstract Models from Separate Files\nDESCRIPTION: Demonstrates how to import abstract models from another file (base.zmodel) and extend them in the main schema file, enabling modular organization of schema components.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/multiple-schema.md#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"base\"\nmodel User extends Base {\n    name String\n}\n\nmodel Post extends Base {\n    title String\n    content String?\n    viewCount Int @default(0)\n    comment Comment[]\n}\n\nmodel Comment extends Base {\n    content String\n    post Post @relation(fields: [postId], references: [id])\n    postId Int\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with Access Policies in ZenStack\nDESCRIPTION: ZModel schema definition for the User model with password field and access policies that determine who can create, read, update, or delete user data.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs-app-router.mdx#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id            String    @id @default(cuid())\n  name          String?\n  email         String?   @unique\n  emailVerified DateTime?\n  password      String @password @omit\n  image         String?\n  accounts      Account[]\n  sessions      Session[]\n  posts         Post[]\n\n  // everyone can signup, and user profile is also publicly readable\n  @@allow('create,read', true)\n\n  // only the user can update or delete their own profile\n  @@allow('update,delete', auth() == this)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Access Control Policies with ZenStack\nDESCRIPTION: This code snippet shows how to define access control policies alongside data schema using ZenStack, which is built on top of Prisma ORM. It demonstrates row-level and column-level security implementations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/modern-sql-programming/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmodel Post {\n  id Int @id\n  title String\n  published Boolean @default(false)\n  author User @relation(fields: [authorId], references: [id])\n  authorId Int\n\n  // allow read if published\n  @@allow('read', published)\n  // full access by author\n  @@allow('all', auth() == author)\n}\n\nmodel User {\n  id Int @id\n  posts Post[]\n  role String\n\n  // admin has full access\n  @@allow('all', auth().role == 'ADMIN')\n  // users can read all, but update / delete self\n  @@allow('read', true)\n  @@allow('update,delete', auth() == this)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Todos with ZenStack's Generated Hook in TypeScript\nDESCRIPTION: Demonstrates how to use ZenStack's generated hook to query Todos with type-safe selections. The hook mirrors Prisma client functionality and provides GraphQL-like querying capabilities in the frontend.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/typesafe-query/index.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data } = useFindManyTodo({\n    select: {\n        id: true,\n        title: true,\n        owner: {\n            select: {\n                id: true,\n                name: true\n            }\n        }\n    },\n    where: {\n        title: {\n            contains: 'important'\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Equivalent Read Policy with @@deny in ZenStack\nDESCRIPTION: An alternative implementation using @@deny to achieve the same access control as the previous example, allowing read access only to published posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.1-model-level.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id Int @id\n    title String\n    published Boolean @default(false)\n\n    @@allow('read', true)\n    @@deny('read', !published)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Soft Delete Access Policy in ZenStack\nDESCRIPTION: ZenStack access policy rule that prevents any operation on deleted records by checking the isDeleted flag.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-backend/index.md#2025-04-10_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n@@deny('all', isDeleted == true)\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Logic for Blog Post Management in SvelteKit\nDESCRIPTION: This server-side TypeScript file handles data loading and form actions for the blog page, including fetching posts, creating new posts, toggling publish status, deleting posts, and user sign-out functionality. ZenStack automatically enforces access policies without explicit authorization code.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/sveltekit.mdx#2025-04-10_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PageServerLoad } from './$types';\nimport { fail, type Actions, redirect } from '@sveltejs/kit';\nimport { JWT_TOKEN_COOKIE_NAME } from '$lib/auth';\n\nexport const load: PageServerLoad = async ({ locals }) => {\n    const posts = await locals.db.post.findMany({ include: { author: true } });\n    return {\n        user: locals.user,\n        posts\n    };\n};\n\nexport const actions: Actions = {\n    create: async ({ request, locals }) => {\n        const data = await request.formData();\n        const title = data.get('title');\n        if (typeof title !== 'string') {\n            return fail(400, { missing: true });\n        }\n\n        await locals.db.post.create({ data: { title } });\n\n        return { success: true };\n    },\n\n    togglePublish: async ({ request, locals }) => {\n        const data = await request.formData();\n        const postId = data.get('id');\n        if (typeof postId !== 'string') {\n            return fail(400, { missing: true });\n        }\n\n        const post = await locals.db.post.findUnique({ where: { id: postId } });\n        if (!post) {\n            return fail(404, { notFound: true });\n        }\n\n        try {\n            await locals.db.post.update({ where: { id: postId }, data: { published: !post.published } });\n            return { success: true };\n        } catch (err) {\n            // error can be thrown for reasons like access policy violation\n            return { error: `${err}` };\n        }\n    },\n\n    delete: async ({ request, locals }) => {\n        const data = await request.formData();\n        const postId = data.get('id');\n        if (typeof postId !== 'string') {\n            return fail(400, { missing: true });\n        }\n\n        try {\n            await locals.db.post.delete({ where: { id: postId } });\n            return { success: true };\n        } catch (err) {\n            // error can be thrown for reasons like access policy violation\n            return { error: `${err}` };\n        }\n    },\n\n    signOut: async ({ cookies }) => {\n        cookies.delete(JWT_TOKEN_COOKIE_NAME);\n        throw redirect(303, '/signin');\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of Check API\nDESCRIPTION: TypeScript type definition for the check API method added to each model in the enhanced PrismaClient, allowing for permission verification with optional constraints.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/check-permission.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype CheckArgs = {\n  /**\n   * The operation to check for\n   */\n  operation: 'create' | 'read' | 'update' | 'delete';\n\n  /**\n   * The optional additional constraints to impose on the model fields\n   */\n  where?: { id?: number; title?: string; published?: boolean; authorId?: number };\n}\n\ncheck(args: CheckArgs): Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack tRPC Plugin\nDESCRIPTION: Command to install the ZenStack tRPC plugin package. This plugin enables automatic generation of tRPC routers from the ZModel schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/trpc.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @zenstackhq/trpc@1\n```\n\n----------------------------------------\n\nTITLE: Implementing Team Member Management Component with ZenStack Access Control\nDESCRIPTION: A React component that allows space administrators to manage team members, including adding new members by email and removing existing members. The component relies on ZenStack's access control policies to enforce permissions based on user roles.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PlusIcon, TrashIcon } from '@heroicons/react/24/outline';\nimport { useCurrentUser } from '../lib/context';\nimport { useSpaceUser } from '../lib/hooks';\nimport { Space, SpaceUserRole } from '@prisma/client';\nimport { ChangeEvent, KeyboardEvent, useState } from 'react';\nimport Avatar from './Avatar';\n\ntype Props = {\n    space: Space;\n};\n\nexport default function ManageMembers({ space }: Props) {\n    const [email, setEmail] = useState('');\n    const [role, setRole] = useState<SpaceUserRole>(SpaceUserRole.USER);\n    const user = useCurrentUser();\n    const { findMany, create: addMember, del: delMember } = useSpaceUser();\n\n    const { data: members } = findMany({\n        where: {\n            spaceId: space.id,\n        },\n        include: {\n            user: true,\n        },\n        orderBy: {\n            role: 'desc',\n        },\n    });\n\n    const inviteUser = async () => {\n        try {\n            const r = await addMember({\n                data: {\n                    user: {\n                        connect: {\n                            email,\n                        },\n                    },\n                    space: {\n                        connect: {\n                            id: space.id,\n                        },\n                    },\n                    role,\n                },\n            });\n            console.log('SpaceUser created:', r);\n        } catch (err: any) {\n            console.error(err);\n            if (err.info?.prisma === true) {\n                if (err.info.code === 'P2002') {\n                    alert('User is already a member of the space');\n                } else if (err.info.code === 'P2025') {\n                    alert('User is not found for this email');\n                } else {\n                    alert(`Unexpected Prisma error: ${err.info.code as string}`);\n                }\n            } else {\n                alert(`Error occurred: ${JSON.stringify(err)}`);\n            }\n        }\n    };\n\n    const removeMember = async (id: string) => {\n        if (confirm(`Are you sure to remove this member from space?`)) {\n            await delMember({ where: { id } });\n        }\n    };\n\n\t  //html\n\t\treturn (...);\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing RBAC with ZenStack and Prisma\nDESCRIPTION: Demonstrates the implementation of Role-Based Access Control (RBAC) using ZenStack and Prisma. It shows creating roles, permissions, users, and attempting operations with different roles.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/model-authz/index.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient();\n\n// create a \"view\" permission and a \"manage\" permission\nconst viewPerm = await prisma.permission.create({\n  data: { name: 'view' },\n});\nconst managePerm = await prisma.permission.create({\n  data: { name: 'manage' },\n});\n\n// create a \"manager\" role and a \"staff\" role\nconst managerRole = await prisma.role.create({\n  data: {\n    name: 'manager',\n    permissions: { connect: [{ id: managePerm.id }] },\n  },\n});\nconst staffRole = await prisma.role.create({\n  data: {\n    name: 'staff',\n    permissions: { connect: [{ id: viewPerm.id }] },\n  },\n});\n\n// create two users, Emily (manager) and Adam (staff)\n// note that we need to make sure \"roles.permissions\" are included in the\n// returned result because they are used in the access rules\nconst emily = await prisma.user.create({\n  data: { name: 'Emily', roles: { connect: { id: managerRole.id } } },\n  include: { roles: { include: { permissions: true } } },\n});\nconst adam = await prisma.user.create({\n  data: { name: 'Adam', roles: { connect: { id: staffRole.id } } },\n  include: { roles: { include: { permissions: true } } },\n});\n\n// create an enhanced PrismaClient for each user\nconst emilyDb = enhance(prisma, { user: emily });\nconst adamDb = enhance(prisma, { user: adam });\n\n// ❌ Adam shouldn't be able to create a resource\nawait expect(\n  adamDb.resource.create({ data: { name: 'resource1' } })\n).rejects.toThrow();\n\n// Emily should be able to create a resource\nconst res = await emilyDb.resource.create({ data: { name: 'resource1' } });\nconsole.log('Resource created by Emily:', inspect(res));\n\n// Adam should be able to read the resource\nconst resByAdam = await adamDb.resource.findUnique({ where: { id: res.id } });\nconsole.log('Resource read by Adam:', inspect(resByAdam));\nexpect(resByAdam).toBeTruthy();\n\n// ❌ Adam shouldn't be able to delete the resource\nawait expect(\n  adamDb.resource.delete({ where: { id: res.id } })\n).rejects.toThrow();\n\n// Emily should be able to delete the resource\nawait emilyDb.resource.delete({ where: { id: res.id } });\nconsole.log('Resource deleted by Emily');\n```\n\n----------------------------------------\n\nTITLE: Creating an RPC-Style API Handler in ZenStack\nDESCRIPTION: Example of creating an RPC-style API handler that mirrors PrismaClient's API across the network. This is the default handler style for ZenStack server adapters.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/_options.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport RPCApiHandler from '@zenstackhq/server/api/rpc';\nconst handler = RPCApiHandler();\n```\n\n----------------------------------------\n\nTITLE: Creating PrismaService in NestJS\nDESCRIPTION: TypeScript code for creating a PrismaService to be used in NestJS controllers.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nestjs.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Access Policies in ZModel Schema for Prisma\nDESCRIPTION: This snippet demonstrates how to define access policies for User and Post models using ZenStack's ZModel schema language. It shows how to specify read and write permissions based on user authentication and post ownership.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-auth/index.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id\n    email String\n}\n\nmodel Post {\n    id Int @id\n    title String\n    content String\n    published Boolean @default(false)\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int String\n\n    // published posts are readable to all login users\n    @@allow('read', auth() != null && published)\n\n    // author has full access\n    @@allow('all', auth() == author)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Resources with Filters in ZenStack RESTful API\nDESCRIPTION: Demonstrates various filtering techniques for querying resources, including equality filters, relationship filters, multiple filters, and deep filtering.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/post?filter[published]=false\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/post?filter[author]=1\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/user?filter[posts]=1\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/post?filter[author]=1,2\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/post?filter[author]=1&filter[published]=true\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/post?filter[author][name]=Emily\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/user?filter[posts][published]=true\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/post?filter[viewCount$gt]=100\n```\n\n----------------------------------------\n\nTITLE: Creating Todo List Component in React with ZenStack Integration\nDESCRIPTION: Implements a TodoList component that displays a list item with metadata and provides deletion functionality. It uses the useList hook from ZenStack to handle deletion operations while respecting access policies defined in the schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/todo-saas/index.md#2025-04-10_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LockClosedIcon, TrashIcon } from '@heroicons/react/24/outline';\nimport { useList } from '@lib/hooks';\nimport { List } from '@prisma/client';\nimport { customAlphabet } from 'nanoid';\nimport { User } from 'next-auth';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport Avatar from './Avatar';\nimport TimeInfo from './TimeInfo';\n\ntype Props = {\n    value: List & { owner: User };\n    deleted?: (value: List) => void;\n};\n\nexport default function TodoList({ value, deleted }: Props) {\n    const router = useRouter();\n\n    const { del } = useList();\n\n    const deleteList = async () => {\n        if (confirm('Are you sure to delete this list?')) {\n            await del({ where: { id: value.id } });\n            if (deleted) {\n                deleted(value);\n            }\n        }\n    };\n    // html\n    return (...}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Model Access Rules with ZenStack\nDESCRIPTION: Defines access policies for the User model using @@allow and @@deny attributes. It implements tenant isolation through collection predicate expressions and leverages the auth() function for user authentication.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nmodel User {\n    ...\n    spaces SpaceUser[]\n\n    // can be created by anyone, even not logged in\n    @@allow('create', true)\n\n    // can be read by users sharing any space\n    @@allow('read', spaces?[space.members?[user == auth()]])\n\n    // full access by oneself\n    @@allow('all', auth() == this)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js API Route with ZenStack-Enhanced Validation\nDESCRIPTION: Implementation of a Next.js API route that uses an enhanced Prisma client to enforce data validation rules defined in the ZModel schema when creating new signup records.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/form-validation/index.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nimport { enhance } from '@zenstackhq/runtime';\nimport { NextResponse } from 'next/server';\n\n// create a database client enhanced by ZenStack that enforces data validation\nconst db = enhance(new PrismaClient());\n\nexport async function POST(request: Request) {\n    const data = await request.json();\n    try {\n        const result = await db.signup.create({ data });\n        return NextResponse.json(result, { status: 201 });\n    } catch (err: any) {\n        return NextResponse.json({ error: err.message }, { status: 400 });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Enhanced PrismaClient with ZenStack for Automatic Access Control\nDESCRIPTION: TypeScript code that creates an enhanced version of PrismaClient using ZenStack's enhance function. This client automatically injects access control conditions into queries based on the user's information and the defined access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/llm-acl/index.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// get user id from session\nconst userId = await requireUserId(request);\n\n// fetch the user\nconst user = await prisma.user.findUniqueOrThrow({\n  where: { id: userId },\n  select: { id: true, region: true },\n});\n\n// create an enhanced PrismaClient\nconst db = enhance(prisma, { user });\n\n// use the enhanced PrismaClient to query data, e.g.:\n//     db.orderItemDetail.groupBy({ ... })\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Policy for List Model\nDESCRIPTION: Access control rules for the List model that enforce tenant isolation, ensuring users can only access lists they own or those in spaces they belong to, with special handling for private lists.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/todo-saas/index.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel List {\n    ...\n    // require login\n    @@deny('all', auth() == null)\n\n    // can be read by owner or space members (only if not private)\n    @@allow('read', owner == auth() || (space.members?[user == auth()] && !private))\n\n    // when create, owner must be set to current user, and user must be in the space\n    @@allow('create', owner == auth() && space.members?[user == auth()])\n\n    // when create, owner must be set to current user, and user must be in the space\n    // update is not allowed to change owner\n    @@allow('update', owner == auth() && space.members?[user == auth()] && future().owner == owner)\n\n    // can be deleted by owner\n    @@allow('delete', owner == auth())\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up API Handler with Next.js App Router\nDESCRIPTION: Creates a request handler for the App Router in Next.js 13+. Uses enhanced Prisma client with user context to handle CRUD operations while enforcing access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/next.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequestHandler } from '@zenstackhq/server/next';\nimport type { NextRequest } from \"next/server\";\nimport { enhance } from '@zenstackhq/runtime';\nimport { prisma } from '~/lib/db.ts';\nimport { getSessionUser } from '~/lib/auth.ts';\n\n// create an enhanced Prisma client with user context\nfunction getPrisma(req: NextRequest) {\n    // getSessionUser extracts the current session user from the request, its\n    // implementation depends on your auth solution\n    return enhance(prisma, { user: getSessionUser(req) });\n}\n\nconst handler = NextRequestHandler({ getPrisma, useAppDir: true });\n\nexport {\n  handler as GET,\n  handler as POST,\n  handler as PUT,\n  handler as PATCH,\n  handler as DELETE,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Generator in ZModel\nDESCRIPTION: Demonstrates how to configure a Prisma generator in ZModel, which is passed to the generated Prisma schema without modification.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/1-zmodel.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\ngenerator client {\n    provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model Schema with Access Policies\nDESCRIPTION: Defines a Post model in ZenStack with relations to User model and access control policies. Includes authorization rules for post management and viewing published posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs.mdx#2025-04-10_snippet_8\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n  id        String @id @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String\n  published Boolean @default(false)\n  author    User @relation(fields: [authorId], references: [id])\n  authorId  String @default(auth().id)\n\n\n  // author has full access\n  @@allow('all', auth() == author)\n\n  // logged-in users can view published posts\n  @@allow('read', auth() != null && published)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models with Prisma/ZenStack\nDESCRIPTION: Example of defining database schema using Prisma's intuitive data modeling syntax, showing User and Post models with relationships and enums.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/fullstack-zenstack/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  email     String   @unique\n  name      String?\n  role      Role     @default(USER)\n  posts     Post[]\n}\n\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  published Boolean  @default(false)\n  title     String   @db.VarChar(255)\n  author    User?    @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n\nenum Role {\n  USER\n  ADMIN\n}\n```\n\n----------------------------------------\n\nTITLE: Using Enhanced PrismaService in NestJS Controller\nDESCRIPTION: Shows how to inject and use the enhanced PrismaService in a NestJS controller for automatic access policy enforcement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nestjs.mdx#2025-04-10_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ENHANCED_PRISMA } from '@zenstackhq/server/nestjs';\n\n@Controller()\nexport class AppController {\n  constructor(\n    // highlight-next-line\n    @Inject(ENHANCED_PRISMA) private readonly prismaService: PrismaService,\n  ) {}\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model with Access Policies in ZModel\nDESCRIPTION: A ZModel definition for a Post entity with access control policies specifying that posts can be read if they are published or if the current user is the author.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/check-permission.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n  id Int @id @default(autoincrement())\n  title String\n  author User @relation(fields: [authorId], references: [id])\n  authorId Int\n  published Boolean @default(false)\n\n  @@allow('read', published || authorId == auth().id)\n}\n```\n\n----------------------------------------\n\nTITLE: Attempting to Create User with Enhanced Prisma Client\nDESCRIPTION: This TypeScript code demonstrates an attempt to create a user using an enhanced Prisma Client. Without explicit access policies, this operation will result in a runtime error due to ZenStack's 'secure by default' approach.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient();\nconst db = enhance(prisma);\nawait db.user.create({ data: { email: 'zen@stack.dev'} });\n```\n\n----------------------------------------\n\nTITLE: Implementing User Model Authorization Rules in ZenStack\nDESCRIPTION: This snippet shows how to define access policies for the User model in ZenStack. It allows all authenticated users to read user data, while limiting update permissions to the user themselves or administrators.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/react-admin/index.md#2025-04-10_snippet_8\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  ...\n\n  // all logged in users can read all users\n  @@allow('read', auth() != null)\n \n  // a user can update himself, and an admin can update any user\n  @@allow('all', auth() == this || auth().role == 'Admin')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Tenant Data Model with ZenStack\nDESCRIPTION: Demonstrates how to model multi-tenant data structures with User, Organization, and shared Asset types. Includes access control policies for data segregation between tenants and resource sharing rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-auth/index.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id\n    email String @unique\n    orgs Org[]\n    posts Post[]\n    tasks Task[]\n\n    // everyone can sign up\n    @@allow('create', true)\n\n    // can be read by users sharing an organization\n    @@allow('read', orgs?[members?[auth() == this]])\n\n    // full access by oneself\n    @@allow('all', auth() == this)\n}\n\nmodel Org {\n    id Int @id\n    name String\n    members User[]\n\n    // login users can create an org\n    @@allow('create', auth() != null)\n\n    // members can read the org\n    @@allow('read', members?[auth() == this])\n}\n\nabstract model Asset {\n    id Int @id\n\tisPublic Boolean @default(false)\n\towner User @relation(fields: [ownerId], references: [id])\n    ownerId String\n    org Organization @relation(fields: [orgId], references: [id])\n    orgId String\n\n    // create: owner must be set to the current user, and the user must be in the org\n    @@allow('create', owner == auth() && org.members?[this == auth()])\n\n    // update: only the owner can update and is not allowed to change the owner\n    @@allow('update', owner == auth() && org.members?[this == auth()] && future().owner == owner)\n\n    // allow owner to read and delete\n    @@allow('read,delete', owner == auth())\n\n    // allow org members to read if public\n    @@allow('read', isPublic && org.members?[this == auth()])\t\t\n}\n\n// inherit fields and policies from Asset\nmodel Post extends Asset {\n    title String\n    content String\n}\n\n// inherit fields and policies from Asset\nmodel Task extends Asset {\n    name String\n    completed Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling Polymorphism with Inheritance in ZModel\nDESCRIPTION: Demonstrates how to model polymorphism using inheritance in ZModel, introducing the @delegate and @discriminator attributes for handling polymorphic relationships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/polymorphism/index.md#2025-04-10_snippet_7\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Asset {\n  id Int\n  createdAt DateTime @default(now)\n  viewCount Int @default(0)\n  owner User @relation(fields: [ownerId], references: [id])\n  ownerId Int\n  type String @discriminator\n  \n  @@delegate\n}\n\nmodel Video extends Asset {\n  duration Int\n  url String\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Script for Vercel Deployment with ZenStack\nDESCRIPTION: A package.json configuration showing how to incorporate the zenstack generation step into a Vercel deployment build process, ensuring the schema.prisma file is up-to-date before building the Next.js application and running database migrations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/deploy.md#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"vercel-build\": \"zenstack generate && next build && prisma migrate deploy\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Access Control in ZenStack Schema\nDESCRIPTION: ZModel schema defining data models with embedded access control policies for posts and comments using @@allow directives.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/redwood-auth/index.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String\n  body      String\n  comments  Comment[]\n  user      User     @relation(fields: [userId], references: [id])\n  userId    Int\n  createdAt DateTime @default(now())\n  published Boolean @default(false)\n\n  // 🔐 Admin user can do everything to his own posts\n  @@allow('all', auth().roles == 'admin' && auth() == user)\n\n  // 🔐 Posts are visible to everyone if published\n  @@allow('read', published)\n}\n\nmodel Comment {\n  id        Int      @id @default(autoincrement())\n  name      String\n  body      String\n  post      Post     @relation(fields: [postId], references: [id])\n  postId    Int\n  createdAt DateTime @default(now())\n\n  // 🔐 Moderator user can do everything to comments\n  @@allow('all', auth().roles == 'moderator')\n\n  // 🔐 Everyone is allowed to view and create comments for published posts\n  @@allow('create,read', post.published)\n}\n```\n\n----------------------------------------\n\nTITLE: Data Models in Prisma Schema for Blog Application\nDESCRIPTION: Complete Prisma schema definition for a blog application, showing the relationship between User and Post models with proper relational modeling.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/firebase-alternative/index.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id            String    @id @default(cuid())\n  name          String?\n  email         String?   @unique\n  posts Post[]\n  ...\n}\n\nmodel Post {\n  id String @id() @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt()\n  title String\n  published Boolean @default(false)\n  author User @relation(fields: [authorId], references: [id])\n  authorId String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Tenancy Schema with ZenStack\nDESCRIPTION: This code snippet defines the schema for a multi-tenancy application using ZenStack's zmodel. It includes models for User, Org, OrgMember, and Resource with various authorization rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/model-authz/index.md#2025-04-10_snippet_10\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  name String\n  reputation Int @default(1)\n  memberships OrgMember[]\n  ownedResources Resource[]\n\n  // can be created by anyone, even not logged in\n  @@allow('create', true)\n\n  // can be read by users sharing any org\n  @@allow('read', memberships?[org.members?[user == auth()]])\n\n  // full access by oneself\n  @@allow('all', auth() == this)\n}\n\nmodel Org {\n  id Int @id @default(autoincrement())\n  name String\n  members OrgMember[]\n  resources Resource[]\n\n  // require login\n  @@deny('all', auth() == null)\n\n  // everyone can create an org\n  @@allow('create', true)\n\n  // any user in the org can read the org\n  @@allow('read', members?[user == auth()])\n\n  // org admin can update and delete\n  @@allow('update,delete', members?[user == auth() && role == 'ADMIN'])\n}\n\nmodel OrgMember {\n  id Int @id @default(autoincrement())\n  org Org @relation(fields: [orgId], references: [id])\n  orgId Int\n  user User @relation(fields: [userId], references: [id])\n  userId Int\n  role String // \"ADMIN\", \"MEMBER\"\n\n  // require login\n  @@deny('all', auth() == null)\n\n  // org admin can create/update/delete\n  @@allow('create,update,delete', org.members?[user == auth() && role == 'ADMIN'])\n\n  // user can read members of an org if he's a member of it\n  @@allow('read', org.members?[user == auth()])\n}\n\nmodel Resource {\n  id Int @id @default(autoincrement())\n  name String\n  public Boolean @default(false)\n  owner User @relation(fields: [ownerId], references: [id])\n  ownerId Int\n  org Org @relation(fields: [orgId], references: [id])\n  orgId Int\n\n  // require login\n  @@deny('all', auth() == null)\n\n  // can be read by owner or org members (if public) \n  @@allow('read', owner == auth() || (org.members?[user == auth()] && public))\n\n  // when create, owner must be set to current user, and user must be in the org\n  @@allow('create', owner == auth() && org.members?[user == auth()])\n\n  // can be updated by owner\n  // update is not allowed to change owner\n  @@allow('update', owner == auth() && future().owner == owner)\n\n  // can be deleted by owner\n  @@allow('delete', owner == auth())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Access Control Policies in ZModel Schema\nDESCRIPTION: A ZModel schema that extends regular Prisma models with access control policies using the @@allow attribute. It defines rules ensuring analysts can only read orders and order items from their assigned region.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/llm-acl/index.md#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Product {\n  ...\n\n  // 🔐 login is required to read products\n  @@allow('read', auth() != null)\n}\n\nmodel Order {\n  ...\n\n  // 🔐 analysts can only read orders of their assigned region\n  @@allow('read', auth().region == region)\n}\n\nmodel OrderItem {\n  ...\n\n  // 🔐 analysts can only read order items of their assigned region\n  @@allow('read', auth().region == order.region)\n}\n\nview OrderItemDetail {\n  ...\n\n  // 🔐 analysts can only read order details of their assigned region\n  @@allow('read', auth().region == region)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ZModel Schema with tRPC Plugin\nDESCRIPTION: Example of a ZModel schema file with tRPC plugin configuration and model definitions for a blogging app.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/trpc.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin trpc {\n  provider = '@zenstackhq/trpc'\n  output = 'server/routers/generated'\n  generateModelActions = 'create,update,findUnique,findMany'\n}\n\nmodel User {\n  id            String    @id @default(cuid())\n  email         String\n  posts         Post[]\n\n  // everyone can signup, and user profile is also publicly readable\n  @@allow('create,read', true)\n}\n\nmodel Post {\n  id        String @id @default(cuid())\n  title     String\n  published Boolean @default(false)\n  author    User @relation(fields: [authorId], references: [id])\n  authorId  String\n\n  // author has full access\n  @@allow('all', auth() == author)\n\n  // logged-in users can view published posts\n  @@allow('read', auth() != null && published)\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Post Query Using ZenStack in TypeScript\nDESCRIPTION: This snippet shows how ZenStack simplifies the process of querying posts with access control, by handling the complex conditions internally based on the defined access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/drizzle-prisma/index.md#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndb.post.findMany({\n    include: { author: true },\n    where: {\n        space: { slug: req.params.slug },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Token Extraction and User Authentication for ZenStack\nDESCRIPTION: Helper function to extract and verify JWT tokens from request headers, then passing the authenticated user to the enhanced Prisma client. This enables the auth() function in access policies to identify the current user.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Request } from 'express';\n\nfunction getUser(req: Request) {\n    const token = req.headers.authorization?.split(' ')[1];\n    console.log('TOKEN:', token);\n    if (!token) {\n        return undefined;\n    }\n    try {\n        const decoded: any = jwt.verify(token, process.env.JWT_SECRET!);\n        return { id: decoded.sub };\n    } catch {\n        // bad token\n        return undefined;\n    }\n}\n\napp.use(\n    '/api',\n    ZenStackMiddleware({\n        getPrisma: (req) => {\n            return enhance(prisma, { user: getUser(req) });\n        },\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Defining ACL Schema with ZenStack\nDESCRIPTION: Defines the schema for an Access Control List (ACL) pattern using ZenStack's ZModel language. It includes User, Access, and Resource models with access control rules specified using @@allow attributes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/model-authz/index.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  name String\n  access Access[]\n  ownedResources Resource[]\n}\n\nmodel Access {\n  id Int @id @default(autoincrement())\n  user User @relation(fields: [userId], references: [id])\n  userId Int\n  resource Resource @relation(fields: [resourceId], references: [id])\n  resourceId Int\n\n  // view permission\n  view Boolean?\n\n  // manage permission\n  manage Boolean?\n\n  // resource owner has full control over its access list\n  @@allow('all', resource.owner == auth())\n}\n\nmodel Resource {\n  id Int @id @default(autoincrement())\n  name String\n  owner User @relation(fields: [ownerId], references: [id])\n  ownerId Int\n  access Access[]\n\n  // owner has full control\n  @@allow('all', owner == auth())\n\n  // readable if there exists a \"read\" permission for the current user\n  @@allow('read', access?[user == auth() && view])\n\n  // writeable if there exists a \"manage\" permission for the current user\n  @@allow('update,delete', access?[user == auth() && manage])\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZenStackModule in NestJS AppModule\nDESCRIPTION: Demonstrates how to register and configure the ZenStackModule in a NestJS application module, including setting up the enhanced PrismaClient.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nestjs.mdx#2025-04-10_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZenStackModule } from '@zenstackhq/server/nestjs';\nimport { enhance } from '@zenstackhq/runtime';\n\n@Module({\n  imports: [\n    ...\n\n    // highlight-start\n    ZenStackModule.registerAsync({\n      useFactory: (prisma: PrismaService, cls: ClsService) => {\n        return {\n          getEnhancedPrisma: () => enhance(prisma, { user: cls.get('auth') }),\n        };\n      },\n      inject: [PrismaService, ClsService],\n      extraProviders: [PrismaService],\n    }),\n    // highlight-end\n  ],\n\n  ...\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing List Management UI with ZenStack Hooks in Next.js\nDESCRIPTION: A Next.js page component for managing lists within a space, demonstrating ZenStack's query and mutation hooks with automatic invalidation. Shows nested queries with space and list relationships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/4-invalidation.md#2025-04-10_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useSession } from 'next-auth/react';\nimport Link from 'next/link';\nimport { useParams } from 'next/navigation';\nimport { useCreateList, useFindManyList, useFindUniqueSpace } from '~/lib/hooks';\n\nexport default function SpaceHome() {\n    const { slug } = useParams<{ slug: string }>();\n\n    const { data: session } = useSession();\n\n    const { data: space } = useFindUniqueSpace({ where: { slug } }, { enabled: !!session?.user });\n\n    const { data: lists } = useFindManyList(\n        {\n            where: { space: { slug } },\n            include: { owner: true },\n            orderBy: { updatedAt: 'desc' },\n        },\n        { enabled: !!session?.user },\n    );\n\n    const { mutate: createList } = useCreateList();\n\n    function onCreateList() {\n        const title = prompt('Enter a title for your list');\n        if (title) {\n            createList({\n                data: {\n                    title,\n                    space: { connect: { id: space?.id } },\n                    owner: { connect: { id: session?.user.id } },\n                },\n            });\n        }\n    }\n\n    if (!session?.user || !space || !lists) return null;\n\n    return (\n        <div className=\"container mx-auto mt-16\">\n            <h1 className=\"text-center text-3xl\">\n                Welcome to Space <span className=\"italic\">{space.name}</span>\n            </h1>\n            <div className=\"p-8\">\n                <button className=\"btn btn-primary btn-wide\" onClick={onCreateList}>\n                    Create a list\n                </button>\n\n                <ul className=\"mt-8 flex flex-wrap gap-6\">\n                    {lists?.map((list) => (\n                        <Link href={`/spaces/${slug}/${list.id}`} key={list.id}>\n                            <li className=\"flex h-32 w-72 items-center justify-center rounded-lg border text-2xl\">\n                                {list.title}\n                            </li>\n                        </Link>\n                    ))}\n                </ul>\n            </div>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging for Enhanced PrismaClient in TypeScript\nDESCRIPTION: This snippet shows how to enable debug logging when creating an enhanced PrismaClient instance. It sets the logPrismaQuery option to true.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/debugging.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user }, { logPrismaQuery: true })\n```\n\n----------------------------------------\n\nTITLE: Implementing Public Booking Form Page\nDESCRIPTION: Main booking form implementation with date/time selection, form validation, and submission handling. Uses React Calendar for date picking and includes input validation for email and notes fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/cal-com-clone.mdx#2025-04-10_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ActionArgs, LoaderArgs, MetaFunction } from '@remix-run/node';\nimport { json, redirect } from '@remix-run/node';\nimport { Form, useActionData, useLoaderData } from '@remix-run/react';\nimport * as React from 'react';\nimport { createBooking } from '~/models/booking.server';\nimport { getUserById } from '~/models/user.server';\nimport Calendar from 'react-calendar';\nimport styles from 'react-calendar/dist/Calendar.css';\n\nexport function links() {\n    return [{ rel: 'stylesheet', href: styles }];\n}\n\nexport async function loader({ request }: LoaderArgs) {\n    const url = new URL(request.url);\n    const uid = url.searchParams.get('uid');\n    if (!uid) {\n        throw Error('Missing uid parameter');\n    }\n    const user = await getUserById(uid);\n    return json({ user });\n}\n\nexport async function action({ request }: ActionArgs) {\n    const formData = await request.formData();\n    const uid = formData.get('uid');\n    const email = formData.get('email');\n    const notes = formData.get('notes');\n    const startAt = formData.get('startAt') as string;\n\n    if (typeof uid !== 'string' || uid.length === 0) {\n        return json({ errors: { email: null, notes: null } }, { status: 400 });\n    }\n\n    if (typeof email !== 'string' || email.length === 0) {\n        return json({ errors: { email: 'Email is required', notes: null } }, { status: 400 });\n    }\n\n    if (typeof notes !== 'string' || notes.length === 0) {\n        return json({ errors: { email: null, notes: 'Notes is required' } }, { status: 400 });\n    }\n\n    await createBooking({\n        email,\n        notes,\n        userId: uid,\n        startAt: new Date(startAt),\n        duration: 30,\n    });\n\n    return redirect(`/thankyou`);\n}\n\nexport const meta: MetaFunction = () => {\n    return {\n        title: 'Create Booking',\n    };\n};\n\nexport default function NewBookingPage() {\n    const data = useLoaderData<typeof loader>();\n    const actionData = useActionData<typeof action>();\n    const emailRef = React.useRef<HTMLInputElement>(null);\n    const notesRef = React.useRef<HTMLTextAreaElement>(null);\n    const [date, setDate] = React.useState(new Date());\n    const [hour, setHour] = React.useState('8');\n    const [duration, setDuration] = React.useState(30);\n    const [startAt, setStartAt] = React.useState(new Date().toISOString());\n\n    function updateStartAt(date: Date, hour: number) {\n        const d = new Date(date);\n        d.setHours(hour);\n        d.setMinutes(0);\n        d.setSeconds(0);\n        d.setMilliseconds(0);\n        setStartAt(d.toISOString());\n        console.log(d.toISOString());\n    }\n\n    function onDateChange(date: Date) {\n        setDate(date);\n        updateStartAt(date, parseInt(hour));\n    }\n\n    function onHourChange(hour: string) {\n        console.log(hour);\n        setHour(hour);\n        updateStartAt(date, parseInt(hour));\n    }\n\n    React.useEffect(() => {\n        if (actionData?.errors?.email) {\n            emailRef.current?.focus();\n        } else if (actionData?.errors?.notes) {\n            notesRef.current?.focus();\n        }\n    }, [actionData]);\n\n    return (\n        <div className=\"mx-auto max-w-5xl py-16\">\n            <h1 className=\"pb-4 text-center text-3xl font-semibold\">Create a booking</h1>\n            <p className=\"pb-4 text-center\">Booking request will be sent to {data.user?.email}</p>\n            <Form\n                method=\"post\"\n                style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    gap: 8,\n                    width: '100%',\n                }}\n            >\n                <div>\n                    <label className=\"flex w-full flex-col gap-1\">\n                        <span>Email: </span>\n                        <input\n                            ref={emailRef}\n                            name=\"email\"\n                            type=\"email\"\n                            className=\"flex-1 rounded-md border-2 border-blue-500 px-3 text-lg leading-loose\"\n                        />\n                    </label>\n                    {actionData?.errors?.email && (\n                        <div className=\"pt-1 text-red-700\" id=\"email-error\">\n                            {actionData.errors.email}\n                        </div>\n                    )}\n                </div>\n                <div>\n                    <label className=\"flex w-full flex-col gap-1\">\n                        <span>Notes: </span>\n                        <textarea\n                            ref={notesRef}\n                            name=\"notes\"\n                            rows={8}\n                            className=\"w-full flex-1 rounded-md border-2 border-blue-500 py-2 px-3 text-lg leading-6\"\n                        />\n                    </label>\n                    {actionData?.errors?.notes && (\n                        <div className=\"pt-1 text-red-700\" id=\"notes-error\">\n                            {actionData.errors.notes}\n                        </div>\n                    )}\n                </div>\n                <div className=\"flex flex-row gap-4\">\n                    <div>\n                        <label className=\"flex w-full flex-col gap-1\">\n                            <span>Date: </span>\n                            <Calendar\n                                className=\"rounded-lg border-2 border-blue-500 p-4\"\n                                value={date}\n                                onChange={onDateChange}\n                            />\n                        </label>\n                    </div>\n                    <div className=\"flex flex-grow flex-col gap-2\">\n                        <label className=\"flex w-full flex-col gap-1\">\n                            <span>Start At: </span>\n                            <select\n                                name=\"startTime\"\n                                className=\"rounded-lg border-2 border-blue-500 p-2\"\n                                value={hour}\n                                onChange={(e) => onHourChange(e.currentTarget.value)}\n                            >\n                                {[...Array(24).keys()].map((i) => (\n                                    <option key={i} value={`${i}`}>\n                                        {String(i).padStart(2, '0')}:00\n                                    </option>\n                                ))}\n                            </select>\n                        </label>\n                        <label className=\"flex w-full flex-col gap-1\">\n                            <span>Duration: {duration} minutes</span>\n                            <input\n                                name=\"duration\"\n                                type=\"range\"\n                                min=\"15\"\n                                max=\"120\"\n                                step=\"15\"\n                                className=\"rounded-lg border-2 border-blue-500 p-2\"\n                                value={duration}\n                                onChange={(e) => setDuration(Number(e.target.value))}\n                            />\n                        </label>\n                    </div>\n                </div>\n                <input type=\"hidden\" value={data.user?.id} name=\"uid\" />\n                <input type=\"hidden\" value={startAt} name=\"startAt\" />\n                <div className=\"text-right\">\n                    <button\n                        type=\"submit\"\n                        className=\"rounded bg-blue-500 py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n                    >\n                        Send Request\n                    </button>\n                </div>\n            </Form>\n        </div>\n    );\n```\n\n----------------------------------------\n\nTITLE: Enhance Function Signature in TypeScript\nDESCRIPTION: The function signature for the enhance function which creates an enhanced wrapper for a PrismaClient instance with the same APIs as the original.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/runtime-api.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction enhance<DbClient extends object>(\n    prisma: DbClient,\n    context?: EnhancementContext,\n    options?: EnhancementOptions\n): DbClient;\n```\n\n----------------------------------------\n\nTITLE: Defining Data Model and Access Control with ZModel\nDESCRIPTION: Example of defining a Post model using ZModel language with access control policies and React hooks plugin configuration\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-zenstack.mdx#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n  id        String @id @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String\n  published Boolean @default(false)\n  author    User @relation(fields: [authorId], references: [id])\n  authorId  String\n\n  // author has full access\n  @@allow('all', auth() == author)\n\n  // logged-in users can view published posts\n  @@allow('read', auth() != null && published)\n}\n\n// generate swr hooks under ./src/lib/hook\nplugin reactHooks {\n  provider = '@zenstackhq/swr'\n  output = \"./src/lib/hook\"\n}\n```\n\n----------------------------------------\n\nTITLE: Database Schema Definition with Prisma ORM\nDESCRIPTION: A Prisma schema for the blog API using Prisma's DSL. It defines models for User, Space, SpaceUser, and Post with their relationships, enums, and constraints in a more concise syntax compared to the Drizzle version.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/drizzle-prisma/index.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id              Int         @id @default(autoincrement())\n  email           String      @unique\n  posts           Post[]\n  spaceMembership SpaceUser[]\n  ownedSpaces     Space[]\n}\n\nmodel Space {\n  id      Int         @id @default(autoincrement())\n  owner   User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n  ownerId Int\n  name    String\n  slug    String      @unique\n  posts   Post[]\n  members SpaceUser[]\n}\n\nenum SpaceUserRole {\n  MEMBER\n  ADMIN\n}\n\nmodel SpaceUser {\n  id      Int           @id @default(autoincrement())\n  space   Space         @relation(fields: [spaceId], references: [id], onDelete: Cascade)\n  spaceId Int\n  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId  Int\n  role    SpaceUserRole @default(MEMBER)\n\n  @@unique([spaceId, userId])\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  published Boolean @default(false)\n  author    User?   @relation(fields: [authorId], references: [id], onDelete: Cascade)\n  authorId  Int?\n  space     Space?  @relation(fields: [spaceId], references: [id], onDelete: Cascade)\n  spaceId   Int?\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RPC API Handler in Next.js\nDESCRIPTION: This snippet demonstrates how to create and use the RPC API Handler in a Next.js application. It uses the NextRequestHandler and RPCApiHandler from ZenStack's server package.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rpc.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequestHandler } from '@zenstackhq/server/next';\nimport RPCApiHandler from '@zenstackhq/server/api/rpc';\nimport { getPrisma } from '../../lib/db';\n\nexport default NextRequestHandler({ \n    getPrisma, \n    handler: RPCApiHandler() // you can also omit it since `RPCApiHandler` is the default\n});\n```\n\n----------------------------------------\n\nTITLE: Complete ZModel Schema with OpenAPI Plugin Configuration\nDESCRIPTION: Example of a complete ZModel schema file with OpenAPI plugin configuration. Defines a SQLite data source and configures the OpenAPI plugin with various options.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/openapi.mdx#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\ndatasource db {\n    provider = 'sqlite'\n    url = 'file:./dev.db'\n}\n\nplugin openapi {\n    provider = '@zenstackhq/openapi'\n    output = './openapi.yaml'\n    title = 'My awesome API'\n    version = '0.5.0'\n    summary = 'Created with ZenStack'\n    description = 'My awesome API created with ZenStack'\n    prefix = '/api'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining @@deny Model-Level Policy in ZenStack\nDESCRIPTION: Alternative implementation using @@deny attribute to achieve the same access control as the previous example, restricting read access to only published posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.1-model-level.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id Int @id\n    title String\n    published Boolean @default(false)\n\n    @@allow('read', true)\n    @@deny('read', !published)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Post Model with Validation Rules in ZModel\nDESCRIPTION: Example ZModel definition of a Post model with various validation rules including length constraints and regex pattern matching for the title field.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/zod.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n  id Int @id @default(autoincrement())\n  title String @length(10, 255)\n  published Boolean @default(false)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  author User @relation(fields: [authorId], references: [id])\n  authorId Int\n\n  @@validate(regex(title, \"^[A-Za-z0-9 ]+$\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout with QueryClientProvider\nDESCRIPTION: Integration of the QueryClientProvider into the Next.js root layout component.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/2-generate-hooks.md#2025-04-10_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport QueryClientProvider from '~/components/QueryClientProvider';\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body className={`font-sans ${inter.variable}`}>\n        <QueryClientProvider>\n          <NextAuthSessionProvider>{children}</NextAuthSessionProvider>\n        </QueryClientProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Route for ZenStack CRUD Operations\nDESCRIPTION: Next.js API route implementation that mounts ZenStack's automatic CRUD service with access policy enforcement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nextjs.mdx#2025-04-10_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextRequestHandler } from '@zenstackhq/server/next';\nimport { enhance } from '@zenstackhq/runtime';\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport { getServerAuthSession } from '../../../server/auth';\nimport { prisma } from '../../../server/db';\n\nasync function getPrisma(req: NextApiRequest, res: NextApiResponse) {\n    const session = await getServerAuthSession({ req, res });\n    // create a wrapper of Prisma client that enforces access policy,\n    // data validation, and @password, @omit behaviors\n    return enhance(prisma, { user: session?.user });\n}\n\nexport default NextRequestHandler({ getPrisma });\n```\n\n----------------------------------------\n\nTITLE: Defining Strongly Typed JSON in ZModel Schema\nDESCRIPTION: Shows how to use ZenStack's type keyword to define a strongly typed structure for JSON data in a ZModel schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/json-typing/index.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\ntype Metadata {\n  width Int\n  height Int\n  format String\n}\n\nmodel Image {\n  id Int @id @default(autoincrement())\n  metadata Metadata @json\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models and Access Policies with ZModel in ZenStack\nDESCRIPTION: This ZModel schema defines User and Post models with declarative access policies. It specifies rules like users can only see their own email, users have full access to their profiles, published posts are readable to everyone, and editors have special privileges.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/nest-api/index.md#2025-04-10_snippet_6\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  email String @unique @allow('read', auth() == this) // #1\n  name String?\n  role String @default(\"USER\")\n  posts Post[]\n\n  @@allow('all', auth() == this) // #2\n  @@allow('read', true) // #3\n}\n\nmodel Post {\n  id Int @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title String\n  content String?\n  published Boolean @default(false) @allow('update', auth().role == \"EDITOR\") // #4\n  author User? @relation(fields: [authorId], references: [id])\n  authorId Int?\n\n  @@allow('all', auth() == author || auth().role == 'EDITOR') // #5\n  @@allow('read', published) // #6\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models and Access Control with ZenStack\nDESCRIPTION: Shows how to define data models for User and Todo entities using ZenStack, including access control rules using @@allow attributes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-tanstack/index.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id String @default(cuid())\n  email String @unique @email\n  name String\n  todos Todo[]\n\n  // 🔐 user can fully control himself (`auth()` represents the current user)\n  @@allow('all', auth() == this)\n\n  // 🔐 user profiles are readable to all login users\n  // `auth() == null` means the user is anonymous\n  @@allow('read', auth() != null)\n}\n\nmodel Todo {\n  id String @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title String\n  published Boolean @default(false)\n  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n  ownerId String\n\n  // 🔐 owner has full access\n  @@allow('all', auth() == owner)\n\n  // 🔐 published todos are readable to all users (even anonymous)\n  @@allow('read', published)\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript signature of enhance function\nDESCRIPTION: Formal function signature of the enhance function showing its parameters and return type. It takes a PrismaClient instance and optionally a context for policy evaluation and enhancement options.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/runtime-api.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction enhance<DbClient extends object>(\n    prisma: DbClient,\n    context?: WithPolicyContext,\n    options?: EnhancementOptions\n): DbClient;\n```\n\n----------------------------------------\n\nTITLE: Creating Server Hooks for Authentication in SvelteKit\nDESCRIPTION: Implements a SvelteKit server hook that extracts and validates JWT tokens from cookies, fetches the corresponding user from the database, and adds both the user information and an enhanced Prisma client to the request context for access policy enforcement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/sveltekit.mdx#2025-04-10_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from '$env/dynamic/private';\nimport { JWT_TOKEN_COOKIE_NAME } from '$lib/auth';\nimport { prisma } from '$lib/db';\nimport type { Handle } from '@sveltejs/kit';\nimport { enhance } from '@zenstackhq/runtime';\nimport jwt from 'jsonwebtoken';\n\nconst auth = (async ({ event, resolve }) => {\n    const token = event.cookies.get(JWT_TOKEN_COOKIE_NAME);\n    if (token) {\n        try {\n            const decoded = jwt.verify(token, env.JWT_SECRET);\n            const user = await prisma.user.findUnique({\n                where: { id: decoded.sub as string }\n            });\n            if (user) {\n                event.locals.user = user;\n            } else {\n                console.warn('User not found:', decoded.sub);\n                event.cookies.delete(JWT_TOKEN_COOKIE_NAME, { path: '/' });\n            }\n        } catch {\n            event.cookies.delete(JWT_TOKEN_COOKIE_NAME, { path: '/' });\n        }\n    }\n\n    // create an enhanced PrismaClient that recognizes access policies\n    event.locals.db = enhance(prisma, {\n        user: event.locals.user ? { id: event.locals.user.id } : undefined\n    });\n\n    return resolve(event);\n}) satisfies Handle;\n\nexport const handle = auth;\n```\n\n----------------------------------------\n\nTITLE: Creating ZModel Schema for Todo Application\nDESCRIPTION: Defines the database schema using ZModel, a superset of Prisma schema language that allows modeling both data structure and access control policies. The schema includes List and Todo models for a multi-tenant Todo application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/clerk-multitenancy/index.mdx#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator js {\n  provider = \"prisma-client-js\"\n}\n\n// Todo list\nmodel List {\n  id        String        @id @default(cuid())\n  createdAt DateTime      @default(now())\n  title     String\n  private   Boolean       @default(false)\n  orgId     String?\n  ownerId   String\n  todos     Todo[]\n}\n\n// Todo item\nmodel Todo {\n  id          String    @id @default(cuid())\n  title       String\n  completedAt DateTime?\n  list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)\n  listId      String\n}\n```\n\n----------------------------------------\n\nTITLE: Data Model Definition\nDESCRIPTION: ZModel schema defining User and Post models with access policies and relationships\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/sveltekit.mdx#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id @default(cuid())\n    email String @unique @email\n    password String @password @omit @length(8, 16)\n    posts Post[]\n\n    // everybody can signup\n    @@allow('create,read', true)\n\n    // full access by self\n    @@allow('all', auth() == this)\n}\n\nmodel Post {\n    id String @id @default(cuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    title String @length(1, 256)\n    published Boolean @default(false)\n    author User? @relation(fields: [authorId], references: [id])\n    authorId String? @default(auth().id)\n\n    // allow read for all signin users\n    @@allow('read', auth() != null && published)\n\n    // full access by author\n    @@allow('all', author == auth())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Enhanced Prisma Client with ZenStack\nDESCRIPTION: JavaScript utility function to create an enhanced Prisma client that enforces access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/redwood-auth/index.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\n\n/*\n * Returns ZenStack wrapped Prisma Client with access policies enabled.\n */\nexport function authDb() {\n  return enhance(db, { user: context.currentUser });\n}\n```\n\n----------------------------------------\n\nTITLE: Using @openapi.meta Attribute with RPC Flavor in ZModel\nDESCRIPTION: Example of using the @openapi.meta attribute to customize OpenAPI generation for a User model with RPC flavor, including custom security, tag descriptions, and operation-specific configurations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/openapi.mdx#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id\n    email String @unique\n\n    @@openapi.meta({\n        security: [ { basic: [] } ],\n        tagDescription: 'Operations for managing users',\n        findMany: {\n            description: 'Find users matching the given conditions'\n        },\n        delete: {\n            method: 'put',\n            path: 'dodelete',\n            description: 'Delete a unique user',\n            summary: 'Delete a user yeah yeah',\n            tags: ['delete', 'user'],\n        },\n        createMany: {\n            security: [],\n            deprecated: true\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Access Policies to Post Model in ZModel\nDESCRIPTION: Enhanced Post model with ZenStack access policies for tenant isolation. Defines who can read, create, update, and delete posts based on ownership and space membership.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/multi-tenant/index.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id String @id @default(uuid())\n    title String\n    content String?\n    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n    ownerId String\n    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)\n    spaceId String\n\n    // can be read by owner or space members (only if not private)\n    @@allow('read', owner == auth() || space.members?[user == auth()] )\n\n    // when create, owner must be set to current user, and user must be in the space\n    @@allow('create', owner == auth() && space.members?[user == auth()])\n\n    // when update, owner must be set to current user, and user must be in the space\n    // update is not allowed to change owner\n    @@allow('update', owner == auth() && space.members?[user == auth()] && future().owner == owner)\n\n    // can be deleted by owner\n    @@allow('delete', owner == auth())\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling One-to-Many Relationships in Prisma Schema\nDESCRIPTION: Example showing how to define a one-to-many relationship between User and Post models using the @relation attribute. It demonstrates how to connect models with foreign keys and define the relationship fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/0-prisma.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id @default(@autoincrement())\n    ...\n    posts Post[]\n}\n\nmodel Post {\n    id Int @id @default(@autoincrement())\n    title String\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Type for Access Control\nDESCRIPTION: Creates an Auth type in ZModel to represent the authentication context used in access control rules, including user ID, team information, and roles.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/stackauth-multitenancy/index.mdx#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\n// The shape of `auth()`\ntype Auth {\n  // Current user's ID\n  userId         String  @id\n\n  // User's current team ID\n  currentTeamId   String?\n\n  // User's role in the current team\n  currentTeamRole String?\n\n  @@auth\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RESTful API Handler with ZenStack in Next.js\nDESCRIPTION: This code sets up a RESTful API handler for database operations with ZenStack. It extracts user information from JWT tokens for authentication, enhances the Prisma client with access control, and handles various HTTP methods.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/react-admin/index.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type AuthUser, enhance } from \"@zenstackhq/runtime\";\nimport RestApiHandler from \"@zenstackhq/server/api/rest\";\nimport { NextRequestHandler } from \"@zenstackhq/server/next\";\nimport { type JwtPayload, verify } from \"jsonwebtoken\";\nimport type { NextRequest } from \"next/server\";\nimport { db } from \"~/server/db\";\n\n// the `getPrisma` callback returns a `PrismaClient` instance used for accessing the database\n// for a request, here we return a ZenStack-enhanced `PrismaClient` to enforce access control\nasync function getPrisma(req: NextRequest) {\n  let user: AuthUser | undefined;\n  const auth = req.headers.get(\"authorization\");\n  if (auth) {\n    const token = auth.split(\"Bearer \")[1];\n    if (token) {\n      const decoded = verify(token, process.env.JWT_SECRET!) as JwtPayload;\n      user = {\n        id: parseInt(decoded.sub!),\n        role: decoded.role as string,\n      };\n    }\n  }\n\n  // use the user identity extracted from the JWT token to access the database\n  return enhance(db, { user });\n}\n\nconst handler = NextRequestHandler({\n  getPrisma,\n  handler: RestApiHandler({ endpoint: \"http://localhost:3000\" }),\n  useAppDir: true,\n});\n\nexport {\n  handler as DELETE,\n  handler as GET,\n  handler as PATCH,\n  handler as POST,\n  handler as PUT,\n};\n```\n\n----------------------------------------\n\nTITLE: Collection Predicate Expression Syntax in ZenStack\nDESCRIPTION: Shows the syntax for collection predicate expressions in ZenStack, which is used to check if any element in a collection matches a specified condition.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n<collection>?[condition]\n```\n\n----------------------------------------\n\nTITLE: Defining List and Todo Models in ZenStack Schema\nDESCRIPTION: Schema definition for the List and Todo models with their relationships, fields, and data types. It establishes a one-to-many relationship between Space and List, and between List and Todo.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/todo-saas/index.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel List {\n    id String @id @default(uuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)\n    spaceId String\n    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n    ownerId String\n    title String @length(1, 100)\n    // whether it is private\n    private Boolean @default(false)\n    todos Todo[]\n}\n\nmodel Todo {\n    id String @id @default(uuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n    ownerId String\n    list List @relation(fields: [listId], references: [id], onDelete: Cascade)\n    listId String\n    title String @length(1, 100)\n    // completed time\n    completedAt DateTime?\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Enhanced PrismaClient Helper in TypeScript\nDESCRIPTION: This snippet defines a helper function 'getUserDb()' that creates an enhanced PrismaClient instance with user context for proper access control. It uses StackAuth to get the current user and team information.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/stackauth-multitenancy/index.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from \"@zenstackhq/runtime\";\nimport { stackServerApp } from \"~/stack\";\n\nexport async function getUserDb() {\n  const stackAuthUser = await stackServerApp.getUser();\n  const currentTeam = stackAuthUser?.selectedTeam;\n\n  // by default StackAuth's team members have \"admin\" or \"member\" role\n  const perm =\n    currentTeam && (await stackAuthUser.getPermission(currentTeam, \"admin\"));\n\n  const user = stackAuthUser\n    ? {\n        userId: stackAuthUser.id,\n        currentTeamId: stackAuthUser.selectedTeam?.id,\n        currentTeamRole: perm ? \"admin\" : \"member\",\n      }\n    : undefined; // anonymous\n  return enhance(prisma, { user });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ZModel Schema with tRPC Plugin\nDESCRIPTION: ZModel schema definition including the tRPC plugin configuration and model definitions for a blogging app.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/trpc.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin trpc {\n  provider = '@zenstackhq/trpc'\n  output = 'server/routers/generated'\n  generateModelActions = 'create,update,findUnique,findMany'\n}\n\nmodel User {\n  id            String    @id @default(cuid())\n  email         String\n  posts         Post[]\n\n  // everyone can signup, and user profile is also publicly readable\n  @@allow('create,read', true)\n}\n\nmodel Post {\n  id        String @id @default(cuid())\n  title     String\n  published Boolean @default(false)\n  author    User @relation(fields: [authorId], references: [id])\n  authorId  String\n\n  // author has full access\n  @@allow('all', auth() == author)\n\n  // logged-in users can view published posts\n  @@allow('read', auth() != null && published)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User with Posts using RPC Handler\nDESCRIPTION: Example demonstrating how to create a user with multiple posts using fetch API with RPC-style handler. The request includes nested creation of posts and returns the created user with associated posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/_using-api.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst r = await fetch(`/api/user/create`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n        include: { posts: true },\n        data: {\n            email: 'user1@abc.com',\n            posts: {\n                create: [{ title: 'Post 1' }, { title: 'Post 2' }],\n            },\n        },\n    }),\n});\n\nconsole.log(await r.json());\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"email\": \"user1@abc.com\",\n    \"posts\": [\n        {\n            \"id\": 1,\n            \"createdAt\": \"2023-03-14T07:45:04.036Z\",\n            \"updatedAt\": \"2023-03-14T07:45:04.036Z\",\n            \"title\": \"Post 1\",\n            \"authorId\": 1\n        },\n        {\n            \"id\": 2,\n            \"createdAt\": \"2023-03-14T07:45:04.036Z\",\n            \"updatedAt\": \"2023-03-14T07:45:04.036Z\",\n            \"title\": \"Post 2\",\n            \"authorId\": 1\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Omission in User Model\nDESCRIPTION: Shows how to use the @omit attribute to exclude sensitive fields from query results.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/6-other-enhancements.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    ...\n    password String? @password @omit\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Schema with ZModel\nDESCRIPTION: Creates a ZModel schema file that defines the database structure for Todo lists and items, using ZModel which is a superset of Prisma schema language.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/stackauth-multitenancy/index.mdx#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator js {\n  provider = \"prisma-client-js\"\n}\n\n// Todo list\nmodel List {\n  id        String        @id @default(cuid())\n  createdAt DateTime      @default(now())\n  title     String\n  private   Boolean       @default(false)\n  orgId     String?\n  ownerId   String\n  todos     Todo[]\n}\n\n// Todo item\nmodel Todo {\n  id          String    @id @default(cuid())\n  title       String\n  completedAt DateTime?\n  list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)\n  listId      String\n}\n```\n\n----------------------------------------\n\nTITLE: ZenStack Enhanced Prisma Client with Pulse in TypeScript\nDESCRIPTION: Demonstrates how to use ZenStack's access policies with Prisma Pulse's stream() API. This example shows how to enhance a Prisma client with user session data and use it to create a policy-filtered stream.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/prisma-pulse.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user: session.user });\n\n// The event stream is automatically filtered by the access policies\nconst stream = await db.user.stream(...);\n```\n\n----------------------------------------\n\nTITLE: Implementing Signin Page in Next.js with NextAuth\nDESCRIPTION: A Next.js client component for user authentication using NextAuth.js credentials provider. It handles form submission, authentication result validation, and navigation after successful login.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/next-app-router.mdx#2025-04-10_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport type { NextPage } from \"next\";\nimport { signIn } from \"next-auth/react\";\nimport { useRouter } from \"next/navigation\";\nimport { useState, type FormEvent } from \"react\";\n\nconst Signin: NextPage = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const router = useRouter();\n\n  async function onSignin(e: FormEvent) {\n    e.preventDefault();\n\n    const result = await signIn(\"credentials\", {\n      redirect: false,\n      email,\n      password,\n    });\n\n    if (result?.ok) {\n      router.push(\"/\");\n    } else {\n      alert(\"Signin failed\");\n    }\n  }\n\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\">\n      <h1 className=\"text-5xl font-extrabold text-white\">Login</h1>\n      <form\n        className=\"mt-16 flex flex-col gap-8 text-2xl\"\n        onSubmit={(e) => void onSignin(e)}\n      >\n        <div>\n          <label htmlFor=\"email\" className=\"inline-block w-32  text-white\">\n            Email\n          </label>\n          <input\n            id=\"email\"\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.currentTarget.value)}\n            className=\"ml-4 w-72 rounded border p-2\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"password\" className=\"inline-block w-32  text-white\">\n            Password\n          </label>\n          <input\n            id=\"password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.currentTarget.value)}\n            className=\"ml-4 w-72 rounded border p-2\"\n          />\n        </div>\n        <input\n          type=\"submit\"\n          value=\"Sign me in\"\n          className=\"cursor-pointer rounded border border-gray-500 py-4 text-white\"\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default Signin;\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Hashing in User Model with ZenStack\nDESCRIPTION: This snippet defines a User model with email/password fields, where the password is automatically hashed using the @password attribute and excluded from responses with the @omit attribute. It also includes access policies for user creation and reading.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id @default(cuid())\n    email String @unique\n    password String @password @omit\n    orders Order[]\n\n    // everybody can signup\n    @@allow('create', true)\n\n    // user profile is publicly readable\n    @@allow('read', true)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Blog Application Schema in ZModel\nDESCRIPTION: A simplified example of a blog post application schema using ZenStack. It defines the database connection, generators, plugins, and data models with access policies for Posts and Users. The schema demonstrates relationship definitions and fine-grained access control policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/code-as-doc/index.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\ndatasource db {\n    provider = 'postgresql'\n    url = env('DATABASE_URL')\n}\n\ngenerator js {\n    provider = 'prisma-client-js'\n}\n\nplugin hooks {\n    provider = '@zenstackhq/tanstack-query'\n    output = 'lib/hooks'\n    target = 'react'\n}\n\nenum Role {\n    USER\n    ADMIN\n}\n\nmodel Post {\n    id        String  @id @default(cuid())\n    title     String\n    published Boolean @default(false)\n    author    User    @relation(fields: [authorId], references: [id])\n    authorId  String  @default(auth().id)\n\n    @@allow('all', auth() == author)\n    @@allow('read', auth() != null && published )\n    @@allow('read', auth().role == 'ADMIN')\n}\n\nmodel User {\n    id       String  @id @default(cuid())\n    name     String?\n    email    String? @unique\n    password String  @password @omit\n    role     Role    @default(USER)\n    posts    Post[]\n    \n    @@allow('create,read', true)\n    @@allow('update,delete', auth() == this)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT-based Authentication API in Next.js\nDESCRIPTION: API route handler for user authentication using JWT tokens, bcryptjs for password comparison, and Prisma for database queries.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/react-admin/index.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compare } from \"bcryptjs\";\nimport { sign } from \"jsonwebtoken\";\nimport { db } from \"~/server/db\";\n\nexport async function POST(request: Request) {\n  const { email, password }: { email: string; password: string } =\n    await request.json();\n\n  const user = await db.user.findUnique({ where: { email } });\n  if (!user) {\n    return new Response(\"invalid email and password combination\", {\n      status: 401,\n    });\n  }\n\n  if (!(await compare(password, user.password))) {\n    return new Response(\"invalid email and password combination\", {\n      status: 401,\n    });\n  }\n\n  return Response.json({\n    id: user.id,\n    email: user.email,\n    token: sign(\n      { sub: user.id.toString(), email: user.email, role: user.role },\n      process.env.JWT_SECRET!,\n    ),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ZenStack RPC Middleware in Express\nDESCRIPTION: Sets up an Express server with ZenStack middleware mounted at the /api/rpc path using a basic PrismaClient. This enables automatic CRUD operations via RPC-style API endpoints.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nimport { ZenStackMiddleware } from '@zenstackhq/server/express';\nimport express from 'express';\n\nconst app = express();\napp.use(express.json());\n\nconst prisma = new PrismaClient();\napp.use('/api/rpc', ZenStackMiddleware({ getPrisma: () => prisma }));\n\napp.listen(3000, () => console.log('🚀 Server ready at: http://localhost:3000'));\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Schema and Pushing Database Changes\nDESCRIPTION: Commands to regenerate the Prisma schema from ZModel and push schema changes to the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/remix-run.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate && npx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Policy for Todo Model\nDESCRIPTION: Access control rules for the Todo model that determine who can create, read, update, and delete todo items based on list ownership and space membership.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/todo-saas/index.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Todo {\n    ...\n    // require login\n    @@deny('all', auth() == null)\n\n    // owner has full access, also space members have full access (if the parent List is not private)\n    @@allow('all', list.owner == auth())\n    @@allow('all', list.space.members?[user == auth()] && !list.private)\n\n    // update cannot change owner\n    @@deny('update', future().owner != owner)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model Schema in ZenStack\nDESCRIPTION: ZModel schema definition for the Post model with access policies. Includes relations to User model and permission rules for post management.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nextjs.mdx#2025-04-10_snippet_12\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n  id        String @id @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String\n  published Boolean @default(false)\n  author    User @relation(fields: [authorId], references: [id])\n  authorId  String\n\n\n  // author has full access\n  @@allow('all', auth() == author)\n\n  // logged-in users can view published posts\n  @@allow('read', auth() != null && published)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Third-Party Data Models with ZenStack zmodel\nDESCRIPTION: This code snippet demonstrates how to define data models for third-party services like NextAuth, PayPal, and Shopify using ZenStack's zmodel syntax. It shows the structure for authentication accounts, payment processing, and e-commerce orders.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/fullstack-zenstack/index.mdx#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\n// nextauth\nmodel Account {\n    id                String  @id @default(cuid())\n    userId            String\n    type              String\n    provider          String\n    providerAccountId String\n    refresh_token     String? // @db.Text\n    access_token      String? // @db.Text\n    expires_at        Int?\n    token_type        String?\n    scope             String?\n    id_token          String? // @db.Text\n    session_state     String?\n    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n    @@unique([provider, providerAccountId])\n}\n\n// paypal\nmodel Payment {\n    id      Int    @id @default(autoincrement())\n    orderID String\n    status  String\n}\n\n// shopify\nmodel Order{\n    id                   Int    @id\n    billing_address      Address\n    cart_token           String\n    checkout_token       String\n    client_details       ClientDetail\n    current_total_price  Int\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Tenant Client Manager with Prisma and NestJS\nDESCRIPTION: This code snippet demonstrates how to implement a PrismaClientManager class in NestJS that manages separate Prisma client instances for each tenant. It includes methods for retrieving tenant IDs, creating and caching client instances, and injecting the appropriate client into services.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/multi-tenant/index.md#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n@Injectable()\nclass PrismaClientManager{\n  // the client instances cache object\n  private clients: { [key: string]: PrismaClient } = {};\n\n  // retrieve and return the tenant ID from the request object,\n  getTenantId(request: Request): string {\n    ...\n  }\n\n  getClient(request: Request): PrismaClient {\n    const tenantId = this.getTenantId(request);\n    let client = this.clients[tenantId];\n    // create and cache a new client when needed\n    if (!client) {\n      const databaseUrl = process.env.DATABASE_URL!.replace('public', tenantId);\n\n      client = new PrismaClient({\n        datasources: {\n          db: {\n            url: databaseUrl,\n          },\n        },\n      });\n\n      this.clients[tenantId] = client;\n    }\n\n    return client;\n  }\n}\n\n@Injectable({ scope: Scope.REQUEST })\nexport class MyService {\n  private prisma: PrismaClient;\n\n  constructor(\n    @Inject(REQUEST) request: Request,\n    prismaClientManager: PrismaClientManager,\n  ) {\n    this.prisma = prismaClientManager.getClient(request);\n  }\n\n  findAll() {\n    // just use this.prisma to access the database\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TodoList React Component with ZenStack Hooks\nDESCRIPTION: A React component that displays and manages Todo lists using ZenStack-generated hooks. The component handles fetching todo lists with automatic filtering based on user context and provides deletion functionality. Uses pre-generated CRUD hooks that automatically apply access control rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/better-auth/index.mdx#2025-04-10_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function TodoListsCard() {\n  // Note that you don't need to filter for the current user and the active organization\n  // because the ZModel rules have taken care of it\n  const { data: todoLists } = useFindManyTodoList({\n    orderBy: { createdAt: 'desc' },\n  });\n\n  const { mutateAsync: del, isPending: isDeleting } = useDeleteTodoList();\n\n  async function onDelete(id: string) {\n    await del({ where: { id } });\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Todo List</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div>\n          {todoLists?.map((list) => (\n            <div key={list.id}>\n              <p>{list.name}</p>\n              <p>{list.createdAt.toLocaleString()}</p>\n              <Button disabled={isDeleting} onClick={() => onDelete(list.id)}>\n                Delete\n              </Button>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Check API Signature in TypeScript\nDESCRIPTION: TypeScript interface definition for the 'check' API that ZenStack adds to each model in PrismaClient. This API allows checking if the current user is permitted to perform specific operations based on the access policies defined in ZModel.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/prisma-client-ext.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CheckArgs = {\n  /**\n   * The operation to check for\n   */\n  operation: 'create' | 'read' | 'update' | 'delete';\n\n  /**\n   * The optional additional constraints to impose on the model fields\n   */\n  where?: { ... };\n}\n\ncheck(args: CheckArgs): Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Setting up React Context Providers for Next.js App\nDESCRIPTION: React component that sets up QueryClientProvider for Tanstack Query and SessionProvider for NextAuth, which are required for the application's authentication and data fetching.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs-app-router.mdx#2025-04-10_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { SessionProvider } from \"next-auth/react\";\nimport type { ReactNode } from \"react\";\n\nconst queryClient = new QueryClient();\n\nexport default function Providers({ children }: { children: ReactNode }) {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <SessionProvider>{children}</SessionProvider>\n    </QueryClientProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example of using withPolicy with access policies\nDESCRIPTION: Example demonstrating how to use the withPolicy function to enforce access policies. In this case, only posts belonging to the current user will be returned in the query.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/runtime-api.md#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst session = getSession();\nconst enhanced = withPolicy(prisma, { user: session.user });\n// only posts belonging to the current user are returned\nconst posts = enhanced.post.findMany();\n```\n\n----------------------------------------\n\nTITLE: Defining ABAC Schema with ZenStack\nDESCRIPTION: Defines the schema for an Attribute-Based Access Control (ABAC) pattern using ZenStack's ZModel language. It includes User and Resource models with access control rules based on user and resource attributes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/model-authz/index.md#2025-04-10_snippet_7\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  name String\n  reputation Int @default(1) // controls if a user can create a resource\n  ownedResources Resource[]\n}\n\nmodel Resource {\n  id Int @id @default(autoincrement())\n  name String\n  published Boolean @default(false)\n  owner User @relation(fields: [ownerId], references: [id])\n  ownerId Int\n\n  // user can create resources if he has enough reputation\n  @@allow('create', auth().reputation >= 100)\n\n  // published resources can be read by anyone\n  @@allow('read', published)\n\n  // owner has full access\n  @@allow('read,update,delete', owner == auth())\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Nested Relations in React\nDESCRIPTION: Example of using generated hooks to query Todo items with filtering, including related List data, and sorting. The returned data is automatically typed to include the related entities.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/2-generate-hooks.md#2025-04-10_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// `data` is typed as `(Todo & { list: List })[]`\nconst { data } = useFindManyTodo({\n  where: { owner: { id: 1 } },\n  include: { list: true },\n  orderBy: { createdAt: 'desc' }\n});\n```\n\n----------------------------------------\n\nTITLE: Client Component for Creating New Todo Lists\nDESCRIPTION: A client-side React component that provides UI for creating a new todo list. It prompts the user for a title and calls the server action to create the list. This demonstrates the interaction between client components and server actions in Next.js.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/clerk-multitenancy/index.mdx#2025-04-10_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { createList } from \"~/app/actions\";\n\nexport default function CreateList() {\n  function onCreate() {\n    const title = prompt(\"Enter a title for your list\");\n    if (title) {\n      createList(title);\n    }\n  }\n\n  return (\n    <button onClick={onCreate}>\n      Create a list\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Model Schema with ZModel\nDESCRIPTION: Data model definition using ZModel syntax, including User, Pet, and Order entities with their relationships and database configuration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/rest-api-on-vercel/index.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"POSTGRES_PRISMA_URL\")\n  directUrl = env(\"POSTGRES_URL_NON_POOLING\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id       String  @id @default(cuid())\n  email    String  @unique\n  password String\n  orders   Order[]\n}\n\nmodel Pet {\n  id        String   @id @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  name      String\n  category  String\n  order     Order?   @relation(fields: [orderId], references: [id])\n  orderId   String?\n}\n\nmodel Order {\n  id        String   @id @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  pets      Pet[]\n  user      User     @relation(fields: [userId], references: [id])\n  userId    String\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Model with Post Relations\nDESCRIPTION: Updates the User model schema to include relation to Posts and defines access policies for user management. Includes password handling and public profile visibility rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs.mdx#2025-04-10_snippet_9\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id            String    @id @default(cuid())\n    name          String?\n    email         String?   @unique\n    emailVerified DateTime?\n    password      String @password @omit\n    posts         Post[]\n    image         String?\n    accounts      Account[]\n    sessions      Session[]\n\n    // everyone can signup, and user profile is also publicly readable\n    @@allow('create,read', true)\n\n    // only the user can update or delete their own profile\n    @@allow('update,delete', auth() == this)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Enhanced Prisma Client Wrapper\nDESCRIPTION: TypeScript function to create an access-policy-enabled Prisma client for the Post model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/remix-run.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\n\nexport function getEnhancedPrisma(userId: string) {\n    return enhance(prisma, { user: { id: userId } });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ZModel Schema with Tanstack Query Hooks Plugin\nDESCRIPTION: Example of a ZModel schema for a blogging app, including configuration for the @zenstackhq/tanstack-query plugin and model definitions with access rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin hooks {\n  provider = '@zenstackhq/tanstack-query'\n  output = \"./src/lib/hooks\"\n  target = \"react\"\n}\n\nmodel User {\n  id            String    @id @default(cuid())\n  email         String\n  posts         Post[]\n\n  // everyone can signup, and user profile is also publicly readable\n  @@allow('create,read', true)\n}\n\nmodel Post {\n  id        String @id @default(cuid())\n  title     String\n  published Boolean @default(false)\n  author    User @relation(fields: [authorId], references: [id])\n  authorId  String\n\n  // author has full access\n  @@allow('all', auth() == author)\n\n  // logged-in users can view published posts\n  @@allow('read', auth() != null && published)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Prisma Plugin in ZModel\nDESCRIPTION: Example configuration for the @core/prisma plugin in a ZModel schema. Shows how to specify the output path for the generated Prisma schema file.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/prisma.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin prisma {\n    provider = '@core/prisma'\n    output = './src/prisma/schema.prisma'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Route Handler for ZenStack CRUD Operations\nDESCRIPTION: Next.js API route handler that uses ZenStack's runtime and server components to provide CRUD operations for database models, with user context injection for access control.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs-app-router.mdx#2025-04-10_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { enhance } from \"@zenstackhq/runtime\";\nimport { NextRequestHandler } from \"@zenstackhq/server/next\";\nimport { getServerAuthSession } from \"~/server/auth\";\nimport { db } from \"~/server/db\";\n\n// create an enhanced Prisma client with user context\nasync function getPrisma() {\n  const session = await getServerAuthSession();\n  return enhance(db, { user: session?.user });\n}\n\nconst handler = NextRequestHandler({ getPrisma, useAppDir: true });\n\nexport {\n  handler as DELETE,\n  handler as GET,\n  handler as PATCH,\n  handler as POST,\n  handler as PUT,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Resources in ZenStack RESTful API\nDESCRIPTION: Demonstrates how to create new resources, including creating with attached relationships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_9\n\nLANGUAGE: json\nCODE:\n```\nPOST /user\n{\n    \"data\": {\n        \"type\": \"user\",\n        \"attributes\": {\n            \"name\": \"Emily\",\n            \"email\": \"emily@zenstack.dev\"\n        }\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /user\n{\n    \"data\": {\n        \"type\": \"user\",\n        \"attributes\": {\n            \"name\": \"Emily\",\n            \"email\": \"emily@zenstack.dev\"\n        },\n        \"relationships\": {\n            \"posts\": {\n                \"data\": [{ \"type\": \"post\", \"id\": 1 }]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Prisma Plugin in ZModel\nDESCRIPTION: Example configuration for the @core/prisma plugin in a ZModel schema. Shows how to specify the output path for the generated Prisma schema file.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/prisma.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin prisma {\n    provider = '@core/prisma'\n    output = './src/prisma/schema.prisma'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ZenStack Access Policies in Data Model\nDESCRIPTION: Adds access policies to User and Post models in the ZenStack schema to implement authentication and authorization rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/backend.mdx#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id() @default(autoincrement())\n    email String @unique()\n    name String?\n    posts Post[]\n\n    // make user profile public\n    @@allow('read', true)\n}\n\nmodel Post {\n    id Int @id() @default(autoincrement())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt()\n    title String\n    content String?\n    published Boolean @default(false)\n    viewCount Int @default(0)\n    author User? @relation(fields: [authorId], references: [id])\n    authorId Int? @default(auth().id)\n\n    // author has full access\n    @@allow('all', auth() == author)\n\n    // logged-in users can view published posts\n    @@allow('read', auth() != null && published)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Space Model Access Rules with ZenStack\nDESCRIPTION: Defines access policies for the Space model, implementing role-based access control where members can read spaces and admins can update or delete them.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nmodel Space {\n    ...\n    members SpaceUser[]\n\n    // require login\n    @@deny('all', auth() == null)\n\n    // everyone can create a space\n    @@allow('create', true)\n\n    // any user in the space can read the space\n    @@allow('read', members?[user == auth()])\n\n    // space admin can update and delete\n    @@allow('update,delete', members?[user == auth() && role == ADMIN])\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Page with NextAuth.js and ZenStack in Next.js\nDESCRIPTION: This code creates a signup page component that allows users to register with email and password. It uses the auto-generated useCreateUser hook from ZenStack to create new User entities with proper access policy enforcement and automatic password hashing.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs-app-router.mdx#2025-04-10_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport type { NextPage } from \"next\";\nimport { signIn } from \"next-auth/react\";\nimport { useRouter } from \"next/navigation\";\nimport { useState, type FormEvent } from \"react\";\nimport { useCreateUser } from \"~/lib/hooks\";\n\nconst Signup: NextPage = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const { mutateAsync: signup } = useCreateUser();\n  const router = useRouter();\n\n  async function onSignup(e: FormEvent) {\n    e.preventDefault();\n    try {\n      await signup({ data: { email, password } });\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (err: any) {\n      console.error(err);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (err.info?.prisma && err.info?.code === \"P2002\") {\n        // P2002 is Prisma's error code for unique constraint violations\n        alert(\"User already exists\");\n      } else {\n        alert(\"An unknown error occurred\");\n      }\n      return;\n    }\n\n    // signin to create a session\n    await signIn(\"credentials\", { redirect: false, email, password });\n    router.push(\"/\");\n  }\n\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\">\n      <h1 className=\"text-5xl font-extrabold text-white\">Sign up</h1>\n      <form\n        className=\"mt-16 flex flex-col gap-8 text-2xl\"\n        onSubmit={(e) => void onSignup(e)}\n      >\n        <div>\n          <label htmlFor=\"email\" className=\"inline-block w-32 text-white\">\n            Email\n          </label>\n          <input\n            id=\"email\"\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.currentTarget.value)}\n            className=\"ml-4 w-72 rounded border p-2\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"password\" className=\"inline-block w-32 text-white \">\n            Password\n          </label>\n          <input\n            id=\"password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.currentTarget.value)}\n            className=\"ml-4 w-72 rounded border p-2\"\n          />\n        </div>\n        <input\n          type=\"submit\"\n          value=\"Create account\"\n          className=\"cursor-pointer rounded border border-gray-500 py-4 text-white\"\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default Signup;\n```\n\n----------------------------------------\n\nTITLE: Querying an OpenAI Model with Mindsdb in SQL\nDESCRIPTION: SQL query to ask a question to an OpenAI model through Mindsdb. This query asks about the location of Stockholm and returns the answer as a result set.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/modern-sql-ai/index.md#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT question, answer\nFROM my_openai_model\nWHERE question = 'Where is Stockholm located?';\n```\n\n----------------------------------------\n\nTITLE: Defining Space and User Models with Access Policies in ZenStack\nDESCRIPTION: Initial schema definition for a SaaS application with Space and User models, including access control policies. This establishes the foundation for tenant isolation and user permissions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/technical-debt/index.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\n/*\n * Model for a team space \n */\nmodel Space {\n    id String @id @default(uuid())\n    members SpaceUser[]\n    bug Bug[]\n    // require login\n    @@deny('all', auth() == null)\n\n    // everyone can create a space\n    @@allow('create', true)\n\n    // any user in the space can read the space\n    @@allow('read', members?[owner == auth()])\n}\n\n/*\n * Model for a user\n */\nmodel User {\n    id String @id @default(uuid())\n    password String? @password @omit\n    name String?\n    spaces SpaceUser[]\n    bug Bug[]\n\n    // can be created by anyone, even not logged in\n    @@allow('create', true)\n\n    // can be read by users sharing any space\n    @@allow('read', spaces?[space.members?[owner == auth()]])\n\n    // full access by oneself\n    @@allow('all', auth() == this)\n}\n\n/*\n* Base model for all models in a space\n*/\nabstract model SpaceBase {\n    id String @id @default(uuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n    ownerId String\n    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)\n    spaceId String\n    @@allow('read', owner == auth() || space.members?[owner == auth()] )\n    @@allow('create', owner == auth() && space.members?[owner == auth()])\n    @@allow('update', owner == auth() && space.members?[owner == auth()] && future().owner == owner)\n    @@allow('delete', owner == auth())\n}\n\n/*\n * Model representing membership of a user in a space\n */\nmodel SpaceUser extends SpaceBase {\n    nickName String\n}\n\n/*\n * Model for a bug\n */\nmodel Bug extends SpaceBase {\n    title String\n    priority Int\n    ..\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth for Credential-based Authentication\nDESCRIPTION: NextAuth configuration file that sets up credential-based authentication with JWT sessions, includes password comparison logic, and exports helper functions for server-side authentication.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs-app-router.mdx#2025-04-10_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport type { PrismaClient } from \"@prisma/client\";\nimport { compare } from \"bcryptjs\";\nimport {\n  getServerSession,\n  type DefaultSession,\n  type NextAuthOptions,\n} from \"next-auth\";\nimport { type Adapter } from \"next-auth/adapters\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\n\nimport { db } from \"~/server/db\";\n\n/**\n * Module augmentation for `next-auth` types. Allows us to add custom properties to the `session`\n * object and keep type safety.\n *\n * @see https://next-auth.js.org/getting-started/typescript#module-augmentation\n */\ndeclare module \"next-auth\" {\n  interface Session extends DefaultSession {\n    user: {\n      id: string;\n    } & DefaultSession[\"user\"];\n  }\n}\n\n/**\n * Options for NextAuth.js used to configure adapters, providers, callbacks, etc.\n *\n * @see https://next-auth.js.org/configuration/options\n */\nexport const authOptions: NextAuthOptions = {\n  session: {\n    strategy: \"jwt\",\n  },\n  callbacks: {\n    session({ session, token }) {\n      if (session.user) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        session.user.id = token.sub!;\n      }\n      return session;\n    },\n  },\n  adapter: PrismaAdapter(db) as Adapter,\n  providers: [\n    CredentialsProvider({\n      credentials: {\n        email: { type: \"email\" },\n        password: { type: \"password\" },\n      },\n      authorize: authorize(db),\n    }),\n    /**\n     * ...add more providers here.\n     *\n     * Most other providers require a bit more work than the Discord provider. For example, the\n     * GitHub provider requires you to add the `refresh_token_expires_in` field to the Account\n     * model. Refer to the NextAuth.js docs for the provider you want to use. Example:\n     *\n     * @see https://next-auth.js.org/providers/github\n     */\n  ],\n};\n\nfunction authorize(prisma: PrismaClient) {\n  return async (\n    credentials: Record<\"email\" | \"password\", string> | undefined,\n  ) => {\n    if (!credentials) throw new Error(\"Missing credentials\");\n    if (!credentials.email)\n      throw new Error('\"email\" is required in credentials');\n    if (!credentials.password)\n      throw new Error('\"password\" is required in credentials');\n    const maybeUser = await prisma.user.findFirst({\n      where: { email: credentials.email },\n      select: { id: true, email: true, password: true },\n    });\n    if (!maybeUser?.password) return null;\n    // verify the input password with stored hash\n    const isValid = await compare(credentials.password, maybeUser.password);\n    if (!isValid) return null;\n    return { id: maybeUser.id, email: maybeUser.email };\n  };\n}\n\n/**\n * Wrapper for `getServerSession` so that you don't need to import the `authOptions` in every file.\n *\n * @see https://next-auth.js.org/configuration/nextjs\n */\nexport const getServerAuthSession = () => getServerSession(authOptions);\n```\n\n----------------------------------------\n\nTITLE: Modeling a CMS System with Polymorphic Assets in Mermaid Diagram\nDESCRIPTION: A class diagram showing the inheritance relationship between Asset base type and various derived types like Image, Video, Post, and Page in a CMS system. The Asset class contains common fields while specific classes have their unique attributes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/polymorphism/index.md#2025-04-10_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: CMS System\n---\nclassDiagram\n    Asset <|-- Image\n    Asset <|-- Video\n    Asset <|-- Post\n    Asset <|-- Page\n    class Asset {\n        String title\n        User owner\n        Date createdAt\n        Int viewCount\n    }\n    class Image {\n        String format\n        Bytes data\n    }\n    class Video {\n        Int duration\n        String url\n    }\n    class Post {\n        String content\n    }\n    class Page {\n        String html\n    }\n```\n\n----------------------------------------\n\nTITLE: Post Management Functions in TypeScript\nDESCRIPTION: Functions for retrieving, deleting, publishing, and unpublishing posts using ZenStack's enhanced Prisma client. Each function takes the post ID and user ID to automatically handle access control.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/remix-run.mdx#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getPost({\n    id,\n    userId,\n}: Pick<Post, 'id'> & {\n    userId: User['id'];\n}) {\n    return getEnhancedPrisma(userId).post.findUnique({\n        where: { id },\n    });\n}\n\nexport function deletePost({ id, userId }: Pick<Post, 'id'> & { userId: User['id'] }) {\n    return getEnhancedPrisma(userId).post.delete({\n        where: { id },\n    });\n}\n\nexport function publishPost({ id, userId }: Pick<Post, 'id'> & { userId: User['id'] }) {\n    return getEnhancedPrisma(userId).post.update({\n        where: { id },\n        data: { published: true },\n    });\n}\n\nexport function unpublishPost({ id, userId }: Pick<Post, 'id'> & { userId: User['id'] }) {\n    return getEnhancedPrisma(userId).post.update({\n        where: { id },\n        data: { published: false },\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing ZenStack API with Express Middleware in TypeScript\nDESCRIPTION: This snippet demonstrates how to use Express middleware to intercept ZenStack API responses. It configures the ZenStackMiddleware to store the response in res.locals instead of sending it directly, allowing a second middleware to add custom headers before sending the final response.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/4-customization.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.use('/api/rpc', \n    ZenStackMiddleware({\n        getPrisma: (req) => enhance(prisma, { user: getUser(req) }),\n        // instructs the middleware to not send the response,\n        // instead, store it in `res.locals`\n        sendResponse: false,\n    }),\n    (req: Request, res: Response) => {\n        // another middleware to intercept the CRUD response,\n        // add a header and send the response\n        const { status, body } = res.locals;\n        res.header('x-requested-by', req.headers['x-user-id']);\n        res.status(status).json(body);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Todo Component with Optimistic Updates\nDESCRIPTION: React component for managing individual Todo items with optimistic update support. Handles todo completion toggling and deletion with automatic UI updates.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/5-optimistic-update.md#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Todo } from \"@prisma/client\";\nimport { useDeleteTodo, useUpdateTodo } from \"~/lib/hooks\";\n\ntype Props = {\n  value: Todo;\n  optimistic?: boolean;\n};\n\nexport default function TodoComponent({ value, optimistic }: Props) {\n  const update = useUpdateTodo();\n  const del = useDeleteTodo();\n\n  function onDelete() {\n    del.mutate({ where: { id: value.id } });\n  }\n\n  function onToggleCompleted(completed: boolean) {\n    if (completed === !!value.completedAt) {\n      return;\n    }\n    update.mutate({\n      where: { id: value.id },\n      data: { completedAt: completed ? new Date() : null },\n    });\n  }\n\n  return (\n    <div className=\"flex w-96 flex-col items-center rounded-lg border px-8 py-4\">\n      <div className=\"flex w-full justify-between\">\n        <h3\n          className={`flex items-center text-xl\n                        ${value.completedAt\n                            ? \"italic text-gray-400 line-through\"\n                            : \"text-gray-700\"\n                        }}`}\n        >\n          {value.title}\n          {optimistic && (\n            <span className=\"loading loading-spinner loading-sm ml-1\"></span>\n          )}\n        </h3>\n        <div className=\"flex\">\n          <input\n            type=\"checkbox\"\n            className=\"checkbox mr-2\"\n            checked={!!value.completedAt}\n            onChange={(e) => onToggleCompleted(e.currentTarget.checked)}\n          />\n          <button className=\"btn btn-ghost btn-xs\" onClick={onDelete}>\n            Delete\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Models with Access Control in ZenStack\nDESCRIPTION: ZenStack schema definitions for a Todo application with integrated access control policies. This snippet defines BaseEntity, List, and Todo models with declarative access policies that handle authorization directly in the schema, eliminating the need for separate RLS policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/supabase-alternative/index.md#2025-04-10_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nabstract model BaseEntity {\n    id        String   @id @default(uuid())\n    space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)\n    spaceId   String\n    owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n    ownerId   String   @default(auth().id)\n\n    // can be read by owner or space members \n    @@allow('read', owner == auth() || (space.members?[user == auth()]))\n\n    // when create, owner must be set to current user, and user must be in the space\n    @@allow('create', owner == auth() && space.members?[user == auth()])\n\n    // when create, owner must be set to current user, and user must be in the space\n    // update is not allowed to change owner\n    @@allow('update', owner == auth() && space.members?[user == auth()] && future().owner == owner)\n\n    // can be deleted by owner\n    @@allow('delete', owner == auth())\n}\n\n/**\n * Model for a Todo list\n */\nmodel List extends BaseEntity {\n    title   String  @length(1, 100)\n    private Boolean @default(false)\n    todos   Todo[]\n\n    // can't be read by others if it's private\n    @@deny('read', private == true && owner != auth())\n}\n\n/**\n * Model for a single Todo\n */\nmodel Todo {\n    id          String    @id @default(uuid())\n    owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n    ownerId     String    @default(auth().id)\n    list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)\n    listId      String\n    title       String    @length(1, 100)\n    completedAt DateTime?\n\n    // same as its parent list\n    @@allow('all', check(list))\n}\n```\n\n----------------------------------------\n\nTITLE: ZModel Access Policy Based on User ID\nDESCRIPTION: Access policy in ZModel that uses the authenticated user's ID for authorization.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/auth0.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\n@@allow('read, update, create', auth().id == this.id)\n```\n\n----------------------------------------\n\nTITLE: Complete ZModel Schema with OpenAPI Plugin Configuration\nDESCRIPTION: Example of a complete ZModel schema file with OpenAPI plugin configuration, including database connection and detailed plugin settings for generating OpenAPI specifications.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/openapi.mdx#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\ndatasource db {\n    provider = 'sqlite'\n    url = 'file:./dev.db'\n}\n\nplugin openapi {\n    provider = '@zenstackhq/openapi'\n    output = './openapi.yaml'\n    title = 'My awesome API'\n    version = '0.5.0'\n    summary = 'Created with ZenStack'\n    description = 'My awesome API created with ZenStack'\n    prefix = '/api'\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Schema to Database\nDESCRIPTION: Command to push the generated Prisma schema to the database, creating the necessary tables.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Integrating ZenStack with Fastify using ZenStackFastifyPlugin\nDESCRIPTION: TypeScript code snippet demonstrating how to integrate ZenStack into a Fastify project using the ZenStackFastifyPlugin. It shows the setup process, including enhancing Prisma with user session data.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/fastify.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\nimport { ZenStackFastifyPlugin } from '@zenstackhq/server/fastify';\nimport { prisma } from './db.ts';\nimport { getSessionUser } from './auth.ts';\n\nconst server = fastify();\n\n// serve OpenAPI at /api/model\nserver.register(ZenStackFastifyPlugin, {\n    prefix: '/api/model',\n    // getSessionUser extracts the current session user from the request, its\n    // implementation depends on your auth solution\n    getPrisma: (request) => enhance(prisma, { user: getSessionUser(request) }),\n});\n```\n\n----------------------------------------\n\nTITLE: Preparing tRPC Context with Enhanced PrismaClient\nDESCRIPTION: TypeScript code demonstrating how to create a tRPC context with an enhanced PrismaClient for access control enforcement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/trpc.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const createContext = async ({ req, res }: CreateNextContextOptions) => {\n    const session = await getServerAuthSession({ req, res });\n    return {\n        session,\n        // use access-control-enabled db client\n        prisma: enhance(prisma, { user: session?.user }),\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up tRPC Context with Enhanced Prisma Client\nDESCRIPTION: Implementation of a tRPC context creator that includes an enhanced Prisma client with access policy enforcement from ZenStack.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/trpc.mdx#2025-04-10_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\nimport { prisma } from './db';\nimport { getSessionUser } from './auth';\n\nexport const createContext = async ({ req, res }: CreateNextContextOptions) => {\n    return {\n        ...,\n        // use access-control-enabled Prisma client\n        prisma: await enhance(prisma, { user: getSessionUser(req, res) }),\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Query-Level Overrides with ZenStack and Prisma Client Extensions\nDESCRIPTION: This TypeScript snippet shows how to implement a query-level override for 'findMany' using Prisma Client Extensions and ZenStack enhancement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/client-extensions.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst extendedPrisma = prisma.$extends({\n  query: {\n    post: {\n      findMany({ query, args }) {\n        console.log('Query args:', inspect(args, { depth: null }));\n        return query(args);\n      },\n    },\n  },\n});\n\nconst enhanced = enhance(extendedPrisma);\nconst posts = await enhanced.post.findMany();\n```\n\n----------------------------------------\n\nTITLE: Creating an Enhanced Prisma Service with ZenStack in NestJS\nDESCRIPTION: This service wraps the standard PrismaService with ZenStack's enhance function to automatically enforce access policies defined in the schema. It uses a ClsService to get the current user context for authorization checks.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/nest-api/index.md#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport type { PrismaClient } from '@prisma/client';\nimport { enhance } from '@zenstackhq/runtime';\nimport { ClsService } from 'nestjs-cls';\nimport { PrismaService } from '../prisma.service';\n\n@Injectable()\nexport class EnhancedPrismaService {\n  constructor(\n    private readonly prismaService: PrismaService,\n    private readonly clsService: ClsService,\n  ) {}\n\n  private get enhancedPrisma() {\n    return enhance(this.prismaService, { user: this.clsService.get('user') });\n  }\n\n  get user(): PrismaClient['user'] {\n    return this.enhancedPrisma.user;\n  }\n  get post(): PrismaClient['post'] {\n    return this.enhancedPrisma.post;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Delete with Access Policy in ZenStack\nDESCRIPTION: This code snippet shows how to implement soft delete functionality in a ZenStack model by adding a boolean field to track deletion status and using access policies to automatically filter out deleted records during queries.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/soft-delete.mdx#2025-04-10_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nmodel Post {\n  ...\n  deleted Boolean @default(false) @omit\n  @@deny('read', deleted)\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Context Provider for Tanstack Query Hooks\nDESCRIPTION: Example of setting up a context provider in Vue to control the behavior of generated hooks, including custom endpoint and fetch function.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nimport { provideHooksContext } from '@/lib/hooks';\nimport type { FetchFn } from '@zenstackhq/tanstack-query/runtime';\n\nconst myFetch: FetchFn = (url, options) => {\n    options = options ?? {};\n    options.headers = {\n        ...options.headers,\n        'x-my-custom-header': 'hello world',\n    };\n    return fetch(url, options);\n};\n\nprovideHooksContext({\n    endpoint: 'http://localhost:3000/api/model',\n    fetch: myFetch\n});\n</script>\n\n<template>\n    <!-- App Content -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Context Provider for Tanstack Query Hooks\nDESCRIPTION: Example of setting up a context provider in Vue to control the behavior of generated hooks, including custom endpoint and fetch function.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nimport { provideHooksContext } from '@/lib/hooks';\nimport type { FetchFn } from '@zenstackhq/tanstack-query/runtime';\n\nconst myFetch: FetchFn = (url, options) => {\n    options = options ?? {};\n    options.headers = {\n        ...options.headers,\n        'x-my-custom-header': 'hello world',\n    };\n    return fetch(url, options);\n};\n\nprovideHooksContext({\n    endpoint: 'http://localhost:3000/api/model',\n    fetch: myFetch\n});\n</script>\n\n<template>\n    <!-- App Content -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Building React-Admin CRUD UI Components\nDESCRIPTION: This code defines the main Admin application component with Resource configurations for users and posts. It includes custom Create forms and List components that leverage React-Admin's built-in components like SimpleForm, TextInput, and Datagrid.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/react-admin/index.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst AdminApp = () => (\n  <Admin dataProvider={dataProvider} authProvider={authProvider}>\n    <Resource\n      name=\"user\"\n      list={ListGuesser}\n      edit={EditGuesser}\n      create={UserCreate}\n      hasCreate={true}\n      recordRepresentation=\"name\"\n    />\n    <Resource\n      name=\"post\"\n      list={PostList}\n      edit={EditGuesser}\n      create={PostCreate}\n      hasCreate={true}\n      recordRepresentation=\"title\"\n    />\n  </Admin>\n);\n\nexport const UserCreate = () => (\n  <Create>\n    <SimpleForm>\n      <TextInput source=\"email\" type=\"email\" validate={required()} />\n      <PasswordInput source=\"password\" validate={required()} />\n      <TextInput source=\"name\" validate={required()} />\n      <SelectInput\n        source=\"role\"\n        choices={[\n          { id: \"Author\", name: \"Author\" },\n          { id: \"Editor\", name: \"Editor\" },\n          { id: \"Admin\", name: \"Admin\" },\n        ]}\n        defaultValue={\"Author\"}\n      />\n    </SimpleForm>\n  </Create>\n);\n\nconst PostList = () => (\n  <List>\n    <Datagrid rowClick=\"edit\">\n      <TextField source=\"id\" />\n      <TextField source=\"title\" />\n      <TextField source=\"content\" />\n      <DateField source=\"createdAt\" />\n      <DateField source=\"updatedAt\" />\n      <ReferenceField source=\"userId\" reference=\"user\" />\n    </Datagrid>\n  </List>\n);\n\nexport const PostCreate = () => (\n  <Create>\n    <SimpleForm>\n      <ReferenceInput source=\"userId\" reference=\"user\">\n        <SelectInput />\n      </ReferenceInput>\n      <TextInput source=\"title\" validate={required()} />\n      <TextInput source=\"content\" multiline rows={5} validate={required()} />\n      <SelectInput\n        source=\"status\"\n        choices={[\n          { id: \"Draft\", name: \"Draft\" },\n          { id: \"Submitted\", name: \"Submitted\" },\n          { id: \"Published\", name: \"Published\" },\n        ]}\n        defaultValue={\"Draft\"}\n      />\n    </SimpleForm>\n  </Create>\n);\n\nexport default AdminApp;\n```\n\n----------------------------------------\n\nTITLE: Configuring ZenStack Plugin for tRPC CRUD Router Generation\nDESCRIPTION: This example shows how to declare a ZenStack plugin for generating tRPC CRUD routers, demonstrating the new extensibility mechanism provided by ZModel.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/1-zmodel.md#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin trpc {\n    provider = \"@zenstackhq/trpc\"\n    output   = \"src/generated\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Tenancy Operations in TypeScript\nDESCRIPTION: This code snippet demonstrates creating users and organizations, adding members to organizations, and performing authorized operations on resources in a multi-tenancy context using ZenStack and Prisma.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/model-authz/index.md#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// create users\nconst emily = await prisma.user.create({\n  data: { name: 'Emily' },\n});\nconst adam = await prisma.user.create({\n  data: { name: 'Adam' },\n});\nconst joe = await prisma.user.create({\n  data: { name: 'Joe' },\n});\n\n// create two orgs\n\n// Emily as admin of org Apple\nconst apple = await prisma.org.create({\n  data: {\n    name: 'Apple',\n    members: {\n      create: [\n        {\n          user: { connect: { id: emily.id } },\n          role: 'ADMIN',\n        },\n      ],\n    },\n  },\n});\n\n// Joe as admin of org Microsoft\nconst microsoft = await prisma.org.create({\n  data: {\n    name: 'Microsoft',\n    members: {\n      create: [{ user: { connect: { id: joe.id } }, role: 'ADMIN' }],\n    },\n  },\n});\n\n// create an enhanced PrismaClient for each user\nconst emilyDb = enhance(prisma, { user: emily });\nconst adamDb = enhance(prisma, { user: adam });\nconst joeDb = enhance(prisma, { user: joe });\n\n// Emily should be able to add Adam to the org\nawait emilyDb.org.update({\n  where: { id: apple.id },\n  data: {\n    members: {\n      create: [\n        { user: { connect: { id: adam.id } }, role: 'MEMBER' },\n      ],\n    },\n  },\n});\n\n// Adam shouldn't be able to add Joe to the org because he's not admin\nawait expect(\n  adamDb.org.update({\n    where: { id: apple.id },\n    data: {\n      members: {\n        create: [\n          { user: { connect: { id: joe.id } }, role: 'MEMBER' },\n        ],\n      },\n    },\n  })\n).rejects.toThrow();\n\n// Emily should be able to create a resource in org Apple\nconst res = await emilyDb.resource.create({\n  data: {\n    name: 'resource1',\n    public: true,\n    org: { connect: { id: apple.id } },\n    owner: { connect: { id: emily.id } },\n  },\n});\nconsole.log('Resource created by Emily:', inspect(res));\n\n// Emily shouldn't be able to create a resource in org Microsoft\nawait expect(\n  emilyDb.resource.create({\n    data: {\n      name: 'resource2',\n      org: { connect: { id: microsoft.id } },\n      owner: { connect: { id: emily.id } },\n    },\n  })\n).rejects.toThrow();\n\n// the resource is readable to Adam\nconst resByAdam = await adamDb.resource.findUnique({\n  where: { id: res.id },\n});\nconsole.log('Resource read by Adam:', inspect(resByAdam));\nexpect(resByAdam).toBeTruthy();\n\n// the resource is not readable to Joe\nconst resByJoe = await joeDb.resource.findUnique({\n  where: { id: res.id },\n});\nconsole.log('Resource read by Joe:', inspect(resByJoe));\nexpect(resByJoe).toBeNull();\n```\n\n----------------------------------------\n\nTITLE: Querying User Data in REPL\nDESCRIPTION: JavaScript query in REPL to find the first user in the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nprisma.user.findFirst()\n```\n\n----------------------------------------\n\nTITLE: Using ZenStack's Generated Hooks and Enhanced Prisma Client\nDESCRIPTION: Example code showing how to use ZenStack's generated hooks for frontend queries and enhanced Prisma client for server-side operations. The access control rules are automatically applied without explicit filters in the application code.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/supabase-alternative/index.md#2025-04-10_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n   // frontend query:\n   // ZenStack generated hooks only returns the data user is allowed to read\n   const { data: lists } = useFindManyList();    \n   ...\n   \n   // server props\n   export const getServerSideProps: GetServerSideProps<Props> = async ({ req, res, params }) => {\n    const db = await getEnhancedPrisma({ req, res });\n    // ZenStack enhanced Prisma client only returns the data user is allowed to read\n    const lists = await db.list.findMany();\n    return {\n        props: { lists },\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Page Component in Next.js\nDESCRIPTION: A React component that handles user registration using NextAuth and custom hooks. It includes form handling, error management, and automatic signin after successful registration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/3-auth-ui.md#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { signIn } from 'next-auth/react';\nimport Link from 'next/link';\nimport { useState, type FormEvent } from 'react';\nimport { useCreateUser } from '~/lib/hooks';\n\nexport default function Signup() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const { mutate: signup, error: signupError } = useCreateUser({\n    onSuccess: async () => {\n      // sign-up succeeded, sign in with the credentials\n      const signInResult = await signIn('credentials', {\n        redirect: false,\n        email,\n        password,\n      });\n      if (signInResult?.ok) {\n        window.location.href = '/';\n      } else {\n        console.error('Signin failed:', signInResult?.error);\n      }\n    },\n  });\n\n  const _err = signupError as { info?: { code?: string } };\n  const errMsg = _err\n    ? _err.info?.code === 'P2002' // P2002 is the Prisma error code for unique constraint failure\n      ? 'Email already exists'\n      : `Unexpected error occurred: ${JSON.stringify(_err)}`\n    : '';\n\n  function onSignup(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    signup({ data: { email, password } });\n  }\n\n  return (\n    <div className=\"mx-auto flex h-screen flex-col items-center justify-center\">\n      <div className=\"mb-10 flex items-center space-x-4\">\n        <h1 className=\"text-4xl\">Welcome to Todo</h1>\n      </div>\n      <div className=\"flex w-full max-w-screen-sm items-center justify-center rounded-lg\">\n        <div className=\"w-full space-y-8 p-16\">\n          <h2 className=\"text-3xl font-bold\">Create a Free Account</h2>\n          <form className=\"mt-8 space-y-6\" action=\"#\" onSubmit={onSignup}>\n            <div>\n              <label htmlFor=\"email\" className=\"label\">\n                Your email\n              </label>\n              <input\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"input input-bordered w-full\"\n                placeholder=\"Email address\"\n                required\n              />\n            </div>\n            <div>\n              <label htmlFor=\"password\" className=\"label\">\n                Your password\n              </label>\n              <input\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"••••••••\"\n                className=\"input input-bordered w-full\"\n                required\n              />\n            </div>\n\n            {errMsg && <p className=\"text-sm text-red-600\">{errMsg}</p>}\n\n            <button className=\"btn btn-primary mt-4\" type=\"submit\">\n              Create account\n            </button>\n            <div>\n              Already have an account?{' '}\n              <Link href=\"/signin\" className=\"text-primary\">\n                Login here\n              </Link>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Enhance Function with Session in TypeScript\nDESCRIPTION: A practical example showing how to use the enhance function with a user session and specific enhancement kinds.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/runtime-api.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst session = getSession();\nconst enhancedClient = enhance(prisma,\n  { user: session.user },\n  { kinds: ['policy', 'password']}\n);\n```\n\n----------------------------------------\n\nTITLE: Defining ZenStack Data Models with Access Policies\nDESCRIPTION: ZenStack schema definition with User and Post models that include access policies using the @@allow annotations to control data access permissions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/sveltekit.mdx#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id @default(cuid())\n    email String @unique @email\n    password String @password @omit @length(8, 16)\n    posts Post[]\n\n    // everybody can signup\n    @@allow('create,read', true)\n\n    // full access by self\n    @@allow('all', auth() == this)\n}\n\nmodel Post {\n    id String @id @default(cuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    title String @length(1, 256)\n    published Boolean @default(false)\n    author User? @relation(fields: [authorId], references: [id])\n    authorId String?\n\n    // allow read for all signin users\n    @@allow('read', auth() != null && published)\n\n    // full access by author\n    @@allow('all', author == auth())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic CRUD API with ZenStack and Next.js\nDESCRIPTION: Next.js API route handler using ZenStack to create automatic CRUD endpoints based on the schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/refine-dev-backend/index.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from '@/auth';\nimport { prisma } from '@/db';\nimport { enhance } from '@zenstackhq/runtime';\nimport { NextRequestHandler } from '@zenstackhq/server/next';\n\n// create an enhanced Prisma client with user context\nasync function getPrisma() {\n  const session = await auth();\n  const user = session?.user?.id ? { id: session.user.id } : undefined;\n  return enhance(prisma, { user });\n}\n\nconst handler = NextRequestHandler({ getPrisma, useAppDir: true });\n\nexport {\n    handler as DELETE,\n    handler as GET,\n    handler as PATCH,\n    handler as POST,\n    handler as PUT,\n};\n```\n\n----------------------------------------\n\nTITLE: Building a React Form with react-hook-form in Next.js\nDESCRIPTION: Implementation of a React component for a signup form using react-hook-form, with form submission handling that posts data to the server API and displays any validation errors returned.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/form-validation/index.md#2025-04-10_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { ReactNode, useState } from 'react';\nimport { FieldError, useForm } from 'react-hook-form';\n\nfunction FormRow({\n    label,\n    children,\n    error,\n}: {\n    name: string;\n    label: string;\n    error?: FieldError;\n    children: ReactNode;\n}) {\n    return (\n        <div className=\"w-full\">\n            <div className=\"flex gap-4 items-center\">\n                <label className=\"w-32\">{label}</label>\n                <div className=\"flex-grow\">{children}</div>\n            </div>\n            {error && (\n                <p className=\"text-red-600 text-sm text-right pt-1\">\n                    {error.message}\n                </p>\n            )}\n        </div>\n    );\n}\n\ninterface Input {\n    name: string;\n    email: string;\n    adult: boolean;\n    beverage: string;\n}\n\nexport default function Signup() {\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n    } = useForm<Input>({\n        defaultValues: { beverage: '' },\n    });\n\n    const [serverError, setServerError] = useState('');\n\n    async function onSubmit(data: Input) {\n        const resp = await fetch('/api/signup', {\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: { 'content-type': 'application/json' },\n        });\n\n        if (resp.status !== 201) {\n            setServerError(await resp.text());\n        } else {\n            alert('Thank you for signing up!');\n        }\n    }\n\n    return (\n        <main className=\"flex min-h-screen flex-col items-center justify-center p-24\">\n            <div className=\"container max-w-lg items-center justify-center font-mono flex flex-col\">\n                <h1 className=\"text-3xl font-semibold mb-16\">\n                    🎉 Join the Party 🥳\n                </h1>\n                <form\n                    className=\"flex flex-col w-full text-lg gap-6\"\n                    onSubmit={handleSubmit(onSubmit)}\n                >\n                    <FormRow name=\"name\" label=\"Name\" error={errors.name}>\n                        <input\n                            type=\"text\"\n                            placeholder=\"You name\"\n                            className={`input input-bordered w-full ${\n                                errors.name ? 'input-error' : ''\n                            }`}\n                            {...register('name', {\n                                required: true,\n                            })}\n                        />\n                    </FormRow>\n\n                    {/* \n                        code of other rows abbreviated, find full content at: \n                        https://github.com/ymc9/zenstack-form-validation/blob/backend-only-validation/src/app/page.tsx \n                    */}\n\n                    <input className=\"btn btn-outline\" type=\"submit\" />\n\n                    {serverError && (\n                        <p className=\"text-red-600 text-sm\">{serverError}</p>\n                    )}\n                </form>\n            </div>\n        </main>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Enhanced Prisma Client in REPL\nDESCRIPTION: Shows how to query data using the enhanced Prisma Client (db) in a ZenStack REPL environment, with an example of fetching users.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/3-enhancement.md#2025-04-10_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ndb.user.findMany();\n```\n\n----------------------------------------\n\nTITLE: Adding Reverse Relations to User and Space Models\nDESCRIPTION: Updates to the User and Space models to include the reverse relation fields for lists and todos, establishing the complete relationship structure in the schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/todo-saas/index.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    ...\n    lists List[]\n    todos Todo[]\n    ...\n}\n\nmodel Space {\n    ...\n    lists List[]\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: React App Setup with TanStack Query and ZenStack\nDESCRIPTION: Initializes a React application with TanStack Query client and ZenStack hooks provider. Sets up the basic wrapper components needed for data fetching and state management.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { Provider as ZenStackHooksProvider } from '../lib/hooks';\n\nconst queryClient = new QueryClient();\n\nfunction App({ Component, pageProps: { session, ...pageProps } }: AppProps) {\n    return (\n        <QueryClientProvider client={queryClient}>\n            <ZenStackHooksProvider value={{ endpoint: '/api/model' }}>\n                <AppContent />\n            </ZenStackHooksProvider>\n        </QueryClientProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: RESTful API Operations Examples in TypeScript\nDESCRIPTION: Demonstrates various RESTful API operations including GET, POST, PATCH, and DELETE requests. Shows how to query posts, filter results, include relationships, create new posts, update existing posts, and delete posts using JSON:API format.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/1-api-flavor/1.2-rest.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// find all posts\nGET /api/model/post\n=> \n{\n    \"jsonapi\": { \"version\": \"1.0\" },\n    \"data\": [\n        { \"type\": \"post\", \"id\": \"1\", \"attributes\": { \"title\": \"Hello World\", ... }, ... },\n        ...\n    ],\n    ...\n}\n\n// find all published posts\nGET /api/model/post?filter[published]=true\n=>\n{\n    \"jsonapi\": { \"version\": \"1.0\" },\n    \"data\": [\n        { \"type\": \"post\", \"id\": \"1\", \"attributes\": { \"title\": \"Hello World\", ... }, ... },\n        ...\n    ],\n    ...\n}\n\n// find all posts with their authors\nGET /api/model/post?include=author\n=>\n{\n    \"jsonapi\": { \"version\": \"1.0\" },\n    \"data\": [\n        { \n            \"type\": \"post\", \n            \"id\": \"1\", \n            \"attributes\": { \"title\": \"Hello World\", ... },\n            \"relationships\": {\n                \"author\": { \"data\": { \"type\": \"user\", \"id\": \"1\" } }\n            }\n        },\n        ...\n    ],\n    \"included\": [\n        { \"type\": \"user\", \"id\": \"1\", \"attributes\": { \"name\": \"Joey\", ... } },\n        ...\n    ],\n    ...\n}\n\n// create a post for user#1\nPOST /api/model/post\n{\n    \"data\": {\n        \"type\": \"post\",\n        \"attributes\": {\n            \"title\": \"Hello World\"\n        },\n        \"relationships\": {\n            \"author\": { \"data\": { \"type\": \"user\", \"id\": \"1\" } }\n        }\n    }\n}\n\n// update a post\nPATCH /api/model/post/1\n{\n    \"data\": {\n        \"type\": \"post\",\n        \"id\": \"1\",\n        \"attributes\": {\n            \"title\": \"Hello New World!\"\n        }\n    }\n}\n\n// delete a post\nDELETE /api/model/post/1\n```\n\n----------------------------------------\n\nTITLE: Defining ZModel Schema with Access Policies for Supabase Auth\nDESCRIPTION: ZModel schema definition that creates User and Post models with access policies. The Post model uses the auth() function to reference the authenticated user for permission checks.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/authentication/supabase.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id @db.Uuid\n    posts Post[]\n    ... // other fields\n\n    @@allow('read', true)\n}\n\nmodel Post {\n    id String @id @db.Uuid\n    title String\n    author User @relation(fields: [authorId], references: [id])\n    authorId String @db.Uuid\n\n    @@allow('all', author == auth())\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced PrismaClient Implementation with Auth\nDESCRIPTION: Implementation of enhanced PrismaClient with authentication and organization context.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/better-auth/index.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getPrisma() {\n  const reqHeaders = await headers();\n  const sessionResult = await auth.api.getSession({\n    headers: reqHeaders,\n  });\n\n  if (!sessionResult) {\n    return enhance(prisma);\n  }\n\n  let organizationId: string | undefined = undefined;\n  let organizationRole: string | undefined = undefined;\n  const { session } = sessionResult;\n\n  if (session.activeOrganizationId) {\n    organizationId = session.activeOrganizationId;\n    const org = await auth.api.getFullOrganization({ headers: reqHeaders });\n    if (org?.members) {\n      const myMember = org.members.find(\n          (m) => m.userId === session.userId\n      );\n      organizationRole = myMember?.role;\n    }\n  }\n\n  const userContext = {\n    userId: session.userId,\n    organizationId,\n    organizationRole,\n  };\n  return enhance(prisma, { user: userContext });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Types for JSON Fields in ZModel\nDESCRIPTION: Creates two related types: an Address type with location information and a Profile type that references it. This demonstrates how to build complex nested structures for JSON fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/typing-json.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\ntype Address {\n  state String\n  city String\n  zip String\n}\n\ntype Profile {\n  name String\n  age Int\n  address Address?\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Role-Based Access Control Schema in ZenStack\nDESCRIPTION: Updates the schema to include user roles ('Reader' and 'Writer') and defines access control policies for the Post model based on these roles. Readers can only read published posts while Writers can create new posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/refine-dev-backend/index.md#2025-04-10_snippet_8\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  ...\n\n  role          String    @default('Reader')\n}\n\nmodel Post {\n  ...\n\n  // allow read for all signin users\n  @@allow('read', auth() != null && status == 'published')\n\n  // allow \"Writer\" users to create\n  @@allow('create', auth().role == 'Writer')\n\n  // full access by author\n  @@allow('read,update,delete', author == auth())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Inheritance in ZModel\nDESCRIPTION: Shows how to create models in ZModel, including abstract models and inheritance. Abstract models are used as base classes and are eliminated in the generated Prisma schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\nabstract model Basic {\n    id String @id\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n}\n\nmodel User extends Basic {\n    name String \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for ZenStack Compatibility\nDESCRIPTION: Configuration snippet for Next.js 13 and above to resolve compatibility issues with the @zenstackhq/runtime package by adding it to the serverComponentsExternalPackages list in next.config.js.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/faq.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  experimental: {\n    serverComponentsExternalPackages: [\n      \"@zenstackhq/runtime\"\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Rules in ZModel Schema\nDESCRIPTION: Schema definition for Pet and Order models with access control rules using @@allow directives to restrict read/write operations based on authentication state and ownership.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/rest-api-on-vercel/index.md#2025-04-10_snippet_12\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Pet {\n    id String @id @default(cuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    name String\n    category String\n    order Order? @relation(fields: [orderId], references: [id])\n    orderId String?\n\n    // unsold pets are readable to all; sold ones are readable to buyers only\n    @@allow('read', orderId == null || order.user == auth())\n\n    // only allow update to 'orderId' field if it's not set yet (unsold)\n    @@allow('update', name == future().name && category == future().category && orderId == null )\n}\n\nmodel Order {\n    id String @id @default(cuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    pets Pet[]\n    user User @relation(fields: [userId], references: [id])\n    userId String\n\n    // users can read their orders\n    @@allow('read,create', auth() == user)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Computed Fields with ZenStack and Prisma Client Extensions\nDESCRIPTION: This TypeScript example demonstrates how to implement a computed field 'myTitle' using Prisma Client Extensions and ZenStack enhancement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/client-extensions.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst extendedPrisma = prisma.$extends({\n  result: {\n    post: {\n      myTitle: {\n        needs: { title: true },\n        compute(post) {\n          return 'MyTitle: ' + post.title;\n        },\n      },\n    },\n  },\n});\n\nconst enhanced = enhance(extendedPrisma);\nconst post = await enhanced.post.findFirst();\n```\n\n----------------------------------------\n\nTITLE: Post Model with Access Policies in ZenStack\nDESCRIPTION: Definition of the Post model with access policies that allow reading published posts for authenticated users and full access for post authors.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nuxt.mdx#2025-04-10_snippet_6\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id String @id @default(cuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    title String @length(1, 256)\n    content String\n    published Boolean @default(false)\n    author User @relation(fields: [authorId], references: [id])\n    authorId String\n\n    // allow read for all signin users\n    @@allow('read', auth() != null && published)\n\n    // full access by author\n    @@allow('all', author == auth())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Retrieval Function\nDESCRIPTION: TypeScript function to retrieve posts using the enhanced Prisma client, respecting access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/remix-run.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { User } from '@prisma/client';\nimport { getEnhancedPrisma } from '~/db.server';\n\nexport function getPosts({ userId }: { userId: User['id'] }) {\n    return getEnhancedPrisma(userId).post.findMany({\n        orderBy: { updatedAt: 'desc' },\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Optimistic Update with ZenStack\nDESCRIPTION: Example showing how to enable automatic optimistic updates for mutations using ZenStack hooks. This technique updates the data cache immediately when a mutation executes, resulting in a more responsive UI.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n// arguments are mutation options, invalidate, and optimisticUpdate\nconst create = useCreatePost(undefined, true, true);\n\nfunction onCreatePost() {\n    create.mutate({ ... })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Inheritance in ZModel\nDESCRIPTION: Shows how to create models in ZModel, including abstract models and inheritance. Abstract models are used as base classes and are eliminated in the generated Prisma schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\nabstract model Basic {\n    id String @id\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n}\n\nmodel User extends Basic {\n    name String \n}\n```\n\n----------------------------------------\n\nTITLE: Example User Model with Attributes in ZModel\nDESCRIPTION: Demonstrates the usage of various field and model attributes in a User model, including unique constraints, default values, mapping, indexing, and access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_44\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    // unique id field with a default UUID value\n    id String @id @default(uuid())\n\n    // require email field to be unique\n    email String @unique\n\n    // password is hashed with bcrypt with length of 16, omitted when returned from the CRUD services\n    password String @password(saltLength: 16) @omit\n\n    // default to current date-time\n    createdAt DateTime @default(now())\n\n    // auto-updated when the entity is modified\n    updatedAt DateTime @updatedAt\n\n    // mapping to a different column name in database\n    description String @map(\"desc\")\n\n    // mapping to a different table name in database\n    @@map(\"users\")\n\n    // use @@index to specify fields to create database index for\n    @@index([email])\n\n    // use @@allow to specify access policies\n    @@allow(\"create,read\", true)\n\n    // use auth() to reference the current user\n    // use future() to access the \"post-update\" state\n    @@allow(\"update\", auth() == this && future().email == email)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Code with ZenStack\nDESCRIPTION: The 'generate' command creates Prisma schema and other artifacts based on 'plugin' specifications in the ZModel. It supports customizing the schema location and output options.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/cli.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nzenstack generate [options]\n```\n\n----------------------------------------\n\nTITLE: Generating Code with ZenStack\nDESCRIPTION: The 'generate' command creates Prisma schema and other artifacts based on 'plugin' specifications in the ZModel. It supports customizing the schema location and output options.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/cli.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nzenstack generate [options]\n```\n\n----------------------------------------\n\nTITLE: Creating the tRPC App Router with Generated Routers (v11)\nDESCRIPTION: Code snippet showing how to create a tRPC v11 application router using the generated router factory from ZenStack with the v11 specific approach.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/trpc.mdx#2025-04-10_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { createRouter } from './generated/routers';\n\nconst t = initTRPC.context<Context>().create();\n\nexport const procedure = t.publicProcedure;\nexport const createTRPCRouter = t.createRouter;\n\n...\n\nexport const appRouter = createRouter();\nexport type AppRouter = typeof appRouter;\n```\n\n----------------------------------------\n\nTITLE: Checking if Specific User Can Read Unpublished Posts\nDESCRIPTION: Example of using the check API with a user context to determine if a specific logged-in user can read unpublished posts, which would control visibility of the Drafts UI tab.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/check-permission.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user: { id: 1 } }); // enhance with user context\nawait canRead = await db.post.check({ operation: 'read', where: { published: false } });\n```\n\n----------------------------------------\n\nTITLE: Checking if Specific User Can Read Unpublished Posts\nDESCRIPTION: Example of using the check API with a user context to determine if a specific logged-in user can read unpublished posts, which would control visibility of the Drafts UI tab.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/check-permission.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user: { id: 1 } }); // enhance with user context\nawait canRead = await db.post.check({ operation: 'read', where: { published: false } });\n```\n\n----------------------------------------\n\nTITLE: Basic Prisma Schema Model Definition\nDESCRIPTION: Demonstrates a basic Prisma schema defining User and Post models with their relationships and an enum Role type. Shows standard data modeling with types, relationships, and constraints.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/microservice/index.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  email     String   @unique\n  name      String?\n  role      Role     @default(USER)\n  posts     Post[]\n}\n\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  published Boolean  @default(false)\n  title     String   @db.VarChar(255)\n  author    User?    @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n\nenum Role {\n  USER\n  ADMIN\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model with Access Control in ZModel\nDESCRIPTION: ZModel schema definition for the Post model with fields like title, body, and published status. Includes access control rules using @@allow attribute to authorize requests based on user authentication.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/remix-run.mdx#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\n// highlight-next-line\nmodel Post {\n  id String @id @default(cuid())\n  title String\n  body String\n  // highlight-next-line\n  published Boolean @default(false)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  // highlight-next-line\n  userId String @default(auth().id)\n\n  // highlight-start\n  // author has full access\n  @@allow('all', auth() == user)\n\n  // logged-in users can view published posts\n  @@allow('read', auth() != null && published)\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Handler Configuration\nDESCRIPTION: TypeScript code showing how to configure the GraphQL handler with ZenStack plugin for access policy enforcement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/redwood.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useZenStack } from '@zenstackhq/redwood'\nimport { db } from 'src/lib/db'\nimport { createGraphQLHandler } from '@redwoodjs/graphql-server'\n\nexport const handler = createGraphQLHandler({\n  ...\n  extraPlugins: [useZenStack(db)],\n})\n```\n\n----------------------------------------\n\nTITLE: Refactoring Todo App Schema with check() Function in ZenStack\nDESCRIPTION: A refactored Todo application schema using the check() function to eliminate duplicated access policies. The Todo model now delegates its access control to its parent List model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/check-function/index.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel List {\n  id       Int @id\n  name     String\n  public   Boolean\n  author   User @relation(fields: [authorId], references: [id])\n  authorId Int\n  todos    Todo[]\n\n  @@allow('all', auth() == author)\n  @@allow('read', public)\n}\n\nmodel Todo {\n  id     Int @id\n  name   String\n  list   List @relation(fields: [listId], references: [id])\n  listId Int\n\n  // highlight-next-line\n  @@allow('all', check(list))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Allow Access Policy in ZModel\nDESCRIPTION: Defines an access policy that allows a set of operations when the given condition is true. Parameters include operation (comma-separated list of operations or 'all') and condition (boolean expression).\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_25\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @@allow(_ operation: String, _ condition: Boolean)\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Model in ZModel\nDESCRIPTION: Example showing how to define a User model that serves as the auth model for policy rules. It demonstrates valid and invalid uses of the auth() function in policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id\n    role String\n    posts Post[]\n}\n\nmodel Post {\n    id Int @id\n    title String\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int\n\n    // ✅ valid rule\n    @@allow('all', auth().role == 'ADMIN')\n\n    // ❌ invalid rule, `subscribed` field doesn't exist in `User` model\n    @@allow('all', auth().subscribed == true) \n}\n```\n\n----------------------------------------\n\nTITLE: RESTful API Pagination Examples\nDESCRIPTION: Examples of pagination queries for resources and relationships\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/post?page[offset]=10&page[limit]=5\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/user/1/relationships/posts?page[offset]=10&page[limit]=5\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/user/1/posts?page[offset]=10&page[limit]=5\n```\n\n----------------------------------------\n\nTITLE: Implementing Organization Switcher Component in Next.js Layout\nDESCRIPTION: Adds Clerk's OrganizationSwitcher component to the Next.js layout file to enable organization management UI. This component allows users to create, manage, and switch between organizations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/clerk-multitenancy/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-next-line\nimport { OrganizationSwitcher } from \"@clerk/nextjs\";\n...\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <ClerkProvider>\n      <html lang=\"en\">\n        <body>\n          <header>\n            <SignedOut>\n              <SignInButton />\n            </SignedOut>\n            <SignedIn>\n              <div>\n                // highlight-next-line\n                <OrganizationSwitcher />\n                <UserButton />\n              </div>\n            </SignedIn>\n          </header>\n        </body>\n      </html>\n    </ClerkProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Access Policies with ZenStack\nDESCRIPTION: Example of defining access policies for a blogging app using ZenStack, including user signup, self CRUD operations, and post visibility rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/postgrest-alternative/index.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id\n    email String\n    password String\n    posts Post[]\n\n    // policy: everybody can signup\n    @@allow('create', true)\n    // policy: allow full CRUD by self\n    @@allow('all', auth() == this)\n}\nmodel Post {\n    id String @id\n    title String\n    published Boolean @default(false)\n    author User @relation(fields: [authorId], references: [id])\n    authorId String\n\n    // policy: allow logged-in users to read published posts\n    @@allow('read', auth() != null && published)\n    // policy: allow full CRUD by author\n    // auth() is a built-in function that returns current user\n    @@allow('all', author == auth())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Server Adapter for ZenStack on Edge Runtime\nDESCRIPTION: Setting up a Next.js API route handler that uses ZenStack's server adapter in edge runtime. This example shows how to create a dynamic API route that handles multiple HTTP methods while ensuring a new PrismaClient is created for each request.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/edge.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequestHandler } from '@zenstackhq/server/next';\nimport { createPrisma } from '~/lib/db';\nimport { getSessionUser } from '~/lib/auth';\n\nfunction getEnhancedPrisma(req: Request) {\n  // IMPORTANT: in edge environment you must create a new `PrismaClient` for each request\n  // https://github.com/prisma/prisma/issues/20566#issuecomment-2021594203\n  const prisma = createPrisma();\n  return enhance(prisma, { user: getSessionUser(req) });\n}\n\nconst handler = NextRequestHandler({ getPrisma: (req) => getEnhancedPrisma(req), useAppDir: true });\n\nexport {\n  handler as DELETE,\n  handler as GET,\n  handler as PATCH,\n  handler as POST,\n  handler as PUT,\n};\n\nexport const runtime = 'edge';\nexport const dynamic = 'force-dynamic';\n```\n\n----------------------------------------\n\nTITLE: Implementing User Signup Page with NextAuth\nDESCRIPTION: Creates a signup page component with email/password form handling, user creation using ZenStack-generated hooks, and automatic session creation via NextAuth. Includes error handling for duplicate users and form validation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs.mdx#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport type { NextPage } from \"next\";\nimport { signIn } from \"next-auth/react\";\nimport Router from \"next/router\";\nimport { useState, type FormEvent } from \"react\";\nimport { useCreateUser } from \"../lib/hooks\";\n\nconst Signup: NextPage = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const { mutateAsync: signup } = useCreateUser();\n\n  async function onSignup(e: FormEvent) {\n    e.preventDefault();\n    try {\n      await signup({ data: { email, password } });\n    } catch (err: any) {\n      console.error(err);\n      if (err.info?.prisma && err.info?.code === \"P2002\") {\n        alert(\"User alread exists\");\n      } else {\n        alert(\"An unknown error occurred\");\n      }\n      return;\n    }\n\n    await signIn(\"credentials\", { redirect: false, email, password });\n    await Router.push(\"/\");\n  }\n\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\">\n      <h1 className=\"text-5xl font-extrabold text-white\">Sign up</h1>\n      <form\n        className=\"mt-16 flex flex-col gap-8 text-2xl\"\n        onSubmit={(e) => void onSignup(e)}\n      >\n        <div>\n          <label htmlFor=\"email\" className=\"inline-block w-32 text-white\">\n            Email\n          </label>\n          <input\n            id=\"email\"\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.currentTarget.value)}\n            className=\"ml-4 w-72 rounded border p-2\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"password\" className=\"inline-block w-32 text-white\">\n            Password\n          </label>\n          <input\n            id=\"password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.currentTarget.value)}\n            className=\"ml-4 w-72 rounded border p-2\"\n          />\n        </div>\n        <input\n          type=\"submit\"\n          value=\"Create account\"\n          className=\"cursor-pointer rounded border border-gray-500 py-4 text-white\"\n        />\n      </form>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack TanStack Query Dependencies\nDESCRIPTION: Command to install the required dependencies for using TanStack Query hooks with ZenStack. Includes both the TanStack Query library and ZenStack's TanStack Query integration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/2-generate-hooks.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tanstack/react-query @zenstackhq/tanstack-query\n```\n\n----------------------------------------\n\nTITLE: RESTful API Pagination Examples\nDESCRIPTION: Examples of pagination queries for resources and relationships\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/post?page[offset]=10&page[limit]=5\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/user/1/relationships/posts?page[offset]=10&page[limit]=5\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/user/1/posts?page[offset]=10&page[limit]=5\n```\n\n----------------------------------------\n\nTITLE: Defining Unique Constraint with FieldReference List in ZModel\nDESCRIPTION: Illustrates how to define a unique constraint using a list of FieldReferences in a model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_18\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Model {\n    ...\n    f1 String\n    f2 String\n    // a list of FieldReference\n    @@unique([f1, f2])\n}\n```\n\n----------------------------------------\n\nTITLE: Database Schema Definition with Drizzle ORM in TypeScript\nDESCRIPTION: A TypeScript implementation of the blog API schema using Drizzle ORM. It defines tables for users, spaces, spaceUsers (junction table), and posts with their relationships, constraints, and indexes using Drizzle's schema builder API.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/drizzle-prisma/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const spaceUserRoleEnum = pgEnum('SpaceUserRole', ['MEMBER', 'ADMIN']);\n\n// User table\nexport const users = pgTable(\n    'users',\n    {\n        id: serial('id').primaryKey(),\n        email: varchar('email', { length: 256 }).notNull(),\n    },\n    (users) => {\n        return {\n            emailIndex: uniqueIndex('email_idx').on(users.email),\n        };\n    }\n);\n\n// Space table\nexport const spaces = pgTable(\n    'spaces',\n    {\n        id: serial('id').primaryKey(),\n        slug: varchar('slug', { length: 8 }).notNull(),\n        name: varchar('name', { length: 256 }).notNull(),\n        ownerId: integer('ownerId').references(() => users.id, {\n            onDelete: 'cascade',\n        }),\n    },\n    (spaces) => {\n        return {\n            slugIndex: uniqueIndex('slug_idx').on(spaces.slug),\n        };\n    }\n);\n\n// Space <-> User join table\nexport const spaceUsers = pgTable(\n    'spaceUsers',\n    {\n        id: serial('id').primaryKey(),\n        spaceId: integer('spaceId').references(() => spaces.id, {\n            onDelete: 'cascade',\n        }),\n        userId: integer('userId').references(() => users.id, {\n            onDelete: 'cascade',\n        }),\n        role: spaceUserRoleEnum('role').notNull().default('MEMBER'),\n    },\n    (spaceUsers) => {\n        return {\n            uniqueSpaceUser: uniqueIndex('space_user_idx').on(\n                spaceUsers.spaceId,\n                spaceUsers.userId\n            ),\n        };\n    }\n);\n\n// Post table\nexport const posts = pgTable('posts', {\n    id: serial('id').primaryKey(),\n    title: varchar('title', { length: 256 }).notNull(),\n    published: boolean('published').default(false),\n    spaceId: integer('spaceId').references(() => spaces.id, {\n        onDelete: 'cascade',\n    }),\n    authorId: integer('authorId').references(() => users.id, {\n        onDelete: 'cascade',\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Signin Form in SvelteKit\nDESCRIPTION: A Svelte component that renders a login form with email and password fields. It includes form validation feedback and enhances the form with SvelteKit's enhance function.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/sveltekit.mdx#2025-04-10_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { enhance } from '$app/forms';\n\timport type { ActionData } from '../signin/$types';\n\n\texport let form: ActionData;\n</script>\n\n<div class=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\"\n>\n    <h1 class=\"text-5xl font-extrabold text-white\">Login</h1>\n    <form class=\"mt-16 flex flex-col gap-8 text-2xl\" method=\"post\" use:enhance>\n        {#if form?.invalid}\n            <p class=\"text-red-600 my-2\">Invalid credentials</p>\n        {/if}\n        <div>\n            <label for=\"email\" class=\"inline-block w-32 text-white\"> Email </label>\n            <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                value={form?.email ?? ''}\n                class=\"ml-4 w-72 rounded border p-2\"\n            />\n        </div>\n        <div>\n            <label for=\"password\" class=\"inline-block w-32 text-white\"> Password </label>\n            <input id=\"password\" name=\"password\" type=\"password\" class=\"ml-4 w-72 rounded border p-2\" />\n        </div>\n        <input\n            type=\"submit\"\n            value=\"Sign in to my account\"\n            class=\"cursor-pointer rounded border border-gray-500 py-4 text-white\"\n        />\n        <div class=\"mt-2 text-base font-medium text-gray-300\">\n            Don't have an account yet?{' '}\n            <a href=\"/signup\" class=\"text-primary-700 underline\"> Signup here </a>\n        </div>\n    </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Space Home Page with Todo Lists in Next.js\nDESCRIPTION: Creates a Space home page that displays Todo lists with server-side rendering. It uses ZenStack's enhanced Prisma client to automatically filter lists based on access policies, demonstrating how access control is handled transparently without explicit filtering in code.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/todo-saas/index.md#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SpaceContext, UserContext } from '@lib/context';\nimport { useList } from '@lib/hooks';\nimport { List, Space, User } from '@prisma/client';\nimport BreadCrumb from 'components/BreadCrumb';\nimport SpaceMembers from 'components/SpaceMembers';\nimport TodoList from 'components/TodoList';\nimport WithNavBar from 'components/WithNavBar';\nimport { GetServerSideProps } from 'next';\nimport { useRouter } from 'next/router';\nimport {\n    ChangeEvent,\n    FormEvent,\n    useContext,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport { toast } from 'react-toastify';\nimport { getEnhancedPrisma } from 'server/enhanced-db';\n\nfunction CreateDialog({ created }: { created: (list: List) => void }) {...}\n\ntype Props = {\n    space: Space;\n    lists: (List & { owner: User })[];\n};\n\nexport default function SpaceHome(props: Props) {\n    const router = useRouter();\n    const { findMany } = useList();\n\n    const { data: lists, mutate: refetch } = findMany(\n        {\n            where: {\n                space: {\n                    slug: router.query.slug as string,\n                },\n            },\n            include: {\n                owner: true,\n            },\n            orderBy: {\n                updatedAt: 'desc',\n            },\n        },\n        {\n            disabled: !router.query.slug,\n            initialData: props.lists,\n        }\n    );\n   // html\n   return (...)\n}\n\nexport const getServerSideProps: GetServerSideProps<Props> = async ({\n    req,\n    res,\n    params,\n}) => {\n    const db = await getEnhancedPrisma({ req, res });\n\n    const space = await db.space.findUnique({\n        where: { slug: params!.slug as string },\n    });\n    if (!space) {\n        return {\n            notFound: true,\n        };\n    }\n\n    const lists = await db.list.findMany({\n        where: {\n            space: { slug: params?.slug as string },\n        },\n        include: {\n            owner: true,\n        },\n        orderBy: {\n            updatedAt: 'desc',\n        },\n    });\n\n    return {\n        props: { space, lists },\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Data with Nested Relations in React\nDESCRIPTION: Example of using generated mutation hooks to create a List with nested Todo items. Demonstrates how to connect the List to an owner and create multiple Todo items in a single operation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/2-generate-hooks.md#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst { mutate } = useCreateList();\n\nfunction onCreateList() {\n  mutate({\n    data: { \n      title: 'My List',\n      owner: { connect: { id: userId } },\n      todos: {\n        create: [\n          { name: 'Todo 1' },\n          { name: 'Todo 2' }\n        ]\n      }\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Access Policy with Unauthenticated Request\nDESCRIPTION: Curl command to test the enhanced Prisma Client's access policy without providing a user ID header, which should return null due to access restrictions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/api/rpc/list/findFirst\"\n```\n\n----------------------------------------\n\nTITLE: Post model definition with access policies\nDESCRIPTION: ZenStack schema definition for the Post model, including relationships and access policies that control read/write permissions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nuxt.mdx#2025-04-10_snippet_6\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id String @id @default(cuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    title String @length(1, 256)\n    content String\n    published Boolean @default(false)\n    author User @relation(fields: [authorId], references: [id])\n    authorId String @default(auth().id)\n\n    // allow read for all signin users\n    @@allow('read', auth() != null && published)\n\n    // full access by author\n    @@allow('all', author == auth())\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ZenStack Query Key Structure\nDESCRIPTION: Example showing how ZenStack structures query keys as quintuples for cache management, including model name, operation, arguments and flags.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/4-invalidation.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n['zenstack', model, operation, args, flags]\n```\n\n----------------------------------------\n\nTITLE: Adding Access Control Rules to ZModel Schema\nDESCRIPTION: ZModel schema with added access control rules using the @@allow directive. This defines who can perform various operations on User and Post models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/refine-dev-backend/index.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  ...\n\n  // everybody can signup\n  @@allow('create', true)\n\n  // full access by self\n  @@allow('all', auth() == this)\n}\n\n\nmodel Post {\n  ...\n\n  // allow read for all signin users\n  @@allow('read', auth() != null && status == 'published')\n\n  // full access by author\n  @@allow('all', author == auth())\n}\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Relation Example in ZModel\nDESCRIPTION: Illustrates many-to-many relation implementation using a join model (Membership) between Space and User models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_49\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Space {\n    id String @id\n    // one-to-many with the \"join-model\"\n    members Membership[]\n}\n\n// Membership is the \"join-model\" between User and Space\nmodel Membership {\n    id String @id()\n\n    // one-to-many from Space\n    space Space @relation(fields: [spaceId], references: [id])\n    spaceId String\n\n    // one-to-many from User\n    user User @relation(fields: [userId], references: [id])\n    userId String\n\n    // a user can be member of a space for only once\n    @@unique([userId, spaceId])\n}\n\nmodel User {\n    id String @id\n    // one-to-many with the \"join-model\"\n    membership Membership[]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User and Session Models in ZModel\nDESCRIPTION: This snippet shows the required data model for Lucia Auth integration, including User and Session models with their relationships and access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/lucia.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id       String    @id @default(uuid())\n  userName String    @unique\n  password String    @omit\n  sessions Session[]\n\n  @@allow('read', true)\n  @@allow('all', auth() == this)\n}\n\nmodel Session {\n  id        String   @id\n  userId    String\n  expiresAt DateTime\n\n  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Markdown Plugin to ZModel\nDESCRIPTION: This snippet shows how to add a custom Markdown plugin to a ZModel file. It specifies the plugin provider path and sets title and description parameters.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part2/3-writing-plugins.md#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin markdown {\n    provider = './dist/markdown-plugin'\n    title = 'My Awesome Todo App'\n    description = 'A multi-tenant Todo application built with ZenStack.'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Field-Level Policies to List and Todo Models in ZenStack\nDESCRIPTION: Demonstrates adding field-level policies to the 'ownerId' field of List and Todo models to prevent updates. This ensures that the owner of a list or todo item cannot be changed after creation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.7-field-level.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel List {\n    ...\n    ownerId Int @default(auth().id) @deny('update', true)\n}\n\nmodel Todo {\n    ...\n    ownerId Int @default(auth().id) @deny('update', true)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating ZenStack Code to Custom Location\nDESCRIPTION: CLI command to generate ZenStack code to a custom output location for source control integration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/upgrade.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate --output ./.zenstack\n```\n\n----------------------------------------\n\nTITLE: Testing Access Policy with Unauthenticated Request\nDESCRIPTION: Curl command to test the enhanced Prisma Client's access policy without providing a user ID header, which should return null due to access restrictions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/api/rpc/list/findFirst\"\n```\n\n----------------------------------------\n\nTITLE: Complex Data Type Serialization Response Example\nDESCRIPTION: Example of a GET response with serialized bytes data including superjson metadata for deserialization.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"id\": \"1\",\n        \"type\": \"post\",\n        \"attributes\": {\n            \"bytes\": \"AQID\"\n        }\n    },\n    \"meta\": { \n        \"serialization\": {\"values\": { \"data.attributes.bytes\": [[ \"custom\", \"Bytes\"]] } } \n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Field Definition Example in ZModel\nDESCRIPTION: Example of field definitions in a Post model, showing various scalar types, optional fields, lists, and relations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_37\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    // \"id\" field is a mandatory unique identifier of this model\n    id String @id @default(uuid())\n\n    // fields can be DateTime\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n\n    // or string\n    title String\n\n    // or integer\n    viewCount Int @default(0)\n\n    // and optional\n    content String?\n\n    // and a list too\n    tags String[]\n\n    // and can reference another model too\n    comments Comment[]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RPC API Handler in SvelteKit\nDESCRIPTION: This snippet shows how to set up the RPC API Handler in a SvelteKit application. It uses the SvelteKitHandler from ZenStack's server package for SvelteKit.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rpc.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport zenstack from '@zenstackhq/server/sveltekit';\nimport RPCApiHandler from '@zenstackhq/server/api/rpc';\nimport { getPrisma } from './lib/db';\n\nexport const handle = zenstack.SvelteKitHandler({\n    prefix: '/api/model',\n    handler: RPCApiHandler(), // you can also omit it since `RPCApiHandler` is the default\n    getPrisma\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Enhanced Client for Anonymous User\nDESCRIPTION: Example showing how to create an enhanced Prisma client for an anonymous user by not passing the user object.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma);\n```\n\n----------------------------------------\n\nTITLE: Applying Default Attribute with Different Types in ZModel\nDESCRIPTION: Shows how to apply the default attribute to fields of different types, demonstrating the use of ContextType.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_14\n\nLANGUAGE: zmodel\nCODE:\n```\nf1 String @default(\"hello\")\nf2 Int @default(1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Access Control with ZenStack\nDESCRIPTION: Demonstrates how to implement row-level access control for Post model using ZenStack's declarative permission rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/django-guardian/index.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  username String\n  groups Group[]\n  posts Post[]\n}\n\nmodel Group {\n  id Int @id @default(autoincrement())\n  name String\n  users User[]\n  posts Post[]\n}\n\nmodel Post {\n  id Int @id @default(autoincrement())\n  title String\n  slug String @unique\n  groups Group[]\n  users User[]\n\n  // if the current user is in the user list of the post, update is allowed\n  @@allow('read,update', users?[id == auth().id])\n\n  // if the current user is in any group of the group list of the post,\n  // update is allowed\n  @@allow('read,update', groups?[users?[id == auth().id]])\n\n  // ... other permissions\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Common Content Operations\nDESCRIPTION: Shows how to implement common operations like toggling published status, liking/unliking, and deleting content using the base Content model. This demonstrates the benefits of polymorphism in simplifying content management.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nasync function onTogglePublished(content: Content) {\n  await updateContent({\n    where: { id: content.id },\n    data: { published: !content.published },\n  });\n}\n\nasync function onToggleLike(content: Content, isLiked: boolean) {\n  if (isLiked) {\n    await deleteLike({\n      where: {\n        authorId: user.id,\n      },\n    });\n  } else {\n    await createLike({\n      data: {\n        contentId: content.id,\n        authorId: user.id,\n      },\n    });\n  }\n}\n\nasync function onDelete(content: Content) {\n  await deleteContent({ where: { id: content.id } });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Model Schema for NextAuth in ZModel\nDESCRIPTION: ZModel definition for the User model compatible with NextAuth's CredentialsProvider, including necessary fields and access policy rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/authentication/next-auth.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id @default(cuid())\n    email String @unique @email\n    emailVerified DateTime?\n    password String @password @omit\n    name String?\n    image String? @url\n\n    // open to signup\n    @@allow('create', true)\n\n    // full access by oneself\n    @@allow('all', auth() == this)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Attribute-Based Access Control (ABAC) in ZModel\nDESCRIPTION: This snippet shows how to implement Attribute-Based Access Control (ABAC) using ZenStack's ZModel schema language. It combines RBAC and ABAC concepts for fine-grained access control on the Post model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-auth/index.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nenum Role {\n    USER\n    EDITOR\n}\n\nmodel User {\n    id Int @id\n    email String\n    role Role @default(USER)\n}\n\nmodel Post {\n    id Int @id\n    title String\n    content String\n    // \"published\" field can only be updated by editors\n    published Boolean @default(false)\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int String\n\n    // ABAC: everyone can read published posts\n    @@allow('read', published)\n\n    // author has full access (except for updating \"published\" field, see below)\n    @@allow('all', auth() == author)\n\n    // RBAC & ABAC: non-editor users are not allowed to modify \"published\" field\n    // \"future()\" represents the entity's post-update state\n\t@@deny('update', user.role() != EDITOR && future().published != published)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC API Handler in Next.js\nDESCRIPTION: Code example showing how to implement the ZenStack RPC API Handler in a Next.js application using the App Router. This sets up a dynamic API route that handles multiple HTTP methods.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rpc.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequestHandler } from '@zenstackhq/server/next';\nimport { RestApiHandler } from '@zenstackhq/server/api';\nimport { getPrisma } from '~/lib/db';\n\nconst handler = NextRequestHandler({\n    getPrisma,\n    useAppDir: true,\n    handler: RPCApiHandler() // you can also omit it since `RPCApiHandler` is the default\n});\n\nexport {\n  handler as GET,\n  handler as POST,\n  handler as PUT,\n  handler as PATCH,\n  handler as DELETE,\n};\n```\n\n----------------------------------------\n\nTITLE: Mounting CRUD API endpoints in Nuxt with ZenStack\nDESCRIPTION: Implementation of a catch-all API route handler that mounts CRUD operations for all models and enhances Prisma with access policy enforcement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nuxt.mdx#2025-04-10_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\nimport { createEventHandler } from '@zenstackhq/server/nuxt';\nimport { prisma } from '~/server/prisma';\n\nexport default createEventHandler({\n    getPrisma: async (event) => {\n        const session = await useAuthSession(event);\n        return enhance(prisma, {\n            user: session.data.id ? { id: session.data.id } : undefined,\n        });\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Validation Constraints to JSON Fields\nDESCRIPTION: Demonstrates how to add validation constraints to fields within a type definition for runtime validation of JSON data.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/json-typing/index.md#2025-04-10_snippet_6\n\nLANGUAGE: zmodel\nCODE:\n```\ntype Metadata {\n  width Int @gt(0) @lt(10000)\n  height Int @gt(0) @lt(10000)\n  format String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Schema with ZModel for Blog Post Application\nDESCRIPTION: ZModel schema definition for the blog post application, including User and Post models with their respective fields and relationships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/react-admin/index.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\ngenerator client {\n    provider = \"prisma-client-js\"\n}\n\ndatasource db {\n    provider = \"sqlite\"\n    url      = \"file:./db.sqlite\"\n}\n\nmodel User {\n    id Int @id @default(autoincrement())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    email String @unique\n    password String @password @omit\n    name String?\n    role String @default('Author') // Author, Editor, Admin\n    posts Post[]\n\n    @@allow('all', true)\n}\n\nmodel Post {\n    id Int @id @default(autoincrement())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    title String\n    content String\n    status String @default('Draft') // Draft, Submitted, Published\n    user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n    userId Int\n\n    @@allow('all', true)\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Prisma Schema from ZenStack Model Inheritance\nDESCRIPTION: The resulting Prisma schema after ZenStack processes the model inheritance. The abstract model is erased, and its fields and attributes are combined with the extending models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/multiple-schema.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\n/// @@allow('all', auth() != null && published)\nmodel User {\n    name String\n    id Int @id() @default(autoincrement())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt()\n    published Boolean @default(true)\n}\n\n/// @@allow('all', auth() != null && published)\nmodel Post {\n    title String\n    content String?\n    viewCount Int @default(0)\n    comment Comment[]\n    id Int @id() @default(autoincrement())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt()\n    published Boolean @default(true)\n}\n\n/// @@allow('all', auth() != null && published)\nmodel Comment {\n    content String\n    post Post @relation(fields: [postId], references: [id])\n    postId Int\n    id Int @id() @default(autoincrement())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt()\n    published Boolean @default(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Field-Level Deny Policies to Protect Owner Fields\nDESCRIPTION: Example of using @deny attribute to prevent the ownerId field from being updated in List and Todo models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.7-field-level.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel List {\n    ...\n    ownerId Int @deny('update', true)\n}\n\nmodel Todo {\n    ...\n    ownerId Int @deny('update', true)\n}\n```\n\n----------------------------------------\n\nTITLE: ZenStack API Route Handler\nDESCRIPTION: Next.js API route implementation for handling ZenStack CRUD operations with authentication\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequestHandler } from \"@zenstackhq/server/next\";\nimport { enhance } from \"@zenstackhq/runtime\";\nimport type { NextApiRequest, NextApiResponse } from \"next\";\nimport { getServerAuthSession } from \"../../../server/auth\";\nimport { db } from \"../../../server/db\";\n\nasync function getPrisma(req: NextApiRequest, res: NextApiResponse) {\n  const session = await getServerAuthSession({ req, res });\n  return enhance(db, { user: session?.user });\n}\n\nexport default NextRequestHandler({ getPrisma });\n```\n\n----------------------------------------\n\nTITLE: Running Database Seed Command\nDESCRIPTION: Command to seed the database with initial data using the defined seed script.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db seed\n```\n\n----------------------------------------\n\nTITLE: Creating Todo Item Component with ZenStack Hooks\nDESCRIPTION: Implements a Todo component that handles individual todo items, providing completion toggling and deletion functionality. It uses ZenStack's useTodo hook to perform CRUD operations while automatically enforcing access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/todo-saas/index.md#2025-04-10_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TrashIcon } from '@heroicons/react/24/outline';\nimport { useTodo } from '@lib/hooks';\nimport { Todo, User } from '@prisma/client';\nimport { ChangeEvent } from 'react';\nimport Avatar from './Avatar';\nimport TimeInfo from './TimeInfo';\n\ntype Props = {\n    value: Todo & { owner: User };\n    updated?: (value: Todo) => any;\n    deleted?: (value: Todo) => any;\n};\n\nexport default function TodoComponent({ value, updated, deleted }: Props) {\n    const { update, del } = useTodo();\n\n    const deleteTodo = async () => {\n        await del({ where: { id: value.id } });\n        if (deleted) {\n            deleted(value);\n        }\n    };\n\n    const toggleCompleted = async (completed: boolean) => {\n        if (completed === !!value.completedAt) {\n            return;\n        }\n        const newValue = await update({\n            where: { id: value.id },\n            data: { completedAt: completed ? new Date() : null },\n        });\n        if (updated && newValue) {\n            updated(newValue);\n        }\n    };\n    // html\n    return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Query and Mutation Hooks in Svelte\nDESCRIPTION: Example of using ZenStack-generated hooks for fetching and creating posts in a Svelte component. The component displays a list of posts with their authors and provides a button to create new posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n    import { useFindManyPost, useCreatePost } from '../lib/hooks';\n\n    export let userId: string;\n\n    // list all posts that're visible to the current user, together with their authors\n    const query = useFindManyPost({\n        include: { author: true },\n        orderBy: { createdAt: 'desc' },\n    });\n\n    const create = useCreatePost();\n\n    function onCreatePost() {\n        $create.mutate({\n            data: {\n                title: 'My awesome post',\n                authorId: userId,\n            },\n        });\n    }\n</script>\n\n<div>\n    <button on:click={onCreatePost}>Create</button>\n    <ul>\n        {#each $query.data as post (post.id)}\n            <li>{post.title} by {post.author.email}</li>\n        {/each}\n    </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring tRPC Plugin for v11 in ZModel Schema\nDESCRIPTION: ZModel configuration for the tRPC plugin in tRPC v11, including additional settings for router and procedure factory imports.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/trpc.mdx#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin trpc {\n    provider = '@zenstackhq/trpc'\n    output = 'src/server/routers/generated'\n    version = 'v11'\n    importCreateRouter = \"../../trpc\"\n    importProcedure = \"../../trpc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking List Emptiness in ZModel\nDESCRIPTION: Checks if a given field (list) is empty. Equivalent to Prisma's isEmpty operator.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_43\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction isEmpty(field: Any[]): Boolean {}\n```\n\n----------------------------------------\n\nTITLE: Zenstack Blog Application Data Model\nDESCRIPTION: A ZenStack data model schema for a blogging application with User, Profile, Post, and Comment entities. It defines relationships between users and posts, posts and comments, and users and profiles.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id @default(autoincrement())\n    email String\n    posts Post[]\n}\n\nmodel Profile {\n    id Int @id @default(autoincrement())\n    gender String\n    user User @relation(fields: [userId], references: [id])\n    userId Int @unique\n}\n\nmodel Post {\n    id Int @id @default(autoincrement())\n    title String\n    published Boolean @default(false)\n    viewCount Int @default(0)\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int\n    comments Comment[]\n}\n\nmodel Comment {\n    id Int @id @default(autoincrement())\n    content String\n    post Post @relation(fields: [postId], references: [id])\n    postId Int\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model with Access Control in ZModel\nDESCRIPTION: ZModel schema definition for the Post model, including fields and access control rules using @@allow attributes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/remix-run.mdx#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n  id String @id @default(cuid())\n  title String\n  body String\n  published Boolean @default(false)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)\n  userId String\n\n  // author has full access\n  @@allow('all', auth() == user)\n\n  // logged-in users can view published posts\n  @@allow('read', auth() != null && published)\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Verification for Auth0 Authentication\nDESCRIPTION: Function to authenticate an Auth0 user using JWT verification and apply the user data to ZenStack session.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/auth0.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getPrismaJWT = async (req) => {\n  try {\n    const jwks = jose.createRemoteJWKSet(new URL(process.env.AUTH0_JWKS_URI));\n    const token = toString(req.headers.get('authorization')).replace('Bearer ', '');\n    const res = await jose.jwtVerify(token, jwks, {\n      issuer: `${process.env.AUTH0_ISSUER_BASE_URL}/`,\n      audience: process.env.AUTH0_AUDIENCE,\n      algorithms: ['RS256'],\n    });\n  \n    const userId = res.payload.sub;\n    const user = {\n      id: userId,\n      specialKey: res.payload.metadata.specialKey\n    };\n  \n    return enhance(prisma, {user});\n  catch (err) {\n    // unauthenticated error\n  }  \n};\n```\n\n----------------------------------------\n\nTITLE: Defining Data Schema with Prisma\nDESCRIPTION: Example of defining a simple blogging app schema using Prisma ORM, including User and Post models with their relationships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/postgrest-alternative/index.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id\n    email String\n    password String\n    posts Post[]\n}\n\nmodel Post {\n    id String @id\n    title String\n    published Boolean @default(false)\n    author User @relation(fields: [authorId], references: [id])\n    authorId String\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Model with Inherited Access Policies in ZenStack\nDESCRIPTION: Example of adding a new Bug model that inherits access policies from BaseEntity. This demonstrates the scalability advantage of ZenStack's model inheritance for access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/supabase-alternative/index.md#2025-04-10_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nmodel Bug extends BaseEntity {\n    title    String @length(1, 100)\n    priority Int\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Plugin in ZModel Schema\nDESCRIPTION: Adding the OpenAPI plugin to the ZModel schema file with RPC flavor configuration. This sets up the plugin to generate documentation in todo-api.json with specified title and version.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/5-documentation.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin openapi {\n    provider = \"@zenstackhq/openapi\"\n    output = \"todo-api.json\"\n    title = \"My Todo API\"\n    version = \"1.0.0\"\n    flavor = \"rpc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-Based Access Control (RBAC) in ZModel\nDESCRIPTION: This snippet demonstrates how to implement Role-Based Access Control (RBAC) using ZenStack's ZModel schema language. It defines User and Post models with role-based access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-auth/index.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nenum Role {\n    USER\n    ADMIN\n}\n\nmodel User {\n    id Int @id\n    email String\n    role Role @default(USER)\n}\n\nmodel Post {\n    id Int @id\n    title String\n    content String\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int String\n\n    // everyone can read posts\n    @@allow('read', true)\n\n    // admins have full access\n    @@allow('all', auth().role == ADMIN)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating React Hooks with ZenStack\nDESCRIPTION: Command to generate React hooks from the ZenStack model for data fetching.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nextjs.mdx#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\n```\n\n----------------------------------------\n\nTITLE: Implementing Row-Level Security for Blog Posts in PostgreSQL\nDESCRIPTION: This SQL snippet demonstrates how to set up row-level security policies in PostgreSQL for a blog post table. It defines policies for post owners and read access for published posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/modern-sql-programming/index.md#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Simple RLS for blog posts\n\n-- owner has full access to her own posts\nCREATE POLICY post_owner_policy ON post\n    USING (owner = current_user);\n\n-- all users can read published posts\nCREATE POLICY post_read_policy ON post FOR SELECT\n    USING (published = true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Query for Pagination in React\nDESCRIPTION: Example of using ZenStack's infinite query hook for loading posts with infinite pagination in React. The component displays posts in pages and provides a button to load more posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useInfiniteFindManyPost } from '../lib/hooks';\n\n// post list component with infinite loading\nconst Posts = () => {\n    const PAGE_SIZE = 10;\n\n    const fetchArgs = {\n        include: { author: true },\n        orderBy: { createdAt: 'desc' as const },\n        take: PAGE_SIZE,\n    };\n\n    const { data, fetchNextPage, hasNextPage } = useInfiniteFindManyPost(fetchArgs, {\n        getNextPageParam: (lastPage, pages) => {\n            if (lastPage.length < PAGE_SIZE) {\n                return undefined;\n            }\n            const fetched = pages.flatMap((item) => item).length;\n            return {\n                ...fetchArgs,\n                skip: fetched,\n            };\n        },\n    });    \n\n    return (\n        <>\n            <ul>\n                {data?.pages.map((posts, i) => (\n                    <React.Fragment key={i}>\n                        {posts?.map((post) => (\n                            <li key={post.id}>\n                                {post.title} by {post.author.email}\n                            </li>\n                        ))}\n                    </React.Fragment>\n                ))}\n            </ul>\n            {hasNextPage && (\n                <button onClick={() => fetchNextPage()}>\n                    Load more\n                </button>\n            )}\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js Home Page with ZenStack CRUD Operations for Blog Posts\nDESCRIPTION: A complete implementation of a Next.js home page that includes user authentication, post management, and CRUD operations using ZenStack's generated hooks. The component displays different UI based on authentication status and allows creating, publishing/unpublishing, and deleting posts with proper access control.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/next-app-router.mdx#2025-04-10_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport type { Post } from \"@prisma/client\";\nimport { type NextPage } from \"next\";\nimport { signOut, useSession } from \"next-auth/react\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/navigation\";\nimport {\n  useFindManyPost,\n  useCreatePost,\n  useUpdatePost,\n  useDeletePost,\n} from \"../lib/hooks\";\n\ntype AuthUser = { id: string; email?: string | null };\n\nconst Welcome = ({ user }: { user: AuthUser }) => {\n  const router = useRouter();\n  async function onSignout() {\n    await signOut({ redirect: false });\n    router.push(\"/signin\");\n  }\n  return (\n    <div className=\"flex gap-4\">\n      <h3 className=\"text-lg\">Welcome back, {user?.email}</h3>\n      <button\n        className=\"text-gray-300 underline\"\n        onClick={() => void onSignout()}\n      >\n        Signout\n      </button>\n    </div>\n  );\n};\n\nconst SigninSignup = () => {\n  return (\n    <div className=\"flex gap-4 text-2xl\">\n      <Link href=\"/signin\" className=\"rounded-lg border px-4 py-2\">\n        Signin\n      </Link>\n      <Link href=\"/signup\" className=\"rounded-lg border px-4 py-2\">\n        Signup\n      </Link>\n    </div>\n  );\n};\n\nconst Posts = ({ user }: { user: AuthUser }) => {\n  // Post crud hooks\n  const { mutateAsync: createPost } = useCreatePost();\n  const { mutateAsync: updatePost } = useUpdatePost();\n  const { mutateAsync: deletePost } = useDeletePost();\n\n  // list all posts that're visible to the current user, together with their authors\n  const { data: posts } = useFindManyPost({\n    include: { createdBy: true },\n    orderBy: { createdAt: \"desc\" },\n  });\n\n  async function onCreatePost() {\n    const name = prompt(\"Enter post name\");\n    if (name) {\n      await createPost({\n        data: { name, createdBy: { connect: { id: user.id } } },\n      });\n    }\n  }\n\n  async function onTogglePublished(post: Post) {\n    await updatePost({\n      where: { id: post.id },\n      data: { published: !post.published },\n    });\n  }\n\n  async function onDelete(post: Post) {\n    await deletePost({ where: { id: post.id } });\n  }\n\n  return (\n    <div className=\"container flex flex-col text-white\">\n      <button\n        className=\"rounded border border-white p-2 text-lg\"\n        onClick={() => void onCreatePost()}\n      >\n        + Create Post\n      </button>\n\n      <ul className=\"container mt-8 flex flex-col gap-2\">\n        {posts?.map((post) => (\n          <li key={post.id} className=\"flex items-end justify-between gap-4\">\n            <p className={`text-2xl ${!post.published ? \"text-gray-400\" : \"\"}`}>\n              {post.name}\n              <span className=\"text-lg\"> by {post.createdBy.email}</span>\n            </p>\n            <div className=\"flex w-32 justify-end gap-1 text-left\">\n              <button\n                className=\"underline\"\n                onClick={() => void onTogglePublished(post)}\n              >\n                {post.published ? \"Unpublish\" : \"Publish\"}\n              </button>\n              <button className=\"underline\" onClick={() => void onDelete(post)}>\n                Delete\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nconst Home: NextPage = () => {\n  const { data: session, status } = useSession();\n\n  if (status === \"loading\") return <p>Loading ...</p>;\n\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\">\n      <div className=\"container flex flex-col items-center justify-center gap-12 px-4 py-16 text-white\">\n        <h1 className=\"text-5xl font-extrabold\">My Awesome Blog</h1>\n\n        {session?.user ? (\n          // welcome & blog posts\n          <div className=\"flex flex-col\">\n            <Welcome user={session.user} />\n            <section className=\"mt-10\">\n              <Posts user={session.user} />\n            </section>\n          </div>\n        ) : (\n          // if not logged in\n          <SigninSignup />\n        )}\n      </div>\n    </main>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Read Policy with @@allow in ZenStack\nDESCRIPTION: A basic example of using the @@allow attribute to restrict read access to only published posts in a ZenStack model definition.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.1-model-level.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id Int @id\n    title String\n    published Boolean @default(false)\n\n    // published posts are readable\n    @@allow('read', published)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth and React Query Providers in Next.js\nDESCRIPTION: Sets up SessionProvider from NextAuth and QueryClientProvider from React Query in the Next.js app wrapper component. This configuration enables authentication and data fetching capabilities throughout the application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs.mdx#2025-04-10_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type AppType } from \"next/app\";\nimport { type Session } from \"next-auth\";\nimport { SessionProvider } from \"next-auth/react\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\n\nimport \"../styles/globals.css\";\n\nconst queryClient = new QueryClient();\n\nconst MyApp: AppType<{ session: Session | null }> = ({\n  Component,\n  pageProps: { session, ...pageProps },\n}) => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <SessionProvider session={session}>\n        <Component {...pageProps} />\n      </SessionProvider>\n    </QueryClientProvider>\n  );\n};\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Attributes in Prisma Generator\nDESCRIPTION: This TypeScript snippet shows how to access custom attributes defined in comments within a Prisma generator. It extracts the documentation property from model and field AST nodes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/custom-attributes.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst userModel = datamodel.models.find((model) => model.name === 'User');\nconsole.log(`user model attribute: ${userModel?.documentation}`);\n\nconst emailField = userModel?.fields.find((field) => field.name === 'email');\nconsole.log(`email field attribute: ${emailField?.documentation}`);\n\nconst passwordField = userModel?.fields.find((field) => field.name === 'password');\nconsole.log(`password field attribute: ${passwordField?.documentation}`);\n```\n\n----------------------------------------\n\nTITLE: Basic Model Field Syntax in ZModel\nDESCRIPTION: Demonstrates the basic syntax for defining model fields in ZModel, including field name, type and optional attributes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_45\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Model {\n    [FIELD_NAME] [FIELD_TYPE] (FIELD_ATTRIBUTES)?\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Prisma Adapter for Lucia Auth\nDESCRIPTION: This code sets up the Prisma adapter for Lucia Auth, connecting it to the database using PrismaClient.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/lucia.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaAdapter } from \"@lucia-auth/adapter-prisma\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst client = new PrismaClient();\n\nconst adapter = new PrismaAdapter(client.session, client.user);\n```\n\n----------------------------------------\n\nTITLE: Vercel Build Configuration\nDESCRIPTION: Package.json script configuration for Vercel deployment, including ZenStack generation, TypeScript compilation, and database setup.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/rest-api-on-vercel/index.md#2025-04-10_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"vercel-build\": \"zenstack generate && tsc && prisma db push && tsx prisma/seed.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Authentication in ZModel Policy Rules\nDESCRIPTION: Demonstrates how to check if a user is logged in using the auth() function in policy rules. This snippet denies all operations if no user is authenticated.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_50\n\nLANGUAGE: zmodel\nCODE:\n```\n@@deny('all', auth() == null)\n```\n\n----------------------------------------\n\nTITLE: Implementing Email/Password Authentication with Firebase\nDESCRIPTION: Code snippet showing how to implement email/password-based authentication using Firebase Authentication. It demonstrates signing in a user and redirecting to the home page on success.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/firebase-alternative/index.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\n\nconst auth = getAuth();\n\nasync function onSignin(email: string, password: string) {\n  try {\n    await signInWithEmailAndPassword(auth, email, password);\n    Router.push('/');\n  } catch (err) {\n    alert('Unable to sign in: ' + (err as Error).message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a ZenStack REPL Session\nDESCRIPTION: Command to start a REPL (Read-Eval-Print Loop) session for interacting with the ZenStack-enhanced PrismaClient. This should be run within the package where ZenStack was generated.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/cli.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack repl\n```\n\n----------------------------------------\n\nTITLE: Generated Access Policy Functions\nDESCRIPTION: Auto-generated TypeScript functions that implement the access policy rules as Prisma query conditions for read and update operations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/under-the-hood.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Post_read(context: QueryContext) {\n    const user = hasAllFields(context.user, ['id']) ? context.user : null;\n    return {\n        OR: [\n            user == null\n                ? { OR: [] } // false condition\n                : {\n                      author: {\n                          is: {\n                              id: user.id,\n                          },\n                      },\n                  },\n            {\n                AND: [\n                    user == null ? { OR: [] } : { AND: [] },\n                    {\n                        published: true,\n                    },\n                ],\n            },\n        ],\n    };\n}\n\nfunction Post_update(context: QueryContext) {\n    const user = hasAllFields(context.user, ['id']) ? context.user : null;\n    return user == null\n        ? { OR: [] } // false condition\n        : {\n              author: {\n                  is: {\n                      id: user.id,\n                  },\n              },\n          };\n}\n```\n\n----------------------------------------\n\nTITLE: Using SWR Query and Mutation Hooks\nDESCRIPTION: Example React component demonstrating usage of generated SWR hooks for querying and mutating posts\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/swr.mdx#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Post } from '@prisma/client';\nimport { useFindManyPost, useCreatePost } from '../lib/hooks';\n\n// post list component\nconst Posts = ({ userId }: { userId: string }) => {\n    const { trigger: createPost } = useCreatePost();\n\n    // list all posts that're visible to the current user, together with their authors\n    const { data: posts } = useFindManyPost({\n        include: { author: true },\n        orderBy: { createdAt: 'desc' },\n    });\n\n    function onCreatePost() {\n        createPost({\n            data: {\n                title: 'My awesome post',\n                authorId: userId,\n            },\n        });\n    }\n\n    return (\n        <>\n            <button onClick={onCreatePost}>Create</button>\n            <ul>\n                {posts?.map((post) => (\n                    <li key={post.id}>\n                        {post.title} by {post.author.email}\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating helper methods for user-bound Prisma client\nDESCRIPTION: Implements helper methods to get a Prisma client bound to the current user identity using ZenStack's enhance function.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/backend.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Request } from 'express';\nimport { enhance } from '@zenstackhq/runtime';\n\nfunction getUserId(req: Request) {\n    return parseInt(req.header('X-USER-ID')!);\n}\n\n// Gets a Prisma client bound to the current user identity\nfunction getPrisma(req: Request) {\n    const userId = getUserId(req);\n    const user = Number.isNaN(userId) ? undefined : { id: userId };\n    return enhance(prisma, { user });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NextAuth with Credentials Provider for ZenStack\nDESCRIPTION: NextAuth configuration using CredentialsProvider with JWT sessions. Includes password comparison using bcryptjs and user lookup in Prisma database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PrismaAdapter } from '@next-auth/prisma-adapter';\nimport { PrismaClient } from '@prisma/client';\nimport { compare } from 'bcryptjs';\nimport NextAuth, { NextAuthOptions } from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport { prisma } from 'server/db';\n\nexport const authOptions: NextAuthOptions = {\n    adapter: PrismaAdapter(prisma),\n\n    session: {\n        strategy: 'jwt',\n    },\n\n    providers: [\n        CredentialsProvider({\n            credentials: {\n                email: {\n                    type: 'email',\n                },\n                password: {\n                    type: 'password',\n                },\n            },\n            authorize: authorize(prisma),\n        }),\n    ],\n\n    callbacks: {\n        async session({ session, token }) {\n            return {\n                ...session,\n                user: {\n                    ...session.user,\n                    id: token.sub!,\n                },\n            };\n        },\n    },\n};\n\nfunction authorize(prisma: PrismaClient) {\n    return async (credentials: Record<'email' | 'password', string> | undefined) => {\n        if (!credentials) {\n            throw new Error('Missing credentials');\n        }\n\n        if (!credentials.email) {\n            throw new Error('\"email\" is required in credentials');\n        }\n\n        if (!credentials.password) {\n            throw new Error('\"password\" is required in credentials');\n        }\n\n        const maybeUser = await prisma.user.findFirst({\n            where: {\n                email: credentials.email,\n            },\n            select: {\n                id: true,\n                email: true,\n                password: true,\n            },\n        });\n\n        if (!maybeUser || !maybeUser.password) {\n            return null;\n        }\n\n        const isValid = await compare(credentials.password, maybeUser.password);\n\n        if (!isValid) {\n            return null;\n        }\n\n        return {\n            id: maybeUser.id,\n            email: maybeUser.email,\n        };\n    };\n}\n\nexport default NextAuth(authOptions);\n```\n\n----------------------------------------\n\nTITLE: NextAuth Configuration with Credentials Provider\nDESCRIPTION: Configuration for NextAuth.js using credentials-based authentication with JWT session strategy\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport type { PrismaClient } from \"@prisma/client\";\nimport { compare } from \"bcryptjs\";\nimport type { GetServerSidePropsContext } from \"next\";\nimport NextAuth, {\n  getServerSession,\n  type DefaultSession,\n  type NextAuthOptions,\n} from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { db } from \"./db\";\nimport { Adapter } from \"next-auth/adapters\";\n\ndeclare module \"next-auth\" {\n  interface Session extends DefaultSession {\n    user: {\n      id: string;\n    } & DefaultSession[\"user\"];\n  }\n}\n\nexport const authOptions: NextAuthOptions = {\n  session: {\n    strategy: \"jwt\",\n  },\n  callbacks: {\n    session({ session, token }) {\n      if (session.user) {\n        session.user.id = token.sub!;\n      }\n      return session;\n    },\n  },\n  adapter: PrismaAdapter(db) as Adapter,\n  providers: [\n    CredentialsProvider({\n      credentials: {\n        email: { type: \"email\" },\n        password: { type: \"password\" },\n      },\n      authorize: authorize(db),\n    }),\n  ],\n};\n\nfunction authorize(prisma: PrismaClient) {\n  return async (\n    credentials: Record<\"email\" | \"password\", string> | undefined,\n  ) => {\n    if (!credentials) throw new Error(\"Missing credentials\");\n    if (!credentials.email)\n      throw new Error('\"email\" is required in credentials');\n    if (!credentials.password)\n      throw new Error('\"password\" is required in credentials');\n    const maybeUser = await prisma.user.findFirst({\n      where: { email: credentials.email },\n      select: { id: true, email: true, password: true },\n    });\n    if (!maybeUser?.password) return null;\n    const isValid = await compare(credentials.password, maybeUser.password);\n    if (!isValid) return null;\n    return { id: maybeUser.id, email: maybeUser.email };\n  };\n}\n\nexport const getServerAuthSession = (ctx: {\n  req: GetServerSidePropsContext[\"req\"];\n  res: GetServerSidePropsContext[\"res\"];\n}) => {\n  return getServerSession(ctx.req, ctx.res, authOptions);\n};\n\nexport default NextAuth(authOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating Enhanced Prisma Client with ZenStack\nDESCRIPTION: Setup of an enhanced Prisma client that automatically validates access policies and field validation rules during CRUD operations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/authentication/next-auth.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next-auth';\nimport { getServerSession } from 'next-auth';\nimport { enhance } from '@zenstackhq/runtime';\nimport { authOptions } from '../../pages/api/auth/[...nextauth]';\nimport { prisma } from '../../../server/db/client';\n\nasync function getPrisma(req: NextApiRequest, res: NextApiResponse) {\n    const session = await getServerSession(req, res, authOptions);\n    // create a wrapper of Prisma client that enforces access policy,\n    // data validation, and @password, @omit behaviors\n    return enhance(prisma, { user: session?.user });\n}\n```\n\n----------------------------------------\n\nTITLE: Database Entity Relationship Diagram for Multi-tenant Todo App\nDESCRIPTION: Mermaid diagram showing the database schema for a multi-tenant Todo application, including Space, User, SpaceUser, List, and Todo entities and their relationships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/supabase-alternative/index.md#2025-04-10_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    Space {\n        String id\n        String name\n    }\n    SpaceUser {\n        String id\n        String spaceId\n        String userId\n    }\n    User {\n        String id\n        String email\n    }\n    List {\n        String id\n        String spaceId\n        String ownerId\n        String title\n        Boolean private\n    }\n    Todo {\n        String id\n        String ownerId\n        String listId\n        String title\n    \n    }\n\t\tSpace ||--o{ SpaceUser: has\n    SpaceUser }o--|| User : has\n    User ||--o{ List : owns\n    User ||--o{ Todo : owns\n    List }o--|| Space : belongs_to\n    List ||--o{ Todo : contains\n```\n\n----------------------------------------\n\nTITLE: Omitting Sensitive Fields in User Model\nDESCRIPTION: Code example showing how to mark a password field with both @password and @omit attributes to hash the password and prevent it from being returned in queries.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/6-other-enhancements.md#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    ...\n    password String? @password @omit\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Automatic CRUD API with Express.js and ZenStack\nDESCRIPTION: This snippet shows how to set up an Express.js server to serve an automatic CRUD API using ZenStack. It demonstrates middleware configuration for API routing and session user handling.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/no-api/index.md#2025-04-10_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nimport { enhance } from '@zenstackhq/runtime';\nimport { ZenStackMiddleware } from '@zenstackhq/server/express';\nimport express from 'express';\n\nconst prisma = new PrismaClient();\nconst app = express();\n\n// serve CRUD API at \"/api/model\"\napp.use(\n    '/api/model',\n    ZenStackMiddleware({\n        // getSessionUser extracts the current session user from the request, its\n        // implementation depends on your auth solution\n        getPrisma: (request) => enhance(prisma, { user: getSessionUser(request) }),\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating POST /post API to use extracted user ID\nDESCRIPTION: Modifies the POST /post API to use the extracted user ID when creating a new post instead of passing user email in the body.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/backend.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(`/post`, async (req, res) => {\n    const { title, content } = req.body;\n    const result = await prisma.post.create({\n        data: {\n            title,\n            content,\n            author: { connect: { id: getUserId(req) } },\n        },\n    });\n    res.json(result);\n});\n```\n\n----------------------------------------\n\nTITLE: Server Action for Creating Todo Lists\nDESCRIPTION: A Next.js server action that creates a new todo list in the database. It uses the enhanced PrismaClient to ensure proper access control is applied during creation and revalidates the path to refresh the UI with the new data.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/clerk-multitenancy/index.mdx#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n'use server';\n\nimport { revalidatePath } from \"next/cache\";\nimport { getUserDb } from \"~/server/db\";\n\nexport async function createList(title: string) {\n  const db = await getUserDb();\n  await db.list.create({ data: { title } });\n  revalidatePath(\"/\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AI Prompt for Document Generation from ZModel Schema\nDESCRIPTION: The prompt template used to instruct the AI model on generating documentation from a ZModel schema. It specifies the structure of the desired documentation output, including overview and model details with access policies explained in plain text.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/code-as-doc/index.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n  const prompt = `\n    You are the expert of ZenStack open-source toolkit. \n    You will generate a technical design document from a provided ZModel schema file that help developer understand the structure and behavior of the application. \n    The document should include the following sections:\n    1. Overview \n        a. A short paragraph for the high-level description of this app\n        b. Functionality\n    2. an array of model. Each model has below two information:\n        a. model name\n        b. array of access policies explained by plain text\n    here is the ZModel schema file:\n    \\`\\`\\`zmodel\n    ${zmodel}\n    \\`\\`\\`\n    `;\n```\n\n----------------------------------------\n\nTITLE: Creating a RESTful API Handler in ZenStack\nDESCRIPTION: Example showing how to create a resource-centric RESTful API handler using JSON:API as the transportation format, specifying the API endpoint URL.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/_options.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RestApiHandler } from '@zenstackhq/server/api';\nconst handler = RestApiHandler({ endpoint: 'http://myhost/api' });\n```\n\n----------------------------------------\n\nTITLE: Defining Relation Attribute in ZModel\nDESCRIPTION: The @relation attribute definition showing its parameters including name, fields, references, onDelete, onUpdate, and map options.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_49\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @relation(\n    _ name: String?,\n    fields: FieldReference[]?,\n    references: FieldReference[]?,\n    onDelete: ReferentialAction?,\n    onUpdate: ReferentialAction?,\n    map: String?)\n```\n\n----------------------------------------\n\nTITLE: Using This Expression in ZenStack Models\nDESCRIPTION: Shows how to use the 'this' keyword to reference the containing model in policy rules. The 'this' expression allows comparison with the current model instance.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id\n    @@allow('all', auth() == this) // `this` is a This Expression\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling the Next.js Project\nDESCRIPTION: Command to build and compile the Next.js project to verify everything works correctly.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating a ZenStack Plugin Structure for Document Generation\nDESCRIPTION: The initial structure of a ZenStack plugin for document generation. It defines the plugin name and the main function that takes the model AST, options, and DMMF document as parameters. This forms the foundation for the document generation plugin.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/code-as-doc/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PluginOptions } from '@zenstackhq/sdk';\nimport type { DMMF } from '@zenstackhq/sdk/prisma';\nimport type { Model } from '@zenstackhq/sdk/ast';\n\nexport const name = 'ZenStack MarkDown';\n\nexport default async function run(model: Model, options: PluginOptions, dmmf: DMMF.Document) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Query with SWR in React Component\nDESCRIPTION: React component showcasing the implementation of infinite scrolling using ZenStack-generated SWR hooks, including pagination and dynamic loading of posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/swr.mdx#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Post } from '@prisma/client';\nimport { useInfiniteFindManyPost } from '../lib/hooks';\n\n// post list component with infinite loading\nconst Posts = ({ userId }: { userId: string }) => {\n\n    const PAGE_SIZE = 10;\n\n    const { data: pages, size, setSize } = useInfiniteFindManyPost(\n        (pageIndex, previousPageData) => {\n            if (previousPageData && !previousPageData.length) {\n                return null;\n            }\n            return {\n                include: { author: true },\n                orderBy: { createdAt: 'desc' },\n                take: PAGE_SIZE,\n                skip: pageIndex * PAGE_SIZE,\n            };\n        }\n    );\n\n    const isEmpty = pages?.[0]?.length === 0;\n    const isReachingEnd = isEmpty || (pages && pages[pages.length - 1].length < PAGE_SIZE);\n\n    return (\n        <>\n            <ul>\n                {pages?.map((posts, index) => (\n                    <React.Fragment key={index}>\n                        {posts?.map((post) => (\n                            <li key={post.id}>\n                                {post.title} by {post.author.email}\n                            </li>\n                        ))}\n                    </React.Fragment>\n                ))}\n            </ul>\n\n            {!isReachingEnd && (\n                <button onClick={() => setSize(size + 1)}>\n                    Load more\n                </button>\n            )}\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Enhanced Prisma Client with Clerk Authentication\nDESCRIPTION: Example of creating an enhanced Prisma client that enforces access policies using Clerk authentication information, suitable for Next.js API routes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/authentication/clerk.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest } from 'next';\nimport { enhance } from '@zenstackhq/runtime';\nimport { getAuth } from '@clerk/nextjs/server';\nimport { prisma } from '../lib/db';\n\nasync function getPrisma(req: NextApiRequest) {\n    const auth = getAuth(req);\n    // create a wrapper of Prisma client that enforces access policy,\n    // data validation, and @password, @omit behaviors\n    return enhance(prisma, { user: auth ? { id: auth.userId } : undefined });\n}\n```\n\n----------------------------------------\n\nTITLE: Example of using enhance function with session user context\nDESCRIPTION: Example showing how to use the enhance function with a user session to create an enhanced Prisma client that enforces access policies based on the current user.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/runtime-api.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst session = getSession();\nconst enhancedClient = enhance(prisma, { user: session.user });\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC API Handler in SvelteKit\nDESCRIPTION: Code example showing how to implement the ZenStack RPC API Handler in a SvelteKit application using server hooks. This sets up a handler for the '/api/model' path prefix.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rpc.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitHandler } from '@zenstackhq/server/sveltekit';\nimport { RPCApiHandler } from '@zenstackhq/server/api';\nimport { getPrisma } from './lib/db';\n\nexport const handle = SvelteKitHandler({\n    prefix: '/api/model',\n    handler: RPCApiHandler(), // you can also omit it since `RPCApiHandler` is the default\n    getPrisma\n});\n```\n\n----------------------------------------\n\nTITLE: Authentication Utility Setup\nDESCRIPTION: TypeScript module for JWT token creation and authentication utilities\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/sveltekit.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from '$env/dynamic/private';\nimport type { User } from '@prisma/client';\nimport jwt from 'jsonwebtoken';\n\nexport const JWT_TOKEN_COOKIE_NAME = 'ZenStack-Blog-Token';\n\nexport function createToken(user: User) {\n\treturn jwt.sign(\n\t\t{\n\t\t\tsub: user.id,\n\t\t\temail: user.email\n\t\t},\n\t\tenv.JWT_SECRET,\n\t\t{ expiresIn: '7d' }\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Detailed Booking Page with CRUD Operations in React/TSX\nDESCRIPTION: A comprehensive React component that handles booking details display, invitation management, and deletion. Includes loader and action handlers for data fetching and mutations, along with UI components for displaying and managing booking information.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/cal-com-clone.mdx#2025-04-10_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ActionArgs, LoaderArgs } from '@remix-run/node';\nimport { json, redirect } from '@remix-run/node';\nimport { Form, useFetcher, useLoaderData } from '@remix-run/react';\nimport invariant from 'tiny-invariant';\nimport { deleteBooking, getBooking, updateInvite } from '~/models/booking.server';\nimport { getUsers } from '~/models/user.server';\nimport { requireUserId } from '~/session.server';\n\nexport async function loader({ request, params }: LoaderArgs) {\n    const userId = await requireUserId(request);\n    invariant(params.bookingId, 'bookingId not found');\n\n    const booking = await getBooking({ userId, id: params.bookingId });\n    if (!booking) {\n        throw new Response('Not Found', { status: 404 });\n    }\n\n    const users = await getUsers();\n\n    return json({ booking, users });\n}\n\nasync function updateInviteAction({ request }: ActionArgs) {\n    const userId = await requireUserId(request);\n    const formData = await request.formData();\n    const bookingId = formData.get('bookingId') as string;\n    const inviteUserId = formData.get('inviteUserId') as string;\n    const add = formData.get('add') === 'true';\n\n    try {\n        await updateInvite({\n            userId,\n            bookingId,\n            inviteUserId,\n            add,\n        });\n        return json({ error: null, ok: true });\n    } catch (error: any) {\n        return json({ error: error.message, ok: false });\n    }\n}\n\nasync function deleteAction({ request, params }: ActionArgs) {\n    const userId = await requireUserId(request);\n    invariant(params.bookingId, 'bookingId not found');\n    await deleteBooking({ userId, id: params.bookingId });\n    return redirect('/booking');\n}\n\nexport async function action(args: ActionArgs) {\n    if (args.request.method === 'POST') {\n        return updateInviteAction(args);\n    } else if (args.request.method === 'DELETE') {\n        return deleteAction(args);\n    }\n}\n\nexport default function BookingDetailsPage() {\n    const data = useLoaderData<typeof loader>();\n    const fetcher = useFetcher();\n\n    function onChangeInvite(inviteUserId: string, add: boolean) {\n        fetcher.submit(\n            {\n                bookingId: data.booking.id,\n                inviteUserId,\n                add: add.toString(),\n            },\n            { method: 'post' }\n        );\n    }\n\n    return (\n        <div>\n            <h3 className=\"text-2xl font-bold\">{data.booking.email}</h3>\n            <div className=\"flex flex-col gap-4 py-6\">\n                <div>\n                    <p className=\"font-semibold\">Owner</p>\n                    <p>{data.booking.user.email}</p>\n                </div>\n                <div>\n                    <p className=\"font-semibold\">Start At</p>\n                    <p>{new Date(data.booking.startAt).toLocaleString()}</p>\n                </div>\n                <div>\n                    <p className=\"font-semibold\">Duration</p>\n                    <p>{data.booking.duration} minutes</p>\n                </div>\n                <div>\n                    <p className=\"font-semibold\">Notes</p>\n                    <p>{data.booking.notes}</p>\n                </div>\n                <div>\n                    <p className=\"font-semibold\">Invited Members</p>\n\n                    <div className=\"flex flex-col gap-1\">\n                        {data.users\n                            .filter((user) => user.id !== data.booking.user.id)\n                            .map((user) => (\n                                <label key={user.id} className=\"flex items-center\">\n                                    <span>{user.email}</span>\n                                    <input\n                                        type=\"checkbox\"\n                                        className=\"ml-2\"\n                                        checked={data.booking.invitedUsers.some((invite) => invite.userId === user.id)}\n                                        onChange={(e) => onChangeInvite(user.id, e.currentTarget.checked)}\n                                    />\n                                </label>\n                            ))}\n                    </div>\n                </div>\n            </div>\n            <hr className=\"my-4\" />\n            <Form method=\"delete\">\n                <button\n                    type=\"submit\"\n                    className=\"rounded bg-blue-500  py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n                >\n                    Delete\n                </button>\n            </Form>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TodoList and Todo Data Models in ZModel\nDESCRIPTION: Core data model definitions for TodoList and Todo entities with their relationships and field definitions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/better-auth/index.mdx#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel TodoList {\n  id             String        @id @default(cuid())\n  createdAt      DateTime      @default(now())\n  updatedAt      DateTime      @updatedAt\n  name           String\n  owner          User          @relation(fields: [ownerId], references: [id])\n  ownerId        String\n  organization   Organization? @relation(fields: [organizationId], references: [id])\n  organizationId String?\n  todos          Todo[]\n}\n\nmodel Todo {\n  id        String   @id @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String\n  done      Boolean  @default(false)\n  listId    String\n  list      TodoList @relation(fields: [listId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a Base Entity with Enhanced PrismaClient in TypeScript\nDESCRIPTION: Illustrates how reading a base entity is transformed to include and merge fields from the appropriate concrete model based on the discriminator field.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/polymorphism/index.md#2025-04-10_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst asset = await db.asset.findFirst();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { video, image, /* other types */, ..._asset } = \n  await prisma.asset.findFirst({\n    include: { video: true, image: true, ... }\n});\n\n// merge concrete model fields\nconst asset = {\n  ..._asset, \n  ...(_asset.type === 'Video' ? video: _asset.type === 'Image' ? image) \n};\n```\n\n----------------------------------------\n\nTITLE: Providing User Context to Enhanced Prisma Client\nDESCRIPTION: Shows how to provide user identity context to the enhance function, which allows the access policy engine to know which user is making the database call.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/3-enhancement.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSessionUser } from './auth';\n\n// the `getSessionUser` implementation depends on your authentication solution\nconst db = enhance(prisma, { user: getSessionUser() });\n```\n\n----------------------------------------\n\nTITLE: Serving OpenAPI Documentation with Swagger UI in Node.js\nDESCRIPTION: Integrate Swagger UI into a Node.js application to serve the generated OpenAPI specification as interactive documentation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/5-documentation.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport swaggerUI from 'swagger-ui-express';\napp.use(\n    '/api/docs',\n    swaggerUI.serve,\n    swaggerUI.setup(require('./todo-api.json'))\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing List Management UI Component\nDESCRIPTION: React component implementing list management functionality within spaces using ZenStack hooks for querying and creating lists, featuring automatic cache invalidation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/4-invalidation.md#2025-04-10_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useSession } from 'next-auth/react';\nimport Link from 'next/link';\nimport { useParams } from 'next/navigation';\nimport { useCreateList, useFindManyList, useFindUniqueSpace } from '~/lib/hooks';\n\nexport default function SpaceHome() {\n  const { slug } = useParams<{ slug: string }>();\n\n  const { data: session } = useSession();\n\n  const { data: space } = useFindUniqueSpace({ where: { slug } }, { enabled:!!session?.user });\n\n  const { data: lists } = useFindManyList(\n    {\n      where: { space: { slug } },\n      include: { owner: true },\n      orderBy: { updatedAt: 'desc' },\n    },\n    { enabled: !!session?.user },\n  );\n\n  const { mutate: createList } = useCreateList();\n\n  function onCreateList() {\n    const title = prompt('Enter a title for your list');\n    if (title) {\n      createList({\n        data: {\n          title,\n          space: { connect: { id: space?.id } },\n        },\n      });\n    }\n  }\n\n  if (!session?.user || !space || !lists) return null;\n\n  return (\n    <div className=\"container mx-auto mt-16\">\n      <h1 className=\"text-center text-3xl\">\n        Welcome to Space <span className=\"italic\">{space.name}</span>\n      </h1>\n      <div className=\"p-8\">\n        <button className=\"btn btn-primary btn-wide\" onClick={onCreateList}>\n          Create a list\n        </button>\n\n        <ul className=\"mt-8 flex flex-wrap gap-6\">\n          {lists?.map((list) => (\n            <Link href={`/spaces/${slug}/${list.id}`} key={list.id}>\n              <li className=\"flex h-32 w-72 items-center justify-center rounded-lg border text-2xl\">\n                {list.title}\n              </li>\n            </Link>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript signature of withOmit function\nDESCRIPTION: Function signature for withOmit which adds support for the @omit attribute, allowing fields to be removed from entities when they're returned.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/runtime-api.md#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction withOmit<DbClient extends object>(\n    prisma: DbClient,\n    options?: WithOmitOptions\n): DbClient;\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Models with ZenStack's Extend Keyword\nDESCRIPTION: ZenStack schema definition showing how to use the extend keyword to create true inheritance between models, along with the @@delegate attribute to handle polymorphic behavior through the contentType field.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nmodel Content {\n  id String @id @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  published Boolean @default(false)\n  author User @relation(fields: [authorId], references: [id])\n  authorId String\n  contentType String\n  likes Like[]\n  @@delegate(contentType)\n\n  // author has full access\n  @@allow('all', auth() == author)\n\n  // logged-in users can view published posts\n  @@allow('read', auth() != null && published)\n}\n\nmodel Post extends Content {\n  title String\n}\n\nmodel Image extends Content {\n  url String\n}\n```\n\n----------------------------------------\n\nTITLE: ZModel Schema with Custom Attributes\nDESCRIPTION: Example ZModel schema showing how custom attributes are defined for a User model and its fields. These attributes are then preserved in the generated Prisma schema as triple comments.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/custom-attributes.mdx#2025-04-10_snippet_9\n\nLANGUAGE: zmodel\nCODE:\n```\n/// @@allow('create,read', true)\nmodel User {\n    id String @id() @default(cuid())\n    name String?\n    /// @email\n    email String? @unique()\n    /// @password\n    /// @omit\n    password String?\n}\n```\n\n----------------------------------------\n\nTITLE: Logging In with cURL Command\nDESCRIPTION: Example cURL command to log in a user by sending a POST request to the login endpoint with email and password credentials, which will verify the credentials and return a JWT token.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST localhost:3000/api/login \\\n    -H 'Content-Type: application/json' \\\n    -d '{ \"email\": \"tom@pet.inc\", \"password\": \"abc123\" }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Schemes in ZenStack OpenAPI Plugin\nDESCRIPTION: Example of configuring security schemes including basic auth, JWT bearer tokens, and API key authentication in the OpenAPI plugin configuration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/openapi.mdx#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin openapi {\n    provider = '@zenstackhq/openapi'\n    securitySchemes = {\n        basic: { type: 'http', scheme: 'basic' },\n        bearer: { type: 'http', scheme: 'bearer', bearerFormat: 'JWT' },\n        apiKey: { type: 'apiKey', in: 'header', name: 'X-API-KEY' }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Info Level Logging for PrismaClient in TypeScript\nDESCRIPTION: This code demonstrates how to enable 'info' level logging when creating a PrismaClient instance, which is necessary to see the debug logs.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/debugging.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient({ log: ['info'] });\n```\n\n----------------------------------------\n\nTITLE: Defining React Table Columns and Query Structure\nDESCRIPTION: TypeScript code that defines React Table columns for an OrderDetail component. It uses a column helper to create typed column accessors that can reach into nested objects returned by a Prisma query.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/react-table/index.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// the relation fields included when querying `OrderDetail`\nconst queryInclude = {\n  include: {\n    order: { include: { employee: true } },\n    product: { include: { category: true } },\n  },\n} satisfies Prisma.OrderDetailFindManyArgs;\n\n// create a column helper to simplify the column definition\n// The `Prisma.OrderDetailGetPayload<typeof queryInclude>` type gives us\n// the shape of the query result\nconst columnHelper =\n  createColumnHelper<Prisma.OrderDetailGetPayload<typeof queryInclude>>();\n\nconst columns = [\n  columnHelper.accessor('order.id', { header: () => <span>Order ID</span> }),\n\n  columnHelper.accessor('order.orderDate', {\n      cell: (info) => info.getValue()?.toLocaleDateString(),\n      header: () => <span>Date</span>,\n  }),\n\n  // other columns ...\n\n  columnHelper.accessor('order.employee.firstName', {\n      header: () => <span>Employee</span>,\n  }),\n];\n\nexport const OrderDetails = () => {\n  // fetch data with query hooks\n  const { data } = useFindManyOrderDetail({\n    ...queryInclude,\n  });\n  \n  // create a table instance\n  const table = useReactTable({\n    data: orders ?? [],\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstract Model Inheritance in ZenStack\nDESCRIPTION: Demonstrates how to define an abstract base model with common fields and access rules, and then extend it with concrete models. The abstract model is erased during generation and doesn't appear in the final schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/multiple-schema.md#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nabstract model Base {\n    id Int @id @default(autoincrement())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt()\n\n    //Logged-in users can view\n    @@allow('read', auth() != null)\n\n}\n\nmodel Post extends Base\n{\n    title String\n    content String?\n    viewCount Int @default(0)\n}\n\nmodel ToDo extends Base\n{\n    title String\n    completed Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Failed User Creation Due to Missing Access Policy\nDESCRIPTION: JavaScript example showing an attempted user creation that fails because no 'create' policy has been defined, demonstrating ZenStack's secure-by-default approach.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.1-model-level.md#2025-04-10_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ndb.user.create({ data: { email: 'ross@zenstack.dev', name: 'Ross' } });\n```\n\n----------------------------------------\n\nTITLE: Optimistic Update Configuration\nDESCRIPTION: Demonstrates how to configure and use automatic optimistic updates with ZenStack mutation hooks. Shows both enabling and disabling optimistic updates for queries and mutations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst { mutate: create } = useCreatePost({ optimisticUpdate: true });\n\nfunction onCreatePost() {\n    create({ ... })\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data } = useFindManyPost({ where: { published: true } }, { optimisticUpdate: false });\n```\n\n----------------------------------------\n\nTITLE: Modifying Access Policy with ZenStack for New Requirements\nDESCRIPTION: A simple modification to the Todo model's access policy to grant full access if the parent List is readable. This shows how easily new requirements can be implemented compared to modifying complex RLS policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/supabase-alternative/index.md#2025-04-10_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n// full access if the parent list is readable\n// @@allow('all', check(list))\n   @@allow('all', check(list, 'read'))\n```\n\n----------------------------------------\n\nTITLE: Creating a Post Listing Page in Remix\nDESCRIPTION: Remix route component that displays a list of posts with navigation. The page includes loader function to fetch posts with authorization rules applied through ZenStack's enhanced Prisma client.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/remix-run.mdx#2025-04-10_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { LoaderArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Form, Link, NavLink, Outlet, useLoaderData } from '@remix-run/react';\nimport { getPosts } from '~/models/post.server';\nimport { requireUserId } from '~/session.server';\nimport { useUser } from '~/utils';\n\nexport async function loader({ request }: LoaderArgs) {\n    const userId = await requireUserId(request);\n    const posts = await getPosts({ userId });\n    return json({ posts });\n}\n\nexport default function PostsPage() {\n    const data = useLoaderData<typeof loader>();\n    const user = useUser();\n\n    return (\n        <div className=\"flex h-full min-h-screen flex-col\">\n            <header className=\"flex items-center justify-between bg-slate-800 p-4 text-white\">\n                <h1 className=\"text-3xl font-bold\">\n                    <Link to=\".\">Posts</Link>\n                </h1>\n                <p>{user.email}</p>\n                <Form action=\"/logout\" method=\"post\">\n                    <button\n                        type=\"submit\"\n                        className=\"rounded bg-slate-600 py-2 px-4 text-blue-100 hover:bg-blue-500 active:bg-blue-600\"\n                    >\n                        Logout\n                    </button>\n                </Form>\n            </header>\n\n            <main className=\"flex h-full bg-white\">\n                <div className=\"h-full w-80 border-r bg-gray-50\">\n                    <Link to=\"new\" className=\"block p-4 text-xl text-blue-500\">\n                        + New Post\n                    </Link>\n\n                    <hr />\n\n                    {data.posts.length === 0 ? (\n                        <p className=\"p-4\">No posts yet</p>\n                    ) : (\n                        <ol>\n                            {data.posts.map((post) => (\n                                <li key={post.id}>\n                                    <NavLink\n                                        className={({ isActive }) =>\n                                            `block border-b p-4 text-xl ${isActive ? 'bg-white' : ''}`\n                                        }\n                                        to={post.id}\n                                    >\n                                        📝 {post.title}\n                                    </NavLink>\n                                </li>\n                            ))}\n                        </ol>\n                    )}\n                </div>\n\n                <div className=\"flex-1 p-6\">\n                    <Outlet />\n                </div>\n            </main>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Client Generator in ZModel\nDESCRIPTION: This snippet demonstrates how to declare a Prisma Client generator in ZModel, which is passed to the generated Prisma schema without modification.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/1-zmodel.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\ngenerator client {\n    provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Todo Lists Component with React Server Components\nDESCRIPTION: A React Server Component that fetches and displays todo lists for the current user. It uses the enhanced PrismaClient which automatically filters out lists that the user doesn't have access to based on the access control rules defined in ZenStack.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/clerk-multitenancy/index.mdx#2025-04-10_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// Component showing Todo list for the current user\n\nexport default async function TodoLists() {\n  const db = await getUserDb();\n\n  // enhanced PrismaClient automatically filters out\n  // the lists that the user doesn't have access to\n  const lists = await db.list.findMany({\n    orderBy: { updatedAt: \"desc\" },\n  });\n\n  return (\n    <div>\n      <div>\n        {/* client component for creating a new List */}\n        <CreateList />\n\n        <ul>\n          {lists?.map((list) => (\n            <Link href={`/lists/${list.id}`} key={list.id}>\n              <li>{list.title}</li>\n            </Link>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Query Invalidation in ZenStack Hooks\nDESCRIPTION: Example showing how to disable automatic query invalidation in ZenStack mutation hooks by setting the invalidateQueries parameter to false.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\n// arguments are mutation options and invalidateQueries\nuseCreatePost(undefined, false);\n```\n\n----------------------------------------\n\nTITLE: Making Predictions with PostgresML in SQL\nDESCRIPTION: SQL query to make predictions using a trained model in PostgresML. This query selects both the actual target value and the predicted value for the first 10 records in the digits dataset.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/modern-sql-ai/index.md#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    target,\n    pgml.predict('Handwritten Digit Image Classifier', image) AS prediction\nFROM pgml.digits \nLIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Creating a List Object as an Authenticated User\nDESCRIPTION: Example of creating a new List object in the ZenStack REPL with authentication context for user with ID 1.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.7-field-level.md#2025-04-10_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n.auth { id: 1 }\ndb.list.create({ data: { title: \"Joey' List\", private: true, owner: { connect: { id: 1 } }, space: { connect: { id: 1 } } } })\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-Many Relationship in Prisma Schema\nDESCRIPTION: An example showing how to create a one-to-many relationship between User and Post models using the @relation attribute. The Post model references the User model through a foreign key (authorId) that links to the User's primary key.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/0-prisma.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id @default(@autoincrement())\n    ...\n    posts Post[]\n}\n\nmodel Post {\n    id Int @id @default(@autoincrement())\n    title String\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Prisma Schema with JSON Field\nDESCRIPTION: Shows how ZenStack transforms the typed JSON field back to a regular Prisma JSON type during code generation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/json-typing/index.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Image {\n  id Int @id @default(autoincrement())\n  metadata Json\n}\n```\n\n----------------------------------------\n\nTITLE: Using auth() in @default() for ZenStack V2 Schema\nDESCRIPTION: An updated schema for ZenStack V2 that uses the auth() function in @default() to automatically assign ownerId when creating posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/upgrade.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id Int @default(autoincrement())\n}\n\nmodel Post {\n  id Int @default(autoincrement())\n  title String\n  owner User @relation(fields: [ownerId], references: [id])\n  ownerId Int @default(auth().id) // <- assign ownerId automatically\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up tRPC Context with Enhanced Prisma Client\nDESCRIPTION: TypeScript code for creating a tRPC context with an enhanced Prisma client. It uses ZenStack's enhance function to apply access control policies to the Prisma client.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/trpc.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\nimport { prisma } from './db';\nimport { getSessionUser } from './auth';\n\nexport const createContext = async ({ req, res }: CreateNextContextOptions) => {\n    return {\n        ...,\n        // use access-control-enabled Prisma client\n        prisma: await enhance(prisma, { user: getSessionUser(req, res) }),\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Field-Level Access Control Examples\nDESCRIPTION: Demonstrates field-level access control implementation for controlling update and read permissions on specific fields\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-auth/index.md#2025-04-10_snippet_6\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id Int @id\n    title String\n    content String\n    // \"published\" field can only be updated by editors\n    published Boolean @default(false) @allow('update', auth().role == EDITOR)\n\t\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Query for Pagination in Svelte\nDESCRIPTION: Example of using ZenStack's infinite query hook for loading posts with infinite pagination in Svelte. The component displays posts in pages and provides a button to load more posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n    // post list component with infinite loading\n\n    import { useInfiniteFindManyPost } from '../lib/hooks';\n\n    const PAGE_SIZE = 10;\n\n    const fetchArgs = {\n        include: { author: true },\n        orderBy: { createdAt: 'desc' as const },\n        take: PAGE_SIZE,\n    };\n\n    const query = useInfiniteFindManyPost(fetchArgs, {\n        getNextPageParam: (lastPage, pages) => {\n            if (lastPage.length < PAGE_SIZE) {\n                return undefined;\n            }\n            const fetched = pages.flatMap((item) => item).length;\n            return {\n                ...fetchArgs,\n                skip: fetched,\n            };\n        },\n    });    \n</script>\n\n<div>\n    <ul>\n        <div>\n            {#if $query.data}\n                {#each $query.data.pages as posts, i (i)}\n                    {#each posts as post (post.id)}\n                        <li>{post.title} by {post.author.email}</li>\n                    {/each}\n                {/each}\n            {/if}\n        </div>\n    </ul>\n    {#if $query.hasNextPage}\n        <button on:click={() => $query.fetchNextPage()}>\n            Load more\n        </button>\n    {/if}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using the now() Function in ZenStack Policy Rules\nDESCRIPTION: Shows how to use the now() function to compare with a DateTime field. This example allows reading records whose updatedAt field is earlier than the current time.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\n@@allow('read', future().updatedAt < now())\n```\n\n----------------------------------------\n\nTITLE: ZenStack Enhanced Schema with Access Policies\nDESCRIPTION: Extends the basic Prisma schema with ZenStack's access policy definitions. Includes user permissions and role-based access control for both User and Post models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/microservice/index.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  email     String   @unique\n  name      String?\n  role      Role     @default(USER)\n  posts     Post[]\n\n  //everyone can signup, and user profile is also publicly readable\n  @@allow('create,read', true)\n\n  // only the user can update or delete their own profile\n  @@allow('update,delete', auth() == this)\n}\n\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  published Boolean  @default(false)\n  title     String   @db.VarChar(255)\n  author    User?    @relation(fields: [authorId], references: [id])\n  authorId  Int?\n\n  // author has full access\n  @@allow('all', auth() == author)\n\n  // ADMIN has full access\n  @@allow('all', auth().role == ADMIN)\n\n  // logged-in users can view published posts\n  @@allow('read', auth() != null && published)\n}\n\nenum Role {\n  USER\n  ADMIN\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-Update Check for Revision in ZenStack\nDESCRIPTION: This snippet demonstrates how to use the future() function to implement a post-update check, ensuring that the new revision value is greater than the current one.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.6-post-update.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    ...\n    revision Int\n\n    @@allow('update', future().revision > revision)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SpaceUser Model with Role Support in ZenStack\nDESCRIPTION: Adding a role field to the SpaceUser model to enable role-based access control. This is part of implementing admin capabilities in the SaaS application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/technical-debt/index.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel SpaceUser extends SpaceBase {\n    role SpaceUserRole\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: ZenStack Frontend Query Implementation\nDESCRIPTION: Implementation of a Posts component using ZenStack-generated SWR hooks with automatic typing and relational queries.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/firebase-alternative/index.md#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFindManyPost } from \"../lib/hooks\";\n\nexport function Posts(user: User) {\n  // you can use the \"include\" clause to join the \"User\" table really easy\n  const { data: posts } = useFindManyPost({ include: { author: true } });\n\n  // posts is automatically typed as `Array<Post & { author: User }>`\n  return <ul>{posts?.map((post) => (<Post key={post.id} data={post} />))}</ul>;\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase SWR Integration\nDESCRIPTION: Implementation of a Posts component using Firebase with SWR for data fetching and state management.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/firebase-alternative/index.md#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport function Posts(user: User) {\n  const fsQuery = query(\n    collection(db, 'posts'),\n\t  or(\n\t    where(\"published\", \"==\", true),\n\t\twhere(\"authorId\", \"==\", user.uid)));\n\n  const { data: posts } = useSWR(\"posts\", async () => {\n    const snapshot = await getDocs(fsQuery);\n    const data = snapshot.docs.map((doc) => ({\n      id: doc.id,\n      ...doc.data(),\n    }));\n    return data;\n  });\n\n  return <ul>{posts?.map((post) => (<Post key={post.id} data={post} />))}</ul>;\n}\n```\n\n----------------------------------------\n\nTITLE: GET Request Example for RPC API\nDESCRIPTION: This snippet demonstrates a GET request to the RPC API endpoint for finding many posts. It shows how the query is serialized and passed as a query parameter.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rpc.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/post/findMany?q=%7B%22where%22%3A%7B%22public%22%3Atrue%7D%7D\n```\n\n----------------------------------------\n\nTITLE: GET Request Example for RPC API\nDESCRIPTION: This snippet demonstrates a GET request to the RPC API endpoint for finding many posts. It shows how the query is serialized and passed as a query parameter.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rpc.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/post/findMany?q=%7B%22where%22%3A%7B%22public%22%3Atrue%7D%7D\n```\n\n----------------------------------------\n\nTITLE: Checking List Contains All in ZModel\nDESCRIPTION: Checks if a given field (list) contains every element of the search list. Equivalent to Prisma's hasEvery operator.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_41\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction hasEvery(field: Any[], search: Any[]): Boolean {}\n```\n\n----------------------------------------\n\nTITLE: Creating an Enhanced Prisma Client Helper in Remix\nDESCRIPTION: Helper function to get an access-policy-enabled Prisma client that enforces ZenStack's access policies. This wrapper is used to manipulate the Post model with authorization rules applied.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/remix-run.mdx#2025-04-10_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\n\nexport function getEnhancedPrisma(userId: string) {\n    return enhance(prisma, { user: { id: userId } });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Server Adapter for ZenStack API\nDESCRIPTION: Implementation of a custom server adapter that directly interfaces with the API handler. Demonstrates how to process requests, add custom headers, and handle responses with complete control over the pipeline.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/4-customization.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport RESTHandler from '@zenstackhq/server/api/rest';\n\napp.use('/api/rpc-custom', async (req: Request, res: Response) => {\n    const url = req.protocol + '://' + req.get('host') + req.originalUrl;\n    const searchParams = new URL(url).searchParams;\n    const query = Object.fromEntries(searchParams);\n    const handler = RPCHandler();\n\n    const { status, body } = await handler({\n        method: req.method,\n        path: req.path,\n        query,\n        requestBody: req.body,\n        prisma: enhance(prisma, { user: getUser(req) }) as any,\n    });\n\n    res.status(status)\n        .header('x-requested-by', req.header('x-user-id'))\n        .json(body);\n});\n```\n\n----------------------------------------\n\nTITLE: Generated PostUpdateScalarSchema Zod Definition\nDESCRIPTION: Generated Zod schema for validating input data when updating a Post, including only scalar fields. All fields are optional to support partial updates.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/zod.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst PostUpdateScalarSchema = z.object({\n  id: z.number(),\n  title: z.string().min(10).max(255),\n  published: z.boolean(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n}).partial();\n```\n\n----------------------------------------\n\nTITLE: Implementing Refine Data Provider for ZenStack API\nDESCRIPTION: TypeScript implementation of a Refine Data Provider that interfaces with the ZenStack-generated API, focusing on the getList method.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/refine-dev-backend/index.md#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dataProvider: DataProvider = {\n\n  getList: async function <TData extends BaseRecord = BaseRecord>(\n      params: GetListParams\n  ): Promise<GetListResponse<TData>> {\n    const queryArgs: any = {};\n\n    // filtering\n    if (params.filters && params.filters.length > 0) {\n      const filters = params.filters.map((filter) =>\n          transformFilter(filter)\n      );\n      if (filters.length > 1) {\n          queryArgs.where = { AND: filters };\n      } else {\n          queryArgs.where = filters[0];\n      }\n    }\n\n    // sorting\n    if (params.sorters && params.sorters.length > 0) {\n      queryArgs.orderBy = params.sorters.map((sorter) => ({\n          [sorter.field]: sorter.order,\n      }));\n    }\n\n    // pagination\n    if (\n      params.pagination?.mode === 'server' &&\n      params.pagination.current !== undefined &&\n      params.pagination.pageSize !== undefined\n    ) {\n      queryArgs.take = params.pagination.pageSize;\n      queryArgs.skip =\n          (params.pagination.current - 1) * params.pagination.pageSize;\n    }\n\n    // call the API to fetch data and count\n    const [data, count] = await Promise.all([\n      fetchData(params.resource, '/findMany', queryArgs),\n      fetchData(params.resource, '/count', queryArgs),\n    ]);\n\n    return { data, total: count };\n  },\n\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using the now() Function in ZenStack Policy Rules\nDESCRIPTION: Shows how to use the now() function to compare with a DateTime field. This example allows reading records whose updatedAt field is earlier than the current time.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\n@@allow('read', future().updatedAt < now())\n```\n\n----------------------------------------\n\nTITLE: Defining User and Group Models with ZenStack Schema\nDESCRIPTION: Shows how to define basic User and Group models using ZenStack's schema language (zmodel).\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/django-guardian/index.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  username String\n  groups Group[]\n}\n\nmodel Group {\n  id Int @id @default(autoincrement())\n  name String\n  users User[]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of JSON Field in TypeScript\nDESCRIPTION: Demonstrates how to use a Prisma JSON field with TypeScript, requiring explicit type casting to get type safety for the JSON data.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/json-typing/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Metadata {\n  width: number\n  height: number\n  format: string\n}\n\nconst image = await prisma.image.findFirstOrThrow();\n// an explicit cast into the desired type\nconst metadata = image.metadata as Metadata;\nconsole.log('Image dimensions:', metadata.width, 'by', metadata.height);\n```\n\n----------------------------------------\n\nTITLE: ZenStack SWR Plugin Configuration\nDESCRIPTION: Schema configuration for generating React hooks using SWR\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nplugin swr {\n  provider = '@zenstackhq/swr'\n  output = \"./src/lib/hook\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Enhanced PrismaClient with Access Policies\nDESCRIPTION: Extends the Express server to use ZenStack's enhanced PrismaClient with user-based access policies. It extracts the user ID from a custom header to simulate authentication for demonstration purposes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nimport { enhance } from '@zenstackhq/runtime';\nimport { ZenStackMiddleware } from '@zenstackhq/server/express';\nimport express, { Request } from 'express';\n\nconst app = express();\napp.use(express.json());\n\nconst prisma = new PrismaClient();\n\nfunction getUser(req: Request) {\n    if (req.headers['x-user-id']) {\n        return { id: parseInt(req.headers['x-user-id'] as string) };\n    } else {\n        return undefined;\n    }\n}\n\napp.use('/api/rpc', \n    ZenStackMiddleware({ \n        getPrisma: (req) => enhance(prisma, { user: getUser(req) })\n    })\n);\n\napp.listen(3000, () => console.log('🚀 Server ready at: http://localhost:3000'));\n```\n\n----------------------------------------\n\nTITLE: Using IsEmpty Function with Array Fields in ZenStack Models\nDESCRIPTION: Demonstrates using the isEmpty() function to check if an array field is empty. This function verifies that an array field has no elements.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_12\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id Int @id\n    tags String[]\n    @@allow('read', isEmpty(tags))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Space Creation Feature in Next.js with ZenStack\nDESCRIPTION: A React component that allows users to create a new space with a name and slug. It includes error handling for duplicate slugs and other Prisma errors, and redirects to the newly created space upon success.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSpace } from \"../lib/hooks\";\nimport { SpaceUserRole } from \"@prisma/client\";\nimport WithNavBar from \"../components/WithNavBar\";\nimport { NextPage } from \"next\";\nimport { useSession } from \"next-auth/react\";\nimport { useRouter } from \"next/router\";\nimport { FormEvent, useState } from \"react\";\n\nconst CreateSpace: NextPage = () => {\n  const { data: session } = useSession();\n  const [name, setName] = useState(\"\");\n  const [slug, setSlug] = useState(\"\");\n\n  const { create } = useSpace();\n  const router = useRouter();\n\n  const onSubmit = async (event: FormEvent) => {\n    event.preventDefault();\n    try {\n      const space = await create({\n        data: {\n          name,\n          slug,\n          members: {\n            create: [\n              {\n                userId: session!.user.id,\n                role: SpaceUserRole.ADMIN,\n              },\n            ],\n          },\n        },\n      });\n      alert(\"Space created successfull! You'll be redirected.\");\n      setTimeout(() => {\n        if (space) {\n          void router.push(`/space/${space.slug}`);\n        }\n      }, 2000);\n    } catch (err: any) {\n      console.error(err);\n      if (err.info?.prisma === true) {\n        if (err.info.code === \"P2002\") {\n          alert(\"Space slug already in use\");\n        } else {\n          alert(`Unexpected Prisma error: ${err.info.code as string}`);\n        }\n      } else {\n        alert(JSON.stringify(err));\n      }\n    }\n  };\n  // html\n  return (...);\n};\n\nexport default CreateSpace;\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Server Hooks in SvelteKit\nDESCRIPTION: Server-side hook that intercepts requests to extract and validate JWT tokens, loads the user identity, and enhances the Prisma client with ZenStack's access policy enforcement. Makes both user and DB available in the request context.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/sveltekit.mdx#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from '$env/dynamic/private';\nimport { JWT_TOKEN_COOKIE_NAME } from '$lib/auth';\nimport { prisma } from '$lib/db';\nimport type { Handle } from '@sveltejs/kit';\nimport { enhance } from '@zenstackhq/runtime';\nimport jwt from 'jsonwebtoken';\n\nconst auth = (async ({ event, resolve }) => {\n    const token = event.cookies.get(JWT_TOKEN_COOKIE_NAME);\n    if (token) {\n        try {\n            const decoded = jwt.verify(token, env.JWT_SECRET);\n            const user = await prisma.user.findUnique({\n                where: { id: decoded.sub as string }\n            });\n            if (user) {\n                event.locals.user = user;\n            } else {\n                console.warn('User not found:', decoded.sub);\n                event.cookies.delete(JWT_TOKEN_COOKIE_NAME, { path: '/' });\n            }\n        } catch {\n            event.cookies.delete(JWT_TOKEN_COOKIE_NAME, { path: '/' });\n        }\n    }\n\n    // create an enhanced PrismaClient that recognizes access policies\n    event.locals.db = enhance(prisma, {\n        user: event.locals.user ? { id: event.locals.user.id } : undefined\n    });\n\n    return resolve(event);\n}) satisfies Handle;\n\nexport const handle = auth;\n```\n\n----------------------------------------\n\nTITLE: Configuring ZenStack Hooks Generator Plugin\nDESCRIPTION: ZModel plugin configuration to generate React hooks for accessing the CRUD API with SWR.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nextjs.mdx#2025-04-10_snippet_8\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin hooks {\n  provider = '@zenstackhq/swr'\n  output = \"./src/lib/hooks\"\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Posts Component Implementation\nDESCRIPTION: Shows implementation of a Vue component using ZenStack hooks for post management. Includes data fetching and mutation functionality with TypeScript support.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useFindManyPost, useCreatePost } from '@/lib/hooks';\n\nconst props = defineProps({\n    userId: String\n});\n\n// list all posts that're visible to the current user, together with their authors\nconst { data: posts } = useFindManyPost({\n    include: { author: true },\n    orderBy: { createdAt: 'desc' },\n});\n\nconst onCreate = () => {\n    create.mutate({\n        data: {\n            title: 'My awesome post',\n            authorId: userId,\n        }\n    });\n};\n</script>\n\n<template>\n    <div>\n        <button @click=\"onCreatePost\">Create</button>\n        <ul v-if=\"posts\">\n            <li v-for=\"post in posts\" :key=\"post.id\">\n                {{ post.title }} by {{ post.author.email }}\n            </li>\n        </ul>\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Delegating All Operations with check() in ZModel\nDESCRIPTION: Example of using the check() function to delegate all operation types (read, create, update, delete) to the author model relationship in a Post model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_23\n\nLANGUAGE: zmodel\nCODE:\n```\n// delegating all operations\nmodel Post {\n    id Int @id\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int\n\n    // delegate all access policies to the author, equivalent to:\n    //     @@allow('read', check(author))\n    //     @@allow('create', check(author))\n    //     @@allow('update', check(author))\n    //     @@allow('delete', check(author))\n    @@allow('all', check(author))\n}\n```\n\n----------------------------------------\n\nTITLE: ZenStack Next.js API Route Setup\nDESCRIPTION: Configuration of ZenStack's CRUD API integration with Next.js API routes, including authentication session handling.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/firebase-alternative/index.md#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from \"@zenstackhq/runtime\";\nimport { NextRequestHandler } from \"@zenstackhq/server/next\";\nimport type { NextApiRequest, NextApiResponse } from \"next\";\nimport { getServerAuthSession } from \"../../../server/auth\";\nimport { prisma } from \"../../../server/db\";\n\nasync function getPrisma(req: NextApiRequest, res: NextApiResponse) {\n  const session = await getServerAuthSession({ req, res });\n  // create a wrapper of Prisma client that enforces access policy\n  return enhance(prisma, { user: session?.user });\n}\n\nexport default NextRequestHandler({ getPrisma });\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Query Filter Example in ZenStack\nDESCRIPTION: Example showing how query filters interact with optimistic updates, specifically demonstrating that unpublished posts can appear in results despite filter conditions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/_optimistic-limitation.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseFindManyPost({ where: { published: true }})\n```\n\n----------------------------------------\n\nTITLE: Simplified NestJS Controller Using Enhanced Prisma Service\nDESCRIPTION: This controller demonstrates how using the EnhancedPrismaService eliminates the need for manual authorization checks. Access policies are automatically enforced when querying data, making the controller code much cleaner.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/nest-api/index.md#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DeclarativeController {\n  constructor(private readonly enhancedPrisma: EnhancedPrismaService) {}\n\n  @Get('users')\n  async getAllUsers() {\n    // just do a simple `findMany` call, the `email` field is automatically \n    // excluded based on the access policy\n    return this.enhancedPrisma.user.findMany();\n  }\n\n  @Get('feed')\n  async getFilteredPosts(...): Promise<PostModel[]> {\n    const searchCondition = ...; // search conditions for filtering title, etc.\n\n    return this.enhancedPrisma.post.findMany({\n      // no need to filter for \"published: true\" or current user anymore\n      where: searchCondition,\n      // no need to exclude `email` field anymore\n      include: { author: true },\n      ...\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response from RESTful API Call\nDESCRIPTION: Example JSON response from the RESTful API call showing the created user with relationship links to their posts. The response follows the JSON:API specification format with resource identifiers and links.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/_using-api.mdx#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonapi\": { \"version\": \"1.1\" },\n    \"data\": {\n        \"type\": \"user\",\n        \"id\": 1,\n        \"attributes\": {\n            \"email\": \"user1@abc.com\",\n        },\n        \"links\": {\n            \"self\": \"http://localhost/api/user/1\",\n        },\n        \"relationships\": {\n            \"posts\": {\n                \"links\": {\n                    \"self\": \"http://localhost/api/user/1/relationships/posts\",\n                    \"related\": \"http://localhost/api/user/1/posts\",\n                },\n                \"data\": [\n                    { \"type\": \"post\", \"id\": 1 },\n                    { \"type\": \"post\", \"id\": 2 },\n                ],\n            },\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: ZenStack's Debug Logging Example for Policy Queries\nDESCRIPTION: An example of ZenStack's debug logging output showing the actual Prisma query generated with access policy conditions applied. This helps developers understand and debug how access policies are translated into database queries.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/supabase-alternative/index.md#2025-04-10_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nprisma:info [policy] `findMany` list:\n{\n  where: {\n    AND: [\n      { NOT: { OR: [] } },\n      {\n        OR: [\n          { owner: { is: { id: 1 } } },\n          {\n            AND: [\n              {\n                space: {\n                  members: {\n                    some: { user: { is: { id: 1 } } }\n                  }\n                }\n              },\n              { NOT: { private: true } }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Training a Classifier with PostgresML in SQL\nDESCRIPTION: SQL command to train an XGBoost classification model on the digits dataset for handwritten digit recognition. The model is named 'Handwritten Digit Image Classifier' and targets the 'target' column.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/modern-sql-ai/index.md#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM pgml.train(\n    'Handwritten Digit Image Classifier',\n    algorithm => 'xgboost',\n    'classification',\n    'pgml.digits',\n    'target'\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Prisma Data with non-JSON-serializable fields\nDESCRIPTION: Example of making an RPC request to find the full List object, which includes Date fields that aren't directly JSON-serializable.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/3-serialization.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/api/rpc/list/findFirst\" -H \"x-user-id: 1\"\n```\n\n----------------------------------------\n\nTITLE: Creating Warrants in warrant.dev\nDESCRIPTION: JSON request to create a warrant (access policy) in warrant.dev. This defines that a specific user can view article with ID 1.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/how-to-authz/index.md#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"objectType\": \"article\",\n  \"objectId\": \"1\",\n  \"relation\": \"viewer\",\n  \"subject\": {\n    \"objectType\": \"user\",\n    \"objectId\": \"d6ed6474-784e-407e-a1ea-42a91d4c52b9\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated TypeScript Types for JSON Fields\nDESCRIPTION: Shows how to import and use TypeScript types generated by ZenStack for JSON field types. This provides type safety when working with JSON data outside of database operations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/typing-json.md#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Profile } from '@zenstackhq/runtime/models';\n\nconst profile: Profile = {\n  name: 'Alice',\n  age: 30,\n  address: { state: 'WA', city: 'Seattle', zip: '98019' }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Order with Authentication Token via cURL\nDESCRIPTION: Example cURL command to create a new order for a pet using a JWT token for authentication. The request connects an existing pet to the order and associates it with the authenticated user.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST localhost:3000/api/order/create \\\n    -H 'Content-Type: application/json' -H \"Authorization: Bearer $token\"  \\\n    -d \"{ \\\"data\\\": { \\\"userId\\\": \\\"$userId\\\", \\\"pets\\\": { \\\"connect\\\": { \\\"id\\\": \\\"luna\\\" } } } }\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Parent-Child Access Policies with Duplicated Logic in ZenStack\nDESCRIPTION: A ZModel schema for a Todo application with duplicated access control policies between List and Todo models. The List owner has full access while public lists can be read by anyone. Todo items inherit the same permissions as their parent List.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/check-function/index.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel List {\n  id       Int @id\n  name     String\n  public   Boolean\n  author   User @relation(fields: [authorId], references: [id])\n  authorId Int\n  todos    Todo[]\n\n  // highlight-start\n  @@allow('all', auth() == author)\n  @@allow('read', public)\n  // highlight-end\n}\n\nmodel Todo {\n  id     Int @id\n  name   String\n  list   List @relation(fields: [listId], references: [id])\n  listId Int\n\n  // highlight-start\n  @@allow('all', auth() == list.author)\n  @@allow('read', list.public)\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: CRUD API Router Implementation\nDESCRIPTION: Next.js API route handler setup for automatic CRUD operations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/better-auth/index.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from '@/lib/db';\nimport { NextRequestHandler } from '@zenstackhq/server/next';\n\nasync function getPrisma() {\n  return prisma;\n}\n\nconst handler = NextRequestHandler({ getPrisma, useAppDir: true });\n\nexport {\n  handler as DELETE,\n  handler as GET,\n  handler as PATCH,\n  handler as POST,\n  handler as PUT,\n};\n```\n\n----------------------------------------\n\nTITLE: Empty Result from Enhanced Prisma Client Query\nDESCRIPTION: Shows the output of the previous query, which returns an empty array because access policies deny access by default unless explicitly allowed.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/3-enhancement.md#2025-04-10_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Post List UI in SvelteKit\nDESCRIPTION: Main page component that handles post listing, creation, publishing controls, and user authentication UI. Includes form handling with SvelteKit's enhance function and conditional rendering based on user authentication state.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/sveltekit.mdx#2025-04-10_snippet_15\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n    import { enhance } from '$app/forms';\n    import type { ActionData, PageData } from './$types';\n\n    export let data: PageData;\n    export let form: ActionData;\n</script>\n\n<main class=\"flex flex-col min-h-screen items-center justify-center gap-12 px-4 py-16 text-white bg-gradient-to-b from-[#2e026d] to-[#15162c]\">\n    <h1 class=\"text-5xl font-extrabold\">My Awesome Blog</h1>\n\n    {#if data.user}\n        <div class=\"flex flex-col\">\n            <div class=\"flex gap-4\">\n                <h3 class=\"text-lg\">Welcome back, {data.user.email}</h3>\n                <form method=\"post\" action=\"?/signOut\">\n                    <button type=\"submit\" class=\"text-gray-300 underline\">Sign out</button>\n                </form>\n            </div>\n\n            <section class=\"mt-10 container flex flex-col text-white\">\n                <!-- create post -->\n                <form method=\"post\" action=\"?/create\" use:enhance>\n                    <input\n                        name=\"title\"\n                        type=\"text\"\n                        placeholder=\"Post title\"\n                        required\n                        class=\"text-lg text-black px-4 py-2 rounded mr-2\"\n                    />\n                    <button class=\"rounded border border-white px-4 py-2 text-lg\" type=\"submit\"\n                        >+ Create</button\n                    >\n                </form>\n\n                <!-- post list -->\n                <ul class=\"container mt-8 flex flex-col gap-2\">\n                    {#each data.posts as post (post.id)}\n                        <li class=\"flex items-end justify-between gap-4\">\n                            <!-- post info -->\n                            <p class={`text-2xl ${!post.published ? 'text-gray-400' : ''}`}>\n                                {post.title}\n                                <span class=\"text-lg\"> by {post.author.email}</span>\n                            </p>\n\n                            <!-- post management -->\n                            <div class=\"flex w-32 justify-end gap-1 text-left\">\n                                <form method=\"post\" action=\"?/togglePublish\" use:enhance>\n                                    <input type=\"hidden\" name=\"id\" value={post.id} />\n                                    <button class=\"underline\" type=\"submit\">\n                                        {post.published ? 'Unpublish' : 'Publish'}\n                                    </button>\n                                </form>\n                                <form method=\"post\" action=\"?/delete\" use:enhance>\n                                    <input type=\"hidden\" name=\"id\" value={post.id} />\n                                    <button class=\"underline\" type=\"submit\">Delete</button>\n                                </form>\n                            </div>\n                        </li>\n                    {/each}\n                </ul>\n\n                {#if form?.error}\n                    <p class=\"text-red-500 mt-4\">{form.error}</p>\n                {/if}\n            </section>\n        </div>\n    {:else}\n        <div class=\"flex gap-4 text-2xl\">\n            <a href=\"/signin\" class=\"rounded-lg border px-4 py-2\">Signin</a>\n            <a href=\"/signup\" class=\"rounded-lg border px-4 py-2\">Signup</a>\n        </div>\n    {/if}\n</main>\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Plugin Configuration in ZModel\nDESCRIPTION: Configuration for the OpenAPI plugin to generate API documentation, including security schemes and endpoint specifications.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/rest-api-on-vercel/index.md#2025-04-10_snippet_14\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin openapi {\n    provider = '@zenstackhq/openapi'\n    prefix = '/api'\n    flavor = 'rest'\n    title = 'Pet Store API'\n    specVersion = '3.0.0'\n    version = '0.1.0'\n    description = 'My awesome pet store API'\n    output = 'petstore-api.json'\n    securitySchemes = { \n        myBearer: { type: 'http', scheme: 'bearer', bearerFormat: 'JWT' }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Access Policies for Post Model Using ZenStack in TypeScript\nDESCRIPTION: This snippet demonstrates how to define access policies for a Post model using ZenStack, which builds on top of Prisma to provide enhanced access control capabilities.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/drizzle-prisma/index.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nmodel Post {\n    id Int @id @default(autoincrement())\n    title String\n    published Boolean @default(false)\n    author User? @relation(fields: [authorId], references: [id], onDelete: Cascade)\n    authorId Int?\n    space Space? @relation(fields: [spaceId], references: [id], onDelete: Cascade)\n    spaceId Int?\n  \n    @@allow('all', \n        auth() == author // author has full access\n        || space.owner == auth() // space owner has full access\n        || space.members?[user == auth() && role == ADMIN]) // space admin has full access\n  \n    // published posts can be read by anyone in the space\n    @@allow('read', published && space.members?[user == auth()])\n}\n```\n\n----------------------------------------\n\nTITLE: RESTful API Resource Creation Examples\nDESCRIPTION: Examples of creating resources with and without relationships\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_12\n\nLANGUAGE: json\nCODE:\n```\nPOST /user\n{\n    \"data\": {\n        \"type\": \"user\",\n        \"attributes\": {\n            \"name\": \"Emily\",\n            \"email\": \"emily@zenstack.dev\"\n        }\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /user\n{\n    \"data\": {\n        \"type\": \"user\",\n        \"attributes\": {\n            \"name\": \"Emily\",\n            \"email\": \"emily@zenstack.dev\"\n        },\n        \"relationships\": {\n            \"posts\": {\n                \"data\": [{ \"type\": \"post\", \"id\": 1 }]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Hook Form with Zod Resolver\nDESCRIPTION: Sets up React Hook Form with the zodResolver and the ZenStack-generated Zod schema to enable validation based on the ZModel rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/form-validation/index.md#2025-04-10_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst {\n    register,\n    handleSubmit,\n    formState: { errors },\n} = useForm<Input>({\n    defaultValues: { beverage: '' },\n    resolver: zodResolver(SignupCreateSchema), // <-- add this\n});\n```\n\n----------------------------------------\n\nTITLE: Using Search Function in ZenStack Models\nDESCRIPTION: Demonstrates using the search() function for full-text search in policy rules. This requires enabling Prisma's fullTextSearch preview feature.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_6\n\nLANGUAGE: zmodel\nCODE:\n```\n@@allow('read', contains(title, 'zenstack is awesome'))\n```\n\n----------------------------------------\n\nTITLE: RESTful API Resource Creation Examples\nDESCRIPTION: Examples of creating resources with and without relationships\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_12\n\nLANGUAGE: json\nCODE:\n```\nPOST /user\n{\n    \"data\": {\n        \"type\": \"user\",\n        \"attributes\": {\n            \"name\": \"Emily\",\n            \"email\": \"emily@zenstack.dev\"\n        }\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nPOST /user\n{\n    \"data\": {\n        \"type\": \"user\",\n        \"attributes\": {\n            \"name\": \"Emily\",\n            \"email\": \"emily@zenstack.dev\"\n        },\n        \"relationships\": {\n            \"posts\": {\n                \"data\": [{ \"type\": \"post\", \"id\": 1 }]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @zenstackhq/trpc Plugin\nDESCRIPTION: Command to install the @zenstackhq/trpc plugin as a development dependency.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/trpc.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @zenstackhq/trpc\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimistic Update for Todo Modification with ZenStack\nDESCRIPTION: Code snippet showing how to enable automatic optimistic updates for Todo update and delete operations. The configuration enables both auto-invalidation and optimistic updates for better user experience.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/5-optimistic-update.md#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst update = useUpdateTodo(undefined, true, true); // optimistic update\nconst del = useDeleteTodo(undefined, true, true); // optimistic update\n```\n\n----------------------------------------\n\nTITLE: Access Policies for Polymorphic Models\nDESCRIPTION: Demonstrates how to implement access policies for polymorphic models with inheritance.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/polymorphism.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  contents Content[]\n\n  @@allow('create,read', true)\n  @@allow('all', auth() == this)\n}\n\nmodel Content {\n  id Int @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n  ownerId Int\n  published Boolean @default(false)\n  contentType String\n\n  @@delegate(contentType)\n\n  @@allow('read', published)\n  @@allow('all', auth() == owner)\n}\n\nmodel Post extends Content {\n  title String\n}\n\nmodel Video extends Content {\n  name String\n  duration Int\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Enhanced PrismaClient Helper for Current User in TypeScript\nDESCRIPTION: A helper function that retrieves the current user's information from Clerk authentication and creates an enhanced PrismaClient with proper user context for access control enforcement. This allows database queries to automatically filter results based on user permissions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/clerk-multitenancy/index.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"@clerk/nextjs/server\";\nimport { Role } from \"@prisma/client\";\nimport { enhance } from \"@zenstackhq/runtime\";\n\nexport async function getUserDb() {\n  // get the current user's information from Clerk\n  const { userId, orgId, orgRole } = await auth();\n\n  // create an enhanced Prisma Client with proper user context\n  const user = userId\n    ? {\n        userId,\n        currentOrgId: orgId,\n        currentOrgRole: orgRole\n      }\n    : undefined; // anonymous\n  return enhance(prisma, { user });\n}\n```\n\n----------------------------------------\n\nTITLE: Using HasSome Function with Array Fields in ZenStack Models\nDESCRIPTION: Shows how to use the hasSome() function to check if an array field contains any value from a provided array. This allows for matching against a set of possible values.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_11\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id Int @id\n    tags String[]\n    @@allow('read', hasSome(tags, ['zenstack', 'prisma']))\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Validation Error Output for Typed JSON Fields\nDESCRIPTION: Shows the error message that appears when a JSON field value fails type validation at runtime. The error clearly indicates the field path and the exact validation issue.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/typing-json.md#2025-04-10_snippet_5\n\nLANGUAGE: plain\nCODE:\n```\nError calling enhanced Prisma method `user.create`: denied by policy: user \nentities failed 'create' check, input failed validation: Validation error: \nExpected number, received string at \"profile.age\"\n```\n\n----------------------------------------\n\nTITLE: Query Result Demonstrating Policy Enforcement\nDESCRIPTION: The result of the previous query showing that only the user with an email starting with 'joey' is returned due to the defined access policy.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.1-model-level.md#2025-04-10_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n[\n  {\n    id: 1,\n    createdAt: 2023-11-07T21:37:22.506Z,\n    updatedAt: 2023-11-07T21:37:22.506Z,\n    email: 'joey@zenstack.dev',\n    name: 'Joey'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Query Result Demonstrating Policy Enforcement\nDESCRIPTION: The result of the previous query showing that only the user with an email starting with 'joey' is returned due to the defined access policy.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.1-model-level.md#2025-04-10_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n[\n  {\n    id: 1,\n    createdAt: 2023-11-07T21:37:22.506Z,\n    updatedAt: 2023-11-07T21:37:22.506Z,\n    email: 'joey@zenstack.dev',\n    name: 'Joey'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Context Type in ZModel Schema\nDESCRIPTION: Creates an Auth type in ZModel to define the structure of the authentication context, including user ID, current organization ID, and user's role. This type is used by the access control policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/clerk-multitenancy/index.mdx#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\n// The shape of `auth()`\ntype Auth {\n  // Current user's ID\n  userId         String  @id\n\n  // User's current organization ID\n  currentOrgId   String?\n\n  // User's role in the current organization\n  currentOrgRole Role?\n\n  @@auth\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Client Logging\nDESCRIPTION: This snippet demonstrates how to configure Prisma Client to show info-level logs, which is necessary to see the query logs produced by ZenStack.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/7-debugging.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient({ log: ['info'] });\n```\n\n----------------------------------------\n\nTITLE: Defining Booking and InvitedUser Data Models with ZenStack\nDESCRIPTION: ZenStack schema defining Booking and InvitedUser models with access policies. Bookings can be created by anyone, but full CRUD is limited to owners, while invited users have read access.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/cal-com-clone.mdx#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\n// Booking entity\nmodel Booking {\n  id           String   @id() @default(cuid())\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n  email        String\n  notes        String\n  startAt      DateTime\n  duration     Int\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId       String\n  invitedUsers InvitedUser[]\n\n  // allow everyone to create a booking, including anonymous users\n  @@allow('create', true)\n\n  // owner is allowed for full CRUD\n  @@allow('all', auth() == user)\n\n  // invited users can read the booking\n  @@allow('read', invitedUsers?[user == auth()])\n}\n\n// Entity representing a User invited to a Booking\nmodel InvitedUser {\n  id          String @id() @default(cuid())\n  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      String\n  booking     Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)\n  bookingId   String\n  @@unique([bookingId, userId])\n\n  // allow everyone to create an invitation, disallow create for self\n  @@allow('create', auth() != null && user != auth())\n\n  // booking's owner is allowed for full CRUD\n  @@allow('all', booking.user == auth())\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Model-Level Policy with Field-Level Policy in ZenStack\nDESCRIPTION: Shows how to override a model-level policy with a field-level policy by passing a third argument 'true' to the @allow attribute. This allows EDITOR users to update the 'published' field even if the model-level policy denies updates for published posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.7-field-level.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    ...\n    published Boolean @allow('update', auth().role == EDITOR, true)\n\n    @@allow('update', !published)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Permission Checker in ZModel Configuration\nDESCRIPTION: Configuration for enabling the preview permission checker feature in ZenStack by adding the generatePermissionChecker flag to the @core/enhancer plugin in ZModel.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/check-permission.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin enhancer {\n  provider = '@core/enhancer'\n  generatePermissionChecker = true\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Deny Access Policy in ZModel\nDESCRIPTION: Defines an access policy that denies a set of operations when the given condition is true. Parameters include operation (comma-separated list of operations or 'all') and condition (boolean expression).\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_26\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @@deny(_ operation: String, _ condition: Boolean)\n```\n\n----------------------------------------\n\nTITLE: Visualizing RBAC ERD with Mermaid\nDESCRIPTION: Represents the Entity-Relationship Diagram (ERD) for the Role-Based Access Control (RBAC) pattern using Mermaid syntax. It shows the relationships between User, Role, Permission, and Resource entities.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/model-authz/index.md#2025-04-10_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    User {\n        int id\n        string name\n    }\n    Role {\n        int id\n        string name\n    }\n    Permission {\n        int id\n        string name\n    }\n    Resource {\n        int id\n        string name\n    }\n    User ||..o{ Role : has\n    Role ||--o{ Permission : has\n```\n\n----------------------------------------\n\nTITLE: Creating SvelteKit Server Hooks with ZenStack Integration\nDESCRIPTION: Example of creating a SvelteKit server hooks file that mounts ZenStack API endpoints. This demonstrates how to enhance the Prisma client with user context for enforcing access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/sveltekit.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitHandler } from '@zenstackhq/server/sveltekit';\nimport { enhance } from '@zenstackhq/runtime';\nimport { getSessionUser } from '$lib/auth.ts';\n\n// create an enhanced Prisma client with user context\nfunction getPrisma(event: RequestEvent) {\n    // getSessionUser extracts the current session user from the request, its\n    // implementation depends on your auth solution\n    return enhance({ user: getSessionUser(event) });\n}\n\n// create the hooks handler with the `getPrisma` hook\nexport const handle = SvelteKitHandler({ prefix: '/api/model', getPrisma });\n```\n\n----------------------------------------\n\nTITLE: Defining Base Entity Model with Access Policies in ZenStack\nDESCRIPTION: Abstract model definition with access policies for organization-based entities, including CRUD operations with appropriate permissions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-backend/index.md#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nabstract model organizationBaseEntity {\n    id String @id @default(uuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    isDeleted Boolean @default(false) @omit\n    isPublic Boolean @default(false)\n    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n    ownerId String\n    org Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)\n    orgId String\n    groups Group[]\n\n    // when create, owner must be set to current user, and user must be in the organization\n    @@allow('create', owner == auth() && org.members?[id == auth().id])\n    // only the owner can update it and is not allowed to change the owner\n    @@allow('update', owner == auth() && org.members?[id == auth().id] && future().owner == owner)\n    // allow owner to read\n    @@allow('read', owner == auth())\n    // allow shared group members to read it\n    @@allow('read', groups?[users?[id == auth().id]])\n    // allow organization to access if public\n    @@allow('read', isPublic && org.members?[id == auth().id])\n    // can not be read if deleted\n    @@deny('all', isDeleted == true)\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Commands to Revoke Supabase Anonymous Access Privileges\nDESCRIPTION: SQL commands to revoke current and default privileges from the anon role in Supabase, preventing unauthenticated access to tables, sequences, and functions in the public schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/supabase-security.md#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- Revoke current privileges\nREVOKE SELECT ON ALL TABLES IN SCHEMA public FROM anon;\nREVOKE USAGE ON ALL SEQUENCES IN SCHEMA public FROM anon;\nREVOKE EXECUTE ON ALL FUNCTIONS IN SCHEMA public FROM anon;\n\n-- Revoke default privileges for future objects\nALTER DEFAULT PRIVILEGES IN SCHEMA public REVOKE ALL ON TABLES FROM anon;\nALTER DEFAULT PRIVILEGES IN SCHEMA public REVOKE ALL ON FUNCTIONS FROM anon;\nALTER DEFAULT PRIVILEGES IN SCHEMA public REVOKE ALL ON SEQUENCES FROM anon;\n```\n\n----------------------------------------\n\nTITLE: Defining Base Model in Separate File (base.zmodel)\nDESCRIPTION: Example of creating a separate file for the abstract base model. This file defines common fields and access rules that can be imported by other schema files.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/multiple-schema.md#2025-04-10_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nabstract model Base {\n    id Int @id @default(autoincrement())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt()\n    published Boolean @default(true)\n\n    // author has full access\n    @@allow('all', auth() != null && published)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TodoComponent with Update and Delete Functionality in TSX\nDESCRIPTION: A React component for displaying and managing a single Todo item with toggle completion and delete functionality. The component accepts a Todo object and an optimistic flag to display a loading indicator during optimistic updates.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/5-optimistic-update.md#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Todo } from \"@prisma/client\";\nimport { useDeleteTodo, useUpdateTodo } from \"~/lib/hooks\";\n\ntype Props = {\n  value: Todo;\n  optimistic?: boolean;\n};\n\nexport default function TodoComponent({ value, optimistic }: Props) {\n  const update = useUpdateTodo();\n  const del = useDeleteTodo();\n\n  function onDelete() {\n    del.mutate({ where: { id: value.id } });\n  }\n\n  function onToggleCompleted(completed: boolean) {\n    if (completed === !!value.completedAt) {\n      return;\n    }\n    update.mutate({\n      where: { id: value.id },\n      data: { completedAt: completed ? new Date() : null },\n    });\n  }\n\n  return (\n    <div className=\"flex w-96 flex-col items-center rounded-lg border px-8 py-4\">\n      <div className=\"flex w-full justify-between\">\n        <h3\n          className={`flex items-center text-xl\n                        ${\n                          value.completedAt\n                            ? \"italic text-gray-400 line-through\"\n                            : \"text-gray-700\"\n                        }\n                    }`}\n        >\n          {value.title}\n          {optimistic && (\n            <span className=\"loading loading-spinner loading-sm ml-1\"></span>\n          )}\n        </h3>\n        <div className=\"flex\">\n          <input\n            type=\"checkbox\"\n            className=\"checkbox mr-2\"\n            checked={!!value.completedAt}\n            onChange={(e) => onToggleCompleted(e.currentTarget.checked)}\n          />\n          <button className=\"btn btn-ghost btn-xs\" onClick={onDelete}>\n            Delete\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: WithOmitOptions Type Definition in TypeScript\nDESCRIPTION: Defines the options interface for withOmit enhancer, specifying loadPath for CLI-generated code and optional modelMeta for custom model metadata location.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/runtime-api.md#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype WithOmitOptions = {\n    loadPath?: string;\n    modelMeta?: ModelMeta;\n};\n```\n\n----------------------------------------\n\nTITLE: Signing Up a User with cURL Command\nDESCRIPTION: Example cURL command to create a new user account (sign up) by sending a POST request to the user creation endpoint, along with the expected JSON response showing the created user without the password field.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST localhost:3000/api/user/create \\\n    -H 'Content-Type: application/json' \\\n    -d '{ \"data\": { \"email\": \"tom@pet.inc\", \"password\": \"abc123\" } }'\n```\n\n----------------------------------------\n\nTITLE: Defining Deny Access Policy in ZModel\nDESCRIPTION: Defines an access policy that denies a set of operations when the given condition is true. Parameters include operation (comma-separated list of operations or 'all') and condition (boolean expression).\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_26\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @@deny(_ operation: String, _ condition: Boolean)\n```\n\n----------------------------------------\n\nTITLE: Data Migration Script Using the Encrypter Class\nDESCRIPTION: Demonstrates how to encrypt existing data using the Encrypter class from the @zenstackhq/runtime package, useful for migrating plain data to encrypted form asynchronously.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/field-encryption.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Encrypter } from '@zenstackhq/runtime/encryption';\n\nasync function main() {\n  const encrypter = new Encrypter(encryptionKey);\n\n  let row = await getNextRow();\n  while (row) {\n    row.someSecret = await encrypter.encrypt(row.someSecret);\n    await saveRow(row);\n    row = await getNextRow();\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: User-Profile Relation Example\nDESCRIPTION: Demonstrates the implementation of referential actions in a one-to-one relationship between User and Profile models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_63\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id\n    profile Profile?\n}\n\nmodel Profile {\n    id String @id\n    user @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)\n    userId String @unique\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Route with JWT Authentication\nDESCRIPTION: Express.js route implementation for user login with JWT token generation\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/rest-api-on-vercel/index.md#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport { compareSync } from 'bcryptjs';\n\n// load .env environment variables\ndotenv.config();\n\napp.post('/api/login', async (req, res) => {\n    const { email, password } = req.body;\n    const user = await prisma.user.findFirst({\n        where: { email },\n    });\n    if (!user || !compareSync(password, user.password)) {\n        res.status(401).json({ error: 'Invalid credentials' });\n    } else {\n        // sign a JWT token and return it in the response\n        const token = jwt.sign({ sub: user.id }, process.env.JWT_SECRET!);\n        res.json({ id: user.id, email: user.email, token });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Reading a Concrete Entity with Enhanced PrismaClient in TypeScript\nDESCRIPTION: Shows how reading a concrete entity is transformed to merge fields from both the base and concrete models in the physical schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/polymorphism/index.md#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst video = await db.video.findFirst();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { asset, ...video } = await prisma.video.findFirst({ \n  include: { asset: true } \n});\n\n// merge fields of base and concrete models\nconst video = { ...asset, ...video };\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Control Rules for List Model\nDESCRIPTION: Defines access control rules for the List model using ZenStack's policy attributes, implementing tenant segregation, role-based access, and ownership rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/stackauth-multitenancy/index.mdx#2025-04-10_snippet_6\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel List {\n  ...\n\n  // deny anonymous access\n  @@deny('all', auth() == null)\n\n  // tenant segregation: deny access if the user's current org doesn't match\n  @@deny('all', auth().currentOrgId != orgId)\n\n  // owner/admin has full access\n  @@allow('all', auth().userId == ownerId || auth().currentOrgRole == 'org:admin')\n\n  // can be read by org members if not private\n  @@allow('read', !private)\n\n  // when create, owner must be set to current user\n  @@allow('create', ownerId == auth().userId)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated TanStack Query Hooks in React\nDESCRIPTION: Shows how to use the generated TanStack Query hooks to fetch and display todos, and create a new todo in a React component.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-tanstack/index.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// get a published todos with their owners, and bind the result to UI\nconst Todos = () => {\n  // `todos` is typed as `(Todo & { owner: User })[]`\n  const { data: todos } = useFindManyTodo({\n    where: { published: true },\n    include: { owner: true }\n  });\n  \n  return (<ul>\n    { todos.map((todo) => (\n  \t    <li key={todo.id}>{todo.title} by {todo.owner.name}</li> \n  \t  )) }\n  </ul>);\n}\n\n// create a todo\nconst { mutate: create } = useCreateTodo();\nfunction onCreate() {\n  create({ \n    data: { \n      title: 'Get things done',\n      owner: { connect: { id: userId } } \n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Admin Role Support with ZenStack Access Policies\nDESCRIPTION: Implementing admin role capabilities by adding an enum type, extending the SpaceUser model, and updating access policies in SpaceBase. This shows how ZenStack allows for system-wide permission changes with minimal modifications.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/technical-debt/index.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\n/*\n * Enum for user's role in a space\n */\nenum SpaceUserRole {\n    USER\n    ADMIN\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js App Router Providers for Tanstack Query Hooks\nDESCRIPTION: Example of setting up context providers for Next.js app router, ensuring they are wrapped in a client component for compatibility with React Server Components.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { Provider as ZenStackHooksProvider } from \"@/hooks/generated\";\nimport type { ReactNode } from 'react';\n\nconst queryClient = new QueryClient();\n\nexport default function Providers({ children }: { children: ReactNode }) {\n    return (\n        <QueryClientProvider client={queryClient}>\n            <ZenStackHooksProvider value={{ endpoint: '/api/model' }}>\n                {children}\n            </ZenStackHooksProvider>\n        </QueryClientProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Generated Zod Schemas\nDESCRIPTION: Example of how to import and use the generated Zod schemas to validate data in a TypeScript application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/zod.md#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PostCreateSchema } from '@zenstackhq/runtime/zod/models';\n\nPostCreateSchema.parse(data);\n```\n\n----------------------------------------\n\nTITLE: Defining Model with Custom Attributes in ZModel\nDESCRIPTION: Demonstrates a model definition in ZModel with custom attributes for email validation, password hashing, and access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/1-zmodel.md#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id @default(autoincrement())\n\n    // during create and update, ZenStack validates the field is a valid email address\n    email String @unique @email\n\n    // the field is automatically hashed upon saving, and omitted from query results\n    password String @omit @password\n\n    // access policy: open to sign up\n    @@allow('create', true)\n\n    // access policy: the user has full access to self\n    @@allow('all', auth() == this)\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Arbitrary Text to Prisma Schema in ZModel\nDESCRIPTION: A utility attribute for passing arbitrary text to the generated Prisma schema. Useful for handling discrepancies between Prisma schema and ZModel.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_28\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @@prisma.passthrough(_ text: String)\n```\n\n----------------------------------------\n\nTITLE: Verifying Authorization in warrant.dev\nDESCRIPTION: JSON request to verify if a specific user has viewing access to article 1. This is used to check authorization at runtime based on previously defined warrants.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/how-to-authz/index.md#2025-04-10_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"warrants\": [\n    {\n      \"objectType\": \"article\",\n      \"objectId\": \"1\",\n      \"relation\": \"viewer\",\n      \"subject\": {\n        \"objectType\": \"user\",\n        \"objectId\": \"d6ed6474-784e-407e-a1ea-42a91d4c52b9\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using enhance function with Prisma client in TypeScript\nDESCRIPTION: The enhance function is a convenient wrapper that includes all essential ZenStack enhancements (access policies, field validation, field omission, and password hashing) in one call. It's equivalent to calling withOmit(withPassword(withPolicy(prisma, options))).\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/runtime-api.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwithOmit(withPassword(withPolicy(prisma, options)));\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Related Posts in Prisma\nDESCRIPTION: Example Prisma query that demonstrates the limitation of the soft delete middleware when dealing with related entities and inclusion.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/soft-delete.mdx#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst user = await prisma.user.findMany({\n    where: {\n        id: 1,\n    },\n    include: {\n        posts: true,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating User Model in ZModel\nDESCRIPTION: ZModel schema update for the User model, renaming the relation from 'notes' to 'posts'.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/remix-run.mdx#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id String @id @default(cuid())\n  email String @unique\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  password Password?\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Using the contains() Function in ZenStack Policy Rules\nDESCRIPTION: Demonstrates using the contains() function to check if a string field contains a specific value. This example checks if the post title contains the word 'zenstack'.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id Int @id\n    title String\n    @@allow('read', contains(title, 'zenstack'))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding User-Based Access Control Policies\nDESCRIPTION: Example showing how to add user-based access control policies to models, allowing owners to have full access to their data.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_9\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  ...\n\n  // everyone can sign up\n  @@allow('create', true)\n\n  // full access by oneself\n  @@allow('all', auth() == this)\n}\n\nmodel List {\n  ...\n\n  // owner has full access\n  @@allow('all', auth() == owner)\n}\n\nmodel Todo {\n  ...\n\n  // owner and list owner has full access\n  @@allow('all', auth() == owner || auth() == list.owner)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Server Actions in Next.js Configuration\nDESCRIPTION: Next.js configuration to enable the experimental Server Actions feature.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/next-rsc-blog/index.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n  experimental: {\n    serverActions: true\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: New Post Page Implementation in Remix\nDESCRIPTION: React component for creating a new post with form validation. Uses Remix's Form component and action function to handle form submission, validating title and body fields before creating a new post.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/remix-run.mdx#2025-04-10_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ActionArgs } from '@remix-run/node';\nimport { json, redirect } from '@remix-run/node';\nimport { Form, useActionData } from '@remix-run/react';\nimport * as React from 'react';\nimport { createPost } from '~/models/post.server';\n\nimport { requireUserId } from '~/session.server';\n\nexport async function action({ request }: ActionArgs) {\n    const userId = await requireUserId(request);\n\n    const formData = await request.formData();\n    const title = formData.get('title');\n    const body = formData.get('body');\n\n    if (typeof title !== 'string' || title.length === 0) {\n        return json({ errors: { title: 'Title is required', body: null } }, { status: 400 });\n    }\n\n    if (typeof body !== 'string' || body.length === 0) {\n        return json({ errors: { title: null, body: 'Body is required' } }, { status: 400 });\n    }\n\n    const post = await createPost({ title, body, userId });\n\n    return redirect(`/posts/${post.id}`);\n}\n\nexport default function NewPostPage() {\n    const actionData = useActionData<typeof action>();\n    const titleRef = React.useRef<HTMLInputElement>(null);\n    const bodyRef = React.useRef<HTMLTextAreaElement>(null);\n\n    React.useEffect(() => {\n        if (actionData?.errors?.title) {\n            titleRef.current?.focus();\n        } else if (actionData?.errors?.body) {\n            bodyRef.current?.focus();\n        }\n    }, [actionData]);\n\n    return (\n        <Form\n            method=\"post\"\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                gap: 8,\n                width: '100%',\n            }}\n        >\n            <div>\n                <label className=\"flex w-full flex-col gap-1\">\n                    <span>Title: </span>\n                    <input\n                        ref={titleRef}\n                        name=\"title\"\n                        className=\"flex-1 rounded-md border-2 border-blue-500 px-3 text-lg leading-loose\"\n                        aria-invalid={actionData?.errors?.title ? true : undefined}\n                        aria-errormessage={actionData?.errors?.title ? 'title-error' : undefined}\n                    />\n                </label>\n                {actionData?.errors?.title && (\n                    <div className=\"pt-1 text-red-700\" id=\"title-error\">\n                        {actionData.errors.title}\n                    </div>\n                )}\n            </div>\n\n            <div>\n                <label className=\"flex w-full flex-col gap-1\">\n                    <span>Body: </span>\n                    <textarea\n                        ref={bodyRef}\n                        name=\"body\"\n                        rows={8}\n                        className=\"w-full flex-1 rounded-md border-2 border-blue-500 py-2 px-3 text-lg leading-6\"\n                        aria-invalid={actionData?.errors?.body ? true : undefined}\n                        aria-errormessage={actionData?.errors?.body ? 'body-error' : undefined}\n                    />\n                </label>\n                {actionData?.errors?.body && (\n                    <div className=\"pt-1 text-red-700\" id=\"body-error\">\n                        {actionData.errors.body}\n                    </div>\n                )}\n            </div>\n\n            <div className=\"text-right\">\n                <button\n                    type=\"submit\"\n                    className=\"rounded bg-blue-500 py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n                >\n                    Save\n                </button>\n            </div>\n        </Form>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating API to Use ZenStack-enhanced Prisma Client\nDESCRIPTION: Changes the API to use the ZenStack-enhanced Prisma client, which applies access policies automatically.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/backend.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(`/post`, async (req, res) => {\n    const post = await getPrisma(req).post.findMany({\n        include: { author: true },\n    });\n    res.json(post);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Access Policies with ZenStack\nDESCRIPTION: ZenStack schema definition that models access control for articles by extending Prisma ORM, using declarative access rules based on user and group relationships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/how-to-authz/index.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  ...\n  groups Group[]\n}\n\nmodel Group {\n  ...\n  members User[]\n}\n\nmodel AccessControlList {\n  user User?\n  userId Int?\n  group Group?\n  groupId Int?\n  article Article?\n  articleId Int?\n}\n\nmodel Article {\n  accessList AccessControlList[]\n\n  @@allow('read', \n    accessList?[\n      // user access\n      user == auth() \n      // group access\n      || accessList?[user.groups?[members?[id == auth().id]]]]\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Response with JSON-serializable data\nDESCRIPTION: The response from querying only JSON-serializable fields. Since the result data is fully JSON-serializable, the response has no extra serialization metadata.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/3-serialization.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"id\":1,\n        \"title\":\"Grocery\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Enhanced PrismaClient with ZenStack\nDESCRIPTION: TypeScript code to create an enhanced PrismaClient with ZenStack, incorporating user context for access control.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/refine-dev-backend/index.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst session = await auth();\nconst user = session?.user?.id ? { id: session.user.id } : undefined;\nconst db = enhance(prisma, { user });\n```\n\n----------------------------------------\n\nTITLE: Extending Basic Model for a New Comment Feature in ZModel\nDESCRIPTION: An example of how to create a new Comment model that inherits from the Basic abstract model, automatically gaining all the tenant isolation access policies without duplication.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/multi-tenant/index.md#2025-04-10_snippet_6\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Comment extends Basic{\n    content String\n    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)\n    postId String\n}\n```\n\n----------------------------------------\n\nTITLE: ZModel Schema Definition for Blog Application\nDESCRIPTION: Data model schema defining User, Profile, Post, and Comment entities with their relationships and field definitions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id @default(autoincrement())\n    email String\n    posts Post[]\n}\n\nmodel Profile {\n    id Int @id @default(autoincrement())\n    gender String\n    user User @relation(fields: [userId], references: [id])\n    userId Int @unique\n}\n\nmodel Post {\n    id Int @id @default(autoincrement())\n    title String\n    published Boolean @default(false)\n    viewCount Int @default(0)\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int\n    comments Comment[]\n}\n\nmodel Comment {\n    id Int @id @default(autoincrement())\n    content String\n    post Post @relation(fields: [postId], references: [id])\n    postId Int\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a List with RPC API\nDESCRIPTION: Command for creating a new List item using the ZenStack RPC API with relationships to existing owner and space records.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST \"http://localhost:3000/api/rpc/list/create\" \\\n    -d '{\"data\":{\"title\":\"Jobs to be done\",\"owner\":{\"connect\":{\"id\":2}},\"space\":{\"connect\":{\"id\":1}}}}' \\\n    -H 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Model Authorization Rules in ZenStack\nDESCRIPTION: This snippet demonstrates complex authorization rules for the Post model in ZenStack. It defines different access levels based on user roles (Admin, Author, Editor) and post status (Draft, Published), with specific create, read, update, and delete permissions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/react-admin/index.md#2025-04-10_snippet_9\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n  ...\n\n  // admins have full access to all posts\n  @@allow('all', auth().role == 'Admin')\n\n  // authors can create new posts for themselves with \"Draft\" status\n  @@allow('create', auth() == user && status == 'Draft')\n\n  // post owner can read their own posts\n  @@allow('read', auth() == user)\n\n  // non-draft posts can be read by all logged in users\n  @@allow('read', auth() != null && status != 'Draft')\n\n  // update rules for \"Author\"\n  @@allow('update',\n      auth().role == 'Author' // user is an author\n      && auth() == user // user is the post owner\n      && status != 'Published' // published posts can't be updated\n      && future().status != 'Published' // can't change status to \"Published\"\n  )\n\n  // update rules for \"Editor\"\n  @@allow('update', auth().role == 'Editor' && status != 'Draft')\n\n  // owner or admin can delete a post if it's not published\n  @@allow('delete', auth() == user && status != 'Published')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Encryption with PrismaClient Enhancement\nDESCRIPTION: Configures ZenStack's enhanced PrismaClient with custom encryption by providing custom encrypt and decrypt functions instead of using the default encryption.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/field-encryption.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function myEncrypt(model: string, field: FieldInfo, plain: string) {\n  ...\n}\n\nasync function myDecrypt(model: string, field: FieldInfo, cipher: string) {\n  ...\n}\n\nconst db = enhance(prisma, { user }, {\n  encryption: {\n    encrypt: myEncrypt,\n    decrypt: myDecrypt\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Physical Database Schema for Polymorphic Relationships in ZModel\nDESCRIPTION: Shows the physical database schema representation of polymorphic relationships, establishing one-to-one relationships between base and concrete models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/polymorphism/index.md#2025-04-10_snippet_8\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Asset {\n  // Asset fields\n  ...\n\n  // relationships to concrete models\n  video Video?\n  image Image?\n  ...\n}\n\nmodel Video {\n  id Int @id()\n  duration Int\n  url String\n\n  // one-to-one relationship to Asset\n  asset Asset @relation(fields: [assetId], references: [id])\n  assetId Int @unique\n}\n```\n\n----------------------------------------\n\nTITLE: Using Attributes in ZModel\nDESCRIPTION: Illustrates the syntax for field and model attributes in ZModel, including how to pass arguments to attributes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_6\n\nLANGUAGE: zmodel\nCODE:\n```\nid String @[ATTR_NAME](ARGS)?\n```\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Model {\n    @@[ATTR_NAME](ARGS)?\n}\n```\n\nLANGUAGE: zmodel\nCODE:\n```\npublished Boolean @default(value: false)\n```\n\nLANGUAGE: zmodel\nCODE:\n```\npublished Boolean @default(false)\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Schema and Updating Database\nDESCRIPTION: Command to generate the Prisma schema from ZenStack models and push the schema changes to the database, applying all the model and relationship definitions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/todo-saas/index.md#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nnpx zenstack generate && npx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Defining SpaceUser Relation Model\nDESCRIPTION: Schema definition for the SpaceUser model representing many-to-many relationship between Space and User with role enumeration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmodel SpaceUser {\n    id String @id @default(uuid())\n    space Space @relation(fields:[spaceId], references: [id], onDelete: Cascade)\n    spaceId String\n    user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n    userId String\n    role SpaceUserRole\n}\n\nenum SpaceUserRole {\n    USER\n    ADMIN\n}\n```\n\n----------------------------------------\n\nTITLE: ZModel Schema Definition for Blog Application\nDESCRIPTION: Data model schema defining User, Profile, Post, and Comment entities with their relationships and field definitions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id @default(autoincrement())\n    email String\n    posts Post[]\n}\n\nmodel Profile {\n    id Int @id @default(autoincrement())\n    gender String\n    user User @relation(fields: [userId], references: [id])\n    userId Int @unique\n}\n\nmodel Post {\n    id Int @id @default(autoincrement())\n    title String\n    published Boolean @default(false)\n    viewCount Int @default(0)\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int\n    comments Comment[]\n}\n\nmodel Comment {\n    id Int @id @default(autoincrement())\n    content String\n    post Post @relation(fields: [postId], references: [id])\n    postId Int\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tenant Middleware for Prisma in Single Database Approach\nDESCRIPTION: This code snippet shows how to create a simplified middleware for Prisma to handle tenant isolation in a single database approach. It adds a tenantId filter to all database queries automatically.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/multi-tenant/index.md#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst tenantMiddleware = (model) => async (params, next) => {\n    const tenantId = getTenantId(params);\n\n    params.args.where = {\n        ...params.args.where,\n        tenantId,\n    };\n\n    return next(params);\n};\n```\n\n----------------------------------------\n\nTITLE: Field Definition Syntax in ZModel\nDESCRIPTION: Syntax for defining fields in models and types, showing the basic pattern of field declaration with optional attributes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_36\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Model {\n    [FIELD_NAME] [FIELD_TYPE] (FIELD_ATTRIBUTES)?\n}\n```\n\nLANGUAGE: zmodel\nCODE:\n```\ntype Type {\n    [FIELD_NAME] [FIELD_TYPE] (FIELD_ATTRIBUTES)?\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Format Example\nDESCRIPTION: Example of an error response structure showing a 404 error for an unsupported model type.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"errors\" : [\n      {\n         \"code\" : \"unsupported-model\",\n         \"detail\" : \"Model foo doesn't exist\",\n         \"status\" : 404,\n         \"title\" : \"Unsupported model type\"\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ZModel schema location in package.json\nDESCRIPTION: JSON configuration in api/package.json to specify the locations of schema.zmodel and schema.prisma files.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/redwood.md#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"zenstack\": {\n    \"schema\": \"db/schema.zmodel\",\n    \"prisma\": \"db/schema.prisma\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SWR Query and Mutation Hooks in React Component\nDESCRIPTION: React component demonstrating the usage of generated SWR hooks for querying posts and creating new posts, including data fetching and mutation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/swr.mdx#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Post } from '@prisma/client';\nimport { useFindManyPost, useCreatePost } from '../lib/hooks';\n\n// post list component\nconst Posts = ({ userId }: { userId: string }) => {\n    const { trigger: createPost } = useCreatePost();\n\n    // list all posts that're visible to the current user, together with their authors\n    const { data: posts } = useFindManyPost({\n        include: { author: true },\n        orderBy: { createdAt: 'desc' },\n    });\n\n    function onCreatePost() {\n        createPost({\n            data: {\n                title: 'My awesome post',\n                authorId: userId,\n            },\n        });\n    }\n\n    return (\n        <>\n            <button onClick={onCreatePost}>Create</button>\n            <ul>\n                {posts?.map((post) => (\n                    <li key={post.id}>\n                        {post.title} by {post.author.email}\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating ZenStack Middleware with Express.js\nDESCRIPTION: Updates the Express.js server to include ZenStack middleware for automatic RESTful API generation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nimport { ZenStackMiddleware } from '@zenstackhq/server/express';\nimport express from 'express';\n\nconst app = express();\napp.use(express.json());\n\nconst prisma = new PrismaClient();\napp.use('/api', ZenStackMiddleware({ getPrisma: () => prisma }));\n\napp.listen(3000, () => console.log('🚀 Server ready at: http://localhost:3000'));\n```\n\n----------------------------------------\n\nTITLE: Setting up API Handler with Next.js Pages Router\nDESCRIPTION: Creates a request handler for the Pages Router in older versions of Next.js. Enhances Prisma client with user context to handle CRUD operations while enforcing access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/next.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequestHandler } from '@zenstackhq/server/next';\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport { enhance } from '@zenstackhq/runtime';\nimport { prisma } from '~/lib/db.ts';\nimport { getSessionUser } from '~/lib/auth.ts';\n\n// create an enhanced Prisma client with user context\nfunction getPrisma(req: NextApiRequest, res: NextApiResponse) {\n    // getSessionUser extracts the current session user from the request, its\n    // implementation depends on your auth solution\n    return enhance(prisma, { user: getSessionUser(req, res) });\n}\n\n// create the request handler with the `getPrisma` hook\nexport default NextRequestHandler({ getPrisma });\n```\n\n----------------------------------------\n\nTITLE: Integrating ZenStack Middleware with Express.js\nDESCRIPTION: Updates the Express.js server to include ZenStack middleware for automatic RESTful API generation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nimport { ZenStackMiddleware } from '@zenstackhq/server/express';\nimport express from 'express';\n\nconst app = express();\napp.use(express.json());\n\nconst prisma = new PrismaClient();\napp.use('/api', ZenStackMiddleware({ getPrisma: () => prisma }));\n\napp.listen(3000, () => console.log('🚀 Server ready at: http://localhost:3000'));\n```\n\n----------------------------------------\n\nTITLE: Adding Email Validation to User Model\nDESCRIPTION: Example implementation of email validation for a User model in a project.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/5-data-validation.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    ...\n    email String @unique @email\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Usage for ZenStack Format Command\nDESCRIPTION: Command line usage for the ZenStack format command, showing options to format a ZenStack schema file with the ability to disable Prisma style formatting through the --no-prisma-style flag.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/v2-stories/index.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUsage: zenstack format [options]\n\nFormat a ZenStack schema file.\n\nOptions:\n  --no-prisma-style  do not use prisma style\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack with Custom Settings\nDESCRIPTION: Example of initializing a specific folder with custom package manager (pnpm) and custom Prisma schema location.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/cli.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack init -p pnpm --prisma prisma/my.schema myapp\n```\n\n----------------------------------------\n\nTITLE: Defining data schema and access policies in ZModel\nDESCRIPTION: ZModel code example showing how to define a Post model with access policies in a RedwoodJS project using ZenStack.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/redwood.md#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String\n  body      String\n  comments  Comment[]\n  user      User     @relation(fields: [userId], references: [id])\n  userId    Int\n  createdAt DateTime @default(now())\n  published Boolean @default(true)\n\n  // 🔐 Admin user can do everything to his own posts\n  @@allow('all', auth().roles == 'admin' && auth() == user)\n\n  // 🔐 Posts are visible to everyone if published\n  @@allow('read', published)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Default Encryption with PrismaClient Enhancement\nDESCRIPTION: Configures ZenStack's enhanced PrismaClient with default encryption by providing an encryption key. This enables automatic encryption/decryption when writing/reading data.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/field-encryption.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getEncryptionKey(): Uint8Array {\n    // return a 32-byte key\n}\n\nconst db = enhance(prisma, { user }, {\n  encryption: {\n    encryptionKey: getEncryptionKey()\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating tRPC App Router with Generated CRUD Router\nDESCRIPTION: Example of creating a tRPC app router by combining the generated CRUD router with custom initialization.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/trpc.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouter as createCRUDRouter } from './generated/routers';\nimport { initTRPC } from '@trpc/server';\nimport { type Context } from '../context';\n\nconst t = initTRPC.context<Context>().create();\n\nexport const appRouter = createCRUDRouter(t.router, t.procedure);\nexport type AppRouter = typeof appRouter;\n```\n\n----------------------------------------\n\nTITLE: Clearing To-Many Relationship Example in JSON:API\nDESCRIPTION: An example of how to clear all relationships in a to-many relationship by sending an empty array in the data field.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_16\n\nLANGUAGE: json\nCODE:\n```\nPUT /user/1/relationships/posts\n{\n    \"data\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Source in ZModel\nDESCRIPTION: Shows how to declare a data source for connecting to a database. Includes provider specification and database URL configuration, with an option to use environment variables for sensitive information.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\ndatasource db {\n    provider = \"postgresql\"\n    url = \"postgresql://postgres:abc123@localhost:5432/todo?schema=public\"\n}\n```\n\nLANGUAGE: zmodel\nCODE:\n```\ndatasource db {\n    provider = \"postgresql\"\n    url = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Nested Read Query Hook\nDESCRIPTION: Example of using generated hooks for nested data querying with filtering and sorting.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/2-generate-hooks.md#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst { data } = useFindManyTodo({\n  where: { owner: { id: 1 } },\n  include: { list: true },\n  orderBy: { createdAt: 'desc' }\n});\n```\n\n----------------------------------------\n\nTITLE: Using tRPC Client for RPC Communication\nDESCRIPTION: This code snippet shows how to initialize and use a tRPC client to communicate with the server. It demonstrates querying for users and creating a new user.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/no-api/index.md#2025-04-10_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst trpc = createTRPCClient<AppRouter>({\n  links: [\n    httpBatchLink({\n      url: 'http://localhost:3000',\n    }),\n  ],\n});\n\nconst users = await trpc.user.list.query();\nconsole.log('Users:', users);\n\nconst createdUser = await trpc.user.create.mutate({ name: 'trpc lover' });\nconsole.log('Created user:', createdUser);\n```\n\n----------------------------------------\n\nTITLE: Counting Data with Filtering in React\nDESCRIPTION: Example of using the generated counting hooks to get the count of Todo items matching a specific filter condition.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/2-generate-hooks.md#2025-04-10_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst { data } = useCountTodo({ where: { owner: { id: 1 } } });\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Authentication in SvelteKit\nDESCRIPTION: A server-side handler for the signin form that verifies user credentials against the database, creates a JWT token on successful authentication, and sets it as an HTTP-only cookie. Uses bcrypt for password verification and redirects to the home page after successful login.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/sveltekit.mdx#2025-04-10_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JWT_TOKEN_COOKIE_NAME, createToken } from '$lib/auth';\nimport { prisma } from '$lib/db';\nimport { fail, redirect, type Actions } from '@sveltejs/kit';\nimport bcrypt from 'bcryptjs';\n\nexport const actions = {\n    default: async ({ request, cookies }) => {\n        const data = await request.formData();\n\n        const email = data.get('email');\n        const password = data.get('password');\n\n        if (typeof email !== 'string' || typeof password !== 'string') {\n            return fail(400, { email, password, missing: true });\n        }\n\n        const user = await prisma.user.findFirst({\n            where: { email }\n        });\n        if (!user || !bcrypt.compareSync(password, user.password)) {\n            return fail(401, { email, password, invalid: true });\n        }\n\n        const token = createToken(user);\n        cookies.set(JWT_TOKEN_COOKIE_NAME, token, {\n            httpOnly: true,\n            expires: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n            path: '/'\n        });\n        throw redirect(303, `/`);\n    }\n} satisfies Actions;\n```\n\n----------------------------------------\n\nTITLE: Implementing isEmpty() Function in ZModel\nDESCRIPTION: The isEmpty() function checks if a list field is empty. It's equivalent to Prisma's isEmpty operator for array fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_32\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction isEmpty(field: Any[]): Boolean {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Action for Creating Todo List in TypeScript\nDESCRIPTION: This server action creates a new todo list using the enhanced PrismaClient. It demonstrates how to perform database operations with proper access control in a server-side context.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/stackauth-multitenancy/index.mdx#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n'use server';\n\nimport { revalidatePath } from \"next/cache\";\nimport { getUserDb } from \"~/server/db\";\n\nexport async function createList(title: string) {\n  const db = await getUserDb();\n  await db.list.create({ data: { title } });\n  revalidatePath(\"/\");\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Nested Read Query Hook\nDESCRIPTION: Example of using generated hooks for nested data querying with filtering and sorting.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/2-generate-hooks.md#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst { data } = useFindManyTodo({\n  where: { owner: { id: 1 } },\n  include: { list: true },\n  orderBy: { createdAt: 'desc' }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Security Schemes in ZModel\nDESCRIPTION: Example configuration for setting up security schemes including basic auth, JWT bearer token, and API key in the OpenAPI specification.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/openapi.mdx#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin openapi {\n    provider = '@zenstackhq/openapi'\n    securitySchemes = {\n        basic: { type: 'http', scheme: 'basic' },\n        bearer: { type: 'http', scheme: 'bearer', bearerFormat: 'JWT' },\n        apiKey: { type: 'apiKey', in: 'header', name: 'X-API-KEY' }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a TodoList Page with ZenStack Hooks in Next.js\nDESCRIPTION: A Next.js client component that implements a Todo list management page. It uses ZenStack hooks for data fetching and mutations, allowing users to view, create, update, and delete todos within a specific list.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/5-optimistic-update.md#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { useSession } from \"next-auth/react\";\nimport { useParams } from \"next/navigation\";\nimport { useState } from \"react\";\nimport TodoComponent from \"~/components/TodoComponent\";\nimport { useCreateTodo, useFindManyTodo, useFindUniqueList } from \"~/lib/hooks\";\n\nexport default function TodoList() {\n  const { listId } = useParams<{ listId: string }>();\n  const { data: session } = useSession();\n\n  const { data: list } = useFindUniqueList(\n    {\n      where: { id: listId },\n    },\n    { enabled: !!session?.user },\n  );\n\n  const { mutate: create } = useCreateTodo();\n  const { data: todos } = useFindManyTodo(\n    {\n      where: { listId },\n      orderBy: { createdAt: \"desc\" as const },\n    },\n    { enabled: !!session?.user },\n  );\n\n  const [title, setTitle] = useState(\"\");\n\n  function onCreate() {\n    create({\n      data: {\n        title,\n        owner: { connect: { id: session?.user.id } },\n        list: { connect: { id: listId } },\n      },\n    });\n    setTitle(\"\");\n  }\n\n  if (!session?.user || !list) {\n    return <></>;\n  }\n\n  return (\n    <div>\n      <div className=\"container mx-auto flex w-full flex-col items-center py-12\">\n        <h1 className=\"mb-4 text-2xl font-semibold\">{list.title}</h1>\n        <div className=\"flex space-x-2\">\n          <input\n            type=\"text\"\n            placeholder=\"Type a title and press enter\"\n            className=\"input input-bordered mt-2 w-72 max-w-xs\"\n            value={title}\n            autoFocus\n            onKeyUp={(e) => {\n              if (e.key === \"Enter\") {\n                onCreate();\n              }\n            }}\n            onChange={(e) => {\n              setTitle(e.currentTarget.value);\n            }}\n          />\n        </div>\n        <ul className=\"flex w-auto flex-col space-y-4 py-8\">\n          {todos?.map((todo) => (\n            <TodoComponent\n              key={todo.id}\n              value={todo}\n              optimistic={todo.$optimistic}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Potential Future JSON Field Filtering Improvement\nDESCRIPTION: Shows a potential future enhancement to make JSON field filtering more intuitive with a structure similar to regular field filtering.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/json-typing/index.md#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst images = await db.image.findMany({\n  where: {\n    metadata: { width: { gt: 1024 } }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking List Containment in ZModel\nDESCRIPTION: Checks if a given field (list) contains the search value. Equivalent to Prisma's has operator.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_40\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction has(field: Any[], search: Any): Boolean {}\n```\n\n----------------------------------------\n\nTITLE: Creating ZenStack API Route Handler\nDESCRIPTION: Next.js route handler that uses ZenStack to provide CRUD API endpoints with automatic access policy enforcement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\nimport { NextRequestHandler } from '@zenstackhq/server/next';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '~/server/auth';\nimport { db } from '~/server/db';\n\nasync function getPrisma() {\n  const session = await getServerSession(authOptions);\n  const user = session ? { id: session.user.id } : undefined;\n  return enhance(db, { user });\n}\n\nconst handler = NextRequestHandler({ getPrisma, useAppDir: true });\n\nexport { handler as DELETE, handler as GET, handler as PATCH, handler as POST, handler as PUT };\n```\n\n----------------------------------------\n\nTITLE: Prisma Migration SQL for Column Renaming\nDESCRIPTION: A SQL migration script generated by Prisma when renaming a column. It demonstrates how Prisma handles column renaming by dropping the old column and creating a new one, which can lead to data loss if not handled carefully.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/drizzle-prisma/index.md#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n/*\n Warnings:\n \n - You are about to drop the column `userId` on the `Post` table. All the data in the column will be lost.\n \n */\n\n-- AlterTable\nALTER TABLE\n  \"Post\" DROP COLUMN \"userId\",\nADD\n  COLUMN \"ownerId\" INTEGER;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Method to User Model with Prisma Client Extensions\nDESCRIPTION: Shows how to extend the Prisma Client to add a custom signUp method to the User model. This allows for more intuitive API design by encapsulating user creation logic directly on the model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-client-extensions/index.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst xprisma = prisma.$extends({\n    model: {\n        user: {\n            async signUp(email: string) {\n                return prisma.user.create({ data: { email } });\n            },\n        },\n    },\n});\n\nconst user = await xprisma.user.signUp('john@prisma.io');\n```\n\n----------------------------------------\n\nTITLE: Registering AccessControlProvider with Refine\nDESCRIPTION: Registers the custom AccessControlProvider with the Refine component in the application layout, enabling role-based UI controls across the application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/refine-dev-backend/index.md#2025-04-10_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Refine \n  accessControlProvider={ accessControlProvider }\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Field-Level Deny Attribute Definition in ZModel\nDESCRIPTION: Defines the structure of the @deny attribute for field-level access policy control. Specifies operation types and condition parameters.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_44\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @deny(_ operation: String, _ condition: Boolean)\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Rendering with ZenStack's Union Types\nDESCRIPTION: Example showing how to render different content types with type safety using TypeScript's type narrowing capabilities, enabled by ZenStack's union type implementation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nif (content.contentType == \"Post\") {\n  concreteContent = <span>{content.title}</span>;\n} else if (content.contentType == \"Image\") {\n  concreteContent = (\n    <Image src= {content.url || \"\"} alt={content.id} />\n  );\n} \n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Space Management UI with ZenStack Hooks in Next.js\nDESCRIPTION: A Next.js page component that demonstrates how to use ZenStack's query and mutation hooks for space management. Shows automatic query invalidation where creating a space automatically updates the space list without manual refresh.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/4-invalidation.md#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { nanoid } from 'nanoid';\nimport type { NextPage } from 'next';\nimport { signOut, useSession } from 'next-auth/react';\nimport Link from 'next/link';\nimport { useCreateSpace, useFindManySpace } from '~/lib/hooks';\n\nconst Home: NextPage = () => {\n  const { data: session } = useSession();\n  const { mutate: createSpace } = useCreateSpace();\n  const { data: spaces } = useFindManySpace({ orderBy: { createdAt: 'desc' } });\n\n  function onCreateSpace() {\n    const name = prompt('Enter a name for your space');\n    if (name) {\n      createSpace({\n        data: {\n          name,\n          slug: nanoid(6),\n          owner: { connect: { id: session?.user.id } },\n          // add the creating user as an admin member\n          members: {\n            create: {\n              user: { connect: { id: session?.user.id } },\n              role: 'ADMIN',\n            },\n          },\n        },\n      });\n    }\n  }\n\n  return (\n    <div className=\"container mx-auto flex justify-center\">\n      {session?.user ? (\n        <div className=\"mt-8 flex w-full flex-col items-center\">\n          <h1 className=\"text-center text-2xl\">\n            Welcome {session.user.email}{' '}\n            <button\n                className=\"btn btn-ghost btn-xs mt-4\"\n                onClick={() => signOut({ callbackUrl: '/signin' })}\n            >\n              Logout\n            </button>\n          </h1>\n\n          <div className=\"w-full p-8\">\n            <h2 className=\"mb-8 text-xl\">\n              Choose a space to start, or{' '}\n              <button className=\"btn btn-link p-0 text-xl\" onClick={onCreateSpace}>\n                create a new one.\n              </button>\n            </h2>\n\n            <ul className=\"flex gap-4\">\n              {spaces?.map((space) => (\n                <Link href={`/spaces/${space.slug}`} key={space.id}>\n                  <li className=\"flex h-32 w-72 items-center justify-center rounded-lg border text-2xl\">\n                    {space.name}\n                  </li>\n                </Link>\n              ))}\n            </ul>\n          </div>\n        </div>\n      ) : (\n        <div>\n          Please{' '}\n          <Link href=\"/signin\">\n            <button className=\"btn btn-link p-0\">login</button>\n          </Link>{' '}\n          to get started\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Content Model with Delegation\nDESCRIPTION: Demonstrates polymorphic relation modeling using ZenStack's delegate attribute for Content types.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/polymorphism.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  contents Content[]\n}\n\nmodel Content {\n  id Int @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  published Boolean @default(false)\n  owner User @relation(fields: [ownerId], references: [id])\n  ownerId Int\n  contentType String\n\n  @@delegate(contentType)\n}\n\nmodel Post extends Content {\n  title String\n}\n\nmodel Video extends Content {\n  name String\n  duration Int\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model Inheritance with Abstract Models in ZenStack\nDESCRIPTION: Example of using an abstract model in ZenStack to define common fields and access rules that will be inherited by concrete models. The abstract model contains common fields like id, timestamps, and a read permission rule.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/multiple-schema.md#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nabstract model Base {\n    id Int @id @default(autoincrement())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt()\n\n    //Logged-in users can view\n    @@allow('read', auth() != null)\n\n}\n\nmodel Post extends Base\n{\n    title String\n    content String?\n    viewCount Int @default(0)\n}\n\nmodel ToDo extends Base\n{\n    title String\n    completed Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CASL Authorization in JavaScript\nDESCRIPTION: TypeScript/JavaScript code using the CASL library to define and check article access permissions based on user and group ACL entries.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/how-to-authz/index.md#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction isReadable(acl, user) {\n  return acl.some(permission => {\n    return (\n      (permission.userId === user.id || user.groups.includes(permission.groupId)) \n\t\t\t&& permission.action === 'read'\n    );\n  });\n}\n\nconst articleAbility = (user, article) => defineAbility((can) => {\n  if (isReadable(article.acl, user)) {\n    can('read', 'Article', { id: article.id });\n  }\n});\n\nconst ability = articleAbility(user1, article1);\nability.can('read', 'Article', article1);\n```\n\n----------------------------------------\n\nTITLE: Implementing the Data Model Documentation Generator in TypeScript\nDESCRIPTION: The implementation of the generateDataModelDocs function for the markdown generator plugin. It groups model attributes by CRUD operations, formats rules for each operation, and generates a structured markdown documentation for each data model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part2/3-writing-plugins.md#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZModelCodeGenerator, getLiteral } from '@zenstackhq/sdk';\nimport { type DataModelAttribute } from '@zenstackhq/sdk/ast';\n\nfunction generateDataModelDocs(dataModels: DataModel[]) {\n    // AST -> ZModel source generator\n    const zmodelCodeGen = new ZModelCodeGenerator();\n\n    // all CRUD operations\n    const CRUD = ['create', 'read', 'update', 'delete'];\n\n    const docs = dataModels.map((dataModel) => {\n        // first, group model attributes by CRUD operations\n        const groupByCrud = dataModel.attributes\n            .filter((attr) =>\n                ['@@allow', '@@deny'].includes(attr.decl.ref?.name || '')\n            )\n            .reduce<Record<string, DataModelAttribute[]>>((group, attr) => {\n                const ops = getLiteral<string>(attr.args[0].value);\n                if (ops) {\n                    const splitOps =\n                        ops == 'all'\n                            ? CRUD\n                            : ops.split(',').map((op) => op.trim());\n\n                    splitOps.forEach((op) => {\n                        group[op] = group[op] || [];\n                        group[op].push(attr);\n                    });\n                }\n\n                return group;\n            }, {});\n\n        // then generate rules for each operation\n        const policies = CRUD.map((op) => {\n            const rules = groupByCrud[op]\n                ? groupByCrud[op]\n                      // output `@@deny` before `@@allow`\n                      .sort((a) => {\n                          return a.decl.ref?.name == '@@deny' ? -1 : 1;\n                      })\n                      .map(\n                          (attr) =>\n                              `  - ${\n                                  attr.decl.ref?.name == '@@deny'\n                                      ? '❌ '\n                                      : '✅ '\n                              }${zmodelCodeGen.generate(attr.args[1].value)}`\n                      )\n                      .join('\\n')\n                : [];\n\n            return [`- ${op.toUpperCase()}`, rules].join('\\n');\n        }).join('\\n');\n\n        return `## ${dataModel.name}\\n\\n${policies}`;\n    });\n\n    return docs.join('\\n\\n');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing authentication middleware in Express.js\nDESCRIPTION: Adds a middleware to require X-USER-ID header for simulating authentication in the Express.js app.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/backend.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napp.use((req, res, next) => {\n    const userId = req.header('X-USER-ID');\n    if (!userId || Number.isNaN(parseInt(userId))) {\n        res.status(403).json({ error: 'unauthorized' });\n    } else {\n        next();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Enhanced PrismaClient with Typed JSON Fields\nDESCRIPTION: Demonstrates how to use ZenStack's enhanced PrismaClient to get type safety for JSON fields. The example shows TypeScript type checking during mutations and result typing for queries.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/typing-json.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\nimport { prisma } from '~/db';\n\nconst db = enhance(prisma);\n\n// The following create call results in a type error because of the\n// incorrect type of the `age` field\nawait db.user.create({\n  data: {\n    profile: { name: 'Alice', age: '30' /* incorrect type */ }\n  }\n});\n\n// The query result is typed as:\n// {\n//   id: string;\n//   profile: {\n//     name: string;\n//     age: number;\n//     address?: {\n//       state: string;\n//       city: string;\n//       zip: string;\n//     } | null;\n//   };\n// }\nawait user = await db.user.findFirstOrThrow();\n```\n\n----------------------------------------\n\nTITLE: Sample ZModel Schema for AST Representation\nDESCRIPTION: A simple ZModel schema example defining a User and Post model with a relation between them. The Post model includes an access control rule using the @@allow attribute.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part2/3-writing-plugins.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\ndatasource db {\n    provider = 'sqlite'\n    url = 'file:.dev.db'\n}\n\nmodel User {\n    id Int @id @default(autoincrement())\n    posts Post[]\n}\n\nmodel Post {\n    id Int @id @default(autoincrement())\n    title String\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int\n\n    @@allow('all', auth() == author)\n}\n```\n\n----------------------------------------\n\nTITLE: Attempting to Create Todo List for Another User\nDESCRIPTION: REPL command showing an attempt to create a Todo List on behalf of another user (Joey) which should fail due to access policy violation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ndb.list.create({ data: { title: 'Grocery', owner: { connect: { email: 'joey@zenstack.dev' } }, space: { connect: { slug: 'central-perk' } } } })\n```\n\n----------------------------------------\n\nTITLE: Implementing Space Detail Page\nDESCRIPTION: Next.js page component for displaying individual space details with server-side rendering\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Space } from '@prisma/client';\nimport BreadCrumb from '../../../components/BreadCrumb';\nimport SpaceMembers from '../../../components/SpaceMembers';\nimport WithNavBar from '../../../components/WithNavBar';\nimport { GetServerSideProps } from 'next';\nimport { useRouter } from 'next/router';\nimport { getEnhancedPrisma } from '../../../server/enhanced-db';\n\ntype Props = {\n    space: Space;\n};\n\nexport default function SpaceHome(props: Props) {\n    const router = useRouter();\n\n    return (\n        <WithNavBar>\n            <div className=\"px-8 py-2\">\n                <BreadCrumb space={props.space} />\n            </div>\n            <div className=\"p-8\">\n                <div className=\"w-full flex flex-col md:flex-row mb-8 space-y-4 md:space-y-0 md:space-x-4\">\n                    <SpaceMembers />\n                </div>\n            </div>\n        </WithNavBar>\n    );\n}\n\nexport const getServerSideProps: GetServerSideProps<Props> = async ({ req, res, params }) => {\n    const db = await getEnhancedPrisma({ req, res });\n\n    const space = await db.space.findUnique({\n        where: { slug: params!.slug as string },\n    });\n    if (!space) {\n        return {\n            notFound: true,\n        };\n    }\n\n    return {\n        props: { space },\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger UI and Merging API Specifications in Express\nDESCRIPTION: Sets up Swagger UI, merges CRUD API spec with JSDoc-generated spec, and serves the combined OpenAPI documentation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport expressJSDocSwagger from 'express-jsdoc-swagger';\n\n// load the CRUD API spec from the JSON file generated by `zenstack`\nconst crudApiSpec = require('./petstore-api.json');\n\n// options for loading the extra OpenAPI from JSDoc\nconst swaggerOptions = {\n    info: {\n        version: '0.1.0',\n        title: 'Pet Store API',\n    },\n    filesPattern: './app.ts', // scan app.ts for OpenAPI JSDoc\n    baseDir: __dirname,\n    exposeApiDocs: true,\n    apiDocsPath: '/v3/api-docs', // serve the merged JSON specifcation at /v3/api-docs\n};\n\n// merge two specs and serve the UI\nexpressJSDocSwagger(app)(swaggerOptions, crudApiSpec);\n```\n\n----------------------------------------\n\nTITLE: Using REPL Debug Commands\nDESCRIPTION: Example of using the REPL debugging commands to authenticate and enable debugging output for query inspection.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/7-debugging.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n.auth { id: 1 }\n.debug\ndb.list.findMany()\n```\n\n----------------------------------------\n\nTITLE: Running ZenStack Generation and Prisma DB Push\nDESCRIPTION: Command to generate Prisma schema from ZenStack models and push the schema changes to the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate && npx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Using Permission Check Hooks in Frontend\nDESCRIPTION: Example of using the generated React hooks for permission checking in the frontend with TanStack Query or SWR plugins, allowing for permission-aware UI rendering.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/check-permission.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCheckPost } from '~/lib/hooks';\n\nconst { data: canReadDrafts } = useCheckPost({\n  operation: 'read',\n  where: { published: false } \n});\n```\n\n----------------------------------------\n\nTITLE: Implementing hasSome() Function in ZModel\nDESCRIPTION: The hasSome() function checks if a list field contains at least one element from a search list. It's equivalent to Prisma's hasSome operator.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_31\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction hasSome(field: Any[], search: Any[]): Boolean {}\n```\n\n----------------------------------------\n\nTITLE: React Context Providers Setup\nDESCRIPTION: Setup for NextAuth SessionProvider and React Query client provider components.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/next-app-router.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"use client\";\n\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { SessionProvider } from \"next-auth/react\";\nimport type { ReactNode } from \"react\";\n\nconst queryClient = new QueryClient();\n\nexport default function Providers({ children }: { children: ReactNode }) {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <SessionProvider>{children}</SessionProvider>\n    </QueryClientProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Prisma Client with Model-Level Methods\nDESCRIPTION: Example of using a model-level method extension with ZenStack. The getFeeds() method is added to the post model and returns posts filtered by ZenStack's access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/client-extensions.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst extendedPrisma = prisma.$extends({\n  model: {\n    post: {\n      async getFeeds() {\n          const context = Prisma.getExtensionContext(this);\n          return context.findMany();\n      },\n    },\n  },\n});\n\nconst db = enhance(extendedPrisma);\nconst feeds = await db.post.getFeeds();\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Control with Prisma Client Extensions in Express.js\nDESCRIPTION: Shows how to implement user-based access control in an Express.js application using Prisma Client Extensions. Creates a per-request database client that automatically filters queries based on the authenticated user.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-client-extensions/index.md#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getAuthorizedDb(prisma: PrismaClient, userId: number) {\n    return prisma.$extends({\n        name: 'authorize',\n        query: {\n            post: {\n                async findMany({ args, query }) {\n                    return query({ ...args, where: { authorId: userId } });\n                },\n                // ... other operations\n            },\n        },\n    });\n}\n\napp.get('/posts', (req, res) => {\n    const userId = req.userId; // provided by some authentication middleware\n    return getPosts(getAuthorizedDb(userId));\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Logic for Blog Post Management\nDESCRIPTION: Server-side component handling data loading and form actions for post management, including creation, publishing toggle, deletion, and user sign-out functionality. Leverages ZenStack's automatic access policy enforcement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/sveltekit.mdx#2025-04-10_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PageServerLoad } from './$types';\nimport { fail, type Actions, redirect } from '@sveltejs/kit';\nimport { JWT_TOKEN_COOKIE_NAME } from '$lib/auth';\n\nexport const load: PageServerLoad = async ({ locals }) => {\n    const posts = await locals.db.post.findMany({ include: { author: true } });\n    return {\n        user: locals.user,\n        posts\n    };\n};\n\nexport const actions: Actions = {\n    create: async ({ request, locals }) => {\n        const data = await request.formData();\n        const title = data.get('title');\n        if (typeof title !== 'string') {\n            return fail(400, { missing: true });\n        }\n\n        await locals.db.post.create({\n            data: { title, author: { connect: { id: locals.user?.id } } }\n        });\n\n        return { success: true };\n    },\n\n    togglePublish: async ({ request, locals }) => {\n        const data = await request.formData();\n        const postId = data.get('id');\n        if (typeof postId !== 'string') {\n            return fail(400, { missing: true });\n        }\n\n        const post = await locals.db.post.findUnique({ where: { id: postId } });\n        if (!post) {\n            return fail(404, { notFound: true });\n        }\n\n        try {\n            await locals.db.post.update({ where: { id: postId }, data: { published: !post.published } });\n            return { success: true };\n        } catch (err) {\n            // error can be thrown for reasons like access policy violation\n            return { error: `${err}` };\n        }\n    },\n\n    delete: async ({ request, locals }) => {\n        const data = await request.formData();\n        const postId = data.get('id');\n        if (typeof postId !== 'string') {\n            return fail(400, { missing: true });\n        }\n\n        try {\n            await locals.db.post.delete({ where: { id: postId } });\n            return { success: true };\n        } catch (err) {\n            // error can be thrown for reasons like access policy violation\n            return { error: `${err}` };\n        }\n    },\n\n    signOut: async ({ cookies }) => {\n        cookies.delete(JWT_TOKEN_COOKIE_NAME);\n        throw redirect(303, '/signin');\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Using isEmpty() Function for Array Fields in ZenStack\nDESCRIPTION: Demonstrates how to check if an array field is empty. This example allows reading posts that have no tags.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_12\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id Int @id\n    tags String[]\n    @@allow('read', isEmpty(tags))\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack Server Adapter for NestJS\nDESCRIPTION: Command to install the ZenStack server adapter package for NestJS integration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nestjs.mdx#2025-04-10_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/server@latest\n```\n\n----------------------------------------\n\nTITLE: Using Typed JSON Fields in ZModel Models\nDESCRIPTION: Shows how to use a previously defined type as a JSON field in a model by applying the @json attribute. This connects the type to a database field while maintaining its structure.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/typing-json.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id String @id @default(cuid())\n  profile Profile @json\n\n  @@allow('all', true)\n}\n```\n\n----------------------------------------\n\nTITLE: Filtered Prisma Pulse Stream Implementation in TypeScript\nDESCRIPTION: Shows how to use filtering with the stream() API to only receive specific events. This example filters for new User records where the name field is not null.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/prisma-pulse.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Filter for new User records with a non-null value for name\nconst stream = await prisma.user.stream({\n  create: {\n    name: { not: null },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Express Server with tsx\nDESCRIPTION: Command to start the Express server with tsx, which enables TypeScript execution with watch mode for development.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx tsx --watch main.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing User Fetching Helper\nDESCRIPTION: Helper function to retrieve all users with their ID and email from the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/cal-com-clone.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function getUsers() {\n    return prisma.user.findMany({ select: { id: true, email: true } });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Seed Script in TypeScript\nDESCRIPTION: TypeScript script to populate the database with sample users and spaces. This creates two users (Joey and Rachel) and two spaces (Central Perk and Rachel's personal space).\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n    // clean up\n    await prisma.user.deleteMany();\n    await prisma.space.deleteMany();\n\n    const joey = await prisma.user.create({\n        data: {\n            email: 'joey@zenstack.dev',\n            name: 'Joey'\n        }\n    });\n    console.log('User created:', joey);\n\n    const rachel = await prisma.user.create({\n        data: {\n            email: 'rachel@zenstack.dev',\n            name: 'Rachel'\n        }\n    });\n    console.log('User created:', rachel);\n\n    const centralPerk = await prisma.space.create({\n        data: {\n            name: 'Central Perk',\n            slug: 'central-perk',\n            owner: { connect: { id: rachel.id } },\n            members: {\n                create: [\n                    {\n                        user: { connect: { id: joey.id } },\n                        role: 'USER'\n                    },\n                    {\n                        user: { connect: { id: rachel.id } },\n                        role: 'ADMIN'\n                    }\n                ]\n            }\n        }\n    });\n    console.log('Space created:', centralPerk);\n\n    const rachelPersonal = await prisma.space.create({\n        data: {\n            name: \"Rachel's Personal Space\",\n            slug: 'rachel',\n            owner: { connect: { id: rachel.id } },\n            members: {\n                create: [\n                    {\n                        user: { connect: { id: rachel.id } },\n                        role: 'ADMIN'\n                    }\n                ]\n            }\n        }\n    });\n    console.log('Space created:', rachelPersonal);\n}\n\nmain()\n    .then(async () => {\n        await prisma.$disconnect();\n    })\n    .catch(async (e) => {\n        console.error(e);\n        await prisma.$disconnect();\n        process.exit(1);\n    });\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Schema and Database from ZenStack Models\nDESCRIPTION: Commands to generate Prisma schema from the ZenStack models and push the changes to the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/sveltekit.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate && npx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Creating User with Posts using RESTful Handler\nDESCRIPTION: Example showing how to create a user and associate existing posts using fetch API with RESTful handler. The request follows JSON:API specification format and returns the created user with relationship links.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/_using-api.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst r = await fetch(`/api/user`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/vnd.api+json' },\n    body: JSON.stringify({\n        data: {\n            type: 'user',\n            attributes: {\n                email: 'user1@abc.com'\n            },\n            relationships: {\n                posts: {\n                    data: [\n                        { type: 'post', id: 1 },\n                        { type: 'post', id: 2 }\n                    ]\n                }\n            }\n        }\n    })\n});\n\nconsole.log(await r.json());\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonapi\": { \"version\": \"1.1\" },\n    \"data\": {\n        \"type\": \"user\",\n        \"id\": 1,\n        \"attributes\": {\n            \"email\": \"user1@abc.com\"\n        },\n        \"links\": {\n            \"self\": \"http://localhost/api/user/1\"\n        },\n        \"relationships\": {\n            \"posts\": {\n                \"links\": {\n                    \"self\": \"http://localhost/api/user/1/relationships/posts\",\n                    \"related\": \"http://localhost/api/user/1/posts\"\n                },\n                \"data\": [\n                    { \"type\": \"post\", \"id\": 1 },\n                    { \"type\": \"post\", \"id\": 2 }\n                ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Comment Deletion Authorization in RedwoodJS\nDESCRIPTION: JavaScript service code showing role-based authorization for comment deletion using requireAuth helper.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/redwood-auth/index.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const deleteComment = ({ id }) => {\n  requireAuth({ roles: 'moderator' })\n  return db.comment.delete({\n    where: { id },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Hashing in User Model\nDESCRIPTION: Demonstrates how to use the @password attribute to automatically hash passwords in the User model using bcryptjs.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/6-other-enhancements.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id @default(autoincrement())\n    email String @unique\n    password String? @password\n}\n```\n\n----------------------------------------\n\nTITLE: Supabase RLS Delete Policy for List Entity\nDESCRIPTION: RLS policy for List deletion, allowing only the list owner to delete their lists.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/supabase-alternative/index.md#2025-04-10_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"list.delete\"\non \"public\".\"List\"\nto authenticated\nusing (\n  (auth.uid() = (\"ownerId\")::uuid)\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Strongly-Typed API Client in TypeScript\nDESCRIPTION: Creates a TypeScript client that uses the generated types to make strongly-typed API calls to the pet store service.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport fetch, { Headers, Request, Response } from 'node-fetch';\nimport { Fetcher } from 'openapi-typescript-fetch';\nimport { paths } from './client-types';\n\n// polyfill `fetch` for node\nif (!globalThis.fetch) {\n    globalThis.fetch = fetch as any;\n    globalThis.Headers = Headers as any;\n    globalThis.Request = Request as any;\n    globalThis.Response = Response as any;\n}\n\nasync function main() {\n    const fetcher = Fetcher.for<paths>();\n    fetcher.configure({\n        baseUrl: 'http://localhost:3000',\n    });\n\n    const login = fetcher.path('/api/login').method('post').create();\n    const { data: loginResult } = await login({\n        email: 'tom@pet.inc',\n        password: 'abc123',\n    });\n    // loginResult is typed as { id: string, email: string, token: string }\n    console.log('Login result:', JSON.stringify(loginResult, undefined, 2));\n    const token = loginResult.token;\n\n    // get orders together with their pets\n    const getOrders = fetcher.path(`/api/order/findMany`).method('get').create();\n    const { data: orders } = await getOrders(\n        { q: JSON.stringify({ include: { pets: true } }) },\n        { headers: { Authorization: `Bearer ${token}` } }\n    );\n    console.log('Orders:', JSON.stringify(orders, undefined, 2));\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Using ZenStack with Cloudflare Workers and Neon Database\nDESCRIPTION: Example of implementing ZenStack in a Cloudflare Workers environment with a Neon database. This code demonstrates how to use the correct edge imports and create a database connection for each request in a serverless function.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/edge.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nimport { PrismaNeon } from '@prisma/adapter-neon';\nimport { Pool } from '@neondatabase/serverless';\nimport { enhance } from '@zenstackhq/runtime/edge';\nimport { getSessionUser } from './auth';\n\nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n    const neon = new Pool({ connectionString: env.DATABASE_URL });\n    const adapter = new PrismaNeon(neon);\n    const prisma = new PrismaClient({ adapter });\n    const db = enhance(prisma, { user: getSessionUser(request) });\n    const posts = await db.post.findMany();  \n    return Response.json(posts);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model with Access Policies in ZenStack\nDESCRIPTION: This ZModel schema defines a Post model with access policies that allow the author full access to their posts, while allowing all authenticated users to read published posts. It also sets up automatic user association through the createdById field.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs-app-router.mdx#2025-04-10_snippet_15\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n  id Int @id @default(autoincrement())\n  name String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  // highlight-next-line\n  published Boolean @default(false)\n\n  createdBy User @relation(fields: [createdById], references: [id])\n  // highlight-next-line\n  createdById String @default(auth().id)\n\n  @@index([name])\n\n  // highlight-start\n  // author has full access\n  @@allow('all', auth() == createdBy)\n\n  // logged-in users can view published posts\n  @@allow('read', auth() != null && published)\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling E-commerce Data Schema with Prisma\nDESCRIPTION: A Prisma schema defining the data models for an e-commerce store, including User, Product, Order, and OrderItem entities, plus a helper view for joined queries.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/llm-acl/index.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\n// Analyst user\nmodel User {\n  id String @id @default(cuid())\n  email String @unique\n  password String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // the assigned region, this controls what data the user can access\n  region String\n}\n\n// Product\nmodel Product {\n  id String @id @default(cuid())\n  name String\n  category String\n  price Float\n  orderItems OrderItem[]\n}\n\n// Order\nmodel Order {\n  id String @id @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  items OrderItem[]\n  region String\n}\n\n// Order item\nmodel OrderItem {\n  id String @id @default(cuid())\n  quantity Int\n  productId String\n  orderId String\n  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)\n  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)\n}\n\n// Helper view for joining orders, order items, and products\nview OrderItemDetail {\n  id String @id\n  createdAt DateTime\n  updatedAt DateTime\n  region String\n  product String\n  category String\n  unitPrice Float\n  quantity Int\n  subtotal Float\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Todos with Prisma in TypeScript\nDESCRIPTION: Demonstrates how to use Prisma to query todos with their owners, showcasing Prisma's type inference capabilities.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-tanstack/index.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// `todos` is typed as `(Todo & { owner: User })[]`\nconst todos = await prisma.todo.findMany({\n  where: { published: true },\n  include: { owner: true }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Slug Format Validation to Space Model\nDESCRIPTION: Example implementation of regex validation to enforce a specific format for the slug field in a Space model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/5-data-validation.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Space {\n     ...\n     slug String @unique @regex('^[0-9a-zA-Z]{4,16}$')\n}\n```\n\n----------------------------------------\n\nTITLE: Attempting to Order an Already Sold Pet with cURL\nDESCRIPTION: Example cURL command attempting to create an order for a pet that's already sold, which should be rejected by the access policy that prevents updating the orderId of already sold pets.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST localhost:3000/api/order/create \\\n    -H 'Content-Type: application/json' -H \"Authorization: Bearer $token\"  \\\n    -d \"{ \\\"data\\\": { \\\"userId\\\": \\\"$userId\\\", \\\"pets\\\": { \\\"connect\\\": { \\\"id\\\": \\\"luna\\\" } } } }\"\n```\n\n----------------------------------------\n\nTITLE: Using auth() in @default() Attribute in ZModel\nDESCRIPTION: Example of using auth() in the @default() attribute to simplify resource creation with owner assignment.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_8\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Resource {\n    ...\n    owner User @relation(fields: [ownerId], references: [id])\n    ownerId Int @default(auth().id)\n\n    @@allow('create', owner == auth())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Row-Level Security Policies in PostgreSQL\nDESCRIPTION: SQL code that implements row-level security (RLS) policies for a blog post table, with one policy allowing post owners full access to their posts and another allowing anyone to read published posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/postgrest.mdx#2025-04-10_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE POLICY post_owner_policy ON post\n    USING (owner = current_user);\n\nCREATE POLICY post_read_policy ON post FOR SELECT\n    USING (published = true);\n```\n\n----------------------------------------\n\nTITLE: Example of Validation Failure with JSON Fields\nDESCRIPTION: Demonstrates a case where data validation fails for a JSON field. The example creates a user with an age that doesn't meet the minimum requirement defined in the type.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/typing-json.md#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.user.create({\n  data: {\n    email: 'abc',\n    profile: { name: 'Alice', age: 16 },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Checking if Anonymous User Can Read Unpublished Posts\nDESCRIPTION: Example of using the check API with constraints to determine if an anonymous user can read unpublished posts, affecting whether to show a Drafts UI tab to non-logged-in users.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/check-permission.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma); // enhance without a user context\nawait canRead = await db.post.check({ operation: 'read', where: { published: false } });\n```\n\n----------------------------------------\n\nTITLE: Initializing Enhanced PrismaClient with ZenStack\nDESCRIPTION: Creates an enhanced PrismaClient instance with ZenStack, which enforces access control rules defined in the schema. The current user is passed as a parameter to provide context for authorization.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/model-authz/index.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user: currentUser });\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAPI and Swagger UI Dependencies\nDESCRIPTION: Install the necessary npm packages for generating OpenAPI specs and serving Swagger UI documentation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/5-documentation.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @zenstackhq/openapi\nnpm install swagger-ui-express\nnpm install -D @types/swagger-ui-express\n```\n\n----------------------------------------\n\nTITLE: Generating ZenStack Artifacts from Schema\nDESCRIPTION: Command to generate Prisma schema and other artifacts from the ZModel schema, followed by pushing the schema to the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db push\n```\n\n----------------------------------------\n\nTITLE: JSON Response from RPC-style API Call\nDESCRIPTION: Example JSON response from the RPC-style API call showing the created user with their associated posts. The response includes all model fields including automatically generated IDs and timestamps.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/_using-api.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"email\": \"user1@abc.com\",\n    \"posts\": [\n        {\n            \"id\": 1,\n            \"createdAt\": \"2023-03-14T07:45:04.036Z\",\n            \"updatedAt\": \"2023-03-14T07:45:04.036Z\",\n            \"title\": \"Post 1\",\n            \"authorId\": 1\n        },\n        {\n            \"id\": 2,\n            \"createdAt\": \"2023-03-14T07:45:04.036Z\",\n            \"updatedAt\": \"2023-03-14T07:45:04.036Z\",\n            \"title\": \"Post 2\",\n            \"authorId\": 1\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Zod Schema with Refinement Example\nDESCRIPTION: Example of how to customize a schema by first omitting fields and then applying the refinement function to maintain model-level validation rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/zod.md#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst myPostCreateSchema = refinePost(PostCreateWithoutRefinementSchema.omit({id: true}));\n```\n\n----------------------------------------\n\nTITLE: Creating Post Component\nDESCRIPTION: Implements a Vue component for rendering and managing individual blog posts with publish/unpublish and delete functionality.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nuxt.mdx#2025-04-10_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useDeletePost, useUpdatePost } from '~/lib/hooks';\n\nconst props = defineProps({\n    id: String,\n    title: String,\n    author: {\n        type: Object,\n        default: () => ({ email: '' }),\n    },\n    published: Boolean,\n});\n\nconst updatePost = useUpdatePost();\nconst deletePost = useDeletePost();\n\nconst onTogglePublish = async () => {\n    try {\n        await updatePost.mutateAsync({\n            where: { id: props.id },\n            data: { published: !props.published },\n        });\n    } catch (err: any) {\n        alert(err.info?.message ?? err);\n    }\n};\n\nconst onDelete = async () => {\n    try {\n        await deletePost.mutateAsync({ where: { id: props.id } });\n    } catch (err: any) {\n        alert(err.info?.message ?? err);\n    }\n};\n</script>\n\n<template>\n    <div class=\"flex justify-center\">\n        <div class=\"min-w-80\">\n            <span class=\"mr-4 text-lg font-semibold\">{{ title }}</span\n            ><span>by {{ author.email }}</span>\n        </div>\n        <div class=\"ml-8 space-x-2\">\n            <NButton @click=\"onTogglePublish\">{{\n                published ? 'Unpublish' : 'Publish'\n            }}</NButton>\n            <NButton @click=\"onDelete\">Delete</NButton>\n        </div>\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration for SvelteKit\nDESCRIPTION: Vite configuration to prevent treating @zenstackhq/tanstack-query as an external dependency in SvelteKit\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    ...\n    ssr: {\n        noExternal: ['@zenstackhq/tanstack-query'],\n    },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Loading a Dataset with PostgresML in SQL\nDESCRIPTION: SQL command to load a dataset into PostgresML for machine learning purposes. This command imports the 'digits' dataset which is commonly used for handwritten digit recognition.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/modern-sql-ai/index.md#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM pgml.load_dataset('digits');\n```\n\n----------------------------------------\n\nTITLE: Configuring API Request Handler\nDESCRIPTION: Setup of Next.js API endpoint for handling database operations using ZenStack\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { requestHandler } from '@zenstackhq/next';\nimport { getEnhancedPrisma } from 'server/enhanced-db';\n\nexport default requestHandler({\n    getPrisma: (req, res) => getEnhancedPrisma({ req, res }),\n});\n```\n\n----------------------------------------\n\nTITLE: Generating ZenStack Artifacts\nDESCRIPTION: Command to generate ZenStack artifacts, including tRPC routers. This creates router files for each data model in the specified output directory.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/trpc.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\n```\n\n----------------------------------------\n\nTITLE: Configuring ZModel Schema for Clerk Integration\nDESCRIPTION: A ZModel schema example that works with Clerk authentication by marking the User model as ignored while implementing access policies for blog posts based on the authenticated user.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/authentication/clerk.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id\n    @@ignore\n}\n\nmodel Post {\n  id String @id @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title String\n  published Boolean @default(false)\n  authorId String // stores Clerk's user ID\n\n  // author has full access\n  @@allow('all', auth() != null && auth().id == authorId)\n\n  // logged-in users can view published posts\n  @@allow('read', auth() != null && published)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Model Schema with Post Relation\nDESCRIPTION: Extended User model schema in ZModel adding posts relation and access policies. Includes password handling and public access rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nextjs.mdx#2025-04-10_snippet_13\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id            String    @id @default(cuid())\n    name          String?\n    email         String?   @unique\n    emailVerified DateTime?\n    password      String @password @omit\n    posts         Post[]\n    image         String?\n    accounts      Account[]\n    sessions      Session[]\n\n    // everyone can signup, and user profile is also publicly readable\n    @@allow('create,read', true)\n\n    // only the user can update or delete their own profile\n    @@allow('update,delete', auth() == this)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ID Attribute with Optional String Parameter in ZModel\nDESCRIPTION: Illustrates the declaration of an id attribute with an optional String parameter for mapping.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_9\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @id(map: String?)\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Delete with ZenStack\nDESCRIPTION: Shows how to implement soft deletion pattern using ZenStack's access policies to automatically filter out deleted records\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-auth/index.md#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    ...\n    deleted Boolean @default(false) @omit  // @omit marks a field to be discarded when read\n    @@deny('read', deleted)\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Parent-Child Access Policy Definition in ZModel\nDESCRIPTION: Example showing duplicated access policies between List and Todo models in a parent-child relationship.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.8-keep-policies-dry.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel List {\n  ...\n\n  // require login\n  @@deny('all', auth() == null)\n\n  // can be read by space members if not private\n  @@allow('read', owner == auth() || (space.members?[user == auth()] && !private))\n\n  // when create, owner must be set to current user, and user must be in the space\n  @@allow('create,update', owner == auth() && space.members?[user == auth()])\n\n  ...\n}\n\nmodel Todo {\n  ...\n\n  // require login\n  @@deny('all', auth() == null)\n\n  // owner has full access\n  @@allow('all', list.owner == auth())\n\n  // space members have full access if the parent List is not private\n  @@allow('all', list.space.members?[user == auth()] && !list.private)\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example for Resource Listing\nDESCRIPTION: Example JSON:API response format for listing resources, showing pagination, relationships, and metadata structure.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"meta\": {\n        \"total\": 1\n    },\n    \"data\": [\n        {\n            \"attributes\": {\n                \"authorId\": 1,\n                \"published\": true,\n                \"title\": \"My Awesome Post\",\n                \"viewCount\": 0\n            },\n            \"id\": 1,\n            \"links\": {\n                \"self\": \"http://myhost/api/post/1\"\n            },\n            \"relationships\": {\n                \"author\": {\n                    \"data\": { \"id\": 1, \"type\": \"user\" },\n                    \"links\": {\n                        \"related\": \"http://myhost/api/post/1/author/1\",\n                        \"self\": \"http://myhost/api/post/1/relationships/author/1\"\n                    }\n                }\n            },\n            \"type\": \"post\"\n        }\n    ],\n    \"jsonapi\": {\n        \"version\": \"1.1\"\n    },\n    \"links\": {\n        \"first\": \"http://myhost/api/post?page%5Blimit%5D=100\",\n        \"last\": \"http://myhost/api/post?page%5Boffset%5D=0\",\n        \"next\": null,\n        \"prev\": null,\n        \"self\": \"http://myhost/api/post\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Query Invalidation in SWR Mutation Hook\nDESCRIPTION: Example of disabling automatic query invalidation for a ZenStack-generated SWR mutation hook using the revalidate option.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/swr.mdx#2025-04-10_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nuseCreatePost({ revalidate: false });\n```\n\n----------------------------------------\n\nTITLE: Entering ZenStack REPL Mode\nDESCRIPTION: Command to start the ZenStack REPL (Read-Eval-Print Loop) for interactive data querying.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack repl\n```\n\n----------------------------------------\n\nTITLE: Integrating ZenStack with Express.js\nDESCRIPTION: Example of integrating ZenStack with an Express.js server to create an automatic CRUD service with enforced access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/postgrest-alternative/index.md#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n    '/api/data',\n    ZenStackMiddleware({\n        getPrisma: (request) => enhance(prisma, { user: getSessionUser(request) }),\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Specification with ZenStack\nDESCRIPTION: Runs the ZenStack generate command to create the OpenAPI specification JSON file.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\n```\n\n----------------------------------------\n\nTITLE: Access Control Attributes in ZenStack Schema\nDESCRIPTION: Demonstrates the basic syntax of @@allow and @@deny attributes used in ZenStack models for controlling create, read, update, and delete operations. Operations can be specified individually or using 'all' as a shorthand.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/_access-policy.md#2025-04-10_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\n@@allow(operation, condition)\n```\n\nLANGUAGE: prisma\nCODE:\n```\n@@deny(operation, condition)\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example for Resource Listing\nDESCRIPTION: Example JSON:API response format for listing resources, showing pagination, relationships, and metadata structure.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"meta\": {\n        \"total\": 1\n    },\n    \"data\": [\n        {\n            \"attributes\": {\n                \"authorId\": 1,\n                \"published\": true,\n                \"title\": \"My Awesome Post\",\n                \"viewCount\": 0\n            },\n            \"id\": 1,\n            \"links\": {\n                \"self\": \"http://myhost/api/post/1\"\n            },\n            \"relationships\": {\n                \"author\": {\n                    \"data\": { \"id\": 1, \"type\": \"user\" },\n                    \"links\": {\n                        \"related\": \"http://myhost/api/post/1/author/1\",\n                        \"self\": \"http://myhost/api/post/1/relationships/author/1\"\n                    }\n                }\n            },\n            \"type\": \"post\"\n        }\n    ],\n    \"jsonapi\": {\n        \"version\": \"1.1\"\n    },\n    \"links\": {\n        \"first\": \"http://myhost/api/post?page%5Blimit%5D=100\",\n        \"last\": \"http://myhost/api/post?page%5Boffset%5D=0\",\n        \"next\": null,\n        \"prev\": null,\n        \"self\": \"http://myhost/api/post\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD API with ZenStack and Next.js\nDESCRIPTION: Demonstrates how to implement a CRUD API using ZenStack's server adapter for Next.js, including access control enforcement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-tanstack/index.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/api/model/[...path].ts\nimport { enhance } from '@zenstackhq/runtime';\nimport NextRequestHandler from '@zenstackhq/server/next';\nimport { getSessionUser } from '~/server/auth';\n\nexport default NextRequestHandler({\n    // The `enhance` API creates a access-control-enabled wrapper around PrismaClient\n    // The implementation of `getSessionUser` depends on your authentication solution\n    getPrisma: (req, res) => enhance(prisma, { user: getSessionUser(req, res) })\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Type for JSON Fields in ZModel\nDESCRIPTION: Defines a Profile type to be used as a strongly typed JSON field in ZenStack. This type includes string and integer fields representing a user profile's basic information.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/typing-json.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\ntype Profile {\n  name String\n  age Int\n}\n```\n\n----------------------------------------\n\nTITLE: TanStack Query Plugin Configuration\nDESCRIPTION: ZModel configuration for generating TanStack Query hooks.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/better-auth/index.mdx#2025-04-10_snippet_7\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin hooks {\n  provider = \"@zenstackhq/tanstack-query\"\n  target = \"react\"\n  output = \"./hooks/model\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ZenStack Generated Zod Schema and React Hook Form Resolver\nDESCRIPTION: Imports the SignupCreateSchema generated by ZenStack's Zod plugin and the zodResolver from @hookform/resolvers to enable form validation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/form-validation/index.md#2025-04-10_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignupCreateSchema } from '@zenstackhq/runtime/zod/models';\nimport { zodResolver } from '@hookform/resolvers/zod';\n```\n\n----------------------------------------\n\nTITLE: Implementing User and Resource Creation with Authorization in TypeScript\nDESCRIPTION: This code snippet demonstrates creating users with different reputation levels, using enhanced PrismaClient instances for each user, and performing authorized operations on resources based on user reputation and ownership.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/model-authz/index.md#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// create two users\nconst emily = await prisma.user.create({\n    data: { name: 'Emily', reputation: 100 },\n});\nconst adam = await prisma.user.create({\n    data: { name: 'Adam', reputation: 5 },\n});\n\n// create an enhanced PrismaClient for each user\nconst emilyDb = enhance(prisma, { user: emily });\nconst adamDb = enhance(prisma, { user: adam });\n\n// Emily can create a resource because she has enough reputation\nconst res = await emilyDb.resource.create({\n  data: { name: 'resource1', owner: { connect: { id: emily.id } } },\n});\nconsole.log('Resource created by Emily:', inspect(res));\n\n// Adam can't create a resource because he has insufficient reputation\nawait expect(\n  adamDb.resource.create({\n    data: { name: 'resource2', owner: { connect: { id: adam.id } } },\n  })\n).rejects.toThrow();\n\n// Adam shouldn't see the resource because it's not published\nlet allResourcesByAdam = await adamDb.resource.findMany();\nconsole.log('All resources read by Adam:', inspect(allResourcesByAdam));\nexpect(allResourcesByAdam).toHaveLength(0);\n\n// Emily should be able to publish the resource\nawait emilyDb.resource.update({\n  where: { id: res.id },\n  data: { published: true },\n});\nconsole.log('Resource published by Emily');\n\n// ❌ Adam should now be able to see the resource\nallResourcesByAdam = await adamDb.resource.findMany();\nconsole.log('All resources read by Adam:', inspect(allResourcesByAdam));\nexpect(allResourcesByAdam).toHaveLength(1);\n```\n\n----------------------------------------\n\nTITLE: Creating and Exporting tRPC App Router\nDESCRIPTION: TypeScript code for creating and exporting the main tRPC app router. It uses the generated createRouter function to create a router instance for all models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/trpc.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouter } from './generated/routers';\n\nconst t = initTRPC.context<Context>().create();\n\nexport const appRouter = createRouter(t.router, t.procedure);\n\nexport type AppRouter = typeof appRouter;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Auth Type in ZModel\nDESCRIPTION: Example of defining a custom Auth type for cases where user data isn't stored locally but needed for authentication resolution.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/custom.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\ntype Auth {\n  id          String @id\n  role        String\n  permissions String[]\n  @@auth\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zod Schemas for Input Validation in ZenStack\nDESCRIPTION: Example showing how to configure Zod schemas for validating CRUD request input by passing the loaded module to the zodSchemas option in the factory function.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/_options.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfactory({\n    ...\n    zodSchemas: require('./zod'),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Express Server\nDESCRIPTION: Sets up a simple Express server that listens on port 3000 and responds with a JSON greeting on the root endpoint.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\n\nconst app = express();\n\napp.use(express.json());\n\napp.get('/', (req, res) => {\n    res.json({ greet: 'Hello World!' });\n});\n\napp.listen(3000, () => console.log('🚀 Server ready at: http://localhost:3000'));\n```\n\n----------------------------------------\n\nTITLE: Defining User Model for Authentication in ZModel\nDESCRIPTION: Example of defining a User model in ZModel that includes necessary fields for authentication and authorization like id, role, and permissions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/custom.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id          String @id\n  role        String\n  permissions String[]\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Root Index Page with Posts Link in Remix\nDESCRIPTION: JSX fragment to update the main application index page with a link to the posts section. Shows how to reference the current user's email in the link text.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/remix-run.mdx#2025-04-10_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<Link\n    to=\"/posts\"\n    className=\"flex items-center justify-center rounded-md border border-transparent bg-white px-4 py-3 text-base font-medium text-yellow-700 shadow-sm hover:bg-yellow-50 sm:px-8\"\n>\n    View Posts for {user.email}\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Traditional Multiple Relations Model\nDESCRIPTION: Shows how multiple relations are traditionally modeled in Prisma without polymorphism.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/polymorphism.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  ...\n  posts Post[]\n  videos Video[]\n  ...\n}\n\nmodel Post {\n  ...\n  title String\n}\n\nmodel Video {\n  ...\n  duration Int\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Signin Form in SvelteKit\nDESCRIPTION: A SvelteKit component that renders a login form with email and password fields. The form uses SvelteKit's enhance function for form submission and displays validation errors when login fails.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/sveltekit.mdx#2025-04-10_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { enhance } from '$app/forms';\n\timport type { ActionData } from '../signin/$types';\n\n\texport let form: ActionData;\n</script>\n\n<div class=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\"\n>\n    <h1 class=\"text-5xl font-extrabold text-white\">Login</h1>\n    <form class=\"mt-16 flex flex-col gap-8 text-2xl\" method=\"post\" use:enhance>\n        {#if form?.invalid}\n            <p class=\"text-red-600 my-2\">Invalid credentials</p>\n        {/if}\n        <div>\n            <label for=\"email\" class=\"inline-block w-32 text-white\"> Email </label>\n            <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                value={form?.email ?? ''}\n                class=\"ml-4 w-72 rounded border p-2\"\n            />\n        </div>\n        <div>\n            <label for=\"password\" class=\"inline-block w-32 text-white\"> Password </label>\n            <input id=\"password\" name=\"password\" type=\"password\" class=\"ml-4 w-72 rounded border p-2\" />\n        </div>\n        <input\n            type=\"submit\"\n            value=\"Sign in to my account\"\n            class=\"cursor-pointer rounded border border-gray-500 py-4 text-white\"\n        />\n        <div class=\"mt-2 text-base font-medium text-gray-300\">\n            Don't have an account yet?{' '}\n            <a href=\"/signup\" class=\"text-primary-700 underline\"> Signup here </a>\n        </div>\n    </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in with NextAuth\nDESCRIPTION: Frontend code for handling user sign-in with NextAuth. It shows how to call the signIn function with email and password credentials and handle the authentication response.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/firebase-alternative/index.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signIn } from \"next-auth/react\";\n\nasync function onSignin(email: string, password: string) {\n  const result = await signIn(\"credentials\", {\n    redirect: false,\n    email,\n    password,\n  });\n\n  if (result?.ok) {\n    Router.push(\"/\");\n  } else {\n    alert(\"Sign in failed\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing To-One Relationships in JSON:API\nDESCRIPTION: Example of clearing a single author relationship for a post by setting the relationship data to null.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing To-One Relationship Example in JSON:API\nDESCRIPTION: An example of how to clear a to-one relationship by setting the data field to null.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_17\n\nLANGUAGE: json\nCODE:\n```\nPUT /post/1/relationships/author\n{\n    \"data\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZenStack Middleware with Enhanced Prisma Client\nDESCRIPTION: Setting up the ZenStack middleware with an enhanced Prisma client to enable attributes like @password and @omit to take effect. This enhancement is required for the security attributes to work properly.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\napp.use('/api', ZenStackMiddleware({ getPrisma: () => enhance(prisma) }));\n```\n\n----------------------------------------\n\nTITLE: Clearing To-One Relationships in JSON:API\nDESCRIPTION: Example of clearing a single author relationship for a post by setting the relationship data to null.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Attempting to Update List Owner in ZenStack REPL\nDESCRIPTION: Demonstrates an attempt to update the owner of a List, which is denied due to the field-level policy preventing updates to the 'ownerId' field.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.7-field-level.md#2025-04-10_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ndb.list.update({ where: { id: 1 }, data: { owner: { connect: 2 } } })\n```\n\n----------------------------------------\n\nTITLE: Attempting to Update List Owner in ZenStack REPL\nDESCRIPTION: Demonstrates an attempt to update the owner of a List, which is denied due to the field-level policy preventing updates to the 'ownerId' field.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.7-field-level.md#2025-04-10_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ndb.list.update({ where: { id: 1 }, data: { owner: { connect: 2 } } })\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Next.js development server for testing the authentication implementation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/3-auth-ui.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Manual JSON Data Validation with Zod\nDESCRIPTION: Shows how to explicitly validate JSON data from query results using the Zod schemas generated by ZenStack.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/json-typing/index.md#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetadataSchema } from '@zenstackhq/runtime/zod/models';\n\nconst image = await db.image.findFirstOrThrow();\nconst metadata = MetadataSchema.parse(image.metadata);\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic User Model in Prisma Schema\nDESCRIPTION: A simple Prisma schema example defining a User model with an auto-incrementing ID, unique email field, and optional name field. The schema demonstrates basic field types and attributes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/0-prisma.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id @default(autoincrement())\n    email String @unique\n    name String?\n}\n```\n\n----------------------------------------\n\nTITLE: Data Schema with Soft Delete Support in ZModel\nDESCRIPTION: Defines a simple data schema in ZModel (a Prisma extension) with User and Post models. Each model includes a 'deleted' Boolean field to support soft delete functionality.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-client-extensions/index.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id      Int     @id @default(autoincrement())\n  email   String  @unique\n  name    String?\n  posts   Post[]\n  deleted Boolean @default(false)\n}\n\nmodel Post {\n  id       Int     @id @default(autoincrement())\n  title    String\n  content  String?\n  author   User?   @relation(fields: [authorId], references: [id])\n  authorId Int?\n  deleted  Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Using enhanced PrismaClient in Next.js route handler with Auth.js\nDESCRIPTION: This snippet demonstrates how to use Auth.js with ZenStack's enhance() function in a Next.js route handler to create a protected API endpoint with automatic access policy enforcement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/next-auth.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from '~/auth';\nimport { prisma } from '~/db';\n\nexport async function GET(request: Request) {\n  const authObj = await auth();\n  const db = enhance(prisma, { user: authObj?.user });\n  return db.post.findMany()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic User Model in Prisma Schema\nDESCRIPTION: A simple Prisma schema example defining a User model with an auto-incrementing ID, unique email field, and optional name field. The schema demonstrates basic field types and attributes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/0-prisma.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id @default(autoincrement())\n    email String @unique\n    name String?\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Formula with User Context in Mermaid\nDESCRIPTION: Flowchart showing how the Boolean formula is modified when a specific user context is provided, with the user ID being substituted into the formula.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/check-permission.md#2025-04-10_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  OR((OR)) --> A[\"[published] == true\"]\n  OR((OR)) --> B[\"[authorId] == 1\"]\n  AND((AND)) --> C[\"[published] == false\"]\n  AND((AND)) --> OR\n  style C stroke-dasharray: 5, 5\n```\n\n----------------------------------------\n\nTITLE: Rendering React Table Component with JSX\nDESCRIPTION: A React component that renders a table using React Table's utility functions. This code maps over header groups and rows to create the table structure and uses flexRender to display each cell's content.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/react-table/index.md#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport const OrderDetails = () => {\n  ...\n\n  return (\n    <table>\n      <thead>\n        {table.getHeaderGroups().map((headerGroup) => (\n          <tr key={headerGroup.id}>\n            {headerGroup.headers.map((header) => (\n              <th key={header.id}>\n                {flexRender(\n                  header.column.columnDef.header,\n                  header.getContext()\n                )}\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody>\n        {table.getRowModel().rows.map((row) => (\n          <tr key={row.id}>\n            {row.getVisibleCells().map((cell) => (\n              <td key={cell.id}>\n                {flexRender(\n                  cell.column.columnDef.cell,\n                  cell.getContext()\n                )}\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query-Level Overrides with ZenStack\nDESCRIPTION: Example of using query-level overrides with ZenStack. The findMany method is extended to log query arguments while still respecting ZenStack's access policy filters.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/client-extensions.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst extendedPrisma = prisma.$extends({\n  query: {\n    post: {\n      findMany({ query, args }) {\n        console.log('Query args:', inspect(args, { depth: null }));\n        return query(args);\n      },\n    },\n  },\n});\n\nconst enhanced = enhance(extendedPrisma);\nconst posts = await enhanced.post.findMany();\n```\n\n----------------------------------------\n\nTITLE: Deserialized JavaScript object with proper Date types\nDESCRIPTION: The result of deserializing the response data with SuperJSON, showing the properly restored Date objects for createdAt and updatedAt fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/3-serialization.md#2025-04-10_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n{\n    createdAt: 2023-11-08T04:38:53.385Z,\n    id: 1,\n    ownerId: 1,\n    private: false,\n    spaceId: 1,\n    title: 'Grocery',\n    updatedAt: 2023-11-09T04:52:57.987Z\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model with Access Policy in ZModel\nDESCRIPTION: This ZModel snippet defines a Post model with an access policy allowing read access only to published posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/client-extensions.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n  id Int @id @default(autoincrement())\n  title String\n  content String?\n  published Boolean @default(false)\n\n  @@allow('read', published)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring @core/access-policy Plugin in ZModel\nDESCRIPTION: This snippet demonstrates how to configure the @core/access-policy plugin in a ZModel file. It specifies the output directory and disables compilation to JavaScript.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/access-policy.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin policy {\n  provider = '@core/access-policy'\n  output = 'src/lib/zenstack'\n  compile = false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Todo List Client Component in TypeScript\nDESCRIPTION: This client-side React component provides a button to create a new todo list. It prompts the user for a title and calls a server action to create the list.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/stackauth-multitenancy/index.mdx#2025-04-10_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { createList } from \"~/app/actions\";\n\nexport default function CreateList() {\n  function onCreate() {\n    const title = prompt(\"Enter a title for your list\");\n    if (title) {\n      createList(title);\n    }\n  }\n\n  return (\n    <button onClick={onCreate}>\n      Create a list\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating SelectedTeamSwitcher Component in Next.js Layout\nDESCRIPTION: Adds the StackAuth SelectedTeamSwitcher component to the Next.js application layout to enable team management and team context switching functionality.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/stackauth-multitenancy/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-next-line\nimport { SelectedTeamSwitcher } from \"@stackframe/stack\";\n...\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <StackProvider app={stackServerApp}>\n          <StackTheme>\n            <header>\n              // highlight-next-line\n              <SelectedTeamSwitcher />\n            </header>\n            <main>{children}</main>\n          </StackTheme>\n        </StackProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: Setting up environment variables for the Next.js application, including database URL and NextAuth secrets.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"file:./db.sqlite\"\nNEXTAUTH_SECRET=\"abc123\"\nNEXTAUTH_URL=\"http://localhost:3000\"\n```\n\n----------------------------------------\n\nTITLE: Implementing RESTful API Handler in Next.js\nDESCRIPTION: Configuration for setting up the RESTful API handler in Next.js using the app directory structure. Includes handler setup for all HTTP methods.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst handler = NextRequestHandler({\n    getPrisma,\n    useAppDir: true,\n    handler: RestApiHandler({ endpoint: 'http://myhost/api' })    \n});\n\nexport {\n  handler as GET,\n  handler as POST,\n  handler as PUT,\n  handler as PATCH,\n  handler as DELETE,\n};\n```\n\n----------------------------------------\n\nTITLE: Error Response Format for RPC API\nDESCRIPTION: This snippet illustrates the structure of an error response from the RPC API, including fields for Prisma errors, access policy violations, and other error details.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rpc.mdx#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    // true to indicate the failure is due to a Prisma error\n    prisma?: boolean;\n\n    // true to indicate the failure is due to access policy violation\n    rejectedByPolicy?: boolean;\n\n    // original Prisma error code, available when `prisma` is true\n    code?: string;\n\n    // error message\n    message: string;\n\n    // extra reason about why a failure happened (e.g., 'RESULT_NOT_READABLE' indicates\n    // a mutation succeeded but the result cannot be read back due to access policy)\n    reason?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Complex Relation Filtering for Soft Delete in Prisma\nDESCRIPTION: The modified version of the complex query to account for soft delete, showing the increased complexity and potential performance impact.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/soft-delete.mdx#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst user = await prisma.user.findMany({\n    where: {\n        posts: {\n            none: {\n                AND: [{ deleted: true }, { title: { not: { contains: 'Prisma' } } }],\n            },\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Prisma Pulse Stream Implementation in TypeScript\nDESCRIPTION: Demonstrates how to use Prisma Pulse's stream() API to subscribe to data change events from your database. This example shows the basic implementation for receiving all events from the User model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/prisma-pulse.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = await prisma.user.stream()\n\nfor await (const event of stream) {\n  console.log('just received an event:', event)\n}\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Automatic Optimistic Update in SWR Query Hook\nDESCRIPTION: Example of opting out of automatic optimistic updates for a specific query using the optimisticUpdate option in a ZenStack-generated SWR query hook.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/swr.mdx#2025-04-10_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// arguments are query args, query options, and optimisticUpdate\nconst { data } = useFindManyPost(\n    { where: { published: true } },\n    { optimisticUpdate: false }\n);\n```\n\n----------------------------------------\n\nTITLE: Comparing Post Model Creation With and Without Auth() in Default()\nDESCRIPTION: This code snippet demonstrates how the Auth() in Default() feature reduces code duplication by automatically assigning the ownerId based on the authenticated user, eliminating the need to explicitly connect the owner in the create operation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/v2-stories/index.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n//schema.zmodel\nmodel Post {\n  ...\n  owner User @relation(fields: [ownerId], references: [id])\n  ownerId Int\n}\n\n//xxx.ts\nconst db = enhance(prisma, { user });\nawait db.post.create({\n  data: {\n   owner: { connect: { id: user.id } },\n   title: 'Post1'\n  }\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\n//schema.zmodel\nmodel Post {\n  ...\n  owner User @relation(fields: [ownerId], references: [id])\n  ownerId Int @default(auth().id) // <- assign ownerId automatically\n}\n\n//xxx.ts\nconst db = enhance(prisma, { user });\nawait db.post.create({ data: { title: 'Post1' } });\n```\n\n----------------------------------------\n\nTITLE: Defining ZenStack Schema with SWR Hooks Plugin\nDESCRIPTION: ZenStack schema definition including the SWR hooks plugin configuration and model definitions for User and Post entities with access control rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/swr.mdx#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin hooks {\n  provider = '@zenstackhq/swr'\n  output = \"./src/lib/hooks\"\n}\n\nmodel User {\n  id            String    @id @default(cuid())\n  email         String\n  posts         Post[]\n\n  // everyone can signup, and user profile is also publicly readable\n  @@allow('create,read', true)\n}\n\nmodel Post {\n  id        String @id @default(cuid())\n  title     String\n  published Boolean @default(false)\n  author    User @relation(fields: [authorId], references: [id])\n  authorId  String\n\n  // author has full access\n  @@allow('all', auth() == author)\n\n  // logged-in users can view published posts\n  @@allow('read', auth() != null && published)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth in a Next.js API Route\nDESCRIPTION: Implementation of NextAuth configuration as a Next.js API route. It sets up authentication with a credentials provider and integrates with Prisma as the database adapter for user storage.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/firebase-alternative/index.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth, { type NextAuthOptions } from 'next-auth';\nimport { PrismaAdapter } from '@next-auth/prisma-adapter';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport { prisma } from '../../../server/db';\nimport type { PrismaClient } from '@prisma/client';\n\nexport const authOptions: NextAuthOptions = {\n  ...\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    CredentialsProvider({\n      credentials: {\n        email: { type: 'email'},\n        password: { type: 'password' },\n      },\n      authorize: authorize(prisma),\n    }),\n  ],\n};\n\nfunction authorize(prisma: PrismaClient) {\n  return async (\n    credentials: Record<'email' | 'password', string> | undefined\n  ) => {\n    // verify email password against database\n    ..\n  };\n}\n\nexport default NextAuth(authOptions);\n```\n\n----------------------------------------\n\nTITLE: Using Member Access Expression in ZenStack Models\nDESCRIPTION: Demonstrates accessing fields from an expression in policy rules. Member access expressions allow drilling down into complex objects to access their properties.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id Int @id\n    published Boolean\n    @@allow('read', auth().role == 'READ') // `auth().role` is a Member Access Expression\n}\n```\n\n----------------------------------------\n\nTITLE: Managing To-One Relationships in JSON:API\nDESCRIPTION: Example of replacing a single author relationship for a post using PUT request. Shows how to structure single relationship data.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": { \"type\": \"user\", \"id\": \"2\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Model from Prisma Client in ZModel\nDESCRIPTION: Excludes a model from the Prisma Client, useful for models that should not be updated by Prisma users.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_24\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @@ignore()\n```\n\n----------------------------------------\n\nTITLE: Complex Data Type Serialization Request Example\nDESCRIPTION: Example of a POST request with serialized bytes data using superjson metadata for proper type handling.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"type\": \"post\",\n        \"attributes\": {\n            \"bytes\": \"AQID\"\n        }\n    },\n    \"meta\": { \n        \"serialization\": {\"values\": { \"data.attributes.bytes\": [[ \"custom\", \"Bytes\"]] } } \n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Basic Prisma Relation Model Example\nDESCRIPTION: Demonstrates basic relation modeling in Prisma between User and Post models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/polymorphism.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  posts Post[]\n}\n\nmodel Post {\n  id Int @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title String\n  owner User @relation(fields: [ownerId], references: [id])\n  ownerId Int\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Multi-Tenant Data Model in ZModel\nDESCRIPTION: A basic Prisma/ZModel schema defining User, Space, SpaceUser and Post models for a multi-tenant application. This establishes the relationships between users, spaces (tenants), and posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/multi-tenant/index.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id @default(uuid())\n    name String?\n    spaces SpaceUser[]\n    posts Post[]\n}\n\nmodel Space {\n    id String @id @default(uuid())\n    name String\n    members SpaceUser[]\n    posts Post[]\n}\n\nmodel SpaceUser {\n    id String @id @default(uuid())\n    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)\n    spaceId String\n    user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n    userId String\n}\n\nmodel Post {\n    id String @id @default(uuid())\n    title String\n    content String?\n    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n    ownerId String\n    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)\n    spaceId String\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Model-Level Policies with Field-Level Policies\nDESCRIPTION: Demonstrates how to use the override parameter (third argument) in field-level policies to allow access to a field even when model-level policies would deny access.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.7-field-level.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    ...\n    published Boolean @allow('update', auth().role == EDITOR, true)\n\n    @@allow('update', !published)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js API Routes with ZenStack\nDESCRIPTION: A TypeScript file that sets up API routes for database operations using ZenStack's NextRequestHandler. This code creates a set of REST endpoints that mirror PrismaClient's functionality.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/react-table/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from '@/server/db';\nimport { NextRequestHandler } from '@zenstackhq/server/next';\n\nconst handler = NextRequestHandler({\n  getPrisma: () => prisma,\n  useAppDir: true,\n});\n\nexport {\n  handler as DELETE,\n  handler as GET,\n  handler as PATCH,\n  handler as POST,\n  handler as PUT,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Credentials Provider in TypeScript\nDESCRIPTION: Setting up NextAuth authentication options with a Credentials provider, including session handling and user authorization logic using bcryptjs for password comparison.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/next-rsc-blog/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compare } from \"bcryptjs\";\n\nexport const authOptions: NextAuthOptions = {\n  session: {\n    strategy: \"jwt\",\n  },\n  callbacks: {\n    session({ session, token }) {\n      if (session.user) {\n        session.user.id = token.sub!;\n      }\n      return session;\n    },\n  },\n  adapter: PrismaAdapter(db),\n  providers: [\n    CredentialsProvider({\n      credentials: {\n        email: { type: \"email\" },\n        password: { type: \"password\" },\n      },\n      authorize,\n    }),\n  ],\n};\n\nasync function authorize(\n  credentials: Record<\"email\" | \"password\", string> | undefined,\n) {\n  if (!credentials?.email) {\n    throw new Error('\"email\" is required in credentials');\n  }\n\n  if (!credentials?.password) {\n    throw new Error('\"password\" is required in credentials');\n  }\n\n  const maybeUser = await db.user.findFirst({\n    where: { email: credentials.email },\n    select: { id: true, email: true, password: true },\n  });\n\n  if (!maybeUser) {\n    return null;\n  }\n\n  if (!await compare(credentials.password, maybeUser.password)) {\n    return null;\n  }\n\n  return { id: maybeUser.id, email: maybeUser.email };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Enhanced Prisma Client with Clerk Auth (Next.js App Router)\nDESCRIPTION: This snippet demonstrates how to create an enhanced Prisma client that enforces access policies using Clerk authentication in a Next.js App Router setup.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/clerk.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\nimport { auth } from \"@clerk/nextjs/server\";\nimport { prisma } from '../lib/db';\n\nasync function getPrisma() {\n  const authObject = await auth();\n  // create a wrapper of Prisma client that enforces access policy\n  return enhance(prisma, {\n    user: authObject.userId ? { id: authObject.userId } : undefined,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphic Content Rendering in React\nDESCRIPTION: This code defines a PolymorphicContent component that dynamically renders content based on its type. It uses the imported ContentComponents to lookup the appropriate component for each content type.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nconst PolymorphicContent = ({\n  content,\n}: {\n  content: Content;\n}) => {\n  const Component = ContentComponents[content.contentType];\n  return Component ? <Component content={content} /> : null;\n};\n```\n\n----------------------------------------\n\nTITLE: Complex Data Type Serialization Request Example\nDESCRIPTION: Example of a POST request with serialized bytes data using superjson metadata for proper type handling.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"type\": \"post\",\n        \"attributes\": {\n            \"bytes\": \"AQID\"\n        }\n    },\n    \"meta\": { \n        \"serialization\": {\"values\": { \"data.attributes.bytes\": [[ \"custom\", \"Bytes\"]] } } \n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for ZenStack Compatibility\nDESCRIPTION: JavaScript configuration to exclude ZenStack packages from Next.js server component compilation, addressing compatibility issues in Next.js 13.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/next.mdx#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    experimental: {\n        serverComponentsExternalPackages: [\n            \"@zenstackhq/runtime\",\n            \"@zenstackhq/server\",\n        ],\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing field modification with post-update rules in ZenStack\nDESCRIPTION: This snippet demonstrates how to use a post-update rule to prevent modification of a specific field (owner) while still allowing updates to other fields in a List model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.6-post-update.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel List {\n    ...\n\n    @@deny('update', future().owner != owner)\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing field modification with post-update rules in ZenStack\nDESCRIPTION: This snippet demonstrates how to use a post-update rule to prevent modification of a specific field (owner) while still allowing updates to other fields in a List model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.6-post-update.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel List {\n    ...\n\n    @@deny('update', future().owner != owner)\n}\n```\n\n----------------------------------------\n\nTITLE: Edge Function Deployment Error Messages\nDESCRIPTION: Sample error messages encountered when deploying to Vercel Edge, demonstrating the cryptic nature of errors that can occur with edge functions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/adapt-to-edge/index.md#2025-04-10_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n[GET ] /api/... reason=INTERNAL_EDGE_FUNCTION_INVOCATION_FAILED, status=500, upstream_status=500, user_error=false\n[POST] /api/... reason=EDGE_FUNCTION_INVOCATION_TIMEOUT, status=504, user_error=true\n```\n\n----------------------------------------\n\nTITLE: Checking if Anonymous User Can Read Posts\nDESCRIPTION: Example of using the check API to determine if an anonymous user can read any posts, which would influence whether to display a Posts UI tab for non-logged-in users.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/check-permission.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma); // enhance without a user context\nawait canRead = await db.post.check({ operation: 'read' });\n```\n\n----------------------------------------\n\nTITLE: Delegating Single Operation with check() in ZModel\nDESCRIPTION: Example of using the check() function to delegate a single operation kind (read) to the author model relationship in a Post model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_22\n\nLANGUAGE: zmodel\nCODE:\n```\n// delegating a single operation kind\nmodel Post {\n    id Int @id\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int\n\n    // delegate \"read\" check to the author, equivalent to\n    //     @@allow('read', check(author))\n    @@allow('read', check(author, 'read'))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Enhanced Prisma Client\nDESCRIPTION: Setup of enhanced Prisma client with ZenStack runtime for enforcing access policies and validation\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\nimport type { GetServerSidePropsContext } from 'next';\nimport { getServerAuthSession } from './auth';\nimport { prisma } from './db';\n\nexport async function getEnhancedPrisma(ctx: {\n    req: GetServerSidePropsContext['req'];\n    res: GetServerSidePropsContext['res'];\n}) {\n    const session = await getServerAuthSession(ctx);\n    return enhance(prisma, { user: session?.user });\n}\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Query Operations\nDESCRIPTION: Shows how to perform various query operations with polymorphic models using enhanced PrismaClient.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/polymorphism.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user });\n\nconst user = await db.user.create({ data: { id: 1 } });\n\nconst post = await db.post.create({\n  data: {\n    owner: { connect: { id: user.id } }, \n    title: 'Post1' \n  },\n});\n\nconst video = await db.video.create({\n  data: {\n    owner: { connect: { id: user.id } },\n    name: 'Video1',\n    duration: 100,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Permissions with Django-Guardian\nDESCRIPTION: Demonstrates how to assign view and change permissions to users and groups using django-guardian's assign_perm API.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/django-guardian/index.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User, Group\nfrom guardian.shortcuts import assign_perm\n\n# establishing permission between a user and a post\nuser1 = User.objects.create(username='user1')\npost1 = Post.object.create(title='My Post', slug='post1')\nassign_perm('view_post', user1, post1)\nassign_perm('change_post', user1, post1)\n\n# establishing permission between a group and a post\ngroup1 = Group.objects.create(name='group1')\nuser1.groups.add(group1)\nassign_perm('view_post', group1, post1)\nassign_perm('change_post', group1, post1)\n```\n\n----------------------------------------\n\nTITLE: Implementing the Home Page with Post Creation and Listing\nDESCRIPTION: Creates the main home page that lists all posts and provides a form to create new posts. Uses ZenStack's generated hooks for fetching and creating posts, and handles user authentication state.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nuxt.mdx#2025-04-10_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useFindManyPost, useCreatePost } from '~/lib/hooks';\n\nconst title = ref('');\nconst createPost = useCreatePost();\nconst { session } = useAuth();\n\nconst onCreatePost = async () => {\n    try {\n        await createPost.mutateAsync({\n            data: {\n                author: { connect: { id: session.value!.id } },\n                title: title.value,\n                content: 'My awesome content',\n            },\n        });\n        title.value = '';\n    } catch (err: any) {\n        alert(err.info?.message ?? err);\n    }\n};\nconst { data: posts } = useFindManyPost({ include: { author: true } });\n</script>\n\n<template>\n    <h1 class=\"text-2xl font-bold my-4\">My Awesome Blog</h1>\n    <div v-if=\"session?.id\">\n        <div class=\"flex justify-center\">\n            <NTextInput\n                v-model=\"title\"\n                placeholder=\"Title\"\n                class=\"w-1/2 mr-4\"\n                @keyup.enter=\"onCreatePost\"\n            />\n            <NButton @click=\"onCreatePost\">Create Post</NButton>\n        </div>\n        <ul v-if=\"posts\" class=\"py-8 space-y-2\">\n            <li v-for=\"post in posts\" :key=\"post.id\">\n                <Post v-bind=\"post\" />\n            </li>\n        </ul>\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating redwood.toml for ZenStack CLI plugin\nDESCRIPTION: Configuration in redwood.toml to allow the ZenStack CLI plugin for RedwoodJS.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/redwood.md#2025-04-10_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n[[experimental.cli.plugins]]\npackage = \"@zenstackhq/redwood\"\nenabled = true\n```\n\n----------------------------------------\n\nTITLE: Embedding Related Entities in PostgREST Queries\nDESCRIPTION: Example demonstrating how to fetch related entities in a single query using PostgREST's embedding syntax, which allows selecting specific fields from both the primary and related entities.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/postgrest.mdx#2025-04-10_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// Get users, selecting their last names\n// together with titles of their blog posts\nGET /user?select=last_name,post(title)\n```\n\n----------------------------------------\n\nTITLE: Implementing Admin Access Policies in ZenStack Base Model\nDESCRIPTION: Updating the SpaceBase abstract model with access policies that grant admin users full permissions across all derived models. This demonstrates how ZenStack enables centralized policy management.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/technical-debt/index.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nabstract model SpaceBase {\n    ...\n    //allow admin user to do anything\n    @@allow('all', space.members?[role == ADMIN])\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing currentOperation() Function in ZModel\nDESCRIPTION: The currentOperation() function returns the operation type (create, read, update, delete) for which a policy rule is defined, with optional casing control.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_34\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction currentOperation(casing: String?): String {}\n```\n\n----------------------------------------\n\nTITLE: Generated PostCreateSchema Zod Definition\nDESCRIPTION: Generated Zod schema for validating input data when creating a Post, including scalar fields and foreign key fields for establishing relationships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/zod.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst PostCreateSchema = z.object({\n  id: z.number().optional(),\n  title: z.string().min(10).max(255),\n  published: z.boolean().optional(),\n  createdAt: z.date().optional(),\n  updatedAt: z.date().optional(),\n  authorId: z.number(),\n});\n```\n\n----------------------------------------\n\nTITLE: Enhanced Prisma Client Usage Example\nDESCRIPTION: Shows how to create a new user using an enhanced Prisma client, demonstrating the secure-by-default behavior that will result in a runtime error without explicit access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient();\nconst db = enhance(prisma);\nawait db.user.create({ data: { email: 'zen@stack.dev'} });\n```\n\n----------------------------------------\n\nTITLE: Using Compound IDs in GET Requests\nDESCRIPTION: Example of how to use the synthesized compound ID format when making requests to endpoints that require an ID parameter.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\nGET /post/1_2\n```\n\n----------------------------------------\n\nTITLE: Implementing Model-Level Validation Rules\nDESCRIPTION: Demonstrates how to use the @@validate attribute to define validation rules that involve multiple fields, such as conditional validation based on user activation status.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/5-data-validation.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id\n    email String? @unique\n    activated Boolean @default(false)\n    @@validate(!activated || email != null, \"activated user must have an email\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Model-Level Validation Rules\nDESCRIPTION: Demonstrates how to use the @@validate attribute to define validation rules that involve multiple fields, such as conditional validation based on user activation status.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/5-data-validation.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id\n    email String? @unique\n    activated Boolean @default(false)\n    @@validate(!activated || email != null, \"activated user must have an email\")\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RPC API Usage with HTTP Requests in TypeScript\nDESCRIPTION: A comprehensive example showing how to use the RPC flavor API to perform common database operations including finding all posts (with optional filtering and inclusion of relations), creating, updating, and deleting posts. The example demonstrates both GET and POST HTTP requests with proper formatting of parameters.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/1-api-flavor/1.1-rpc.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// find all posts\nGET /api/model/post/findMany\n=> [{ id: 1, title: 'Hello World', ... }, ...}]\n\n// find all published posts, the \"q\" parameter is `{\"where\":{\"published\":true}}` url-encoded\nGET /api/model/post/findMany?q=%7B%22where%22%3A%7B%22published%22%3Atrue%7D%7D\n=> [{ id: 1, title: 'Hello World', ... }, ...}]\n\n// find all posts with their authors, the \"q\" parameter is `{\"include\":{\"author\":true}}` url-encoded\nGET /api/model/post/findMany?q=%7B%22include%22%3A%7B%22author%22%3Atrue%7D%7D\n=> [{ id: 1, title: 'Hello World', author: { id: 1, name: 'Joey', ... } }, ...}]\n\n// create a post for user#1\nPOST /api/model/post/create\n{\n    \"data\": {\n        \"title\": \"Hello World\",\n        \"author\": { \"connect\": { \"id\": 1 } }\n    }\n}\n\n// update a post\nPOST /api/model/post/update\n{\n    \"where\": { \"id\": 1 },\n    \"data\": { \"title\": \"Hello New World!\" }\n}\n\n// delete a post\nDELETE /api/model/post/delete\n{\n    \"where\": { \"id\": 1 }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing startsWith() Function in ZModel\nDESCRIPTION: The startsWith() function checks if a specified field starts with a search string. It's equivalent to Prisma's startsWith operator.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_27\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction startsWith(field: String, search: String): Boolean {}\n```\n\n----------------------------------------\n\nTITLE: Adding Computed Fields to Query Results with Prisma Client Extensions\nDESCRIPTION: Shows how to define computed fields on query results. This example adds a fullName field to User objects that combines firstName and lastName properties, automatically computing it when users are retrieved.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-client-extensions/index.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst xprisma = prisma.$extends({\n    result: {\n        user: {\n            fullName: {\n                // the dependencies\n                needs: { firstName: true, lastName: true },\n                compute(user) {\n                    // the computation logic\n                    return `${user.firstName} ${user.lastName}`;\n                },\n            },\n        },\n    },\n});\n\nconst user = await xprisma.user.findFirst();\nconsole.log(user.fullName);\n```\n\n----------------------------------------\n\nTITLE: Potential Implementation for *-to-many Relations with Check Functions\nDESCRIPTION: Two possible approaches for extending the check function to work with to-many relations: using specialized functions like checkSome or leveraging collection predicate expressions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/check-function/index.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Parent {\n  children Child[]\n\n  @@allow('read', checkSome(children, 'read'))\n}\n```\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Parent {\n  children Child[]\n\n  // check if at least one child is readable\n  @@allow('read', children?[child, check(child, 'read')])\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic @@allow Model-Level Policy in ZenStack\nDESCRIPTION: Example of using the @@allow attribute to restrict read access to only published posts. This demonstrates the basic syntax for model-level access policies in ZenStack.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.1-model-level.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id Int @id\n    title String\n    published Boolean @default(false)\n\n    // published posts are readable\n    @@allow('read', published)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating tRPC App Router\nDESCRIPTION: TypeScript code for creating the main tRPC app router using the generated CRUD router and initializing tRPC.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/trpc.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouter as createCRUDRouter } from './generated/routers';\nimport { initTRPC } from '@trpc/server';\nimport { type Context } from '../context';\n\nconst t = initTRPC.context<Context>().create();\n\nexport const appRouter = createCRUDRouter(t.router, t.procedure);\nexport type AppRouter = typeof appRouter;\n```\n\n----------------------------------------\n\nTITLE: Using ZenStack's Enhanced Type Utility with PrismaClient\nDESCRIPTION: This snippet shows how to use the Enhanced utility type to infer the enhanced PrismaClient type from an original PrismaClient instance. This approach works with both raw PrismaClient instances and those with Prisma Client Extensions installed.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/enhanced-types.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nimport type { Enhanced } from '@zenstackhq/runtime';\n\nconst prisma = new PrismaClient();\n\ntype EnhancedPrismaClient = Enhanced<typeof prisma>;\n```\n\n----------------------------------------\n\nTITLE: Rendering Different Content Types with Conditional Logic\nDESCRIPTION: Example showing how to render different content types based on the contentType discriminator field using if-else statements, which is error-prone and requires optional chaining when accessing concrete type fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n{contents?.map((content) => {\n  let concreteContent = <></>;\n  if (content.contentType == \"Post\") {\n    concreteContent = <span>{content.post?.title}</span>;\n  } else if (content.contentType == \"Image\") {\n    concreteContent = (\n      <Image src= {content.image?.url || \"\"} alt={content.id} />\n    );\n  }\n  ...\n })}\n```\n\n----------------------------------------\n\nTITLE: Using withOmit Enhancer in TypeScript\nDESCRIPTION: Example showing how to enhance a Prisma client with withOmit functionality, which automatically removes fields marked with @omit from query results.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/runtime-api.md#2025-04-10_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst enhanced = withOmit(prisma);\n// password field is removed from user entities\nconst user = enhanced.user.findMany();\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Interceptor\nDESCRIPTION: TypeScript code for implementing an authentication interceptor in NestJS using ClsService.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nestjs.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { ClsService } from 'nestjs-cls';\n\n@Injectable()\nexport class AuthInterceptor implements NestInterceptor {\n  constructor(private readonly cls: ClsService) {}\n\n  async intercept(context: ExecutionContext, next: CallHandler) {\n    const request = context.switchToHttp().getRequest();\n    const userId = request.headers['x-user-id'];\n    if (userId) {\n      this.cls.set('auth', { id: Number(userId) });\n    }\n    return next.handle();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting automatic CRUD API with Auth.js and ZenStack's Next.js adapter\nDESCRIPTION: This snippet demonstrates how to create a complete set of authenticated CRUD API endpoints using ZenStack's Next.js server adapter with Auth.js integration for handling user authentication.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/next-auth.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\nimport { NextRequestHandler } from '@zenstackhq/server/next';\nimport { auth } from '~/auth';\nimport { prisma } from '~/db';\n\nasync function getPrisma() {\n  const authObj = await auth();\n  return enhance(prisma, { user: authObj?.user });\n}\n\nconst handler = NextRequestHandler({ getPrisma, useAppDir: true });\n\nexport {\n  handler as DELETE,\n  handler as GET,\n  handler as PATCH,\n  handler as POST,\n  handler as PUT\n};\n```\n\n----------------------------------------\n\nTITLE: Using Documentation Comments in ZModel\nDESCRIPTION: Example demonstrating how to use triple-slash comments as documentation for models and fields, which appear as tooltips in IDEs and are included in the generated Prisma schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_52\n\nLANGUAGE: zmodel\nCODE:\n```\n/// A user model\nmodel User {\n    id String @id\n\n    /// The user's email\n    email String @unique\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Failure Error Output for JSON Fields\nDESCRIPTION: Shows the error message that appears when a JSON field value fails validation constraints at runtime. The error identifies which field failed validation and what rule was violated.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/typing-json.md#2025-04-10_snippet_8\n\nLANGUAGE: plain\nCODE:\n```\nError calling enhanced Prisma method `user.create`: denied by policy: user\nentities failed 'create' check, input failed validation: Validation error:\nNumber must be greater than or equal to 18 at \"profile.age\"\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack Server Adapter for Nuxt\nDESCRIPTION: Command to install the ZenStack server adapter package for integrating with Nuxt.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nuxt.mdx#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/server\n```\n\n----------------------------------------\n\nTITLE: Recursive Relations Pattern with Folder Permissions Example\nDESCRIPTION: An example of a recursive relation model for a folder structure with inherited permissions, demonstrating how the check function could potentially be used with recursive relationships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/check-function/index.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Folder {\n  parent Folder?\n  children Folder[]\n  permissions Permission[]\n\n  // a folder is readable if it's configured with a permission or if its parent is readable\n  @@allow('read', check(parent) || permissions?[type == 'read' && user == auth()])\n}\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing for Polymorphic Entities in TypeScript\nDESCRIPTION: Demonstrates how type narrowing can be achieved for polymorphic entities using a discriminated union type returned by the enhanced PrismaClient.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/polymorphism/index.md#2025-04-10_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntype AssetUnion = \n  ({ type: 'Video' } & Video) \n  | ({ type: 'Image' } & Image) \n  | ...;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// asset is typed as AssetUnion\nconst asset = await db.asset.findFirst();\n\nif (asset.type === 'Video') {\n  console.log(asset.duration);\n} else if (asset.type === 'Image') {\n  console.log(asset.format);\n} else {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Installed ZenStack Packages\nDESCRIPTION: Command to list all installed ZenStack packages and their versions, and check for updates.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack info\n```\n\n----------------------------------------\n\nTITLE: Implementing ZenStack with Enhanced Prisma for Access Policies\nDESCRIPTION: Express implementation with ZenStack middleware that uses enhanced Prisma Client to enforce access policies. It extracts the user ID from a custom header for authentication.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nimport { enhance } from '@zenstackhq/runtime';\nimport { ZenStackMiddleware } from '@zenstackhq/server/express';\nimport express, { Request } from 'express';\n\nconst app = express();\napp.use(express.json());\n\nconst prisma = new PrismaClient();\n\nfunction getUser(req: Request) {\n    if (req.headers['x-user-id']) {\n        return { id: parseInt(req.headers['x-user-id'] as string) };\n    } else {\n        return undefined;\n    }\n}\n\napp.use('/api/rpc', \n    ZenStackMiddleware({ \n        getPrisma: (req) => enhance(prisma, { user: getUser(req) })\n    })\n);\n\napp.listen(3000, () => console.log('🚀 Server ready at: http://localhost:3000'));\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Attributes with ZenStack in ZModel\nDESCRIPTION: This snippet illustrates how to use ZenStack's custom attributes in a ZModel schema, which is a superset of Prisma schema. It shows cleaner syntax for defining model-level and field-level attributes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/custom-attributes.mdx#2025-04-10_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n    id        String @id\n    email     String @email\n    password  String @password @omit\n    // everyone can signup, and user profile is also publicly readable\n    @@allow('create,read', true)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZenStack Plugin for TanStack Query Hook Generation\nDESCRIPTION: Demonstrates how to configure the ZenStack plugin to generate TanStack Query hooks for React, Vue, or Svelte.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-tanstack/index.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin hooks {\n  provider = '@zenstackhq/tanstack-query'\n  output = './src/lib/hooks'\n  target = 'react' // target framework: \"react\", \"vue\", or \"svelte\"\n}\n```\n\n----------------------------------------\n\nTITLE: Delegating Field Access Control with check() in ZModel\nDESCRIPTION: Example of using the check() function to delegate field-level access control for a specific field (title) in a Post model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_24\n\nLANGUAGE: zmodel\nCODE:\n```\n// delegating field access control\nmodel Post {\n    id Int @id\n    title String @allow('update', check(author))\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Complex Access Control\nDESCRIPTION: This SQL query demonstrates how to implement the complex access control rule (users with more than one post) that can't be expressed in Prisma. It shows the flexibility of raw SQL compared to Prisma's query API.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/next-chapter-1/index.md#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT u.*\nFROM \"User\" u\nJOIN \"Post\" p ON u.\"id\" = p.\"authorId\"\nGROUP BY u.\"id\"\nHAVING COUNT(p.\"id\") > 1;\n```\n\n----------------------------------------\n\nTITLE: Using future() function for post-update revision check in ZenStack\nDESCRIPTION: This snippet demonstrates how to create a post-update rule that ensures the revision number can only be increased, not decreased, during an update operation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.6-post-update.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    ...\n    revision Int\n\n    @@allow('update', future().revision > revision)\n}\n```\n\n----------------------------------------\n\nTITLE: Using future() Function in ZenStack Update Rules\nDESCRIPTION: Example demonstrating how to use the future() function in update rules to prevent changing a post's author during updates. The rule ensures only the author can update a post and the author cannot be changed.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_45\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id String @id @default(uuid())\n    title String @length(1, 100)\n    author User @relation(fields: [authorId], references: [id], onDelete: Cascade)\n    authorId String\n\n    // update can only be done by the author, and is not allowed to change author\n    @@allow('update', author == auth() && future().author == author)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Field-Level Validation in ZModel\nDESCRIPTION: Demonstrates how to use field-level validation attributes in a User model to enforce data validity constraints like email format, URL validation, password length, and age ranges.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/5-data-validation.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id\n    email String @unique @email @endsWith('@zenstack.dev')\n    imgUrl String? @url\n    password String @length(min: 8, max: 32)\n    age Int @gt(0) @lt(120)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Generator in ZModel\nDESCRIPTION: Demonstrates how to set up a generator for creating assets from the schema. This example configures the Prisma Client JavaScript generator with a custom output path.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"./generated/prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Enhancement Kinds for Prisma Client\nDESCRIPTION: Demonstrates how to selectively enable specific enhancement kinds when creating an enhanced Prisma Client, in this case only enabling policy enforcement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/3-enhancement.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user: getSessionUser() }, { kinds: ['policy'] });\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Level Security in PostgreSQL for Blog Posts\nDESCRIPTION: SQL code demonstrating how to set up Row Level Security (RLS) policies in Supabase for controlling access to blog posts. Shows policies for owner access and public read access to published posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/supabase.mdx#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# Simple RLS for blog posts\n\n# owner has full access to her own posts\nCREATE POLICY post_owner_policy ON post\n    USING (owner = current_user);\n\n# all users can read published posts\nCREATE POLICY post_read_policy ON post FOR SELECT\n    USING (published = true);\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Complex Conditions Using Prisma in TypeScript\nDESCRIPTION: This snippet shows how to use Prisma's graph-like query syntax to fetch posts based on multiple conditions including publication status, authorship, and user roles.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/drizzle-prisma/index.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nprisma.post.findMany({\n    include: { author: true },\n    where: {\n        spaceId: space.id,\n        OR: [\n            // 1. published and current user is a member of the space\n            {\n                published: true,\n                space: { members: { some: { userId: req.uid! } } },\n            },            \n            // 2. authored by the current user\n            { authorId: req.uid! },\n            // 3. belongs to space owned by the current user\n            { space: { ownerId: req.uid! } },\n            // 4. belongs to space where the current user is an admin\n            { \n                space: {\n                    members: {\n                        some: {\n                            userId: req.uid!,\n                            role: 'ADMIN' \n                        }\n                    }\n                }\n            }\n        ]\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Signup Page Component\nDESCRIPTION: SvelteKit component implementing the signup form UI with error handling\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/sveltekit.mdx#2025-04-10_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n    import { enhance } from '$app/forms';\n    import type { ActionData } from './$types';\n    export let form: ActionData;\n</script>\n\n<div class=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\"\n>\n    <h1 class=\"text-5xl font-extrabold text-white\">Sign up</h1>\n    <form class=\"mt-16 flex flex-col gap-8 text-2xl\" method=\"post\" use:enhance>\n        {#if form?.dup}\n            <p class=\"text-red-600 my-2\">Email aready registered!</p>\n        {/if}\n        <div>\n            <label for=\"email\" class=\"inline-block w-32 text-white\"> Email </label>\n            <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                value={form?.email ?? ''}\n                class=\"ml-4 w-72 rounded border p-2\"\n            />\n        </div>\n        <div>\n            <label for=\"password\" class=\"inline-block w-32 text-white\"> Password </label>\n            <input id=\"password\" name=\"password\" type=\"password\" class=\"ml-4 w-72 rounded border p-2\" />\n        </div>\n        <input\n            type=\"submit\"\n            value=\"Create account\"\n            class=\"cursor-pointer rounded border border-gray-500 py-4 text-white\"\n        />\n        <div class=\"mt-2 text-base font-medium text-gray-300\">\n            Already have an account?{' '}\n            <a href=\"/signin\" class=\"text-primary-700 underline\"> Login here </a>\n        </div>\n    </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Schema and Updating Database\nDESCRIPTION: Commands to generate Prisma schema from ZenStack model and push schema changes to the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nextjs.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate && npx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Implementing Field-Level Validation in ZModel\nDESCRIPTION: Demonstrates how to use field-level validation attributes in a User model to enforce data validity constraints like email format, URL validation, password length, and age ranges.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/5-data-validation.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id\n    email String @unique @email @endsWith('@zenstack.dev')\n    imgUrl String? @url\n    password String @length(min: 8, max: 32)\n    age Int @gt(0) @lt(120)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Validation Attributes to JSON Field Types in ZModel\nDESCRIPTION: Shows how to add data validation attributes to typed JSON fields. This example adds minimum and maximum value constraints to an integer field in a type declaration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/typing-json.md#2025-04-10_snippet_6\n\nLANGUAGE: zmodel\nCODE:\n```\ntype Profile {\n  name String\n  age Int @gte(18) @lt(150) // must be between 18 and 150\n  address Address?\n}\n```\n\n----------------------------------------\n\nTITLE: Example Markdown Output from Generator Plugin\nDESCRIPTION: A sample of the markdown documentation that will be generated by the custom plugin. It includes a title, description, table of contents, and access control rules for each model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part2/3-writing-plugins.md#2025-04-10_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n# My Awesome Todo App\n\nA multi-tenant Todo app built with ZenStack.\n\n- [Space](#space)\n- [User](#user)\n- ...\n\n## Space\n\n- CREATE\n  - ❌ auth() == null\n  - ✅ true\n- READ\n  - ❌ auth() == null\n  - ✅ members?[user == auth()]\n- UPDATE\n  - ❌ auth() == null\n  - ✅ members?[user == auth() && role == ADMIN]\n- DELETE\n  - ❌ auth() == null\n  - ✅ members?[user == auth() && role == ADMIN]\n\n## User\n\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Express.js Server Entry Point\nDESCRIPTION: Implements the main Express.js server file (app.ts) with a basic route and JSON body parser.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\n\nconst app = express();\n\n// enable JSON body parser\napp.use(express.json());\n\napp.get('/', (req, res) => {\n    res.send('Hello World!');\n});\n\napp.listen(3000, () => console.log('🚀 Server ready at: http://localhost:3000'));\n```\n\n----------------------------------------\n\nTITLE: Creating a List Using RPC API with POST Request\nDESCRIPTION: Curl command to create a new List record by making a POST request to the ZenStack RPC API with JSON data in the request body.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST \"http://localhost:3000/api/rpc/list/create\" \\\n    -d '{\"data\":{\"title\":\"Jobs to be done\",\"owner\":{\"connect\":{\"id\":2}},\"space\":{\"connect\":{\"id\":1}}}}' \\\n    -H 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Field in Prisma Schema\nDESCRIPTION: Example of a basic Prisma schema defining a model with a JSON field for storing image metadata.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/json-typing/index.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Image {\n  id Int @id @default(autoincrement())\n  metadata Json\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Express and ZenStack Server Dependencies\nDESCRIPTION: NPM commands for installing Express and ZenStack server package dependencies for creating a server with API endpoints.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install express @zenstackhq/server\nnpm install --save-dev @types/express tsx\n```\n\n----------------------------------------\n\nTITLE: Creating Database Trigger for User Synchronization in SQL\nDESCRIPTION: SQL code to create a function and trigger for synchronizing new users from Supabase Auth to the public User table. This ensures that the User table stays in sync with Supabase Auth.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/supabase.md#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- inserts a row into public.\"User\"\ncreate function public.handle_new_user()\nreturns trigger\nlanguage plpgsql\nsecurity definer set search_path = public\nas $$\nbegin\n  insert into public.\"User\" (id)\n  values (new.id);\n  return new;\nend;\n$$;\n\n-- trigger the function every time a user is created\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using PNPM package manager.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring tRPC Plugin in ZModel Schema\nDESCRIPTION: ZModel configuration for the tRPC plugin. It specifies the plugin provider and the output directory for generated tRPC routers.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/trpc.mdx#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin trpc {\n    provider = '@zenstackhq/trpc'\n    output = 'src/server/routers/generated'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for Blogging App\nDESCRIPTION: Prisma schema definition for the blogging app, including User, Post, Account, Session, and VerificationToken models. This schema sets up the database structure for the application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/refine-dev-backend/index.md#2025-04-10_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id            String    @id() @default(cuid())\n  name          String?\n  email         String?   @unique()\n  emailVerified DateTime?\n  image         String?\n  createdAt     DateTime  @default(now())\n  updatedAt     DateTime  @updatedAt()\n  accounts      Account[]\n  sessions      Session[]\n  password      String\n  posts         Post[]\n}\n\nmodel Post {\n  id        String   @id() @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt()\n  title     String\n  content   String\n  status    String   @default(\"draft\")\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  String\n}\n\nmodel Account {\n  ...\n}\n\nmodel Session {\n  ...\n}\n\nmodel VerificationToken {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using SWR Mutation Hooks in ZenStack V2 (TypeScript)\nDESCRIPTION: Demonstrates the changes in using mutation hooks with the SWR plugin in ZenStack V2. The legacy mutation functions are removed, and individual mutation hooks should be used instead.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/upgrade.md#2025-04-10_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMutatePost } from '@lib/hooks';\n\nconst { createPost } = useMutatePost();\nawait createPost({ data: {...} });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCreatePost } from '@lib/hooks';\n\nconst { trigger: createPost, isMutating } = useCreatePost();\nawait createPost({ data: {...} })\n```\n\n----------------------------------------\n\nTITLE: Adding Image Content Type to Polymorphic Structure\nDESCRIPTION: Shows how to extend the polymorphic content structure by adding a new Image content type. This demonstrates the flexibility of the table inheritance approach.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmodel Image {\n  id String @id @default(cuid())\n  url String\n  content Content @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)\n\n  // if \n  @@allow('create,delete', auth() == content.author)\n  // logged-in users can view \n  @@allow('read', auth() != null)\n}\n\nmodel Content {\n   ...\n   image Image?  // add 1-1 relation with image \n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RESTful API Handler in Next.js\nDESCRIPTION: Creates a Next.js API route handler that uses ZenStack's RESTful API handler for model operations. The handler is configured with a getPrisma function and an endpoint URL for generating resource links.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequestHandler } from '@zenstackhq/server/next';\nimport RestApiHandler from '@zenstackhq/server/api/rest';\nimport { getPrisma } from '../../lib/db';\n\nexport default NextRequestHandler({ \n    getPrisma,\n    handler: RestApiHandler({ endpoint: 'http://myhost/api' }) \n});\n```\n\n----------------------------------------\n\nTITLE: Generated Zod Post Schema\nDESCRIPTION: TypeScript code showing the generated Zod schema for basic Post model validation\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/zod.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst PostSchema = z.object({\n  id: z.number(),\n  title: z.string().min(10).max(255),\n  published: z.boolean(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  author: z.record(z.unknown()),\n  authorId: z.number(),\n}).partial();\n```\n\n----------------------------------------\n\nTITLE: Enhancement Context Type Definition in TypeScript\nDESCRIPTION: Type definition for the context parameter used in evaluating access policies, containing an optional user object that provides values for auth() function calls.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/runtime-api.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype EnhancementContext = {\n    user?: Record<string, unknown>\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Computed Fields with ZenStack Enhancement\nDESCRIPTION: Example of using computed fields with ZenStack enhancement. A myTitle computed field is added to the Post model that depends on the title field.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/client-extensions.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst extendedPrisma = prisma.$extends({\n  result: {\n    post: {\n      myTitle: {\n        needs: { title: true },\n        compute(post) {\n          return 'MyTitle: ' + post.title;\n        },\n      },\n    },\n  },\n});\n\nconst enhanced = enhance(extendedPrisma);\nconst post = await enhanced.post.findFirst();\n```\n\n----------------------------------------\n\nTITLE: Mounting ZenStack API in Nuxt Server Handler\nDESCRIPTION: Creates a Nuxt server event handler that enhances a Prisma client with ZenStack's access policies. This allows for secure CRUD operations through automatically generated API endpoints.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/nuxt.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\nimport { createEventHandler } from '@zenstackhq/server/nuxt';\nimport { getSessionUser } from '~/server/auth';\nimport { prisma } from '~/server/prisma';\n\nexport default createEventHandler({\n    getPrisma: async (event) => {\n        return enhance(prisma, { user: getSessionUser(event) });\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Field-Level Validation Rules in ZModel\nDESCRIPTION: Example showing how to use field-level validation attributes in a User model to validate email format, URL format, password length, and numeric ranges.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/5-data-validation.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id\n    email String @unique @email @endsWith('@zenstack.dev')\n    imgUrl String? @url\n    password String @length(min: 8, max: 32)\n    age Int @gt(0) @lt(120)\n}\n```\n\n----------------------------------------\n\nTITLE: Using has() Function for Array Fields in ZenStack\nDESCRIPTION: Demonstrates how to check if an array field contains a specific value. This example allows reading posts that have 'zenstack' in their tags array.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_9\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id Int @id\n    tags String[]\n    @@allow('read', has(tags, 'zenstack'))\n}\n```\n\n----------------------------------------\n\nTITLE: ZenStack Schema Definition\nDESCRIPTION: Example schema definition for a blog application with User and Post models including access control rules\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin hooks {\n  provider = '@zenstackhq/tanstack-query'\n  output = \"./src/lib/hooks\"\n  target = \"react\"\n}\n\nmodel User {\n  id            String    @id @default(cuid())\n  email         String\n  posts         Post[]\n\n  // everyone can signup, and user profile is also publicly readable\n  @@allow('create,read', true)\n}\n\nmodel Post {\n  id        String @id @default(cuid())\n  title     String\n  published Boolean @default(false)\n  author    User @relation(fields: [authorId], references: [id])\n  authorId  String\n\n  // author has full access\n  @@allow('all', auth() == author)\n\n  // logged-in users can view published posts\n  @@allow('read', auth() != null && published)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Password Field to User Model with ZenStack Attributes\nDESCRIPTION: Updates the User model to add a password field with @password and @omit attributes for secure authentication. The password will be hashed before saving and omitted from query results.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nmodel User\n{\n  ...\n  password String? @password @omit\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using ZenStack init Command\nDESCRIPTION: Command for initializing an existing project to use ZenStack, with arguments and available options.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/cli.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nzenstack init [options] [path]\n```\n\n----------------------------------------\n\nTITLE: Querying a Private List with RPC API\nDESCRIPTION: Command for finding a private List item using the ZenStack RPC API with URL-encoded query parameters.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/api/rpc/list/findFirst?q=%7B%22where%22%3A%7B%22private%22%3Atrue%7D%7D\"\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Vercel Edge Runtime Compatibility\nDESCRIPTION: Workaround for bcryptjs compatibility issues in Vercel Edge Runtime. This configuration avoids explicitly resolving the \"crypto\" module to prevent compilation errors.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/edge.md#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"browser\": {\n    \"crypto\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New User with PostgREST\nDESCRIPTION: Example showing how to insert a new user record using PostgREST's RESTful API by sending a POST request with JSON data containing the user's properties.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/postgrest.mdx#2025-04-10_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nPOST /user\n{ \"name\": \"J Doe\", \"age\": 23 }\n```\n\n----------------------------------------\n\nTITLE: User Model with Access Policies in ZenStack\nDESCRIPTION: Definition of the User model in schema.zmodel with password field and access policy rules for authentication and authorization.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nextjs.mdx#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id            String    @id @default(cuid())\n  name          String?\n  email         String?   @unique\n  emailVerified DateTime?\n  // highlight-next-line\n  password      String @password @omit\n  image         String?\n  accounts      Account[]\n  sessions      Session[]\n  posts         Post[]\n\n  // highlight-start\n  // everyone can signup, and user profile is also publicly readable\n  @@allow('create,read', true)\n\n  // only the user can update or delete their own profile\n  @@allow('update,delete', auth() == this)\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PrismaClientKnownRequestError in TypeScript\nDESCRIPTION: Example of how ZenStack throws a PrismaClientKnownRequestError with code P2004 when access policies or validation rules are violated. The error includes metadata with reason and optional Zod validation errors.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/error-handling.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nthrow new PrismaClientKnownRequestError(message, {\n    clientVersion: getVersion(),\n    code: 'P2004',\n    meta: ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using TanStack Query Hooks in ZenStack V2 (TypeScript)\nDESCRIPTION: Shows the simplified parameters for query and mutation hooks generated by the TanStack Query plugin in ZenStack V2. The options for configuring both tanstack-query and additional ZenStack behavior are now merged into a single options parameter.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/upgrade.md#2025-04-10_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nuseFindManyPost(\n  { where: { ... } }, /* query args */\n  undefined, /* tanstack-query options */\n  false /* opt-out optimistic update*/\n);\n\nuseCreatePost(\n  undefined /* tanstack-query options */,\n  false, /* whether to automatically invalidate related queries */\n  true /* whether to optimistically update related queries */\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nuseFindManyPost({ where: { ... } }, { optimisticUpdate: false });\n\nuseCreatePost({ invalidateQueries: false, optimisticUpdate: true });\n```\n\n----------------------------------------\n\nTITLE: Svelte App Setup with TanStack Query and ZenStack\nDESCRIPTION: Configures a Svelte application with TanStack Query client and ZenStack hooks context. Includes Vite configuration for proper server-side rendering support.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n    import { setHooksContext } from '$lib/hooks';\n    import { QueryClient, QueryClientProvider } from '@tanstack/svelte-query';\n\n    const queryClient = new QueryClient();\n    setHooksContext({ endpoint: '/api/model' });\n</script>\n\n<div>\n    <QueryClientProvider client={queryClient}>\n        <slot />\n    </QueryClientProvider>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n    ...\n    ssr: {\n        noExternal: ['@zenstackhq/tanstack-query'],\n    },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Serving OpenAPI Documentation with Swagger UI in Express\nDESCRIPTION: TypeScript code that integrates the generated OpenAPI specification with Swagger UI in an Express application. This creates a documentation endpoint at /api/docs.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/5-documentation.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport swaggerUI from 'swagger-ui-express';\napp.use(\n    '/api/docs',\n    swaggerUI.serve,\n    swaggerUI.setup(require('./todo-api.json'))\n);\n```\n\n----------------------------------------\n\nTITLE: Generating TanStack Query hooks with ZenStack\nDESCRIPTION: Command to run the ZenStack CLI to generate TanStack Query hooks based on the schema configuration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nuxt.mdx#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\n```\n\n----------------------------------------\n\nTITLE: Defining Post Creation Access Policy in ZenStack\nDESCRIPTION: ZenStack access policy rule that ensures posts can only be created by the current user and within an organization they belong to.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-backend/index.md#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n@@allow('create', owner == auth() && org.members?[id == auth().id])\n```\n\n----------------------------------------\n\nTITLE: Creating PrismaClientKnownRequestError in TypeScript\nDESCRIPTION: Example of how ZenStack throws a PrismaClientKnownRequestError with code P2004 when access policies or validation rules are violated. The error includes metadata with reason and optional Zod validation errors.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/error-handling.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nthrow new PrismaClientKnownRequestError(message, {\n    clientVersion: getVersion(),\n    code: 'P2004',\n    meta: ...\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Polymorphic Assets in Prisma\nDESCRIPTION: Example TypeScript code showing how to query both base Asset type and specific derived types in Prisma. Demonstrates fetching all assets for a user, filtering by specific type, and performing aggregation on the base type.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/polymorphism/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// get a page of assorted types of assets for a user\nconst assets = await db.asset.findMany({ \n\twhere: { owner: { id: userId } }, skip: 10, take: 10\n});\n\n// get a list of specific type of assets for a user\nconst videos = await db.video.findMany({ where: { owner: { id: userId } } });\n\n// aggregation on the base assets\nconst totalViews = await db.asset.aggregate({ _sum: { viewCount: true } });\n```\n\n----------------------------------------\n\nTITLE: RESTful API Filtering Examples\nDESCRIPTION: Examples of various filtering operations including equality filters, relationship filters, multiple filters and deep filtering\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/post?filter[published]=false\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/post?filter[author]=1\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/user?filter[posts]=1\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/post?filter[author]=1,2\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/post?filter[author]=1&filter[published]=true\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/post?filter[author][name]=Emily\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/post?filter[viewCount$gt]=100\n```\n\n----------------------------------------\n\nTITLE: Creating a Post with Automatic Owner Assignment in ZenStack V2\nDESCRIPTION: Simplified code for creating a post in ZenStack V2, where the owner is automatically assigned using the auth() function in @default().\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/upgrade.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user });\nawait db.post.create({ data: { title: 'Post1' } });\n```\n\n----------------------------------------\n\nTITLE: RPC API Response Format\nDESCRIPTION: This snippet illustrates the output format of the RPC API, which wraps the returned data in a 'data' field.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rpc.mdx#2025-04-10_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nGET /api/post/findMany\n\n{\n    \"data\": [ { \"id\": 1, \"title\": \"Hello World\" } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Express.js Server Entry Point\nDESCRIPTION: Implementation of the main Express.js server entry point with basic JSON parsing middleware and a hello world route.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/rest-api-on-vercel/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\n\nconst app = express();\n\n// enable JSON body parser\napp.use(express.json());\n\napp.get('/', (req, res) => {\n    res.send('Hello World!');\n});\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Defining User Type and Post Model in ZModel\nDESCRIPTION: This snippet shows how to define a User type and a Post model in ZModel, incorporating Clerk's user ID and access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/clerk.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\ntype User {\n  id String @id\n}\n\nmodel Post {\n  id String @id @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title String\n  published Boolean @default(false)\n  authorId String // stores Clerk's user ID\n\n  // author has full access\n  @@allow('all', auth() != null && auth().id == authorId)\n\n  // logged-in users can view published posts\n  @@allow('read', auth() != null && published)\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Validation Error Message\nDESCRIPTION: Shows the error message generated when a validation constraint is violated during a database operation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/json-typing/index.md#2025-04-10_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nError calling enhanced Prisma method `image.create`: denied by policy: image entities failed 'create' check, \ninput failed validation: Validation error: Number must be less than 10000 at \"metadata.height\"\n```\n\n----------------------------------------\n\nTITLE: Finding a Private List Using RPC API with Query Parameters\nDESCRIPTION: Curl command to find a private List record using URL-encoded query parameters with the ZenStack RPC API.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/api/rpc/list/findFirst?q=%7B%22where%22%3A%7B%22private%22%3Atrue%7D%7D\"\n```\n\n----------------------------------------\n\nTITLE: Implementing has() Function in ZModel\nDESCRIPTION: The has() function checks if a list field contains a specific search value. It's equivalent to Prisma's has operator for array fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_29\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction has(field: Any[], search: Any): Boolean {}\n```\n\n----------------------------------------\n\nTITLE: Defining Access Policies with ZenStack\nDESCRIPTION: ZModel code for defining access policies for User and Post models using ZenStack.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nestjs.mdx#2025-04-10_snippet_11\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id Int @id() @default(autoincrement())\n  name String\n  posts Post[]\n\n  // anyone can sign up, and user profiles are public\n  @@allow('create,read', true)\n\n  // users have full access to their own profile\n  @@allow('all', auth() == this)\n}\n\nmodel Post {\n  id Int @id() @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt()\n  title String\n  published Boolean @default(false)\n  author User? @relation(fields: [authorId], references: [id])\n  authorId Int?\n\n  // author has full access\n  @@allow('all', auth() == author)\n\n  // published posts are readable to all\n  @@allow('read', published)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Page in NextJS with TanStack Query\nDESCRIPTION: This code snippet creates a signup page component using TanStack Query's useCreateUser hook for user creation and NextAuth for authentication. It handles form submission, error display, and redirection after successful signup.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/3-auth-ui.md#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { signIn } from 'next-auth/react';\nimport Link from 'next/link';\nimport { useState, type FormEvent } from 'react';\nimport { useCreateUser } from '~/lib/hooks';\n\nexport default function Signup() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const { mutate: signup, error: signupError } = useCreateUser({\n    onSuccess: async () => {\n      // sign-up succeeded, sign in with the credentials\n      const signInResult = await signIn('credentials', {\n        redirect: false,\n        email,\n        password,\n      });\n      if (signInResult?.ok) {\n        window.location.href = '/';\n      } else {\n        console.error('Signin failed:', signInResult?.error);\n      }\n    },\n  });\n\n  const _err = signupError as { info?: { code?: string } };\n  const errMsg = _err\n    ? _err.info?.code === 'P2002' // P2002 is the Prisma error code for unique constraint failure\n      ? 'Email already exists'\n      : `Unexpected error occurred: ${JSON.stringify(_err)}`\n    : '';\n\n  function onSignup(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    signup({ data: { email, password } });\n  }\n\n  return (\n    <div className=\"mx-auto flex h-screen flex-col items-center justify-center\">\n      <div className=\"mb-10 flex items-center space-x-4\">\n        <h1 className=\"text-4xl\">Welcome to Todo</h1>\n      </div>\n      <div className=\"flex w-full max-w-screen-sm items-center justify-center rounded-lg\">\n        <div className=\"w-full space-y-8 p-16\">\n          <h2 className=\"text-3xl font-bold\">Create a Free Account</h2>\n          <form className=\"mt-8 space-y-6\" action=\"#\" onSubmit={onSignup}>\n            <div>\n              <label htmlFor=\"email\" className=\"label\">\n                Your email\n              </label>\n              <input\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"input input-bordered w-full\"\n                placeholder=\"Email address\"\n                required\n              />\n            </div>\n            <div>\n              <label htmlFor=\"password\" className=\"label\">\n                Your password\n              </label>\n              <input\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"••••••••\"\n                className=\"input input-bordered w-full\"\n                required\n              />\n            </div>\n\n            {errMsg && <p className=\"text-sm text-red-600\">{errMsg}</p>}\n\n            <button className=\"btn btn-primary mt-4\" type=\"submit\">\n              Create account\n            </button>\n            <div>\n              Already have an account?{' '}\n              <Link href=\"/signin\" className=\"text-primary\">\n                Login here\n              </Link>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Checking String Start in ZModel\nDESCRIPTION: Checks if a given field starts with the search string. Equivalent to Prisma's startsWith operator.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_38\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction startsWith(field: String, search: String): Boolean {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Delete for Find Operations in Prisma Middleware\nDESCRIPTION: Prisma middleware code snippet that adds a filter to find operations to exclude soft-deleted records from query results.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/soft-delete.mdx#2025-04-10_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nif (params.action === 'findUnique' || params.action === 'findFirst') {\n    // Change to findFirst - you cannot filter\n    // by anything except ID / unique with findUnique\n    params.action = 'findFirst';\n    // Add 'deleted' filter\n    // ID filter maintained\n    params.args.where['deleted'] = false;\n}\nif (params.action === 'findMany') {\n    // Find many queries\n    if (params.args.where) {\n        if (params.args.where.deleted == undefined) {\n            // Exclude deleted records if they have not been explicitly requested\n            params.args.where['deleted'] = false;\n        }\n    } else {\n        params.args['where'] = { deleted: false };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a simple API to list all posts in Express.js\nDESCRIPTION: Adds a GET endpoint to the Express.js app to retrieve all posts from the database, including author information.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/backend.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(`/post`, async (req, res) => {\n    const post = await prisma.post.findMany({\n        include: { author: true },\n    });\n    res.json(post);\n});\n```\n\n----------------------------------------\n\nTITLE: Updated User Model Schema with Password Handling\nDESCRIPTION: ZenStack schema definition for User model with password hashing and field omission\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/rest-api-on-vercel/index.md#2025-04-10_snippet_7\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id @default(cuid())\n    email String @unique\n    password String @password @omit\n    orders Order[]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Function in PostgreSQL for PostgREST\nDESCRIPTION: SQL code defining a stored procedure (function) that adds two integers, which PostgREST automatically exposes as an RPC endpoint that clients can call via HTTP POST requests.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/postgrest.mdx#2025-04-10_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n  ; A stored procedure to add two integers\n\n  CREATE FUNCTION add_them(a integer, b integer)\n  RETURNS integer AS $$\n    SELECT a + b;\n  $$ LANGUAGE SQL IMMUTABLE;\n```\n\n----------------------------------------\n\nTITLE: Using ZenStack CLI with Basic Options\nDESCRIPTION: Overview of the ZenStack CLI command structure, options, and main commands. The CLI helps with initializing projects, generating code, working with the REPL environment, formatting schema files, and displaying help information.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/cli.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzenstack [options] [command]\n\nζ ZenStack is a Prisma power pack for building full-stack apps.\n\nDocumentation: https://zenstack.dev.\n\nOptions:\n  -v --version           display CLI version\n  -h, --help             display help for command\n\nCommands:\n  info [path]            Get information of installed ZenStack and related packages.\n  init [options] [path]  Initialize an existing project for ZenStack.\n  generate [options]     Generates RESTful API and Typescript client for your data model.\n  repl [options]         Start a REPL session.\n  format [options]       Format a ZenStack schema file.\n  help [command]         Display help for a command.\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Isolation Level with ZenStack's enhance API\nDESCRIPTION: This snippet shows how to set the transaction isolation level specifically for ZenStack's internally initiated transactions using the enhance API. This approach allows you to maintain different isolation levels for regular Prisma operations versus ZenStack operations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/limitations.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user }, { transactionIsolationLevel: 'RepeatableRead' });\n```\n\n----------------------------------------\n\nTITLE: Combining pre-update and post-update conditions in ZenStack\nDESCRIPTION: This example shows how to mix pre-update conditions with post-update checks, allowing updates only when a post is not published and the revision is being increased.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.6-post-update.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    ...\n    published Boolean\n    revision Int\n\n    @@allow('update', !published && future().revision > revision)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Access Control in ZenStack Schema (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define access control rules for a Post model in ZenStack, using a declarative syntax within the schema definition. It shows how to set read permissions based on the author's identity or the post's published status.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/code-legacy/index.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmodel Post {\n    id String @id\n    title String\n    published Boolean @default(false)\n    author User @relation(fields: [authorId], references: [id])\n    authorId String\n\n    // 🔐 author can read his own posts; other users can read published ones\n    @@allow('read', auth() == author || published)\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Logical Model Schema for Polymorphic Relationships in ZModel\nDESCRIPTION: Illustrates the logical model schema that developers interact with, where concrete models inherit fields from the base model without explicit relationships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/polymorphism/index.md#2025-04-10_snippet_9\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Asset {\n  // Asset fields\n  ...\n}\n\nmodel Video {\n  id Int @id()\n\n  // inherited from Asset\n  createdAt DateTime @default(now)\n  viewCount Int @default(0)\n  owner User @relation(fields: [ownerId], references: [id])\n  ownerId Int\n\n  // Video specifics\n  duration Int\n  url String\n}\n```\n\n----------------------------------------\n\nTITLE: Permission Denied JSON Response\nDESCRIPTION: Example JSON response when Supabase correctly denies access to a database table, indicating that the security configuration is effective in preventing unauthorized access.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/supabase-security.md#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"code\": \"42501\",\n   \"details\": null,\n   \"hint\": null,\n   \"message\": \"permission denied for table User\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Delete for Delete Operations in Prisma Middleware\nDESCRIPTION: Prisma middleware code snippet that changes delete operations to update operations, setting a 'deleted' flag instead of removing the record.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/soft-delete.mdx#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nif (params.action == 'delete') {\n        // Delete queries\n        // Change action to an update\n        params.action = 'update'\n        params.args['data'] = { deleted: true }\n      }\n      if (params.action == 'deleteMany') {\n        // Delete many queries\n        params.action = 'updateMany'\n        if (params.args.data != undefined) {\n          params.args.data['deleted'] = true\n        } else {\n          params.args['data'] = { deleted: true }\n        }\n      }\n```\n\n----------------------------------------\n\nTITLE: Enhancement Options Type Definitions in TypeScript\nDESCRIPTION: Type definitions for the options parameter of the enhance function, including transaction settings, error handling, and encryption configuration options.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/runtime-api.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype TransactionIsolationLevel =\n    | 'ReadUncommitted'\n    | 'ReadCommitted'\n    | 'RepeatableRead'\n    | 'Snapshot'\n    | 'Serializable';\n\ntype SimpleEncryption = {\n    encryptionKey: Uint8Array;\n    decryptionKeys?: Uint8Array[];\n}\n\ntype CustomEncryption = {\n    encrypt: (model: string, field: FieldInfo, plain: string) => Promise<string>;\n    decrypt: (model: string, field: FieldInfo, cipher: string) => Promise<string>;\n};\n\ntype EnhancementOptions = {\n    kinds?: EnhancementKind[];\n    logPrismaQuery?: boolean;\n    errorTransformer?: ErrorTransformer;\n    transactionMaxWait?: number;\n    transactionTimeout?: number;\n    transactionIsolationLevel?: TransactionIsolationLevel;\n    encryption?: SimpleEncryption | CustomEncryption;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication Middleware in Express.js\nDESCRIPTION: Adds a simple middleware to require X-USER-ID header for simulating user authentication in Express.js.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/backend.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napp.use((req, res, next) => {\n    const userId = req.header('X-USER-ID');\n    if (!userId || Number.isNaN(parseInt(userId))) {\n        res.status(403).json({ error: 'unauthorized' });\n    } else {\n        next();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Generated Hooks for Data Access in React Components\nDESCRIPTION: Example React component showing how to use generated hooks for fetching and displaying posts with type-safe queries\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-zenstack.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePost } from '../lib/hooks';\n\nconst Posts: FC = () => {\n    const { findMany } = usePost();\n\n    const posts = findMany({\n        where: { published: false },\n        include: { author: true },\n        orderBy: { updatedAt: 'desc' },\n    });\n\n    return (\n        <ul>\n            {posts.map((post) => (\n                <li key={post.id}>\n                    {post.title} by {post.author.e}\n                </li>\n            ))}\n        </ul>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack in a Project\nDESCRIPTION: Command to initialize ZenStack in an existing project using the CLI.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/backend.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Inheritance for Polymorphic Content\nDESCRIPTION: Demonstrates how to refactor the database schema to support polymorphic content types using table inheritance. This includes the base Content model and the specific Post model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nmodel Content {\n  id String @id @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  published Boolean @default(false)\n  author User @relation(fields: [authorId], references: [id])\n  authorId String\n  contentType String // discriminator indicates the specific type \n  likes Like[] // like is added here for all kinds of content\n  post Post?  // 1-1 relation with Post\n  // author has full access\n  @@allow('all', auth() == author)\n\n  // logged-in users can view published posts\n  @@allow('read', auth() != null && published)\n}\n\nmodel Post {\n  id String @id @default(cuid())\n  title String\n  content Content @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)\n\n  // author has full access\n  @@allow('create,delete', auth() == content.author)\n  // logged-in users can view \n  @@allow('read', auth() != null)\n}\n```\n\n----------------------------------------\n\nTITLE: One-to-One Relation Definition in ZModel\nDESCRIPTION: Example of defining a one-to-one relation between User and Profile models using the @relation attribute and foreign key fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_38\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id\n    profile Profile?\n}\n\nmodel Profile {\n    id String @id\n    user User @relation(fields: [userId], references: [id])\n    userId String @unique\n}\n```\n\n----------------------------------------\n\nTITLE: ZenStack SWR Plugin Configuration\nDESCRIPTION: ZenStack schema configuration for enabling SWR plugin to generate client-side query hooks.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/firebase-alternative/index.md#2025-04-10_snippet_10\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin hooks {\n  provider = '@zenstackhq/swr'\n  output = \"./src/lib/hooks\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack Server Module for Express.js Integration\nDESCRIPTION: Command to install the ZenStack server module which provides Express.js integration capabilities.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/express.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/server\n```\n\n----------------------------------------\n\nTITLE: Mounting ZenStack API on Fastify Server\nDESCRIPTION: TypeScript code demonstrating how to integrate ZenStack into a Fastify project using the ZenStackFastifyPlugin. It sets up the plugin with a prefix and configures the getPrisma function to enhance Prisma with user session data.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/fastify.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\nimport { ZenStackFastifyPlugin } from '@zenstackhq/server/fastify';\nimport { prisma } from './db.ts';\nimport { getSessionUser } from './auth.ts';\n\nconst server = fastify();\n\n// serve OpenAPI at /api/model\nserver.register(ZenStackFastifyPlugin, {\n    prefix: '/api/model',\n    // getSessionUser extracts the current session user from the request, its\n    // implementation depends on your auth solution\n    getPrisma: (request) => enhance(prisma, { user: getSessionUser(request) }),\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Code with Default Settings\nDESCRIPTION: Example of generating code with default ZenStack settings using npx.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/cli.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\n```\n\n----------------------------------------\n\nTITLE: Using Check API for Permission Verification\nDESCRIPTION: Example of how to use the 'check' API to verify if the current user has permission to read published posts. This demonstrates checking permissions without querying the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/prisma-client-ext.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user: getCurrentUser() });\n\n// check if the current user can read published posts\nawait canRead = await db.post.check({\n  operation: 'read',\n  where: { published: true }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Level Security Policy in PostgreSQL for Multi-Tenancy\nDESCRIPTION: This SQL snippet demonstrates how to create a Row Level Security (RLS) policy in PostgreSQL to implement tenant isolation at the database level. It restricts access to rows based on the current user's tenant ID.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/multi-tenant/index.md#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE POLICY tenant_user_isolation_policy ON tenant_user\nUSING (tenant_id::TEXT = current_user);\n```\n\n----------------------------------------\n\nTITLE: Implementing RLS Policy for Todo Items in SQL\nDESCRIPTION: A complex SQL policy that grants authenticated users access to Todo items if they own the parent List or if they are members of the Space containing a non-private List. This demonstrates the complexity and maintainability challenges of Row-Level Security implementations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/supabase-alternative/index.md#2025-04-10_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Todo\"\non \"public\".\"Todo\"\nto authenticated\nusing (\n  ((EXISTS ( SELECT 1\n   FROM \"List\"\n  WHERE ((\"List\".id = \"Todo\".\"listId\") AND ((\"List\".\"ownerId\")::uuid = auth.uid())))) OR (EXISTS ( SELECT 1\n   FROM ((\"List\"\n     JOIN \"Space\" ON ((\"List\".\"spaceId\" = \"Space\".id)))\n     JOIN \"SpaceUser\" ON ((\"SpaceUser\".\"spaceId\" = \"Space\".id)))\n  WHERE ((\"List\".id = \"Todo\".\"listId\") AND ((\"SpaceUser\".\"userId\")::uuid = auth.uid()) AND (NOT \"List\".private)))))\n)\n```\n\n----------------------------------------\n\nTITLE: POST Request with Serialized Complex Data\nDESCRIPTION: This snippet demonstrates how a POST request body should be structured when including serialized complex data types, with both the 'data' and 'meta' fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rpc.mdx#2025-04-10_snippet_7\n\nLANGUAGE: json\nCODE:\n```\nPOST /api/post/create\n\n{ \n    \"data\": { \"bytes\": \"AQID\" },\n    \"meta\": { \"serialization\": {\"values\": { \"bytes\": [[ \"custom\",\"Bytes\" ]] } } } \n}\n```\n\n----------------------------------------\n\nTITLE: Making RPC-style API Calls with Fetch in TypeScript\nDESCRIPTION: Example of creating a user with two posts using fetch to make an RPC-style API call to a ZenStack server adapter. The code demonstrates how to structure the request body with nested create operations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/_using-api.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// create a user with two posts\nconst r = await fetch(`/api/user/create`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n        include: { posts: true },\n        data: {\n            email: 'user1@abc.com',\n            posts: {\n                create: [{ title: 'Post 1' }, { title: 'Post 2' }],\n            },\n        },\n    }),\n});\n\nconsole.log(await r.json());\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Rewrites for Vercel API Routes\nDESCRIPTION: Configuration for a vercel.json file that rewrites all requests under /api path to the serverless function endpoint. This enables routing all API requests to the appropriate handler.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/rest-api-on-vercel/index.md#2025-04-10_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rewrites\": [{ \"source\": \"/api/(.*)\", \"destination\": \"/api\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Post Management Server Functions in TypeScript\nDESCRIPTION: Server-side functions for post management including retrieval, deletion, publishing, and unpublishing operations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/remix-run.mdx#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getPost({\n    id,\n    userId,\n}: Pick<Post, 'id'> & {\n    userId: User['id'];\n}) {\n    return getEnhancedPrisma(userId).post.findUnique({\n        where: { id },\n    });\n}\n\nexport function deletePost({ id, userId }: Pick<Post, 'id'> & { userId: User['id'] }) {\n    return getEnhancedPrisma(userId).post.delete({\n        where: { id },\n    });\n}\n\nexport function publishPost({ id, userId }: Pick<Post, 'id'> & { userId: User['id'] }) {\n    return getEnhancedPrisma(userId).post.update({\n        where: { id },\n        data: { published: true },\n    });\n}\n\nexport function unpublishPost({ id, userId }: Pick<Post, 'id'> & { userId: User['id'] }) {\n    return getEnhancedPrisma(userId).post.update({\n        where: { id },\n        data: { published: false },\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: API Route Handler for ZenStack CRUD Operations\nDESCRIPTION: Next.js API route handler setup for ZenStack CRUD operations with authentication context.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/next-app-router.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from \"@zenstackhq/runtime\";\nimport { NextRequestHandler } from \"@zenstackhq/server/next\";\nimport { getServerAuthSession } from \"~/server/auth\";\nimport { db } from \"~/server/db\";\n\nasync function getPrisma() {\n  const session = await getServerAuthSession();\n  return enhance(db, { user: session?.user });\n}\n\nconst handler = NextRequestHandler({ getPrisma, useAppDir: true });\n\nexport {\n  handler as DELETE,\n  handler as GET,\n  handler as PATCH,\n  handler as POST,\n  handler as PUT,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Post with Manual Owner Connection in ZenStack V1\nDESCRIPTION: Code snippet showing how to create a post in ZenStack V1, where you need to explicitly connect the owner using the user's ID.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/upgrade.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user });\nawait db.post.create({\n  data: {\n   owner: { connect: { id: user.id } },\n   title: 'Post1'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Metadata in TypeScript Runtime\nDESCRIPTION: Example of how to load and use custom metadata in TypeScript when the default output location has been changed. This is necessary for runtime APIs like enhance and withPolicy.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/model-meta.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst meta = require('./lib/zenstack/model-meta').default;\nconst db = enhance(prisma, { user }, undefined, meta);\n```\n\n----------------------------------------\n\nTITLE: Using @@prisma.passthrough for Model in ZModel\nDESCRIPTION: Demonstrates how to use the @@prisma.passthrough attribute at the model level in ZModel.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_19\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id @default(autoincrement())\n    name String\n    @@prisma.passthrough(\"@@unique([name])\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Base Abstract Model in Separate File\nDESCRIPTION: Shows how to create a separate file (base.zmodel) containing an abstract model definition that can be imported into other schema files.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/multiple-schema.md#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nabstract model Base {\n    id Int @id @default(autoincrement())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt()\n    published Boolean @default(true)\n\n    // author has full access\n    @@allow('all', auth() != null && published)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RESTful API Handler in SvelteKit\nDESCRIPTION: Configuration for setting up the RESTful API handler in SvelteKit through hooks.server.ts. Includes prefix configuration and handler setup.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = SvelteKitHandler({\n    prefix: '/api/model',\n    getPrisma,\n    handler: RestApiHandler({ endpoint: 'http://myhost/api/model' })\n});\n```\n\n----------------------------------------\n\nTITLE: Using @password and @omit ZenStack attributes\nDESCRIPTION: Documentation for two ZenStack field attributes: @password which automatically hashes field values using bcryptjs before saving, and @omit which excludes the field from query results. These attributes are commonly used together for secure password handling.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/_password-omit.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. `@password` is a ZenStack attribute that marks a field to be hashed (using [bcryptjs](https://www.npmjs.com/package/bcryptjs)) before saving.\n1. `@omit` indicates the field should be dropped when returned from a query.\n```\n\n----------------------------------------\n\nTITLE: Enhancing PrismaClient with ZenStack in TypeScript\nDESCRIPTION: Shows how to create an enhanced PrismaClient using ZenStack's enhance function with user context.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nestjs.mdx#2025-04-10_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst enhancedPrisma = enhance(prisma, { user: ... });\n```\n\n----------------------------------------\n\nTITLE: Defining User Model in ZenStack\nDESCRIPTION: This snippet shows how to define a basic User model in ZenStack's zmodel language. It includes an id field as the primary key and a unique email field.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/index.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id\n    email String @unique\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Validation for Lucia Auth\nDESCRIPTION: This function validates requests by checking session cookies, validating sessions, and setting new cookies if necessary. It's cached to prevent unnecessary database calls.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/lucia.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const validateRequest = cache(\n  async (): Promise<{ user: User; session: Session } | { user: null; session: null }> => {\n    const sessionId = cookies().get(lucia.sessionCookieName)?.value ?? null;\n    if (!sessionId) {\n      return {\n        user: null,\n        session: null\n      };\n    }\n\n    const result = await lucia.validateSession(sessionId);\n    // next.js throws when you attempt to set cookie when rendering page\n    try {\n      if (result.session && result.session.fresh) {\n        const sessionCookie = lucia.createSessionCookie(result.session.id);\n        cookies().set(sessionCookie.name, sessionCookie.value, sessionCookie.attributes);\n      }\n      if (!result.session) {\n        const sessionCookie = lucia.createBlankSessionCookie();\n        cookies().set(sessionCookie.name, sessionCookie.value, sessionCookie.attributes);\n      }\n    } catch {}\n    return result;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Auth Model with @@auth Attribute\nDESCRIPTION: Example showing how to use a model not named 'User' as the auth model by adding the @@auth attribute to it.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel MyUser {\n    id Int @id\n    role String\n    posts Post[]\n\n    @@auth\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Row-Level Security with PostgreSQL\nDESCRIPTION: This SQL example demonstrates how to implement row-level security in PostgreSQL by creating a chat table with policies that restrict access based on the current user. The policy ensures users can only see chats where they're the sender or receiver and can only insert messages as themselves.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/secure-api/index.md#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- source: https://www.2ndquadrant.com/en/blog/application-users-vs-row-level-security/\n\nCREATE TABLE chat (\n    message_uuid    UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    message_from    NAME      NOT NULL DEFAULT current_user,\n    message_to      NAME      NOT NULL,\n    message_subject VARCHAR(64) NOT NULL,\n);\n\nCREATE POLICY chat_policy ON chat\n    USING ((message_to = current_user) OR (message_from = current_user))\n    WITH CHECK (message_from = current_user)\n```\n\n----------------------------------------\n\nTITLE: Integrating SessionProvider in Root Layout\nDESCRIPTION: Updates the root layout component to wrap the application with the NextAuth SessionProvider.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport NextAuthSessionProvider from '~/components/SessionProvider';\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body className={`font-sans ${inter.variable}`}>\n        <NextAuthSessionProvider>{children}</NextAuthSessionProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript definition of WithPolicyContext type\nDESCRIPTION: Type definition for the context object used in policy evaluation. It contains an optional user object that provides values for the auth() function in access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/runtime-api.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype WithPolicyContext = {\n    user?: Record<string, unknown>\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Signin Page\nDESCRIPTION: TypeScript React component for user signin functionality using NextAuth. Includes form handling and basic error management for failed login attempts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nextjs.mdx#2025-04-10_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { NextPage } from 'next';\nimport { signIn } from 'next-auth/react';\nimport Router from 'next/router';\nimport { useState, type FormEvent } from 'react';\n\nconst Signin: NextPage = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    async function onSignin(e: FormEvent) {\n        e.preventDefault();\n\n        const result = await signIn('credentials', {\n            redirect: false,\n            email,\n            password,\n        });\n\n        if (result?.ok) {\n            await Router.push('/');\n        } else {\n            alert('Signin failed');\n        }\n    }\n\n    return (\n        <div className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\">\n            <h1 className=\"text-5xl font-extrabold text-white\">Login</h1>\n            <form className=\"mt-16 flex flex-col gap-8 text-2xl\" onSubmit={(e) => void onSignin(e)}>\n                <div>\n                    <label htmlFor=\"email\" className=\"inline-block w-32  text-white\">\n                        Email\n                    </label>\n                    <input\n                        id=\"email\"\n                        type=\"email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.currentTarget.value)}\n                        className=\"ml-4 w-72 rounded border p-2\"\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"password\" className=\"inline-block w-32  text-white\">\n                        Password\n                    </label>\n                    <input\n                        id=\"password\"\n                        type=\"password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.currentTarget.value)}\n                        className=\"ml-4 w-72 rounded border p-2\"\n                    />\n                </div>\n                <input\n                    type=\"submit\"\n                    value=\"Sign me in\"\n                    className=\"cursor-pointer rounded border border-gray-500 py-4 text-white\"\n                />\n            </form>\n        </div>\n    );\n};\n\nexport default Signin;\n```\n\n----------------------------------------\n\nTITLE: NextAuth Configuration with Credentials Provider\nDESCRIPTION: Setup for NextAuth using credentials-based authentication with JWT session strategy and Prisma adapter.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/next-app-router.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport type { PrismaClient } from \"@prisma/client\";\nimport { compare } from \"bcryptjs\";\nimport {\n  getServerSession,\n  type DefaultSession,\n  type NextAuthOptions,\n} from \"next-auth\";\nimport { type Adapter } from \"next-auth/adapters\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\n\nimport { db } from \"~/server/db\";\n\ndeclare module \"next-auth\" {\n  interface Session extends DefaultSession {\n    user: {\n      id: string;\n    } & DefaultSession[\"user\"];\n  }\n}\n\nexport const authOptions: NextAuthOptions = {\n  session: {\n    strategy: \"jwt\",\n  },\n  callbacks: {\n    session({ session, token }) {\n      if (session.user) {\n        session.user.id = token.sub!;\n      }\n      return session;\n    },\n  },\n  adapter: PrismaAdapter(db) as Adapter,\n  providers: [\n    CredentialsProvider({\n      credentials: {\n        email: { type: \"email\" },\n        password: { type: \"password\" },\n      },\n      authorize: authorize(db),\n    }),\n  ],\n};\n\nfunction authorize(prisma: PrismaClient) {\n  return async (\n    credentials: Record<\"email\" | \"password\", string> | undefined,\n  ) => {\n    if (!credentials) throw new Error(\"Missing credentials\");\n    if (!credentials.email)\n      throw new Error('\"email\" is required in credentials');\n    if (!credentials.password)\n      throw new Error('\"password\" is required in credentials');\n    const maybeUser = await prisma.user.findFirst({\n      where: { email: credentials.email },\n      select: { id: true, email: true, password: true },\n    });\n    if (!maybeUser?.password) return null;\n    const isValid = await compare(credentials.password, maybeUser.password);\n    if (!isValid) return null;\n    return { id: maybeUser.id, email: maybeUser.email };\n  };\n}\n\nexport const getServerAuthSession = () => getServerSession(authOptions);\n```\n\n----------------------------------------\n\nTITLE: Updated Index Route Link in React\nDESCRIPTION: Modified index route component with updated navigation link to the posts page.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/remix-run.mdx#2025-04-10_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<Link\n    to=\"/posts\"\n    className=\"flex items-center justify-center rounded-md border border-transparent bg-white px-4 py-3 text-base font-medium text-yellow-700 shadow-sm hover:bg-yellow-50 sm:px-8\"\n>\n    View Posts for {user.email}\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Defining Encrypted Field in ZModel\nDESCRIPTION: Demonstrates how to mark a field for encryption in a ZModel schema using the @encrypted attribute.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_15\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id\n    someSecret String @encrypted\n}\n```\n\n----------------------------------------\n\nTITLE: Using ZenStack check Command\nDESCRIPTION: Command for checking a ZenStack schema file for syntax or semantic errors, with exit code indicating validity.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/cli.md#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nzenstack check [options]\n```\n\n----------------------------------------\n\nTITLE: Model Unique Constraint\nDESCRIPTION: Example of defining unique constraints across multiple fields\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_14\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Model {\n    ...\n    f1 String\n    f2 String\n    @@unique([f1, f2])\n}\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Automatic Optimistic Update\nDESCRIPTION: Example showing how to opt-out of automatic optimistic updates for specific queries by passing false to the optimisticUpdate argument.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n// arguments are query args, query options, and optimisticUpdate\nconst { data } = useFindManyPost({ where: { published: true } }, undefined, false);\n```\n\n----------------------------------------\n\nTITLE: Field Attribute Basic Syntax\nDESCRIPTION: Demonstrates the basic syntax for field attributes in ZenStack models\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_7\n\nLANGUAGE: zmodel\nCODE:\n```\nid String @[ATTR_NAME](ARGS)?\n```\n\n----------------------------------------\n\nTITLE: Defining Encrypted Fields in ZModel\nDESCRIPTION: Marks fields that should be encrypted in the database using the @encrypted attribute in a ZModel model definition.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/field-encryption.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id         String @id @default(cuid())\n  someSecret String @encrypted\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Prisma Schema and Updating Database\nDESCRIPTION: Commands to regenerate the Prisma schema based on the ZenStack model changes and push the updated schema to the database, applying any new fields or access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate && npx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Replacing To-Many Relationship Example in JSON:API\nDESCRIPTION: An example of how to replace all relationships in a to-many relationship using a PUT request. This overwrites the existing relationship collection entirely.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_14\n\nLANGUAGE: json\nCODE:\n```\nPUT /user/1/relationships/posts\n{\n    \"data\": [\n        { \"type\": \"post\", \"id\": \"1\" },\n        { \"type\": \"post\", \"id\": \"2\" }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Model with Validation Rules in ZModel\nDESCRIPTION: ZModel schema definition for a Signup model with field-level and model-level validation rules, including email validation, value constraints, and conditional validation based on multiple fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/form-validation/index.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = 'sqlite'\n  url      = 'file:./dev.db'\n}\n\nmodel Signup {\n  id Int @id @default(autoincrement())\n  name String\n  email String @email @endsWith(\"@zenstack.dev\", 'Must be a @zenstack.dev email')\n  adult Boolean\n  beverage String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@allow('create,read', true)\n\n  // sqlite doesn't support enum, you should use enum in a real application\n  @@validate(beverage in ['SODA', 'COFFEE', 'BEER', 'COCKTAIL'], 'Please choose a valid beverage')\n\n  @@validate(adult || beverage in ['SODA', 'COFFEE'], 'You must be an adult to drink alcohol')\n}\n```\n\n----------------------------------------\n\nTITLE: LLM Response for Prisma Query Generation\nDESCRIPTION: Example output from the LLM model when generating a Prisma query for category-based sales aggregation, structured as a JSON object with model, API, and arguments fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/llm-acl/index.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"OrderItemDetail\",\n  \"api\": \"groupBy\",\n  \"arguments\": {\n     \"by\": [\"category\"],\n     \"_sum\": {\n        \"subtotal\": true\n     }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PrismaService to AppModule\nDESCRIPTION: TypeScript code for adding PrismaService as a provider in the NestJS AppModule.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nestjs.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [PrismaService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Signup Form Handler\nDESCRIPTION: Server-side handler for processing signup form submission with JWT token generation\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/sveltekit.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createToken, JWT_TOKEN_COOKIE_NAME } from '$lib/auth';\nimport { fail, redirect, type Actions } from '@sveltejs/kit';\nimport { isPrismaClientKnownRequestError, enhance } from '@zenstackhq/runtime';\nimport { prisma } from '../../lib/db';\n\nexport const actions = {\n    default: async ({ request, cookies }) => {\n        const data = await request.formData();\n        const email = data.get('email');\n        const password = data.get('password');\n\n        if (typeof email !== 'string' || typeof password !== 'string') {\n            return fail(400, { email, password, missing: true });\n        }\n\n        const db = enhance(prisma);\n\n        try {\n            // create the user together with a default space\n            const user = await db.user.create({\n                data: {\n                    email,\n                    password\n                }\n            });\n\n            // sign a JWT token and set it as a cookie\n            const token = createToken(user);\n            cookies.set(JWT_TOKEN_COOKIE_NAME, token, {\n                httpOnly: true,\n                expires: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n                path: '/'\n            });\n        } catch (err) {\n            if (isPrismaClientKnownRequestError(err) && err.code === 'P2002') {\n                // duplicated email\n                return fail(400, { email, password, dup: true });\n            } else {\n                throw err;\n            }\n        }\n\n        throw redirect(303, `/`);\n    }\n} satisfies Actions;\n```\n\n----------------------------------------\n\nTITLE: Displaying Model-Level Validation Errors in React Form\nDESCRIPTION: Code to extract and display model-level validation errors that aren't attached to specific fields. This handles cross-field validation rules defined with @@validate in the ZModel.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/form-validation/index.md#2025-04-10_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst toplevelError = (errors as FieldErrors)['']?.message?.toString();\n\n<form>\n  ...\n  {toplevelError && (\n    <p className=\"text-red-600 text-sm\">{toplevelError}</p>\n  )}\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using Generated tRPC Client Helper with Next.js\nDESCRIPTION: TypeScript code showing how to use the generated tRPC client helper for Next.js to enable better type inference.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/trpc.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTRPCNext } from 'server/routers/generated/client/next';\nexport const trpc = createTRPCNext<AppRouter>({\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Serializing Complex Data Types in POST Request\nDESCRIPTION: Example of how to include serialization metadata in a POST request when the request body contains complex data types like Bytes. The meta.serialization field carries the SuperJSON metadata.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_21\n\nLANGUAGE: json\nCODE:\n```\nPOST /post\n{\n    \"data\": {\n        \"type\": \"post\",\n        \"attributes\": {\n            ...\n            \"bytes\": \"AQID\" // base64-encoded bytes\n        }\n    },\n    \"meta\": { \n        \"serialization\": {\"values\": { \"data.attributes.bytes\": [[ \"custom\", \"Bytes\"]] } } \n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Better-Auth with Prisma Adapter in TypeScript\nDESCRIPTION: This snippet shows how to set up Better-Auth authentication using the Prisma adapter. It configures the database connection and other authentication settings.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/better-auth/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prismaAdapter } from 'better-auth/adapters/prisma';\n\nexport const auth = betterAuth({\n  appName: 'Better Auth Demo',\n  database: prismaAdapter(prisma, {\n      provider: 'sqlite',\n  }),\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing user object in ZenStack GraphQLYoga plugin\nDESCRIPTION: TypeScript code showing how to customize the user object passed to the ZenStack GraphQLYoga plugin in RedwoodJS.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/redwood.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nuseZenStack(db, async (currentUser) => {\n  const typedUser = currentUser as { id: string };\n  const dbUser = await db.user.findUnique({ \n    where: { id: typedUser.id },\n    // select more fields\n    select: { id: true, role: true }\n  });\n  return dbUser;\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Prisma Client in Next.js Server Environment\nDESCRIPTION: Creates a server-side module that exports the Prisma client instance. This client is used for database operations throughout the application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/clerk-multitenancy/index.mdx#2025-04-10_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { PrismaClient } from \"@prisma/client\";\nexport const prisma = new PrismaClient();\n```\n\n----------------------------------------\n\nTITLE: Formatting ZenStack Schema Files\nDESCRIPTION: The 'format' command formats a ZenStack schema file, with options to specify the schema location.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/cli.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nzenstack format [options]\n```\n\n----------------------------------------\n\nTITLE: Password Attribute Declaration\nDESCRIPTION: Declaration example for password attribute with salt parameters\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_11\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @password(saltLength: Int?, salt: String?)\n```\n\n----------------------------------------\n\nTITLE: Supabase RLS Policy for Post Owner Access\nDESCRIPTION: Basic RLS policy in PostgreSQL that grants post owners full access to their own posts using the current user context.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/supabase-alternative/index.md#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- owner has full access to her own posts\nCREATE POLICY post_owner_policy ON post\n    USING (owner = current_user);\n```\n\n----------------------------------------\n\nTITLE: Using @openapi.meta Attribute with REST Flavor in ZModel\nDESCRIPTION: Example of using the @openapi.meta attribute to customize OpenAPI generation for a User model with REST flavor, showing a simpler configuration with just security and tag description.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/openapi.mdx#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id\n    email String @unique\n\n    @@openapi.meta({\n        security: [ { basic: [] } ],\n        tagDescription: 'Operations for managing users',\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC with tRPC on Server-Side\nDESCRIPTION: This snippet demonstrates how to set up an RPC server using tRPC. It defines routes for listing and creating users, showcasing the simplicity of RPC implementation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/no-api/index.md#2025-04-10_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst appRouter = router({\n  user: {\n    // list users\n    list: publicProcedure.query(() => db.user.findMany()),\n\n    // create a user\n    create: publicProcedure\n      .input(z.object({ name: z.string() }))\n      .mutation(async ({ input }) => db.user.create(input))\n  },\n});\n\n// Export type router type signature, this is used by the client.\nexport type AppRouter = typeof appRouter;\n\nconst server = createHTTPServer({\n  router: appRouter,\n});\n\nserver.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Defining User and Post Models with Cascade Delete in ZModel\nDESCRIPTION: This ZModel snippet defines User and Post models with a relation that includes cascade delete. When a User is deleted, all associated Posts are automatically deleted, triggering query invalidation for Post queries.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/_invalidation.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    ...\n    posts Post[]\n}\n\nmodel Post {\n    ...\n    user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n    userId Int\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Browser Entry in package.json to Ignore Node's Crypto Module\nDESCRIPTION: Configuration to make bcryptjs work in edge runtime by telling Vercel's bundler to ignore the crypto module during resolution, solving Node.js compatibility issues.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/adapt-to-edge/index.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"browser\": {\n    \"crypto\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack Server Package\nDESCRIPTION: Command to install the required ZenStack server package using npm.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/hono.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/server\n```\n\n----------------------------------------\n\nTITLE: Using hasSome() Function for Array Fields in ZenStack\nDESCRIPTION: Shows how to check if an array field contains at least one value from another array. This example allows reading posts that have either 'zenstack' or 'prisma' in their tags.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_11\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id Int @id\n    tags String[]\n    @@allow('read', hasSome(tags, ['zenstack', 'prisma']))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Controllers in NestJS\nDESCRIPTION: TypeScript code for implementing CRUD operations in a NestJS controller using PrismaService.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nestjs.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Body, Controller, Get, Param, Post, Put } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly prismaService: PrismaService) {}\n\n  @Post('users')\n  async signup(@Body() userData: { name: string }) {\n    return this.prismaService.user.create({ data: userData });\n  }\n\n  @Get('posts')\n  async getAllPosts() {\n    return this.prismaService.post.findMany();\n  }\n\n  @Post('posts')\n  async createDraft(@Body() postData: { title: string; authorId: number }) {\n    return this.prismaService.post.create({\n      data: postData,\n    });\n  }\n\n  @Put('posts/publish/:id')\n  async publishPost(@Param('id') id: string) {\n    return this.prismaService.post.update({\n      where: { id: Number(id) },\n      data: { published: true },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SWR Query Key Structure\nDESCRIPTION: Example showing the structure of a query key used by ZenStack-generated SWR hooks for caching and identifying queries.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/swr.mdx#2025-04-10_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nJSON.stringify({ \n    prefix: 'zenstack',\n    model: 'User', \n    operation: 'findUnique', \n    args: { where: { id: '1' } }, \n    flags: { infinite: false } \n})\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack in the Project\nDESCRIPTION: Command to initialize ZenStack in the project, which installs dependencies and copies schema files.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init\n```\n\n----------------------------------------\n\nTITLE: Adding RESTful API Support with ZenStack\nDESCRIPTION: Code for adding a RESTful API flavor to the Express server by mounting another ZenStack middleware at a different path with the REST handler.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport RESTHandler from '@zenstackhq/server/api/rest';\n\napp.use('/api/rest', \n    ZenStackMiddleware({ \n        handler: RESTHandler({ endpoint: 'http://localhost:3000/api/rest' }),\n        getPrisma: (req) => enhance(prisma, { user: getUser(req) })\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Access Policies in PostgREST using SQL\nDESCRIPTION: SQL examples for defining access policies in PostgREST, including giving users full access to their own posts and making public posts readable to all.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/postgrest-alternative/index.md#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- users have full access to their own posts\nCREATE POLICY post_owner_policy ON post\n    USING (owner = current_user);\n\n-- public posts are readable to all\nCREATE POLICY post_read_policy ON post FOR SELECT\n    USING (published = true);\n```\n\n----------------------------------------\n\nTITLE: Using Enhanced PrismaClient with Typed JSON\nDESCRIPTION: Demonstrates how to use ZenStack's enhanced PrismaClient to get automatic typing for JSON fields without explicit type casting.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/json-typing/index.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\n\nconst db = enhance(prisma);\nconst image = await db.image.findFirstOrThrow();\n\n// image.metadata is now directly typed as { width: number, height: number, format: string }\nconsole.log('Image dimensions:', image.metadata.width, 'by', image.metadata.height);\n```\n\n----------------------------------------\n\nTITLE: Implementing Credentials-based Authorization in NextAuth\nDESCRIPTION: Implementation of the authorize function for email/password-based authentication using Prisma client.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/authentication/next-auth.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from \"../../../server/db/client\";\n\nexport const authOptions: NextAuthOptions = {\n    ...\n    providers: [\n        CredentialsProvider({\n            credentials: {\n                email: {\n                    label: 'Email Address',\n                    type: 'email',\n                },\n                password: {\n                    label: 'Password',\n                    type: 'password',\n                },\n            },\n\n            authorize: authorize(prisma),\n        }),\n    ]\n};\n\nfunction authorize(prisma: PrismaClient) {\n  return async (credentials: Record<\"email\" | \"password\", string> | undefined) => {\n    if (!credentials) throw new Error(\"Missing credentials\");\n    if (!credentials.email) throw new Error('\"email\" is required in credentials');\n    if (!credentials.password) throw new Error('\"password\" is required in credentials');\n\n    const maybeUser = await prisma.user.findFirst({\n      where: { email: credentials.email },\n      select: { id: true, email: true, password: true },\n    });\n\n    if (!maybeUser || !maybeUser.password) return null;\n\n    const isValid = await compare(credentials.password, maybeUser.password);\n    if (!isValid) {\n      return null;\n    }\n\n    return { id: maybeUser.id, email: maybeUser.email };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Attributes in ZModel\nDESCRIPTION: Demonstrates how ZModel allows custom attributes like @password and @omit for enhanced functionality in model definitions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/1-zmodel.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @default(autoincrement()) @id\n    email String @unique\n    password String @omit @password\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry for ZenStack CLI\nDESCRIPTION: This command demonstrates how to disable telemetry for ZenStack CLI by setting the DO_NOT_TRACK environment variable to 1 before running the CLI command.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/telemetry.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDO_NOT_TRACK=1 npx zenstack ...\n```\n\n----------------------------------------\n\nTITLE: Selecting AI Model Provider with Vercel AI SDK\nDESCRIPTION: Implementation of model selection logic using Vercel AI SDK. This code checks for available API keys in the environment and initializes the appropriate language model (OpenAI or Grok), providing flexibility for users with different AI service subscriptions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/code-as-doc/index.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n    let model: LanguageModel;\n\n    if (process.env.OPENAI_API_KEY) {\n        model = openai('gpt-4-turbo');\n    } else if (process.env.XAI_API_KEY) {\n        model = xai('grok-beta');\n    }\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Plugin in ZModel\nDESCRIPTION: Shows how to configure a plugin in ZModel. Plugins are ZenStack's extensibility mechanism, allowing users to generate custom artifacts from the schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin swr {\n    provider = '@zenstackhq/swr'\n    output = 'lib/hooks'\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Pre-Update and Post-Update Checks in ZenStack\nDESCRIPTION: This example shows how to combine pre-update and post-update checks in a single rule. It ensures the post is not published and the new revision is greater than the current one.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.6-post-update.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    ...\n    published Boolean\n    revision Int\n\n    @@allow('update', !published && future().revision > revision)\n}\n```\n\n----------------------------------------\n\nTITLE: Using the check() Function Syntax in ZenStack Access Policies\nDESCRIPTION: Examples of different ways to use the check() function in ZenStack schemas. The function can explicitly specify operations, default to current context, delegate all operations at once, or be combined with other conditions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/check-function/index.md#2025-04-10_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nfunction check(field: FieldReference, operation String?): Boolean\n```\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Child {\n  parent Parent\n  @@allow('read', check(parent, 'update'))\n}\n```\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Child {\n  ...\n  parent Parent\n\n  @@allow('read', check(parent)) // here the operation is implicitly 'read'\n}\n```\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Child {\n  ...\n  parent Parent\n\n  @@allow('all', check(parent))\n}\n```\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Child {\n  ...\n  parent Parent\n\n  @@allow('read', check(parent))\n  @@allow('create', check(parent))\n  @@allow('update', check(parent))\n  @@allow('delete', check(parent))\n}\n```\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Child {\n  ...\n  parent Parent\n\n  @@allow('read', check(parent) || auth().status == 'PAID')\n}\n```\n\n----------------------------------------\n\nTITLE: Using search() Function for Full-Text Search in ZenStack\nDESCRIPTION: Demonstrates using the search() function for full-text search in string fields. Requires Prisma's 'fullTextSearch' preview feature to be enabled.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_6\n\nLANGUAGE: zmodel\nCODE:\n```\n@@allow('read', search(title, 'zenstack is awesome'))\n```\n\n----------------------------------------\n\nTITLE: Filtering on JSON Fields with Current Approach\nDESCRIPTION: Demonstrates the current Prisma-style approach for filtering on JSON fields using path-based filtering.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/json-typing/index.md#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// find images with width greater than 102\nconst images = await db.image.findMany({\n  where: {\n    metadata: { path: ['width'], gt: 1024 }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack Server Package for NestJS\nDESCRIPTION: Command to install the ZenStack server package which includes the NestJS adapter.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/nestjs.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/server\n```\n\n----------------------------------------\n\nTITLE: Creating a NextAuth Session Provider Component\nDESCRIPTION: React component that sets up the NextAuth SessionProvider for authentication across the application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { SessionProvider } from 'next-auth/react';\nimport React from 'react';\n\ntype Props = {\n  children: React.ReactNode;\n};\nfunction NextAuthSessionProvider({ children }: Props) {\n  return <SessionProvider>{children}</SessionProvider>;\n}\n\nexport default NextAuthSessionProvider;\n```\n\n----------------------------------------\n\nTITLE: Adding ZenStack RPC Middleware to Express\nDESCRIPTION: Implementation of Express app with ZenStack middleware using RPC API flavor. This code mounts CRUD API to the /api/rpc path using a standard PrismaClient.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nimport { ZenStackMiddleware } from '@zenstackhq/server/express';\nimport express from 'express';\n\nconst app = express();\napp.use(express.json());\n\nconst prisma = new PrismaClient();\napp.use('/api/rpc', ZenStackMiddleware({ getPrisma: () => prisma }));\n\napp.listen(3000, () => console.log('🚀 Server ready at: http://localhost:3000'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono Middleware with ZenStack\nDESCRIPTION: Example of setting up a Hono middleware using createHonoHandler to handle CRUD operations. Shows integration with PrismaClient and user authentication.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/hono.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nimport { enhance } from '@zenstackhq/runtime';\nimport { createHonoHandler } from '@zenstackhq/server/hono';\nimport { Context, Hono } from 'hono';\n\nconst prisma = new PrismaClient();\nconst app = new Hono();\n\napp.use(\n    '/api/model/*',\n    createHonoHandler({\n        getPrisma: (ctx) => {\n            return enhance(prisma, { user: getCurrentUser(ctx) });\n        },\n    })\n);\n\nfunction getCurrentUser(ctx: Context) {\n    // the implementation depends on your authentication mechanism\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring tRPC Plugin for v10 in ZModel Schema\nDESCRIPTION: ZModel configuration for the tRPC plugin specifying the provider and output directory for generated routers in tRPC v10.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/trpc.mdx#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin trpc {\n    provider = '@zenstackhq/trpc'\n    output = 'src/server/routers/generated'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Project with create-t3-app\nDESCRIPTION: Command to create a new Next.js project using create-t3-app with Tailwind, NextAuth, Prisma, and app router.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-t3-app@latest --tailwind --nextAuth --prisma --appRouter --CI my-todo-app\n```\n\n----------------------------------------\n\nTITLE: Defining Post Read Access Policy for Public Posts in ZenStack\nDESCRIPTION: ZenStack access policy rule that allows organization members to read public posts within their organization.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-backend/index.md#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n@@allow('read', isPublic && org.members?[id == auth().id])\n```\n\n----------------------------------------\n\nTITLE: Creating a NextAuth Session Provider Component\nDESCRIPTION: React component that sets up the NextAuth SessionProvider for authentication across the application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { SessionProvider } from 'next-auth/react';\nimport React from 'react';\n\ntype Props = {\n  children: React.ReactNode;\n};\nfunction NextAuthSessionProvider({ children }: Props) {\n  return <SessionProvider>{children}</SessionProvider>;\n}\n\nexport default NextAuthSessionProvider;\n```\n\n----------------------------------------\n\nTITLE: Modeling Content Types with Mermaid Class Diagram\nDESCRIPTION: Illustrates the class hierarchy for different content types (Post, Image, Video) using a Mermaid class diagram. This shows the ideal object-oriented structure for polymorphic content types.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    Content <|-- Post\n    Content <|-- Image\n    Content <|-- Video\n    Content : +String id\n    Content : +Date created\n    Content : +Date updated\n    Content: +bool published\n    Content: +string AuthorId\n    class Post{\n      +String title\n      +String content\n    }\n    class Image{\n      +string url\n      +int size\n    }\n    class Video{\n      +string url\n      +int duration\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Enhanced PrismaClient with ZenStack Runtime\nDESCRIPTION: This snippet shows how to create an enhanced PrismaClient using ZenStack's runtime API. The enhanced client automatically enforces the access policies defined in the ZModel schema while preserving Prisma's query API.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-auth/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient} from '@prisma/client';\nimport { enhance } from '@zenstackhq/runtime';\nimport { getCurrentUser } from '@/lib/auth';\n\nconst prisma = new PrismaClient();\n\n// create an enhanced PrismaClient with a user context that provides \n// value for the \"auth()\" function in policy rules\nconst db = enhance(prisma, { user: getCurrentUser() });\n\n// will only return posts readable to the current user\nconst posts = await db.post.findMany();\n\n// will be rejected if the current user is not the author\nawait db.post.update({ where: { id: postId }, data: { ... } });\n```\n\n----------------------------------------\n\nTITLE: Testing Validation in REPL\nDESCRIPTION: Example of testing email validation through the ZenStack REPL, showing how validation errors are returned when invalid data is provided.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/5-data-validation.md#2025-04-10_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ndb.user.create({ data: { email: 'xyz.abc' } })\n```\n\n----------------------------------------\n\nTITLE: Querying Polymorphic Content in Frontend\nDESCRIPTION: Demonstrates how to query all content types using the base Content model, including specific fields for each content type. This showcases the flexibility of the polymorphic structure in frontend data fetching.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst { data: contents } = useFindManyContent(\n  {\n    include: {\n      author: true,\n      post: true,   \n      image: true,\n      ... /// list all the concrete content type here**\n    },\n    orderBy: { createdAt: \"desc\" },\n  },\n  // fetch only when user's logged in\n  { disabled: !session?.user }\n);\n```\n\n----------------------------------------\n\nTITLE: Generated Entity-Relation Diagram in Mermaid Format\nDESCRIPTION: An example of a generated mermaid diagram showing entity relationships for a 'Space' model with its connections to 'SpaceUser' and 'List' entities.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part2/3-writing-plugins.md#2025-04-10_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n\"Space\" {\n  String id PK \n  DateTime createdAt  \n  DateTime updatedAt  \n  String name  \n  String slug  \n}\n\"Space\" ||--o{ \"SpaceUser\": members\n\"Space\" ||--o{ \"List\": lists\n```\n\n----------------------------------------\n\nTITLE: Checking String End in ZModel\nDESCRIPTION: Checks if a given field ends with the search string. Equivalent to Prisma's endsWith operator.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_39\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction endsWith(field: String, search: String): Boolean {}\n```\n\n----------------------------------------\n\nTITLE: Providing Current User in TypeScript\nDESCRIPTION: Pseudo-code demonstrating how to provide the current user when calling the enhance function.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// `getCurrentUser` is an authentication API that extracts \n// the current user from the request\nconst user = await getCurrentUser(request);\n\n// create an enhanced Prisma Client for the user, the `user` object\n// provides value for the `auth()` function in policy rules\nconst db = enhance(prisma, { user })\n```\n\n----------------------------------------\n\nTITLE: Improved Soft Delete with Timestamp-based Unique Constraint\nDESCRIPTION: Enhanced implementation using an integer timestamp for deletion status instead of a boolean flag. This approach properly handles unique constraints by creating a compound unique index with the deleted timestamp.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/soft-delete-real/index.md#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nmodel Post {\n    id String @id @default(uuid())\n    // name should be unique\n    name String\n    // when deleting, set it to the timestamp of deletion\n    deleted Int @default(0) @omit\n\n    @@unique([name, deleted])\n    @@deny('read', deleted != 0)\n}\n```\n\n----------------------------------------\n\nTITLE: ZModel Schema with Custom Attribute for TypeGraphQL\nDESCRIPTION: Improved version of the Prisma schema using ZModel's custom attributes, providing better type safety and compiler checks for TypeGraphQL metadata.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/existing-prisma.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @TypeGraphQL.omit(output: Boolean?, input: Boolean?)\n\nmodel User {\n  id Int @default(autoincrement()) @id\n  email String  @unique\n  password String @TypeGraphQL.omit(output: true, input: true)\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Polymorphic UI Components\nDESCRIPTION: Creating specialized UI components for each content type to improve rendering code organization and type safety.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Post = ({ content }: { content: Content }) => {\n  const post = content as Post;\n  return <span>{post.title}</span>;\n};\n\nexport const Image = ({ content }: { content: Content }) => {\n  const image = content as Image;\n  return (<Image src= {image.url || \"\"} alt={image.id} />);\n};\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack GraphQLYoga plugin in RedwoodJS\nDESCRIPTION: TypeScript code to install the ZenStack GraphQLYoga plugin in the GraphQL handler of a RedwoodJS project.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/redwood.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useZenStack } from '@zenstackhq/redwood'\nimport { db } from 'src/lib/db'\nimport { createGraphQLHandler } from '@redwoodjs/graphql-server'\n...\n\nexport const handler = createGraphQLHandler({\n  ...\n  extraPlugins: [useZenStack(db)],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Source in ZModel\nDESCRIPTION: Shows how to declare a data source for connecting to a database. It includes the provider type and connection URL, which can be a plain string or loaded from an environment variable.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\ndatasource db {\n    provider = \"postgresql\"\n    url = \"postgresql://postgres:abc123@localhost:5432/todo?schema=public\"\n}\n```\n\nLANGUAGE: zmodel\nCODE:\n```\ndatasource db {\n    provider = \"postgresql\"\n    url = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Lucia User Type with Custom Attributes\nDESCRIPTION: This code extends the Lucia User type to include additional attributes like userName, allowing access to these fields in the application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/lucia.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module \"lucia\" {\n  interface Register {\n    Lucia: typeof lucia;\n    DatabaseUserAttributes: DatabaseUserAttributes\n  }\n}\n\ninterface DatabaseUserAttributes {\n  userName: string;\n}\n\nexport const lucia = new Lucia(adapter, {\n  getUserAttributes: (attributes) => {\n    return {\n      userName: attributes.userName\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Django-Guardian - Decorator Approach\nDESCRIPTION: Demonstrates how to use Django-Guardian's decorator for automatic permission checking in views.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/django-guardian/index.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom guardian.decorators import permission_required_or_403\n\n@permission_required_or_403('change_post', (Post, 'slug', 'post_slug'))\ndef edit_post(request, post_slug):\n  # update logic here\n```\n\n----------------------------------------\n\nTITLE: Creating a Prisma Express.js Project\nDESCRIPTION: Commands to create a new Prisma project using a Express.js template, install dependencies, and initialize the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/backend.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit prisma/prisma-examples/typescript/rest-express my-blog-app\ncd my-blog-app\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db push\nnpx prisma db seed\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: REPL Usage Example - JavaScript\nDESCRIPTION: Shows how to use the enhanced Prisma Client in REPL environment to query user data. Demonstrates default access policy behavior.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/3-enhancement.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack repl\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndb.user.findMany();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: RESTful API Operations with JSON:API Format in TypeScript\nDESCRIPTION: Demonstrates various RESTful API operations including GET, POST, PATCH, and DELETE requests using JSON:API format. Shows how to query resources, filter results, include relationships, create new resources, update existing ones, and delete resources.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/1-api-flavor/1.2-rest.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// find all posts\nGET /api/model/post\n=> \n{\n    \"jsonapi\": { \"version\": \"1.0\" },\n    \"data\": [\n        { \"type\": \"post\", \"id\": \"1\", \"attributes\": { \"title\": \"Hello World\", ... }, ... },\n        ...\n    ],\n    ...\n}\n\n// find all published posts\nGET /api/model/post?filter[published]=true\n=>\n{\n    \"jsonapi\": { \"version\": \"1.0\" },\n    \"data\": [\n        { \"type\": \"post\", \"id\": \"1\", \"attributes\": { \"title\": \"Hello World\", ... }, ... },\n        ...\n    ],\n    ...\n}\n\n// find all posts with their authors\nGET /api/model/post?include=author\n=>\n{\n    \"jsonapi\": { \"version\": \"1.0\" },\n    \"data\": [\n        { \n            \"type\": \"post\", \n            \"id\": \"1\", \n            \"attributes\": { \"title\": \"Hello World\", ... },\n            \"relationships\": {\n                \"author\": { \"data\": { \"type\": \"user\", \"id\": \"1\" } }\n            }\n        },\n        ...\n    ],\n    \"included\": [\n        { \"type\": \"user\", \"id\": \"1\", \"attributes\": { \"name\": \"Joey\", ... } },\n        ...\n    ],\n    ...\n}\n\n// create a post for user#1\nPOST /api/model/post\n{\n    \"data\": {\n        \"type\": \"post\",\n        \"attributes\": {\n            \"title\": \"Hello World\"\n        },\n        \"relationships\": {\n            \"author\": { \"data\": { \"type\": \"user\", \"id\": \"1\" } }\n        }\n    }\n}\n\n// update a post\nPATCH /api/model/post/1\n{\n    \"data\": {\n        \"type\": \"post\",\n        \"id\": \"1\",\n        \"attributes\": {\n            \"title\": \"Hello New World!\"\n        }\n    }\n}\n\n// delete a post\nDELETE /api/model/post/1\n```\n\n----------------------------------------\n\nTITLE: Generating Type-Safe Objects with Vercel AI SDK\nDESCRIPTION: Uses the generateObject API to create a structured response based on the defined schema and prompt, returning a strongly-typed object that can be used in TypeScript.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/code-as-doc/index.md#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst { object } = await generateObject({\n        model\n        schema\n        prompt\n    });\n```\n\n----------------------------------------\n\nTITLE: Providing Current User in TypeScript\nDESCRIPTION: Pseudo-code demonstrating how to provide the current user when calling the enhance function.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// `getCurrentUser` is an authentication API that extracts \n// the current user from the request\nconst user = await getCurrentUser(request);\n\n// create an enhanced Prisma Client for the user, the `user` object\n// provides value for the `auth()` function in policy rules\nconst db = enhance(prisma, { user })\n```\n\n----------------------------------------\n\nTITLE: Creating Thank You Confirmation Page\nDESCRIPTION: Simple confirmation page component shown after successful booking submission.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/cal-com-clone.mdx#2025-04-10_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function ThankYouPage() {\n    return (\n        <div className=\"flex h-screen w-screen flex-col items-center justify-center\">\n            <h1 className=\"pb-6 text-3xl font-semibold\">Thank you for your booking!</h1>\n            <p className=\"text-lg\">We'll get in touch soon.</p>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Supabase Query with Pre-filtering\nDESCRIPTION: Example of pre-filtering Supabase queries for optimal performance, showing how to first fetch user spaces and then query lists within those spaces.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/supabase-alternative/index.md#2025-04-10_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// First, get the user's spaceIds\nconst { data: userSpaces } = await supabase.from('SpaceUser').select('spaceId').eq('userId', userId);\n\n// Extract spaceIds from the result\nconst userSpaceIds = userSpaces.map((space) => space.spaceId);\n\n// Now, query the List table\nconst { data, error } = await supabase\n    .from('List')\n    .select('*')\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Vue Query Plugin in Nuxt\nDESCRIPTION: Sets up the Vue Query plugin for the Nuxt application by creating a query client instance and registering it with the Vue app. This enables efficient data fetching and state management.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nuxt.mdx#2025-04-10_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VueQueryPlugin, QueryClient } from '@tanstack/vue-query';\n\nexport default defineNuxtPlugin((nuxt) => {\n    const queryClient = new QueryClient();\n    nuxt.vueApp.use(VueQueryPlugin, { queryClient });\n});\n```\n\n----------------------------------------\n\nTITLE: Auto-incrementing Integer in ZModel\nDESCRIPTION: Creates a sequence of integers in the underlying database and assigns incremented values to ID fields of created records.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_32\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction autoincrement(): Int {}\n```\n\n----------------------------------------\n\nTITLE: Firebase Query Implementation\nDESCRIPTION: Example of querying posts from Firestore with filtering and SWR integration for frontend data fetching.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/firebase-alternative/index.md#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await getDocs(\n  query(collection(db, 'posts'),\n    or(\n\t  where(\"published\", \"==\", true),\n\t  where(\"authorId\", \"==\", user.uid)))\n);\n```\n\n----------------------------------------\n\nTITLE: Adding DaisyUI Plugin to Tailwind Configuration\nDESCRIPTION: Code to add the DaisyUI plugin to the Tailwind CSS configuration file.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  //...\n  plugins: [require(\"daisyui\")],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ZModel Plugin for tRPC CRUD Routers\nDESCRIPTION: Shows how to define a ZModel plugin for generating tRPC CRUD routers, a new extensibility mechanism provided by ZModel.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/1-zmodel.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin trpc {\n    provider = \"@zenstackhq/trpc\"\n    output   = \"src/generated\"\n}\n```\n\n----------------------------------------\n\nTITLE: Netlify Deployment Configuration\nDESCRIPTION: TOML configuration for Netlify deployment to include ZenStack generated files.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/redwood.md#2025-04-10_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[functions]\n  included_files = [\"node_modules/.zenstack/*\"]\n```\n\n----------------------------------------\n\nTITLE: ReferentialAction Enum Definition in ZModel\nDESCRIPTION: The enum definition for ReferentialAction showing the possible values: Cascade, Restrict, NoAction, SetNull, and SetDefault.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_50\n\nLANGUAGE: zmodel\nCODE:\n```\nenum ReferentialAction {\n    Cascade\n    Restrict\n    NoAction\n    SetNull\n    SetDefault\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User and Post Models in ZModel\nDESCRIPTION: ZModel schema defining User and Post models with access policies. The User model allows read access to all, while the Post model allows all operations only to the author.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/supabase.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id @db.Uuid\n    posts Post[]\n    ... // other fields\n\n    @@allow('read', true)\n}\n\nmodel Post {\n    id String @id @db.Uuid\n    title String\n    author User @relation(fields: [authorId], references: [id])\n    authorId String @db.Uuid\n\n    @@allow('all', author == auth())\n}\n```\n\n----------------------------------------\n\nTITLE: Traversing Relation Fields in ZModel\nDESCRIPTION: Example of accessing and traversing relation fields from the auth() function in policy rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_7\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    ...\n    role Role\n}\n\nmodel Role {\n    ...\n    permissions Permission[]\n}\n\nmodel Permission {\n    ...\n    name String  // READ, WRITE, etc.\n}\n\nmodel Post {\n    ...\n\n    @@allow('read', auth().role.permissions?[name == 'READ'])\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pet Model Access Policy in ZenStack\nDESCRIPTION: Alternative approach to implementing pet store order policy by defining constraints on the Pet model instead of the Order model\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/good-dx/index.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Pet\n{\n  orderId String\n  order Order @relation(fields: [orderId], references: [id])\n\n  // The pet could only be added to an order if it has not been added to any order yet.\n  @@allow('update', orderId == null || future().orderId == orderId)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Triggers for Syncing Supabase Auth with Custom User Model\nDESCRIPTION: SQL database trigger setup that automatically synchronizes new users from Supabase Auth's auth.users table to the public.User table. This ensures user data consistency without directly coupling with Supabase's internal schemas.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/authentication/supabase.md#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- inserts a row into public.\"User\"\ncreate function public.handle_new_user()\nreturns trigger\nlanguage plpgsql\nsecurity definer set search_path = public\nas $$\nbegin\n  insert into public.\"User\" (id)\n  values (new.id);\n  return new;\nend;\n$$;\n\n-- trigger the function every time a user is created\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n```\n\n----------------------------------------\n\nTITLE: Enhancing Prisma Client with Supabase Auth in TypeScript\nDESCRIPTION: TypeScript code to create an enhanced Prisma client with user context from Supabase Auth. This allows for enforcing access policies, data validation, and other ZenStack behaviors.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/supabase.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';\nimport { prisma } from '@lib/db';\n\n// create a wrapper of Prisma client that enforces access policy,\n// data validation, and @password, @omit behaviors\nasync function getPrisma() {\n    const supabase = createRouteHandlerClient({ cookies });\n    const { data: user } = await supabase.auth.getUser();\n    const uid = user.user?.id;\n    // TODO: if you need to access fields other than just \"id\" in access policies, \n    // you can do a database query here to fetch the full user record\n    const contextUser = uid ? { id: uid } : undefined;\n    return enhance(prisma, { user: contextUser });\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Pets for Anonymous Users with cURL\nDESCRIPTION: Example cURL command to list available pets without authentication, demonstrating that sold pets are hidden from anonymous users as defined in the access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:3000/api/pet/findMany\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Login Request with JWT Token\nDESCRIPTION: Sample JSON response after successful login, containing the user ID, email, and a JWT token that will be used for subsequent authenticated requests.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"clfan0lys0000vhtktutornel\",\n    \"email\": \"tom@pet.inc\",\n    \"token\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Model in ZModel\nDESCRIPTION: Example of defining a User model as the default auth model and using it in policy rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id\n    role String\n    posts Post[]\n}\n\nmodel Post {\n    id Int @id\n    title String\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int\n\n    // ✅ valid rule\n    @@allow('all', auth().role == 'ADMIN')\n\n    // ❌ invalid rule, `subscribed` field doesn't exist in `User` model\n    @@allow('all', auth().subscribed == true) \n}\n```\n\n----------------------------------------\n\nTITLE: Creating the tRPC App Router with Generated Routers (v10)\nDESCRIPTION: Code snippet showing how to create a tRPC v10 application router using the generated router factory from ZenStack.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/trpc.mdx#2025-04-10_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { createRouter } from './generated/routers';\n\nconst t = initTRPC.context<Context>().create();\n\nexport const appRouter = createRouter(t.router, t.procedure);\nexport type AppRouter = typeof appRouter;\n```\n\n----------------------------------------\n\nTITLE: Registering the CRUD Middleware in NestJS Module\nDESCRIPTION: This code demonstrates how to register the ZenStack CRUD middleware in a NestJS module to create a complete RESTful API at the '/api/zen' endpoint that enforces all access policies defined in the schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/nest-api/index.md#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Module(...)\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(CrudMiddleware).forRoutes('/api/zen');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Polymorphic Content Component\nDESCRIPTION: Example showing how to use the PolymorphicContent component to render the appropriate component based on the contentType of the content.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<div>\n  <PolymorphicContent\n    componentName={content.contentType}\n    content={content}\n  ></PolymorphicContent>\n  <p className=\"text-lg\"> by {content.author.email}</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack in Current Directory\nDESCRIPTION: Example of initializing the current folder with default ZenStack settings using npx.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/cli.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack init\n```\n\n----------------------------------------\n\nTITLE: Defining Content Type Union in TypeScript\nDESCRIPTION: This snippet shows the definition of a union type for content types, which is used to ensure type safety when referencing content types in the application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\ntype contentType = 'Post' | 'Video' | ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Build Script with ZenStack\nDESCRIPTION: Example package.json configuration showing how to integrate ZenStack generation into the Vercel build process alongside Next.js build and Prisma migrations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/deploy.md#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"vercel-build\": \"zenstack generate && next build && prisma migrate deploy\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Prisma Client with Auth0 User Session\nDESCRIPTION: Example of how to get an authenticated Auth0 user and provide it to the enhance function when creating a Prisma client.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/auth0.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getPrisma = async (req) => {\n  const user = await getAuthenticatedAuth0User(req);\n  return enhance(user);\n};\n```\n\n----------------------------------------\n\nTITLE: Visualizing ABAC ERD with Mermaid\nDESCRIPTION: Represents the Entity-Relationship Diagram (ERD) for the Attribute-Based Access Control (ABAC) pattern using Mermaid syntax. It shows the relationship between User and Resource entities, including relevant attributes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/model-authz/index.md#2025-04-10_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    User {\n        int id\n        string name\n        int reputation\n    }\n    Resource {\n        int id\n        string name\n        boolean published\n    }\n    User ||--o{ Resource : owns\n```\n\n----------------------------------------\n\nTITLE: Markdown Generator Plugin Implementation\nDESCRIPTION: Main implementation of a plugin that generates markdown documentation from ZModel schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part2/3-writing-plugins.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type PluginOptions } from '@zenstackhq/sdk';\nimport {\n    isDataModel,\n    type DataModel,\n    type Model,\n} from '@zenstackhq/sdk/ast';\nimport fs from 'fs';\n\nexport const name = 'Markdown';\n\nexport default async function run(model: Model, options: PluginOptions) {\n    // process options\n    const title = options.title ?? 'My Application Model';\n    const description = options.description ?? 'Description of my application';\n\n    // get all data models\n    const dataModels = model.declarations.filter((x): x is DataModel =>\n        isDataModel(x)\n    );\n\n    // TOC\n    const toc = dataModels.map((x) => `- [${x.name}](#${x.name})`).join('\\n');\n\n    // data model docs\n    const dataModelDocs = generateDataModelDocs(dataModels);\n\n    fs.writeFileSync(\n        'schema.md',\n        `# ${title}\n    \n${description}\n    \n${toc}\n    \n${dataModelDocs}\n    `\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing auth() with Other Fields in Policy Rules\nDESCRIPTION: Examples showing equivalent ways to compare auth() with other fields in policy rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_7\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    ...\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int\n    @@allow('update', auth() == author)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Files in ZModel\nDESCRIPTION: This snippet shows how to use the 'import' syntax in ZModel to break down a large schema into multiple files.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/1-zmodel.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nimport \"user\"\nimport \"post\"\n```\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id @default(autoincrement())\n    email String @unique\n    posts Post[]\n}\n```\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id Int @id @default(autoincrement())\n    title String\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Pets with Authentication Token via cURL\nDESCRIPTION: Example cURL command to list pets with authentication, showing that the authenticated user can see both available pets and the ones they've purchased, as defined in the access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:3000/api/pet/findMany -H \"Authorization: Bearer $token\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ZenStack Hooks Generation in Schema\nDESCRIPTION: ZModel configuration for generating React hooks that interact with the database through the auto-generated API endpoints using Tanstack Query.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs-app-router.mdx#2025-04-10_snippet_9\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin hooks {\n  provider = '@zenstackhq/tanstack-query'\n  target = 'react'\n  version = 'v5'\n  output = \"./src/lib/hooks\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating API to use user-bound Prisma client\nDESCRIPTION: Changes the API code to use getPrisma(req) instead of the global prisma client to apply access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/backend.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(`/post`, async (req, res) => {\n    const post = await getPrisma(req).post.findMany({\n        include: { author: true },\n    });\n    res.json(post);\n});\n```\n\n----------------------------------------\n\nTITLE: Error Response for Access Policy Violation\nDESCRIPTION: Example error output from REPL showing the access policy violation when attempting to create data for another user.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ndenied by policy: list entities failed 'create' check, entity { id: 2 } failed policy check\nCode: P2004\nMeta: { reason: 'ACCESS_POLICY_VIOLATION' }\n```\n\n----------------------------------------\n\nTITLE: Querying Monthly Page Creation Count in SQL\nDESCRIPTION: SQL query to count the number of pages created in the previous month. This example demonstrates a simple analytics query that could be affected by soft delete implementation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/soft-delete.mdx#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM pages\nWHERE created_at >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1' MONTH)\nAND created_at < DATE_TRUNC('month', CURRENT_DATE)\n```\n\n----------------------------------------\n\nTITLE: Implementing Booking Model Operations\nDESCRIPTION: Server-side helper functions for CRUD operations on the Booking model, including fetching, creating, updating invitations, and deleting bookings.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/cal-com-clone.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Booking, User } from '@prisma/client';\nimport { getEnhancedPrisma } from '~/db.server';\nexport type { Booking } from '@prisma/client';\n\n// Gets a booking together with its owner and invited users\nexport function getBooking({\n    id,\n    userId,\n}: Pick<Booking, 'id'> & {\n    userId: User['id'];\n}) {\n    return getEnhancedPrisma(userId).booking.findFirst({\n        where: { id },\n        include: { user: true, invitedUsers: { include: { user: true } } },\n    });\n}\n\n// Gets all booking items\nexport function getBookingItems({ userId }: { userId: User['id'] }) {\n    return getEnhancedPrisma(userId).booking.findMany({\n        orderBy: { updatedAt: 'desc' },\n    });\n}\n\n// Creates a new booking\nexport function createBooking({\n    userId,\n    email,\n    notes,\n    startAt,\n    duration,\n}: Pick<Booking, 'email' | 'notes' | 'startAt' | 'duration'> & {\n    userId: User['id'];\n}) {\n    return getEnhancedPrisma(userId).booking.create({\n        data: {\n            email,\n            notes,\n            startAt,\n            duration,\n            user: {\n                connect: {\n                    id: userId,\n                },\n            },\n        },\n    });\n}\n\n// Adds or removes an invitation of a booking\nexport function updateInvite({\n    userId,\n    bookingId,\n    inviteUserId,\n    add,\n}: {\n    userId: User['id'];\n    bookingId: Booking['id'];\n    inviteUserId: User['id'];\n    add: boolean;\n}) {\n    return getEnhancedPrisma(userId).booking.update({\n        where: { id: bookingId },\n        include: { invitedUsers: true },\n        data: {\n            invitedUsers: add\n                ? {\n                      connectOrCreate: {\n                          where: {\n                              bookingId_userId: {\n                                  bookingId,\n                                  userId: inviteUserId,\n                              },\n                          },\n                          create: {\n                              user: {\n                                  connect: { id: inviteUserId },\n                              },\n                          },\n                      },\n                  }\n                : {\n                      delete: {\n                          bookingId_userId: {\n                              bookingId,\n                              userId: inviteUserId,\n                          },\n                      },\n                  },\n        },\n    });\n}\n\n// Deletes a booking\nexport function deleteBooking({ id, userId }: Pick<Booking, 'id'> & { userId: User['id'] }) {\n    return getEnhancedPrisma(userId).booking.delete({\n        where: { id },\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Field-Level Allow Attribute Definition in ZModel\nDESCRIPTION: Defines the structure of the @allow attribute for field-level access policy control. Includes operation, condition, and override parameters.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_43\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @allow(_ operation: String, _ condition: Boolean, _ override: Boolean?)\n```\n\n----------------------------------------\n\nTITLE: Using startsWith() Function in ZenStack Policy Rules\nDESCRIPTION: Shows how to check if a string field starts with a specific value. This example allows reading posts whose title starts with 'zenstack'.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_7\n\nLANGUAGE: zmodel\nCODE:\n```\n@@allow('read', startsWith(title, 'zenstack'))\n```\n\n----------------------------------------\n\nTITLE: Building the Blog Post List UI in SvelteKit\nDESCRIPTION: This Svelte component creates the main page UI of a blog application, showing posts and providing functionality to create, publish/unpublish, and delete posts based on user authentication status.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/sveltekit.mdx#2025-04-10_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n    import { enhance } from '$app/forms';\n    import type { ActionData, PageData } from './$types';\n\n    export let data: PageData;\n    export let form: ActionData;\n</script>\n\n<main class=\"flex flex-col min-h-screen items-center justify-center gap-12 px-4 py-16 text-white bg-gradient-to-b from-[#2e026d] to-[#15162c]\"\n>\n    <h1 class=\"text-5xl font-extrabold\">My Awesome Blog</h1>\n\n    {#if data.user}\n        <div class=\"flex flex-col\">\n            <div class=\"flex gap-4\">\n                <h3 class=\"text-lg\">Welcome back, {data.user.email}</h3>\n                <form method=\"post\" action=\"?/signOut\">\n                    <button type=\"submit\" class=\"text-gray-300 underline\">Sign out</button>\n                </form>\n            </div>\n\n            <section class=\"mt-10 container flex flex-col text-white\">\n                <!-- create post -->\n                <form method=\"post\" action=\"?/create\" use:enhance>\n                    <input\n                        name=\"title\"\n                        type=\"text\"\n                        placeholder=\"Post title\"\n                        required\n                        class=\"text-lg text-black px-4 py-2 rounded mr-2\"\n                    />\n                    <button class=\"rounded border border-white px-4 py-2 text-lg\" type=\"submit\"\n                        >+ Create</button\n                    >\n                </form>\n\n                <!-- post list -->\n                <ul class=\"container mt-8 flex flex-col gap-2\">\n                    {#each data.posts as post (post.id)}\n                        <li class=\"flex items-end justify-between gap-4\">\n                            <!-- post info -->\n                            <p class={`text-2xl ${!post.published ? 'text-gray-400' : ''}`}>\n                                {post.title}\n                                <span class=\"text-lg\"> by {post.author.email}</span>\n                            </p>\n\n                            <!-- post management -->\n                            <div class=\"flex w-32 justify-end gap-1 text-left\">\n                                <form method=\"post\" action=\"?/togglePublish\" use:enhance>\n                                    <input type=\"hidden\" name=\"id\" value={post.id} />\n                                    <button class=\"underline\" type=\"submit\">\n                                        {post.published ? 'Unpublish' : 'Publish'}\n                                    </button>\n                                </form>\n                                <form method=\"post\" action=\"?/delete\" use:enhance>\n                                    <input type=\"hidden\" name=\"id\" value={post.id} />\n                                    <button class=\"underline\" type=\"submit\">Delete</button>\n                                </form>\n                            </div>\n                        </li>\n                    {/each}\n                </ul>\n\n                {#if form?.error}\n                    <p class=\"text-red-500 mt-4\">{form.error}</p>\n                {/if}\n            </section>\n        </div>\n    {:else}\n        <div class=\"flex gap-4 text-2xl\">\n            <a href=\"/signin\" class=\"rounded-lg border px-4 py-2\">Signin</a>\n            <a href=\"/signup\" class=\"rounded-lg border px-4 py-2\">Signup</a>\n        </div>\n    {/if}\n</main>\n```\n\n----------------------------------------\n\nTITLE: Configuring RESTful API Handler in SvelteKit\nDESCRIPTION: Sets up a SvelteKit server hook that uses ZenStack's RESTful API handler. The handler is configured with a prefix path, a getPrisma function, and an endpoint URL for generating resource links.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport zenstack from '@zenstackhq/server/sveltekit';\nimport RestApiHandler from '@zenstackhq/server/api/rest';\nimport { getPrisma } from './lib/db';\n\nexport const handle = zenstack.SvelteKitHandler({\n    prefix: '/api/model',\n    getPrisma,\n    handler: RestApiHandler({ endpoint: 'http://myhost/api/model' })\n});\n```\n\n----------------------------------------\n\nTITLE: Response with non-JSON-serializable data\nDESCRIPTION: The response from querying a full List object, which includes Date fields. The response contains serialization metadata in the meta.serialization field to facilitate proper deserialization.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/3-serialization.md#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"data\" : {\n      \"createdAt\" : \"2023-11-08T04:38:53.385Z\",\n      \"id\" : 1,\n      \"ownerId\" : 1,\n      \"private\" : false,\n      \"spaceId\" : 1,\n      \"title\" : \"Grocery\",\n      \"updatedAt\" : \"2023-11-09T04:52:57.987Z\"\n   },\n   \"meta\" : {\n      \"serialization\" : {\n         \"values\" : {\n            \"createdAt\" : [ \"Date\" ],\n            \"updatedAt\" : [ \"Date\" ]\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ZenStack Schema\nDESCRIPTION: Example schema definition with User and Post models including access control rules\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/swr.mdx#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin hooks {\n  provider = '@zenstackhq/swr'\n  output = \"./src/lib/hooks\"\n}\n\nmodel User {\n  id            String    @id @default(cuid())\n  email         String\n  posts         Post[]\n\n  // everyone can signup, and user profile is also publicly readable\n  @@allow('create,read', true)\n}\n\nmodel Post {\n  id        String @id @default(cuid())\n  title     String\n  published Boolean @default(false)\n  author    User @relation(fields: [authorId], references: [id])\n  authorId  String\n\n  // author has full access\n  @@allow('all', auth() == author)\n\n  // logged-in users can view published posts\n  @@allow('read', auth() != null && published)\n}\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Relation Example in ZModel\nDESCRIPTION: Shows how to define a one-to-many relation between User and Post models using array field and @relation attribute.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_48\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id\n    posts Post[]\n}\n\nmodel Post {\n    id String @id\n    author User? @relation(fields: [authorId], references: [id])\n    authorId String?\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client\nDESCRIPTION: Command to generate the type-safe Prisma client for database access. This needs to be run after schema changes to update the client types and functionality.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/0-prisma.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Component Lookup for Polymorphic Rendering\nDESCRIPTION: Using a component lookup dictionary to dynamically select the appropriate component based on the contentType field, reducing conditional rendering logic.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst componentLookup: {\n  [key: string]: (content: { content: Content }) => JSX.Element;\n} = {\n  Post,\n  Image\n  // Add other components here...\n};\n\nconst PolymorphicContent = ({\n  componentName,\n  content,\n}: {\n  componentName: string;\n  content: Content;\n}) => {\n  const Component = componentLookup[componentName];\n  return Component ? <Component content={content} /> : null;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Post Read Access Policy for Group Sharing in ZenStack\nDESCRIPTION: ZenStack access policy rule that allows group members to read posts shared with their group.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-backend/index.md#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n@@allow('read', groups?[users?[id == auth().id]])\n```\n\n----------------------------------------\n\nTITLE: Creating Enhanced Prisma Client - TypeScript\nDESCRIPTION: Shows how to create a basic enhanced Prisma Client instance by wrapping a regular Prisma Client. The enhanced client provides additional behaviors while maintaining the same API.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/3-enhancement.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nimport { enhance } from '@zenstackhq/runtime';\n\nconst prisma = new PrismaClient();\nconst db = enhance(prisma);\n\n// db has the same typing as prisma\nawait db.user.findMany();\nawait db.user.create({ data: { email: 'zen@stack.dev'} });\n```\n\n----------------------------------------\n\nTITLE: Response with non-JSON-serializable data\nDESCRIPTION: The response from querying a full List object, which includes Date fields. The response contains serialization metadata in the meta.serialization field to facilitate proper deserialization.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/3-serialization.md#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"data\" : {\n      \"createdAt\" : \"2023-11-08T04:38:53.385Z\",\n      \"id\" : 1,\n      \"ownerId\" : 1,\n      \"private\" : false,\n      \"spaceId\" : 1,\n      \"title\" : \"Grocery\",\n      \"updatedAt\" : \"2023-11-09T04:52:57.987Z\"\n   },\n   \"meta\" : {\n      \"serialization\" : {\n         \"values\" : {\n            \"createdAt\" : [ \"Date\" ],\n            \"updatedAt\" : [ \"Date\" ]\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Relation Example in ZModel\nDESCRIPTION: Shows how to define a one-to-many relation between User and Post models using array field and @relation attribute.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_48\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id\n    posts Post[]\n}\n\nmodel Post {\n    id String @id\n    author User? @relation(fields: [authorId], references: [id])\n    authorId String?\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Client Query with Policy Enforcement\nDESCRIPTION: JavaScript example showing how the enhanced Prisma Client filters results based on the defined access policies, returning only users that match the policy.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.1-model-level.md#2025-04-10_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ndb.user.findMany();\n```\n\n----------------------------------------\n\nTITLE: Using This Expression in ZenStack Policy Rules\nDESCRIPTION: Shows how to use the 'this' keyword to reference the containing model. This example allows a user to perform all operations on their own user record.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id\n    @@allow('all', auth() == this) // `this` is a This Expression\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ZModel with Access Policy\nDESCRIPTION: A simple ZModel definition for a Post model with a read access policy that only allows reading published posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/client-extensions.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n  id Int @id @default(autoincrement())\n  title String\n  content String?\n  published Boolean @default(false)\n\n  @@allow('read', published)\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Policy-Enhanced Prisma Query Log\nDESCRIPTION: An example of a logged Prisma query that shows how ZenStack transforms the original query to enforce access policies. The query includes conditions that check owner relationships and space membership.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/debugging.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nprisma:info [policy] `findMany` list:\n{\n  where: {\n    AND: [\n      { NOT: { OR: [] } },\n      {\n        OR: [\n          { owner: { is: { id: 1 } } },\n          {\n            AND: [\n              {\n                space: {\n                  members: {\n                    some: { user: { is: { id: 1 } } }\n                  }\n                }\n              },\n              { NOT: { private: true } }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Schema and Pushing Database Changes\nDESCRIPTION: Command to regenerate the Prisma schema from ZModel definitions and push the schema changes to the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/remix-run.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate && npx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Installing SWR Plugin\nDESCRIPTION: NPM command to install the @zenstackhq/swr package\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/swr.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/swr\n```\n\n----------------------------------------\n\nTITLE: ZenStack Schema Definition\nDESCRIPTION: ZenStack schema definition for the Post model with integrated access control policies using Prisma-based syntax.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/firebase-alternative/index.md#2025-04-10_snippet_6\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n  id String @id @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title String\n  published Boolean @default(false)\n  author User @relation(fields: [authorId], references: [id])\n  authorId String\n\n  // published posts are readable to all login users\n  @@allow('read', auth() != null && published)\n\n  // all posts are readable to their author\n  @@allow('read', auth() == author)\n\n  // users can create posts for themselves\n  @@allow('create', auth() == author)\n\n  // author can update posts but can't change a post's author\n  @@allow('update', auth() == author && auth() == future().author)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an RPC-Style API Handler in ZenStack\nDESCRIPTION: Example of how to create an RPC-style API handler that mirrors PrismaClient's API across the network, which is the default handler style in ZenStack.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/_options.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RPCApiHandler } from '@zenstackhq/server/api';\nconst handler = RPCApiHandler();\n```\n\n----------------------------------------\n\nTITLE: TypeScript definition of EnhancementOptions\nDESCRIPTION: Type definition for enhancement options used by ZenStack functions. It includes settings for loading paths, policy definitions, model metadata, transaction settings, and logging options.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/runtime-api.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype TransactionIsolationLevel =\n    | 'ReadUncommitted'\n    | 'ReadCommitted'\n    | 'RepeatableRead'\n    | 'Snapshot'\n    | 'Serializable';\n\ntype EnhancementOptions = {\n    loadPath?: string;\n    policy?: PolicyDef;\n    modelMeta?: ModelMeta;\n    logPrismaQuery?: boolean;\n    prismaModule?: any;\n    transactionMaxWait?: number;\n    transactionTimeout?: number;\n    transactionIsolationLevel?: TransactionIsolationLevel;\n};\n```\n\n----------------------------------------\n\nTITLE: React TanStack Query Provider Setup\nDESCRIPTION: Example of setting up TanStack Query provider with custom fetch function in a React application\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { Provider as ZenStackHooksProvider } from '../lib/hooks';\nimport type { FetchFn } from '@zenstackhq/tanstack-query/runtime';\n\nconst myFetch: FetchFn = (url, options) => {\n    options = options ?? {};\n    options.headers = {\n        ...options.headers,\n        'x-my-custom-header': 'hello world',\n    };\n    return fetch(url, options);\n};\n\nconst queryClient = new QueryClient();\n\nfunction MyApp({ Component, pageProps: { session, ...pageProps } }: AppProps) {\n    return (\n        <QueryClientProvider client={queryClient}>\n            <ZenStackHooksProvider value={{ endpoint: '/api/model', fetch: myFetch }}>\n                <AppContent />\n            </ZenStackHooksProvider>\n        </QueryClientProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: React TanStack Query Provider Setup\nDESCRIPTION: Example of setting up TanStack Query provider with custom fetch function in a React application\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { Provider as ZenStackHooksProvider } from '../lib/hooks';\nimport type { FetchFn } from '@zenstackhq/tanstack-query/runtime';\n\nconst myFetch: FetchFn = (url, options) => {\n    options = options ?? {};\n    options.headers = {\n        ...options.headers,\n        'x-my-custom-header': 'hello world',\n    };\n    return fetch(url, options);\n};\n\nconst queryClient = new QueryClient();\n\nfunction MyApp({ Component, pageProps: { session, ...pageProps } }: AppProps) {\n    return (\n        <QueryClientProvider client={queryClient}>\n            <ZenStackHooksProvider value={{ endpoint: '/api/model', fetch: myFetch }}>\n                <AppContent />\n            </ZenStackHooksProvider>\n        </QueryClientProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: React TanStack Query Provider Setup\nDESCRIPTION: Example of setting up TanStack Query provider with custom fetch function in a React application\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { Provider as ZenStackHooksProvider } from '../lib/hooks';\nimport type { FetchFn } from '@zenstackhq/tanstack-query/runtime';\n\nconst myFetch: FetchFn = (url, options) => {\n    options = options ?? {};\n    options.headers = {\n        ...options.headers,\n        'x-my-custom-header': 'hello world',\n    };\n    return fetch(url, options);\n};\n\nconst queryClient = new QueryClient();\n\nfunction MyApp({ Component, pageProps: { session, ...pageProps } }: AppProps) {\n    return (\n        <QueryClientProvider client={queryClient}>\n            <ZenStackHooksProvider value={{ endpoint: '/api/model', fetch: myFetch }}>\n                <AppContent />\n            </ZenStackHooksProvider>\n        </QueryClientProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using ZenStack generate Command\nDESCRIPTION: Command for generating Prisma schema and other artifacts as specified by plugins in ZModel, with options.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/cli.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nzenstack generate [options]\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Schema Migrations for Development\nDESCRIPTION: Command to synchronize the Prisma schema with the database during development. This creates migration records and applies changes to the local database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/0-prisma.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate dev\n```\n\n----------------------------------------\n\nTITLE: Custom Attribute Definition in ZModel\nDESCRIPTION: Shows how to define and use custom plugin attributes in ZModel schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part2/3-writing-plugins.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @@myplugin.include()\n```\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Foo {\n    ...\n\n    @@myplugin.include()\n}\n```\n\n----------------------------------------\n\nTITLE: Using hasEvery() Function for Array Fields in ZenStack\nDESCRIPTION: Shows how to check if an array field contains all values from another array. This example allows reading posts that have both 'zenstack' and 'prisma' in their tags.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_10\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id Int @id\n    tags String[]\n    @@allow('read', has(tags, ['zenstack', 'prisma']))\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack in a Next.js Project\nDESCRIPTION: Command to set up ZenStack in the project, which prepares it for enhanced database operations with access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs-app-router.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Validation for User Model\nDESCRIPTION: Adding email validation to ensure the User model's email field contains a valid email address format.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/5-data-validation.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    ...\n    email String @unique @email\n}\n```\n\n----------------------------------------\n\nTITLE: React TanStack Query Provider Setup\nDESCRIPTION: Example of setting up TanStack Query provider with custom fetch function in a React application\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { Provider as ZenStackHooksProvider } from '../lib/hooks';\nimport type { FetchFn } from '@zenstackhq/tanstack-query/runtime';\n\nconst myFetch: FetchFn = (url, options) => {\n    options = options ?? {};\n    options.headers = {\n        ...options.headers,\n        'x-my-custom-header': 'hello world',\n    };\n    return fetch(url, options);\n};\n\nconst queryClient = new QueryClient();\n\nfunction MyApp({ Component, pageProps: { session, ...pageProps } }: AppProps) {\n    return (\n        <QueryClientProvider client={queryClient}>\n            <ZenStackHooksProvider value={{ endpoint: '/api/model', fetch: myFetch }}>\n                <AppContent />\n            </ZenStackHooksProvider>\n        </QueryClientProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Source in ZModel\nDESCRIPTION: This example shows how to declare a data source in ZModel, which is identical to Prisma Schema Language.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/1-zmodel.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\ndatasource db {\n    provider = \"postgresql\"\n    url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Collection Predicates in ZModel\nDESCRIPTION: Shows how to nest collection predicates to express complex conditions involving multi-level relation lookups between models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_55\n\nLANGUAGE: zmodel\nCODE:\n```\n@@allow('read', membership?[space.members?[user == auth()]])\n```\n\n----------------------------------------\n\nTITLE: Using Case-Insensitive contains() Function in ZenStack\nDESCRIPTION: Shows how to perform a case-insensitive string contains check. The third parameter to the contains() function makes the comparison case insensitive.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\n@@allow('read', contains(title, 'zenstack', true))\n```\n\n----------------------------------------\n\nTITLE: Registering ZenStack Module in NestJS Application\nDESCRIPTION: Demonstrates how to register the ZenStackModule in a NestJS application module. It shows the use of registerAsync method to configure the enhanced Prisma service.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/nestjs.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZenStackModule } from '@zenstackhq/server/nestjs';\nimport { enhance } from '@zenstackhq/runtime';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  imports: [\n    ZenStackModule.registerAsync({\n      useFactory: (prisma: PrismaService) => {\n        return {\n          getEnhancedPrisma: () => enhance(prisma, { user: ... }),\n        };\n      },\n      inject: [PrismaService],\n      extraProviders: [PrismaService],\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack in a tRPC Project\nDESCRIPTION: Command to initialize a tRPC project with ZenStack, which sets up the necessary configuration and dependencies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/trpc.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init\n```\n\n----------------------------------------\n\nTITLE: Using Member Access Expression in ZenStack Policy Rules\nDESCRIPTION: Demonstrates accessing a field from an object using dot notation. In this example, the 'role' field is accessed from the authentication context to check for read permissions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id Int @id\n    published Boolean\n    @@allow('read', auth().role == 'READ') // `auth().role` is a Member Access Expression\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Types in ZModel\nDESCRIPTION: Demonstrates how to create types in ZModel for modeling object shapes without mapping to database tables. Types can be used for JSON fields, plugin options, or interfacing with external data models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_6\n\nLANGUAGE: zmodel\nCODE:\n```\ntype Profile {\n    email String @email\n    name String\n}\n\nmodel User {\n    id String @id\n    profile Profile? @json\n}\n```\n\n----------------------------------------\n\nTITLE: ZModel Definition with @omit Attribute\nDESCRIPTION: Sample ZModel code defining a User model with a password field marked with @omit attribute to exclude it from query results.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/runtime-api.md#2025-04-10_snippet_11\n\nLANGUAGE: zmodel\nCODE:\n```\n// ZModel\nmodel User {\n    id String @id\n    email String\n    password String @omit\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signin Page with NextAuth.js in Next.js\nDESCRIPTION: This code creates a signin page component that authenticates users with email and password using NextAuth.js credentials provider. It handles authentication success by redirecting to the home page and displays an alert on failure.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs-app-router.mdx#2025-04-10_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport type { NextPage } from \"next\";\nimport { signIn } from \"next-auth/react\";\nimport { useRouter } from \"next/navigation\";\nimport { useState, type FormEvent } from \"react\";\n\nconst Signin: NextPage = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const router = useRouter();\n\n  async function onSignin(e: FormEvent) {\n    e.preventDefault();\n\n    const result = await signIn(\"credentials\", {\n      redirect: false,\n      email,\n      password,\n    });\n\n    if (result?.ok) {\n      router.push(\"/\");\n    } else {\n      alert(\"Signin failed\");\n    }\n  }\n\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\">\n      <h1 className=\"text-5xl font-extrabold text-white\">Login</h1>\n      <form\n        className=\"mt-16 flex flex-col gap-8 text-2xl\"\n        onSubmit={(e) => void onSignin(e)}\n      >\n        <div>\n          <label htmlFor=\"email\" className=\"inline-block w-32  text-white\">\n            Email\n          </label>\n          <input\n            id=\"email\"\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.currentTarget.value)}\n            className=\"ml-4 w-72 rounded border p-2\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"password\" className=\"inline-block w-32  text-white\">\n            Password\n          </label>\n          <input\n            id=\"password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.currentTarget.value)}\n            className=\"ml-4 w-72 rounded border p-2\"\n          />\n        </div>\n        <input\n          type=\"submit\"\n          value=\"Sign me in\"\n          className=\"cursor-pointer rounded border border-gray-500 py-4 text-white\"\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default Signin;\n```\n\n----------------------------------------\n\nTITLE: Configuring @core/model-meta Plugin in ZModel\nDESCRIPTION: Example of how to configure the @core/model-meta plugin in a ZModel schema file. This snippet demonstrates setting custom output directory and disabling compilation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/model-meta.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin meta {\n  provider = '@core/model-meta'\n  output = 'src/lib/zenstack'\n  compile = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring @core/model-meta Plugin in ZModel\nDESCRIPTION: Example of how to configure the @core/model-meta plugin in a ZModel schema file. This snippet demonstrates setting custom output directory and disabling compilation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/model-meta.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin meta {\n  provider = '@core/model-meta'\n  output = 'src/lib/zenstack'\n  compile = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring @core/model-meta Plugin in ZModel\nDESCRIPTION: Example of how to configure the @core/model-meta plugin in a ZModel schema file. This snippet demonstrates setting custom output directory and disabling compilation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/model-meta.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin meta {\n  provider = '@core/model-meta'\n  output = 'src/lib/zenstack'\n  compile = false\n}\n```\n\n----------------------------------------\n\nTITLE: Relation Model Example in ZenStack\nDESCRIPTION: Example schema showing a User-Post relation that demonstrates how relation manipulations interact with access policies. The example illustrates which side needs to satisfy update policies during relation operations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.1-model-level.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    ...\n    posts Post[]\n}\n\nmodel Post {\n    ...\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models with ZModel Schema\nDESCRIPTION: ZModel schema definition for a Todo application with Space, User, List, and Todo models. This schema defines the data structure and relationships for collaborative todo lists.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n\ngenerator js {\n  provider = \"prisma-client-js\"\n}\n\n// where users can collaborate on todo lists and items\nmodel Space {\n  id Int @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  name String\n  slug String @unique\n  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n  ownerId Int\n  members SpaceUser[]\n  lists List[]\n}\n\n// a join table for many-to-many relation between `Space` and `User`\nmodel SpaceUser {\n  id Int @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)\n  spaceId Int\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId Int\n  role String @default(\"USER\")\n\n  @@unique([userId, spaceId])\n}\n\n// user\nmodel User {\n  id Int @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  email String @unique\n  name String?\n  spaces SpaceUser[] // user's space membership\n  lists List[]\n  todos Todo[]\n  ownedSpaces Space[] // spaces owned by the user\n}\n\n// todo list\nmodel List {\n  id Int @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)\n  spaceId Int\n  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n  ownerId Int\n  title String\n  private Boolean @default(false)\n  todos Todo[]\n}\n\n// todo item\nmodel Todo {\n  id Int @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n  ownerId Int\n  list List @relation(fields: [listId], references: [id], onDelete: Cascade)\n  listId Int\n  title String\n  completedAt DateTime?\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AccessControlProvider with ZenStack's Check API\nDESCRIPTION: Creates an AccessControlProvider for Refine that uses ZenStack's permission checking API to determine if a user can perform certain actions, particularly focusing on the 'create' action based on user role.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/refine-dev-backend/index.md#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const accessControlProvider: AccessControlProvider = {\n  can: async ({ resource, action }: CanParams): Promise<CanReturnType> => {\n    if (action === 'create') {\n      // make a request to \"/api/model/:resource/check?q={operation:'create'}\"\n      let url = `/api/model/${resource}/check`;\n      url +=\n        '?q=' +\n        encodeURIComponent(\n            JSON.stringify({\n                operation: 'create',\n            })\n        );\n      const resp = await fetch(url);\n      if (!resp.ok) {\n        return { can: false };\n      } else {\n        const { data } = await resp.json();\n        return { can: data };\n      }\n    }\n\n    return { can: true };\n  },\n\n  options: {\n    buttons: {\n        enableAccessControl: true,\n        hideIfUnauthorized: false,\n    },\n    queryOptions: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack Project from Existing Prisma Project\nDESCRIPTION: Uses the ZenStack CLI to initialize a ZenStack project from an existing Prisma project. It copies the Prisma schema to a ZModel file and installs necessary NPM packages.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/existing-prisma.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init\n```\n\n----------------------------------------\n\nTITLE: Vector Search with pgvector in PostgreSQL\nDESCRIPTION: SQL commands showing how to use the pgvector extension for vector similarity search. This example creates a table with vector data, inserts vectors, creates an HNSW index, and performs a nearest neighbor search.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/modern-sql-ai/index.md#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a table with a vector column\nCREATE TABLE items (id bigserial PRIMARY KEY, embedding vector(3));\n\n-- Insert vectors\nINSERT INTO items (embedding) VALUES ('[1,2,3]'), ('[4,5,6]');\n\n-- Create an \"HNSW\" index for L2 distance search\nCREATE INDEX ON items USING hnsw (embedding vector_l2_ops);\n\n-- Get the nearest neighbors by L2 distance\nSELECT * FROM items ORDER BY embedding <-> '[3,1,2]' LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Checking with ZenStack\nDESCRIPTION: Shows how to create an access-control-enabled Prisma client wrapper for automatic permission checking in TypeScript.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/django-guardian/index.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// update-post.ts: function for updating a post\nimport { prisma } from './db';\nimport { getSessionUser } from './auth';\n\nexport function updatePost(request: Request, slug: string, data: PostUpdateInput) {\n    const user = await getSessionUser(req);\n\n    // get an access-control enabled Prisma wrapper\n    // the \"user\" context value supports the `auth()`\n    // function in the permission rules\n    const db = enhance(prisma, { user });\n\n    // error will be thrown if the current user doesn't\n    // have permission\n    return db.post.update({ where: { slug }, data });\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning ZenStack Sample Project (Bash)\nDESCRIPTION: Command to clone the completed sample project for the first part of the ZenStack guide. It clones the 'part1' branch of the 'the-complete-guide-sample' repository.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/8-conclusion.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch v1-part1 https://github.com/zenstackhq/the-complete-guide-sample.git my-todo-app\n```\n\n----------------------------------------\n\nTITLE: Extending TypeScript Types for Authentication Context\nDESCRIPTION: Updates TypeScript type definitions to include user authentication information and an enhanced Prisma client in the SvelteKit request context, allowing easy access to authenticated user data throughout the application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/sveltekit.mdx#2025-04-10_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PrismaClient, User } from '@prisma/client';\n\ndeclare global {\n    namespace App {\n        interface Locals {\n            user?: User;\n            db: PrismaClient;\n        }\n    }\n}\n\nexport {};\n```\n\n----------------------------------------\n\nTITLE: Using Contains Function in ZenStack Models\nDESCRIPTION: Demonstrates using the contains() function to check if a string field contains a specific value. This function supports case-sensitive and case-insensitive comparisons.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id Int @id\n    title String\n    @@allow('read', contains(title, 'zenstack'))\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in ZModel\nDESCRIPTION: Example of configuring the @core/zod plugin in a ZModel file\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/zod.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin zod {\n  provider = '@core/zod'\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack in the Project\nDESCRIPTION: Command to initialize ZenStack in the Remix project.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/remix-run.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@1 init\n```\n\n----------------------------------------\n\nTITLE: User Model with Email-Based Read Access\nDESCRIPTION: A ZenStack model definition that implements a read policy allowing access only to users whose email addresses start with 'joey'.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.1-model-level.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    ...\n\n    @@allow('read', startsWith(email, 'joey'))\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Complex Conditions Using Drizzle in TypeScript\nDESCRIPTION: This snippet demonstrates how to use Drizzle to construct a complex SQL query for fetching posts based on multiple conditions including publication status, authorship, and user roles.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/drizzle-prisma/index.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n    .selectDistinctOn([posts.id], {\n        id: posts.id,\n        title: posts.title,\n        published: posts.published,\n        author: { id: users.id, email: users.email },\n    })\n    .from(posts)\n    .where(eq(posts.spaceId, space.id))\n    .leftJoin(users, eq(posts.authorId, users.id))\n    .leftJoin(spaces, eq(posts.spaceId, spaces.id))\n    .leftJoin(\n        spaceUsers,\n        and(\n            eq(spaceUsers.spaceId, spaces.id),\n            eq(spaceUsers.userId, req.uid!)\n        )\n    )\n    .where(\n        or(\n            // 1. published and current user is a member of the space\n            and(\n                eq(posts.published, true),\n                eq(spaceUsers.userId, req.uid!)\n            ),\n            // 2. authored by the current user\n            eq(posts.authorId, req.uid!),\n            // 3. belongs to space owned by the current user\n            eq(spaces.ownerId, req.uid!),\n            // 4. belongs to space where the current user is an admin\n            eq(spaceUsers.role, 'ADMIN')\n        )\n    );\n```\n\n----------------------------------------\n\nTITLE: Using Reference Expression in ZenStack Models\nDESCRIPTION: Demonstrates how to use reference expressions to access model fields in policy rules. Reference expressions provide direct access to field values of the current model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    ...\n    published Boolean\n    @@allow('read', published) // `published` is a Reference Expression\n}\n```\n\n----------------------------------------\n\nTITLE: Using Case-Insensitive Contains Function in ZenStack Models\nDESCRIPTION: Shows how to use the contains() function with case-insensitive comparison by passing a third boolean parameter. This allows more flexible string matching in policy rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\n@@allow('read', contains(title, 'zenstack', true))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ZenStack Optimistic Updates with Query Filters\nDESCRIPTION: Example showing how optimistic updates don't respect filter conditions. When a non-published Post is created, it will still be inserted into query results that have a 'published: true' filter.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/_optimistic-limitation.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseFindManyPost({ where: { published: true }})\n```\n\n----------------------------------------\n\nTITLE: Installing React Calendar Dependencies\nDESCRIPTION: Command to install react-calendar package and its TypeScript type definitions for date picking functionality.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/cal-com-clone.mdx#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-calendar\nnpm i --save-dev @types/react-calendar\n```\n\n----------------------------------------\n\nTITLE: Using Reference Expression in ZenStack Models\nDESCRIPTION: Demonstrates how to use reference expressions to access model fields in policy rules. Reference expressions provide direct access to field values of the current model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    ...\n    published Boolean\n    @@allow('read', published) // `published` is a Reference Expression\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Anonymous Pet Listing\nDESCRIPTION: Sample JSON response for pet listing without authentication, showing only unsold pets as per the access policy that restricts visibility of sold pets to their buyers only.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": \"max\",\n        \"createdAt\": \"2023-03-16T04:53:26.205Z\",\n        \"updatedAt\": \"2023-03-16T04:53:26.205Z\",\n        \"name\": \"Max\",\n        \"category\": \"doggie\"\n    },\n    {\n        \"id\": \"cooper\",\n        \"createdAt\": \"2023-03-16T04:53:26.206Z\",\n        \"updatedAt\": \"2023-03-16T04:53:26.206Z\",\n        \"name\": \"Cooper\",\n        \"category\": \"reptile\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Checking String Containment in ZModel\nDESCRIPTION: Checks if a given field contains the search string. Case-sensitive by default, with an optional caseInSensitive parameter. Equivalent to Prisma's contains operator.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_36\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction contains(field: String, search: String, caseInSensitive: Boolean?): Boolean {}\n```\n\n----------------------------------------\n\nTITLE: Finding a List Using RPC API\nDESCRIPTION: Curl command to retrieve the first List record using the ZenStack RPC API endpoint.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/api/rpc/list/findFirst\"\n```\n\n----------------------------------------\n\nTITLE: Running ZenStack Generator for tRPC Router Generation\nDESCRIPTION: Command to run the ZenStack CLI generator which creates tRPC routers based on the ZModel schema configuration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/trpc.mdx#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\n```\n\n----------------------------------------\n\nTITLE: Cloning Todo Project Sample Repository\nDESCRIPTION: Command to clone the sample Todo project repository and checkout the part2 branch containing the completed code for this section of the guide.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part2/4-conclusion.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch v1-part2 https://github.com/zenstackhq/the-complete-guide-sample.git my-todo-app\n```\n\n----------------------------------------\n\nTITLE: Mounting ZenStack API in Express.js\nDESCRIPTION: Example of integrating ZenStack into an Express.js project using ZenStackMiddleware. It shows how to enhance a PrismaClient instance with user session data and mount the API routes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/express.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nimport { enhance } from '@zenstackhq/runtime';\nimport { ZenStackMiddleware } from '@zenstackhq/server/express';\nimport express from 'express';\n\nconst prisma = new PrismaClient();\nconst app = express();\n\napp.use(express.json());\n\napp.use(\n    '/api/model',\n    ZenStackMiddleware({\n        // getSessionUser extracts the current session user from the request, its\n        // implementation depends on your auth solution\n        getPrisma: (request) => enhance(prisma, { user: getSessionUser(request) }),\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Model Validation Attribute Syntax\nDESCRIPTION: Defines the syntax for the @@validate attribute used for model-level validation rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_59\n\nLANGUAGE: zmodel\nCODE:\n```\n@@validate(_ value: Boolean, _ message: String?)\n```\n\n----------------------------------------\n\nTITLE: Finding a List Using RPC API\nDESCRIPTION: Curl command to retrieve the first List record using the ZenStack RPC API endpoint.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/api/rpc/list/findFirst\"\n```\n\n----------------------------------------\n\nTITLE: Defining Post Update Access Policy in ZenStack\nDESCRIPTION: ZenStack access policy rule that restricts post updates to the owner and prevents changing the organization or owner.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-backend/index.md#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n@@allow('update', owner == auth() && org.future().members?[id == auth().id] && future().owner == owner)\n```\n\n----------------------------------------\n\nTITLE: Implementing SSR Data Loader with Next.js\nDESCRIPTION: This snippet demonstrates how to use Next.js to implement server-side rendering (SSR) with a data loader function. It fetches data from the GitHub API and renders it in a React component.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/no-api/index.md#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { InferGetServerSidePropsType, GetServerSideProps } from 'next'\n \ntype Repo = {\n  name: string\n  stargazers_count: number\n}\n\nexport const getServerSideProps = (async () => {\n  const res = await fetch('https://api.github.com/repos/vercel/next.js')\n  const repo: Repo = await res.json()\n  return { props: { repo } }\n}) satisfies GetServerSideProps<{ repo: Repo }>\n\nexport default function Page({\n  repo,\n}: InferGetServerSidePropsType<typeof getServerSideProps>) {\n  return (\n    <main>\n      <p>{repo.stargazers_count}</p>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading NPM Packages to ZenStack V2\nDESCRIPTION: Bash commands to upgrade ZenStack packages to the latest version (V2) using npm.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/upgrade.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D zenstack@latest\nnpm i @zenstackhq/runtime@latest\n...\n```\n\n----------------------------------------\n\nTITLE: Updating a Seat with Optimistic Concurrency Control in Prisma\nDESCRIPTION: This code snippet demonstrates how to update a seat record using Prisma's client, implementing optimistic concurrency control with version increment.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/contribute-oss/index.md#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n    await client.seat.update({\n        data: {\n            userId: userId,\n            version: {\n                increment: 1,\n            },\n        },\n        where: {\n            id: availableSeat.id,\n        },\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining Data Source in ZModel\nDESCRIPTION: Shows how to define a data source in ZModel, which is identical to Prisma Schema Language.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/1-zmodel.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\ndatasource db {\n    provider = \"postgresql\"\n    url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model with Prisma and ZenStack\nDESCRIPTION: Shows the Prisma schema definition for the Post model, including ZenStack access control policies. This represents the initial structure before implementing polymorphism.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nmodel Post {\n  id String @id @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title String\n  published Boolean @default(false)\n  author User @relation(fields: [authorId], references: [id])\n  authorId String\n  \n  // author has full access\n  @@allow('all', auth() == author)\n\n  // logged-in users can view published posts\n  @@allow('read', auth() != null && published)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Endpoint for Query Hooks in App.vue\nDESCRIPTION: Sets up the context for the API hooks by providing the endpoint to be used for model operations. Uses an absolute endpoint to ensure server-side fetching works correctly.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nuxt.mdx#2025-04-10_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nimport { provideHooksContext } from './lib/hooks';\n\n// Provide tanstack-query context\n// Use an absolute endpoint so server-side fetch works too\nprovideHooksContext({\n    endpoint: 'http://localhost:3000/api/model',\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Applying Password Attribute with Int Parameter in ZModel\nDESCRIPTION: Shows how to apply the password attribute to a String field with a specific salt length.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_8\n\nLANGUAGE: zmodel\nCODE:\n```\npassword String @password(saltLength: 10)\n```\n\n----------------------------------------\n\nTITLE: ZModel Schema Definition\nDESCRIPTION: Example of a ZModel schema defining a Post model with access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/redwood.md#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String\n  body      String\n  comments  Comment[]\n  user      User     @relation(fields: [userId], references: [id])\n  userId    Int\n  createdAt DateTime @default(now())\n  published Boolean @default(true)\n\n  @@allow('all', auth().roles == 'admin' && auth() == user)\n  @@allow('read', published)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Authentication Utilities\nDESCRIPTION: Implementation of database utilities for finding users by email and creating new users, using Prisma client.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nuxt.mdx#2025-04-10_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport type { User } from '@prisma/client';\nimport { prisma } from '~/server/prisma';\n\nexport async function findUserByEmail(email: string) {\n    return prisma.user.findUnique({ where: { email } });\n}\n\nexport async function createUser(user: Omit<User, 'id'>) {\n    return prisma.user.create({\n        data: user,\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Field-Level Policy for Post Model in ZenStack\nDESCRIPTION: Demonstrates how to define a field-level policy using the @allow attribute on the 'published' field of a Post model. This policy allows only users with the EDITOR role to update the 'published' field.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.7-field-level.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    ...\n    published Boolean @allow('update', auth().role == EDITOR)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Enhanced Prisma Client with Clerk Auth (Next.js Pages Router)\nDESCRIPTION: This snippet shows how to create an enhanced Prisma client that enforces access policies using Clerk authentication in a Next.js Pages Router setup.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/clerk.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest } from 'next';\nimport { enhance } from '@zenstackhq/runtime';\nimport { getAuth } from '@clerk/nextjs/server';\nimport { prisma } from '../lib/db';\n\nasync function getPrisma(req: NextApiRequest) {\n  const auth = getAuth(req);\n  // create a wrapper of Prisma client that enforces access policy\n  return enhance(prisma, { user: auth ? { id: auth.userId } : undefined });\n}\n```\n\n----------------------------------------\n\nTITLE: Using @@ignore for External Auth Services\nDESCRIPTION: Example showing how to define an auth model when using external authentication services by marking it with the @@ignore attribute to exclude it from the generated PrismaClient.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id\n    ...\n\n    @@ignore\n}\n```\n\n----------------------------------------\n\nTITLE: Generating PrismaClient and Pushing Schema\nDESCRIPTION: Commands to generate PrismaClient and push the schema to the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nestjs.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma generate\nnpx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Specifying Database Schema in ZModel\nDESCRIPTION: Specifies the database schema to use in a multi-schema setup. Takes a single parameter 'name' for the database schema name.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_21\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @@schema(_ name: String)\n```\n\n----------------------------------------\n\nTITLE: User API Implementation\nDESCRIPTION: Implementation of user listing endpoint with email field exclusion\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/nest-api/index.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('users')\nasync getAllUsers() {\n  return this.prismaService.user.findMany({\n    // make sure to exclude \"email\" field\n    select: { id: true, name: true, role: true },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack in a Next.js Project\nDESCRIPTION: Command to initialize ZenStack in a Next.js project, which installs dependencies and generates a schema.zmodel file.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/form-validation/index.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init\n```\n\n----------------------------------------\n\nTITLE: Defining Post Model with Inheritance in ZenStack\nDESCRIPTION: Post model that extends the organizationBaseEntity abstract model, inheriting all access policies and adding post-specific fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-backend/index.md#2025-04-10_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nmodel Post extends organizationBaseEntity {\n    title String\n    content String\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenAI Integration with Mindsdb in SQL\nDESCRIPTION: SQL commands to integrate OpenAI with Mindsdb. This creates a machine learning engine connected to OpenAI's API and then creates a model that can be queried using SQL.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/modern-sql-ai/index.md#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE ML_ENGINE openai_engine\nFROM openai\nUSING\n    api_key = 'your-openai-api-key';\n\nCREATE MODEL my_openai_model\nPREDICT answer\nUSING\n    engine = 'openai',\n    question_column = 'question',\n    model_name = 'openai_model_name'\n    api_key = 'YOUR_OPENAI_API_KEY;\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Middleware for API Control\nDESCRIPTION: TypeScript code for a Next.js middleware that controls API endpoint exposure. This example demonstrates how to disallow listing all User entities in a RESTful API handler.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/next.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type NextRequest, NextResponse } from 'next/server';\n\nexport function middleware(request: NextRequest) {\n    const url = new URL(request.url);\n    if (\n        request.method === 'GET' &&\n        url.pathname.match(/^\\/api\\/model\\/user\\/?$/)\n    ) {\n        return NextResponse.json({ error: 'Not allowed' }, { status: 405 });\n    }\n}\n\nexport const config = {\n    matcher: '/api/model/:path*',\n};\n```\n\n----------------------------------------\n\nTITLE: Password Attribute Usage\nDESCRIPTION: Example of applying the password attribute to a field\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_12\n\nLANGUAGE: zmodel\nCODE:\n```\npassword String @password(saltLength: 10)\n```\n\n----------------------------------------\n\nTITLE: Using Import and Extends in ZModel\nDESCRIPTION: Shows how to use the import syntax to break down schemas and the extends keyword for model inheritance in ZModel.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/1-zmodel.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nabstract model Base {\n    id Int @id @default(autoincrement())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt()\n    published Boolean @default(true)\n\n    // author has full access\n    @@allow('all', auth() != null && published)\n}\n```\n\nLANGUAGE: zmodel\nCODE:\n```\nimport \"base\"\nmodel User extends Base {\n    name String\n}\n\nmodel Post extends Base {\n    title String\n    content String?\n    viewCount Int @default(0)\n    comment Comment[]\n}\n\nmodel Comment extends Base {\n    content String\n    post Post @relation(fields: [postId], references: [id])\n    postId Int\n}\n```\n\n----------------------------------------\n\nTITLE: ZModel Access Policy Based on Special Key\nDESCRIPTION: Access policy in ZModel that uses a special key from the authenticated user for authorization.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/auth0.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\n@@allow('read, update, create', auth().specialKey == 'SUPERMAN')\n```\n\n----------------------------------------\n\nTITLE: Enhancing PrismaClient with ZenStack Runtime\nDESCRIPTION: TypeScript code showing how to create an enhanced PrismaClient using ZenStack that automatically enforces access policies defined in the ZModel schema. The enhanced client maintains the same typing as the original PrismaClient.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/polymorphism/index.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prisma } from '@prisma/client';\nimport { enhance } from '@zenstackhq/runtime';\nimport { getCurrentUser } from './auth';\n\nconst prisma = new PrismaClient();\n\n// `db` has the same typing as `prisma`, but it automatically\n// enforces access policies\nconst db = enhance(prisma, { user: getCurrentUser() });\n```\n\n----------------------------------------\n\nTITLE: Installing Extensions to an Enhanced Prisma Client\nDESCRIPTION: Since v2.9.0, extensions can be installed to an already enhanced Prisma Client. This example shows adding a getFeeds method to a client that already has ZenStack enhancement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/client-extensions.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma);\nconst extended = db.$extends({\n  model: {\n    post: {\n      async getFeeds() {\n          const context = Prisma.getExtensionContext(this);\n          return context.findMany();\n      },\n    },\n  },\n});\n\nconst feeds = await extended.post.getFeeds();\n// `feeds` will only contain published posts\n```\n\n----------------------------------------\n\nTITLE: Defining Default Attribute with ContextType Parameter in ZModel\nDESCRIPTION: Demonstrates the declaration of a default attribute that uses the ContextType to match the field's type.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_13\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @default(_ value: ContextType)\n```\n\n----------------------------------------\n\nTITLE: Deploying Prisma Migrations to Production\nDESCRIPTION: Command to apply existing migration records to the database in a production environment, ensuring your database schema matches your Prisma schema definition.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/0-prisma.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate deploy\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Remix Project with Indie Stack\nDESCRIPTION: Command to create a new Remix project using the indie-stack template, which sets up a project with SQLite database suitable for prototyping.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/cal-com-clone.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-remix@latest --template remix-run/indie-stack cal-com-clone\n```\n\n----------------------------------------\n\nTITLE: Updating Root Layout with SessionProvider\nDESCRIPTION: Modifying the root layout file to include the NextAuth SessionProvider.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport NextAuthSessionProvider from '~/components/SessionProvider';\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body className={`font-sans ${inter.variable}`}>\n        <NextAuthSessionProvider>{children}</NextAuthSessionProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Client Logging\nDESCRIPTION: Demonstrates how to configure Prisma Client to show info level logs, which is necessary to see ZenStack's query logging output.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/7-debugging.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient({ log: ['info'] });\n```\n\n----------------------------------------\n\nTITLE: Comparing auth() with Other Fields in ZModel\nDESCRIPTION: Examples of comparing auth() with other fields in policy rules, demonstrating equivalent expressions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_6\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    ...\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int\n    @@allow('update', auth() == author)\n}\n\n// Equivalent to:\nmodel Post {\n    ...\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int\n    @@allow('update', auth().id == author.id)\n}\n\n// Also equivalent to:\nmodel Post {\n    ...\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int\n    @@allow('update', auth().id == authorId)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data with EdgeDB's EdgeQL Language\nDESCRIPTION: This code snippet demonstrates how to query data using EdgeDB's EdgeQL language, which is designed to be more intuitive for developers and better align with object-oriented programming paradigms.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/modern-sql-programming/index.md#2025-04-10_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Movie {\n  id,\n  title,\n  year,\n  actors: {\n    name,\n    @character_name\n  } filter .age > 40\n} filter .year > 1990\n```\n\n----------------------------------------\n\nTITLE: JWT Token Payload Structure for PostgREST Authentication\nDESCRIPTION: Example of a JWT token payload that includes the 'role' field required by PostgREST for role-switching and proper authentication, where the role corresponds to a PostgreSQL database role.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/postgrest.mdx#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"role\": \"user123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in Page Component in Next.js\nDESCRIPTION: A React component that handles user authentication using NextAuth's signIn function. Includes form handling and error management for the login process.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/3-auth-ui.md#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { signIn } from 'next-auth/react';\nimport Link from 'next/link';\nimport { useState, type FormEvent } from 'react';\n\nexport default function Signup() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errMsg, setErrMsg] = useState('');\n\n  async function onSignin(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    const signInResult = await signIn('credentials', {\n      redirect: false,\n      email,\n      password,\n    });\n    if (signInResult?.ok) {\n      window.location.href = '/';\n    } else {\n      setErrMsg(`Signin failed. Please check your email and password.`);\n    }\n  }\n\n  return (\n    <div className=\"mx-auto flex h-screen flex-col items-center justify-center\">\n      <div className=\"mb-10 flex items-center space-x-4\">\n        <h1 className=\"text-4xl\">Welcome to Todo</h1>\n      </div>\n      <div className=\"flex w-full max-w-screen-sm items-center justify-center rounded-lg\">\n        <div className=\"w-full space-y-8 p-16\">\n          <h2 className=\"text-3xl font-bold\">Sign in to your account</h2>\n          <form className=\"mt-8 space-y-6\" action=\"#\" onSubmit={onSignin}>\n            <div>\n              <label htmlFor=\"email\" className=\"label\">\n                Your email\n              </label>\n              <input\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"input input-bordered w-full\"\n                placeholder=\"Email address\"\n                required\n              />\n            </div>\n            <div>\n              <label htmlFor=\"password\" className=\"label\">\n                Your password\n              </label>\n              <input\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"••••••••\"\n                className=\"input input-bordered w-full\"\n                required\n              />\n            </div>\n\n            {errMsg && <p className=\"text-sm text-red-600\">{errMsg}</p>}\n\n            <button className=\"btn btn-primary mt-4\" type=\"submit\">\n              Create account\n            </button>\n            <div>\n              Not registered?{' '}\n              <Link href=\"/signup\" className=\"text-primary\">\n                Create account\n              </Link>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Defining ToDo Model with Inheritance in ZenStack\nDESCRIPTION: Example of extending the organizationBaseEntity to create a new ToDo model with all the inherited access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-backend/index.md#2025-04-10_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nmodel ToDo extends organizationBaseEntity {\n    name String\n    isCompleted Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination State and Manual Pagination in React Table\nDESCRIPTION: This snippet shows how to set up pagination state, fetch total row count, and configure React Table for manual pagination. It demonstrates the use of useState for managing pagination state and React Query's useCountOrderDetail hook for fetching the total count.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/react-table/index.md#2025-04-10_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-start\n// pagination state\nconst [pagination, setPagination] = useState<PaginationState>({\n  pageIndex: 0,\n  pageSize: PAGE_SIZE,\n});\n// highlight-end\n\n// highlight-start\n// fetch total row count\nconst { data: count } = useCountOrderDetail();\n// highlight-end\n\nconst table = useReactTable({\n  ...\n\n  // highlight-start\n  // pagination\n  manualPagination: true,\n  onPaginationChange: setPagination,\n  pageCount: Math.ceil((count ?? 0) / PAGE_SIZE),\n\n  // state\n  state: { agination },\n  // highlight-end    \n});\n```\n\n----------------------------------------\n\nTITLE: Updating React Query Hook for Pagination\nDESCRIPTION: This code snippet demonstrates how to modify the React Query hook call to incorporate pagination parameters. It uses the pagination state to calculate the skip and take values for the database query.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/react-table/index.md#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst { data } = useFindManyOrderDetail({\n  ...queryInclude,\n  // highlight-start\n  skip: pagination.pageIndex * pagination.pageSize,\n  take: pagination.pageSize,\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Generating ZenStack Schema and Pushing to Database\nDESCRIPTION: Commands to generate ZenStack schema and push it to the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate && npx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Using Query and Mutation Hooks in React\nDESCRIPTION: Example of using ZenStack-generated hooks for fetching and creating posts in a React component. The component displays a list of posts with their authors and provides a button to create new posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFindManyPost, useCreatePost } from '../lib/hooks';\n\n// post list component\nconst Posts = ({ userId }: { userId: string }) => {\n    const create = useCreatePost();\n\n    // list all posts that're visible to the current user, together with their authors\n    const { data: posts } = useFindManyPost({\n        include: { author: true },\n        orderBy: { createdAt: 'desc' },\n    });\n\n    async function onCreatePost() {\n        create.mutate({\n            data: {\n                title: 'My awesome post',\n                authorId: userId,\n            },\n        });\n    }\n\n    return (\n        <>\n            <button onClick={onCreatePost}>Create</button>\n            <ul>\n                {posts?.map((post) => (\n                    <li key={post.id}>\n                        {post.title} by {post.author.email}\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Query and Mutation Hooks in React\nDESCRIPTION: Example of using ZenStack-generated hooks for fetching and creating posts in a React component. The component displays a list of posts with their authors and provides a button to create new posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFindManyPost, useCreatePost } from '../lib/hooks';\n\n// post list component\nconst Posts = ({ userId }: { userId: string }) => {\n    const create = useCreatePost();\n\n    // list all posts that're visible to the current user, together with their authors\n    const { data: posts } = useFindManyPost({\n        include: { author: true },\n        orderBy: { createdAt: 'desc' },\n    });\n\n    async function onCreatePost() {\n        create.mutate({\n            data: {\n                title: 'My awesome post',\n                authorId: userId,\n            },\n        });\n    }\n\n    return (\n        <>\n            <button onClick={onCreatePost}>Create</button>\n            <ul>\n                {posts?.map((post) => (\n                    <li key={post.id}>\n                        {post.title} by {post.author.email}\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Post-update State in ZModel\nDESCRIPTION: Gets the \"post-update\" state of an entity. Only valid when used in an \"update\" access policy.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_35\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction future(): Any {}\n```\n\n----------------------------------------\n\nTITLE: ZModel User Schema Definition\nDESCRIPTION: Database schema for User model with authentication fields and access policy rules using ZModel syntax.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/next-app-router.mdx#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id            String    @id @default(cuid())\n  name          String?\n  email         String?   @unique\n  emailVerified DateTime?\n  password      String @password @omit\n  image         String?\n  accounts      Account[]\n  sessions      Session[]\n  posts         Post[]\n\n  @@allow('create,read', true)\n\n  @@allow('update,delete', auth() == this)\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Unified enhance API in ZenStack V2\nDESCRIPTION: Example of using the new unified enhance API with the kinds option to control what enhancements to apply to the PrismaClient instance.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/upgrade.md#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user }, { kinds: ['policy', 'omit'] })\n```\n\n----------------------------------------\n\nTITLE: Defining Access Policies in ZModel\nDESCRIPTION: Example of defining access policies for a Post model using ZModel's @@allow attributes to control CRUD operations based on user authentication and ownership.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/under-the-hood.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id        String @id @default(cuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    title     String\n    published Boolean @default(false)\n    author    User @relation(fields: [authorId], references: [id])\n    authorId  String\n\n    // author has full access\n    @@allow('all', auth() == author)\n\n    // logged-in users can view published posts\n    @@allow('read', auth() != null && published)\n}\n```\n\n----------------------------------------\n\nTITLE: Using StartsWith Function in ZenStack Models\nDESCRIPTION: Shows how to use the startsWith() function to check if a string field starts with a specific value. This function performs prefix matching on string fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_7\n\nLANGUAGE: zmodel\nCODE:\n```\n@@allow('read', startsWith(title, 'zenstack'))\n```\n\n----------------------------------------\n\nTITLE: Adding JSDoc for Login API Endpoint in Express\nDESCRIPTION: Adds JSDoc comments to the login API endpoint to specify input and output types for OpenAPI documentation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Login input\n * @typedef {object} LoginInput\n * @property {string} email.required - The email\n * @property {string} password.required - The password\n */\n\n/**\n * Login response\n * @typedef {object} LoginResponse\n * @property {string} id.required - The user id\n * @property {string} email.required - The user email\n * @property {string} token.required - The access token\n */\n\n/**\n * POST /api/login\n * @tags user\n * @param {LoginInput} request.body.required - input\n * @return {LoginResponse} 200 - login response\n */\napp.post('/api/login', async (req, res) => {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running ZenStack CLI to Generate Documentation\nDESCRIPTION: Command to execute ZenStack's generation process, which will run the configured plugins including the Markdown plugin to produce documentation files.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part2/3-writing-plugins.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack Server Adapter\nDESCRIPTION: Command to install the ZenStack server adapter package which is required for setting up the Next.js integration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/next.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/server\n```\n\n----------------------------------------\n\nTITLE: Mounting ZenStack API in SvelteKit Server Hooks\nDESCRIPTION: TypeScript code for creating a SvelteKit server hooks file to mount the ZenStack API. It includes setting up an enhanced Prisma client with user context and configuring the SvelteKitHandler.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/sveltekit.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitHandler } from '@zenstackhq/server/sveltekit';\nimport { enhance } from '@zenstackhq/runtime';\nimport { getSessionUser } from '$lib/auth.ts';\n\n// create an enhanced Prisma client with user context\nfunction getPrisma(event: RequestEvent) {\n    // getSessionUser extracts the current session user from the request, its\n    // implementation depends on your auth solution\n    return enhance({ user: getSessionUser(event) });\n}\n\n// create the hooks handler with the `getPrisma` hook\nexport const handle = SvelteKitHandler({ prefix: '/api/model', getPrisma });\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack Server Package\nDESCRIPTION: Command to install the @zenstackhq/server package using npm.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/express.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/server\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Page in NextJS with NextAuth\nDESCRIPTION: This code snippet creates a sign-in page component using NextAuth's signIn function. It handles form submission, error display, and redirection after successful sign-in.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/3-auth-ui.md#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { signIn } from 'next-auth/react';\nimport Link from 'next/link';\nimport { useState, type FormEvent } from 'react';\n\nexport default function Signup() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errMsg, setErrMsg] = useState('');\n\n  async function onSignin(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    const signInResult = await signIn('credentials', {\n      redirect: false,\n      email,\n      password,\n    });\n    if (signInResult?.ok) {\n      window.location.href = '/';\n    } else {\n      setErrMsg(`Signin failed. Please check your email and password.`);\n    }\n  }\n\n  return (\n    <div className=\"mx-auto flex h-screen flex-col items-center justify-center\">\n      <div className=\"mb-10 flex items-center space-x-4\">\n        <h1 className=\"text-4xl\">Welcome to Todo</h1>\n      </div>\n      <div className=\"flex w-full max-w-screen-sm items-center justify-center rounded-lg\">\n        <div className=\"w-full space-y-8 p-16\">\n          <h2 className=\"text-3xl font-bold\">Sign in to your account</h2>\n          <form className=\"mt-8 space-y-6\" action=\"#\" onSubmit={onSignin}>\n            <div>\n              <label htmlFor=\"email\" className=\"label\">\n                Your email\n              </label>\n              <input\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"input input-bordered w-full\"\n                placeholder=\"Email address\"\n                required\n              />\n            </div>\n            <div>\n              <label htmlFor=\"password\" className=\"label\">\n                Your password\n              </label>\n              <input\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"••••••••\"\n                className=\"input input-bordered w-full\"\n                required\n              />\n            </div>\n\n            {errMsg && <p className=\"text-sm text-red-600\">{errMsg}</p>}\n\n            <button className=\"btn btn-primary mt-4\" type=\"submit\">\n              Create account\n            </button>\n            <div>\n              Not registered?{' '}\n              <Link href=\"/signup\" className=\"text-primary\">\n                Create account\n              </Link>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: API Request for Soft Deleting a Post in ZenStack\nDESCRIPTION: cURL command to soft delete a post by setting the isDeleted flag to true, demonstrating the soft delete feature.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-backend/index.md#2025-04-10_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\ncurl -X PUT \\\n-H \"X-USER-ID: robin@prisma.io\" -H \"Content-Type: application/json\" \\\n-d '{\"data\":{ \"type\":\"post\", \"attributes\":{  \"isDeleted\": true } } }'\\\nlocalhost:3000/api/post/slack\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack runtime package as regular dependency\nDESCRIPTION: This command installs the '@zenstackhq/runtime' package as a regular dependency in the project. It's part of the manual installation process.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/install.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/runtime@latest\n```\n\n----------------------------------------\n\nTITLE: RESTful API Relationship Manipulation Example\nDESCRIPTION: Example of adding resources to a to-many relationship\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_14\n\nLANGUAGE: json\nCODE:\n```\nPOST /user/1/relationships/posts\n{\n    \"data\": [\n        { \"type\": \"post\", \"id\": \"1\" },\n        { \"type\": \"post\", \"id\": \"2\" }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ZModel Files in ZModel\nDESCRIPTION: Demonstrates how to import other ZModel files using relative or absolute paths, or from NPM packages. This allows splitting schemas into multiple files for better organization.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nimport \"user\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Express Application\nDESCRIPTION: Simple Express server setup with a Hello World endpoint that returns JSON response. This serves as the foundation for adding ZenStack functionality.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\n\nconst app = express();\n\napp.use(express.json());\n\napp.get('/', (req, res) => {\n    res.json({ greet: 'Hello World!' });\n});\n\napp.listen(3000, () => console.log('🚀 Server ready at: http://localhost:3000'));\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Row-Level Security Policies\nDESCRIPTION: SQL statements that create row-level security policies for articles in PostgreSQL, enabling fine-grained access control based on user and group permissions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/how-to-authz/index.md#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE POLICY user_access_policy ON Article\nFOR SELECT\nUSING (\n  EXISTS (\n    SELECT 1 FROM AccessControlList\n    WHERE \n      AccessControlList.resource_id = Article.id AND\n      AccessControlList.user_id = current_user AND\n      AccessControlList.permission_type = 'read'\n  )\n);\n\nCREATE POLICY group_access_policy ON Article\nFOR SELECT\nUSING (\n  EXISTS (\n    SELECT 1 FROM AccessControlList\n    JOIN user_groups ON AccessControlList.group_id = user_groups.group_id\n    WHERE \n      AccessControlList.resource_id = Article.id AND\n      user_groups.user_id = current_user AND\n      AccessControlList.permission_type = 'read'\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Using Debug Command in REPL Environment\nDESCRIPTION: This snippet shows how to use the .debug command in the REPL environment to turn on debugging output for ZenStack queries.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/7-debugging.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n.auth { id: 1 }\n.debug\ndb.list.findMany()\n```\n\n----------------------------------------\n\nTITLE: Post Details Page Component in React\nDESCRIPTION: React component for displaying and managing individual post details with publish/unpublish and delete functionality.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/remix-run.mdx#2025-04-10_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function PostDetailsPage() {\n    const data = useLoaderData<typeof loader>();\n\n    return (\n        <div>\n            <h3 className=\"text-2xl font-bold\">\n                {data.post.title} {!data.post.published && <span className=\"text-base font-normal italic\">Draft</span>}\n            </h3>\n            <p className=\"py-6\">{data.post.body}</p>\n            <hr className=\"my-4\" />\n            <div className=\"flex gap-2\">\n                <Form method=\"post\">\n                    <input type=\"hidden\" name=\"intent\" value=\"delete\" />\n                    <button\n                        type=\"submit\"\n                        className=\"rounded bg-blue-500  py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n                    >\n                        Delete\n                    </button>\n                </Form>\n                <Form method=\"post\">\n                    <input type=\"hidden\" name=\"intent\" value={data.post.published ? 'unpublish' : 'publish'} />\n                    <button\n                        type=\"submit\"\n                        className=\"rounded bg-blue-500  py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n                    >\n                        {data.post.published ? 'Unpublish' : 'Publish'}\n                    </button>\n                </Form>\n            </div>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the ZenStack tRPC Plugin\nDESCRIPTION: Command to install the ZenStack tRPC plugin package, which enables automatic generation of tRPC routers from ZModel schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/trpc.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @zenstackhq/trpc@latest\n```\n\n----------------------------------------\n\nTITLE: Checking List Contains Some in ZModel\nDESCRIPTION: Checks if a given field (list) contains at least one element of the search list. Equivalent to Prisma's hasSome operator.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_42\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction hasSome(field: Any[], search: Any[]): Boolean {}\n```\n\n----------------------------------------\n\nTITLE: Configuring PrismaAdapter for NextAuth\nDESCRIPTION: Setting up PrismaAdapter in NextAuth options to enable custom persistence of auth-related entities.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/authentication/next-auth.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaAdapter } from \"@next-auth/prisma-adapter\";\nimport NextAuth, { type NextAuthOptions } from 'next-auth';\nimport { prisma } from \"../../../server/db/client\";\n\nexport const authOptions: NextAuthOptions = {\n    // install Prisma adapter\n    adapter: PrismaAdapter(prisma),\n    ...\n};\n\nexport default NextAuth(authOptions);\n```\n\n----------------------------------------\n\nTITLE: Initializing Express.js Project with TypeScript\nDESCRIPTION: Command sequence for creating a new Express.js project with TypeScript support, installing necessary dependencies and initializing TypeScript configuration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/rest-api-on-vercel/index.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir vercel-petstore\ncd vercel-petstore\nnpm init -y\nnpm install express\nnpm install -D typescript tsx @types/node @types/express\nnpx tsc --init\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Schema and Syncing Database\nDESCRIPTION: Commands to generate a Prisma schema from the ZModel definition and push the schema changes to the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/form-validation/index.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\nnpx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Creating Content with ZenStack's Polymorphism\nDESCRIPTION: Example showing how to create content with ZenStack's polymorphism, which no longer requires explicitly handling the base Content type or setting the contentType field.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nasync function onCreatePost() {\n  const title = prompt(\"Enter post title\");\n  if (title) {\n    await createPost({ data: { title, authorId: user.id } });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server to test the application with form validation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/form-validation/index.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Generated Schemas\nDESCRIPTION: Example of importing and using the generated Zod schemas in TypeScript\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/zod.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PostCreateSchema } from '@zenstackhq/runtime/zod/models';\n\nPostCreateSchema.parse(data);\n```\n\n----------------------------------------\n\nTITLE: Updating User with Nested Post Creation in TypeScript\nDESCRIPTION: This code shows how to update a User and create a new Post in a nested write operation. This mutation would invalidate queries fetching Posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/_invalidation.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nupdateUser({ where: { id: userId }, posts: { create: { title: 'post1' } } });\n```\n\n----------------------------------------\n\nTITLE: Simplified Policy Rule Using ZenStack's Check Function\nDESCRIPTION: A concise policy rule for Todo items using ZenStack's check function, which inherits access rules from the parent List model. This single line replaces the complex SQL policy required in RLS implementations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/supabase-alternative/index.md#2025-04-10_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n    // same as its parent list\n    @@allow('all', check(list))\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Zod Schemas in ZenStack\nDESCRIPTION: Example of configuring a factory function with custom Zod schemas by loading them from a specified location. This enables input validation for CRUD operations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/_options.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfactory({\n    ...\n    zodSchemas: require('./zod'),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Post Component for Post Display and Management\nDESCRIPTION: Implements a Vue component for rendering individual blog posts with options to publish/unpublish and delete. Uses ZenStack's generated hooks for data mutations and handles error cases.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nuxt.mdx#2025-04-10_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useDeletePost, useUpdatePost } from '~/lib/hooks';\n\nconst props = defineProps({\n    id: String,\n    title: String,\n    author: {\n        type: Object,\n        default: () => ({ email: '' }),\n    },\n    published: Boolean,\n});\n\nconst updatePost = useUpdatePost();\nconst deletePost = useDeletePost();\n\nconst onTogglePublish = async () => {\n    try {\n        await updatePost.mutateAsync({\n            where: { id: props.id },\n            data: { published: !props.published },\n        });\n    } catch (err: any) {\n        alert(err.info?.message ?? err);\n    }\n};\n\nconst onDelete = async () => {\n    try {\n        await deletePost.mutateAsync({ where: { id: props.id } });\n    } catch (err: any) {\n        alert(err.info?.message ?? err);\n    }\n};\n</script>\n\n<template>\n    <div class=\"flex justify-center\">\n        <div class=\"min-w-80\">\n            <span class=\"mr-4 text-lg font-semibold\">{{ title }}</span\n            ><span>by {{ author.email }}</span>\n        </div>\n        <div class=\"ml-8 space-x-2\">\n            <NButton @click=\"onTogglePublish\">{{\n                published ? 'Unpublish' : 'Publish'\n            }}</NButton>\n            <NButton @click=\"onDelete\">Delete</NButton>\n        </div>\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Post Details Page Implementation in Remix\nDESCRIPTION: Component for displaying and managing a specific post. Includes functionality to view, delete, publish, and unpublish posts with error handling. Uses enhanced Prisma client to enforce access control.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/remix-run.mdx#2025-04-10_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ActionArgs, LoaderArgs } from '@remix-run/node';\nimport { json, redirect } from '@remix-run/node';\nimport { Form, useCatch, useLoaderData } from '@remix-run/react';\nimport invariant from 'tiny-invariant';\nimport { deletePost, getPost, publishPost, unpublishPost } from '~/models/post.server';\n\nimport { requireUserId } from '~/session.server';\n\nexport async function loader({ request, params }: LoaderArgs) {\n    const userId = await requireUserId(request);\n    invariant(params.postId, 'await not found');\n\n    const post = await getPost({ userId, id: params.postId });\n    if (!post) {\n        throw new Response('Not Found', { status: 404 });\n    }\n    return json({ post });\n}\n\nexport async function action({ request, params }: ActionArgs) {\n    const userId = await requireUserId(request);\n    invariant(params.postId, 'postId not found');\n\n    const intent = (await request.formData()).get('intent');\n    switch (intent) {\n        case 'delete':\n            await deletePost({ userId, id: params.postId });\n            return redirect('/posts');\n        case 'publish':\n            await publishPost({ userId, id: params.postId });\n            return null;\n        case 'unpublish':\n            await unpublishPost({ userId, id: params.postId });\n            return null;\n    }\n}\n\nexport default function PostDetailsPage() {\n    const data = useLoaderData<typeof loader>();\n\n    return (\n        <div>\n            <h3 className=\"text-2xl font-bold\">\n                {data.post.title} {!data.post.published && <span className=\"text-base font-normal italic\">Draft</span>}\n            </h3>\n            <p className=\"py-6\">{data.post.body}</p>\n            <hr className=\"my-4\" />\n            <div className=\"flex gap-2\">\n                <Form method=\"post\">\n                    <input type=\"hidden\" name=\"intent\" value=\"delete\" />\n                    <button\n                        type=\"submit\"\n                        className=\"rounded bg-blue-500  py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n                    >\n                        Delete\n                    </button>\n                </Form>\n                <Form method=\"post\">\n                    <input type=\"hidden\" name=\"intent\" value={data.post.published ? 'unpublish' : 'publish'} />\n                    <button\n                        type=\"submit\"\n                        className=\"rounded bg-blue-500  py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n                    >\n                        {data.post.published ? 'Unpublish' : 'Publish'}\n                    </button>\n                </Form>\n            </div>\n        </div>\n    );\n}\n\nexport function ErrorBoundary({ error }: { error: Error }) {\n    console.error(error);\n\n    return <div>An unexpected error occurred: {error.message}</div>;\n}\n\nexport function CatchBoundary() {\n    const caught = useCatch();\n\n    if (caught.status === 404) {\n        return <div>Post not found</div>;\n    }\n\n    throw new Error(`Unexpected caught response with status: ${caught.status}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack Project\nDESCRIPTION: Command to initialize the project for ZenStack, which installs dependencies and copies schema files.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@1 init\n```\n\n----------------------------------------\n\nTITLE: Running ZenStack Generator\nDESCRIPTION: Command to generate the OpenAPI spec based on the ZModel schema configuration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/5-documentation.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\n```\n\n----------------------------------------\n\nTITLE: Configuring Seed Script in package.json\nDESCRIPTION: JSON configuration in package.json to enable running the seed script with Prisma.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"prisma\": {\n        \"seed\": \"ts-node prisma/seed.ts\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying User with Nested Posts in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the useFindUniqueUser hook to query a user and include their posts. This query would be invalidated if a new Post is created for the user.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/_invalidation.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseFindUniqueUser({ where: { id: userId }, include: { posts: true } });\n```\n\n----------------------------------------\n\nTITLE: Configuring Seed Script in package.json\nDESCRIPTION: JSON configuration in package.json to enable running the seed script with Prisma.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"prisma\": {\n        \"seed\": \"ts-node prisma/seed.ts\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting API with Next.js Pages Router\nDESCRIPTION: TypeScript code for creating a request handler in a Next.js API endpoint using the Pages Router. It shows how to use NextRequestHandler with enhanced Prisma client and session user context.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/next.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequestHandler } from '@zenstackhq/server/next';\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport { enhance } from '@zenstackhq/runtime';\nimport { prisma } from '~/lib/db.ts';\nimport { getSessionUser } from '~/lib/auth.ts';\n\n// create an enhanced Prisma client with user context\nfunction getPrisma(req: NextApiRequest, res: NextApiResponse) {\n    // getSessionUser extracts the current session user from the request, its\n    // implementation depends on your auth solution\n    return enhance(prisma, { user: getSessionUser(req, res) });\n}\n\n// create the request handler with the `getPrisma` hook\nexport default NextRequestHandler({ getPrisma });\n```\n\n----------------------------------------\n\nTITLE: Querying Polymorphic Content Types\nDESCRIPTION: Example showing how to query polymorphic content types using ZenStack's generated hooks, which no longer require explicit inclusion of concrete types in the include property.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// list all contents that're visible to the current user\nconst { data: contents } = useFindManyContent(\n  {\n    include: {\n      author: true,\n      likes: true,\n    },\n    orderBy: { createdAt: \"desc\" },\n  },\n  // fetch only when user's logged in\n  { disabled: !session?.user }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client and Querying Data\nDESCRIPTION: TypeScript example showing how to initialize the Supabase client and make a database query using the client library. Demonstrates basic database interaction from the frontend.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/supabase.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize the JS client\nimport { createClient } from '@supabase/supabase-js';\nconst supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);\n\n// Make a request\nconst { data: todos, error } = await supabase.from('todos').select('*');\n```\n\n----------------------------------------\n\nTITLE: Configuring Model-level OpenAPI Metadata with RPC Flavor\nDESCRIPTION: Example of applying the @@openapi.meta attribute to a User model with RPC flavor, customizing security, tag descriptions, and operation-specific settings.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/openapi.mdx#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id\n    email String @unique\n\n    @@openapi.meta({\n        security: [ { basic: [] } ],\n        tagDescription: 'Operations for managing users',\n        findMany: {\n            description: 'Find users matching the given conditions'\n        },\n        delete: {\n            method: 'put',\n            path: 'dodelete',\n            description: 'Delete a unique user',\n            summary: 'Delete a user yeah yeah',\n            tags: ['delete', 'user'],\n        },\n        createMany: {\n            security: [],\n            deprecated: true\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: JSON:API Response for Fetching Related Resources\nDESCRIPTION: Example of a JSON:API-compliant response when fetching related resources (post's author). The response includes the related resource data with its attributes, relationships, and links.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"data\" : {\n      \"attributes\" : {\n         \"email\" : \"emily@zenstack.dev\",\n         \"name\" : \"Emily\"\n      },\n      \"id\" : 1,\n      \"links\" : {\n         \"self\" : \"http://myhost/api/user/1\"\n      },\n      \"relationships\" : {\n         \"posts\" : {\n            \"links\" : {\n               \"related\" : \"http://myhost/api/user/1/posts\",\n               \"self\" : \"http://myhost/api/user/1/relationships/posts\"\n            }\n         }\n      },\n      \"type\" : \"user\"\n   },\n   \"jsonapi\" : {\n      \"version\" : \"1.1\"\n   },\n   \"links\" : {\n      \"self\" : \"http://myhost/api/post/1/author\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Space Model Schema\nDESCRIPTION: Schema definition for the Space model with validation attributes for name and slug fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmodel Space {\n    id String @id @default(uuid()\n    name String @length(4, 50)\n    slug String @unique @regex('^[0-9a-zA-Z]{4,16}$')\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Entity-Relation Diagram with Mermaid\nDESCRIPTION: This Mermaid diagram code generates a mini entity-relation diagram for a 'Space' entity, showing its properties and relationships to 'SpaceUser' and 'List' entities.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part2/3-writing-plugins.md#2025-04-10_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n\"Space\" {\n  String id PK \n  DateTime createdAt  \n  DateTime updatedAt  \n  String name  \n  String slug  \n}\n\"Space\" ||--o{ \"SpaceUser\": members\n\"Space\" ||--o{ \"List\": lists\n```\n\n----------------------------------------\n\nTITLE: Sample Debug Output in REPL\nDESCRIPTION: This snippet shows a sample of the debug output when querying the 'list' model, displaying the conditions injected by ZenStack based on the policy rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/7-debugging.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nprisma:info [policy] `findMany` list:\n{\n  where: {\n    AND: [\n      { NOT: { OR: [] } },\n      {\n        OR: [\n          { owner: { is: { id: 1 } } },\n          {\n            AND: [\n              {\n                space: {\n                  members: {\n                    some: { user: { is: { id: 1 } } }\n                  }\n                }\n              },\n              { NOT: { private: true } }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo List Page with Server-Side Rendering in Next.js\nDESCRIPTION: Creates a page to display all todos within a specific list, using both client-side and server-side data fetching. It demonstrates creating new todos and viewing existing ones while ZenStack automatically handles access control based on schema policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/todo-saas/index.md#2025-04-10_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PlusIcon } from '@heroicons/react/24/outline';\nimport { useCurrentUser } from '@lib/context';\nimport { useTodo } from '@lib/hooks';\nimport { List, Space, Todo, User } from '@prisma/client';\nimport BreadCrumb from 'components/BreadCrumb';\nimport TodoComponent from 'components/Todo';\nimport WithNavBar from 'components/WithNavBar';\nimport { GetServerSideProps } from 'next';\nimport { ChangeEvent, KeyboardEvent, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { getEnhancedPrisma } from 'server/enhanced-db';\n\ntype Props = {\n    space: Space;\n    list: List;\n    todos: (Todo & { owner: User })[];\n};\n\nexport default function TodoList(props: Props) {\n    const user = useCurrentUser();\n    const [title, setTitle] = useState('');\n    const { findMany, create } = useTodo();\n\n    const { data: todos, mutate: refetch } = findMany(\n        {\n            where: { listId: props.list.id },\n            include: {\n                owner: true,\n            },\n            orderBy: {\n                updatedAt: 'desc',\n            },\n        },\n        { initialData: props.todos, disabled: !props.list }\n    );\n\n    const _createTodo = async () => {\n        try {\n            const todo = await create({\n                data: {\n                    title,\n                    owner: { connect: { id: user!.id } },\n                    list: { connect: { id: props.list.id } },\n                },\n            });\n            console.log(`Todo created: ${todo}`);\n            setTitle('');\n            refetch();\n        } catch (err: any) {\n            toast.error(\n                `Failed to create todo: ${err.info?.message || err.message}`\n            );\n        }\n    };\n\n    if (!props.space || !props.list) {\n        return <></>;\n    }\n\n    // html\n    return (...);\n}\n\nexport const getServerSideProps: GetServerSideProps<Props> = async ({\n    req,\n    res,\n    params,\n}) => {\n    const db = await getEnhancedPrisma({ req, res });\n    const space = await db.space.findUnique({\n        where: { slug: params!.slug as string },\n    });\n    if (!space) {\n        return {\n            notFound: true,\n        };\n    }\n\n    const list = await db.list.findUnique({\n        where: { id: params!.listId as string },\n    });\n    if (!list) {\n        return {\n            notFound: true,\n        };\n    }\n\n    const todos = await db.todo.findMany({\n        where: { listId: params?.listId as string },\n        include: {\n            owner: true,\n        },\n        orderBy: {\n            updatedAt: 'desc',\n        },\n    });\n\n    return {\n        props: { space, list, todos },\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Generating ZenStack and Prisma artifacts\nDESCRIPTION: Command to generate ZenStack and Prisma artifacts after updating the schema.zmodel file in a RedwoodJS project.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/redwood.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn rw @zenstackhq generate\n```\n\n----------------------------------------\n\nTITLE: Installing a ZenStack Plugin with NPM\nDESCRIPTION: Command to install a ZenStack plugin (OpenAPI generator in this example) as a dev dependency using npm. This is the first step in using a plugin with ZenStack.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part2/1-using-plugins.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @zenstackhq/openapi\n```\n\n----------------------------------------\n\nTITLE: Prisma Client Export Setup\nDESCRIPTION: Configuration for exporting PrismaClient instance.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/better-auth/index.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from \"@prisma/client\";\nexport const prisma = new PrismaClient();\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Query Dependencies\nDESCRIPTION: Commands for installing the required npm packages for TanStack Query integration with ZenStack.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/2-generate-hooks.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tanstack/react-query @zenstackhq/tanstack-query\n```\n\n----------------------------------------\n\nTITLE: Sample Debug Output in REPL\nDESCRIPTION: This snippet shows a sample of the debug output when querying the 'list' model, displaying the conditions injected by ZenStack based on the policy rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/7-debugging.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nprisma:info [policy] `findMany` list:\n{\n  where: {\n    AND: [\n      { NOT: { OR: [] } },\n      {\n        OR: [\n          { owner: { is: { id: 1 } } },\n          {\n            AND: [\n              {\n                space: {\n                  members: {\n                    some: { user: { is: { id: 1 } } }\n                  }\n                }\n              },\n              { NOT: { private: true } }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a New Content Type with ZenStack's Polymorphism\nDESCRIPTION: Example showing how easy it is to add a new content type with ZenStack's polymorphism, demonstrating the Open-Closed Principle in action.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nmodel Video extends Content {\n  url String\n  duration Int\n}\n```\n\n----------------------------------------\n\nTITLE: Blog Post Frontmatter in Markdown\nDESCRIPTION: YAML frontmatter configuration for a blog post about web development evolution, including metadata like title, description, tags, author, date and image.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/frontend-complexity/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Decoding the Evolving Landscape of Web Development\ndescription: Web development, especially frontend, is undoubtedly one of the most challenging professions in software development. Let's travel back in time to see how we got here step by step.\ntags: [webdev, frontend, career]\nauthors: yiming\ndate: 2023-02-11\nimage: ./cover.jpg\n---\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Base Model in Main Schema (schema.zmodel)\nDESCRIPTION: Main schema file that imports the base model definition and extends it for specific model types. This demonstrates how to use the import statement to incorporate external model definitions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/multiple-schema.md#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"base\"\nmodel User extends Base {\n    name String\n}\n\nmodel Post extends Base {\n    title String\n    content String?\n    viewCount Int @default(0)\n    comment Comment[]\n}\n\nmodel Comment extends Base {\n    content String\n    post Post @relation(fields: [postId], references: [id])\n    postId Int\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Soft Delete Implementation in ZenStack\nDESCRIPTION: Initial implementation of soft delete using a boolean flag and access policy in the schema. This approach, while elegant, doesn't handle unique constraints effectively.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/soft-delete-real/index.md#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nmodel Post {\n  ...\n  deleted Boolean @default(false) @omit\n  @@deny('read', deleted)\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Prisma Plugin in ZModel\nDESCRIPTION: Example of how to explicitly declare a core plugin (@core/prisma) to customize its output location. This demonstrates overriding the default options of a core plugin to specify a custom path for the generated Prisma schema file.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part2/2-builtin-plugins.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin prisma {\n    provider = \"@core/prisma\"\n    output = \"src/db/prisma/schema.prisma\"\n}\n```\n\n----------------------------------------\n\nTITLE: RESTful API Resource Update Examples\nDESCRIPTION: Examples of updating resources and their relationships\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_13\n\nLANGUAGE: json\nCODE:\n```\nPUT /post/1\n{\n    \"data\": {\n        \"type\": \"post\",\n        \"attributes\": {\n            \"title\": \"My Awesome Post\"\n        }\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nPUT /user/1\n{\n    \"data\": {\n        \"type\": \"user\",\n        \"relationships\": {\n            \"posts\": {\n                \"data\": [{ \"type\": \"post\", \"id\": 2 }]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with PostgREST API\nDESCRIPTION: Examples of using PostgREST API for various database operations including fetching a single user, searching with filters, fetching with relations, and creating a new user.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/postgrest-alternative/index.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// fetching a single user\nGET /user?id=1\n\n// search with filters\nGET /user?age=gte.18&paid=is.true\n\n// fetch with relation\nGET /user?select=last_name,post(title)\n\n// create\nPOST /user\n{ \"name\": \"J Doe\", \"age\": 23 }\n```\n\n----------------------------------------\n\nTITLE: Sample ZModel Schema Definition\nDESCRIPTION: Example ZModel schema showing datasource configuration and model definitions with relationships and access controls.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part2/3-writing-plugins.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\ndatasource db {\n    provider = 'sqlite'\n    url = 'file:.dev.db'\n}\n\nmodel User {\n    id Int @id @default(autoincrement())\n    posts Post[]\n}\n\nmodel Post {\n    id Int @id @default(autoincrement())\n    title String\n    author User @relation(fields: [authorId], references: [id])\n    authorId Int\n\n    @@allow('all', auth() == author)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Prisma Plugin in ZModel\nDESCRIPTION: Example of how to explicitly declare a core plugin (@core/prisma) to customize its output location. This demonstrates overriding the default options of a core plugin to specify a custom path for the generated Prisma schema file.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part2/2-builtin-plugins.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin prisma {\n    provider = \"@core/prisma\"\n    output = \"src/db/prisma/schema.prisma\"\n}\n```\n\n----------------------------------------\n\nTITLE: React Posts Component Implementation\nDESCRIPTION: Demonstrates using ZenStack query and mutation hooks in a React component for listing and creating posts. Shows data fetching with relationships and mutation handling.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFindManyPost, useCreatePost } from '../lib/hooks';\n\n// post list component\nconst Posts = ({ userId }: { userId: string }) => {\n    const create = useCreatePost();\n\n    // list all posts that're visible to the current user, together with their authors\n    const { data: posts } = useFindManyPost({\n        include: { author: true },\n        orderBy: { createdAt: 'desc' },\n    });\n\n    async function onCreatePost() {\n        create.mutate({\n            data: {\n                title: 'My awesome post',\n                authorId: userId,\n            },\n        });\n    }\n\n    return (\n        <>\n            <button onClick={onCreatePost}>Create</button>\n            <ul>\n                {posts?.map((post) => (\n                    <li key={post.id}>\n                        {post.title} by {post.author.email}\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript without Compilation\nDESCRIPTION: Example CLI command to generate Zod schemas as TypeScript files without compiling them to JavaScript.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/zod.md#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nzenstack generate --no-compile --output src/lib/zenstack\n```\n\n----------------------------------------\n\nTITLE: Error Response Format in JSON:API\nDESCRIPTION: Example of an error response object following the JSON:API specification, containing an array of error objects with code, status, title, and detail fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"errors\" : [\n      {\n         \"code\" : \"unsupported-model\",\n         \"detail\" : \"Model foo doesn't exist\",\n         \"status\" : 404,\n         \"title\" : \"Unsupported model type\"\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Output Directory with CLI\nDESCRIPTION: Example CLI command to generate Zod schemas to a custom output directory using the zenstack generate command.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/zod.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nzenstack generate --output src/lib/zenstack\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Hashing in User Model with ZenStack\nDESCRIPTION: A code example showing how to mark a password field with the @password attribute in a User model to enable automatic hashing before storage in the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/6-other-enhancements.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id @default(autoincrement())\n    email String @unique\n    password String? @password\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Prisma Client\nDESCRIPTION: Example of using the Prisma-generated TypeScript client to fetch a user with their posts, demonstrating type-safe database operations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/postgrest-alternative/index.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// the result is typed as: User & { posts: Post[] }\nconst userWithPosts = await prisma.user.findUnique({\n    where: { id: userId },\n    include: { posts: true },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Now Function in ZenStack Models\nDESCRIPTION: Shows how to use the now() function to reference the current timestamp in policy rules. This function returns a DateTime value representing the current time.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\n@@allow('read', future().updatedAt < now())\n```\n\n----------------------------------------\n\nTITLE: Relationship Update Endpoint Definition in TypeScript\nDESCRIPTION: The endpoint definition for updating relationships in a RESTful API following the JSON:API specification. Both PUT and PATCH methods can be used with identical behavior to replace relationships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nPUT /:type/:id/relationships/:relationship\nPATCH /:type/:id/relationships/:relationship\n```\n\n----------------------------------------\n\nTITLE: Configuring Key Rotation for Default Encryption\nDESCRIPTION: Sets up key rotation for enhanced security by specifying both the current encryption key and previous decryption keys, allowing data encrypted with older keys to still be decrypted.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/field-encryption.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user }, {\n  encryption: {\n    encryptionKey: encryptionKey,\n    decryptionKeys: [oldKey1, oldKey2, ...]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Query for Pagination in Vue\nDESCRIPTION: Example of using ZenStack's infinite query hook for loading posts with infinite pagination in Vue. The component displays posts in pages and provides a button to load more posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n// post list component with infinite loading\n\nimport { useInfiniteFindManyPost } from '@/lib/hooks';\n\nconst PAGE_SIZE = 10;\n\nconst fetchArgs = {\n    include: { author: true },\n    orderBy: { createdAt: 'desc' as const },\n    take: PAGE_SIZE,\n};\n\nconst { data, hasNextPage, fetchNextPage } = useInfiniteFindManyPost(\n    fetchArgs,\n    {\n        getNextPageParam: (lastPage, pages) => {\n            if (lastPage.length < PAGE_SIZE) {\n                return undefined;\n            }\n            const fetched = pages.flatMap((item) => item).length;\n            return {\n                ...fetchArgs,\n                skip: fetched,\n            };\n        },\n    }\n);\n</script>\n\n<template>\n    <div>\n        <ul v-if=\"data\">\n            <template v-for=\"(posts, i) in data.pages\" :key=\"i\">\n                <li v-for=\"post in posts\" :key=\"post.id\">\n                    {{ post.title }} by {{ post.author.email }}\n                </li>\n            </template>\n        </ul>\n    </div>\n\n    <button v-if=\"hasNextPage\" @click=\"() => fetchNextPage()\">Load More</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Utility Packages\nDESCRIPTION: Command to install additional utility packages, specifically nanoid.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nanoid\n```\n\n----------------------------------------\n\nTITLE: Defining Database Schema and Access Policies with ZenStack\nDESCRIPTION: This example demonstrates how to define a database schema and access policies using ZenStack. It includes models for User and Post with associated permissions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/no-api/index.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id() @default(autoincrement())\n    email String @unique()\n    posts Post[]\n\n    // make user profile public\n    @@allow('read', true)\n}\n\nmodel Post {\n    id Int @id() @default(autoincrement())\n    title String\n    published Boolean @default(false)\n    author User? @relation(fields: [authorId], references: [id])\n    authorId Int?\n\n    // author has full access\n    @@allow('all', auth() == author)\n\n    // logged-in users can view published posts\n    @@allow('read', auth() != null && published)\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting Prisma Schema from @prisma.passthrough\nDESCRIPTION: Shows the resulting Prisma schema after using the @prisma.passthrough attribute in ZModel.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_18\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id @default(autoincrement())\n    name String @unique\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a ZenStack Plugin via npm\nDESCRIPTION: Shows how to install a ZenStack plugin as a dev dependency using npm. This example specifically installs the OpenAPI plugin package.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part2/1-using-plugins.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @zenstackhq/openapi\n```\n\n----------------------------------------\n\nTITLE: Using ZenStack-enhanced Prisma Client\nDESCRIPTION: Example of using a ZenStack-enhanced Prisma client to fetch posts, demonstrating how access policies are automatically enforced.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/postgrest-alternative/index.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await enhance(prisma, {user: session.user}).post.findMany();\n```\n\n----------------------------------------\n\nTITLE: User Model Definition in ZenStack\nDESCRIPTION: ZModel schema definition for User model with authentication fields and access policy rules\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs.mdx#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id            String    @id @default(cuid())\n  name          String?\n  email         String?   @unique\n  emailVerified DateTime?\n  password      String @password @omit\n  image         String?\n  accounts      Account[]\n  sessions      Session[]\n  posts         Post[]\n\n  @@allow('create,read', true)\n\n  @@allow('update,delete', auth() == this)\n}\n```\n\n----------------------------------------\n\nTITLE: Serialization Metadata in GET Response\nDESCRIPTION: Example of how the response includes serialization metadata for complex data types, which should be used to correctly deserialize the data using SuperJSON.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_22\n\nLANGUAGE: json\nCODE:\n```\nGET /post/1\n{\n    \"data\": {\n        \"id\": \"1\",\n        \"type\": \"post\",\n        \"attributes\": {\n            ...\n            \"bytes\": \"AQID\" // base64-encoded bytes\n        }\n    },\n    \"meta\": { \n        \"serialization\": {\"values\": { \"data.attributes.bytes\": [[ \"custom\", \"Bytes\"]] } } \n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Using Has Function with Array Fields in ZenStack Models\nDESCRIPTION: Shows how to use the has() function to check if an array field contains a specific value. This function works with array fields of primitive types.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_9\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id Int @id\n    tags String[]\n    @@allow('read', has(tags, 'zenstack'))\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Prisma Client\nDESCRIPTION: Creates and exports the Prisma client instance to be used throughout the application for database operations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/stackauth-multitenancy/index.mdx#2025-04-10_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { PrismaClient } from \"@prisma/client\";\nexport const prisma = new PrismaClient();\n```\n\n----------------------------------------\n\nTITLE: Creating Express.js Local Development Server\nDESCRIPTION: Server setup for local development that imports the main app and starts listening on port 3000.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/rest-api-on-vercel/index.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from '.';\n\napp.listen(3000, () => console.log('🚀 Server ready at: http://localhost:3000'));\n```\n\n----------------------------------------\n\nTITLE: Testing the Express Server with curl\nDESCRIPTION: Command for verifying the Express server is working correctly by making a request to the root endpoint.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Todo List Page Implementation with ZenStack Hooks\nDESCRIPTION: Next.js page component for managing a list of todos with create, read, update, and delete operations. Uses ZenStack-generated hooks for data management.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/5-optimistic-update.md#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { useSession } from \"next-auth/react\";\nimport { useParams } from \"next/navigation\";\nimport { useState } from \"react\";\nimport TodoComponent from \"~/components/TodoComponent\";\nimport { useCreateTodo, useFindManyTodo, useFindUniqueList } from \"~/lib/hooks\";\n\nexport default function TodoList() {\n  const { listId } = useParams<{ listId: string }>();\n  const { data: session } = useSession();\n\n  const { data: list } = useFindUniqueList(\n    {\n      where: { id: listId },\n    },\n    { enabled: !!session?.user },\n  );\n\n  const { mutate: create } = useCreateTodo();\n  const { data: todos } = useFindManyTodo(\n    {\n      where: { listId },\n      orderBy: { createdAt: \"desc\" as const },\n    },\n    { enabled: !!session?.user },\n  );\n\n  const [title, setTitle] = useState(\"\");\n\n  function onCreate() {\n    create({\n      data: {\n        title,\n        owner: { connect: { id: session?.user.id } },\n        list: { connect: { id: listId } },\n      },\n    });\n    setTitle(\"\");\n  }\n\n  if (!session?.user || !list) {\n    return <></>;\n  }\n\n  return (\n    <div>\n      <div className=\"container mx-auto flex w-full flex-col items-center py-12\">\n        <h1 className=\"mb-4 text-2xl font-semibold\">{list.title}</h1>\n        <div className=\"flex space-x-2\">\n          <input\n            type=\"text\"\n            placeholder=\"Type a title and press enter\"\n            className=\"input input-bordered mt-2 w-72 max-w-xs\"\n            value={title}\n            autoFocus\n            onKeyUp={(e) => {\n              if (e.key === \"Enter\") {\n                onCreate();\n              }\n            }}\n            onChange={(e) => {\n              setTitle(e.currentTarget.value);\n            }}\n          />\n        </div>\n        <ul className=\"flex w-auto flex-col space-y-4 py-8\">\n          {todos?.map((todo) => (\n            <TodoComponent\n              key={todo.id}\n              value={todo}\n              optimistic={todo.$optimistic}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing bcryptjs Type Definitions for NextAuth\nDESCRIPTION: Command to install TypeScript type definitions for bcryptjs, which is used for password hashing in the authentication system.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs-app-router.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @types/bcryptjs\n```\n\n----------------------------------------\n\nTITLE: Extending Abstract Models to Reduce Code Duplication in ZenStack\nDESCRIPTION: Adding a Task model by extending the SpaceBase abstract model. This demonstrates how ZenStack helps eliminate code duplication by reusing fields and access policies from the base model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/technical-debt/index.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\n/*\n * Model for a task\n */\nmodel Task extends SpaceBase {\n    title String\n    size Int\n}\n```\n\n----------------------------------------\n\nTITLE: NestJS Module Configuration with CLS\nDESCRIPTION: Configuration of NestJS root module with ClsModule for handling user authentication headers\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/nest-api/index.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClsModule } from 'nestjs-cls';\n\n@Module({\n  imports: [\n    ClsModule.forRoot({\n      middleware: {\n        mount: true,\n        setup: (cls, req) => {\n          const userId = req.headers['x-user-id'];\n          const userRole = req.headers['x-user-role'] ?? 'USER';\n          cls.set(\n            'user',\n            userId ? { id: Number(userId), role: userRole } : undefined,\n          );\n        },\n      },\n    }),\n  ],\n  controllers: [AppController],\n  providers: [PrismaService],\n})\nexport class AppModule implements NestModule {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Types in warrant.dev\nDESCRIPTION: HTTP POST request body to define object types with relations in warrant.dev authorization service. This example creates an 'article' object type with a 'viewer' relation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/how-to-authz/index.md#2025-04-10_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"article\",\n  \"relations\": {\n    \"viewer\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Secured API Endpoints with cURL\nDESCRIPTION: A series of cURL commands to test the secured API endpoints, demonstrating access policy enforcement for different scenarios.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nestjs.mdx#2025-04-10_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:3000/posts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"x-user-id:1\" localhost:3000/posts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT -H \"x-user-id:1\" localhost:3000/posts/publish/1\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:3000/posts\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging in ZenStack\nDESCRIPTION: Demonstrates how to enable debug logging by setting the logPrismaQuery option to true when enhancing a PrismaClient. This allows visibility into the query transformations performed by ZenStack's policy enforcement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/debugging.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user }, { logPrismaQuery: true })\n```\n\n----------------------------------------\n\nTITLE: Using HasEvery Function with Array Fields in ZenStack Models\nDESCRIPTION: Demonstrates using the hasEvery() function to check if an array field contains all values from a provided array. This ensures all specified elements are present.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_10\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    id Int @id\n    tags String[]\n    @@allow('read', has(tags, ['zenstack', 'prisma']))\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Policy Output in TypeScript\nDESCRIPTION: This TypeScript code shows how to manually load and use a custom policy output when the default output location is not used. It enhances a Prisma client with the loaded policy.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/access-policy.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst policy = require('./lib/zenstack/policy').default;\nconst db = enhance(prisma, { user }, policy);\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Authentication Middleware\nDESCRIPTION: Helper function and middleware setup to extract and verify JWT tokens from request headers and enhance Prisma client with authenticated user context.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/rest-api-on-vercel/index.md#2025-04-10_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Request } from 'express';\n\nfunction getUser(req: Request) {\n    const token = req.headers.authorization?.split(' ')[1];\n    console.log('TOKEN:', token);\n    if (!token) {\n        return undefined;\n    }\n    try {\n        const decoded: any = jwt.verify(token, process.env.JWT_SECRET!);\n        return { id: decoded.sub };\n    } catch {\n        // bad token\n        return undefined;\n    }\n}\n\nconst apiHandler = RestApiHandler({ endpoint: 'http://localhost:3000/api' });\n\napp.use(\n    '/api',\n    ZenStackMiddleware({\n        getPrisma: (req) => {\n            return enhance(prisma, { user: getUser(req) });\n        },\n        handler: apiHandler\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Deserializing data with SuperJSON in TypeScript\nDESCRIPTION: Example of using SuperJSON to deserialize the response data and restore proper Date types for createdAt and updatedAt fields in TypeScript.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/3-serialization.md#2025-04-10_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport SuperJSON from 'superjson';\n\nSuperJSON.deserialize({\n    json: {\n        \"createdAt\" : \"2023-11-08T04:38:53.385Z\",\n        \"id\" : 1,\n        \"ownerId\" : 1,\n        \"private\" : false,\n        \"spaceId\" : 1,\n        \"title\" : \"Grocery\",\n        \"updatedAt\" : \"2023-11-09T04:52:57.987Z\"\n   },\n   meta: {\n        \"values\" : {\n            \"createdAt\" : [ \"Date\" ],\n            \"updatedAt\" : [ \"Date\" ]\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Deserializing data with SuperJSON in TypeScript\nDESCRIPTION: Example of using SuperJSON to deserialize the response data and restore proper Date types for createdAt and updatedAt fields in TypeScript.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/3-serialization.md#2025-04-10_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport SuperJSON from 'superjson';\n\nSuperJSON.deserialize({\n    json: {\n        \"createdAt\" : \"2023-11-08T04:38:53.385Z\",\n        \"id\" : 1,\n        \"ownerId\" : 1,\n        \"private\" : false,\n        \"spaceId\" : 1,\n        \"title\" : \"Grocery\",\n        \"updatedAt\" : \"2023-11-09T04:52:57.987Z\"\n   },\n   meta: {\n        \"values\" : {\n            \"createdAt\" : [ \"Date\" ],\n            \"updatedAt\" : [ \"Date\" ]\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating React-Admin Auth Provider for JWT Authentication\nDESCRIPTION: Implementation of React-Admin's AuthProvider interface for handling JWT-based authentication, including login, logout, and session management.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/react-admin/index.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { AuthProvider } from \"react-admin\";\n\nconst authProvider: AuthProvider = {\n  login: ({ username, password }) => {\n    return fetch(\"/api/auth/login\", {\n      method: \"POST\",\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      body: JSON.stringify({ email: username, password }),\n    })\n      .then((resp) => {\n        if (resp.status < 200 || resp.status >= 300) {\n          throw new Error(resp.statusText);\n        }\n        return resp.json();\n      })\n      .then((auth) => {\n        localStorage.setItem(\"auth\", JSON.stringify(auth));\n      });\n  },\n\n  logout: () => {\n    localStorage.removeItem(\"auth\");\n    return Promise.resolve();\n  },\n\n  checkAuth: () =>\n    localStorage.getItem(\"auth\") ? Promise.resolve() : Promise.reject(),\n\n  checkError: (error) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n    const status = error.status;\n    if (status === 401) {\n      localStorage.removeItem(\"auth\");\n      return Promise.reject();\n    }\n    // other error code (404, 500, etc): no need to log out\n    return Promise.resolve();\n  },\n\n  getIdentity: () => {\n    const auth = localStorage.getItem(\"auth\");\n    if (!auth) {\n      return Promise.reject(\"not authenticated\");\n    }\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const { id, email }: { id: number; email: string } = JSON.parse(auth);\n      return Promise.resolve({ id, email });\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  },\n\n  getPermissions: () => Promise.resolve(\"\"),\n};\n\nexport default authProvider;\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack Server Package\nDESCRIPTION: Command to install the ZenStack server package which includes the SvelteKit adapter.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/sveltekit.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/server\n```\n\n----------------------------------------\n\nTITLE: Implementing Model-Level Methods with ZenStack and Prisma Client Extensions\nDESCRIPTION: This TypeScript example demonstrates how to implement a model-level method 'getFeeds()' using Prisma Client Extensions and ZenStack enhancement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/client-extensions.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst extendedPrisma = prisma.$extends({\n  model: {\n    post: {\n      async getFeeds() {\n          const context = Prisma.getExtensionContext(this);\n          return context.findMany();\n      },\n    },\n  },\n});\n\nconst db = enhance(extendedPrisma);\nconst feeds = await db.post.getFeeds();\n```\n\n----------------------------------------\n\nTITLE: Implementing Credential-Based Authentication with NextAuth\nDESCRIPTION: Configuration for NextAuth using credential-based authentication with email and password, including session handling and token management.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { PrismaAdapter } from '@next-auth/prisma-adapter';\nimport type { PrismaClient } from '@prisma/client';\nimport { compare } from 'bcryptjs';\nimport NextAuth, { type DefaultSession, type NextAuthOptions } from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport { db } from './db';\n\ndeclare module 'next-auth' {\n  interface Session extends DefaultSession {\n    user: {\n      id: string;\n    } & DefaultSession['user'];\n  }\n}\n\nexport const authOptions: NextAuthOptions = {\n  session: {\n    strategy: 'jwt',\n  },\n  // Include user.id on session\n  callbacks: {\n    session({ session, token }) {\n      if (session.user) {\n        session.user.id = token.sub!;\n      }\n      return session;\n    },\n  },\n  // Configure one or more authentication providers\n  adapter: PrismaAdapter(db),\n  providers: [\n    CredentialsProvider({\n      credentials: {\n        email: { type: 'email' },\n        password: { type: 'password' },\n      },\n      authorize: authorize(db),\n    }),\n  ],\n};\n\nfunction authorize(prisma: PrismaClient) {\n  return async (credentials: Record<'email' | 'password', string> | undefined) => {\n    if (!credentials?.email) throw new Error('\"email\" is required in credentials');\n    if (!credentials?.password) throw new Error('\"password\" is required in credentials');\n\n    const maybeUser = await prisma.user.findFirst({\n      where: { email: credentials.email },\n      select: { id: true, email: true, password: true },\n    });\n    if (!maybeUser?.password) return null;\n\n    // verify the input password with stored hash\n    const isValid = await compare(credentials.password, maybeUser.password);\n    if (!isValid) return null;\n\n    return { id: maybeUser.id, email: maybeUser.email };\n  };\n}\n\nexport default NextAuth(authOptions);\n```\n\n----------------------------------------\n\nTITLE: Querying Articles with SQL-based Authorization\nDESCRIPTION: SQL query that retrieves articles readable by the current user by joining with an AccessControlList table and checking user and group permissions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/how-to-authz/index.md#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT Article.*\nFROM Article\nJOIN AccessControlList ON AccessControlList.resource_id = Article.id\nLEFT JOIN USER ON AccessControlList.user_id = User.id\nLEFT JOIN GROUP ON AccessControlList.group_id = Group.id\nWHERE (User.id = CURRENT_USER_ID\n       OR Group.id IN\n         (SELECT group_id\n          FROM UserGroup\n          WHERE user_id = CURRENT_USER_ID))\n  AND AccessControlList.permission = 'read';\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack CLI package as dev dependency\nDESCRIPTION: This command installs the 'zenstack' CLI package as a development dependency in the project. It's part of the manual installation process.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/install.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev zenstack@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring PrismaClient Logging for ZenStack\nDESCRIPTION: Shows how to enable info level logging on PrismaClient to see the queries generated by ZenStack. This is required to see the debug information from ZenStack's policy enforcement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/debugging.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient({ log: ['info'] });\n```\n\n----------------------------------------\n\nTITLE: Setting Current User in ZenStack REPL\nDESCRIPTION: Examples of setting the current user and making queries in the ZenStack REPL.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n.auth { id: 1 }\ndb.user.findMany();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.auth { id: 2 }\ndb.user.findMany();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndb.list.create({ data: { title: 'Grocery', space: { connect: { slug: 'central-perk' } } } })\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndb.list.create({ data: { title: 'Grocery', owner: { connect: { email: 'joey@zenstack.dev' } }, space: { connect: { slug: 'central-perk' } } } })\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Plugin in ZenStack Schema\nDESCRIPTION: Enables and configures the OpenAPI plugin in the ZenStack schema file, specifying API details and output file.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_26\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin openapi {\n    provider = '@zenstackhq/openapi'\n    prefix = '/api'\n    title = 'Pet Store API'\n    version = '0.1.0'\n    description = 'My awesome pet store API'\n    output = 'petstore-api.json'\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Model or Enum Name in ZModel\nDESCRIPTION: Maps the schema model name to a table with a different name, or an enum name to a different underlying enum in the database. Takes a single parameter 'name' for the database table or enum name.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_23\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @@map(_ name: String)\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Query for Posts in Vue\nDESCRIPTION: This snippet shows how to use the useInfiniteFindManyPost hook to implement infinite pagination for loading posts in a Vue component. It includes the setup script for fetching data and the template for rendering the list of posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n// post list component with infinite loading\n\nimport { useInfiniteFindManyPost } from '@/lib/hooks';\n\nconst PAGE_SIZE = 10;\n\nconst fetchArgs = {\n    include: { author: true },\n    orderBy: { createdAt: 'desc' as const },\n    take: PAGE_SIZE,\n};\n\nconst { data, hasNextPage, fetchNextPage } = useInfiniteFindManyPost(\n    fetchArgs,\n    {\n        getNextPageParam: (lastPage, pages) => {\n            if (lastPage.length < PAGE_SIZE) {\n                return undefined;\n            }\n            const fetched = pages.flatMap((item) => item).length;\n            return {\n                ...fetchArgs,\n                skip: fetched,\n            };\n        },\n    }\n);\n</script>\n\n<template>\n    <div>\n        <ul v-if=\"data\">\n            <template v-for=\"(posts, i) in data.pages\" :key=\"i\">\n                <li v-for=\"post in posts\" :key=\"post.id\">\n                    {{ post.title }} by {{ post.author.email }}\n                </li>\n            </template>\n        </ul>\n    </div>\n\n    <button v-if=\"hasNextPage\" @click=\"() => fetchNextPage()\">Load More</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Testing Express Server with Curl\nDESCRIPTION: Curl command to make a request to the Express server's root endpoint to verify it's working correctly.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Configuring the zenstack-markdown Plugin\nDESCRIPTION: Shows how to configure the zenstack-markdown plugin in a ZModel schema file to enable the documentation generation functionality.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/code-as-doc/index.md#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nplugin zenstackmd {\n    provider = 'zenstack-markdown'\n}\n```\n\n----------------------------------------\n\nTITLE: Assembling Generated Components into a Technical Document\nDESCRIPTION: Combines AI-generated text with Mermaid diagrams to create a complete technical design document, organizing content by model and including overview information.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/code-as-doc/index.md#2025-04-10_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n const modelChapter = dataModels\n        .map((x) => {\n            return [\n                `### ${x.name}`,\n                mermaidGenerator.generate(x),\n                object.models\n                    .find((model) => model.name === x.name)\n                    ?.access_control_policies.map((x) => `- ${x}`)\n                    .join('\\n'),\n            ].join('\\n');\n        })\n        .join('\\n');\n\n const content = [\n        `# Technical Design Document`,\n        '> Generated by [`ZenStack-markdown`](https://github.com/jiashengguo/zenstack-markdown)',\n        `${object.overview.description}`,\n        `## Functionality`,\n        `${object.overview.functionality}`,\n        '## Models:',\n        dataModels.map((x) => `- [${x.name}](#${x.name})`).join('\\n'),\n        modelChapter,\n    ].join('\\n\\n');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Custom Attributes in ZModel for Password Hashing and Field Omission\nDESCRIPTION: This snippet shows how ZModel uses custom attributes like @password and @omit to automatically hash passwords and exclude them from query results.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/1-zmodel.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @default(autoincrement()) @id\n    email String @unique\n    password String @omit @password\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Security Rules Implementation\nDESCRIPTION: Firestore security rules implementation for a blog app defining CRUD permissions for posts, including published post visibility and author-specific operations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/firebase-alternative/index.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /posts/{post} {\n      // published posts are readable to all login users\n      allow read: if request.auth != null && resource.data.published == true;\n\n      // all posts are readable to their author\n      allow read: if request.auth != null && request.auth.uid == resource.data.authorId;\n\n\t\t\t// login users can create posts for themselves\n      allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;\n\n      // login users can update posts but cannot change the author of a post\n      allow update: if request.auth != null\n      \t&& request.auth.uid == resource.data.authorId\n      \t&& request.resource.data.authorId == resource.data.authorId;\n\n\t\t\t// login users can delete their own posts\n      allow delete: if request.auth != null\n      \t&& request.auth.uid == resource.data.authorId;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up ZenStack in RedwoodJS project\nDESCRIPTION: Command to set up ZenStack in a RedwoodJS project using the RedwoodJS CLI.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/redwood.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn rw setup package @zenstackhq/redwood\n```\n\n----------------------------------------\n\nTITLE: Accessing Relations in ZModel Policy Rules\nDESCRIPTION: Shows how to access fields from relations in policy expressions, allowing for complex rules that traverse relationships between models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_53\n\nLANGUAGE: zmodel\nCODE:\n```\n@@allow('read', membership?[space.members?[user == auth()]])\n```\n\n----------------------------------------\n\nTITLE: Implementing authentication with Prisma in Nuxt\nDESCRIPTION: Implementation of user authentication utilities using Prisma to find and create users in the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nuxt.mdx#2025-04-10_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport type { User } from '@prisma/client';\nimport { prisma } from '~/server/prisma';\n\nexport async function findUserByEmail(email: string) {\n    return prisma.user.findUnique({ where: { email } });\n}\n\nexport async function createUser(user: Omit<User, 'id'>) {\n    return prisma.user.create({\n        data: user,\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Access Policy Guard Function for User Reading\nDESCRIPTION: Auto-generated guard function that implements the User model's read access policy. This function translates ZenStack's declarative access rules into Prisma query filters.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nfunction User_read(context: QueryContext): any {\n    const user = context.user ?? null;\n    return {\n        OR: [\n            {\n                spaces: {\n                    some: {\n                        space: {\n                            is: {\n                                members: {\n                                    some: !user\n                                        ? { OR: [] } // false condition\n                                        : {\n                                              user: {\n                                                  is: {\n                                                      id: {\n                                                          equals: user ? user.id : null,\n                                                      },\n                                                  },\n                                              },\n                                          },\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n            !user\n                ? { OR: [] } // false condition\n                : {\n                      id: {\n                          equals: user ? user.id : null,\n                      },\n                  },\n        ],\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Deserialized JavaScript object with proper Date types\nDESCRIPTION: This JavaScript object represents the result of deserializing the API response using SuperJSON. The createdAt and updatedAt fields are now proper Date objects.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/3-serialization.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    createdAt: 2023-11-08T04:38:53.385Z,\n    id: 1,\n    ownerId: 1,\n    private: false,\n    spaceId: 1,\n    title: 'Grocery',\n    updatedAt: 2023-11-09T04:52:57.987Z\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Method to Prisma Client\nDESCRIPTION: Demonstrates adding a utility method directly to the Prisma Client instance. This example adds a $log method that can be called directly on the client for logging purposes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-client-extensions/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst xprisma = prisma.$extends({\n    client: {\n        $log: (s: string) => console.log(s),\n    },\n});\n\nprisma.$log('Hello world');\n```\n\n----------------------------------------\n\nTITLE: Updating Resources in ZenStack RESTful API\nDESCRIPTION: Shows how to update resources, including updating attributes and relationships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_10\n\nLANGUAGE: json\nCODE:\n```\nPUT /post/1\n{\n    \"data\": {\n        \"type\": \"post\",\n        \"attributes\": {\n            \"title\": \"My Awesome Post\"\n        }\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nPUT /user/1\n{\n    \"data\": {\n        \"type\": \"user\",\n        \"relationships\": {\n            \"posts\": {\n                \"data\": [{ \"type\": \"post\", \"id\": 2 }]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for NextAuth\nDESCRIPTION: Environment variables configuration for NextAuth, including database URL, secret key, and application URL.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"file:./db.sqlite\"\nNEXTAUTH_SECRET=\"abc123\"\nNEXTAUTH_URL=\"http://localhost:3000\"\n```\n\n----------------------------------------\n\nTITLE: Updating Resources in ZenStack RESTful API\nDESCRIPTION: Shows how to update resources, including updating attributes and relationships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_10\n\nLANGUAGE: json\nCODE:\n```\nPUT /post/1\n{\n    \"data\": {\n        \"type\": \"post\",\n        \"attributes\": {\n            \"title\": \"My Awesome Post\"\n        }\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nPUT /user/1\n{\n    \"data\": {\n        \"type\": \"user\",\n        \"relationships\": {\n            \"posts\": {\n                \"data\": [{ \"type\": \"post\", \"id\": 2 }]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying RedwoodJS with ZenStack to Vercel\nDESCRIPTION: Deployment command for a RedwoodJS project using ZenStack, including the generate step before deployment to Vercel.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/redwood.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn rw @zenstackhq generate && yarn rw deploy vercel\n```\n\n----------------------------------------\n\nTITLE: Enhanced Prisma Client Configuration\nDESCRIPTION: Configuration for enhanced Prisma client with ZenStack middleware\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/rest-api-on-vercel/index.md#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n    '/api',\n    ZenStackMiddleware({\n        getPrisma: () => enhance(prisma),\n        handler: apiHandler,\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Relations in ZModel Policy Rules\nDESCRIPTION: Shows how to access fields from relations in policy expressions, allowing for complex rules that traverse relationships between models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_53\n\nLANGUAGE: zmodel\nCODE:\n```\n@@allow('read', membership?[space.members?[user == auth()]])\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Schema with ZenStack\nDESCRIPTION: Defines the schema for a Role-Based Access Control (RBAC) pattern using ZenStack's ZModel language. It includes User, Role, Permission, and Resource models with access control rules based on roles and permissions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/model-authz/index.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  name String\n  roles Role[]\n}\n\nmodel Role {\n  id Int @id @default(autoincrement())\n  name String\n  users User[] // users belonging to the role\n  permissions Permission[] // permissions assigned to the role\n}\n\nmodel Permission {\n  id Int @id @default(autoincrement())\n  name String // \"view\" or \"manage\", use an enum if database supports it\n  roles Role[]\n}\n\nmodel Resource {\n  id Int @id @default(autoincrement())\n  name String\n\n  @@allow('read', auth().roles?[permissions?[name == 'view']])\n  @@allow('all', auth().roles?[permissions?[name == 'manage']])\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Users that Don't Exist in Database\nDESCRIPTION: Function to check if an authenticated Auth0 user exists in the database and include this information in the session.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/auth0.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst currentUser = async (req) => {\n  // Get your auth0 auth session\n  const session = await getSession(req); \n\n  if (!session?.user.sub) { \n    // Throw an error if the user isn't authenticated\n    throw new Error('UNAUTHENTICATED');\n  }\n\n  // Find the user in the db\n  const dbUser = await prisma.user.findUnique({ \n    where: { id: session.user.sub },\n  }); \n  \n  return {\n    id: session.user.sub,\n    // If the user doesn't exist in the database, this variable \n    // can be set in the session\n    dbUserExists: !isNull(dbUser),\n  };\n};\n\n// Create the client using the currentUser\nexport const getPrisma = async (req) => {\n  const user = await currentUser(req);\n  return enhance(user);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing findManyAndCount with Prisma Transaction in TypeScript\nDESCRIPTION: A basic implementation of findManyAndCount functionality for Prisma that performs two separate database queries - one to fetch the items and another to count the total matching records.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/trade-off/index.md#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst { items, count } = await prisma.$transaction(async (tx) => {\n    const items = await tx.user.findMany(query);\n    const count = await tx.user.count({ where: query.where });\n    return { items, count };\n});\n```\n\n----------------------------------------\n\nTITLE: Creating PrismaClient instance in Nuxt\nDESCRIPTION: Code to create and export a PrismaClient instance for use throughout the Nuxt application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nuxt.mdx#2025-04-10_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nexport const prisma = new PrismaClient();\n```\n\n----------------------------------------\n\nTITLE: Applying Relation Attribute with FieldReference in ZModel\nDESCRIPTION: Demonstrates how to apply the relation attribute in a model, using FieldReference to specify related fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_16\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Model {\n    ...\n    // [ownerId] is a list of FieldReference\n    owner Owner @relation(fields: [ownerId], references: [id])\n    ownerId\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Model and Field Attributes in ZenStack\nDESCRIPTION: Code snippet demonstrating how to access attributes of models and fields in ZenStack's AST. This example finds a User model and its email and password fields, then accesses their attributes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/custom-attributes.mdx#2025-04-10_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst userModel = models.find((m) => m.name === 'User');\nconst userModelAttributes = userModel?.attributes;\n\nconst emailField = userModel?.fields.find((f) => f.name === 'email');\nconst emailFieldAttributes = emailField?.attributes;\n\nconst passwordField = userModel?.fields.find((f) => f.name === 'password');\nconst passwordFieldAttributes = passwordField?.attributes;\n```\n\n----------------------------------------\n\nTITLE: RESTful API Pagination Response Example\nDESCRIPTION: Example of pagination response format including meta information and navigation links\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"meta\": {\n        \"total\": 10\n    },\n    \"data\" : [\n        ...\n    ],\n    \"links\" : {\n        \"first\" : \"http://myhost/api/post?page%5Blimit%5D=2\",\n        \"last\" : \"http://myhost/api/post?page%5Boffset%5D=4\",\n        \"next\" : \"http://myhost/api/post?page%5Boffset%5D=4&page%5Blimit%5D=2\",\n        \"prev\" : \"http://myhost/api/post?page%5Boffset%5D=0&page%5Blimit%5D=2\",\n        \"self\" : \"http://myhost/api/post\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React-Admin Data Provider for ZenStack API\nDESCRIPTION: This code implements a data provider for React-Admin that communicates with the ZenStack RESTful API. It handles converting React-Admin query parameters to API requests and transforms API responses back to the format expected by React-Admin.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/react-admin/index.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype FetchFn = (url: string, init: RequestInit) => Promise<Response>;\n\nexport function createDataProvider(\n  url: string,\n  customFetch?: FetchFn,\n): DataProvider {\n  const fetcher = customFetch ?? fetch;\n\n  // make the API fetch\n  const doFetch = async (url: string, init: RequestInit) => {\n    const resp = await fetcher(url, init);\n    if (resp.status < 200 || resp.status >= 300) {\n      throw new HttpError(resp.statusText, resp.status);\n    }\n    return await resp.json();\n  };\n\n  // convert React-Admin query params to URL search params\n  const getListQuerySearchParams = (\n    params: GetListParams | GetManyReferenceParams,\n  ) => {\n    const searchParams = new URLSearchParams();\n    if (params.filter) {\n      Object.entries<any>(params.filter).forEach(([key, value]) => {\n        searchParams.set(`filter[${key}]`, value.toString());\n      });\n    }\n\n    searchParams.set(\n      \"sort\",\n      params.sort.order === \"ASC\" ? params.sort.field : `-${params.sort.field}`,\n    );\n\n    searchParams.set(\n      \"page[offset]\",\n      ((params.pagination.page - 1) * params.pagination.perPage).toString(),\n    );\n    searchParams.set(\"page[limit]\", params.pagination.perPage.toString());\n\n    return searchParams.toString();\n  };\n\n  // convert the API response to React-Admin query result\n  const makeListQueryResult = (\n    data: any[],\n    meta: { total: number },\n    params: GetListParams | GetManyReferenceParams,\n  ) => {\n    return {\n      data: data.map((item: any) => ({ id: item.id, ...item.attributes })),\n      total: meta.total,\n      pageInfo: {\n        hasNextPage:\n          meta.total > params.pagination.page * params.pagination.perPage,\n        hasPreviousPage: params.pagination.page > 1,\n      },\n    };\n  };\n\n  return {\n    getList: async (resource, params) => {\n      const reqUrl = `${url}/${resource}?${getListQuerySearchParams(params)}`;\n      const { data, meta } = await doFetch(reqUrl, {\n        method: \"GET\",\n      });\n      return makeListQueryResult(data, meta, params);\n    },\n\n    getOne: async (resource, params) => {\n      const reqUrl = `${url}/${resource}/${params.id}`;\n      const { data } = await doFetch(reqUrl, {\n        method: \"GET\",\n      });\n      return {\n        data: { id: data.id, ...data.attributes },\n      };\n    },\n\n    ...\n\n  } satisfies DataProvider;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Optimistic Update for Specific Queries in ZenStack\nDESCRIPTION: Code snippet demonstrating how to opt out of automatic optimistic updates for specific queries in ZenStack, even when mutations have optimistic updates enabled. The third parameter (false) disables optimistic updates for this specific query.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/5-optimistic-update.md#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst { data: todos } = useFindManyTodo(\n    { where: { listId } },\n    { enabled: !!session?.user },\n    false, // <- opt-out automatic optimistic update\n);\n```\n\n----------------------------------------\n\nTITLE: Using JSDoc-Style Comments in ZModel\nDESCRIPTION: Example showing how to use JSDoc-style block comments as documentation, which appear in IDEs but are not included in the generated Prisma schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_53\n\nLANGUAGE: zmodel\nCODE:\n```\n/**\n * A user model\n */\nmodel User {\n    id String @id\n\n    /**\n     * The user's email\n     */\n    email String @unique\n}\n```\n\n----------------------------------------\n\nTITLE: User Model Access Control Configuration\nDESCRIPTION: ZenStack schema configuration for User model access control rules\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/rest-api-on-vercel/index.md#2025-04-10_snippet_11\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id @default(cuid())\n    email String @unique\n    password String @password @omit\n    orders Order[]\n\n    // everybody can signup\n    @@allow('create', true)\n\n    // user profile is publicly readable\n    @@allow('read', true)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Booking List Page Component in Remix\nDESCRIPTION: React component implementation for the booking list page, including loader function for data fetching and UI rendering with Remix components.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/cal-com-clone.mdx#2025-04-10_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { LoaderArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Form, Link, NavLink, Outlet, useLoaderData } from '@remix-run/react';\nimport { useEffect, useState } from 'react';\nimport { getBookingItems } from '~/models/booking.server';\nimport type { User } from '~/models/user.server';\nimport { requireUserId } from '~/session.server';\nimport { useUser } from '~/utils';\n\nexport async function loader({ request }: LoaderArgs) {\n    const userId = await requireUserId(request);\n    const bookings = await getBookingItems({ userId });\n    return json({ bookings });\n}\n\nfunction getBookingUrl(user: User) {\n    const url = new URL(window.location.href);\n    url.pathname = `/new`;\n    url.search = `?uid=${user.id}`;\n    return url.toString();\n}\n\nexport default function BookingsPage() {\n    const data = useLoaderData<typeof loader>();\n    const user = useUser();\n    const [bookingUrl, setBookingUrl] = useState('');\n\n    useEffect(() => {\n        setBookingUrl(getBookingUrl(user));\n    }, [user]);\n\n    return (\n        <div className=\"flex h-full min-h-screen flex-col\">\n            <header className=\"flex items-center justify-between bg-slate-800 p-4 text-white\">\n                <h1 className=\"text-3xl font-bold\">\n                    <Link to=\".\">Bookings</Link>\n                </h1>\n                <p>{user.email}</p>\n                <Form action=\"/logout\" method=\"post\">\n                    <button\n                        type=\"submit\"\n                        className=\"rounded bg-slate-600 py-2 px-4 text-blue-100 hover:bg-blue-500 active:bg-blue-600\"\n                    >\n                        Logout\n                    </button>\n                </Form>\n            </header>\n\n            <main className=\"flex h-full bg-white\">\n                <div className=\"h-full w-1/3 border-r bg-gray-50\">\n                    <div className=\"p-8\">\n                        <h3 className=\"pb-1 font-semibold\">Public url:</h3>\n                        <p className=\"italic\">{bookingUrl}</p>\n                    </div>\n\n                    <hr />\n\n                    {data.bookings.length === 0 ? (\n                        <p className=\"p-4\">No bookings yet</p>\n                    ) : (\n                        <ol>\n                            {data.bookings.map((booking) => (\n                                <li key={booking.id}>\n                                    <NavLink\n                                        className={({ isActive }) =>\n                                            `block border-b p-6 text-xl ${isActive ? 'bg-white' : ''}`\n                                        }\n                                        to={booking.id}\n                                    >\n                                        <div className=\"flex items-baseline justify-between\">\n                                            <span>🗓️ {booking.email}</span>\n                                            <span className=\"ml-8 inline-block text-sm\">\n                                                {new Date(booking.startAt).toLocaleString()} ~ {booking.duration} min\n                                            </span>\n                                        </div>\n                                    </NavLink>\n                                </li>\n                            ))}\n                        </ol>\n                    )}\n                </div>\n\n                <div className=\"flex-1 p-6\">\n                    <Outlet />\n                </div>\n            </main>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing endsWith() Function in ZModel\nDESCRIPTION: The endsWith() function checks if a specified field ends with a search string. It's equivalent to Prisma's endsWith operator.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_28\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction endsWith(field: String, search: String): Boolean {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Component\nDESCRIPTION: React component for user registration with error handling and automatic sign-in\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useUser } from \"../lib/hooks/user\";\nimport { signIn } from \"next-auth/react\";\nimport { FormEvent, useState } from \"react\";\n\nexport default function Signup() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const { create: signup } = useUser();\n\n  async function onSignup(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    try {\n      await signup({ data: { email, password } });\n    } catch (err: any) {\n      if (err.info?.prisma === true) {\n        if (err.info.code === \"P2002\") {\n          alert(\"User already exists\");\n        } else {\n          alert(`Unexpected Prisma error: ${err.info.code as string}`);\n        }\n      } else {\n        alert(`Error occurred: ${JSON.stringify(err)}`);\n      }\n      return;\n    }\n\n    const signInResult = await signIn(\"credentials\", {\n      redirect: false,\n      email,\n      password,\n    });\n    if (signInResult?.ok) {\n      window.location.href = \"/\";\n    } else {\n      console.error(\"Signin failed:\", signInResult?.error);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying User with Omitted Password Field\nDESCRIPTION: JavaScript code showing how to authenticate a user and perform a query that will return user data with the password field omitted.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/6-other-enhancements.md#2025-04-10_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n.auth { id: 1 }\ndb.user.findFirst();\n```\n\n----------------------------------------\n\nTITLE: Example: Nested Create Mutation Hook\nDESCRIPTION: Example of using generated hooks for creating nested data structures.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/2-generate-hooks.md#2025-04-10_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst { mutate } = useCreateList();\n\nfunction onCreateList() {\n  mutate({\n    data: { \n      title: 'My List',\n      todos: {\n        create: [\n          { name: 'Todo 1' },\n          { name: 'Todo 2' }\n        ]\n      }\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Post API Implementation\nDESCRIPTION: Implementation of post listing with authentication and filtering logic\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/nest-api/index.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nprivate get currentUser() {\n  const id = this.clsService.get('userId');\n  const role = this.clsService.get('userRole') ?? 'USER';\n  // undefined means anonymous user\n  return id ? { id: Number(id), role } : undefined;\n}\n\nprivate makePostAuthFilter() {\n  // user is editor, or post is published or user is author\n  return this.currentUser\n    ? this.currentUser.role === 'EDITOR'\n      ? {}\n      : { OR: [{ published: true }, { author: { id: this.currentUser.id } }] }\n    : { published: true };\n}\n\n@Get('post')\nasync getFilteredPosts(...): Promise<PostModel[]> {\n  const searchFilter = ...; // search conditions for filtering title, etc.\n  const authFilter = this.makePostAuthFilter();\n\n  return this.prismaService.post.findMany({\n    where: { AND: [searchFilter, authFilter] },\n    // make sure to exclude \"email\" field; needed in all routes that fetch posts\n    include: { author: { select: { id: true, name: true, role: true } } },\n    ...\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Supabase RLS Read Policy for List Entity\nDESCRIPTION: RLS policy for List read access, allowing users to read lists they own or non-private lists in spaces they are members of.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/supabase-alternative/index.md#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"list_read\"\non \"public\".\"List\"\nto authenticated\nusing (\n   ((auth.uid() = (\"ownerId\")::uuid) OR ((NOT private) AND (EXISTS (SELECT 1\n   FROM \"SpaceUser\"\n  WHERE ((\"SpaceUser\".\"spaceId\" = \"List\".\"spaceId\") AND ((\"SpaceUser\".\"userId\")::uuid = auth.uid()))))))\n);\n```\n\n----------------------------------------\n\nTITLE: Generated Prisma Schema from Abstract Models\nDESCRIPTION: Shows the resulting Prisma schema after ZenStack processes abstract model inheritance. The abstract base model is removed, but its fields and attributes are automatically applied to the concrete models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/multiple-schema.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\n/// @@allow('all', auth() != null && published)\nmodel User {\n    name String\n    id Int @id() @default(autoincrement())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt()\n    published Boolean @default(true)\n}\n\n/// @@allow('all', auth() != null && published)\nmodel Post {\n    title String\n    content String?\n    viewCount Int @default(0)\n    comment Comment[]\n    id Int @id() @default(autoincrement())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt()\n    published Boolean @default(true)\n}\n\n/// @@allow('all', auth() != null && published)\nmodel Comment {\n    content String\n    post Post @relation(fields: [postId], references: [id])\n    postId Int\n    id Int @id() @default(autoincrement())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt()\n    published Boolean @default(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Default Attribute Named Arguments\nDESCRIPTION: Example of using named arguments with the @default attribute\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_9\n\nLANGUAGE: zmodel\nCODE:\n```\npublished Boolean @default(value: false)\n```\n\n----------------------------------------\n\nTITLE: JSON Response for User Signup\nDESCRIPTION: Sample JSON response after successful user creation, showing that the password field is omitted from the response as specified by the @omit attribute in the User model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"clfan0lys0000vhtktutornel\",\n    \"email\": \"tom@pet.inc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Supabase REST API Request with Authentication\nDESCRIPTION: Example REST API call to retrieve List items from Supabase with authentication, demonstrating how RLS policies filter the results automatically.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/supabase-alternative/index.md#2025-04-10_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\ncurl '{SUPABASE_PROJECT_URL}/rest/v1/List?select=*' \\\n-H \"apikey: SUPABASE_ANON_KEY\" \\\n-H \"Authorization: Bearer USER_JWT_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Signup Form Component in SvelteKit\nDESCRIPTION: Svelte component that renders a signup form with email and password fields, including form enhancement for client-side validation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/sveltekit.mdx#2025-04-10_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n    import { enhance } from '$app/forms';\n    import type { ActionData } from './$types';\n    export let form: ActionData;\n</script>\n\n<div class=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\"\n>\n    <h1 class=\"text-5xl font-extrabold text-white\">Sign up</h1>\n    <form class=\"mt-16 flex flex-col gap-8 text-2xl\" method=\"post\" use:enhance>\n        {#if form?.dup}\n            <p class=\"text-red-600 my-2\">Email aready registered!</p>\n        {/if}\n        <div>\n            <label for=\"email\" class=\"inline-block w-32 text-white\"> Email </label>\n            <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                value={form?.email ?? ''}\n                class=\"ml-4 w-72 rounded border p-2\"\n            />\n        </div>\n        <div>\n            <label for=\"password\" class=\"inline-block w-32 text-white\"> Password </label>\n            <input id=\"password\" name=\"password\" type=\"password\" class=\"ml-4 w-72 rounded border p-2\" />\n        </div>\n        <input\n            type=\"submit\"\n            value=\"Create account\"\n            class=\"cursor-pointer rounded border border-gray-500 py-4 text-white\"\n        />\n        <div class=\"mt-2 text-base font-medium text-gray-300\">\n            Already have an account?{' '}\n            <a href=\"/signin\" class=\"text-primary-700 underline\"> Login here </a>\n        </div>\n    </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing hasEvery() Function in ZModel\nDESCRIPTION: The hasEvery() function checks if a list field contains every element from a search list. It's equivalent to Prisma's hasEvery operator.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_30\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction hasEvery(field: Any[], search: Any[]): Boolean {}\n```\n\n----------------------------------------\n\nTITLE: Creating User Record with Auth0 ID\nDESCRIPTION: React component using Auth0 React SDK to create a user record with the Auth0 user ID.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/auth0.md#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nconst Profile = () => {\n  const { user, isAuthenticated, isLoading } = useAuth0();\n\n  const createUser = useCallback(async (event: FormEvent<HTMLFormElement>) => {\n    const formData = new FormData(event.currentTarget);\n    const name = formData.get('name');\n\n    try {\n      // create a new user\n      await fetch('/api/create-user', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            id: user.sub,\n            name: name,\n          }),\n        });\n    } catch(error){...}\n\n  return <UserForm onSubmit={createUser}/>\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Database Index in ZModel\nDESCRIPTION: Defines an index in the database. Parameters include fields (list of field references) and map (optional database index name).\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_22\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @@index(_ fields: FieldReference[], map: String?)\n```\n\n----------------------------------------\n\nTITLE: Access Policies with auth() Function in ZenStack V2\nDESCRIPTION: Example of using the auth() function in access policies to check user roles, which now requires strict typing of the user context.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/upgrade.md#2025-04-10_snippet_10\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n  id Int @id\n  ...\n  @@allow('all', auth().role == ADMIN)\n}\n```\n\n----------------------------------------\n\nTITLE: Example REST API Queries with ZenStack Middleware\nDESCRIPTION: These examples demonstrate how to use the automatically generated RESTful API endpoints to query data with filtering and relationship inclusion. The endpoints follow the JSON:API specification and enforce all access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/nest-api/index.md#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Fetch posts together with their authors\nGET /api/zen/post?include=author\n\n# Fetch the author of Post#1\nGET /api/zen/post/1/author\n\n# Fetch posts with title containing \"hello\"\nGET /api/zen/post?filter[title$contains]=hello\n```\n\n----------------------------------------\n\nTITLE: Declaring the Zod Plugin in ZModel\nDESCRIPTION: Example of how to declare the @core/zod plugin in a ZModel schema file to enable Zod schema generation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/zod.md#2025-04-10_snippet_8\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin zod {\n  provider = '@core/zod'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Password Field to User Model\nDESCRIPTION: Code example showing how to add a password field to an existing User model with the @password attribute for automatic hashing.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/6-other-enhancements.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    ...\n    password String? @password\n}\n```\n\n----------------------------------------\n\nTITLE: Default Attribute Positional Arguments\nDESCRIPTION: Example of using positional arguments with the @default attribute\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_10\n\nLANGUAGE: zmodel\nCODE:\n```\npublished Boolean @default(false)\n```\n\n----------------------------------------\n\nTITLE: Configuring SWR Context Provider\nDESCRIPTION: Example of setting up the ZenStack hooks provider with custom fetch configuration\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/swr.mdx#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FetchFn, Provider as ZenStackHooksProvider } from '../lib/hooks';\n\n// custom fetch function that adds a custom header\nconst myFetch: FetchFn = (url, options) => {\n    options = options ?? {};\n    options.headers = {\n        ...options.headers,\n        'x-my-custom-header': 'hello world',\n    };\n    return fetch(url, options);\n};\n\nfunction MyApp({ Component, pageProps: { session, ...pageProps } }: AppProps) {\n    return (\n        <ZenStackHooksProvider value={{ endpoint: '/api/model', fetch: myFetch }}>\n            <AppContent />\n        </ZenStackHooksProvider>\n    );\n}\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Supabase RLS Create Policy for List Entity\nDESCRIPTION: RLS policy that controls creation of List entities, ensuring the owner is the current user and that the user is a member of the specified space.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/supabase-alternative/index.md#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"list_create\"\non \"public\".\"List\"\nto public\nwith check (\n  ((auth.uid() = (\"ownerId\")::uuid) AND (EXISTS ( SELECT 1\n   FROM \"SpaceUser\"\n  WHERE ((\"SpaceUser\".\"spaceId\" = \"List\".\"spaceId\") AND ((\"SpaceUser\".\"userId\")::uuid = auth.uid())))))\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Enum in ZModel\nDESCRIPTION: Demonstrates how to define an enum in ZModel, which can be used to express concepts like user roles or product categories.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nenum UserRole {\n    USER\n    ADMIN\n}\n```\n\n----------------------------------------\n\nTITLE: Svelte Posts Component Implementation\nDESCRIPTION: Implements a Svelte component with ZenStack hooks for post management. Shows reactive data fetching and mutation handling with TypeScript integration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n    import { useFindManyPost, useCreatePost } from '../lib/hooks';\n\n    export let userId: string;\n\n    // list all posts that're visible to the current user, together with their authors\n    const query = useFindManyPost({\n        include: { author: true },\n        orderBy: { createdAt: 'desc' },\n    });\n\n    const create = useCreatePost();\n\n    function onCreatePost() {\n        $create.mutate({\n            data: {\n                title: 'My awesome post',\n                authorId: userId,\n            },\n        });\n    }\n</script>\n\n<div>\n    <button on:click={onCreatePost}>Create</button>\n    <ul>\n        {#each $query.data as post (post.id)}\n            <li>{post.title} by {post.author.email}</li>\n        {/each}\n    </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Conditional bcryptjs Hashing Function Based on Runtime Environment\nDESCRIPTION: TypeScript code that detects if running on Vercel Edge Runtime and switches between synchronous and asynchronous hashing functions to handle API limitations in different environments.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/adapt-to-edge/index.md#2025-04-10_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst hashFunc = typeof EdgeRuntime === 'string' \n    ? require('bcryptjs').hashSync \n    : require('bcryptjs').hash;\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Isolation Level with PrismaClient in ZenStack\nDESCRIPTION: This code demonstrates how to set the minimum required transaction isolation level (Repeatable Read) when creating a PrismaClient instance. This setting is necessary to ensure access policies are properly enforced in ZenStack.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/limitations.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient({\n  transactionOptions: {\n    isolationLevel: Prisma.TransactionIsolationLevel.RepeatableRead,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ZenStack Initialization Component in JSX\nDESCRIPTION: This snippet imports a ZenStackInit component from a markdown file and renders it within a tip container. The component likely contains instructions or guidelines for initializing ZenStack in a project.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/_components/_zenstack-init-tips.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ZenStackInit from './_zenstack-init.md'\n\n:::tip\n\n<ZenStackInit />\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Failed Creation Attempt Due to Missing Policy\nDESCRIPTION: JavaScript example demonstrating how the enhanced Prisma Client blocks creation of a new user when there is no appropriate 'create' policy defined.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.1-model-level.md#2025-04-10_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ndb.user.create({ data: { email: 'ross@zenstack.dev', name: 'Ross' } });\n```\n\n----------------------------------------\n\nTITLE: POST Request Example for RPC API\nDESCRIPTION: This snippet shows a POST request to the RPC API endpoint for creating a post. It demonstrates how the query body is passed as JSON in the request body.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rpc.mdx#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nPOST /api/post/create\n{ \"data\": { \"title\": \"Hello World\" } }\n```\n\n----------------------------------------\n\nTITLE: Querying Prisma Data with JSON-serializable fields using curl\nDESCRIPTION: Example of making an RPC request to find the first List with only JSON-serializable fields (id and title). The response is simple JSON without additional serialization metadata.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/3-serialization.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/api/rpc/list/findFirst?q=%7B%22select%22%3A%7B%22id%22%3Atrue%2C%22title%22%3Atrue%7D%7D\" -H \"x-user-id: 1\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Optimistic Update in SWR Mutation Hook\nDESCRIPTION: Example of using the optimisticUpdate option in a ZenStack-generated SWR mutation hook to enable automatic optimistic updates.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/swr.mdx#2025-04-10_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst { trigger: create } = useCreatePost({ optimisticUpdate: true });\n\nfunction onCreatePost() {\n    create({ ... })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Express Middleware for ZenStack API Customization\nDESCRIPTION: Example showing how to use Express middleware to customize ZenStack API responses by adding custom headers. Uses ZenStackMiddleware with getPrisma configuration and response interception.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/4-customization.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.use('/api/rpc', \n    ZenStackMiddleware({\n        getPrisma: (req) => enhance(prisma, { user: getUser(req) }),\n        // instructs the middleware to not send the response,\n        // instead, store it in `res.locals`\n        sendResponse: false,\n    }),\n    (req: Request, res: Response) => {\n        // another middleware to intercept the CRUD response,\n        // add a header and send the response\n        const { status, body } = res.locals;\n        res.header('x-requested-by', req.headers['x-user-id']);\n        res.status(status).json(body);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Optimistic Update in SWR Mutation Hook\nDESCRIPTION: Example of using the optimisticUpdate option in a ZenStack-generated SWR mutation hook to enable automatic optimistic updates.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/swr.mdx#2025-04-10_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst { trigger: create } = useCreatePost({ optimisticUpdate: true });\n\nfunction onCreatePost() {\n    create({ ... })\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Security Rules for Post Access Control\nDESCRIPTION: Demonstrates Firebase's DSL for implementing access control rules, allowing public read access and restricting write access to authenticated post owners only.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/supabase-alternative/index.md#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /posts/{postId} {\n      allow read: if true;\n      allow write: if request.auth != null && request.auth.uid == resource.data.authorId;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Enum in ZModel\nDESCRIPTION: Demonstrates how to define an enum in ZModel for grouping constant identifiers, such as user roles.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nenum UserRole {\n    USER\n    ADMIN\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Server Component in Next.js\nDESCRIPTION: This example shows how to create a React Server Component using Next.js app router. It demonstrates server-side only execution and accessing environment variables.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/no-api/index.md#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport function ServerComponent() {\n    console.log('This will only be printed on the server');\n    return (\n        <div>\n            <h1>Server Component</h1>\n            <p>My secret key: {process.env.MY_SECRET_ENV}</p>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Hook Form Zod Resolver\nDESCRIPTION: Command to install the @hookform/resolvers package which allows React Hook Form to use Zod schemas for validation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/form-validation/index.md#2025-04-10_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nnpm i @hookform/resolvers\n```\n\n----------------------------------------\n\nTITLE: Defining Relation Attribute with Multiple Parameters in ZModel\nDESCRIPTION: Illustrates the declaration of a relation attribute with various parameters including FieldReference arrays and ReferentialAction enums.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_15\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @relation(\n    _ name: String?,\n    fields: FieldReference[]?,\n    references: FieldReference[]?,\n    onDelete: ReferentialAction?,\n    onUpdate: ReferentialAction?,\n    map: String?)\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Context Provider for Tanstack Query Hooks\nDESCRIPTION: Example of setting up a context provider in Svelte to control the behavior of generated hooks, including custom endpoint and fetch function.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n    import { QueryClient, QueryClientProvider } from '@tanstack/svelte-query';\n    import { setHooksContext } from '$lib/hooks';\n    import type { FetchFn } from '@zenstackhq/tanstack-query/runtime';\n\n    // custom fetch function that adds a custom header\n    const myFetch: FetchFn = (url, options) => {\n        options = options ?? {};\n        options.headers = {\n            ...options.headers,\n            'x-my-custom-header': 'hello world',\n        };\n        return fetch(url, options);\n    };\n\n    setHooksContext({\n        endpoint: '/api/model',\n        fetch: myFetch,\n    });\n\n    const queryClient = new QueryClient();\n</script>\n\n<div>\n    <QueryClientProvider client={queryClient}>\n        <slot />\n    </QueryClientProvider>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Complex Relation Filtering with Soft Delete in Prisma\nDESCRIPTION: A complex Prisma query example that demonstrates the difficulty in implementing soft delete for queries with advanced relation filters.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/soft-delete.mdx#2025-04-10_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst user = await prisma.user.findMany({\n    where: {\n        posts: {\n            every: {\n                title: { contains: 'Prisma' },\n            },\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Model-level OpenAPI Metadata with REST Flavor\nDESCRIPTION: Example of applying the @@openapi.meta attribute to a User model with REST flavor, focused on security and tag descriptions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/openapi.mdx#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id\n    email String @unique\n\n    @@openapi.meta({\n        security: [ { basic: [] } ],\n        tagDescription: 'Operations for managing users',\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Connection Utility for SvelteKit\nDESCRIPTION: TypeScript module that exports a Prisma client instance for database operations in the SvelteKit application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/sveltekit.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nexport const prisma = new PrismaClient();\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Context Provider for Tanstack Query Hooks\nDESCRIPTION: Example of setting up a context provider in Svelte to control the behavior of generated hooks, including custom endpoint and fetch function.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n    import { QueryClient, QueryClientProvider } from '@tanstack/svelte-query';\n    import { setHooksContext } from '$lib/hooks';\n    import type { FetchFn } from '@zenstackhq/tanstack-query/runtime';\n\n    // custom fetch function that adds a custom header\n    const myFetch: FetchFn = (url, options) => {\n        options = options ?? {};\n        options.headers = {\n            ...options.headers,\n            'x-my-custom-header': 'hello world',\n        };\n        return fetch(url, options);\n    };\n\n    setHooksContext({\n        endpoint: '/api/model',\n        fetch: myFetch,\n    });\n\n    const queryClient = new QueryClient();\n</script>\n\n<div>\n    <QueryClientProvider client={queryClient}>\n        <slot />\n    </QueryClientProvider>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database in ZenStack\nDESCRIPTION: Updates the datasource configuration to use PostgreSQL instead of SQLite to support enum types like SpaceUserRole.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\ndatasource db {\n    provider = 'postgresql'\n    url = env('DATABASE_URL')\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying User Model in ZenStack Schema\nDESCRIPTION: Diff showing modifications to the User model in the schema.zmodel file, adding a name field and making user profiles publicly readable.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nuxt.mdx#2025-04-10_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nmodel User {\n    id String @id @default(cuid())\n    email String @unique @email\n+   name String?\n    password String @password @omit @length(8, 16)\n    posts Post[]\n\n    // everybody can signup\n    @@allow('create', true)\n\n+   // user profiles are public\n+   @@allow('read', true)\n\n    // full access by self\n    @@allow('all', auth() == this)\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Formula with Additional Constraints in Mermaid\nDESCRIPTION: Flowchart showing how additional constraints are combined with the original policy formula when checking permissions with the where parameter, illustrating the combined Boolean formula.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/check-permission.md#2025-04-10_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  OR((OR)) --> A[\"[published] == true\"]\n  OR((OR)) --> B[\"[authorId] == context.user.id\"]\n  AND((AND)) --> C[\"[published] == false\"]\n  AND((AND)) --> OR\n  style C stroke-dasharray: 5, 5\n```\n\n----------------------------------------\n\nTITLE: Basic ZenStack Plugin Structure in TypeScript\nDESCRIPTION: Demonstrates the minimum required structure for a ZenStack plugin, including required exports and function signature.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part2/3-writing-plugins.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PluginOptions } from '@zenstackhq/sdk';\nimport type { DMMF } from '@zenstackhq/sdk/prisma';\nimport type { Model } from '@zenstackhq/sdk/ast';\n\nexport const name = 'My Plugin';\n\nexport default async function run(model: Model, options: PluginOptions, dmmf: DMMF.Document) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Plugin in ZModel Schema\nDESCRIPTION: Add the OpenAPI plugin configuration to the ZModel schema file to generate the API specification.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/5-documentation.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin openapi {\n    provider = \"@zenstackhq/openapi\"\n    output = \"todo-api.json\"\n    title = \"My Todo API\"\n    version = \"1.0.0\"\n    flavor = \"rpc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ZenStack Plugin Structure in TypeScript\nDESCRIPTION: Demonstrates the minimum required structure for a ZenStack plugin, including required exports and function signature.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part2/3-writing-plugins.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PluginOptions } from '@zenstackhq/sdk';\nimport type { DMMF } from '@zenstackhq/sdk/prisma';\nimport type { Model } from '@zenstackhq/sdk/ast';\n\nexport const name = 'My Plugin';\n\nexport default async function run(model: Model, options: PluginOptions, dmmf: DMMF.Document) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Enhanced PrismaClient with Supabase Auth Context\nDESCRIPTION: TypeScript function that creates an enhanced Prisma client with user context from Supabase Auth. This allows ZenStack's access policies to work with the authenticated user's identity from Supabase.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/authentication/supabase.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';\nimport { prisma } from '@lib/db';\n\n// create a wrapper of Prisma client that enforces access policy,\n// data validation, and @password, @omit behaviors\nasync function getPrisma() {\n    const supabase = createRouteHandlerClient({ cookies });\n    const { data: user } = await supabase.auth.getUser();\n    const uid = user.user?.id;\n    // TODO: if you need to access fields other than just \"id\" in access policies, \n    // you can do a database query here to fetch the full user record\n    const contextUser = uid ? { id: uid } : undefined;\n    return enhance(prisma, { user: contextUser });\n}\n```\n\n----------------------------------------\n\nTITLE: Using @prisma.passthrough in ZModel\nDESCRIPTION: Demonstrates how to use the @prisma.passthrough attribute to pass arbitrary text to the generated Prisma schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_17\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id @default(autoincrement())\n    name String @prisma.passthrough(\"@unique\")\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Predicate (Any) in ZModel\nDESCRIPTION: Demonstrates the 'Any' collection predicate syntax to check if any element in a collection matches a condition. Used for building policy rules for 'to-many' relations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_54\n\nLANGUAGE: zmodel\nCODE:\n```\n@@allow('read', members?[user == auth()])\n```\n\n----------------------------------------\n\nTITLE: Configuring ZenStack Hooks Plugin\nDESCRIPTION: ZModel configuration for generating TanStack Query hooks using the ZenStack plugin.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/2-generate-hooks.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin hooks {\n  provider = '@zenstackhq/tanstack-query'\n  target = 'react'\n  output = 'src/lib/hooks'\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying User Model in ZenStack Schema\nDESCRIPTION: Diff showing modifications to the User model in the schema.zmodel file, adding a name field and making user profiles publicly readable.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nuxt.mdx#2025-04-10_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nmodel User {\n    id String @id @default(cuid())\n    email String @unique @email\n+   name String?\n    password String @password @omit @length(8, 16)\n    posts Post[]\n\n    // everybody can signup\n    @@allow('create', true)\n\n+   // user profiles are public\n+   @@allow('read', true)\n\n    // full access by self\n    @@allow('all', auth() == this)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up TanStack Query Provider Component in React\nDESCRIPTION: Creates a QueryClientProvider component that will wrap the application to provide the TanStack Query context. This component initializes a QueryClient instance and makes it available to all child components.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/2-generate-hooks.md#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst queryClient = new QueryClient();\n\nfunction Provider({ children }: Props) {\n  return <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>;\n}\n\nexport default Provider;\n```\n\n----------------------------------------\n\nTITLE: Extending App Type Definitions for Authentication in SvelteKit\nDESCRIPTION: TypeScript definition file extending the global App namespace to include user and database client in the request context, enabling typed access to authenticated user information throughout the application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/sveltekit.mdx#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PrismaClient, User } from '@prisma/client';\n\ndeclare global {\n    namespace App {\n        interface Locals {\n            user?: User;\n            db: PrismaClient;\n        }\n    }\n}\n\nexport {};\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack in Project\nDESCRIPTION: Command to initialize ZenStack in the project, which installs dependencies and copies Prisma schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init\n```\n\n----------------------------------------\n\nTITLE: Defining Compound Unique Constraint in ZModel\nDESCRIPTION: Defines a compound unique constraint for specified fields in a model. Parameters include fields (list of field references), name (optional constraint name), and map (optional database constraint name).\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_20\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @@unique(_ fields: FieldReference[], name: String?, map: String?)\n```\n\n----------------------------------------\n\nTITLE: Customizing Query Behavior with Prisma Client Extensions\nDESCRIPTION: Demonstrates how to modify query behavior by intercepting and modifying the query arguments. This example adds an age filter to all User queries, ensuring only users older than 18 are returned.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-client-extensions/index.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst xprisma = prisma.$extends({\n    query: {\n        user: {\n            async findMany({ model, operation, args, query }) {\n                // inject an extra \"age\" filter\n                args.where = { age: { gt: 18 }, ...args.where };\n                return query(args);\n            },\n        },\n    },\n});\n\nawait xprisma.user.findMany(); // returns users whose age is greater than 18\n```\n\n----------------------------------------\n\nTITLE: Configuring ZenStack Runtime with Custom Load Path\nDESCRIPTION: Code snippet showing how to configure the ZenStack enhance function to load pre-generated modules from a custom directory path.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/deploy.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user }, { loadPath: './zenstack' })\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Related Posts in Prisma\nDESCRIPTION: Example Prisma query that shows the limitation of the soft delete middleware when filtering by related entities.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/soft-delete.mdx#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst us1 = await prisma.user.findMany({\n    where: {\n        posts: {\n            some: {\n                title: { contains: 'Prisma' },\n            },\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Generator Plugin Helper Functions\nDESCRIPTION: Implementation of helper functions for generating markdown documentation from data models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part2/3-writing-plugins.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZModelCodeGenerator, getLiteral } from '@zenstackhq/sdk';\nimport { type DataModelAttribute } from '@zenstackhq/sdk/ast';\n\nfunction generateDataModelDocs(dataModels: DataModel[]) {\n    // AST -> ZModel source generator\n    const zmodelCodeGen = new ZModelCodeGenerator();\n\n    // all CRUD operations\n    const CRUD = ['create', 'read', 'update', 'delete'];\n\n    const docs = dataModels.map((dataModel) => {\n        // first, group model attributes by CRUD operations\n        const groupByCrud = dataModel.attributes\n            .filter((attr) =>\n                ['@@allow', '@@deny'].includes(attr.decl.ref?.name || '')\n            )\n            .reduce<Record<string, DataModelAttribute[]>>((group, attr) => {\n                const ops = getLiteral<string>(attr.args[0].value);\n                if (ops) {\n                    const splitOps =\n                        ops == 'all'\n                            ? CRUD\n                            : ops.split(',').map((op) => op.trim());\n\n                    splitOps.forEach((op) => {\n                        group[op] = group[op] || [];\n                        group[op].push(attr);\n                    });\n                }\n\n                return group;\n            }, {});\n\n        // then generate rules for each operation\n        const policies = CRUD.map((op) => {\n            const rules = groupByCrud[op]\n                ? groupByCrud[op]\n                      // output `@@deny` before `@@allow`\n                      .sort((a) => {\n                          return a.decl.ref?.name == '@@deny' ? -1 : 1;\n                      })\n                      .map(\n                          (attr) =>\n                              `  - ${\n                                  attr.decl.ref?.name == '@@deny'\n                                      ? '❌ '\n                                      : '✅ '\n                              }${zmodelCodeGen.generate(attr.args[1].value)}`\n                      )\n                      .join('\\n')\n                : [];\n\n            return [`- ${op.toUpperCase()}`, rules].join('\\n');\n        }).join('\\n');\n\n        return `## ${dataModel.name}\\n\\n${policies}`;\n    });\n\n    return docs.join('\\n\\n');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZenStack Runtime with Custom Load Path\nDESCRIPTION: Code snippet showing how to configure the ZenStack enhance function to load pre-generated modules from a custom directory path.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/deploy.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user }, { loadPath: './zenstack' })\n```\n\n----------------------------------------\n\nTITLE: Model Attribute Basic Syntax\nDESCRIPTION: Shows the syntax for model-level attributes in ZenStack\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_8\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Model {\n    @@[ATTR_NAME](ARGS)?\n}\n```\n\n----------------------------------------\n\nTITLE: Extending App Type Definitions for Authentication in SvelteKit\nDESCRIPTION: TypeScript definition file extending the global App namespace to include user and database client in the request context, enabling typed access to authenticated user information throughout the application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/sveltekit.mdx#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PrismaClient, User } from '@prisma/client';\n\ndeclare global {\n    namespace App {\n        interface Locals {\n            user?: User;\n            db: PrismaClient;\n        }\n    }\n}\n\nexport {};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Generated Object\nDESCRIPTION: Shows the TypeScript interface for the object returned by the generateObject function, illustrating the type-safe structure that developers can work with.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/code-as-doc/index.md#2025-04-10_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst object: {\n    overview: {\n        description: string;\n        functionality: string;\n    };\n    models: {\n        name: string;\n        access_control_policies: string[];\n    }[];\n}\n```\n\n----------------------------------------\n\nTITLE: Using ZenStack-Generated tRPC Router in TypeScript\nDESCRIPTION: Shows how to use a ZenStack-generated tRPC router with enhanced type inference. This example demonstrates querying Todos with complex selections and conditions, providing a Prisma-like experience in tRPC.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/typesafe-query/index.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst todos = await caller.todo.findMany({\n    select: {\n        id: true,\n        title: true,\n        owner: {\n            select: {\n                id: true,\n                name: true\n            }\n        }\n    },\n    where: {\n        title: {\n            contains: 'important'\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating QueryClientProvider in Next.js Root Layout\nDESCRIPTION: Updates the Next.js root layout component to include the QueryClientProvider, ensuring all components in the application have access to the TanStack Query hooks.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/2-generate-hooks.md#2025-04-10_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport QueryClientProvider from '~/components/QueryClientProvider';\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body className={`font-sans ${inter.variable}`}>\n        <QueryClientProvider>\n          <NextAuthSessionProvider>{children}</NextAuthSessionProvider>\n        </QueryClientProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Access Policy to ToDo Model in ZenStack\nDESCRIPTION: Example of extending permissions for the ToDo model by allowing group members to update shared items.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-backend/index.md#2025-04-10_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n@@allow('update', groups?[users?[id == auth().id]] )\n```\n\n----------------------------------------\n\nTITLE: Updating Homepage to Display Current User in NextJS\nDESCRIPTION: This code snippet updates the homepage component to display the current user's email using NextAuth's useSession hook. It provides a simple welcome message when a user is logged in.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/3-auth-ui.md#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useSession } from \"next-auth/react\";\n\nexport default function Home() {\n  const { data: session } = useSession();\n  return (\n    <div className=\"flex h-screen w-screen items-center justify-center\">\n      {session?.user && <h1>Welcome {session?.user?.email}</h1>}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying ZenStack Schema in package.json\nDESCRIPTION: Configuration example showing how to specify the ZModel schema location in the package.json file of a project.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/cli.md#2025-04-10_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"zenstack\": {\n    \"schema\": \"./db/schema.zmodel\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Password Attribute with Int and String Parameters in ZModel\nDESCRIPTION: Demonstrates the declaration of a password attribute with optional Int and String parameters for salt length and salt value.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_7\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @password(saltLength: Int?, salt: String?)\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Result Size with Prisma Client Extensions\nDESCRIPTION: Implements a safety guard that limits the number of records returned by findMany operations. This prevents accidental retrieval of large datasets by setting a default maximum of 100 rows when no limit is specified.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-client-extensions/index.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst MAX_ROWS = 100;\nconst xprisma = prisma.$extends({\n    name: 'max-rows',\n    query: {\n        $allModels: {\n            async findMany({ args, query }) {\n                return query({ ...args, take: args.take || MAX_ROWS });\n            },\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Policy Violation Error Message\nDESCRIPTION: The error message returned when attempting to create a user without having the proper 'create' policy in place, showing how ZenStack enforces access control.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.1-model-level.md#2025-04-10_snippet_6\n\nLANGUAGE: js\nCODE:\n```\ndenied by policy: user entities failed 'create' check\nCode: P2004\nMeta: { reason: 'ACCESS_POLICY_VIOLATION' }\n```\n\n----------------------------------------\n\nTITLE: Installing Authentication Dependencies for JWT Implementation\nDESCRIPTION: Command to install necessary dependencies for implementing JWT authentication, including bcryptjs for password hashing, jsonwebtoken for token generation, and dotenv for environment variable management.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install bcryptjs jsonwebtoken dotenv\nnpm install -D @types/jsonwebtoken\n```\n\n----------------------------------------\n\nTITLE: ZenStack Hooks Plugin Configuration\nDESCRIPTION: Configuration for generating React hooks using ZenStack's tanstack-query provider\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs.mdx#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin hooks {\n  provider = '@zenstackhq/tanstack-query'\n  target = 'react'\n  version = 'v5'\n  output = \"./src/lib/hooks\"\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing To-One Relationship Example in JSON:API\nDESCRIPTION: An example of how to replace a to-one relationship using a PUT request. This sets the author of a post to a specific user.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_15\n\nLANGUAGE: json\nCODE:\n```\nPUT /post/1/relationships/author\n{\n    \"data\": { \"type\": \"user\", \"id\": \"2\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack Project\nDESCRIPTION: Command to initialize the project for ZenStack, which installs dependencies and copies the Prisma schema to a ZModel file.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/refine-dev-backend/index.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init\n```\n\n----------------------------------------\n\nTITLE: Using Attribute Functions for Default Values in ZModel\nDESCRIPTION: Demonstrates the use of attribute functions like autoincrement() and now() to provide default values for fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_19\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Model {\n    ...\n    serial Int @default(autoincrement())\n    createdAt DateTime @default(now())\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing To-One Relationship Example in JSON:API\nDESCRIPTION: An example of how to replace a to-one relationship using a PUT request. This sets the author of a post to a specific user.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_15\n\nLANGUAGE: json\nCODE:\n```\nPUT /post/1/relationships/author\n{\n    \"data\": { \"type\": \"user\", \"id\": \"2\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Middleware for Endpoint Control\nDESCRIPTION: Uses Next.js middleware to control access to specific endpoints. This example prevents listing all User entities by rejecting GET requests to the user collection endpoint.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/next.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type NextRequest, NextResponse } from 'next/server';\n\nexport function middleware(request: NextRequest) {\n    const url = new URL(request.url);\n    if (\n        request.method === 'GET' &&\n        url.pathname.match(/^\\/api\\/model\\/user\\/?$/)\n    ) {\n        return NextResponse.json({ error: 'Not allowed' }, { status: 405 });\n    }\n}\n\nexport const config = {\n    matcher: '/api/model/:path*',\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack Project from Existing Prisma Project\nDESCRIPTION: Use the ZenStack CLI to convert an existing Prisma project. This command copies the Prisma schema to a ZModel file and installs necessary NPM packages.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/existing-prisma.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@1 init\n```\n\n----------------------------------------\n\nTITLE: Adding Regex Pattern Validation for Space Slugs\nDESCRIPTION: Implementing regex validation to ensure Space slugs follow a specific pattern of 4-16 alphanumeric characters.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/5-data-validation.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Space {\n     ...\n     slug String @unique @regex('^[0-9a-zA-Z]{4,16}$')\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Enhanced Prisma Client with ZenStack\nDESCRIPTION: Helper function to create an access-policy-aware Prisma client instance using ZenStack enhancement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/cal-com-clone.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\n\nexport function getEnhancedPrisma(userId: string) {\n    // enhance configures a regular Prisma client for access policy checks\n    return enhance(prisma, { user: { id: userId } });\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Schema and Pushing to Database\nDESCRIPTION: Commands to generate the Prisma schema from ZModel and push the schema to the database. These steps are necessary after defining or updating the database schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/clerk-multitenancy/index.mdx#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# The `zenstack generate` command generates the \"prisma/schema.prisma\" file and runs \"prisma generate\"\nnpx zenstack generate\nnpx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimistic Update for Todo Creation with ZenStack\nDESCRIPTION: Code snippet showing how to enable automatic optimistic updates for Todo creation in ZenStack. The three arguments specify mutation options, auto-invalidation (default true), and auto optimistic-update (default false, explicitly set to true here).\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/5-optimistic-update.md#2025-04-10_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// the three arguments are: \n//     - mutation options\n//     - auto invalidate (default true)\n//     - auto optimistic-update (default false)\nconst { mutate: create } = useCreateTodo(undefined, true, true);\n```\n\n----------------------------------------\n\nTITLE: Example: Count Query Hook\nDESCRIPTION: Example of using generated hooks for counting records with filtering.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/2-generate-hooks.md#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst { data } = useCountTodo({ where: { owner: { id: 1 } } });\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimistic Update for Todo Creation with ZenStack\nDESCRIPTION: Code snippet showing how to enable automatic optimistic updates for Todo creation in ZenStack. The three arguments specify mutation options, auto-invalidation (default true), and auto optimistic-update (default false, explicitly set to true here).\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/5-optimistic-update.md#2025-04-10_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// the three arguments are: \n//     - mutation options\n//     - auto invalidate (default true)\n//     - auto optimistic-update (default false)\nconst { mutate: create } = useCreateTodo(undefined, true, true);\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma and NextAuth Dependencies\nDESCRIPTION: Commands to install Prisma and NextAuth dependencies for the project. Prisma is used as the ORM, and NextAuth (Auth.js) is used for authentication.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/refine-dev-backend/index.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev prisma\nnpm install @prisma/client next-auth@beta\n```\n\n----------------------------------------\n\nTITLE: Creating Todo List as User#2\nDESCRIPTION: REPL command and response showing how to create a Todo List as User#2 (Rachel).\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ndb.list.create({ data: { title: 'Grocery', owner: { connect: { email: 'rachel@zenstack.dev' } }, space: { connect: { slug: 'central-perk' } } } })\n```\n\n----------------------------------------\n\nTITLE: Creating Post Server Model Functions in TypeScript\nDESCRIPTION: Server-side function implementation for creating new blog posts with user association using enhanced Prisma client.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/remix-run.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Post } from '@prisma/client';\n\nexport function createPost({ body, title, userId }: Post & { userId: User['id'] }) {\n    return getEnhancedPrisma(userId).post.create({\n        data: {\n            title,\n            body,\n            user: {\n                connect: {\n                    id: userId,\n                },\n            },\n        },\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Page with Server Actions in Next.js\nDESCRIPTION: Creating a signup page component using Next.js Server Actions for form handling, including input validation with Zod and user creation using Prisma.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/next-rsc-blog/index.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hashSync } from \"bcryptjs\";\nimport type { NextPage } from \"next\";\nimport Link from \"next/link\";\nimport { redirect } from \"next/navigation\";\nimport { z } from \"zod\";\nimport { db } from \"~/server/db\";\n\nconst signupSchema = z.object({\n  email: z.string().email(),\n  password: z.string(),\n});\n\nconst Signup: NextPage = () => {\n  async function signup(formData: FormData) {\n    \"use server\";\n\n    const parsed = signupSchema.parse(Object.fromEntries(formData));\n\n    try {\n      const user = await db.user.create({\n        data: {\n          email: parsed.email,\n          password: hashSync(parsed.password),\n        },\n      });\n      console.log(\"User created:\", user);\n    } catch (err: any) {\n      console.error(err);\n      if (err.info?.prisma && err.info?.code === \"P2002\") {\n        return { message: \"User already exists\" };\n      } else {\n        return { message: \"An unknown error occurred\" };\n      }\n    }\n\n    redirect(\"/\");\n  }\n\n  return (\n    <div>\n      <h1>Sign up</h1>\n      <form action={signup}>\n        <div>\n          <label htmlFor=\"email\">\n            Email\n          </label>\n          <input name=\"email\" type=\"email\" />\n        </div>\n        <div>\n          <label htmlFor=\"password\">\n            Password\n          </label>\n          <input name=\"password\" type=\"password\" />\n        </div>\n        <input type=\"submit\" value=\"Create account\" />\n      </form>\n    </div>\n  );\n};\n\nexport default Signup;\n```\n\n----------------------------------------\n\nTITLE: Querying List with JSON-serializable fields using curl\nDESCRIPTION: This curl command demonstrates a request to find the first List with only id and title fields selected. The response is fully JSON-serializable and doesn't require additional serialization metadata.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/3-serialization.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/api/rpc/list/findFirst?q=%7B%22select%22%3A%7B%22id%22%3Atrue%2C%22title%22%3Atrue%7D%7D\" -H \"x-user-id: 1\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Next.js API Endpoint Handler with Enhanced Prisma Client\nDESCRIPTION: Implementation of a Next.js API endpoint that uses an enhanced Prisma client to enforce access policies\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/prisma-zenstack.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst prisma = new PrismaClient();\n\nexport default requestHandler({\n    getPrisma: async (req, res) => {\n        const user = await getSessionUser(req, res);\n        return enhance(prisma, { user });\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Supabase API Exposure with cURL\nDESCRIPTION: This bash snippet demonstrates how to test if your Supabase database is exposed to direct API requests using cURL. It includes a template and an example with placeholder values for the Supabase project URL and anonymous key.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/supabase-security.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl '{SUPABASE_PROJECT_URL}/rest/v1/{DATABASE_TABLE}?select=*' \\\n-H \"apikey: SUPABASE_ANON_KEY\" \\\n-H \"Authorization: Bearer SUPABASE_ANON_KEY\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://jypbzsozorjnogibmfhu.supabase.co/rest/v1/User?select=*' \\\n-H \"apikey: eyOiJIUzJhbGciI1...\" \\\n-H \"Authorization: Bearer eyOiJIUzJhbGciI1...\"\n```\n\n----------------------------------------\n\nTITLE: Type-Checked JSON Field Creation\nDESCRIPTION: Shows how ZenStack provides type checking for JSON fields during creation operations, catching type errors at compile time.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/json-typing/index.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.image.create({\n  data: {\n    metadata: {\n      width: 1920,\n      height: '1080', // <- type error here\n      format: 'jpeg'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Referential Actions in User-Profile Relation\nDESCRIPTION: Example showing how to use onUpdate and onDelete referential actions in a one-to-one relationship between User and Profile models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_51\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id String @id\n    profile Profile?\n}\n\nmodel Profile {\n    id String @id\n    user @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)\n    userId String @unique\n}\n```\n\n----------------------------------------\n\nTITLE: Database-generated Default Values in ZModel\nDESCRIPTION: Represents default values that cannot be expressed in the Prisma schema (such as random()). Takes a string expression as a parameter.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_33\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction dbgenerated(expr: String): Any {}\n```\n\n----------------------------------------\n\nTITLE: Creating Post Server Model Functions in TypeScript\nDESCRIPTION: Server-side function implementation for creating new blog posts with user association using enhanced Prisma client.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/remix-run.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Post } from '@prisma/client';\n\nexport function createPost({ body, title, userId }: Post & { userId: User['id'] }) {\n    return getEnhancedPrisma(userId).post.create({\n        data: {\n            title,\n            body,\n            user: {\n                connect: {\n                    id: userId,\n                },\n            },\n        },\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fine-grained Optimistic Updates in ZenStack V2\nDESCRIPTION: Example of using the new optimisticUpdateProvider callback to provide custom optimistic update logic for mutations in ZenStack V2.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/upgrade.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nuseCreatePost({\n  optimisticUpdateProvider: ({ queryModel, queryOperation, queryArgs, currentData, mutationArgs }) => {\n    return { kind: 'Update', data: ... /* computed result */ };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Users with PostgREST Query Parameters\nDESCRIPTION: Example demonstrating how to filter users by multiple criteria using PostgREST's query syntax, including the use of comparison operators like 'gte' (greater than or equal) and 'is' for boolean values.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/postgrest.mdx#2025-04-10_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Get all paid users who're at least 18-year-old\nGET /user?age=gte.18&paid=is.true\n```\n\n----------------------------------------\n\nTITLE: REPL Commands for User#2 Authentication\nDESCRIPTION: REPL commands demonstrating how to switch to user#2 and perform a query.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n.auth { id: 2 }\ndb.user.findMany();\n```\n\n----------------------------------------\n\nTITLE: Installing Utility Packages\nDESCRIPTION: Command to install the nanoid package for generating unique IDs.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nanoid\n```\n\n----------------------------------------\n\nTITLE: Paginating Resources in ZenStack RESTful API\nDESCRIPTION: Demonstrates how to use pagination parameters to fetch specific pages of resources or relationships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/post?page[offset]=10&page[limit]=5\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/user/1/relationships/posts?page[offset]=10&page[limit]=5\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/user/1/posts?page[offset]=10&page[limit]=5\n```\n\n----------------------------------------\n\nTITLE: REPL Commands for Testing User Authentication\nDESCRIPTION: REPL commands demonstrating how to set the current user and test user-based access control policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n.auth { id: 1 }\ndb.user.findMany();\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack CLI as dev dependency\nDESCRIPTION: Command to install the ZenStack CLI package as a development dependency in your project using npm.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/install.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev zenstack@1\n```\n\n----------------------------------------\n\nTITLE: JSON:API Response for Fetching a To-One Relationship\nDESCRIPTION: Example of a JSON:API-compliant response when fetching a to-one relationship (post to author). The response includes relationship data and links.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\" : { \"id\" : 1, \"type\" : \"user\" },\n    \"jsonapi\" : {\n        \"version\" : \"1.1\"\n    },\n    \"links\" : {\n        \"self\" : \"http://myhost/api/post/1/relationships/author\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Inheritance in ZenStack Abstract Models\nDESCRIPTION: Illustrates how to inherit from multiple abstract models in a single concrete model, allowing for composition of different sets of fields and attributes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/multiple-schema.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nabstract model Base1 { ... }\n\nabstract model Base2 { ... }\n\nmodel Post extends Base1, Base2 { ... }\n```\n\n----------------------------------------\n\nTITLE: Getting Current DateTime in ZModel\nDESCRIPTION: Gets the current date-time.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_31\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction now(): DateTime {}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZenStack Hooks Plugin in ZModel Schema\nDESCRIPTION: Adds the TanStack Query hooks plugin to the ZModel schema configuration. Specifies React as the target framework, TanStack Query v5 as the version, and sets the output directory for generated hooks.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/2-generate-hooks.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin hooks {\n  provider = '@zenstackhq/tanstack-query'\n  target = 'react'\n  version = 'v5'\n  output = 'src/lib/hooks'\n}\n```\n\n----------------------------------------\n\nTITLE: Using auth() in @default() for ZenStack V1 Schema\nDESCRIPTION: An example of ZenStack V1 schema showing User and Post models without using auth() in @default() attribute, requiring manual connection of owner when creating posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/upgrade.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id Int @default(autoincrement())\n}\n\nmodel Post {\n  id Int @default(autoincrement())\n  title String\n  owner User @relation(fields: [ownerId], references: [id])\n  ownerId Int\n}\n```\n\n----------------------------------------\n\nTITLE: Single Table Inheritance Entity Relationship Diagram\nDESCRIPTION: An ER diagram showing the Single Table Inheritance pattern with a single Asset table containing all fields from all concrete types, using a type discriminator to identify the concrete type of each record.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/polymorphism/index.md#2025-04-10_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    User {\n\t  }\n\t  Asset {\n        id Int PK\n\t\t    String title\n\t\t    createdAt Date\n        viewCount Int\n\t\t    type String\n\t\t    format String\n\t\t    data\n\t\t    duration\n\t\t    url\n\t\t    content\n\t\t    html\n\t\t    fields\n\t\t    ownerId Int FK\n\t  }\n\t  User ||--o{ Asset: owns\n```\n\n----------------------------------------\n\nTITLE: Installing the OpenAPI Plugin for ZenStack\nDESCRIPTION: Command to install the OpenAPI plugin as a development dependency in your ZenStack project using npm.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/openapi.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @zenstackhq/openapi\n```\n\n----------------------------------------\n\nTITLE: Field Attributes with DateTime\nDESCRIPTION: Example of using attribute functions with DateTime fields\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_13\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Model {\n    ...\n    serial Int @default(autoincrement())\n    createdAt DateTime @default(now())\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting Prisma Schema from Model-level @@prisma.passthrough\nDESCRIPTION: Shows the resulting Prisma schema after using the @@prisma.passthrough attribute at the model level in ZModel.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_20\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id @default(autoincrement())\n    name String\n    @@unique([name])\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the OpenAPI Plugin for ZenStack\nDESCRIPTION: Command to install the OpenAPI plugin as a development dependency in your ZenStack project using npm.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/openapi.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @zenstackhq/openapi\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Page in Next.js with ZenStack\nDESCRIPTION: A Next.js client component for user registration that uses ZenStack's generated hooks to create new users. It includes form handling, error management for duplicate users, and automatic session creation after signup.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/next-app-router.mdx#2025-04-10_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport type { NextPage } from \"next\";\nimport { signIn } from \"next-auth/react\";\nimport { useRouter } from \"next/navigation\";\nimport { useState, type FormEvent } from \"react\";\nimport { useCreateUser } from \"~/lib/hooks\";\n\nconst Signup: NextPage = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const { mutateAsync: signup } = useCreateUser();\n  const router = useRouter();\n\n  async function onSignup(e: FormEvent) {\n    e.preventDefault();\n    try {\n      await signup({ data: { email, password } });\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (err: any) {\n      console.error(err);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (err.info?.prisma && err.info?.code === \"P2002\") {\n        // P2002 is Prisma's error code for unique constraint violations\n        alert(\"User already exists\");\n      } else {\n        alert(\"An unknown error occurred\");\n      }\n      return;\n    }\n\n    // signin to create a session\n    await signIn(\"credentials\", { redirect: false, email, password });\n    router.push(\"/\");\n  }\n\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\">\n      <h1 className=\"text-5xl font-extrabold text-white\">Sign up</h1>\n      <form\n        className=\"mt-16 flex flex-col gap-8 text-2xl\"\n        onSubmit={(e) => void onSignup(e)}\n      >\n        <div>\n          <label htmlFor=\"email\" className=\"inline-block w-32 text-white\">\n            Email\n          </label>\n          <input\n            id=\"email\"\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.currentTarget.value)}\n            className=\"ml-4 w-72 rounded border p-2\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"password\" className=\"inline-block w-32 text-white \">\n            Password\n          </label>\n          <input\n            id=\"password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.currentTarget.value)}\n            className=\"ml-4 w-72 rounded border p-2\"\n          />\n        </div>\n        <input\n          type=\"submit\"\n          value=\"Create account\"\n          className=\"cursor-pointer rounded border border-gray-500 py-4 text-white\"\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default Signup;\n```\n\n----------------------------------------\n\nTITLE: Adding a Post Listing API in Express.js\nDESCRIPTION: Implements a simple API endpoint to list all posts using Prisma client in an Express.js application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/backend.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(`/post`, async (req, res) => {\n    const post = await prisma.post.findMany({\n        include: { author: true },\n    });\n    res.json(post);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing User Fields in ZModel Policy Rules\nDESCRIPTION: Shows how to access user fields like 'role' within policy rules to make authorization decisions based on user attributes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_51\n\nLANGUAGE: zmodel\nCODE:\n```\n@@allow('update', auth().role == 'ADMIN')\n```\n\n----------------------------------------\n\nTITLE: Generating CUID in ZModel\nDESCRIPTION: Generates a globally unique identifier based on the CUID spec.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_30\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction cuid(): String {}\n```\n\n----------------------------------------\n\nTITLE: Using Generated tRPC Client Helper with Next.js\nDESCRIPTION: Example of using the generated tRPC client helper for Next.js to enable type inference.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/trpc.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTRPCNext } from 'server/routers/generated/client/next';\nexport const trpc = createTRPCNext<AppRouter>({\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Preparing tRPC Context with Enhanced PrismaClient\nDESCRIPTION: Example of creating a tRPC context with an enhanced PrismaClient for access control enforcement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/trpc.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const createContext = async ({ req, res }: CreateNextContextOptions) => {\n    const session = await getServerAuthSession({ req, res });\n    return {\n        session,\n        // use access-control-enabled db client\n        prisma: enhance(prisma, { user: session?.user }),\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Concrete Table Inheritance Entity Relationship Diagram\nDESCRIPTION: An ER diagram illustrating the Concrete Table Inheritance pattern where each concrete type (Image, Video, Post, Page) has its own complete table with all fields including common ones, without an Asset table for the base type.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/polymorphism/index.md#2025-04-10_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    User {\n    }\n    Image {\n        id Int PK\n        String title\n        createdAt Date\n        viewCount Int\n        format String\n        data Bytes\n\t\t\t\townerId Int FK\n    }\n    User ||--o{ Image: owns\n    Video {\n        id Int PK\n        String title\n        createdAt Date\n        viewCount Int\n\t\t\t\tduration Int\n        url String\n\t\t\t\townerId Int FK\n    }\n    User ||--o{ Video: owns\n    Post {\n        id Int PK\n        String title\n        createdAt Date\n        viewCount Int\n\t\t\t\tcontent String\n\t\t\t\townerId Int FK\n    }\n    User ||--o{ Post: owns\n    Page {\n        id Int PK\n        String title\n        createdAt Date\n        viewCount Int\n\t\t\t\thtml String\n\t\t\t\townerId Int FK\n    }\n    User ||--o{ Page: owns\n```\n\n----------------------------------------\n\nTITLE: ZenStack Schema Configuration in package.json\nDESCRIPTION: Example showing how to specify the ZModel schema location in the package.json file of a project.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/cli.md#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"zenstack\": {\n    \"schema\": \"./db/schema.zmodel\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up QueryClientProvider Component\nDESCRIPTION: Implementation of a React component that provides TanStack Query client context to the application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/2-generate-hooks.md#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst queryClient = new QueryClient();\n\nfunction Provider({ children }: Props) {\n  return <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>;\n}\n\nexport default Provider;\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack in a Nuxt Project\nDESCRIPTION: Command to initialize ZenStack in a Nuxt project, which installs Prisma dependencies and creates a template schema file.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nuxt.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@1 init\n```\n\n----------------------------------------\n\nTITLE: Clearing To-Many Relationships in JSON:API\nDESCRIPTION: Example of clearing all posts relationships for a user by setting an empty array as the relationship data.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Query hooks generation in ZenStack\nDESCRIPTION: ZenStack schema configuration to generate TanStack Query hooks for Vue that will be used to interact with the CRUD API.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nuxt.mdx#2025-04-10_snippet_10\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin hooks {\n    provider = '@zenstackhq/tanstack-query'\n    target = 'vue'\n    output = 'lib/hooks'\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack in a Nuxt Project\nDESCRIPTION: Command to initialize ZenStack in a Nuxt project, which installs Prisma dependencies and creates a template schema file.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nuxt.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@1 init\n```\n\n----------------------------------------\n\nTITLE: Mounting CRUD API with ZenStack\nDESCRIPTION: Implementing a Next.js API route handler using ZenStack's NextRequestHandler to mount CRUD APIs with enhanced Prisma client.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\nimport { NextRequestHandler } from '@zenstackhq/server/next';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '~/server/auth';\nimport { db } from '~/server/db';\n\nasync function getPrisma() {\n  const session = await getServerSession(authOptions);\n  return enhance(db, { user: session?.user });\n}\n\nconst handler = NextRequestHandler({ getPrisma, useAppDir: true });\n\nexport { handler as DELETE, handler as GET, handler as PATCH, handler as POST, handler as PUT };\n```\n\n----------------------------------------\n\nTITLE: Creating a New NestJS Project\nDESCRIPTION: Commands to create a new NestJS project using the NestJS CLI.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nestjs.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @nestjs/cli@latest new -p npm my-blog-app\ncd my-blog-app\n```\n\n----------------------------------------\n\nTITLE: Post Index Page Implementation in Remix\nDESCRIPTION: Simple component that displays a default message when no post is selected. Provides a link to create a new post, serving as the default view for the posts section.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/remix-run.mdx#2025-04-10_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from '@remix-run/react';\n\nexport default function PostIndexPage() {\n    return (\n        <p>\n            No post selected. Select a post on the left, or{' '}\n            <Link to=\"new\" className=\"text-blue-500 underline\">\n                create a new post.\n            </Link>\n        </p>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using ZenStack Query Keys with Data Fetching Libraries\nDESCRIPTION: Explanation of how ZenStack structures query keys as a quintuple to identify and manage cached queries. This structure enables automatic invalidation by tracking relationships between different queries and mutations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/4-invalidation.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n['zenstack', model, operation, args, flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring tRPC Plugin in ZModel\nDESCRIPTION: Example of configuring the @zenstackhq/trpc plugin in a ZModel file, including output directory and client helper generation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/trpc.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin trpc {\n  provider = '@zenstackhq/trpc'\n  output = 'server/routers/generated'\n  generateClientHelpers = 'next'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Post with Related Content in Traditional Approach\nDESCRIPTION: Example showing how to create a Post with a related Content entry using the traditional approach, which requires explicitly specifying the contentType discriminator field.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nasync function onCreatePost() {\n  const title = prompt(\"Enter post title\");\n  if (title) {\n    await createPost({\n      data: {\n        title,\n        content: {\n          create: {\n            contentType: \"Post\",\n            authorId: user?.id,\n          },\n        },\n      },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying ID Attribute with String Parameter in ZModel\nDESCRIPTION: Demonstrates how to apply the id attribute to a String field with a specific mapping.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_10\n\nLANGUAGE: zmodel\nCODE:\n```\nid String @id(map: \"_id\")\n```\n\n----------------------------------------\n\nTITLE: Extracting ZModel Content from AST using ZModelCodeGenerator\nDESCRIPTION: Code snippet showing how to use the ZModelCodeGenerator from the ZenStack SDK to generate the textual representation of the ZModel from its AST (Abstract Syntax Tree) representation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/code-as-doc/index.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZModelCodeGenerator } from '@zenstackhq/sdk';\nconst zModelGenerator = new ZModelCodeGenerator();\nconst zmodel = zModelGenerator.generate(model);\n```\n\n----------------------------------------\n\nTITLE: REPL Response for User#1 Query\nDESCRIPTION: Example output from REPL showing the result of querying for users while authenticated as user#1.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    id: 1,\n    createdAt: 2023-11-07T21:37:22.506Z,\n    updatedAt: 2023-11-07T21:37:22.506Z,\n    email: 'joey@zenstack.dev',\n    name: 'Joey'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Hooks Generation Plugin in ZenStack Schema\nDESCRIPTION: Configuration for the TanStack Query hooks plugin that generates Vue-compatible client hooks for the API.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nuxt.mdx#2025-04-10_snippet_10\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin hooks {\n    provider = '@zenstackhq/tanstack-query'\n    target = 'vue'\n    output = 'lib/hooks'\n}\n```\n\n----------------------------------------\n\nTITLE: Testing RESTful API with Curl\nDESCRIPTION: Curl command to test the RESTful API flavor by requesting the first List record with pagination, demonstrating the JSON:API format response.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -g 'http://localhost:3000/api/rest/list?page[limit]=1' -H \"x-user-id: 1\"\n```\n\n----------------------------------------\n\nTITLE: Generating Code with Custom Schema Location\nDESCRIPTION: Example of generating code with a custom ZModel schema location.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/cli.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate --schema src/my.zmodel\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Project with T3 Stack\nDESCRIPTION: Command line instructions for creating a new Next.js project using create-t3-app with Prisma, NextAuth, and TailwindCSS dependencies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-t3-app@latest --prisma --nextAuth --tailwind --CI my-saas-app\ncd my-saas-app\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Enabling Prisma Query Logging with ZenStack\nDESCRIPTION: This snippet shows how to enable logging of all queries sent to the wrapped Prisma Client by passing the logPrismaQuery option to the enhance function.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/7-debugging.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user }, { logPrismaQuery: true });\n```\n\n----------------------------------------\n\nTITLE: Using endsWith() Function in ZenStack Policy Rules\nDESCRIPTION: Shows how to check if a string field ends with a specific value. This example allows reading posts whose title ends with 'zenstack'.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_8\n\nLANGUAGE: zmodel\nCODE:\n```\n@@allow('read', endsWith(title, 'zenstack'))\n```\n\n----------------------------------------\n\nTITLE: Enabling Prisma Query Logging with ZenStack\nDESCRIPTION: This snippet shows how to enable logging of all queries sent to the wrapped Prisma Client by passing the logPrismaQuery option to the enhance function.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/7-debugging.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user }, { logPrismaQuery: true });\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAPI Plugin for ZenStack\nDESCRIPTION: Installs the OpenAPI plugin for ZenStack as a development dependency.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @zenstackhq/openapi\n```\n\n----------------------------------------\n\nTITLE: Visualizing ACL ERD with Mermaid\nDESCRIPTION: Represents the Entity-Relationship Diagram (ERD) for the Access Control List (ACL) pattern using Mermaid syntax. It shows the relationships between User, Access, and Resource entities.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/model-authz/index.md#2025-04-10_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    User {\n        int id\n        string name\n    }\n    Access {\n        int id\n        boolean view\n        boolean manage\n    }\n    Resource {\n        int id\n        string name\n    }\n    User ||--o{ Access : has\n    Resource ||--o{ Access : has\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schema for LLM Response Structure in TypeScript\nDESCRIPTION: Defines a Zod schema object that specifies the expected structure for LLM-generated responses, including overview and models sections with their respective properties.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/code-as-doc/index.md#2025-04-10_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst schema = z.object({\n        overview: z.object({\n            description: z.string(),\n            functionality: z.string(),\n        }),\n        models: z.array(\n            z.object({\n                name: z.string(),\n                access_control_policies: z.array(z.string()),\n            })\n        ),\n    });\n```\n\n----------------------------------------\n\nTITLE: JSON Error Response for Policy Violation\nDESCRIPTION: Sample JSON error response when attempting to update a sold pet, showing that the operation was rejected by the access policy that prevents changing the orderId of pets that are already sold.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"prisma\": true,\n    \"rejectedByPolicy\": true,\n    \"code\": \"P2004\",\n    \"message\": \"denied by policy: Pet entities failed 'update' check, 1 entity failed policy check\"\n}\n```\n\n----------------------------------------\n\nTITLE: RESTful API Sorting Example\nDESCRIPTION: Example of sorting resources using multiple fields in ascending and descending order\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nGET /api/post?sort=createdAt,-viewCount\n```\n\n----------------------------------------\n\nTITLE: Creating PrismaClient Instance in Nuxt Server\nDESCRIPTION: Code to create and export a PrismaClient instance for use throughout the Nuxt server.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nuxt.mdx#2025-04-10_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\nexport const prisma = new PrismaClient();\n```\n\n----------------------------------------\n\nTITLE: REPL Response for User#2 Query\nDESCRIPTION: Example output from REPL showing the result of querying for users while authenticated as user#2.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    id: 2,\n    createdAt: 2023-11-07T21:37:22.509Z,\n    updatedAt: 2023-11-07T21:37:22.509Z,\n    email: 'rachel@zenstack.dev',\n    name: 'Rachel'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for JWT Authentication\nDESCRIPTION: Example of setting JWT secret in the .env file for token-based authentication in the SvelteKit application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/sveltekit.mdx#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nJWT_SECRET=abc123\n```\n\n----------------------------------------\n\nTITLE: REPL Query Testing Example\nDESCRIPTION: Example of testing the access control rules using ZenStack REPL to verify list access for a user in the same space\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.4-relations.md#2025-04-10_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n.auth { id: 1 }\ndb.list.findMany()\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of ZenStack with Prisma Client Extensions\nDESCRIPTION: This TypeScript example shows the correct way to use ZenStack with Prisma Client Extensions by explicitly referencing the enhanced client in the extension.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/client-extensions.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst enhanced = enhance(prisma);\nconst db = enhanced.$extends({\n  model: {\n    post: {\n      async getFeeds() {\n          return enhanced.post.findMany();\n      },\n    },\n  },\n});\n\nconst feeds = await db.post.getFeeds();\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for AI API Keys\nDESCRIPTION: Shows how to configure various AI API keys in the .env file to enable the AI-powered documentation generation functionality.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/code-as-doc/index.md#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=xxxx\nXAI_API_KEY=xxxxx\nANTHROPIC_API_KEY=xxxx\n```\n\n----------------------------------------\n\nTITLE: Generating ZenStack Supporting Modules to Source Tree\nDESCRIPTION: A bash command that pre-generates ZenStack supporting modules to a specified output directory in your source tree, allowing you to commit these files to your repository instead of generating them during deployment.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/deploy.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate --output ./zenstack\n```\n\n----------------------------------------\n\nTITLE: Example Query Result Dataset in JSON\nDESCRIPTION: Sample result dataset returned from the Prisma query, showing aggregated sales totals by product category for the e-commerce store.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/llm-acl/index.md#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"_sum\": {\n      \"subtotal\": 1099\n    },\n    \"category\": \"Electronics\"\n  },\n  {\n    \"_sum\": {\n      \"subtotal\": 2199\n    },\n    \"category\": \"Furniture\"\n  },\n  {\n    \"_sum\": {\n      \"subtotal\": 307\n    },\n    \"category\": \"Outdoor\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Schema and Syncing Database\nDESCRIPTION: Commands to generate Prisma schema from the ZenStack model and push the schema to the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nuxt.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\nnpx prisma db push\n```\n\n----------------------------------------\n\nTITLE: ERD Diagram of Blog API Database Schema using Mermaid\nDESCRIPTION: An entity relationship diagram that visualizes the data model for a multi-tenant blog system. It shows the relationships between Space, User, SpaceUser, and Post entities with their respective properties and relationships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/drizzle-prisma/index.md#2025-04-10_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    Space {\n        int id\n        string name\n    }\n    User {\n        int id\n        string email\n    }\n    SpaceUser {\n        int id\n        SpaceUserRole role\n    }\n    Post {\n        int id\n        string title\n        boolean published\n    }\n    Space ||..o{ SpaceUser : hasMember\n    User ||--o{ Space: owns\n    User ||..o{ SpaceUser : memberOf\n    Space ||--o{ Post : has\n    User ||--o{ Post : authors\n```\n\n----------------------------------------\n\nTITLE: Adding Pagination Navigation Buttons in React\nDESCRIPTION: This snippet shows how to add navigation buttons for pagination in a React component. It uses React Table's built-in methods for page navigation and state retrieval to enable/disable buttons and display current page information.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/react-table/index.md#2025-04-10_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<div>\n  <button onClick={() => table.previousPage()} disabled={!table.getCanPreviousPage()}>\n    Prev\n  </button>\n  <button onClick={() => table.nextPage()} disabled={!table.getCanNextPage()}>\n    Next\n  </button>\n  <span className=\"ml-2\">\n    Page {table.getState().pagination.pageIndex + 1} of{' '}\n    {table.getPageCount().toLocaleString()}\n  </span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: New Post Creation Page Component in React\nDESCRIPTION: React component implementation for the new post creation form with validation and error handling using Remix form helpers.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/remix-run.mdx#2025-04-10_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ActionArgs } from '@remix-run/node';\nimport { json, redirect } from '@remix-run/node';\nimport { Form, useActionData } from '@remix-run/react';\nimport * as React from 'react';\nimport { createPost } from '~/models/post.server';\n\nimport { requireUserId } from '~/session.server';\n\nexport async function action({ request }: ActionArgs) {\n    const userId = await requireUserId(request);\n\n    const formData = await request.formData();\n    const title = formData.get('title');\n    const body = formData.get('body');\n\n    if (typeof title !== 'string' || title.length === 0) {\n        return json({ errors: { title: 'Title is required', body: null } }, { status: 400 });\n    }\n\n    if (typeof body !== 'string' || body.length === 0) {\n        return json({ errors: { title: null, body: 'Body is required' } }, { status: 400 });\n    }\n\n    const post = await createPost({ title, body, userId });\n\n    return redirect(`/posts/${post.id}`);\n}\n\nexport default function NewPostPage() {\n    const actionData = useActionData<typeof action>();\n    const titleRef = React.useRef<HTMLInputElement>(null);\n    const bodyRef = React.useRef<HTMLTextAreaElement>(null);\n\n    React.useEffect(() => {\n        if (actionData?.errors?.title) {\n            titleRef.current?.focus();\n        } else if (actionData?.errors?.body) {\n            bodyRef.current?.focus();\n        }\n    }, [actionData]);\n\n    return (\n        <Form\n            method=\"post\"\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                gap: 8,\n                width: '100%',\n            }}\n        >\n            <div>\n                <label className=\"flex w-full flex-col gap-1\">\n                    <span>Title: </span>\n                    <input\n                        ref={titleRef}\n                        name=\"title\"\n                        className=\"flex-1 rounded-md border-2 border-blue-500 px-3 text-lg leading-loose\"\n                        aria-invalid={actionData?.errors?.title ? true : undefined}\n                        aria-errormessage={actionData?.errors?.title ? 'title-error' : undefined}\n                    />\n                </label>\n                {actionData?.errors?.title && (\n                    <div className=\"pt-1 text-red-700\" id=\"title-error\">\n                        {actionData.errors.title}\n                    </div>\n                )}\n            </div>\n\n            <div>\n                <label className=\"flex w-full flex-col gap-1\">\n                    <span>Body: </span>\n                    <textarea\n                        ref={bodyRef}\n                        name=\"body\"\n                        rows={8}\n                        className=\"w-full flex-1 rounded-md border-2 border-blue-500 py-2 px-3 text-lg leading-6\"\n                        aria-invalid={actionData?.errors?.body ? true : undefined}\n                        aria-errormessage={actionData?.errors?.body ? 'body-error' : undefined}\n                    />\n                </label>\n                {actionData?.errors?.body && (\n                    <div className=\"pt-1 text-red-700\" id=\"body-error\">\n                        {actionData.errors.body}\n                    </div>\n                )}\n            </div>\n\n            <div className=\"text-right\">\n                <button\n                    type=\"submit\"\n                    className=\"rounded bg-blue-500 py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n                >\n                    Save\n                </button>\n            </div>\n        </Form>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mermaid ERD Generator Class in TypeScript\nDESCRIPTION: A TypeScript class that generates Mermaid ERD (Entity Relationship Diagram) syntax for data models, handling different field types and relationships between models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/code-as-doc/index.md#2025-04-10_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default class MermaidGenerator {\n    generate(dataModel: DataModel) {\n        const fields = dataModel.fields\n            .filter((x) => !isRelationshipField(x))\n            .map((x) => {\n                return [\n                    x.type.type || x.type.reference?.ref?.name,\n                    x.name,\n                    isIdField(x) ? 'PK' : isForeignKeyField(x) ? 'FK' : '',\n                    x.type.optional ? '\"?\"' : '',\n                ].join(' ');\n            })\n            .map((x) => `  ${x}`)\n            .join('\\n');\n\n        const relations = dataModel.fields\n            .filter((x) => isRelationshipField(x))\n            .map((x) => {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const oppositeModel = x.type.reference!.ref as DataModel;\n\n                const oppositeField = oppositeModel.fields.find(\n                    (x) => x.type.reference?.ref == dataModel\n                ) as DataModelField;\n\n                const currentType = x.type;\n                const oppositeType = oppositeField.type;\n\n                let relation = '';\n\n                if (currentType.array && oppositeType.array) {\n                    //many to many\n                    relation = '}o--o{';\n                } else if (currentType.array && !oppositeType.array) {\n                    //one to many\n                    relation = '||--o{';\n                } else if (!currentType.array && oppositeType.array) {\n                    //many to one\n                    relation = '}o--||';\n                } else {\n                    //one to one\n                    relation = currentType.optional ? '||--o|' : '|o--||';\n                }\n\n                return [`\"${dataModel.name}\"`, relation, `\"${oppositeField.$container.name}\": ${x.name}`].join(' ');\n            })\n            .join('\\n');\n\n        return ['```mermaid', 'erDiagram', `\"${dataModel.name}\" {\\n${fields}\\n}`, relations, '```'].join('\\n');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack Project with Specific Package Manager\nDESCRIPTION: Initialize a ZenStack project explicitly specifying the package manager to use with the '--package-manager' option.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/existing-prisma.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@1 init --package-manager pnpm\n```\n\n----------------------------------------\n\nTITLE: Generating ZenStack Supporting Modules to Source Tree\nDESCRIPTION: A bash command that pre-generates ZenStack supporting modules to a specified output directory in your source tree, allowing you to commit these files to your repository instead of generating them during deployment.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/deploy.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate --output ./zenstack\n```\n\n----------------------------------------\n\nTITLE: Simplified Access Policy Using check() Function\nDESCRIPTION: Refactored Todo model using the check() attribute function to delegate access control to the parent List model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.8-keep-policies-dry.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Todo {\n    ...\n\n    // full access if the parent list is readable\n    @@allow('all', check(list, 'read'))\n}\n```\n\n----------------------------------------\n\nTITLE: Querying User with Raw Prisma Client\nDESCRIPTION: JavaScript code to query a user with raw Prisma Client to see the hashed password in the database, bypassing ZenStack's policy checks.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/6-other-enhancements.md#2025-04-10_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nprisma.user.findFirst({ orderBy: { id: 'desc' } });\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Database Seed Command\nDESCRIPTION: Command to execute the seed script that populates the database with test data.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db seed\n```\n\n----------------------------------------\n\nTITLE: Error Message for Edge Function Compilation Failure\nDESCRIPTION: Example of an unhelpful error message encountered when deploying to Vercel Edge, showing the lack of actionable information when troubleshooting edge runtime issues.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/adapt-to-edge/index.md#2025-04-10_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nCompiler edge-server unexpectedly exited with code: null and signal: SIGTERM\n```\n\n----------------------------------------\n\nTITLE: Strict Typing for User Context in ZenStack V2\nDESCRIPTION: Example showing how the enhance API now enforces strict typing for the user context based on fields accessed through auth() in access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/upgrade.md#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user: { id: userId }}); // <- `role` field is required\n```\n\n----------------------------------------\n\nTITLE: Querying Space Data with Relations in ZenStack REPL\nDESCRIPTION: JavaScript query to fetch the first space with its members included using the Prisma client in ZenStack REPL.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nprisma.space.findFirst({ include: { members: true } })\n```\n\n----------------------------------------\n\nTITLE: Vue App Setup with TanStack Query and ZenStack\nDESCRIPTION: Sets up a Vue application with TanStack Query plugin and ZenStack hooks context. Includes both the main application entry point and component setup.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue';\nimport App from './App.vue';\nimport { QueryClient, VueQueryPlugin } from '@tanstack/vue-query';\n\ncreateApp(App)\n    .use(VueQueryPlugin, { queryClient: new QueryClient() })\n    .mount('#app');\n```\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nimport { provideHooksContext } from '@/lib/hooks';\n\nprovideHooksContext({\n    endpoint: 'http://localhost:3000/api/model'\n});\n</script>\n\n<template>\n    <!-- App Content -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Error Messages to Validation Rules\nDESCRIPTION: Shows how to add custom error messages to validation attributes for more user-friendly error handling when validation fails.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/5-data-validation.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    ...\n    email String @unique @email('must be a valid email')\n    password String @length(min: 8, max: 32, message: 'must be between 8 and 32 characters long')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User with Password\nDESCRIPTION: Example of creating a new user with a password using the enhanced Prisma client.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/6-other-enhancements.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndb.user.create({ data: { email: 'ross@zenstack.dev', password: 'abc123' }})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Error Messages to Validation Rules\nDESCRIPTION: Shows how to add custom error messages to validation attributes for more user-friendly error handling when validation fails.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/5-data-validation.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    ...\n    email String @unique @email('must be a valid email')\n    password String @length(min: 8, max: 32, message: 'must be between 8 and 32 characters long')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Signup Page with ZenStack\nDESCRIPTION: TypeScript React component for user signup functionality. Uses ZenStack's useMutateUser hook for user creation and NextAuth for session management. Includes form validation and error handling for duplicate users.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nextjs.mdx#2025-04-10_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport type { NextPage } from 'next';\nimport { signIn } from 'next-auth/react';\nimport Router from 'next/router';\nimport { useState, type FormEvent } from 'react';\nimport { useMutateUser } from '../lib/hooks';\n\nconst Signup: NextPage = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const { createUser: signup } = useMutateUser();\n\n    async function onSignup(e: FormEvent) {\n        e.preventDefault();\n        try {\n            await signup({ data: { email, password } });\n        } catch (err: any) {\n            console.error(err);\n            if (err.info?.prisma && err.info?.code === 'P2002') {\n                alert('User alread exists');\n            } else {\n                alert('An unknown error occurred');\n            }\n            return;\n        }\n\n        await signIn('credentials', { redirect: false, email, password });\n        await Router.push('/');\n    }\n\n    return (\n        <div className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\">\n            <h1 className=\"text-5xl font-extrabold text-white\">Sign up</h1>\n            <form className=\"mt-16 flex flex-col gap-8 text-2xl\" onSubmit={(e) => void onSignup(e)}>\n                <div>\n                    <label htmlFor=\"email\" className=\"inline-block w-32 text-white\">\n                        Email\n                    </label>\n                    <input\n                        id=\"email\"\n                        type=\"email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.currentTarget.value)}\n                        className=\"ml-4 w-72 rounded border p-2\"\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"password\" className=\"inline-block w-32 text-white \">\n                        Password\n                    </label>\n                    <input\n                        id=\"password\"\n                        type=\"password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.currentTarget.value)}\n                        className=\"ml-4 w-72 rounded border p-2\"\n                    />\n                </div>\n                <input\n                    type=\"submit\"\n                    value=\"Create account\"\n                    className=\"cursor-pointer rounded border border-gray-500 py-4 text-white\"\n                />\n            </form>\n        </div>\n    );\n};\n\nexport default Signup;\n```\n\n----------------------------------------\n\nTITLE: Creating User with Password\nDESCRIPTION: Example of creating a new user with a password using the enhanced Prisma client.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/6-other-enhancements.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndb.user.create({ data: { email: 'ross@zenstack.dev', password: 'abc123' }})\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Inheritance in ZModel\nDESCRIPTION: This example demonstrates the use of 'import' and 'extends' syntax in ZModel to manage large schemas more effectively by inheriting fields from a base model.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/1-zmodel.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nabstract model Base {\n    id Int @id @default(autoincrement())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt()\n    published Boolean @default(true)\n\n    // author has full access\n    @@allow('all', auth() != null && published)\n}\n```\n\nLANGUAGE: zmodel\nCODE:\n```\nimport \"base\"\nmodel User extends Base {\n    name String\n}\n\nmodel Post extends Base {\n    title String\n    content String?\n    viewCount Int @default(0)\n    comment Comment[]\n}\n\nmodel Comment extends Base {\n    content String\n    post Post @relation(fields: [postId], references: [id])\n    postId Int\n}\n```\n\n----------------------------------------\n\nTITLE: DataModelFieldAttribute Interface Definition\nDESCRIPTION: TypeScript interface definition for field attributes in ZenStack's AST. This interface is generated by Langium and provides type safety when working with attributes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/custom-attributes.mdx#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface DataModelFieldAttribute extends AstNode {\n    readonly $container: DataModelField;\n    readonly $type: 'DataModelFieldAttribute';\n    args: Array<AttributeArg>;\n    decl: Reference<Attribute>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated Zod Schemas for JSON Fields\nDESCRIPTION: Demonstrates how to use Zod schemas automatically generated by ZenStack for JSON field types. This enables runtime validation of JSON data outside of database operations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/typing-json.md#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProfileSchema } from '@zenstackhq/runtime/zod/models';\n\nconst profile = ProfileSchema.parse({\n  name: 'Alice',\n  age: 30,\n  address: { state: 'WA', city: 'Seattle', zip: '98019' }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom User Context Configuration\nDESCRIPTION: TypeScript example showing how to customize user context calculation in the ZenStack plugin.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/redwood.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nuseZenStack(db, async (currentUser) => {\n  const typedUser = currentUser as { id: string };\n  const dbUser = await db.user.findUnique({ \n    where: { id: typedUser.id },\n    select: { id: true, role: true }\n  });\n  return dbUser;\n});\n```\n\n----------------------------------------\n\nTITLE: Post Refinement Function\nDESCRIPTION: Generated TypeScript function for implementing model-level validation rules using Zod refinements\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/zod.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction refinePost<T, D extends z.ZodTypeDef>(schema: z.ZodType<T, D, T>) {\n  return schema.refine((value: any) => new RegExp('^[A-Za-z0-9 ]+$').test(value?.title));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js Project with create-t3-app\nDESCRIPTION: Commands to initialize a new Next.js project with Prisma, NextAuth, and TailwindCSS using create-t3-app, followed by starting the development server.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs-app-router.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-t3-app@latest --prisma --nextAuth --tailwind --appRouter --CI my-blog-app\ncd my-blog-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Querying Space with Members in REPL\nDESCRIPTION: JavaScript query in REPL to find the first space with its members included.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nprisma.space.findFirst({ include: { members: true } })\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Query Plugin\nDESCRIPTION: NPM installation command for the TanStack Query plugin\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @zenstackhq/tanstack-query\n```\n\n----------------------------------------\n\nTITLE: Post Refinement Function\nDESCRIPTION: Generated TypeScript function for implementing model-level validation rules using Zod refinements\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/zod.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction refinePost<T, D extends z.ZodTypeDef>(schema: z.ZodType<T, D, T>) {\n  return schema.refine((value: any) => new RegExp('^[A-Za-z0-9 ]+$').test(value?.title));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Server Adapter Dependencies with npm\nDESCRIPTION: Command for installing Express and ZenStack server dependencies, along with TypeScript development tools.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install express @zenstackhq/server\nnpm install --save-dev @types/express tsx\n```\n\n----------------------------------------\n\nTITLE: Defining ZenStack Data Model\nDESCRIPTION: Creates a ZenStack schema (schema.zmodel) defining User, Pet, and Order models with their relationships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_2\n\nLANGUAGE: zmodel\nCODE:\n```\ndatasource db {\n    provider = 'sqlite'\n    url = 'file:./petstore.db'\n}\n\ngenerator client {\n    provider = \"prisma-client-js\"\n}\n\nmodel User {\n    id String @id @default(cuid())\n    email String @unique\n    password String\n    orders Order[]\n}\n\nmodel Pet {\n    id String @id @default(cuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    name String\n    category String\n    order Order? @relation(fields: [orderId], references: [id])\n    orderId String?\n}\n\nmodel Order {\n    id String @id @default(cuid())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n    pets Pet[]\n    user User @relation(fields: [userId], references: [id])\n    userId String\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Seed Script\nDESCRIPTION: Implements a seed script (prisma/seed.ts) to populate the database with initial pet data.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient, Prisma } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nconst petData: Prisma.PetCreateInput[] = [\n    {\n        id: 'luna',\n        name: 'Luna',\n        category: 'kitten',\n    },\n    {\n        id: 'max',\n        name: 'Max',\n        category: 'doggie',\n    },\n    {\n        id: 'cooper',\n        name: 'Cooper',\n        category: 'reptile',\n    },\n];\n\nasync function main() {\n    console.log(`Start seeding ...`);\n    for (const p of petData) {\n        const pet = await prisma.pet.create({\n            data: p,\n        });\n        console.log(`Created Pet with id: ${pet.id}`);\n    }\n    console.log(`Seeding finished.`);\n}\n\nmain()\n    .then(async () => {\n        await prisma.$disconnect();\n    })\n    .catch(async (e) => {\n        console.error(e);\n        await prisma.$disconnect();\n        process.exit(1);\n    });\n```\n\n----------------------------------------\n\nTITLE: Using Custom Plugin Attributes in ZModel\nDESCRIPTION: An example of how to use a custom attribute contributed by a plugin in a ZModel schema. The attribute is applied to a model definition.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part2/3-writing-plugins.md#2025-04-10_snippet_4\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Foo {\n    ...\n\n    @@myplugin.include()\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Prisma DMMF in ZenStack Plugins\nDESCRIPTION: Example showing how to access Prisma's DMMF (Data Model Meta Format) within a ZenStack plugin. This allows accessing custom attributes via Prisma's documentation field.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/custom-attributes.mdx#2025-04-10_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst userModel = dmmf.datamodel.models.find((m) => m.name === 'User');\nconsole.log(`user model attribute: ${userModel?.documentation}`);\n\nconst emailField = userModel?.fields.find((f) => f.name === 'email');\nconsole.log(`email field attribute: ${emailField?.documentation}`);\n\nconst passwordField = userModel?.fields.find((f) => f.name === 'password');\nconsole.log(`password field attribute: ${passwordField?.documentation}`);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Client SDK Generation\nDESCRIPTION: Installs necessary dependencies for generating a strongly-typed client SDK using OpenAPI TypeScript tools.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D openapi-typescript @types/node-fetch\nnpm install node-fetch openapi-typescript-fetch\nnpx openapi-typescript http://localhost:3000/v3/api-docs --output ./client-types.ts\n```\n\n----------------------------------------\n\nTITLE: Delegated Types Entity Relationship Diagram\nDESCRIPTION: An ER diagram depicting the Delegated Types pattern with a base Asset table containing common fields and separate tables for each concrete type (Image, Video, Post, Page), connected by one-to-one relationships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/polymorphism/index.md#2025-04-10_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n\t\tUser {\n\t\t}\n    Asset {\n        id Int PK\n\t\t\t\tString title\n        createdAt Date\n        viewCount Int\n\t\t\t\ttype String\n\t\t\t\townerId Int FK\n\t\t}\n\t\tUser ||--o{ Asset: owns\n    Image {\n        id Int PK\n        format String\n        data Bytes\n        assetId Int FK\n    }\n\t\tImage ||--|| Asset: delegates\n    Video {\n        id Int PK\n\t\t\t\tduration Int\n        url String\n        assetId Int FK\n    }\n\t\tVideo ||--|| Asset: delegates\n    Post {\n        id Int PK\n\t\t\t\tcontent String\n        assetId Int FK\n    }\n\t\tPost ||--|| Asset: delegates\n    Page {\n        id Int PK\n\t\t\t\thtml String\n        assetId Int FK\n    }\n\t\tPage ||--|| Asset: delegates\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Seats with Version Check in Prisma\nDESCRIPTION: This code snippet shows an alternative approach to update seats using Prisma's updateMany method, including a version check for optimistic concurrency control.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/contribute-oss/index.md#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst seats = await client.seat.updateMany({\n  data: {\n    claimedBy: userEmail,\n    version: {\n      increment: 1,\n    },\n  },\n  where: {\n    id: availableSeat.id,\n    version: availableSeat.version, \n})\n\nif (seats.count === 0) {\n  throw new Error(`That seat is already booked! Please try again.`)\n}\n```\n\n----------------------------------------\n\nTITLE: Model Refinement Function for @@validate Rules\nDESCRIPTION: Generated refinement function for applying model-level validation rules from the @@validate attribute, which is used to add regex validation to the title field.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/zod.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction refinePost<T, D extends z.ZodTypeDef>(schema: z.ZodType<T, D, T>) {\n  return schema.refine((value: any) => new RegExp('^[A-Za-z0-9 ]+$').test(value?.title));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Models in ZModel\nDESCRIPTION: Shows how to create models representing business entities, including abstract models and inheritance. Demonstrates field definitions and the use of attributes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\nabstract model Basic {\n    id String @id\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt\n}\n\nmodel User extends Basic {\n    name String \n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Providers into Next.js App Layout\nDESCRIPTION: Root layout component for the Next.js app that includes global CSS, font configuration, and wraps the application with the necessary providers for authentication and data fetching.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs-app-router.mdx#2025-04-10_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport \"~/styles/globals.css\";\n\nimport { Inter } from \"next/font/google\";\nimport Providers from \"./providers\";\n\nconst inter = Inter({\n  subsets: [\"latin\"],\n  variable: \"--font-sans\",\n});\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={`font-sans ${inter.variable}`}>\n        <Providers>{children}</Providers>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating ZenStack Hooks\nDESCRIPTION: Command to generate React hooks based on the schema definition, which creates client-side functions for querying and mutating data.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs-app-router.mdx#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenAPI Specification Generation in ZModel\nDESCRIPTION: This ZModel plugin configuration enables automatic OpenAPI specification generation for the RESTful APIs created by ZenStack. It defines the output format and file path for the generated specification.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/nest-api/index.md#2025-04-10_snippet_12\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin openapi {\n  provider = '@zenstackhq/openapi'\n  flavor = 'rest'\n  output = 'openapi.yaml'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Password Field to User Model\nDESCRIPTION: Shows how to add a password field to an existing User model with the @password attribute.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/6-other-enhancements.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    ...\n    password String? @password\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single User with PostgREST Query\nDESCRIPTION: Example showing how to fetch a single user by ID using PostgREST's query syntax, which differs from traditional RESTful conventions by using query parameters instead of nested routes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/postgrest.mdx#2025-04-10_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nGET /user?id=1\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack using zenstack init command\nDESCRIPTION: This command initializes ZenStack in an existing TypeScript project folder. It's the easiest way to install ZenStack.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/install.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init\n```\n\n----------------------------------------\n\nTITLE: Updating User Model with Post Relation in ZModel\nDESCRIPTION: ZModel schema update for the User model to rename the relation from notes to posts, establishing a one-to-many relationship between users and posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/remix-run.mdx#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id String @id @default(cuid())\n  email String @unique\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  password Password?\n  // highlight-next-line\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Query for Vue Hooks Generation\nDESCRIPTION: Commands to install TanStack Query for Vue and the ZenStack plugin for generating query hooks.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nuxt.mdx#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tanstack/vue-query --force\nnpm install -D @zenstackhq/tanstack-query\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack Project with Custom Prisma Schema Location\nDESCRIPTION: Initialize a ZenStack project specifying a non-standard location for the Prisma schema file using the '--prisma' option.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/existing-prisma.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@1 init --prisma prisma/my.schema\n```\n\n----------------------------------------\n\nTITLE: Querying User Data in ZenStack REPL\nDESCRIPTION: JavaScript query to fetch the first user from the database using the Prisma client in ZenStack REPL.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nprisma.user.findFirst()\n```\n\n----------------------------------------\n\nTITLE: Swagger UI Integration Setup\nDESCRIPTION: Code to integrate Swagger UI for API documentation display, including custom CSS configuration and spec file loading.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/rest-api-on-vercel/index.md#2025-04-10_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport swaggerUI from 'swagger-ui-express';\nimport fs from 'fs';\nimport path from 'path';\n\nconst options = { customCssUrl: 'https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/4.18.3/swagger-ui.css' };\nconst spec = JSON.parse(\n    fs.readFileSync(path.join(__dirname, '../petstore-api.json'), 'utf8')\n);\napp.use('/api/docs', swaggerUI.serve, swaggerUI.setup(spec, options));\n```\n\n----------------------------------------\n\nTITLE: Fetching User Fields for Policy Rules\nDESCRIPTION: Example showing how to fetch user fields needed for policy rules before calling enhance().\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst userId = getCurrentUserId(request);\nconst user = await prisma.user.findUniqueOrThrow({ where: { id: userId }, select: { id: true, role: true } });\nconst db = enhance(prisma, { user });\n```\n\n----------------------------------------\n\nTITLE: Unsupported Access Control Rule in ZenStack\nDESCRIPTION: This code snippet illustrates a currently unsupported access control rule in ZenStack that requires counting related entities. It demonstrates a limitation of the current Prisma-based implementation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/next-chapter-1/index.md#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nmodel User {\n  ...\n  // A user is readable if he has more than one post\n  // The policy rule is pseudo and currently unsupported in ZenStack\n  @@allow('read', count(posts) > 1)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Authentication Utility for SvelteKit\nDESCRIPTION: TypeScript module that provides JWT token creation functionality for user authentication in the SvelteKit application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/sveltekit.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from '$env/dynamic/private';\nimport type { User } from '@prisma/client';\nimport jwt from 'jsonwebtoken';\n\nexport const JWT_TOKEN_COOKIE_NAME = 'ZenStack-Blog-Token';\n\nexport function createToken(user: User) {\n\treturn jwt.sign(\n\t\t{\n\t\t\tsub: user.id,\n\t\t\temail: user.email\n\t\t},\n\t\tenv.JWT_SECRET,\n\t\t{ expiresIn: '7d' }\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting NextJS Development Server\nDESCRIPTION: This bash command starts the NextJS development server, allowing you to test the authentication UI at http://localhost:3000/signup.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/3-auth-ui.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Order Creation\nDESCRIPTION: Sample JSON response after successful order creation, showing the created order with its ID, timestamps, and user association but without the connected pets due to the default Prisma response structure.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"clfapaykz0002vhwr634sd9l7\",\n    \"createdAt\": \"2023-03-16T05:59:04.586Z\",\n    \"updatedAt\": \"2023-03-16T05:59:04.586Z\",\n    \"userId\": \"clfan0lys0000vhtktutornel\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack using zenstack init command\nDESCRIPTION: This command initializes ZenStack in an existing TypeScript project folder. It's the easiest way to install ZenStack.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/install.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init\n```\n\n----------------------------------------\n\nTITLE: Creating a New Remix Project with Create-Remix CLI\nDESCRIPTION: Command to create a new Remix project using the indie-stack template, install dependencies, and start the development server.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/remix-run.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-remix@latest --template remix-run/indie-stack my-blog-app\ncd my-blog-app\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack Server Package\nDESCRIPTION: Command to install the @zenstackhq/server package using npm.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/fastify.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/server\n```\n\n----------------------------------------\n\nTITLE: Creating a T3 App Project with Next.js\nDESCRIPTION: Command to scaffold a new Next.js project using create-t3-app with Tailwind CSS, NextAuth, Prisma, and app router.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-t3-app@latest --tailwind --nextAuth --prisma --appRouter --CI my-todo-app\n```\n\n----------------------------------------\n\nTITLE: Creating SvelteKit Project\nDESCRIPTION: Command to create a new SvelteKit project using the npm create svelte command\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/sveltekit.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create svelte@latest my-blog-app\n```\n\n----------------------------------------\n\nTITLE: Specifying Auth Model in ZModel\nDESCRIPTION: Specifies the model for resolving auth() function calls in access policies. Overrides the default 'User' model. Only one model can have this attribute in a ZModel.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_27\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @@auth()\n```\n\n----------------------------------------\n\nTITLE: Traversing Relation Fields in auth() Function\nDESCRIPTION: Example showing how to access and traverse the auth model's relation fields in policy rules using the auth() function.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_8\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    ...\n    role Role\n}\n\nmodel Role {\n    ...\n    permissions Permission[]\n}\n\nmodel Permission {\n    ...\n    name String  // READ, WRITE, etc.\n}\n\nmodel Post {\n    ...\n\n    @@allow('read', auth().role.permissions?[name == 'READ'])\n}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Enabling Encryption Enhancement\nDESCRIPTION: Specifies the enhancement kinds to enable when manually configuring the enhanced PrismaClient, making sure to include the 'encryption' enhancement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/field-encryption.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = enhance(prisma, { user }, {\n  kinds: ['policy', 'encryption'],\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Query for Posts in React\nDESCRIPTION: This snippet demonstrates how to use the useInfiniteFindManyPost hook to implement infinite pagination for loading posts in a React component. It includes logic for fetching the next page and rendering the list of posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useInfiniteFindManyPost } from '../lib/hooks';\n\n// post list component with infinite loading\nconst Posts = () => {\n    const PAGE_SIZE = 10;\n\n    const fetchArgs = {\n        include: { author: true },\n        orderBy: { createdAt: 'desc' as const },\n        take: PAGE_SIZE,\n    };\n\n    const { data, fetchNextPage, hasNextPage } = useInfiniteFindManyPost(fetchArgs, {\n        getNextPageParam: (lastPage, pages) => {\n            if (lastPage.length < PAGE_SIZE) {\n                return undefined;\n            }\n            const fetched = pages.flatMap((item) => item).length;\n            return {\n                ...fetchArgs,\n                skip: fetched,\n            };\n        },\n    });    \n\n    return (\n        <>\n            <ul>\n                {data?.pages.map((posts, i) => (\n                    <React.Fragment key={i}>\n                        {posts?.map((post) => (\n                            <li key={post.id}>\n                                {post.title} by {post.author.email}\n                            </li>\n                        ))}\n                    </React.Fragment>\n                ))}\n            </ul>\n            {hasNextPage && (\n                <button onClick={() => fetchNextPage()}>\n                    Load more\n                </button>\n            )}\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack server adapter for Nuxt\nDESCRIPTION: Command to install the ZenStack server adapter package for Nuxt integration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nuxt.mdx#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/server\n```\n\n----------------------------------------\n\nTITLE: Defining Post Read Access Policy for Owner in ZenStack\nDESCRIPTION: ZenStack access policy rule that allows the owner to read their posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-backend/index.md#2025-04-10_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n@@allow('read', owner == auth())\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Query integration for ZenStack\nDESCRIPTION: Command to install the TanStack Query plugin package for generating Vue hooks that interact with the ZenStack API.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nuxt.mdx#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/tanstack-query @tanstack/vue-query\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma schema and pushing to database\nDESCRIPTION: Commands to regenerate the Prisma schema from the ZenStack model and synchronize it with the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nuxt.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\nnpx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Running Prisma CLI Commands with ZenStack\nDESCRIPTION: Common Prisma CLI commands that can be used after ZenStack schema generation, including database migrations, schema pushing, and launching Prisma Studio.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nprisma migrate dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nprima db push\n```\n\nLANGUAGE: shell\nCODE:\n```\nprisma studio\n```\n\n----------------------------------------\n\nTITLE: Fetching Missing User Fields in TypeScript\nDESCRIPTION: Example of fetching missing user fields before calling enhance() when policy rules require additional fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst userId = getCurrentUserId(request);\nconst user = await prisma.user.findUniqueOrThrow({ where: { id: userId }, select: { id: true, role: true } });\nconst db = enhance(prisma, { user });\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack\nDESCRIPTION: Command to initialize ZenStack in the project\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/sveltekit.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init\n```\n\n----------------------------------------\n\nTITLE: Root Layout Configuration\nDESCRIPTION: Root layout setup with context providers and font configuration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/next-app-router.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"use client\";\n\nimport \"~/styles/globals.css\";\n\nimport { Inter } from \"next/font/google\";\nimport Providers from \"./providers\";\n\nconst inter = Inter({\n  subsets: [\"latin\"],\n  variable: \"--font-sans\",\n});\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={`font-sans ${inter.variable}`}>\n        <Providers>{children}</Providers>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Reference Expression in ZenStack Policy Rules\nDESCRIPTION: Demonstrates how to reference a model field in a policy rule. In this example, the 'published' field of the Post model is referenced to determine read permissions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    ...\n    published Boolean\n    @@allow('read', published) // `published` is a Reference Expression\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Secret Environment Configuration\nDESCRIPTION: Environment variable configuration for JWT token secret\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/rest-api-on-vercel/index.md#2025-04-10_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nJWT_SECRET=abc123\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack RedwoodJS Package\nDESCRIPTION: Command to set up ZenStack in a RedwoodJS project using the RedwoodJS CLI.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/redwood.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn rw setup package @zenstackhq/redwood\n```\n\n----------------------------------------\n\nTITLE: Using CanAccess Component to Guard UI Elements\nDESCRIPTION: Uses Refine's CanAccess component to guard the post creation page, showing a \"Not Allowed\" message when users don't have the required permissions instead of the create form.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/refine-dev-backend/index.md#2025-04-10_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<CanAccess\n    resource=\"post\"\n    action=\"create\"\n    fallback={<div>Not Allowed</div>}\n>\n    <Create ... />\n</CanAccess>\n```\n\n----------------------------------------\n\nTITLE: Generating Enhancer Code with Custom Output Directory\nDESCRIPTION: Command that generates enhancer code to a custom output directory specified by the --output flag.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/enhancer.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzenstack generate --output src/lib/zenstack\n```\n\n----------------------------------------\n\nTITLE: Implementing Home Page Component\nDESCRIPTION: Creates the main page component for the blog application with post creation and listing functionality using Vue Query hooks.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nuxt.mdx#2025-04-10_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useFindManyPost, useCreatePost } from '~/lib/hooks';\n\nconst title = ref('');\nconst createPost = useCreatePost();\n\nconst onCreatePost = async () => {\n    try {\n        await createPost.mutateAsync({\n            data: {\n                title: title.value,\n                content: 'My awesome content',\n            },\n        });\n        title.value = '';\n    } catch (err: any) {\n        alert(err.info?.message ?? err);\n    }\n};\nconst { data: posts } = useFindManyPost({ include: { author: true } });\n</script>\n\n<template>\n    <h1 class=\"text-2xl font-bold my-4\">My Awesome Blog</h1>\n    <div v-if=\"session?.id\">\n        <div class=\"flex justify-center\">\n            <NTextInput\n                v-model=\"title\"\n                placeholder=\"Title\"\n                class=\"w-1/2 mr-4\"\n                @keyup.enter=\"onCreatePost\"\n            />\n            <NButton @click=\"onCreatePost\">Create Post</NButton>\n        </div>\n        <ul v-if=\"posts\" class=\"py-8 space-y-2\">\n            <li v-for=\"post in posts\" :key=\"post.id\">\n                <Post v-bind=\"post\" />\n            </li>\n        </ul>\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack in the Project\nDESCRIPTION: Command to prepare the Next.js project for using ZenStack by running the initialization CLI.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nextjs.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@1 init\n```\n\n----------------------------------------\n\nTITLE: Generating ZenStack Files\nDESCRIPTION: Command to generate PrismaClient and supporting files needed by ZenStack.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nestjs.mdx#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\n```\n\n----------------------------------------\n\nTITLE: Configuring ZenStack SWR Context Provider in React\nDESCRIPTION: Example of setting up the ZenStack SWR context provider in a React application, including a custom fetch function with a custom header.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/swr.mdx#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FetchFn, Provider as ZenStackHooksProvider } from '../lib/hooks';\n\n// custom fetch function that adds a custom header\nconst myFetch: FetchFn = (url, options) => {\n    options = options ?? {};\n    options.headers = {\n        ...options.headers,\n        'x-my-custom-header': 'hello world',\n    };\n    return fetch(url, options);\n};\n\nfunction MyApp({ Component, pageProps: { session, ...pageProps } }: AppProps) {\n    return (\n        <ZenStackHooksProvider value={{ endpoint: '/api/model', fetch: myFetch }}>\n            <AppContent />\n        </ZenStackHooksProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack Project and Generating Prisma Schema\nDESCRIPTION: These bash commands initialize the ZenStack project, which extends Prisma with access control features, and generate the Prisma schema from the ZModel file.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/better-auth/index.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init\nnpx zenstack generate\n```\n\n----------------------------------------\n\nTITLE: Cloning ZenStack Sample Project\nDESCRIPTION: Command to clone the sample Todo project repository and checkout the 'v1-part2' branch to follow along with the tutorial.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/index.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch v1-part2 https://github.com/zenstackhq/the-complete-guide-sample.git my-todo-app\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin in ZModel\nDESCRIPTION: Shows how to configure a plugin in ZModel for generating artifacts. Specifies the plugin name, provider, and output options.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin swr {\n    provider = '@zenstackhq/swr'\n    output = 'lib/hooks'\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Debug Log Output for Prisma Query in JavaScript\nDESCRIPTION: This snippet shows an example of the debug log output for a Prisma query, demonstrating the structure of the generated query including access policy conditions.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/debugging.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nprisma:info [policy] `findMany` list:\n{\n  where: {\n    AND: [\n      { NOT: { OR: [] } },\n      {\n        OR: [\n          { owner: { is: { id: 1 } } },\n          {\n            AND: [\n              {\n                space: {\n                  members: {\n                    some: { user: { is: { id: 1 } } }\n                  }\n                }\n              },\n              { NOT: { private: true } }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ZenStack CLI Basic Usage\nDESCRIPTION: Shows the basic usage of the ZenStack CLI, including the main commands and general options available.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/cli.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzenstack [options] [command]\n\nζ ZenStack is a Prisma power pack for building full-stack apps.\n\nDocumentation: https://zenstack.dev.\n\nOptions:\n  -v --version           display CLI version\n  -h, --help             display help for command\n\nCommands:\n  info [path]            Get information of installed ZenStack and related packages.\n  init [options] [path]  Initialize an existing project for ZenStack.\n  generate [options]     Generates RESTful API and Typescript client for your data model.\n  repl [options]         Start a REPL session.\n  format [options]       Format a ZenStack schema file.\n  check [options]        Check a ZenStack schema file for syntax or semantic errors.\n  help [command]         Display help for a command.\n```\n\n----------------------------------------\n\nTITLE: Generating Artifacts from Schema\nDESCRIPTION: Command to generate artifacts from the ZModel schema, including Prisma schema and Prisma Client.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Project with T3 Stack\nDESCRIPTION: Command to create a new Next.js project using create-t3-app with Prisma, NextAuth, and TailwindCSS dependencies\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-t3-app@latest --prisma --nextAuth --tailwind --CI my-blog-app\ncd my-blog-app\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack Project for tRPC\nDESCRIPTION: Command to initialize a tRPC project with ZenStack. This sets up the necessary configuration and files for integrating ZenStack with tRPC.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/trpc.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@1 init\n```\n\n----------------------------------------\n\nTITLE: Setting Up Prisma in NestJS\nDESCRIPTION: Commands to install Prisma and initialize it in the NestJS project.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nestjs.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D prisma\nnpx prisma init\n```\n\n----------------------------------------\n\nTITLE: Model-Level Allow Attribute Definition in ZModel\nDESCRIPTION: Defines the structure of the @@allow attribute for model-level access policy control. Specifies operation types and condition parameters.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_41\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @@allow(_ operation: String, _ condition: Boolean)\n```\n\n----------------------------------------\n\nTITLE: Defining Order Model Access Policy in ZenStack\nDESCRIPTION: Example showing how to define access policies for a pet store order model, demonstrating a policy to ensure pets can only be added to an order if not already assigned\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/good-dx/index.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Order\n{\n  pets Pet[]\n\n  // The user could only create an order if all the pets in the order have not been added to any order yet.\n  @@allow('create', !pets?[orderId != null])\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Seed Script in package.json\nDESCRIPTION: JSON configuration added to package.json to specify the database seed script for Prisma.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"prisma\": {\n        \"seed\": \"ts-node prisma/seed.ts\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using EndsWith Function in ZenStack Models\nDESCRIPTION: Demonstrates using the endsWith() function to check if a string field ends with a specific value. This function performs suffix matching on string fields.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/4-access-policy/4.5-expr-func.md#2025-04-10_snippet_8\n\nLANGUAGE: zmodel\nCODE:\n```\n@@allow('read', endsWith(title, 'zenstack'))\n```\n\n----------------------------------------\n\nTITLE: Generating ZenStack Code and Pushing Schema to Database\nDESCRIPTION: Command to generate code from the ZModel schema and push the schema to the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate && npx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Implementing RESTful API Handler in Nuxt\nDESCRIPTION: Configuration for setting up the RESTful API handler in Nuxt with event handler creation and endpoint configuration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default createEventHandler({\n    handler: RestApiHandler({ endpoint: 'http://myhost/api/model' })\n    getPrisma\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing RESTful API Handler in Nuxt\nDESCRIPTION: Configuration for setting up the RESTful API handler in Nuxt with event handler creation and endpoint configuration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/api-handlers/rest.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default createEventHandler({\n    handler: RestApiHandler({ endpoint: 'http://myhost/api/model' })\n    getPrisma\n});\n```\n\n----------------------------------------\n\nTITLE: Example of ZenStack generate with Custom Schema\nDESCRIPTION: Command example showing how to generate artifacts with a custom schema location.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/cli.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate --schema src/my.zmodel\n```\n\n----------------------------------------\n\nTITLE: Starting SvelteKit Development Server\nDESCRIPTION: Command to start the SvelteKit development server for local testing and development.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/sveltekit.mdx#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Adding access policies to User and Post models in ZenStack\nDESCRIPTION: Defines access policies for User and Post models in the schema.zmodel file to implement the specified security requirements.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/backend.mdx#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n    id Int @id() @default(autoincrement())\n    email String @unique()\n    name String?\n    posts Post[]\n\n    // make user profile public\n    @@allow('read', true)\n}\n\nmodel Post {\n    id Int @id() @default(autoincrement())\n    createdAt DateTime @default(now())\n    updatedAt DateTime @updatedAt()\n    title String\n    content String?\n    published Boolean @default(false)\n    viewCount Int @default(0)\n    author User? @relation(fields: [authorId], references: [id])\n    authorId Int?\n\n    // author has full access\n    @@allow('all', auth() == author)\n\n    // logged-in users can view published posts\n    @@allow('read', auth() != null && published)\n}\n```\n\n----------------------------------------\n\nTITLE: Database Schema Generation Commands\nDESCRIPTION: Commands to generate Prisma schema and push database changes.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/better-auth/index.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\nnpx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Initializing a TypeScript Project with try-prisma and ZenStack\nDESCRIPTION: Commands to create a new TypeScript project using try-prisma utility and initialize it for ZenStack development.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx try-prisma@latest -n my-todo-app -t orm/script --install npm\ncd my-todo-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init\n```\n\n----------------------------------------\n\nTITLE: Configuring Encryption in TypeScript\nDESCRIPTION: Shows how to enable and configure encryption when enhancing a Prisma client in TypeScript.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getEncryptionKey(): Uint8Array {\n    // return a 32-byte key\n}\n\nconst db = enhance(prisma, { user }, {\n    encryption: {\n        encryptionKey: getEncryptionKey()\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Runtime Validation Error Example\nDESCRIPTION: Shows how ZenStack enforces validation rules on JSON fields at runtime, rejecting data that violates the constraints.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/json-typing/index.md#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.image.create({\n  data: {\n    metadata: {\n      width: 1920,\n      height: 10800, // <- runtime error here\n      format: 'jpeg'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack Server Adapter\nDESCRIPTION: Command to install the ZenStack server adapter package for Next.js integration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/server\n```\n\n----------------------------------------\n\nTITLE: ZModel Abstract Model Definition with Access Policies\nDESCRIPTION: A ZModel schema definition showing how to create an abstract Asset model with common fields and access policies, and a concrete Video model that extends Asset. Demonstrates ZenStack's model inheritance feature.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/polymorphism/index.md#2025-04-10_snippet_5\n\nLANGUAGE: zmodel\nCODE:\n```\nabstract model Asset {\n  id Int\n  createdAt DateTime @default(now)\n  viewCount Int @default(0)\n  owner User @relation(fields: [ownerId], references: [id])\n  ownerId Int\n\n  // custom attributes for defining access policies\n  @@allow('read', true)\n  @@allow('all', owner == auth())\n}\n\n// model inheritance with \"extends\"\nmodel Video extends Asset {\n  duration Int\n  url String\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack Server Adapter\nDESCRIPTION: Command to install the ZenStack server adapter package for Next.js integration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/server\n```\n\n----------------------------------------\n\nTITLE: Declaring a Plugin in ZModel\nDESCRIPTION: Example of plugin declaration in a ZModel file. The declaration includes the required provider field and plugin-specific configurations like output file path, API title, and version.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part2/1-using-plugins.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nplugin openapi {\n    provider = \"@zenstackhq/openapi\"\n    output = \"openapi.yaml\"\n    title = \"My Todo API\"\n    version = \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running ZenStack CLI for Code Generation\nDESCRIPTION: This command demonstrates how to use the ZenStack CLI to generate code based on the ZModel, including running the custom Markdown plugin.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part2/3-writing-plugins.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack in a SvelteKit Project\nDESCRIPTION: Command to prepare a SvelteKit project for using ZenStack by initializing required configurations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/sveltekit.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@1 init\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack Server Package\nDESCRIPTION: Command to install the ZenStack server adapters package required for API implementation\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/rest-api-on-vercel/index.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/server\n```\n\n----------------------------------------\n\nTITLE: Creating Database Seed Script\nDESCRIPTION: TypeScript seed script that populates the database with initial test data, including users and spaces.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n    // clean up\n    await prisma.user.deleteMany();\n    await prisma.space.deleteMany();\n\n    const joey = await prisma.user.create({\n        data: {\n            email: 'joey@zenstack.dev',\n            name: 'Joey'\n        }\n    });\n    console.log('User created:', joey);\n\n    const rachel = await prisma.user.create({\n        data: {\n            email: 'rachel@zenstack.dev',\n            name: 'Rachel'\n        }\n    });\n    console.log('User created:', rachel);\n\n    const centralPerk = await prisma.space.create({\n        data: {\n            name: 'Central Perk',\n            slug: 'central-perk',\n            owner: { connect: { id: rachel.id } },\n            members: {\n                create: [\n                    {\n                        user: { connect: { id: joey.id } },\n                        role: 'USER'\n                    },\n                    {\n                        user: { connect: { id: rachel.id } },\n                        role: 'ADMIN'\n                    }\n                ]\n            }\n        }\n    });\n    console.log('Space created:', centralPerk);\n\n    const rachelPersonal = await prisma.space.create({\n        data: {\n            name: \"Rachel's Personal Space\",\n            slug: 'rachel',\n            owner: { connect: { id: rachel.id } },\n            members: {\n                create: [\n                    {\n                        user: { connect: { id: rachel.id } },\n                        role: 'ADMIN'\n                    }\n                ]\n            }\n        }\n    });\n    console.log('Space created:', rachelPersonal);\n}\n\nmain()\n    .then(async () => {\n        await prisma.$disconnect();\n    })\n    .catch(async (e) => {\n        console.error(e);\n        await prisma.$disconnect();\n        process.exit(1);\n    });\n```\n\n----------------------------------------\n\nTITLE: Using ZenStack repl Command\nDESCRIPTION: Command for starting a REPL session to interactively work with PrismaClient methods, requiring previous generation of ZenStack artifacts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/cli.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack repl\n```\n\n----------------------------------------\n\nTITLE: withPassword Function Signature in TypeScript\nDESCRIPTION: Type definition of the withPassword enhancer function that adds automatic password hashing support for fields marked with @password attribute. Accepts a PrismaClient and optional configuration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/runtime-api.md#2025-04-10_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction withPassword<DbClient extends object = any>(\n    prisma: DbClient,\n    options?: WithPasswordOptions\n): DbClient;\n```\n\n----------------------------------------\n\nTITLE: Converting LLM Output to Prisma Query in TypeScript\nDESCRIPTION: Example of how to translate the JSON output from the LLM into an executable Prisma query that groups order items by category and sums the subtotals.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/llm-acl/index.md#2025-04-10_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nprisma.orderItemDetail.groupBy({\n  by: ['category'],\n  _sum: {\n    subtotal: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Schema and Syncing Database\nDESCRIPTION: Commands to generate the Prisma schema from ZModel and push changes to the database, ensuring the database structure matches the defined models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs-app-router.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate && npx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Mounting ZenStack API in Nuxt Server Event Handler\nDESCRIPTION: This snippet demonstrates how to create a Nuxt server event handler to mount the ZenStack API. It imports necessary dependencies, enhances the Prisma instance with user context, and sets up the event handler with getPrisma option.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/nuxt.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\nimport { createEventHandler } from '@zenstackhq/server/nuxt';\nimport { getSessionUser } from '~/server/auth';\nimport { prisma } from '~/server/prisma';\n\nexport default createEventHandler({\n    getPrisma: async (event) => {\n        return enhance(prisma, { user: getSessionUser(event) });\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Using ZenStack repl Command\nDESCRIPTION: Command for starting a REPL session to interactively work with PrismaClient methods, requiring previous generation of ZenStack artifacts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/cli.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack repl\n```\n\n----------------------------------------\n\nTITLE: Optimized findManyAndCount with Special Case Handling in TypeScript\nDESCRIPTION: An optimized implementation of findManyAndCount for Prisma that avoids the second count query when the number of items returned is less than the requested limit, saving database resources.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/trade-off/index.md#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { items, count } = await prisma.$transaction(async (tx) => {\n    const items = await tx.user.findMany(query);\n\n    // If it is true, we could avoid another query\n    if (query.take && items.length < query.take) {\n        return { items, count: items.length };\n    }\n    const count = await tx.user.count({ where: query.where });\n    return { items, count };\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning ZenStack Sample Project with Git\nDESCRIPTION: Command to clone the completed sample todo application from the 'part3' branch of the ZenStack guide repository.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/6-conclusion.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch part3 https://github.com/zenstackhq/the-complete-guide-sample.git my-todo-app\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack Server Package\nDESCRIPTION: Command to install the @zenstackhq/server package using npm.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/next.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/server\n```\n\n----------------------------------------\n\nTITLE: Implementing RBAC Authorization in RedwoodJS GraphQL\nDESCRIPTION: GraphQL schema definition showing role-based access control for post mutations using the @requireAuth directive.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/redwood-auth/index.md#2025-04-10_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createPost(input: CreatePostInput!): Post! @requireAuth(roles: [\"admin\"])\n  updatePost(id: Int!, input: UpdatePostInput!): Post! @requireAuth(roles: [\"admin\"])\n  deletePost(id: Int!): Post! @requireAuth(roles: [\"admin\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Enhancer Code with Custom Output Directory\nDESCRIPTION: Command that generates enhancer code as TypeScript files (without compiling to JavaScript) to a custom output directory by combining the --no-compile and --output flags.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/enhancer.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nzenstack generate --no-compile --output src/lib/zenstack\n```\n\n----------------------------------------\n\nTITLE: Generating ZenStack JavaScript Modules\nDESCRIPTION: Command to generate JavaScript modules that support the enforcement of ZenStack policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/refine-dev-backend/index.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\n```\n\n----------------------------------------\n\nTITLE: Generated PostSchema Zod Definition\nDESCRIPTION: Generated Zod schema for validating the Post model, including all scalar fields, foreign key fields, and relation fields with appropriate validation rules.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/zod.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst PostSchema = z.object({\n  id: z.number(),\n  title: z.string().min(10).max(255),\n  published: z.boolean(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  author: z.record(z.unknown()).optional(),\n  authorId: z.number(),\n});\n```\n\n----------------------------------------\n\nTITLE: Post Publication Control\nDESCRIPTION: Implementation of post publication toggle with role-based authorization\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/nest-api/index.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Put('publish/:id')\nasync togglePublishPost(@Param('id') id: string): Promise<PostModel> {\n  if (this.currentUser?.role !== 'EDITOR') {\n    throw new UnauthorizedException('You are not authorized to publish posts');\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client and Updating Database Schema\nDESCRIPTION: Commands to regenerate the Prisma client based on the ZenStack schema and synchronize the database schema with the updated models.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/cal-com-clone.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\nnpx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Querying User with Nested Posts in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the useFindUniqueUser hook to fetch a user along with their associated posts. This query would be invalidated if a new Post is created for the user.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/_invalidation.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseFindUniqueUser({ where: { id: userId }, include: { posts: true } });\n```\n\n----------------------------------------\n\nTITLE: Querying with Access Control With User Identity\nDESCRIPTION: Command for querying the RPC API with a user ID provided in a custom header, allowing access based on the defined access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/api/rpc/list/findFirst\" -H \"x-user-id: 1\"\n```\n\n----------------------------------------\n\nTITLE: Creating CRUD API Endpoints with ZenStack in Nuxt\nDESCRIPTION: Implementation of a catch-all API handler that mounts CRUD endpoints for all models with access policy enforcement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nuxt.mdx#2025-04-10_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { enhance } from '@zenstackhq/runtime';\nimport { createEventHandler } from '@zenstackhq/server/nuxt';\nimport { prisma } from '~/server/prisma';\n\nexport default createEventHandler({\n    getPrisma: async (event) => {\n        const session = await useAuthSession(event);\n        return enhance(prisma, {\n            user: session.data.id ? { id: session.data.id } : undefined,\n        });\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma and ZenStack Dependencies\nDESCRIPTION: Command to install Prisma and ZenStack packages required for database management and access control in the application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/stackauth-multitenancy/index.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev prisma zenstack\nnpm install @prisma/client @zenstackhq/runtime\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack Server Package\nDESCRIPTION: Command to install the @zenstackhq/server package using npm.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/fastify.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/server\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Schema and Updating Database\nDESCRIPTION: Commands to generate Prisma schema from ZenStack model and update the database schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/backend.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate && npx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Installing @zenstackhq/tanstack-query Plugin\nDESCRIPTION: Command to install the @zenstackhq/tanstack-query plugin using npm.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/plugins/tanstack-query.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @zenstackhq/tanstack-query\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Project with T3 Stack\nDESCRIPTION: Command to create a new Next.js project using create-t3-app with Prisma, NextAuth, TailwindCSS and app router configuration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/next-app-router.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-t3-app@latest --prisma --nextAuth --tailwind --appRouter --CI my-blog-app\ncd my-blog-app\n```\n\n----------------------------------------\n\nTITLE: Defining Allow Attribute with String and Boolean Parameters in ZModel\nDESCRIPTION: Shows the declaration of an allow attribute for access control with String and Boolean parameters.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_11\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @@allow(_ operation: String, _ condition: Boolean)\n```\n\n----------------------------------------\n\nTITLE: Defining Allow Attribute with String and Boolean Parameters in ZModel\nDESCRIPTION: Shows the declaration of an allow attribute for access control with String and Boolean parameters.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_11\n\nLANGUAGE: zmodel\nCODE:\n```\nattribute @@allow(_ operation: String, _ condition: Boolean)\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with Access Control in ZenStack\nDESCRIPTION: This code snippet demonstrates how to define a User model in ZenStack with access control rules. It includes a rule that allows reading a user if they have at least one published post.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/next-chapter-1/index.md#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nmodel User {\n  id Int @id\n  posts[] Post\n  // user can be read if he has at least one published post\n  @@allow('read', posts?[published == true])\n}\n```\n\n----------------------------------------\n\nTITLE: Bytes String Format\nDESCRIPTION: Defines that binary data (Bytes type) is represented as Base64-encoded strings.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/server-adapters/api-handlers/_data_type_serialization.md#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nBytes\n```\n\n----------------------------------------\n\nTITLE: Accessing *-to-one Relations in ZenStack Policy Rules\nDESCRIPTION: This snippet demonstrates how to access *-to-one relations in ZenStack policy rules using dot notation. It shows a policy rule that allows updating a Todo if its related List is not private.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.4-relations.md#2025-04-10_snippet_0\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel List {\n    id Int\n    private Boolean\n}\n\nmodel Todo {\n    id Int\n    list List @relation(...)\n\n    // `list` references a to-one relation\n    @@allow('update', !list.private)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Project with ZenStack\nDESCRIPTION: The 'init' command initializes an existing project to use ZenStack. It supports customizing the Prisma schema location and package manager.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/cli.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nzenstack init [options] [path]\n```\n\n----------------------------------------\n\nTITLE: LLM-Generated Charts.js Configuration\nDESCRIPTION: Example output from the LLM when generating a Charts.js configuration for visualizing the query results as a bar chart with appropriate styling and options.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/llm-acl/index.md#2025-04-10_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"bar\",\n  \"data\": {\n    \"labels\": [\"Electronics\", \"Furniture\", \"Outdoor\"],\n    \"datasets\": [\n      {\n        \"label\": \"Subtotal\",\n        \"data\": [1099, 2199, 307],\n        \"backgroundColor\": [\"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\",\"rgba(255, 206, 86, 0.2)\"],\n        \"borderColor\": [\"rgba(255, 99, 132, 1)\",\"rgba(54, 162, 235, 1)\",\"rgba(255, 206, 86, 1)\"],\n        \"borderWidth\": 1\n      }\n    ]\n  },\n  \"options\": {\n    \"scales\": {\n      \"yAxes\": [{\n        \"ticks\": {\n          \"beginAtZero\": true\n        }\n      }]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Schema and Pushing to Database\nDESCRIPTION: Commands to generate the Prisma schema from ZModel and push the schema to the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/stackauth-multitenancy/index.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# The `zenstack generate` command generates the \"prisma/schema.prisma\" file and runs \"prisma generate\"\nnpx zenstack generate\nnpx prisma db push\n```\n\n----------------------------------------\n\nTITLE: Adding RESTful API Handler to Express\nDESCRIPTION: Code snippet to add a RESTful API flavor to the Express application using the ZenStack middleware with a REST handler. This mounts the API at /api/rest.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport RESTHandler from '@zenstackhq/server/api/rest';\n\napp.use('/api/rest', \n    ZenStackMiddleware({ \n        handler: RESTHandler({ endpoint: 'http://localhost:3000/api/rest' }),\n        getPrisma: (req) => enhance(prisma, { user: getUser(req) })\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema Definition\nDESCRIPTION: Database schema definition for User and Post models using Prisma schema language\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/nest-api/index.md#2025-04-10_snippet_1\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  email String @unique\n  name String?\n  role String @default(\"USER\") // USER or EDITOR\n  posts Post[]\n}\n\nmodel Post {\n  id Int @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title String\n  content String?\n  published Boolean @default(false)\n  author User? @relation(fields: [authorId], references: [id])\n  authorId Int?\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Starting Point Repository for the Todo Project\nDESCRIPTION: Command to clone the sample Todo project repository and check out the 'part1' branch to use as a starting point for exploring the plugin system.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part2/index.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch part1 https://github.com/zenstackhq/the-complete-guide-sample.git my-todo-app\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack Server and SWR Packages\nDESCRIPTION: Commands to install the required packages for ZenStack server integration and data fetching with SWR.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nextjs.mdx#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/server swr\nnpm install -D  @zenstackhq/swr\n```\n\n----------------------------------------\n\nTITLE: Testing Database Exposure with cURL in Bash\nDESCRIPTION: A bash command to test if your Supabase database is exposed to direct API requests. This command attempts to select all records from a database table using the Supabase REST API with the anonymous key.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/supabase-security.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl '{SUPABASE_PROJECT_URL}/rest/v1/{DATABASE_TABLE}?select=*' \\\n-H \"apikey: SUPABASE_ANON_KEY\" \\\n-H \"Authorization: Bearer SUPABASE_ANON_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Querying Users with ZenStack's Access Control Injection\nDESCRIPTION: This snippet shows how ZenStack injects access control rules into a simple Prisma query. It transforms a basic findFirst query into one that includes the access control condition.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/next-chapter-1/index.md#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ndb.user.findFirst()\n\n// becomes\n\ndb.user.findFirst({ where: { posts: { some: { published: true } } } })\n```\n\n----------------------------------------\n\nTITLE: Example of ZenStack generate with Default Settings\nDESCRIPTION: Command example showing how to generate artifacts with default settings using npx.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/cli.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack in a Project\nDESCRIPTION: Command to initialize ZenStack in the project, which creates a schema.zmodel file for modeling data and access policies.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/cal-com-clone.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Project with T3 App\nDESCRIPTION: Command to create a new Next.js project with Prisma, NextAuth, and TailwindCSS boilerplates using create-t3-app.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nextjs.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-t3-app@latest --prisma --nextAuth --tailwind --CI my-blog-app\ncd my-blog-app\n```\n\n----------------------------------------\n\nTITLE: Console Output from Accessing DMMF Attributes\nDESCRIPTION: The console output showing how ZenStack custom attributes are preserved in Prisma's DMMF documentation field. These are the same values that would be accessed in a Prisma generator.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/custom-attributes.mdx#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nuser model attribute: @@allow('create,read', true)\npassword field attribute: @password\n@omit\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma and ZenStack Dependencies\nDESCRIPTION: Command line instructions for installing Prisma ORM and ZenStack packages. These packages are needed for database schema management and access control implementation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/clerk-multitenancy/index.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev prisma zenstack\nnpm install @prisma/client @zenstackhq/runtime\n```\n\n----------------------------------------\n\nTITLE: Testing Access Policy with Authenticated Request\nDESCRIPTION: Curl command to test the enhanced Prisma Client's access policy by providing a user ID header, which should return the List owned by that user.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/2-server-adapters.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/api/rpc/list/findFirst\" -H \"x-user-id: 1\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Nuxt project with degit\nDESCRIPTION: Commands to create a new Nuxt project from a template using degit, install dependencies, and start the development server.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nuxt.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit nuxt/examples/auth/local my-nuxt-blog\ncd my-nuxt-blog\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server after project initialization.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nextjs.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing the zenstack-markdown Package via NPM\nDESCRIPTION: Command to install the pre-built zenstack-markdown package that provides the functionality demonstrated in the previous snippets.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/code-as-doc/index.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D zenstack-markdown\n```\n\n----------------------------------------\n\nTITLE: Implementing check() Function in ZModel\nDESCRIPTION: The check() function verifies if the current user can perform a given operation on a field. It accepts a field reference and an optional operation string, and returns a Boolean result.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_21\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction check(field: FieldReference, operation String?): Boolean {}\n```\n\n----------------------------------------\n\nTITLE: Importing Content Components Dynamically in TypeScript\nDESCRIPTION: This snippet shows how to use TypeScript's import mechanism to dynamically import all content components from a separate file, enabling automatic component lookup.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/ocp/index.md#2025-04-10_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as ContentComponents from \"./content-components\";\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack Server and Tanstack Query\nDESCRIPTION: Command to install ZenStack server, Tanstack React Query, and ZenStack's Tanstack Query integration for automatic CRUD service generation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nextjs-app-router.mdx#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/server@latest @zenstackhq/tanstack-query@latest @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Configuring RedwoodJS CLI Plugins\nDESCRIPTION: YAML configuration in redwood.toml to enable the ZenStack CLI plugin.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/redwood.md#2025-04-10_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n[[experimental.cli.plugins]]\npackage = \"@zenstackhq/redwood\"\nenabled = true\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with create-t3-app\nDESCRIPTION: Command to scaffold a new Next.js application using create-t3-app with TypeScript, App Router, TailwindCSS, Prisma, and NextAuth.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/next-rsc-blog/index.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create t3-app@latest\n```\n\n----------------------------------------\n\nTITLE: API Request for Fetching Posts with User Authentication in ZenStack\nDESCRIPTION: cURL command to fetch posts for a specific user by setting the X-USER-ID header, demonstrating how access policies filter results.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-backend/index.md#2025-04-10_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\ncurl -H \"X-USER-ID: robin@prisma.io\" localhost:3000/api/post\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma and Generating Schema with Better-Auth CLI\nDESCRIPTION: This bash script installs Prisma dependencies and uses the Better-Auth CLI to generate the initial Prisma schema for the application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/better-auth/index.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D prisma\nnpm install @prisma/client\nnpx @better-auth/cli generate\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request to Test Supabase Database Access\nDESCRIPTION: A concrete example of a cURL command testing database exposure, showing the actual format of the Supabase project URL and anonymous key used in the request headers.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/supabase-security.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://jypbzsozorjnogibmfhu.supabase.co/rest/v1/User?select=*' \\\n-H \"apikey: eyOiJIUzJhbGciI1...\" \\\n-H \"Authorization: Bearer eyOiJIUzJhbGciI1...\"\n```\n\n----------------------------------------\n\nTITLE: Revoking Supabase Anonymous Access Privileges\nDESCRIPTION: This SQL snippet shows how to revoke all privileges from the 'anon' role to prevent unauthenticated access to the Supabase database. It includes revoking current privileges and altering default privileges for future objects in the public schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/supabase-security.md#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Revoke current privileges\nREVOKE SELECT ON ALL TABLES IN SCHEMA public FROM anon;\nREVOKE USAGE ON ALL SEQUENCES IN SCHEMA public FROM anon;\nREVOKE EXECUTE ON ALL FUNCTIONS IN SCHEMA public FROM anon;\n\n-- Revoke default privileges for future objects\nALTER DEFAULT PRIVILEGES IN SCHEMA public REVOKE ALL ON TABLES FROM anon;\nALTER DEFAULT PRIVILEGES IN SCHEMA public REVOKE ALL ON FUNCTIONS FROM anon;\nALTER DEFAULT PRIVILEGES IN SCHEMA public REVOKE ALL ON SEQUENCES FROM anon;\n```\n\n----------------------------------------\n\nTITLE: Cloning the Sample Project Repository with Git\nDESCRIPTION: This command clones the 'the-complete-guide-sample' repository, specifically the 'part2' branch, to continue the Todo project development.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/index.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch part2 https://github.com/zenstackhq/the-complete-guide-sample.git my-todo-app\n```\n\n----------------------------------------\n\nTITLE: Enhancing PrismaClient with User Authentication\nDESCRIPTION: Example of using the enhance API to create an enhanced PrismaClient with user authentication information for access policy enforcement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/authentication/custom.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await getCurrentUser(); // your implementation\nconst db = enhance(prisma, { user });\n```\n\n----------------------------------------\n\nTITLE: Initializing Express.js Project with TypeScript\nDESCRIPTION: Sets up a new Express.js project with TypeScript support, including necessary dependencies and configuration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir express-petstore\ncd express-petstore\nnpm init -y\nnpm install express\nnpm install -D typescript tsx @types/node @types/express\nnpx tsc --init\n```\n\n----------------------------------------\n\nTITLE: Cloning and Checking Out Sample Project for ZenStack Guide\nDESCRIPTION: Command to clone the sample project repository for the ZenStack guide and check out the 'part1' branch, which serves as the starting point for exploring the plugin system.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part2/index.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch v1-part1 https://github.com/zenstackhq/the-complete-guide-sample.git my-todo-app\n```\n\n----------------------------------------\n\nTITLE: Creating a SvelteKit Project with npm\nDESCRIPTION: Command to initialize a new SvelteKit project with a skeleton template, TypeScript support, ESLint, and Prettier.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/sveltekit.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create svelte@latest my-blog-app\n```\n\n----------------------------------------\n\nTITLE: Auth Function Evaluation Examples\nDESCRIPTION: Examples demonstrating how auth() function evaluates in different scenarios when auth() is null\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/under-the-hood.md#2025-04-10_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n1. auth() == null -> true\n2. auth() != null -> false\n3. auth().name == null -> true\n4. auth().age > 0 -> false\n5. auth().age < 0 -> false\n```\n\n----------------------------------------\n\nTITLE: Adding Relation Fields to User and Space Models\nDESCRIPTION: Schema updates to add relationship fields in User and Space models for many-to-many relationship.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nmodel User\n{\n  ...\n  spaces SpaceUser[]\n  ...\n}\n\nmodel Space\n{\n  ...\n  members SpaceUser[]\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @zenstackhq/trpc Plugin\nDESCRIPTION: Command to install the @zenstackhq/trpc plugin as a development dependency in a Node.js project.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/plugins/trpc.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @zenstackhq/trpc\n```\n\n----------------------------------------\n\nTITLE: Using ZenStack REPL for Database Queries\nDESCRIPTION: Commands to enter ZenStack's REPL mode and execute queries against the database, demonstrating how to fetch user and space data with relations.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack repl\n```\n\n----------------------------------------\n\nTITLE: Disabling ZenStack Telemetry with Environment Variable\nDESCRIPTION: This command demonstrates how to turn off telemetry collection in ZenStack by setting the DO_NOT_TRACK environment variable to 1 when running the CLI commands.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/guides/telemetry.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDO_NOT_TRACK=1 npx zenstack ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Blog Home Page with Next.js and ZenStack\nDESCRIPTION: A comprehensive implementation of a blog home page using Next.js with NextAuth for authentication and ZenStack-generated hooks for data access. The page allows users to sign in/out, view posts, and perform CRUD operations on posts with automatic access policy enforcement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nextjs.mdx#2025-04-10_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Post } from '@prisma/client';\nimport { type NextPage } from 'next';\nimport { signOut, useSession } from 'next-auth/react';\nimport Link from 'next/link';\nimport Router from 'next/router';\nimport { useFindManyPost, useMutatePost } from '../lib/hooks';\n\ntype AuthUser = { id: string; email?: string | null };\n\nconst Welcome = ({ user }: { user: AuthUser }) => {\n    async function onSignout() {\n        await signOut({ redirect: false });\n        await Router.push('/signin');\n    }\n    return (\n        <div className=\"flex gap-4\">\n            <h3 className=\"text-lg\">Welcome back, {user?.email}</h3>\n            <button className=\"text-gray-300 underline\" onClick={() => void onSignout()}>\n                Signout\n            </button>\n        </div>\n    );\n};\n\nconst SigninSignup = () => {\n    return (\n        <div className=\"flex gap-4 text-2xl\">\n            <Link href=\"/signin\" className=\"rounded-lg border px-4 py-2\">\n                Signin\n            </Link>\n            <Link href=\"/signup\" className=\"rounded-lg border px-4 py-2\">\n                Signup\n            </Link>\n        </div>\n    );\n};\n\nconst Posts = ({ user }: { user: AuthUser }) => {\n    // Post crud hooks\n    const { createPost, updatePost, deletePost } = useMutatePost();\n\n    // list all posts that're visible to the current user, together with their authors\n    const { data: posts } = useFindManyPost({\n        include: { author: true },\n        orderBy: { createdAt: 'desc' },\n    });\n\n    async function onCreatePost() {\n        const title = prompt('Enter post title');\n        if (title) {\n            await createPost({ data: { title, authorId: user.id } });\n        }\n    }\n\n    async function onTogglePublished(post: Post) {\n        await updatePost({\n            where: { id: post.id },\n            data: { published: !post.published },\n        });\n    }\n\n    async function onDelete(post: Post) {\n        await deletePost({ where: { id: post.id } });\n    }\n\n    return (\n        <div className=\"container flex flex-col text-white\">\n            <button className=\"rounded border border-white p-2 text-lg\" onClick={() => void onCreatePost()}>\n                + Create Post\n            </button>\n\n            <ul className=\"container mt-8 flex flex-col gap-2\">\n                {posts?.map((post) => (\n                    <li key={post.id} className=\"flex items-end justify-between gap-4\">\n                        <p className={`text-2xl ${!post.published ? 'text-gray-400' : ''}`}>\n                            {post.title}\n                            <span className=\"text-lg\"> by {post.author.email}</span>\n                        </p>\n                        <div className=\"flex w-32 justify-end gap-1 text-left\">\n                            <button className=\"underline\" onClick={() => void onTogglePublished(post)}>\n                                {post.published ? 'Unpublish' : 'Publish'}\n                            </button>\n                            <button className=\"underline\" onClick={() => void onDelete(post)}>\n                                Delete\n                            </button>\n                        </div>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nconst Home: NextPage = () => {\n    const { data: session, status } = useSession();\n\n    if (status === 'loading') return <p>Loading ...</p>;\n\n    return (\n        <main className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\">\n            <div className=\"container flex flex-col items-center justify-center gap-12 px-4 py-16 text-white\">\n                <h1 className=\"text-5xl font-extrabold\">My Awesome Blog</h1>\n\n                {session?.user ? (\n                    // welcome & blog posts\n                    <div className=\"flex flex-col\">\n                        <Welcome user={session.user} />\n                        <section className=\"mt-10\">\n                            <Posts user={session.user} />\n                        </section>\n                    </div>\n                ) : (\n                    // if not logged in\n                    <SigninSignup />\n                )}\n            </div>\n        </main>\n    );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Blog Home Page with Next.js and ZenStack\nDESCRIPTION: A comprehensive implementation of a blog home page using Next.js with NextAuth for authentication and ZenStack-generated hooks for data access. The page allows users to sign in/out, view posts, and perform CRUD operations on posts with automatic access policy enforcement.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nextjs.mdx#2025-04-10_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Post } from '@prisma/client';\nimport { type NextPage } from 'next';\nimport { signOut, useSession } from 'next-auth/react';\nimport Link from 'next/link';\nimport Router from 'next/router';\nimport { useFindManyPost, useMutatePost } from '../lib/hooks';\n\ntype AuthUser = { id: string; email?: string | null };\n\nconst Welcome = ({ user }: { user: AuthUser }) => {\n    async function onSignout() {\n        await signOut({ redirect: false });\n        await Router.push('/signin');\n    }\n    return (\n        <div className=\"flex gap-4\">\n            <h3 className=\"text-lg\">Welcome back, {user?.email}</h3>\n            <button className=\"text-gray-300 underline\" onClick={() => void onSignout()}>\n                Signout\n            </button>\n        </div>\n    );\n};\n\nconst SigninSignup = () => {\n    return (\n        <div className=\"flex gap-4 text-2xl\">\n            <Link href=\"/signin\" className=\"rounded-lg border px-4 py-2\">\n                Signin\n            </Link>\n            <Link href=\"/signup\" className=\"rounded-lg border px-4 py-2\">\n                Signup\n            </Link>\n        </div>\n    );\n};\n\nconst Posts = ({ user }: { user: AuthUser }) => {\n    // Post crud hooks\n    const { createPost, updatePost, deletePost } = useMutatePost();\n\n    // list all posts that're visible to the current user, together with their authors\n    const { data: posts } = useFindManyPost({\n        include: { author: true },\n        orderBy: { createdAt: 'desc' },\n    });\n\n    async function onCreatePost() {\n        const title = prompt('Enter post title');\n        if (title) {\n            await createPost({ data: { title, authorId: user.id } });\n        }\n    }\n\n    async function onTogglePublished(post: Post) {\n        await updatePost({\n            where: { id: post.id },\n            data: { published: !post.published },\n        });\n    }\n\n    async function onDelete(post: Post) {\n        await deletePost({ where: { id: post.id } });\n    }\n\n    return (\n        <div className=\"container flex flex-col text-white\">\n            <button className=\"rounded border border-white p-2 text-lg\" onClick={() => void onCreatePost()}>\n                + Create Post\n            </button>\n\n            <ul className=\"container mt-8 flex flex-col gap-2\">\n                {posts?.map((post) => (\n                    <li key={post.id} className=\"flex items-end justify-between gap-4\">\n                        <p className={`text-2xl ${!post.published ? 'text-gray-400' : ''}`}>\n                            {post.title}\n                            <span className=\"text-lg\"> by {post.author.email}</span>\n                        </p>\n                        <div className=\"flex w-32 justify-end gap-1 text-left\">\n                            <button className=\"underline\" onClick={() => void onTogglePublished(post)}>\n                                {post.published ? 'Unpublish' : 'Publish'}\n                            </button>\n                            <button className=\"underline\" onClick={() => void onDelete(post)}>\n                                Delete\n                            </button>\n                        </div>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nconst Home: NextPage = () => {\n    const { data: session, status } = useSession();\n\n    if (status === 'loading') return <p>Loading ...</p>;\n\n    return (\n        <main className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]\">\n            <div className=\"container flex flex-col items-center justify-center gap-12 px-4 py-16 text-white\">\n                <h1 className=\"text-5xl font-extrabold\">My Awesome Blog</h1>\n\n                {session?.user ? (\n                    // welcome & blog posts\n                    <div className=\"flex flex-col\">\n                        <Welcome user={session.user} />\n                        <section className=\"mt-10\">\n                            <Posts user={session.user} />\n                        </section>\n                    </div>\n                ) : (\n                    // if not logged in\n                    <SigninSignup />\n                )}\n            </div>\n        </main>\n    );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Authenticated Pet Listing\nDESCRIPTION: Sample JSON response for pet listing with authentication, showing all available pets plus the ones purchased by the authenticated user, with the orderId field indicating which pets are sold.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": \"luna\",\n        \"createdAt\": \"2023-03-16T04:53:26.203Z\",\n        \"updatedAt\": \"2023-03-16T05:59:04.586Z\",\n        \"name\": \"Luna\",\n        \"category\": \"kitten\",\n        \"orderId\": \"clfapaykz0002vhwr634sd9l7\"\n    },\n    {\n        \"id\": \"max\",\n        \"createdAt\": \"2023-03-16T04:53:26.205Z\",\n        \"updatedAt\": \"2023-03-16T04:53:26.205Z\",\n        \"name\": \"Max\",\n        \"category\": \"doggie\"\n    },\n    {\n        \"id\": \"cooper\",\n        \"createdAt\": \"2023-03-16T04:53:26.206Z\",\n        \"updatedAt\": \"2023-03-16T04:53:26.206Z\",\n        \"name\": \"Cooper\",\n        \"category\": \"reptile\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a new Prisma project with Express.js\nDESCRIPTION: Commands to create a new Prisma project using a sample Express.js template, install dependencies, and initialize the database with seed data.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/backend.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit prisma/prisma-examples/typescript/rest-express my-blog-app\ncd my-blog-app\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma db push\nnpx prisma db seed\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Response for Successful Todo List Creation\nDESCRIPTION: Example output from REPL showing the result of successfully creating a Todo List.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  id: 1,\n  createdAt: 2023-11-08T04:38:53.385Z,\n  updatedAt: 2023-11-08T04:38:53.385Z,\n  spaceId: 1,\n  ownerId: 2,\n  title: 'Grocery',\n  private: false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting NEXTAUTH_SECRET Environment Variable\nDESCRIPTION: Configuration for the NEXTAUTH_SECRET environment variable required for JWT session encryption in NextAuth.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nNEXTAUTH_SECRET = abc123;\n```\n\n----------------------------------------\n\nTITLE: Importing enhance API from Custom Output Location\nDESCRIPTION: Example of importing the enhance API directly from a custom output location specified during code generation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/upgrade.md#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enhance } from './.zenstack/enhance';\n\nconst db = enhance(...);\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Client with tsx\nDESCRIPTION: Executes the TypeScript client using tsx to test the API calls.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nnpx tsx client.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Booking Index Page in React/TSX\nDESCRIPTION: A simple React component that renders a placeholder message when no booking is selected.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/cal-com-clone.mdx#2025-04-10_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function NoteIndexPage() {\n    return <p>No booking selected. Select one on the left.</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack Project with Specific Package Manager\nDESCRIPTION: Shows how to initialize a ZenStack project while specifying a particular package manager using the '--package-manager' option.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/existing-prisma.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init --package-manager pnpm\n```\n\n----------------------------------------\n\nTITLE: Implementing Many-to-Many Relations in ZModel\nDESCRIPTION: Demonstrates how to create a many-to-many relationship between Space and User models using a Membership join model. Includes unique constraint to prevent duplicate memberships.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/zmodel-language.md#2025-04-10_snippet_40\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Space {\n    id String @id\n    // one-to-many with the \"join-model\"\n    members Membership[]\n}\n\n// Membership is the \"join-model\" between User and Space\nmodel Membership {\n    id String @id()\n\n    // one-to-many from Space\n    space Space @relation(fields: [spaceId], references: [id])\n    spaceId String\n\n    // one-to-many from User\n    user User @relation(fields: [userId], references: [id])\n    userId String\n\n    // a user can be member of a space for only once\n    @@unique([userId, spaceId])\n}\n\nmodel User {\n    id String @id\n    // one-to-many with the \"join-model\"\n    membership Membership[]\n}\n```\n\n----------------------------------------\n\nTITLE: Using ZenStack info Command\nDESCRIPTION: Command for retrieving information about installed ZenStack and related packages, with argument details.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/cli.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nzenstack info [options] [path]\n```\n\n----------------------------------------\n\nTITLE: Installing Swagger UI and Express JSDoc Swagger Dependencies\nDESCRIPTION: Installs necessary dependencies for serving Swagger UI and generating additional API documentation from JSDoc comments.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nnpm install swagger-ui-express express-jsdoc-swagger\nnpm install -D @types/swagger-ui-express\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack Next.js Dependencies\nDESCRIPTION: Command to install required ZenStack packages for Next.js integration\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/next @zenstackhq/swr\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Secret in Environment Variables\nDESCRIPTION: Setting up the JWT secret key in a .env file, which will be used to sign and verify JWT tokens for authentication. A strong secret should be used in production environments.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/openapi/index.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nJWT_SECRET=abc123\n```\n\n----------------------------------------\n\nTITLE: Displaying pnpm Project Structure with ZenStack (Bash)\nDESCRIPTION: This bash snippet shows the directory structure of a pnpm project using ZenStack, highlighting the differences in node_modules organization compared to npm. It demonstrates where ZenStack generates its .zenstack folder and how pnpm uses symbolic links.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/code-legacy/index.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n▸ apps\n▾ common\n    package.json\n  ▾ node_modules\n    ▸ @zenstackhq/runtime\n    ▸ .zenstack\n    ...\npnpm-workspace.yaml\npnpm-lock.yaml\n▾ node_modules\n    ▾ .pnpm\n        ▸ @zenstackhq+runtime@1.0.0-alpha.62_@prisma+client@4.11.0\n            ▸ node_modules\n    ...\n  ...\n```\n\n----------------------------------------\n\nTITLE: Using ZenStack info Command\nDESCRIPTION: Command for retrieving information about installed ZenStack and related packages, with argument details.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/cli.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nzenstack info [options] [path]\n```\n\n----------------------------------------\n\nTITLE: Error Message for Dynamic Module Loading in Edge Runtime\nDESCRIPTION: Sample error message that occurs when trying to dynamically load modules in edge runtime environments, which is a limitation when adapting applications for edge deployment.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/adapt-to-edge/index.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nError: Dynamic require of \"[Module Name]\" is not supported.\n```\n\n----------------------------------------\n\nTITLE: Deploying Prisma Schema Migrations to Production\nDESCRIPTION: Command to apply existing migration records to the database in non-development environments like staging or production.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/0-prisma.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate deploy\n```\n\n----------------------------------------\n\nTITLE: Implementing Firebase Security Rules for Article Access\nDESCRIPTION: Google Firebase security rules that control read access to articles based on ACL entries for users and groups, using a helper function to check authorization.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/how-to-authz/index.md#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Matches any document in the 'articles' collection\n    match /articles/{articleId} {\n      // Allows read access if an ACL entry exists that grants read access to this user or a group they are part of\n      allow read: if isUserAuthorizedToRead(articleId);\n    }\n\n    // Helper function to check if a user is authorized to read an article\n    function isUserAuthorizedToRead(articleId) {\n      // Check if there's an ACL entry for this user and article with read access\n      let userAcl = exists(/databases/$(database)/documents/accessControlList/$(request.auth.uid) + '_' + articleId);\n      if (userAcl) return true;\n\n      // If not, check each group the user is part of to see if any have read access\n      let groups = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.groups;\n      for (let group in groups) {\n        let groupAcl = exists(/databases/$(database)/documents/accessControlList/$(group) + '_' + articleId);\n        if (groupAcl) return true;\n      }\n      return false;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Remix Project\nDESCRIPTION: Command to create a new Remix project using the indie-stack template with TypeScript support.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/remix-run.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-remix@latest --template remix-run/indie-stack my-blog-app\ncd my-blog-app\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Prisma Client for Database Operations\nDESCRIPTION: Example demonstrating how to use the Prisma client to perform database operations including creating users, creating related records, querying with filters, and working with relations. Shows the type-safety benefits of Prisma.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part1/0-prisma.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient();\n\n// create a user\nawait prisma.user.create({\n    data: { email: 'user1@abc.com' }\n});\n\n// create a user together with two related posts\nawait prisma.user.create({ \n    data: {\n        email: 'user2@abc.com',\n        posts: {\n            create: [\n                { title: 'Post 1' },\n                { title: 'Post 2' }\n            ]\n        }\n    }\n});\n\n// find posts with title containing some text, and return the author of each post together\nconst posts = prisma.post.findMany({\n    where: { title: { contains: 'ZenStack' } },\n    include: { author: true }\n});\n\n// here the `posts` is smartly inferred to be typed `Array<Post & { author: User }>`\nconsole.log(posts[0].author.email);\n```\n\n----------------------------------------\n\nTITLE: Getting ZenStack Installation Information\nDESCRIPTION: The 'info' command retrieves information about installed ZenStack and related packages for a specific project path.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/cli.md#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nzenstack info [options] [path]\n```\n\n----------------------------------------\n\nTITLE: Paging and Limiting Results in PostgREST\nDESCRIPTION: Example showing how to implement pagination in PostgREST queries by specifying limit and offset parameters to control the number of results returned and their starting position.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/postgrest.mdx#2025-04-10_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// Get 15 users starting at offset 30\nGET /user?limit=15&offset=30\n```\n\n----------------------------------------\n\nTITLE: ZenStack CLI Output with Markdown Plugin\nDESCRIPTION: The console output from ZenStack CLI showing successful execution of all plugins including the Markdown plugin.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part2/3-writing-plugins.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n⌛️ ZenStack CLI v1.3.1, running plugins\n✔ Running plugin Prisma\n✔ Running plugin Model Metadata\n✔ Running plugin Access Policy\n✔ Running plugin Zod\n✔ Running plugin Markdown\n\n👻 All plugins completed successfully!\nDon't forget to restart your dev server to let the changes take effect.\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack Project with Custom Prisma Schema Location\nDESCRIPTION: Demonstrates how to initialize a ZenStack project when the Prisma schema is in a non-standard location using the '--prisma' option.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/existing-prisma.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init --prisma prisma/my.schema\n```\n\n----------------------------------------\n\nTITLE: Example of ZenStack init with Default Settings\nDESCRIPTION: Command example showing how to initialize the current folder with default settings using npx.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/cli.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack init\n```\n\n----------------------------------------\n\nTITLE: Getting ZenStack Installation Information\nDESCRIPTION: The 'info' command retrieves information about installed ZenStack and related packages for a specific project path.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/cli.md#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nzenstack info [options] [path]\n```\n\n----------------------------------------\n\nTITLE: Example of ZenStack init with Default Settings\nDESCRIPTION: Command example showing how to initialize the current folder with default settings using npx.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/cli.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack init\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify for ZenStack deployment\nDESCRIPTION: TOML configuration for Netlify to include the .zenstack folder in the deployment of a RedwoodJS project using ZenStack.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/redwood.md#2025-04-10_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[functions]\n  included_files = [\"node_modules/.zenstack/*\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing a TypeScript Project with try-prisma\nDESCRIPTION: Command to create a simple TypeScript CLI project using try-prisma utility and initialize it for ZenStack.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/2-cli.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx try-prisma@latest -p . -n my-todo-app -t typescript/script --install npm\ncd my-todo-app\n```\n\n----------------------------------------\n\nTITLE: Deploying Website with SSH\nDESCRIPTION: Command to deploy the website using SSH authentication method.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/README.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true pnpm deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Helper Functions for ZenStack-enhanced Prisma Client\nDESCRIPTION: Implements helper functions to get a ZenStack-enhanced Prisma client bound to the current user identity.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/backend.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Request } from 'express';\nimport { enhance } from '@zenstackhq/runtime';\n\nfunction getUserId(req: Request) {\n    return parseInt(req.header('X-USER-ID')!);\n}\n\n// Gets a Prisma client bound to the current user identity\nfunction getPrisma(req: Request) {\n    const userId = getUserId(req);\n    const user = Number.isNaN(userId) ? undefined : { id: userId };\n    return enhance(prisma, { user });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ZenStack Plugin for React Query Hooks Generation\nDESCRIPTION: A ZModel configuration snippet that sets up the @zenstackhq/tanstack-query plugin to automatically generate React Query hooks for each model defined in the schema.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/react-table/index.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nplugin hooks {\n  provider = '@zenstackhq/tanstack-query'\n  target = 'react'\n  output = 'src/hooks'\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TanStack Query Hooks\nDESCRIPTION: Command to run the ZenStack generator which will create TanStack Query hooks based on the schema configuration.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/quick-start/nuxt.mdx#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack generate\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Data Access Layer in Remix\nDESCRIPTION: Server-side function to fetch posts using the enhanced Prisma client. The access policies defined in the ZModel automatically filter posts based on user authorization.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/remix-run.mdx#2025-04-10_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport type { User } from '@prisma/client';\nimport { getEnhancedPrisma } from '~/db.server';\n\nexport function getPosts({ userId }: { userId: User['id'] }) {\n    return getEnhancedPrisma(userId).post.findMany({\n        orderBy: { updatedAt: 'desc' },\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client\nDESCRIPTION: Command to generate the type-safe Prisma Client based on your schema definition. This creates the @prisma/client package that you can import in your application.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/0-prisma.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Updating Post Creation API with ZenStack\nDESCRIPTION: Modifies the post creation API to use the current user's ID instead of passing it in the request body.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/backend.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(`/post`, async (req, res) => {\n    const { title, content } = req.body;\n    const result = await prisma.post.create({\n        data: { title, content },\n    });\n    res.json(result);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Homepage Component with Session Display\nDESCRIPTION: A simple Next.js page component that displays the current user's email using NextAuth session data.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/3-auth-ui.md#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useSession } from \"next-auth/react\";\n\nexport default function Home() {\n  const { data: session } = useSession();\n  return (\n    <div className=\"flex h-screen w-screen items-center justify-center\">\n      {session?.user && <h1>Welcome {session?.user?.email}</h1>}\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack Project\nDESCRIPTION: Command to initialize a new ZenStack project that extends Prisma ORM functionality\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/next-rsc-blog/index.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init\n```\n\n----------------------------------------\n\nTITLE: Deploying Website without SSH\nDESCRIPTION: Command to deploy the website using GitHub username for authentication. This is useful when deploying to GitHub Pages, as it builds the website and pushes to the 'gh-pages' branch.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/README.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> pnpm deploy\n```\n\n----------------------------------------\n\nTITLE: Seeding Data Command for ZenStack SaaS Backend\nDESCRIPTION: Command to seed sample data for testing the SaaS backend with predefined users, organizations, and posts.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-backend/index.md#2025-04-10_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nnpm run seed\n```\n\n----------------------------------------\n\nTITLE: Initializing ZenStack in a Remix Project\nDESCRIPTION: Command to initialize ZenStack in the Remix project, which prepares the project for using ZenStack's features.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/remix-run.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init\n```\n\n----------------------------------------\n\nTITLE: Checking for Anonymous User in Policy Rules\nDESCRIPTION: Example showing how to check for anonymous users in policy rules using auth() == null condition.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part1/4-access-policy/4.3-current-user.md#2025-04-10_snippet_6\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel Post {\n    ...\n\n    // allow all login users to read\n    @@allow('read', auth() != null)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack Server Package\nDESCRIPTION: Command to install the @zenstackhq/server package using npm.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/reference/server-adapters/sveltekit.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zenstackhq/server\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js Project with npx\nDESCRIPTION: Command to create a new Next.js project using create-next-app, where the user will be prompted to choose TypeScript, TailwindCSS, and App Router.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/form-validation/index.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n```\n\n----------------------------------------\n\nTITLE: JSON response for List query with serializable fields\nDESCRIPTION: This JSON response shows the result of querying a List with only JSON-serializable fields (id and title). The response is simple and doesn't include any serialization metadata.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part3/3-serialization.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"id\":1,\n        \"title\":\"Grocery\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for OpenAPI Documentation\nDESCRIPTION: Command to install the OpenAPI plugin and Swagger UI dependencies required for API documentation.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part3/5-documentation.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @zenstackhq/openapi\nnpm install swagger-ui-express\nnpm install -D @types/swagger-ui-express\n```\n\n----------------------------------------\n\nTITLE: Generating UUID in ZModel\nDESCRIPTION: Generates a globally unique identifier based on the UUID spec.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/reference/zmodel-language.md#2025-04-10_snippet_29\n\nLANGUAGE: zmodel\nCODE:\n```\nfunction uuid(): String {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Home Page with Space Listing\nDESCRIPTION: Next.js page component for displaying user spaces with server-side data fetching\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/saas-demo.mdx#2025-04-10_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Space } from '@prisma/client';\nimport Spaces from '../components/Spaces';\nimport WithNavBar from '../components/WithNavBar';\nimport type { GetServerSideProps, NextPage } from 'next';\nimport Link from 'next/link';\nimport { getEnhancedPrisma } from '../server/enhanced-db';\nimport { useCurrentUser } from '../lib/context';\nimport { useSession } from 'next-auth/react';\nimport { useRouter } from 'next/router';\n\ntype Props = {\n    spaces: Space[];\n};\n\nconst Home: NextPage<Props> = ({ spaces }) => {\n    const user = useCurrentUser();\n    const router = useRouter();\n    const { status } = useSession();\n\n    if (status === 'unauthenticated') {\n        void router.push('/signin');\n        return <></>;\n    }\n\n    return (\n        <WithNavBar>\n            {user && (\n                <div className=\"mt-8 flex w-full flex-col items-center text-center\">\n                    <h1 className=\"text-2xl text-gray-800\">Welcome {user.name || user.email}!</h1>\n\n                    <div className=\"w-full p-8\">\n                        <h2 className=\"mb-8 text-left text-lg text-gray-700 md:text-xl\">\n                            Choose a space to start, or{' '}\n                            <Link className=\"link-primary underline\" href=\"/create-space\">\n                                create a new one.\n                            </Link>\n                        </h2>\n                        <Spaces spaces={spaces} />\n                    </div>\n                </div>\n            )}\n        </WithNavBar>\n    );\n};\n\nexport const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {\n    const db = await getEnhancedPrisma(ctx);\n    const spaces = await db.space.findMany();\n    return {\n        props: { spaces },\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Installing ZenStack in NestJS Project\nDESCRIPTION: Command to install and initialize ZenStack in the NestJS project.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/quick-start/nestjs.mdx#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx zenstack@latest init\n```\n\n----------------------------------------\n\nTITLE: Installing DaisyUI for UI Components\nDESCRIPTION: Command to install DaisyUI as a development dependency for UI components.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D daisyui@latest\n```\n\n----------------------------------------\n\nTITLE: Installing DaisyUI for UI Components\nDESCRIPTION: Command to install DaisyUI as a development dependency for UI components.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D daisyui@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for ZenStack Runtime\nDESCRIPTION: Modifying Next.js configuration to exclude ZenStack runtime from server component bundling.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  experimental: {\n    serverComponentsExternalPackages: ['@zenstackhq/runtime']\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing ZenStack Initialization Component in JSX/MDX\nDESCRIPTION: Imports a custom component called ZenStackInit from a local markdown file and renders it within an info callout box. This pattern is common in documentation sites built with frameworks like Docusaurus where MDX allows embedding React components.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/_components/_zenstack-init-tips.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ZenStackInit from './_zenstack-init.md'\n\n::info\n\n<ZenStackInit />\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Rendering Todo Lists with React Server Components in TypeScript\nDESCRIPTION: This React Server Component fetches and displays todo lists for the current user using the enhanced PrismaClient. It demonstrates how access control is automatically applied when querying the database.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/stackauth-multitenancy/index.mdx#2025-04-10_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function TodoLists() {\n  const db = await getUserDb();\n\n  // enhanced PrismaClient automatically filters out\n  // the lists that the user doesn't have access to\n  const lists = await db.list.findMany({\n    orderBy: { updatedAt: \"desc\" },\n  });\n\n  return (\n    <div>\n      <div>\n        {/* client component for creating a new List */}\n        <CreateList />\n\n        <ul>\n          {lists?.map((list) => (\n            <Link href={`/lists/${list.id}`} key={list.id}>\n              <li>{list.title}</li>\n            </Link>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure (Bash)\nDESCRIPTION: This bash snippet shows the directory structure of a mono-repo project using pnpm. It illustrates the layout of packages, node_modules, and workspace configuration files.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/code-legacy/index.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n▸ apps\n▾ common\n    package.json\n  ▾ node_modules\n    ▸ zenstack\n    ▸ @zenstackhq/runtime\n    ...\npnpm-workspace.yaml\npnpm-lock.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot Access Rules in robots.txt\nDESCRIPTION: This robots.txt file defines access rules for web crawlers. It allows all user agents (crawlers) unrestricted access to the entire website by using the wildcard user-agent and the Allow directive.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/static/robots.txt#2025-04-10_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nUser-agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Creating NestJS Prisma Project\nDESCRIPTION: Command to create a new NestJS project with Prisma integration using the starter template\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/blog/nest-api/index.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx try-prisma@latest --template typescript/rest-nestjs\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start a local development server that opens a browser window. Changes to the site are reflected live without needing to restart the server.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Boolean Formula for Read Policy in Mermaid\nDESCRIPTION: Flowchart representation of the Boolean formula generated from the Post model's read policy, showing the OR relationship between published status and author identity.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/check-permission.md#2025-04-10_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  OR((OR)) --> A[\"[published] == true\"]\n  OR((OR)) --> B[\"[authorId] == context.user.id\"]\n```\n\n----------------------------------------\n\nTITLE: Boolean Formula for Read Policy in Mermaid\nDESCRIPTION: Flowchart representation of the Boolean formula generated from the Post model's read policy, showing the OR relationship between published status and author identity.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/check-permission.md#2025-04-10_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  OR((OR)) --> A[\"[published] == true\"]\n  OR((OR)) --> B[\"[authorId] == context.user.id\"]\n```\n\n----------------------------------------\n\nTITLE: Compiling the Next.js Project\nDESCRIPTION: Command to build and compile the Next.js project to verify correct setup.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/versioned_docs/version-1.x/the-complete-guide/part4/1-prepare-project.md#2025-04-10_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building Static Website Content\nDESCRIPTION: Command to generate static website content into the 'build' directory. The generated content can be served using any static contents hosting service.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm build\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with Triple Slash Comment Hack\nDESCRIPTION: Illustrates the use of triple slash comments in Prisma schema to add custom metadata for generators like TypeGraphQL.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/existing-prisma.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id Int @default(autoincrement()) @id\n  email String  @unique\n  /// @TypeGraphQL.omit(output: true, input: true)\n  password String\n  posts Post[]\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with Triple Slash Comment Hack\nDESCRIPTION: Illustrates the use of triple slash comments in Prisma schema to add custom metadata for generators like TypeGraphQL.\nSOURCE: https://github.com/zenstackhq/zenstack-docs/blob/main/docs/guides/existing-prisma.md#2025-04-10_snippet_3\n\nLANGUAGE: zmodel\nCODE:\n```\nmodel User {\n  id Int @default(autoincrement()) @id\n  email String  @unique\n  /// @TypeGraphQL.omit(output: true, input: true)\n  password String\n  posts Post[]\n}\n```"
  }
]