[
  {
    "owner": "dicedb",
    "repo": "dice",
    "content": "TITLE: Examples of SET Command Usage in DiceDB\nDESCRIPTION: Demonstrates various uses of the SET command, including setting simple key-value pairs, setting with expiration times, conditional updates, and retrieving values.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/SET.md#2025-04-05_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nlocalhost:7379> SET k 43\nOK OK\nlocalhost:7379> SET k 43 EX 10\nOK OK\nlocalhost:7379> SET k 43 PX 10000\nOK OK\nlocalhost:7379> SET k 43 EXAT 1772377267\nOK OK\nlocalhost:7379> SET k 43 PXAT 1772377267000\nOK OK\nlocalhost:7379> SET k 43 XX\nOK OK\nlocalhost:7379> SET k 43 NX\nOK (nil)\nlocalhost:7379> SET k 43 KEEPTTL\nOK OK\nlocalhost:7379> SET k 43 GET\nOK 43\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GET Command Usage in DiceDB\nDESCRIPTION: This example shows how to use the GET command in DiceDB. It demonstrates setting a key-value pair, retrieving an existing value, and attempting to get a non-existent key.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/GET.md#2025-04-05_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlocalhost:7379> SET k1 v1\nOK OK\nlocalhosthost:7379> GET k1\nOK v1\nlocalhosthost:7379> GET k2\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Key-Value Pairs Using GET Command in DiceDB\nDESCRIPTION: The GET command retrieves the value associated with a specified key. If the key doesn't exist, it returns (nil). This snippet demonstrates the syntax and usage of the GET command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/GET.md#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET key\n```\n\n----------------------------------------\n\nTITLE: DiceDB Watch Loop Implementation in Go\nDESCRIPTION: Function implementing real-time updates using DiceDB's ZRANGEWATCH command and broadcasting changes to connected clients via WebSocket.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/tutorials/realtime-leaderboard.mdx#2025-04-05_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc watchLoop() {\n    ctx := context.Background()\n\n    watchConn = client.WatchConn(ctx)\n    if watchConn == nil {\n        log.Fatal(\"failed to create watch connection\")\n        return\n    }\n\n    res, err := watchConn.ZRangeWatch(ctx, \"leaderboard\", \"0\", \"5\", \"REV\", \"WITHSCORES\")\n    if err != nil {\n        log.Println(\"failed to create watch connection:\", err)\n        return\n    }\n    watchTopics[res.Fingerprint] = \"global_leaderboard\"\n\n    watchCh = watchConn.Channel()\n\n    for {\n        select {\n        case msg := <-watchCh:\n            switch watchTopics[msg.Fingerprint] {\n            case \"global_leaderboard\":\n                var scores []Score\n                for _, z := range msg.Data.([]dicedb.Z) {\n                    scores = append(scores, Score{\n                        Name:  z.Member.(string),\n                        Score: int(z.Score),\n                    })\n                }\n\n                for _, conn := range connectedUsers {\n                    if err := conn.WriteJSON(scores); err != nil {\n                        log.Println(\"websocket write error:\", err)\n                    }\n                }\n            }\n        case <-ctx.Done():\n            return\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Syntax for SET Command in DiceDB\nDESCRIPTION: Defines the syntax for the SET command, including optional parameters for expiration time, conditional updates, and retrieval.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/SET.md#2025-04-05_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nSET key value [EX seconds] [PX milliseconds] [EXAT timestamp] [PXAT timestamp] [XX] [NX] [KEEPTTL]\n```\n\n----------------------------------------\n\nTITLE: HSET Command Examples\nDESCRIPTION: Examples of using the HSET command to set field values in a hash map, along with HGET commands to retrieve those values. Shows single and multiple field-value pair operations.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/HSET.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlocalhost:7379> HSET k1 f1 v1\nOK 1\nlocalhost:7379> HSET k1 f1 v1 f2 v2 f3 v3\nOK 2\nlocalhost:7379> HGET k1 f1\nOK v1\nlocalhost:7379> HGET k2 f1\nOK (nil)\n```\n\n----------------------------------------\n\nTITLE: Syntax for SET Command in DiceDB\nDESCRIPTION: Defines the syntax for the SET command, including optional parameters for expiration time, conditional updates, and retrieval.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/SET.md#2025-04-05_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nSET key value [EX seconds] [PX milliseconds] [EXAT timestamp] [PXAT timestamp] [XX] [NX] [KEEPTTL]\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connection Handler in Go\nDESCRIPTION: Function to handle WebSocket connections from clients and maintain a list of connected users.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/tutorials/realtime-leaderboard.mdx#2025-04-05_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc handleWebSocket(w http.ResponseWriter, r *http.Request) {\n    conn, err := upgrader.Upgrade(w, r, nil)\n    if err != nil {\n        log.Println(err)\n        return\n    }\n\n    connectedUsers = append(connectedUsers, conn)\n}\n```\n\n----------------------------------------\n\nTITLE: HGET Command Syntax for DiceDB\nDESCRIPTION: Syntax for the HGET command which retrieves the value of a specific field from a hash stored at the given key.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/HGET.md#2025-04-05_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nHGET key field\n```\n\n----------------------------------------\n\nTITLE: Score Update Handler in Go\nDESCRIPTION: Function to process HTTP requests for updating player scores using DiceDB's ZADD command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/tutorials/realtime-leaderboard.mdx#2025-04-05_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc handleUpdate(w http.ResponseWriter, r *http.Request) {\n     var score Score\n     if err := json.NewDecoder(r.Body).Decode(&score); err != nil {\n         http.Error(w, err.Error(), http.StatusBadRequest)\n         return\n     }\n\n     err := client.ZAdd(r.Context(), \"leaderboard\", dicedb.Z{\n         Score:  float64(score.Score),\n         Member: score.Name,\n     }).Err()\n\n     if err != nil {\n         http.Error(w, err.Error(), http.StatusInternalServerError)\n         return\n     }\n\n     w.WriteHeader(http.StatusOK)\n}\n```\n\n----------------------------------------\n\nTITLE: SET Command Syntax in DiceDB\nDESCRIPTION: The syntax definition for the SET command showing all possible parameters including expiration time options and conditional flags.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/sample_command_docs.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSET key value [EX seconds | PX milliseconds | EXAT unix-time-seconds | PXAT unix-time-milliseconds | KEEPTTL] [NX | XX]\n```\n\n----------------------------------------\n\nTITLE: INCRBY Command Example in DiceDB\nDESCRIPTION: Example usage of the INCRBY command showing how to increment a key's value. Sets a key to 43 and then increments it by 10, resulting in 53.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/INCRBY.md#2025-04-05_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlocalhost:7379> SET k 43\nOK OK\nlocalhost:7379> INCRBY k 10\nOK 53\n```\n\n----------------------------------------\n\nTITLE: Syntax for HGETALL Command in Redis\nDESCRIPTION: Shows the syntax for using the HGETALL command in Redis. This command retrieves all field-value pairs for a given key from a string-string map.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/HGETALL.md#2025-04-05_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nHGETALL key\n```\n\n----------------------------------------\n\nTITLE: Basic JSON.SET Command Syntax\nDESCRIPTION: Shows the basic syntax structure for the JSON.SET command with its required and optional parameters\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.SET.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJSON.SET <key> <path> <json> [NX | XX]\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Shortener in Go with DiceDB\nDESCRIPTION: Creates a URL shortener application using Go, Gin framework, and DiceDB. It includes functions for creating short URLs, redirecting to original URLs, and initializing the DiceDB client.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/tutorials/url-shortener.md#2025-04-05_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"log\"\n    \"net/http\"\n\n    \"github.com/gin-gonic/gin\"\n    \"github.com/google/uuid\"\n    \"github.com/dicedb/dicedb-go\" // DiceDB Go SDK\n)\n\ntype URL struct {\n    ID       string `json:\"id\"`\n    LongURL  string `json:\"long_url\"`\n    ShortURL string `json:\"short_url\"`\n}\n\nvar db *dicedb.Client\n\n// Initialize DiceDB connection\nfunc init() {\n    db = dicedb.NewClient(&dicedb.Options{\n        Addr: \"localhost:7379\",\n    })\n}\n\n// Creates a short URL from a given long URL\nfunc CreateShortURL(c *gin.Context) {\n    var requestBody URL\n    if err := c.ShouldBindJSON(&requestBody); err != nil {\n        c.JSON(http.StatusBadRequest, gin.H{\"error\": \"Invalid request\"})\n        return\n    }\n\n    // Generate unique short ID and construct the short URL\n    shortID := uuid.New().String()[:8]\n    requestBody.ID = shortID\n    requestBody.ShortURL = \"http://localhost:8080/\" + shortID\n\n    // Serialize URL struct to JSON and store it in DiceDB\n    urlData, err := json.Marshal(requestBody)\n    if err != nil {\n        c.JSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to save URL\"})\n        return\n    }\n\n    if err := db.Set(context.Background(), shortID, urlData, 0).Err(); err != nil {\n        c.JSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to save URL\"})\n        return\n    }\n\n    c.JSON(http.StatusCreated, gin.H{\"short_url\": requestBody.ShortURL})\n}\n\n// Redirects to the original URL based on the short URL ID\nfunc RedirectURL(c *gin.Context) {\n    id := c.Param(\"id\")\n\n    // Retrieve stored URL data from DiceDB\n    urlData, err := db.Get(context.Background(), id).Result()\n    if err != nil {\n        c.JSON(http.StatusNotFound, gin.H{\"error\": \"URL not found\"})\n        return\n    }\n\n    // Deserialize JSON data back into URL struct\n    var url URL\n    if err := json.Unmarshal([]byte(urlData), &url); err != nil {\n        c.JSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to decode URL data\"})\n        return\n    }\n\n    // Redirect user to the original long URL\n    c.Redirect(http.StatusFound, url.LongURL)\n}\n\nfunc main() {\n    router := gin.Default()\n\n    // Define endpoints for creating short URLs and redirecting\n    router.POST(\"/shorten\", CreateShortURL)\n    router.GET(\"/:id\", RedirectURL)\n\n    // Start the server on port 8080\n    if err := router.Run(\":8080\"); err != nil {\n        log.Fatal(\"Failed to start server:\", err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DEL Command Syntax in DiceDB\nDESCRIPTION: The syntax for the DEL command, which is used to delete one or more keys from the database.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/DEL.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDEL key [key ...]\n```\n\n----------------------------------------\n\nTITLE: JavaScript WebSocket Client Implementation\nDESCRIPTION: Example JavaScript code demonstrating how to establish a WebSocket connection to DiceDB, send commands, and handle various connection events.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/protocols/websockets.mdx#2025-04-05_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst ws = new WebSocket('ws://your-server-address:port/ws');\n\nws.onopen = function() {\n    console.log('Connected to WebSocket server');\n\n    // Set a key\n    ws.send('SET mykey \"Hello, WebSocket!\"');\n};\n\nws.onmessage = function(event) {\n    console.log('Received:', event.data);\n};\n\nws.onerror = function(error) {\n    console.error('WebSocket Error:', error);\n};\n\nws.onclose = function(event) {\n    console.log('WebSocket connection closed:', event.code, event.reason);\n};\n```\n\n----------------------------------------\n\nTITLE: HGET Command Examples in DiceDB\nDESCRIPTION: Examples demonstrating the HGET command usage, including retrieving existing fields, attempting to retrieve from non-existent keys, and attempting to retrieve non-existent fields.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/HGET.md#2025-04-05_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nlocalhost:7379> HSET k1 f1 v1\nOK 1\nlocalhost:7379> HGET k1 f1\nOK v1\nlocalhost:7379> HGET k2 f1\nOK (nil)\nlocalhost:7379> HGET k1 f2\nOK (nil)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GET.WATCH Usage in DiceDB\nDESCRIPTION: This example demonstrates the usage of GET.WATCH command in DiceDB. It shows how to set up a watch on a key, update the key from another client, and receive the updated value in the watching client.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/GET.WATCH.md#2025-04-05_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nclient1:7379> SET k1 v1\nOK OK\nclient1:7379> GET.WATCH k1\nentered the watch mode for GET.WATCH k1\n\n\nclient2:7379> SET k1 v2\nOK OK\n\n\nclient1:7379> ...\nentered the watch mode for GET.WATCH k1\nOK [fingerprint=2356444921] v2\n```\n\n----------------------------------------\n\nTITLE: Querying Existing Keys with EXISTS Command in Redis\nDESCRIPTION: The EXISTS command returns the count of keys that exist among the given arguments without modifying them. It takes one or more key names as arguments and returns the number of keys that exist in the database.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/EXISTS.md#2025-04-05_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nEXISTS key [key ...]\n```\n\n----------------------------------------\n\nTITLE: INCR Command Example Usage\nDESCRIPTION: Example showing how to use the INCR command. First setting a key to 43, then incrementing it to 44.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/INCR.md#2025-04-05_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlocalhost:7379> SET k 43\nOK OK\nlocalhost:7379> INCR k\nOK 44\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Project and Installing Dependencies\nDESCRIPTION: Sets up a new Go project directory, initializes a module, and installs required packages including DiceDB Go SDK.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/tutorials/url-shortener.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir url-shortener\ncd url-shortener\ngo mod init url-shortener\ngo get github.com/dicedb/dicedb-go@v1.0.3\ngo get github.com/gin-gonic/gin\ngo get github.com/google/uuid\n```\n\n----------------------------------------\n\nTITLE: TTL Command Usage Examples\nDESCRIPTION: Demonstrates various TTL command scenarios including checking TTL for keys with no expiration, with expiration, and non-existent keys. Shows interaction with SET command and EX parameter for setting expiration.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/TTL.md#2025-04-05_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nlocalhost:7379> SET k 43\nOK OK\nlocalhostL7379> TTL k\nOK -1\nlocalhostL7379> SET k 43 EX 10\nOK OK\nlocalhostL7379> TTL k\nOK 9\nlocalhostL7379> TTL kn\nOK -2\n```\n\n----------------------------------------\n\nTITLE: EXPIRE Command Usage Examples in DiceDB\nDESCRIPTION: Demonstrates practical examples of the EXPIRE command including basic usage, using the NX option to set expiration only if none exists, and using the XX option to set expiration only if one already exists.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/EXPIRE.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlocahost:7379> SET k1 v1\nOK OK\nlocahost:7379> EXPIRE k1 10\nOK 1\nlocahost:7379> SET k2 v2\nOK OK\nlocahost:7379> EXPIRE k2 10 NX\nOK 1\nlocahost:7379> EXPIRE k2 20 XX\nOK 1\nlocahost:7379> EXPIRE k2 20 NX\nOK 0\n```\n\n----------------------------------------\n\nTITLE: EXPIREAT Command Syntax in DiceDB\nDESCRIPTION: The syntax for the EXPIREAT command, which sets the expiration time of a key as an absolute Unix timestamp (in seconds). It includes optional modifiers NX, XX, GT, and LT.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/EXPIREAT.md#2025-04-05_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nEXPIREAT key timestamp [NX | XX | GT | LT]\n```\n\n----------------------------------------\n\nTITLE: GETDEL Command Example Usage\nDESCRIPTION: Example demonstrating the GETDEL command workflow: setting a key-value pair, retrieving and deleting it with GETDEL, and confirming the deletion.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/GETDEL.md#2025-04-05_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nlocalhost:7379> SET k v\nOK OK\nlocalhost:7379> GETDEL k\nOK v\nlocalhost:7379> GET k\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Watching a Key with GET.WATCH in DiceDB CLI\nDESCRIPTION: Demonstrates how to use the GET.WATCH command to subscribe to changes on a specific key in DiceDB. This command allows real-time monitoring of key value changes without polling.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/get-started/hello-world-reactive.mdx#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlocalhost:7379> GET.WATCH k1\n```\n\n----------------------------------------\n\nTITLE: Executing EXPIRETIME Command in Redis\nDESCRIPTION: This snippet demonstrates the syntax for the EXPIRETIME command in Redis. It takes a single key as an argument and returns the absolute Unix timestamp in seconds when the key will expire.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/EXPIRETIME.md#2025-04-05_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nEXPIRETIME key\n```\n\n----------------------------------------\n\nTITLE: Setting a Key Value in DiceDB CLI\nDESCRIPTION: Shows how to set a value for a key in DiceDB using the SET command. This operation triggers updates for any active watchers on the key.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/get-started/hello-world-reactive.mdx#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlocalhost:7379> SET k1 v1\nOK OK\n```\n\n----------------------------------------\n\nTITLE: GETEX Usage Examples in Redis\nDESCRIPTION: Examples demonstrating how to use the GETEX command with various expiration options including EX, PX, EXAT, PXAT, and PERSIST.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/GETEX.md#2025-04-05_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nlocalhost:7379> SET k v\nOK OK\nlocalhost:7379> GETEX k EX 1000\nOK v\nlocalhost:7379> TTL k\nOK 996\nlocalhost:7379> GETEX k PX 200000\nOK v\nlocalhost:7379> GETEX k EXAT 1772377267\nOK v\nlocalhost:7379> GETEX k PXAT 1772377267000\nOK v\nlocalhost:7379> GETEX k PERSIST\nOK v\nlocalhost:7379> GET k\n(nil)\n```\n\n----------------------------------------\n\nTITLE: HSET Command Syntax\nDESCRIPTION: The syntax for the HSET command, which sets field value pairs in the string-string map stored at the specified key.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/HSET.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHSET key field value [field value ...]\n```\n\n----------------------------------------\n\nTITLE: GETDEL Command Syntax\nDESCRIPTION: The basic syntax for the GETDEL command that takes a single key parameter.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/GETDEL.md#2025-04-05_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nGETDEL key\n```\n\n----------------------------------------\n\nTITLE: MSET with Retrieval Example in DiceDB\nDESCRIPTION: Example of setting multiple key-value pairs with MSET and retrieving them individually with GET commands.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/MSET.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> MSET name \"Alice\" age \"30\" city \"Wonderland\"\nOK\n127.0.0.1:7379> GET name\n\"Alice\"\n127.0.0.1:7379> GET age\n\"30\"\n127.0.0.1:7379> GET city\n\"Wonderland\"\n```\n\n----------------------------------------\n\nTITLE: FLUSHDB Command Usage Example in DiceDB\nDESCRIPTION: An example demonstrating the usage of the FLUSHDB command in DiceDB. It shows setting keys, flushing the database, and verifying that the keys have been deleted.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/FLUSHDB.md#2025-04-05_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlocahost:7379> SET k1 v1\nOK OK\nlocahost:7379> SET k2 v2\nOK OK\nlocahost:7379> FLUSHDB\nOK OK\nlocalhost:7379> GET k1\nOK (nil)\nlocalhost:7379> GET k2\nOK (nil)\n```\n\n----------------------------------------\n\nTITLE: Setting Key-Value Pair in DiceDB via HTTP POST\nDESCRIPTION: Demonstrates how to set a key-value pair in DiceDB using an HTTP POST request. The example includes both the raw HTTP request format and a cURL command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/protocols/http.mdx#2025-04-05_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /SET HTTP/1.1\nHost: your-server-address\nContent-Type: application/json\n\n{\n\"key\": \"mykey\",\n\"value\": \"Hello, World!\"\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://your-server-address:PORT/SET' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"key\": \"mykey\",\n  \"value\": \"Hello, World!\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating EXISTS Command Usage in Redis\nDESCRIPTION: This example shows how to use the EXISTS command in Redis. It first sets two keys, then checks for the existence of three keys, including one that wasn't set. The command returns the count of existing keys (2 in this case).\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/EXISTS.md#2025-04-05_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nlocalhost:7379> SET k1 v1\nOK\nlocalhost:7379> SET k2 v2\nOK\nlocalhost:7379> EXISTS k1 k2 k3\nOK 2\n```\n\n----------------------------------------\n\nTITLE: Executing ECHO Command in DiceDB\nDESCRIPTION: This snippet demonstrates the syntax and usage of the ECHO command in DiceDB. The command takes a message as an argument and returns it.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/ECHO.md#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nECHO message\n```\n\n----------------------------------------\n\nTITLE: TYPE Command Syntax\nDESCRIPTION: Basic syntax for the TYPE command which takes a single key parameter.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/TYPE.md#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTYPE key\n```\n\n----------------------------------------\n\nTITLE: Setting Key with Expiration Using SETEX in DiceDB\nDESCRIPTION: Shows how to use the SETEX command to set a key 'foo' with the value 'bar' and an expiration time of 10 seconds.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SETEX.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SETEX foo 10 bar\nOK\n```\n\n----------------------------------------\n\nTITLE: Defining PING Command Syntax in Markdown\nDESCRIPTION: Specifies the syntax for the PING command in DiceDB using a markdown code block.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/PING.md#2025-04-05_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nPING\n```\n```\n\n----------------------------------------\n\nTITLE: DSQL Query Syntax for Q.WATCH Command\nDESCRIPTION: SQL-like query syntax used with Q.WATCH to specify data monitoring and operations. It includes SELECT, WHERE, ORDER BY, and LIMIT clauses to define the data to watch and how to present updates.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/QWATCH.md#2025-04-05_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT $key, $value\nWHERE condition\nORDER BY field [ASC | DESC] LIMIT n\n```\n\n----------------------------------------\n\nTITLE: Syntax for LPUSH Command in DiceDB\nDESCRIPTION: The basic syntax for using the LPUSH command in DiceDB. It shows how to specify the key and one or more values to be inserted at the head of the list.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LPUSH.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLPUSH key value [value ...]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PING Command Usage in DiceDB\nDESCRIPTION: Provides examples of using the PING command in DiceDB, showing responses with and without an argument.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/PING.md#2025-04-05_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nlocalhost:7379> PING\nPONG\nlocalhost:7379> PING Hello\nPONG Hello\n```\n\n----------------------------------------\n\nTITLE: Defining HSET Command Syntax in DiceDB\nDESCRIPTION: Specifies the syntax for the HSET command, which sets the value of a field in a hash. It allows setting multiple field-value pairs in a single command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSET.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHSET key field value [field value ...]\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Entire JSON Document in DiceDB\nDESCRIPTION: Example showing how to set a JSON document at a key and then retrieve the entire document. The JSON.GET command returns the complete JSON object when no path is specified.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.GET.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1001 $ '{\"name\": \"John Doe\", \"age\": 30, \"email\": \"john.doe@example.com\"}'\nOK\n127.0.0.1:7379> JSON.GET user:1001\n\"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":30,\\\"email\\\":\\\"john.doe@example.com\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Using XX Option with ZADD in DiceDB\nDESCRIPTION: Demonstrates the use of the XX option to update only existing elements in the sorted set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZADD.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset XX 8 \"eight\" 9 \"two\"\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Defining GET.WATCH Syntax in DiceDB\nDESCRIPTION: This snippet shows the syntax for the GET.WATCH command in DiceDB. It takes a single parameter 'key' to create a query subscription.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/GET.WATCH.md#2025-04-05_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nGET.WATCH key\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Values with LPUSH in DiceDB\nDESCRIPTION: Demonstrates how to insert multiple values ('hello' and 'world') at the head of the list 'mylist'. The values are inserted in the order given, with the leftmost value being the first to be inserted.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LPUSH.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LPUSH mylist \"hello\" \"world\"\n(integer) 2\n```\n\n----------------------------------------\n\nTITLE: TYPE Command Usage Examples\nDESCRIPTION: Examples showing TYPE command usage including checking type of an integer value and a non-existent key.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/TYPE.md#2025-04-05_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlocalhost:7379> SET k 43\nOK OK\nlocahost:7379> TYPE k\nint\nlocahost:7379> TYPE kn\nnone\n```\n\n----------------------------------------\n\nTITLE: Using CH Option with ZADD in DiceDB\nDESCRIPTION: Shows how to use the CH option to get the total number of elements changed (added and updated).\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZADD.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset CH 10 \"ten\" 11 \"two\"\n(integer) 2\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example with SET Command in Bash\nDESCRIPTION: An example showing the basic usage of the SET command in DiceDB, demonstrating how to set a key-value pair.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/command_docs_template.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET foo bar\nOK\n```\n\n----------------------------------------\n\nTITLE: INCR Command Syntax Definition\nDESCRIPTION: The syntax definition for the INCR command, which takes a single key parameter.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/INCR.md#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nINCR key\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Members with ZADD in DiceDB\nDESCRIPTION: Shows how to update the score of an existing member in a sorted set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZADD.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset 5 \"two\"\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: HANDSHAKE Command Example for DiceDB\nDESCRIPTION: An example of using the HANDSHAKE command with a UUID as client_id and 'command' as the execution mode. The server responds with 'OK OK' to confirm successful registration.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/HANDSHAKE.md#2025-04-05_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlocalhost:7379> HANDSHAKE 4c9d0411-6b28-4ee5-b78a-e7e258afa52f command\nOK OK\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Value from a Hash in DiceDB\nDESCRIPTION: Demonstrates how to set hash fields using HSET and then retrieve a value using HGET. This example creates a user hash and retrieves the 'name' field.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HGET.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSET user:1000 name \"John Doe\"\n(integer) 1\n127.0.0.1:7379> HSET user:1000 age \"30\"\n(integer) 1\n127.0.0.1:7379> HGET user:1000 name\n\"John Doe\"\n```\n\n----------------------------------------\n\nTITLE: INCRBY Command Syntax in DiceDB\nDESCRIPTION: The syntax for the INCRBY command which takes a key and a delta increment value as parameters.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/INCRBY.md#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nINCRBY key delta\n```\n\n----------------------------------------\n\nTITLE: Retrieving Range with Scores from Sorted Set in DiceDB\nDESCRIPTION: Shows how to use ZRANGE command with WITHSCORES option to retrieve elements and their scores from a sorted set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZRANGE.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZRANGE leaderboard 0 2 WITHSCORES\n1) \"Alice\"\n2) \"50\"\n3) \"Charlie\"\n4) \"60\"\n5) \"Bob\"\n6) \"70\"\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of JSON.ARRTRIM in DiceDB\nDESCRIPTION: A basic example of using JSON.ARRTRIM to trim a JSON array to include only elements from index 1 to 3, resulting in a new array with just those elements.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRTRIM.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET b $ '[1, 2, 3, 4, 5]'\n\"OK\"\n127.0.0.1:7379> JSON.ARRTRIM b $ 1 3\n1) \"3\"\n127.0.0.1:7379> JSON.GET b\n\"[2,3,4]\"\n127.0.0.1:7379>\n```\n\n----------------------------------------\n\nTITLE: Using EXPIRETIME Command with Redis-like Syntax\nDESCRIPTION: This example shows how to use the EXPIRETIME command in a Redis-like environment. It demonstrates setting a key, setting its expiration time, and then checking its expiration timestamp.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/EXPIRETIME.md#2025-04-05_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nlocahost:7379> SET k1 v1\nOK OK\nlocahost:7379> EXPIRE k1 10\nOK 1\nlocahost:7379> EXPIRETIME k1\nOK 1740829178\n```\n\n----------------------------------------\n\nTITLE: Creating and Removing Elements from a Sorted Set in DiceDB\nDESCRIPTION: Example of creating a sorted set 'myzset' with five elements and their respective scores, then removing elements using the ZREM command. Shows the return value representing the number of elements successfully removed.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZREM.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset 1 \"one\" 2 \"two\" 3 \"three\" 4 \"four\" 5 \"five\"\n(integer) 5\n127.0.0.1:7379> ZREM myzset one\n(integer) 1\n127.0.0.1:7379> ZREM myzset two six\n(integer) 1\n127.0.0.1:7379> ZREM myzset three four\n(integer) 2\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint for DiceDB HTTP Requests\nDESCRIPTION: Specifies the base URL structure for sending HTTP requests to DiceDB, including the server address, port, and command name.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/protocols/http.mdx#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://your-server-address:port/<command>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of GEODIST Command in DiceDB\nDESCRIPTION: Demonstrates adding geospatial points to a set and calculating distances between them using the GEODIST command with various unit options.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GEODIST.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GEOADD cities -74.0060 40.7128 \"New York\"\n1\n127.0.0.1:7379> GEOADD cities -79.3470 43.6510 \"Toronto\"\n1\n127.0.0.1:7379> GEODIST cities \"New York\" \"Toronto\"\n\"548064.1868\"\n127.0.0.1:7379> GEODIST cities \"New York\" \"Toronto km\"\n\"548.0642\"\n127.0.0.1:7379> GEODIST cities \"New York\" \"Toronto mi\"\n\"340.5521\"\n```\n\n----------------------------------------\n\nTITLE: DECR Command Syntax in DiceDB\nDESCRIPTION: The syntax definition for the DECR command that decrements integer values by 1.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/DECR.md#2025-04-05_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nDECR key\n```\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ZCOUNT Command in DiceDB\nDESCRIPTION: This snippet showcases various examples of using the ZCOUNT command, including counting elements in non-existent keys, within different score ranges, and with an empty result.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZCOUNT.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZCOUNT NON_EXISTENT_KEY 0 100\n0\n\n127.0.0.1:7379> ZADD myzset 10 member1 20 member2 30 member3\n(integer) 3\n127.0.0.1:7379> ZCOUNT myzset 15 25\n1\n\n127.0.0.1:7379> ZCOUNT myzset 50 100\n0\n\n127.0.0.1:7379> ZCOUNT myzset 30 10\n0\n```\n\n----------------------------------------\n\nTITLE: Basic HSTRLEN Usage Example\nDESCRIPTION: Demonstrates creating a hash with two fields using HSET and then getting the string length of a field value using HSTRLEN.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSTRLEN.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSET myhash field1 \"helloworld\" field2 \"value2\"\n(integer) 1\n\n127.0.0.1:7379> HSTRLEN myhash field1\n(integer) 10\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project Repository\nDESCRIPTION: Commands to clone and start the leaderboard application.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/tutorials/realtime-leaderboard.mdx#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/arpitbbhayani/leaderboard-go-dicedb.git\ncd leaderboard-go-dicedb\n```\n\n----------------------------------------\n\nTITLE: ZPOPMAX with Count Argument\nDESCRIPTION: Example showing how to pop multiple members using the count argument\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZPOPMAX.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset 1 member1 2 member2 3 member3\n(integer) 3\n127.0.0.1:7379> ZPOPMAX myzset 2\n1) 1 \"member1\"\n2) 2 \"member2\"\n```\n\n----------------------------------------\n\nTITLE: EXPIRE Command Syntax in DiceDB\nDESCRIPTION: Shows the syntax for the EXPIRE command which sets an expiry time in seconds on a key. The command accepts optional NX or XX flags to control when expiration is set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/EXPIRE.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nEXPIRE key seconds [NX | XX]\n```\n\n----------------------------------------\n\nTITLE: Fetching Coordinates of Existing Set Members in DiceDB\nDESCRIPTION: Example showing how to add geographical points to a sorted set using GEOADD and then retrieve the coordinates using GEOPOS. The example demonstrates retrieving the longitude and latitude of a location named \"Palermo\" in Sicily.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GEOPOS.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\n2\n127.0.0.1:7379> GEOPOS Sicily \"Palermo\"\n1) 1) 13.361387\n2) 38.115556\n```\n\n----------------------------------------\n\nTITLE: FLUSHDB Command Syntax in DiceDB\nDESCRIPTION: The syntax for the FLUSHDB command in DiceDB. This command is used to delete all keys present in the database.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/FLUSHDB.md#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFLUSHDB\n```\n\n----------------------------------------\n\nTITLE: ZPOPMIN Command with Non-Existing Key in DiceDB\nDESCRIPTION: Shows the result of attempting to use ZPOPMIN on a non-existent sorted set key, which returns an empty array.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZPOPMIN.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZPOPMIN NON_EXISTENT_KEY\n(empty array)\n```\n\n----------------------------------------\n\nTITLE: JSON.DEL Syntax in DiceDB\nDESCRIPTION: The basic syntax for the JSON.DEL command in DiceDB. This command takes a key parameter (required) and an optional path parameter that specifies which part of the JSON document to delete.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.DEL.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJSON.DEL key [path]\n```\n\n----------------------------------------\n\nTITLE: Starting DiceDB Server with Docker\nDESCRIPTION: Command to start DiceDB server with watch mode enabled using Docker.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/tutorials/realtime-leaderboard.mdx#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 7379:7379 dicedb/dicedb --enable-watch\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Members to a Set at Once in DiceDB\nDESCRIPTION: Example showing how to add multiple members to a set in a single command, including handling of duplicate values.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SADD.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SADD vegetables \"carrot\" \"broccoli\" \"spinach\" \"carrot\"\n(integer) 3\n```\n\n----------------------------------------\n\nTITLE: EXPIREAT Command Usage Examples in DiceDB\nDESCRIPTION: A series of examples demonstrating the usage of the EXPIREAT command with different options. It shows setting a key, applying expiration, and using various modifiers like NX, XX, GT, and LT.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/EXPIREAT.md#2025-04-05_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nlocahost:7379> SET k1 v1\nOK OK\nlocahost:7379> EXPIREAT k1 1740829942\nOK 1\nlocahost:7379> EXPIREAT k1 1740829942 NX\nOK 0\nlocahost:7379> EXPIREAT k1 1740829942 XX\nOK 0\nlocahost:7379> EXPIREAT k1 1740829943 GT\nOK 0\nlocahost:7379> EXPIREAT k1 1740829942 LT\nOK 1\n```\n\n----------------------------------------\n\nTITLE: Basic MGET Usage Example\nDESCRIPTION: Example showing how to set and retrieve multiple key-value pairs using MGET.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/MGET.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET key1 \"value1\"\nOK\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET key2 \"value2\"\nOK\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET key3 \"value3\"\nOK\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> MGET key1 key2 key3\n1) \"value1\"\n2) \"value2\"\n3) \"value3\"\n```\n\n----------------------------------------\n\nTITLE: Defining DECRBY Command Syntax in Redis\nDESCRIPTION: Specifies the syntax for the DECRBY command in Redis, which takes a key and a delta value as parameters.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/DECRBY.md#2025-04-05_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nDECRBY key delta\n```\n\n----------------------------------------\n\nTITLE: Basic SREM Command Syntax\nDESCRIPTION: Shows the basic syntax for the SREM command used to remove members from a set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SREM.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSREM key member [member ...]\n```\n\n----------------------------------------\n\nTITLE: Using PFCOUNT with Multiple Keys in DiceDB\nDESCRIPTION: Example of using PFCOUNT to estimate the cardinality of the union of multiple HyperLogLog data structures.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFCOUNT.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PFADD hll1 \"foo\" \"bar\"\n(integer) 1\n127.0.0.1:7379> PFADD hll2 \"baz\" \"qux\"\n(integer) 1\n127.0.0.1:7379> PFCOUNT hll1 hll2\n(integer) 4\n```\n\n----------------------------------------\n\nTITLE: DiceDB Command Implementation Updates\nDESCRIPTION: List of newly implemented database commands including hash operations, expiry options, JSON operations, set operations, and various utility commands\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/updates/2024-08-29.md#2025-04-05_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Implement `HSET` command\n- Add support for options for EXPIRE and EXPIREAT\n- Add support for command `JSON.CLEAR`\n- Added `SADD`, `SREM`, `MEMBERS`, `SCARD`, `SINTER`, `SDIFF` commands\n- Implement `GETSET` command\n- Added support for `FLUSHDB` command\n- Add support for `BITPOS` command\n- Added support for `QUNWATCH` command\n```\n\n----------------------------------------\n\nTITLE: SCARD Command Syntax in DiceDB\nDESCRIPTION: The basic syntax for the SCARD command which requires a single key parameter representing the set whose cardinality you want to retrieve.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SCARD.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSCARD key\n```\n\n----------------------------------------\n\nTITLE: SET Command with Millisecond-based Expiration in DiceDB\nDESCRIPTION: Example of setting a key with a value that will expire after 10000 milliseconds (10 seconds) using the PX parameter.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/sample_command_docs.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET foo bar PX 10000\nOK\n```\n\n----------------------------------------\n\nTITLE: CLI WebSocket Client Example\nDESCRIPTION: Example showing how to use wscat command-line tool to interact with DiceDB's WebSocket interface.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/protocols/websockets.mdx#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n wscat -c ws://localhost:8379\n 127.0.0.1:8379> SET foo bar\n 127.0.0.1:8379< \"OK\"\n 127.0.0.1:8379> GET foo\n 127.0.0.1:8379< \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Using NX Option with ZADD in DiceDB\nDESCRIPTION: Illustrates the use of the NX option to add only new elements to the sorted set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZADD.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset NX 6 \"six\" 7 \"two\"\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: UNWATCH Command Example Usage\nDESCRIPTION: Example showing how to use the UNWATCH command with a specific fingerprint number to remove a subscription.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/UNWATCH.md#2025-04-05_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nlocalhost:7379> UNWATCH 2356444921\n```\n\n----------------------------------------\n\nTITLE: SMEMBERS on Empty Set in DiceDB\nDESCRIPTION: Example showing the result of using SMEMBERS on a non-existent set, which returns an empty array.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SMEMBERS.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SMEMBERS nonexistentset\n(empty array)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of HKEYS Command in DiceDB\nDESCRIPTION: An example of using the HKEYS command to retrieve all field names in the hash stored at key 'user:1001'. The command returns an array of field names.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HKEYS.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HKEYS user:1001\n1) \"name\"\n2) \"age\"\n3) \"email\"\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Hash Fields with HSET in DiceDB\nDESCRIPTION: Shows how to update existing fields in a hash named 'product:2000'. This example updates the price and stock of the product.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSET.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSET product:2000 price 899.99 stock 45\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of LINSERT Command in DiceDB\nDESCRIPTION: Demonstrates the basic usage of LINSERT command on a list 'mylist'. It shows how to insert elements after and before existing elements, and how to view the updated list using LRANGE.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LINSERT.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> RPUSH mylist \"one\"\n(integer) 1\n127.0.0.1:7379> RPUSH mylist \"two\"\n(integer) 2\n127.0.0.1:7379> LINSERT mylist after \"two\" \"four\"\n(integer) 3\n127.0.0.1:7379> LRANGE mylist 0 100\n1) \"one\"\n2) \"two\"\n3) \"four\"\n127.0.0.1:7379> LINSERT mylist before \"four\" \"three\"\n(integer) 4\n127.0.0.1:7379> LRANGE mylist 0 100\n1) \"one\"\n2) \"two\"\n3) \"three\"\n4) \"four\"\n```\n\n----------------------------------------\n\nTITLE: Installing DiceDB Go SDK via go get\nDESCRIPTION: Command to install the DiceDB Go SDK package using the Go package manager. This installs version 1.0.3 of the SDK which can be used to interact with a DiceDB server.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/sdk/go.mdx#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/dicedb/dicedb-go@v1.0.3\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ZCARD Command in DiceDB\nDESCRIPTION: Illustrates the basic usage of ZCARD command, including creating a sorted set, getting its cardinality, adding a new element, and checking the updated cardinality.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZCARD.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset 1 \"one\" 2 \"two\"\n(integer) 2\n\n127.0.0.1:7379> ZCARD myzset\n(integer) 2\n\n127.0.0.1:7379> ZADD myzset 3 \"three\"\n(integer) 1\n\n127.0.0.1:7379> ZCARD myzset\n(integer) 3\n```\n\n----------------------------------------\n\nTITLE: HANDSHAKE Command Syntax for DiceDB\nDESCRIPTION: The syntax definition for the HANDSHAKE command which takes a client_id and execution_mode as parameters. The command is used to register the client and specify how the connection will be used.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/HANDSHAKE.md#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHANDSHAKE client_id execution_mode\n```\n\n----------------------------------------\n\nTITLE: Basic LRANGE Usage Example in DiceDB\nDESCRIPTION: Demonstrates creating a list with RPUSH and then retrieving elements with LRANGE using different index ranges.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LRANGE.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> RPUSH mylist \"one\"\n(integer) 1\n127.0.0.1:7379> RPUSH mylist \"two\"\n(integer) 2\n127.0.0.1:7379> LRANGE mylist 0 100\n1) \"one\"\n2) \"two\"\n127.0.0.1:7379> LRANGE mylist -1 10\n1) \"two\"\n```\n\n----------------------------------------\n\nTITLE: Basic HSCAN Usage Example in DiceDB\nDESCRIPTION: Demonstrates creating a hash and using HSCAN to iterate over its fields. Shows how the cursor works and how the command returns both the next cursor and matching field-value pairs.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSCAN.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSET myhash field1 \"value1\" field2 \"value2\"\n1) (integer) 2\n\n127.0.0.1:7379> HSCAN myhash 0\n1) \"2\"\n2) 1) \"field1\"\n   2) \"value1\"\n   3) \"field2\"\n   4) \"value2\"\n\n127.0.0.1:7379> HSCAN myhash 0 MATCH field* COUNT 1\n1) \"1\"\n2) 1) \"field1\"\n   2) \"value1\"\n\n127.0.0.1:7379> HSCAN myhash 1 MATCH field* COUNT 1\n1) \"0\"\n2) 1) \"field2\"\n   2) \"value2\"\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ZADD Command in DiceDB\nDESCRIPTION: Demonstrates adding multiple members with scores to a sorted set and then adding an additional member.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZADD.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset 1 \"one\" 2 \"two\" 3 \"three\"\n(integer) 3\n127.0.0.1:7379> ZADD myzset 4 \"four\"\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Basic RPUSH Command Syntax in DiceDB\nDESCRIPTION: Demonstrates the basic syntax of the RPUSH command, which is used to insert values at the tail of a list.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/RPUSH.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nRPUSH key value [value ...]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Commands in DiceDB\nDESCRIPTION: This example shows the execution of COMMAND LIST and its typical output. It returns an array of command names supported by the DiceDB server.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND LIST.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COMMAND LIST\n  1) \"SLEEP\"\n  2) \"SMEMBERS\"\n  3) \"BF.ADD\"\n  4) \"FLUSHDB\"\n  .\n  .\n  .\n127.0.0.1:7379>\n```\n\n----------------------------------------\n\nTITLE: Testing URL Shortener: Creating Short URL\nDESCRIPTION: Uses curl to send a POST request to create a short URL for 'https://example.com'.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/tutorials/url-shortener.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"long_url\": \"https://example.com\"}' http://localhost:8080/shorten\n```\n\n----------------------------------------\n\nTITLE: Using ZRANK with WITHSCORE Option in DiceDB\nDESCRIPTION: Shows how to use the WITHSCORE option with the ZRANK command to retrieve both the rank and score of a member simultaneously. This example adds two members to a sorted set and then queries one member's position along with its score.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZRANK.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset 1 member1 2 member2\n(integer) 2\n127.0.0.1:7379> ZRANK myzset member2 WITHSCORE\n(integer) [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Observing Updated GET.WATCH Output in DiceDB CLI\nDESCRIPTION: Shows the cumulative output received by watchers when a key's value is changed multiple times. Each change triggers a new output line with the updated value.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/get-started/hello-world-reactive.mdx#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlocalhost:7379> GET.WATCH k1\nentered the watch mode for GET.WATCH k1\nOK [fingerprint=2356444921] v1\nOK [fingerprint=2356444921] v2\n```\n\n----------------------------------------\n\nTITLE: Deleting multiple fields from a hash in DiceDB\nDESCRIPTION: Example showing how to delete multiple fields ('name' and 'age') from a hash structure at key 'user:1000' in a single HDEL command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HDEL.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSET user:1000 name \"John Doe\"\n(integer) 1\n127.0.0.1:7379> HSET user:1000 age \"30\"\n(integer) 1\n127.0.0.1:7379> HDEL user:1000 name age\n(integer) 2\n```\n\n----------------------------------------\n\nTITLE: Toggling a Nested Boolean Value with JSON.TOGGLE\nDESCRIPTION: Example of using the JSON.TOGGLE command to flip a nested boolean field 'notifications' within the settings object.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.TOGGLE.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.TOGGLE user:1001 $.settings.notifications\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of SMEMBERS Command in DiceDB\nDESCRIPTION: An example demonstrating how to use SMEMBERS to retrieve all members of a set after adding elements using SADD.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SMEMBERS.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SADD myset \"apple\" \"banana\" \"cherry\"\n(integer) 3\n127.0.0.1:7379> SMEMBERS myset\n1) \"apple\"\n2) \"banana\"\n3) \"cherry\"\n```\n\n----------------------------------------\n\nTITLE: Basic HINCRBYFLOAT Command Syntax\nDESCRIPTION: Shows the basic syntax structure for the HINCRBYFLOAT command\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HINCRBYFLOAT.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHINCRBYFLOAT key field increment\n```\n\n----------------------------------------\n\nTITLE: Executing COMMAND COUNT in DiceDB\nDESCRIPTION: The COMMAND COUNT command retrieves the total number of commands supported by the DiceDB server. It returns an integer value representing the current command count. This operation has a time complexity of O(1).\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND COUNT.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCOMMAND COUNT\n```\n\n----------------------------------------\n\nTITLE: Testing URL Shortener: Redirecting to Original URL\nDESCRIPTION: Uses curl to test the redirection from a short URL to the original URL.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/tutorials/url-shortener.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L http://localhost:8080/abcd1234\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Usage of PFMERGE in DiceDB\nDESCRIPTION: Shows an example of merging three HyperLogLogs (hll1, hll2, hll3) into a new HyperLogLog (hll_merged) using the PFMERGE command. It also demonstrates the use of PFADD to add elements to HyperLogLogs and PFCOUNT to count unique elements in the merged HyperLogLog.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFMERGE.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PFADD hll1 \"a\" \"b\" \"c\"\n(integer) 1\n127.0.0.1:7379> PFADD hll2 \"c\" \"d\" \"e\"\n(integer) 1\n127.0.0.1:7379> PFADD hll3 \"e\" \"f\" \"g\"\n(integer) 1\n127.0.0.1:7379> PFMERGE hll_merged hll1 hll2 hll3\nOK\n127.0.0.1:7379> PFCOUNT hll_merged\n(integer) 7\n```\n\n----------------------------------------\n\nTITLE: Observing GET.WATCH Output in DiceDB CLI\nDESCRIPTION: Illustrates the output received by clients watching a key when its value is set or changed. The output includes the new value and a fingerprint for change tracking.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/get-started/hello-world-reactive.mdx#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlocalhost:7379> GET.WATCH k1\nentered the watch mode for GET.WATCH k1\nOK [fingerprint=2356444921] v1\n```\n\n----------------------------------------\n\nTITLE: Basic HINCRBY Usage Example\nDESCRIPTION: Demonstrates executing HINCRBY on a non-existing hash key\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HINCRBY.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HINCRBY keys field1 10\n(integer) 10\n```\n\n----------------------------------------\n\nTITLE: Executing GETSET Command in DiceDB\nDESCRIPTION: The GETSET command syntax in DiceDB. It takes two parameters: the key whose value you want to retrieve and set, and the new value to set for the specified key.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GETSET.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGETSET key value\n```\n\n----------------------------------------\n\nTITLE: Basic Example of GETSET Command in DiceDB\nDESCRIPTION: This example demonstrates setting an initial value for a key, then using GETSET to retrieve the old value while setting a new one. The command returns the old value.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GETSET.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"Hello\"\n127.0.0.1:7379> GETSET mykey \"World\"\n\"Hello\"\n```\n\n----------------------------------------\n\nTITLE: HKEYS Command with Non-existent Key in DiceDB\nDESCRIPTION: Showing the result of HKEYS command when the hash 'user:1003' does not exist. The command returns (nil) for non-existent keys.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HKEYS.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HKEYS user:1003\n(nil)\n```\n\n----------------------------------------\n\nTITLE: COMMAND Response Format\nDESCRIPTION: Demonstrates the structure of the response returned by the COMMAND command, showing how command metadata is formatted including command name, arity, flags, and key positions.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COMMAND\n  1)  1) \"command-name\"\n      2) (integer) arity\n      3) 1) \"flag1\"       # Optional\n         2) \"flag2\"      # Optional\n         ...\n      4) (integer) first-key\n      5) (integer) last-key\n      6) (integer) key-step\n  .\n  .\n  .\n```\n\n----------------------------------------\n\nTITLE: Conditional SET Command with NX Flag in DiceDB\nDESCRIPTION: Example of setting a key only if it doesn't already exist using the NX (Not eXists) option.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/sample_command_docs.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET foo bar NX\n```\n\n----------------------------------------\n\nTITLE: Deleting a Specific Path in a JSON Document\nDESCRIPTION: This example shows how to delete a specific field from a JSON document using a JSONPath expression. The command removes the 'age' field and returns the modified document structure.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.DEL.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET myjson $ '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\nOK\n127.0.0.1:7379> JSON.DEL myjson $.age\n(integer) 1\n127.0.0.1:7379> JSON.GET myjson\n\"{\\\"name\\\":\\\"John\\\",\\\"city\\\":\\\"New York\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Updating Player Score in DiceDB\nDESCRIPTION: Example of setting a player's score in the game match, which triggers an update in the Q.WATCH subscription if the score meets the criteria.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/QWATCH.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET match:100:user:0 5\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from Hash in DiceDB\nDESCRIPTION: Example of retrieving all values in the hash stored at key 'user:1001'. This demonstrates the basic usage of the HVALS command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HVALS.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HVALS user:1001\n1) \"John Doe\"\n2) \"30\"\n3) \"john@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Basic Set Intersection Example in DiceDB\nDESCRIPTION: An example demonstrating how to add elements to three different sets and then compute their intersection using the SINTER command. The result contains only the element 'c' which is common to all three sets.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SINTER.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add elements to sets\n127.0.0.1:7379> SADD set1 \"a\" \"b\" \"c\"\n(integer) 3\n127.0.0.1:7379> SADD set2 \"b\" \"c\" \"d\"\n(integer) 3\n127.0.0.1:7379> SADD set3 \"c\" \"d\" \"e\"\n(integer) 3\n\n# Compute intersection\n127.0.0.1:7379> SINTER set1 set2 set3\n1) \"c\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Hash with Multiple Fields using HMSET in DiceDB\nDESCRIPTION: Demonstrates how to use the HMSET command to create a new hash with multiple fields in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HMSET.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HMSET product:4000 name \"Tablet\" price 299.99 stock 30\nOK\n```\n\n----------------------------------------\n\nTITLE: Syntax for HMGET Command in DiceDB\nDESCRIPTION: Demonstrates the basic syntax for using the HMGET command in DiceDB to retrieve values from a hash.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HMGET.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHMGET key field [field ...]\n```\n\n----------------------------------------\n\nTITLE: Example: Getting Command Info for SET and MGET in DiceDB\nDESCRIPTION: Example usage of the COMMAND INFO command to retrieve metadata for the SET and MGET commands, showing returned information about arity, flags, and key positions.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND INFO.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COMMAND INFO SET MGET\n1) 1) \"SET\"\n   2) (integer) -3\n   3) (integer) 1\n   4) (integer) 0\n   5) (integer) 0\n2) 1) \"MGET\"\n   2) (integer) -2\n   3) (integer) 1\n   4) (integer) -1\n   5) (integer) 1\n```\n\n----------------------------------------\n\nTITLE: DECR Command Example in DiceDB\nDESCRIPTION: Example showing how to use the DECR command to decrement an integer value. The example first sets a key to the value 43, then decrements it to 42 using the DECR command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/DECR.md#2025-04-05_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nlocalhost:7379> SET k 43\nOK OK\nlocalhost:7379> DECR k\nOK 42\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of JSON.OBJLEN Command in DiceDB\nDESCRIPTION: Demonstrates how to count keys in the root JSON object. The example creates a JSON object with three root keys and then counts them.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.OBJLEN.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET a $ '{\"name\": \"Alice\", \"age\": 30, \"address\": {\"city\": \"Wonderland\", \"zipcode\": \"12345\"}}'\n\"OK\"\n127.0.0.1:7379> JSON.OBJLEN a $\n1) 3\n```\n\n----------------------------------------\n\nTITLE: Q.WATCH Response for Leaderboard Update\nDESCRIPTION: Example of a Q.WATCH response when a player's score is updated and meets the criteria specified in the watch query. This shows how real-time updates are received without polling.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/QWATCH.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nq.watch    from SELECT $key, $value WHERE $key like 'match:100:*' and $value > 100 ORDER BY $value asc: `[[\"match:100:user:1\", \"15\"]]`\n```\n\n----------------------------------------\n\nTITLE: HRANDFIELD with Count Parameter\nDESCRIPTION: Demonstrates using the HRANDFIELD command with a count parameter to retrieve multiple random fields from a hash.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HRANDFIELD.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HRANDFIELD keys 2\n1) \"field2\"\n2) \"field1\"\n```\n\n----------------------------------------\n\nTITLE: Defining PERSIST Command Syntax in DiceDB\nDESCRIPTION: Shows the basic syntax for using the PERSIST command in DiceDB. The command takes a single parameter 'key', which is the name of the key to persist.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PERSIST.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPERSIST key\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hash Fields and Values with HGETALL in DiceDB\nDESCRIPTION: This example demonstrates setting a hash with multiple fields using HSET and then retrieving all fields and values using HGETALL. The command returns an array of alternating field names and their corresponding values.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HGETALL.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSET user:1000 name \"John Doe\" age \"30\" country \"USA\"\n(integer) 3\n127.0.0.1:7379> HGETALL user:1000\n1) \"name\"\n2) \"John Doe\"\n3) \"age\"\n4) \"30\"\n5) \"country\"\n6) \"USA\"\n```\n\n----------------------------------------\n\nTITLE: HEXISTS Non-existent Field Check\nDESCRIPTION: Example demonstrating the response when checking for a non-existent field in a hash.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HEXISTS.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HEXISTS user:1001 age\n0\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for JSON.GET Command in DiceDB\nDESCRIPTION: The basic syntax for the JSON.GET command in DiceDB. It requires a key parameter and accepts an optional path parameter using JSONPath expression syntax.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.GET.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJSON.GET <key> [path]\n```\n\n----------------------------------------\n\nTITLE: HGETALL.WATCH Usage Example\nDESCRIPTION: Example showing how HGETALL.WATCH works across multiple clients, demonstrating real-time hash updates and notifications.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/HGETALL.WATCH.md#2025-04-05_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nclient1:7379> HSET k f1 v1\nOK 1\nclient1:7379> HGETALL.WATCH k\nentered the watch mode for HGETALL.WATCH k\n\n\nclient2:7379> HSET k f2 v2\nOK 1\n\n\nclient1:7379> ...\nentered the watch mode for HGETALL.WATCH k\nOK [fingerprint=4237011426]\nf1=v1\nf2=v2\n```\n\n----------------------------------------\n\nTITLE: Getting Value from DiceDB via HTTP POST\nDESCRIPTION: Shows how to retrieve a value for a given key from DiceDB using an HTTP POST request. The example includes both the raw HTTP request format and a cURL command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/protocols/http.mdx#2025-04-05_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /GET HTTP/1.1\nHost: your-server-address\nContent-Type: application/json\n\n{\n\"key\": \"mykey\"\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://your-server-address:PORT/GET' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"key\": \"mykey\"\n}'\n```\n\n----------------------------------------\n\nTITLE: HSTRLEN with Wrong Key Type\nDESCRIPTION: Demonstrates the error when trying to use HSTRLEN on a key that doesn't contain a hash value.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSTRLEN.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mystring \"This is a string\"\nOK\n\n127.0.0.1:7379> HSTRLEN mystring field1\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Retrieving Names from Multiple JSON Documents using JSON.MGET\nDESCRIPTION: Example demonstrating how to retrieve the 'name' field from multiple JSON documents using a single JSON.MGET command, returning values for all specified keys.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.MGET.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.MGET user:1 user:2 user:3 $.name\n1) \"\\\"Alice\\\"\"\n2) \"\\\"Bob\\\"\"\n3) \"\\\"Charlie\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Syntax for GETRANGE Command in DiceDB\nDESCRIPTION: The basic syntax for using the GETRANGE command in DiceDB. It requires a key, start index, and end index as parameters.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GETRANGE.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGETRANGE key start end\n```\n\n----------------------------------------\n\nTITLE: Basic MSET Usage Example in DiceDB\nDESCRIPTION: Example of using the MSET command to set multiple key-value pairs at once in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/MSET.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> MSET key1 \"value1\" key2 \"value2\" key3 \"value3\"\nOK\n```\n\n----------------------------------------\n\nTITLE: MSET Command Syntax in DiceDB\nDESCRIPTION: The basic syntax for the MSET command in DiceDB which requires key-value pairs as arguments.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/MSET.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMSET key1 value1 [key2 value2 ...]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Keys of the Root Object with JSON.OBJKEYS in DiceDB\nDESCRIPTION: This example demonstrates how to set a JSON object and then retrieve the keys of the root object using JSON.OBJKEYS. It shows the basic usage of the command without specifying a path.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.OBJKEYS.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET a $ '{\"name\": \"Alice\", \"age\": 30, \"address\": {\"city\": \"Wonderland\", \"zipcode\": \"12345\"}}'\n\"OK\"\n127.0.0.1:7379> JSON.OBJKEYS a $\n1) \"name\"\n2) \"age\"\n3) \"address\"\n```\n\n----------------------------------------\n\nTITLE: Executing HGETALL Command in DiceDB\nDESCRIPTION: The HGETALL command retrieves all fields and values of a hash stored at a specified key. It takes a single parameter 'key' and returns an array of strings containing field-value pairs.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HGETALL.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHGETALL key\n```\n\n----------------------------------------\n\nTITLE: Getting Hash Field from DiceDB via HTTP POST\nDESCRIPTION: Demonstrates how to retrieve a field from a hash structure in DiceDB using an HTTP POST request. The example includes both the raw HTTP request format and a cURL command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/protocols/http.mdx#2025-04-05_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /HGET HTTP/1.1\nHost: your-server-address\nContent-Type: application/json\n\n{\n\"key\": \"test\",\n\"field\": \"test\"\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://your-server-address:PORT/HGET' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"key\": \"test\",\n  \"field\": \"test\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Invalid SETEX Usage with Negative Expiration Time in DiceDB\nDESCRIPTION: Shows the error returned when attempting to use SETEX with an invalid negative expiration time.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SETEX.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SETEX foo -10 bar\n(error) ERROR invalid expire time in 'setex' command\n```\n\n----------------------------------------\n\nTITLE: Using PFCOUNT with a Single Key in DiceDB\nDESCRIPTION: Example of using PFCOUNT to estimate the cardinality of a single HyperLogLog data structure.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFCOUNT.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PFADD hll1 \"foo\" \"bar\" \"baz\"\n(integer) 1\n127.0.0.1:7379> PFCOUNT hll1\n(integer) 3\n```\n\n----------------------------------------\n\nTITLE: Executing ZCOUNT Command in DiceDB\nDESCRIPTION: This snippet demonstrates the syntax and usage of the ZCOUNT command in DiceDB. It shows how to count elements in a sorted set within a specified score range.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZCOUNT.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nZCOUNT key min max\n```\n\n----------------------------------------\n\nTITLE: Basic Key Renaming in DiceDB\nDESCRIPTION: Example of creating a key with SET, then renaming it from 'mykey' to 'mynewkey', and finally retrieving the value using the new key name.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/RENAME.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"Hello\"\nOK\n127.0.0.1:7379> RENAME mykey mynewkey\nOK\n127.0.0.1:7379> GET mynewkey\n\"Hello\"\n```\n\n----------------------------------------\n\nTITLE: MGET Command Basic Syntax\nDESCRIPTION: Basic syntax for the MGET command to retrieve multiple key values.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/MGET.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMGET key [key ...]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ZRANK Command in DiceDB\nDESCRIPTION: Demonstrates how to retrieve the rank of members in a sorted set. First, three members are added to a sorted set 'myzset' with different scores, then the ZRANK command is used to find their positions (ranks) in the set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZRANK.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset 1 member1 2 member2 3 member3\n(integer) 3\n127.0.0.1:7379> ZRANK myzset member1\n(integer) 0\n127.0.0.1:7379> ZRANK myzset member3\n(integer) 2\n```\n\n----------------------------------------\n\nTITLE: Handling Non-existent Fields with HGET in DiceDB\nDESCRIPTION: Shows the behavior of HGET when attempting to retrieve a non-existent field from a hash. The command returns nil in this case.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HGET.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HGET user:1000 email\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Setting Hash Field in DiceDB via HTTP POST\nDESCRIPTION: Illustrates how to set a field in a hash structure in DiceDB using an HTTP POST request. The example includes both the raw HTTP request format and a cURL command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/protocols/http.mdx#2025-04-05_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /HSET HTTP/1.1\nHost: your-server-address\nContent-Type: application/json\n\n{\n\"key\": \"test\",\n\"field\": \"test\",\n\"value\": \"test\"\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://your-server-address:PORT/HSET' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"key\": \"test\",\n  \"field\": \"test\",\n  \"value\": \"test\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Updating Single Key Access Time with TOUCH in DiceDB\nDESCRIPTION: Example of using the TOUCH command to update the last access time of a single key after setting its value.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/TOUCH.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSET mykey \"Hello\"\nTOUCH mykey\n```\n\n----------------------------------------\n\nTITLE: Executing HRANDFIELD Command in DiceDB\nDESCRIPTION: Demonstrates the basic syntax of the HRANDFIELD command in DiceDB. This snippet shows how to use the command to retrieve random fields from a hash.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HRANDFIELD.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHRANDFIELD key [count [WITHVALUES]]\n```\n\n----------------------------------------\n\nTITLE: BITCOUNT Command Syntax in DiceDB\nDESCRIPTION: Shows the basic syntax for the BITCOUNT command which counts set bits (1s) in a string. The command allows optional start and end parameters to specify a range, with an additional argument to determine if the range is in bytes or bits.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITCOUNT.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nBITCOUNT key [start end [BYTE | BIT]]\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Key Access Times with TOUCH in DiceDB\nDESCRIPTION: Example of using the TOUCH command to update the last access times of multiple keys, including a non-existent key.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/TOUCH.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSET key1 \"value1\"\nSET key2 \"value2\"\nTOUCH key1 key2 key3\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Field-Value Pairs with HSET in DiceDB\nDESCRIPTION: Illustrates setting multiple fields in a hash named 'user:1000' using a single HSET command. This example sets the name, age, and email of a user.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSET.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSET user:1000 name \"John Doe\" age 30 email \"john.doe@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Values with RPUSH in DiceDB\nDESCRIPTION: Demonstrates how to insert multiple values (\"world\", \"foo\", \"bar\") into a list in a single RPUSH command. The return value is the new length of the list.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/RPUSH.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> RPUSH mylist \"world\" \"foo\" \"bar\"\n(integer) 3\n```\n\n----------------------------------------\n\nTITLE: Using ZRANGE.WATCH for Real-time Leaderboard Updates in DiceDB\nDESCRIPTION: This example shows how to use ZRANGE.WATCH to create a real-time submission leaderboard for a game match. It monitors the 'match:100' key for changes in player rankings.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZRANGEWATCH.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZRANGE.WATCH match:100 0 1 REV WITHSCORES\nPress Ctrl+C to exit watch mode.\n```\n\n----------------------------------------\n\nTITLE: WebSocket Command Format\nDESCRIPTION: The standard format for sending commands over WebSocket connections to DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/protocols/websockets.mdx#2025-04-05_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCOMMAND arg1 arg2 arg3 ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bit Value from String Key in DiceDB\nDESCRIPTION: Demonstrates setting a key 'foo' with the value 'a' and then retrieving the bit value at index 1 using GETBIT.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GETBIT.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET foo \"a\"\nOK\n127.0.0.1:7379> GETBIT foo 1\n1\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Field from JSON Document in DiceDB\nDESCRIPTION: Example demonstrating how to retrieve a specific field from a JSON document using a JSONPath expression. The $.name path extracts only the name field from the stored JSON object.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.GET.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1001 $ '{\"name\": \"John Doe\", \"age\": 30, \"email\": \"john.doe@example.com\"}'\nOK\n127.0.0.1:7379> JSON.GET user:1001 $.name\n\"\\\"John Doe\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Document and Retrieving Array Length in DiceDB\nDESCRIPTION: This snippet demonstrates setting a JSON document with an email array and then retrieving its length using JSON.ARRLEN command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRLEN.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1001 $ '{\"name\":\"John Doe\",\"emails\":[\"john.doe@example.com\",\"johndoe@gmail.com\"],\"age\":30}'\nOK\n127.0.0.1:7379> JSON.ARRLEN user:1001 $.emails\n(integer) 2\n```\n\n----------------------------------------\n\nTITLE: Example 2: BITCOUNT with Byte Range\nDESCRIPTION: Demonstrates using BITCOUNT with a specific byte range, counting bits only in bytes 1 through 3 of the string. The default behavior treats range parameters as byte positions.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITCOUNT.md#2025-04-05_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"foobar\"\nOK\n127.0.0.1:7379> BITCOUNT mykey 1 3\n(integer) 15\n```\n\n----------------------------------------\n\nTITLE: Error Handling: HGET on Non-Hash Data Types in DiceDB\nDESCRIPTION: Demonstrates the error message returned when trying to use HGET on a key that doesn't contain a hash data structure.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HGET.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET user:3000 \"Not a hash\"\nOK\n127.0.0.1:7379> HGET user:3000 name\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Basic LRANGE Command Syntax in DiceDB\nDESCRIPTION: The basic syntax for the LRANGE command that returns the specified elements of a list stored at a key, using zero-based indexes.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LRANGE.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLRANGE key start stop\n```\n\n----------------------------------------\n\nTITLE: ZPOPMIN Command with Count Argument in DiceDB\nDESCRIPTION: Illustrates how to use the ZPOPMIN command with a count argument to remove and return multiple members with the lowest scores.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZPOPMIN.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset 1 member1 2 member2 3 member3\n(integer) 3\n127.0.0.1:7379> ZPOPMIN myzset 2\n1) 1 \"member1\"\n2) 2 \"member2\"\n```\n\n----------------------------------------\n\nTITLE: SET Command with TTL Retention in DiceDB\nDESCRIPTION: Example of setting a key value while retaining any existing time-to-live (TTL) using the KEEPTTL parameter.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/sample_command_docs.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET foo bar KEEPTTL\nOK\n```\n\n----------------------------------------\n\nTITLE: Example 3: BITCOUNT with Bit Range\nDESCRIPTION: Shows how to use BITCOUNT with the BIT option to count bits within a specific bit range (positions 8-31) rather than byte positions. This provides more granular control over the counting operation.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITCOUNT.md#2025-04-05_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"foobar\"\nOK\n127.0.0.1:7379> BITCOUNT mykey 8 31 BIT\n(integer) 15\n```\n\n----------------------------------------\n\nTITLE: Setting and Retrieving Substrings with GETRANGE in DiceDB\nDESCRIPTION: Examples of setting a string value and then using GETRANGE to retrieve substrings. Demonstrates basic usage and handling of negative indices.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GETRANGE.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET foo apple\nOK\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GETRANGE foo 1 3\n\"ppl\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GETRANGE foo 0 -1\n\"apple\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GETRANGE foo 0 -10\n\"\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GETRANGE foo 0 -2\n\"appl\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GETRANGE foo 0 1001\n\"apple\"\n```\n\n----------------------------------------\n\nTITLE: Setting List and Using LPOP in DiceDB\nDESCRIPTION: Example of setting a list with RPUSH and then using LPOP to remove and return the first element.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LPOP.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRPUSH mylist \"one\" \"two\" \"three\"\nLPOP mylist\n\"one\"\n```\n\n----------------------------------------\n\nTITLE: Finding First Bit Set to 0 in DiceDB String with Range\nDESCRIPTION: This example shows how to use the BITPOS command with a specified range, searching for the first bit set to 0 in the string stored at key 'mykey', starting from byte position 2 and ending at byte position 4.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITPOS.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"foobar\"\nOK\n127.0.0.1:7379> BITPOS mykey 0 2 4\n(integer) 16\n```\n\n----------------------------------------\n\nTITLE: HGETALL Error: Invalid Argument Count in DiceDB\nDESCRIPTION: This example shows the error that occurs when HGETALL is called with an incorrect number of arguments. The command expects exactly one argument (the key), and providing more results in an error.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HGETALL.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HGETALL user:3000 helloworld\n(error) ERROR wrong number of arguments for 'hgetall' command\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple JSON Values with JSON.MSET in DiceDB\nDESCRIPTION: This example demonstrates how to use the JSON.MSET command to set multiple JSON values for different keys in a single operation. It sets JSON data for two user keys.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.MSET.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.MSET user:1 '{\"name\": \"Alice\", \"age\": 30}' user:2 '{\"name\": \"Bob\", \"age\": 25}'\nOK\n```\n\n----------------------------------------\n\nTITLE: Basic HSETNX Command Syntax\nDESCRIPTION: Shows the basic syntax structure for the HSETNX command\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSETNX.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHSETNX key field value\n```\n\n----------------------------------------\n\nTITLE: Conditional SET Command with XX Flag in DiceDB\nDESCRIPTION: Example of setting a key only if it already exists using the XX (eXists) option.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/sample_command_docs.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET foo bar XX\n```\n\n----------------------------------------\n\nTITLE: Syntax for GEODIST Command in DiceDB\nDESCRIPTION: The basic syntax for the GEODIST command, showing required and optional parameters for calculating distances between geospatial points.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GEODIST.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGEODIST key member1 member2 [m | km | ft | mi]\n```\n\n----------------------------------------\n\nTITLE: Error Handling: Non-Existent Path in JSON.ARRAPPEND\nDESCRIPTION: Shows the error message when trying to append to a JSON path that does not exist within the document. It first sets a JSON document, then attempts to append to a non-existent path.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRAPPEND.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET myjson . '{\"numbers\": [1, 2, 3]}'\nOK\n127.0.0.1:7379> JSON.ARRAPPEND myjson .nonexistingpath 4\n(error) ERR path .nonexistingpath does not exist\n```\n\n----------------------------------------\n\nTITLE: Using INCR Option with ZADD in DiceDB\nDESCRIPTION: Illustrates the use of the INCR option to increment the score of an existing member.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZADD.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset INCR 1 \"two\"\n(integer) 12\n```\n\n----------------------------------------\n\nTITLE: Setting Basic JSON Value\nDESCRIPTION: Demonstrates setting a JSON value at the root of a new key with basic user information\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.SET.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1001 $ '{\"name\": \"John Doe\", \"age\": 30}'\nOK\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hash Length in DiceDB using HLEN Command (Bash)\nDESCRIPTION: This snippet demonstrates the basic syntax for using the HLEN command in DiceDB to retrieve the number of fields in a hash. It shows the command structure and expected input.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HLEN.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHLEN key\n```\n\n----------------------------------------\n\nTITLE: Appending a Single Value to JSON Array in DiceDB\nDESCRIPTION: Illustrates how to append a single numeric value to an existing JSON array using JSON.ARRAPPEND. It first sets a JSON document, then appends a value, and finally retrieves the updated document.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRAPPEND.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET myjson . '{\"numbers\": [1, 2, 3]}'\nOK\n127.0.0.1:7379> JSON.ARRAPPEND myjson .numbers 4\n(integer) 4\n127.0.0.1:7379> JSON.GET myjson\n\"{\\\"numbers\\\":[1,2,3,4]}\"\n```\n\n----------------------------------------\n\nTITLE: Checking Original Bit Value with SETBIT in DiceDB\nDESCRIPTION: Example demonstrating how SETBIT returns the original bit value before setting it. In this case, it returns 0 (the previous value) and then sets the bit to 1.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SETBIT.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SETBIT mykey 7 1\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Avoiding Redundant Information in Logs\nDESCRIPTION: Shows how to eliminate redundancy in log messages by not repeating information that is already present in the structured data fields.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/logging.md#2025-04-05_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nslog.Info(\"running in multi-threaded mode with\", slog.String(\"mode\", \"multi-threaded\"), slog.Int(\"num-shards\", numShards))  // not okay\nslog.Info(\"running with\", slog.String(\"mode\", \"multi-threaded\"), slog.Int(\"num-shards\", numShards))  // okay\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Nested Field from JSON Document in DiceDB\nDESCRIPTION: Example showing how to access a nested field within a JSON document using dot notation in the JSONPath expression. The $.address.city path extracts the city field from the nested address object.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.GET.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1002 $ '{\"name\": \"Jane Doe\", \"address\": {\"city\": \"New York\", \"zip\": \"10001\"}}'\nOK\n127.0.0.1:7379> JSON.GET user:1002 $.address.city\n\"\\\"New York\\\"\"\n```\n\n----------------------------------------\n\nTITLE: JSON.ARRINDEX with Range Search in DiceDB\nDESCRIPTION: Demonstrates searching within a specific range using both start and stop indices in the array.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRINDEX.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET b $ '{\"name\": \"Alice\", \"mobile\": [1902, 1903, 1904]}'\n\"OK\"\n127.0.0.1:7379> JSON.ARRINDEX a $.mobile 1902 0 2\n1) (integer) 0\n127.0.0.1:7379> JSON.ARRINDEX a $.mobile 1902 1 2\n1) (integer) -1\n127.0.0.1:7379> JSON.ARRINDEX a $.mobile 1904 0 1\n1) (integer) -1\n127.0.0.1:7379> JSON.ARRINDEX a $.mobile 1904 0 2\n1) (integer) -1\n127.0.0.1:7379> JSON.ARRINDEX a $.mobile 1904 0 3\n1) (integer) 2\n```\n\n----------------------------------------\n\nTITLE: Syntax for JSON.MGET Command in DiceDB\nDESCRIPTION: The basic syntax for the JSON.MGET command in DiceDB, which takes one or more keys and a JSON path as parameters.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.MGET.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJSON.MGET key [key ...] path\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of JSON.TYPE Command in DiceDB\nDESCRIPTION: Shows examples of using the JSON.TYPE command to determine the types of various elements within a JSON document. It includes setting a JSON document and querying different paths.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.TYPE.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1001 $ '{\"name\": \"John\", \"age\": 30, \"address\": {\"city\": \"New York\", \"zip\": \"10001\"}}'\nOK\n127.0.0.1:7379> JSON.TYPE user:1001 $.name\n\"string\"\n127.0.0.1:7379> JSON.TYPE user:1001 $.age\n\"number\"\n127.0.0.1:7379> JSON.TYPE user:1001 $.address\n\"object\"\n127.0.0.1:7379> JSON.TYPE user:1001 $.address.city\n\"string\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Hash and Retrieving its Length in DiceDB (Bash)\nDESCRIPTION: This example shows how to create a hash with two fields using HSET, and then retrieve its length using HLEN. It demonstrates the basic usage of HLEN on an existing hash.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HLEN.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSET myhash field1 \"value1\" field2 \"value2\"\n(integer) 2\n\n127.0.0.1:7379> HLEN myhash\n(integer) 2\n```\n\n----------------------------------------\n\nTITLE: HyperLogLog Update Operations Example\nDESCRIPTION: Shows a series of PFADD and PFMERGE operations performed in another client that will trigger cardinality updates to the watching client. These operations add various users to the HyperLogLog and merge another HyperLogLog into it.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFCOUNTWATCH.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PFADD users:hll \"user1\"\nOK\n127.0.0.1:7379> PFADD users:hll \"user2\" \"user3\"\nOK\n127.0.0.1:7379> PFADD users:hll \"user4\"\nOK\n127.0.0.1:7379> PFADD other:hll \"user5\"\nOK\n127.0.0.1:7379> PFMERGE users:hll users:hll other:hll\nOK\n```\n\n----------------------------------------\n\nTITLE: Setting a Bit with SETBIT in DiceDB\nDESCRIPTION: Example of setting a bit at offset 7 to 1 in a string stored at 'mykey'. The command returns 0, indicating the previous value of the bit was 0.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SETBIT.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SETBIT mykey 7 1\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: HMSET Command with Incorrect Argument Count in DiceDB\nDESCRIPTION: Demonstrates error scenarios when using the HMSET command with an incorrect number of arguments in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HMSET.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HMSET product:4000\n(error) ERR wrong number of arguments for 'hmset' command\n\n127.0.0.1:7379> HMSET product:4000 name\n(error) ERR wrong number of arguments for 'hmset' command\n```\n\n----------------------------------------\n\nTITLE: Appending Multiple Values to JSON Array in DiceDB\nDESCRIPTION: Shows how to append multiple string values to a JSON array using a single JSON.ARRAPPEND command. It sets an initial JSON document with an array of fruits, appends two more fruits, and retrieves the result.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRAPPEND.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET myjson . '{\"fruits\": [\"apple\", \"banana\"]}'\nOK\n127.0.0.1:7379> JSON.ARRAPPEND myjson .fruits \"cherry\" \"date\"\n(integer) 4\n127.0.0.1:7379> JSON.GET myjson\n\"{\\\"fruits\\\":[\\\"apple\\\",\\\"banana\\\",\\\"cherry\\\",\\\"date\\\"]}\"\n```\n\n----------------------------------------\n\nTITLE: KEYS Command Syntax in DiceDB\nDESCRIPTION: The basic syntax for the KEYS command in DiceDB, which requires a pattern parameter to match against keys in the database.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/KEYS.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nKEYS pattern\n```\n\n----------------------------------------\n\nTITLE: BF.EXISTS Command Syntax\nDESCRIPTION: The syntax for the BF.EXISTS command that checks whether an item may exist in a Bloom Filter.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BF.EXISTS.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nBF.EXISTS key item\n```\n\n----------------------------------------\n\nTITLE: Popping Value from JSON Array Example\nDESCRIPTION: Demonstrates setting a JSON document with an array and popping a value at index 1, showing both the popped value and resulting array structure.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRPOP.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET myjson . '{\"numbers\": [1, 2, 3]}'\nOK\n127.0.0.1:7379> JSON.ARRPOP myjson .numbers 1\n(integer) 2\n127.0.0.1:7379> JSON.GET myjson\n\"{\\\"numbers\\\":[1,3]}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Length of Non-existent Hash in DiceDB (Bash)\nDESCRIPTION: This example demonstrates using HLEN on a non-existent hash key. It shows that HLEN returns 0 for keys that don't exist, which is consistent with an empty hash.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HLEN.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HLEN nonExistentHash\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Deleting a field from a hash in DiceDB\nDESCRIPTION: Example showing how to delete a field named 'name' from a hash structure at key 'user:1000', and verify deletion using HGET.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HDEL.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSET user:1000 name \"John Doe\"\n(integer) 1\n127.0.0.1:7379> HDEL user:1000 name\n(integer) 1\n127.0.0.1:7379> HGET user:1000 name\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Clearing a Bit with SETBIT in DiceDB\nDESCRIPTION: Example of clearing a bit at offset 7 by setting it to 0 in a string stored at 'mykey'. The command returns 1, indicating the previous value of the bit was 1.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SETBIT.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SETBIT mykey 7 0\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Error When Path Doesn't Exist in JSON.ARRTRIM Command\nDESCRIPTION: Example showing the error that occurs when trying to use JSON.ARRTRIM with a path that doesn't exist in the JSON document.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRTRIM.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET d $ '[1, 2, 3, 4, 5]'\n\"OK\"\n127.0.0.1:7379> JSON.ARRTRIM d . -10 10\n(error) ERROR Path '.' does not exist\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards with JSON.ARRLEN Command in DiceDB\nDESCRIPTION: This snippet demonstrates using wildcards in the path parameter of JSON.ARRLEN to get lengths of multiple arrays or return nil for non-array elements.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRLEN.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1005 $ '{\"age\": 13,\"high\": 1.60,\"pet\": null,\"language\": [\"python\", \"golang\"],\"partner\": {\"name\": \"tom\"}}'\nOK\n127.0.0.1:7379> JSON.ARRLEN user:1005 $.*\n1) (nil)\n1) (nil)\n1) (nil)\n4) (integer) 2\n5) (nil)\n```\n\n----------------------------------------\n\nTITLE: Basic Example of SCARD Command Usage in DiceDB\nDESCRIPTION: This example demonstrates adding three members to a set called 'myset' using SADD commands, and then retrieving the set's cardinality using the SCARD command, which returns 3.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SCARD.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SADD myset \"apple\"\n(integer) 1\n127.0.0.1:7379> SADD myset \"banana\"\n(integer) 1\n127.0.0.1:7379> SADD myset \"cherry\"\n(integer) 1\n127.0.0.1:7379> SCARD myset\n(integer) 3\n```\n\n----------------------------------------\n\nTITLE: Retrieving Geohash for Existing Members in DiceDB\nDESCRIPTION: This example demonstrates how to add geographic locations to a sorted set using GEOADD and then retrieve their Geohash representations using the GEOHASH command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GEOHASH.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GEOADD locations 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\n2\n127.0.0.1:7379> GEOHASH locations Palermo Catania\n1) \"sqc8b49rny\"\n2) \"sq9sm17147\"\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Paths with JSON.OBJKEYS in DiceDB\nDESCRIPTION: This example shows the behavior of JSON.OBJKEYS when the specified path does not exist within the JSON document. It returns an empty list or set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.OBJKEYS.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET d $ '{\"name\": \"Alice\", \"address\": {\"city\": \"Wonderland\"}}'\n\"OK\"\n127.0.0.1:7379> JSON.OBJKEYS d $.nonexistentPath\n(empty list or set)\n```\n\n----------------------------------------\n\nTITLE: HSCAN Command Syntax in DiceDB\nDESCRIPTION: Shows the basic syntax for the HSCAN command which is used to incrementally iterate over hash fields.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSCAN.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHSCAN key cursor [MATCH pattern] [COUNT count]\n```\n\n----------------------------------------\n\nTITLE: HEXISTS Command Basic Syntax\nDESCRIPTION: Basic syntax for the HEXISTS command that checks if a field exists within a hash stored at a given key.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HEXISTS.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHEXISTS key field\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of LLEN Command in DiceDB\nDESCRIPTION: An example demonstrating the basic usage of the LLEN command. It shows how to create a list using RPUSH and then get its length using LLEN.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LLEN.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> RPUSH mylist \"one\"\n(integer) 1\n127.0.0.1:7379> RPUSH mylist \"two\"\n(integer) 2\n127.0.0.1:7379> RPUSH mylist \"three\"\n(integer) 3\n127.0.0.1:7379> LLEN mylist\n(integer) 3\n```\n\n----------------------------------------\n\nTITLE: HyperLogLog Unmodified Example in DiceDB\nDESCRIPTION: Demonstrates adding an element that does not alter any internal registers of the HyperLogLog, resulting in a return value of 0.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFADD.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PFADD myhyperloglog \"element1\"\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Counting Keys in Nested JSON Objects with DiceDB\nDESCRIPTION: Demonstrates how to count keys inside a nested JSON object by specifying a JSON Path to the nested structure.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.OBJLEN.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET b $ '{\"name\": \"Alice\", \"address\": {\"city\": \"Wonderland\", \"state\": \"Fantasy\", \"zipcode\": \"12345\"}}'\n\"OK\"\n127.0.0.1:7379> JSON.OBJLEN b $.address\n1) 3\n```\n\n----------------------------------------\n\nTITLE: Retrieving Reversed Range from Sorted Set in DiceDB\nDESCRIPTION: Illustrates the use of ZRANGE command with REV option to retrieve elements in reverse order from a sorted set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZRANGE.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZRANGE leaderboard 0 2 REV\n1) \"Bob\"\n2) \"Charlie\"\n3) \"Alice\"\n```\n\n----------------------------------------\n\nTITLE: Executing DBSIZE Command in DiceDB\nDESCRIPTION: The DBSIZE command is used to return the number of keys in the currently selected database. It takes no parameters and returns an integer representing the key count.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/DBSIZE.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDBSIZE\n```\n\n----------------------------------------\n\nTITLE: Creating Initial JSON Document\nDESCRIPTION: Example of creating a JSON document with numeric values that can be incremented.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.NUMINCRBY.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1001 $ '{\"name\": \"John Doe\", \"age\": 30, \"balance\": 100.50, \"account\": {\"id\": 0, \"lien\": 0, \"balance\": 100.50}}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Fields with HMGET in DiceDB\nDESCRIPTION: Shows how to use HMGET to retrieve multiple field values from a hash in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HMGET.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HMGET product:2000 name price stock\n1) \"Laptop\"\n2) \"999.99\"\n3) \"50\"\n```\n\n----------------------------------------\n\nTITLE: Syntax for SMEMBERS Command in DiceDB\nDESCRIPTION: The basic syntax for using the SMEMBERS command in DiceDB. It takes a single parameter 'key' which identifies the set to retrieve members from.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SMEMBERS.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSMEMBERS key\n```\n\n----------------------------------------\n\nTITLE: Overwriting an Existing Key with RENAME in DiceDB\nDESCRIPTION: Demonstration of how the RENAME command overwrites the destination key when it already exists. Both keys are created with SET, then key1 is renamed to key2, overwriting key2's value.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/RENAME.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET key1 \"Value1\"\nOK\n127.0.0.1:7379> SET key2 \"Value2\"\nOK\n127.0.0.1:7379> RENAME key1 key2\nOK\n127.0.0.1:7379> GET key2\n\"Value1\"\n```\n\n----------------------------------------\n\nTITLE: Persisting a Key Without Expiration in DiceDB\nDESCRIPTION: Illustrates the use of PERSIST on a key that doesn't have an expiration set. The command returns 0, indicating no change was made.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PERSIST.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"Hello\"\nOK\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PERSIST mykey\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Updated JSON Document After Toggling Nested Boolean\nDESCRIPTION: The resulting JSON document after toggling the nested 'notifications' field from true to false.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.TOGGLE.md#2025-04-05_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"John Doe\",\n  \"active\": false,\n  \"settings\": {\n    \"notifications\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BF.RESERVE Command Syntax in DiceDB\nDESCRIPTION: The basic syntax of the BF.RESERVE command used to initialize a new Bloom Filter in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BF.RESERVE.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nBF.RESERVE key [options]\n```\n\n----------------------------------------\n\nTITLE: Authenticating with HELLO Command in DiceDB\nDESCRIPTION: This example shows how to use the HELLO command to switch to protocol version 3 and authenticate with a username and password in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HELLO.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HELLO 3 AUTH myusername mypassword\n```\n\n----------------------------------------\n\nTITLE: Clearing a JSON Object with JSON.CLEAR in DiceDB\nDESCRIPTION: This example demonstrates how to clear an object property (address) in a JSON document. After clearing, the address becomes an empty object while preserving the key.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.CLEAR.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1001 $ '{\"name\": \"John Doe\", \"age\": 30, \"address\": {\"street\": \"123 Main St\", \"city\": \"Anytown\"}}'\nOK\n127.0.0.1:7379> JSON.CLEAR user:1001 $.address\n(integer) 1\n127.0.0.1:7379> JSON.GET user:1001\n\"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":30,\\\"address\\\":{}}\"\n```\n\n----------------------------------------\n\nTITLE: Redis Protocol Command Formatting Examples\nDESCRIPTION: Examples of Redis protocol formatted commands for PING, SET, and GET operations. Each command follows the Redis Serialization Protocol (RESP) format with command lengths and arguments clearly defined.\nSOURCE: https://github.com/DiceDB/dice/blob/master/DOC.md#2025-04-05_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nPING:       *1\\r\\n$4\\r\\nPING\\r\\n\nSET k v:    *3\\r\\n$3\\r\\nSET\\r\\n$1\\r\\nk\\r\\n$1\\r\\nv\\r\\n\nGET k:      *2\\r\\n$3\\r\\nGET\\r\\n$1\\r\\nk\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Basic LPOP Command Syntax in DiceDB\nDESCRIPTION: The basic syntax for the LPOP command in DiceDB, which removes and returns the first element of a list at a specified key.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LPOP.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLPOP key\n```\n\n----------------------------------------\n\nTITLE: ZREM Command Syntax in DiceDB\nDESCRIPTION: The syntax for the ZREM command, which requires a key and at least one member to be removed from the sorted set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZREM.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nZREM key member [member ...]\n```\n\n----------------------------------------\n\nTITLE: HINCRBY with Non-existing Field\nDESCRIPTION: Shows HINCRBY usage on an existing hash with a non-existing field\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HINCRBY.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HINCRBY keys field2 10\n(integer) 10\n```\n\n----------------------------------------\n\nTITLE: Clearing an Array with JSON.CLEAR in DiceDB\nDESCRIPTION: This example demonstrates clearing an array in a JSON document. When an array is cleared, it becomes an empty array while maintaining the key in the document structure.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.CLEAR.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1002 $ '{\"name\": \"Jane Doe\", \"hobbies\": [\"reading\", \"swimming\", \"hiking\"]}'\nOK\n127.0.0.1:7379> JSON.CLEAR user:1002 $.hobbies\n(integer) 1\n127.0.0.1:7379> JSON.GET user:1002\n\"{\\\"name\\\":\\\"Jane Doe\\\",\\\"hobbies\\\":[]}\"\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of DBSIZE Command in DiceDB\nDESCRIPTION: This example demonstrates the basic usage of the DBSIZE command, showing how it returns the number of keys in the current database.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/DBSIZE.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> DBSIZE\n(integer) 42\n```\n\n----------------------------------------\n\nTITLE: Fetching Keys of Nested Object with JSON.OBJKEYS in DiceDB\nDESCRIPTION: This example shows how to retrieve the keys of a nested object within a JSON document using JSON.OBJKEYS. It demonstrates the use of the path parameter to access nested structures.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.OBJKEYS.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET b $ '{\"name\": \"Alice\", \"partner\": {\"name\": \"Bob\", \"age\": 28}}'\n\"OK\"\n127.0.0.1:7379> JSON.OBJKEYS b $.partner\n1) \"name\"\n2) \"age\"\n```\n\n----------------------------------------\n\nTITLE: Clearing the Root Path with JSON.CLEAR in DiceDB\nDESCRIPTION: This example shows how to clear the entire JSON document by applying the JSON.CLEAR command to the root path. The result is an empty JSON object.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.CLEAR.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1003 $ '{\"name\": \"Alice\", \"age\": 25}'\nOK\n127.0.0.1:7379> JSON.CLEAR user:1003\n(integer) 1\n127.0.0.1:7379> JSON.GET user:1003\n\"{}\"\n```\n\n----------------------------------------\n\nTITLE: Sending Pipelined Commands with Netcat\nDESCRIPTION: Examples of using netcat (nc) to send multiple Redis commands to DiceDB in a single pipeline. The first command sends a raw string, while the second sends properly formatted Redis protocol commands for PING, SET, and GET operations.\nSOURCE: https://github.com/DiceDB/dice/blob/master/DOC.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ (printf 'CMD1CMD2CMD3';) | nc localhost 7379\n$ (printf '*1\\r\\n$4\\r\\nPING\\r\\n*3\\r\\n$3\\r\\nSET\\r\\n$1\\r\\nk\\r\\n$1\\r\\nv\\r\\n*2\\r\\n$3\\r\\nGET\\r\\n$1\\r\\nk\\r\\n';) | nc localhost 7379\n```\n\n----------------------------------------\n\nTITLE: Setting SETEX Command Syntax in DiceDB\nDESCRIPTION: Demonstrates the basic syntax for the SETEX command in DiceDB. It requires a key name, expiration time in seconds, and a value to be set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SETEX.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSETEX key seconds value\n```\n\n----------------------------------------\n\nTITLE: COPY Command Syntax in DiceDB\nDESCRIPTION: Defines the syntax for the COPY command in DiceDB, showing the basic structure with source and destination keys, optional database switching, and the REPLACE flag.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COPY.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCOPY <source> <destination> [DB destination-db] [REPLACE]\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Keys in JSON.GET in DiceDB\nDESCRIPTION: Example showing the behavior of JSON.GET when attempting to retrieve a non-existent key. The command returns nil when the specified key does not exist in the database.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.GET.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.GET user:9999\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Getting Length of Name Field\nDESCRIPTION: Example showing how to use JSON.STRLEN to get the length of the 'name' field in a JSON document stored under the key 'user:1001'.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.STRLEN.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nJSON.STRLEN user:1001 $.name\n(integer) 8\n```\n\n----------------------------------------\n\nTITLE: GEOADD Command Syntax in DiceDB\nDESCRIPTION: The basic syntax for the GEOADD command, showing the required and optional parameters including key, coordinates, and member names. Supports options like NX (only add new elements) and XX (only update existing elements).\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GEOADD.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGEOADD key [NX | XX] [CH] longitude latitude member [longitude latitude member ...]\n```\n\n----------------------------------------\n\nTITLE: Adding an Existing Item to a Bloom Filter using BF.ADD in DiceDB\nDESCRIPTION: This example shows the behavior of BF.ADD when attempting to add an item that already exists in the Bloom Filter. The command returns 0 to indicate the item was likely already present.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BF.ADD.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> BF.ADD mybloomfilter \"apple\"\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Handling Error: Invalid JSON in JSON.MSET\nDESCRIPTION: This example demonstrates the error returned when JSON.MSET is called with an invalid JSON string for one of the values.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.MSET.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.MSET user:1 '{\"name\": \"Alice\", \"age\": 30}' user:2 '{name: \"Bob\", age: 25}'\n(error) ERR invalid JSON string\n```\n\n----------------------------------------\n\nTITLE: Defining JSON.ARRINSERT Command Syntax in DiceDB\nDESCRIPTION: Specifies the syntax for the JSON.ARRINSERT command, which is used to insert one or more JSON values into an array at a specified path before a given index.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRINSERT.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJSON.ARRINSERT <key> <path> <index> <value> [value ...]\n```\n\n----------------------------------------\n\nTITLE: BITFIELD Command with OVERFLOW FAIL in DiceDB\nDESCRIPTION: Illustrates the use of OVERFLOW FAIL option in the BITFIELD command, which returns nil when an overflow would occur.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITFIELD.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> BITFIELD mykey OVERFLOW FAIL incrby u2 102 1\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Removing Single Member from Set\nDESCRIPTION: Demonstrates removing a single member from a set using SREM command with return value showing successful removal.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SREM.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SADD myset \"one\" \"two\" \"three\"\n127.0.0.1:7379> SREM myset \"two\"\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Listing Connected Clients in DiceDB\nDESCRIPTION: Shows how to list all connected clients with detailed information using CLIENT LIST command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/CLIENT.md#2025-04-05_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n127.0.0.1:7379> CLIENT LIST\nid=3 addr=127.0.0.1:6379 fd=6 name= age=3 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=client\n```\n\n----------------------------------------\n\nTITLE: Checking for an Existing Item in a Bloom Filter\nDESCRIPTION: Example showing how to check for an item that has been added to a Bloom Filter. The command returns 1, indicating the item may exist.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BF.EXISTS.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> BF.ADD myBloomFilter \"apple\"\n(integer) 1\n127.0.0.1:7379> BF.EXISTS myBloomFilter \"apple\"\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Defining GETBIT Command Syntax in DiceDB\nDESCRIPTION: Specifies the syntax for the GETBIT command, which requires a key and an offset as parameters.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GETBIT.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGETBIT key offset\n```\n\n----------------------------------------\n\nTITLE: Updating a Watched Sorted Set with ZADD Commands\nDESCRIPTION: A series of ZADD commands that update the watched sorted set, which will trigger notifications to the watching client.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZRANGEUNWATCH.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD match:100 1 \"player1\"\nOK\n127.0.0.1:7379> ZADD match:100 2 \"player2\"\nOK\n127.0.0.1:7379> ZADD match:100 1 \"player3\"\nOK\n127.0.0.1:7379> ZADD match:100 4 \"player4\"\nOK\n```\n\n----------------------------------------\n\nTITLE: Checking for a Non-Existing Item in a Bloom Filter\nDESCRIPTION: Example showing how to check for an item that doesn't exist in a Bloom Filter. The command returns 0, indicating the item definitely does not exist.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BF.EXISTS.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> BF.EXISTS myBloomFilter \"banana\"\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Inserting Values at Valid Index in DiceDB JSON Array\nDESCRIPTION: Demonstrates basic usage of JSON.ARRINSERT command to insert multiple values at a specified index in the root path of a JSON array.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRINSERT.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET a $ '[1,2]'\nOK\n127.0.0.1:7379> JSON.ARRINSERT a $ 2 3 4 5\n(integer) 5\n127.0.0.1:7379> JSON.GET a\n[1,2,3,4,5]\n```\n\n----------------------------------------\n\nTITLE: Inserting into Nested JSON Arrays in DiceDB\nDESCRIPTION: Illustrates how to use JSON.ARRINSERT with nested arrays, inserting multiple values including a boolean into all matching paths.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRINSERT.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET b $ '{\"name\":\"tom\",\"score\":[10,20],\"partner2\":{\"score\":[10,20]}}'\nOK\n127.0.0.1:7379> JSON.ARRINSERT b $..score 1 5 6 true\n(integer) 5\n127.0.0.1:7379> JSON.GET b\n{\"name\":\"tom\",\"score\":[10,5,6,true,20],\"partner2\":{\"score\":[10,5,6,true,20]}}\n```\n\n----------------------------------------\n\nTITLE: PFADD Command Syntax in DiceDB\nDESCRIPTION: Shows the basic syntax for the PFADD command which takes a key and one or more elements to add to a HyperLogLog data structure.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFADD.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPFADD key element [element ...]\n```\n\n----------------------------------------\n\nTITLE: Adding Members to an Existing Set in DiceDB\nDESCRIPTION: Example showing how to add additional members to an existing set, where duplicate values are ignored and only new values are added.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SADD.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SADD fruits \"banana\" \"date\" \"elderberry\"\n(integer) 2\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Source Keys with PFMERGE in DiceDB\nDESCRIPTION: Demonstrates how PFMERGE handles non-existent source keys by treating them as empty HyperLogLogs. The example merges two existing HyperLogLogs with a non-existent key.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFMERGE.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PFMERGE hll_merged hll1 hll2 non_existent_key\nOK\n127.0.0.1:7379> PFCOUNT hll_merged\n(integer) 5\n```\n\n----------------------------------------\n\nTITLE: Basic JSON.ARRPOP Command Syntax\nDESCRIPTION: Shows the basic syntax structure for the JSON.ARRPOP command which requires a key and optionally accepts a path and index parameter.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRPOP.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJSON.ARRPOP key [path [index]]\n```\n\n----------------------------------------\n\nTITLE: Getting Length of Nested City Field\nDESCRIPTION: Example demonstrating how to use JSON.STRLEN to get the length of a string within a nested object (the 'city' field in the 'address' object).\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.STRLEN.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nJSON.STRLEN user:1001 $.address.city\n(integer) 8\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Usage of PFMERGE in DiceDB\nDESCRIPTION: Shows an example of invalid usage of the PFMERGE command, where one of the source keys is not a valid HyperLogLog. This results in a WRONGTYPE error.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFMERGE.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PFMERGE hll_merged not_hyperLogLog\n(error) WRONGTYPE Key is not a valid HyperLogLog string value\n```\n\n----------------------------------------\n\nTITLE: Building DiceDB from Source\nDESCRIPTION: Commands to clone and build the DiceDB server from source code.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/development-setup.md#2025-04-05_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/dicedb/dice\n$ cd dice\n$ make build\n```\n\n----------------------------------------\n\nTITLE: Using Negative Index for JSON Array Insertion in DiceDB\nDESCRIPTION: Shows how to use a negative index with JSON.ARRINSERT to insert values at the end of a JSON array.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRINSERT.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET a $ '[1,2]'\nOK\n127.0.0.1:7379> JSON.ARRINSERT a $ -2 3 4 5\n(integer) 5\n127.0.0.1:7379> JSON.GET a\n[3,4,5,1,2]\n```\n\n----------------------------------------\n\nTITLE: Basic JSON.FORGET Usage Example\nDESCRIPTION: Example showing how to delete an 'age' field from a JSON document stored at key 'user:1001'.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.FORGET.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.FORGET user:1001 $.age\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Toggling a Top-Level Boolean Value with JSON.TOGGLE\nDESCRIPTION: Example of using the JSON.TOGGLE command to flip the 'active' boolean field from true to false in the user document.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.TOGGLE.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.TOGGLE user:1001 $.active\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: JSON.FORGET Command Syntax\nDESCRIPTION: Basic syntax for the JSON.FORGET command showing required parameters.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.FORGET.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJSON.FORGET key path\n```\n\n----------------------------------------\n\nTITLE: JSON.ARRINDEX with Start Index in DiceDB\nDESCRIPTION: Shows how to search for array elements starting from a specific index position using the start parameter.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRINDEX.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET b $ '{\"name\": \"Alice\", \"mobile\": [1902, 1903, 1904]}'\n\"OK\"\n127.0.0.1:7379> JSON.ARRINDEX a $.mobile 1902 0\n1) (integer) 0\n127.0.0.1:7379> JSON.ARRINDEX a $.mobile 1902 1\n1) (integer) -1\n```\n\n----------------------------------------\n\nTITLE: Example: Using COMMAND INFO with an Invalid Command in DiceDB\nDESCRIPTION: Example showing the response when COMMAND INFO is used with an unknown or unsupported command, which returns nil to indicate no metadata is available.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND INFO.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COMMAND INFO UNKNOWNCOMMAND\n1) (nil)\n```\n\n----------------------------------------\n\nTITLE: Error Handling: HLEN on Non-Hash Key in DiceDB (Bash)\nDESCRIPTION: This example shows the error that occurs when trying to use HLEN on a key that doesn't contain a hash. It demonstrates how DiceDB handles type mismatches for commands.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HLEN.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mystring \"This is a string\"\nOK\n\n127.0.0.1:7379> HLEN mystring\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Deleting Array Element Example\nDESCRIPTION: Example demonstrating how to delete an element from a JSON array using JSON.FORGET.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.FORGET.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.FORGET user:1002 $.hobbies[1]\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Reply Mode in DiceDB\nDESCRIPTION: Demonstrates how to configure the reply mode for client commands using CLIENT REPLY command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/CLIENT.md#2025-04-05_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n127.0.0.1:7379> CLIENT REPLY ON\nOK\n```\n\n----------------------------------------\n\nTITLE: UNWATCH Command Syntax\nDESCRIPTION: The basic syntax for the UNWATCH command showing the required fingerprint parameter.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/UNWATCH.md#2025-04-05_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUNWATCH <fingerprint>\n```\n\n----------------------------------------\n\nTITLE: JSON.RESP Array Example\nDESCRIPTION: Shows how to use JSON.RESP to retrieve an array stored as JSON and its RESP format output\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.RESP.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET arrayjson $ '[\"dice\",10,10.5,true,null]'\nOK\n127.0.0.1:7379> JSON.RESP\n1) [\n2) \"dice\"\n3) (integer) 10\n4) \"10.5\"\n5) true\n6) (nil)\n```\n\n----------------------------------------\n\nTITLE: COMMAND HELP Error Example\nDESCRIPTION: Shows the error response when incorrect arguments are provided to the COMMAND HELP command, demonstrating the arity error handling.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND HELP.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COMMAND HELP EXTRA ARGS\n(error) ERR wrong number of arguments for 'command|help' command\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Hash with Multiple Fields using HMSET in DiceDB\nDESCRIPTION: Shows how to update multiple fields in an existing hash using the HMSET command in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HMSET.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HMSET product:4000 price 279.99 stock 25\nOK\n```\n\n----------------------------------------\n\nTITLE: Adding an Item to a Bloom Filter using BF.ADD in DiceDB\nDESCRIPTION: This snippet demonstrates how to use the BF.ADD command to add an item to a Bloom Filter. It shows the syntax and expected return value when adding a new item.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BF.ADD.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> BF.ADD mybloomfilter \"apple\"\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Unpausing Client Operations in DiceDB\nDESCRIPTION: Demonstrates how to resume previously paused client operations using CLIENT UNPAUSE command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/CLIENT.md#2025-04-05_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n127.0.0.1:7379> CLIENT UNPAUSE\nOK\n```\n\n----------------------------------------\n\nTITLE: HGETALL.WATCH Syntax Definition\nDESCRIPTION: The basic syntax for the HGETALL.WATCH command which takes a key parameter.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/HGETALL.WATCH.md#2025-04-05_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nHGETALL.WATCH key\n```\n\n----------------------------------------\n\nTITLE: JSON.RESP Nested JSON Example\nDESCRIPTION: Demonstrates using JSON.RESP with a path parameter to retrieve nested JSON data in RESP format\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.RESP.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET myjson $ '{\"a\":100,\"b\":[\"dice\",10,10.5,true,null]}'\nOK\n127.0.0.1:7379> JSON.RESP myjson $.b\n1) 1) [\n   2) \"dice\"\n   3) (integer) 10\n   4) \"10.5\"\n   5) true\n   6) (nil)\n```\n\n----------------------------------------\n\nTITLE: Q.WATCH Example for Real-time Leaderboard\nDESCRIPTION: Practical example of using Q.WATCH to create a real-time leaderboard for a game match. This query monitors keys matching 'match:100:*', filters scores above 10, orders results descending, and limits to top 3 entries.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/QWATCH.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> Q.WATCH \"SELECT $key, $value WHERE $key like 'match:100:*' AND $value > 10 ORDER BY $value DESC LIMIT 3\"\nq.watch    from SELECT $key, $value WHERE $key like 'match:100:*' AND $value > 10 ORDER BY $value asc: []\n```\n\n----------------------------------------\n\nTITLE: Basic HSTRLEN Command Syntax\nDESCRIPTION: Shows the basic syntax for the HSTRLEN command that retrieves the string length of a value associated with a field in a hash.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSTRLEN.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHSTRLEN key field\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Paths with JSON.DEL\nDESCRIPTION: This example demonstrates the behavior when trying to delete a path that doesn't exist in the JSON document. The command returns 0 indicating no paths were deleted.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.DEL.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET myjson $ '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\nOK\n127.0.0.1:7379> JSON.DEL myjson $.address\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Updated JSON Document After Toggling Top-Level Boolean\nDESCRIPTION: The resulting JSON document after toggling the 'active' field from true to false.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.TOGGLE.md#2025-04-05_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"John Doe\",\n  \"active\": false,\n  \"settings\": {\n    \"notifications\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements to HyperLogLog in DiceDB\nDESCRIPTION: Shows how to add multiple elements to a HyperLogLog data structure in a single command, with a return value of 1 indicating register modification.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFADD.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PFADD myhyperloglog \"element1\" \"element2\" \"element3\"\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Getting Client ID in DiceDB\nDESCRIPTION: Shows how to retrieve the unique identifier of the current client connection using CLIENT ID command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/CLIENT.md#2025-04-05_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n127.0.0.1:7379> CLIENT ID\n3\n```\n\n----------------------------------------\n\nTITLE: SET Command with Second-based Expiration in DiceDB\nDESCRIPTION: Example of setting a key with a value that will expire after 10 seconds using the EX parameter.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/sample_command_docs.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET foo bar EX 10\nOK\n```\n\n----------------------------------------\n\nTITLE: Trimming a JSON Array to a Single Element in DiceDB\nDESCRIPTION: Example of using JSON.ARRTRIM to reduce an array to contain only a single element by specifying the same start and stop index.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRTRIM.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET a $ '[0,1,2]'\n\"OK\"\n127.0.0.1:7379> JSON.ARRTRIM a $ 1 1\n\"1\"\n127.0.0.1:7379> JSON.GET a\n\"[1]\"\n127.0.0.1:7379>\n```\n\n----------------------------------------\n\nTITLE: Killing Client Connection in DiceDB\nDESCRIPTION: Demonstrates how to terminate a specific client connection using CLIENT KILL command with IP:port.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/CLIENT.md#2025-04-05_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n127.0.0.1:7379> CLIENT KILL 127.0.0.1:6379\nOK\n```\n\n----------------------------------------\n\nTITLE: BITPOS Command Error: Invalid Bit Value in DiceDB\nDESCRIPTION: This example demonstrates the error raised when using a bit value other than 0 or 1 with the BITPOS command in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITPOS.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"foobar\"\nOK\n127.0.0.1:7379> BITPOS mykey 2\n(error) ERR bit is not an integer or out of range\n```\n\n----------------------------------------\n\nTITLE: ZPOPMIN Command with Multiple Members Having Same Score in DiceDB\nDESCRIPTION: Demonstrates the behavior of ZPOPMIN when multiple members in the sorted set share the same lowest score.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZPOPMIN.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset 1 member1 1 member2 1 member3\n(integer) 3\n127.0.0.1:7379> ZPOPMIN myzset 2\n1) 1 \"member1\"\n2) 1 \"member2\"\n```\n\n----------------------------------------\n\nTITLE: JSON Document Example for JSON.TOGGLE Command\nDESCRIPTION: Sample JSON document that will be used in the toggle examples, containing user information with boolean fields that can be toggled.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.TOGGLE.md#2025-04-05_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"John Doe\",\n  \"active\": true,\n  \"settings\": {\n    \"notifications\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JSON.RESP Command Syntax\nDESCRIPTION: Demonstrates the basic syntax for the JSON.RESP command to retrieve JSON data in RESP format.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.RESP.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJSON.RESP <key> [path]\n```\n\n----------------------------------------\n\nTITLE: Basic COMMAND GETKEYS Syntax\nDESCRIPTION: Shows the basic syntax for using the COMMAND GETKEYS command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND GETKEYS.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCOMMAND GETKEYS command arg [arg ...]\n```\n\n----------------------------------------\n\nTITLE: GETSET Command with Non-Existent Key in DiceDB\nDESCRIPTION: This example shows using GETSET on a non-existent key. The command sets the new value and returns nil, indicating the key didn't exist before.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GETSET.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GETSET newkey \"NewValue\"\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Using GET.UNWATCH to Stop Receiving Updates in DiceDB\nDESCRIPTION: Example showing how to use the GET.UNWATCH command with a fingerprint to stop receiving updates on a previously watched key. The server responds with OK to confirm successful unsubscription.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GETUNWATCH.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GET.UNWATCH 4016579015\nOK\n```\n\n----------------------------------------\n\nTITLE: Extracting Keys from MSET Command\nDESCRIPTION: Demonstrates how to extract keys from an MSET command that sets multiple key-value pairs.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND GETKEYS.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COMMAND GETKEYS MSET key1 value1 key2 value2\n1) \"key1\"\n2) \"key2\"\n```\n\n----------------------------------------\n\nTITLE: Invalid Arguments Example\nDESCRIPTION: Example showing error when passing invalid number of arguments\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HINCRBYFLOAT.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HINCRBYFLOAT user:3000 field\n(error) ERROR wrong number of arguments for 'hincrbyfloat' command\n```\n\n----------------------------------------\n\nTITLE: Setting Root Array and Retrieving Its Length in DiceDB\nDESCRIPTION: This example shows how to set a JSON document as a root array and then get its length using JSON.ARRLEN without specifying a path.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRLEN.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1002 $ '[\"item1\", \"item2\", \"item3\"]'\nOK\n127.0.0.1:7379> JSON.ARRLEN user:1002\n(integer) 3\n```\n\n----------------------------------------\n\nTITLE: Conditional Set with XX Flag\nDESCRIPTION: Shows how to use the XX flag to set a JSON value only if the key already exists\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.SET.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1001 $.age 31 XX\nOK\n```\n\n----------------------------------------\n\nTITLE: Basic ZPOPMAX Syntax\nDESCRIPTION: Basic command syntax for the ZPOPMAX operation in DiceDB\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZPOPMAX.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nZPOPMAX key [count]\n```\n\n----------------------------------------\n\nTITLE: Combined Usage of HELLO Command in DiceDB\nDESCRIPTION: This example demonstrates how to use the HELLO command to switch to protocol version 3, authenticate, and set a client name in a single command in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HELLO.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HELLO 3 AUTH myusername mypassword SETNAME myclientname\n```\n\n----------------------------------------\n\nTITLE: HGETALL Error: Wrong Data Type in DiceDB\nDESCRIPTION: This example demonstrates the error that occurs when HGETALL is used on a key that doesn't contain a hash. It shows setting a string value and then attempting to use HGETALL on that key, resulting in a WRONGTYPE error.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HGETALL.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET user:3000 \"This is a string\"\nOK\n127.0.0.1:7379> HGETALL user:3000\n(error) ERROR WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Received Updates from Watched Sorted Set\nDESCRIPTION: The format of updates received by the client watching the sorted set, showing how each ZADD operation triggers a notification with updated data.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZRANGEUNWATCH.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCommand: ZRANGE\nFingerprint: 4016579015\nData: [{1 player1}]\nCommand: ZRANGE\nFingerprint: 4016579015\nData: [{2 player2}]\nCommand: ZRANGE\nFingerprint: 4016579015\nData: [{2 player2}]\nCommand: ZRANGE\nFingerprint: 4016579015\nData: [{4 player4}]\n```\n\n----------------------------------------\n\nTITLE: Basic SLEEP Command Usage Example\nDESCRIPTION: Demonstrates how to use the SLEEP command to pause the client for 5 seconds.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SLEEP.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SLEEP 5\nOK\n```\n\n----------------------------------------\n\nTITLE: Basic INCRBYFLOAT Command Syntax\nDESCRIPTION: Shows the basic syntax for the INCRBYFLOAT command which requires a key and delta parameter.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/INCRBYFLOAT.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nINCRBYFLOAT key delta\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of BF.RESERVE in DiceDB\nDESCRIPTION: Example demonstrating how to initialize a Bloom Filter named 'my_bloom_filter' with an error rate of 0.005 (0.5%) and an initial capacity of 5000 elements.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BF.RESERVE.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> BF.RESERVE my_bloom_filter 0.005 5000\nOK\n```\n\n----------------------------------------\n\nTITLE: Adding Duplicate Members to a Set in DiceDB\nDESCRIPTION: Example demonstrating how duplicate values are handled when adding to a set, where only unique values are added.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SADD.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SADD fruits \"apple\" \"fig\" \"apple\"\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: COPY Command with REPLACE Option in DiceDB\nDESCRIPTION: Shows how to use the COPY command with the REPLACE option to overwrite an existing destination key, returning 1 to indicate success.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COPY.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COPY key1 key2 REPLACE\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in KEYS Patterns in DiceDB\nDESCRIPTION: Example demonstrating how to escape special characters using backslash (\\) in KEYS patterns to match them verbatim. Shows how to find a key that contains a question mark in its name.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/KEYS.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET key1 \"value1\"\nOK\n127.0.0.1:7379> SET key2 \"value2\"\nOK\n127.0.0.1:7379> SET key3 \"value3\"\nOK\n127.0.0.1:7379> KEYS key?\n1) \"key3\"\n2) \"key*\"\n3) \"key?\"\n127.0.0.1:7379> KEYS key\\?\n1) \"key?\"\n```\n\n----------------------------------------\n\nTITLE: GETSET Command with Key Having Pre-existing TTL in DiceDB\nDESCRIPTION: This example demonstrates how GETSET resets the TTL of a key that previously had an expiration time set. After GETSET, the key exists without any TTL configured.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GETSET.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET newkey \"test\"\nOK\n127.0.0.1:7379> EXPIRE newkey 60\n1\n127.0.0.1:7379> TTL newkey\n55\n127.0.0.1:7379> GETSET newkey \"new value\"\n\"test\"\n127.0.0.1:7379> TTL newkey\n(integer) -1\n```\n\n----------------------------------------\n\nTITLE: Basic ZRANGE.UNWATCH Command Syntax\nDESCRIPTION: The basic syntax for the ZRANGE.UNWATCH command, which requires a fingerprint parameter returned from a previous ZRANGE.WATCH command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZRANGEUNWATCH.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nZRANGE.UNWATCH <fingerprint>\n```\n\n----------------------------------------\n\nTITLE: Debugging Memory Usage of Entire JSON Data in DiceDB using Bash\nDESCRIPTION: This snippet demonstrates how to use the JSON.DEBUG MEMORY command to get the memory usage of the entire JSON data stored under a key. It sets a JSON value and then retrieves its memory usage.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.DEBUG.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET myjson $ '{\"a\":1}',\nOK\n127.0.0.1:7379> JSON.DEBUG MEMORY myjson\n(integer) 89\n```\n\n----------------------------------------\n\nTITLE: Naming Functions that Perform Actions in Go\nDESCRIPTION: Shows the proper naming pattern for functions that perform actions. These functions should have verb-like names that indicate the action being performed.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/go.md#2025-04-05_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *Config) WriteDetail(w io.Writer) (int64, error)  // okay\n```\n\n----------------------------------------\n\nTITLE: Basic SETBIT Command Syntax in DiceDB\nDESCRIPTION: The syntax for the SETBIT command in DiceDB. It requires three parameters: the key of the string, the bit offset position, and the value (0 or 1) to set the bit to.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SETBIT.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSETBIT key offset value\n```\n\n----------------------------------------\n\nTITLE: Finding First Bit Set to 1 in DiceDB String\nDESCRIPTION: This example demonstrates the basic usage of the BITPOS command to find the position of the first bit set to 1 in the string stored at key 'mykey'.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITPOS.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"foobar\"\nOK\n127.0.0.1:7379> BITPOS mykey 1\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Usage with Existing Hash and Field\nDESCRIPTION: Example of using HINCRBYFLOAT on an existing hash with an existing field\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HINCRBYFLOAT.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HINCRBYFLOAT keys field2 1.2\n\"1.4\"\n```\n\n----------------------------------------\n\nTITLE: Running DiceDB Server\nDESCRIPTION: Command to run the DiceDB server using Go.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/development-setup.md#2025-04-05_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ go run main.go\n```\n\n----------------------------------------\n\nTITLE: COPY Command with Non-Existent Source Key in DiceDB\nDESCRIPTION: Illustrates the behavior when trying to copy from a non-existent source key, which returns 0 to indicate failure.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COPY.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COPY nonexistent key2\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: PFCOUNT.WATCH Subscription Update Example\nDESCRIPTION: Demonstrates the output received by the client subscribed via PFCOUNT.WATCH as the HyperLogLog cardinality changes. The client receives real-time updates showing the incremental increases in cardinality.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFCOUNTWATCH.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PFCOUNT.WATCH users:hll\nPress Ctrl+C to exit watch mode.\n0\n1\n3\n4\n5\n```\n\n----------------------------------------\n\nTITLE: Running All Unit Tests\nDESCRIPTION: Command to execute all unit tests.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/development-setup.md#2025-04-05_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake unittest\n```\n\n----------------------------------------\n\nTITLE: JSON.CLEAR Command Syntax in DiceDB\nDESCRIPTION: The basic syntax for the JSON.CLEAR command in DiceDB. This command clears the value at a specified path in a JSON document stored under a given key.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.CLEAR.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJSON.CLEAR key [path]\n```\n\n----------------------------------------\n\nTITLE: Adding a Single Element to HyperLogLog in DiceDB\nDESCRIPTION: Demonstrates adding a single element to a HyperLogLog data structure and receiving a return value of 1, indicating that an internal register was altered.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFADD.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PFADD myhyperloglog \"element1\"\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Syntax for ZCARD Command in DiceDB\nDESCRIPTION: Demonstrates the basic syntax for using the ZCARD command in DiceDB to obtain the cardinality of a sorted set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZCARD.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nZCARD key\n```\n\n----------------------------------------\n\nTITLE: Using ZRANGE.UNWATCH to Stop Receiving Updates\nDESCRIPTION: Example of using the ZRANGE.UNWATCH command with the fingerprint to unsubscribe from updates on the watched sorted set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZRANGEUNWATCH.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZRANGE.UNWATCH 4016579015\nOK\n```\n\n----------------------------------------\n\nTITLE: Basic SET-GET Operations in DiceDB\nDESCRIPTION: Demonstration of basic key-value operations using SET to store a value and GET to retrieve it, showing command syntax and server responses.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/get-started/hello-world.mdx#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlocalhost:7379> SET k1 v1\nOK OK\nlocalhost:7379> GET k1\nOK v1\n```\n\n----------------------------------------\n\nTITLE: HSCAN Usage with Non-Existent Hash in DiceDB\nDESCRIPTION: Shows the behavior of HSCAN when used on a non-existent hash key. The command returns an empty array rather than throwing an error.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSCAN.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSCAN nonExistentHash 0\n1) \"0\"\n2) (empty array)\n```\n\n----------------------------------------\n\nTITLE: Updating HyperLogLog with PFADD in Bash\nDESCRIPTION: Demonstrates updating the HyperLogLog 'users:hll' with new elements, which would trigger updates to watchers before they unwatch.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFCOUNTUNWATCH.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PFADD users:hll \"user1\"\nOK\n127.0.0.1:7379> PFADD users:hll \"user2\"\nOK\n127.0.0.1:7379> PFADD users:hll \"user3\"\nOK\n```\n\n----------------------------------------\n\nTITLE: Attempting to delete a field from a non-existent key in DiceDB\nDESCRIPTION: Example showing the result when attempting to delete a field from a key ('user:2000') that doesn't exist in the database. Returns 0 to indicate no fields were deleted.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HDEL.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HDEL user:2000 name\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: HINCRBY with Negative Increment\nDESCRIPTION: Shows how to use HINCRBY to decrement a value using a negative increment\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HINCRBY.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HINCRBY keys field -20\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Executing BITPOS Command in DiceDB\nDESCRIPTION: The BITPOS command syntax for finding the position of a specific bit in a string stored in DiceDB. It allows optional start and end parameters to specify a range for the search.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITPOS.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nBITPOS key bit [start] [end]\n```\n\n----------------------------------------\n\nTITLE: Incrementing Integer Value\nDESCRIPTION: Example of incrementing an integer age value by 1.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.NUMINCRBY.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.NUMINCRBY user:1001 $.age 1\n```\n\n----------------------------------------\n\nTITLE: Attempting to Set Existing Field\nDESCRIPTION: Example showing HSETNX behavior when trying to set an already existing field\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSETNX.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSETNX product:3000 name \"Tablet\"\n0\n```\n\n----------------------------------------\n\nTITLE: Defining HGET Command Syntax in DiceDB\nDESCRIPTION: Specifies the syntax for the HGET command, which retrieves the value associated with a field in a hash stored at a given key.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HGET.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHGET key field\n```\n\n----------------------------------------\n\nTITLE: Incrementing Floating-Point Value\nDESCRIPTION: Example of incrementing a floating-point balance value by 25.75.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.NUMINCRBY.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.NUMINCRBY user:1001 $.balance 25.75\n```\n\n----------------------------------------\n\nTITLE: Retrieving Non-Existent Member Coordinates in DiceDB\nDESCRIPTION: Example showing the behavior of GEOPOS when querying for a member that doesn't exist in the sorted set. The command returns (nil) for non-existent members.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GEOPOS.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GEOPOS Sicily \"Agrigento\"\n1) (nil)\n```\n\n----------------------------------------\n\nTITLE: HGETALL on Non-Existing Key in DiceDB\nDESCRIPTION: When HGETALL is used on a non-existing key, it returns an empty array. This example shows the behavior when attempting to retrieve fields from a key that doesn't exist in the database.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HGETALL.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HGETALL user:2000\n(empty array)\n```\n\n----------------------------------------\n\nTITLE: Type-Specific Function Naming in Go\nDESCRIPTION: Illustrates how to name identical functions that differ only by the types they work with. The type name should be included at the end of the function name.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/go.md#2025-04-05_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc ParseInt(input string) (int, error)  // okay\nfunc ParseInt64(input string) (int64, error)  // okay\nfunc AppendInt(buf []byte, value int) []byte  // okay\nfunc AppendInt64(buf []byte, value int64) []byte  // okay\n```\n\n----------------------------------------\n\nTITLE: GEOPOS Command Syntax in DiceDB\nDESCRIPTION: The basic syntax for the GEOPOS command in DiceDB, which takes a key and one or more member names as parameters to retrieve their geographical coordinates.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GEOPOS.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGEOPOS key [member [member ...]]\n```\n\n----------------------------------------\n\nTITLE: Basic JSON.NUMINCRBY Command Syntax\nDESCRIPTION: Shows the basic syntax for the JSON.NUMINCRBY command with required parameters.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.NUMINCRBY.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJSON.NUMINCRBY <key> <path> <increment>\n```\n\n----------------------------------------\n\nTITLE: BITFIELD Command with Overflow Control in DiceDB\nDESCRIPTION: Shows how to use the BITFIELD command with overflow control, demonstrating the SAT (saturation) behavior for unsigned 2-bit integers.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITFIELD.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n1) \"1\"\n2) \"1\"\n127.0.0.1:7379> BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n1) \"2\"\n2) \"2\"\n127.0.0.1:7379> BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n1) \"3\"\n2) \"3\"\n127.0.0.1:7379> BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n1) \"0\"\n2) \"3\"\n```\n\n----------------------------------------\n\nTITLE: HINCRBY with Existing Hash and Field\nDESCRIPTION: Demonstrates HINCRBY operation on an existing hash with an existing field\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HINCRBY.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HINCRBY keys field2 10\n(integer) 20\n```\n\n----------------------------------------\n\nTITLE: Successful Authentication Example\nDESCRIPTION: Demonstrates a successful authentication attempt with the correct password.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/AUTH.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> AUTH your_secret_password\nOK\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Hash in DiceDB\nDESCRIPTION: Example showing the result of HVALS command when the hash exists but has no fields. It returns (nil) in this case.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HVALS.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HVALS user:1002\n(nil)\n```\n\n----------------------------------------\n\nTITLE: HINCRBY Invalid Value Type\nDESCRIPTION: Shows error handling when attempting to increment a non-integer hash value\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HINCRBY.md#2025-04-05_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSET user:3000 field \"hello\"\n(integer) 1\n127.0.0.1:7379> HINCRBY user:3000 field 2\n(error) ERROR hash value is not an integer\n```\n\n----------------------------------------\n\nTITLE: Basic SDIFF Command Syntax\nDESCRIPTION: Shows the basic syntax for the SDIFF command which takes multiple set keys as parameters.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SDIFF.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSDIFF key1 [key2 ... keyN]\n```\n\n----------------------------------------\n\nTITLE: Basic JSON.STRLEN Command Syntax\nDESCRIPTION: Demonstrates the basic syntax for the JSON.STRLEN command which takes a key and a path parameter to retrieve the length of a string in a JSON document.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.STRLEN.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJSON.STRLEN <key> <path>\n```\n\n----------------------------------------\n\nTITLE: Recursive Value Increment\nDESCRIPTION: Example of incrementing all matching balance values recursively in the JSON document.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.NUMINCRBY.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.NUMINCRBY user:1001 $..balance 25.75\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax of JSON.OBJLEN Command in DiceDB\nDESCRIPTION: Defines the basic syntax for the JSON.OBJLEN command in DiceDB, showing the required key parameter and optional path parameter.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.OBJLEN.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJSON.OBJLEN key [path]\n```\n\n----------------------------------------\n\nTITLE: HINCRBY Integer Overflow\nDESCRIPTION: Shows error handling when increment operation would result in integer overflow\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HINCRBY.md#2025-04-05_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSET new-key field 9000000000000000000\n(integer) 1\n127.0.0.1:7379> HINCRBY new-key field 1000000000000000000\n(error) ERROR increment or decrement would overflow\n```\n\n----------------------------------------\n\nTITLE: Checking Set Contents with SMEMBERS in DiceDB\nDESCRIPTION: Example showing how to use the SMEMBERS command to verify the contents of a set after using SADD.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SADD.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SMEMBERS fruits\n1) \"apple\"\n2) \"banana\"\n3) \"cherry\"\n4) \"date\"\n5) \"elderberry\"\n6) \"fig\"\n```\n\n----------------------------------------\n\nTITLE: Handling Non-existent Key in DiceDB\nDESCRIPTION: Example demonstrating the result of HVALS command when the specified key does not exist. It returns (nil) in this case as well.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HVALS.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HVALS user:1003\n(nil)\n```\n\n----------------------------------------\n\nTITLE: HRANDFIELD with Invalid Number of Arguments\nDESCRIPTION: Demonstrates the error that occurs when passing an invalid number of arguments to the HRANDFIELD command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HRANDFIELD.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HRANDFIELD\n(error) ERR wrong number of arguments for 'hrandfield' command\n```\n\n----------------------------------------\n\nTITLE: LRANGE with Non-Existent Key in DiceDB\nDESCRIPTION: Shows LRANGE behavior when querying a list that doesn't exist, returning an empty array.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LRANGE.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LRANGE nonexistentlist 0 100\n(empty array)\n```\n\n----------------------------------------\n\nTITLE: Syntax for TOUCH Command in DiceDB\nDESCRIPTION: The basic syntax for the TOUCH command, which can be used with one or more keys.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/TOUCH.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTOUCH key [key ...]\n```\n\n----------------------------------------\n\nTITLE: Syntax for LLEN Command in DiceDB\nDESCRIPTION: The basic syntax for the LLEN command in DiceDB. It takes a single parameter 'key' which is the key associated with the list whose length you want to retrieve.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LLEN.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLLEN key\n```\n\n----------------------------------------\n\nTITLE: MSET Error Example with Odd Number of Arguments\nDESCRIPTION: Example showing the error that occurs when MSET is used with an odd number of arguments.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/MSET.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> MSET key1 \"value1\" key2\n(error) ERROR wrong number of arguments for 'mset' command\n```\n\n----------------------------------------\n\nTITLE: Updating a Single Field in Existing Hash with HSET in DiceDB\nDESCRIPTION: Demonstrates updating a single field (age) in an existing hash named 'user:1000' using the HSET command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSET.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSET user:1000 age 31\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Member in Geospatial Set in DiceDB\nDESCRIPTION: Example of attempting to update the coordinates of an existing member 'Palermo'. Returns 0 indicating no new members were added, though the coordinates would be updated.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GEOADD.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GEOADD locations 13.361389 39.115556 \"Palermo\"\n0\n```\n\n----------------------------------------\n\nTITLE: LPOP on Non-Existent Key in DiceDB\nDESCRIPTION: Demonstrates the behavior of LPOP when used on a non-existent key, returning (nil).\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LPOP.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nLPOP emptylist\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Error Handling: Non-Existent Key in JSON.ARRAPPEND\nDESCRIPTION: Demonstrates the error message returned when attempting to use JSON.ARRAPPEND on a key that does not exist in the database.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRAPPEND.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.ARRAPPEND nonexistingkey .array 1\n(error) ERR key does not exist\n```\n\n----------------------------------------\n\nTITLE: Creating a New Hash with HSET in DiceDB\nDESCRIPTION: Demonstrates how to create a new hash named 'product:2000' with multiple fields using the HSET command. This example sets the name, price, and stock of a product.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSET.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSET product:2000 name \"Laptop\" price 999.99 stock 50\n3\n```\n\n----------------------------------------\n\nTITLE: Syntax for JSON.ARRAPPEND Command in DiceDB\nDESCRIPTION: Demonstrates the basic syntax for using the JSON.ARRAPPEND command in DiceDB. It shows the required parameters: key, path, and one or more JSON values to append.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRAPPEND.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJSON.ARRAPPEND <key> <path> <json_value> [<json_value> ...]\n```\n\n----------------------------------------\n\nTITLE: LLEN Command with Non-Existent Key in DiceDB\nDESCRIPTION: An example showing the behavior of LLEN command when used with a non-existent key. It returns 0, interpreting the key as an empty list.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LLEN.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LLEN nonExistentList\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Defining ZRANGE Command Syntax in DiceDB\nDESCRIPTION: Specifies the syntax for the ZRANGE command, including optional parameters for returning scores and reversing the order.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZRANGE.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nZRANGE key start stop [WITHSCORES] [REV]\n```\n\n----------------------------------------\n\nTITLE: Error Handling: Non-Array Path in JSON.ARRAPPEND\nDESCRIPTION: Illustrates the error returned when attempting to use JSON.ARRAPPEND on a path that does not point to an array. It sets a JSON document with an object and tries to append to it.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRAPPEND.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET myjson . '{\"object\": {\"key\": \"value\"}}'\nOK\n127.0.0.1:7379> JSON.ARRAPPEND myjson .object 4\n(error) ERR path is not an array\n```\n\n----------------------------------------\n\nTITLE: Handling Out-of-Bounds Index in DiceDB JSON.ARRINSERT\nDESCRIPTION: Shows the error response when attempting to insert a value at an out-of-bounds index in a JSON array using JSON.ARRINSERT.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRINSERT.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET a $ '[1,2]'\nOK\n127.0.0.1:7379> JSON.ARRINSERT a $ 4 3\nERR index out of bounds\n127.0.0.1:7379> JSON.GET a\n[1,2]\n```\n\n----------------------------------------\n\nTITLE: MGET with Non-Existent Keys\nDESCRIPTION: Example demonstrating MGET behavior with non-existent keys returning nil values.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/MGET.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET key1 \"value1\"\nOK\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET key2 \"value2\"\nOK\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> MGET key1 key2 key3\n1) \"value1\"\n2) \"value2\"\n3) (nil)\n```\n\n----------------------------------------\n\nTITLE: JSON.TYPE Command with Non-Existent Key in DiceDB\nDESCRIPTION: Shows the result of using JSON.TYPE command with a key that doesn't exist in the database. It returns nil in this scenario.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.TYPE.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.TYPE user:9999 $.name\n(nil)\n```\n\n----------------------------------------\n\nTITLE: LATENCY DOCTOR Example\nDESCRIPTION: Demonstrates generating a human-readable report of latency issues\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LATENCY.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LATENCY DOCTOR\nLatency Doctor Report:\n- Command latency spikes detected. Consider optimizing your commands.\n- Fork latency spikes detected. Check your system's I/O performance.\n```\n\n----------------------------------------\n\nTITLE: Basic RPOP Command Syntax\nDESCRIPTION: Shows the basic syntax of the RPOP command for removing the last element from a list.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/RPOP.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nRPOP key\n```\n\n----------------------------------------\n\nTITLE: TTL Command Basic Syntax\nDESCRIPTION: Shows the basic syntax for the TTL command which takes a single key parameter.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/TTL.md#2025-04-05_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nTTL key\n```\n\n----------------------------------------\n\nTITLE: BF.RESERVE Wrong Data Type Error Example in DiceDB\nDESCRIPTION: Example showing the error that occurs when trying to create a Bloom Filter with a key that already exists as a different data type.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BF.RESERVE.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET my_bloom_filter \"value\"\nOK\n127.0.0.1:7379> BF.RESERVE my_bloom_filter 0.01 1000\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Key with PFCOUNT in DiceDB\nDESCRIPTION: Example of using PFCOUNT with a non-existent key. DiceDB treats it as an empty HyperLogLog and returns a cardinality of 0.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFCOUNT.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PFCOUNT non_existent_key\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Using JSON.TYPE with Invalid JSONPath in DiceDB\nDESCRIPTION: Illustrates the behavior when using an invalid JSONPath expression with the JSON.TYPE command. In this case, it still returns a result, which may not be the expected behavior.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.TYPE.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.TYPE user:1001 $..name\n\"string\"\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Members from Set\nDESCRIPTION: Shows how to remove multiple members from a set in a single SREM command with return value indicating number of members removed.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SREM.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SADD myset \"one\" \"two\" \"three\"\n127.0.0.1:7379> SREM myset \"two\" \"three\"\n(integer) 2\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Key with PFCOUNT in DiceDB\nDESCRIPTION: Example of using PFCOUNT with a non-existent key. DiceDB treats it as an empty HyperLogLog and returns a cardinality of 0.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFCOUNT.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PFCOUNT non_existent_key\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: LINSERT Command with Non-Existent Key in DiceDB\nDESCRIPTION: Shows the behavior of LINSERT command when used with a non-existent key. The command returns 0, indicating no operation was performed.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LINSERT.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LINSERT nonExistentList before \"two\" \"one\"\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hash Fields with HKEYS in DiceDB\nDESCRIPTION: The HKEYS command syntax for retrieving all fields in a hash stored at a given key. It takes a single parameter 'key', which is the name of the key holding the hash.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HKEYS.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHKEYS key\n```\n\n----------------------------------------\n\nTITLE: Executing JSON.TYPE Command in DiceDB\nDESCRIPTION: Demonstrates the basic syntax for the JSON.TYPE command in DiceDB. This command is used to determine the type of value stored at a specified path within a JSON document.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.TYPE.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJSON.TYPE <key> <path>\n```\n\n----------------------------------------\n\nTITLE: GETEX Command Syntax in Redis\nDESCRIPTION: The syntax for the GETEX command which allows retrieving a key's value while setting its expiration time.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/GETEX.md#2025-04-05_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nGETEX key [EX seconds] [PX milliseconds] [EXAT timestamp-seconds] [PXAT timestamp-milliseconds] [PERSIST]\n```\n\n----------------------------------------\n\nTITLE: BITCOUNT with Out of Range Indices\nDESCRIPTION: Demonstrates how BITCOUNT gracefully handles out-of-range indices by considering only the valid range within the string. In this example, the range extends beyond the string length.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITCOUNT.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"foobar\"\nOK\n127.0.0.1:7379> BITCOUNT mykey 5 6\n(integer) 4\n127.0.0.1:7379> BITCOUNT mykey 5 10\n(integer) 4\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of LINSERT Command in DiceDB\nDESCRIPTION: Demonstrates an invalid usage of LINSERT command where the key exists but is associated with a non-list data type (hash in this case). This results in a WRONGTYPE error.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LINSERT.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HMSET myhash field1 \"value1\"\nOK\n127.0.0.1:7379> HGET myhash field1\n\"value1\"\n127.0.0.1:7379> LINSERT myhash before pivot element\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Invalid RPUSH Usage with Wrong Key Type in DiceDB\nDESCRIPTION: Shows the error that occurs when attempting to use RPUSH on a key that holds a string value instead of a list. This results in a WRONGTYPE error.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/RPUSH.md#2025-04-05_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n127.0.0.1:7379> SET mystring \"not a list\"\nOK\n127.0.0.1:7379> RPUSH mystring \"value\"\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: SCARD with Non-Existent Key in DiceDB\nDESCRIPTION: This example shows using SCARD on a key that doesn't exist. The command returns 0 since DiceDB treats non-existent keys as empty sets for this operation.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SCARD.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SCARD nonexistingset\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Defining ZADD Command Syntax in DiceDB\nDESCRIPTION: Shows the syntax for the ZADD command, including optional flags and parameters for adding or updating members with scores in a sorted set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZADD.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nZADD key [NX|XX] [GT|LT] [CH] [INCR] score member [score member ...]\n```\n\n----------------------------------------\n\nTITLE: Defining ZADD Command Syntax in DiceDB\nDESCRIPTION: Shows the syntax for the ZADD command, including optional flags and parameters for adding or updating members with scores in a sorted set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZADD.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nZADD key [NX|XX] [GT|LT] [CH] [INCR] score member [score member ...]\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connection URL Format\nDESCRIPTION: The basic URL format for connecting to the DiceDB WebSocket server.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/protocols/websockets.mdx#2025-04-05_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nws://your-server-address:port/\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ECHO Command in DiceDB\nDESCRIPTION: This example shows how to use the ECHO command in DiceDB with a sample message. It demonstrates the command execution and the expected output.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/ECHO.md#2025-04-05_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlocalhost:7379> ECHO hello!\nOK hello!\n```\n\n----------------------------------------\n\nTITLE: Defining PFMERGE Command Syntax in DiceDB\nDESCRIPTION: Specifies the syntax for the PFMERGE command in DiceDB, which is used to merge multiple HyperLogLog data structures into a single HyperLogLog. The command takes a destination key and one or more source keys as parameters.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFMERGE.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPFMERGE destkey sourcekey [sourcekey ...]\n```\n\n----------------------------------------\n\nTITLE: BITPOS Command Error: Non-String Key in DiceDB\nDESCRIPTION: This example shows the error thrown when attempting to use the BITPOS command on a key that holds a non-string value in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITPOS.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LPUSH mylist \"item\"\n(integer) 1\n127.0.0.1:7379> BITPOS mylist 1\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Handling ZRANGE Syntax Error in DiceDB\nDESCRIPTION: Shows the error returned when using ZRANGE command with invalid syntax, missing required parameters.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZRANGE.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZRANGE leaderboard 0\n(error) ERR syntax error\n```\n\n----------------------------------------\n\nTITLE: ZPOPMAX with Non-Existing Key\nDESCRIPTION: Example showing ZPOPMAX behavior with a non-existent key\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZPOPMAX.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZPOPMAX NON_EXISTENT_KEY\n(empty array)\n```\n\n----------------------------------------\n\nTITLE: Removing from Non-Existing Set\nDESCRIPTION: Demonstrates SREM behavior when attempting to remove a member from a non-existing set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SREM.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SREM myset \"one\"\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: ZPOPMIN Command with Invalid Count Argument in DiceDB\nDESCRIPTION: Demonstrates the error that occurs when using an invalid (non-integer) count argument with ZPOPMIN.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZPOPMIN.md#2025-04-05_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset 1 member1\n(integer) 1\n127.0.0.1:7379> ZPOPMIN myzset INCORRECT_COUNT_ARGUMENT\n(error) ERR value is not an integer or out of range\n```\n\n----------------------------------------\n\nTITLE: Setting Client Name in DiceDB\nDESCRIPTION: Demonstrates how to set a name for the current client connection using CLIENT SETNAME command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/CLIENT.md#2025-04-05_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n127.0.0.1:7379> CLIENT SETNAME my-client\nOK\n```\n\n----------------------------------------\n\nTITLE: Using ZREM on a Non-existent Sorted Set in DiceDB\nDESCRIPTION: Example showing that attempting to remove an element from a non-existent sorted set returns 0, indicating no elements were removed.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZREM.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZREM nonExistentZSet one\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: JSON.OBJLEN Without Path Parameter in DiceDB\nDESCRIPTION: Shows how to use JSON.OBJLEN without specifying a path, which defaults to the root of the JSON object and returns the count as a scalar value.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.OBJLEN.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.OBJLEN a\n3\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of ZADD Command in DiceDB\nDESCRIPTION: Demonstrates error cases when using incompatible options together in the ZADD command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZADD.md#2025-04-05_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset NX XX 12 \"twelve\"\n(error) ERR XX and NX options at the same time are not compatible\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset LT GT  15 \"twelve\"\n(error) ERR GT, LT, and/or NX options at the same time are not compatible\n```\n\n----------------------------------------\n\nTITLE: Error Example: BITCOUNT with Invalid BIT Parameter Usage\nDESCRIPTION: Shows the error that occurs when the BIT parameter is used incorrectly without proper range specifications. The command expects integer values for the start and end parameters.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITCOUNT.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"foobar\"\nOK\n127.0.0.1:7379> BITCOUNT mykey BIT\n(error) ERR value is not an integer or out of range\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of GETRANGE Command in DiceDB\nDESCRIPTION: Examples of incorrect usage of the GETRANGE command, including insufficient arguments, use with wrong data types, and invalid index inputs. Demonstrates error handling in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GETRANGE.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GETRANGE foo\n(error) ERROR wrong number of arguments for 'getrange' command\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LPUSH foo apple\n127.0.0.1:7379> GETRANGE foo 0 5\n(error) ERROR WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GETRANGE foo s e\n(error) ERROR value is not an integer or out of range\n```\n\n----------------------------------------\n\nTITLE: PTTL Usage without Key Expiration\nDESCRIPTION: Example demonstrating PTTL command usage with a key that has no expiration time set\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PTTL.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"Hello\"\n127.0.0.1:7379> PTTL mykey\n(integer) -1\n```\n\n----------------------------------------\n\nTITLE: Writing Concise Log Messages\nDESCRIPTION: Shows how to create log messages that are both concise and informative, avoiding unnecessary verbosity while still conveying the essential information.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/logging.md#2025-04-05_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nslog.Info(\"DiceDB is starting, initialization in progress\", slog.String(\"version\", config.DiceDBVersion))  // not okay\nslog.Info(\"starting DiceDB\", slog.String(\"version\", config.DiceDBVersion))  // okay\n```\n\n----------------------------------------\n\nTITLE: Intersection with Non-Existent Set in DiceDB\nDESCRIPTION: This example shows how the SINTER command behaves when one of the sets doesn't exist. Non-existent keys are treated as empty sets, resulting in an empty array when computing the intersection.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SINTER.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Add elements to sets\n127.0.0.1:7379> SADD set1 \"a\" \"b\" \"c\"\n(integer) 3\n127.0.0.1:7379> SADD set2 \"b\" \"c\" \"d\"\n(integer) 3\n\n# Compute intersection with a non-existent set\n127.0.0.1:7379> SINTER set1 set2 set3\n(empty array)\n```\n\n----------------------------------------\n\nTITLE: Usage with Non-existing Field\nDESCRIPTION: Example of using HINCRBYFLOAT on an existing hash with a non-existing field\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HINCRBYFLOAT.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HINCRBYFLOAT keys field2 0.2\n\"0.2\"\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Documents in DiceDB (Basic Usage Example)\nDESCRIPTION: Example of setting three JSON documents using JSON.SET command to prepare for demonstrating JSON.MGET. Each document contains name and age fields for different users.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.MGET.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1 $ '{\"name\": \"Alice\", \"age\": 30}'\nOK\n127.0.0.1:7379> JSON.SET user:2 $ '{\"name\": \"Bob\", \"age\": 25}'\nOK\n127.0.0.1:7379> JSON.SET user:3 $ '{\"name\": \"Charlie\", \"age\": 35}'\nOK\n```\n\n----------------------------------------\n\nTITLE: Handling Non-existent Keys with GETBIT in DiceDB\nDESCRIPTION: Shows that attempting to retrieve a bit value from a non-existent key returns 0.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GETBIT.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GETBIT bar 5\n0\n```\n\n----------------------------------------\n\nTITLE: Basic COPY Command Usage in DiceDB\nDESCRIPTION: Demonstrates a basic example of copying a value from key1 to key2 within the same database, returning 1 to indicate success.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COPY.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COPY key1 key2\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Basic Usage with Non-existing Hash Key\nDESCRIPTION: Example of using HINCRBYFLOAT command on a non-existing hash key\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HINCRBYFLOAT.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HINCRBYFLOAT keys field1 10.2\n\"10.2\"\n```\n\n----------------------------------------\n\nTITLE: Updating Sorted Set for ZRANGE.WATCH in DiceDB\nDESCRIPTION: This snippet demonstrates how to update the sorted set being watched by ZRANGE.WATCH. It adds and updates player scores, which will trigger updates to the watching client.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZRANGEWATCH.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD match:100 1 \"player1\"\nOK\n127.0.0.1:7379> ZADD match:100 2 \"player2\"\nOK\n127.0.0.1:7379> ZADD match:100 1 \"player3\"\nOK\n127.0.0.1:7379> ZADD match:100 4 \"player4\"\nOK\n```\n\n----------------------------------------\n\nTITLE: Error Example: BITCOUNT with Wrong Key Type\nDESCRIPTION: Shows the error that occurs when trying to use BITCOUNT on a key that exists but doesn't hold a string value. DiceDB returns a WRONGTYPE error as BITCOUNT only works on string values.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITCOUNT.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LPUSH mylist \"element\"\n(integer) 1\n127.0.0.1:7379> BITCOUNT mylist\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of SDIFF\nDESCRIPTION: Demonstrates computing the difference between three sets where element 'b' is unique to set1.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SDIFF.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SADD set1 \"a\" \"b\" \"c\"\n127.0.0.1:7379> SADD set2 \"c\" \"d\" \"e\"\n127.0.0.1:7379> SADD set3 \"a\" \"f\"\n127.0.0.1:7379> SDIFF set1 set2 set3\n\n\"b\"\n```\n\n----------------------------------------\n\nTITLE: Single Set SDIFF Example\nDESCRIPTION: Shows SDIFF behavior with a single set, returning all elements of the set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SDIFF.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SADD set1 \"a\" \"b\" \"c\"\n127.0.0.1:7379> SDIFF set1\n1) \"a\"\n2) \"b\"\n3) \"c\"\n```\n\n----------------------------------------\n\nTITLE: COMMAND GETKEYS Invalid Arguments Error\nDESCRIPTION: Example of error when invalid number of arguments is provided to the target command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND GETKEYS.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COMMAND GETKEYS MSET key1\n(error) ERR invalid number of arguments specified for command\n```\n\n----------------------------------------\n\nTITLE: ZCARD Command on Non-existent Sorted Set in DiceDB\nDESCRIPTION: Shows the behavior of ZCARD command when used on a non-existent sorted set, which returns 0.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZCARD.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZCARD nonExistentZSet\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Using Character Ranges with KEYS in DiceDB\nDESCRIPTION: Example showing how to use character ranges in patterns with the KEYS command. Sets three keys and retrieves keys that match the pattern 'key[1-2]', which includes keys ending with 1 or 2.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/KEYS.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET key1 \"value1\"\nOK\n127.0.0.1:7379> SET key2 \"value2\"\nOK\n127.0.0.1:7379> SET key3 \"value3\"\nOK\n127.0.0.1:7379> KEYS key[1-2]\n1) \"key1\"\n2) \"key2\"\n```\n\n----------------------------------------\n\nTITLE: SINTER Command Syntax in DiceDB\nDESCRIPTION: The basic syntax for the SINTER command in DiceDB, used to compute the intersection of multiple sets. The command requires at least one key to be provided.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SINTER.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSINTER key [key ...]\n```\n\n----------------------------------------\n\nTITLE: Clearing a Number Value with JSON.CLEAR in DiceDB\nDESCRIPTION: This example shows how the JSON.CLEAR command affects numeric values. When a number is cleared, it is set to 0 rather than being removed or becoming null.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.CLEAR.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1001 $ '{\"name\": \"John Doe\", \"age\": 30, \"address\": {\"street\": \"123 Main St\", \"city\": \"Anytown\"}}'\nOK\n127.0.0.1:7379> JSON.CLEAR user:1001 $.age\n(integer) 1\n127.0.0.1:7379> JSON.GET user:1001\n\"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":0,\\\"address\\\":{\\\"street\\\":\\\"123 Main St\\\",\\\"city\\\":\\\"Anytown\\\"}}\"\n```\n\n----------------------------------------\n\nTITLE: JSON.ARRPOP Invalid Array Index Error Example\nDESCRIPTION: Shows the error when attempting to pop from an invalid array index.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRPOP.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET myjson . '{\"numbers\": [1, 2, 3]}'\nOK\n127.0.0.1:7379> JSON.ARRPOP myjson .numbers 4\n(error) ERR path is not an array\n```\n\n----------------------------------------\n\nTITLE: Attempting to delete a non-existent field in DiceDB\nDESCRIPTION: Example showing the result when attempting to delete a field ('email') that doesn't exist in the hash at key 'user:1000'. Returns 0 to indicate no fields were deleted.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HDEL.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HDEL user:1000 email\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Using Single Character Wildcards with KEYS in DiceDB\nDESCRIPTION: Example demonstrating the use of the question mark (?) wildcard to match exactly one character in key names. Sets three keys and retrieves all keys matching the pattern 'key?'.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/KEYS.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET key1 \"value1\"\nOK\n127.0.0.1:7379> SET key2 \"value2\"\nOK\n127.0.0.1:7379> SET key3 \"value3\"\nOK\n127.0.0.1:7379> KEYS key?\n1) \"key3\"\n2) \"key1\"\n3) \"key2\"\n```\n\n----------------------------------------\n\nTITLE: Basic JSON.ARRINDEX Usage in DiceDB\nDESCRIPTION: Demonstrates how to search for the first occurrence of a value in a JSON array using JSON.ARRINDEX command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRINDEX.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET a $ '{\"name\": \"Alice\", \"age\": 30, \"mobile\": [1902, 1903, 1904]}'\n\"OK\"\n127.0.0.1:7379> JSON.ARRINDEX a $.mobile 1903\n1) (integer) 1\n127.0.0.1:7379> JSON.ARRINDEX a $.mobile 1904\n1) (integer) 2\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Offsets with GETBIT in DiceDB\nDESCRIPTION: Demonstrates error handling for non-integer and negative offset values in the GETBIT command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GETBIT.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET foo \"a\"\n127.0.0.1:7379> GETBIT foo -1\n(error) ERR bit offset is not an integer or out of range\n127.0.0.1:7379> GETBIT foo \"abc\"\n(error) ERR bit offset is not an integer or out of range\n```\n\n----------------------------------------\n\nTITLE: Unconfigured Password Example\nDESCRIPTION: Shows the error when attempting authentication on a server without a configured password.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/AUTH.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> AUTH incorrect_password\n(error) ERR AUTH <password> called without any password configured for the default user. Are you sure your configuration is correct?\n```\n\n----------------------------------------\n\nTITLE: MSET Invalid String Error in DiceDB\nDESCRIPTION: Error message returned when the MSET command is provided with a non-string value.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/MSET.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n(error) ERROR value is not a valid string\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Path\nDESCRIPTION: Example showing the result when JSON.STRLEN is used with a path that doesn't exist in the JSON document.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.STRLEN.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nJSON.STRLEN user:1001 $.phone\n(empty array)\n```\n\n----------------------------------------\n\nTITLE: Failed Authentication Example\nDESCRIPTION: Shows the error response when an incorrect password is provided.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/AUTH.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> AUTH incorrect_password\n(error) WRONGPASS invalid username-password pair or user is disabled\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ZPOPMIN Command in DiceDB\nDESCRIPTION: Demonstrates how to use the ZPOPMIN command to remove and return the member with the lowest score from an existing sorted set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZPOPMIN.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset 1 member1 2 member2 3 member3\n(integer) 3\n127.0.0.1:7379> ZPOPMIN myzset\n1) 1 \"member1\"\n```\n\n----------------------------------------\n\nTITLE: Error Handling: Wrong Number of Arguments for BF.ADD in DiceDB\nDESCRIPTION: This snippet illustrates the error message returned when BF.ADD is called with an incorrect number of arguments. The command requires exactly two arguments: the key and the item to be added.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BF.ADD.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> BF.ADD mybloomfilter\n(error) ERR wrong number of arguments for 'bf.add' command\n```\n\n----------------------------------------\n\nTITLE: PFADD Error on Wrong Key Type in DiceDB\nDESCRIPTION: Shows the error returned when attempting to use PFADD on a key that is not a HyperLogLog data structure, resulting in a WRONGTYPE error.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFADD.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"notahyperloglog\"\nOK\n127.0.0.1:7379> PFADD mykey \"element1\"\n(error) WRONGTYPE Key is not a valid HyperLogLog string value\n```\n\n----------------------------------------\n\nTITLE: Deleting an Entire JSON Document with JSON.DEL\nDESCRIPTION: This example demonstrates how to delete an entire JSON document by omitting the path parameter. The command returns 1 to indicate one path was deleted, and subsequent GET returns nil.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.DEL.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET myjson $ '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\nOK\n127.0.0.1:7379> JSON.DEL myjson\n(integer) 1\n127.0.0.1:7379> JSON.GET myjson\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Getting Client Name in DiceDB\nDESCRIPTION: Shows how to retrieve the name of the current client connection using CLIENT GETNAME command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/CLIENT.md#2025-04-05_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n127.0.0.1:7379> CLIENT GETNAME\n\"my-client\"\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Paths in JSON.GET in DiceDB\nDESCRIPTION: Example demonstrating the error returned when attempting to access a path that doesn't exist in the JSON document. The command returns an error specifying which path could not be found.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.GET.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1001 $ '{\"name\": \"John Doe\", \"age\": 30, \"email\": \"john.doe@example.com\"}'\nOK\n127.0.0.1:7379> JSON.GET user:1001 $.nonexistent\n(error) ERR Path '$.nonexistent' does not exist\n```\n\n----------------------------------------\n\nTITLE: Adding New Member to Geospatial Set in DiceDB\nDESCRIPTION: Example of adding a new geospatial point 'Palermo' to a set named 'locations' with specified longitude and latitude. Returns 1 indicating one new member was added.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GEOADD.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GEOADD locations 13.361389 38.115556 \"Palermo\"\n1\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Object Types with JSON.OBJKEYS in DiceDB\nDESCRIPTION: This example illustrates the behavior of JSON.OBJKEYS when the specified path points to a non-object type. In this case, it returns nil for a scalar value.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.OBJKEYS.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET c $ '{\"name\": \"Alice\", \"age\": 30}'\n\"OK\"\n127.0.0.1:7379> JSON.OBJKEYS c $.age\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of LPUSH Command in DiceDB\nDESCRIPTION: An example of inserting a single value 'world' at the head of the list 'mylist'. If the list doesn't exist, it will be created.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LPUSH.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LPUSH mylist \"world\"\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: HKEYS Command with Empty Hash in DiceDB\nDESCRIPTION: Demonstrating the behavior of HKEYS command when the hash stored at 'user:1002' exists but has no fields. The command returns (nil) in this case.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HKEYS.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HKEYS user:1002\n(nil)\n```\n\n----------------------------------------\n\nTITLE: MGET with Different Data Types\nDESCRIPTION: Example showing MGET behavior with keys of different data types.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/MGET.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET key1 \"value1\"\nOK\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LPUSH key2 \"value2\"\n(integer) 1\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> MGET key1 key2\n1) \"value1\"\n2) (nil)\n```\n\n----------------------------------------\n\nTITLE: Debugging Memory Usage of Specific JSON Path in DiceDB using Bash\nDESCRIPTION: This example shows how to use JSON.DEBUG MEMORY to get the memory usage of a specific path within JSON data. It sets a JSON value with multiple fields and then retrieves the memory usage of a single field.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.DEBUG.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET myjson $ '{\"a\":1,\"b\":2}',\nOK\n127.0.0.1:7379> JSON.DEBUG MEMORY myjson $.a\n1) (integer) 16\n```\n\n----------------------------------------\n\nTITLE: JSON.OBJLEN with Non-Existent Path in DiceDB\nDESCRIPTION: Demonstrates the behavior when the specified path does not exist in the JSON object, resulting in an empty list or set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.OBJLEN.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET d $ '{\"name\": \"Alice\", \"address\": {\"city\": \"Wonderland\"}}'\n\"OK\"\n127.0.0.1:7379> JSON.OBJLEN d $.nonexistentPath\n(empty list or set)\n```\n\n----------------------------------------\n\nTITLE: Error Handling - Wrong Type in DiceDB SINTER Command\nDESCRIPTION: This example demonstrates the error that occurs when trying to use the SINTER command with a key that doesn't hold a set value. DiceDB returns a WRONGTYPE error in this case.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SINTER.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Add elements to sets\n127.0.0.1:7379> SADD set1 \"a\" \"b\" \"c\"\n(integer) 3\n# Create a string key\n127.0.0.1:7379> SET stringKey \"value\"\nOK\n\n# Attempt to compute intersection with a non-set key\nSINTER set1 stringKey\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Basic OBJECT Command Syntax in DiceDB\nDESCRIPTION: Shows the basic syntax of the OBJECT command in DiceDB. This command is used with a subcommand and key parameter to inspect the internals of DiceDB objects.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/OBJECT.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nOBJECT <subcommand> <key>\n```\n\n----------------------------------------\n\nTITLE: Wrong Type Error with SMEMBERS in DiceDB\nDESCRIPTION: Example showing the error that occurs when attempting to use SMEMBERS on a key that contains a non-set value.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SMEMBERS.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mystring \"hello\"\nOK\n127.0.0.1:7379> SMEMBERS mystring\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: GEOHASH Command with Missing Arguments in DiceDB\nDESCRIPTION: This example shows the error message when the GEOHASH command is used without the required arguments. DiceDB returns an error indicating the wrong number of arguments.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GEOHASH.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GEOHASH\n(error) ERR wrong number of arguments for 'geohash' command\n```\n\n----------------------------------------\n\nTITLE: BITFIELD Command Syntax in DiceDB\nDESCRIPTION: Defines the syntax for the BITFIELD command, including optional parameters for GET, SET, INCRBY operations, and OVERFLOW behavior specification.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITFIELD.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nBITFIELD key [GET type offset | [OVERFLOW <WRAP | SAT | FAIL>]\n  <SET type offset value | INCRBY type offset increment>\n  [GET type offset | [OVERFLOW <WRAP | SAT | FAIL>]\n  <SET type offset value | INCRBY type offset increment>\n  ...]]\n```\n\n----------------------------------------\n\nTITLE: GETSET Command with Wrong Type Error in DiceDB\nDESCRIPTION: This example shows the error returned when trying to use GETSET on a key that holds a non-string value (in this case, a list). DiceDB returns a WRONGTYPE error.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GETSET.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LPUSH mylist \"item\"\n127.0.0.1:7379> GETSET mylist \"NewValue\"\n(error) ERROR WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Using ZREM on a Non-Sorted Set Key in DiceDB\nDESCRIPTION: Example demonstrating the error that occurs when attempting to use ZREM on a key that holds a string value instead of a sorted set, resulting in a WRONGTYPE error.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZREM.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mystring \"This is a string\"\nOK\n127.0.0.1:7379> ZREM mystring\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of HRANDFIELD Command\nDESCRIPTION: Shows how to use the HRANDFIELD command without any additional parameters. It first sets up a hash using HSET, then retrieves a random field using HRANDFIELD.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HRANDFIELD.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSET keys field1 value1 field2 value2 field3 value3\n(integer) 3\n127.0.0.1:7379> HRANDFIELD keys\n\"field1\"\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Wrong Key Type with PFCOUNT in DiceDB\nDESCRIPTION: Demonstration of the error returned when PFCOUNT is used with a key that exists but is not a HyperLogLog data structure.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFCOUNT.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"value\"\nOK\n127.0.0.1:7379> PFCOUNT mykey\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Retrieving Geohash for a Non-Existent Member in DiceDB\nDESCRIPTION: This example shows what happens when trying to retrieve a Geohash for a member that doesn't exist in the sorted set. DiceDB returns (nil) for non-existent members.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GEOHASH.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GEOHASH locations Venice\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Conditional Set with NX Flag\nDESCRIPTION: Demonstrates using the NX flag to set a JSON value only if the key doesn't exist\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.SET.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1002 $ '{\"name\": \"Jane Doe\", \"age\": 25}' NX\nOK\n127.0.0.1:7379> JSON.SET user:1002 $ '{\"name\": \"Jane Doe\", \"age\": 30}' NX\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Error Handling: Non-string Key or Item for BF.ADD in DiceDB\nDESCRIPTION: This example demonstrates the error that occurs when attempting to use BF.ADD with non-string values for the key or item. It shows setting a non-string value and then trying to use it with BF.ADD, resulting in a WRONGTYPE error.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BF.ADD.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET k 67890\nOK\n127.0.0.1:7379> BFADD 12345 67890\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of HMGET on Non-Hash Key in DiceDB\nDESCRIPTION: Shows the error message when trying to use HMGET on a key that doesn't contain a hash in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HMGET.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET product:2000 \"This is a string\"\nOK\n127.0.0.1:7379> HMGET product:2000 name price\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: RENAME Command Syntax in DiceDB\nDESCRIPTION: The basic syntax for the RENAME command in DiceDB. This command requires two parameters: the old key name and the new key name.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/RENAME.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nRENAME oldkey newkey\n```\n\n----------------------------------------\n\nTITLE: HEXISTS Non-existent Key Check\nDESCRIPTION: Example showing the response when checking a field in a non-existent hash.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HEXISTS.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HEXISTS user:1002 name\n0\n```\n\n----------------------------------------\n\nTITLE: INCRBYFLOAT Error with Invalid Value\nDESCRIPTION: Example showing error handling when attempting to increment a non-numeric string value.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/INCRBYFLOAT.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379>SET mystring \"hello\"\nOK\n127.0.0.1:7379>INCRBYFLOAT mystring 2.3\n(error) ERR value is not a valid float\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fields with Missing Values using HMGET in DiceDB\nDESCRIPTION: Demonstrates HMGET behavior when retrieving existing and non-existing fields from a hash in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HMGET.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HMGET product:2000 name description\n1) \"Laptop\"\n2) (nil)\n```\n\n----------------------------------------\n\nTITLE: COPY Command with Existing Destination Key in DiceDB\nDESCRIPTION: Demonstrates what happens when attempting to copy to an already existing destination key without the REPLACE option, showing the command returns 0 on the second attempt.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COPY.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COPY key1 key2\n(integer) 1\n127.0.0.1:7379> COPY key1 key2\n(integer) 0\n\n```\n\n----------------------------------------\n\nTITLE: SREM Error on Wrong Key Type\nDESCRIPTION: Shows the error returned when attempting to use SREM on a key that doesn't contain a set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SREM.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"value\"\n127.0.0.1:7379> SREM mykey \"one\"\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Creating Branch for Changes in DiceDB\nDESCRIPTION: Commands for setting up a development branch from the latest master code. Includes fetching upstream changes and creating a new feature branch.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/CONTRIBUTING.md#2025-04-05_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ cd docs\n#\n# ensure you are starting from the latest code base\n# the following steps, ensure your fork's (origin's) master is up-to-date\n#\n$ git fetch upstream\n$ git checkout master\n$ git merge upstream/master\n# create a branch for your issue\n$ git checkout -b <your issue branch>\n```\n\n----------------------------------------\n\nTITLE: Using OBJECT IDLETIME Subcommand in DiceDB\nDESCRIPTION: Shows how to use the IDLETIME subcommand to retrieve the number of seconds since a key was last accessed. This is useful for identifying stale keys in the database.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/OBJECT.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nOBJECT IDLETIME mykey\n(integer) 120\n```\n\n----------------------------------------\n\nTITLE: Using OBJECT FREQ Subcommand in DiceDB\nDESCRIPTION: Illustrates the usage of the FREQ subcommand to get the access frequency of a key when using the LFU (Least Frequently Used) eviction policy. Returns an integer value.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/OBJECT.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nOBJECT FREQ mykey\n(integer) 5\n```\n\n----------------------------------------\n\nTITLE: SADD Command Syntax in DiceDB\nDESCRIPTION: The basic syntax for the SADD command in DiceDB, showing the format to add one or more members to a set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SADD.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSADD key member [member ...]\n```\n\n----------------------------------------\n\nTITLE: JSON.ARRINDEX Wrong Type Error Handling\nDESCRIPTION: Demonstrates error handling when the JSON path doesn't point to an array object.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRINDEX.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> set b '{\"name\":\"Alice\",\"mobile\":[1902,1903,1904]}'\n\"OK\"\n127.0.0.1:7379> JSON.ARRINDEX b $.mobile 1902\n(error) Existing key has wrong type\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Non-string Values with GETBIT in DiceDB\nDESCRIPTION: Illustrates the error returned when attempting to use GETBIT on a key holding a non-string value.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GETBIT.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LPUSH baz \"item\"\n127.0.0.1:7379> GETBIT baz 0\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: SADD Command Error Case with Wrong Type in DiceDB\nDESCRIPTION: Example demonstrating the error that occurs when attempting to use SADD on a key that contains a non-set value.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SADD.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"value\"\nOK\n127.0.0.1:7379> SADD mykey \"member1\"\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Handling Non-String Values\nDESCRIPTION: Example showing the result when JSON.STRLEN is used with a path that points to a non-string value (an object in this case).\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.STRLEN.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nJSON.STRLEN user:1001 $.address\n(nil)\n```\n\n----------------------------------------\n\nTITLE: COMMAND Subcommand Syntax\nDESCRIPTION: Shows the syntax for using COMMAND with subcommands.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCOMMAND <subcommand>\n```\n\n----------------------------------------\n\nTITLE: Removing Expiration from a Key in DiceDB\nDESCRIPTION: Demonstrates how to set a key, apply an expiration, remove the expiration using PERSIST, and check the time-to-live (TTL) of the key.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PERSIST.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"Hello\"\nOK\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> EXPIRE mykey 10\n(integer) 1\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PERSIST mykey\n(integer) 1\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> TTL mykey\n(integer) -1\n```\n\n----------------------------------------\n\nTITLE: Receiving Real-time Updates from ZRANGE.WATCH in DiceDB\nDESCRIPTION: This snippet shows the output received by a client watching a sorted set with ZRANGE.WATCH. It displays the real-time updates as the set is modified by other clients.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZRANGEWATCH.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZRANGE.WATCH match:100 0 1 REV WITHSCORES\nPress Ctrl+C to exit watch mode.\n[{1 player1}]\n[{2 player2} {1 player1}]\n[{2 player2} {1 player3}]\n[{4 player4} {2 player2}]\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid Longitude in GEOADD Command\nDESCRIPTION: Example showing the error returned when attempting to add a geospatial point with an invalid longitude (value outside the range of -180 to 180 degrees).\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GEOADD.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GEOADD locations 181.120332 39.115556 \"Jamaica\"\n(error) ERROR invalid longitude\n```\n\n----------------------------------------\n\nTITLE: Using OBJECT REFCOUNT Subcommand in DiceDB\nDESCRIPTION: Demonstrates the usage of the REFCOUNT subcommand to get the number of references to the value associated with a key. Returns an integer representing the reference count.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/OBJECT.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOBJECT REFCOUNT mykey\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: PTTL Usage with Key Expiration\nDESCRIPTION: Example showing PTTL command usage with a key that has an expiration time set\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PTTL.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"Hello\"\n127.0.0.1:7379> EXPIRE mykey 10\n127.0.0.1:7379> PTTL mykey\n(integer) 10000\n```\n\n----------------------------------------\n\nTITLE: Basic JSON.ARRTRIM Syntax in DiceDB\nDESCRIPTION: The basic syntax for the JSON.ARRTRIM command in DiceDB, showing the required parameters: key, path, start, and stop indices.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRTRIM.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJSON.ARRTRIM <key> <path> <start> <stop>\n```\n\n----------------------------------------\n\nTITLE: HINCRBY Invalid Arguments\nDESCRIPTION: Demonstrates error handling when passing invalid number of arguments\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HINCRBY.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HINCRBY user:3000 field\n(error) ERROR wrong number of arguments for 'hincrby' command\n```\n\n----------------------------------------\n\nTITLE: Basic AUTH Command Syntax\nDESCRIPTION: Shows the basic syntax for the AUTH command in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/AUTH.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAUTH password\n```\n\n----------------------------------------\n\nTITLE: HMGET Command with Missing Arguments in DiceDB\nDESCRIPTION: Demonstrates error messages when HMGET is called with insufficient arguments in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HMGET.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HMGET\n(error) ERR wrong number of arguments for 'hmget' command\n\n127.0.0.1:7379> HMGET product:2000\n(error) ERR wrong number of arguments for 'hmget' command\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Caching in DiceDB\nDESCRIPTION: Demonstrates how to enable key tracking for subsequent commands using CLIENT CACHING command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/CLIENT.md#2025-04-05_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n127.0.0.1:7379> CLIENT CACHING YES\nOK\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of LLEN Command in DiceDB\nDESCRIPTION: An example demonstrating the error that occurs when trying to use LLEN on a key that holds a value of the wrong type (string instead of list).\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LLEN.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mystring \"Hello, World!\"\nOK\n127.0.0.1:7379> LLEN mystring\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Error When Key Doesn't Exist in JSON.ARRTRIM Command\nDESCRIPTION: Example showing the error that occurs when trying to use JSON.ARRTRIM with a key that doesn't exist in the DiceDB database.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRTRIM.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET a $ '[1, 2, 3, 4, 5]'\n\"OK\"\n127.0.0.1:7379> JSON.ARRTRIM aa . -10 10\n(error) ERROR key does not exist\n\n```\n\n----------------------------------------\n\nTITLE: COMMAND HELP Success Example\nDESCRIPTION: Demonstrates successful execution of the COMMAND HELP command, showing the complete output listing all available subcommands and their descriptions.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND HELP.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COMMAND HELP\n 1) \"COMMAND <subcommand> [<arg> [value] [opt] ...]. Subcommands are:\"\n 2) \"(no subcommand)\"\n 3) \"     Return details about all DiceDB commands.\"\n 4) \"COUNT\"\n 5) \"     Return the total number of commands in this DiceDB server.\"\n 6) \"LIST\"\n 7) \"     Return a list of all commands in this DiceDB server.\"\n 8) \"INFO [<command-name> ...]\"\n 9) \"     Returns details about the specified DiceDB commands. If no command names are given, documentation details for all commands are returned\"\n 10) \"GETKEYS <full-command>\"\n 11) \"     Return the keys from a full DiceDB command.\"\n 12) \"HELP\"\n 13) \"     Print this help.\"\n```\n\n----------------------------------------\n\nTITLE: ZPOPMIN Command with Negative Count Argument in DiceDB\nDESCRIPTION: Shows the result of using ZPOPMIN with a negative count argument, which returns an empty array.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZPOPMIN.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset 1 member1 2 member2 3 member3\n(integer) 3\n127.0.0.1:7379> ZPOPMIN myzset -1\n(empty array)\n```\n\n----------------------------------------\n\nTITLE: HSETNX Command with Invalid Arguments\nDESCRIPTION: Examples showing errors when HSETNX is called with incorrect number of arguments\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSETNX.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSETNX product:3000\n(error) ERR wrong number of arguments for 'hsetnx' command\n\n127.0.0.1:7379> HSETNX product:3000 name\n(error) ERR wrong number of arguments for 'hsetnx' command\n```\n\n----------------------------------------\n\nTITLE: Creating a New List with LPUSH in DiceDB\nDESCRIPTION: Shows how to create a new list 'newlist' and insert the value 'first' at its head using the LPUSH command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LPUSH.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LPUSH newlist \"first\"\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Initiating Basic Connection with HELLO Command in DiceDB\nDESCRIPTION: This snippet demonstrates how to use the HELLO command to switch to protocol version 3 in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HELLO.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HELLO 3\n```\n\n----------------------------------------\n\nTITLE: Monitoring HyperLogLog with PFCOUNT.WATCH in Bash\nDESCRIPTION: Shows how to use PFCOUNT.WATCH to start monitoring a HyperLogLog key named 'users:hll'. This provides context for when PFCOUNT.UNWATCH would be used.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFCOUNTUNWATCH.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PFCOUNT.WATCH users:hll\nPress Ctrl+C to exit watch mode.\n```\n\n----------------------------------------\n\nTITLE: Invalid RPUSH Usage with Wrong Number of Arguments in DiceDB\nDESCRIPTION: Demonstrates the error that occurs when the RPUSH command is called without providing any values to insert, which violates the command syntax requirements.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/RPUSH.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nRPUSH mylist\n(error) ERR wrong number of arguments for 'rpush' command\n```\n\n----------------------------------------\n\nTITLE: LRANGE with Invalid Offset in DiceDB\nDESCRIPTION: Demonstrates the error returned when providing an invalid stop offset to the LRANGE command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LRANGE.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LRANGE mylist 0 10ff\n(error) ERR value is not an integer or out of range\n```\n\n----------------------------------------\n\nTITLE: Using HDEL on a string key in DiceDB (with explanation)\nDESCRIPTION: Example showing the WRONGTYPE error when attempting to use HDEL on a key that contains a string value, with contextual explanation of the behavior and error.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HDEL.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET user:5000 \"This is a string\"\nOK\n127.0.0.1:7379> HDEL user:5000 name\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: SLEEP Command Error - Missing Parameter\nDESCRIPTION: Shows the error message when SLEEP command is called without the required seconds parameter.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SLEEP.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SLEEP\n(error) ERR wrong number of arguments for 'sleep' command\n```\n\n----------------------------------------\n\nTITLE: Basic COMMAND Syntax\nDESCRIPTION: Shows the basic syntax for using the COMMAND command without any parameters.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCOMMAND\n```\n\n----------------------------------------\n\nTITLE: Stopping HyperLogLog Updates with PFCOUNT.UNWATCH in Bash\nDESCRIPTION: Demonstrates using the PFCOUNT.UNWATCH command with a fingerprint to stop receiving updates on a previously watched HyperLogLog.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFCOUNTUNWATCH.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PFCOUNT.UNWATCH 1298365423\nOK\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bits with BITFIELD_RO Command in Bash\nDESCRIPTION: Example showing how to use the BITFIELD_RO command to retrieve bits from a string value. The example sets a string value \"Hello World\" and then uses BITFIELD_RO to extract the ASCII value of a character at a specific bit offset.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITFIELD_RO.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET hello \"Hello World\"\nOK\n127.0.0.1:7379> BITFIELD_RO hello GET i8 16\n1) \"108\"\n```\n\n----------------------------------------\n\nTITLE: JSON.ARRPOP Non-Existing Key Error Example\nDESCRIPTION: Shows the error message when attempting to pop from a non-existing key.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRPOP.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.ARRPOP nonexistingkey .array 1\n(error) ERR key does not exist\n```\n\n----------------------------------------\n\nTITLE: JSON.TOGGLE Command with Non-Existent Path\nDESCRIPTION: Example showing the behavior when attempting to toggle a path that doesn't exist in the JSON document, which returns 0 to indicate no values were toggled.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.TOGGLE.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.TOGGLE user:1001 $.nonexistent\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Updated JSON Document After Array Element Deletion\nDESCRIPTION: Example JSON document showing the result after deleting an array element.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.FORGET.md#2025-04-05_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Jane Doe\",\n  \"hobbies\": [\"reading\", \"hiking\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Command Count in DiceDB\nDESCRIPTION: This example demonstrates how to use the COMMAND COUNT command to retrieve the number of commands supported by the DiceDB server. It returns an integer value representing the total command count.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND COUNT.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COMMAND COUNT\n(integer) 117\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Path with JSON.TYPE in DiceDB\nDESCRIPTION: Demonstrates the behavior of JSON.TYPE command when querying a non-existent path within a JSON document. It returns an empty array in this case.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.TYPE.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.TYPE user:1001 $.nonexistent\n(empty array)\n```\n\n----------------------------------------\n\nTITLE: Executing JSON.OBJKEYS Command in DiceDB\nDESCRIPTION: The basic syntax for the JSON.OBJKEYS command in DiceDB. It takes a key parameter and an optional path parameter to specify the location of the JSON object within the document.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.OBJKEYS.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJSON.OBJKEYS key [path]\n```\n\n----------------------------------------\n\nTITLE: JSON.ARRPOP Non-Existing Path Error Example\nDESCRIPTION: Demonstrates the error when attempting to pop from a non-existing path in a valid JSON document.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRPOP.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET myjson . '{\"numbers\": [1, 2, 3]}'\nOK\n127.0.0.1:7379> JSON.ARRPOP myjson .nonexistingpath 4\n(error) ERR path .nonexistingpath does not exist\n```\n\n----------------------------------------\n\nTITLE: SETBIT Invalid Offset Error in DiceDB\nDESCRIPTION: Example showing the error when trying to use a negative offset with SETBIT. The command raises 'ERR bit is not an integer or out of range'.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SETBIT.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SETBIT mykey -1 1\n(error) ERR bit is not an integer or out of range\n```\n\n----------------------------------------\n\nTITLE: Handling Error: Odd Number of Arguments in JSON.MSET\nDESCRIPTION: This example shows the error returned when JSON.MSET is called with an odd number of arguments, which is invalid for this command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.MSET.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.MSET user:1 '{\"name\": \"Alice\", \"age\": 30}' user:2\n(error) ERR wrong number of arguments for 'JSON.MSET' command\n```\n\n----------------------------------------\n\nTITLE: Syntax for COMMAND INFO Command in DiceDB\nDESCRIPTION: The basic syntax for the COMMAND INFO command, which is used to retrieve detailed information about one or more specified commands in the DiceDB server.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND INFO.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCOMMAND INFO command-name [command-name ...]\n```\n\n----------------------------------------\n\nTITLE: Example JSON Document Structure\nDESCRIPTION: Example JSON document structure that demonstrates the various fields and nested objects that can be accessed using the JSON.STRLEN command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.STRLEN.md#2025-04-05_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"address\": {\n    \"city\": \"New York\",\n    \"zipcode\": \"10001\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Arity Error in COMMAND LIST\nDESCRIPTION: This example demonstrates the error thrown when extra arguments are passed to the COMMAND LIST command, which doesn't accept any additional arguments.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND LIST.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COMMAND LIST EXTRA ARGS\n(error) ERR wrong number of arguments for 'command|list' command\n```\n\n----------------------------------------\n\nTITLE: SETBIT Invalid Value Error in DiceDB\nDESCRIPTION: Example showing the error when trying to use a value other than 0 or 1 with SETBIT. The command raises 'ERR bit is not an integer or out of range'.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SETBIT.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SETBIT mykey 7 2\n(error) ERR bit is not an integer or out of range\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of SMEMBERS Command in DiceDB\nDESCRIPTION: Example demonstrating the error message when SMEMBERS is used with incorrect number of arguments.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SMEMBERS.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SMEMBERS\n(error) ERR wrong number of arguments for 'smembers' command\n```\n\n----------------------------------------\n\nTITLE: Basic HINCRBY Command Syntax\nDESCRIPTION: Shows the basic syntax for the HINCRBY command which takes a key, field, and increment value as parameters\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HINCRBY.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHINCRBY key field increment\n```\n\n----------------------------------------\n\nTITLE: Return Value Structure for COMMAND INFO Command in DiceDB\nDESCRIPTION: The structure of data returned by the COMMAND INFO command, showing how command metadata is organized in nested arrays with details about command properties.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND INFO.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[\n  [\n    \"command-name\",\n    arity,\n    [\n      \"flag1\",\n      \"flag2\",\n      ...\n    ],\n    first-key,\n    last-key,\n    key-step\n  ],\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Handling a Non-Existing Key with BF.EXISTS\nDESCRIPTION: Example showing the behavior when checking an item in a non-existing Bloom Filter key. The command returns 0, indicating the item definitely does not exist.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BF.EXISTS.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> BF.EXISTS nonExistingKey \"apple\"\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of LPUSH with Wrong Number of Arguments in DiceDB\nDESCRIPTION: Shows the error message when LPUSH is called without providing any values to insert, which is an invalid usage of the command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LPUSH.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nLPUSH mylist\n(error) ERR wrong number of arguments for 'lpush' command\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Path in JSON.DEBUG Command for DiceDB using Bash\nDESCRIPTION: This example demonstrates how the JSON.DEBUG MEMORY command handles an invalid path within existing JSON data. It returns an error indicating that the specified path does not exist.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.DEBUG.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.DEBUG MEMORY myjson $.nonExistentPath\n(error) ERR Path '$.nonExistentPath' does not exist\n```\n\n----------------------------------------\n\nTITLE: Error Handling: Non-Existent Key in RENAME Command\nDESCRIPTION: Example showing the error that occurs when attempting to rename a key that doesn't exist in the database.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/RENAME.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> RENAME nonexistingkey newkey\n(error) ERR no such key\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Array Path Error in JSON.ARRLEN Command\nDESCRIPTION: This example shows the error returned when attempting to get the length of a path that doesn't point to an array using JSON.ARRLEN.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRLEN.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1004 $ '{\"name\": \"Alice\",\"age\": 25}'\nOK\n127.0.0.1:7379> JSON.ARRLEN user:1004 $.age\n(error) ERROR Path '$.age' does not exist or not array\n```\n\n----------------------------------------\n\nTITLE: Example: Using COMMAND INFO with Valid and Invalid Commands in DiceDB\nDESCRIPTION: Example showing how COMMAND INFO handles a mixture of valid and invalid commands, returning metadata for valid commands and nil for invalid ones.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND INFO.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COMMAND INFO SET UNKNOWNCOMMAND\n1) 1) \"SET\"\n   2) (integer) -3\n   3) (integer) 1\n   4) (integer) 0\n   5) (integer) 0\n2) (nil)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Number of Arguments for BF.EXISTS\nDESCRIPTION: Example showing the error when BF.EXISTS is called with an incorrect number of arguments. An ERR wrong number of arguments error is raised.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BF.EXISTS.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> BF.EXISTS myBloomFilter\n(error) ERR wrong number of arguments for 'bf.exists' command\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Index Type in DiceDB JSON.ARRINSERT\nDESCRIPTION: Demonstrates the error response when an invalid index type is provided to the JSON.ARRINSERT command in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRINSERT.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET a $ '[1,2]'\nOK\n127.0.0.1:7379> JSON.ARRINSERT a $ ss 3\nERR value is not an integer or out of range\n127.0.0.1:7379> JSON.GET a\n[1,2]\n```\n\n----------------------------------------\n\nTITLE: Non-Existent Path Increment Attempt\nDESCRIPTION: Example showing the result of attempting to increment a non-existent JSON path.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.NUMINCRBY.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.NUMINCRBY user:1001 $.nonexistent 10\n```\n\n----------------------------------------\n\nTITLE: Handling Arity Error in COMMAND COUNT\nDESCRIPTION: This example shows the error thrown when extra arguments are passed to the COMMAND COUNT command. The command does not accept any additional arguments, and providing them results in an Arity Error.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND COUNT.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COMMAND COUNT EXTRA ARGS\n(error) ERR wrong number of arguments for 'command|count' command\n```\n\n----------------------------------------\n\nTITLE: MSET Wrong Arguments Error in DiceDB\nDESCRIPTION: Error message returned when the MSET command is provided with an incorrect number of arguments.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/MSET.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n(error) ERROR wrong number of arguments for 'mset' command\n```\n\n----------------------------------------\n\nTITLE: LATENCY LATEST Example\nDESCRIPTION: Demonstrates fetching the latest latency spikes recorded by the DiceDB server\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LATENCY.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LATENCY LATEST\n1) 1) \"command\"\n   2) (integer) 1633024800\n   3) (integer) 15\n2) 1) \"fork\"\n   2) (integer) 1633024805\n   3) (integer) 25\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Keys and Paths with JSON.MGET\nDESCRIPTION: Example showing how JSON.MGET returns nil for non-existent keys (user:3) and when the specified path ($.address) doesn't exist in any of the documents.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.MGET.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.MGET user:1 user:2 user:3 $.address\n1) (nil)\n2) (nil)\n3) (nil)\n```\n\n----------------------------------------\n\nTITLE: Invalid HSET Usage on Non-Hash Key in DiceDB\nDESCRIPTION: Shows an error scenario where HSET is used on a key that doesn't contain a hash data structure. This example first sets a string value and then attempts to use HSET on it.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSET.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET product:2000 \"This is a string\"\nOK\n127.0.0.1:7379> HSET product:2000 name \"Laptop\"\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: GETSET Command with Syntax Error in DiceDB\nDESCRIPTION: This example demonstrates the syntax error returned when GETSET is called with an incorrect number of arguments. The command requires exactly two arguments: a key and a value.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GETSET.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GETSET mykey\n(error) ERROR wrong number of arguments for 'getset' command\n```\n\n----------------------------------------\n\nTITLE: HRANDFIELD with Invalid Count Parameter\nDESCRIPTION: Shows the error that occurs when passing a non-integer value as the count parameter to HRANDFIELD.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HRANDFIELD.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HRANDFIELD keys hello\n(error) ERROR value is not an integer or out of range\n```\n\n----------------------------------------\n\nTITLE: SCARD Error: Wrong Number of Arguments in DiceDB\nDESCRIPTION: This example shows the errors that occur when using SCARD with either no arguments or with too many arguments. The command expects exactly one key argument.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SCARD.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SCARD\n(error) ERROR wrong number of arguments for 'scard' command\n127.0.0.1:7379> SCARD myset1 myset2\n(error) ERROR wrong number of arguments for 'scard' command\n```\n\n----------------------------------------\n\nTITLE: LATENCY HISTORY Example\nDESCRIPTION: Shows how to retrieve historical latency data for a specific command event\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LATENCY.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LATENCY HISTORY command\n1) 1) (integer) 1633024800\n   2) (integer) 15\n2) 1) (integer) 1633024805\n   2) (integer) 25\n```\n\n----------------------------------------\n\nTITLE: HGET Behavior with Non-existent Keys in DiceDB\nDESCRIPTION: Illustrates how HGET responds when attempting to retrieve a field from a non-existent key. The command returns nil in this scenario as well.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HGET.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HGET user:2000 name\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Handling ZRANGE Error for Invalid Key Type in DiceDB\nDESCRIPTION: Demonstrates the error returned when attempting to use ZRANGE on a key that is not a sorted set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZRANGE.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET foo bar\nOK\n127.0.0.1:7379> ZRANGE foo 0 2\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid Latitude in GEOADD Command\nDESCRIPTION: Example showing the error returned when attempting to add a geospatial point with an invalid latitude (value outside the range of -85.05112878 to 85.05112878 degrees).\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GEOADD.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GEOADD locations 13.361389 91.115556 \"Venice\"\n(error) ERROR invalid latitude\n```\n\n----------------------------------------\n\nTITLE: SETBIT Wrong Type Error in DiceDB\nDESCRIPTION: Example showing the error when trying to use SETBIT on a key that holds a regular string value instead of a bit string. The command raises 'WRONGTYPE Operation against a key holding the wrong kind of value'.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SETBIT.md#2025-04-05_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"Hello\"\nOK\n127.0.0.1:7379> SETBIT mykey 7 1\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Extending a String with SETBIT in DiceDB\nDESCRIPTION: Example showing how SETBIT automatically extends a string to accommodate the specified offset. Here the string is extended to at least 101 bits with the bit at offset 100 set to 1.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SETBIT.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SETBIT mykey 100 1\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Basic COMMAND HELP Syntax\nDESCRIPTION: Shows the basic syntax for the COMMAND HELP command in DiceDB. This command doesn't accept any parameters and returns help text for available subcommands.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND HELP.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCOMMAND HELP\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of HGET Command in DiceDB\nDESCRIPTION: Shows error messages for incorrect usage of the HGET command, including wrong data types and incorrect argument counts.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HGET.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET product:2000 \"This is a string\"\nOK\n127.0.0.1:7379> HGET product:2000 name\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HGET product:2000\n(error) ERR wrong number of arguments for 'hget' command\n\n127.0.0.1:7379> HGET product:2000 name name2\n(error) ERR wrong number of arguments for 'hget' command\n```\n\n----------------------------------------\n\nTITLE: LPOP Error: Wrong Data Type in DiceDB\nDESCRIPTION: Shows the error returned when attempting to use LPOP on a key holding a non-list data type.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LPOP.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSET mystring \"hello\"\nOK\nLPOP mystring\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Retrieving Geohash with a Non-Existent Key in DiceDB\nDESCRIPTION: This example shows the error returned when trying to use GEOHASH on a key that doesn't exist or isn't a sorted set. DiceDB returns a WRONGTYPE error in this case.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GEOHASH.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GEOHASH points Palermo\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of APPEND Command in DiceDB\nDESCRIPTION: Illustrates error cases when using the APPEND command incorrectly, including syntax errors and type mismatches.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/APPEND.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> APPEND foo\n(error) ERROR wrong number of arguments for 'append' command\n\n127.0.0.1:7379> LPUSH foo bar\n127.0.0.1:7379> APPEND foo baz\n(error) ERROR WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Invalid HMSET Usage on Non-Hash Key in DiceDB\nDESCRIPTION: Illustrates an error scenario when trying to use HMSET on a key that doesn't contain a hash in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HMSET.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET product:4000 \"This is a string\"\nOK\n127.0.0.1:7379> HMSET product:4000 name \"Tablet\"\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Documents for Non-Existent Keys and Paths Example\nDESCRIPTION: Example of setting two JSON documents to demonstrate how JSON.MGET handles non-existent keys and paths in the next example.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.MGET.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1 $ '{\"name\": \"Alice\", \"age\": 30}'\nOK\n127.0.0.1:7379> JSON.SET user:2 $ '{\"name\": \"Bob\", \"age\": 25}'\nOK\n```\n\n----------------------------------------\n\nTITLE: HRANDFIELD with Invalid Key\nDESCRIPTION: Illustrates the error that occurs when attempting to use HRANDFIELD on a key that does not contain a hash.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HRANDFIELD.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET key \"not a hash\"\nOK\n127.0.0.1:7379> HRANDFIELD key\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Attempting to delete a field from a non-hash key in DiceDB\nDESCRIPTION: Example showing the error that occurs when attempting to use HDEL on a key ('user:3000') that contains a string value instead of a hash.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HDEL.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET user:3000 \"Not a hash\"\nOK\n127.0.0.1:7379> HDEL user:3000 name\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: BF.RESERVE Invalid Initial Capacity Example in DiceDB\nDESCRIPTION: Example showing the error that occurs when providing an invalid negative value for the initial capacity parameter.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BF.RESERVE.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> BF.RESERVE my_bloom_filter 0.01 initial_capacity -100\n(error) ERR (capacity should be larger than 0)\n```\n\n----------------------------------------\n\nTITLE: Error Example: BITCOUNT with Invalid Parameters\nDESCRIPTION: Demonstrates error handling when BITCOUNT is used with invalid start or end parameters. DiceDB expects these parameters to be integers within the valid range.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITCOUNT.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"foobar\"\nOK\n127.0.0.1:7379> BITCOUNT mykey start end\n(error) ERR value is not an integer or out of range\n```\n\n----------------------------------------\n\nTITLE: JSON.OBJLEN with Non-Existent Key in DiceDB\nDESCRIPTION: Shows the error that occurs when trying to use JSON.OBJLEN on a key that doesn't exist in the database.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.OBJLEN.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.OBJLEN nonexistent_key $\n(error) ERR could not perform this operation on a key that doesn't exist\n```\n\n----------------------------------------\n\nTITLE: JSON.OBJLEN with Non-Object Path in DiceDB\nDESCRIPTION: Shows what happens when the path points to an element that is not a JSON object, resulting in (nil).\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.OBJLEN.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET c $ '{\"name\": \"Alice\", \"age\": 30}'\n\"OK\"\n127.0.0.1:7379> JSON.OBJLEN c $.age\n1) (nil)\n```\n\n----------------------------------------\n\nTITLE: Invalid HSETNX Usage with Wrong Key Type\nDESCRIPTION: Example demonstrating error when using HSETNX with a non-hash key type\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSETNX.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET product:3000 \"This is a string\"\nOK\n127.0.0.1:7379> HSETNX product:3000 name \"Smartphone\"\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Creating New Hash with HSETNX\nDESCRIPTION: Example of successfully creating a new hash field using HSETNX\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSETNX.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSETNX product:3000 name \"Smartphone\"\n1\n```\n\n----------------------------------------\n\nTITLE: Error Handling: Incorrect Arguments in RENAME Command\nDESCRIPTION: Example demonstrating the error that occurs when the RENAME command is called with an incorrect number of arguments (only one argument instead of the required two).\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/RENAME.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> RENAME key1\n(error) ERR wrong number of arguments for 'rename' command\n```\n\n----------------------------------------\n\nTITLE: SETEX Command with Missing Arguments in DiceDB\nDESCRIPTION: Illustrates the error message received when using the SETEX command with missing required arguments.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SETEX.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SETEX foo 10\n(error) ERROR wrong number of arguments for 'setex' command\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid Arguments with PFCOUNT in DiceDB\nDESCRIPTION: Example of the syntax error returned when PFCOUNT is called without any arguments.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFCOUNT.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PFCOUNT\n(error) ERR wrong number of arguments for 'pfcount' command\n```\n\n----------------------------------------\n\nTITLE: HINCRBY Invalid Key Usage\nDESCRIPTION: Shows error handling when attempting to use HINCRBY on a non-hash key\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HINCRBY.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET user:3000 \"This is a string\"\nOK\n127.0.0.1:7379> HINCRBY user:3000 field1 10\n(error) ERROR WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Keys with JSON.OBJKEYS in DiceDB\nDESCRIPTION: This example demonstrates the error returned by JSON.OBJKEYS when the specified key does not exist in the database. It shows how the command handles invalid input.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.OBJKEYS.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.OBJKEYS nonexistent_key $\n(error) ERROR could not perform this operation on a key that doesn't exist\n```\n\n----------------------------------------\n\nTITLE: Creating a New Set with SADD in DiceDB\nDESCRIPTION: Example of creating a new set named \"fruits\" with three initial members using the SADD command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SADD.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SADD fruits \"apple\" \"banana\" \"cherry\"\n(integer) 3\n```\n\n----------------------------------------\n\nTITLE: Using DBSIZE with Multiple Databases in DiceDB (Placeholder)\nDESCRIPTION: This example shows the traditional syntax for using DBSIZE with multiple databases. However, in the current version of DiceDB, all operations occur on a single database space.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/DBSIZE.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SELECT 0\nOK\n127.0.0.1:7379> DBSIZE\n(integer) 42\n\n127.0.0.1:7379> SELECT 1\nOK\n127.0.0.1:7379> DBSIZE\n(integer) 42\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of TOUCH Command on List Type in DiceDB\nDESCRIPTION: Example demonstrating an invalid usage of the TOUCH command on a list type, which will result in a WRONGTYPE error.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/TOUCH.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nLPUSH mylist \"element\"\nTOUCH mylist\n```\n\n----------------------------------------\n\nTITLE: Incrementing Non-Existent Key\nDESCRIPTION: Example demonstrating how INCRBYFLOAT handles incrementing a key that doesn't exist, initializing it to 0 first.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/INCRBYFLOAT.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379>INCRBYFLOAT newcounter 5.3\n\"5.3\"\n```\n\n----------------------------------------\n\nTITLE: COMMAND GETKEYS Unknown Command Error\nDESCRIPTION: Example of error when an unrecognized command is specified.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND GETKEYS.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COMMAND GETKEYS UNKNOWNCOMMAND key1\n(error) ERR invalid command specified\n```\n\n----------------------------------------\n\nTITLE: LPOP Error: Wrong Number of Arguments in DiceDB\nDESCRIPTION: Demonstrates the error returned when LPOP is called with an incorrect number of arguments.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LPOP.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nLPOP mylist secondlist\n(error) ERR wrong number of arguments for 'lpop' command\n```\n\n----------------------------------------\n\nTITLE: Syntax for HVALS Command in DiceDB\nDESCRIPTION: The basic syntax for the HVALS command in DiceDB. It takes a single parameter 'key', which is the name of the key holding the hash.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HVALS.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHVALS key\n```\n\n----------------------------------------\n\nTITLE: Running DiceDB Server with Docker\nDESCRIPTION: Starts a DiceDB server using Docker, exposing it on port 7379.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/tutorials/url-shortener.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 7379:7379 dicedb/dicedb\n```\n\n----------------------------------------\n\nTITLE: HDEL command with wrong number of arguments in DiceDB\nDESCRIPTION: Examples showing the errors that occur when HDEL is called without any arguments or with only the key argument, missing the required field parameter.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HDEL.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HDEL\n(error) ERR wrong number of arguments for 'hdel' command\n\n127.0.0.1:7379> HDEL user:5000\n(error) ERR wrong number of arguments for 'hdel' command\n```\n\n----------------------------------------\n\nTITLE: MGET Wrong Type Operation Error\nDESCRIPTION: Example showing error handling when attempting operations with wrong data types.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/MGET.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET key1 \"value1\"\nOK\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET key2 \"value2\"\nOK\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LPUSH key2 \"value3\"\n(error) ERROR WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> MGET key1 key2\n1) \"value1\"\n2) \"value2\"\n```\n\n----------------------------------------\n\nTITLE: COMMAND GETKEYS No Keys Error\nDESCRIPTION: Example of error when trying to get keys from a command that doesn't accept key arguments.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND GETKEYS.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COMMAND GETKEYS FLUSHDB\n(error) ERR The command has no key arguments\n```\n\n----------------------------------------\n\nTITLE: RPOP Invalid Data Type Error\nDESCRIPTION: Demonstrates the error that occurs when attempting to use RPOP on a key that contains a string instead of a list.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/RPOP.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSET mystring \"hello\"\nOK\nLPOP mystring\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Setting HMSET Command Syntax in DiceDB\nDESCRIPTION: Defines the syntax for the HMSET command in DiceDB, used to set multiple field-value pairs in a hash at once.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HMSET.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHMSET key field value [field value ...]\n```\n\n----------------------------------------\n\nTITLE: Running the Go URL Shortener Application\nDESCRIPTION: Starts the Go application server on port 8080.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/tutorials/url-shortener.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Insufficient Parameters in GETBIT Command\nDESCRIPTION: Shows the error message when executing the GETBIT command without the required offset argument.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GETBIT.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GETBIT foo\n(error) wrong number of arguments for 'GETBIT' command\n```\n\n----------------------------------------\n\nTITLE: Running DiceDB Server with Docker\nDESCRIPTION: This command starts the DiceDB server locally on port 7379 using Docker. It allows connecting to the server using DiceDB CLI and SDKs.\nSOURCE: https://github.com/DiceDB/dice/blob/master/README.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -p 7379:7379 dicedb/dicedb:latest\n```\n\n----------------------------------------\n\nTITLE: HINCRBY Invalid Increment Type\nDESCRIPTION: Demonstrates error handling when passing a non-integer increment value\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HINCRBY.md#2025-04-05_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HINCRBY user:3000 field new\n(error) ERROR value is not an integer or out of range\n```\n\n----------------------------------------\n\nTITLE: Error Handling when Key is Not a JSON Document\nDESCRIPTION: This example shows the error that occurs when trying to use JSON.DEL on a key that doesn't contain a JSON document. DiceDB returns an error indicating the key has the wrong type.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.DEL.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mystring \"Hello, World!\"\nOK\n127.0.0.1:7379> JSON.DEL mystring\n(error) ERROR Existing key has wrong Dice type\n```\n\n----------------------------------------\n\nTITLE: HEXISTS Basic Usage Example\nDESCRIPTION: Example showing how to check if field 'name' exists in the hash stored at key 'user:1001'.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HEXISTS.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HEXISTS user:1001 name\n1\n```\n\n----------------------------------------\n\nTITLE: Example Usage of HGETALL Command in Redis\nDESCRIPTION: Demonstrates the usage of HGETALL command in Redis. It shows how to set multiple field-value pairs using HSET and then retrieve all pairs using HGETALL. It also shows the behavior when the key doesn't exist.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/HGETALL.md#2025-04-05_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nlocalhost:7379> HSET k1 f1 v1 f2 v2 f3 v3\nOK 3\nlocalhost:7379> HGETALL k1\nOK \nf1=v1\nf2=v2\nf3=v3\nlocalhost:7379> HGETALL k2\nOK (nil)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of HGETALL Command in Redis\nDESCRIPTION: Demonstrates the usage of HGETALL command in Redis. It shows how to set multiple field-value pairs using HSET and then retrieve all pairs using HGETALL. It also shows the behavior when the key doesn't exist.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/HGETALL.md#2025-04-05_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nlocalhost:7379> HSET k1 f1 v1 f2 v2 f3 v3\nOK 3\nlocalhost:7379> HGETALL k1\nOK \nf1=v1\nf2=v2\nf3=v3\nlocalhost:7379> HGETALL k2\nOK (nil)\n```\n\n----------------------------------------\n\nTITLE: JSON.ARRINDEX Invalid Arguments Error Handling\nDESCRIPTION: Shows error handling when invalid start and stop arguments are provided to the command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRINDEX.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET b $ '{\"name\": \"Alice\", \"mobile\": [1902, 1903, 1904]}'\n\"OK\"\n127.0.0.1:7379> JSON.ARRINDEX b $.mobile iamnotvalidinteger\n(error) ERR Couldn't parse as integer\n127.0.0.1:7379> JSON.ARRINDEX b $.mobile iamnotvalidinteger iamalsonotvalidinteger\n(error) ERR Couldn't parse as integer\n```\n\n----------------------------------------\n\nTITLE: Running Storm Utility for Bulk SET Requests\nDESCRIPTION: Example of how to run the Storm utility to generate bulk SET requests for stress testing DiceDB. Storm is a collection of utilities designed to fire large volumes of requests to test database performance.\nSOURCE: https://github.com/DiceDB/dice/blob/master/DOC.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ go run storm/set/set.go\n```\n\n----------------------------------------\n\nTITLE: Handling a Wrong Type of Key with BF.EXISTS\nDESCRIPTION: Example showing the error when using BF.EXISTS on a key that doesn't contain a Bloom Filter. A WRONGTYPE error is raised.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BF.EXISTS.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET myString \"hello\"\nOK\n127.0.0.1:7379> BF.EXISTS myString \"apple\"\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: ZPOPMIN Command with Floating-Point Scores in DiceDB\nDESCRIPTION: Demonstrates the use of ZPOPMIN with a sorted set containing members with floating-point scores.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZPOPMIN.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset 1.5 member1 2.7 member2 3.8 member3\n(integer) 3\n127.0.0.1:7379> ZPOPMIN myzset\n1) 1.5 \"member1\"\n```\n\n----------------------------------------\n\nTITLE: Example 1: BITCOUNT on Entire String\nDESCRIPTION: Shows how to use BITCOUNT to count all set bits in a string by omitting the range parameters. It counts the total number of bits with value 1 in the entire string.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITCOUNT.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"foobar\"\nOK\n127.0.0.1:7379> BITCOUNT mykey\n(integer) 26\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch for Changes in Git\nDESCRIPTION: Commands for fetching the latest code from upstream, ensuring your master branch is up-to-date, and creating a new branch for your issue. This is the initial setup before making code changes.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/git.md#2025-04-05_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ cd dice\n#\n# ensure you are starting from the latest code base\n# the following steps, ensure your fork's (origin's) master is up-to-date\n#\n$ git fetch upstream\n$ git checkout master\n$ git merge upstream/master\n# create a branch for your issue\n$ git checkout -b <your issue branch>\n```\n\n----------------------------------------\n\nTITLE: JSON.ARRINDEX Invalid Path Error Handling\nDESCRIPTION: Shows error handling when an invalid JSON path is provided to the command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRINDEX.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET b $ '{\"name\": \"Alice\", \"mobile\": [1902, 1903, 1904]}'\n\"OK\"\n127.0.0.1:7379> JSON.ARRINDEX b $invalid_path 3\n(error) ERR Path '$invalid_path' does not exist\n```\n\n----------------------------------------\n\nTITLE: Non-Existent Sets SDIFF Example\nDESCRIPTION: Demonstrates SDIFF behavior with non-existent sets, returning an empty array.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SDIFF.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SDIFF set1 set2\n(empty array)\n```\n\n----------------------------------------\n\nTITLE: BF.RESERVE Invalid Error Rate Example in DiceDB\nDESCRIPTION: Example demonstrating the error that occurs when providing an invalid error rate value that is outside the valid range (0, 1).\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BF.RESERVE.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> BF.RESERVE my_bloom_filter error_rate -1.5\n(error) Err (0 < error rate range < 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Client Name with HELLO Command in DiceDB\nDESCRIPTION: This snippet illustrates how to use the HELLO command to switch to protocol version 3 and set a client name in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HELLO.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HELLO 3 SETNAME myclientname\n```\n\n----------------------------------------\n\nTITLE: SCARD Error: Wrong Type in DiceDB\nDESCRIPTION: This example demonstrates the error that occurs when trying to use SCARD on a key that holds a value of the wrong type (string instead of set).\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SCARD.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mystring \"hello\"\nOK\n127.0.0.1:7379> SCARD mystring\n(error) ERROR WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Listing New Features in DiceDB Changelog\nDESCRIPTION: A Markdown list detailing new features added to DiceDB, including support for new commands, TTL preservation, and command migrations.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/updates/2024-11-21.md#2025-04-05_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- Add support for `PFCOUNT.UNWATCH` command and cleanup reactivity tests. (@jyotindrsingh) (#1030)\n- Preserve `TTL` after `APPEND` command. (@dhanrajkotian3) (#1036)\n- Command migration for multishard commands: `TOUCH`, `DBSIZE`, `KEYS`. (@ashwin-kulkarni128, @jyotindrsingh) (#1301)\n- Migrated `GEOADD` and `GEODIST` commands. (@ygosain44) (#1033)\n- Add support for byte array/bitmap to APPEND command. (@c-harish) (#1286)\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Path Error in JSON.ARRLEN Command\nDESCRIPTION: This snippet illustrates the error returned when trying to get the length of a non-existent array path using JSON.ARRLEN.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRLEN.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1003 $ '{\"name\": \"Jane Doe\",\"contacts\":{\"phone\":\"123-456-7890\"}}'\nOK\n127.0.0.1:7379> JSON.ARRLEN user:1003 $.emails\n(error) ERROR Path '$.emails' does not exist\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Value at Specific Path\nDESCRIPTION: Shows how to set a JSON value at a specific path within an existing JSON document\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.SET.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET user:1001 $.address '{\"city\": \"New York\", \"zip\": \"10001\"}'\nOK\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of LPUSH on Non-List Key in DiceDB\nDESCRIPTION: Demonstrates the error that occurs when trying to use LPUSH on a key that doesn't contain a list. In this case, 'mystring' is a string, not a list.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LPUSH.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mystring \"not a list\"\nOK\n127.0.0.1:7379> LPUSH mystring \"value\"\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: DBSIZE Command Error: Authentication Required\nDESCRIPTION: This example shows the error message returned when attempting to use the DBSIZE command without proper authentication.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/DBSIZE.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> DBSIZE\n(error) NOAUTH Authentication required\n```\n\n----------------------------------------\n\nTITLE: Basic PFCOUNT.WATCH Command Syntax\nDESCRIPTION: Defines the basic syntax for the PFCOUNT.WATCH command, which takes a single key parameter representing the HyperLogLog to monitor.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFCOUNTWATCH.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPFCOUNT.WATCH <key>\n```\n\n----------------------------------------\n\nTITLE: Starting DiceDB Server Configuration\nDESCRIPTION: Command and output showing DiceDB server startup with default configuration displaying version, command count, engine type, port, cores and shards information.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/data/benchmarks.mdx#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./dicedb\n\n        ██████╗ ██╗ ██████╗███████╗██████╗ ██████╗\n        ██╔══██╗██║██╔════╝██╔════╝██╔══██╗██╔══██╗\n        ██║  ██║██║██║     █████╗  ██║  ██║██████╔╝\n        ██║  ██║██║██║     ██╔══╝  ██║  ██║██╔══██╗\n        ██████╔╝██║╚██████╗███████╗██████╔╝██████╔╝\n        ╚═════╝ ╚═╝ ╚═════╝╚══════╝╚═════╝ ╚═════╝\n\n2025-03-09T16:46:03+05:30 INF starting DiceDB version=0.1.0\n2025-03-09T16:46:03+05:30 INF running with total_commands=21\n2025-03-09T16:46:03+05:30 INF running with engine=ironhawk\n2025-03-09T16:46:03+05:30 INF running with port=7379\n2025-03-09T16:46:03+05:30 INF running on cores=4\n2025-03-09T16:46:03+05:30 INF running with shards=4\n```\n\n----------------------------------------\n\nTITLE: Non-Numeric Value Increment Attempt\nDESCRIPTION: Example showing the result of attempting to increment a non-numeric string value.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.NUMINCRBY.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.NUMINCRBY user:1001 $.name 5\n```\n\n----------------------------------------\n\nTITLE: Overwriting Existing Key with SETEX in DiceDB\nDESCRIPTION: Demonstrates using SETEX to overwrite an existing key 'foo' with a new value 'new_value' and reset its expiration time to 20 seconds.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SETEX.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SETEX foo 20 new_value\nOK\n```\n\n----------------------------------------\n\nTITLE: Error Handling: Invalid JSON in JSON.ARRAPPEND\nDESCRIPTION: Demonstrates the error message when trying to append an invalid JSON value. It sets a valid JSON document, then attempts to append an invalid JSON value.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRAPPEND.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET myjson . '{\"numbers\": [1, 2, 3]}'\nOK\n127.0.0.1:7379> JSON.ARRAPPEND myjson .numbers invalidjson\n(error) ERR invalid JSON\n```\n\n----------------------------------------\n\nTITLE: Executing COMMAND LIST in DiceDB\nDESCRIPTION: This snippet demonstrates the basic syntax for using the COMMAND LIST command in DiceDB. It doesn't accept any parameters and returns an array of all supported command names.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND LIST.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCOMMAND LIST\n```\n\n----------------------------------------\n\nTITLE: Running the DiceDB Chatroom Application with Username Parameter\nDESCRIPTION: This command runs the main.go file of the chatroom application while specifying a username as a command-line argument. The username is required for identifying users in the chatroom.\nSOURCE: https://github.com/DiceDB/dice/blob/master/examples/chatroom-go/README.md#2025-04-05_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ go run main.go <username>\n```\n\n----------------------------------------\n\nTITLE: Non-Existent Key Error Example\nDESCRIPTION: Example showing the error when attempting to increment a value in a non-existent key.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.NUMINCRBY.md#2025-04-05_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.NUMINCRBY user:1002 . 5\n```\n\n----------------------------------------\n\nTITLE: Appending to a Bitmap Key with APPEND in DiceDB\nDESCRIPTION: Shows how to use APPEND with a key containing a bitmap, demonstrating the command's behavior with different data types.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/APPEND.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SETBIT bmkey 2 1\n(integer) 0\n127.0.0.1:7379> SETBIT bmkey 3 1\n(integer) 0\n127.0.0.1:7379> SETBIT bmkey 5 1\n(integer) 0\n127.0.0.1:7379> SETBIT bmkey 10 1\n(integer) 0\n127.0.0.1:7379> SETBIT bmkey 11 1\n(integer) 0\n127.0.0.1:7379> SETBIT bmkey 14 1\n(integer) 0\n127.0.0.1:7379> GET bmkey\n\"42\"\n127.0.0.1:7379> APPEND bmkey 1\n(integer) 3\n127.0.0.1:7379> GET bmkey\n\"421\"\n```\n\n----------------------------------------\n\nTITLE: RPOP Invalid Arguments Error\nDESCRIPTION: Shows the error that occurs when attempting to use RPOP with multiple arguments.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/RPOP.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nRPOP mylist secondlist\n(error) ERR wrong number of arguments for 'lpop' command\n```\n\n----------------------------------------\n\nTITLE: Pausing Client Operations in DiceDB\nDESCRIPTION: Shows how to temporarily pause all client operations for a specified duration using CLIENT PAUSE command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/CLIENT.md#2025-04-05_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n127.0.0.1:7379> CLIENT PAUSE 5000\nOK\n```\n\n----------------------------------------\n\nTITLE: Basic PTTL Command Syntax\nDESCRIPTION: Basic syntax for the PTTL command in DiceDB\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PTTL.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPTTL key\n```\n\n----------------------------------------\n\nTITLE: Project Dependencies List\nDESCRIPTION: Lists the core dependencies including Pulumi packages for AWS infrastructure management and Boto3 for AWS SDK access\nSOURCE: https://github.com/DiceDB/dice/blob/master/pulumi/requirements.txt#2025-04-05_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npulumi\npulumi-aws\npulumi-aws-native\npulumi-command\nboto3\n```\n\n----------------------------------------\n\nTITLE: ZPOPMAX with Floating-Point Scores\nDESCRIPTION: Example demonstrating ZPOPMAX with floating-point scores\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZPOPMAX.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset 1.5 member1 2.7 member2 3.8 member3\n(integer) 3\n127.0.0.1:7379> ZPOPMAX myzset\n1) 1.5 \"member1\"\n```\n\n----------------------------------------\n\nTITLE: Syntax for LINSERT Command in DiceDB\nDESCRIPTION: The basic syntax for the LINSERT command in DiceDB. It requires a key, position (BEFORE or AFTER), pivot value, and the element to insert.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LINSERT.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLINSERT key <BEFORE | AFTER> pivot element\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of ZCARD Command on Non-Sorted Set in DiceDB\nDESCRIPTION: Demonstrates the error returned when ZCARD is used on a key that doesn't contain a sorted set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZCARD.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mystring \"This is a string\"\nOK\n\n127.0.0.1:7379> ZCARD mystring\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Invalid Value Type Example\nDESCRIPTION: Example showing error when incrementing a non-numeric hash value\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HINCRBYFLOAT.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSET user:3000 field \"hello\"\n(integer) 1\n127.0.0.1:7379> HINCRBYFLOAT user:3000 field 2\n(error) ERROR value is not an integer or a float\n```\n\n----------------------------------------\n\nTITLE: Overwriting Existing Key with PFMERGE in DiceDB\nDESCRIPTION: Illustrates how PFMERGE overwrites an existing destination key when merging HyperLogLogs. It first adds elements to hll_merged, then merges other HyperLogLogs into it, effectively overwriting its previous content.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFMERGE.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PFADD hll_merged \"x\" \"y\" \"z\"\n(integer) 1\n127.0.0.1:7379> PFMERGE hll_merged hll1 hll2 hll3\nOK\n127.0.0.1:7379> PFCOUNT hll_merged\n(integer) 7\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot.txt for DiceDB Website\nDESCRIPTION: This snippet sets up the robots.txt file for the DiceDB project. It allows all user agents to crawl the site and specifies the location of the sitemap for better indexing.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/public/robots.txt#2025-04-05_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\n\nSitemap: https://arpitbhayani.me/sitemap-index.xml\n```\n\n----------------------------------------\n\nTITLE: ZPOPMAX Wrong Type Error\nDESCRIPTION: Example showing error when using ZPOPMAX on wrong key type\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZPOPMAX.md#2025-04-05_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET stringkey \"string_value\"\nOK\n127.0.0.1:7379> ZPOPMAX stringkey\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of RPUSH in DiceDB\nDESCRIPTION: Shows how to insert a single value \"hello\" into a list named \"mylist\". The command returns the length of the list after the operation.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/RPUSH.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> RPUSH mylist \"hello\"\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: ZPOPMIN Command with Wrong Key Type in DiceDB\nDESCRIPTION: Shows the error that occurs when attempting to use ZPOPMIN on a key that is not a sorted set.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZPOPMIN.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET stringkey \"string_value\"\nOK\n127.0.0.1:7379> ZPOPMIN stringkey\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: ZPOPMAX with Same Scores\nDESCRIPTION: Example showing ZPOPMAX behavior when multiple members have the same score\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZPOPMAX.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset 1 member1 1 member2 1 member3\n(integer) 3\n127.0.0.1:7379> ZPOPMAX myzset 2\n1) 1 \"member1\"\n2) 1 \"member2\"\n```\n\n----------------------------------------\n\nTITLE: Error Example: BITCOUNT with Non-existent Key\nDESCRIPTION: Demonstrates the behavior when BITCOUNT is used with a key that doesn't exist. In this case, DiceDB treats it as an empty string and returns 0 instead of generating an error.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITCOUNT.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> BITCOUNT non_existent_key\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Running All Integration Tests\nDESCRIPTION: Command to execute all integration tests.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/development-setup.md#2025-04-05_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ make test\n```\n\n----------------------------------------\n\nTITLE: ZPOPMAX Invalid Count Argument\nDESCRIPTION: Example showing error when using an invalid count argument\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZPOPMAX.md#2025-04-05_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset 1 member1\n(integer) 1\n127.0.0.1:7379> ZPOPMAX myzset INCORRECT_COUNT_ARGUMENT\n(error) ERR value is not an integer or out of range\n```\n\n----------------------------------------\n\nTITLE: RPOP with Non-Existent Key\nDESCRIPTION: Shows the behavior of RPOP when attempting to pop from a non-existent list.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/RPOP.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> RPOP emptylist\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Error Handling - No Keys Provided in DiceDB SINTER Command\nDESCRIPTION: This example shows the error returned when the SINTER command is called without providing any keys. At least one key must be specified for the command to work properly.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SINTER.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Attempt to compute intersection without providing any keys\n127.0.0.1:7379> SINTER\n(error) ERR wrong number of arguments for 'sinter' command\n```\n\n----------------------------------------\n\nTITLE: Invalid AUTH Command Usage\nDESCRIPTION: Demonstrates the error when using incorrect syntax with the AUTH command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/AUTH.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> AUTH your_secret_password foo bar\n(error) ERR wrong number of arguments for 'auth' command\n```\n\n----------------------------------------\n\nTITLE: Basic RPOP Usage Example\nDESCRIPTION: Demonstrates pushing multiple elements to a list and then removing the last element using RPOP.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/RPOP.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LPUSH mylist \"one\" \"two\" \"three\"\n(integer) 3\n127.0.0.1:7379> RPOP mylist\n\"one\"\n```\n\n----------------------------------------\n\nTITLE: Installing GoLangCI Linter\nDESCRIPTION: Commands to install the GoLangCI linter tool with sudo privileges.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/development-setup.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo su\n$ sudo curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sudo sh -s -- -b /bin v1.64.6\n```\n\n----------------------------------------\n\nTITLE: INCRBYFLOAT Error with Invalid Increment\nDESCRIPTION: Example showing error handling when providing an invalid increment value.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/INCRBYFLOAT.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379>INCRBYFLOAT mycounter \"two\"\n(error) ERR value is not a valid float\n```\n\n----------------------------------------\n\nTITLE: HRANDFIELD with WITHVALUES Parameter\nDESCRIPTION: Shows how to use the HRANDFIELD command with both the count and WITHVALUES parameters to retrieve random fields along with their associated values.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HRANDFIELD.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HRANDFIELD keys 2 WITHVALUES\n1) \"field2\"\n2) \"value2\"\n3) \"field1\"\n4) \"value1\"\n```\n\n----------------------------------------\n\nTITLE: HSET Command with Incorrect Argument Count in DiceDB\nDESCRIPTION: Demonstrates error scenarios where the HSET command is used with an incorrect number of arguments, resulting in syntax errors.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSET.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSET product:2000\n(error) ERR wrong number of arguments for 'hset' command\n\n127.0.0.1:7379> HSET product:2000 name\n(error) ERR wrong number of arguments for 'hset' command\n```\n\n----------------------------------------\n\nTITLE: JSON.TOGGLE Command with Non-Boolean Value\nDESCRIPTION: Example showing the error that occurs when attempting to toggle a value that is not a boolean (in this case, a string).\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.TOGGLE.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.TOGGLE user:1001 $.name\n(error) ERR value at path is not a boolean\n```\n\n----------------------------------------\n\nTITLE: JSON.TYPE Command with Non-JSON Data in DiceDB\nDESCRIPTION: Demonstrates the error handling when trying to use JSON.TYPE command on a key that doesn't contain JSON data. It returns an error indicating the wrong data type.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.TYPE.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"This is a string\"\nOK\n127.0.0.1:7379> JSON.TYPE mykey $\n(error) ERROR Existing key has wrong Dice type\n```\n\n----------------------------------------\n\nTITLE: Naming Functions that Return Values in Go\nDESCRIPTION: Demonstrates the preferred naming convention for functions that return values. Such functions should use noun-like names rather than verb-like names with 'Get' prefixes.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/go.md#2025-04-05_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *Config) GetJobName(key string) (value string, ok bool)  // not okay\nfunc (c *Config) JobName(key string) (value string, ok bool)  // okay\n```\n\n----------------------------------------\n\nTITLE: Using SCAN as an Alternative to KEYS in DiceDB\nDESCRIPTION: Example showing the SCAN command as a more efficient alternative to KEYS for large datasets. The SCAN command provides cursor-based iteration over the keyspace without blocking the server.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/KEYS.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SCAN 0 MATCH key*\n1) \"0\"\n2) 1) \"key1\"\n   2) \"key2\"\n```\n\n----------------------------------------\n\nTITLE: Executing Q.WATCH Command in DiceDB\nDESCRIPTION: Basic syntax for using the Q.WATCH command to monitor data changes based on a DSQL query. The command establishes a subscription to receive real-time updates when the query results change.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/QWATCH.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nQ.WATCH <dsql-query>\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Command Access Example\nDESCRIPTION: Demonstrates the error when attempting to execute a command without authentication.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/AUTH.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> GET x\n(error) NOAUTH Authentication required\n```\n\n----------------------------------------\n\nTITLE: Invalid SET Command with Conflicting Options in DiceDB\nDESCRIPTION: Example showing an error when trying to use incompatible options (EX and KEEPTTL) together in a SET command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/sample_command_docs.md#2025-04-05_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET foo bar EX 10 KEEPTTL\n(error) ERR syntax error\n```\n\n----------------------------------------\n\nTITLE: Invalid PTTL Usage\nDESCRIPTION: Example demonstrating error handling when PTTL command is used incorrectly with extra arguments\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PTTL.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET newkey \"value\"\n127.0.0.1:7379> PTTL newkey value\n(error) ERR wrong number of arguments for 'pttl' command\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Values Effectively in Logs\nDESCRIPTION: Illustrates the correct way to include boolean configuration values in logs, avoiding redundancy in the message text and using the structured fields properly.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/logging.md#2025-04-05_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nslog.Info(\"enable-watch is set to true\", slog.Bool(\"enable-watch\", true))  // not okay\nslog.Info(\"running with\", slog.Bool(\"enable-watch\", config.EnableWatch))  // okay\n```\n\n----------------------------------------\n\nTITLE: Basic LATENCY Command Syntax\nDESCRIPTION: Shows the basic syntax for using the LATENCY command in DiceDB\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LATENCY.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLATENCY [SUBCOMMAND] [ARGUMENTS]\n```\n\n----------------------------------------\n\nTITLE: Using DEL Command in DiceDB\nDESCRIPTION: Example showing how to use the DEL command to delete multiple keys. The command returns the number of keys that were actually deleted (existing keys).\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/commands/DEL.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlocalhost:7379> SET k1 v1\nOK OK\nlocalhost:7379> SET k2 v2\nOK OK\nlocalhost:7379> DEL k1 k2 k3\nOK 2\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Key in JSON.DEBUG Command for DiceDB using Bash\nDESCRIPTION: This snippet illustrates how the JSON.DEBUG MEMORY command behaves when used on a non-existent key. It returns 0, indicating that the key does not exist.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.DEBUG.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.DEBUG MEMORY nonExistentKey\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Basic SLEEP Command Syntax\nDESCRIPTION: Shows the basic syntax for the SLEEP command that pauses execution for a specified number of seconds.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SLEEP.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSLEEP seconds\n```\n\n----------------------------------------\n\nTITLE: Executing PFCOUNT Command in DiceDB\nDESCRIPTION: The PFCOUNT command syntax for estimating the cardinality of HyperLogLog data structures. It can be used with one or more keys.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFCOUNT.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPFCOUNT key [key ...]\n```\n\n----------------------------------------\n\nTITLE: DiceDB Testing Updates\nDESCRIPTION: Documentation of testing improvements including assertion checks and benchmark additions\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/updates/2024-08-29.md#2025-04-05_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Add asserts checking non-set commands: addresses #411\n- Adds memtier benchmark and load tests preset\n```\n\n----------------------------------------\n\nTITLE: LATENCY RESET Example\nDESCRIPTION: Demonstrates resetting latency data for a specific command event\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LATENCY.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LATENCY RESET command\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Using GETRANGE with Bitmap in DiceDB\nDESCRIPTION: Example of using GETRANGE to retrieve a string representation of a byte array stored in a bitmap. Demonstrates how GETRANGE interacts with non-string data types.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/GETRANGE.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SETBIT bitmapkey 2 1\n(integer) 0\n127.0.0.1:7379> SETBIT bitmapkey 3 1\n(integer) 0\n127.0.0.1:7379> SETBIT bitmapkey 5 1\n(integer) 0\n127.0.0.1:7379> SETBIT bitmapkey 10 1\n(integer) 0\n127.0.0.1:7379> SETBIT bitmapkey 11 1\n(integer) 0\n127.0.0.1:7379> SETBIT bitmapkey 14 1\n(integer) 0\n127.0.0.1:7379> GETRANGE bitmapkey 0 -1\n\"42\"\n```\n\n----------------------------------------\n\nTITLE: Running DiceDB Hello World Example in Go\nDESCRIPTION: Command to execute the Go program that demonstrates DiceDB operations. This command should be run from the directory containing the main.go file.\nSOURCE: https://github.com/DiceDB/dice/blob/master/examples/hello-world-go/README.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go run main.go\n```\n\n----------------------------------------\n\nTITLE: Starting DiceDB Server Output\nDESCRIPTION: Example server startup output showing DiceDB ASCII art logo and initialization details including version, command count, engine type, port, cores and shards configuration.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/get-started/hello-world.mdx#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n        ██████╗ ██╗ ██████╗███████╗██████╗ ██████╗\n        ██╔══██╗██║██╔════╝██╔════╝██╔══██╗██╔══██╗\n        ██║  ██║██║██║     █████╗  ██║  ██║██████╔╝\n        ██║  ██║██║██║     ██╔══╝  ██║  ██║██╔══██╗\n        ██████╔╝██║╚██████╗███████╗██████╔╝██████╔╝\n        ╚═════╝ ╚═╝ ╚═════╝╚══════╝╚═════╝ ╚═════╝\n\n2025-02-17T07:15:33Z INF starting DiceDB version=0.1.0\n2025-02-17T07:15:33Z INF running with total_commands=21\n2025-02-17T07:15:33Z INF running with engine=ironhawk\n2025-02-17T07:15:33Z INF running with port=7379\n2025-02-17T07:15:33Z INF running on cores=16\n2025-02-17T07:15:33Z INF running with shards=16\n```\n\n----------------------------------------\n\nTITLE: BITPOS Command in DiceDB with Bit Not Found\nDESCRIPTION: This example illustrates the behavior of the BITPOS command when the specified bit is not found within the given range, resulting in a return value of -1.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITPOS.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"foobar\"\nOK\n127.0.0.1:7379> BITPOS mykey 1 2 4\n(integer) -1\n```\n\n----------------------------------------\n\nTITLE: DiceDB Action Items\nDESCRIPTION: List of pending tasks and future development focus areas\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/updates/2024-08-29.md#2025-04-05_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- Hacktoberfest focus\n- Docs: Inaccuracies, fixes.\n- Testing\n- Dice-cli\n- Language-specific SDKs\n- Windows Support\n- Report command inconsistencies\n```\n\n----------------------------------------\n\nTITLE: Extracting Keys from DEL Command\nDESCRIPTION: Shows how to extract multiple keys from a DEL command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND GETKEYS.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COMMAND GETKEYS DEL key1 key2 key3\n1) \"key1\"\n2) \"key2\"\n3) \"key3\"\n```\n\n----------------------------------------\n\nTITLE: Incrementing Existing Key Value\nDESCRIPTION: Example showing how to increment an existing numeric value by a floating-point number.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/INCRBYFLOAT.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379>SET mycounter 10\nOK\n127.0.0.1:7379>INCRBYFLOAT mycounter 3.4\n\"13.4\"\n```\n\n----------------------------------------\n\nTITLE: Installing DiceDB CLI using cURL\nDESCRIPTION: This bash script installs the DiceDB CLI by downloading and executing an installation script from the DiceDB CLI repository. It requires root privileges.\nSOURCE: https://github.com/DiceDB/dice/blob/master/README.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo su\n$ curl -sL https://raw.githubusercontent.com/DiceDB/dicedb-cli/refs/heads/master/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: DiceDB CLI Prompt\nDESCRIPTION: The default CLI prompt showing connection to local DiceDB instance on port 7379.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/docs/get-started/hello-world.mdx#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlocalhost:7379>\n```\n\n----------------------------------------\n\nTITLE: SLEEP Command Error - Invalid Parameter Type\nDESCRIPTION: Shows the error message when SLEEP command is called with a non-integer parameter.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SLEEP.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SLEEP abc\n(error) ERR value is not an integer or out of range\n```\n\n----------------------------------------\n\nTITLE: DiceDB General Improvements\nDESCRIPTION: Documentation of code reorganization and type safety improvements\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/updates/2024-08-29.md#2025-04-05_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Move QWATCH logic to QueryWatcher\n- Reorganize async server code\n- Moved from unsafe pointer to string type for the store\n```\n\n----------------------------------------\n\nTITLE: Basic SET Command Usage in DiceDB\nDESCRIPTION: Simple example of setting a key 'foo' with the value 'bar' in DiceDB using the SET command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/sample_command_docs.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET foo bar\nOK\n```\n\n----------------------------------------\n\nTITLE: Syntax Error SDIFF Example\nDESCRIPTION: Demonstrates error handling when SDIFF is called with no arguments.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SDIFF.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SDIFF\n(error) ERR wrong number of arguments for 'sdiff' command\n\n```\n\n----------------------------------------\n\nTITLE: Committing Changes and Creating a Pull Request\nDESCRIPTION: Commands for adding modified files, committing changes with a meaningful message, and pushing to your branch. Includes instructions for creating a Pull Request on GitHub with proper issue references.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/git.md#2025-04-05_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ git add <files required for the change>\n$ git commit -m \"Meaningful oneliner for the change\"\n$ git push origin <your issue branch>\n\nAfter this, create a PullRequest in `github <https://github.com/dicedb/docs/pulls>`_. Make sure you have linked the relevant Issue in the description with \"Closes #number\" or \"Fixes #number\".\n```\n\n----------------------------------------\n\nTITLE: Committing and Creating Pull Request\nDESCRIPTION: Git commands for committing changes and pushing them to create a pull request. Shows the basic workflow for contributing code changes.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/CONTRIBUTING.md#2025-04-05_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ git add <files required for the change>\n$ git commit -m \"Meaningful oneliner for the change\"\n$ git push origin <your issue branch>\n\nAfter this, create a PullRequest in `github <https://github.com/dicedb/docs/pulls>`_. Make sure you have linked the relevant Issue in the description with \"Closes #number\" or \"Fixes #number\".\n```\n\n----------------------------------------\n\nTITLE: ZPOPMAX with Negative Count\nDESCRIPTION: Example showing behavior when using a negative count argument\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZPOPMAX.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset 1 member1 2 member2 3 member3\n(integer) 3\n127.0.0.1:7379> ZPOPMAX myzset -1\n(empty array)\n```\n\n----------------------------------------\n\nTITLE: Executing PFCOUNT.UNWATCH Command in Bash\nDESCRIPTION: Demonstrates the basic syntax for using the PFCOUNT.UNWATCH command to stop receiving updates on a HyperLogLog identified by a fingerprint.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PFCOUNTUNWATCH.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPFCOUNT.UNWATCH <fingerprint>\n```\n\n----------------------------------------\n\nTITLE: Command Syntax Placeholder in Bash\nDESCRIPTION: A placeholder for the command syntax that should be replaced with the actual command syntax when documenting a specific command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/command_docs_template.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# command syntax here\n```\n\n----------------------------------------\n\nTITLE: Retrieving Range from Sorted Set in DiceDB\nDESCRIPTION: Demonstrates basic usage of ZRANGE command to retrieve elements from index 0 to 2 in a sorted set named 'leaderboard'.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZRANGE.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD leaderboard 50 \"Alice\" 70 \"Bob\" 60 \"Charlie\"\n(integer) 3\n127.0.0.1:7379> ZRANGE leaderboard 0 2\n1) \"Alice\"\n2) \"Charlie\"\n3) \"Bob\"\n```\n\n----------------------------------------\n\nTITLE: Rebasing Your Branch with Master Changes\nDESCRIPTION: Workflow for handling updates to the master branch while your PR is in review. Includes committing your changes, pulling new master changes, rebasing your branch, resolving conflicts, and updating the PR.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/git.md#2025-04-05_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# commit your changes\n$ git add <updated files>\n$ git commit -m \"Meaningful message for the update\"\n# pull new changes\n$ git checkout master\n$ git fetch upstream\n$ git merge upstream/master\n$ git checkout <your issue branch>\n$ git rebase master\n\nAt this time, if rebase flags any conflicts, resolve the conflicts and follow the instructions provided by the rebase command.\n\nRun additional tests/validations for the new changes and update the PR by pushing your changes:\n```\n\n----------------------------------------\n\nTITLE: Rebasing Changes with Master\nDESCRIPTION: Process for updating a feature branch with the latest changes from master, including conflict resolution steps.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/CONTRIBUTING.md#2025-04-05_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# commit your changes\n$ git add <updated files>\n$ git commit -m \"Meaningful message for the update\"\n# pull new changes\n$ git checkout master\n$ git fetch upstream\n$ git merge upstream/master\n$ git checkout <your issue branch>\n$ git rebase master\n```\n\n----------------------------------------\n\nTITLE: Invalid BITFIELD Command Usage Examples in DiceDB\nDESCRIPTION: Demonstrates various invalid uses of the BITFIELD command, including syntax errors, wrong key types, and invalid parameters, along with their corresponding error messages.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITFIELD.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> BITFIELD\n(error) ERR wrong number of arguments for 'bitfield' command\n\n127.0.0.1:7379> SADD bits a b c\n(integer) 3\n127.0.0.1:7379> BITFIELD bits\n(error) ERR WRONGTYPE Operation against a key holding the wrong kind of value\n\n127.0.0.1:7379> BITFIELD bits SET u8 0 255 INCRBY u8 0 100 GET u8\n(error) ERR syntax error\n\n127.0.0.1:7379> bitfield bits set a8 0 255 incrby u8 0 100 get u8\n(error) ERR Invalid bitfield type. Use something like i16 u8. Note that u64 is not supported but i64 is\n\n127.0.0.1:7379> bitfield bits set u8 a 255 incrby u8 0 100 get u8\n(error) ERR bit offset is not an integer or out of range\n\n127.0.0.1:7379> bitfield bits set u8 0 255 incrby u8 0 100 overflow wraap\n(error) ERR Invalid OVERFLOW type specified\n\n127.0.0.1:7379> bitfield bits set u8 0 incrby u8 0 100 get u8 288\n(error) ERR value is not an integer or out of range\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage Example in Bash\nDESCRIPTION: An example showing an invalid command syntax that results in an error message, demonstrating how error cases should be documented.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/command_docs_template.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> <CMD syntax here>\n(error) ERR syntax error\n```\n\n----------------------------------------\n\nTITLE: Attempting to Persist a Non-Existent Key in DiceDB\nDESCRIPTION: Shows the behavior of the PERSIST command when applied to a non-existent key. The command returns 0, indicating that no action was taken.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PERSIST.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PERSIST mykey\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Logging Specific Details Over General Statements\nDESCRIPTION: Demonstrates the preference for logging specific, actionable details rather than general statements that provide little useful information for debugging or monitoring.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/logging.md#2025-04-05_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nslog.Info(\"server is running\")  // not okay\nslog.Info(\"running with\", slog.Int(\"port\", config.Port))  // okay\n```\n\n----------------------------------------\n\nTITLE: Installing and Running DiceDB Documentation Locally with npm\nDESCRIPTION: This code snippet demonstrates the commands to install dependencies and start the local development server for the DiceDB documentation website. It uses npm to manage packages and run scripts.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/docs.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd docs\n$ npm install\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: LRANGE with Wrong Data Type in DiceDB\nDESCRIPTION: Shows the error when attempting to use LRANGE on a key that doesn't contain a list data type.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LRANGE.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HMSET myhash field1 \"value1\"\nOK\n127.0.0.1:7379> HGET myhash field1\n\"value1\"\n127.0.0.1:7379> LRANGE myhash 0 100\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Primary Version Function Naming in Go\nDESCRIPTION: Demonstrates when type indicators can be omitted from function names. When there is a clear \"primary\" version of a function, the type can be left out of the name.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/go.md#2025-04-05_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *Config) Marshal() ([]byte, error)  // okay\nfunc (c *Config) MarshalText() (string, error)  // okay\n```\n\n----------------------------------------\n\nTITLE: ZPOPMAX with Existing Key\nDESCRIPTION: Example demonstrating ZPOPMAX usage with an existing sorted set\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZPOPMAX.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZADD myzset 1 member1 2 member2 3 member3\n(integer) 3\n127.0.0.1:7379> ZPOPMAX myzset\n1) 1 \"member1\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Updated Changes\nDESCRIPTION: Command for pushing updated changes after addressing review comments and rebasing.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/CONTRIBUTING.md#2025-04-05_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ngit push origin <your issue branch>\n```\n\n----------------------------------------\n\nTITLE: Generating DiceDB Configuration\nDESCRIPTION: Command to generate the initial DiceDB configuration file.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/development-setup.md#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ go run main.go config-init\n```\n\n----------------------------------------\n\nTITLE: Non-Existent Path Deletion Example\nDESCRIPTION: Example showing the behavior when attempting to delete a non-existent path.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.FORGET.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.FORGET user:1001 $.nonexistent\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Using Lowercase in Log Messages\nDESCRIPTION: Demonstrates the standard of using lowercase for log messages except for proper nouns like 'DiceDB'. The correct approach helps maintain consistency in log formatting.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/logging.md#2025-04-05_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nslog.Info(\"Starting DiceDB\", slog.String(\"version\", config.DiceDBVersion))  // not okay\nslog.Info(\"starting DiceDB\", slog.String(\"version\", config.DiceDBVersion))  // okay\n```\n\n----------------------------------------\n\nTITLE: Wrong Type Error SDIFF Example\nDESCRIPTION: Shows error handling when attempting SDIFF on non-set data types.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/SDIFF.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET not_a_set \"value\"\n127.0.0.1:7379> SDIFF not_a_set\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Listing Bug Fixes in DiceDB Changelog\nDESCRIPTION: A Markdown list detailing bug fixes implemented in DiceDB, addressing issues like goroutine leaks and CI improvements.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/updates/2024-11-21.md#2025-04-05_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n- Fixed goroutine leaks and deadlocks in worker and RESP integration tests. (@psr) (#1298)\n- Fix typo in `benchmarks.md`. (@vinitparekh1742)\n- Ensure CI runs only when source code has changes. (@bhima2001) (#1260)\n```\n\n----------------------------------------\n\nTITLE: Running Single Unit Test\nDESCRIPTION: Command to execute a specific unit test using environment variable.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/development-setup.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nTEST_FUNC=<name of the test function> make unittest-one\nTEST_FUNC=TestByteList make unittest-one\n```\n\n----------------------------------------\n\nTITLE: Using Structured Logging with Key-Value Pairs\nDESCRIPTION: Demonstrates the proper use of structured logging with key-value pairs instead of embedding values directly in the message string, which improves log parsing and analysis.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/logging.md#2025-04-05_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nslog.Info(\"running on port\", config.Port)  // not okay\nslog.Info(\"running with\", slog.Int(\"port\", config.Port))  // okay\n```\n\n----------------------------------------\n\nTITLE: PTTL with Non-existent Key\nDESCRIPTION: Example showing PTTL command behavior when querying a non-existent key\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/PTTL.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> PTTL nonExistentKey\n(integer) -2\n```\n\n----------------------------------------\n\nTITLE: Listing Miscellaneous Changes in DiceDB Changelog\nDESCRIPTION: A Markdown list of miscellaneous changes made to the DiceDB project, including website styling updates and redirect setup.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/updates/2024-11-21.md#2025-04-05_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n- Consistent blog card styling on the website. (@realChakrawarti) (#1300)\n- Set up a `/docs` redirect. (@arpitbhayani)\n```\n\n----------------------------------------\n\nTITLE: Running Single Integration Test\nDESCRIPTION: Command to execute a specific integration test using environment variable.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/development-setup.md#2025-04-05_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nTEST_FUNC=<name of the test function> make test-one\nTEST_FUNC=^TestSet$ make test-one\n```\n\n----------------------------------------\n\nTITLE: Building DiceDB CLI\nDESCRIPTION: Commands to clone and build the DiceDB CLI tool.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/development-setup.md#2025-04-05_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/DiceDB/dicedb-cli\n$ cd dicedb-cli\n$ make build\n```\n\n----------------------------------------\n\nTITLE: COMMAND Example Usage\nDESCRIPTION: Shows a complete example of COMMAND output with actual commands like AUTH, HSCAN, PERSIST, and PING, demonstrating their metadata structure.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COMMAND\n  1) 1) \"AUTH\"\n     2) (integer) 0\n     3) (integer) 0\n     4) (integer) 0\n     5) (integer) 0\n  2) 1) \"HSCAN\"\n     2) (integer) -3\n     3) (integer) 1\n     4) (integer) 0\n     5) (integer) 0\n  3) 1) \"PERSIST\"\n     2) (integer) 0\n     3) (integer) 0\n     4) (integer) 0\n     5) (integer) 0\n  4) 1) \"PING\"\n     2) (integer) -1\n     3) (integer) 0\n     4) (integer) 0\n     5) (integer) 0\n   .\n   .\n   .\n127.0.0.1:7379>\n```\n\n----------------------------------------\n\nTITLE: DiceDB Bug Fixes Entry\nDESCRIPTION: Documentation of bug fix related to reference length commands not detecting key deletions\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/updates/2024-08-29.md#2025-04-05_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Fix: `STACKREFLEN` and `QUEUEREFLEN` are not aware of the deletion of key\n```\n\n----------------------------------------\n\nTITLE: Pushing Updated Changes After Rebasing\nDESCRIPTION: Command for pushing your updated and rebased branch to GitHub, which automatically updates your Pull Request with the latest changes.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/git.md#2025-04-05_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ngit push origin <your issue branch>\n```\n\n----------------------------------------\n\nTITLE: Local Module Replacement Configuration\nDESCRIPTION: Configuration line to add in go.mod file for pointing to local dicedb-go repository.\nSOURCE: https://github.com/DiceDB/dice/blob/master/CONTRIBUTING/development-setup.md#2025-04-05_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nreplace github.com/dicedb/dicedb-go => ../dicedb-go\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of ZCOUNT Command in DiceDB\nDESCRIPTION: This snippet demonstrates invalid usage of the ZCOUNT command, including incorrect number of arguments and using an invalid score value.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/ZCOUNT.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> ZCOUNT myzset\n(error) ERROR wrong number of arguments for 'zcount' command\n\n127.0.0.1:7379> ZCOUNT myzset \"invalid\" 100\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Running Membench Benchmark Configuration\nDESCRIPTION: Command to execute the membench benchmark utility against DiceDB, specifying database type, host, port, number of requests and concurrent clients.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/data/benchmarks.mdx#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./membench benchmark \\\n    --database dicedb \\\n    --host xx.xx.xx.xx \\\n    --port 7379 \\\n    --num-requests 100000 \\\n    --num-clients 4\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of KEYS Command in DiceDB\nDESCRIPTION: Example showing how to use the KEYS command with a wildcard (*) to find all keys with a specific prefix. The example sets three keys and retrieves those starting with 'key'.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/KEYS.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET key1 \"value1\"\nOK\n127.0.0.1:7379> SET key2 \"value2\"\nOK\n127.0.0.1:7379> SET anotherkey \"value3\"\nOK\n127.0.0.1:7379> KEYS key*\n1) \"key1\"\n2) \"key2\"\n```\n\n----------------------------------------\n\nTITLE: Listing Enhancements in DiceDB Changelog\nDESCRIPTION: A Markdown list highlighting various enhancements made to DiceDB, including fixes, refactoring, and documentation improvements.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/updates/2024-11-21.md#2025-04-05_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- Fix enable-multithreading flag and `PING` support. (@jyotindrsingh)\n- Added labels for `WATCH` commands. (@psr) (#1267)\n- Refactored configuration management to use a `.conf` file. (@vinitparekh1742) (#1292)\n- Refactored `IOHandler` code. (@soumya-codes) (#1306)\n- Added `ZADD` documentation and improved error messages. (@vanshavenger) (#1283)\n```\n\n----------------------------------------\n\nTITLE: Setting and Appending Values with APPEND in DiceDB\nDESCRIPTION: Demonstrates basic usage of the APPEND command to set a new key-value pair and append to an existing key.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/APPEND.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> APPEND foo bar\n(integer) 3\n\n127.0.0.1:7379> SET foo bar\nOK\n127.0.0.1:7379> APPEND foo baz\n(integer) 6\n127.0.0.1:7379> GET foo\n\"barbaz\"\n```\n\n----------------------------------------\n\nTITLE: Listing Documentation Updates in DiceDB Changelog\nDESCRIPTION: A Markdown list showcasing various documentation updates made to the DiceDB project, including package updates and new command documentation.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/updates/2024-11-21.md#2025-04-05_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n- Updated package-lock. (@apoorvyadav1111) (#1311)\n- Added documentation for new watch/unwatch commands. (@apoorvyadav1111) (#1295)\n- Changes in README for new configuration. (@vinitparekh1742) (#1309)\n- Added type documentation. (@vanshavenger) (#1280)\n- Reactivity page and quick write-up added. (@arpitbhayani) (#1308)\n```\n\n----------------------------------------\n\nTITLE: LATENCY GRAPH Example\nDESCRIPTION: Shows how to generate a visual representation of latency data for a command event\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/LATENCY.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> LATENCY GRAPH command\n| 15 | 25 |\n```\n\n----------------------------------------\n\nTITLE: Listing Refactoring Efforts in DiceDB Changelog\nDESCRIPTION: A Markdown list describing refactoring efforts in the DiceDB project, including Makefile improvements and codebase-wide fixes.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/content/updates/2024-11-21.md#2025-04-05_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n- Refactored Makefile. (@vinitparekh1742) (#1288)\n- Fixed CI and linting issues across codebase. (@arpitbhayani, @jyotindrsingh)\n```\n\n----------------------------------------\n\nTITLE: BITPOS Command Error: Invalid Range in DiceDB\nDESCRIPTION: This example shows the error thrown when using non-integer values for the start or end parameters in the BITPOS command in DiceDB.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/BITPOS.md#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET mykey \"foobar\"\nOK\n127.0.0.1:7379> BITPOS mykey 1 \"a\" \"b\"\n(error) ERR value is not an integer or out of range\n```\n\n----------------------------------------\n\nTITLE: HSTRLEN with Non-existent Key\nDESCRIPTION: Shows the behavior of HSTRLEN when attempting to get string length from a non-existent hash key.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HSTRLEN.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HSTRLEN nonExistentHash field1\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Handling Out-of-Bounds Indices with JSON.ARRTRIM in DiceDB\nDESCRIPTION: Example showing how JSON.ARRTRIM handles out-of-bounds indices by automatically adjusting them to the nearest valid index within the array.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.ARRTRIM.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.SET c $ '[1, 2, 3, 4, 5]'\n\"OK\"\n127.0.0.1:7379> JSON.ARRTRIM c $ -10 10\n1) \"5\"\n127.0.0.1:7379> JSON.GET c\n\"[1,2,3,4,5]\"\n```\n\n----------------------------------------\n\nTITLE: COMMAND Error Example\nDESCRIPTION: Demonstrates the error message returned when an invalid subcommand is provided.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/COMMAND.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> COMMAND UNKNOWNSUBCOMMAND\n(error) ERR unknown subcommand 'UNKNOWNSUBCOMMAND'. Try COMMAND HELP.\n```\n\n----------------------------------------\n\nTITLE: Enabling Client Tracking in DiceDB\nDESCRIPTION: Shows how to enable server-assisted client-side caching using CLIENT TRACKING command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/CLIENT.md#2025-04-05_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n127.0.0.1:7379> CLIENT TRACKING ON\nOK\n```\n\n----------------------------------------\n\nTITLE: Setting Client No-Evict Mode in DiceDB\nDESCRIPTION: Shows how to enable or disable the no-eviction mode for the current connection using CLIENT NO-EVICT command.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/CLIENT.md#2025-04-05_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n127.0.0.1:7379> CLIENT NO-EVICT ON\nOK\n```\n\n----------------------------------------\n\nTITLE: Invalid Path Error Example\nDESCRIPTION: Example showing the error when using an invalid JSON path.\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/JSON.NUMINCRBY.md#2025-04-05_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> JSON.NUMINCRBY user:1001 . 5\n```\n\n----------------------------------------\n\nTITLE: Invalid Increment Type Example\nDESCRIPTION: Example showing error when using a non-numeric increment value\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HINCRBYFLOAT.md#2025-04-05_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> HINCRBYFLOAT user:3000 field new\n(error) ERROR value is not an integer or a float\n```\n\n----------------------------------------\n\nTITLE: Invalid Key Usage Example\nDESCRIPTION: Example showing error when using HINCRBYFLOAT on a non-hash key\nSOURCE: https://github.com/DiceDB/dice/blob/master/docs/src/_skipped_commands/HINCRBYFLOAT.md#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:7379> SET user:3000 \"This is a string\"\nOK\n127.0.0.1:7379> HINCRBYFLOAT user:3000 field1 10\n(error) ERROR WRONGTYPE Operation against a key holding the wrong kind of value\n```"
  }
]