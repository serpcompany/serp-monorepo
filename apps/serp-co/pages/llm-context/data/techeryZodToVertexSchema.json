[
  {
    "owner": "techery",
    "repo": "zod-to-vertex-schema",
    "content": "TITLE: Converting Zod Schema to Vertex AI Schema\nDESCRIPTION: Example showing how to convert a basic Zod user schema to Vertex AI schema format using zodToVertexSchema function\nSOURCE: https://github.com/techery/zod-to-vertex-schema/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from 'zod';\nimport { zodToVertexSchema } from 'zod-to-vertex-schema';\n\n// Define your Zod schema\nconst userSchema = z.object({\n  name: z.string(),\n  age: z.number().int().min(0),\n  email: z.string().email(),\n  roles: z.array(z.enum(['admin', 'user'])),\n});\n\n// Convert to Vertex AI schema\nconst vertexSchema = zodToVertexSchema(userSchema);\n```\n\n----------------------------------------\n\nTITLE: Converting Vertex AI Schema to Zod\nDESCRIPTION: Example demonstrating conversion from Vertex AI schema back to Zod schema with validation example\nSOURCE: https://github.com/techery/zod-to-vertex-schema/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { vertexSchemaToZod } from 'zod-to-vertex-schema';\nimport { SchemaType } from 'zod-to-vertex-schema';\n\n// Your Vertex AI schema\nconst vertexSchema = {\n  type: SchemaType.OBJECT,\n  properties: {\n    name: { type: SchemaType.STRING },\n    age: { type: SchemaType.INTEGER, minimum: 0 },\n    email: { type: SchemaType.STRING },\n    roles: {\n      type: SchemaType.ARRAY,\n      items: { type: SchemaType.STRING, enum: [\"admin\", \"user\"] }\n    }\n  },\n  required: [\"name\", \"age\", \"email\", \"roles\"],\n  propertyOrdering: [\"name\", \"age\", \"email\", \"roles\"]\n};\n\n// Convert back to Zod schema\nconst zodSchema = vertexSchemaToZod(vertexSchema);\n\n// Now you can use it for validation\nconst validUser = {\n  name: \"John\",\n  age: 30,\n  email: \"john@example.com\",\n  roles: [\"admin\"]\n};\n\nconst result = zodSchema.safeParse(validUser);\nconsole.log(result.success); // true\n```\n\n----------------------------------------\n\nTITLE: Complex Nested Objects Example\nDESCRIPTION: Advanced example showing conversion of complex nested objects with arrays and enums\nSOURCE: https://github.com/techery/zod-to-vertex-schema/blob/main/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst addressSchema = z.object({\n  street: z.string(),\n  city: z.string(),\n  country: z.string(),\n  postalCode: z.string(),\n});\n\nconst orderSchema = z.object({\n  orderId: z.string(),\n  customer: z.object({\n    id: z.string(),\n    name: z.string(),\n    addresses: z.array(addressSchema),\n  }),\n  items: z.array(z.object({\n    productId: z.string(),\n    quantity: z.number().int().min(1),\n    price: z.number().min(0),\n  })),\n  status: z.enum(['pending', 'processing', 'shipped', 'delivered']),\n  createdAt: z.date(),\n});\n\nconst vertexOrderSchema = zodToVertexSchema(orderSchema);\n```\n\n----------------------------------------\n\nTITLE: Optional and Nullable Fields Example\nDESCRIPTION: Example showing how to handle optional and nullable fields in schema conversion\nSOURCE: https://github.com/techery/zod-to-vertex-schema/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst profileSchema = z.object({\n  username: z.string(),\n  displayName: z.string().optional(), // Will be marked as not required\n  bio: z.string().nullable(), // Will be marked as nullable\n  lastSeen: z.date().optional().nullable(), // Both optional and nullable\n});\n\nconst vertexProfileSchema = zodToVertexSchema(profileSchema);\n```\n\n----------------------------------------\n\nTITLE: Unions and Discriminated Unions Example\nDESCRIPTION: Example demonstrating handling of union types and discriminated unions\nSOURCE: https://github.com/techery/zod-to-vertex-schema/blob/main/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Simple union\nconst resultSchema = z.union([\n  z.object({ success: z.literal(true), data: z.string() }),\n  z.object({ success: z.literal(false), error: z.string() }),\n]);\n\n// Discriminated union\nconst shapeSchema = z.discriminatedUnion('type', [\n  z.object({ type: z.literal('circle'), radius: z.number() }),\n  z.object({ type: z.literal('rectangle'), width: z.number(), height: z.number() }),\n]);\n\nconst vertexResultSchema = zodToVertexSchema(resultSchema);\nconst vertexShapeSchema = zodToVertexSchema(shapeSchema);\n```\n\n----------------------------------------\n\nTITLE: Date and Format Validation Example\nDESCRIPTION: Example showing date and format validation handling in schema conversion\nSOURCE: https://github.com/techery/zod-to-vertex-schema/blob/main/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst eventSchema = z.object({\n  title: z.string(),\n  startDate: z.date(), // Will be converted to date format\n  endDate: z.date(),\n  createdAt: z.string().datetime(), // Will be converted to date-time format\n});\n\nconst vertexEventSchema = zodToVertexSchema(eventSchema);\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Zod Enum from String Array in TypeScript\nDESCRIPTION: Helper function that creates a Zod enum schema from a dynamic array of string values. This allows for flexible enum creation when the enum values are not known at development time.\nSOURCE: https://github.com/techery/zod-to-vertex-schema/blob/main/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst roles = ['admin', 'user', 'guest'];\nconst roleSchema = zodDynamicEnum(roles);\n```\n\n----------------------------------------\n\nTITLE: Installing zod-to-vertex-schema Package\nDESCRIPTION: Command to install the package via npm\nSOURCE: https://github.com/techery/zod-to-vertex-schema/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install zod-to-vertex-schema\n```\n\n----------------------------------------\n\nTITLE: Changelog Documentation in Markdown\nDESCRIPTION: Structured changelog documenting version history from 0.1.0 to 0.1.3, including added features, fixes, and breaking changes. Follows Keep a Changelog format and Semantic Versioning.\nSOURCE: https://github.com/techery/zod-to-vertex-schema/blob/main/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [0.1.3] - 2024-03-XX\n\n### Added\n- `vertexSchemaToZod` function for converting Vertex AI schemas back to Zod schemas\n- Two-way conversion support between Zod and Vertex AI schemas\n- Improved documentation with examples for both conversion directions\n\n## [0.1.2] - 2024-03-13\n\n### Fixed\n- Fixed imports and package structure\n\n## [0.1.0] - 2024-03-12\n\n### Added\n- Initial release of `zod-to-vertex-schema`\n- Core functionality to convert Zod schemas to Vertex AI/Gemini compatible schemas\n- Support for basic types:\n  - String (with date and datetime formats)\n  - Number (with integer and float support)\n  - Boolean\n  - Arrays\n  - Objects\n  - Enums\n- Support for complex types:\n  - Unions\n  - Discriminated unions\n  - String literals\n- Support for modifiers:\n  - Optional fields\n  - Nullable fields\n  - Number constraints (min, max)\n- Property ordering preservation in objects\n- TypeScript type definitions and source maps\n- Comprehensive test suite\n- GitHub Actions for CI/CD\n- ESLint and Prettier configuration\n\n### Notes\n- Recursive schemas (using `z.lazy()`) are not supported due to Vertex AI schema limitations\n- Non-string literals are not supported in this version\n- Default values are intentionally ignored in schema conversion\n\n\n## [0.1.2] - 2025-01-13\n\n### Added\n- Fix imports\n```"
  }
]