[
  {
    "owner": "exa-labs",
    "repo": "exa-js",
    "content": "TITLE: Common Exa API Operations\nDESCRIPTION: Comprehensive examples of common Exa API operations including search, findSimilar, getContents, and answer endpoints with various options and configurations.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Basic search\nconst basicResults = await exa.search(\"This is a Exa query:\");\n\n// Autoprompted search\nconst autoPromptedResults = await exa.search(\"autopromptable query\", { useAutoprompt: true });\n\n// Search with date filters\nconst dateFilteredResults = await exa.search(\"This is a Exa query:\", {\n  startPublishedDate: \"2019-01-01\",\n  endPublishedDate: \"2019-01-31\"\n});\n\n// Search with domain filters\nconst domainFilteredResults = await exa.search(\"This is a Exa query:\", {\n  includeDomains: [\"www.cnn.com\", \"www.nytimes.com\"]\n});\n\n// Search and get text contents\nconst searchAndTextResults = await exa.searchAndContents(\"This is a Exa query:\", { text: true });\n\n// Search and get highlights\nconst searchAndHighlightsResults = await exa.searchAndContents(\"This is a Exa query:\", { highlights: true });\n\n// Search and get contents with contents options\nconst searchAndCustomContentsResults = await exa.searchAndContents(\"This is a Exa query:\", {\n  text: { includeHtmlTags: true, maxCharacters: 1000 },\n  highlights: { highlightsPerUrl: 2, numSentences: 1, query: \"This is the highlight query:\" }\n});\n\n// Find similar documents\nconst similarResults = await exa.findSimilar(\"https://example.com\");\n\n// Find similar excluding source domain\nconst similarExcludingSourceResults = await exa.findSimilar(\"https://example.com\", { excludeSourceDomain: true });\n\n// Find similar with contents\nconst similarWithContentsResults = await exa.findSimilarAndContents(\"https://example.com\", { text: true, highlights: true });\n\n// Get text contents\nconst textContentsResults = await exa.getContents([\"urls\"], { text: true });\n\n// Get highlights\nconst highlightsContentsResults = await exa.getContents([\"urls\"], { highlights: true });\n\n// Get contents with contents options\nconst customContentsResults = await exa.getContents([\"urls\"], {\n  text: { includeHtmlTags: true, maxCharacters: 1000 },\n  highlights: { highlightsPerUrl: 2, numSentences: 1, query: \"This is the highlight query:\" }\n});\n\n// Get an answer to a question\nconst answerResult = await exa.answer(\"What is the population of New York City?\");\n\n// Get answer with citation contents and use the exa-pro model\nconst answerWithTextResults = await exa.answer(\"What is the population of New York City?\", {\n  text: true,\n  model: \"exa-pro\"\n});\n\n// Get an answer with streaming\nfor await (const chunk of exa.streamAnswer(\"What is the population of New York City?\")) {\n  if (chunk.content) {\n    process.stdout.write(chunk.content);\n  }\n  if (chunk.citations) {\n    console.log(\"\\nCitations:\", chunk.citations);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Exa Client\nDESCRIPTION: Creates a new instance of the Exa client using an API key.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Exa from \"exa-js\"\n\nconst exa = new Exa(process.env.EXA_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Exa Search Example\nDESCRIPTION: Example of using the search endpoint with various filters including domain and date restrictions.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/README.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await exa.search('funny article about tech culture', {\n  numResults: 5,\n  includeDomains: ['nytimes.com', 'wsj.com'], \n  startPublishedDate: '2023-06-12'\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document Contents\nDESCRIPTION: Example of using the getContents endpoint to fetch document contents by their IDs.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/README.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await exa.getContents(['8U71IlQ5DUTdsZFherhhYA', 'X3wd0PbJmAvhu_DQjDKA7A']);\n```\n\n----------------------------------------\n\nTITLE: Getting Answers with Citations\nDESCRIPTION: Example of using the answer endpoint to generate answers with source citations.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/README.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await exa.answer('What is the population of New York City?', {\n  text: true\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Similar Content\nDESCRIPTION: Example of using the findSimilar endpoint to locate content similar to a given URL.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/README.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await exa.findSimilar('https://waitbutwhy.com/2014/05/fermi-paradox.html', {\n  numResults: 10\n});\n```\n\n----------------------------------------\n\nTITLE: Streaming Answers\nDESCRIPTION: Examples of using the streamAnswer endpoint to receive real-time answer generation with citations.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/README.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Basic streaming example\nfor await (const chunk of exa.streamAnswer(\"What is quantum computing?\")) {\n  if (chunk.content) {\n    process.stdout.write(chunk.content);\n  }\n  if (chunk.citations) {\n    console.log(\"\\nCitations:\", chunk.citations);\n  }\n}\n\nfor await (const chunk of exa.streamAnswer(\"What is quantum computing?\", { text: true })) {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Research Pipeline in TypeScript\nDESCRIPTION: This function combines all the previous steps to create a complete research pipeline. It takes a topic as input and returns a synthesized research report.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/examples/researcher/researcher.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nasync function researcher(topic){\n    const searchType = await decideSearchType(topic);\n    const searchQueries = await generateSearchQueries(topic, 3, searchType);\n    console.log(searchQueries);\n    const searchResults = await getSearchResults(searchQueries, searchType);\n    console.log(searchResults[0]);\n    const searchContents = await getPageContents(searchResults);\n    console.log(searchContents[0]);\n    const report = await synthesizeReport(topic, searchContents);\n    return report;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Exa and OpenAI Clients in TypeScript/JavaScript\nDESCRIPTION: This snippet sets up the Exa and OpenAI clients by importing the necessary libraries and initializing them with API keys. It provides options for both Deno and NodeJS environments.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/examples/researcher/researcher.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Deno imports\nimport Exa from 'npm:exa-js';\nimport OpenAI from 'npm:openai';\n\n// NodeJS imports\n//import Exa from 'exa-js';\n//import OpenAI from 'openai';\n\n\nconst EXA_API_KEY = // insert or load your API key here\nconst OPENAI_API_KEY = // insert or load your API key here\n\nconst exa = new Exa(EXA_API_KEY);\nconst openai = new OpenAI({ apiKey: OPENAI_API_KEY });\n```\n\n----------------------------------------\n\nTITLE: Performing Exa Search and Retrieving Results in TypeScript\nDESCRIPTION: This function uses Exa to perform searches based on generated queries. It supports both neural and keyword search types and returns a specified number of results per query.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/examples/researcher/researcher.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getSearchResults(queries, type, linksPerQuery=2){\n    let results = [];\n    for (const query of queries){\n        const searchResponse = await exa.search(query, { type, numResults: linksPerQuery, useAutoprompt: false });\n        results.push(...searchResponse.results);\n    }\n    return results;\n}\n```\n\n----------------------------------------\n\nTITLE: Synthesizing Research Report with LLM in TypeScript\nDESCRIPTION: This function uses an LLM to generate a research report based on the retrieved web content. It formats the input data and includes citations in the report.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/examples/researcher/researcher.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nasync function synthesizeReport(topic, searchContents, contentSlice = 750){\n    const inputData = searchContents.map(item => `--START ITEM--\\nURL: ${item.url}\\nCONTENT: ${item.extract.slice(0, contentSlice)}\\n--END ITEM--\\n`).join('');\n    return await getLLMResponse({\n        system: 'You are a helpful research assistant. Write a report according to the user\\'s instructions.',\n        user: 'Input Data:\\n' + inputData + `Write a two paragraph research report about ${topic} based on the provided information. Include as many sources as possible. Provide citations in the text using footnote notation ([#]). First provide the report, followed by a single \"References\" section that lists all the URLs used, in the format [#] <url>.`,\n        //model: 'gpt-4' //want a better report? use gpt-4\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Search Queries with LLM in TypeScript\nDESCRIPTION: This function generates search queries for a given topic using an LLM. It supports both neural and keyword search types, and returns a specified number of queries.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/examples/researcher/researcher.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst userPrompt = searchType === 'neural' ? createNeuralQueryGenerationPrompt(topic, n) : createKeywordQueryGenerationPrompt(topic, n);\nconst completion = await getLLMResponse({\n    system: 'The user will ask you to help generate some search queries. Respond with only the suggested queries in plain text with no extra formatting, each on it\\'s own line.',\n    user: userPrompt,\n    temperature: 1\n});\nconst queries = completion.split('\\n').filter(s => s.trim().length > 0).slice(0, n);\nreturn queries;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Web Page Contents with Exa in TypeScript\nDESCRIPTION: This function fetches the contents of web pages from search results using Exa's getContents method.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/examples/researcher/researcher.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getPageContents(searchResults){\n    const contentsResponse = await exa.getContents(searchResults);\n    return contentsResponse.contents;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Keyword Search Queries in TypeScript\nDESCRIPTION: This function creates a prompt for the LLM to generate keyword search queries for a given topic. It instructs the LLM to create short, Google-like queries suitable for research purposes.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/examples/researcher/researcher.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createKeywordQueryGenerationPrompt(topic, n){\n    return `I'm writing a research report on ${topic} and need help coming up with Google keyword search queries.\nGoogle keyword searches should just be a few words long. It should not be a complete sentence.\nPlease generate a diverse list of ${n} Google keyword search queries that would be useful for writing a research report on ${topic}. Do not add any formatting or numbering to the queries.`\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Neural Search Queries for Exa in TypeScript\nDESCRIPTION: This function creates a prompt for the LLM to generate neural search queries for Exa. It explains the nature of Exa's neural search and instructs the LLM to create queries that mimic how people recommend content on the internet.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/examples/researcher/researcher.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createNeuralQueryGenerationPrompt(topic, n){\n    return `I'm writing a research report on ${topic} and need help coming up with Exa keyword search queries.\nExa is a fully neural search engine that uses an embeddings based approach to search. Exa was trained on how people refer to content on the internet. The model is trained given the description to predict the link. For example, if someone tweets \"This is an amazing, scientific article about Roman architecture: <link>\", then our model is trained given the description to predict the link, and it is able to beautifully and super strongly learn associations between descriptions and the nature of the content (style, tone, entity type, etc) after being trained on many many examples. Because Exa was trained on examples of how people talk about links on the Internet, the actual Exa queries must actually be formed as if they are content recommendations that someone would make on the Internet where a highly relevant link would naturally follow the recommendation, such as the example shown above.\nExa neural search queries should be phrased like a person on the Internet indicating a webpage to a friend by describing its contents. It should end in a colon :.\nPlease generate a diverse list of ${n} Exa neural search queries for informative and trustworthy sources useful for writing a research report on ${topic}. Do not add any quotations or numbering to the queries.`\n}\n```\n\n----------------------------------------\n\nTITLE: Deciding Search Type for Exa Researcher in TypeScript\nDESCRIPTION: This function uses the OpenAI API to decide whether to use keyword or neural search for a given research topic. It provides an explanation of the search types and prompts the LLM to make a decision based on the topic.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/examples/researcher/researcher.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function decideSearchType(topic, choiceNames = ['neural', 'keyword']){\n    let userMessage = 'Decide whether to use (1) or (2) search for the provided research topic. Output your choice in a single word: either \"(1)\" or \"(2)\". Here is a guide that will help you choose:\\n';\n    userMessage += SEARCH_TYPE_EXPLANATION;\n    userMessage += `Topic: ${topic}\\n`;\n    userMessage += `Search type: `;\n    userMessage = userMessage.replaceAll('(1)', choiceNames[0]).replaceAll('(2)', choiceNames[1]);\n\n    const response = await getLLMResponse({\n        system: 'You will be asked to make a choice between two options. Answer with your choice in a single word.',\n        user: userMessage,\n        temperature: 0\n    });\n    const useKeyword = response.trim().toLowerCase().startsWith(choiceNames[1].toLowerCase());\n    return useKeyword ? 'keyword' : 'neural';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Wrapper Function for OpenAI API Calls in TypeScript\nDESCRIPTION: This function simplifies interactions with the OpenAI API by providing a wrapper that takes system and user messages as input and returns the LLM's response as a string. It uses the GPT-3.5-turbo model by default.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/examples/researcher/researcher.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getLLMResponse({system = 'You are a helpful assistant.', user = '', temperature = 1, model = 'gpt-3.5-turbo'}){\n    const completion = await openai.chat.completions.create({\n        model,\n        temperature,\n        messages: [\n            {'role': 'system', 'content': system},\n            {'role': 'user', 'content': user},\n        ]\n    });\n    return completion.choices[0].message.content;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Build and Test Commands for Exa-JS\nDESCRIPTION: Various npm commands for building, testing, and generating documentation for the Exa-JS project. These commands cover different build scenarios, running all tests or a single test, and generating project documentation.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/CLAUDE.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm run build-fast\nnpm run test\nnpx vitest run test/path/to/test.ts\nnpm run generate-docs\n```\n\n----------------------------------------\n\nTITLE: Installing Exa JavaScript SDK\nDESCRIPTION: Command to install the exa-js package using npm package manager.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install exa-js\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with Various Package Managers\nDESCRIPTION: Commands to start the Next.js development server using npm, yarn, pnpm, or bun. After running any of these commands, the development server will be available at http://localhost:3000.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/examples/next/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for React TypeScript Project\nDESCRIPTION: This snippet shows how to configure the top-level parserOptions in ESLint for a React TypeScript project. It sets the ECMAScript version, source type, and specifies the TypeScript configuration files to use.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/examples/vite/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n   parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json'],\n    tsconfigRootDir: __dirname,\n   },\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for JavaScript File\nDESCRIPTION: Command to install necessary SDKs using npm before running the researcher.mjs file.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/examples/researcher/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Researcher File\nDESCRIPTION: Command to execute the researcher.mjs JavaScript file using Node.js after installing dependencies.\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/examples/researcher/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode researcher.mjs\n```\n\n----------------------------------------\n\nTITLE: JSON Data Structure for Xyzzy Wikipedia Reference\nDESCRIPTION: JSON object containing metadata and content extract from Wikipedia article about Xyzzy computing term\nSOURCE: https://github.com/exa-labs/exa-js/blob/master/examples/researcher/researcher.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n      url: \"https://en.wikipedia.org/wiki/Xyzzy_(computing)\",\n      author: null,\n      id: \"ac05e07a-722a-4de5-afc8-856c8192c5d2\"\n    }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n      id: \"ac05e07a-722a-4de5-afc8-856c8192c5d2\",\n      url: \"https://en.wikipedia.org/wiki/Xyzzy_(computing)\",\n      title: \"Xyzzy (computing)\",\n      author: null,\n      extract: \"<div><div>\\n\" +\n        \"<p>From Wikipedia, the free encyclopedia</p>\\n\" +\n        \"</div><div>\\n\" +\n        '<p>In <a href=\"https://en.wikipe'... 10626 more characters\n    }\n```"
  }
]