[
  {
    "owner": "modiimedia",
    "repo": "arri",
    "content": "TITLE: Initializing Arri Client (TS)\nDESCRIPTION: Initializes the generated Arri client with a base URL and optional configuration options such as headers, error handling, request options (retry, timeout, etc.), and request/response hooks.  'MyClient' must be imported from the generated file. Procedures can override the global request options.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-codegen/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// This will match whatever you put in the arri config\nimport { MyClient } from './myClient.g';\n\nconst client = new MyClient({\n    // only required field\n    baseUrl: 'https://example.com',\n\n    // everything below is optional\n    headers: () => {\n        return {\n            Authorization: '<some-token>',\n        };\n    },\n    onError: (err) => {},\n    options: {\n        retry: 4,\n        retryDelay: 200,\n        retryStatusCodes: [400, 403, 500, 501],\n        onRequest: (ctx) => {},\n        onRequestError: (ctx) => {},\n        onResponse: (ctx) => {},\n        onResponseError: (ctx) => {},\n        signal: undefined, // abortcontroller signal\n        timeout: 200,\n    },\n});\n\nawait client.myProcedure({ foo: 'foo' });\n\n// individual procedures can also override the global request options\nawait client.myProcedure({ foo: 'foo' }, { timeout: 400 });\n// be aware that these options are not merged with the global request options so you will have to\n// re-specify every hook if you only want to change one thing\n```\n\n----------------------------------------\n\nTITLE: Quickstart using Arri CLI (npm)\nDESCRIPTION: This snippet shows how to quickly initialize an Arri project using the Arri CLI with npm. It includes commands to create a new project, navigate to the project directory, install dependencies, and start the development server.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpx arri init [project-name]\ncd [project-name]\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Arri Generated Types (TS)\nDESCRIPTION: Imports generated types and their associated serializer/parser helpers from the generated code. Types match the ID defined in the schema, and helpers are prefixed with `$$`. Requires the Arri Typescript client to be generated.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-codegen/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// import the user type and the user helper\nimport { type User, $$User } from './myClient.g';\n\nconst bob: User = {\n    // field\n};\n\n$$User.serialize(bob); // outputs valid JSON\n$$User.parse('<some-json-string>'); // outputs a User\n```\n\n----------------------------------------\n\nTITLE: Arri Model and RPC Definition (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates defining Arri models (`UserParams`, `User`) and an RPC (`getUser`) using a schema builder approach. The models define the structure of the input parameters and the response. The RPC definition links the models to a handler function.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/implementing-an-arri-server.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Arri Models\nconst UserParams = a.object(\"UserParams\", {\n    userId: a.string(),\n});\nconst User = a.object(\"User\", {\n    id: a.string(),\n    name: a.string(),\n});\n\n// RPC\nexport const getUser = defineRpc({\n    params: UserParams,\n    response: User,\n    handler({ params }) {\n        // some logic to get the user and return it\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Initialize Arri client (Swift)\nDESCRIPTION: This code shows how to initialize the generated Arri client in Swift. It creates an instance of the `MyClient` struct with a base URL, a request delegate, and headers. An optional error handler can also be provided. It also shows how to initialize a service if you have procedures grouped under it.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/swift/swift-codegen/README.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet client = MyClient(\n    baseURL: \"https://example.com\",\n    delegate: DefaultRequestDelegate(),\n    headers: {\n        var headers: Dictionary<String, String> = Dictionary()\n        return headers\n    },\n    // optional\n    onError: { err in\n        // do something\n    }\n)\n\nawait client.myProcedure()\n```\n\n----------------------------------------\n\nTITLE: File-Based Routing Structure\nDESCRIPTION: This snippet illustrates the file-based routing structure in Arri. Files ending with `.rpc.ts` within the `./procedures` directory are automatically registered as RPC procedures.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_9\n\nLANGUAGE: fs\nCODE:\n```\n|-- src\n   |-- procedures\n      |-- sayHello.rpc.ts // becomes sayHello()\n      |-- users\n          |-- getUser.rpc.ts // becomes users.getUser()\n          |-- updateUser.rpc.ts // becomes users.updateUser()\n```\n\n----------------------------------------\n\nTITLE: Initializing the Arri Kotlin Client\nDESCRIPTION: This Kotlin code initializes the generated Arri client, including setting up an HttpClient, providing a base URL, and defining request headers. It also demonstrates calling a procedure.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/kotlin/kotlin-codegen/README.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() {\n    // create a Ktor HTTP client\n    val httpClient = HttpClient() {\n        install(HttpTimeout)\n    }\n    // initialize your generated client and pass it the httpClient\n    // the client name will match whatever options you passed into your arri config\n    val client = MyClient(\n        httpClient = httpClient,\n        baseUrl = \"https://example.com\",\n        // a function that returns a mutable map of headers\n        // this function will run before every request. Or before every reconnection in the case of SSE\n        headers = {\n            mutableMapOf(Pair(\"x-example-header\", \"<some-header-value>\"))\n        }\n    )\n    runBlocking {\n        client.someProcedure()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding to RPC Context\nDESCRIPTION: This snippet demonstrates how to add values to the RPC context using middleware. It adds a `user` object to the context, making it available in RPC handlers.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst authMiddleware = defineMiddleware(async (event) => {\n    // assume you did something to get the user from the request\n    event.context.user = {\n        id: 1,\n        name: 'John Doe',\n        email: 'johndoe@gmail.com',\n    };\n});\n\napp.rpc('sayHello', {\n    params: undefined,\n    response: a.object({\n        message: a.string(),\n    }),\n    // user is available here\n    handler({ user }) {\n        return {\n            message: `Hello ${user.name}`,\n        };\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Arri Go Server Example\nDESCRIPTION: This example demonstrates the basic setup of an Arri server in Go. It includes defining a custom event type, creating an Arri app, registering procedures, and running the app on a specified port. It showcases how to define RPC input and output structs and how to handle requests within the procedures.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"github.com/modiimedia/arri\"\n)\n\n// this is the type that will be passed around to every procedure\n// it must implement the `arri.Event` interface\n// if you don't want to define a custom event you can use `arri.DefaultEvent` and `arri.CreateDefaultEvent()` instead\ntype MyCustomEvent struct {\n    r *http.Request\n    w http.ResponseWriter\n}\nfunc (e MyCustomEvent) Request() *http.Request {\n    return e.r\n}\nfunc (e MyCustomEvent) Writer() http.ResponseWriter {\n\treturn e.writer\n}\n\nfunc main() {\n    // creates a CLI app that accepts parameters for outputting an Arri app definition\n\tapp := arri.NewApp(\n\t\thttp.DefaultServeMux\n\t\tarri.AppOptions[MyCustomEvent]{},\n        // function to create your custom Event type using the incoming request\n\t\tfunc(w http.ResponseWriter, r *http.Request) (*MyCustomEvent, arri.RpcError) {\n            return &MyCustomEvent{\n                r: r,\n                w: w,\n            }, nil\n        },\n\t)\n\n    // register procedures\n    arri.Rpc(&app, SayHello, arri.RpcOptions{})\n    arri.Rpc(&app, SayGoodbye, arri.RpcOptions{})\n\n    // run the app on port 3000\n    // It's\n\terr := app.Run(arri.RunOptions{Port: 3000})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn\n\t}\n}\n\n// Procedure inputs and outputs must be structs\ntype GreetingParams struct { Name string }\ntype GreetingResponse struct { Message string }\n\n// RPCs take two inputs and have two outputs\n//\n// Inputs:\n// The first input will be registered as the RPC params. This is what clients will send to the server.\n// The second input will be whatever type you have defined to be the Event type. In this case it's \"MyCustomEvent\"\n//\n// Outputs:\n// The first output will be the OK response sent back to the client\n// The second output will be the Error response sent back to the client\nfunc SayHello(params GreetingParams, event MyCustomEvent) (GreetingResponse, arri.RpcError) {\n    return GreetingResponse{ Message: \"Hello \" + params.name }, nil\n}\n\nfunc SayGoodbye(params GreetingParams, event MyCustomEvent) (GreetingResponse, arri.RpcError) {\n    return GreetingResponse{ Message: \"Goodbye \" + params.name }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Running Arri Codegen Command\nDESCRIPTION: These commands run the code generators defined in the Arri configuration file against an Arri App Definition. The app definition can be a TypeScript, JavaScript, or JSON file, or an HTTP endpoint serving a JSON definition. The `arri codegen` command generates type-safe clients based on the app definition.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tooling/cli/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# run generators from an app definition file\n# app definition files can be TS, JS, or JSON\narri codegen AppDefinition.ts\narri codegen AppDefinition.json\n\n# run generators from an app definition JSON http endpoint\narri codegen https://example.com/__definition\n```\n\n----------------------------------------\n\nTITLE: Arri App Entry File (./src/app.ts)\nDESCRIPTION: This snippet demonstrates the basic structure of an Arri app entry file. It imports `ArriApp`, creates an instance, and exports it as the default export.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/app.ts\nimport { ArriApp } from 'arri';\n\nconst app = new ArriApp();\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Basic Arri Schema Example\nDESCRIPTION: This example demonstrates basic usage of Arri Schema for defining a User object with id and name properties. It showcases parsing, validation, serialization, and JIT compilation for improved performance. The example relies on the @arrirpc/schema library.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_2\n\nLANGUAGE: Typescript\nCODE:\n```\nimport { a } from '@arrirpc/schema';\n\nconst User = a.object({\n    id: a.string(),\n    name: a.string(),\n});\n\ntype User = a.infer<typeof User>;\n\n// returns ResultSuccess<User>\na.parse(User, `{\"id\": \"1\", \"name\": \"John Doe\"}`);\n// returns ResultFailure\na.parse(User, `{\"id\": \"1\", \"name\": null}`);\n\n// returns true\na.validate(User, { id: '1', name: 'John Doe' });\n// returns false\na.validate(User, { id: '1', name: null });\n\n// outputs valid json\na.serialize(User, { id: '1', name: 'John Doe' });\n\n// JIT compiled validator (faster but server-side only)\nconst $$User = a.compile(User);\n$$User.validate({ id: '1', name: 'John Doe' });\n$$User.parse(`{\"id\": \"1\", \"name\": \"John Doe\"}`);\n$$User.serialize({ id: '1', name: 'John Doe' });\n```\n\n----------------------------------------\n\nTITLE: Example .rpc.ts file\nDESCRIPTION: This snippet demonstrates the structure of a `.rpc.ts` file, which is used to define an Arri RPC procedure. It uses `defineRpc` to define parameters, response, and a handler function.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/users/getUser.rpc.ts\nimport { defineRpc } from '@arrirpc/server';\nimport { a } from '@arrirpc/schema';\n\nexport default defineRpc({\n    params: a.object({\n        userId: a.string(),\n    }),\n    response: a.object({\n        id: a.string(),\n        name: a.string(),\n        createdAt: a.timestamp(),\n    }),\n    handler({ params }) {\n        // function body\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Arri Dart Client (Dart)\nDESCRIPTION: This Dart code demonstrates how to initialize the generated Arri client (`MyClient`). It imports the generated Dart file, creates an instance of the client with a base URL and headers function, and then calls a procedure on the client. The `headers` function is used to dynamically provide authentication headers.  The snippet shows the asynchronous nature of calling the client.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/dart/dart-codegen/README.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// this will match whatever you put in the arri config\nimport \"./my_client.g.dart\";\n\nmain() async {\n    final client = MyClient(\n        baseUrl: \"https://example.com\",\n        headers: () async {\n            return {\n                \"Authorization\": \"<some-token>\",\n            };\n        },\n    );\n    await client.myProcedure();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an RPC in an Arri App (TypeScript)\nDESCRIPTION: This TypeScript code shows how to register a defined RPC (`getUser`) with an Arri application instance. This links the RPC to the application, making it accessible via the specified transport and path.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/implementing-an-arri-server.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getUser } from \"./wherever\";\nconst app = new ArriApp();\n\napp.rpc(\"getUser\", getUser);\n```\n\n----------------------------------------\n\nTITLE: Manually Starting an Arri Server (typescript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to manually start an Arri server using Node.js's `http` module and the `ArriApp` class. It converts the Arri app to a Node.js listener and starts the server on a specified port. Note that the file-based router is only supported using the Arri CLI.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http';\nimport { ArriApp, toNodeListener } from '@arrirpc/server';\n\nconst app = new ArriApp();\n\ncreateServer(toNodeListener(app.h3App)).listen(process.env.PORT || 3000);\n```\n\n----------------------------------------\n\nTITLE: Registering Typescript Server Plugin in Arri Config\nDESCRIPTION: This snippet demonstrates how to register a TypeScript server plugin within the `arri.config.ts` file. It uses the `defineConfig` and `servers.tsServer` functions from the 'arri' package.  The configuration specifies the source directory (`srcDir`), entry point (`entry`), and port for the server. It assumes that the 'arri' package is installed and that the 'src/app.ts' file exists.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tooling/cli/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// arri.config.ts\nimport { defineConfig, servers } from 'arri';\n\n// registering the typescript server plugin\nexport default defineConfig({\n    server: servers.tsServer({\n        srcDir: 'src',\n        entry: 'app.ts',\n        port: 3000,\n    }),\n    generators: [\n        // client generators go here\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Procedures Object Example in Arri App Definition\nDESCRIPTION: This JSON snippet shows an example of the procedures object in the Arri app definition. It defines a `getUser` procedure invoked at `/get-user` using the `GET` method, taking `UserParams` as input and returning `User` as output. It also demonstrates nesting procedures under a service, like `users.getUser` and `users.createUser`.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_app_definition.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"getUser\": {\n        \"transport\": \"http\",\n        \"path\": \"/get-user\",\n        \"method\": \"get\",\n        \"params\": \"UserParams\",\n        \"response\": \"User\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Arri Schema with Metadata\nDESCRIPTION: This snippet shows how to define an Arri schema with metadata such as `id` and `description`. This metadata is used during cross-language code generation to provide type names and descriptions in generated code.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\n// metadata object\nconst BookSchema = a.object(\n    {\n        title: a.string(),\n        author: a.string(),\n        publishDate: a.timestamp(),\n    },\n    {\n        id: 'Book',\n        description: 'This is a book',\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Messages Example - Arri Go\nDESCRIPTION: This example shows how Go structs are used to define messages in Arri. It highlights the automatic conversion of Go structs to Arri Type Definitions (ATD) and how the TS client generator uses these definitions to create type-safe clients.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tId string\n\tName string\n\tIsAdmin bool\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Arri Schemas for Optimized Validation\nDESCRIPTION: This snippet demonstrates how to compile Arri schemas using `a.compile` for high-performance validation, parsing, coercion, and serialization. It showcases using the compiled schema methods and accessing the generated function bodies for code generation.  The `someInput` and `someJson` and `someObject` values are used as input to the functions.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = a.object({\n    id: a.string(),\n    email: a.nullable(a.string()),\n    created: a.timestamp(),\n});\n\nconst $$User = a.compile(User);\n\n$$User.validate(someInput);\n$$User.parse(someJson);\n$$User.parseUnsafe(someJson);\n$$User.coerce(someObject);\n$$User.coerceUnsafe(someObject);\n$$User.serialize({ id: '1', email: null, created: new Date() });\n$$User.serializeUnsafe({ id: '1', email: null, created: new Date() });\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// pass true to the second parameter to get access to the generated function bodies\nconst $$User = a.compile(User, true);\n\n$$User.compiledCode.validate; // the generated validation code\n$$User.compiledCode.parse; // the generated parsing code\n$$User.compiledCode.coerce; // the generated coercion code\n$$User.compiledCode.serialize; // the generated serialization code\n```\n\n----------------------------------------\n\nTITLE: Adding Typescript Client Generator to Arri Config (TS)\nDESCRIPTION: Configures the Arri Typescript client generator by specifying the output file path and client name. It also provides options for customizing the type prefix, root service, formatting options, and RPC procedure generation.  Requires the 'arri' package installed as a dependency.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-codegen/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// arri.config.ts\nimport { defineConfig, generators } from 'arri';\n\nexport default defineConfig({\n    generators: [\n        generators.typescriptClient({\n            clientName: 'MyClient',\n            outputFile: './client/src/myClient.g.ts',\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Validating with Schemas in TypeScript\nDESCRIPTION: This snippet showcases the usage of `a.validate()` to ensure that the input matches the defined Arri schema. This also acts as a type guard, allowing for intellisense support.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = a.object({\n    id: a.string(),\n    name: a.string(),\n});\na.validate(User, true); // false\na.validate(User, { id: '1', name: 'john doe' }); // true\n\nif (a.validate(User, someInput)) {\n    console.log(someInput.id); // intellisense works here\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts Configuration\nDESCRIPTION: This snippet shows how to configure the `package.json` file with npm scripts for development and building. It defines the `dev` and `build` scripts using the `arri` command-line tool.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"my-arri-app\",\n    \"type\": \"module\",\n    \"scripts\": {\n        \"dev\": \"arri dev\",\n        \"build\": \"arri build\"\n    },\n    \"dependencies\": {\n        ...\n    },\n    \"devDependencies\": {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Non-RPC Routes (App Instance)\nDESCRIPTION: This snippet demonstrates how to add non-RPC routes to an Arri app using the `route` method. It creates a simple GET endpoint that returns \"hello world\".\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// using the app instance\nconst app = new ArriApp();\napp.route({\n    method: \"get\",\n    path: \"/hello-world\",\n    handler(event) {\n        return \"hello world\";\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Client Generators\nDESCRIPTION: This snippet demonstrates how to add client generators to the Arri configuration. It includes examples for Typescript, Dart, and Kotlin clients.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// arri.config.ts\nimport { defineConfig, servers, generators } from \"arri\";\n\nexport default defineConfig({\n    server: servers.tsServer(),\n    generators: [\n        generators.typescriptClient({...}),\n        generators.dartClient({...}),\n        generators.kotlinClient({...})\n        generators.someGenerator({...})\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Quickstart Script - Arri Go Server\nDESCRIPTION: These commands use the Arri CLI to initialize a basic Go server. It demonstrates how to create a new Arri project, navigate to the project directory, install dependencies, and start the development server using either npm or pnpm.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpx arri init [project-name]\ncd [project-name]\nnpm install\nnpm run dev\n\n# pnpm\npnpm dlx arri init [project-name]\ncd [project-name]\npnpm install\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware\nDESCRIPTION: This snippet demonstrates how to add middleware to an Arri app using the `use` method. It logs new requests.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new ArriApp();\n\nconst requestLoggerMiddleware = defineMiddleware((event) => {\n    console.log(`new request at ${event.path}`);\n});\n\napp.use(requestLoggerMiddleware);\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Generators in Arri Config\nDESCRIPTION: This snippet demonstrates how to configure code generators in the `arri.config.ts` file. It uses the `defineConfig` and `generators` functions from the 'arri' package to define Dart and TypeScript client generators. Each generator specifies the client name and output path.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tooling/cli/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// arri.config.ts\nimport { defineConfig, generators } from 'arri';\n\nexport default defineConfig({\n    generators: [\n        generators.dartClient({\n            clientName: 'Client',\n            outputPath: '<some-output-file>',\n        }),\n        generators.typescriptClient({\n            clientName: 'Client',\n            outputPath: '<some-output-file>',\n        }),\n        // etc...\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Validating Objects in TypeScript\nDESCRIPTION: This snippet illustrates how to define an object schema using `a.object()` in TypeScript, specifying the types of each property.  It also demonstrates inferring the object type and validating instances against the schema.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = a.object({\n    id: a.string(),\n    email: a.string(),\n    created: a.timestamp(),\n});\ntype User = a.infer<typeof User>; // { id: string; email: string; created: Date; }\n\na.validate(User, {\n    id: '1',\n    email: 'johndoe@example.com',\n    created: new Date(),\n}); // true\na.validate(User, {\n    id: '1',\n    email: null,\n    created: new Date(),\n}); // false\n```\n\n----------------------------------------\n\nTITLE: Arri Project Structure\nDESCRIPTION: This snippet shows the suggested basic directory structure for an Arri project.  It emphasizes the location of config files, source code, and generated outputs.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_4\n\nLANGUAGE: fs\nCODE:\n```\n|-- project-dir\n    |-- .arri // temp files go here\n    |-- .output // final bundle goes here\n    |-- src\n        |-- procedures // .rpc.ts files go here\n        |-- app.ts\n    |-- arri.config.ts\n    |-- package.json\n    |-- tsconfig.json\n|\n```\n\n----------------------------------------\n\nTITLE: Adding Non-RPC Routes (Sub-Router with Prefix)\nDESCRIPTION: This snippet demonstrates how to add non-RPC routes to an Arri app using a sub-router with a route prefix.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// sup-routers can also specify a route prefix\nconst router = new ArriRouter(\"/v1\")\nrouter.route({\n    method: \"get\",\n    path: \"/hello-world\", // this will become /v1/hello-world\n    handler(event) {\n        return \"hello world\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Arri Schema Definition and Export\nDESCRIPTION: This Typescript snippet demonstrates how to define an Arri schema for a User object and export it using `createAppDefinition`. The schema includes fields for id, name, email, createdAt, and updatedAt, with modifiers such as optional and nullable.  This allows the Arri CLI to process and generate code based on these definitions.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_7\n\nLANGUAGE: Typescript\nCODE:\n```\n// definitions.ts\nimport { createAppDefinition } from 'arri';\nimport { a } from '@arrirpc/schema';\n\nconst User = a.object('User', {\n    id: a.string(),\n    name: a.optional(string()),\n    email: a.nullable(a.string()),\n    createdAt: a.timestamp({ description: 'When the user was created' }),\n    updatedAt: a.timestamp(),\n});\n\nexport default createAppDefinition({\n    definitions: {\n        User,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing File-Based Router\nDESCRIPTION: This snippet shows how to customize the file-based router. It uses the `procedureDir` and `procedureGlobPatterns` options to change the directory to look for procedures and the file name glob pattern for finding RPCs.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n    servers: servers.tsServer({\n        procedureDir: 'procedures', // change which directory to look for procedures (This is relative to the srcDir)\n        procedureGlobPatterns: ['**/*.rpc.ts'], // change the file name glob pattern for finding rpcs\n    }),\n    // rest of config\n});\n```\n\n----------------------------------------\n\nTITLE: Example Event Stream RPC\nDESCRIPTION: This snippet provides an example of creating an event stream procedure using `defineEventStreamRpc`. It sends messages to the client at a fixed interval and cleans up resources when the client disconnects.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// procedures/users/watchUser.rpc.ts\nexport default defineEventStreamRpc({\n    params: a.object({\n        userId: a.string(),\n    }),\n    response: a.object({\n        id: a.string(),\n        name: a.string(),\n        createdAt: a.timestamp(),\n        updatedAt: a.timestamp(),\n    }),\n    handler({ params, stream }) {\n        // initialize the stream and send it to the client\n        stream.send();\n\n        // send a message every second\n        const interval = setInterval(async () => {\n            await stream.push({\n                id: '1',\n                name: 'John Doe',\n                createdAt: new Date(),\n                updatedAt: new Date(),\n            });\n        }, 1000);\n\n        // cleanup when the client disconnects\n        stream.on('close', () => {\n            clearInterval(interval);\n        });\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Validation Errors with Arri\nDESCRIPTION: This snippet demonstrates how to use `a.errors()` to get all validation errors of a given input. It defines a `User` schema and then calls `a.errors()` with an invalid input to showcase how the errors are structured.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = a.object({\n    id: a.string(),\n    date: a.timestamp(),\n});\n\na.errors(User, { id: 1, date: 'hello world' });\n/**\n * [\n *   {\n *     instancePath: \"/id\",\n *     schemaPath: \"/properties/id/type\",\n *     message: \"Expected string\",\n *   },\n *   {\n *     instancePath: \"/date\",\n *     schemaPath: \"/properties/id/type\",\n *     message: \"Expected instanceof Date\",\n *   }\n * ]\n *\n */\n```\n\n----------------------------------------\n\nTITLE: Initialize Arri Rust Client (Rust)\nDESCRIPTION: This snippet shows how to initialize the generated Arri Rust client with a configuration object. It sets up the HTTP client, base URL, and initial headers. It uses the `reqwest` crate for making HTTP requests and `HashMap` for storing headers. Requires `reqwest` and `HashMap` to be in scope.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/rust/rust-codegen/README.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet config = ArriClientConfig {\n    http_client: reqwest::Client::new(),\n    base_url: \"https://example.com\".to_string(),\n    headers: Hashmap::new(),\n};\nlet client = MyClient::create(config);\n\n// start calling procedures\nclient.my_procedure().await;\n```\n\n----------------------------------------\n\nTITLE: Defining and Validating Enums in TypeScript\nDESCRIPTION: This snippet demonstrates how to define an enum schema using `a.enumerator()` in TypeScript, infer the corresponding type, and validate values against the enum. The enum allows for a predefined list of accepted strings.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst Status = a.enumerator(['ACTIVE', 'INACTIVE', 'UNKNOWN']);\ntype Status = a.infer<typeof Status>; // \"ACTIVE\" | \"INACTIVE\" | \"UNKNOWN\";\n\na.validate(Status, 'BLAH'); // false\na.validate(Status, 'ACTIVE'); // true\n```\n\n----------------------------------------\n\nTITLE: Adding Non-RPC Routes (Sub-Router)\nDESCRIPTION: This snippet demonstrates how to add non-RPC routes to an Arri app using a sub-router. It creates a simple GET endpoint that returns \"hello world\".\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// using a sub-router\nconst app = new ArriApp();\nconst router = new ArriRouter();\nrouter.route({\n    method: \"get\",\n    path: \"/hello-world\",\n    handler(event) {\n        return \"hello world\",\n    }\n})\napp.use(router)\n```\n\n----------------------------------------\n\nTITLE: Configuring Arri with Dart Client Generator (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure the Arri Dart client generator within an `arri.config.ts` file. It imports necessary modules from 'arri', defines the client name, output file path, and generator options, specifying how the Dart client code will be generated based on the Arri configuration.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/dart/dart-codegen/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// arri.config.ts\nimport { defineConfig, generators } from 'arri';\n\nexport default defineConfig({\n    generators: [\n        generators.dartClient({\n            clientName: 'MyClient',\n            outputFile: './client/src/my_client.g.dart',\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Optional Modifier in TypeScript\nDESCRIPTION: This snippet demonstrates using `a.optional()` to make an object field optional. This allows the field to be omitted when creating instances of the object.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = a.object({\n    id: a.string(),\n    email: a.optional(a.string()),\n    date: a.timestamp();\n})\n\n/**\n * Resulting type\n * {\n *   id: string;\n *   email?: string | undefined;\n *   date: Date;\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Add Swift client generator to Arri config (TypeScript)\nDESCRIPTION: This code snippet shows how to add the Swift client generator to your Arri configuration file. It imports the necessary modules from 'arri' and defines a configuration object with a 'generators' array. The 'generators.swiftClient' function configures the Swift client generator with options such as 'clientName' and 'outputFile'.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/swift/swift-codegen/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// arri.config.ts\nimport { defineConfig, generators } from 'arri';\n\nexport default defineConfig({\n    generators: [\n        generators.swiftClient({\n            clientName: 'MyClient',\n            outputFile: './client/Sources/MyClient.g.swift',\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Arri Config Definition\nDESCRIPTION: This Typescript snippet shows how to define an Arri configuration file using the `defineConfig` function. It includes configuration for generating client code in Rust and Dart. This file is used by the Arri CLI to generate code in different languages.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_6\n\nLANGUAGE: Typescript\nCODE:\n```\nimport { defineConfig, generators } from 'arri';\n\nexport default defineConfig({\n    generators: [\n        // add your generators here\n        generators.rustClient({\n            // options\n        }),\n        generators.dartClient({\n            // options\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Schemas in TypeScript\nDESCRIPTION: Demonstrates using `a.extend()` to extend an object schema with properties from another object schema.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst A = a.object({\n    a: a.string(),\n    b: a.float32(),\n});\n// { a: string; b: number; }\n\nconst B = a.object({\n    c: a.timestamp(),\n});\n// { c: Date }\n\nconst C = a.extend(A, B);\n// { a: string; b: number; c: Date }\n```\n\n----------------------------------------\n\nTITLE: Arri Procedure Definition Example (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to define an Arri procedure, `users.getUser`, specifying the transport protocol (HTTP), method (POST), path, input parameters (`GetUserParams`), and response type (`User`).  The parameters will be passed through the request body as JSON.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/implementing-an-arri-server.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"users.getUser\": {\n        \"transport\": \"http\",\n        \"method\": \"post\",\n        \"path\": \"/users/get-user\",\n        \"params\": \"GetUserParams\",\n        \"response\": \"User\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON with Arri\nDESCRIPTION: This snippet demonstrates how to use `a.parse()` to parse a JSON string against an Arri schema. It includes error handling to check for parsing failures and access the parsed value if successful.  `jsonString` is assumed to be defined elsewhere.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = a.object({\n    id: a.string(),\n    name: a.string(),\n});\n\n// returns Result<User>\nconst result = a.parse(User, jsonString);\nif (result.success) {\n    // something when wrong with parsing\n    console.log(result.errors);\n} else {\n    // parsing was successful\n    console.log(result.value);\n}\n```\n\n----------------------------------------\n\nTITLE: Manual RPC Routing\nDESCRIPTION: This snippet shows how to manually register RPC procedures using the `rpc` method on an `ArriApp` instance or a `defineService` instance.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// using the app instance\nconst app = new ArriApp()\napp.rpc('sayHello',\n    defineRpc({...})\n);\n\n// defining a service\nconst app = new ArriApp();\nconst usersService = defineService(\"users\");\nusersService.rpc(\"getUser\", defineRpc({...}));\nusersService.rpc(\"createUser\", defineRpc({...}));\n\n// register the service on the app instance\napp.use(usersService);\n```\n\n----------------------------------------\n\nTITLE: Typescript App Definition (Typescript)\nDESCRIPTION: Example of creating an Arri app definition using Typescript with the `createAppDefinition` helper function. It defines the schema for request parameters (HelloParams) and the response (HelloResponse) using `@arrirpc/schema`, and then uses these schemas to define a procedure `sayHello` with HTTP transport.\nSOURCE: https://github.com/modiimedia/arri/blob/master/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// AppDefinition.ts\nimport { createAppDefinition } from 'arri';\nimport { a } from '@arrirpc/schema';\n\nconst HelloParams = a.object('HelloParams', {\n    message: a.string(),\n});\n\nconst HelloResponse = a.object('HelloResponse', {\n    message: a.string(),\n});\n\nexport default createAppDefinition({\n    procedures: {\n        sayHello: {\n            transport: 'http',\n            method: 'post',\n            path: '/say-hello',\n            params: HelloParams,\n            response: HelloResponse,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Omitting Properties from Schemas in TypeScript\nDESCRIPTION: Demonstrates using `a.omit()` to create a new object schema with specified properties removed from the original schema.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nconst A = a.object({\n    a: a.string(),\n    b: a.float32(),\n});\n// { a: string; b: number; }\n\nconst B = a.omit(A, ['a']);\n// { b: number; }\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Procedures - Arri Go\nDESCRIPTION: This snippet demonstrates how to create an HTTP procedure using Arri in Go. It shows the structure of the RPC function, including the input parameters and the event context, and how to register the function on the app instance using `arri.Rpc` and `arri.ScopedRpc`.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype GreetingParams struct {\n\tName string\n}\ntype GreetingResponse struct {\n\tMessage string\n}\n\nfunc SayHello(\n    params GreetingParams,\n    event arri.DefaultEvent,\n) (GreetingResponse, arri.RpcError) {\n\treturn GreetingResponse{Message: fmt.SprintF(\"Hello %s\", params.Name)}, nil\n}\n```\n\nLANGUAGE: go\nCODE:\n```\n// will create the following endpoint:\n// POST \"/say-hello\"\narri.Rpc(&app, SayHello, arri.RpcOptions{})\n\n// will create the following endpoint:\n// POST \"/greeter/say-hello\"\n// client generators will group this rpc under the \"greeter\" service\narri.ScopedRpc(&app, \"greeter\", SayHello, arri.RpcOptions{})\n```\n\n----------------------------------------\n\nTITLE: Registering Go Server Plugin in Arri Config\nDESCRIPTION: This snippet demonstrates how to register a Go server plugin within the `arri.config.ts` file. It uses the `defineConfig` and `servers.goServer` functions from the 'arri' package. It assumes that the 'arri' package is installed.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tooling/cli/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// registering the go server plugin\nexport default defineConfig({\n    server: servers.goServer({}),\n    generators: [\n        // client generators go here\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Event Stream Procedures - Arri Go\nDESCRIPTION: This example demonstrates creating an Event Stream RPC function using Arri in Go. It includes defining the necessary structs and utilizing the `arri.SseController` to push events to the client. It also shows how to handle connection closures using `controller.Done()`.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype GreetingParams struct {\n\tName string\n}\ntype GreetingResponse struct {\n\tMessage string\n}\n\n// send an event every second\nfunc StreamGreeting(\n\tparams GreetingParams,\n\tcontroller arri.SseController[GreetingResponse],\n\tcontext arri.DefaultContext,\n) arri.RpcError {\n\tt := time.NewTicker(time.Second)\n\tmsgCount = 0\n\tdefer t.Stop()\n\tfor {\n\t\tselect {\n\t\t\tcase <-t.C:\n\t\t\t\tmsgCount++\n\t\t\t\tcontroller.Push(GreetingResponse{Message: \"Hello \" + params.Name + \" \" + fmt.Sprint(msgCount)})\n\t\t\tcase <-controller.Done():\n\t\t\t\t// exit when the connection closes\n\t\t\t\treturn nil\n\t\t}\n\t}\n}\n```\n\nLANGUAGE: go\nCODE:\n```\n// creates the following endpoint:\n// POST /stream-greeting\narri.EventStreamRpc(&app, StreamGreeting, arri.RpcOptions{})\n\n// creates the following endpoint:\n// POST /greeter/stream-greeting\n// client generators will group this rpc under the \"greeter\" service\narri.ScopedEventStreamRpc(&app, \"greeter\", StreamGreeting, arri.RpcOptions{})\n```\n\n----------------------------------------\n\nTITLE: Installing Arri Schema with npm\nDESCRIPTION: This command installs the @arrirpc/schema package using npm. This allows you to use Arri Schema in your Typescript project for schema definition and validation.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# npm\nnpm install @arrirpc/schema\n```\n\n----------------------------------------\n\nTITLE: Serializing Data with Arri\nDESCRIPTION: This snippet demonstrates how to use `a.serialize()` to serialize data to a valid JSON string. It returns a `Result<string>`.  The example shows the creation of a `User` object and how it's serialized into a JSON string. No validation is performed.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = a.object({\n    id: a.string(),\n    name: a.string(),\n});\n\nconst result = a.serialize(User, { id: '1', name: 'john doe' });\nif (result.success) {\n    console.log(result.value);\n    // '{\"id\":\"1\",\"name\":\"john doe\"}''\n}\n```\n\n----------------------------------------\n\nTITLE: Using Typebox Adapter with Arri-RPC\nDESCRIPTION: This snippet demonstrates how to use the `typeboxAdapter` function to wrap a Typebox schema for use with Arri-RPC. The adapter makes Typebox schema definitions compatible with the Arri-RPC framework, allowing you to define params and responses with the Typebox's syntax and validation.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema-typebox-adapter/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// updateUser.rpc.ts\nimport { defineRpc } from '@arrirpc/server';\nimport { typeboxAdapter } from '@arrripc/typebox-adapter';\nimport { Type } from 'typebox';\n\nconst User = Type.Object(\n    {\n        id: Type.String(),\n        name: Type.String(),\n    },\n    {\n        $id: 'User',\n    },\n);\n\nexport default defineRpc({\n    params: typeboxAdapter(User),\n    response: typeboxAdapter(User),\n    handler({ params }) {\n        // typebox keys are now available\n        console.log(params.id);\n        return params;\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Calling Standard HTTP Procedures in Kotlin\nDESCRIPTION: This Kotlin code demonstrates calling HTTP procedures generated by Arri, both with and without parameters.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/kotlin/kotlin-codegen/README.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nrunBlocking {\n    // procedure with no parameters\n    val getUsersResponse = myClient.users.getUsers()\n\n    // procedure with parameters\n    val getUserResponse = myClient.users.getUser(GetUserParams(userId = \"12345\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Event Stream Procedures in Kotlin\nDESCRIPTION: This Kotlin code demonstrates how to use event stream procedures generated by Arri, including handling data, open, request error, response error and close events.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/kotlin/kotlin-codegen/README.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nrunBlocking {\n    myClient.users.watchUserChanges(\n        onData { message ->\n            println(\"New message: ${message}\")\n        },\n        onOpen {\n            println(\"Connection established\")\n        }\n        onRequestError { err ->\n            println(\"Error connecting to server: ${err}\")\n        },\n        onResponseError { err ->\n            println(\"Server returned an error: ${err.code} ${err.message}\")\n        },\n        onClose {\n            println(\"Connection closed\")\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Arri CLI Commands (bash)\nDESCRIPTION: This bash snippet shows the commonly used Arri CLI commands, including commands for starting the dev server (`arri dev`), creating a production build (`arri build`), initializing a new project (`arri init`), and running code generation (`arri codegen`).\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n# start the dev server\narri dev [flags]\n\n# create a production build\narri build [flags]\n\n# create a new project\narri init [dir]\n\n# run codegen\narri codegen [path-to-definition-file]\n```\n\n----------------------------------------\n\nTITLE: Define Arri RPC Server Configuration in JSON\nDESCRIPTION: This JSON configuration defines the schema for an Arri RPC server. It includes the schema version, server information (name, description, version), procedures (with transport, method, path, parameters, and response definitions), and data type definitions (User, GetUserParams, CreateUserParams, WatchUserParams) with their properties.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_app_definition.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"schemaVersion\": \"0.0.7\",\n    \"info\": {\n        \"name\": \"My Arri Server\",\n        \"description\": \"This is a server I made using Arri RPC\",\n        \"version\": \"12\"\n    },\n    \"procedures\": {\n        \"users.getUser\": {\n            \"transport\": \"http\",\n            \"method\": \"get\",\n            \"path\": \"/users/get-user\",\n            \"params\": \"GetUserParams\",\n            \"response\": \"User\"\n        },\n        \"users.createUser\": {\n            \"transport\": \"http\",\n            \"method\": \"post\",\n            \"path\": \"/users/create-user\",\n            \"params\": \"CreateUserParams\",\n            \"response\": \"User\"\n        },\n        \"users.watchUser\": {\n            \"transport\": \"http\",\n            \"method\": \"post\",\n            \"path\": \"/users/watch-user\",\n            \"params\": \"WatchUserParams\",\n            \"response\": \"User\",\n            \"isEventStream\": true\n        }\n    },\n    \"definitions\": {\n        \"User\": {\n            \"properties\": {\n                \"id\": {\n                    \"type\": \"string\"\n                },\n                \"name\": {\n                    \"type\": \"string\"\n                },\n                \"createdAt\": {\n                    \"type\": \"timestamp\"\n                },\n                \"role\": {\n                    \"enum\": [\"STANDARD\", \"ADMIN\", \"MODERATOR\"],\n                    \"metadata\": {\n                        \"id\": \"UserRole\"\n                    }\n                }\n            }\n        },\n        \"GetUserParams\": {\n            \"properties\": {\n                \"userId\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"CreateUserParams\": {\n            \"properties\": {\n                \"name\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"optionalProperties\": {\n                \"role\": {\n                    \"enum\": [\"STANDARD\", \"ADMIN\", \"MODERATOR\"],\n                    \"metadata\": {\n                        \"id\": \"UserRole\"\n                    }\n                }\n            }\n        },\n        \"WatchUserParams\": {\n            \"properties\": {\n                \"userId\": {\n                    \"type\": \"string\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ArriClientModel protocol definition (Swift)\nDESCRIPTION: This code snippet defines the `ArriClientModel` protocol, which all generated structs, classes, and tagged unions conform to. It includes initializers for creating instances from JSON data and methods for converting instances to JSON and URL query parameters. The Equatable protocol enables comparing instances for equality.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/swift/swift-codegen/README.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol ArriClientModel: Equatable {\n    init()\n    init(json: JSON)\n    init(JSONString: String)\n    func toJSONString() -> String\n    func toURLQueryParts() -> [URLQueryItem]\n    func clone() -> Self\n}\n```\n\n----------------------------------------\n\nTITLE: Using Arri Struct Field Tags\nDESCRIPTION: This snippet demonstrates the use of Arri struct field tags for controlling serialization and adding documentation.  `key` tag specifies the serialized key name. `description` tag adds a description that becomes doc comments. `arri:\"deprecated\"` tag marks a field as deprecated.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ntype Foo struct {\n    // manually specify the serialized key name\n    Foo string `key:\"foo_foo\"`\n\n    // add a description which will become doc comments in the target client(s)\n    Bar string `description:\"this is a description\"`\n\n    // set this field as deprecated\n    Baz bool `arri:\"deprecated\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Server Plugin with Options (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates defining a server plugin with custom options using a wrapper function. This allows users to configure the plugin without passing CLI arguments, making the configuration more flexible.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/implementing-an-arri-server.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction myCustomServer(options: { port: number }) {\n    return defineServerConfig({...});\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Discriminated Unions with Arri\nDESCRIPTION: This snippet demonstrates how to define discriminated unions (tagged unions) in Go using Arri's conventions. It uses a root struct type (`Shape`) with fields that are pointers to structs (`Rectangle` and `Circle`), and the `discriminator` tag to specify the value of the `type` field during serialization.  Multiple valid variations are also demonstrated.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_20\n\nLANGUAGE: go\nCODE:\n```\ntype Shape struct {\n\tRectangle *Rectangle `discriminator:\"RECTANGLE\"`\n\tCircle *Circle `discriminator:\"CIRCLE\"`\n}\ntype Rectangle struct {\n\tWidth float32\n\tHeight float32\n}\ntype Circle struct {\n\tRadius float32\n}\n\n// The following are also valid\ntype Shape struct {\n\t*Rectangle `discriminator:\"RECTANGLE\"`\n\t*Circle `discriminator:\"CIRCLE\"`\n}\ntype Shape struct {\n\tRectangle struct{\n\t\tWidth float32\n\t\tHeight float32\n\t} `discriminator:\"RECTANGLE\"`\n\tCircle struct{\n\t\tRadius float32\n\t} `discriminator:\"CIRCLE\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Example File Structure (fs)\nDESCRIPTION: This snippet illustrates how file structure maps to API endpoints in Arri. Procedures in `.rpc.ts` files within directories are translated into POST endpoints based on their location.  This structure allows for an automatically derived API structure.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_24\n\nLANGUAGE: fs\nCODE:\n```\n|--src\n   |--procedures\n      |--getStatus.rpc.ts\n      |--users\n         |--getUser.rpc.ts\n         |--updateUser.rpc.ts\n```\n\n----------------------------------------\n\nTITLE: Arri Definition Schema Example (JSON)\nDESCRIPTION: This JSON snippet shows the structure of the `__definition.json` file generated by Arri. It includes sections for procedures and definitions, specifying transport, path, method, parameters, and response types for each procedure. Definitions use a superset of JSON Type Definition for models.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"procedures\": {\n        \"sayHello\": {\n            \"transport\": \"http\",\n            \"path\": \"/say-hello\",\n            \"method\": \"post\",\n            \"params\": \"SayHelloParams\",\n            \"response\": \"SayHelloResponse\"\n        }\n        // rest of procedures\n    },\n    \"definitions\": {\n        \"SayHelloParams\": {\n            \"properties\": {\n                \"name\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"SayHelloResponse\": {\n            \"properties\": {\n                \"message\": {\n                    \"type\": \"string\"\n                }\n            }\n        }\n        // rest of models\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Arri Schema Usage with @arrirpc/server\nDESCRIPTION: This snippet demonstrates how to integrate Arri Schema with @arrirpc/server to define and validate request parameters and response types for an RPC endpoint. It defines a simple RPC endpoint that accepts a name parameter and returns a greeting message. It relies on both `@arrirpc/schema` and `@arrirpc/server`.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_3\n\nLANGUAGE: Typescript\nCODE:\n```\nimport { a } from '@arrirpc/schema';\nimport { defineRpc } from '@arrirpc/server';\n\nexport default defineRpc({\n    params: a.object({\n        name: a.string(),\n    }),\n    response: a.object({\n        message: a.string(),\n    }),\n    handler({ params }) {\n        // can now access params.name here\n        return {\n            message: `Hello ${params.name}`,\n        };\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Update HTTP Headers in Arri Rust Client (Rust)\nDESCRIPTION: This snippet shows how to update the HTTP headers for the Arri Rust client.  The `update_headers()` function propagates changes to all nested subservices, but not to parent services. Requires `new_headers` to be a HashMap containing the new headers.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/rust/rust-codegen/README.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nclient.update_headers(new_headers);\n```\n\n----------------------------------------\n\nTITLE: Defining Arri Schema with ID Shorthand\nDESCRIPTION: This snippet demonstrates the shorthand syntax for defining IDs for objects, discriminators, and recursive types within Arri schemas. It simplifies the process of assigning IDs for generating concise type names.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\n// ID will be set to \"Book\"\nconst BookSchema = a.object('Book', {\n    title: a.string(),\n    author: a.string(),\n    publishDate: a.timestamp(),\n});\n\n// ID will be set to \"Message\"\nconst MessageSchema = a.discriminator('Message', 'type', {\n    TEXT: a.object({\n        userId: a.string(),\n        content: a.string(),\n    }),\n    IMAGE: a.object({\n        userId: a.string(),\n        imageUrl: a.string(),\n    }),\n});\n\n// ID will be set to \"BTree\"\nconst BinaryTreeSchema = a.recursive('BTree', (self) =>\n    a.object({\n        left: a.nullable(self),\n        right: a.nullable(self),\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Fields\nDESCRIPTION: This snippet demonstrates how to define optional fields using the `arri.Option` type. It creates a `User` struct with optional `Name` and `Email` fields. This indicates that these fields don't have to be present in the encoded JSON.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_29\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n    Id string\n    Name arri.Option[string]\n    Email arri.Option[string]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development and Building Arri Server\nDESCRIPTION: These commands initiate the Arri server in development mode and build it for production. `arri dev` automatically reruns code generators on hot-reload during development. `arri build` builds the server for production.  `arri build --skip-codegen` builds the server without running the code generators.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tooling/cli/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\narri dev\narri build\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Arri Service (TS)\nDESCRIPTION: Imports and initializes a specific Arri service from the generated client code.  This allows you to use only the procedures defined within a particular service. 'MyClientUsersService' must be imported from the generated file.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-codegen/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyClientUsersService } from './myClient.g';\n\nconst usersService = new MyClientUsersService({\n    baseUrl: 'https://example.com',\n    headers: () => {\n        return {\n            Authorization: '<some-token>',\n        };\n    },\n});\n\nusersService.someProcedure();\n```\n\n----------------------------------------\n\nTITLE: RPC Options Configuration - Arri Go\nDESCRIPTION: This code shows how to configure `RpcOptions` to customize procedure behavior, including specifying the HTTP method, URL path, function name in the generated client(s), a function description, and marking the procedure as deprecated.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\narri.Rpc(&app, SayHello, arri.RpcOptions{\n    // specify the HTTP method (default is POST)\n    Method: arri.HttpMethodGet,\n    // manually specify the url path\n    Path: \"/custom/url/path\",\n    // manually specify the function name in the generated client(s)\n    // (will use a camelCase version of the go function name by default)\n    Name: \"CustomFunctionName\"\n    // function description that will appear in the generated client(s)\n\tDescription: \"Some description\"\n    // mark procedure as deprecated in generated client(s)\n\tIsDeprecated: true\n})\n```\n\n----------------------------------------\n\nTITLE: Arri Configuration Setup in Typescript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure Arri to generate a Kotlin client. It defines the output file path and the client's name.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/kotlin/kotlin-codegen/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// arri.config.ts\nimport { defineConfig, generators } from 'arri';\n\nexport default defineConfig({\n    generators: [\n        generators.kotlinClient({\n            clientName: 'MyClient',\n            outputFile: './client/src/MyClient.g.kt',\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing H3 Utilities in Arri (typescript)\nDESCRIPTION: This TypeScript code demonstrates how to import and use H3 utilities within an Arri application. Specifically, it shows importing `getRequestIP` and `setResponseHeader` from `@arrirpc/server` for use in procedure handlers.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getRequestIP, setResponseHeader } from '@arrirpc/server';\n```\n\n----------------------------------------\n\nTITLE: Installing Arri Typescript Client Library (Bash)\nDESCRIPTION: Installs the Arri Typescript client library as a project dependency using npm or pnpm.  The version number should match the Arri CLI version.  This step is necessary to use the generated client code.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-codegen/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm i @arrirpc/client\n\n# pnpm\npnpm i --save @arrirpc/client\n```\n\n----------------------------------------\n\nTITLE: Coercing Data with Arri\nDESCRIPTION: This snippet demonstrates how to use `a.coerce()` to convert inputs to the correct type according to the defined Arri schema.  It returns a `Result<T>`. The input `someInput` is coerced based on the schema definition.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nconst A = a.object({\n    a: a.string(),\n    b: a.boolean(),\n    c: a.float32(),\n});\n\na.coerce(A, {\n    a: '1',\n    b: 'true',\n    c: '500.24',\n});\n// { success: true, value: { a: '1', b: true, c: 500.24 } };\n```\n\n----------------------------------------\n\nTITLE: Objects Example - Arri Go\nDESCRIPTION: This example demonstrates how Go structs can be nested to represent objects in Arri. It showcases nested structs are supported.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n    Id string\n    Name string\n}\n\ntype Post struct {\n    Id string\n    Author User     // nested structs are okay too\n    Content string\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Server Plugin in Arri Config (TypeScript)\nDESCRIPTION: This TypeScript code shows how to register a defined server plugin in the Arri configuration file. This integrates the plugin into the Arri CLI workflow, allowing it to customize the `dev` and `build` commands.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/implementing-an-arri-server.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default defineConfig({\n    server: myCustomPlugin,\n    generators: [...]\n})\n```\n\n----------------------------------------\n\nTITLE: Call Arri Rust SSE Procedure (Rust)\nDESCRIPTION: This snippet shows how to call an Arri Rust SSE (Server-Sent Events) procedure. It sets up a callback function to handle different SSE events (message, error, open, close). The callback will be executed when a new SSE event is received. It assumes that a `client` object exists with a `users` subservice and a `watch_user` procedure.  It also assumes `printl` is a defined function.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/rust/rust-codegen/README.md#_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nlet mut msg_count = 0;\nlet mut open_count = 0;\nclient\n    .users\n    .watch_user(\n        &mut |event, controller| match event {\n            SseEvent::Message(msg) => {\n                msg_count += 1;\n                printl(\"NEW_MESSAGE: {:?}\", msg);\n            }\n            SSeEvent::Error(err) => {\n                // call abort to close the event stream\n                controller.abort()\n            }\n            SseEvent::Open => {\n                open_count += 1;\n            }\n            SseEvent::Close => {}\n        },\n        None, // max_retry_count (u64)\n        None, // max_retry_interval (u64)\n    ).await;\n```\n\n----------------------------------------\n\nTITLE: Shorthand for Initializing Services with Procedures\nDESCRIPTION: This snippet shows a shorthand method for initializing services with procedures.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// this is equivalent to what we showed above\nconst usersService = defineService(\"users\", {\n    getUser: defineRpc({..}),\n    createUser: defineRpc({..}),\n});\n```\n\n----------------------------------------\n\nTITLE: Initialize Arri client users service (Swift)\nDESCRIPTION: This code shows how to initialize a specific service within the generated Arri client in Swift. It creates an instance of `MyClientUsersService` with a base URL, a request delegate, and headers. It assumes that the Arri schema defines a 'users' service containing procedures.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/swift/swift-codegen/README.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet usersService = MyClientUsersService(\n    baseURL: \"https://example.com\",\n    delegate: DefaultRequestDelegate(),\n    headers: {\n        var headers: Dictionary<String, String> = Dictionary()\n        return headers\n    }\n)\n\nusersService.someProcedure()\n```\n\n----------------------------------------\n\nTITLE: Call Event Stream Procedures (Swift)\nDESCRIPTION: This code shows how to call an event stream procedure. It initializes parameters, defines an `EventSourceOptions` object to handle events, and calls the `watchUser` procedure, which returns a `Task`. The task can be cancelled to stop the stream. The `EventSourceOptions` object allows you to define closures to handle various events such as messages, request events, response events, and errors.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/swift/swift-codegen/README.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nvar msgCount = 0\nvar openCount = 0\nlet params = WatchUserParams()\n\n// event stream procedures return a task that you can cancel whenever\nlet task: Task<(), Never> = client.users.watchUser(\n    params,\n    options: EventSourceOptions(\n        onMessage: { msg, eventSource in\n            msgCount += 1\n            print(\"New message: \\(msg)\")\n        },\n        onRequest: nil,\n        onRequestError: nil,\n        onResponse: { _, eventSource in\n            openCount += 1\n            print(\"Established connection!\")\n        },\n        onResponseError: { err, eventSource in\n            print(\"The server returned an error: \\(err)\")\n            // you can also cancel the task from inside one of these hooks\n            // by calling `cancel()` on the EventSource.\n            // this will cause the parent Task to be completed\n            eventSource.cancel()\n        },\n        onClose: nil,\n        maxRetryCount: nil,\n        maxRetryInterval: nil,\n    )\n)\n\n// if you want to wait for the task to finished\nawait task.result\n// this will continue indefinitely unless the server sends a \"done\" event\n// or you call `cancel()` on the EventSource\n```\n\n----------------------------------------\n\nTITLE: Adding Arri Client as Package Dependency in Swift\nDESCRIPTION: This code snippet demonstrates how to add the `arri-client-swift` git repository as a package dependency in a Swift project using Swift Package Manager.  The `url` specifies the repository location, and the `from` parameter should match the version of the Arri CLI. The version is retrieved using the command `arri version`. This is the first part of installing the dependency.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/swift/swift-client/README.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n.package(\n    url: \"https://github.com/modiimedia/arri-client-swift.git\",\n    from: \"<your-arri-cli-version>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Add Rust Client Generator to Arri Config (TypeScript)\nDESCRIPTION: This snippet demonstrates how to add the Rust client generator to your Arri configuration file. It includes options for specifying the client name and output file path. The `arri` package must be installed to use `defineConfig` and `generators`.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/rust/rust-codegen/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// arri.config.ts\nimport { defineConfig, generators } from 'arri';\n\nexport default defineConfig({\n    generators: [\n        generators.rustClient({\n            clientName: 'MyClient',\n            outputFile: './some-project/my_client.g.rs',\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Flat File Config - All Arri Rules\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure the Arri-RPC Eslint plugin using the 'all' preset in a flat file configuration. This preset enables all arri lint rules and applies it to TypeScript files within the 'src' directory.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/eslint-plugin/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport arri from '@arrirpc/eslint-plugin/configs';\n\n// turn on all arri lint rules\nexport default [\n    arri.all,\n    {\n        files: ['src/**/*.ts']\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Flat File Config - Recommended Arri Rules\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure the Arri-RPC Eslint plugin using the 'recommended' preset in a flat file configuration. This preset enables lint rules related to schema building and codegen, and applies it to TypeScript files within the 'src' directory.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/eslint-plugin/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport arri from '@arrirpc/eslint-plugin/configs';\n\n// turn on lint rules related to schema building and codegen\nexport default [\n    arri.recommended,\n    {\n        files: ['src/**/*.ts'],\n    },\n];\n```\n\n----------------------------------------\n\nTITLE: URL Query Parameters Example (Text)\nDESCRIPTION: This example shows how the parameters for the `users.getUser` procedure are passed as URL query parameters when the HTTP method is set to `GET`.  `a`, `b`, and `c` are parameters of type `GetUserParams`.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/implementing-an-arri-server.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nhttp://myapi.com/users/get-user?a=FOO&b=BAR&c=BAZ\n```\n\n----------------------------------------\n\nTITLE: Running Arri Code Generator with pnpm\nDESCRIPTION: This command executes the Arri code generator using pnpm. It specifies the path to the definitions file containing the Arri schemas. This command triggers the code generation process defined in the arri config file.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\n# pnpm\npnpm arri codegen ./definitions.ts\n```\n\n----------------------------------------\n\nTITLE: Unflatten Procedures in TypeScript\nDESCRIPTION: Illustrates how to use the `unflattenProcedures` function to transform a flattened procedure structure into a nested object. The function takes a flattened object of procedures as input and returns a nested object representing the hierarchical structure.  Requires the `@arrirpc/codegen-utils` dependency.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tooling/codegen-utils/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nunflattenProcedures({\n    \"v1.users.getUser\": {\n        transport: \"http\",\n        path: \"/v1/users/get-user\",\n        method: \"get\",\n    },\n    \"v1.users.createUser\": {\n        transport: \"http\",\n        path: \"/v1/users/create-user\",\n        method: \"post\",\n    },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * outputs the following\n * {\n *   v1: {\n *     users: {\n *       getUser: {\n *         transport: \"http\",\n *         path: \"/v1/users/get-user\",\n *         method: \"get\",\n *       },\n *       createUser: {\n *          transport: \"http\",\n *          path: \"/v1/users/create-user\",\n *          method: \"post\",\n *       }\n *     }\n *   }\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Initializing an Arri Kotlin Service\nDESCRIPTION: This Kotlin code initializes a specific service from the generated Arri client, demonstrating how to use a subset of the client's functionality.  It takes HttpClient, baseUrl, and headers as parameters.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/kotlin/kotlin-codegen/README.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval service = MyClientUsersService(\n        httpClient = httpClient,\n        baseUrl = \"https://example.com\",\n        headers = {\n            mutableMapOf(Pair(\"x-example-header\", \"<some-header-value>\"))\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining and Validating Records/Maps in TypeScript\nDESCRIPTION: This snippet shows how to define a record (or map) schema using `a.record()` in TypeScript, specifying the value type. It also shows how to infer the type and validate record instances.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst R = a.record(a.boolean());\ntype R = a.infer<typeof R>; // Record<string, boolean>\n\na.validate(R, {\n    hello: true,\n    world: false,\n}); // true;\na.validate(R, {\n    hello: 'world',\n}); // false;\n```\n\n----------------------------------------\n\nTITLE: Installing Arri-RPC Eslint Plugin\nDESCRIPTION: These commands install the Arri-RPC Eslint plugin as a dev dependency using npm and pnpm package managers.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/eslint-plugin/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm i --save-dev @arrirpc/eslint-plugin\n\n# pnpm\npnpm i --save-dev @arrirpc/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Nested Procedures Object Example in Arri App Definition\nDESCRIPTION: This JSON example demonstrates how to nest procedures into services using the `.` notation in the Arri app definition.  The snippet defines `getUser` and `createUser` procedures accessible under the `users` service. It shows the transport, path, method, parameters, and response for each procedure.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_app_definition.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"users.getUser\": {\n        \"transport\": \"http\",\n        \"path\": \"/users/get-user\",\n        \"method\": \"get\",\n        \"params\": \"UserParams\",\n        \"response\": \"User\"\n    },\n    \"users.createUser\": {\n        \"transport\": \"http\",\n        \"path\": \"/users/create-user\",\n        \"method\": \"post\",\n        \"params\": \"User\",\n        \"response\": \"User\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Arri Procedure Definition Example with GET (JSON)\nDESCRIPTION: This JSON snippet defines the same Arri procedure, `users.getUser`, but now using the `GET` HTTP method. This change dictates that the parameters, `GetUserParams`, must be passed through the URL query parameters instead of the request body.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/implementing-an-arri-server.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"users.getUser\": {\n        \"transport\": \"http\",\n        \"method\": \"get\",\n        \"path\": \"/users/get-user\",\n        \"params\": \"GetUserParams\",\n        \"response\": \"User\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Method for an Arri Procedure (typescript)\nDESCRIPTION: This TypeScript code shows how to define an HTTP method (e.g., 'get') for an Arri procedure using the `defineRpc` function. This overrides the default POST method and allows mapping RPC params to query parameters for GET requests. The `a.coerce` method is used to handle type coercion.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// procedures/users/getUser.rpc.ts\nexport default defineRpc({\n    method: 'get',\n    // rest of config\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Arri Dependencies (npm)\nDESCRIPTION: This snippet demonstrates how to install the necessary dependencies for Arri using npm. It includes installing the `arri`, `@arrirpc/server`, and `@arrirpc/schema` packages.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install -D arri\nnpm install @arrirpc/server @arrirpc/schema\n```\n\n----------------------------------------\n\nTITLE: Legacy Config - Manual Setup\nDESCRIPTION: This JSONC snippet demonstrates a manual configuration of the Arri-RPC Eslint plugin in a legacy ESLint configuration file.  It specifies the plugin and individual rules to be enforced, such as preventing anonymous object, enumerator, discriminator, and recursive schemas, and enforcing modular imports. Each rule is set to a severity level of 2 (error).\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/eslint-plugin/README.md#_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"plugins\": [\"@arrirpc\"],\n    \"rules\": {\n        // check to see if an ID has been assigned to root a.object() schemas\n        \"@arrirpc/no-anonymous-object\": 2,\n        // check to see if an ID has been assigned to a.enumerator() or a.stringEnum() schemas\n        \"@arrirpc/no-anonymous-enumerator\": 2,\n        // check to see if an ID has been assigned to a.discriminator() schemas\n        \"@arrirpc/no-anonymous-discriminator\": 2,\n        // check to see if an ID has been assigned to a.recursive() schemas\n        \"@arrirpc/no-anonymous-recursive\": 2,\n        // enforce usage of modular imports to reduce bundle size\n        \"@arrirpc/prefer-modular-imports\": 2,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Arri App with Custom Event Type in Go\nDESCRIPTION: This code snippet demonstrates how to initialize an Arri application with a custom event type, `MyCustomEvent`. It uses `arri.NewApp` and `arri.AppOptions` to specify the custom event type and provides a function to create instances of `MyCustomEvent` for each new request. It retrieves an authentication token from the request header and uses it (in pseudo-code) to retrieve user data.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_42\n\nLANGUAGE: go\nCODE:\n```\napp := arri.NewApp(\n    http.DefaultServeMux,\n    arri.AppOptions[MyCustomEvent]{},\n    // this function is used to create your custom event type whenever a new request is made\n    func(w http.ResponseWriter, r *http.Request) (*MyCustomEvent, arri.RpcError) {\n        authToken := r.Header.Get(\"Authorization\")\n        user := arri.None[User]{}\n        if len(authToken) > 0 {\n            // pseudo-code\n            user = getUserFromAuthToken(authToken)\n        }\n        return &MyCustomEvent{\n            r: r,\n            w: w,\n            User: user,\n        }, nil\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Legacy Config - Recommended Arri Rules\nDESCRIPTION: This JSONC snippet configures ESLint using the legacy configuration style. It extends the recommended Arri-RPC configuration and applies it to all TypeScript files.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/eslint-plugin/README.md#_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n// Arri-RPC recommended\n{\n    \"extends\": [\"plugin:@arrirpc/legacy-config-recommended\"],\n    \"files\": [\"**/*.ts\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Arri Dart Client Library (Bash)\nDESCRIPTION: This bash command installs the `arri_client` Dart package using `dart pub add`. This library is a dependency for the generated Dart client code and provides the necessary functionality for interacting with Arri services.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/dart/dart-codegen/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndart pub add arri_client\n```\n\n----------------------------------------\n\nTITLE: Legacy Config - All Arri Rules\nDESCRIPTION: This JSONC snippet configures ESLint using the legacy configuration style. It extends the all Arri-RPC configuration and applies it to all TypeScript files.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/eslint-plugin/README.md#_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n// all rules\n{\n    \"extends\": [\"plugin:@arrirpc/legacy-config-all\"],\n    \"files\": [\"**/*.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nullable Types\nDESCRIPTION: This snippet demonstrates the use of `arri.Nullable` to define nullable fields when pointer are not desired. Fields of type `*string` are also treated as nullable.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_34\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n    Id string\n    Name *string // this is treated as nullable during encoding/decoding\n    Email arri.Nullable[string] // this is also treated as nullable during encoding/decoding\n}\n```\n\n----------------------------------------\n\nTITLE: Arri Error Response Example (JSONC)\nDESCRIPTION: This JSONC snippet shows the structure of a typical Arri error response. It includes the required `code` (HTTP status code) and `message` fields, as well as optional `data` and `stack` fields for providing additional error information. Comments are included to show what each of the keys represents.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/implementing-an-arri-server.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    // REQUIRED FIELDS:\n    \"code\": 400, // the http status code\n    \"message\": \"Bad request\", // an error message\n\n    // OPTIONAL FIELDS:\n    \"data\": \"FOO\", // Some arbitrary data to send to the client. Can be anything.,\n    \"stack\": [\"...\", \"....\"] // A stack trace\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Post struct with Arri\nDESCRIPTION: This code snippet demonstrates how to define a simple `Post` struct with nested structs for use with the Arri framework. It includes the `PostParams` struct, `Post` struct with nested `Author` struct and a `GetPost` function that takes `PostParams` and `arri.DefaultContext` and returns a `Post` and `arri.RpcError`.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype PostParams {\n    PostId string\n}\ntype Post struct {\n    Id string\n    // nested inlined struct\n    Author struct {\n        Id string\n        Name string\n    }\n}\n\nfunc GetPost(params PostParams, c arri.DefaultContext) (Post, arri.RpcError) {\n    // rpc content\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Arri Typebox Adapter\nDESCRIPTION: This snippet shows how to install the Arri Typebox adapter using npm and pnpm. The adapter is required to reuse Typebox schemas with Arri-RPC.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema-typebox-adapter/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @arrirpc/typebox-adapter\n\npnpm install @arrirpc/typebox-adapter\n```\n\n----------------------------------------\n\nTITLE: Arri RPC Type Guards in TypeScript\nDESCRIPTION: Shows examples of various type guard functions provided by `@arrirpc/codegen-utils`. These functions can be used to check the type of an input, ensuring it matches the expected Arri RPC definition type. Requires the `@arrirpc/codegen-utils` dependency.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tooling/codegen-utils/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// type guards\nisAppDefinition(input);\nisRpcDefinition(input);\nisServiceDefinition(input);\nisSchema(input);\nisSchemaFormEmpty(input);\nisSchemaFormType(input);\nisSchemaFormEnum(input);\nisSchemaFormElements(inputs);\nisSchemaFormProperties(input);\nisSchemaFormValues(input);\nisSchemaFormDiscriminator(input);\nisSchemaFormRef(input);\n```\n\n----------------------------------------\n\nTITLE: Augmenting ArriEventContext\nDESCRIPTION: This snippet demonstrates how to augment the `ArriEventContext` interface provided by `@arrirpc/server` to add type safety for custom context properties.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@arrirpc/server';\n\ndeclare module '@arrirpc/server' {\n    interface ArriEventContext {\n        user?: {\n            id: number;\n            name: string;\n            email: string;\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nullable Modifier in TypeScript\nDESCRIPTION: This snippet demonstrates the usage of the `a.nullable()` modifier, which allows a type to be either the specified type or null.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst name = a.nullable(a.string());\n\n/**\n * Resulting type\n * string | null\n */\n```\n\n----------------------------------------\n\nTITLE: Project Initialization Prompt - Arri Go Server\nDESCRIPTION: This shows the command-line prompts during project initialization using Arri. The prompts guide the user to select the project type (application) and the programming language (go).\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nWhat kind of project do you want to initialize?\n-> application\n   generator plugin\n\nWhat language do you want to use?\n   typescript\n-> go\n```\n\n----------------------------------------\n\nTITLE: Generated TS Interface - Arri Go\nDESCRIPTION: This is the TypeScript interface generated from the ATD. It demonstrates how the client generators produce type-safe clients based on the Go struct definitions.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nexport interface User {\n    id: string;\n    name: string;\n    isAdmin: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Event Type in Go\nDESCRIPTION: This code snippet defines a custom event type, `MyCustomEvent`, that extends the `arri.Event` interface to include user data. It defines a `User` struct and the `MyCustomEvent` struct with fields for the HTTP request, response writer, and an optional `User` object.  It also implements the `Request()` and `Writer()` methods required by the `arri.Event` interface.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_41\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n    Uid string\n    Name string\n    Email string\n}\n\ntype MyCustomEvent struct {\n    r *http.Request\n    w http.ResponseWriter\n    User arri.Option[User]\n}\n\nfunc (e MyCustomEvent) Request() *http.Request {\n    return e.r\n}\nfunc (e MyCustomEvent) Writer() http.ResponseWriter {\n\treturn e.w\n}\n```\n\n----------------------------------------\n\nTITLE: Arri Code Generation Command (Bash)\nDESCRIPTION: This bash command shows how to use the `arri codegen` command to generate client code from an Arri app definition file. It supports different file formats and HTTP endpoints as input.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/implementing-an-arri-server.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\narri codegen AppDefinition.json # json app def\narri codegen AppDefinition.ts # ts app def\narri codegen https://myapi.com/__definition # http endpoint\n```\n\n----------------------------------------\n\nTITLE: Flat File Config - Manual Setup\nDESCRIPTION: This JavaScript code snippet illustrates how to manually configure the Arri-RPC Eslint plugin in a flat file. It defines the plugin and specifies individual rules, such as 'no-anonymous-object', 'no-anonymous-enumerator', 'no-anonymous-discriminator', 'no-anonymous-recursive', and 'prefer-modular-imports'.  Each rule is assigned a severity level of 2 (error).\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/eslint-plugin/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport arri from '@arrirpc/eslint';\n\nexport default [\n    {\n        plugins: {\n            arri,\n        },\n        rules: {\n            // check to see if an ID has been assigned to root a.object() schemas\n            'arri/no-anonymous-object': 2,\n            // check to see if an ID has been assigned to a.enumerator() or a.stringEnum() schemas\n            'arri/no-anonymous-enumerator': 2,\n            // check to see if an ID has been assigned to a.discriminator() schemas\n            'arri/no-anonymous-discriminator': 2,\n            // check to see if an ID has been assigned to a.recursive() schemas\n            'arri/no-anonymous-recursive': 2,\n            // enforce using arri's tree-shakable imports instead of the non tree-shakable imports to keep bundle sizes lower\n            'arri/prefer-modular-imports': 2,\n        },\n    },\n];\n```\n\n----------------------------------------\n\nTITLE: Development Commands\nDESCRIPTION: These commands are used for building, testing, and linting the Kotlin code.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/kotlin/kotlin-codegen/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# build the library\npnpm nx build codegen-kotlin\n\n# test\npnpm nx test codegen-kotlin\n\n# lint\npnpm nx lint codegen-lint\n```\n\n----------------------------------------\n\nTITLE: Defining and Validating Arrays in TypeScript\nDESCRIPTION: This snippet demonstrates how to define an array schema using `a.array()` in TypeScript, specifying the type of elements in the array. It also shows how to infer the type of the array and validate it.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyList = a.array(a.string());\ntype MyList = a.infer<typeof MyList>; // string[];\n\na.validate(MyList, [1, 2]); // false\na.validate(MyList, ['hello', 'world']); // true\n```\n\n----------------------------------------\n\nTITLE: Using Undefinable Modifier in TypeScript\nDESCRIPTION: This snippet demonstrates using `a.undefinable()` to allow a property to be undefined, but still requiring the property key to be present during initialization.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst Foo = a.object({\n    foo: a.undefinable(a.string()),\n});\ntype Foo = a.infer<typeof Foo>;\n\nconst fooInstance: Foo = {\n    // this field must still be present\n    // while with a.optional() we could omit the key\n    foo: undefined,\n};\n\nconst User = a.object({\n    id: a.string(),\n    email: a.undefinable(a.string()),\n    date: a.timestamp();\n})\n\n/**\n * Resulting type (Notice how the email key is still required)\n * {\n *   id: string;\n *   email: string | undefined;\n *   date: Date;\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Installing Arri CLI with npm\nDESCRIPTION: This command installs the Arri CLI as a development dependency using npm. The Arri CLI is used for compiling Arri schemas to other languages.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n# npm\nnpm i --save-dev arri\n```\n\n----------------------------------------\n\nTITLE: Arri Map Support\nDESCRIPTION: This snippet shows how Arri supports maps with string keys.  It demonstrates that attempting to use non-string keys will cause a panic when the server starts. It also shows the ATD output for a map with string keys and boolean values.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nmap[string]bool\n```\n\n----------------------------------------\n\nTITLE: Creating a Generator Plugin in TypeScript\nDESCRIPTION: Demonstrates how to create a generator plugin using `defineGeneratorPlugin` from `@arrirpc/codegen-utils`.  It defines plugin options and a run function that generates something based on the application definition and provided options. Requires the `@arrirpc/codegen-utils` dependency.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tooling/codegen-utils/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineGeneratorPlugin } from \"@arrirpc/codegen-utils\";\n\n// add any options needed for your plugin here\nexport interface MyPluginOptions {\n    a: string;\n    b: string;\n}\n\nexport default defineGeneratorPlugin((options: MyPluginOptions) => {\n    return {\n        options,\n        run: async (appDef, isDevServer) => {\n            // generate something using the app definition and the specified options\n        },\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Arri Generator Plugin Entry File (TypeScript)\nDESCRIPTION: This TypeScript code defines the entry point for an Arri generator plugin. It exports a default function that takes plugin options and returns an object with an `options` property and a `run` function for generating files based on the application definition.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/creating-a-custom-generator.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineGeneratorPlugin } from '@arrirpc/codegen-utils';\n\n// add any options needed for your plugin here\nexport interface MyPluginOptions {\n    clientName: string;\n    outputFile: string;\n}\n\nexport default defineGeneratorPlugin((options: MyPluginOptions) => {\n    return {\n        options,\n        run: async (appDef, isDevServer) => {\n            // generate something using the app definition and the specified options\n        },\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a specific Arri Dart Service (Dart)\nDESCRIPTION: This Dart code snippet shows how to initialize a specific service (`MyClientUsersService`) generated by Arri. Like the full client initialization, it requires a base URL and a function to provide request headers. This allows for using only the functionality related to the specific service instead of the entire client.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/dart/dart-codegen/README.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal service = MyClientUsersService(\n    baseUrl: \"https://example.com\",\n    headers: () async {\n        return {\n            \"Authorization\": \"<some-token>\",\n        };\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Dart Output Example\nDESCRIPTION: This Dart code represents the generated output for a User data class based on an Arri schema. It includes fields for id (String), name (String?), email (String?), createdAt (DateTime), and updatedAt (DateTime).  The `name` and `email` fields are nullable.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\n// dart output\n\nclass User {\n  final String id;\n  final String? name;\n  final String? email;\n  /// when the user was created\n  final DateTime createdAt;\n  final DateTime updatedAt;\n  const User({\n     required this.id,\n     this.name,\n     required this.email,\n     required this.createdAt,\n     required this.updatedAt,\n  });\n\n  // implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Quickstart using Arri CLI (pnpm)\nDESCRIPTION: This snippet shows how to quickly initialize an Arri project using the Arri CLI with pnpm. It includes commands to create a new project, navigate to the project directory, install dependencies, and start the development server.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# pnpm\npnpm dlx arri init [project-name]\ncd [project-name]\npnpm install\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Definitions Object Example in Arri App Definition\nDESCRIPTION: This JSON example showcases the structure of the definitions object within the Arri app definition. It defines two types, `UserParams` and `User`, including their properties and associated types. It also shows how `metadata.id` should match the key of the definition.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_app_definition.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"UserParams\": {\n        \"properties\": {\n            \"userId\": {\n                \"type\": \"string\"\n            }\n        }\n    },\n    \"User\": {\n        \"properties\": {\n            \"id\": {\n                \"type\": \"string\"\n            },\n            \"name\": {\n                \"type\": \"string\"\n            },\n            \"isAdmin\": {\n                \"type\": \"boolean\"\n            }\n        },\n        \"metadata\": {\n            // if this is present then it should match the key above\n            \"id\": \"User\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Event Stream Requests in Kotlin\nDESCRIPTION: This Kotlin code shows how to cancel an event stream procedure by throwing a CancellationException from within one of the event handlers. It also shows how to cancel from the outside by using coroutine jobs.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/kotlin/kotlin-codegen/README.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nrunBlocking {\n    myClient.users.watchUserChanges(\n        onResponseError { err ->\n            println(\"Server returned an error: ${err.code} ${err.message}\")\n            throw CancellationException()\n        }\n    )\n}\n\nval job = someCoroutineScope.launch {\n    myClient.users.watchUserChanges()\n}\njob.cancel()\n```\n\n----------------------------------------\n\nTITLE: Using arri.Pair\nDESCRIPTION: This snippet shows example usages of `arri.Pair` to create key-value pairs with different data types.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_38\n\nLANGUAGE: go\nCODE:\n```\narri.Pair(\"foo\", \"bar\")\narri.Pair(0, true)\narri.Pair(\"baz\", []string{})\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Types in TypeScript\nDESCRIPTION: This snippet demonstrates defining a recursive type schema using `a.recursive()` in TypeScript. It requires defining the type separately and passing it as a generic parameter to the `a.recursive()` function.  An ID is recommended for recursive schemas.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// the recursive type must be defined first\ntype BinaryTree = {\n    left: BinaryTree | null;\n    right: BinaryTree | null;\n};\n\n// pass the type to the helper\nconst BinaryTree = a.recursive<BinaryTree>(\n    (self) =>\n        // the resulting schema must be an object or discriminator\n        // it also must match the type you pass into the generic parameter\n        // or TS will yell at you\n        a.object({\n            left: a.nullable(self),\n            right: a.nullable(self),\n        }),\n    {\n        id: 'BinaryTree',\n    },\n);\n\na.validate(BinaryTree, {\n    left: {\n        left: null,\n        right: {\n            left: null,\n            right: null,\n        },\n    },\n    right: null,\n}); // true\na.validate(BinaryTree, {\n    left: {\n        left: null,\n        right: {\n            left: true,\n            right: null,\n        },\n    },\n    right: null,\n}); // false\n```\n\n----------------------------------------\n\nTITLE: Serialize Discriminated Union to JSON\nDESCRIPTION: This snippet demonstrates how to serialize a discriminated union to JSON using `arri.EncodeJSON`. It initializes a `Shape` with a `Rectangle` and then encodes it to JSON using camel case key casing.  It requires the \"fmt\" package to print the result.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_22\n\nLANGUAGE: go\nCODE:\n```\n// initialize a rectangle shape\nmyShape := Shape{Rectangle: &Rectangle{Width: 10, Height: 20}}\n// serialize to json\nresult, _ := arri.EncodeJSON(myShape, arri.KeyCasingCamelCase)\n// print the result\nfmt.Println(string(result))\n```\n\n----------------------------------------\n\nTITLE: ATD Output for Nullable Types\nDESCRIPTION: This snippet shows the ATD output for the nullable fields in the `User` struct. Both `Name` (as pointer) and `Email` (as `arri.Nullable`) are marked as nullable.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\"\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"nullable\": true\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"nullable\": true\n        }\n    },\n    \"metadata\": {\n        \"id\": \"User\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Arri Swift Client package dependency\nDESCRIPTION: This snippet shows how to add the `arri-client-swift` git repository as a package dependency to your Swift project using Swift Package Manager.  You specify the URL of the git repository and the Arri CLI version to use.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/swift/swift-codegen/README.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n.package(\n    url: \"https://github.com/modiimedia/arri-client-swift.git\",\n    from: \"<your-arri-cli-version>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Working With arri.Option\nDESCRIPTION: This snippet shows examples for initializing and working with the `arri.Option` type.  It demonstrates initializing with a value (`arri.Some`) or without a value (`arri.None`), and methods for extracting values (`Unwrap`, `UnwrapOr`), checking if a value is present (`IsSome`, `IsNone`), and updating/unsetting values (`Set`, `Unset`).\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_32\n\nLANGUAGE: go\nCODE:\n```\n// initializing options\noptionalString := arri.Some(\"hello world\") // initialize optional with value\noptionalString := arri.None[string]() // initialize optional with no value\n\n// working with options\noptionalString.Unwrap() // extract the inner value. panics if there is no value\noptionalString.UnwrapOr(\"some-fallback\") // extract the inner value if it exist. otherwise use the fallback\noptionalString.IsSome() // returns true if inner value has been set\noptionalString.IsNone() // returns true if inner value has not been set\noptionalString.Set(\"hello world again\") // update the inner value\noptionalString.Unset() // unset the inner value\n```\n\n----------------------------------------\n\nTITLE: Overriding Discriminator Field\nDESCRIPTION: This snippet demonstrates how to override the default discriminator field (`type`) using the `discriminatorKey` tag and the `DiscriminatorKey` helper provided by Arri. It changes the discriminator field to `kind`.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_25\n\nLANGUAGE: go\nCODE:\n```\ntype Shape struct {\n\tarri.DiscriminatorKey `discriminatorKey:\"kind\"`\n\tRectangle *Rectangle `discriminator:\"RECTANGLE\"`\n\tCircle *Circle `discriminator:\"CIRCLE\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Install Arri Rust Client Library (Bash)\nDESCRIPTION: This command installs the `arri_client` library using Cargo. The version number of `arri_client` should match the version of the Arri CLI used for code generation. It assumes Cargo is installed and configured correctly in the environment.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/rust/rust-codegen/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo add arri_client\n```\n\n----------------------------------------\n\nTITLE: Partial Schemas in TypeScript\nDESCRIPTION: Demonstrates how to create a schema that makes all properties of another schema optional using a.partial()\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst A = a.object({\n    a: a.string(),\n    b: a.float32(),\n    c: a.timestamp(),\n});\n// { a: string; b: number; c: Date; }\n\nconst B = a.partial(A);\n// { a: string | undefined; b: number | undefined; c: Date | undefined; }\n```\n\n----------------------------------------\n\nTITLE: Outputted ATD - Arri Go\nDESCRIPTION: This is the Arri Type Definition (ATD) generated from the `User` struct in the previous code snippet. It shows the structure and type information used by client generators.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"isAdmin\": {\n            \"type\": \"boolean\"\n        }\n    },\n    \"metadata\": {\n        \"id\": \"User\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata Keyword Example\nDESCRIPTION: This JSON snippet demonstrates the usage of the `metadata` keyword to provide additional information for code generation. It includes the `id` for type naming, `description` for code comments, and `isDeprecated` for marking fields as deprecated.  The root metadata includes an `id` and a `description`.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"isAdmin\": {\n            \"type\": \"boolean\",\n            \"metadata\": {\n                \"isDeprecated\": true\n            }\n        }\n    },\n    \"metadata\": {\n        \"id\": \"User\",\n        \"description\": \"This is a user\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Types\nDESCRIPTION: This snippet demonstrates how to define recursive types using Arri. It creates a `BinaryTree` struct with fields that are pointers to itself, allowing for nested structures.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_27\n\nLANGUAGE: go\nCODE:\n```\ntype BinaryTree struct {\n\tLeft: *BinaryTree\n\tRight: *BinaryTree\n}\n```\n\n----------------------------------------\n\nTITLE: Using arri.OrderedMap\nDESCRIPTION: This snippet shows how to use `arri.OrderedMap` to preserve the order of keys. It demonstrates adding key-value pairs, retrieving values, setting values, getting the length, retrieving keys, retrieving values, and retrieving entries.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_39\n\nLANGUAGE: go\nCODE:\n```\nm := arri.OrderedMap[bool]{}\n\nm.Add(arri.Pair(\"Foo\", true))\nm.Add(arri.Pair(\"Bar\", false))\n\nm.Get(\"Foo\") // returns *true\nm.Get(\"Bar\") // returns *false\nm.Get(\"Baz\") // returns nil\n\nm.Set(\"Foo\", false)\nm.Get(\"Foo\") // returns *false\n\nm.Len() // returns 2\nm.Keys() // returns [\"Foo\", \"Bar\"]\nm.Values() // returns [true, false]\nm.Entries() // returns [arri.Pair[\"Foo\":true], arri.Pair[\"Bar\":false]]\n```\n\n----------------------------------------\n\nTITLE: SseController Interface - Arri Go\nDESCRIPTION: This is the Go definition of the `SseController` interface used for Arri Event Stream RPCs. It outlines the methods for pushing events, closing the connection, detecting connection closures, and setting the ping interval.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype SseController[T any] interface {\n\t// Push a new event to the client\n\t// Will return an RpcError if there was an issue with serializing the response\n\tPush(T) RpcError\n\t// Close the connection\n\t// If notifyClient is set to true then a \"done\" event will be sent to the client.\n\t// Spec compliant Arri clients will not auto-reconnect after receiving a \"done\" event\n\tClose(notifyClient bool)\n\t// Will fire when the connection has been closed either by the server or the client\n\tDone() <-chan struct{}\n\t// Change how often a \"ping\" event is sent to the client. Default is (10 seconds)\n\tSetPingInterval(time.Duration)\n}\n```\n\n----------------------------------------\n\nTITLE: Discriminator Schema Form in Arri Type Definition\nDESCRIPTION: This schema form is used to describe objects that work like a tagged union (aka discriminated union or sum type). It uses the `discriminator` and `mapping` keywords to determine the schema based on the value of a tag property.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"discriminator\": \"eventType\",\n    \"mapping\": {\n        \"USER_CREATED\": {\n            \"properties\": {\n                \"id\": { \"type\": \"string\" }\n            }\n        },\n        \"USER_PAYMENT_PLAN_CHANGED\": {\n            \"properties\": {\n                \"id\": { \"type\": \"string\" },\n                \"plan\": { \"enum\": [\"FREE\", \"PAID\"] }\n            }\n        },\n        \"USER_DELETED\": {\n            \"properties\": {\n                \"id\": { \"type\": \"string\" },\n                \"softDelete\": { \"type\": \"boolean\" }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example TypeScript Type Definition\nDESCRIPTION: This is an example of a TypeScript type definition representing a User object with id, name and email properties.  If the server omits the email field the client should initialize an empty string for it as a fallback.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/creating-a-custom-generator.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype User = {\n    id: string;\n    name: string;\n    email: string;\n};\n```\n\n----------------------------------------\n\nTITLE: String Case Conversion Utilities in TypeScript\nDESCRIPTION: Presents various string case conversion utilities offered by `@arrirpc/codegen-utils`. These utilities include functions for removing disallowed characters, and converting strings to camelCase, kebabCase, pascalCase, snakeCase, titleCase, flatCase. Requires the `@arrirpc/codegen-utils` dependency.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tooling/codegen-utils/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nremoveDisallowedChars(input, disallowedChars);\ncamelCase(input, opts);\nkebabCase(input);\npascalCase(input, opts);\nsnakeCase(input, opts);\ntitleCase(input, opts);\nflatCase(input, opts);\nupperFirst(input);\nlowerFirst(input);\nisUppercase(input);\n```\n\n----------------------------------------\n\nTITLE: Picking Properties from Schemas in TypeScript\nDESCRIPTION: Demonstrates using `a.pick()` to create a new object schema with only a subset of properties from the original schema.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nconst A = a.object({\n    a: a.string(),\n    b: a.float32(),\n    c: a.timestamp(),\n});\n// { a: string; b: number; c: Date; }\n\nconst B = a.pick(A, ['a', 'c']);\n// { a: string; c: Date; }\n```\n\n----------------------------------------\n\nTITLE: Ref Schema Definition\nDESCRIPTION: This JSON snippet demonstrates how to define a recursive schema using the \"ref\" keyword.  The \"ref\" keyword points to a schema with the ID \"BinaryTree\", enabling self-referential structures. The `isNullable` property allows the `left` and `right` properties to be null.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"left\": {\n            \"ref\": \"BinaryTree\",\n            \"isNullable\": true\n        },\n        \"right\": {\n            \"ref\": \"BinaryTree\",\n            \"isNullable\": true\n        },\n        \"metadata\": {\n            \"id\": \"BinaryTree\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Unsafely with Arri\nDESCRIPTION: This snippet shows how to use `a.parseUnsafe()` to parse a JSON string. If parsing fails, it throws a `ValidationException`. `jsonString` is assumed to be defined elsewhere.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = a.object({\n    id: a.string(),\n    name: a.string(),\n});\n\n// can throw an error\nconst result = a.parseUnsafe(User, jsonString);\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Defining Discriminated Unions in TypeScript\nDESCRIPTION: This snippet demonstrates defining a discriminated union schema using `a.discriminator()` in TypeScript, specifying the discriminator field and the possible object types based on the discriminator value. It shows how to infer the union type and validate instances.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst Shape = a.discriminator('type', {\n    RECTANGLE: a.object({\n        width: a.float32(),\n        height: a.float32(),\n    }),\n    CIRCLE: a.object({\n        radius: a.float32(),\n    }),\n});\ntype Shape = a.infer<typeof Shape>; // { type: \"RECTANGLE\"; width: number; height: number; } | { type: \"CIRCLE\"; radius: number; }\n\n// Infer specific sub types of the union\ntype ShapeTypeRectangle = a.inferSubType<Shape, 'type', 'RECTANGLE'>; // { type \"RECTANGLE\"; width: number; height: number; };\ntype ShapeTypeCircle = a.inferSubType<Shape, 'type', 'CIRCLE'>; // { type \"CIRCLE\"; radius: number; }\n\na.validate(Shape, {\n    type: 'RECTANGLE',\n    width: 1,\n    height: 1.5,\n}); // true\na.validate(Shape, {\n    type: 'CIRCLE',\n    radius: 5,\n}); // true\na.validate(Shape, {\n    type: 'CIRCLE',\n    width: 1,\n    height: 1.5,\n}); // false\n```\n\n----------------------------------------\n\nTITLE: Optional Properties Schema Form in Arri Type Definition\nDESCRIPTION: This schema form allows specifying optional properties for an object. The `optionalProperties` field defines the schema for each optional property.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"properties\": {\n        \"name\": { \"type\": \"string\" },\n        \"isAdmin\": { \"type\": \"boolean\" }\n    },\n    \"optionalProperties\": {\n        \"middleName\": { \"type\": \"string\" }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ATD Output for Optional Fields\nDESCRIPTION: This snippet shows the ATD output for the optional fields in the `User` struct. It defines `Name` and `Email` as optional properties.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"id\": { \"type\": \"string\" }\n    },\n    \"optionalProperties\": {\n        \"name\": { \"type\": \"string\" },\n        \"email\": { \"type\": \"string\" }\n    },\n    \"metadata\": {\n        \"id\": \"User\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JTD Output for Discriminated Union\nDESCRIPTION: This snippet shows the JTD output for the discriminated union example (`Shape`, `Rectangle`, `Circle`). It defines the discriminator field and the mapping between the discriminator values and the corresponding subtypes.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"discriminator\": \"type\",\n    \"mapping\": {\n        \"RECTANGLE\": {\n            \"properties\": {\n                \"width\": {\n                    \"type\": \"float32\"\n                },\n                \"height\": {\n                    \"type\": \"float32\"\n                }\n            },\n            \"metadata\": {\n                \"id\": \"Rectangle\"\n            }\n        },\n        \"CIRCLE\": {\n            \"properties\": {\n                \"radius\": {\n                    \"type\": \"float32\"\n                }\n            },\n            \"metadata\": {\n                \"id\": \"Circle\"\n            }\n        }\n    },\n    \"metadata\": {\n        \"id\": \"Shape\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Arri Config Example (Typescript)\nDESCRIPTION: Example of an Arri configuration file (`arri.config.ts`) defining which client generators to use (Dart, Kotlin, and Typescript). It shows how to import the necessary modules and define the generators array with configuration options for each generator.\nSOURCE: https://github.com/modiimedia/arri/blob/master/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// arri.config.ts\nimport { defineConfig, generators } from 'arri';\n\nexport default defineConfig({\n    generators: [\n        generators.dartClient({\n            // options\n        }),\n        generators.kotlinClient({\n            // options\n        }),\n        generators.typescriptClient({\n            // options\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Output with Optional Fields\nDESCRIPTION: This snippet shows two example JSON outputs for the `User` struct with optional fields. One example shows the JSON with all optional values set, and the other shows the JSON with unset optional values.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n// with set optional values\n{\n    \"id\": \"1\",\n    \"name\": \"john doe\",\n    \"email\": \"johndoe@gmail.com\"\n}\n\n// with unset optional values\n{\n    \"id\": \"1\",\n}\n```\n\n----------------------------------------\n\nTITLE: Properties Schema Form in Arri Type Definition\nDESCRIPTION: This schema form is used to describe objects with specific properties. The `properties` field defines the schema for each property in the object. Extra properties are ignored by default.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"properties\": {\n        \"name\": { \"type\": \"string\" },\n        \"isAdmin\": { \"type\": \"boolean\" }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add ArriClient as a target dependency (Swift)\nDESCRIPTION: This code snippet shows how to add `ArriClient` as a dependency to a specific target in your Swift project using Swift Package Manager. The target represents a module or executable in your project, and this declaration ensures that the ArriClient library is linked and available to that target during compilation and runtime.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/swift/swift-codegen/README.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n.target(\n    name: \"MyApp\",\n    dependencies: [\n        .product(name: \"ArriClient\", package: \"arri-client-swift\")\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Arri Go Server Plugin in TypeScript\nDESCRIPTION: This code defines an Arri server plugin using TypeScript. It uses the `defineServerConfig` function to configure the plugin, including `devFn` and `buildFn` for development and build processes, respectively. The plugin executes 'go generate', reads an App Definition from a JSON file, runs Arri generators, and either starts ('go run') or builds ('go build') the Go application.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/implementing-an-arri-server.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst goServer = defineServerConfig({\n    devArgs: {},\n    devFn(_, generators) {\n        // run \"go generate\"\n        execSync(\"go generate\", {\n            stdio: \"inherit\",\n        });\n        // read the App Definition\n        const appDef = JSON.parse(\n            readFileSync(\".arri/__definition.json\", \"utf8\"),\n        ) as AppDefinition;\n        // run all of the registered Arri generators\n        await Promise.all(generators.map((item) => item.generator(appDef)));\n        // start the go application\n        execSync(\"go run main.go\", {\n            stdio: 'inherit'\n        });\n    },\n    buildArgs: {},\n    buildFn(_, generators) {\n        // run \"go generate\"\n        execSync(\"go generate\", {\n            stdio: \"inherit\",\n        });\n        // read the App Definition\n        const appDef = JSON.parse(\n            readFileSync(\".arri/__definition.json\", \"utf8\"),\n        ) as AppDefinition;\n        // run all of the registered Arri generators\n        await Promise.all(generators.map((item) => item.generator(appDef)));\n        // run \"go build\"\n        execSync(\"go build\", {\n            stdio: \"inherit\"\n        })\n    },\n});\n\nexport default defineConfig({\n    server: goServer,\n    generators: [...]\n})\n```\n\n----------------------------------------\n\nTITLE: ATD Output for Discriminated Union Schema\nDESCRIPTION: This JSON snippet shows the ATD output for a discriminated union schema. It specifies the discriminator field, the possible values for the discriminator, and the schema for each possible object type.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"discriminator\": \"type\",\n    \"mapping\": {\n        \"RECTANGLE\": {\n            \"properties\": {\n                \"width\": {\n                    \"type\": \"float32\"\n                },\n                \"height\": {\n                    \"type\": \"float32\"\n                }\n            }\n        },\n        \"CIRCLE\": {\n            \"properties\": {\n                \"radius\": {\n                    \"type\": \"float32\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Arrays and Slices Example - Arri Go\nDESCRIPTION: This demonstrates the use of slices in Go, and how it's represented in ATD.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n[]string\n```\n\n----------------------------------------\n\nTITLE: JSON Output for Discriminated Union\nDESCRIPTION: This snippet shows the JSON output of the discriminated union after serialization. It includes the `type` field, which indicates the subtype, and the properties of the `Rectangle` subtype.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"RECTANGLE\",\n    \"width\": 10,\n    \"height\": 20\n}\n```\n\n----------------------------------------\n\nTITLE: Ref Schema Usage Example\nDESCRIPTION: This JSON snippet demonstrates an example of data that conforms to the `BinaryTree` schema defined using the \"ref\" keyword. The `left` and `right` properties are nested, showcasing the recursive nature of the schema. Null values are also used, demonstrating the `isNullable` keyword's function.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"left\": {\n        \"left\": {\n            \"left\": null,\n            \"right\": null\n        },\n        \"right\": null\n    },\n    \"right\": {\n        \"left\": null,\n        \"right\": null\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Strict Objects in TypeScript\nDESCRIPTION: This snippet demonstrates defining an object schema in strict mode, where validation fails if additional properties are present. It uses the `strict` option within the `a.object` function.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserStrict = a.object(\n    {\n        id: a.string(),\n        name: a.string(),\n        created: a.timestamp(),\n    },\n    {\n        strict: true,\n    },\n);\n\na.parse(UserStrict, {\n    id: '1',\n    name: 'johndoe',\n    created: new Date(),\n    bio: 'my name is joe',\n}); // fails parsing because of the additional field \"bio\"\n```\n\n----------------------------------------\n\nTITLE: Arrays and Slices ATD - Arri Go\nDESCRIPTION: This shows the Arri Type Definition (ATD) generated for a string slice.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"elements\": {\n        \"type\": \"string\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output for Discriminated Union (Circle)\nDESCRIPTION: This snippet shows the JSON output of the discriminated union when the circle subtype is serialized. It includes the `type` field and the `radius` property.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"CIRCLE\",\n\t\"radius\": 20\n}\n```\n\n----------------------------------------\n\nTITLE: Update HTTP Headers in Arri Subservice (Rust)\nDESCRIPTION: This demonstrates updating headers in a subservice. Changes will NOT propagate to the parent service. Assumes `new_headers` is defined and `client` has a subservice called `subservice`.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/rust/rust-codegen/README.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nclient.subservice.update_headers(new_headers);\n\n// this will still use the original headers\nclient.do_something();\n```\n\n----------------------------------------\n\nTITLE: EventStreamConnection Methods\nDESCRIPTION: This snippet lists some important methods used for event streams\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// send the stream to the client. Must be called before pushing any messages\nstream.send()\n// push a new message to the client\nstream.push(data: Data, eventId?: string)\n// close the stream and tell the client that there will be no more messages\nstream.close()\n// register a callback that will fire after the stream has been close by the server or the connection has been dropped\nstream.onClosed(cb: () => any)\n```\n\n----------------------------------------\n\nTITLE: JSON Output with Overridden Discriminator Field\nDESCRIPTION: This snippet shows the JSON output with the overridden discriminator field. The discriminator value is now in the `kind` field instead of the `type` field.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"kind\": \"RECTANGLE\",\n\t\"width\": 10,\n\t\"height\": 20\n}\n{\n\t\"kind\": \"CIRCLE\",\n\t\"radius\": 20\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Typescript Interface\nDESCRIPTION: This TypeScript snippet shows the output generated from the JSON schema using the `metadata` keyword. The `description` is used as a JSDoc comment for the interface, and the `isDeprecated` field is annotated with `@deprecated`.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This is a user\n */\ninterface User {\n    id: string;\n    name: string;\n    /**\n     * @deprecated\n     */\n    isAdmin: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Tree-Shakeable Imports Example (no `a` prefix)\nDESCRIPTION: This example shows how to use tree-shakeable imports without the `a` prefix by importing individual functions (string, boolean, object) directly from `@arrirpc/schema`.  This allows bundlers to remove unused Arri functions, reducing the final bundle size.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_13\n\nLANGUAGE: Typescript\nCODE:\n```\n// tree-shakeable (no `a` prefix)\nimport { string, boolean, object } from '@arrirpc/schema';\nconst User = object({\n    id: string(),\n    name: string(),\n    isAdmin: boolean(),\n});\n```\n\n----------------------------------------\n\nTITLE: Coercing Data Unsafely with Arri\nDESCRIPTION: This snippet shows how to use `a.coerceUnsafe()` to convert inputs to the correct type. If coercion fails, it throws an error. `someInput` is the object that needs to be coerced.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nconst A = a.object({\n    a: a.string(),\n    b: a.boolean(),\n    c: a.float32(),\n});\n\na.coerceUnsafe(A, someInput); // returns T but can throw an error\n```\n\n----------------------------------------\n\nTITLE: Run Rust Codegen Unit Tests (Bash)\nDESCRIPTION: This command executes the unit tests for the `rust-codegen` project using the Nx build system. It assumes that Nx is installed and configured correctly in the environment and that a project named `rust-codegen` exists with associated tests.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/rust/rust-codegen/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# run unit tests\nnx test rust-codegen\n```\n\n----------------------------------------\n\nTITLE: Running Arri Code Generator with npm\nDESCRIPTION: This command executes the Arri code generator using npm. It specifies the path to the definitions file containing the Arri schemas. This command triggers the code generation process defined in the arri config file.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\n# npm\nnpx arri codegen ./definitions.ts\n```\n\n----------------------------------------\n\nTITLE: Type Schema Form in Arri Type Definition\nDESCRIPTION: This schema form is used to specify scalar value types. It defines the data type of a value, such as boolean, string, or number.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"type\": \"boolean\" }\n```\n\n----------------------------------------\n\nTITLE: Elements Schema Form in Arri Type Definition (Boolean)\nDESCRIPTION: This schema form is used to describe arrays where all elements have the same type. The `elements` field specifies the schema for each element in the array.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"elements\": { \"type\": \"boolean\" } }\n```\n\n----------------------------------------\n\nTITLE: Tree-Shakeable Imports Example (with `a` prefix)\nDESCRIPTION: This demonstrates tree-shakeable imports using the `a` prefix and importing all schema functions using `import * as a from '@arrirpc/schema'`.  Bundlers can still remove unused Arri functions, leading to a smaller bundle size.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_14\n\nLANGUAGE: Typescript\nCODE:\n```\n// tree-shakeable (with `a` prefix)\nimport * as a from '@arrirpc/schema';\nconst User = a.object({\n    id: a.string(),\n    name: a.string(),\n    isAdmin: a.boolean(),\n});\n```\n\n----------------------------------------\n\nTITLE: Recursive JSON Object\nDESCRIPTION: This JSON object demonstrates a recursive data structure where the object contains references to itself through 'left' and 'right' properties. It is used for testing recursive data structure handling in JSON parsing and serialization.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tests/test-files/README.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"left\": {\n    \"left\": { \"left\": null, \"right\": { \"left\": null, \"right\": null } },\n    \"right\": null\n  },\n  \"right\": { \"left\": null, \"right\": null }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Strict Properties Schema Form\nDESCRIPTION: This schema form does not enforce strict validation, accepting inputs with extra properties not explicitly defined in the schema.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"properties\": {\n        \"name\": { \"type\": \"string\" },\n        \"isAdmin\": { \"type\": \"boolean\" }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Tree-Shakeable Imports Example\nDESCRIPTION: This shows a non-tree-shakeable import where the `a` namespace is imported directly (`import { a } from '@arrirpc/schema';`). This import style prevents bundlers from effectively removing unused Arri functions, leading to a larger bundle size.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_15\n\nLANGUAGE: Typescript\nCODE:\n```\n// NOT tree-shakeable\nimport { a } from '@arrirpc/schema';\nconst User = a.object({\n    id: a.string(),\n    name: a.string(),\n    isAdmin: a.boolean(),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining arri.Option Interface\nDESCRIPTION: This snippet defines the `arri.Option` interface with methods for unwrapping the value, setting a new value, and unsetting the value.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_33\n\nLANGUAGE: go\nCODE:\n```\ntype Option[T] interface {\n    Unwrap() T bool\n    Set(val T)\n    Unset()\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Properties Schema Form - Valid Input 1\nDESCRIPTION: Example of a valid JSON input when middleName is not provided.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"name\": \"Abraham Lincoln\", \"isAdmin\": true }\n```\n\n----------------------------------------\n\nTITLE: JTD Output for Recursive Type\nDESCRIPTION: This snippet shows the JTD output for the recursive type `BinaryTree`. It defines the properties `left` and `right` as references to the `BinaryTree` type, making them nullable.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"left\": {\n            \"ref\": \"BinaryTree\",\n            \"nullable\": true\n        },\n        \"right\": {\n            \"ref\": \"BinaryTree\",\n            \"nullable\": true\n        }\n    },\n    \"metadata\": {\n        \"id\": \"BinaryTree\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Headers Across Threads (Rust)\nDESCRIPTION: This snippet demonstrates how to update HTTP headers across multiple threads using `Arc` and `tokio`.  It creates an Arri Rust client and spawns two asynchronous tasks that call procedures. It then updates the headers after a delay, ensuring that both threads use the updated headers. Requires `tokio`, `Arc`, `HashMap`, and `Duration` to be in scope and `client` to be created using `Arc`.  Also assumes `do_something()` and `do_another_thing()` are methods on the `client`.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/rust/rust-codegen/README.md#_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nlet mut headers: HashMap<&'static str, String> = HashMap::new();\nlet config = ArriClientConfig {\n    http_client: reqwest::Client::new(),\n    base_url: \"https://example.com\".to_string(),\n    headers: headers.clone(),\n};\nlet client = Arc::new(MyClient::create(config));\ntokio::spawn(async move {\n    loop {\n        client.do_something().await;\n    }\n});\ntokio::spawn(async move {\n    loop {\n        client.do_another_thing().await;\n    }\n});\n\n// wait two seconds then change the headers\ntokio::time::sleep(Duration::from_millis(2000)).await;\nheaders.insert(\"hello\", \"world\".to_string());\nclient.update_headers(headers.clone());\n// now both threads will start using the updated headers on their next loop\n```\n\n----------------------------------------\n\nTITLE: Strict Mode Properties Schema Form - Rejected Input\nDESCRIPTION: Example JSON input that will be rejected by strict mode due to having an extra property named `extra`.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"name\": \"Abraham Lincoln\", \"isAdmin\": true, \"extra\": \"stuff\" }\n```\n\n----------------------------------------\n\nTITLE: JSON App Definition Example (JSON)\nDESCRIPTION: Example of a manually created JSON app definition, showing the structure for defining procedures and their associated request/response schemas. Includes the `schemaVersion`, definitions for the request and response objects, and metadata. Manually creating this is more error-prone than the Typescript equivalent.\nSOURCE: https://github.com/modiimedia/arri/blob/master/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"schemaVersion\": \"<current-schema-version>\",\n    \"procedures\": {\n        \"sayHello\": {\n            \"transport\": \"http\",\n            \"method\": \"get\",\n            \"path\": \"/say-hello\",\n            \"params\": \"HelloParams\",\n            \"response\": \"HelloResponse\"\n        }\n    },\n    \"definitions\": {\n        \"HelloParams\": {\n            \"properties\": {\n                \"message\": {\n                    \"type\": \"string\",\n                    \"metadata\": {}\n                }\n            },\n            \"metadata\": {\n                \"id\": \"HelloParams\",\n                \"metadata\": {}\n            }\n        },\n        \"HelloResponse\": {\n            \"properties\": {\n                \"message\": {\n                    \"type\": \"string\",\n                    \"metadata\": {}\n                }\n            },\n            \"metadata\": {\n                \"id\": \"HelloResponse\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Struct Definition\nDESCRIPTION: This snippet demonstrates an invalid way to define structs and parameters for Arri RPC methods.  Inlined structs as parameters or return values are not supported and will cause a panic.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfunc GetPost(\n    // inlined structs cannot go here\n    params struct{PostId string},\n    c arri.DefaultContext,\n)\n(\n    // inlined structs cannot go here\n    struct{\n        Id string,\n        Author struct{\n            Id string,\n            Name string,\n        },\n        Content string,\n    },\n    arri.RpcError,\n) {\n    // rpc content\n}\n```\n\n----------------------------------------\n\nTITLE: Project Scaffolding\nDESCRIPTION: This command demonstrates how to use the scaffolding script to create a new code-generator or tooling project within the Arri RPC repository.\nSOURCE: https://github.com/modiimedia/arri/blob/master/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm scaffold\n```\n\n----------------------------------------\n\nTITLE: ATD Output for Undefinable Modifier\nDESCRIPTION: This JSON snippet shows the ATD output for using `a.undefinable()`. Similar to optional, properties are split between properties and optionalProperties keys.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\"\n        },\n        \"date\": {\n            \"type\": \"timestamp\"\n        }\n    },\n    \"optionalProperties\": {\n        \"email\": {\n            \"type\": \"string\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Development Commands for Arri Dart Codegen (Bash)\nDESCRIPTION: These bash commands are used for developing the Arri Dart codegen library itself. They include commands for building the library, running tests, and linting the code, utilizing `pnpm` and `nx` for project management and execution.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/dart/dart-codegen/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# build the library\npnpm nx build codegen-dart\n\n# test\npnpm nx test codegen-dart\n\n# lint\npnpm nx lint codegen-dart\n```\n\n----------------------------------------\n\nTITLE: JSON Object: Optional Fields (No Undefined, Reversed Record)\nDESCRIPTION: This JSON object represents an object with optional fields, all defined, and a reversed record field. It is similar to 'ObjectWithOptionalFields_NoUndefined.json' but the fields in the 'record' object are reversed. It is designed to test the ordering of fields within a record.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tests/test-files/README.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"string\": \"\",\n  \"boolean\": false,\n  \"timestamp\": \"2001-01-01T16:00:00.000Z\",\n  \"float32\": 1.5,\n  \"float64\": 1.5,\n  \"int8\": 1,\n  \"uint8\": 1,\n  \"int16\": 10,\n  \"uint16\": 10,\n  \"int32\": 100,\n  \"uint32\": 100,\n  \"int64\": \"1000\",\n  \"uint64\": \"1000\",\n  \"enum\": \"BAZ\",\n  \"object\": { \"id\": \"1\", \"content\": \"hello world\" },\n  \"array\": [true, false, false],\n  \"record\": { \"B\": false, \"A\": true },\n  \"discriminator\": {\n    \"typeName\": \"C\",\n    \"id\": \"\",\n    \"name\": \"\",\n    \"date\": \"2001-01-01T16:00:00.000Z\"\n  },\n  \"any\": \"hello world\"\n}\n```\n\n----------------------------------------\n\nTITLE: ArriClientEnum protocol definition (Swift)\nDESCRIPTION: This code snippet defines the `ArriClientEnum` protocol, which all generated standard enums conform to.  It includes an initializer for creating instances from a serialized value and a method for converting an instance to its serialized value. The Equatable protocol enables comparing instances for equality.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/swift/swift-codegen/README.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol ArriClientEnum: Equatable {\n    init()\n    init(serialValue: String)\n    func serialValue() -> String\n}\n```\n\n----------------------------------------\n\nTITLE: Working with arri.Nullable\nDESCRIPTION: This snippet shows examples for initializing and working with the `arri.Nullable` type.  It demonstrates initializing with a value (`arri.NotNull`) or without a value (`arri.Null`), and methods for extracting values (`Unwrap`, `UnwrapOr`), checking if a value is null (`IsNull`), and updating/unsetting values (`Set`, `Unset`).\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_37\n\nLANGUAGE: go\nCODE:\n```\n// initializing nullable types\nnullableString := arri.NotNull(\"hello world\") // initialize nullable with value\nnullableString := arri.Null[string]() // initialize nullable without value\n\n// working with nullables\nnullableString.Unwrap() // extract the inner value. panics if not set\nnullableString.UnwrapOr(\"some-fallback\") // extract the inner value if it exists. if it doesn't exists return the fallback\nnullableString.IsNull() // returns true if null\nnullableString.Set(\"hello world again\") // update the inner value\nnullableString.Unset() // unset the inner value\n```\n\n----------------------------------------\n\nTITLE: ATD Output for Map\nDESCRIPTION: This snippet shows the ATD output for a map with string keys and boolean values.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"values\": {\n        \"type\": \"boolean\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Schema Form in Arri Type Definition\nDESCRIPTION: This schema form accepts any value and rejects nothing. It is equivalent to `any` in TypeScript.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Defining a Server Plugin (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates defining a server plugin for the Arri CLI using the `defineServerConfig` helper. It defines CLI arguments and corresponding handler functions for the `dev` and `build` commands, allowing for custom server behavior.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/implementing-an-arri-server.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineServerConfig } from \"arri\";\n\nconst myCustomConfig = defineServerConfig({\n    devArgs: {\n        // define what CLI args the \"dev\" command accepts\n        foo: {\n            type: \"string\",\n            required: false,\n        },\n    },\n    devFn(args, generators) {\n        console.log(args.foo); // foo is now available here\n    },\n    buildArgs: {\n        // define what CLI args the \"build\" command accepts\n        bar: {\n            type: \"boolean\",\n        },\n    },\n    buildFn(args, generators) {\n        console.log(args.bar); // bar is now available here\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Properties Schema Form - Invalid Input\nDESCRIPTION: An example of an invalid JSON input for the properties schema because `isAdmin` has the wrong type (string instead of boolean).\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"name\": \"Abraham Lincoln\", \"isAdmin\": \"yes\" }\n```\n\n----------------------------------------\n\nTITLE: Project JSON Example\nDESCRIPTION: This snippet showcases a simple project.json file used by NX to define project configurations and targets. It includes the project name, schema path, and target definitions with executor and command options.\nSOURCE: https://github.com/modiimedia/arri/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"my-awesome-project\",\n    \"schemaPath\": \"../../path-to/node_modules/nx/schemas/project-schema.json\"\n    \"targets\": {\n        \"foo\": {\n            \"executor\": \"nx:run-commands\",\n            \"options\": {\n                \"command\": \"echo 'foo'\",\n                \"cwd\": \"path/to/my-awesome-project\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Definition - Arri Go\nDESCRIPTION: This code demonstrates the usage of the `enum` tag on string fields to define enums for generated clients, along with the `enumName` tag to manually define the name of the enum.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tId string\n\tName string\n\tRole string `enum:\"STANDARD,ADMIN\"`\n}\n```\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tId string\n\tName string\n\tRole string `enum:\"STANDARD,ADMIN\" enumName:\"Role\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Simple JSON Object: Book\nDESCRIPTION: This JSON object represents a book with properties like id, name, createdAt, and updatedAt. It demonstrates a simple object structure with string values and date-time strings.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tests/test-files/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"1\",\n  \"name\": \"The Adventures of Tom Sawyer\",\n  \"createdAt\": \"2001-01-01T16:00:00.000Z\",\n  \"updatedAt\": \"2001-01-01T16:00:00.000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Arri Model and RPC Definition (Rust)\nDESCRIPTION: This Rust code demonstrates defining Arri models (`UserParams`, `User`) and an RPC (`get_user`) using procedural macros. The `ArriModel` derive macro generates the necessary code for the models, and the `rpc` attribute macro defines the RPC endpoint and associates it with the handler function.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/implementing-an-arri-server.md#_snippet_6\n\nLANGUAGE: Rust\nCODE:\n```\n#[derive(ArriModel)]\nstruct UserParams {\n    user_id: String,\n}\n\n#[derive(ArriModel)]\nstruct User {\n    id: String,\n    name: String,\n}\n\n#[rpc(\"/users/get-user\")]\nasync fn get_user(params: UserParams) -> Result<User, ()> {\n    // implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: ATD Output for Recursive Type Schema\nDESCRIPTION: This JSON snippet shows the ATD output for a recursive type schema.  It uses a reference (`ref`) to the schema's ID to indicate the recursion.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"left\": {\n            \"ref\": \"BinaryTree\",\n            \"nullable\": true\n        },\n        \"right\": {\n            \"ref\": \"BinaryTree\",\n            \"nullable\": true\n        }\n    },\n    \"metadata\": {\n        \"id\": \"BinaryTree\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Object: Optional Fields (All Undefined)\nDESCRIPTION: This JSON object represents an object with optional fields where all fields are undefined (not present).  It tests the handling of missing optional fields.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tests/test-files/README.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Output Example\nDESCRIPTION: This Kotlin code displays the generated output for a User data class based on an Arri schema.  It demonstrates the use of `String`, `String?` for nullable strings and `Instant` for timestamp. The `createdAt` field contains a KDoc comment for its description.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\n// kotlin output\n\ndata class User(\n  val id: String,\n  val name: String?,\n  val email: String? = null,\n  /**\n   * When the user was created\n   */\n  val createdAt: Instant,\n  val updatedAt: Instance,\n) {\n  // implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: ATD Output for Enum Schema\nDESCRIPTION: This JSON snippet represents the ATD (Abstract Type Definition) output for an enum schema.  It defines the accepted values for the enumeration.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"enum\": [\"ACTIVE\", \"INACTIVE\", \"UNKNOWN\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building\nDESCRIPTION: This snippet demonstrates how to install dependencies and build the TypeScript projects needed to get started with Arri RPC. It uses pnpm to install dependencies and then build the required projects.\nSOURCE: https://github.com/modiimedia/arri/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Accessing H3 Events in Arri Procedures (typescript)\nDESCRIPTION: This TypeScript code illustrates how to access H3 events within Arri procedure handlers. The `event` object is passed as an argument to the handler function, allowing access to H3 utilities like `getRequestIP`. This applies to both regular and event stream RPCs.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ndefineRpc({\n    params: undefined,\n    response: undefined,\n    handler(_, event) {\n        getRequestIP(event);\n    },\n});\n\ndefineEventStreamRpc({\n    params: undefined,\n    response: undefined,\n    handler(_, event) {\n        getRequestIP(event);\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Values Schema Form in Arri Type Definition\nDESCRIPTION: This schema form is used to describe records/dictionaries where you don't know the keys, but you do know the type of the values. All keys are expected to be strings.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"values\": { \"type\": \"boolean\" } }\n```\n\n----------------------------------------\n\nTITLE: Initialize Arri Rust Service (Rust)\nDESCRIPTION: This snippet demonstrates initializing a specific service from the generated Arri Rust client.  It initializes the `MyClientUsersService` with a configuration object.  This allows calling procedures specific to that service. Requires `config` variable to be pre-defined.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/rust/rust-codegen/README.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet users_service = MyClientUsersService(config);\nusers_service.some_procedure().await;\n```\n\n----------------------------------------\n\nTITLE: Initializing arri.OrderedMap with Data\nDESCRIPTION: This snippet demonstrates how to initialize an `arri.OrderedMap` with data using `arri.OrderedMapWithData`. It takes a variable number of `arri.Pair` arguments.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_40\n\nLANGUAGE: go\nCODE:\n```\nm := arri.OrderedMapWithData(\n    arri.Pair(\"Foo\", true),\n    arri.Pair(\"Bar\", false),\n)\n```\n\n----------------------------------------\n\nTITLE: Serializing Data Unsafely with Arri\nDESCRIPTION: This snippet shows how to use `a.serializeUnsafe()` to serialize data to a JSON string. If serialization fails, it throws an error. No validation is performed before serializing.  The `User` object is serialized.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = a.object({\n    id: a.string(),\n    name: a.string(),\n});\n\nconst result = a.serialize(User, { id: '1', name: 'john doe' }); // might throw an error\n// '{\"id\":\"1\",\"name\":\"john doe\"}''\n```\n\n----------------------------------------\n\nTITLE: Arri CLI Usage Examples (Bash)\nDESCRIPTION: These bash commands demonstrate how to use the Arri CLI with the defined server plugin. They show how to pass custom arguments to the `dev` and `build` commands, which are then handled by the plugin's handler functions.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/implementing-an-arri-server.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\narri dev --foo \"hello world\" # outputs \"hello world\"\narri build --bar # outputs false\n```\n\n----------------------------------------\n\nTITLE: Enum Schema Form in Arri Type Definition\nDESCRIPTION: This schema form is used to define a set of allowed string values. The value must be one of the strings specified in the enum.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"enum\": [\"FOO\", \"BAR\", \"BAZ\"] }\n```\n\n----------------------------------------\n\nTITLE: ATD Output for Record/Map Schema\nDESCRIPTION: This JSON snippet represents the ATD output for a record/map schema, indicating the type of values the record holds.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"values\": {\n        \"type\": \"boolean\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output with Nullable Types\nDESCRIPTION: This snippet shows two JSON outputs for the `User` struct with nullable fields.  One shows all fields set, and the other shows `name` and `email` set to null.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n// with set nullable values / set pointers\n{\n    \"id\": \"1\",\n    \"name\": \"john doe\",\n    \"email\": \"johndoe@gmail.com\"\n}\n\n// with unset nullable values / unset pointers\n{\n    \"id\": \"1\",\n    \"name\": null,\n    \"email\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Schemas in TypeScript\nDESCRIPTION: Demonstrates using `a.clone()` to create a copy of a schema without copying its metadata (e.g., id).\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst A = a.object(\n    {\n        a: a.string(),\n        b: a.float32(),\n    },\n    { id: 'A' },\n);\nconsole.log(A.metadata.id); // \"A\"\n\nconst B = a.clone(A);\nconsole.log(B.metadata.id); // undefined\n```\n\n----------------------------------------\n\nTITLE: Properties Schema Form - Valid Input 1\nDESCRIPTION: An example of a valid JSON input that matches the properties schema.  It contains the required name and isAdmin fields with the correct types.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"name\": \"Abraham Lincoln\", \"isAdmin\": true }\n```\n\n----------------------------------------\n\nTITLE: ATD Output for Strict Object Schema\nDESCRIPTION: This JSON snippet represents the ATD output for a strict object schema. It specifies the properties, their types, and indicates that the object is in strict mode.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\"\n        },\n        \"email\": {\n            \"type\": \"string\"\n        },\n        \"created\": {\n            \"type\": \"timestamp\"\n        }\n    },\n    \"strict\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Arri Configuration File (arri.config.ts)\nDESCRIPTION: This snippet shows a sample `arri.config.ts` file. It defines the server configuration using `servers.tsServer()` and generators for Typescript and Dart clients.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// arri.config.ts\nimport { defineConfig, servers, generators } from 'arri';\n\nexport default defineConfig({\n    server: servers.tsServer(),\n    generators: [\n        generators.typescriptClient({\n            // options\n        }),\n        generators.dartClient({\n            // options\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Server Plugin with Options (TypeScript)\nDESCRIPTION: This TypeScript code shows how to register a server plugin with custom options in the Arri configuration file. This passes the configuration options to the plugin's wrapper function during initialization.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/implementing-an-arri-server.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default defineConfig({\n    server: myCustomServer({\n        port: 3000,\n    }),\n    generators: [...],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Event Type in Arri Procedure in Go\nDESCRIPTION: This code snippet shows how to use the custom event type, `MyCustomEvent`, in an Arri procedure. The procedure `DoSomething` takes `MyCustomEvent` as an argument, allowing access to the custom event data within the procedure's logic.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_43\n\nLANGUAGE: go\nCODE:\n```\nfunc DoSomething(params SomeParamStruct, event MyCustomEvent) (SomeResponseStruct, arri.Error) {\n    return SomeResponseStruct{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: ATD Output for Optional Modifier\nDESCRIPTION: This JSON snippet shows the ATD output for using `a.optional()`. It includes all required properties inside the properties array and all optional properties inside the optionalProperties array.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\"\n        },\n        \"date\": {\n            \"type\": \"timestamp\"\n        }\n    },\n    \"optionalProperties\": {\n        \"email\": {\n            \"type\": \"string\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Arri Dependencies (pnpm)\nDESCRIPTION: This snippet demonstrates how to install the necessary dependencies for Arri using pnpm. It includes installing the `arri`, `@arrirpc/server`, and `@arrirpc/schema` packages.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# pnpm\npnpm install -D arri\npnpm install @arrirpc/server @arrirpc/schema\n```\n\n----------------------------------------\n\nTITLE: Installing Arri Schema with pnpm\nDESCRIPTION: This command installs the @arrirpc/schema package using pnpm. This allows you to use Arri Schema in your Typescript project for schema definition and validation.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n# pnpm\npnpm install @arrirpc/schema\n```\n\n----------------------------------------\n\nTITLE: JSON Object: Nullable Fields (No Null)\nDESCRIPTION: This JSON object represents an object where all fields are explicitly defined and not null. It tests that the system correctly handles non-null values for fields that are defined as nullable.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tests/test-files/README.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"string\": \"\",\n  \"boolean\": true,\n  \"timestamp\": \"2001-01-01T16:00:00.000Z\",\n  \"float32\": 1.5,\n  \"float64\": 1.5,\n  \"int8\": 1,\n  \"uint8\": 1,\n  \"int16\": 10,\n  \"uint16\": 10,\n  \"int32\": 100,\n  \"uint32\": 100,\n  \"int64\": \"1000\",\n  \"uint64\": \"1000\",\n  \"enum\": \"BAZ\",\n  \"object\": { \"id\": \"\", \"content\": \"\" },\n  \"array\": [true, false, false],\n  \"record\": { \"A\": true, \"B\": false },\n  \"discriminator\": {\n    \"typeName\": \"C\",\n    \"id\": \"\",\n    \"name\": \"\",\n    \"date\": \"2001-01-01T16:00:00.000Z\"\n  },\n  \"any\": { \"message\": \"hello world\" }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Object: Every Type\nDESCRIPTION: This JSON object demonstrates the usage of various data types, including strings, booleans, timestamps, floating-point numbers, integers, enums, objects, arrays, records, discriminators, and any types. It covers a wide range of JSON data types and structures.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tests/test-files/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"string\": \"\",\n  \"boolean\": false,\n  \"timestamp\": \"2001-01-01T16:00:00.000Z\",\n  \"float32\": 1.5,\n  \"float64\": 1.5,\n  \"int8\": 1,\n  \"uint8\": 1,\n  \"int16\": 10,\n  \"uint16\": 10,\n  \"int32\": 100,\n  \"uint32\": 100,\n  \"int64\": \"1000\",\n  \"uint64\": \"1000\",\n  \"enum\": \"BAZ\",\n  \"object\": { \"id\": \"1\", \"content\": \"hello world\" },\n  \"array\": [true, false, false],\n  \"record\": { \"A\": true, \"B\": false },\n  \"discriminator\": {\n    \"typeName\": \"C\",\n    \"id\": \"\",\n    \"name\": \"\",\n    \"date\": \"2001-01-01T16:00:00.000Z\"\n  },\n  \"any\": \"hello world\"\n}\n```\n\n----------------------------------------\n\nTITLE: NX Command Usage\nDESCRIPTION: This snippet illustrates basic usage of NX for building and testing different projects within the Arri RPC repository. It shows examples for building TypeScript projects, compiling Rust projects, and running tests for Dart code generation.\nSOURCE: https://github.com/modiimedia/arri/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# basic usage\npnpm nx [target] [project-name]\n\n# examples\npnpm nx build ts-server\npnpm nx compile rust-client\npnpm nx test dart-codegen\n\n# Sidenote:\n# If you choose to install NX globally you can omit the `pnpm` prefix\n```\n\n----------------------------------------\n\nTITLE: ATD Output for Object Schema\nDESCRIPTION: This JSON snippet represents the ATD output for an object schema.  It describes the properties of the object and their corresponding types.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\"\n        },\n        \"email\": {\n            \"type\": \"string\"\n        },\n        \"created\": {\n            \"type\": \"timestamp\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON response with unknown Enum Value\nDESCRIPTION: This JSON represents the server's response that include an enum value unknown to client side. This should lead to fallback strategy\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/creating-a-custom-generator.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"1\",\n    \"name\": \"John Doe\",\n    \"role\": \"MODERATOR\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enum ATD - Arri Go\nDESCRIPTION: This example illustrates the Arri Type Definition (ATD) output for an enum, including the defined values and the metadata ID.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/go/go-server/README.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"enum\": [\"STANDARD\", \"ADMIN\"],\n    \"metadata\": {\n        \"id\": \"UserRole\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"enum\": [\"STANDARD\", \"ADMIN\"],\n    \"metadata\": {\n        \"id\": \"Role\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialized Rust User with Enum Fallback\nDESCRIPTION: This demonstrates how a Rust client should initialize the `User` struct when receiving an unknown `UserRole` from the server. The `role` field falls back to the first specified enum value (`UserRole::Standard`).\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/creating-a-custom-generator.md#_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nUser {\n    id: \"1\".to_string(),\n    name: \"John Doe\".to_string(),\n    role: UserRole::Standard, // this is the fallback value\n}\n```\n\n----------------------------------------\n\nTITLE: ATD Output for Array Schema\nDESCRIPTION: This JSON snippet represents the ATD output for an array schema. It indicates the type of elements the array should contain.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"elements\": {\n        \"type\": \"string\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Properties Schema Form - Valid Input 2\nDESCRIPTION: An example of a valid JSON input that matches the properties schema, even with extra properties. Extra properties are ignored by default.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"name\": \"Abraham Lincoln\", \"isAdmin\": true, \"extra\": \"stuff\" }\n```\n\n----------------------------------------\n\nTITLE: isNullable Keyword Example\nDESCRIPTION: This JSON snippet demonstrates the usage of the `isNullable` keyword with a simple string type. This allows the schema to accept both a string value and `null`.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{ \"type\": \"string\", \"isNullable\": true }\n```\n\n----------------------------------------\n\nTITLE: Typescript App Definition with Definitions Only (Typescript)\nDESCRIPTION: Example of creating an Arri app definition using Typescript with only the definitions. This is useful if you only need cross language types. This will generate the types for each client defined in the arri config.\nSOURCE: https://github.com/modiimedia/arri/blob/master/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// AppDefinition.ts\nimport { createAppDefinition } from 'arri';\nimport { a } from '@arrirpc/schema';\n\nconst HelloParams = a.object('HelloParams', {\n    message: a.string(),\n});\n\nconst HelloResponse = a.object('HelloResponse', {\n    message: a.string(),\n});\n\nexport default createAppDefinition({\n    definitions: {\n        HelloParams,\n        HelloResponse,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Rust Output Example\nDESCRIPTION: This Rust code shows the generated output for a User struct based on an Arri schema.  It demonstrates the use of `String` and `Option<String>` for string and nullable string types, respectively, and `DateTime<FixedOffset>` for timestamp types. The `created_at` field includes a comment explaining its purpose.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_11\n\nLANGUAGE: Rust\nCODE:\n```\n// rust output\n\npub struct User {\n  id: String,\n  name: String,\n  name: Option<String>,\n  email: Option<String>,\n  // when the user was created\n  created_at: DateTime<FixedOffset>,\n  updated_at: DateTime<FixedOffset>,\n}\n\nimpl ArriModel for User {\n  // implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Object: Optional Fields (No Undefined)\nDESCRIPTION: This JSON object represents an object with optional fields, but all fields are explicitly defined with values.  It tests the handling of optional fields that are present.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tests/test-files/README.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"string\": \"\",\n  \"boolean\": false,\n  \"timestamp\": \"2001-01-01T16:00:00.000Z\",\n  \"float32\": 1.5,\n  \"float64\": 1.5,\n  \"int8\": 1,\n  \"uint8\": 1,\n  \"int16\": 10,\n  \"uint16\": 10,\n  \"int32\": 100,\n  \"uint32\": 100,\n  \"int64\": \"1000\",\n  \"uint64\": \"1000\",\n  \"enum\": \"BAZ\",\n  \"object\": { \"id\": \"1\", \"content\": \"hello world\" },\n  \"array\": [true, false, false],\n  \"record\": { \"A\": true, \"B\": false },\n  \"discriminator\": {\n    \"typeName\": \"C\",\n    \"id\": \"\",\n    \"name\": \"\",\n    \"date\": \"2001-01-01T16:00:00.000Z\"\n  },\n  \"any\": \"hello world\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Playground Dev Servers\nDESCRIPTION: These commands show how to spin up the Typescript and Go server playgrounds using NX's dev command. These are intended for experimentation.\nSOURCE: https://github.com/modiimedia/arri/blob/master/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# spin up the Typescript server playground\npnpm nx dev ts-playground\n\n# spin up the Go server playground\npnpm nx dev go-playground\n```\n\n----------------------------------------\n\nTITLE: Elements Schema Form in Arri Type Definition\nDESCRIPTION: This schema form is used to describe arrays where all elements have the same type. The `elements` field specifies the schema for each element in the array.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"elements\": { \"type\": \"string\" } }\n```\n\n----------------------------------------\n\nTITLE: Arri Codegen Command (Bash)\nDESCRIPTION: Example commands to run the Arri code generator, specifying different input file types for the app definition. The input can be a Typescript file, a JSON file, or a JSON HTTP endpoint. Requires an existing Arri configuration file.\nSOURCE: https://github.com/modiimedia/arri/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\narri codegen ./AppDefinition.ts\n\narri codegen ./AppDefinition.json\n\narri codegen https://myapi.com/rpcs/__definition # must accept a GET request\n```\n\n----------------------------------------\n\nTITLE: gitignore Configuration\nDESCRIPTION: This snippet shows how to configure your .gitignore file to exclude temporary and build output directories, as well as node_modules.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-server/README.md#_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\n.arri\n.output\nnode_modules\n```\n\n----------------------------------------\n\nTITLE: ATD Output for Nullable Modifier\nDESCRIPTION: This JSON snippet represents the ATD output when using `a.nullable()`. It adds a `nullable` property with a value of `true` to the type definition.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"string\",\n    \"nullable\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Rust Struct\nDESCRIPTION: This Rust snippet shows the output generated from the JSON schema using the `metadata` keyword. The `description` is used as a comment for the struct, and the `isDeprecated` field is annotated with `#[deprecated]`.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_23\n\nLANGUAGE: rust\nCODE:\n```\n// This is a user\npub struct User {\n    pub id: String,\n    pub name: String,\n    #[deprecated]\n    pub isAdmin: Boolean,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests\nDESCRIPTION: This command demonstrates how to run integration tests for a specific language client using NX. Replace `{{language}}` with the actual language name.\nSOURCE: https://github.com/modiimedia/arri/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx integration-test test-client-{{language}}\n```\n\n----------------------------------------\n\nTITLE: Strict Mode Properties Schema Form in Arri Type Definition\nDESCRIPTION: This schema form enforces strict validation, rejecting inputs with extra properties not explicitly defined in the schema. The `isStrict` field is set to true to enable strict mode.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"properties\": {\n        \"name\": { \"type\": \"string\" },\n        \"isAdmin\": { \"type\": \"boolean\" }\n    },\n    \"isStrict\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffold Arri Generator Plugin Project (Bash)\nDESCRIPTION: This command scaffolds a new Arri generator plugin project in the specified directory using the Arri CLI. It initializes a basic project structure with necessary files and configurations.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/creating-a-custom-generator.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\narri init ./my-generator --type plugin\n```\n\n----------------------------------------\n\nTITLE: Example Rust enum and struct definition\nDESCRIPTION: This is an example of Rust code defining a User struct with a UserRole enum. This is an example where the server sends an enum value that the client doesn't understand.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/creating-a-custom-generator.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub struct User {\n    pub id: String,\n    pub name: String,\n    pub role: UserRole,\n}\n\npub enum UserRole {\n    Standard, // with the serial value being \"STANDARD\"\n    Admin, // with the serial value being \"ADMIN\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Object: Every Type Reversed Record\nDESCRIPTION: Similar to 'ObjectWithEveryType.json', but with the order of the 'record' fields reversed. This tests how the order of fields within a record is handled.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tests/test-files/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"string\": \"\",\n  \"boolean\": false,\n  \"timestamp\": \"2001-01-01T16:00:00.000Z\",\n  \"float32\": 1.5,\n  \"float64\": 1.5,\n  \"int8\": 1,\n  \"uint8\": 1,\n  \"int16\": 10,\n  \"uint16\": 10,\n  \"int32\": 100,\n  \"uint32\": 100,\n  \"int64\": \"1000\",\n  \"uint64\": \"1000\",\n  \"enum\": \"BAZ\",\n  \"object\": { \"id\": \"1\", \"content\": \"hello world\" },\n  \"array\": [true, false, false],\n  \"record\": { \"B\": false, \"A\": true },\n  \"discriminator\": {\n    \"typeName\": \"C\",\n    \"id\": \"\",\n    \"name\": \"\",\n    \"date\": \"2001-01-01T16:00:00.000Z\"\n  },\n  \"any\": \"hello world\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Arri CLI with pnpm\nDESCRIPTION: This command installs the Arri CLI as a development dependency using pnpm. The Arri CLI is used for compiling Arri schemas to other languages.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n# pnpm\npnpm i --save-dev arri\n```\n\n----------------------------------------\n\nTITLE: Nested JSON Object: With Special Characters\nDESCRIPTION: This JSON object contains a nested 'content' field with a string that includes various special characters such as double quotes, backslashes, and unicode characters. It demonstrates how special characters should be escaped within JSON strings.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tests/test-files/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"1\",\n  \"content\": \"double-quote: \\\" | backslash: \\\\ | backspace: \\b | form-feed: \\f | newline: \\n | carriage-return: \\r | tab: \\t | unicode: \\u0000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ArriClient as Target Dependency in Swift\nDESCRIPTION: This code snippet shows how to add `ArriClient` as a target dependency to your Swift project using Swift Package Manager. This is done within the `.target` configuration.  It specifies that the target, named \"MyApp\" in this example, depends on the `ArriClient` product from the `arri-client-swift` package. This completes the installation of the dependency after adding it as a package.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/swift/swift-client/README.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n.target(\n    name: \"MyApp\",\n    dependencies: [\n        .product(name: \"ArriClient\", package: \"arri-client-swift\")\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Starting Test Servers\nDESCRIPTION: These commands show how to start the test servers (TypeScript and Go) using NX. This is needed to run integration tests against a specific language client.\nSOURCE: https://github.com/modiimedia/arri/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# ensure your code generators are the most recent build\npnpm build\n\n# start either the TS or Go test server\npnpm nx dev test-server-ts\npnpm nx dev test-server-go\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response without Email field\nDESCRIPTION: This JSON represents a server response with missing email property. This example is used for showing fallback strategy\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/creating-a-custom-generator.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"1\",\n    \"name\": \"John Doe\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Object: Nullable Fields (All Null)\nDESCRIPTION: This JSON object represents an object where all fields are explicitly set to null. It's used to test the handling of nullable fields and ensure that null values are correctly parsed and processed.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tests/test-files/README.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"string\": null,\n  \"boolean\": null,\n  \"timestamp\": null,\n  \"float32\": null,\n  \"float64\": null,\n  \"int8\": null,\n  \"uint8\": null,\n  \"int16\": null,\n  \"uint16\": null,\n  \"int32\": null,\n  \"uint32\": null,\n  \"int64\": null,\n  \"uint64\": null,\n  \"enum\": null,\n  \"object\": null,\n  \"array\": null,\n  \"record\": null,\n  \"discriminator\": null,\n  \"any\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Nested JSON Object: No Special Characters\nDESCRIPTION: This JSON object contains a nested 'content' field with a simple string. This example demonstrates the use of a simple string value within a JSON object without any special characters.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tests/test-files/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"id\": \"1\", \"content\": \"hello world\" }\n```\n\n----------------------------------------\n\nTITLE: Skipping Codegen During Arri Build\nDESCRIPTION: This command builds the Arri server for production but skips the code generation step. It's useful in scenarios where code generation is not required or has already been performed.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tooling/cli/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\narri build --skip-codegen\n```\n\n----------------------------------------\n\nTITLE: Arri Object Validation Benchmark\nDESCRIPTION: Defines the TestUser interface used as input for object validation benchmarks with different libraries.\nSOURCE: https://github.com/modiimedia/arri/blob/master/languages/ts/ts-schema/README.md#_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TestUser {\n    id: number; // integer,\n    role: 'standard' | 'admin' | 'moderator';\n    name: string;\n    email: string | null;\n    createdAt: number; // integer\n    updatedAt: number; // integer\n    settings:\n        | {\n              preferredTheme: 'light' | 'dark' | 'system';\n              allowNotifications: boolean;\n          }\n        | undefined;\n    recentNotifications: Array<\n        | {\n              type: 'POST_LIKE';\n              userId: string;\n              postId: string;\n          }\n        | {\n              type: 'POST_COMMENT';\n              userId: string;\n              postId: string;\n              commentText: string;\n          }\n    >;\n}\n```\n\n----------------------------------------\n\nTITLE: Initialized User object with default email\nDESCRIPTION: This is the result of initializing the User object with a missing email field in the server response. The `email` property is initialized to an empty string as a fallback.\nSOURCE: https://github.com/modiimedia/arri/blob/master/docs/creating-a-custom-generator.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    id: \"1\",\n    name: \"John Doe\",\n    email: \"\", // this is a fallback value\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Properties Schema Form - Invalid Input\nDESCRIPTION: Example of an invalid JSON input because middleName is null and it must be a string if it exists.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"name\": \"Abraham Lincoln\", \"isAdmin\": true, \"middleName\": null }\n```\n\n----------------------------------------\n\nTITLE: Empty JSON Object\nDESCRIPTION: This snippet represents an empty JSON object. It is useful for testing scenarios where an empty object is expected or needs to be handled.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tests/test-files/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: JSON Object: Book Parameters\nDESCRIPTION: This JSON object represents parameters related to a book, containing only a bookId. It demonstrates a simple parameter object.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tests/test-files/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"bookId\": \"1\" }\n```\n\n----------------------------------------\n\nTITLE: Optional Properties Schema Form - Valid Input 2\nDESCRIPTION: Example of a valid JSON input when middleName is provided.\nSOURCE: https://github.com/modiimedia/arri/blob/master/specifications/arri_type_definition.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"name\": \"Abraham Lincoln\", \"isAdmin\": true, \"middleName\": \"Tecumseh\"}\n```\n\n----------------------------------------\n\nTITLE: JSON Object: Nullable Fields (No Null, Reversed Record)\nDESCRIPTION: Similar to 'ObjectWithNullableFields_NoNull.json', but with the order of the 'record' fields reversed.  This tests the handling of non-null values with reversed record fields.\nSOURCE: https://github.com/modiimedia/arri/blob/master/tests/test-files/README.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"string\": \"\",\n  \"boolean\": true,\n  \"timestamp\": \"2001-01-01T16:00:00.000Z\",\n  \"float32\": 1.5,\n  \"float64\": 1.5,\n  \"int8\": 1,\n  \"uint8\": 1,\n  \"int16\": 10,\n  \"uint16\": 10,\n  \"int32\": 100,\n  \"uint32\": 100,\n  \"int64\": \"1000\",\n  \"uint64\": \"1000\",\n  \"enum\": \"BAZ\",\n  \"object\": { \"id\": \"\", \"content\": \"\" },\n  \"array\": [true, false, false],\n  \"record\": { \"B\": false, \"A\": true },\n  \"discriminator\": {\n    \"typeName\": \"C\",\n    \"id\": \"\",\n    \"name\": \"\",\n    \"date\": \"2001-01-01T16:00:00.000Z\"\n  },\n  \"any\": { \"message\": \"hello world\" }\n}\n```"
  }
]