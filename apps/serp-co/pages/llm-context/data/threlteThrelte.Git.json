[
  {
    "owner": "threlte",
    "repo": "threlte.git",
    "content": "TITLE: Initializing Threlte Canvas in Svelte\nDESCRIPTION: Sets up the basic structure for a Threlte application by creating a Canvas component and importing a separate Scene component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/getting-started/your-first-scene.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Canvas } from '@threlte/core'\n  import Scene from './Scene.svelte'\n</script>\n\n<Canvas>\n  <Scene />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Installing @threlte/core and dependencies\nDESCRIPTION: Command to install the core Threlte package along with Three.js and its type definitions using npm.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @threlte/core three @types/three\n```\n\n----------------------------------------\n\nTITLE: Implementing Threlte Scene with Hooks and Components\nDESCRIPTION: Illustrates a typical Scene component setup, including the use of Threlte hooks, custom components, and basic 3D object rendering.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/app-structure.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T, useTask } from '@threlte/core'\n  import { interactivity } from '@threlte/extras'\n  import Player from './Player.svelte'\n  import World from './World.svelte'\n\n  let rotation = 0\n\n  // useTask is relying on a context provided\n  // by <Canvas>. Because we are definitely *inside*\n  // <Canvas>, we can safely use it.\n  useTask((delta) => {\n    rotation += delta\n  })\n\n  // This file is also typically the place to\n  // inject plugins\n  interactivity()\n</script>\n\n<T.Mesh rotation.y={rotation}>\n  <T.BoxGeometry />\n  <T.MeshBasicMaterial color=\"red\" />\n</T.Mesh>\n\n<Player />\n<World />\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple 3D Cube in Threlte\nDESCRIPTION: Demonstrates how to create a basic 3D cube using Threlte's T component, which wraps Three.js objects. It creates a mesh with box geometry and a basic material.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/getting-started/your-first-scene.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n</script>\n\n<T.Mesh>\n  <T.BoxGeometry />\n  <T.MeshBasicMaterial />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Accessing Threlte Context in Svelte Component\nDESCRIPTION: Demonstrates how to use the useThrelte hook to access camera and renderer objects from the Threlte context.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/app-structure.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  const { camera, renderer } = useThrelte()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Task Scheduling and Render Stage - TypeScript\nDESCRIPTION: This snippet exemplifies how to use the Task Scheduling System to handle rendering within Threlte. It demonstrates how to define tasks that depend on each other and highlights the proper usage of the render stage for rendering scenes effectively with task dependencies.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nuseTask('first', (delta) => {\n  // ...\n})\n\nuseTask(\n  'second',\n  (delta) => {\n    // This task will be executed after the task with the\n    // key 'first' has been executed.\n  },\n  { after: 'first' }\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying 3D Object Properties in Threlte\nDESCRIPTION: Shows how to modify properties of 3D objects in Threlte, including position, size, and color. It uses Threlte's auto props and pierced props for easy manipulation.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/getting-started/your-first-scene.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\nimport { T } from '@threlte/core'\n</script>\n\n<T.Mesh position.y={1}>\n<T.BoxGeometry args={[1, 2, 1]} />\n<T.MeshBasicMaterial color=\"hotpink\" />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactivity in Threlte Scene\nDESCRIPTION: This snippet demonstrates how to add interactivity to a 3D cube in a Threlte scene. It uses the interactivity plugin from @threlte/extras and Svelte's Spring for smooth scaling on hover.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/getting-started/your-first-scene.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { interactivity } from '@threlte/extras'\n  import { Spring } from 'svelte/motion'\n\n  interactivity()\n  const scale = new Spring(1)\n</script>\n\n<T.PerspectiveCamera\n  makeDefault\n  position={[10, 10, 10]}\n  oncreate={(ref) => {\n    ref.lookAt(0, 1, 0)\n  }}\n/>\n\n<T.Mesh\n  position.y={1}\n  scale={scale.current}\n  onpointerenter={() => {\n    scale.target = 1.5\n  }}\n  onpointerleave={() => {\n    scale.target = 1\n  }}\n>\n  <T.BoxGeometry args={[1, 2, 1]} />\n  <T.MeshBasicMaterial color=\"hotpink\" />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Adding Animation to Threlte Scene\nDESCRIPTION: This code adds animation to the 3D cube using Threlte's useTask hook. The cube rotates around its y-axis continuously, with the rotation speed independent of the frame rate.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/getting-started/your-first-scene.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T, useTask } from '@threlte/core'\n  import { interactivity } from '@threlte/extras'\n  import { Spring } from 'svelte/motion'\n\n  interactivity()\n\n  const scale = new Spring(1)\n\n  let rotation = 0\n  useTask((delta) => {\n    rotation += delta\n  })\n</script>\n\n<T.PerspectiveCamera\n  makeDefault\n  position={[10, 10, 10]}\n  oncreate={(ref) => {\n    ref.lookAt(0, 1, 0)\n  }}\n/>\n\n<T.Mesh\n  rotation.y={rotation}\n  position.y={1}\n  scale={scale.current}\n  onpointerenter={() => {\n    scale.target = 1.5\n  }}\n  onpointerleave={() => {\n    scale.target = 1\n  }}\n>\n  <T.BoxGeometry args={[1, 2, 1]} />\n  <T.MeshBasicMaterial color=\"hotpink\" />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Installing @threlte/rapier and @dimforge/rapier3d-compat\nDESCRIPTION: This command installs the @threlte/rapier package, which provides components and hooks for using the Rapier physics engine in Threlte. It also installs @dimforge/rapier3d-compat, which is a compatibility layer for Rapier.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @threlte/rapier @dimforge/rapier3d-compat\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Scene with Camera, Lights, and Objects using Threlte\nDESCRIPTION: This snippet sets up a 3D scene using Threlte components. It includes a perspective camera with orbit controls, directional and ambient lighting, a grid, contact shadows, and three floating geometric objects (a box, a torus knot, and an icosahedron). The scene is designed for interactive viewing with auto-rotation and floating animations.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/components/Intro/IntroExampleCodePanel.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas>\n  <T.PerspectiveCamera\n    makeDefault\n    position={[-10, 10, 10]}\n    fov={15}\n  >\n    <OrbitControls\n      autoRotate\n      enableZoom={false}\n      enableDamping\n      autoRotateSpeed={0.5}\n      target.y={1.5}\n    />\n  </T.PerspectiveCamera>\n\n  <T.DirectionalLight\n    intensity={0.8}\n    position.x={5}\n    position.y={10}\n  />\n  <T.AmbientLight intensity={0.2} />\n\n  <Grid\n    position.y={-0.001}\n    cellColor=\"#ffffff\"\n    sectionColor=\"#ffffff\"\n    sectionThickness={0}\n    fadeDistance={25}\n    cellSize={2}\n  />\n\n  <ContactShadows\n    scale={10}\n    blur={2}\n    far={2.5}\n    opacity={0.5}\n  />\n\n  <Float\n    floatIntensity={1}\n    floatingRange={[0, 1]}\n  >\n    <T.Mesh\n      position.y={1.2}\n      position.z={-0.75}\n    >\n      <T.BoxGeometry />\n      <T.MeshStandardMaterial\n        color=\"#0059BA\"\n      />\n    </T.Mesh>\n  </Float>\n\n  <Float\n    floatIntensity={1}\n    floatingRange={[0, 1]}\n  >\n    <T.Mesh\n      position={[1.2, 1.5, 0.75]}\n      rotation.x={5}\n      rotation.y={71}\n    >\n      <T.TorusKnotGeometry\n        args={[0.5, 0.15, 100, 12, 2, 3]}\n      />\n      <T.MeshStandardMaterial\n        color=\"#F85122\"\n      />\n    </T.Mesh>\n  </Float>\n\n  <Float\n    floatIntensity={1}\n    floatingRange={[0, 1]}\n  >\n    <T.Mesh\n      position={[-1.4, 1.5, 0.75]}\n      rotation={[-5, 128, 10]}\n    >\n      <T.IcosahedronGeometry />\n      <T.MeshStandardMaterial\n        color=\"#F8EBCE\"\n      />\n    </T.Mesh>\n  </Float>\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Creating a Keyed Task in Typescript\nDESCRIPTION: This snippet demonstrates how to create a keyed task using the `useTask` hook.  By providing a key ('some-task'), the task can be easily referenced across the application. The function passed to `useTask` is executed on every frame.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/scheduling-tasks.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  start,\n  stop,\n  started,\n  task: someTask\n} = useTask('some-task', (delta) => {\n  // This function will be executed on every frame\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Conditional Stage with Callback in Typescript\nDESCRIPTION: This code snippet demonstrates how to create a conditional stage using the `useStage` hook with a custom callback function. The callback determines when the tasks within the stage are executed, providing control over the stage's execution based on a condition.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/scheduling-tasks.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { renderStage } = useThrelte()\n\nconst conditionalStage = useStage('after-render', {\n  after: renderStage,\n  callback: (delta, runTasks) => {\n    // This callback will be called every frame. The first argument is the time elapsed\n    // since the last frame. The second argument is a function that will run all the\n    // tasks of the stage. You can use it to run the tasks only when needed (e.g. when\n    // a condition is met) or to run them multiple times. If a number is passed as the\n    // first argument to runTasks, the tasks will receive that as the delta.\n    if (condition) {\n      runTasks()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Global Canvas in SvelteKit Layout\nDESCRIPTION: Implements a global Canvas component in the root layout of a SvelteKit application, including the CanvasPortalTarget for rendering portal content.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/app-structure.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import CanvasPortalTarget from '$lib/components/CanvasPortalTarget.svelte'\n  import { Canvas } from '@threlte/core'\n  import type { Snippet } from 'svelte'\n\n  let { children }: { children: Snippet } = $props()\n</script>\n\n<div>\n  <Canvas toneMapping={NoToneMapping}>\n    <CanvasPortalTarget />\n  </Canvas>\n</div>\n\n{@render children()}\n\n<style>\n  div {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Setting up Canvas component in Svelte\nDESCRIPTION: Basic structure of a Threlte application using the Canvas component to wrap the main scene. This setup creates a THREE.WebGLRenderer and provides state for child components.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Canvas } from '@threlte/core'\n  import Scene from './Scene.svelte'\n</script>\n\n<Canvas>\n  <Scene />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Using useDraco Hook for DRACO Decoding in TypeScript\nDESCRIPTION: This snippet illustrates how to integrate the useDraco hook with the useGltf hook to handle compressed glTF files. It shows how to utilize the default CDN-loaded DRACO binaries and how to set a custom path for the DRACO decoder.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-gltf.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useGltf, useDraco } from '@threlte/extras'\n\nconst dracoLoader = useDraco()\nconst gltf = useGltf('/path/to/model.glb', {\n  dracoLoader\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useGltf, useDraco } from '@threlte/extras'\n\nconst dracoLoader = useDraco('/custom/draco/decoders/path')\nconst gltf = useGltf('/path/to/model.glb', {\n  dracoLoader\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useGltf } from '@threlte/extras'\n\nconst dracoLoader = new DRACOLoader().setDecoderPath(path)\nconst gltf = useGltf('/path/to/model.glb', {\n  dracoLoader\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Textures with useLoader in Threlte\nDESCRIPTION: Shows how to load multiple textures simultaneously using the useLoader hook with TextureLoader. This approach loads textures for different material channels (map and normalMap).\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/loading-assets.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst textures = useLoader(TextureLoader).load({\n  map: '/assets/texture.png',\n  normalMap: '/assets/normal.png'\n})\n```\n\n----------------------------------------\n\nTITLE: Using GLTF Component with Interaction in Svelte\nDESCRIPTION: This snippet demonstrates how to use the <GLTF> component with interaction events using the interactivity plugin. It loads a 3D model and adds a click event handler.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/gltf.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { interactivity } from '@threlte/extras'\n  interactivity()\n</script>\n\n<GLTF\n  position={{ y: 1 }}\n  scale={3}\n  url=\"/models/helmet/DamagedHelmet.gltf\"\n  onclick={() => {\n    console.log('User clicked!')\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Camera in Threlte\nDESCRIPTION: Demonstrates how to add and configure a perspective camera in a Threlte scene, including positioning and orienting the camera using the oncreate event.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/getting-started/your-first-scene.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n</script>\n\n<T.PerspectiveCamera\n  makeDefault\n  position={[10, 10, 10]}\n  oncreate={(ref) => {\n    ref.lookAt(0, 1, 0)\n  }}\n/>\n\n<T.Mesh position.y={1}>\n  <T.BoxGeometry args={[1, 2, 1]} />\n  <T.MeshBasicMaterial color=\"hotpink\" />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Loading Assets with useLoader in Svelte\nDESCRIPTION: Demonstrates how to load assets using the useLoader hook in a Svelte component, both at the top level and inside event handlers.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-loader.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useLoader } from '@threlte/core'\n  import { TextureLoader } from 'three'\n\n  const texture = useLoader(TextureLoader).load('path/to/texture.png')\n\n  // A loader must always be instantiated at the top level of a component.\n  const { load } = useLoader(TextureLoader)\n  const onSomeEvent = () => {\n    // To load an asset outside of the top level, use the `load` method.\n    const texture = load('path/to/texture.png')\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Threlte Studio\nDESCRIPTION: Configures Vite to use the Threlte Studio plugin which allows for real-time updates and auto-sync. The Threlte Studio plugin must be placed before other plugins in the configuration. Requires Vite and the @sveltejs/kit plugin.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sveltekit } from '@sveltejs/kit/vite'\\nimport { threlteStudio } from '@threlte/studio/vite'\\n\\nexport default {\\n  plugins: [threlteStudio(), sveltekit()]\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @threlte/theatre and dependencies\nDESCRIPTION: This command installs the necessary packages for using @threlte/theatre, including the core library and the studio interface. It's a prerequisite for using Theatre.js with Threlte.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @threlte/theatre @theatre/core @theatre/studio\n```\n\n----------------------------------------\n\nTITLE: Implementing Shadow Casting in Threlte Scene\nDESCRIPTION: This code adds shadow casting to the scene. It includes a floor for the cube to cast shadows on, enables shadow casting for the light and cube, and sets the floor to receive shadows.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/getting-started/your-first-scene.mdx#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T, useTask } from '@threlte/core'\n  import { interactivity } from '@threlte/extras'\n  import { Spring } from 'svelte/motion'\n\n  interactivity()\n\n  const scale = new Spring(1)\n\n  let rotation = 0\n  useTask((delta) => {\n    rotation += delta\n  })\n</script>\n\n<T.PerspectiveCamera\n  makeDefault\n  position={[10, 10, 10]}\n  oncreate={(ref) => {\n    ref.lookAt(0, 1, 0)\n  }}\n/>\n\n<T.DirectionalLight\n  position={[0, 10, 10]}\n  castShadow\n/>\n\n<T.Mesh\n  rotation.y={rotation}\n  position.y={1}\n  scale={scale.current}\n  onpointerenter={() => {\n    scale.target = 1.5\n  }}\n  onpointerleave={() => {\n    scale.target = 1\n  }}\n  castShadow\n>\n  <T.BoxGeometry args={[1, 2, 1]} />\n  <T.MeshStandardMaterial color=\"hotpink\" />\n</T.Mesh>\n\n<T.Mesh\n  rotation.x={-Math.PI / 2}\n  receiveShadow\n>\n  <T.CircleGeometry args={[4, 40]} />\n  <T.MeshStandardMaterial color=\"white\" />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Destructure Threlte Values - TypeScript\nDESCRIPTION: This snippet destructures various properties from the `useThrelte` hook, providing essential elements needed for rendering, as well as the ability to manage the rendering process. Each property serves a specific purpose in a rendering setup.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-threlte.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  dom, // HTMLElement\n  size, // Readable<DOMRect>\n  canvas, // HTMLCanvasElement\n  camera, // CurrentWritable<Camera>\n  scene, // Scene\n  dpr, // CurrentWritable<number>\n  renderer, // WebGLRenderer\n  renderMode, // CurrentWritable<'always' | 'on-demand' | 'manual'>\n  autoRender, // CurrentWritable<boolean>\n  invalidate, // () => void\n  advance, // () => void\n  scheduler, // Scheduler\n  mainStage, // Stage\n  renderStage, // Stage\n  autoRenderTask, // Task\n  shouldRender, // () => boolean\n  colorManagementEnabled, // CurrentWritable<boolean>\n  colorSpace, // CurrentWritable<ColorSpace>\n  toneMapping, // CurrentWritable<ToneMapping>\n  shadows // CurrentWritable<boolean | ShadowMapType>\n} = useThrelte()\n```\n\n----------------------------------------\n\nTITLE: Typesafe Svelte Component for GLTF - TypeScript\nDESCRIPTION: This snippet shows a typesafe auto-generated Svelte component using TypeScript for GLTF assets. It defines types for the properties and utilizes Threlte hooks to manage GLTF models and their animations, enhancing type safety and reducing runtime errors.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/gltf/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<!--\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@0.0.1 ./stacy.glb -t\n-->\n<script lang=\"ts\">\n  import type * as THREE from 'three'\n  import { Group } from 'three'\n  import { T, type Props } from '@threlte/core'\n  import { useGltf, useGltfAnimations } from '@threlte/extras'\n  import type { Snippet } from 'svelte'\n\n  type Props = {\n    ref?: Group\n    actions?: ReturnType<typeof useGltfAnimations>['actions']\n    mixer?: ReturnType<typeof useGltfAnimations>['mixer']\n    children?: Snippet<[{ ref: Group }]>\n  }\n\n  let {\n    ref = $bindable(),\n    actions = $bindable(),\n    mixer = $bindable(),\n    children,\n    ...props\n  }: Props = $props()\n\n  const group = new Group()\n\n  type ActionName =\n    | 'pockets'\n    | 'rope'\n    | 'swingdance'\n    | 'jump'\n    | 'react'\n    | 'shrug'\n    | 'wave'\n    | 'golf'\n    | 'idle'\n  type GLTFResult = {\n    nodes: {\n      stacy: THREE.SkinnedMesh\n      mixamorigHips: THREE.Bone\n    }\n    materials: {}\n  }\n\n  const { actions, mixer } = useGltfAnimations<ActionName>(gltf, ref)\n  const gltf = useGltf<GLTFResult>('/stacy.glb')\n\n  actions = animations.actions\n  mixer = animations.mixer\n</script>\n\n{#if $gltf}\n  <T\n    bind:ref\n    is={group}\n    {...props}\n  >\n    <T.Group name=\"Scene\">\n      <T.Group\n        name=\"Stacy\"\n        rotation={[Math.PI / 2, 0, 0]}\n        scale={0.01}\n      >\n        <T is={$gltf.nodes.mixamorigHips} />\n        <T.SkinnedMesh\n          name=\"stacy\"\n          geometry={$gltf.nodes.stacy.geometry}\n          material={$gltf.nodes.stacy.material}\n          skeleton={$gltf.nodes.stacy.skeleton}\n          rotation={[-Math.PI / 2, 0, 0]}\n          scale={100}\n        />\n      </T.Group>\n    </T.Group>\n\n    {@render children?.({ ref })}\n  </T>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Loading Textures with useTexture Hook in Threlte\nDESCRIPTION: Shows a more convenient way to load textures using the useTexture hook from @threlte/extras. This approach uses Svelte's await block to handle the asynchronous loading of the texture.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/loading-assets.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useTexture } from '@threlte/extras'\n</script>\n\n{#await useTexture('/assets/texture.png') then texture}\n  <T.MeshStandardMaterial map={texture} />\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Using OrbitControls with PerspectiveCamera in Svelte\nDESCRIPTION: This snippet demonstrates how to implement the OrbitControls component within a PerspectiveCamera in a Svelte application. It imports necessary modules from '@threlte/extras' and '@threlte/core' and applies the OrbitControls for user interaction with the 3D scene.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/orbit-controls.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { OrbitControls } from '@threlte/extras'\n  import { T } from '@threlte/core'\n</script>\n\n<T.PerspectiveCamera\n  makeDefault\n  fov={50}\n>\n  <OrbitControls enableDamping />\n</T.PerspectiveCamera>\n```\n\n----------------------------------------\n\nTITLE: Setting root store without passing a second argument in Svelte\nDESCRIPTION: This snippet illustrates how to set the root store for animations using `useGltfAnimations` without passing an optional second argument. The root is obtained directly and bound to a 3D group that renders the scene.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-gltf-animations.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<script>\n  import { useGltfAnimations, useGltf } from '@threlte/extras'\n  import { Group } from 'three'\n\n  const gltf = useGltf('/path/to/model.glb')\n\n  const { root } = useGltfAnimations(gltf)\n</script>\n\n{#await gltf then { scene }}\n  <T.Group bind:ref={$root}>\n    <T is={scene} />\n  </T.Group>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Using `useFrame` to Access Svelte Store Values\nDESCRIPTION: This snippet demonstrates how to use the `useFrame` hook in the Threlte framework to access the current values of Svelte stores, allowing for efficient updates in rendering. It illustrates key parameters and expected inputs that allow interaction with Three.js camera and color space.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nuseFrame(({ camera, colorSpace }) => {\n  // instead of get(camera) we now can …\n  camera.current // THREE.Camera\n  colorSpace.current // THREE.ColorSpace\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Threlte Model Component\nDESCRIPTION: This section demonstrates how to customize the Threlte model component by altering positions, colors, and materials, or making the model's contents conditional.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/packages/gltf/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Svelte\nCODE:\n```\n<Model position={[0, 0, 0]} />\n<Model position={[10, 0, -10]} />\n\n<T.Mesh\n  geometry={$gltf.nodes.robot.geometry}\n  material={$gltf.materials.metal}\n  material.color=\"green\"\n/>\n\n<T.Mesh geometry={$gltf.nodes.robot.geometry}>\n  <T.MeshPhysicalMaterial color=\"hotpink\" />\n</T.Mesh>\n\n{#if condition}\n  <T.Mesh\n    geometry={$gltf.nodes.robot.geometry}\n    material={$gltf.materials.metal}\n  />}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Initializing Threlte Canvas Component in Svelte\nDESCRIPTION: This snippet demonstrates how to use the <Canvas> component in a Svelte file. It shows how to set the size of the canvas by controlling the parent element's dimensions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/canvas.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<div style=\"width: 300px; height: 300px;\">\n  <!-- The canvas will take up 300px by 300px -->\n  <Canvas>\n    <Scene />\n  </Canvas>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Vertex Heights with SimplexNoise in TypeScript\nDESCRIPTION: This snippet demonstrates how to use SimplexNoise to set the height (z-value) of each vertex in a geometry. The x and y positions are scaled by a 'flatness' factor to control the terrain's smoothness.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/geometry/Terrain with 3D noise.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst noise = new SimplexNoise()\n\nfor (let i = 0; i < positions.count; i += 1) {\n  const x = positions.getX(i) / flatness\n  const y = positions.getY(i) / flatness\n  positions.setZ(i, noise.noise(x, y))\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing GLTF Models with Stand-alone Parser in JSX\nDESCRIPTION: This code snippet demonstrates how to use the GLTF parser independently. It imports necessary modules, sets up GLTF and DRACO loaders, and uses the parse function to process loaded GLTF models.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/packages/gltf/README.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { parse } from '@threlte/gltf'\nimport { GLTFLoader, DRACOLoader } from 'three-stdlib'\n\nconst gltfLoader = new GLTFLoader()\nconst dracoloader = new DRACOLoader()\ndracoloader.setDecoderPath('https://www.gstatic.com/draco/v1/decoders/')\ngltfLoader.setDRACOLoader(dracoloader)\n\ngltfLoader.load(url, (gltf) => {\n  const component = parse(filename, gltf, config)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Prop Events with T Component\nDESCRIPTION: Threlte's T component supports custom events and can capture events from underlying three.js objects, providing a flexible event handling mechanism for 3D scene interactions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/handling-events.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<T ... on:click={() => handleEvent()} />\n```\n\n----------------------------------------\n\nTITLE: HTML Component with Transform in Svelte\nDESCRIPTION: This example shows how to use the HTML component with the transform property enabled, which applies matrix3d transformations.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/html.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { HTML } from '@threlte/extras'\n</script>\n\n<HTML transform>\n  <h1>Hello World</h1>\n</HTML>\n```\n\n----------------------------------------\n\nTITLE: Attaching Material and Geometry in Threlte Svelte\nDESCRIPTION: This snippet demonstrates how to attach a material to a mesh and a geometry to the geometry property of a mesh using Threlte in Svelte.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh>\n  <T.MeshBasicMaterial attach=\"material\" />\n  <T.BoxGeometry attach=\"geometry\" />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Initializing Object Selection Hook in TypeScript\nDESCRIPTION: Import and initialize the useObjectSelection hook from Threlte Studio to manage object selections with multiple interaction methods\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/use-object-selection.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useObjectSelection } from '@threlte/studio/extensions'\n\nconst selection = useObjectSelection()\n```\n\n----------------------------------------\n\nTITLE: Configuring CSM with Custom Settings in Svelte\nDESCRIPTION: This snippet demonstrates how to use the CSM component in Threlte with a custom configuration callback. The callback enables advanced features like fade for smoother shadow transitions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/csm.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<CSM\n  configure={(csm) => {\n    // advanced CSM configuration can be handle here.\n    csm.fade = true\n  }}\n>\n  <!-- Your scene goes here -->\n</CSM>\n```\n\n----------------------------------------\n\nTITLE: Setting up Threlte Canvas in Svelte App\nDESCRIPTION: Shows the recommended structure for a Threlte application, using a Canvas component with a single child Scene component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/app-structure.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Canvas } from '@threlte/core'\n  import Scene from './Scene.svelte'\n</script>\n\n<Canvas>\n  <Scene />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Implementing Suspense for Model Loading in Threlte\nDESCRIPTION: This example demonstrates how to use the Suspense component from @threlte/extras to handle loading states for 3D models. The code shows a parent component that displays a fallback component while the model is loading using the Svelte snippet feature.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/gltf/getting-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import Model from './Model.svelte'\n  import Fallback from './Fallback.svelte'\n  import { Suspense } from '@threlte/extras'\n</script>\n\n<Suspense>\n  {#snippet fallback()}\n    <Fallback />\n  {/snippet}\n  <Model />\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Loading Textures with TextureLoader in Threlte\nDESCRIPTION: Demonstrates how to load a texture using Three.js TextureLoader with Threlte's useLoader hook. The texture is applied to a MeshStandardMaterial once loaded.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/loading-assets.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { TextureLoader } from 'three'\n  import { useLoader } from '@threlte/core'\n\n  const texture = useLoader(TextureLoader).load('/assets/texture.png')\n</script>\n\n{#if $texture}\n  <T.MeshStandardMaterial map={$texture} />\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Theatre Component in Svelte\nDESCRIPTION: This Svelte example demonstrates how to use the <Theatre> component to create an interactive 3D setup. It imports necessary modules from @threlte/core and @threlte/theatre, sets up a <Canvas> with <SheetObject> for a Camera and Cube, and includes a customizable <Studio>. Dependencies include Threlte packages with optional settings for the studio property. Inputs are nested Svelte components, and outputs are rendered 3D objects.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/theatre.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Canvas, T } from '@threlte/core'\n  import { SheetObject, Theatre } from '@threlte/theatre'\n</script>\n\n<Canvas>\n  <Theatre>\n    <SheetObject key=\"Camera\">\n      {#snippet children({ Transform })}\n        <Transform>\n          <T.PerspectiveCamera\n            makeDefault\n            position={[5, 10, 3]}\n          />\n        </Transform>\n      {/snippet}\n    </SheetObject>\n\n    <SheetObject key=\"Cube\">\n      {#snippet children({ Transform })}\n        <Transform>\n          <T.Mesh position.y={0.5}>\n            <T.BoxGeometry />\n            <T.MeshBasicMaterial color=\"hotpink\" />\n          </T.Mesh>\n        </Transform>\n      {/snippet}\n    </SheetObject>\n\n    <T.GridHelper />\n  </Theatre>\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Accessing Nodes and Materials from Loaded glTF in Svelte\nDESCRIPTION: This snippet details how to access the nodes and materials from a loaded glTF model using the useGltf hook. It also provides a way to define types for autocompletion, enhancing development experience.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-gltf.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useGltf } from '@threlte/extras'\n\n  const gltf = useGltf('/path/to/model.glb')\n\n  let nodes = $derived($gltf?.nodes)\n  let materials = $derived($gltf?.materials)\n</script>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useGltf } from '@threlte/extras'\n\n  const gltf = useGltf<{\n    nodes: {\n      MeshA: THREE.Mesh\n      MeshB: THREE.Mesh\n      Object3DA: THREE.Object3D\n    }\n    materials: {\n      MaterialA: THREE.MeshStandardMaterial\n      MaterialB: THREE.MeshBasicMaterial\n    }\n  }>('/path/to/model.glb')\n\n  $effect(() => {\n    if ($gltf) {\n      const objectA = $gltf.nodes['MeshA'] // -> THREE.Mesh\n      const materialA = $gltf.materials['MaterialA'] // -> THREE.MeshStandardMaterial\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Sky Component Usage Example\nDESCRIPTION: This example demonstrates how to import and use the Sky component within a Threlte Canvas. It sets the elevation of the sky and configures a perspective camera to view the scene.  The camera's `oncreate` lifecycle method ensures that it looks at the center of the scene.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/sky.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T, Canvas } from '@threlte/core'\n  import { Sky } from '@threlte/extras'\n</script>\n\n<Canvas>\n  <Sky elevation={0.5} />\n\n  <T.PerspectiveCamera\n    makeDefault\n    position={[0, 3, 18]}\n    fov={60}\n    oncreate={(ref) => {\n      ref.lookAt(0, 0, 0)\n    }}\n  />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Initializing Flex Component\nDESCRIPTION: This snippet demonstrates how to initialize the `<Flex>` component in a Svelte script, importing it from '@threlte/flex'. It serves as the foundation for all layout operations within Svelte applications requiring flexbox structures.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/flex.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Flex } from '@threlte/flex'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using isInstanceOf for THREE.js type checking\nDESCRIPTION: Shows how to use the isInstanceOf utility to safely check if an object is an instance of a specific THREE.js class. This function serves as a type guard and is more efficient than using instanceof.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/utilities.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = new Object3D()\n\n// Later, in an unknown context\nif (isInstanceOf(obj, 'Object3D')) {\n  obj.position.x = 5\n}\n```\n\n----------------------------------------\n\nTITLE: Deferring WebGPU Renderer Initialization in Threlte\nDESCRIPTION: Shows how to defer WebGPU renderer initialization by setting the initial renderMode to 'manual' and updating it after the renderer is initialized.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/webgpu.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Canvas, T } from '@threlte/core'\n  import { WebGPURenderer } from 'three/webgpu'\n  let renderMode = $state('manual')\n</script>\n\n<Canvas\n  {renderMode}\n  createRenderer={(canvas) => {\n    const renderer = new WebGPURenderer({\n      canvas,\n      antialias: true,\n      forceWebGL: false\n    })\n    renderer.init().then(() => {\n      renderMode = 'on-demand'\n    })\n    return renderer\n  }}\n>\n  <Scene />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Creating Three.js objects with T component in Svelte\nDESCRIPTION: Example of using the T component to instantiate Three.js objects within a Threlte scene. This snippet demonstrates creating a camera and a mesh with a box geometry and basic material.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/core'\n</script>\n\n<T.PerspectiveCamera\n  position={[10, 10, 10]}\n  oncreate={(ref) => {\n    ref.lookAt(0, 0, 0)\n  }}\n/>\n\n<T.Mesh>\n  <T.BoxGeometry args={[1, 1, 1]} />\n  <T.MeshBasicMaterial color=\"red\" />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Loading Assets on Demand in Threlte\nDESCRIPTION: Shows how to load assets on demand after component initialization. This pattern separates loader instantiation from the actual loading operation, allowing assets to be loaded in response to user interactions or other events.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/loading-assets.mdx#2025-04-22_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { AudioLoader } from 'three'\n  import { useLoader } from '@threlte/core'\n\n  // Instantiate the loader at component initialization\n  const loader = useLoader(AudioLoader)\n\n  const onSomeEvent = async () => {\n    // Load the asset when needed\n    const audioBuffer = await loader.load('/assets/sound.mp3')\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Invalidate Current Frame - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `useThrelte` hook to invalidate the current frame, ensuring that the rendering updates are performed. It is necessary to call invalidate when changes occur that require a rerender.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-threlte.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { invalidate } = useThrelte()\ninvalidate()\n```\n\n----------------------------------------\n\nTITLE: Rendering Scene to Texture with useFBO in Threlte\nDESCRIPTION: This snippet shows how to use the useFBO hook to render a scene onto a texture for use in a sniper scope effect. It adjusts the camera FOV, renders to a custom render target, and then resets for normal rendering.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/shaders/Scope with zoom.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst renderTarget = useFBO($size.width * 0.5, $size.height * 0.5, {\n  samples: 8\n})\n\nlet scope: Group\n\nuseTask(() => {\n  if (!scope || !$scoping) return\n  const cam = $camera as PerspectiveCamera\n\n  scope.visible = false\n  cam.fov = $zoomedFov\n  cam.updateProjectionMatrix()\n  cam.matrixWorldNeedsUpdate = true\n  renderer.setRenderTarget(renderTarget)\n  renderer.render(scene, cam)\n\n  renderer.setRenderTarget(null)\n  cam.fov = baseFov\n  cam.updateProjectionMatrix()\n  scope.visible = true\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing interactivity plugin in Svelte with Threlte\nDESCRIPTION: This snippet demonstrates how to use the interactivity plugin from @threlte/extras. It sets up a scene with OrbitControls and an interactive mesh that logs to the console when clicked.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/getting-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { OrbitControls, interactivity } from '@threlte/extras'\n  import { T } from '@threlte/core'\n\n  interactivity()\n</script>\n\n<T.PerspectiveCamera\n  makeDefault\n  position={[5, 5, 5]}\n>\n  <OrbitControls />\n</T.PerspectiveCamera>\n\n<T.Mesh\n  onclick={() => {\n    console.log('clicked')\n  }}\n>\n  <T.BoxGeometry />\n  <T.MeshBasicMaterial color=\"red\" />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Using Edges Component with Threlte in Svelte\nDESCRIPTION: This snippet demonstrates how to use the Edges component from @threlte/extras to add edge highlighting to a 3D mesh. It creates a box geometry with basic material and applies black edges to it.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/edges.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { BoxGeometry, MeshBasicMaterial } from 'three'\n  import { Edges } from '@threlte/extras'\n  import { T } from '@threlte/core'\n</script>\n\n<T.Mesh\n  geometry={new BoxGeometry()}\n  material={new MeshBasicMaterial()}\n>\n  <Edges color=\"black\" />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Watching multiple stores in Threlte\nDESCRIPTION: Shows how to watch multiple writable stores simultaneously and execute a callback with an array of their current values when any store changes.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/utilities.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst store1 = writable(0)\nconst store2 = writable(1)\n\nwatch([store1, store2], ([value1, value2]) => {\n  console.log(value1, value2) // 0 1\n})\n```\n\n----------------------------------------\n\nTITLE: useProgress Hook Usage\nDESCRIPTION: This code snippet demonstrates how to use the `useProgress` hook in a Svelte component. It retrieves readable stores for various loading metrics, such as active state, currently loading item, loaded and total items, errors, normalized progress, and a flag indicating if loading has finished at least once.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-progress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  // `useProgress` returns readable stores\n  const {\n    active, // Readable<boolean> – if the DefaultLoadingManager is active\n    item, // Readable<string | undefined> – the currently loading item\n    loaded, // Readable<number> - amount of items loaded\n    total, // Readable<number> - total amount of items to load\n    errors, // Readable<string[]> - all error messages\n    progress, // Readable<number> - normalized (0-1) loading progress\n    finishedOnce // Readable<boolean> – whether a progress of 1 has been achieved ever.\n  } = useProgress()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Scene Component for HUD in Svelte\nDESCRIPTION: Shows the implementation of a Scene component to be used within a HUD. It includes a PerspectiveCamera, AmbientLight, and a Mesh with BoxGeometry and MeshStandardMaterial.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/hud.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n</script>\n\n<T.PerspectiveCamera\n  makeDefault\n  position={[0, 0, 0]}\n  oncreate={(ref) => ref.lookAt(0, 0, 0)}\n/>\n\n<T.AmbientLight />\n\n<T.Mesh>\n  <T.BoxGeometry />\n  <T.MeshStandardMaterial />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Using GLTF Component with DRACO Compression in Svelte\nDESCRIPTION: This snippet shows how to use the <GLTF> component with DRACO compression. It imports the useDraco hook to create a cached instance of DRACOLoader and passes it to the GLTF component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/gltf.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { GLTF, useDraco } from '@threlte/extras'\n\n  const dracoLoader = useDraco() // Creates a cached instance of DRACOLoader\n</script>\n\n<GLTF\n  url=\"/models/helmet/DamagedHelmet.gltf\"\n  {dracoLoader}\n/>\n```\n\n----------------------------------------\n\nTITLE: Awaiting Loaded Assets with useLoader in Svelte\nDESCRIPTION: Shows how to await loaded assets using the useLoader hook in a Svelte component, both with async/await and Svelte's await block.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-loader.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useLoader, T } from '@threlte/core'\n  import { TextureLoader } from 'three'\n\n  const { load } = useLoader(TextureLoader)\n\n  const onSomeEvent = async () => {\n    // Load an asset and await the result.\n    const texture = await load('path/to/texture.png')\n  }\n</script>\n\n<!-- Or make use of Svelte's await block -->\n{#await load('path/to/texture.png') then map}\n  <T.MeshStandardMaterial {map} />\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Creating Physical Sphere with Threlte and Rapier\nDESCRIPTION: Creates a physical sphere with automatic collision detection using Threlte's 3D components and Rapier physics. The sphere is configured with shadows and standard material properties.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/components/Intro/RapierExample.txt#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { RigidBody, AutoColliders } from '@threlte/rapier'\n  import { T } from '@threlte/core'\n</script>\n\n<RigidBody>\n  <AutoColliders shape={'ball'}>\n    <T.Mesh receiveShadow castShadow>\n      <T.SphereGeometry args={[0.25]} />\n      <T.MeshStandardMaterial />\n    </T.Mesh>\n  </AutoColliders>\n</RigidBody>\n```\n\n----------------------------------------\n\nTITLE: Raycasting Event Optimization Strategies\nDESCRIPTION: Improve raycasting performance in complex 3D scenes by using simplified invisible collision objects or implementing advanced raycasting algorithms like Bounding Volume Hierarchies (BVH).\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/handling-events.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Example: Raycasting against a simple sphere\nconst simpleSphereForRaycasting = new THREE.Sphere()\n```\n\n----------------------------------------\n\nTITLE: Define RigidBody Component in Svelte\nDESCRIPTION: This Svelte component sets up a RigidBody for use within a physics simulation by providing various configurable properties such as type, velocity, and collision settings. It handles lifecycle events like 'create', 'collisionenter', and 'sleep', and allows for the adjustment of physical parameters like gravity scale and damping. The component depends on the Rapier physics engine library.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/rigid-body.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<RigidBody>\n  type: \"fixed\" | \"dynamic\" | \"kinematicPosition\" | \"kinematicVelocity\"\n  default: \"dynamic\"\n  linearVelocity: Position\n  angularVelocity: Rotation\n  gravityScale: number\n  ccd: boolean\n  lockRotations: boolean\n  lockTranslations: boolean\n  enabledRotations: Boolean3Array default: [true, true, true]\n  enabledTranslations: Boolean3Array default: [true, true, true]\n  dominance: number\n  linearDamping: number\n  angularDamping: number\n  userData: Record<string, any>\n\n  events:\n  - create: ref: RigidBody\n  - sleep: void\n  - wake: void\n  - collisionenter: targetCollider: Collider, targetRigidBody: RigidBody | null, manifold: TempContactManifold, flipped: boolean\n  - collisionexit: targetCollider: Collider, targetRigidBody: RigidBody | null\n  - sensorenter: targetCollider: Collider, targetRigidBody: RigidBody | null\n  - sensorexit: targetCollider: Collider, targetRigidBody: RigidBody | null\n  - contact: targetCollider: Collider, targetRigidBody: RigidBody | null, manifold: TempContactManifold, flipped: boolean, maxForceDirection: Vector, maxForceMagnitude: number, totalForce: Vector, totalForceMagnitude: number\n\n  binding:\n  - rigidBody: RigidBody\n</RigidBody>\n```\n\n----------------------------------------\n\nTITLE: Using T Component with Dot-Notation in Svelte\nDESCRIPTION: Shows how to use the T component with dot-notation to access Three.js classes from the main namespace, creating a mesh with box geometry and basic material.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n</script>\n\n<T.Mesh>\n  <T.BoxGeometry />\n  <T.MeshBasicMaterial />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Loading and Applying Environment Texture in Svelte\nDESCRIPTION: Demonstrates how to load an environment texture using a custom loader and apply it to a scene using the <Environment> component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/environment.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { TextureLoader } from 'three'\n\n  const loader = new TextureLoader().setPath('https://path/to/texture/').setRequestHeader({\n    // .. request headers that will be used when fetching the texture\n  })\n\n  const promise = loader.loadAsync('texture.jpg').then((texture) => {\n    texture.mapping = EquirectangularReflectionMapping\n    return texture\n  })\n</script>\n\n{#await promise then texture}\n  <Environment {texture} />\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Integrating XR Component with Scene Setup in Svelte\nDESCRIPTION: This code snippet demonstrates how to integrate the `<XR>` component using Threlte in a Svelte application to create a WebXR session. It imports necessary components and sets up context for entering an immersive experience. Dependencies include Threlte packages like `@threlte/xr` and `@threlte/extras`. The code sets the position and text for the XR experience. The components remain inactive until an XR session begins, offering a seamless XR integration.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/xr.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { XR } from '@threlte/xr'\n  import { Text } from '@threlte/extras'\n</script>\n\n<XR>\n  <Text\n    position={[0, 1.6, -1]}\n    text=\"I have entered another realm!\"\n  />\n</XR>\n```\n\n----------------------------------------\n\nTITLE: Manual Invalidation in Svelte using useThrelte\nDESCRIPTION: Shows how to manually invalidate the current frame using the invalidate function from the useThrelte hook when Threlte can't detect changes automatically.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/render-modes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T, useThrelte } from '@threlte/core'\n  import { Mesh } from 'three'\n\n  const { invalidate } = useThrelte()\n\n  const mesh = new Mesh()\n\n  export const moveMesh = () => {\n    // moving the mesh manually\n    mesh.position.x = 1\n    // invalidate the current frame\n    invalidate()\n  }\n</script>\n\n<T is={mesh} />\n```\n\n----------------------------------------\n\nTITLE: Using useTransformControls Hook in Threlte Studio\nDESCRIPTION: This code snippet demonstrates how to use the `useTransformControls` hook from the `@threlte/studio/extensions` package. It shows how to enable, disable, toggle, and set the mode of the transform controls.  It also demonstrates how to check if the transform controls are in use and retrieve the current mode.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/use-transform-controls.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransformControls } from '@threlte/studio/extensions'\n\nconst tc = useTransformControls()\n\n// Enable the transform controls\ntc.enable()\n\n// Disable the transform controls\ntc.disable()\n\n// Toggle the transform controls\ntc.toggle()\n\n// Set the mode of the transform controls\ntc.setMode('translate') // 'translate', 'rotate', 'scale'\n\n// Translate the object\ntc.translate()\n\n// Rotate the object\ntc.rotate()\n\n// Scale the object\ntc.scale()\n\n// check if the transform controls are in use\nconsole.log(tc.inUse)\n\n// get the current mode\nconsole.log(tc.mode)\n```\n\n----------------------------------------\n\nTITLE: Manual Control of Object Disposal in Threlte\nDESCRIPTION: Shows how to disable automatic disposal for specific components and their subtrees using the dispose={false} prop. Also demonstrates how disposal can be selectively re-enabled for nested components.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/disposing-objects.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T, useTexture } from '@threlte/core'\n\n  const map = useTexture('/some/texture')\n  const material = new MeshStandardMaterial({ map })\n</script>\n\n<!-- will not be disposed -->\n<T.Mesh dispose={false}>\n  <!-- will not be disposed -->\n  <T.BoxGeometry />\n  <!-- will not be disposed -->\n  <T.MeshStandardMaterial map={$map} />\n\n  <!-- will be disposed -->\n  <T.Mesh dispose>\n    <!-- will be disposed -->\n    <T.BoxGeometry />\n    <!-- will be disposed -->\n    <T.MeshStandardMaterial map={$map} />\n  </T.Mesh>\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Using Threlte Model Component in Scene\nDESCRIPTION: This snippet shows how to integrate the generated Svelte model component into a Threlte Canvas, allowing it to be reused across different positions and contexts within a 3D scene.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/packages/gltf/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Svelte\nCODE:\n```\n<script>\n  import { Canvas } from '@threlte/core'\n  import Model from './Model.svelte'\n</script>\n\n<Canvas>\n  <Model />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Automatic Disposal of Three.js Objects in Threlte\nDESCRIPTION: Demonstrates how Threlte automatically disposes of Three.js objects when components unmount. The geometry and material of a mesh will be disposed when the <Mesh> component unmounts.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/disposing-objects.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { useTexture } from '@threlte/extras'\n</script>\n\n<!--\n\tThe geometry and the material will be disposed\n\tas soon as the <Mesh> component unmounts.\n-->\n<T.Mesh>\n  <T.BoxGeometry />\n  <T.MeshStandardMaterial />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Textures to a Material in Threlte\nDESCRIPTION: Shows how to apply multiple loaded textures to a MeshStandardMaterial using the spread operator. The textures are only applied once all of them have loaded successfully.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/loading-assets.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n{#if $textures}\n  <T.MeshStandardMaterial {...$textures} />\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Updating Object Properties in Svelte with useTask\nDESCRIPTION: Using useTask to animate a 3D mesh by updating its rotation on every frame. The delta parameter makes the animation frame rate independent.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-task.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T, useTask } from '@threlte/core'\n  import { Mesh } from 'svelte-three'\n\n  let mesh\n\n  useTask((delta) => {\n    if (!mesh) return\n    mesh.rotation.y += delta * 0.5\n  })\n</script>\n\n<T.Mesh bind:ref={mesh}>\n  <T.BoxGeometry />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Using useGltf hook to load 3D models in Svelte with Threlte\nDESCRIPTION: This code demonstrates how to use the useGltf hook from @threlte/extras to load a GLTF model. It also shows how to handle the loading state using Svelte's await block.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/getting-started.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useGltf } from '@threlte/extras'\n  import { T } from '@threlte/core'\n  import LoadingPlaceholder from './LoadingPlaceholder.svelte'\n\n  const model = useGltf('/model.glb')\n</script>\n\n{#await model}\n  <LoadingPlaceholder />\n{:then value}\n  <T is={value} />\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Adding Lighting to Threlte Scene\nDESCRIPTION: This snippet adds lighting to the scene using a DirectionalLight. It also changes the cube's material to MeshStandardMaterial to enable shading effects from the light source.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/getting-started/your-first-scene.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T, useTask } from '@threlte/core'\n  import { interactivity } from '@threlte/extras'\n  import { Spring } from 'svelte/motion'\n\n  interactivity()\n\n  const scale = new Spring(1)\n\n  let rotation = 0\n  useTask((delta) => {\n    rotation += delta\n  })\n</script>\n\n<T.PerspectiveCamera\n  makeDefault\n  position={[10, 10, 10]}\n  oncreate={(ref) => {\n    ref.lookAt(0, 1, 0)\n  }}\n/>\n\n<T.DirectionalLight position={[0, 10, 10]} />\n\n<T.Mesh\n  rotation.y={rotation}\n  position.y={1}\n  scale={scale.current}\n  onpointerenter={() => {\n    scale.target = 1.5\n  }}\n  onpointerleave={() => {\n    scale.target = 1\n  }}\n>\n  <T.BoxGeometry args={[1, 2, 1]} />\n  <T.MeshStandardMaterial color=\"hotpink\" />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Using useRigidBody Hook in Svelte\nDESCRIPTION: This Svelte code snippet demonstrates how to use the `useRigidBody` hook from `@threlte/rapier` to access the `RAPIER.RigidBody` of a parent `<RigidBody>` component. It retrieves the Rapier world using `useRapier`, creates a collider attached to the rigid body, and then cleans up the collider when the component is destroyed.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-rigid-body.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useRapier, useRigidBody } from '@threlte/rapier'\n\n  const { world } = useRapier()\n\n  // rigidBody is undefined if there's\n  // no parent `<RigidBody>` component\n  const rigidBody = useRigidBody()\n\n  const collider = world.createCollider(colliderDesc, rigidBody)\n\n  onDestroy(() => {\n    world.removeCollider(collider, true)\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Stars Component in Svelte\nDESCRIPTION: This code snippet demonstrates how to import the `Stars` component from the '@threlte/extras' package in a Svelte file and render it. It is a basic implementation that initializes the Stars component without any custom properties.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/stars.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Stars } from '@threlte/extras'\n</script>\n\n<Stars />\n```\n\n----------------------------------------\n\nTITLE: Rendering a Floating 3D Model with Threlte\nDESCRIPTION: Uses the Float component to create a floating effect for a 3D model loaded with the GLTF component. The model is configured to cast and receive shadows, loaded from a specific URL, positioned above the ground, and scaled up.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/components/Intro/ExtrasExample.txt#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Float>\n  <GLTF\n    castShadow\n    receiveShadow\n    url={'/models/flower.glb'}\n    position.y={1}\n    scale={3}\n  />\n</Float>\n```\n\n----------------------------------------\n\nTITLE: Migrating from useFrame to useTask - TypeScript\nDESCRIPTION: This code snippet shows the transition from the useFrame hook to the new useTask hook in Threlte 7. It emphasizes retrieving context through the useThrelte hook and demonstrates the structure for defining frame tasks with proper context management.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nuseFrame(({ camera, scene }, delta) => {\n  // ...\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { camera, scene } = useThrelte()\nuseTask((delta) => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Scene Component in Svelte\nDESCRIPTION: Configures a VR environment in Svelte by importing and composing components from @threlte/core and @threlte/xr. The Scene.svelte file initializes the canvas and VR button required for WebXR rendering and user interaction. Dependencies include @threlte/core for the canvas and basic scene setup.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\\n  import { Canvas } from '@threlte/core'\\n  import { VRButton } from '@threlte/xr'\\n  import Scene from './scene.svelte'\\n</script>\\n\\n<Canvas>\\n  <Scene />\\n</Canvas>\\n<VRButton />\n```\n\n----------------------------------------\n\nTITLE: Plugin with Property Claiming\nDESCRIPTION: Demonstrates how a plugin can claim specific properties to prevent the <T> component from applying them directly to the Three.js object, useful for custom property handling.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/plugins.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injectPlugin } from '@threlte/core'\n\ninjectPlugin('ecs', () => {\n  return {\n    // Without claiming the properties, <T> would apply the\n    // property to the object.\n    pluginProps: ['entity', 'health', 'velocity', 'position']\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Svelte Await Blocks with Threlte Loaders\nDESCRIPTION: Demonstrates how to use Svelte's await blocks with Threlte's useLoader hook to handle asynchronous loading of assets. This approach provides a clean way to conditionally render components based on asset loading status.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/loading-assets.mdx#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n{#await $texture then value}\n  <T.MeshStandardMaterial map={value} />\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Use Interactivity Hook - Svelte\nDESCRIPTION: Utilizes the `useInteractivity` hook to access and inspect internal interactivity state values, such as pointer position and hover status, within Threlte components. Useful for debugging and advanced state manipulation.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/interactivity.mdx#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useInteractivity } from '@threlte/extras'\n\n  const { pointer, pointerOverTarget } = useInteractivity()\n\n  $inspect($pointer, $pointerOverTarget)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Injection in Threlte\nDESCRIPTION: Demonstrates how to use injectPlugin to add custom plugins to Threlte components. The function takes a plugin name and a callback that receives reactive component arguments. The callback can utilize lifecycle hooks and effects, and return reserved plugin properties.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/plugins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injectPlugin } from '@threlte/core'\n\ninjectPlugin('plugin-name', (args) => {\n  // We are *inside* a `<T>` component instance\n\n  // args is reactive and holds a reference to `ref`,\n  // `makeDefault`, `args`, `attach`, `manual`,\n  // `makeDefault`, `dispose` and all other props\n  // declared on the `<T>` component.\n\n  // Use effects to react to changes in args\n  $effect(() => {\n    console.log(args.ref)\n  })\n\n  // Use lifecycle functions\n  onMount(() => {\n    console.log('mounted')\n  })\n\n  return {\n    // These props are reserved for this plugin, the\n    // `<T>` component instance will not act on them.\n    pluginProps: ['plugin-prop-a', 'plugin-prop-b']\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing AudioListener and Audio Components in Threlte\nDESCRIPTION: This example demonstrates how to properly set up an AudioListener within a PerspectiveCamera and use the Audio component in a Threlte Canvas. It shows the correct order of component mounting for audio functionality.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/audio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T, Canvas } from '@threlte/core'\n  import { AudioListener, Audio } from '@threlte/extras'\n</script>\n\n<Canvas>\n  <T.PerspectiveCamera\n    makeDefault\n    position={[3, 3, 3]}\n    lookAt={[0, 0, 0]}\n  >\n    <AudioListener />\n  </T.PerspectiveCamera>\n\n  <Audio src={\"/audio/track.mp3\"} />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Stage in Threlte with useStage\nDESCRIPTION: Example of creating a new stage that runs after the render stage. This demonstrates the basic usage of useStage to establish execution order between stages.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-stage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { renderStage } = useThrelte()\n\n// All tasks added to the stage `afterRenderStage`\n// will be executed after the tasks of the stage `renderStage`.\nconst afterRenderStage = useStage('after-render', {\n  after: renderStage\n})\n```\n\n----------------------------------------\n\nTITLE: Using OrbitControls with T Component in Svelte\nDESCRIPTION: Demonstrates how to use the OrbitControls class from Three.js examples with the T component's 'is' property.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\n</script>\n\n<T is={OrbitControls} />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Floating Mesh with Threlte in Svelte\nDESCRIPTION: This snippet demonstrates how to use the Float component from @threlte/extras to create a floating mesh. It shows the basic setup with customizable float intensity, scale, and rotation intensity.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/float.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/core'\n  import { Float } from '@threlte/extras'\n</script>\n\n<Float\n  floatIntensity={5}\n  scale={$scale}\n  rotationIntensity={2}\n>\n  <T.Mesh>\n    <T.MeshStandardMaterial color={'orange'} />\n    <T.BoxGeometry args={[5, 5, 5]} />\n  </T.Mesh>\n</Float>\n```\n\n----------------------------------------\n\nTITLE: Using Texture Hook for Basic Texture Loading in Svelte\nDESCRIPTION: This snippet demonstrates how to use the useTexture hook to load a texture from a URL and handle it once it is loaded. It uses an async operation and displays a Three.js mesh upon loading.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-texture.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { useTexture } from '@threlte/extras'\n\n  const texture = useTexture('texture.png')\n\n  texture.then(() => {\n    console.log('texture has loaded')\n  })\n\n  $inspect($texture) // eventually a Three.Texture\n</script>\n\n{#await texture then map}\n  <T.Mesh>\n    <T.SphereGeometry />\n    <T.MeshBasicMaterial {map} />\n  </T.Mesh>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Integrating Theatre.js Studio in Svelte\nDESCRIPTION: This Svelte component imports the Canvas from @threlte/core and the Studio from @threlte/theatre package. It demonstrates how to conditionally enable the Studio component based on the development environment, utilizing the SvelteKit dev environment variable. Dependencies include @threlte/core, @threlte/theatre, and a Scene component. The Canvas wraps the Scene component, and the Studio component is conditionally enabled for development.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/studio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\\\"ts\\\">\\n  import { Canvas } from '@threlte/core'\\n  import { Studio } from '@threlte/theatre'\\n  import Scene from './Scene.svelte'\\n\\n  // Using SvelteKit\\n  import { dev } from '$app/environment'\\n</script>\\n\\n<Studio enabled={dev} />\\n\\n<Canvas>\\n  <Scene />\\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Initializing Threlte Studio with Svelte\nDESCRIPTION: Sets up a basic Svelte application to use Threlte Studio. The `Studio` component encapsulates the scene inside a `Canvas`. Requires Svelte and Threlte as dependencies, and is a starting point for integrating Threlte Studio.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\\\"ts\\\">\\n  import { Canvas } from '@threlte/core'\\n  import { Studio } from '@threlte/studio'\\n  import Scene from './Scene.svelte'\\n<\\/script>\\n\\n<Canvas>\\n  <Studio>\\n    <Scene \\/>\\n  <\\/Studio>\\n<\\/Canvas>\n```\n\n----------------------------------------\n\nTITLE: Extending a Loader with useLoader in Svelte\nDESCRIPTION: Demonstrates how to extend a loader with custom features using the useLoader hook in a Svelte component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-loader.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useLoader } from '@threlte/core'\n  import { TextureLoader } from 'three'\n\n  const loader = useLoader(CustomTextureLoader, {\n    extend: (loader) => {\n      // do something with the loader, e.g. add DRACO support for\n      // GLTFLoader or add custom headers for TextureLoader.\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Applying Svelte-like Transitions to Threlte Components\nDESCRIPTION: This snippet demonstrates how to apply a transition to a Threlte component using the `transition` attribute. It requires the Threlte transitions plugin and uses Svelte's transition functions, allowing components to animate their appearance and disappearance.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/transitions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n{#if visible}\n  <T.Mesh transition={scale({ duration: 400 })} />\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Access Renderer and Camera - TypeScript\nDESCRIPTION: In this snippet, the `useThrelte` hook is used to access the `renderer` and currently active `camera`. This is essential for rendering objects and managing camera settings within the Threlte context.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-threlte.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { renderer, camera } = useThrelte()\nconsole.log(renderer, $camera)\n```\n\n----------------------------------------\n\nTITLE: Using Suspense in a Parent Component in Svelte\nDESCRIPTION: This example demonstrates how to use the `<Suspense>` component in a parent Svelte component to handle the loading state of a child component (`Model.svelte`). A fallback component (`Fallback.svelte`) is displayed while the child component is loading, providing a better user experience.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/suspense.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import Model from './Model.svelte'\n  import Fallback from './Fallback.svelte'\n  import { Suspense } from '@threlte/extras'\n</script>\n\n<Suspense>\n  <Model />\n\n  {#snippet fallback()}\n    <Fallback />\n  {/snippet}\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Adding Event Handlers to Instances in InstancedMesh Component in Svelte\nDESCRIPTION: Demonstrates how to add interactivity events, such as onclick, to individual instances within an <InstancedMesh> component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/instanced-mesh.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<InstancedMesh>\n  <T.BoxGeometry />\n  <T.MeshStandardMaterial />\n\n  <Instance onclick={onClick} />\n</InstancedMesh>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of InstancedMesh Component in Svelte\nDESCRIPTION: Demonstrates the basic usage of the <InstancedMesh> component with <Instance> components for rendering multiple instances of the same geometry.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/instanced-mesh.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<InstancedMesh>\n  <T.BoxGeometry />\n  <T.MeshStandardMaterial />\n\n  <Instance />\n  <Instance />\n</InstancedMesh>\n```\n\n----------------------------------------\n\nTITLE: Implementing Fallback Scene for XR in Svelte\nDESCRIPTION: This snippet details the implementation of a fallback mechanism for XR sessions in a Svelte application. Utilizing the Threlte framework, it allows showing alternative content when a user has not yet started an immersive session. Dependencies include `@threlte/core` and other components like `Scene`, `Controller`, and `OrbitControls`. The snippet sets up a default perspective camera and orbit controls for pre-session interaction.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/xr.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { XR, Controller } from '@threlte/xr'\n  import { OrbitControls } from '@threlte/extras'\n  import Scene from './Scene.svelte'\n</script>\n\n<Scene />\n\n<XR>\n  <Controller left>\n  <Controller right>\n\n  {#snippet fallback()}\n    <T.PerspectiveCamera makeDefault position.z={5}>\n      <OrbitControls />\n    </T.PerspectiveCamera>\n  {/snippet}\n</XR>\n```\n\n----------------------------------------\n\nTITLE: Defining Types for Rapier Context - TypeScript\nDESCRIPTION: This TypeScript snippet defines the structure of the Rapier context, including types and objects related to colliders and rigid bodies. It also defines functions for adding and removing these physics objects from the context. This setup is essential for leveraging the RAPIER physics engine in a type-safe manner within TypeScript environments, requiring the proper types from the '@threlte/rapier' package.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-rapier.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"// type RapierContext\\nconst {\\n  rapier, // RAPIER\\n  world, // RAPIER.World\\n  colliderObjects, // Map<number, Object3D<Event>>\\n  rigidBodyObjects, //Map<number, Object3D<Event>>\\n  rigidBodyEventDispatchers, //RigidBodyEventDispatchers\\n  colliderEventDispatchers, //ColliderEventDispatchers\\n  addColliderToContext, // (collider: Collider, object: Object3D<Event>, eventDispatcher: ColliderEventDispatcher) => void\\n  removeColliderFromContext, // (collider: Collider) => void\\n  addRigidBodyToContext, // (rigidBody: RigidBody, object: Object3D<Event>, eventDispatcher: RigidBodyEventDispatcher) => void\\n  removeRigidBodyFromContext // (rigidBody: RigidBody) => void\\n} = useRapier()\"\n```\n\n----------------------------------------\n\nTITLE: Basic Text Rendering with Dynamic Input\nDESCRIPTION: Demonstrates binding a text input to a dynamic Text component, allowing real-time text rendering in a 3D scene\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/text.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Text } from '@threlte/extras'\n  let value = ''\n</script>\n\n<input\n  type=\"text\"\n  bind:value\n/>\n<Text text={value} />\n```\n\n----------------------------------------\n\nTITLE: Integrating Shader Material in Svelte\nDESCRIPTION: This snippet demonstrates the integration of a shader-based material into a Svelte component using Threlte. It imports fragment and vertex shaders as raw strings via Vite and applies them to a mesh. Dependencies include Threlte and a build tool supporting raw file imports. Key parameters are the shaders and geometry for the mesh. Inputs are shader strings, outputs are a rendered mesh with shader effects.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/shaders/Interactive shader.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\\n  import fragmentShader from './fragment.glsl?raw'\\n  import vertexShader from './vertex.glsl?raw'\\n</script>\\n\\n<T.Mesh\\n  {geometry}\\n  rotation.x={DEG2RAD * -90}\\n\\n  <T.ShaderMaterial\\n    {fragmentShader}\\n    {vertexShader}\\n  />\\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Creating Theatre.js Sheets with Svelte Component\nDESCRIPTION: This code snippet demonstrates how to create Theatre.js sheets using the `<Sheet>` component within a Threlte project. It imports necessary components from `@threlte/theatre` and then defines a `<Project>` component that contains multiple `<Sheet>` components, each with a unique name.  The `SheetObject` component is used to add objects to each sheet.  If a sheet name already exists, the component will reference the existing sheet.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/sheet.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Project, Sheet, SheetObject } from '@threlte/theatre'\n</script>\n\n<Project>\n  <!-- Will create a sheet with the name \"Sheet A\" -->\n  <Sheet name=\"Sheet A\">\n    <SheetObject key=\"ObjectA\" />\n  </Sheet>\n\n  <!-- Will create a sheet with the name \"Sheet B\" -->\n  <Sheet name=\"Sheet B\">\n    <SheetObject key=\"ObjectB\" />\n  </Sheet>\n\n  <!-- Will NOT create a sheet but reference \"Sheet A\" -->\n  <Sheet name=\"Sheet A\">\n    <SheetObject key=\"ObjectC\" />\n  </Sheet>\n</Project>\n\n```\n\n----------------------------------------\n\nTITLE: Using useSpace hook in Threlte Studio\nDESCRIPTION: This example demonstrates how to import and utilize the `useSpace` hook from `@threlte/studio/extensions`. It shows how to toggle between spaces, set specific spaces ('local', 'world'), and retrieve the current space value. The hook allows users to manage the coordinate system or context within the Threlte Studio environment.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/use-space.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSpace } from '@threlte/studio/extensions'\n\nconst space = useSpace()\n\n// toggle the working space\nspace.toggleSpace()\n\n// set the working space to local\nspace.setSpace('local')\n\n// set the working space to world\nspace.setSpace('world')\n\n// get the working space\nconsole.log(space.space) // 'world'\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Gradient Stops in Svelte\nDESCRIPTION: This snippet defines a gradient with three color stops using the `<LinearGradientTexture>` component. The `stops` array contains objects specifying the color and offset for each stop.  This creates a gradient transitioning from cyan to magenta to yellow.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/linear-gradient-texture.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<LinearGradientTexture\n  stops={[\n    { color: '#00ffff', offset: 0 },\n    { color: '#ff00ff', offset: 0.5 },\n    { color: '#ffff00', offset: 1 }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useGltfAnimations with GLTF component in Svelte\nDESCRIPTION: This code snippet demonstrates how to use the `useGltfAnimations` hook with the `<GLTF>` component. It initializes the hook without any arguments and allows for animation playback through a custom function.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-gltf-animations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n  import { GLTF, useGltfAnimations } from '@threlte/extras'\n\n  const { gltf, actions, mixer } = useGltfAnimations<'All Animations'>()\n  mixer.timeScale = 0.5\n\n  export const triggerAnimation = () => {\n    $actions['All Animations']?.play()\n  }\n</script>\n\n<GLTF\n  url=\"/path/to/model.glb\"\n  bind:gltf={$gltf}\n/>\n```\n\n----------------------------------------\n\nTITLE: Plugin with Lifecycle Hooks and Effects\nDESCRIPTION: Shows how plugins can use Svelte lifecycle hooks and reactive effects to respond to component mounting and prop changes, just like they would inside a regular component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/plugins.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injectPlugin } from '@threlte/core'\nimport { onMount } from 'svelte'\n\ninjectPlugin('plugin-name', (args) => {\n  // Use lifecycle hooks as if it would run inside a <T> component.\n  // This code runs when the `<T>` component this plugin is injected\n  // into is mounted.\n  onMount(() => {\n    console.log('onMount')\n  })\n\n  // Use any prop that is defined on the <T> component, in this\n  // example `count`: <T.Mesh count={10} />\n  const count = $derived(args.props.count ?? 0)\n\n  $effect(() => {\n    // This code runs whenever count changes.\n    console.log(count)\n  })\n\n  return {\n    // Claiming the property \"count\" so that the <T> component\n    // does not act on it.\n    pluginProps: ['count']\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Task in a Specific Stage with useTask in TypeScript\nDESCRIPTION: Adding a task to a specific stage by passing the stage option. If no stage is specified, the task is added to Threlte's mainStage by default.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-task.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nuseTask(\n  (delta) => {\n    // This function will be executed on every frame as a\n    // task in the stage `afterRenderStage`.\n  },\n  { stage: afterRenderStage }\n)\n```\n\n----------------------------------------\n\nTITLE: Using InstancedMeshes with useGltf in Svelte\nDESCRIPTION: This snippet demonstrates how to use the <InstancedMeshes> component with a GLTF model loaded using the useGltf hook. It shows how to pass the nodes from the GLTF file and instantiate a specific mesh multiple times.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/instanced-meshes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useGltf, InstancedMeshes } from '@threlte/extras'\n\n  // Let's say the file contains a mesh named \"Cube\".\n  // The hook `useGltf`  will automatically provide a map with\n  // all nodes of the gltf file at the key `nodes`. When\n  // passing that map to the `<InstancedMeshes>` component, it will\n  // automatically filter out all nodes that are not\n  // `THREE.Mesh` instances.\n  const gltf = useGltf('path/to/file.gltf')\n</script>\n\n{#if $gltf}\n  <!--\n    You can use object destructuring\n    to access the component <Cube>\n  -->\n  <InstancedMeshes meshes={$gltf.nodes}>\n    {#snippet children({ components: { Cube } })}\n      <Cube position.y={2} position.x={-1}>\n    {/snippet}\n  </InstancedMeshes>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Instantiating TextureLoader with useLoader in Svelte\nDESCRIPTION: Shows how to instantiate a TextureLoader at the top level of a Svelte component using the useLoader hook.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-loader.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useLoader } from '@threlte/core'\n  import { TextureLoader } from 'three'\n\n  const loader = useLoader(TextureLoader)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Transition Events in Svelte\nDESCRIPTION: This snippet demonstrates how to listen for transition lifecycle events (introstart, outrostart, introend, outroend) on Threlte components using Svelte's event system. This allows for executing code in response to these transitions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/transitions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n{#if visible}\n  <T.Mesh\n    {geometry}\n    {material}\n    transition={fade}\n    onintrostart={() => console.log('intro started')}\n    onoutrostart={() => console.log('outro started')}\n    onintroend={() => console.log('intro ended')}\n    onoutroend={() => console.log('outro ended')}\n  />\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Adding an event listener to OrbitControls in Svelte\nDESCRIPTION: This code shows how to add an event listener to the OrbitControls component. It logs to the console when the camera is moved.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { OrbitControls } from '@threlte/extras'\n  import { T } from '@threlte/core'\n</script>\n\n<T.PerspectiveCamera\n  makeDefault\n  position={[5, 5, 5]}\n>\n  <OrbitControls\n    onchange={(e) => {\n      console.log(e)\n    }}\n  />\n</T.PerspectiveCamera>\n```\n\n----------------------------------------\n\nTITLE: Rendering Physics Debug Visualization in Threlte\nDESCRIPTION: Demonstrates how to add a Debug component to visualize colliders within a Threlte and Rapier physics scene. Includes Canvas, World, RigidBody, and AutoColliders components for a complete physics scene setup.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/debug.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<Canvas>\n  <World>\n    <Debug />\n\n    <RigidBody>\n      <AutoColliders>\n        <Mesh\n          {geometry}\n          {material}\n        />\n      </AutoColliders>\n    </RigidBody>\n  </World>\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Using useTransactions Hook in Threlte Studio\nDESCRIPTION: This code snippet demonstrates how to use the `useTransactions` hook from `@threlte/studio/extensions` to manage transactions. It includes building a transaction, committing a set of changes, undoing and redoing transactions, subscribing to transaction events, and opening an object in the editor. The snippet assumes that `mesh` is defined elsewhere in the component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/use-transactions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransactions } from '@threlte/studio/extensions'\n\nconst transactions = useTransactions()\n\n// convenience method for building a transaction\nconst transaction = transactions.buildTransaction({\n  object: mesh,\n  propertyPath: 'material.color',\n  value: 'red',\n  createHistoryRecord: true,\n  sync: true\n})\n\n// commit a set of changes to the transaction queue\ntransactions.commit([\n  transaction,\n  {\n    object: mesh,\n    write: (object, value) => {\n      object.position.set(value[0], value[1], value[2])\n    },\n    read(root) {\n      return root.position.toArray()\n    },\n    value: [1, 2, 3],\n    createHistoryRecord: true\n  }\n])\n\n// undo the last transaction\ntransactions.undo()\n\n// redo the last transaction\ntransactions.redo()\n\n// subscribe to events\ntransactions.onTransaction(() => {\n  // called when a transaction is committed, undone, or redone\n  console.log('transaction')\n})\ntransactions.onCommit(() => {\n  // called when a transaction is committed\n  console.log('commit')\n})\ntransactions.onUndo(() => {\n  // called when a transaction is undone\n  console.log('undo')\n})\ntransactions.onRedo(() => {\n  // called when a transaction is redone\n  console.log('redo')\n})\n\n// Clean up subscriptions\nconst unsubscribe = transactions.onTransaction(() => {\n  /* ... */\n})\nunsubscribe()\n\n// open the editor for the given object\ntransactions.openInEditor(mesh)\n\n// open the editor for the selected object\ntransactions.openSelectedInEditor()\n\n// check if the Vite plugin is enabled\ntransactions.vitePluginEnabled // true\n```\n\n----------------------------------------\n\nTITLE: Loading GLTF Models with GLTFLoader in Threlte\nDESCRIPTION: Demonstrates how to load a GLTF model using Three.js GLTFLoader with Threlte's useLoader hook. The loaded model is cached and wrapped in an asyncWritable store, which is then conditionally rendered.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/loading-assets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\n  import { useLoader } from '@threlte/core'\n\n  const gltf = useLoader(GLTFLoader).load('/assets/model.gltf')\n</script>\n\n{#if $gltf}\n  <T is={$gltf.scene} />\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Using InstancedSprite Component in Svelte\nDESCRIPTION: Example of how to use the <InstancedSprite> component with various props to render multiple sprite instances.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/instanced-sprite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<InstancedSprite\n  bind:ref\n  {spritesheet}\n  count={500}\n  playmode={'FORWARD'}\n  fps={9}\n  billboarding\n  hueShift={{ h: 1.5, s: 0.9, v: 1 }}\n  randomPlaybackOffset={2000}\n  castShadow\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useGltfAnimations with the useGltf hook in Svelte\nDESCRIPTION: This snippet illustrates the integration of the `useGltf` hook to obtain a GLTF store, which is then passed to `useGltfAnimations` to manage animations. The use of `$effect` allows for triggering animations based on changes.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-gltf-animations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/core'\n  import { useGltfAnimations, useGltf } from '@threlte/extras'\n\n  const gltf = useGltf('/path/to/model.glb')\n  const { actions, mixer } = useGltfAnimations<'All Animations'>(gltf)\n\n  $effect(() => {\n    $actions['All Animations']?.play()\n  })\n</script>\n\n{#await gltf then { scene }}\n  <T is={scene} />\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Components Loaded on XR Session Start in Svelte\nDESCRIPTION: Demonstrates how to conditionally load components like Controller and Hand inside the XR environment. By nesting these inside the XR component tag, they are initialized only upon starting an XR session, optimizing resource usage and enabling dynamic interaction management.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/getting-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\\n  import { XR, Controller, Hand } from '@threlte/xr'\\n</script>\\n\\n<XR>\\n  <Controller left />\\n  <Controller right />\\n  <Hand left />\\n  <Hand right />\\n</XR>\n```\n\n----------------------------------------\n\nTITLE: Using currentWritable for synchronous store access\nDESCRIPTION: Demonstrates using currentWritable, which provides a synchronous .current property for accessing store values in non-reactive contexts like animation loops, avoiding the performance cost of unwrapping stores.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/utilities.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = currentWritable(0)\n\nuseTask(() => {\n  console.log(store.current) // 0\n})\n```\n\n----------------------------------------\n\nTITLE: TransformControls with External Object Reference\nDESCRIPTION: Shows how to apply TransformControls to an existing object using the object prop or dynamic object reference\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/transform-controls.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n\\<script\\>\n  import { T } from '@threlte/core'\n  import { TransformControls } from '@threlte/extras'\n  import { MeshStandardMaterial, BoxGeometry } from 'three'\n\\</script\\>\n\n\\<T.Mesh\n  geometry={new BoxGeometry()}\n  material={new MeshStandardMaterial()}\n\\>\n  {#snippet children({ ref })}\n    \\<TransformControls object={ref} /\\>\n  {/snippet}\n\\</T.Mesh\\>\n\n\\<TransformControls object={someObject} /\\>\n```\n\n----------------------------------------\n\nTITLE: Optimizing MarchingCubes Memory Usage in Threlte\nDESCRIPTION: Demonstrates how to initialize the MarchingCubes object with performance optimizations by disabling vertex colors and UVs. The last parameter (20,000) sets the maximum number of vertices.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/marching-cubes/LavaLamp.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n// don't allocate space for vertex colors nor uvs\nconst marchingCubes = new MarchingCubes(resolution, material, false, false, 20_000)\n```\n\n----------------------------------------\n\nTITLE: Implementing Smooth Movement with useTask\nDESCRIPTION: This TypeScript snippet smoothly animates the player's movement by incrementing a vector's z-coordinate and calling the teleport function in a recurring task loop. It relies on the useTask function and works with the Threlte XR library for seamless teleportation.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/use-teleport.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseTask((delta) => {\n  vec3.z += delta\n  teleport(vec3)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Performance Profiling with useStage and useTask\nDESCRIPTION: A complete Svelte component that implements three-perf performance profiling using Threlte's stage system. It creates stages that run before and after Threlte's default stages to properly measure rendering performance.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-stage.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useStage, useTask, useThrelte } from '@threlte/core'\n  import { ThreePerf } from 'three-perf'\n\n  const { renderer, mainStage, renderStage } = useThrelte()\n\n  const perf = new ThreePerf({\n    anchorX: 'left',\n    anchorY: 'top',\n    domElement: document.body,\n    renderer\n  })\n\n  const beforeMainStage = useStage('three-perf-begin', {\n    before: mainStage\n  })\n\n  useTask(\n    () => {\n      perf.begin()\n    },\n    { stage: beforeMainStage }\n  )\n\n  const afterRenderStage = useStage('three-perf-end', {\n    after: renderStage\n  })\n\n  useTask(\n    () => {\n      perf.end()\n    },\n    { stage: afterRenderStage }\n  )\n</script>\n```\n\n----------------------------------------\n\nTITLE: Refraction with Cube Camera in Svelte\nDESCRIPTION: This Svelte component shows how to use a CubeCamera to dynamically generate an environment map for the MeshRefractionMaterial. It leverages @threlte/core's T component, useThrelte hook to access the scene and renderer, and useTask to update the CubeCamera before each render. The render target's texture is then used as the environment map for the MeshRefractionMaterial.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/mesh-refraction-material.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T, useThrelte, useTask } from '@threlte/core'\n  import { MeshRefractionMaterial } from '@threlte/extras'\n  import { WebGLCubeRenderTarget, CubeCamera } from 'three'\n\n  let renderTarget: WebGLCubeRenderTarget = new WebGLCubeRenderTarget(128)\n  let cubeCamera: CubeCamera = new CubeCamera(0.1, 100, renderTarget)\n\n  const { scene, renderer } = useThrelte()\n\n  useTask(() => {\n    if (cubeCamera) {\n      cubeCamera.update(renderer, scene)\n    }\n  })\n</script>\n\n<T.Mesh>\n  <MeshRefractionMaterial envMap={renderTarget.texture} />\n  <T.IcosahedronGeometry args={[4, 0]} />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Nesting Flex Components for Complex Layouts\nDESCRIPTION: This code snippet illustrates how to nest <Box> components within a <Flex> container to create more complex layouts while leveraging the properties of each box.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/getting-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<Flex\n  width={100}\n  height={100}\n  flexDirection=\"Column\"\n  justifyContent=\"SpaceEvenly\"\n  alignItems=\"Stretch\"\n>\n  <Box\n    width=\"auto\"\n    height=\"auto\"\n    flex={1}\n    justifyContent=\"SpaceEvenly\"\n    alignItems=\"Stretch\"\n    padding={20}\n    margin={20}\n    gap={20}\n  >\n    {#snippet children({ width, height })}\n      <Plane\n        color=\"orange\"\n        {width}\n        {height}\n        depth={1}\n      />\n      <Box\n        height=\"auto\"\n        flex={1}\n      >\n        {#snippet children({ width, height })}\n          <Plane\n            color=\"blue\"\n            {width}\n            {height}\n            depth={2}\n          />\n        {/snippet}\n      </Box>\n\n      <Box\n        height=\"auto\"\n        flex={1}\n      >\n        {#snippet children({ width, height })}\n          <Plane\n            color=\"red\"\n            {width}\n            {height}\n            depth={2}\n          />\n        {/snippet}\n      </Box>\n    {/snippet}\n  </Box>\n\n  <Box\n    height=\"auto\"\n    width=\"auto\"\n    flex={1}\n  >\n    {#snippet children({ width, height })}\n      <Plane\n        depth={1}\n        {width}\n        {height}\n      />\n    {/snippet}\n  </Box>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Custom Shape MeshLineGeometry Example\nDESCRIPTION: This Svelte code demonstrates how to use the `shape` and `shapeFunction` properties of the MeshLineGeometry component to define a custom shape for the line.  The `shape` property is set to `'custom'` and a function is passed to `shapeFunction` which dictates the width of the line at each point.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/meshline-geometry.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh>\n  <MeshLineGeometry\n    {points}\n    shape={'custom'}\n    shapeFunction={(p) => 1 - p}\n  />\n  <MeshLineMaterial />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for glTF Models\nDESCRIPTION: This snippet provides a way to define TypeScript types for a glTF model in a separate file and how to import it in a Svelte component. It enhances type safety and developer experience.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-gltf.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SomeGltf = {\n  nodes: {\n    Suzanne: THREE.Mesh\n  }\n  materials: {}\n}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useGltf } from '@threlte/extras'\n  import type { SomeGltf } from './SomeGltf.ts'\n\n  useGltf<SomeGltf>('model.glb')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Gradient Stops in Svelte\nDESCRIPTION: This example shows how to define gradient stops using the `stops` prop in the `<LinearGradientTexture>` component.  The `stops` prop accepts an array of objects, each with a `color` and an `offset`.  The offset value should be between 0 and 1, defining the position of the color in the gradient.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/linear-gradient-texture.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<LinearGradientTexture\n  stops={[\n    { color: 'black', offset: 0 },\n    { color: 'white', offset: 1 }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Transforming Loaded Texture with useTexture Hook in Svelte\nDESCRIPTION: This snippet shows how to pass a transform function to the useTexture hook for modifying the texture properties after it has been loaded. It demonstrates adjustments such as wrapping and repeating settings for the texture.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-texture.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { RepeatWrapping } from 'three'\n  import { T } from '@threlte/core'\n  import { useTexture } from '@threlte/extras'\n\n  const texture = useTexture('texture.png', {\n    transform: (texture) => {\n      texture.wrapS = RepeatWrapping\n      texture.wrapT = RepeatWrapping\n      texture.repeat.set(4, 4)\n      return texture\n    }\n  })\n</script>\n\n{#await texture then map}\n  <T.Mesh>\n    <T.SphereGeometry />\n    <T.MeshBasicMaterial {map} />\n  </T.Mesh>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Using GLTF Component with KTX2 Compression in Svelte\nDESCRIPTION: This snippet demonstrates how to use the <GLTF> component with KTX2 compressed textures. It uses the useKtx2 hook to create a cached instance of KTX2Loader and passes it to the GLTF component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/gltf.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useKtx2 } from '@threlte/extras'\n\n  const ktx2Loader = useKtx2('path/to/transcoder') // Creates a cached instance of KTX2Loader\n</script>\n\n<GLTF\n  url=\"/models/helmet/DamagedHelmet.gltf\"\n  {ktx2Loader}\n/>\n```\n\n----------------------------------------\n\nTITLE: Update Render Properties - TypeScript\nDESCRIPTION: This code snippet updates rendering properties, specifically the tone mapping method using the `useThrelte` hook. It demonstrates how to correctly set render properties to achieve desired visual effects.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-threlte.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { toneMapping } = useThrelte()\ntoneMapping.set(THREE.LinearToneMapping)\n```\n\n----------------------------------------\n\nTITLE: Creating a Theatre.js Project with Threlte in Svelte\nDESCRIPTION: This snippet demonstrates how to create a Theatre.js project using Threlte's Svelte components. By importing Project, Sheet, and SheetObject from '@threlte/theatre', users can define a project with a specified name. The snippet creates a structured project, organizing a sheet, and an object within that sheet. No additional dependencies are required beyond Threlte's library, and no complex inputs or outputs are present beyond the project structure itself.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/project.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\\n  import { Project, Sheet, SheetObject } from '@threlte/theatre'\\n<\\/script>\\n\\n<!-- Will create a project with the name \\\"Project A\\\" -->\\n<Project name=\\\"Project A\\\">\\n  <Sheet name=\\\"Sheet A\\\">\\n    <SheetObject key=\\\"ObjectA\\\" \\/>\\n  <\\/Sheet>\\n<\\/Project>\n```\n\n----------------------------------------\n\nTITLE: Implementing TrackballControls with Threlte Extras in Svelte\nDESCRIPTION: This code snippet demonstrates how to import and use the TrackballControls component from the @threlte/extras package in a Svelte application. The component is configured as a child of a PerspectiveCamera and manages the camera's orbit around a target object in a 3D scene. It requires the @threlte/extras and @threlte/core packages. The main parameter is the <T.PerspectiveCamera> component, which needs `makeDefault` and `fov` values to function correctly. The output is a responsive camera system suitable for 3D model inspection.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/trackball-controls.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\\n  import { TrackballControls } from '@threlte/extras'\\n  import { T } from '@threlte/core'\\n</script>\\n\\n<T.PerspectiveCamera\\n  makeDefault\\n  fov={50}\\n>\\n  <TrackballControls />\\n</T.PerspectiveCamera>\n```\n\n----------------------------------------\n\nTITLE: Using Headset Pose in Svelte with Threlte\nDESCRIPTION: This snippet demonstrates how to use the custom hook useHeadset to retrieve the current position and rotation of the user's headset. The snippet includes importing necessary components from the @threlte/core and @threlte/xr packages, and then logging the headset's pose using the useTask function.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/use-headset.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n\"\"\"svelte\\n<script>\\n  import { useTask } from '@threlte/core'\\n  import { useHeadset } from '@threlte/xr'\\n\\n  const headset = useHeadset()\\n\\n  useTask(() => {\\n    // Read the current headset position and rotation.\\n    console.log(headset.position, headset.quaternion)\\n  })\\n</script>\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of CubeCamera Component in Svelte\nDESCRIPTION: Demonstrates how to use the CubeCamera component to create a reflective sphere using the render target's texture.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/cube-camera.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<CubeCamera>\n  {#snippet children({ renderTarget })}\n    <T.Mesh>\n      <T.SphereGeometry />\n      <T.MeshStandardMaterial envMap={renderTarget.texture} />\n    </T.Mesh>\n  {/snippet}\n</CubeCamera>\n```\n\n----------------------------------------\n\nTITLE: Filtering Interactivity Events - Svelte\nDESCRIPTION: Provides a mechanism to filter and sort interaction events using the interactivity plugin, allowing for granular control over which hits should trigger event handlers. Essential for managing complex scene interactions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/interactivity.mdx#2025-04-22_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { interactivity } from '@threlte/extras'\n\n  interactivity({\n    filter: (hits, state) => {\n      // Only return the first hit\n      return hits.slice(0, 1)\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS2DRenderer and Render Loop in Threlte\nDESCRIPTION: Sets up CSS2DRenderer to run alongside Threlte's default renderer, handling matrix updates once per frame and ensuring proper rendering order. The code initializes the renderer, handles resizing, and integrates with Threlte's task scheduling system.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/renderers/CSS2DRenderer Overlay.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  const { scene, size, autoRenderTask, camera } = useThrelte()\n\n  // Set up the CSS2DRenderer to run in a div placed atop the <Canvas>\n  const element = document.querySelector('#css-renderer-target') as HTMLElement\n  const cssRenderer = new CSS2DRenderer({ element })\n  $: cssRenderer.setSize($size.width, $size.height)\n\n  // We are running two renderers, and don't want to run\n  // updateMatrixWorld twice; tell the renderers that we'll handle\n  // it manually.\n  // https://threejs.org/docs/#api/en/core/Object3D.updateWorldMatrix\n  scene.matrixWorldAutoUpdate = false\n\n  // To update the matrices *once* per frame, we'll use a task that is added\n  // right before the autoRenderTask. This way, we can be sure that the\n  // matrices are updated before the renderers run.\n  useTask(\n    () => {\n      scene.updateMatrixWorld()\n    },\n    { before: autoRenderTask }\n  )\n\n  // The CSS2DRenderer needs to be updated after the autoRenderTask, so we\n  // add a task that runs after it.\n  useTask(\n    () => {\n      // Update the DOM\n      cssRenderer.render(scene, camera.current)\n    },\n    {\n      after: autoRenderTask,\n      autoInvalidate: false\n    }\n  )\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Portal with PortalTarget in Svelte\nDESCRIPTION: This code snippet shows how to use a Portal component to render content into a PortalTarget with the same id. It creates a red box mesh within the portal with the id \"trail\".\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/portal-target.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n\"<Portal id=\\\"trail\\\">\\n  <!-- Use a portal with the id \\\"trail -->\\n  <T.Mesh>\\n    <T.BoxGeometry />\\n    <T.MeshStandardMaterial color=\\\"red\\\" />\\n  </T.Mesh>\\n</Portal>\"\n```\n\n----------------------------------------\n\nTITLE: Applying Transitions Based on Component Lifecycle\nDESCRIPTION: This series of snippets illustrate how to use different transition directions 'in', 'out', and 'both' for Threlte components. It helps in controlling when transitions are triggered based on the component's lifecycle.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/transitions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<T.MeshStandardMaterial in={fade} />\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<T.MeshStandardMaterial out={fade} />\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<T.MeshStandardMaterial transition={fade} />\n```\n\n----------------------------------------\n\nTITLE: Using useSnapping Hook in Threlte Studio\nDESCRIPTION: This snippet demonstrates how to import, initialize, and use the `useSnapping` hook from `@threlte/studio/extensions`. It shows how to enable/disable snapping, toggle its state, set translate, rotate and scale values, and access the current snapping states.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/use-snapping.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSnapping } from '@threlte/studio/extensions'\n\nconst snapping = useSnapping()\n\n// enable snapping\nsnapping.setEnabled(true)\n\n// toggle snapping\nsnapping.toggleEnabled()\n\n// set the translate snapping value\nsnapping.setTranslate(10)\n\n// set the rotate snapping value\nsnapping.setRotate(15)\n\n// set the scale snapping value\nsnapping.setScale(0.1)\n\n// get the enabled state\nconsole.log(snapping.enabled) // true\n\n// get the translate snapping value\nconsole.log(snapping.translate) // 10\n\n// get the rotate snapping value\nconsole.log(snapping.rotate) // 15\n\n// get the scale snapping value\nconsole.log(snapping.scale) // 0.1\n```\n\n----------------------------------------\n\nTITLE: Refraction with Texture in Svelte\nDESCRIPTION: This Svelte component demonstrates how to use the MeshRefractionMaterial with a loaded texture as the environment map. It uses @threlte/core's T component for Three.js elements and useLoader for loading an HDR environment map using RGBELoader. The environment map is then passed to the MeshRefractionMaterial component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/mesh-refraction-material.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T, useLoader } from '@threlte/core'\n  import { MeshRefractionMaterial } from '@threlte/extras'\n  import { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js'\n\n  const env = useLoader(RGBELoader).load('/hdr/aerodynamics_workshop_1k.hdr')\n</script>\n\n{#await env then texture}\n  <T.Mesh>\n    <MeshRefractionMaterial envMap={texture} />\n    <T.IcosahedronGeometry args={[4, 0]} />\n  </T.Mesh>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Using `useGltfAnimations` for Animation Control\nDESCRIPTION: This snippet illustrates the updated usage of the `useGltfAnimations` hook, showcasing how to handle GLTF animations without a callback. The example highlights the use of the `actions` store to initiate animations once the GLTF store is populated.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst { actions } = useGltfAnimations(gltf)\n// this animation will play when the gltf store has been populated\n// and the actions store has been set, effectively replacing the\n// callback.\n$: $actions.Greet?.play()\n```\n\n----------------------------------------\n\nTITLE: Accessing DOM Events with useThrelte Hook\nDESCRIPTION: The useThrelte hook allows direct access to HTML div wrapper and canvas for event handling in Threlte. This enables developers to attach standard DOM events to 3D scene elements.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/handling-events.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\nconst { dom, canvas } = useThrelte()\n```\n\n----------------------------------------\n\nTITLE: Manual Refresh of ContactShadows in Svelte\nDESCRIPTION: This snippet demonstrates how to manually refresh the ContactShadows component using the refresh binding. It sets up an event handler that calls the refresh function when triggered.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/contact-shadows.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let refresh\n\n  const onSomeEvent = () => {\n    if (refresh) refresh()\n  }\n</script>\n\n<ContactShadows\n  bind:refresh\n  frames={0}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Environment Component with Suspense in Svelte\nDESCRIPTION: Shows how to use the <Environment> component within a Suspense context to handle loading states for environment textures.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/environment.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Suspense, Text } from '@threlte/extras'\n</script>\n\n<Suspense>\n  {#snippet fallback()}\n    <Text text=\"loading environment\" />\n  {/snippet}\n  <Environment url=\"https//url-of-your-file.hdr\" />\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Setting Render Mode with useThrelte Hook in TypeScript\nDESCRIPTION: Shows how to set the render mode from anywhere within a Threlte app using the useThrelte hook.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/render-modes.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { renderMode } = useThrelte()\nrenderMode.set('on-demand')\n```\n\n----------------------------------------\n\nTITLE: Suspense-Ready Text Component with Character Preloading\nDESCRIPTION: Shows how to use the Text component with Suspense for handling font loading and preloading specific characters to prevent content flashing\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/text.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Text, Suspense } from '@threlte/extras'\n</script>\n\n<Suspense>\n  <Text\n    text=\"HELLO WORLD\"\n    characters=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  />\n\n  {#snippet fallback()}\n    <!-- show fallback content while font data is loading -->\n  {/snippet}\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Binding Ref to Camera in Threlte Svelte\nDESCRIPTION: This snippet demonstrates how to use binding in Svelte to get a reference to the camera object, allowing for reactive use of the camera in the component's logic.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_20\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let camera = $state()\n  $effect(() => {\n    console.log(camera) // THREE.PerspectiveCamera\n  })\n</script>\n\n<T.PerspectiveCamera bind:ref={camera} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Render Pipeline in Svelte\nDESCRIPTION: Implementing a custom rendering pipeline by adding a task to Threlte's renderStage and disabling automatic rendering. This gives full control over the rendering process.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-task.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useTask, useThrelte } from '@threlte/core'\n  import { onMount } from 'svelte'\n\n  const { renderStage, autoRender } = useThrelte()\n\n  // disable auto rendering\n  onMount(() => {\n    let before = autoRender.current\n    autoRender.set(false)\n    return () => autoRender.set(before)\n  })\n\n  useTask(\n    (delta) => {\n      // render your scene here\n    },\n    { stage: renderStage, autoInvalidate: false }\n  )\n</script>\n```\n\n----------------------------------------\n\nTITLE: Conditional Application of meshBounds in a Plugin\nDESCRIPTION: This snippet enables the conditional application of the meshBounds function based on a prop (raycastMeshBounds). It showcases an advanced use of the plugin system in a Svelte component to manage function assignments dynamically.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/mesh-bounds.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script title=\"Scene.svelte\">\\n  import { T, injectPlugin, isInstanceOf } from '@threlte/core'\\n  import { meshBounds } from '@threlte/extras'\\n  import { onDestroy } from 'svelte'\\n\\n  injectPlugin('mesh-bounds-plugin', (args) => {\\n    if (!isInstanceOf(args.ref, 'Mesh')) return\\n\\n    const originalRaycast = args.ref.raycast\\n\\n    $effect(() => {\\n      if (!!args.props.raycastMeshBounds) {\\n        args.ref.raycast = meshBounds\\n      } else {\\n        args.ref.raycast = originalRaycast\\n      }\\n    })\\n\\n    onDestroy(() => {\\n      args.ref.raycast = originalRaycast\\n    })\\n\\n    return {\\n      pluginProps: ['raycastMeshBounds']\\n    }\\n  })\\n</script>\\n\\n<!-- Regular raycasting -->\\n<T.Mesh>\\n  <T.MeshBasicMaterial color=\"hotpink\" />\\n  <T.BoxGeometry />\\n</T.Mesh>\\n\\n<!-- meshBounds raycasting -->\\n<T.Mesh raycastMeshBounds>\\n  <T.MeshBasicMaterial color=\"hotpink\" />\\n  <T.BoxGeometry />\\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Using GLTF Component with Meshopt Compression in Svelte\nDESCRIPTION: This snippet shows how to use the <GLTF> component with Meshopt compression. It imports the useMeshopt hook to create a cached instance of MeshoptDecoder and passes it to the GLTF component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/gltf.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { GLTF, useMeshopt } from '@threlte/extras'\n\n  const meshoptDecoder = useMeshopt() // Creates a cached instance of MeshoptDecoder\n</script>\n\n<GLTF\n  url=\"/models/helmet/DamagedHelmet.gltf\"\n  {meshoptDecoder}\n/>\n```\n\n----------------------------------------\n\nTITLE: Flex and Box Component Usage in Svelte\nDESCRIPTION: This Svelte component demonstrates how to use the `<Flex>` and `<Box>` components from `@threlte/flex` to create a layout. It sets the width and height of the `<Flex>` component and uses the `<Box>` component to contain a 3D model. The `justifyContent` and `alignItems` props are used to control the alignment of the content within the `<Flex>` container.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/use-dimensions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Flex, Box } from '@threlte/flex'\n  import Model from './Model.svelte'\n</script>\n\n<Flex\n  width={100}\n  height={100}\n  justifyContent=\"Center\"\n  alignItems=\"Stretch\"\n>\n  <Box\n    width=\"auto\"\n    height=\"auto\"\n    flex={1}\n  >\n    <Model />\n  </Box>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flex Properties\nDESCRIPTION: This snippet shows how to configure properties of <Flex> and <Box> components to alter their layout with flex direction, alignment, and auto sizing.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<Flex\n  width={100}\n  height={100}\n  flexDirection=\"Column\"\n  justifyContent=\"SpaceEvenly\"\n  alignItems=\"Stretch\"\n>\n  <Box\n    width=\"auto\"\n    height=\"auto\"\n    flex={1}\n  >\n    {#snippet children({ width, height })}\n      <Plane\n        {width}\n        {height}\n      />\n    {/snippet}\n  </Box>\n\n  <Box\n    width=\"auto\"\n    height=\"auto\"\n    flex={1}\n  >\n    {#snippet children({ width, height })}\n      <Plane\n        {width}\n        {height}\n      />\n    {/snippet}\n  </Box>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Masks in Svelte\nDESCRIPTION: This example shows how to define multiple mask shapes with the same id to create compound masks in Svelte. Additionally, it provides options to make a mask function as a regular mesh by specifying properties like `colorWrite` and `depthWrite`. It extends Svelte components and requires the Three.js library to operate the masks.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/mask.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<Mask\\n  position={[-1, 0, 0]}\\n  id={1}\\n>\\n  <T.PlaneGeometry />\\n  <T.MeshBasicMaterial />\\n</Mask>\\n<Mask\\n  colorWrite\\n  depthWrite\\n  position={[1, 0, 0]}\\n  id={1}\\n>\\n  <T.CircleGeometry />\\n  <T.MeshBasicMaterial />\\n</Mask>\n```\n\n----------------------------------------\n\nTITLE: Auto-generated Svelte Component for Model\nDESCRIPTION: This Svelte component is automatically generated from a GLTF model, allowing it to be used as a part of a Threlte/Three.js scene. It imports necessary modules and hooks to manage the GLTF contents and animations.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/packages/gltf/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Svelte\nCODE:\n```\n<script>\n  import { Group } from 'three'\n  import { T } from '@threlte/core'\n  import { useGltf, useGltfAnimations } from '@threlte/extras'\n\n  export const ref = new Group()\n\n  const gltf = useGltf('/stacy.glb')\n  export const { actions, mixer } = useGltfAnimations(gltf, ref)\n</script>\n\n{#if $gltf}\n  <T\n    is={ref}\n    {...$$restProps}\n  >\n    <T.Group name=\"Scene\">\n      <T.Group\n        name=\"Stacy\"\n        rotation={[Math.PI / 2, 0, 0]}\n        scale={0.01}\n      >\n        <T is={$gltf.nodes.mixamorigHips} />\n        <T.SkinnedMesh\n          name=\"stacy\"\n          geometry={$gltf.nodes.stacy.geometry}\n          material={$gltf.nodes.stacy.material}\n          skeleton={$gltf.nodes.stacy.skeleton}\n          rotation={[-Math.PI / 2, 0, 0]}\n          scale={100}\n        />\n      </T.Group>\n    </T.Group>\n\n    <slot {ref} />\n  </T>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Configuring Render Target Size in useFBO\nDESCRIPTION: This snippet demonstrates how to use the size option in the useFBO hook to set the width and height of the WebGLRenderTarget in ThreeJS. Dependencies include the useThrelte hook for obtaining the current canvas size. It relies on size configuration to adjust dimensions dynamically or through explicit values. Input: size object with width and height properties. Output: Render target with specified or default dimensions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-fbo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { size } = useThrelte()\n\n// use `size`'s width and height\nconst target = useFBO()\n\nassert(target.width === size.current.width)\nassert(target.height === size.current.height)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst size = { width: 512, height: 512 }\n\nconst target = useFBO({ size })\nassert(target.width === size.width)\nassert(target.height === size.height)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst size = { width: 512 }\n\nconst target = useFBO({ size })\nassert(target.width === size.width)\nassert(target.height === 1)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst size = { height: 512 }\n\nconst target = useFBO({ size })\nassert(target.width === 1)\nassert(target.height === size.height)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst size = {}\n\nconst target = useFBO({ size })\nassert(target.width === 1)\nassert(target.height === 1)\n```\n\n----------------------------------------\n\nTITLE: Implementing OrbitControls in Svelte with Threlte\nDESCRIPTION: This snippet demonstrates how to use the OrbitControls component from @threlte/extras in a Svelte component. It sets up a PerspectiveCamera and adds OrbitControls to it.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { OrbitControls } from '@threlte/extras'\n  import { T } from '@threlte/core'\n</script>\n\n<T.PerspectiveCamera\n  makeDefault\n  position={[5, 5, 5]}\n>\n  <OrbitControls />\n</T.PerspectiveCamera>\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Render for Custom Rendering in Svelte\nDESCRIPTION: Demonstrates how to disable automatic rendering by setting autoRender to false on the Canvas component for custom rendering scenarios.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/render-modes.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<Canvas autoRender={false} />\n```\n\n----------------------------------------\n\nTITLE: Rendering 3D Text with a Custom Font and Suspense\nDESCRIPTION: Demonstrates rendering 3D text using a custom font and integrating with a suspense boundary in Svelte. The <Text3DGeometry> is used inside a <Suspense> component with a fallback. The rendering waits for the font to load, ensuring it's suspense-ready.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/text-3d-geometry.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/core'\n  import { Text3DGeometry, Suspense } from '@threlte/extras'\n  import Fallback from './Fallback.svelte'\n</script>\n\n<Suspense>\n  <T.Mesh>\n    <Text3DGeometry\n      font={'path-to-your-font'}\n      text={'Hello World'}\n    />\n    <T.MeshStandardMaterial />\n  </T.Mesh>\n\n  {#snippet fallback()}\n    <Fallback />\n  {/snippet}\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Listening to Change Event on OrbitControls in Threlte Svelte\nDESCRIPTION: This code snippet demonstrates adding an event listener to OrbitControls in Threlte, allowing for event handling tied to the underlying THREE.js instance's events.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_17\n\nLANGUAGE: svelte\nCODE:\n```\n<T\n  is={OrbitControls}\n  onchange={(e) => console.log('change:', e)}\n/>\n```\n\n----------------------------------------\n\nTITLE: MeshLineGeometry Example\nDESCRIPTION: This Svelte code demonstrates how to use MeshLineGeometry with MeshLineMaterial to create a line in a Threlte scene. It defines an array of Vector3 points and passes them to the MeshLineGeometry component. The MeshLineMaterial component is used to define the appearance of the line.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/meshline-geometry.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  const points = [new Vector3(-1, 1, -1), new Vector3(0, 1, 0), new Vector3(1, 1, 1)]\n</script>\n\n<T.Mesh>\n  <MeshLineGeometry {points} />\n  <MeshLineMaterial\n    width={0.5}\n    color=\"#fe3d00\"\n  />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Configuring Grounded Skybox with Environment Component in Svelte\nDESCRIPTION: Demonstrates how to set up a grounded skybox using the <Environment> component and adjust its position based on height.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/environment.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let skybox = $state() // GroundedSkybox | undefined\n\n  const height = 15\n\n  $effect(() => {\n    skybox?.position.setY(height)\n  })\n</script>\n\n<Environment\n  bind:skybox\n  url=\"file.hdr\"\n  ground={{ height }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing useSequence Hook in Svelte Component\nDESCRIPTION: Demonstrates importing and destructuring the useSequence hook to access sequence playback controls and state management methods\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/use-sequence.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n\\u003cscript lang=\"ts\"\\u003e\n  import { useSequence } from '@threlte/theatre'\n  const { position, playing, length, play, pause, config } = useSequence()\n\\u003c/script\\u003e\n```\n\n----------------------------------------\n\nTITLE: Handling Mesh Events - Svelte\nDESCRIPTION: This snippet shows the usage of interactivity in Threlte mesh components. It attaches click event handlers on a `T.Mesh` component, demonstrating practical usage of event-driven interactions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/interactivity.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { interactivity } from '@threlte/extras'\n  interactivity()\n</script>\n\n<T.Mesh\n  onclick={() => {\n    console.log('clicked')\n  }}\n>\n  <T.BoxGeometry />\n  <T.MeshStandardMaterial color=\"red\" />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Implementing Billboard Component in Svelte with Threlte\nDESCRIPTION: This example demonstrates how to use the Billboard component from @threlte/extras. It creates a billboard with a mesh that always faces the camera. The component takes an optional 'follow' prop to control its behavior.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/billboard.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/core'\n  import { Billboard } from '@threlte/extras'\n</script>\n\n<Billboard>\n  <T.Mesh>\n    <T.MeshStandardMaterial />\n    <T.PlaneGeometry args={[2, 2]} />\n  </T.Mesh>\n</Billboard>\n```\n\n----------------------------------------\n\nTITLE: Nesting Objects in InstancedMesh Component in Svelte\nDESCRIPTION: Shows how to nest other objects, such as GLTF models, within an <InstancedMesh> component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/instanced-mesh.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<InstancedMesh>\n  <T.BoxGeometry />\n  <T.MeshStandardMaterial />\n\n  <Instance />\n  <Instance />\n\n  <GLTF />\n</InstancedMesh>\n```\n\n----------------------------------------\n\nTITLE: Generated Threlte Component for GLTF - Svelte\nDESCRIPTION: This snippet illustrates an auto-generated Svelte component for rendering a GLTF model. It imports necessary modules from Three.js and Threlte, sets up properties using bindable, and utilizes hooks to handle animations and the GLTF model.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/gltf/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<!--\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@0.0.1 ./stacy.glb\n-->\n<script>\n  import { Group } from 'three'\n  import { T } from '@threlte/core'\n  import { useGltf, useGltfAnimations } from '@threlte/extras'\n\n  let {\n    ref = $bindable(),\n    actions = $bindable(),\n    mixer = $bindable(),\n    children,\n    ...props\n  } = $props()\n\n  const gltf = useGltf('/stacy.glb')\n  const animations = useGltfAnimations(gltf, ref)\n  actions = animations.actions\n  mixer = animations.mixer\n</script>\n\n{#if $gltf}\n  <T.Group\n    bind:ref\n    {...props}\n  >\n    <T.Group name=\"Scene\">\n      <T.Group\n        name=\"Stacy\"\n        rotation={[Math.PI / 2, 0, 0]}\n        scale={0.01}\n      >\n        <T is={$gltf.nodes.mixamorigHips} />\n        <T.SkinnedMesh\n          name=\"stacy\"\n          geometry={$gltf.nodes.stacy.geometry}\n          material={$gltf.nodes.stacy.material}\n          skeleton={$gltf.nodes.stacy.skeleton}\n          rotation={[-Math.PI / 2, 0, 0]}\n          scale={100}\n        />\n      </T.Group>\n    </T.Group>\n\n    {@render children?.({ ref })}\n  </T.Group>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Manually Rendering HTML Component in Svelte\nDESCRIPTION: This snippet demonstrates how to manually render the HTML component by binding to it and calling the render method in an effect.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/html.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let html = $state()\n\n  $effect(() => {\n    // if (shouldRender) {\n    html?.render()\n    // }\n  })\n</script>\n\n<HTML\n  autoRender={false}\n  bind:this={html}\n>\n  <h1>Hello World</h1>\n</HTML>\n```\n\n----------------------------------------\n\nTITLE: Mixing Declarative and Imperative Approaches for Multiple Materials in Threlte\nDESCRIPTION: Shows an alternative approach to applying different textures to different faces by creating an array of MeshStandardMaterial instances imperatively and attaching them declaratively.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/loading-assets.mdx#2025-04-22_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  // imports and other code\n  const customMaterials = [\n    new MeshStandardMaterial({ map: texture1 }),\n    new MeshStandardMaterial({ map: texture2 })\n  ]\n</script>\n\n<T.Mesh>\n  <T.BoxGeometry />\n  <T\n    is={customMaterials}\n    attach=\"material\"\n  />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Extending T Component Catalogue with OrbitControls\nDESCRIPTION: Shows how to extend the default T component catalogue to add OrbitControls, allowing it to be used with dot-notation in a PerspectiveCamera component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T, extend, useThrelte } from '@threlte/core'\n  import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\n\n  extend({\n    OrbitControls\n  })\n\n  const { renderer } = useThrelte()\n</script>\n\n<T.PerspectiveCamera makeDefault>\n  {#snippet children({ ref })}\n    <T.OrbitControls args={[ref, renderer.domElement]} />\n  {/snippet}\n</T.PerspectiveCamera>\n```\n\n----------------------------------------\n\nTITLE: Using the BVH Raycast Plugin in a Scene\nDESCRIPTION: Demonstrates how to implement the BVH raycasting plugin in a Threlte scene, which will automatically enhance all mesh components with optimized raycasting.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/plugins.mdx#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/core'\n  import bvhRaycasting from './plugins/bvhRaycasting.svelte'\n\n  bvhRaycasting()\n</script>\n\n<T.Mesh>\n  <T.MeshBasicMaterial />\n  <T.BoxGeometry />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Using Pierced Props with T Component in Svelte\nDESCRIPTION: Demonstrates how to use pierced props to update only specific coordinates of a position vector with the T component in Svelte.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n</script>\n\n<T.Mesh position.y={1}>\n  <T.BoxGeometry />\n  <T.MeshBasicMaterial color=\"red\" />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Configuring XR Environment in Svelte\nDESCRIPTION: Enables VR session controls by importing XR components such as Controller and Hand from @threlte/xr. This configuration in the scene.svelte file allows for interactive VR sessions with hand and controller inputs. The various components can be initialized when the XR session starts, and dependencies include @threlte/xr for creating the XR environment.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\\n  import { XR, Controller, Hand } from '@threlte/xr'\\n</script>\\n\\n<XR />\\n<Controller left />\\n<Controller right />\\n<Hand left />\\n<Hand right />\n```\n\n----------------------------------------\n\nTITLE: Using usePhysicsTask Hook with Varying Framerate in Svelte\nDESCRIPTION: This snippet demonstrates the usage of the usePhysicsTask hook within a Svelte component when the framerate is set to varying. The provided callback logs the delta time to track the simulation's performance.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-physics-task.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<World framerate=\"varying\">\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nusePhysicsTask((delta) => {\n  console.log(delta) // ~0.016\n})\n```\n\n----------------------------------------\n\nTITLE: Using useGltf Hook for Basic Model Loading in Svelte\nDESCRIPTION: This snippet demonstrates how to use the useGltf hook from @threlte/extras to load a glTF model and render it using the <T> component. The 'gltf' store is populated once the model is loaded, allowing for rendering of the entire object node or its geometry.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-gltf.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/core'\n  import { useGltf } from '@threlte/extras'\n  import { MeshBasicMaterial } from 'three'\n\n  const gltf = useGltf('/path/to/model.glb')\n</script>\n\n<!-- Use an object node entirely -->\n{#if $gltf}\n  <T is={$gltf.nodes['node-name']} />\n{/if}\n\n<!-- or only the geometry -->\n{#if $gltf}\n  <T.Mesh\n    geometry={$gltf.nodes['node-name'].geometry}\n    material={new MeshBasicMaterial()}\n  />\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Nesting Instances with Transformations in InstancedMesh Component in Svelte\nDESCRIPTION: Shows how to nest instances within other objects and apply transformations, demonstrating that parent transformations affect the instances as expected.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/instanced-mesh.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<InstancedMesh>\n  <T.BoxGeometry />\n  <T.MeshStandardMaterial />\n\n  <T.Group rotation.z={DEG2RAD * 180}>\n    <Instance />\n\n    <T.Group position.y={2}>\n      <Instance />\n    </T.Group>\n  </T.Group>\n</InstancedMesh>\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin for Automatic meshBounds Application\nDESCRIPTION: This snippet shows how to create a Threlte plugin that automatically applies the meshBounds raycast function to all Mesh instances in the scene. It simplifies the integration process by injecting the plugin during scene setup.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/mesh-bounds.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script title=\"Scene.svelte\">\\n  import { T, injectPlugin, isInstanceOf } from '@threlte/core'\\n  import { meshBounds } from '@threlte/extras'\\n\\n  injectPlugin('mesh-bounds-plugin', (args) => {\\n    if (isInstanceOf(args.ref, 'Mesh')) {\\n      args.ref.raycast = meshBounds\\n    }\\n  })\\n</script>\\n\\n<!-- No need to manually apply the meshBounds raycast function -->\\n<T.Mesh>\\n  <T.MeshBasicMaterial color=\"hotpink\" />\\n  <T.BoxGeometry />\\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Using Instance Components within InstancedMesh in Svelte\nDESCRIPTION: This snippet demonstrates how to use multiple <Instance> components within an <InstancedMesh> component. Each instance can have individual position, scale, and color properties set.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/instance.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<InstancedMesh>\n  <T.BoxGeometry />\n  <T.MeshStandardMaterial />\n\n  <Instance\n    position.x={5}\n    scale={1}\n  />\n  <Instance\n    position.z={2}\n    scale={2}\n    color=\"red\"\n  />\n</InstancedMesh>\n```\n\n----------------------------------------\n\nTITLE: Using ImageMaterial Component in Svelte\nDESCRIPTION: This snippet demonstrates how to use the ImageMaterial component with a mesh in a Svelte component. It shows setting up a plane geometry with the ImageMaterial, including various properties like transparency, side rendering, image URL, radius, and zoom.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/image-material.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { DoubleSide } from 'three'\n  import { ImageMaterial } from '@threlte/extras'\n</script>\n\n<T.Mesh>\n  <T.PlaneGeometry />\n  <ImageMaterial\n    transparent\n    side={DoubleSide}\n    url=\"KlimtDieJungfrau.jpg\"\n    radius={0.1}\n    zoom={1.1}\n  />\n<T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Setting Gradient Start and End Points in Svelte\nDESCRIPTION: This snippet demonstrates how to control the gradient start and end points using the `startX`, `startY`, `endX`, and `endY` props of the `<LinearGradientTexture>` component. It defines a gradient that starts at the bottom-left corner and ends at the top-right corner of the texture, using the `width` and `height` variables to determine the coordinates.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/linear-gradient-texture.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<LinearGradientTexture\n  startX={0}\n  startY={height}\n  endX={width}\n  endY={0}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Object on Creation in Threlte Svelte\nDESCRIPTION: This snippet illustrates how to handle the 'create' event to access the THREE.js instance directly upon creation of a PerspectiveCamera in Threlte Svelte.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_18\n\nLANGUAGE: svelte\nCODE:\n```\n<T.PerspectiveCamera\n  oncreate={(ref) => {\n    // Look at the center\n    ref.lookAt(0, 0, 0)\n\n    return () => {\n      // Do something when the camera is disposed\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Cursor Hook with Default Styles - Svelte/TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `useCursor` hook to set the cursor style to 'grab' when hovering over a mesh and 'crosshair' when not. It shows the necessary imports and event handler assignment.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-cursor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/core'\n  import { useCursor } from '@threlte/extras'\n  import { BoxGeometry, MeshBasicMaterial } from 'three'\n\n  // Set the cursor to 'grab' if the pointer is\n  // hovering over the mesh and to 'crosshair'\n  // if the pointer is outside the mesh\n  const { onPointerEnter, onPointerLeave } = useCursor('grab', 'crosshair')\n</script>\n\n<T.Mesh\n  onpointerenter={onPointerEnter}\n  geometry={new BoxGeometry()}\n  material={new MeshBasicMaterial()} /\n>\n```\n\n----------------------------------------\n\nTITLE: Class Definition and Instantiation in Three.js\nDESCRIPTION: Demonstrates the terminology and syntax for defining and instantiating classes in Three.js, showing both basic instantiation and instantiation with constructor arguments.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Class definition:\nclass Mesh extends THREE.Object3D {\n  constructor(geometry, material) {\n    /* … */\n  }\n}\n\n// Creating a class instance:\nconst mesh = new Mesh()\n\n// Creating a class instance with constructor arguments:\nconst mesh = new Mesh(geometry, material)\n```\n\n----------------------------------------\n\nTITLE: Using useKtx2 Hook for KTX2 Texture Support in TypeScript\nDESCRIPTION: This snippet demonstrates the usage of the useKtx2 hook for loading KTX2 textures along with a specified transcoder path. It also shows how to provide a custom instance of KTX2Loader.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-gltf.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useGltf, useKtx2 } from '@threlte/extras'\n\nconst ktx2Loader = useKtx2('path/to/transcoder/')\nconst gltf = useGltf('/path/to/model.glb', {\n  ktx2Loader\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useThrelte } from '@threlte/core'\nimport { useGltf } from '@threlte/extras'\n\nconst { renderer } = useThrelte()\n\nconst ktx2Loader = new KTX2Loader()\nktx2Loader.setTranscoderPath('path/to/transcoder/')\nktx2Loader.detectSupport(renderer)\n\nconst gltf = useGltf('/path/to/model.glb', {\n  ktx2Loader\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Mask Component in Svelte\nDESCRIPTION: This code snippet demonstrates how to define a mask in Svelte using the Threlte library. The `Mask` component is initialized with an id and geometry shape. This setup is used for masking on a 3D canvas rendering context. It's dependent on a Three.js compatible renderer set up to use the stencil buffer.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/mask.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<Mask id={1}>\\n  <T.PlaneGeometry />\\n  <T.MeshBasicMaterial />\\n</Mask>\n```\n\n----------------------------------------\n\nTITLE: Creating Fixed Terrain with Rapier Physics in Threlte\nDESCRIPTION: Creates a fixed rigid body with a heightfield collider for terrain in Threlte. The heightmap is generated from a plane geometry and passed to the collider with the appropriate arguments for subdivisions, heights, and scale.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/geometry/Terrain with Rapier physics.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<RigidBody type=\"fixed\">\n  <Collider\n    shape=\"heightfield\"\n    args={[nsubdivs, nsubdivs, heights, scale]}\n  />\n</RigidBody>\n```\n\n----------------------------------------\n\nTITLE: Extending Threlte's T Component with WebGPU Definitions\nDESCRIPTION: Demonstrates how to extend Threlte's T component catalogue with all definitions from three/webgpu using the extend function.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/webgpu.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import Scene from './Scene.svelte'\n  import { Canvas, extend } from '@threlte/core'\n  import * as THREE from 'three/webgpu'\n\n  extend(THREE)\n</script>\n\n<Canvas\n  createRenderer={(canvas) => {\n    return new THREE.WebGPURenderer({\n      canvas,\n      antialias: true,\n      forceWebGL: false\n    })\n  }}\n>\n  <Scene />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: HTML Component with Sprite Rendering in Svelte\nDESCRIPTION: This snippet shows how to use the HTML component with sprite rendering, which renders the contents as a sprite in transform mode.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/html.mdx#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { HTML } from '@threlte/extras'\n</script>\n\n<HTML\n  transform\n  sprite\n>\n  <h1>Hello World</h1>\n</HTML>\n```\n\n----------------------------------------\n\nTITLE: Implementing Threlte Look-At Plugin in JavaScript\nDESCRIPTION: This snippet defines a custom plugin for Threlte that adds 'lookAt' functionality. It uses the injectPlugin method from @threlte/core and sets up an effect to update the object's orientation based on the 'lookAt' prop.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/components/Intro/PluginsExample.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { injectPlugin } from '@threlte/core'\n\ninjectPlugin('lookAt-plugin', (args) => {\n\t$effect(() => {\n\t\tif (!args.ref.lookAt) return\n\t\targs.ref.lookAt(args.props.lookAt)\n\t})\n\n  return {\n    pluginProps: ['lookAt']\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Instance Count and Range in InstancedMesh Component in Svelte\nDESCRIPTION: Shows how to set the maximum number of instances (limit) and the number of drawn instances (range) for an <InstancedMesh> component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/instanced-mesh.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<InstancedMesh\n  limit={10000}\n  range={100}\n>\n  <T.BoxGeometry />\n  <T.MeshStandardMaterial />\n\n  <Instance />\n  <Instance />\n</InstancedMesh>\n```\n\n----------------------------------------\n\nTITLE: Using Collision Groups Hook in Svelte\nDESCRIPTION: This Svelte code snippet demonstrates the usage of the `useCollisionGroups` hook alongside the `useRapier` hook to manage colliders' registration and removal based on a parent component's collision groups. It initializes a collider, registers it, and ensures proper cleanup on component destruction.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-collision-groups.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useRapier, useCollisionGroups } from '@threlte/rapier'\n\n  const { world } = useRapier()\n  const { registerColliders, removeColliders } = useCollisionGroups()\n\n  const collider = world.createCollider(colliderDesc)\n\n  // collider will be assigned the collision groups\n  // provided by a parent `<CollisionGroups>` component.\n  registerColliders([collider])\n\n  onDestroy(() => {\n    removeColliders([collider])\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Interactivity to Threlte Scene - Svelte\nDESCRIPTION: This snippet demonstrates how to import and apply the `interactivity` plugin to enable event handling within a Threlte Svelte application. The `interactivity` function is called within the script block, setting up event listeners for clicks, pointers, and wheel motions on the rendered scene.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/interactivity.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { interactivity } from '@threlte/extras'\n  interactivity()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useSphericalJoint in Svelte\nDESCRIPTION: This code snippet demonstrates how to use the `useSphericalJoint` hook within a Svelte component to create a spherical joint between two rigid bodies. It imports necessary components from `@threlte/rapier`, initializes the joint using the hook, and binds the resulting rigid bodies to `RigidBody` components.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-spherical-joint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useSphericalJoint, RigidBody, Collider } from '@threlte/rapier'\n\n  const { joint, rigidBodyA, rigidBodyB } = useSphericalJoint({ x: 1 }, { x: -1 })\n</script>\n\n<RigidBody bind:rigidBody={$rigidBodyA}>\n  <Collider\n    shape=\"cuboid\"\n    args={[1, 1, 1]}\n  />\n</RigidBody>\n\n<RigidBody bind:rigidBody={$rigidBodyB}>\n  <Collider\n    shape=\"cuboid\"\n    args={[1, 1, 1]}\n  />\n</RigidBody>\n```\n\n----------------------------------------\n\nTITLE: HTML Component with Visibility Change Event in Svelte\nDESCRIPTION: This example shows how to use the visibilitychange event with the HTML component to implement custom hide/show behavior.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/html.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { HTML } from '@threlte/extras'\n\n  const onVisibilityChange = (isVisible: boolean) => {\n    console.log(isVisible)\n  }\n</script>\n\n<HTML\n  transform\n  occlude\n  onvisibilitychange={onVisibilityChange}\n>\n  <h1>Hello World</h1>\n</HTML>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Renderer Component in Svelte\nDESCRIPTION: Example of how to use a custom Renderer component in a Threlte application by disabling autoRender on the Canvas component to prevent automatic rendering.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-task.mdx#2025-04-22_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Canvas } from '@threlte/svelte'\n  import Renderer from './Renderer.svelte'\n</script>\n\n<Canvas>\n  <Renderer />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Handling Render Mode Changes - TypeScript\nDESCRIPTION: This snippet displays how to use the `useThrelte` hook to manage the rendering mode settings. It outlines the steps necessary for manually invalidating or advancing frames based on the set render mode.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-threlte.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { invalidate } = useThrelte()\n\ninvalidate()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { advance } = useThrelte()\n\nadvance()\n```\n\n----------------------------------------\n\nTITLE: Using Specific Axis Alignment with <Align>\nDESCRIPTION: Shows how to specify alignment values for specific axes. The x-axis is aligned to the left (-1), while y and z axes are ignored (false). This allows for precise control over which dimensions are aligned.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/align.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { Align } from '@threlte/extras'\n</script>\n\n<!-- Align left on the x-axis, ignore the y- and z-axes -->\n<Align x={-1} y={false} z={false}>\n  <T.Mesh position={[-1, 0, 0]}>\n    <T.BoxGeometry />\n    <T.MeshBasicMaterial />\n\n  <T.Mesh position={[1, 0, -2]}>\n    <T.BoxGeometry args={[1, 5, 2]} />\n    <T.MeshBasicMaterial />\n  </T.Mesh>\n</Align>\n```\n\n----------------------------------------\n\nTITLE: Using XR-Standard Gamepad Layout\nDESCRIPTION: This snippet shows how to use the useGamepad hook with the `xr` flag set to `true` to handle gamepads representing WebXR controllers with the `xr-standard` gamepad layout.  It also includes the `hand` property.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-gamepad.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\nconst leftGamepad = useGamepad({ xr: true, hand: 'left' })\nconst rightGamepad = useGamepad({ xr: true, hand: 'right' })\n\nleftGamepad.trigger.on('change', (event) => console.log(event))\nrightGamepad.trigger.on('change', (event) => console.log(event))\n```\n\n----------------------------------------\n\nTITLE: Using buildSpritesheet Utility Function in TypeScript\nDESCRIPTION: This snippet shows how to prepare a spritesheet using the 'buildSpritesheet()' function. It demonstrates how to define the metadata for a sprite and then create a spritesheet from that metadata, leveraging TypeScript's type-checking features for enhanced development experience.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/instanced-sprite.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst meta = [\n  {\n    url: '/textures/sprites/cacodaemon.png',\n    type: 'rowColumn',\n    width: 8,\n    height: 4,\n    animations: [\n      { name: 'fly', frameRange: [0, 5] },\n      { name: 'attack', frameRange: [8, 13] },\n      { name: 'idle', frameRange: [16, 19] },\n      { name: 'death', frameRange: [24, 31] }\n    ]\n  }\n] as const satisfies SpritesheetMetadata\n\nconst result = buildSpritesheet.from<typeof meta>(meta)\n```\n\n----------------------------------------\n\nTITLE: Scene with Transform Controls\nDESCRIPTION: Example showing how to use the Tile component with TransformControls, demonstrating the usage of ref binding.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/custom-abstractions.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import Tile from './Tile.svelte'\n  import { TransformControls } from '@threlte/extras'\n</script>\n\n<Tile position={[2, 0, 2]}>\n  {#snippet children({ ref })}\n    <TransformControls object={ref} />\n  {/snippet}\n</Tile>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tile Component in Svelte\nDESCRIPTION: Initial implementation of a Tile component using Threlte's T component to create a 2x2 tile mesh with a plane geometry and standard material.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/custom-abstractions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/threlte'\n  import { MathUtils } from 'three'\n\n  let { children } = $props()\n</script>\n\n<T.Group>\n  <!-- 2x2 Tile -->\n  <T.Mesh rotation.x={-90 * MathUtils.DEG2RAD}>\n    <T.PlaneGeometry args={[2, 2]} />\n    <T.MeshStandardMaterial />\n  </T.Mesh>\n\n  {@render children()}\n</T.Group>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of <Align> Component in Svelte\nDESCRIPTION: Demonstrates the basic usage of the <Align> component to align two mesh objects. The component automatically calculates a boundary box and aligns the children on all axes.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/align.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { Align } from '@threlte/extras'\n</script>\n\n<Align>\n  <T.Mesh position={[-1, 0, 0]}>\n    <T.BoxGeometry />\n    <T.MeshBasicMaterial />\n  </T.Mesh>\n\n  <T.Mesh position={[1, 0, -2]}>\n    <T.BoxGeometry args={[1, 5, 2]} />\n    <T.MeshBasicMaterial />\n  </T.Mesh>\n</Align>\n```\n\n----------------------------------------\n\nTITLE: Using BakeShadows Component in Svelte\nDESCRIPTION: BakeShadows is a component that freezes all shadow maps on mount and unfreezes them on unmount. It's particularly useful for complex static scenes where shadows don't need to be recalculated continuously, improving performance.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/bake-shadows.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<BakeShadows>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ContactShadows in a Svelte Component\nDESCRIPTION: This example shows how to import the ContactShadows component from the threlte/extras package and use it in a Svelte component. It sets various properties such as scale, blur, far distance, and opacity.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/contact-shadows.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { ContactShadows } from 'threlte/extras'\n</script>\n\n<ContactShadows\n  scale={10}\n  blur={2}\n  far={2.5}\n  opacity={0.5}\n/>\n```\n\n----------------------------------------\n\nTITLE: Specifying Event Target - Svelte\nDESCRIPTION: Shows how to specify a different event target for the interactivity plugin's event handlers in a Threlte application. Allows for customizing which DOM element should capture and handle events.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/interactivity.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { interactivity } from '@threlte/extras'\n\n  interactivity({\n    target: document\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Teleport Controls for XR in Svelte\nDESCRIPTION: This snippet imports and initializes the 'teleportControls' plugin from '@threlte/xr' for an XR setup. By invoking 'teleportControls' with 'left' or 'right', it allows a visible ray for teleportation to a destination, compatible with navigation meshes. It requires '@threlte/xr' as a dependency.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/teleport-controls.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { teleportControls } from '@threlte/xr'\n  teleportControls('left' | 'right')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Tasks Manually in TypeScript\nDESCRIPTION: Controlling task execution by manually starting and stopping tasks. By default, tasks start automatically, but this can be disabled with the autoStart option.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-task.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { start, stop, started } = useTask(\n  (delta) => {\n    // do something\n  },\n  { autoStart: false }\n)\n\n// start the task\nstart()\n\n// stop the task\nstop()\n\n// check if the task is started\n$inspect($started)\n```\n\n----------------------------------------\n\nTITLE: Binding GLTF to Component\nDESCRIPTION: This code binds the extracted GLTF model to a GLTF component and specifies the model's URL. This binding ensures that the actions variable is populated, allowing for access to the available animations.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/animation/Animation Transitions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<GLTF\n  bind:gltf={$gltf}\n  url=\"https://threejs.org/examples/models/gltf/Xbot.glb\"\n/>\n```\n\n----------------------------------------\n\nTITLE: RadialGradientTexture with stops array\nDESCRIPTION: This code snippet shows how to define a simple two-color radial gradient texture using the `stops` prop. The `stops` prop is an array of objects, each defining a color and an offset.  This example creates a gradient that transitions from black at the center (offset 0) to white at the edge (offset 1).\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/radial-gradient-texture.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<RadialGradientTexture\n  stops={[\n    { color: 'black', offset: 0 },\n    { color: 'white', offset: 1 }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Transitioning Between Animations\nDESCRIPTION: The transitionTo function is called to handle crossfading between selected animations, allowing for smooth transitions in the animation display.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/animation/Animation Transitions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// transitionTo is a function that crossfades between two animations\ntransitionTo(animationName)\n```\n\n----------------------------------------\n\nTITLE: HTML Component with Center Alignment in Svelte\nDESCRIPTION: This example demonstrates how to use the center property with the HTML component to add a -50%/-50% CSS transform when not in transform mode.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/html.mdx#2025-04-22_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { HTML } from '@threlte/extras'\n</script>\n\n<HTML center>\n  <h1>Hello World</h1>\n</HTML>\n```\n\n----------------------------------------\n\nTITLE: Initializing Teleport Controls for Both Hands in Svelte\nDESCRIPTION: This snippet demonstrates initializing teleport controls for both left and right hand controllers using the 'teleportControls' plugin. Every hand can be independently initialized.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/teleport-controls.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { teleportControls } from '@threlte/xr'\n  teleportControls('left')\n  teleportControls('right')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic FakeGlowMaterial Usage in Svelte\nDESCRIPTION: Demonstrates how to use the FakeGlowMaterial component with a basic icosahedron mesh. The material is applied to create a red glow effect.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/fake-glow-material.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/core'\n  import { FakeGlowMaterial } from '@threlte/extras'\n</script>\n\n<T.Mesh>\n  <FakeGlowMaterial glowColor=\"red\" />\n  <T.IcosahedronGeometry args={[4, 4]} />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Using Layers Plugin in Svelte\nDESCRIPTION: This code snippet showcases how to import and utilize the layers plugin from the @threlte/extras package within a Svelte component. It demonstrates setting up layer properties on a perspective camera and a group of meshes, effectively showcasing layer inheritance among child components.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/layers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Svelte\nCODE:\n```\n<script>\n  import { layers } from '@threlte/extras'\n  layers()\n</script>\n\n<!--\nThe camera needs to be on the same layer\nas an object for the object to be visible\n-->\n<T.PerspectiveCamera layers={[4, 5]} />\n\n<!--\nEverything inside this group that isn't\nassigned another layer is on layer 4 and\nis therefore visible to the camera\n-->\n<T.Group layers={4}>\n  <T.Mesh>\n    <T.BoxGeometry />\n    <T.MeshStandardMaterial />\n  </T.Mesh>\n\n  <!-- This Mesh is on all layers -->\n  <T.Mesh layers={'all'}>\n    <T.BoxGeometry />\n    <T.MeshStandardMaterial />\n  </T.Mesh>\n</T.Group>\n```\n\n----------------------------------------\n\nTITLE: Outlines Component Usage Example\nDESCRIPTION: This Svelte code snippet demonstrates how to use the <Outlines> component to add an outline to a Mesh in a Threlte scene. It imports necessary modules from 'three', '@threlte/core', and '@threlte/extras', creates a Mesh with a BoxGeometry and MeshBasicMaterial, and adds an <Outlines> component as a child of the Mesh.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/outlines.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { BoxGeometry, MeshBasicMaterial } from 'three'\n  import { T } from '@threlte/core'\n  import { Outlines } from '@threlte/extras'\n</script>\n\n<T.Mesh\n  geometry={new BoxGeometry()}\n  material={new MeshBasicMaterial()}\n>\n  <Outlines color=\"black\" />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Implementing Cascaded Shadow Maps in Threlte Scene\nDESCRIPTION: This snippet demonstrates how to use the <CSM/> component in a Threlte scene. It shows the basic setup with enabled CSM and custom light direction. The CSM component wraps the entire scene to apply the shadow mapping technique.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/csm.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { CSM } from '@threlte/extras'\n  import { Vector3 } from 'three'\n</script>\n\n<CSM\n  enabled\n  args={{\n    lightDirection: new Vector3(1, -1, 1).normalize()\n  }}\n>\n  <!-- Your scene goes here -->\n</CSM>\n```\n\n----------------------------------------\n\nTITLE: Initializing Rapier Joint in Svelte\nDESCRIPTION: This code snippet demonstrates how to use the useJoint hook to manually initialize a Rapier revolute joint between two rigid bodies in a Svelte component. It imports necessary dependencies and defines the parameters for the joint using Rapier functions. The snippet assumes that the Rapier context (world and rapier) is available and that the rigid bodies are correctly set up. The resulting joint is created as an impulse joint and the rigid bodies are bound to the component's state.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-joint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useJoint, RigidBody, Collider } from '@threlte/rapier'\n\n  const { joint, rigidBodyA, rigidBodyB } = useJoint((rbA, rbB, { world, rapier }) => {\n    const params = rapier.JointData.revolute(\n      { x: 0, y: 10, z: 1 },\n      { x: 0, y: 0, z: 0 },\n      { x: 0, y: 1, z: 0 }\n    )\n    return world.createImpulseJoint(params, rbA, rbB, true)\n  })\n</script>\n\n<RigidBody bind:rigidBody={$rigidBodyA}>\n  <Collider\n    shape=\"cuboid\"\n    args={[1, 1, 1]}\n  />\n</RigidBody>\n\n<RigidBody bind:rigidBody={$rigidBodyB}>\n  <Collider\n    shape=\"cuboid\"\n    args={[1, 1, 1]}\n  />\n</RigidBody>\n```\n\n----------------------------------------\n\nTITLE: Implementing CSM with Fallback in Svelte\nDESCRIPTION: This code shows how to use the CSM component with a fallback option. It uses the 'enabled' prop to conditionally render CSM or a regular DirectionalLight based on device capabilities or user settings.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/csm.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<CSM enabled={settings.shadows}>\n  <!-- Your scene goes here -->\n\n  <slot name=\"disabled\">\n    <!-- Will be mounted if settings.shadows is false -->\n    <T.DirectionalLight castShadow={false} />\n  </slot>\n</CSM>\n```\n\n----------------------------------------\n\nTITLE: Using watch with cleanup function in Threlte\nDESCRIPTION: Demonstrates how to return a cleanup function from the watch callback that will be executed when the stores change again, allowing for proper resource management.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/utilities.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = writable(0)\n\nwatch(store, (value) => {\n  console.log(value) // 0\n  return () => {\n    console.log('cleanup')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing RopeImpulseJoint Hook in Svelte\nDESCRIPTION: This Svelte code snippet demonstrates how to use the `useRopeJoint` hook to create a RopeImpulseJoint. It establishes two rigid bodies that are constrained by a rope joint, limiting their movement based on defined anchor points and length. The dependencies are '@threlte/rapier' for physics handling.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-rope-joint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useRopeJoint, RigidBody, Collider } from '@threlte/rapier'\n\n  const { joint, rigidBodyA, rigidBodyB } = useRopeJoint({ x: 1 }, { y: 1 }, 2)\n</script>\n\n<RigidBody bind:rigidBody={$rigidBodyA}>\n  <Collider\n    shape=\"cuboid\"\n    args={[1, 1, 1]}\n  />\n</RigidBody>\n\n<RigidBody bind:rigidBody={$rigidBodyB}>\n  <Collider\n    shape=\"cuboid\"\n    args={[1, 1, 1]}\n  />\n</RigidBody>\n```\n\n----------------------------------------\n\nTITLE: Defining Props for the SoftShadows Component in Svelte\nDESCRIPTION: This snippet defines the properties (props) for the SoftShadows component, which allows users to customize shadow rendering in Three.js. The props include 'size', 'focus', and 'samples', each with specified types, defaults, and descriptions. These props inform the behavior of the component relating to light source size, focus depth, and sampling quality, respectively.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/soft-shadows.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\ncomponentSignature:\n  {\n    props:\n      [\n        {\n          name: 'size',\n          type: 'number',\n          default: '25',\n          description: 'Size of the light source – the larger the softer the light',\n          required: false\n        },\n        {\n          name: 'focus',\n          type: 'number',\n          default: '0',\n          description: 'Depth focus, use it to shift the focal point (where the shadow is the sharpest)',\n          required: false\n        },\n        {\n          name: 'samples',\n          type: 'number',\n          default: '10',\n          description: 'Number of samples (more samples less noise but more expensive)',\n          required: false\n        }\n      ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Restarting CubeCamera Update Task Using Component Export in Svelte\nDESCRIPTION: Shows how to restart the CubeCamera update task using the restart function from the component export.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/cube-camera.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let cubeCameraComponent = $state()\n\n  $effect(() => {\n    // dependencies here\n    cubeCameraComponent?.restart()\n  })\n</script>\n\n<CubeCamera\n  frames={1}\n  bind:this={cubeCameraComponent}\n>\n  <!-- ... -->\n</CubeCamera>\n```\n\n----------------------------------------\n\nTITLE: Using InstancedMeshes with an Array of Meshes in Svelte\nDESCRIPTION: This example shows how to use the <InstancedMeshes> component with an array of THREE.Mesh instances. It demonstrates creating multiple mesh types and instantiating them using array destructuring.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/instanced-meshes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { InstancedMeshes } from '@threlte/extras'\n  import { Mesh, BoxGeometry, MeshStandardMaterial } from 'three'\n\n  const meshes = [\n    new Mesh(new BoxGeometry(), new MeshStandardMaterial()), // MeshA\n    new Mesh(new SphereGeometry(), new MeshStandardMaterial()), // MeshB\n    new Mesh(new PlaneGeometry(), new MeshStandardMaterial())  // MeshC\n  ]\n</script>\n\n<!--\n    You can use array destructuring\n    to access the components <MeshA>,\n    <MeshB> and <MeshC>\n  -->\n<InstancedMeshes meshes={meshes}>\n  {#snippet children({ components: [MeshA, MeshB, MeshC] })}\n    <MeshA position.y={2} position.x={-1}>\n    <MeshB position.y={-2}>\n    <MeshC position.y={0} position.x={1}>\n  {/snippet}\n</InstancedMeshes>\n```\n\n----------------------------------------\n\nTITLE: Using Teleport Hook in Svelte\nDESCRIPTION: This code snippet demonstrates importing and utilizing the useTeleport hook from Threlte XR to move a player to a defined reference frame. It requires the Threlte XR package and Three.js for vector manipulation. The teleport function is invoked with a modified vector to change the player's position.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/use-teleport.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useTeleport } from '@threlte/xr'\n\n  const teleport = useTeleport()\n  const vec3 = new THREE.Vector3()\n\n  vec3.set(5, 0, 5)\n\n  teleport(vec3)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Gizmo Component with OrbitControls in Svelte\nDESCRIPTION: This snippet demonstrates how to use the <Gizmo> component as a child of an OrbitControls component in Svelte. The Gizmo will automatically attach itself to the parent OrbitControls.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/gizmo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<OrbitControls>\n  <!-- Will attach itself to this OrbitControls -->\n  <Gizmo />\n</OrbitControls>\n```\n\n----------------------------------------\n\nTITLE: Creating Positional Audio Component\nDESCRIPTION: This Svelte code snippet demonstrates how to create a positional audio component in a 3D scene. It imports necessary components from the '@threlte/core' and '@threlte/extras' packages, including AudioListener and PositionalAudio, which allow spatial audio effects. The example constructs a Canvas element containing a PerspectiveCamera and positions a Car component that utilizes the PositionalAudio component to play sound.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/positional-audio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T, Canvas } from '@threlte/core'\n  import { AudioListener, PositionalAudio } from '@threlte/extras'\n  import Car from './Car.svelte'\n</script>\n\n<Canvas>\n  <T.PerspectiveCamera\n    makeDefault\n    position={[3, 3, 3]}\n    lookAt={[0, 0, 0]}\n  >\n    <AudioListener />\n  </T.PerspectiveCamera>\n\n  <Car>\n    <PositionalAudio\n      autostart\n      loop\n      refDistance={10}\n      volume={0.2}\n      src={'/audio/car-noise.mp3'}\n    />\n  </Car>\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Using useLoader Hook with AudioLoader in TypeScript\nDESCRIPTION: Demonstrates how to use the useLoader hook to load audio assets with AudioLoader. The hook returns an AsyncWritable that resolves to the loaded asset.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-loader.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst loader = useLoader(AudioLoader)\nconst soundA = loader.load('audio/ambient_ocean.ogg')\n// -> `soundA` is an AsyncWritable<AudioBuffer> that\n// resolves/is populated once the asset is loaded.\n\n// somewhere else …\nconst soundB = loader.load('audio/ambient_ocean.ogg')\n// -> `soundB` is also an AsyncWritable<AudioBuffer>\n// that resolves/is populated with the same reference\n// as `soundA` once the asset is loaded.\n```\n\n----------------------------------------\n\nTITLE: Using useViewport in Svelte\nDESCRIPTION: This Svelte component demonstrates how to use the `useViewport` hook from `@threlte/extras` to create a mesh that fills the entire screen. It imports the necessary modules from `@threlte/core` and `@threlte/extras`, retrieves the viewport dimensions, and applies them to the mesh's scale.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-viewport.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { useViewport } from '@threlte/extras'\n\n  const viewport = useViewport() // currentWritable<Viewport>\n</script>\n\n<T.Mesh scale={[$viewport.width, $viewport.height, 1]}>\n  <T.PlaneGeometry />\n  <T.MeshStandardMaterial />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Shader Interactivity and Uniform Updates in Svelte\nDESCRIPTION: This Svelte snippet updates shader uniforms based on user interactions. It uses Svelte's Tween to animate shader effects in response to clicks, updating the `pulsePosition` and `pulseTimer` uniforms. Dependencies include Svelte's motion module and Threlte. Expected input is click events which lead to uniform updates, outputting animated shader effects.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/shaders/Interactive shader.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\\n  import { Tween } from 'svelte/motion'\\n  import { quadOut } from 'svelte/easing'\\n\\n  const pulsePosition = new Vector3()\\n  const pulseTimer = new Tween(0, {\\n    easing: quadOut\\n  })\\n</script>\\n\\n<T.Mesh\\n  {geometry}\\n  rotation.x={DEG2RAD * -90}\\n  onclick={({ point }) => {\\n    pulsePosition.copy(point)\\n    pulseTimer\\n      .set(0, {\\n        duration: 0\\n      })\\n      .then(() => {\\n        pulseTimer.set(1, { duration: 2000 })\\n      })\\n  }}>\\n  <T.ShaderMaterial\\n    {fragmentShader}\\n    {vertexShader}\\n    uniforms={{\\n      pulseTimer: {\\n        value: 0\\n      },\\n      pulsePosition: {\\n        value: 0\\n      }\\n    }}\\n    uniforms.pulsePosition.value={pulsePosition}\\n    uniforms.pulseTimer.value={pulseTimer}\\n  />\\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Animating a Mesh with SheetObject in Theatre.js\nDESCRIPTION: This code snippet demonstrates how to make properties of a Mesh editable and animatable in the Theatre.js studio using the `<SheetObject>`, `<Transform>`, and `<Sync>` components. It encapsulates a `<T.Mesh>` component, allowing for property manipulation within the Theatre.js studio interface. `<Transform>` simplifies adding position, scale, and rotation.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/core'\n  import { OrbitControls } from '@threlte/extras'\n  import { SheetObject } from '@threlte/theatre'\n</script>\n\n<T.PerspectiveCamera\n  position={[0, 5, 10]}\n  makeDefault\n>\n  <OrbitControls target={{ y: 1.5 }} />\n</T.PerspectiveCamera>\n\n<!-- Box -->\n<SheetObject key=\"Box\">\n  {#snippet children({ Transform, Sync })}\n    <Transform>\n      <T.Mesh\n        receiveShadow\n        castShadow\n        position.y={0.5}\n      >\n        <T.BoxGeometry args={[1, 1, 1]} />\n        <T.MeshStandardMaterial color=\"#b00d03\">\n          <Sync\n            color\n            roughness\n            metalness\n          />\n        </T.MeshStandardMaterial>\n      </T.Mesh>\n    </Transform>\n  {/snippet}\n</SheetObject>\n```\n\n----------------------------------------\n\nTITLE: Getting Current XR Controller in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the signature of the 'useController' function, which returns a 'CurrentWritable' typed with either 'XRController' or 'undefined'. It provides a typed reference to the current XR controller with a specified handedness, adding type safety to XR controller management.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/use-controller.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// CurrentWritable<XRController | undefined> - The current XRController\\nconst controller = useController('left')\n```\n\n----------------------------------------\n\nTITLE: Compute Function for Interactivity - Svelte\nDESCRIPTION: Integrates a compute function for the interactivity plugin, transforming DOM event coordinates into normalized device coordinates for accurate raycasting. Enables advanced mathematical transformations and interactivity calculations.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/interactivity.mdx#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { interactivity } from '@threlte/extras'\n  import { useThrelte } from '@threlte/core'\n\n  const { camera } = useThrelte()\n\n  interactivity({\n    compute: (event, state) => {\n      // Update the pointer\n      state.pointer.update((p) => {\n        p.x = (event.clientX / window.innerWidth) * 2 - 1\n        p.y = -(event.clientY / window.innerHeight) * 2 + 1\n\n        return p\n      })\n\n      // Update the raycaster\n      state.raycaster.setFromCamera(state.pointer.current, $camera)\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering Resize via Export\nDESCRIPTION: Demonstrates manual resizing by invoking the `resize` method from a reference to the `<Resize>` component. Dependencies include Threlte. Outputs: Direct resizing action execution.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/resize.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Resize } from '@threlte/extras'\n\n  let ref = $state<Resize>()\n\n  // ... later on\n  ref?.resize()\n</script>\n\n<Resize bind:this={ref}>\n  <!-- ... -->\n</Resize>\n```\n\n----------------------------------------\n\nTITLE: Initializing TransformControls with Mesh\nDESCRIPTION: Demonstrates basic usage of TransformControls by wrapping a 3D mesh and enabling transformation interactions\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/transform-controls.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n\\<script\\>\n  import { T } from '@threlte/core'\n  import { TransformControls } from '@threlte/extras'\n  import { MeshStandardMaterial, BoxGeometry } from 'three'\n\\</script\\>\n\n\\<TransformControls\\>\n  \\<T.Mesh\n    geometry={new BoxGeometry()}\n    material={new MeshStandardMaterial()}\n  /\\>\n\\</TransformControls\\>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Transition with TypeScript\nDESCRIPTION: This TypeScript snippet defines a custom transition using the `createTransition` function. It highlights how to make a material transparent and animate its opacity using the `tick` function. Dependencies include Threlte and Svelte easing functions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/transitions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isInstanceOf } from '@threlte/core'\nimport { createTransition } from '@threlte/extras'\nimport { cubicOut } from 'svelte/easing'\n\nconst fade = createTransition((ref) => {\n  if (!isInstanceOf(ref, 'Material')) return\n\n  if (!ref.transparent) {\n    ref.transparent = true\n    ref.needsUpdate = true\n  }\n\n  return {\n    tick(t) {\n      ref.opacity = t\n    },\n    easing: cubicOut,\n    duration: 400,\n    delay: 100\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Hit Test Hook in Svelte for XR Sessions\nDESCRIPTION: This snippet demonstrates how to utilize the 'useHitTest' hook provided by @threlte/xr to manage visibility and positioning of a 3D object based on hit test results during an AR session. The example uses a 'ref' to bind the mesh and updates its visibility and matrix based on the hit test.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/use-hit-test.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\\n  import { useHitTest } from '@threlte/xr'\\n\\n  let ref\\n\\n  useHitTest((hitMatrix, hit) => {\\n    if (!ref) return\\n\\n    if (hit) {\\n      ref.visible = true\\n      ref.matrix.copy(hitMatrix)\\n    } else {\\n      ref.visible = false\\n    }\\n  })\\n</script>\\n\\n<T.Mesh bind:ref>\\n  <T.SphereGeometry args={[0.1]}>\\n  <T.MeshBasicMaterial />\\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Defining MeshDiscardMaterial Component\nDESCRIPTION: This Svelte component, <MeshDiscardMaterial>, extends ShaderMaterial from the Three.js library, allowing the rendering of a material that discards fragments in the fragment shader, making the mesh invisible but still allowing shadows and children to be rendered. It is important to understand how it differs from other visibility options, particularly in rendering shadows.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/discard-material.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<MeshDiscardMaterial>\n```\n\n----------------------------------------\n\nTITLE: Loading and Using a Font for 3D Text\nDESCRIPTION: Shows how to load a font manually using three.js's FontLoader and pass it to the <Text3DGeometry> component in Svelte. The loaded font is applied to render the text 'Hello World'.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/text-3d-geometry.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T, useLoader } from '@threlte/core'\n  import { Text3DGeometry } from '@threlte/extras'\n  import { FontLoader } from 'three/examples/jsm/loaders/FontLoader.js'\n\n  let font = useLoader(FontLoader).load('path-to-your-font')\n</script>\n\n{#if $font}\n  <T.Mesh>\n    <Text3DGeometry\n      font={$font}\n      text={'Hello World'}\n    />\n    <T.MeshStandardMaterial />\n  </T.Mesh>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Signature of useFixedJoint Hook\nDESCRIPTION: This snippet details the TypeScript signature of the 'useFixedJoint' hook, which outlines its parameters for defining positions and rotations for two rigid bodies. The return type includes a writable joint and two writable rigid bodies.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-fixed-joint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n\tjoint: Writable<FixedImpulseJoint>\n\trigidBodyA: Writable<RAPIER.RigidBody>\n\trigidBodyB: Writable<RAPIER.RigidBody>\n} = useFixedJoint(\n\tanchorA,  // Position\n  frameA,   // Rotation\n  anchorB,  // Position\n  frameB    // Rotation\n)\n```\n\n----------------------------------------\n\nTITLE: FakeGlowMaterial with Cube and Sphere in Svelte\nDESCRIPTION: Shows how to apply FakeGlowMaterial to both a cube and a sphere. For sharp meshes like cubes, using a sphere to simulate the glow can produce better results.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/fake-glow-material.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/core'\n  import { FakeGlowMaterial } from '@threlte/extras'\n</script>\n\n<T.Mesh>\n  <FakeGlowMaterial glowColor=\"blue\" />\n  <T.BoxGeometry args={[2, 2, 2]} />\n</T.Mesh>\n\n<T.Mesh>\n  <FakeGlowMaterial glowColor=\"blue\" />\n  <T.IcosahedronGeometry args={[3, 4]} />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Cursor Style Change with Stores - Svelte/TypeScript\nDESCRIPTION: This snippet explains how to use writable stores to dynamically change the cursor style based on the hover state, illustrating the flexibility of the `useCursor` hook in response to store updates.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-cursor.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/core'\n  import { useCursor } from '@threlte/extras'\n  import { BoxGeometry, MeshBasicMaterial } from 'three'\n  import { writable } from 'svelte/store'\n\n  const onPointerOverCursor = writable('grab')\n\n  const { onPointerEnter, onPointerLeave } = useCursor(onPointerOverCursor)\n\n  // somewhere in your application …\n  onPointerOverCursor.set('grabbing')\n</script>\n\n<T.Mesh\n  onpointerenter={onPointerEnter}\n  geometry={new BoxGeometry()}\n  material={new MeshBasicMaterial()} /\n>\n```\n\n----------------------------------------\n\nTITLE: Using T Component with 'is' Property in Svelte\nDESCRIPTION: Demonstrates using the T component with the 'is' property to explicitly pass Three.js class definitions for creating a mesh with geometry and material.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { Mesh } from 'three'\n</script>\n\n<T is={Mesh} />\n```\n\n----------------------------------------\n\nTITLE: useXR Hook Signature in Typescript\nDESCRIPTION: This snippet describes the Typescript signature of the `useXR` hook's return value. It returns an object containing `isPresenting` (a writable boolean indicating XR presentation), `isHandTracking` (a writable boolean indicating hand tracking status), `session` (a writable `XRSession` or `undefined`), and `xrFrame` (a writable `XRFrame`). These are CurrentWritable objects from Svelte's store system, meaning changes to the underlying XR values trigger reactivity in Svelte components.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/use-xr.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  isPresenting, // CurrentWritable<boolean> - Whether the XR device is presenting in an XR session\n  isHandTracking, // CurrentWritable<boolean> - Whether hand tracking inputs are active\n  session, // CurrentWritable<XRSession | undefined> - The active `XRSession`\n  xrFrame // CurrentWritable<XRFrame> - The current XRFrame\n} = useXR()\n```\n\n----------------------------------------\n\nTITLE: Manual Rendering in Threlte 6 using useRender\nDESCRIPTION: This code demonstrates how to use the useRender hook in Threlte 6 for manual scene rendering, typically used for post-processing effects.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/Tutorials/Animating a Spaceship.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { scene, camera, renderer } = useThrelte()\n\nuseRender(() => {\n  // render here\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Flex Layout with Box Component\nDESCRIPTION: Demonstrates creating a centered flex container with a dynamic Box component that renders a 3D model with flexible sizing\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/box.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Flex, Box } from '@threlte/flex'\n  import Model from './Model.svelte'\n</script>\n\n<Flex\n  width={100}\n  height={100}\n  justifyContent=\"Center\"\n>\n  <Box\n    flex={1}\n    width=\"auto\"\n  >\n    {#snippet children({ width })}\n      <Model {width} />\n    {/snippet}\n  </Box>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Loading a 3D Model with useGltf in Svelte\nDESCRIPTION: This code snippet demonstrates how to load a 3D model using the `useGltf` hook from `@threlte/extras` within a Svelte component. The `{#await}` block is used to handle the asynchronous loading of the model, and the scene is rendered using the `<T>` component from `@threlte/core` once the model is loaded.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/suspense.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { useGltf } from '@threlte/extras'\n\n  const gltf = useGltf('model.gltf')\n</script>\n\n{#await gltf then { scene }}\n  <T is={scene}>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Using RoundedBoxGeometry Component in Svelte\nDESCRIPTION: This Svelte code snippet demonstrates how to import and use the `RoundedBoxGeometry` component from `@threlte/extras` within a Threlte canvas. It initializes a scene with a perspective camera and a mesh containing the rounded box geometry and a phong material. The example showcases the basic integration of the component into a Threlte application.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/rounded-box-geometry.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T, Canvas } from '@threlte/core'\n  import { RoundedBoxGeometry } from '@threlte/extras'\n</script>\n\n<Canvas>\n  <T.PerspectiveCamera\n    makeDefault\n    position={[3, 3, 3]}\n    lookAt={[0, 0, 0]}\n  />\n\n  <T.Mesh>\n    <RoundedBoxGeometry />\n    <T.MeshPhongMaterial color=\"hotpink\" />\n  </T.Mesh>\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Interactivity State Type Definition - TypeScript\nDESCRIPTION: Defines the TypeScript type `State` representing the state managed by the interactivity plugin, encompassing properties for pointer tracking, event handling, and interactive object management in a Threlte application.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/interactivity.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport type State = {\n  enabled: CurrentWritable<boolean>\n  target: CurrentWritable<HTMLElement | undefined>\n  pointer: CurrentWritable<Vector2>\n  pointerOverTarget: CurrentWritable<boolean>\n  lastEvent: MouseEvent | WheelEvent | PointerEvent | undefined\n  raycaster: Raycaster\n  initialClick: [x: number, y: number]\n  initialHits: THREE.Object3D[]\n  hovered: Map<string, IntersectionEvent<MouseEvent | WheelEvent | PointerEvent>>\n  interactiveObjects: THREE.Object3D[]\n  compute: ComputeFunction\n  filter?: FilterFunction\n}\n```\n\n----------------------------------------\n\nTITLE: Using Hysteresis with <Detailed> Component in Svelte\nDESCRIPTION: Shows how to use the hysteresis prop with a child of the <Detailed> component. Hysteresis can be used to prevent flickering at LOD boundaries.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/detailed.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Detailed>\n  <T.Mesh hysteresis={0.5}>\n    <T.BoxGeometry />\n  </T.Mesh>\n</Detailed>\n```\n\n----------------------------------------\n\nTITLE: Defining Collider Component with Rapier in Svelte\nDESCRIPTION: This Svelte component <Collider> is used to represent geometric shapes that handle contacts and collision events when interacting with other objects. It requires properties like 'shape', 'density', and optionally 'mass'. If not nested under a <RigidBody> component, the transform properties remain reactive. This component also handles events such as 'create', 'collisionenter', and 'collisionexit', which provide details about the collision and involved objects. It depends on the Rapier library to handle physics-based interactions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/collider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n\n<Collider \n  shape=\"ball\"\n  density=\"1.0\"\n  on:create={handleCreate}\n  on:collisionenter={handleCollisionEnter}\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Using AnimatedSpriteMaterial with Custom Animation Range in Svelte\nDESCRIPTION: Example of defining specific animation ranges within a spritesheet by setting startFrame and endFrame properties, useful for sheets with multiple animations without JSON metadata.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/animated-sprite-material.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Sprite>\n  <AnimatedSpriteMaterial\n    textureUrl=\"./fire.png\"\n    totalFrames={14}\n    rows={4}\n    columns={4}\n    startFrame={4}\n    endFrame={8}\n  />\n</T.Sprite>\n```\n\n----------------------------------------\n\nTITLE: Accessing RAPIER World and Configuring Gravity - Svelte\nDESCRIPTION: This Svelte code snippet demonstrates how to use the 'useRapier' hook to retrieve the RAPIER physics world and configure gravity settings. The script provides two functions, 'noGravity' and 'normalGravity', that can be called to alter the gravity of the physics world. It requires the '@threlte/rapier' package as a dependency.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-rapier.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n\"<script>\\n  import { useRapier } from '@threlte/rapier'\\n\\n  const { world } = useRapier()\\n\\n  const noGravity = () => (world.gravity = { x: 0, y: 0, z: 0 })\\n  const normalGravity = () => (world.gravity = { x: 0, y: 9.81, z: 0 })\\n</script>\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Pointer Controls with Interactivity - Svelte\nDESCRIPTION: This snippet integrates pointer controls with the interactivity plugin from @threlte/extras. It initializes interactivity before enabling pointerControls.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/pointer-controls.mdx#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n\"<script>\\n  import { interactivity } from '@threlte/extras'\\n  import { pointerControls, teleportControls } from '@threlte/xr'\\n  interactivity()\\n  pointerControls('left')\\n</script>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for WebGPU Compatibility\nDESCRIPTION: Vite configuration to handle top-level async used by WebGPU. This setup targets 'esnext' for both optimizeDeps and build options.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/webgpu.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\noptimizeDeps: {\n  esbuildOptions: {\n    target: 'esnext'\n  }\n},\nbuild: {\n  target: 'esnext'\n}\n```\n\n----------------------------------------\n\nTITLE: Using useXR Hook in Svelte\nDESCRIPTION: This snippet demonstrates how to import and use the `useXR` hook within a Svelte component. It retrieves reactive values indicating whether an XR session is presenting (`isPresenting`), whether hand tracking is active (`isHandTracking`), the active XR session (`session`), and the current XR frame (`xrFrame`).  These values can then be used to dynamically update the component's UI or logic based on the current XR state.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/use-xr.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useXR } from '@threlte/xr'\n\n  const { isPresenting, isHandTracking, session, xrFrame } = useXR()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring the Resize Component for Axial Scaling\nDESCRIPTION: Demonstrates configuration of the `<Resize>` component to scale objects along a specified axis. Prerequisite: Three.js. Key parameters include `axis` for determining the constraint axis. Inputs: `x`, `y`, `z`. Outputs: Adjusted scaling along chosen axis.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/resize.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<Resize axis=\"x\">\n  <T.Mesh />\n</Resize>\n```\n\n----------------------------------------\n\nTITLE: Initializing Prismatic Joint in Svelte with Threlte Rapier\nDESCRIPTION: Demonstrates how to create a prismatic joint between two rigid bodies using the usePrismaticJoint hook, specifying anchor points, axis, and optional limits\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-prismatic-joint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { usePrismaticJoint, RigidBody, Collider } from '@threlte/rapier'\n\n  const { joint, rigidBodyA, rigidBodyB } = usePrismaticJoint({ x: 1 }, {}, { y: 1 }, [0, 1])\n</script>\n\n<RigidBody bind:rigidBody={$rigidBodyA}>\n  <Collider\n    shape=\"cuboid\"\n    args={[1, 1, 1]}\n  />\n</RigidBody>\n\n<RigidBody bind:rigidBody={$rigidBodyB}>\n  <Collider\n    shape=\"cuboid\"\n    args={[1, 1, 1]}\n  />\n</RigidBody>\n```\n\n----------------------------------------\n\nTITLE: Aligning Flex Containers\nDESCRIPTION: This snippet shows how to use the <Align> component to control the alignment of flex containers inside the layout based on a dynamic align event.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/getting-started.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Align } from '@threlte/extras'\n  import { Flex } from '@threlte/flex'\n  import Plane from './Plane.svelte'\n</script>\n\n<Align y={1}>\n  {#snippet children({ align })}\n    <Flex\n      width={100}\n      height={100}\n      onreflow={align}\n    >\n      <Box>\n        <Plane\n          width={20}\n          height={20}\n        />\n      </Box>\n\n      <Box>\n        <Plane\n          width={20}\n          height={20}\n        />\n      </Box>\n    </Flex>\n  {/snippet}\n</Align>\n```\n\n----------------------------------------\n\nTITLE: Defining Manual Props for SheetObject Component in Svelte\nDESCRIPTION: This code snippet demonstrates how to declare manual properties for the `<SheetObject>` component in Svelte. It allows for custom and explicit control over prop definitions to cater to specific use cases, particularly in scenarios requiring domain-specific property management.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/sheet-object.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<SheetObject props={{ x: 0 }}>\n  {#snippet children({ values })}\n    <T.Mesh position.x={values.x} />\n  {/snippet}\n</SheetObject>\n```\n\n----------------------------------------\n\nTITLE: Using the useGamepad Hook\nDESCRIPTION: This code snippet demonstrates the basic usage of the useGamepad hook to access gamepad input. It imports the hook and assigns the returned object to a variable, which can then be used to access gamepad data.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-gamepad.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useGamepad } from '@threlte/extras'\n\n  const gamepad = useGamepad()\n</script>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Support for useInstancedSprite Hook\nDESCRIPTION: Shows how to add TypeScript type support for animation names when using the useInstancedSprite hook.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/instanced-sprite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype AnimationNames = 'walk' | 'run' | 'idle' | 'fly'\nconst { updatePosition, count, animationMap, sprite } = useInstancedSprite<AnimationNames>()\n```\n\n----------------------------------------\n\nTITLE: Using usePhysicsTask Hook with Fixed Framerate in Svelte\nDESCRIPTION: This snippet showcases the implementation of the usePhysicsTask hook in a Svelte component with a fixed framerate. It logs the fixed delta time for each frame, ensuring consistent task timing during the simulation.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-physics-task.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<World framerate={200}>\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nusePhysicsTask((delta) => {\n  console.log(delta) // 0.005\n})\n```\n\n----------------------------------------\n\nTITLE: Using Instance Component with InstancedSprite in Svelte\nDESCRIPTION: This snippet demonstrates how to utilize the '<Instance>' component within the '<InstancedSprite>' component to create multiple sprite instances with random positions and a consistent scale. Each instance also has properties that control its horizontal flipping and unique identifier.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/instanced-sprite.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<InstancedSprite\n  count={10000}\n  {spritesheet}\n>\n  {#snippet children({ Instance })}\n    {#each { length: 10000 } as _, i}\n      <Instance\n        position={[Math.random() * 100, Math.random() * 100, Math.random() * 100]}\n        scale={[3, 3]}\n        flipX\n        id={i}\n      />\n    {/each}\n  {/snippet}\n</InstancedSprite>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Props in Threlte Svelte Component\nDESCRIPTION: This snippet uses the custom prop 'myProp' in a Threlte component, showcasing the benefit of strong typing for props in Svelte applications with TypeScript support.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_24\n\nLANGUAGE: svelte\nCODE:\n```\n<T myProp=\"foo\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Pointer Events for a Mesh - Svelte\nDESCRIPTION: This snippet adds various pointer events, such as click, pointerup, pointerdown, etc., to a mesh element in Svelte. These allow for complex interaction handling within the XR environment.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/pointer-controls.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n\"<T.Mesh\\n  onclick={(e) => console.log('click')}\\n  onpointerup={(e) => console.log('up')}\\n  onpointerdown={(e) => console.log('down')}\\n  onpointerover={(e) => console.log('over')}\\n  onpointerout={(e) => console.log('out')}\\n  onpointerenter={(e) => console.log('enter')}\\n  onpointerleave={(e) => console.log('leave')}\\n  onpointermove={(e) => console.log('move')}//\\n/>\"\n```\n\n----------------------------------------\n\nTITLE: Using Wrist Snippet for Hand-Based Positioning\nDESCRIPTION: Attaching a mesh to the wrist space of a hand, demonstrating the component's snippet feature for precise positioning\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/hand.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<Hand left>\n  {#snippet wrist()}\n    <T.Mesh>\n      <T.IcosahedronGeometry args={[0.2]} />\n      <T.MeshStandardMaterial color=\"hotpink\" />\n    </T.Mesh>\n  {/snippet}\n</Hand>\n```\n\n----------------------------------------\n\nTITLE: Customizing Hand Component with Custom Mesh\nDESCRIPTION: Replacing the default hand model with a custom three.js mesh, demonstrating component flexibility and rendering options\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/hand.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Hand left>\n  <T.Mesh>\n    <T.IcosahedronGeometry args={[0.2]} />\n    <T.MeshStandardMaterial color=\"turquoise\" />\n  </T.Mesh>\n</Hand>\n```\n\n----------------------------------------\n\nTITLE: Custom Children for Controller Component\nDESCRIPTION: This snippet illustrates how to use the `<Controller>` component with custom children. When children are provided, the default controller model is not rendered, allowing for tailored content within the controller's space.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/controller.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Controller left>\n  <T.Mesh>\n    <T.IcosahedronGeometry args={[0.2]} />\n    <T.MeshStandardMaterial color=\"turquoise\" />\n  </T.Mesh>\n</Controller>\n```\n\n----------------------------------------\n\nTITLE: Children Snippet Control in Svelte\nDESCRIPTION: This Svelte code demonstrates using a children snippet for conditional rendering and task management in a <VirtualEnvironment>. It allows users to employ conditional components like T.Mesh and control task restarts. Requires configuring a state and environment properties for proper operation. Expected input involves Svelte component declarations and states.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/virtual-environment.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let meshInScene = $state(true)\n</script>\n\n<VirtualEnvironment\n  frames={1}\n  bind:this={virtualEnvironment}\n>\n  {#snippet children({ restart })}\n    {#if meshInScene}\n      <T.Mesh>\n        <T.PlaneGeometry />\n      </T.Mesh>\n    {/if}\n  {/snippet}\n</VirtualEnvironment>\n```\n\n----------------------------------------\n\nTITLE: Defining VRButton Component Events - JavaScript\nDESCRIPTION: This snippet defines the events for the `<VRButton />` component. It includes an event for user clicks and for handling errors when entering or exiting a VR session. The events are structured to provide structured data payloads indicating the state of the VR session.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/button-vr.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncomponentSignature:\n  {\n    events:\n      [\n        {\n          name: 'click',\n          payload: \"CustomEvent<'unsupported' | 'insecure' | 'blocked' | 'supported'>\",\n          description: 'Fired when a user clicks the VR button.'\n        },\n        {\n          name: 'error',\n          payload: 'CustomEvent<Error>',\n          description: 'Fired when an enter / exit session error occurs.'\n        }\n      ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Threlte Extension Hook in TypeScript\nDESCRIPTION: This TypeScript code defines a hook `useMyExtension` that provides a public API for interacting with the Threlte Studio extension. It uses `useStudio` to retrieve the extension instance and exposes reactive getters for the extension's state and functions for its actions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/authoring-extensions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useStudio } from '@threlte/studio/extend'\nimport { extensionScope, type ExtensionState, type ExtensionActions } from './types'\n\nexport const useMyExtension = () => {\n  const { useExtension } = useStudio()\n\n  const extension = useExtension<ExtensionState, ExtensionActions>(extensionScope)\n\n  return {\n    get enabled() {\n      return extension.state.enabled\n    },\n    get count() {\n      return extension.state.count\n    },\n    setEnabled: extension.setEnabled,\n    toggleEnabled: extension.toggleEnabled,\n    increment: extension.increment,\n    decrement: extension.decrement\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Content Dimensions\nDESCRIPTION: This snippet showcases methods to retrieve the dimensions of the contents within the `<Flex>` component using either a child snippet or the reflow event callback. It emphasizes ensuring accurate layout management after a reflow.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/flex.mdx#2025-04-22_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Flex } from '@threlte/flex'\n</script>\n\n<Flex>\n  {#snippet children({ width, height })}\n    <!-- ... -->\n  {/snippet}\n</Flex>\n\n<Flex\n  onreflow={({ width, height }) => {\n    console.log(width, height)\n  }}\n>\n  <!-- ... -->\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Files Metadata Example in TypeScript\nDESCRIPTION: This snippet illustrates how to define metadata for multiple sprites located in different files. Each entry specifies the file url, the layout, and the animations available for the respective sprite.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/instanced-sprite.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst goblinSpriteMeta = [\n  {\n    url: '/textures/sprites/goblin/Attack.png',\n    type: 'rowColumn',\n    width: 8,\n    height: 1,\n    animations: [{ name: 'attack', frameRange: [0, 7] }]\n  },\n  {\n    url: '/textures/sprites/goblin/Death.png',\n    type: 'rowColumn',\n    width: 4,\n    height: 1,\n    animations: [{ name: 'death', frameRange: [0, 3] }]\n  },\n  {\n    url: '/textures/sprites/goblin/Idle.png',\n    type: 'rowColumn',\n    width: 4,\n    height: 1,\n    animations: [{ name: 'idle', frameRange: [0, 3] }]\n  }\n] as const satisfies SpritesheetMetadata\n```\n\n----------------------------------------\n\nTITLE: Importing and Using XR Controllers in Svelte\nDESCRIPTION: This Svelte code snippet imports the 'useController' hook from the '@threlte/xr' library to create references to the current XR controllers. It filters controllers based on handedness ('left', 'right', 'gaze') and allows integration in Svelte components.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/use-controller.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\\n  import { useController } from '@threlte/xr'\\n\\n  const leftController = useController('left')\\n  const rightController = useController('right')\\n  const gazeController = useController('gaze')\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Global Transitions in Threlte\nDESCRIPTION: This snippet illustrates marking a transition as global using the `global` function from Threlte. It ensures the transition plays whenever the conditions for nested structures are met, rather than just within local scope.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/transitions.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { global } from '@threlte/extras'\n</script>\n\n{#if x}\n  {#if y}\n    <T.Mesh transition={global(scale(400))} />\n  {/if}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Basic Rendering of 3D Text with Svelte\nDESCRIPTION: This Svelte component renders a basic 3D text using the <Text3DGeometry> from the @threlte/extras package. It integrates with a mesh and material from @threlte/core. The text 'Hello World' is displayed, utilizing default properties.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/text-3d-geometry.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/core'\n  import { Text3DGeometry } from '@threlte/extras'\n</script>\n\n<T.Mesh>\n  <Text3DGeometry text={'Hello World'} />\n  <T.MeshStandardMaterial />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Defining Collision Groups using Svelte\nDESCRIPTION: The purpose of this snippet is to define and manage collision groups using the <CollisionGroups> component in Svelte, enabling specific interactions between colliders. It uses the Rapier library for physics simulation. The key properties 'memberships' and 'filter' are determined through bitmask values, and the 'groups' shorthand sets both attributes simultaneously. Each Collider is associated with a <RigidBody> containing <AutoColliders> for shape definition. Dependencies include the Rapier and Svelte libraries.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/collision-groups.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Collider A -->\n<CollisionGroups\n  memberships={[1]}\n  filter={[2]}\n>\n  <RigidBody>\n    <AutoColliders shape={'cuboid'}>\n      <Mesh\n        castShadow\n        {geometry}\n        {material}\n      />\n    </AutoColliders>\n  </RigidBody>\n</CollisionGroups>\n\n<!-- Collider B -->\n<CollisionGroups\n  memberships={[2]}\n  filter={[1, 3]}\n>\n  <RigidBody>\n    <AutoColliders shape={'cuboid'}>\n      <Mesh\n        castShadow\n        {geometry}\n        {material}\n      />\n    </AutoColliders>\n  </RigidBody>\n</CollisionGroups>\n\n<!-- Collider C -->\n<CollisionGroups\n  memberships={[3]}\n  filter={[2]}\n>\n  <RigidBody>\n    <AutoColliders shape={'cuboid'}>\n      <Mesh\n        castShadow\n        {geometry}\n        {material}\n      />\n    </AutoColliders>\n  </RigidBody>\n</CollisionGroups>\n```\n\n----------------------------------------\n\nTITLE: Signature of the useHitTest Hook in TypeScript\nDESCRIPTION: This snippet provides the TypeScript signature for the 'useHitTest' hook, detailing the expected types for its parameters. It specifies that the hitMatrix is of type THREE.Matrix4 and the hit result is either a valid XRHitTestResult or undefined.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/use-hit-test.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nuseHitTest((hitMatrix: THREE.Matrix4, hit: XRHitTestResult | undefined) => {})\n```\n\n----------------------------------------\n\nTITLE: Rendering AR Button Component in Threlte XR\nDESCRIPTION: An HTML button component specialized for augmented reality session initialization with built-in browser support detection and event handling\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/button-ar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<ARButton />\n```\n\n----------------------------------------\n\nTITLE: Using AnimatedSpriteMaterial with Metadata File in Svelte\nDESCRIPTION: Example of using AnimatedSpriteMaterial with a spritesheet texture and JSON metadata file. This approach allows using animation names from Aseprite tags to control specific animations in the spritesheet.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/animated-sprite-material.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Sprite>\n  <AnimatedSpriteMaterial\n    animation=\"Idle\"\n    textureUrl=\"./player.png\"\n    dataUrl=\"./player.json\"\n  />\n</T.Sprite>\n```\n\n----------------------------------------\n\nTITLE: Customizing Reflow Stage\nDESCRIPTION: In this snippet, the developer changes the reflow timing stage using the `<Flex>` component. It demonstrates interacting with Threlte's task scheduling to customize when layout updates occur.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/flex.mdx#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useStage, useThrelte } from '@threlte/core'\n  import { Flex } from '@threlte/flex'\n\n  const { mainStage, renderStage } = useThrelte()\n\n  const reflowStage = useStage('reflow-stage', {\n    after: mainStage,\n    before: renderStage\n  })\n</script>\n\n<Flex {reflowStage}>\n  <!-- ... -->\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using asyncWritable with Promise in Svelte component\nDESCRIPTION: Demonstrates creating a writable store initialized with a promise that can be used directly in Svelte await blocks. The store implements the Promise interface for seamless integration.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/utilities.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { asyncWritable } from '@threlte/core'\n\n  const asyncOperation = async () => {\n    // Do something async\n  }\n  const store = asyncWritable(asyncOperation())\n  $inspect($store)\n</script>\n\n<h1>\n  {#await store then data}\n    // Do something with the data\n  {/await}\n</h1>\n```\n\n----------------------------------------\n\nTITLE: Available Interaction Events - Svelte\nDESCRIPTION: Lists a variety of pointer and mouse events that can be attached to Threlte components. Each handler is demonstrated via simple logging to the console, providing a starting point for more complex interactions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/interactivity.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh\n  onclick={(e) => console.log('click')}\n  oncontextmenu={(e) => console.log('context menu')}\n  ondblclick={(e) => console.log('double click')}\n  onwheel={(e) => console.log('wheel')}\n  onpointerup={(e) => console.log('up')}\n  onpointerdown={(e) => console.log('down')}\n  onpointerover={(e) => console.log('over')}\n  onpointerout={(e) => console.log('out')}\n  onpointerenter={(e) => console.log('enter')}\n  onpointerleave={(e) => console.log('leave')}\n  onpointermove={(e) => console.log('move')}\n  onpointermissed={() => console.log('missed')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Dimension Tracking with useDimensions Hook\nDESCRIPTION: Demonstrates using the useDimensions hook to track and respond to component sizing in a child component\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/box.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useDimensions } from '@threlte/flex'\n  const { width, height } = useDimensions()\n</script>\n\n<T.Mesh\n  scale.x={$width}\n  scale.y={$height}\n/>\n```\n\n----------------------------------------\n\nTITLE: Declaring Properties with <Declare> Component\nDESCRIPTION: Example of using the <Declare> component to declare and control a transparent property for a MeshBasicMaterial within a SheetObject context\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/declare.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<SheetObject>\n  {#snippet children({ Declare })}\n    <Declare props={{ transparent: false }}>\n      {#snippet children({ values })}\n        <T.MeshBasicMaterial transparent={values.transparent} />\n      {/snippet}\n    </Declare>\n  {/snippet}\n</SheetObject>\n```\n\n----------------------------------------\n\nTITLE: Using useHand hook in Svelte\nDESCRIPTION: This Svelte code snippet demonstrates how to import and use the `useHand` hook from the `@threlte/xr` package.  It retrieves references to both the left and right XRHand objects. The hook takes a string ('left' or 'right') specifying the desired handedness as input.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/use-hand.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useHand } from '@threlte/xr'\n\n  const leftHand = useHand('left')\n  const rightHand = useHand('right')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Studio Object Reference in Svelte\nDESCRIPTION: This snippet shows how to create a studio object reference using the Studio Objects Registry within a Svelte component. The `useStudioObjectsRegistry` hook from the `@threlte/studio/extensions` module is used to obtain a registry instance, which then provides a method to create a reference for studio objects. The reference can be bound to 3D elements in the template. This is particularly useful for 3D object manipulation in Svelte components.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/use-studio-objects-registry.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useStudioObjectsRegistry } from '@threlte/studio/extensions'\n\n  const registry = useStudioObjectsRegistry()\n  const studioObject = registry.studioObjectRef()\n</script>\n\n<T.Mesh bind:ref={studioObject.ref} />\n```\n\n----------------------------------------\n\nTITLE: Manual Update of CubeCamera Using Component Export in Svelte\nDESCRIPTION: Shows how to manually update the CubeCamera using the component export method. The frames prop is set to 0 to prevent automatic updates.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/cube-camera.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let cubeCameraComponent = $state()\n\n  $effect(() => {\n    // …\n    cubeCameraComponent?.update()\n  })\n</script>\n\n<CubeCamera\n  frames={0}\n  bind:this={cubeCameraComponent}\n>\n  <!-- … -->\n</CubeCamera>\n```\n\n----------------------------------------\n\nTITLE: Overriding an Existing Plugin\nDESCRIPTION: Shows how to override a previously injected plugin for a specific component tree, which can be useful for customizing behavior in different parts of an application.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/plugins.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injectPlugin } from '@threlte/core'\n\n// this overrides the plugin with the name \"plugin-name\" for all child components.\ninjectPlugin('plugin-name', () => {})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fallback Scene for the World Component\nDESCRIPTION: This snippet provides an implementation of a fallback mechanism for the `<World>` component in Svelte, which allows for displaying an alternate scene if the Rapier physics engine fails to load. It shows how to conditionally render a fallback scene using a slot.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/world.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Canvas } from '@threlte/core'\n  import { World } from '@threlte/rapier'\n  import Scene from './Scene.svelte'\n  import FallbackScene from './FallbackScene.svelte'\n</script>\n\n<Canvas>\n  <World>\n    <Scene />\n    {#snippet fallback()}\n      <FallbackScene />\n    {/snippet}\n  </World>\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Accessing the Raw Gamepad Object\nDESCRIPTION: This snippet illustrates how to access the raw, unmapped Gamepad object via the `raw` property.  It uses `useTask` from `@threlte/core` to check if a gamepad is connected on every frame.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-gamepad.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useTask } from '@threlte/core'\n  import { useGamepad } from '@threlte/extras'\n\n  const gamepad = useGamepad()\n\n  useTask(() => {\n    if (gamepad.raw) {\n      // A gamepad is connected!\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using the align Event Handler\nDESCRIPTION: Shows how to use the align event to get notified when alignment occurs. The event provides detailed information about the bounding box and alignment properties which can be used for further calculations or UI updates.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/align.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<Align\n  onalign={({ width }) => {\n    console.log('The width of the bounding box is', width)\n  }}\n>\n  <T.Mesh position={[-1, 0, 0]}>\n    <T.BoxGeometry />\n    <T.MeshBasicMaterial />\n  </T.Mesh>\n</Align>\n```\n\n----------------------------------------\n\nTITLE: Utilizing Transform Component in Svelte\nDESCRIPTION: This Svelte code snippet demonstrates the use of the <Transform> component within a <SheetObject> in the Threlte Theatre framework. To use it, ensure you have the necessary dependencies, including <SheetObject> and its related slot props. The snippet applies transform operations like translation, rotation, or scaling on the child component T.Mesh. Optional properties like mode and space can be adjusted for various transformation effects.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/transform.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<SheetObject>\n  {#snippet children({ Transform, Sync })}\n    <Transform>\n      <T.Mesh />\n    </Transform>\n  {/snippet}\n</SheetObject>\n```\n\n----------------------------------------\n\nTITLE: Labeling Properties with Sync in Svelte\nDESCRIPTION: This snippet shows how to rename a property for use in Theatre.js by using a string label. It illustrates importing necessary modules and applying Sync to MeshStandardMaterial to use a custom label 'tone' instead of the default property 'color'.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/sync.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { SheetObject } from '@threlte/theatre'\n</script>\n\n<SheetObject key=\"cube\">\n  {#snippet children({ Sync })}\n    <T.Mesh>\n      <T.BoxGeometry />\n      <T.MeshStandardMaterial>\n        <!-- labeled prop: rename color to tone in the studio -->\n        <Sync color=\"tone\" />\n      </T.MeshStandardMaterial>\n    </T.Mesh>\n  {/snippet}\n</SheetObject>\n```\n\n----------------------------------------\n\nTITLE: Initializing Hand Joint Reference in Svelte\nDESCRIPTION: Retrieves a reference to a specific hand joint using the useHandJoint hook. Allows tracking of joint positions for the left hand's wrist joint in an XR context.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/use-hand-joint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n\\<script>\n  import { useHandJoint } from '@threlte/xr'\n\n  const wristJoint = useHandJoint('left', 'wrist')\n\\</script>\n```\n\n----------------------------------------\n\nTITLE: Applying ClassName on Flex Components\nDESCRIPTION: This final snippet shows how to use the created ClassParser to apply predefined class names to <Flex> and <Box> components for configuration.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/getting-started.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<Flex\n  width={100}\n  height={100}\n  {classParser}\n  class=\"container\"\n>\n  <Box class=\"item\">\n    <Plane\n      width={20}\n      height={20}\n    />\n  </Box>\n\n  <Box class=\"item\">\n    <Plane\n      width={20}\n      height={20}\n    />\n  </Box>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using Mask in Svelte with useMask Hook\nDESCRIPTION: This snippet illustrates how to utilize the `useMask` hook within a Svelte script to apply a defined mask to a mesh. The geometrical mask is linked to the mesh by using the assigned mask id, allowing parts of the mesh to be hidden according to the defined mask shape.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/mask.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\\\"ts\\\">\\n  import { useMask } from '@threlte/extras'\\n  const stencil = useMask(1)\\n</script>\\n\\n<T.Mesh>\\n  <T.TorusKnotGeometry />\\n  <T.MeshStandardMaterial {...stencil} />\\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: useHand hook TypeScript signature\nDESCRIPTION: This TypeScript code snippet shows the signature of the `useHand` hook.  It indicates that the hook returns a `CurrentWritable` store containing an `XRHand` object or `undefined` if no hand of the specified handedness is available.  The hook takes a string ('left' or 'right') specifying the desired handedness as input.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/use-hand.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// CurrentWritable<XRHand | undefined> - The current XRHand\nconst hand = useHand('left')\n```\n\n----------------------------------------\n\nTITLE: Using Callback Props with CubeCamera in Svelte\nDESCRIPTION: Demonstrates the usage of the onupdatestart callback prop to log when the update task starts.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/cube-camera.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<CubeCamera\n  onupdatestart={() => {\n    console.log('update started')\n  }}\n>\n  <!-- ... -->\n</CubeCamera>\n```\n\n----------------------------------------\n\nTITLE: Inverting Mask Effect with useMask Hook\nDESCRIPTION: This snippet demonstrates how to invert a mask effect using the `useMask` hook in TypeScript. By specifying a boolean value as the second argument, the mask effect is reversed. This requires prior definition of the mask and compatibility with Three.js rendering.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/mask.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst stencil = useMask(1, true)\n```\n\n----------------------------------------\n\nTITLE: Integrating MeshLineMaterial in Svelte\nDESCRIPTION: This snippet demonstrates how to create a line with MeshLineMaterial in a Svelte component, indicating how width and color properties can be set. Dependencies include Three.js for line geometry and Threlte components. The key inputs are 'points', an array of Vector3 objects defining the line path. It effectively renders a customizable line with specified visual properties in a 3D scene.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/meshline-material.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  const points = [new Vector3(-5, 1, 0), new Vector3(0, 1, 0), new Vector3(5, 1, 0)]\n</script>\n\n<T.Mesh>\n  <MeshLineGeometry {points} />\n  <MeshLineMaterial\n    width={0.5}\n    color=\"#fe3d00\"\n  />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Side Effects and Suspense in Svelte\nDESCRIPTION: This code illustrates that side effects, such as `useTask` hooks, within a suspense-ready component are executed immediately, even when the component's default slot is not visible due to suspension. This is a key limitation to consider when using `<Suspense>` in Threlte.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/suspense.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T, useTask } from '@threlte/core'\n  import { useGltf, useSuspense } from '@threlte/extras'\n\n  const suspend = useSuspense()\n  const gltf = suspend(useGltf('model.gltf'))\n\n  useTask(() => {\n    // This will be executed immediately\n  })\n</script>\n\n{#await gltf then { scene }}\n  <T is={scene}>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Reading Gamepad Input Values\nDESCRIPTION: This code shows how to access gamepad input values using the standard gamepad layout. It logs the x and y values of the left stick, as well as the values of the left bumper and right trigger.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-gamepad.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useTask } from '@threlte/core'\n  import { useGamepad } from '@threlte/extras'\n\n  const gamepad = useGamepad()\n\n  useTask(() => {\n    console.log(gamepad.leftStick.x, gamepad.leftStick.y)\n    console.log(gamepad.leftBumper.value)\n    console.log(gamepad.rightTrigger.value)\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Flex Layout in Svelte Component\nDESCRIPTION: This Svelte component demonstrates a basic scene layout using `<Flex>` and `<Box>` components from `@threlte/flex`. It imports these components and defines a layout structure with a `Label` component inside a flex container.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/use-reflow.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Flex, Box } from '@threlte/flex'\n  import Label from './Label.svelte'\n</script>\n\n<Flex width={100}>\n  <Box>\n    <Label text=\"Hello World\">\n  </Box>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using MeshLineGeometry and MeshLineMaterial in Svelte\nDESCRIPTION: This snippet demonstrates how to use MeshLineGeometry and MeshLineMaterial components to render the cursor line. It uses a getter function to access the current points for the geometry.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/meshline/Cursor Lines.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<CursorLine>\n  {#snippet children({ getPoints })}\n    <MeshLineGeometry\n      points={getPoints()}\n      shape=\"taper\"\n    />\n    <MeshLineMaterial attenuate={false} />\n  {/snippet}\n</CursorLine>\n```\n\n----------------------------------------\n\nTITLE: Using useInstancedSprite Hook in TypeScript\nDESCRIPTION: Demonstrates how to use the useInstancedSprite hook to manage sprite instances, including updating positions, setting animations, and controlling playback.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/instanced-sprite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useInstancedSprite } from '@threlte/extras'\n\nconst hook = useInstancedSprite()\n// it's useful to immediately destructure it like this\nconst { updatePosition, count, animationMap, sprite } = useInstancedSprite()\n\n// Examples of using the InstancedSpriteMesh API:\n\n// play animation on instance id 0 - loops by defualt\nsprite.play('IdleBackward').at(0)\n// play animation without looping\nsprite.play('RunLeft', false).at(1)\n// play animation backwards with looping\nsprite.play('RunLeft', true, 'REVERSE').at(2)\n\n// mesh.play is a utility that combines the use of these functions:\n// animation by name\nsprite.animation.setAt(0, 'RunBackward')\n// looping y/n\nsprite.loop.setAt(0, false)\n// animation direction - FORWARD (default) / REVERSE / PAUSE\nsprite.playmode.setAt(0, 'REVERSE')\n\n// billboarding\nsprite.billboarding.setAll(true)\nsprite.billboarding.setAt(0, true)\n```\n\n----------------------------------------\n\nTITLE: Creating an Anonymous Task with useTask in TypeScript\nDESCRIPTION: Basic usage of useTask to create an anonymous task that executes on every frame. The hook returns start and stop functions, a started store, and the task reference.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-task.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { start, stop, started, task } = useTask((delta) => {\n  // This function will be executed on every frame\n})\n```\n\n----------------------------------------\n\nTITLE: Using useReflow Hook in Svelte Component\nDESCRIPTION: This Svelte component demonstrates how to use the `useReflow` hook from `@threlte/flex` along with the `<Text>` component from `@threlte/extras`.  It imports the necessary modules, defines a `text` prop, uses `useReflow` to get a `reflow` function, and calls `reflow()` in the `onsync` event handler of the `<Text>` component to trigger a layout reflow after the text has been synchronized.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/use-reflow.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Text } from '@threlte/extras'\n  import { useReflow } from '@threlte/flex/hooks'\n\n  export let text: string\n\n  const reflow = useReflow()\n</script>\n\n<Text\n  {text}\n  onsync={() => {\n    reflow()\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updated Attach API in Threlte 8\nDESCRIPTION: Demonstrates the new signature for the attach prop in Threlte 8, providing more context in the callback.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh\n  attach={({ ref, parent, parentObject3D }) => {\n    console.log('attaching', ref, parent, parentObject3D)\n    return () => {\n      console.log('detaching', ref, parent, parentObject3D)\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Registering a Mesh with Teleport Surface in Svelte\nDESCRIPTION: This snippet shows how to register a mesh as a teleport surface using the 'teleportSurface' property. The mesh acts as a target navigation mesh for teleportation. Compatible with the 'teleportControls' plugin.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/teleport-controls.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh teleportSurface>\n  <T.CylinderGeometry args={[20, 0.01]} />\n  <T.MeshStandardMaterial />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Merging user context data with existing data in Svelte\nDESCRIPTION: Shows how to merge new context data with existing data by using the 'merge' option. By default, setting context at an existing namespace is ignored, but this behavior can be overridden.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-threlte-user-context.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useThrelteUserContext } from '@threlte/core'\n\n  const getCtx = () => {\n    return {\n      foo: 'bar'\n    }\n  }\n\n  const ctx = useThrelteUserContext('some-context', getCtx, { exising: 'merge' })\n  console.log(ctx) // -> { foo: 'bar' }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Complex RadialGradientTexture stops example\nDESCRIPTION: This code snippet provides an example of a more complex radial gradient with three color stops.  It demonstrates transitioning from cyan at the center (offset 0), to magenta at the midpoint (offset 0.5), and finally to yellow at the edge (offset 1). This showcases the flexibility of the `stops` prop to create diverse gradient effects.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/radial-gradient-texture.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<RadialGradientTexture\n  stops={[\n    { color: '#00ffff', offset: 0 },\n    { color: '#ff00ff', offset: 0.5 },\n    { color: '#ffff00', offset: 1 }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Enhanced Tile Component with Props Spreading\nDESCRIPTION: Updated Tile component implementation that handles position props through props spreading on the root T.Group component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/custom-abstractions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/threlte'\n  import { MathUtils } from 'three'\n\n  let { children, ...props } = $props()\n</script>\n\n<T.Group {...props}>\n  <!-- 2x2 Floor -->\n  <T.Mesh rotation.x={-90 * MathUtils.DEG2RAD}>\n    <T.PlaneGeometry args={[2, 2]} />\n    <T.MeshStandardMaterial />\n  </T.Mesh>\n\n  {@render children()}\n</T.Group>\n```\n\n----------------------------------------\n\nTITLE: Externalizing camera-controls in Vite Configuration\nDESCRIPTION: This snippet shows how to configure Vite to prevent SSR externalization of the camera-controls library. It modifies the vite.config.js or vite.config.ts file to include camera-controls in the noExternal array.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/camera/camera-controls.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nexport default defineConfig({\n  plugins: [sveltekit()],\n  ssr: {\n    noExternal: ['camera-controls']\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Store with Cursor Hook - Svelte/TypeScript\nDESCRIPTION: This snippet shows how to implement custom logic for managing the hover state using the store returned by the `useCursor` hook, allowing application-wide cursor state management.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-cursor.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/core'\n  import { useCursor } from '@threlte/extras'\n  import { BoxGeometry, MeshBasicMaterial } from 'three'\n\n  const { hovering } = useCursor()\n</script>\n\n<T.Mesh\n  onpointerenter={() => ($hovering = true)}\n  onpointerleave={() => ($hovering = false)}\n  geometry={new BoxGeometry()}\n  material={new MeshBasicMaterial()} /\n>\n```\n\n----------------------------------------\n\nTITLE: Using useViewport with custom origin in Typescript\nDESCRIPTION: This TypeScript snippet shows how to use the `useViewport` hook and pass a custom origin point to calculate the distance. The viewport will return values related to the passed origin point.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-viewport.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst viewport = useViewport([1, 0, 1])\n```\n\n----------------------------------------\n\nTITLE: Initializing Headset with AudioListener in Threlte XR\nDESCRIPTION: Demonstrates how to use the Headset component from @threlte/xr and attach an AudioListener to the headset pose. This snippet shows basic component composition and importing from Threlte libraries.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/headset.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Headset } from '@threlte/xr'\n  import { AudioListener } from '@threlte/extras'\n</script>\n\n<Headset>\n  <AudioListener />\n</Headset>\n```\n\n----------------------------------------\n\nTITLE: Configuring AsciiRenderer Characters in Svelte\nDESCRIPTION: Shows how to set the characters prop for AsciiRenderer, which should be sorted by ascending 'opaqueness'. This example uses a character set with two characters: space and hash.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/ascii-renderer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<AsciiRenderer characters=\" #\" />\n```\n\n----------------------------------------\n\nTITLE: Use Update Function with Children Snippet in Svelte\nDESCRIPTION: This Svelte snippet illustrates using an 'update' function within a children snippet, allowing control over update events tied to component actions. Dependencies may include meshes and geometrical components for rendering. Set 'frames' to 0 to disable auto-updates. Inputs are component actions that trigger updates, with outputs reflecting these changes in the render.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/virtual-environment.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<VirtualEnvironment frames={0}>\n  {#snippet children({ update })}\n    <T.Mesh\n      oncreate={() => {\n        update()\n      }}\n    >\n      <T.PlaneGeometry />\n    </T.Mesh>\n  {/snippet}\n</VirtualEnvironment>\n```\n\n----------------------------------------\n\nTITLE: Using Points with BufferGeometry in Threlte\nDESCRIPTION: This snippet demonstrates how to create Points in Threlte by utilizing BufferGeometry and attaching attributes for point positions, following the Threlte framework conventions. It highlights the importance of the attach method for linking BufferAttribute to BufferGeometry.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/geometry/Rendering Points.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Points>\n  <T.BufferGeometry>\n    <T.BufferAttribute\n      args={[positions, 3]}\n      attach={({ parent, ref }) => {\n        parent.setAttribute('position', ref)\n        return () => {\n          // cleanup function called when ref changes or the component unmounts\n          // https://threlte.xyz/docs/reference/core/t#attach\n        }\n      }}\n    />\n  </T.BufferGeometry>\n  <T.PointsMaterial size={0.25} />\n</T.Points>\n```\n\n----------------------------------------\n\nTITLE: Automatic Disposal Limitations in Threlte\nDESCRIPTION: Demonstrates a scenario where automatic disposal has limitations. In this example, a texture used in a conditional rendering block will not be automatically disposed when the material unmounts, requiring manual disposal.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/disposing-objects.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { useTexture } from '@threlte/extras'\n\n  const map = useTexture('/some/texture.png')\n</script>\n\n{#if $map}\n  <T.Mesh>\n    <T.BoxGeometry />\n    <T.MeshBasicMaterial map={$map} />\n  </T.Mesh>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Combining Teleport and Pointer Controls in Svelte\nDESCRIPTION: Demonstrates combining 'teleportControls' and 'pointerControls' allowing structured interactions, delegating actions depending on whether an object handles pointer events.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/teleport-controls.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { pointerControls, teleportControls } from '@threlte/xr'\n  teleportControls('left')\n  pointerControls('right')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Material Color with T Component in Svelte\nDESCRIPTION: Demonstrates how to set the color property of a MeshBasicMaterial using the T component in Svelte.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n</script>\n\n<T.Mesh>\n  <T.BoxGeometry />\n  <T.MeshBasicMaterial color=\"red\" />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Applying GLTF animations to a different root in Svelte\nDESCRIPTION: This snippet demonstrates how to use `useGltfAnimations` with an optional second argument to apply animations to a custom root, instead of the default GLTF scene. A new `Group` from Three.js is used as the animation root.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-gltf-animations.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<script>\n  import { useGltfAnimations, useGltf } from '@threlte/extras'\n  import { Group } from 'three'\n\n  const gltf = useGltf('/path/to/model.glb')\n\n  const group = new Group()\n\n  const { root } = useGltfAnimations(gltf, group)\n  // $root === group\n</script>\n\n{#await gltf then { scene }}\n  <T is={group}>\n    <T is={scene} />\n  </T>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Setting Position with T Component in Svelte\nDESCRIPTION: Shows how to set the position property of a Mesh using an array of coordinates with the T component in Svelte.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n</script>\n\n<T.Mesh position={[0, 1, 0]}>\n  <T.BoxGeometry />\n  <T.MeshBasicMaterial color=\"red\" />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Object Selection Manipulation Methods\nDESCRIPTION: Demonstrates various methods for selecting, deselecting, and managing object selections using the useObjectSelection hook\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/use-object-selection.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// select an object\nselection.selectObjects([object])\n\n// select multiple objects\nselection.selectObjects([object1, object2])\n\n// clear the selection\nselection.clearSelection()\n\n// add an object to the selection\nselection.addToSelection(object)\n\n// remove an object from the selection\nselection.removeFromSelection(object)\n\n// toggle the selection of an object\nselection.toggleSelection([object])\n\n// toggle the selection of multiple objects\nselection.toggleSelection([object1, object2])\n\n// get the selected objects\nconsole.log(selection.selectedObjects) // [object1, object2]\n```\n\n----------------------------------------\n\nTITLE: Making a Component Suspense-Ready in Svelte\nDESCRIPTION: This code snippet shows how to make a Svelte component suspense-ready using the `useSuspense` hook from `@threlte/extras`. The `useSuspense` hook returns a function that wraps the promise returned by `useGltf`. This allows the parent `<Suspense>` component to handle the loading state of the child component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/suspense.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { useGltf, useSuspense } from '@threlte/extras'\n\n  const suspend = useSuspense()\n  const gltf = suspend(useGltf('model.gltf'))\n</script>\n\n{#await gltf then { scene }}\n  <T is={scene}>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Scene Tone Mapping in Svelte\nDESCRIPTION: This code snippet illustrates how to adjust the tone mapping of a Threlte scene. It imports `useThrelte` from `@threlte/core` to access the scene's tone mapping settings and `LinearToneMapping` from `three`. By setting `toneMapping.set(LinearToneMapping)`, the scene's tone mapping is adjusted, which may be necessary to ensure colors in the scene match the colors defined in the RadialGradientTexture.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/radial-gradient-texture.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useThrelte } from '@threlte/core'\n  import { LinearToneMapping } from 'three'\n\n  const { toneMapping } = useThrelte()\n\n  toneMapping.set(LinearToneMapping)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Threlte Mesh with click handler\nDESCRIPTION: This snippet creates a Threlte Mesh component representing a box. It sets the scale and x-position of the mesh and defines an onclick event handler that logs \"click!\" to the console when the mesh is clicked. The geometry is a T.BoxGeometry, and the material is a T.MeshStandardMaterial with a hotpink color.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/components/Intro/ScaleExample.txt#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh\n  scale={2}\n  position.x={10}\n  onclick={() => {\n    console.log('click!')\n  }}\n>\n  <T.BoxGeometry args={[1, 1, 2]} />\n  <T.MeshStandardMaterial color=\"hotpink\" />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: HTML Component with Portal in Svelte\nDESCRIPTION: This snippet shows how to use the portal property with the HTML component to mount its contents on a different HTMLElement, such as document.body.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/html.mdx#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { HTML } from '@threlte/extras'\n</script>\n\n<HTML portal={document.body}>\n  <h1>Hello World</h1>\n</HTML>\n```\n\n----------------------------------------\n\nTITLE: Accessing Theatre.js Studio using useStudio Hook in Svelte\nDESCRIPTION: This code snippet demonstrates how to import and use the `useStudio` hook from the `@threlte/theatre` library in a Svelte component. The `useStudio` hook provides access to the Theatre.js studio object, allowing interaction with the Theatre.js editor and its functionalities.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/use-studio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useStudio } from '@threlte/theatre'\n  const studio = useStudio()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Restarting CubeCamera Update Task Using Children Snippet in Svelte\nDESCRIPTION: Demonstrates how to restart the CubeCamera update task using the restart function provided through the children snippet.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/cube-camera.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<CubeCamerae frames={1}>\n  {#snippet children({ restart })}\n    <T.Mesh oncreate={restart}>\n      <!-- ... -->\n    </T.Mesh>\n  {/snippet}\n</CubeCamera>\n```\n\n----------------------------------------\n\nTITLE: Typescript: Adding UI Modifiers to Static State\nDESCRIPTION: This TypeScript snippet shows how to add JSDoc tags like `@min` and `@max` to the `gap` property of the `SceneConfig` class.  These tags are used to specify the minimum and maximum values for the `gap` property in the Studio UI, which will render a slider for adjusting the gap value.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/static-state.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass SceneConfig extends StaticState {\n  /**\n   * @min 1.5\n   * @max 5\n   */\n  gap = $state(2)\n}\n```\n\n----------------------------------------\n\nTITLE: Use Headset Hook Signature in TypeScript\nDESCRIPTION: This snippet provides the signature of the useHeadset hook, indicating that it returns an instance of THREE.Group representing the headset pose. It helps developers understand the data type and structure of the returned object.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/use-headset.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"\"\"ts\\n// THREE.Group - A group representing the headset pose.\\nconst headset = useHeadset()\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Attaching Texture to Material Property in Threlte Svelte\nDESCRIPTION: Here, the texture is attached to the 'map' property of the parent material using the syntax provided by Threlte in Svelte.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { MeshStandardMaterial } from 'three'\n  export let texture\n</script>\n\n<T is={MeshStandardMaterial}>\n  <!-- Attaches the texture to the property \"map\" of the parent material -->\n  <T\n    is={texture}\n    attach=\"map\"\n  />\n</T>\n```\n\n----------------------------------------\n\nTITLE: Defining Sprite Metadata for InstancedSprite in Svelte\nDESCRIPTION: This snippet demonstrates how to define sprite metadata for use with the InstancedSprite component. It includes setting up the spritesheet layout and defining animations.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/animation/Complex sprite scene.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { InstancedSprite, buildSpritesheet } from '@threlte/extras'\n  import UpdaterFlying from './UpdaterFlying.svelte'\n  import type { SpritesheetMetadata } from '@threlte/extras'\n\n  const demonSpriteMeta = [\n    {\n      url: '/textures/sprites/cacodaemon.png',\n      type: 'rowColumn',\n      width: 8,\n      height: 4,\n      animations: [\n        { name: 'fly', frameRange: [0, 5] },\n        { name: 'attack', frameRange: [8, 13] },\n        { name: 'idle', frameRange: [16, 19] },\n        { name: 'death', frameRange: [24, 31] }\n      ]\n    }\n  ] as const satisfies SpritesheetMetadata\n\n  const flyerSheetbuilder = buildSpritesheet.from<typeof demonSpriteMeta>(demonSpriteMeta)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using a Function for Attach in Threlte Svelte\nDESCRIPTION: In this example, the 'attach' prop is defined as a function that handles the attachment of a THREE.OrthographicCamera to a parent property, demonstrating additional control during the component's lifecycle in Threlte Svelte.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<T.DirectionalLight>\n  <!--\n    Attaches an instance of a THREE.OrthographicCamera\n    to the property camera of the property shadow of the\n    parent THREE.DirectionalLight\n  -->\n  <T.OrthographicCamera\n    args={[-1, 1, 1, -1, 0.1, 100]}\n    attach={({ ref, parent, parentObject3D }) => {\n      console.log('attaching', ref, parent, parentObject3D)\n      parent.shadow.camera = ref\n      return () => {\n        parent.shadow.camera = null\n      }\n    }}\n  />\n</T.DirectionalLight>\n```\n\n----------------------------------------\n\nTITLE: Using AudioListener in a callback - Typescript\nDESCRIPTION: This snippet illustrates how to use the `useAudioListener` hook with a callback function.  The callback receives an object containing the `listener` and `context`. This example demonstrates creating a `BiquadFilter` within the callback and returning it for further use.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-audio-listener.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst filter = useAudioListener(({ listener, context }) => {\n  return context.createBiquadFilter()\n})\n```\n\n----------------------------------------\n\nTITLE: Triggering Resize via Snippet Argument\nDESCRIPTION: Shows how to use snippet argument within the `<Resize>` component for dynamic resizing. Dependencies include Svelte templating. Inputs: Snippet children callback. Outputs: On creation resize through snippet mechanism.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/resize.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Resize } from '@threlte/extras'\n</script>\n\n<Resize>\n  {#snippet children({ resize })}\n    <T.Mesh oncreate={resize} />\n  {/snippet}\n</Resize>\n```\n\n----------------------------------------\n\nTITLE: Defining SpritesheetMetadata Type in TypeScript\nDESCRIPTION: This code defines the 'SpritesheetMetadata' type that structures the metadata required for sprites within a single spritesheet. This includes properties for the sprite URL, layout type, dimensions, and animations.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/instanced-sprite.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype SpritesheetMetadata = {\n  url: string\n  type: 'rowColumn' | 'frameSize'\n  width: number\n  height: number\n  animations: {\n    name: string\n    frameRange: [number, number]\n  }[]\n}[]\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Assets with Map in Svelte\nDESCRIPTION: Shows how to load multiple assets using a map of paths with the useLoader hook in a Svelte component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-loader.mdx#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useLoader } from '@threlte/core'\n  import { TextureLoader } from 'three'\n\n  const { load } = useLoader(TextureLoader)\n  const textures = load({\n    texture1: 'texture1.png',\n    texture2: 'texture2.png'\n  })\n\n  $inspect($textures) // eventually { texture1: Texture, texture2: Texture }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using createRenderer in Threlte 8\nDESCRIPTION: Shows how to use the new createRenderer function to set custom renderer parameters in Threlte 8.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<Canvas\n  createRenderer={(canvas) => {\n    return new WebGLRenderer({\n      canvas,\n      alpha: true,\n      powerPreference: 'high-performance',\n      antialias: false,\n      depth: false,\n      premultipliedAlpha: false\n    })\n  }}\n>\n  <Scene />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering with ShouldRender Check in TypeScript\nDESCRIPTION: Demonstrates how to use the shouldRender function from useThrelte for fine-grained control over when to render in custom rendering scenarios.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/render-modes.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useThrelte, useTask } from '@threlte/core'\n\nconst { shouldRender } = useThrelte()\n\nuseTask(\n  () => {\n    if (shouldRender()) {\n      // render here\n    }\n  },\n  { autoInvalidate: false }\n)\n```\n\n----------------------------------------\n\nTITLE: Injecting a Plugin in Svelte Component\nDESCRIPTION: Demonstrates how to inject a plugin into a Threlte scene that will affect all child <T> components. The plugin is injected with a unique name and will be accessible to all nested components.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/plugins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { injectPlugin } from '@threlte/core'\n  import myPlugin from './myPlugin'\n  import OtherComponent from './OtherComponent.svelte'\n\n  injectPlugin('my-plugin', myPlugin)\n</script>\n\n<!--\nThis component is affected by the plugin 'my-plugin'\n-->\n<T.Mesh />\n\n<!--\n<T> components in this component are\nalso affected by the plugin 'my-plugin'\n-->\n<OtherComponent />\n```\n\n----------------------------------------\n\nTITLE: Overwriting Default T Catalogue with WebGPU Definitions\nDESCRIPTION: Demonstrates how to overwrite default T catalogue components with WebGPU definitions to ensure compatibility when using node materials.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/webgpu.mdx#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { DirectionalLight, MeshPhysicalNodeMaterial } from 'three/webgpu'\n\n  // tell <T.DirectionalLight> to use the definition from `three/webgpu`\n  extend({ MeshPhysicalNodeMaterial, DirectionalLight })\n</script>\n\n<Canvas>\n  <Scene />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Setting up a basic scene with Theatre.js\nDESCRIPTION: This code snippet demonstrates how to integrate Theatre.js into a Threlte scene using the `<Theatre>` component. It encapsulates the entire scene within a Theatre context, enabling animation editing within the Theatre.js studio.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Canvas } from '@threlte/core'\n  import { Theatre } from '@threlte/theatre'\n  import Scene from './Scene.svelte'\n</script>\n\n<Canvas>\n  <Theatre>\n    <Scene />\n  </Theatre>\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Setting Layout Direction\nDESCRIPTION: This snippet illustrates how to set the layout direction of the `<Flex>` component, allowing the definition of the text and child layout order using the 'direction' prop. It highlights the ability to affect the start and end placements in the flex container.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/flex.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<Flex direction=\"RTL\">\n  <!-- ... -->\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Background for CubeCamera in Svelte\nDESCRIPTION: Shows how to set a custom background color for the CubeCamera when rendering to the render target.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/cube-camera.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Color } from 'three'\n\n  const background = new Color(0xff_00_ff)\n</script>\n\n<CubeCamera {background}>\n  <!-- ... -->\n</CubeCamera>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Camera in Threlte Svelte\nDESCRIPTION: Here, the 'makeDefault' prop is used to designate a PerspectiveCamera as the default rendering camera in Threlte Svelte.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<T\n  is={PerspectiveCamera}\n  makeDefault\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Transformers Directly in Svelte Markup\nDESCRIPTION: This Svelte snippet demonstrates declaring a transformer for a light's intensity property directly in the markup. It details importing various modules and setting up a transformer to provide a UI slider range from 0 to 2 for selecting intensity.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/sync.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { SheetObject } from '@threlte/theatre'\n  import { createTransformer, types } from '@threlte/theatre'\n</script>\n\n<SheetObject key=\"light\">\n  {#snippet children({ Sync })}\n    <T.DirectionalLight>\n      <Sync\n        intensity={{\n          transformer: {\n            transform(value) {\n              // use the initial value and provide a range\n              // slider UI that goes from 0 to 2.\n              return types.number(value, {\n                range: [0, 2]\n              })\n            },\n            apply(target, path, value) {\n              // whenever the value changes, apply it back\n              // to the target.\n              target[path] = value\n            }\n          }\n        }}\n      />\n    </T.DirectionalLight>\n  {/snippet}\n</SheetObject>\n```\n\n----------------------------------------\n\nTITLE: Adjusting Scene Tone Mapping in Svelte\nDESCRIPTION: This code snippet shows how to adjust the tone mapping of a Threlte scene using `useThrelte` from `@threlte/core` and `LinearToneMapping` from `three`. It imports the necessary modules and sets the scene's tone mapping to `LinearToneMapping`, which might be required if the gradient colors do not match the expected colors in the scene.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/linear-gradient-texture.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useThrelte } from '@threlte/core'\n  import { LinearToneMapping } from 'three'\n\n  const { toneMapping } = useThrelte()\n\n  toneMapping.set(LinearToneMapping)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding InstancedSprite Component to Scene in Svelte\nDESCRIPTION: This snippet shows how to add the InstancedSprite component to a scene, specifying the count of instances and the spritesheet to use.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/animation/Complex sprite scene.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n{#await flyerSheetbuilder.spritesheet then spritesheet}\n  <InstancedSprite\n    count={20000}\n    {spritesheet}\n  >\n    <!-- User component for updating instances -->\n    <UpdaterFlying /> /\n    <!-- -->\n  </InstancedSprite>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Creating a Mesh with Click Event - Svelte\nDESCRIPTION: This snippet defines a mesh in Svelte with an onclick event that logs a message when clicked. This is used to demonstrate how pointer events can interact with 3D objects.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/pointer-controls.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n\"<T.Mesh\\n  onclick={() => {\\n    console.log('clicked')\\n  }}>\\n  <T.BoxGeometry />\\n  <T.MeshStandardMaterial color='red' />\\n</T.Mesh>\"\n```\n\n----------------------------------------\n\nTITLE: Creating a CssObject Component for CSS2DObject Integration\nDESCRIPTION: Implements a Svelte component that bridges HTML content with Three.js CSS2DObject. This component allows for placing HTML elements in 3D space while also supporting nested Threlte components through a dedicated slot.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/renderers/CSS2DRenderer Overlay.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { CSS2DObject } from 'three/examples/jsm/renderers/CSS2DRenderer.js'\n\n  export let pointerEvents = false\n\n  let element\n</script>\n\n<div\n  bind:this={element}\n  style:pointer-events={pointerEvents ? 'auto' : 'none !important'}\n  style:will-change=\"transform\"\n>\n  <slot />\n</div>\n\n{#if element}\n  <T\n    {...$$restProps}\n    is={CSS2DObject}\n    args={[element]}\n  />\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Transition Parameters in Threlte\nDESCRIPTION: This snippet demonstrates how to use a parameterized function to create reusable transitions with custom duration, using `createTransition`. This facilitates dynamic transition effects based on input parameters.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/transitions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isInstanceOf } from '@threlte/core'\nimport { createTransition } from '@threlte/extras'\n\nconst scale = (duration: number) => {\n  return createTransition((ref) => {\n    if (!isInstanceOf(ref, 'Object3D')) return\n    return {\n      tick(t) {\n        ref.scale.setScalar(t)\n      },\n      duration\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: BVH Raycast Plugin Implementation\nDESCRIPTION: A complete implementation of a plugin that adds BVH (Bounding Volume Hierarchy) raycasting to all mesh and geometry components, optimizing raycasting performance.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/plugins.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injectPlugin, isInstanceOf } from '@threlte/core'\nimport type { BufferGeometry, Mesh } from 'three'\nimport { computeBoundsTree, disposeBoundsTree, acceleratedRaycast } from 'three-mesh-bvh'\n\nconst bvhRaycasting = () => {\n  injectPlugin('bvh-raycast', (args) => {\n    $effect(() => {\n      if (isInstanceOf(args.ref, 'BufferGeometry')) {\n        args.ref.computeBoundsTree = computeBoundsTree\n        args.ref.disposeBoundsTree = disposeBoundsTree\n        args.ref.computeBoundsTree()\n      }\n      if (isInstanceOf(args.ref, 'Mesh')) {\n        args.ref.raycast = acceleratedRaycast\n      }\n      return () => {\n        if (isInstanceOf(args.ref, 'BufferGeometry')) {\n          args.ref.disposeBoundsTree()\n        }\n      }\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Imports with Threlte's T Component\nDESCRIPTION: Shows how to use explicit imports from three/webgpu with Threlte's T component using the 'is' prop.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/webgpu.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { MeshPhysicalNodeMaterial } from 'three/webgpu'\n\n\tconst material = new MeshPhysicalNodeMaterial()\n</script>\n\n<T.Mesh>\n\t<T.BoxGeometry>\n\t<T is={material}>\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Svelte Scene with Dynamic Object Positioning\nDESCRIPTION: This Svelte snippet builds upon the previous example by instantiating the `SceneConfig` class and using its `gap` property to dynamically position the `Icosahedron` and `Box` components. This demonstrates how changes to the `gap` property in the Studio UI can automatically update the positions of the objects in the scene.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/static-state.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { StaticState } from '@threlte/studio'\n  import Icosahedron from './Icosahedron.svelte'\n  import Sphere from './Sphere.svelte'\n  import { StaticState } from '@threlte/studio'\n\n  class SceneConfig extends StaticState {\n    gap = $state(1.5)\n  }\n\n  const sceneConfig = new SceneConfig()\n</script>\n\n<Icosahedron position={[-sceneConfig.gap, 0, 0]} />\n<Sphere position={[0, 0, 0]} />\n<Box position={[sceneConfig.gap, 0, 0]} />\n```\n\n----------------------------------------\n\nTITLE: Adjusting Layout Precision with Scale Factor\nDESCRIPTION: This snippet shows how to adjust the layout computation precision by specifying a scale factor in the `<Flex>` component. It addresses potential layout accuracy issues when floating-point numbers are involved in rendering.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/flex.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<Flex scaleFactor={100000}>\n  <!-- ... -->\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Defining a Multiple Animations Metadata Example in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a metadata array for multiple animations associated with a single sprite image. It specifies the URL, layout type, and animation frames relevant to the sprite.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/instanced-sprite.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst demonSpriteMeta = [\n  {\n    url: '/textures/sprites/cacodaemon.png',\n    type: 'rowColumn',\n    width: 8,\n    height: 4,\n    animations: [\n      { name: 'fly', frameRange: [0, 5] },\n      { name: 'attack', frameRange: [8, 13] },\n      { name: 'idle', frameRange: [16, 19] },\n      { name: 'death', frameRange: [24, 31] }\n    ]\n  }\n] as const satisfies SpritesheetMetadata\n```\n\n----------------------------------------\n\nTITLE: Using Snippet Prop for Object Reference in Threlte Svelte\nDESCRIPTION: In this example, the 'ref' prop is used within a snippet to reference an object inside the PerspectiveCamera, providing a method to instantiate the OrbitControls based on the camera.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_19\n\nLANGUAGE: svelte\nCODE:\n```\n<T.PerspectiveCamera>\n  {#snippet children({ ref: camera })}\n    <!--\n      The prop \"ref\" is used to reference the\n      camera and instantiate the OrbitControls\n    -->\n    <T\n      is={OrbitControls}\n      args={[camera, renderer.domElement]}\n    />\n  {/snippet}\n</T.PerspectiveCamera>\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript for Type Safety in Threlte\nDESCRIPTION: This snippet shows how to extend Threlte component props with TypeScript for type safety. By defining `Threlte.UserProps` to include `TransitionsProps`, developers can ensure type-safety for transition-related properties.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/transitions.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TransitionsProps } from '@threlte/extras'\n\ndeclare global {\n  namespace Threlte {\n    interface UserProps extends TransitionsProps {}\n  }\n}\n\nexport {}\n```\n\n----------------------------------------\n\nTITLE: Disabling Sky Environment Rendering\nDESCRIPTION: This snippet shows how to disable the default behavior of rendering the sky to the scene environment. Setting the `setEnvironment` prop to `false` prevents the sky from being used as the environment map. This is useful for customizing environment mapping or optimizing performance in certain scenarios.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/sky.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Sky setEnvironment={false} />\n```\n\n----------------------------------------\n\nTITLE: Renaming Event Handlers in Cursor Hook - Svelte/TypeScript\nDESCRIPTION: This snippet illustrates how to rename the event handlers returned by the `useCursor` hook to avoid naming conflicts and bind multiple handlers to the same event.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-cursor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/core'\n  import { useCursor } from '@threlte/extras'\n  import { BoxGeometry, MeshBasicMaterial } from 'three'\n\n  const { onPointerEnter: cursorEnter, onPointerLeave: cursorLeave } = useCursor()\n\n  const onPointerEnter = () => {\n    console.log('Pointer entered!')\n  }\n  const onPointerLeave = () => {\n    console.log('Pointer left!')\n  }\n</script>\n\n<T.Mesh\n  onpointerenter={cursorEnter}\n  onpointerenter={onPointerEnter}\n  geometry={new BoxGeometry()}\n  material={new MeshBasicMaterial()} /\n>\n```\n\n----------------------------------------\n\nTITLE: Creating a Task in a Specified Stage in Typescript\nDESCRIPTION: This snippet illustrates how to create a task within a specific stage ('afterRenderStage') using the `useTask` hook. The task will be added to the designated stage and executed on every frame as part of that stage's schedule.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/scheduling-tasks.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nuseTask(\n  (delta) => {\n    // This function will be executed on every frame as a\n    // task in the stage `afterRenderStage`.\n  },\n  { stage: afterRenderStage }\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Threlte Components in Svelte\nDESCRIPTION: Imports the GLTF model loader and Float components from the @threlte/extras package, which are used for loading and displaying 3D models in a Threlte/Svelte application.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/components/Intro/ExtrasExample.txt#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { GLTF, Float } from '@threlte/extras'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Task with a Single Dependency (Key) in Typescript\nDESCRIPTION: This code snippet demonstrates creating a task that executes after another task ('some-task') passed by key using the `after` option of the `useTask` hook.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/scheduling-tasks.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Execute a task after a single task passed by key\nuseTask(\n  (delta) => {\n    // …\n  },\n  { after: 'some-task' }\n)\n```\n\n----------------------------------------\n\nTITLE: Transforming Loader Results in Svelte\nDESCRIPTION: Demonstrates how to transform the result of a loader using the useLoader hook in a Svelte component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-loader.mdx#2025-04-22_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useLoader } from '@threlte/core'\n  import { TextureLoader } from 'three'\n\n  const { load } = useLoader(TextureLoader)\n  const texture = load('path/to/texture.png', {\n    transform: (texture) => {\n      // do something with the texture\n      return texture\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Utilizing Custom Box3 for Bounding Box Capture\nDESCRIPTION: Illustrates how to use the `box` prop to supply a custom Box3 instance for bounding box capture prior to scaling. Prerequisites: Three.js, Box3. Inputs: Box3 object. Outputs: Custom bounding box ready for scaling.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/resize.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Box3 } from 'three'\n  const box = new Box3()\n</script>\n\n<Resize {box}>\n  <T.Mesh />\n</Resize>\n\n<T.Box3Helper args={[box]} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Flexbox Layout\nDESCRIPTION: This Svelte code snippet demonstrates using the <Flex> component to create a basic flexbox container with <Box> items.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Flex } from '@threlte/flex'\n  import Plane from './Plane.svelte'\n</script>\n\n<Flex\n  width={100}\n  height={100}\n>\n  <Box>\n    <Plane\n      width={20}\n      height={20}\n    />\n  </Box>\n\n  <Box>\n    <Plane\n      width={20}\n      height={20}\n    />\n  </Box>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Layout Reflow with Sync Event\nDESCRIPTION: Illustrates triggering a layout reflow when content synchronizes, useful for dynamic text or content\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/box.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Box } from '@threlte/flex'\n  import { Text } from '@threlte/extras'\n</script>\n\n<Box>\n  {#snippet children({ reflow })}\n    <Text text=\"Hello World\" onsync={reflow}>\n  {/snippet}\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Basic AudioListener Implementation with Camera in Threlte\nDESCRIPTION: Sets up a basic scene with a PerspectiveCamera containing an AudioListener component. This is the typical setup for most applications that require audio functionality.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/audio-listener.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T, Canvas } from '@threlte/core'\n  import { AudioListener } from '@threlte/extras'\n</script>\n\n<Canvas>\n  <T.PerspectiveCamera\n    makeDefault\n    position={[3, 3, 3]}\n    lookAt={[0, 0, 0]}\n  >\n    <AudioListener />\n  </T.PerspectiveCamera>\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Using AnimatedSpriteMaterial Without Metadata File in Svelte\nDESCRIPTION: Example of using AnimatedSpriteMaterial without a JSON metadata file, requiring manual specification of totalFrames, rows, and columns to define the spritesheet structure.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/animated-sprite-material.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Sprite>\n  <AnimatedSpriteMaterial\n    textureUrl=\"./fire.png\"\n    totalFrames={14}\n    rows={4}\n    columns={4}\n  />\n</T.Sprite>\n```\n\n----------------------------------------\n\nTITLE: Attaching RadialGradientTexture in Svelte\nDESCRIPTION: This code snippet demonstrates how to create a RadialGradientTexture component in Svelte and conditionally attach it to the 'map' property of a parent.  It uses a reactive reference 'texture' to bind to the RadialGradientTexture instance, allowing it to be passed to other components. The `attach` prop is set to false to prevent automatic attachment.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/radial-gradient-texture.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let texture = $state()\n</script>\n\n<RadialGradientTexture\n  attach={false}\n  bind:ref={texture}\n/>\n\n<SomeComponent {texture} />\n```\n\n----------------------------------------\n\nTITLE: Using Sequence Component in Svelte\nDESCRIPTION: This code snippet demonstrates how to implement the `<Sequence>` component along with `<Sheet>` and `<SheetObject>` to build a simple playback controller with interaction capabilities in a Svelte application. It showcases the use of the snippet prop for passing playback control functions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/sequence.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/core'\n  import { Sheet, Sequence, SheetObject } from '@threlte/theatre'\n</script>\n\n<Sheet>\n  <Sequence>\n    {#snippet children({ play })}\n      <SheetObject key=\"Cube\">\n        {#snippet children({ Transform })}\n          <Transform>\n            <T.Mesh onclick={play}>\n              <T.BoxGeometry />\n              <T.MeshStandardMaterial />\n            </T.Mesh>\n          </Transform>\n        {/snippet}\n      </SheetObject>\n    {/snippet}\n  </Sequence>\n</Sheet>\n```\n\n----------------------------------------\n\nTITLE: Creating a Keyed Task with useTask in TypeScript\nDESCRIPTION: Creating a task with a unique key for easier referencing across the application. The key can be any string or symbol value that is unique within its stage.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-task.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  start,\n  stop,\n  started,\n  task: someTask\n} = useTask('some-task', (delta) => {\n  // This function will be executed on every frame\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @threlte/flex Package\nDESCRIPTION: This snippet shows how to install the @threlte/flex package using npm.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @threlte/flex\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of AsciiRenderer in Svelte\nDESCRIPTION: Demonstrates how to use the AsciiRenderer component alongside a Scene component within a Canvas. The wrapping div is set to relative positioning to accommodate the absolutely positioned table element created by AsciiRenderer.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/ascii-renderer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<div>\n  <Canvas>\n    <AsciiRenderer />\n    <Scene />\n  </Canvas>\n</div>\n\n<style>\n  div {\n    position: relative;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Custom Disposal of Three.js Objects in Threlte\nDESCRIPTION: Illustrates how to implement custom disposal logic using the oncreate prop's return function. This allows for manual control over the disposal process of Three.js objects.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/disposing-objects.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n</script>\n\n<T.MeshBasicMaterial\n  oncreate={(ref) => {\n    return () => {\n      // Do your disposal here\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Instantiating SplatLoader with Arguments in Svelte\nDESCRIPTION: Shows how to instantiate a loader that requires constructor arguments using the useLoader hook in a Svelte component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-loader.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useLoader, useThrelte } from '@threlte/core'\n  import { SplatLoader } from '@pmndrs/vanilla'\n\n  const { renderer } = useThrelte()\n\n  const loader = useLoader(SplatLoader, {\n    args: [renderer]\n  })\n  // This resembles the following:\n  // const loader = new SplatLoader(renderer)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Threlte Hook Usage Outside Canvas\nDESCRIPTION: Demonstrates an incorrect app structure where Threlte hooks are used outside the Canvas component, leading to context unavailability.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/app-structure.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Canvas, useTask, T } from '@threlte/core'\n\n  let rotation = 0\n\n  // This won't work, we're not inside <Canvas>\n  useTask((delta) => {\n    rotation += delta\n  })\n</script>\n\n<Canvas>\n  <T.Mesh rotation.y={rotation} />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Triggering Layout Reflow\nDESCRIPTION: This snippet explains how to manually trigger a reflow in the layout using the `<Flex>` and `<Box>` components. It illustrates dynamic changes in layout when adding components or altering properties.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/flex.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Flex, Box } from '@threlte/flex'\n  import { GLTF } from '@threlte/extras'\n</script>\n\n<Flex>\n  {#snippet children({ reflow })}\n    <Box>\n      <GLTF\n        src=\"/model.glb\"\n        onload={() => reflow()}\n      />\n    </Box>\n  {/snippet}\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Configuring Depth Textures in useFBO\nDESCRIPTION: This snippet shows how to configure the depth option in the useFBO hook to assign DepthTexture to the depthTexture property of the render target. It accepts boolean, size object, or DepthTexture instances, providing flexibility in depth rendering. Input: boolean, DepthTexture instance, or size object. Output: Render target with assigned depthTexture property.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-fbo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { size } = useThrelte()\n\nconst target = useFBO({ depth: true })\n\nassert(target.depthTexture.image.width === size.current.width)\nassert(target.depthTexture.image.height === size.current.height)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst depthTexture = new DepthTexture(512, 512)\n\nconst target = useFBO({ depth: depthTexture })\n\nassert(target.depthTexture === depthTexture)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst depth = { width: 512, height: 512 }\n\nconst target = useFBO({ depth })\n\nassert(target.depthTexture.image.width === depth.width)\nassert(target.depthTexture.image.height === depth.height)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst depth = { width: 512 }\n\nconst target = useFBO({ depth })\n\nassert(target.depthTexture.image.width === depth.width)\nassert(target.depthTexture.image.height === 1)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst depth = { height: 512 }\n\nconst target = useFBO({ depth })\n\nassert(target.depthTexture.image.width === 1)\nassert(target.depthTexture.image.height === depth.height)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst depth = {}\n\nconst target = useFBO({ depth })\n\nassert(target.depthTexture.image.width === 1)\nassert(target.depthTexture.image.height === 1)\n```\n\n----------------------------------------\n\nTITLE: Creating a HUD with Scene Component in Svelte\nDESCRIPTION: Demonstrates how to create a HUD component in Svelte, using a separate Scene component for better organization. This approach is recommended as it's similar to creating a Canvas.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/hud.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import Scene from './Scene.svelte'\n</script>\n\n<HUD>\n  <Scene />\n</HUD>\n```\n\n----------------------------------------\n\nTITLE: Using GLTF Loaders in Threlte 8\nDESCRIPTION: Demonstrates how to use separate loader hooks for Draco, KTX2, and Meshopt with useGltf in Threlte 8.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useGltf, useDraco, useKtx2, useMeshopt } from '@threlte/extras'\n\nconst dracoLoader = useDraco()\nconst ktx2Loader = useKtx2()\nconst meshoptDecoder = useMeshopt()\n\nconst gltf = useGltf('./path/to/model.glb', {\n  dracoLoader,\n  ktx2Loader,\n  meshoptDecoder\n})\n```\n\n----------------------------------------\n\nTITLE: Using CubeEnvironment Component in Svelte\nDESCRIPTION: Example usage of the <CubeEnvironment> component to load and assign a cube texture to the scene environment. The component takes props such as urls, isBackground, scene, and texture.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/cube-environment.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<CubeEnvironment\n  urls={[positiveX, negativeX, positiveY, negativeY, positiveZ, negativeZ]}\n  isBackground={false}\n  scene={useThrelte().scene}\n  bind:texture\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining the World Component Structure in Svelte\nDESCRIPTION: This snippet demonstrates how to structure a Svelte component that utilizes the `<World>` component from Rapier, allowing nested components to access the physics context provided by Rapier. It requires imports from both `@threlte/core` and `@threlte/rapier` for setup.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/world.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Canvas } from '@threlte/core'\n  import { World } from '@threlte/rapier'\n  import Scene from './Scene.svelte'\n</script>\n\n<Canvas>\n  <World>\n    <Scene />\n    <!-- Everything is happening inside this component -->\n  </World>\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Custom Ray and Cursor for Controller/Hand - Svelte\nDESCRIPTION: This snippet imports custom ray and cursor components for enhancing the user experience of pointer controls in Svelte. These are embedded within a Controller or Hand component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/pointer-controls.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n\"<script>\\n  import { Hand, Controller } from '@threlte/xr'\\n  import CustomRay from './CustomRay.svelte'\\n  import CustomCursor from './CustomCursor.svelte'\\n</script>\\n\\n<Controller left>\\n  {#snippet pointerRay()}\\n    <CustomRay>\\n  {/snippet}\\n\\n  {#snippet pointerCursor()}\\n    <CustomCursor>\\n  {/snippet}\\n</Controller>\"\n```\n\n----------------------------------------\n\nTITLE: Extracting GLTF and Actions\nDESCRIPTION: This snippet extracts the GLTF model and its associated animation actions using the useGltfAnimations hook. The extracted variables are crucial for binding to the GLTF component and facilitating animation transitions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/animation/Animation Transitions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { gltf, actions } = useGltfAnimations()\n```\n\n----------------------------------------\n\nTITLE: Capturing Cursor Position with Interactivity in Svelte\nDESCRIPTION: This snippet demonstrates how to use Threlte's interactivity plugin to capture cursor position. The cursor position is updated and sent to the CursorLine component as a prop.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/meshline/Cursor Lines.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  const cursorPosition = new Spring<Vector3Tuple>([0, 0, 0])\n  interactivity()\n</script>\n\n<T.Mesh\n  onpointermove={(event) => {\n    cursorPosition = event.point.toArray()\n  }}\n>\n  <!-- ...  -->\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Limiting Render Frames for Static Objects with ContactShadows\nDESCRIPTION: This example shows how to limit the number of frames rendered by the ContactShadows component when dealing with static objects. It sets the frames property to 1, making it render only once.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/contact-shadows.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<ContactShadows frames={1} />\n```\n\n----------------------------------------\n\nTITLE: Extending Default Component Catalogue in Threlte Svelte\nDESCRIPTION: This snippet showcases how to use the 'extend' function to add custom classes to the Threlte component catalogue in a Svelte application.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_21\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { extend, T } from '@threlte/core'\n  import { CustomMesh } from './MyCustomMesh.ts'\n\n  extend({\n    CustomMesh\n  })\n</script>\n\n<T.CustomMesh />\n```\n\n----------------------------------------\n\nTITLE: Using watch utility with a single store in Threlte\nDESCRIPTION: Demonstrates how to watch a single writable store and execute a callback when its value changes. The callback is called immediately with the current value of the store.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/utilities.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = writable(0)\n\nwatch(store, (value) => {\n  console.log(value) // 0\n})\n```\n\n----------------------------------------\n\nTITLE: Script Import for Flex Components and Tailwind Parser\nDESCRIPTION: This snippet shows how to import necessary components and the `tailwindParser` function from `@threlte/flex`. This script setup is essential for using the Flex and Box components with Tailwind-inspired syntax.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/tailwind-parser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Flex, Box, Plane, tailwindParser } from '@threlte/flex'\n</script>\n```\n\n----------------------------------------\n\nTITLE: CLI Command for GLTF Asset Transformation - Bash\nDESCRIPTION: This snippet shows how to use the command-line tool to transform GLTF assets. The command utilizes npx to run the '@threlte/gltf' package, specifying the path to the GLTF model and including optional parameters for processing the model.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/gltf/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @threlte/gltf@latest /path/to/Model.glb [options]\n```\n\n----------------------------------------\n\nTITLE: Conditional Plugin Execution\nDESCRIPTION: Demonstrates how a plugin can selectively apply its logic based on reference type or props, allowing for targeted functionality without affecting unrelated components.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/plugins.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injectPlugin, isInstanceOf } from '@threlte/core'\n\ninjectPlugin('raycast-plugin', (args) => {\n  if (!isInstanceOf(args.ref, 'Object3D') || !('raycast' in args.props)) return\n})\n```\n\n----------------------------------------\n\nTITLE: Handling oncreate Event in RigidBody Component - Svelte\nDESCRIPTION: This snippet demonstrates how to utilize the oncreate event in the RigidBody component. It captures a reference to the created instance and provides cleanup functionality. It is important to ensure that the reference is properly maintained for managing the lifecycle of the RigidBody instance.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<RigidBody\n  oncreate={(ref) => {\n    // ref is the created RigidBody instance\n    return () => {\n      // cleanup function\n    }\n  }}\n>\n  <!-- ... -->\n</RigidBody>\n```\n\n----------------------------------------\n\nTITLE: Initializing createSheetObjectAction Hook in Svelte\nDESCRIPTION: This Svelte code snippet demonstrates how to initialize the `createSheetObjectAction` hook from Theatre.js, allowing for animated properties on a DOM element. Dependencies include the Theatre.js library.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/sheet-object-action.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n// Scene.svelte\n<script lang=\"ts\">\n  import { createSheetObjectAction, useSequence } from '@threlte/theatre'\n\n  const sheetObjectAction = createSheetObjectAction()\n</script>\n\n<div\n\tuse:sheetObjectAction={{\n\t\tkey: 'foo',\n\t\tprops: { width: 230 },\n\t\tcallback: {node, { width }} => {\n\t\t\tnode.style.width = `${width}px`;\n\t\t}\n\t}}\n>\n\tI Am Animated!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Rigid Bodies for Joints in Svelte with Rapier\nDESCRIPTION: This code snippet demonstrates how to define multiple RigidBody components in Svelte, which can be used with various joint types in the Rapier physics engine. Each RigidBody contains a Collider with specified shapes and dimensions, enabling interactions for simulation. The args property is used to define the shape dimensions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/about-joints.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { RigidBody, Collider } from '@threlte/rapier'\n</script>\n\n<!-- A -->\n<RigidBody>\n  <Collider\n    shape=\"cuboid\"\n    args={[1, 1, 1]}\n  />\n</RigidBody>\n\n<!-- B -->\n<RigidBody>\n  <Collider\n    shape=\"cuboid\"\n    args={[1, 1, 1]}\n  />\n</RigidBody>\n\n<!-- C -->\n<RigidBody>\n  <Collider\n    shape=\"cuboid\"\n    args={[1, 1, 1]}\n  />\n</RigidBody>\n```\n\n----------------------------------------\n\nTITLE: Initializing Pointer Controls for Left/Right Hand - Svelte\nDESCRIPTION: This snippet shows how to initialize the pointerControls plugin for either the left or right hand in a Svelte component. It imports the pointerControls function and calls it with the handedness parameter.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/pointer-controls.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n\"<script>\\n  import { pointerControls } from '@threlte/xr'\\n  pointerControls('left' | 'right')\\n</script>\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Hand Tracking in Svelte\nDESCRIPTION: Basic configuration for tracking left and right hands in a WebXR scene using the Hand component\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/hand.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<Hand left />\n<Hand right />\n```\n\n----------------------------------------\n\nTITLE: Creating Plugins in Threlte 8\nDESCRIPTION: Shows the new recommended way to create plugins using injectPlugin, replacing the deprecated createPlugin function.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injectPlugin } from '@threlte/core'\n\nexport const createSomePlugin = (pluginArg: string) => {\n  injectPlugin('some-plugin', () => {\n    // ... Plugin Code\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Signature of useRopeJoint Hook in TypeScript\nDESCRIPTION: This TypeScript signature outlines the structure returned by the `useRopeJoint` hook. The hook provides Writable references to a RopeImpulseJoint and two RigidBody instances, which are crucial for manipulating physics behavior in the simulation. The parameters include anchor positions for each body and the length of the rope.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-rope-joint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n\tjoint: Writable<RopeImpulseJoint>\n\trigidBodyA: Writable<RAPIER.RigidBody>\n\trigidBodyB: Writable<RAPIER.RigidBody>\n} = useRopeJoint(\n\tanchorA,  // Position\n  anchorB,  // Position\n\tlength    // Length of the rope\n)\n```\n\n----------------------------------------\n\nTITLE: Toggle Teleport Controls Dynamically in Svelte\nDESCRIPTION: This snippet illustrates how to enable or disable teleport controls dynamically in runtime by accessing the 'enabled' property, which can be toggled as needed using Svelte's reactive constructs.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/teleport-controls.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { teleportControls } from '@threlte/xr'\n  // \"enabled\" is a currentWritable\n  const { enabled } = teleportControls('left', { enabled: false })\n\n  // At some later time...\n  enabled.set(true)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using observe utility with reactive values and stores in Threlte\nDESCRIPTION: Shows how to observe both reactive state values and stores, executing a callback when specific tracked values change. The callback runs in the next microtask rather than synchronously.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/utilities.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet count = $state(0)\nlet name = $state('John')\nconst iteration = writable(0)\n\nobserve(\n  () => [count, iteration],\n  ([count, iteration]) => {\n    // This callback is only called when `count` or `iteration` changes\n    // and not when `name` changes.\n    console.log(count, iteration, name)\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using useMeshopt Hook for Meshopt Decoding in TypeScript\nDESCRIPTION: This snippet shows how to use the useMeshopt hook to decode compressed glTF files with a custom instance of MeshoptDecoder. It highlights the integration with the useGltf hook for loading models.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-gltf.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useGltf, useMeshopt } from '@threlte/extras'\n\nconst meshoptDecoder = useMeshopt()\nconst gltf = useGltf('/path/to/model.glb', {\n  meshoptDecoder\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Assets with useLoader in Svelte\nDESCRIPTION: Demonstrates how to load multiple assets using an array of paths with the useLoader hook in a Svelte component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-loader.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useLoader } from '@threlte/core'\n  import { TextureLoader } from 'three'\n\n  const { load } = useLoader(TextureLoader)\n  const textures = load(['texture1.png', 'texture2.png'])\n\n  $inspect($textures) // eventually [Texture, Texture]\n</script>\n```\n\n----------------------------------------\n\nTITLE: Export and Restart Capability in Svelte\nDESCRIPTION: This snippet highlights using a component export to manage update tasks in a Svelte environment. It features the ability to restart the task through a bound variable. Dependencies may include Threlte's binding and effect features. Utilizes the 'frames' parameter set to '1' for controlled updates. Expected output is component behavior within Svelte.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/virtual-environment.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let virtualEnvironment = $state()\n\n  $effect(() => {\n    // yourDependencyHere\n    virtualEnvironment?.restart()\n  })\n</script>\n\n<VirtualEnvironment\n  frames={1}\n  bind:this={virtualEnvironment}\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Color Rendering in AsciiRenderer\nDESCRIPTION: Demonstrates how to enable color rendering in AsciiRenderer by setting the options.color prop to true. This will use the corresponding color of the scene for each character, but may slow down performance.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/ascii-renderer.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<AsciiRenderer options={{ color: true }} />\n```\n\n----------------------------------------\n\nTITLE: Multiple AudioListeners with IDs for Directional Audio\nDESCRIPTION: Demonstrates how to set up multiple AudioListener components with specific IDs to connect different Audio components to different listeners. This example creates a left and right ear setup for stereo positioning.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/audio-listener.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T, Canvas } from '@threlte/core'\n  import { Audio, AudioListener } from '@threlte/extras'\n</script>\n\n<Canvas>\n  <T.PerspectiveCamera\n    makeDefault\n    position={[3, 3, 3]}\n    lookAt={[0, 0, 0]}\n  >\n    <AudioListener\n      id=\"left-ear\"\n      position={{ x: -1 }}\n    />\n    <AudioListener\n      id=\"right-ear\"\n      position={{ x: 1 }}\n    />\n  </T.PerspectiveCamera>\n\n  <Audio\n    id=\"left-ear\"\n    source={'audio/left-track.mp3'}\n  />\n  <Audio\n    id=\"right-ear\"\n    source={'audio/right-track.mp3'}\n  />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Specifying Layout Orientation\nDESCRIPTION: This snippet is focused on setting the layout plane (orientation) of the `<Flex>` component. It allows developers to customize how their elements will be arranged in space by selecting a different plane for the layout.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/flex.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<Flex plane=\"yz\">\n  <!-- ... -->\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing onReveal Hook within a Svelte Component\nDESCRIPTION: Integrates the onReveal hook to execute a callback when a Svelte component, potentially wrapped in a Suspense boundary, is revealed. The example loads a model using useGltf and logs a message upon component reveal. It also sets up the component display based on the loaded graphics model. Dependencies include the 'threlte/core' and 'threlte/extras'. The gltf parameter is used to manage the model loading state. The component logs its revealed state to the console. This setup mimics Svelte's own onMount lifecycle behavior.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/onReveal.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { onReveal, useGltf } from '@threlte/extras'\n\n  const gltf = useGltf('model.gltf')\n\n  onReveal(() => {\n    console.log('The component has been revealed')\n  })\n</script>\n\n{#await gltf then { scene }}\n  <T is={scene}>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Centering 3D Text with Align Component\nDESCRIPTION: Illustrates how to center 3D text using the <Align> component in Svelte. The align slot prop is utilized to adjust the alignment of the created text geometry.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/text-3d-geometry.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<Align>\n  {#snippet children({ align })}\n    <T.Mesh>\n      <Text3DGeometry\n        font={'path-to-your-font'}\n        text={`Hello!`}\n        oncreate={align}\n      />\n      <T.MeshStandardMaterial />\n    </T.Mesh>\n  {/snippet}\n</Align>\n```\n\n----------------------------------------\n\nTITLE: Using attach with Object3D in Threlte 8\nDESCRIPTION: Demonstrates how to attach a component to a specific Object3D instance, acting as a portal.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<T\n  is={mesh}\n  attach={object3D}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of meshBounds in Svelte\nDESCRIPTION: This snippet demonstrates how to use the meshBounds function directly in a Threlte Mesh component for raycasting. It outlines the basic integration without any additional performance enhancements.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/mesh-bounds.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\\n  import { meshBounds } from '@threlte/extras'\\n</script>\\n\\n<T.Mesh raycast={meshBounds}>\\n  <T.BoxGeometry />\\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Blocking Teleportation with Teleport Blocker in Svelte\nDESCRIPTION: This snippet registers a mesh as a 'teleportBlocker', used to inhibit teleportation through objects like walls and doors, effectively blocking teleportable areas.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/teleport-controls.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh teleportBlocker>\n  <T.BoxGeometry args={[0.8, 2, 0.1]} />\n  <T.MeshStandardMaterial />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Updating Points for Trailing Effect in TypeScript\nDESCRIPTION: This snippet shows how points are updated to create a trailing effect. The first point is set to the current spring value, and subsequent points are interpolated. The points are then swapped to trigger updates.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/meshline/Cursor Lines.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nuseTask((delta) => {\n  const alpha = 1e-6 ** delta\n  for (let i = 1; i < count; i += 1) {\n    const first = back[i - 1]\n    const second = back[i]\n    second?.lerp(first, alpha)\n  }\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using PerfMonitor Component in Svelte\nDESCRIPTION: This snippet demonstrates how to implement the `<PerfMonitor>` component within a `<Canvas>` component. It specifies the anchor position and the log frequency for performance monitoring.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/perf-monitor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<Canvas>\n  <PerfMonitor\n    anchorX={'right'}\n    logsPerSecond={30}\n  />\n  <Scene />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Defining useJoint Types in TypeScript\nDESCRIPTION: This TypeScript snippet provides the signature for the useJoint hook, specifying the structure of the hook's return values and the types of inputs it expects. It defines a generic type T, which extends either RAPIER.ImpulseJoint or RAPIER.MultiBodyJoint, and specifies that the initializeJoint function takes two rigid bodies and a Rapier context as its parameters.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-joint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n\tjoint: Writable<T>\n\trigidBodyA: Writable<RAPIER.RigidBody>\n\trigidBodyB: Writable<RAPIER.RigidBody>\n} = useJoint<T extends RAPIER.ImpulseJoint | RAPIER.MultiBodyJoint>(\n\tinitializeJoint: (rigidBodyA: RAPIER.RigidBody, rigidBodyB: RAPIER.RigidBody, RapierContext) => T\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Pointer Controls for Both Hands - Svelte\nDESCRIPTION: This code snippet initializes the pointerControls for both the left and right hands, allowing interactions with 3D objects from either hand in the XR environment.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/pointer-controls.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n\"<script>\\n  import { pointerControls } from '@threlte/xr'\\n  pointerControls('left')\\n  pointerControls('right')\\n</script>\"\n```\n\n----------------------------------------\n\nTITLE: Using Sync with MeshBasicMaterial in Svelte\nDESCRIPTION: This Svelte snippet demonstrates the use of the <Sync> component inside a SheetObject to synchronize properties from the parent component. It shows how to apply Sync to various Three.js material properties like color and roughness, and automatically converts specific properties for better compatibility with Theatre.js.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/sync.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<SheetObject>\n  {#snippet children({ Sync })}\n    <T.MeshBasicMaterial>\n      <Sync\n        color\n        roughness\n        rotation\n      />\n    </T.MeshBasicMaterial>\n  {/snippet}\n</SheetObject>\n```\n\n----------------------------------------\n\nTITLE: Implementing Canvas Portal Target in Svelte\nDESCRIPTION: Creates a component to render portal content for a global Canvas setup in SvelteKit applications.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/app-structure.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script\n  lang=\"ts\"\n  module\n>\n  import type { Snippet } from 'svelte'\n  import { SvelteSet } from 'svelte/reactivity'\n  let snippets = new SvelteSet<Snippet>()\n\n  export const addCanvasPortalSnippet = (snippet: Snippet) => {\n    snippets.add(snippet)\n  }\n\n  export const removeCanvasPortalSnippet = (snippet: Snippet) => {\n    snippets.delete(snippet)\n  }\n</script>\n\n{#each snippets as snippet}\n  {@render snippet()}\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Svelte Scene Component with Static State\nDESCRIPTION: This snippet shows a Svelte component (`Scene.svelte`) that imports `Icosahedron`, `Sphere`, and `Box` components. It also introduces the `StaticState` class to manage scene configuration.  A `SceneConfig` class is defined with a `gap` property, and an instance of this class is used to position the objects in the scene based on the value of `gap`.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/static-state.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { StaticState } from '@threlte/studio'\n  import Icosahedron from './Icosahedron.svelte'\n  import Sphere from './Sphere.svelte'\n  import Box from './Box.svelte'\n\n  class SceneConfig extends StaticState {\n    gap = $state(1.5)\n  }\n</script>\n\n<Icosahedron position={[-2, 0, 0]} />\n<Sphere position={[0, 0, 0]} />\n<Box position={[2, 0, 0]} />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Suspended State with Suspense Hook in Svelte\nDESCRIPTION: This code snippet shows how to retrieve the suspended state of the closest <Suspense> boundary using the 'useSuspense' hook. It sets up the state observation feature necessary for debugging or additional handling of the resource suspension states.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-suspense.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  const { suspended } = useSuspense()\n\n  $inspect($suspended)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Theatre.js Project with Svelte\nDESCRIPTION: This Svelte component snippet shows how to set up a Theatre.js Project to work with Sheets and Sequences. Dependencies include the Theatre.js library and configuration data in JSON format.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/sheet-object-action.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n// App.svelte\n<script lang=\"ts\">\n  import { Project, Sheet, Sequence, Studio } from '@threlte/theatre'\n\n  import Scene from './Scene.svelte'\n  import state from './state.json'\n</script>\n\n// App.svelte\n<Project config={{ state }}>\n  <Sheet>\n    <Sequence />\n    <Scene />\n  </Sheet>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Forwarding Event Handlers in Threlte 8\nDESCRIPTION: Shows how to forward event handlers using rest props instead of forwardEventHandlers in Threlte 8.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let { ...rest } = $props()\n</script>\n\n<T.Mesh {...rest}>\n  <T.BoxGeometry />\n  <T.MeshBasicMaterial />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Monitoring Connection Status\nDESCRIPTION: This example demonstrates how to monitor the connection status of a gamepad using the `connected` property, which is a `currentWritable` store. It logs a message to the console whenever the connection status changes.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-gamepad.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useGamepad } from '@threlte/extras'\n\n  const gamepad = useGamepad()\n  const { connected } = gamepad\n\n  $: console.log(`A gamepad ${$connected ? 'connected' : 'disconnected'}!`)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing the Threlte Scheduler in Typescript\nDESCRIPTION: This snippet shows how to access the Threlte scheduler instance using the `useThrelte` hook. The scheduler is responsible for managing and executing stages and tasks within a Threlte application.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/scheduling-tasks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { scheduler } = useThrelte()\n```\n\n----------------------------------------\n\nTITLE: Creating a ClassParser to Handle Flexbox Class Names\nDESCRIPTION: This TypeScript snippet imports a helper function to create a ClassParser that maps predefined class names to corresponding flexbox properties. It takes a string of class names, splits them, and updates the properties object based on recognized class names, enabling dynamic styling for container and item classes in flexbox layout.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/create-class-parser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClassParser } from '@threlte/flex'\n\nconst classParser = createClassParser((string, props) => {\n  const classNames = string.split(' ')\n  for (const className of classNames) {\n    switch (className) {\n      case 'container':\n        props.flexDirection = 'Row'\n        props.justifyContent = 'Center'\n        props.alignItems = 'Stretch'\n        props.gap = 10\n        props.padding = 10\n        break\n      case 'item':\n        props.width = 'auto'\n        props.height = 'auto'\n        props.flex = 1\n    }\n  }\n  return props\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Geometry with Threlte Grid Component in Svelte\nDESCRIPTION: This snippet demonstrates how to use custom geometry with the <Grid> component in Threlte. It shows inserting a BoxGeometry into the Grid's slot, which can be used to create custom terrain-like effects.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/grid.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<Grid>\n  <T.BoxGeometry />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Start and Stop Rendering HTML Component in Svelte\nDESCRIPTION: This example shows how to start and stop the rendering of the HTML component based on a state variable, using the startRendering and stopRendering methods.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/html.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let html = $state()\n\n  // turn this on and off in accordance with your application\n  let renderWhileTrue = $state(false)\n\n  $effect(() => {\n    if (html !== undefined) {\n      if (renderWhileTrue) {\n        html.startRendering()\n        // always stop rendering if it was started\n        return () => {\n          html.stopRendering()\n        }\n      }\n    }\n  })\n</script>\n\n<HTML\n  autoRender={false}\n  bind:this={html}\n>\n  <h1>Hello World</h1>\n</HTML>\n```\n\n----------------------------------------\n\nTITLE: Using CSS Classes with ClassParser\nDESCRIPTION: The snippet demonstrates how to utilize a ClassParser with the `<Flex>` component to resolve Yoga Node Props based on passed CSS classes, showcasing flexibility in layout definition using CSS syntaxes.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/flex.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Flex, tailwindParser } from '@threlte/flex'\n</script>\n\n<Flex classParser={tailwindParser}>\n  <!-- ... -->\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Attaching LinearGradientTexture in Svelte\nDESCRIPTION: This code snippet demonstrates how to attach the `<LinearGradientTexture>` component in a Svelte component.  It binds a reference to the texture, disables automatic attachment to the parent's `map` property, and uses the texture in another component. The texture can then be utilized within `SomeComponent`.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/linear-gradient-texture.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let texture = $state()\n</script>\n\n<LinearGradientTexture\n  attach={false}\n  bind:ref={texture}\n/>\n\n<SomeComponent {texture} />\n```\n\n----------------------------------------\n\nTITLE: Installing Threlte Studio via npm\nDESCRIPTION: Installs the Threlte Studio package using npm. This is the first step to set up the Threlte Studio environment. Ensure you have Node.js and npm installed before executing this command.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @threlte/studio\n```\n\n----------------------------------------\n\nTITLE: Using Threlte Studio Extension in Svelte\nDESCRIPTION: This Svelte code demonstrates how to integrate a custom extension into a Threlte scene within the Studio. It imports the `Studio` component, the `Canvas` component, and the custom extension component, and passes the extension to the `Studio` component's `extensions` prop.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/authoring-extensions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Canvas } from '@threlte/core'\n  import { Studio } from '@threlte/studio'\n  import MyExtension from './MyExtension.svelte'\n</script>\n\n<Canvas>\n  <Studio extensions={[MyExtension]}>\n    <Scene />\n  </Studio>\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Setting up Terrain Interactivity with Threlte\nDESCRIPTION: This code snippet sets up click interactivity for a terrain mesh in Svelte using Threlte's interactivity plugin. The configuration allows triggering shader animations on user clicks by utilizing the point of interaction provided by the plugin. Required dependency is the Threlte interactivity plugin. It processes click events and logs the click point. It requires a geometry and Threlte plugins.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/shaders/Interactive shader.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\\n  import { interactivity } from '@threlte/extras'\\n  interactivity()\\n</script>\\n\\n<T.Mesh\\n  {geometry}\\n  rotation.x={DEG2RAD * -90}\\n  onclick={({ point }) => {\\n    console.log('user clicked on', point)\\n  }}>\\n  <T.ShaderMaterial\\n    {fragmentShader}\\n    {vertexShader}\\n  />\\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Using Auto-Alignment with Dynamic Content\nDESCRIPTION: Demonstrates the auto property which makes the <Align> component recalculate alignment when child objects mount or unmount. This is useful for dynamic content that may change during the application lifecycle.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/align.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { Align } from '@threlte/extras'\n\n  export let showOtherCube = true\n</script>\n\n<Align auto>\n  <T.Mesh position={[-1, 0, 0]}>\n    <T.BoxGeometry />\n    <T.MeshBasicMaterial />\n\n  {#if showOtherCube}\n    <T.Mesh position={[1, 0, -2]}>\n      <T.BoxGeometry args={[1, 5, 2]} />\n      <T.MeshBasicMaterial />\n    </T.Mesh>\n  {/if}\n</Align>\n```\n\n----------------------------------------\n\nTITLE: Content Sizing with Width and Height Snippet Props\nDESCRIPTION: Shows how to dynamically scale a 3D mesh using computed dimensions from the Box component's snippet props\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/box.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Box>\n  {#snippet children({ width, height })}\n    <T.Mesh\n      scale.x={width}\n      scale.y={height}\n    />\n  {/snippet}\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Using Fixed Impulse Joint Hook in Svelte\nDESCRIPTION: This snippet showcases the usage of the 'useFixedJoint' hook from the '@threlte/rapier' library to create a fixed impulse joint between two rigid bodies. It imports the necessary components and sets up the joint with specified positions for each rigid body.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-fixed-joint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useFixedJoint, RigidBody, Collider } from '@threlte/rapier'\n\n  const { joint, rigidBodyA, rigidBodyB } = useFixedJoint({ x: 1 }, {}, { x: -1 }, {})\n</script>\n\n<RigidBody bind:rigidBody={$rigidBodyA}>\n  <Collider\n    shape=\"cuboid\"\n    args={[1, 1, 1]}\n  />\n</RigidBody>\n\n<RigidBody bind:rigidBody={$rigidBodyB}>\n  <Collider\n    shape=\"cuboid\"\n    args={[1, 1, 1]}\n  />\n</RigidBody>\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Stages in Typescript\nDESCRIPTION: This code snippet demonstrates how to access the default stages, `mainStage` and `renderStage`, in a Threlte application using the `useThrelte` hook. These stages are automatically created and managed by Threlte.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/scheduling-tasks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { mainStage, renderStage } = useThrelte()\n```\n\n----------------------------------------\n\nTITLE: Assigning Nodes to MeshPhysicalNodeMaterial in Threlte\nDESCRIPTION: Shows how to directly assign nodes to a MeshPhysicalNodeMaterial using the outputNode and shadowNode props in Threlte.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/webgpu.mdx#2025-04-22_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<T.MeshPhysicalNodeMaterial\n  outputNode={Fn(([arg1, arg2]) => {\n    /* ... */\n  })(arg1, arg2)}\n  shadowNode={Fn(([arg1, arg2]) => {\n    /* ... */\n  })(arg2, arg2)}\n/>\n```\n\n----------------------------------------\n\nTITLE: Getting a namespaced user context in Svelte\nDESCRIPTION: Shows how to retrieve a specific namespace from the user context store. When a namespace is provided, the hook returns a derived store containing only that namespace's data.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-threlte-user-context.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useThrelteUserContext } from '@threlte/core'\n\n  const ctx = useThrelteUserContext('some-context')\n  console.log($ctx) // -> { foo: 'bar' }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using onSuspend Hook in Svelte Application\nDESCRIPTION: This code snippet demonstrates how to use the onSuspend hook to log a message when a component is suspended within a <Suspense> boundary. It imports necessary functions from '@threlte/core' and '@threlte/extras'. The primary function useGltf loads a 3D model, and onSuspend sets up a callback for suspension. Suspense boundaries are required for the callback execution.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/onSuspend.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { onSuspend, useGltf } from '@threlte/extras'\n\n  const gltf = useGltf('model.gltf')\n\n  onSuspend(() => {\n    console.log('The component has been suspended')\n  })\n</script>\n\n{#await gltf then { scene }}\n  <T is={scene}>\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Update Interactivity Target at Runtime - Svelte\nDESCRIPTION: Illustrates how to use the `target` store returned by the interactivity plugin to dynamically update the event handling target. Enhances flexibility in applications where event targets may change over time.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/interactivity.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { interactivity } from '@threlte/extras'\n\n  const { target } = interactivity()\n\n  $effect(() => {\n    target.set(document)\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Mixing Color Representations in RadialGradientTexture\nDESCRIPTION: This code snippet demonstrates the versatility of the `stops` prop by mixing different color representations within the same gradient. It utilizes color names ('red'), hexadecimal values (0xff_00_00, '#ff0000'), rgb strings ('rgb(255, 0, 0)'), and Three.js Color objects. This highlights how the component can handle various color formats for gradient stops.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/radial-gradient-texture.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<RadialGradientTexture\n  stops={[\n    { color: 'red', offset: 0 },\n    { color: 0xff_00_00, offset: 0.25 },\n    { color: 'rgb(255, 0, 0)', offset: 0.5 },\n    { color: '#ff0000', offset: 0.75 },\n    { color: new Color(new Color(new Color())).set(1, 0, 0), offset: 1 }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Transformations in Svelte with Threlte Components\nDESCRIPTION: This snippet shows the transition from using transform props in collision and physics components to wrapping them in a `<T.Group>` for applying transformations. It exemplifies the new approach of structuring components in Threlte to enhance clarity and functional separation.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_23\n\nLANGUAGE: svelte\nCODE:\n```\n<Collider\n  position={[0, 1, 0]}\n  rotation={[0, 45 * DEG2RAD, 0]}\n>\n  <T.Mesh>\n    <T.BoxGeometry />\n    <T.MeshStandardMaterial />\n  </T.Mesh>\n</Collider>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Group\n  position={[0, 1, 0]}\n  rotation={[0, 45 * DEG2RAD, 0]}\n>\n  <Collider>\n    <T.Mesh>\n      <T.BoxGeometry />\n      <T.MeshStandardMaterial />\n    </T.Mesh>\n  </Collider>\n</T.Group>\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Plugin for External Use\nDESCRIPTION: Demonstrates how to create a named plugin that can be exported and used elsewhere in an application, allowing for modular plugin architecture.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/plugins.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPlugin } from '@threlte/core'\n\nexport const layersPlugin = createPlugin('layers', () => {\n  // ... Plugin Code\n})\n```\n\n----------------------------------------\n\nTITLE: Attaching Object3D Instance in Threlte Svelte\nDESCRIPTION: This snippet shows how to attach a direct Object3D instance to a parent object using the 'attach' prop, providing a mechanism for manual attachment processes in Threlte Svelte.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<T\n  is={Mesh}\n  attach={otherObject}\n/>\n```\n\n----------------------------------------\n\nTITLE: Manual Update of CubeCamera Using Children Snippet in Svelte\nDESCRIPTION: Demonstrates how to manually update the CubeCamera using the update function provided through the children snippet.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/cube-camera.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<CubeCamera frames={0}>\n  {#snippet children({ update })}\n    <T.Mesh oncreate{update}>\n      <T.BoxGeometry />\n    </T.Mesh>\n  {/snippet}\n</CubeCamera>\n```\n\n----------------------------------------\n\nTITLE: Using attach={false} in Threlte 8\nDESCRIPTION: Shows how to create a 'dangling' component that is not automatically attached to the parent object.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<T\n  is={mesh}\n  attach={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Revolute Joint with Svelte Rapier\nDESCRIPTION: Demonstrates how to create a revolute joint between two rigid bodies using useRevoluteJoint hook. Sets up two cuboid colliders and establishes a joint connection with specified anchors and optional rotation axis.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-revolute-joint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useRevoluteJoint, RigidBody, Collider } from '@threlte/rapier'\n\n  const { joint, rigidBodyA, rigidBodyB } = useRevoluteJoint({ x: 1 }, {}, { y: 1 })\n</script>\n\n<RigidBody bind:rigidBody={$rigidBodyA}>\n  <Collider\n    shape=\"cuboid\"\n    args={[1, 1, 1]}\n  />\n</RigidBody>\n\n<RigidBody bind:rigidBody={$rigidBodyB}>\n  <Collider\n    shape=\"cuboid\"\n    args={[1, 1, 1]}\n  />\n</RigidBody>\n```\n\n----------------------------------------\n\nTITLE: Creating an Anonymous Task in Typescript\nDESCRIPTION: This code snippet showcases the creation of an anonymous task using the `useTask` hook.  The provided function will be executed on every frame, receiving the delta time since the last frame as its argument. The task is automatically started and added to the `mainStage` without any explicit dependencies.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/scheduling-tasks.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { start, stop, started, task } = useTask((delta) => {\n  // This function will be executed on every frame\n})\n```\n\n----------------------------------------\n\nTITLE: Manual Cube Camera Update in Svelte\nDESCRIPTION: An example of manually invoking cube camera updates in a Svelte <VirtualEnvironment> component using the 'update' function. The snippet showcases how to prevent automatic updates by setting 'frames' to 0. Dependencies potentially include Threlte scene and camera components. Inputs involve binding the component and optional scene objects. Output is controlled rendering behavior.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/virtual-environment.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let virtualEnvironment = $state()\n  $effect(() => {\n    // …\n    virtualEnvironment?.update()\n  })\n</script>\n\n<VirtualEnvironment\n  frames={0}\n  bind:this={virtualEnvironment}\n>\n  <!-- Your scene contents here -->\n</VirtualEnvironment>\n```\n\n----------------------------------------\n\nTITLE: Attaching Nested Object Properties in Threlte Svelte\nDESCRIPTION: This code snippet illustrates how to attach a THREE.OrthographicCamera to a nested parent property (shadow.camera) of a THREE.DirectionalLight using Threlte in Svelte.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<T.DirectionalLight>\n  <!--\n    Attaches an instance of a THREE.OrthographicCamera\n    to the property camera of the property shadow of the\n    parent THREE.DirectionalLight\n  -->\n  <T.OrthographicCamera\n    args={[-1, 1, 1, -1, 0.1, 100]}\n    attach=\"shadow.camera\"\n  />\n</T.DirectionalLight>\n```\n\n----------------------------------------\n\nTITLE: Loading Theatre.js Project State in Threlte with Svelte\nDESCRIPTION: This snippet illustrates how to load a previously saved state into a Theatre.js project using Threlte with Svelte. By utilizing a state JSON file exported from the Theatre.js Studio, the Project is initialized with this configuration, enabling the App Component to automatically apply these settings upon finishing loading. Users need to ensure the presence of the JSON state file to successfully initialize the project state.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/project.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\\n  import { Project, Sheet, SheetObject } from '@threlte/theatre'\\n  import state from '.\\/state.json'\\n<\\/script>\\n\\n<!--\\n\\tWill create a project with the name \\\"Project A\\\",\\n\\tload its state and mount all children when\\n\\tfinished loading\\n-->\\n<Project\\n  config={{ state }}\\n  name=\\\"Project A\\\"\\n>\\n  <Sheet\\n    name=\\\"Sheet A\\\"\\n    autoplay\\n  >\\n    <SheetObject key=\\\"ObjectA\\\" \\/>\\n  <\\/Sheet>\\n<\\/Project>\n```\n\n----------------------------------------\n\nTITLE: Manual Item Ordering in Flex Container\nDESCRIPTION: Shows how to manually control the rendering order of flex items using the order prop\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/box.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Box } from '@threlte/flex'\n</script>\n\n<Flex\n  width={100}\n  height={100}\n>\n  <Box order={2} />\n  <Box order={1} />\n  <Box order={3} />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Extending Prop Types in Threlte with TypeScript\nDESCRIPTION: Demonstrates how to extend Threlte component prop types by defining the `Threlte.UserProps` type in TypeScript, ensuring type-safe props for interactive components. This is especially useful in projects that use TypeScript for Svelte development.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/interactivity.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { InteractivityProps } from '@threlte/extras'\n\ndeclare global {\n  namespace Threlte {\n    interface UserProps extends InteractivityProps {}\n  }\n}\n\nexport {}\n```\n\n----------------------------------------\n\nTITLE: Using Type-Safe Plugin Props in a Component\nDESCRIPTION: Example of using type-safe custom plugin props in a Svelte component. The TypeScript compiler will validate the prop values according to the defined types.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/plugins.mdx#2025-04-22_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/core'\n</script>\n\n<!-- This is now type safe -->\n<T.Mesh lookAt={[0, 10, 0]} />\n\n<!-- This will throw an error -->\n<T.Mesh lookAt=\"this object please\" />\n```\n\n----------------------------------------\n\nTITLE: Injecting a Named Plugin\nDESCRIPTION: Shows how to import and inject a named plugin that was created elsewhere, simplifying plugin management across components.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/plugins.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// somewhere else, e.g. in a component\n\nimport { injectPlugin } from '@threlte/core'\nimport { layersPlugin } from '$plugins'\n\ninjectPlugin(layersPlugin)\n```\n\n----------------------------------------\n\nTITLE: Comparing Dot-Notation and 'is' Property in Svelte\nDESCRIPTION: Shows the equivalence between using dot-notation and the 'is' property for creating Three.js objects in Svelte components.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { Mesh, BoxGeometry, MeshBasicMaterial } from 'three'\n</script>\n\n<T is={Mesh}>\n  <T is={BoxGeometry} />\n  <T is={MeshBasicMaterial} />\n</T>\n```\n\n----------------------------------------\n\nTITLE: Automatic Invalidation Example in Svelte\nDESCRIPTION: Demonstrates how Threlte automatically invalidates the current frame when component props change, using a mesh position example.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/render-modes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n\n  let x = 0\n\n  const move = () => {\n    x += 1\n  }\n</script>\n\n<T.Mesh position.x={x} />\n```\n\n----------------------------------------\n\nTITLE: Combining Pointer and Teleport Controls - Svelte\nDESCRIPTION: This snippet shows the use of both pointerControls and teleportControls together, demonstrating that they can coexist without conflicts in user inputs.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/pointer-controls.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n\"<script>\\n  import { pointerControls, teleportControls } from '@threlte/xr'\\n  teleportControls('left')\\n  pointerControls('right')\\n</script>\"\n```\n\n----------------------------------------\n\nTITLE: Using useTask for Automatic Invalidation in TypeScript\nDESCRIPTION: Demonstrates how to use the useTask hook for automatic frame invalidation on every frame, useful for animations.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/render-modes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTask } from '@threlte/core'\n\nuseTask(() => {\n  // useTask will automatically invalidate the current\n  // frame, so you don't have to do it manually.\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Conditional Stage with Custom Callback\nDESCRIPTION: Example of creating a stage with a custom callback function that controls when tasks are executed. This allows for conditional execution of tasks based on application state.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-stage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { renderStage } = useThrelte()\n\nconst conditionalStage = useStage('after-render', {\n  after: renderStage,\n  callback: (delta, runTasks) => {\n    // This callback will be called every frame. The first argument is the time elapsed\n    // since the last frame. The second argument is a function that will run all the\n    // tasks of the stage. You can use it to run the tasks only when needed (e.g. when\n    // a condition is met) or to run them multiple times. If a number is passed as the\n    // first argument to runTasks, the tasks will receive that as the delta.\n    if (condition) {\n      runTasks()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining PortalTarget in Svelte\nDESCRIPTION: This code snippet demonstrates how to define a PortalTarget component within a Svelte component. It creates a portal target with the id \"trail\" inside a T.Object3D.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/portal-target.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n\"<T.Object3D>\\n  <PortalTarget id=\\\"trail\\\" />\\n</T.Object3D>\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Attachment in Threlte Svelte\nDESCRIPTION: This code illustrates how to disable the automatic attachment of an object in Threlte by setting the 'attach' prop to false, allowing for manual attachment instead.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<T\n  is={Mesh}\n  attach={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Extending Threlte's T Component with Specific WebGPU Imports\nDESCRIPTION: Demonstrates how to extend Threlte's T component with specific imports from three/webgpu, allowing the use of custom component tags.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/webgpu.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import Scene from './Scene.svelte'\n  import { Canvas, extend } from '@threlte/core'\n  import { WebGPURenderer, MeshPhysicalNodeMaterial } from 'three/webgpu'\n\n  extend({ MeshPhysicalNodeMaterial })\n</script>\n\n<Canvas\n  createRenderer={(canvas) => {\n    return new WebGPURenderer({\n      canvas,\n      antialias: true,\n      forceWebGL: false\n    })\n  }}\n>\n  <Scene />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scene Component for Postprocessing in Threlte\nDESCRIPTION: This component sets up the screen-quad mesh without frustum culling, attaches it to a secondary scene, and uses a custom render task. It also updates shader uniforms based on canvas size.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/postprocessing/ScreenQuad.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Svelte\nCODE:\n```\n<T.Mesh attach={secondary.scene}>\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listeners\nDESCRIPTION: This code demonstrates how to attach event listeners to buttons, joysticks, and the gamepad itself. It includes examples of unsubscribing from events and handling different event types.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-gamepad.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useTask } from '@threlte/core'\n  import { useGamepad } from '@threlte/extras'\n\n  const gamepad = useGamepad()\n\n  const off = gamepad.leftTrigger.on('down', (event) => {\n    console.log('The left trigger has just been pressed!')\n    // Unsubscribe from the event after it has fired once.\n    off()\n  })\n\n  gamepad.leftStick.on('change', (event) => {\n    console.log(`Left stick moved: ${event.value.x}, ${event.value.y}`)\n  })\n\n  gamepad.on('press', (event) => {\n    console.log(`A ${event.type} event on ${event.target} occurred: ${event.value}`)\n  })\n\n  const onPress = () => {\n    console.log('A button was pressed!')\n  }\n  gamepad.on('press', onPress)\n  // Some time later...\n  gamepad.off('press', onPress)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Applying Type-Safe Transitions in Threlte Components\nDESCRIPTION: This snippet demonstrates applying a transition to a Threlte component in a TypeScript environment, ensuring type-safety for transition props through previously extended prop types.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/transitions.mdx#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { transitions } from '@threlte/extras'\n  transitions()\n</script>\n\n<T.Mesh\n  transition={scale(400)}\n  onintrostart={() => console.log('intro started')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Extending Threlte Types for Custom Plugin Props\nDESCRIPTION: Demonstrates how to extend the Threlte namespace to add type definitions for custom plugin props, which will be available in all <T> components throughout the application.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/plugins.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare global {\n  namespace App {\n    // interface Error {}\n    // interface Locals {}\n    // interface PageData {}\n    // interface PageState {}\n    // interface Platform {}\n  }\n\n  namespace Threlte {\n    interface UserProps {\n      lookAt?: [number, number, number]\n    }\n  }\n}\n\nexport {}\n```\n\n----------------------------------------\n\nTITLE: TypeScript-Enhanced Tile Component\nDESCRIPTION: Final implementation of the Tile component with TypeScript support, including ref binding and proper type definitions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/custom-abstractions.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/threlte'\n  import { MathUtils } from 'three'\n  import type { TileProps } from './types'\n\n  let { children, ref = $bindable(), ...props }: TileProps = $props()\n</script>\n\n<T.Group\n  {...props}\n  bind:ref\n>\n  <!-- 2x2 Floor -->\n  <T.Mesh rotation.x={-90 * MathUtils.DEG2RAD}>\n    <T.PlaneGeometry args={[2, 2]} />\n    <T.MeshStandardMaterial />\n  </T.Mesh>\n\n  {@render children({ ref })}\n</T.Group>\n```\n\n----------------------------------------\n\nTITLE: Specifying Gamepad Index\nDESCRIPTION: This code shows how to specify the index of the gamepad to use when multiple gamepads are connected. By providing an index in the options object, you can target a specific gamepad.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-gamepad.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useGamepad } from '@threlte/extras'\n\n  const gamepad1 = useGamepad({ index: 0 })\n  const gamepad2 = useGamepad({ index: 1 })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Task with Before and After Dependencies in Typescript\nDESCRIPTION: This snippet shows how to create a task with both `before` and `after` dependencies, specifying that it should execute after `someTask` and before `someOtherTask`.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/scheduling-tasks.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Execute a task after a certain task but before another one\nuseTask(\n  (delta) => {\n    // …\n  },\n  { after: someTask, before: someOtherTask }\n)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Enable/Disable Pointer Controls - Svelte\nDESCRIPTION: This snippet demonstrates how to dynamically enable or disable the pointer controls for a given hand. It initializes pointer controls with a writable property to manage the enabled state.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/pointer-controls.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n\"<script>\\n  import { pointerControls } from '@threlte/xr'\\n  // 'enabled' is a currentWritable\\n  const { enabled } = pointerControls('left', { enabled: false })\\n\\n  // At some later time...\\n  enabled.set(true)\\n</script>\"\n```\n\n----------------------------------------\n\nTITLE: Manual Invalidation with useTask in TypeScript\nDESCRIPTION: Shows how to manually invalidate the current frame from within a task using the invalidate function and setting autoInvalidate to false.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/render-modes.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTask, useThrelte } from '@threlte/core'\n\nconst { invalidate } = useThrelte()\n\nuseTask(\n  () => {\n    // Because `autoInvalidate` is set to `false`, the current\n    // frame will not be invalidated automatically and you can\n    // conditionally invalidate the current frame.\n    invalidate()\n  },\n  { autoInvalidate: false }\n)\n```\n\n----------------------------------------\n\nTITLE: Using Controller with Grip and Target Ray Spaces\nDESCRIPTION: This snippet extends the use of the `<Controller>` component by embedding additional mesh elements within specific spaces (grip space and target ray space). It utilizes the Svelte syntax for providing multiple unique renderings effectively.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/controller.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<Controller left>\n  {#snippet grip()}\n    <T.Mesh>\n      <T.IcosahedronGeometry args={[0.2]} />\n      <T.MeshStandardMaterial color=\"hotpink\" />\n    </T.Mesh>\n  {/snippet}\n\n  {#snippet targetRay()}\n    <T.Mesh>\n      <T.IcosahedronGeometry args={[0.2]} />\n      <T.MeshStandardMaterial color=\"orange\" />\n    </T.Mesh>\n  {/snippet}\n</Controller>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Component Catalogue Types in TypeScript\nDESCRIPTION: This code defines a TypeScript type for extending the defaults of the component catalogue in Threlte, ensuring custom components are strongly typed for TypeScript-based applications.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { UserCatalogue } from '@threlte/core'\n\ndeclare global {\n  namespace App {\n    // interface Error {}\n    // interface Locals {}\n    // interface PageData {}\n    // interface PageState {}\n    // interface Platform {}\n  }\n\n  namespace Threlte {\n    interface UserCatalogue {\n      CustomMesh: typeof CustomMesh\n    }\n  }\n}\n\nexport {}\n```\n\n----------------------------------------\n\nTITLE: Multiple InstancedMesh Components with IDs in Svelte\nDESCRIPTION: Demonstrates the use of multiple <InstancedMesh> components with unique IDs, allowing for complex nested structures and specific instance referencing.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/instanced-mesh.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<InstancedMesh id=\"tree\">\n  <T is={treeGeometry} />\n  <T.MeshStandardMaterial map={treeTexture} />\n\n  <InstancedMesh id=\"leaf\">\n    <T is={leafGeometry} />\n    <T.MeshStandardMaterial map={leafTexture} />\n\n    <T.Group position.x={1}>\n      <Instance id=\"tree\" /> // Instance of InstancedMesh with id=\"tree\"\n      <Instance id=\"leaf\" /> // Instance of InstancedMesh with id=\"leaf\"\n    </T.Group>\n\n    <T.Group position.x={-2}>\n      <Instance id=\"tree\" />\n      <Instance id=\"leaf\" />\n    </T.Group>\n  </InstancedMesh>\n</InstancedMesh>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of CssObject Component in Threlte Scene\nDESCRIPTION: Demonstrates how to use the CssObject component to position HTML content in 3D space with a Svelte component while also adding 3D geometry through the 'three' slot for visual reference.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/renderers/CSS2DRenderer Overlay.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<CssObject\n  position={[-1, 2, 1]}\n  center={[-0.2, 0.5]}\n>\n  <CounterLabel label=\"Hello\" />\n\n  <T.Mesh slot=\"three\">\n    <T.SphereGeometry args={[0.25]} />\n    <T.MeshStandardMaterial color=\"#4F6FF6\" />\n  </T.Mesh>\n</CssObject>\n```\n\n----------------------------------------\n\nTITLE: Revolute Joint Hook Type Signature\nDESCRIPTION: Defines the TypeScript signature for the useRevoluteJoint hook, specifying input parameters for anchor positions, rotation axis, and optional joint limits. Returns writable stores for the joint and associated rigid bodies.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-revolute-joint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n\tjoint: Writable<RevoluteImpulseJoint>\n\trigidBodyA: Writable<RAPIER.RigidBody>\n\trigidBodyB: Writable<RAPIER.RigidBody>\n} = useRevoluteJoint(\n\tanchorA,  // Position\n  anchorB,  // Position\n  axis,     // Rotation\n  limits    // [min, max] | undefined\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Static State Class in Typescript\nDESCRIPTION: This snippet demonstrates how to extend the `StaticState` class from `@threlte/studio` to create a `SceneConfig` class.  It defines several reactive properties using `$state`, including `directionalLightIntensity`, `ambientLightIntensity`, `color`, `opacity`, and `showBox`.  JSDoc tags are used to specify UI modifiers such as `@min`, `@max`, and `@step` for each property, which control how the properties are displayed and manipulated in the Studio UI.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/static-state.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SceneConfig extends StaticState {\n  /**\n   * @min 0\n   * @max 10\n   * @step 0.1\n   */\n  directionalLightIntensity = $state(3.1)\n  /**\n   * @min 0\n   * @max 1\n   */\n  ambientLightIntensity = $state(0.13)\n  color = $state('#fe3d00')\n  /**\n   * @min 0\n   * @max 1\n   */\n  opacity = $state(1)\n  showBox = $state(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Extended WebGPU Components in Threlte Scene\nDESCRIPTION: Shows how to use the extended WebGPU components in a Threlte scene after extending the T component catalogue.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/webgpu.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n</script>\n\n<T.Mesh>\n  <T.BoxGeometry />\n  <T.MeshPhysicalNodeMaterial />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Types of Collision Groups Functions in TypeScript\nDESCRIPTION: This TypeScript snippet defines the types for the functions `registerColliders` and `removeColliders`, which are crucial for managing the collision groups associated with colliders. It specifies the expected parameter types that these functions accept.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-collision-groups.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  registerColliders, // (colliders: RAPIER.Collider[]) => void\n  removeColliders // (colliders: RAPIER.Collider[]) => void\n} = useCollisionGroups()\n```\n\n----------------------------------------\n\nTITLE: Event Data Type Definition - TypeScript\nDESCRIPTION: Defines the TypeScript type `Event` used for handling intersections and event details in the interactivity plugin. It includes keys for intersection lists, event objects, and native event metadata necessary for managing 3D event handling.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/interactivity.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Event = THREE.Intersection & {\n  intersections: THREE.Intersection[] // The first intersection of each intersected object\n  object: THREE.Object3D // The object that was actually hit\n  eventObject: THREE.Object3D // The object that registered the event\n  camera: THREE.Camera // The camera used for raycasting\n  delta: THREE.Vector2 //  Distance between mouse down and mouse up event in pixels\n  nativeEvent: MouseEvent | PointerEvent | WheelEvent // The native browser event\n  pointer: Vector2 // The pointer position in normalized device coordinates\n  ray: THREE.Ray // The ray used for raycasting\n  stopPropagation: () => void // Function to stop propagation of the event\n  stopped: boolean // Whether the event propagation has been stopped\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Component with Occlusion in Svelte\nDESCRIPTION: This snippet demonstrates how to use the HTML component with occlusion, allowing it to be hidden behind geometry in the scene.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/html.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { HTML } from '@threlte/extras'\n</script>\n\n<HTML\n  transform\n  occlude\n>\n  <h1>Hello World</h1>\n</HTML>\n```\n\n----------------------------------------\n\nTITLE: Customizing Hit Test Source in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to customize the source of the hit test in the 'useHitTest' hook by allowing options to choose between different input sources like 'leftInput' or 'rightInput'. It showcases how to call the hook with an optional configuration.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/use-hit-test.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseHitTest(\\n  (hitMatrix, hit) => {\\n    // Perform a hit test from the left controller or hand.\\n  },\\n  { source: 'leftInput' }\\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Render Mode via Canvas Prop in Svelte\nDESCRIPTION: Demonstrates how to set the render mode using the renderMode prop on the Canvas component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/render-modes.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<Canvas renderMode=\"on-demand\" />\n```\n\n----------------------------------------\n\nTITLE: Set Single Update Frame in Svelte\nDESCRIPTION: This snippet demonstrates how to initialize a <VirtualEnvironment> component in Svelte to perform a single render update. Dependencies may include Threlte components (e.g., T.Mesh, T.PlaneGeometry). Key parameters: 'frames' set to 1 for a single update. Expected input is the component setup in Svelte. Limitation: Only updates once unless the task is restarted.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/virtual-environment.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<VirtualEnvironment frames={1} />\n```\n\n----------------------------------------\n\nTITLE: Extending Custom Prop Types for Threlte Components in TypeScript\nDESCRIPTION: This TypeScript snippet outlines how to define custom prop types for the Threlte component, providing better type safety in Svelte applications.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare global {\n  namespace App {\n    // interface Error {}\n    // interface Locals {}\n    // interface PageData {}\n    // interface PageState {}\n    // interface Platform {}\n  }\n\n  namespace Threlte {\n    interface UserProps {\n      myProp?: string\n    }\n  }\n}\n\nexport {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Stage with Dependencies in Typescript\nDESCRIPTION: This snippet shows how to create a custom stage named 'after-render' using the `useStage` hook. The stage is configured to execute after the `renderStage`, establishing a dependency between the two stages.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/scheduling-tasks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { renderStage } = useThrelte()\n\nconst afterRenderStage = useStage('after-render', {\n  after: renderStage\n})\n```\n\n----------------------------------------\n\nTITLE: Using AnimatedSpriteMaterial with Custom Material Type in Svelte\nDESCRIPTION: Example of specifying a custom material type (MeshStandardMaterial) to be used with AnimatedSpriteMaterial when attached to a Mesh instead of a Sprite.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/animated-sprite-material.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh>\n  <AnimatedSpriteMaterial\n    is={THREE.MeshStandardMaterial}\n    textureUrl=\"./fire.png\"\n    totalFrames={14}\n  />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Updated oncreate Callback in Threlte 8\nDESCRIPTION: Shows the new signature for the oncreate callback prop, which now returns a cleanup function.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh\n  oncreate={(ref) => {\n    return () => {\n      console.log('cleanup')\n    }\n  }}\n>\n  <T.BoxGeometry />\n  <T.MeshStandardMaterial />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Scene with Multiple Positioned Tiles\nDESCRIPTION: Example showing how to use multiple Tile components with different positions in the scene.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/custom-abstractions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import Tile from './Tile.svelte'\n</script>\n\n<Tile position={[0, 0, 0]} />\n<Tile position={[2, 0, 0]} />\n<Tile position={[4, 0, 0]} />\n```\n\n----------------------------------------\n\nTITLE: AlignEventData Type Definition\nDESCRIPTION: TypeScript interface definition for the align event payload. It provides information about the alignment results, including dimensions, bounding box, and alignment values for each axis.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/align.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype AlignEventData = {\n  /** The outmost container group of the <Align> component */\n  container: Object3D\n  /** The width of the bounding box */\n  width: number\n  /** The height of the bounding box */\n  height: number\n  /** The depth of the bounding box */\n  depth: number\n  boundingBox: Box3\n  boundingSphere: Sphere\n  center: Vector3\n  verticalAlignment: number\n  horizontalAlignment: number\n  depthAlignment: number\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Controller Models with Svelte\nDESCRIPTION: This snippet demonstrates how to render left and right controller models in a Svelte component. It shows the simplified usage of the `<Controller>` component, which generates XR controller visuals that match the physical device.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/controller.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<Controller left />\n<Controller right />\n```\n\n----------------------------------------\n\nTITLE: Adding Title to Svelte Code Block in MDX\nDESCRIPTION: Illustrates how to add a title to a Svelte code block in MDX using the title attribute.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/docs/docs.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh position={5}>\n<T.Mesh position={10}>\n<T.Mesh position={20}>\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Processing Effects in Svelte with useTask\nDESCRIPTION: Using useTask to implement post-processing effects with the postprocessing library by creating a custom renderer component that sets up an EffectComposer with various passes.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-task.mdx#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useThrelte, useTask } from '@threlte/core'\n  import { onMount } from 'svelte'\n  import {\n    EffectComposer,\n    EffectPass,\n    RenderPass,\n    SMAAEffect,\n    SMAAPreset,\n    BloomEffect,\n    KernelSize\n  } from 'postprocessing'\n\n  const { scene, renderer, camera, size } = useThrelte()\n\n  // Adapt the default WebGLRenderer: https://github.com/pmndrs/postprocessing#usage\n  const composer = new EffectComposer(renderer)\n\n  const setupEffectComposer = (camera) => {\n    composer.removeAllPasses()\n    composer.addPass(new RenderPass(scene, camera))\n    composer.addPass(\n      new EffectPass(\n        camera,\n        new BloomEffect({\n          intensity: 1,\n          luminanceThreshold: 0.15,\n          height: 512,\n          width: 512,\n          luminanceSmoothing: 0.08,\n          mipmapBlur: true,\n          kernelSize: KernelSize.MEDIUM\n        })\n      )\n    )\n    composer.addPass(\n      new EffectPass(\n        camera,\n        new SMAAEffect({\n          preset: SMAAPreset.LOW\n        })\n      )\n    )\n  }\n\n  // We need to set up the passes according to the camera in use\n  $effect(() => {\n    setupEffectComposer($camera)\n  })\n  $effect(() => {\n    composer.setSize($size.width, $size.height)\n  })\n\n  const { renderStage, autoRender } = useThrelte()\n\n  // We need to disable auto rendering as soon as this component is\n  // mounted and restore the previous state when it is unmounted.\n  onMount(() => {\n    let before = autoRender.current\n    autoRender.set(false)\n    return () => autoRender.set(before)\n  })\n\n  useTask(\n    (delta) => {\n      composer.render(delta)\n    },\n    { stage: renderStage, autoInvalidate: false }\n  )\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updated Plugin Callback Structure in Threlte 8\nDESCRIPTION: Shows the new structure for plugin callbacks, using a reactive object instead of separate callback functions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninjectPlugin('some-plugin', (args) => {\n  args.ref\n  args.makeDefault\n  args.args\n  args.attach\n  args.manual\n  args.makeDefault\n  args.dispose\n  args.props // All other props declared on the component\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Scene Implementation with Tile Component\nDESCRIPTION: Simple implementation showing how to use the Tile component in a scene.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/custom-abstractions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import Tile from './Tile.svelte'\n</script>\n\n<Tile />\n```\n\n----------------------------------------\n\nTITLE: Initializing WebGPU Renderer in Threlte Canvas\nDESCRIPTION: Demonstrates how to import and initialize the WebGPU renderer within a Threlte Canvas component. It includes options for antialiasing and fallback to WebGL.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/webgpu.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import Scene from './Scene.svelte'\n  import { Canvas } from '@threlte/core'\n  import { WebGPURenderer } from 'three/webgpu'\n</script>\n\n<Canvas\n  createRenderer={(canvas) => {\n    return new WebGPURenderer({\n      canvas,\n      antialias: true,\n      forceWebGL: false\n    })\n  }}\n>\n  <Scene />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Accessing the Auto Render Task in Typescript\nDESCRIPTION: This snippet demonstrates how to access the `autoRenderTask` using the `useThrelte` hook. This task renders the scene if `autoRender` is set to `true`.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/scheduling-tasks.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { autoRenderTask } = useThrelte()\n```\n\n----------------------------------------\n\nTITLE: Using Constant Prop Types on T Component - Svelte\nDESCRIPTION: This example illustrates the enforcement of constant prop types in the `<T>` component of Threlte 7. Prop values must remain consistent throughout the component's lifecycle to improve performance. The transformation is showcased through a before-and-after comparison for changing the position prop.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_17\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n\n  let position = [0, 0, 0]\n\n  const changePosition = () => {\n    position = 1\n  }\n</script>\n\n<T.Mesh {position} />\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n\n  let position = [0, 0, 0]\n\n  const changePosition = () => {\n    position = [1, 1, 1]\n  }\n</script>\n\n<T.Mesh {position} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugins in Threlte 8\nDESCRIPTION: Demonstrates how to implement a plugin in a Svelte component using the new plugin creation method.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { createSomePlugin } from '$plugins'\n\n  createSomePlugin('plugin-arg')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Canvas Portal in Svelte Page Component\nDESCRIPTION: Demonstrates how to use the CanvasPortal component to render 3D content alongside regular DOM elements in a Svelte page component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/app-structure.mdx#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import CanvasPortal from '$lib/components/CanvasPortal.svelte'\n  import { T } from '@threlte/core'\n</script>\n\n<!-- Regular DOM elements for UI -->\n<button>Click me</button>\n\n<!-- 3D content -->\n<CanvasPortal>\n  <T.PerspectiveCamera\n    position.z={10}\n    makeDefault\n  />\n\n  <T.Mesh>\n    <T.BoxGeometry />\n    <T.MeshBasicMaterial color=\"red\" />\n  </T.Mesh>\n</CanvasPortal>\n```\n\n----------------------------------------\n\nTITLE: Using useTask with On-Demand Rendering in TypeScript\nDESCRIPTION: Controlling when frames are invalidated by disabling automatic invalidation and manually calling invalidate when needed, providing more control over when re-rendering occurs.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-task.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { invalidate } = useThrelte()\n\nconst { start, stop, started } = useTask(\n  (delta) => {\n    // do something\n    // invalidate the current frame\n    if (someCondition) {\n      invalidate()\n    }\n  },\n  { autoInvalidate: false }\n)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Plugin with Typed Props\nDESCRIPTION: Shows how to add type annotations to a plugin implementation for better development experience and runtime safety. The type parameter defines expected prop structure.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/plugins.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninjectPlugin<{ lookAt?: [number, number, number] }>('lookAt', (args) => {\n  // args.props.lookAt is now typed as [number, number, number] | undefined\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering in Threlte 7 using useTask and renderStage\nDESCRIPTION: This snippet shows the Threlte 7 approach for custom rendering, using useTask with the renderStage to replace the deprecated useRender hook.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/Tutorials/Animating a Spaceship.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { scene, camera, renderer, renderStage } = useThrelte()\n\nuseTask(\n  () => {\n    // render here\n  },\n  { stage: renderStage, autoInvalidate: false }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Task with a Single Dependency (Reference) in Typescript\nDESCRIPTION: This code snippet demonstrates creating a task that executes after another task (someTask) passed by reference using the `after` option of the `useTask` hook.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/scheduling-tasks.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Execute a task after a single task passed by reference\nuseTask(\n  (delta) => {\n    // …\n  },\n  { after: someTask }\n)\n```\n\n----------------------------------------\n\nTITLE: Invoking Callback Props in Threlte 8\nDESCRIPTION: Demonstrates how to invoke callback props instead of dispatching events in Threlte 8.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { T } from '@threlte/core'\n  import { OrbitControls } from '@threlte/extras'\n\n  type Props = {\n    onchange?: () => void\n  }\n\n  let { onchange }: Props = $props()\n\n  onchange?.()\n</script>\n\n<T.PerspectiveCamera makeDefault>\n  <OrbitControls {onchange} />\n</T.PerspectiveCamera>\n```\n\n----------------------------------------\n\nTITLE: Piercing Individual Properties with Sync in Svelte\nDESCRIPTION: This example demonstrates how to specify individual properties to be managed in the Theatre.js studio using the pierced props feature of the Sync component. It includes editing only the 'x' coordinate of a Mesh component's position.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/sync.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { SheetObject } from '@threlte/theatre'\n</script>\n\n<SheetObject key=\"cube\">\n  {#snippet children({ Sync })}\n    <T.Mesh>\n      <!-- pierced prop: edit only x coord. in the studio -->\n      <Sync position.x />\n      <T.BoxGeometry />\n      <T.MeshStandardMaterial />\n    </T.Mesh>\n  {/snippet}\n</SheetObject>\n```\n\n----------------------------------------\n\nTITLE: Using Snippets Instead of Slot Props in Threlte 8\nDESCRIPTION: Shows how to replace slot props with snippets in Threlte 8 for passing data to child components.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<T.PerspectiveCamera>\n  {#snippet children({ ref })}\n    <T.OrbitControls\n      args={[ref, renderer.domElement]}\n      onchange={invalidate}\n    />\n  {/snippet}\n</T.PerspectiveCamera>\n```\n\n----------------------------------------\n\nTITLE: Implementing Task-based Animation in Threlte 7\nDESCRIPTION: This snippet shows the updated approach in Threlte 7, using the useTask hook to replace the deprecated useFrame for animation tasks.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/Tutorials/Animating a Spaceship.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseTask(() => {\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: useRigidBody Hook Type Definition\nDESCRIPTION: This TypeScript code snippet shows the type definition for the `useRigidBody` hook. It indicates that the hook returns either a `RAPIER.RigidBody` object or `undefined` if no parent `<RigidBody>` component is present.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-rigid-body.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst rigidBody = useRigidBody() // RAPIER.RigidBody | undefined\n```\n\n----------------------------------------\n\nTITLE: Displaying Manual Installation Guide - Svelte\nDESCRIPTION: Incorporates the ManualInstallGuide component in the Svelte application to present users with a user-friendly installation guide. This component is dynamically loaded on the client-side.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/getting-started/installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<ManualInstallGuide client:load />\n```\n\n----------------------------------------\n\nTITLE: Direct Attachment of BufferGeometry in Threlte\nDESCRIPTION: This snippet illustrates an alternative approach to manage BufferGeometry within script tags or externally, allowing for direct attachment to the Points component in Threlte. It shows how to use a pre-defined pointsBufferGeometry variable within the Points component.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/geometry/Rendering Points.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Points>\n  <T is={pointsBufferGeometry} />\n  <T.PointsMaterial size={0.25} />\n</T.Points>\n```\n\n----------------------------------------\n\nTITLE: Setting user context data with a namespace in Svelte\nDESCRIPTION: Demonstrates setting data in the user context store with a namespace. When a UserContextEntry is passed with a namespace, it is set at that namespace and the entry is returned.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-threlte-user-context.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useThrelteUserContext } from '@threlte/core'\n\n  const getCtx = () => {\n    return {\n      foo: 'bar'\n    }\n  }\n\n  const ctx = useThrelteUserContext('some-context', getCtx)\n  console.log(ctx) // -> { foo: 'bar' }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame-based Animation in Threlte 6\nDESCRIPTION: This snippet demonstrates how to use the useFrame hook in Threlte 6 to run a callback on every frame for animation purposes.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/Tutorials/Animating a Spaceship.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseFrame(() => {\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Component Usage in Svelte\nDESCRIPTION: A simple example of using the HTML component from @threlte/extras to render HTML content in a Three.js scene.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/html.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { HTML } from '@threlte/extras'\n</script>\n\n<HTML>\n  <h1>Hello, World!</h1>\n</HTML>\n```\n\n----------------------------------------\n\nTITLE: Loading GLTF Models with useGltf Hook in Threlte\nDESCRIPTION: Shows a more convenient way to load GLTF models using the useGltf hook from @threlte/extras. This approach uses Svelte's await block to handle the asynchronous loading of the model.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/loading-assets.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useGltf } from '@threlte/extras'\n</script>\n\n{#await useGltf('/assets/model.gltf') then gltf}\n  <T is={gltf.scene} />\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Using Studio Objects Registry in Threlte Typescript\nDESCRIPTION: This snippet demonstrates usage of the Studio Objects Registry in Threlte, a 3D framework built with Svelte. The registry allows you to add, remove, and check studio objects. Dependencies include the Threlte framework and the `@threlte/studio/extensions` module. Key operations include managing object entries and checking object relationships.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/use-studio-objects-registry.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useStudioObjectsRegistry } from '@threlte/studio/extensions'\n\nconst registry = useStudioObjectsRegistry()\n\n// get all currently registered studio objects\nconsole.log(registry.objects)\n\n// add a studio object to the registry\nregistry.addObject(object)\n\n// remove a studio object from the registry\nregistry.removeObject(object)\n\n// check if an object is or is a child of a studio object\nconsole.log(registry.isOrIsChildOfStudioObject(object)) // true | false\n```\n\n----------------------------------------\n\nTITLE: Suspending Async Resource with Suspense Hook in Svelte\nDESCRIPTION: This code snippet demonstrates how to use the 'useSuspense' hook to mark an asynchronous resource as used in a <Suspense> boundary. It requires a promise as the input which will be passed to the function returned by 'useSuspense'. This facilitates handling resource loading and suspense states effectively.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-suspense.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  const suspend = useSuspense()\n\n  const promise = suspend(useTexture('/texture.png'))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Material for MarchingCubes in Threlte\nDESCRIPTION: Demonstrates how to apply a custom material (MeshNormalMaterial) to a MarchingCubes component. This approach follows the same pattern used for regular Three.Mesh objects in Threlte.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/marching-cubes/LavaLamp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<MarchingCubes>\n  <T.MeshNormalMaterial />\n  <T is={cube} />\n</MarchingCubes>\n```\n\n----------------------------------------\n\nTITLE: Reactive Hand Tracking State with useXR Hook\nDESCRIPTION: Using the useXR hook to create a reactive store for tracking hand input presence\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/hand.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { isHandTracking } = useXR()\n```\n\n----------------------------------------\n\nTITLE: Accessing HTML Component Functions in Children Snippet\nDESCRIPTION: This snippet demonstrates how to access the render, startRendering, and stopRendering functions from the HTML component's children snippet.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/html.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<HTML autoRender={false}>\n  {#snippet children({ render, startRendering, stopRendering })}\n    <button onclick={startRendering}>start rendering</button>\n    <button onclick={stopRendering}>stop rendering</button>\n    <button onclick={render}>render a single frame</button>\n  {/snippet}\n</HTML>\n```\n\n----------------------------------------\n\nTITLE: Creating Flex Layout\nDESCRIPTION: The snippet shows how to use the `<Flex>` component for creating a flex layout by specifying width and height properties. It demonstrates how to translate an HTML div representation into a Flex component for managing layout in Svelte applications.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/flex.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<div style=\"display: flex; width: 100px; height: 100px\">\n  <!-- ... -->\n</div>\n\n<!-- translates to this -->\n\n<Flex\n  width={100}\n  height={100}\n>\n  <!-- ... -->\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Enabling Texture Support for MarchingCubes in Threlte\nDESCRIPTION: Shows how to enable UV mapping for MarchingCubes when using textured materials. The enableUvs flag must be set to true when applying materials with textures.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/marching-cubes/LavaLamp.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<MarchingCubes enableUvs>\n  <T.MeshNormalMaterial map={texture} />\n  <MarchingCube />\n</MarchingCubes>\n```\n\n----------------------------------------\n\nTITLE: Using Class Parser for Flex Components\nDESCRIPTION: This snippet demonstrates how to create a ClassParser utility to convert CSS classes into props for <Flex> and <Box> components, facilitating easier layout configuration.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/getting-started.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClassParser } from '@threlte/flex'\n\nconst classParser = createClassParser((string, props) => {\n  const classNames = string.split(' ')\n  for (const className of classNames) {\n    switch (className) {\n      case 'container':\n        props.flexDirection = 'Row'\n        props.justifyContent = 'Center'\n        props.alignItems = 'Stretch'\n        props.gap = 10\n        props.padding = 10\n        break\n      case 'item':\n        props.width = 'auto'\n        props.height = 'auto'\n        props.flex = 1\n    }\n  }\n  return props\n})\n```\n\n----------------------------------------\n\nTITLE: Example Schedule Result in JSON\nDESCRIPTION: This JSON shows an example of the schedule returned by `scheduler.getSchedule`. It includes the execution order of the stages and tasks.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/scheduling-tasks.mdx#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stages\": [\n    {\n      \"key\": \"physics stage\",\n      \"tasks\": [\"physics\"]\n    },\n    {\n      \"key\": \"main stage\",\n      \"tasks\": [\"move object\", \"move camera\"]\n    },\n    {\n      \"key\": \"render stage\",\n      \"tasks\": [\"render\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Transformers for Property Management in Typescript\nDESCRIPTION: This TypeScript snippet introduces a transformer using the createTransformer function from @threlte/theatre. It sets a numerical range for an intensity property of a light and applies this via transformer functions. It highlights the need for compatibility by using available functions from Theatre.js types.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/theatre/sync.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTransformer } from '@threlte/theatre'\nimport { types } from '@theatre/core'\n\nconst intensity = createTransformer({\n  transform(value) {\n    return types.number(value, {\n      range: [0, 10]\n    })\n  },\n  apply(target, path, value) {\n    target[path] = value\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving existing AudioListener - Typescript\nDESCRIPTION: This snippet demonstrates how to retrieve an existing `THREE.AudioListener` and its `AudioContext` using the `useAudioListener` hook.  It shows how to access the `listener` and `context` properties returned by the hook for further use.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-audio-listener.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { listener, context } = useAudioListener()\nconsole.log(listener) // THREE.AudioListener\nconsole.log(context) // AudioContext\n```\n\n----------------------------------------\n\nTITLE: Creating ScreenQuadGeometry in Three.js\nDESCRIPTION: This component creates a right triangle positioned in the lower-left of the canvas, with its hypotenuse touching the top-right corner. The geometry is in clip-space, requiring a special vertex shader.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/postprocessing/ScreenQuad.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ScreenQuadGeometry>\n```\n\n----------------------------------------\n\nTITLE: Controlling Cameras in Threlte Svelte\nDESCRIPTION: This snippet outlines how to use the 'manual' prop for a camera to opt out of automatic projection matrix recalculations in Threlte Svelte.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/t.mdx#2025-04-22_snippet_15\n\nLANGUAGE: svelte\nCODE:\n```\n<T\n  is={PerspectiveCamera}\n  manual\n/>\n```\n\n----------------------------------------\n\nTITLE: Type-safe Svelte Component for Model\nDESCRIPTION: This TypeScript-enabled Svelte component enhances type-safety by defining specific types for the GLTF assets and their animations. It leverages TypeScript for stricter type checking and improved developer experience.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/packages/gltf/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Svelte\nCODE:\n```\n<script lang=\"ts\">\n  import type * as THREE from 'three'\n  import { Group } from 'three'\n  import { T, type Props, type Events, type Slots } from '@threlte/core'\n  import { useGltf, useGltfAnimations } from '@threlte/extras'\n\n  type $$Props = Props<THREE.Group>\n  type $$Events = Events<THREE.Group>\n  type $$Slots = Slots<THREE.Group>\n\n  export const ref = new Group()\n\n  type ActionName =\n    | 'pockets'\n    | 'rope'\n    | 'swingdance'\n    | 'jump'\n    | 'react'\n    | 'shrug'\n    | 'wave'\n    | 'golf'\n    | 'idle'\n  type GLTFResult = {\n    nodes: {\n      stacy: THREE.SkinnedMesh\n      mixamorigHips: THREE.Bone\n    }\n    materials: {}\n  }\n\n  const gltf = useGltf<GLTFResult>('/stacy.glb')\n  export const { actions, mixer } = useGltfAnimations<ActionName>(gltf, ref)\n</script>\n\n{#if $gltf}\n  <T\n    is={ref}\n    {...$$restProps}\n  >\n    <T.Group name=\"Scene\">\n      <T.Group\n        name=\"Stacy\"\n        rotation={[Math.PI / 2, 0, 0]}\n        scale={0.01}\n      >\n        <T is={$gltf.nodes.mixamorigHips} />\n        <T.SkinnedMesh\n          name=\"stacy\"\n          geometry={$gltf.nodes.stacy.geometry}\n          material={$gltf.nodes.stacy.material}\n          skeleton={$gltf.nodes.stacy.skeleton}\n          rotation={[-Math.PI / 2, 0, 0]}\n          scale={100}\n        />\n      </T.Group>\n    </T.Group>\n\n    <slot {ref} />\n  </T>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Terrain with Offset in TypeScript\nDESCRIPTION: This snippet shows how to create different terrain patterns by adding a random offset to the x and y inputs of the noise function. This is done within an effect to potentially update the terrain dynamically.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/geometry/Terrain with 3D noise.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n$effect(() => {\n  const randomOffset = Math.random()\n  for (let i = 0; i < positions.count; i += 1) {\n    const x = positions.getX(i) / flatness + randomOffset\n    const y = positions.getY(i) / flatness + randomOffset\n    positions.setZ(i, noise.noise(x, y))\n  }\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Highlighting Specific Lines in Svelte Code Block\nDESCRIPTION: Shows how to highlight specific lines in a Svelte code block using line numbers in curly braces.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/docs/docs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh position={5}>\n<T.Mesh position={10}>\n<T.Mesh position={20}>\n```\n\n----------------------------------------\n\nTITLE: Setting up Orthographic Camera and Mesh in Svelte\nDESCRIPTION: This snippet shows how to set up an orthographic camera and a mesh to capture pointer move events in Threlte. The mesh is positioned in front of the camera to create space for drawing mesh lines.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/meshline/Cursor Lines.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<T.OrthographicCamera\n  zoom={50}\n  makeDefault\n/>\n\n<T.Mesh\n  scale={100}\n  visible={false}\n  position.z={-10}\n>\n  <T.PlaneGeometry />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Updating InstancedSprite Instances in Svelte\nDESCRIPTION: This snippet demonstrates how to update InstancedSprite instances using the useInstancedSprite hook and useTask for efficient updates.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/animation/Complex sprite scene.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useTask } from '@threlte/core'\n  import { useInstancedSprite } from '@threlte/extras'\n\n  const { updatePosition, count, animationMap, sprite } = useInstancedSprite()\n\n  useTask(() => {\n    for (let i = 0; i < count; i++) {\n      updatePosition(i, [0, 0, 0])\n      sprite.animation.setAt(i, 'fly')\n    }\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Implementation\nDESCRIPTION: Shows the basic structure of a Threlte plugin that has access to component references and props. The plugin receives a reactive args object containing all necessary context.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/plugins.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injectPlugin } from '@threlte/core'\n\ninjectPlugin('plugin-name', (args) => {\n  console.log(args.ref) // e.g. a Mesh\n  console.log(args.props) // e.g. { position: [0, 10, 0] }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ContactShadows Component in Svelte\nDESCRIPTION: This snippet shows the basic usage of the ContactShadows component with various properties set. It demonstrates how to create contact shadows with specific opacity, scale, blur, far distance, resolution, and color.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/contact-shadows.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<ContactShadows\n  opacity={1}\n  scale={10}\n  blur={1}\n  far={10}\n  resolution={256}\n  color=\"#000000\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Task with a Future Dependency (Key) in Typescript\nDESCRIPTION: This snippet demonstrates how to create a task that depends on another task ('some-task') that might not yet exist. This task will execute before 'some-task' if 'some-task' is created later on.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/scheduling-tasks.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Reference a task as a dependency that hasn't been created yet\nuseTask(\n  (delta) => {\n    // If a task with the key `some-task` is created later on,\n    // this task will be executed after it.\n  },\n  { before: 'some-task' }\n)\n\nuseTask('some-task', (delta) => {\n  // …\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Threlte Import Statements\nDESCRIPTION: Examples showing how to update import statements when migrating from the old 'threlte' package to the new '@threlte/core' and '@threlte/extras' packages.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/packages/core/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {…} from '@threlte/core'\nimport {…} from '@threlte/extras'\nimport { GLTF, useGltf, Text } from '@threlte/extras'\n```\n\n----------------------------------------\n\nTITLE: Rendering with RequestAnimationFrame Timing\nDESCRIPTION: A basic example demonstrating how `requestAnimationFrame` works with time-based rendering and potential variability in frame timing\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/framerate.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst render = (time: number) => {\n  console.log(time)\n  requestAnimationFrame(render)\n}\nrequestAnimationFrame(render)\n```\n\n----------------------------------------\n\nTITLE: Model Component with useDimensions Hook in Svelte\nDESCRIPTION: This Svelte component uses the `useDimensions` hook from `@threlte/flex` to retrieve the width and height of the parent component. It then uses these dimensions to dynamically scale a 3D mesh. The `width` and `height` stores are automatically updated when the dimensions of the parent component change.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/use-dimensions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useDimensions } from '@threlte/flex'\n\n  const { width, height } = useDimensions()\n</script>\n\n<T.Mesh\n  scale.x={$width}\n  scale.y={$height}\n>\n  <T.BoxGeometry />\n  <T.MeshBasicMaterial color=\"red\" />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Removing a Stage in Typescript\nDESCRIPTION: This snippet shows how to remove a stage using the `removeStage` method of the scheduler. Removing a stage will also remove all the tasks within that stage.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/scheduling-tasks.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { scheduler } = useThrelte()\n\nscheduler.removeStage(afterRenderStage)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Types Definition for Tile Component\nDESCRIPTION: Type definitions for the Tile component using Threlte's Props utility type to ensure proper type checking and IDE support.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/custom-abstractions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Props } from '@threlte/core'\nimport type { Group } from 'three'\n\nexport type TileProps = Props<Group>\n```\n\n----------------------------------------\n\nTITLE: Canvas Component Props Update - TypeScript\nDESCRIPTION: This snippet illustrates the change in how the frameloop prop is specified in Threlte 7. The old prop 'frameloop' has been renamed to 'renderMode', reflecting its specific function in rendering behavior. The various accepted values determine how often the scene is rendered.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n<Canvas frameloop=\"always\" />\n<Canvas frameloop=\"demand\" />\n<Canvas frameloop=\"never\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<Canvas renderMode=\"always\" />\n<Canvas renderMode=\"on-demand\" />\n<Canvas renderMode=\"manual\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Threlte Studio Extension in Svelte\nDESCRIPTION: This Svelte component implements a Threlte Studio extension. It uses `useStudio` to create the extension, defines the extension's state and actions, and renders UI elements (ToolbarButtons) to interact with the extension. It imports necessary modules from `@threlte/studio/extend` and the type definitions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/authoring-extensions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import {\n    useStudio,\n    ToolbarItem,\n    HorizontalButtonGroup,\n    ToolbarButton\n  } from '@threlte/studio/extend'\n  import { extensionScope, type ExtensionState, type ExtensionActions } from './types'\n\n  const { createExtension } = useStudio()\n\n  const extension = createExtension<ExtensionState, ExtensionActions>({\n    scope: extensionScope,\n    state({ persist }) {\n      return {\n        enabled: persist(true),\n        count: persist(0)\n      }\n    },\n    actions: {\n      toggleEnabled({ state }) {\n        state.enabled = !state.enabled\n      },\n      setEnabled({ state }, enabled) {\n        state.enabled = enabled\n      },\n      increment({ state }) {\n        state.count++\n      },\n      decrement({ state }) {\n        state.count--\n      }\n    },\n    keyMap({ shift }) {\n      return {\n        increment: shift('+'),\n        decrement: shift('-')\n      }\n    }\n  })\n</script>\n\n<!-- Extension UI -->\n<ToolbarItem position=\"left\">\n  <HorizontalButtonGroup>\n    <ToolbarButton\n      label=\"Decrement\"\n      icon=\"mdiMinus\"\n      on:click={extension.decrement}\n      tooltip=\"Decrement (-)\"\n    />\n    <ToolbarButton\n      label=\"Increment\"\n      icon=\"mdiPlus\"\n      on:click={extension.increment}\n      tooltip=\"Increment (+)\"\n    />\n  </HorizontalButtonGroup>\n</ToolbarItem>\n\n<slot />\n```\n\n----------------------------------------\n\nTITLE: Using Threlte GLTF CLI\nDESCRIPTION: This Bash snippet illustrates how to use the @threlte/gltf CLI to process and transform a GLTF model. It allows for options like output file naming, TypeScript definitions, compression, and more. The tool requires NodeJS and a GLTF file present in the '/public' folder of your project.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/packages/gltf/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpx @threlte/gltf@latest model.gltf --transform\n```\n\n----------------------------------------\n\nTITLE: Creating Canvas Portal Component in Svelte\nDESCRIPTION: Defines a CanvasPortal component that allows portaling 3D content into the global Canvas from anywhere in the application.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/app-structure.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { addSnippet, removeSnippet } from '$lib/components/CanvasPortalTarget.svelte'\n  import { onDestroy, type Snippet } from 'svelte'\n\n  let { children }: { children: Snippet } = $props()\n\n  addSnippet(children)\n\n  onDestroy(() => {\n    removeSnippet(children)\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Flex and Box Components with Tailwind Parser in Svelte\nDESCRIPTION: This code snippet demonstrates how to use the `tailwindParser` in a Svelte component to style Flex and Box components using Tailwind-like classes. The `classParser` prop is provided to the `<Flex>` component to enable class parsing based on Tailwind syntax.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/flex/tailwind-parser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<Flex\n  width={300}\n  height={300}\n  classParser={tailwindParser}\n  class=\"flex-col items-center justify-center gap-10 p-10\"\n>\n  <Box class=\"w-100 h-full shrink-0\">\n    {#snippet children({ width, height })}\n      <Plane\n        {width}\n        {height}\n        color=\"yellow\"\n        depth={1}\n      />\n    {/snippet}\n  </Box>\n\n  <Box class=\"flex-1\">\n    {#snippet children({ width })}\n      <Plane\n        color=\"blue\"\n        {width}\n        height={44}\n        depth={1}\n      />\n    {/snippet}\n  </Box>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: GLTF Usage Example (TypeScript)\nDESCRIPTION: Illustrates how to use the useGltf hook with stronger types in Threlte. This example demonstrates the changes required for specifying node and material types in the hook's generic parameters. It shows the upgrade path from the previous version to the more strongly-typed version.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/packages/extras/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"// Before:\n// const { gltf } = useGltf<\n//   \\\"MeshA\\\" | \\\"MeshB\\\" | \\\"Object3DA\\\",\n//   \\\"MaterialA\\\" | \\\"MaterialB\\\"\n// >(\\\"/some/url\\\");\n\n// After:\n// const { gltf } = useGltf<{   nodes: {     MeshA: THREE.Mesh;     MeshB: THREE.Mesh;     Object3DA: THREE.Object3D;   };   materials: {     MaterialA: THREE.MeshStandardMaterial;     MaterialB: THREE.MeshBasicMaterial;   }; }>(\\\"/some/url\\\");\"\n```\n\n----------------------------------------\n\nTITLE: Installing @threlte/extras via npm\nDESCRIPTION: This command installs the @threlte/extras package using npm.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @threlte/extras\n```\n\n----------------------------------------\n\nTITLE: Creating a Task with Multiple Dependencies (Reference) in Typescript\nDESCRIPTION: This snippet shows creating a task that executes after multiple tasks (someTask and someOtherTask) passed by reference using the `after` option in the `useTask` hook.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/scheduling-tasks.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Execute a task after multiple tasks passed by reference\nuseTask(\n  (delta) => {\n    // …\n  },\n  { after: [someTask, someOtherTask] }\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Threlte Dependencies\nDESCRIPTION: Command to install all required packages for Threlte development using pnpm.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install:all\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Threlte 8\nDESCRIPTION: Demonstrates the new approach to handling events in Threlte 8, using callback props instead of event listeners.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh\n  onclick={onClick}\n  onpointerenter={onPointerEnter}\n>\n  <T.BoxGeometry />\n  <T.MeshStandardMaterial />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Applying Different Textures to Different Faces of a Mesh in Threlte\nDESCRIPTION: Demonstrates how to declaratively apply different textures to different faces of a BoxGeometry by setting the attach prop to a function that manages the material array.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/loading-assets.mdx#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh>\n  <T.BoxGeometry />\n  <T.MeshStandardMaterial\n    map={texture1}\n    attach={({ parent, ref }) => {\n      if (Array.isArray(parent.material)) parent.material = [...parent.material, ref]\n      else parent.material = [ref]\n    }}\n  />\n  <T.MeshStandardMaterial\n    map={texture2}\n    attach={({ parent, ref }) => {\n      if (Array.isArray(parent.material)) parent.material = [...parent.material, ref]\n      else parent.material = [ref]\n    }}\n  />\n</T.Mesh>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Threlte Repository\nDESCRIPTION: Command to clone the Threlte Git repository to your local machine using SSH.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:threlte/threlte.git\n```\n\n----------------------------------------\n\nTITLE: Handling errors with asyncWritable in Svelte\nDESCRIPTION: Shows how to access and handle errors that occur in promises used with asyncWritable. The store exposes an error property which is itself a store.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/utilities.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { asyncWritable } from '@threlte/core'\n\n  const asyncOp = async () => {\n    throw new Error('Something went wrong')\n  }\n\n  const store = asyncWritable(asyncOp())\n  const error = store.error\n\n  $inspect($store, $error)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Highlighting Line Range in Svelte Code Block\nDESCRIPTION: Demonstrates how to highlight a range of lines in a Svelte code block using a hyphen between line numbers.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/docs/docs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh position={5}>\n<T.Mesh position={10}>\n<T.Mesh position={20}>\n```\n\n----------------------------------------\n\nTITLE: Getting the Schedule in Typescript\nDESCRIPTION: This snippet shows how to retrieve the current task execution schedule using the `getSchedule` method of the scheduler.  The `{ tasks: true }` option includes the tasks in the output.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/scheduling-tasks.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst { scheduler } = useThrelte()\n\nscheduler.getSchedule({\n  tasks: true\n})\n```\n\n----------------------------------------\n\nTITLE: Getting the entire user context store in Svelte\nDESCRIPTION: Demonstrates how to get the complete user context store without specifying a namespace. This returns a store containing all namespaces and their associated data.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/core/use-threlte-user-context.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useThrelteUserContext } from '@threlte/core'\n\n  const userCtx = useThrelteUserContext()\n  console.log($userCtx) // -> { 'some-context': { foo: 'bar' } }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Callback Function with onReveal in TypeScript\nDESCRIPTION: Demonstrates the use of onReveal hook in TypeScript to execute a callback function upon component reveal, with an option to return a function for cleanup when the component unmounts or suspends again. This method outputs log messages indicating the component's lifecycle events. The initial callback logs when the component is revealed, and the returned function logs upon unmounting or resuspension. The setup assumes the presence of a functioning Svelte application context.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/onReveal.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonReveal(() => {\n  console.log('The component has been revealed')\n\n  return () => {\n    console.log('The component has been unmounted or suspended again')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Snippet Props for Manual Alignment\nDESCRIPTION: Demonstrates how to use the align snippet prop to manually trigger alignment when needed. This is an alternative to the auto property, providing more control over when alignment occurs, especially for dynamic content.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/align.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<Align>\n  {#snippet children({ align })}\n    {#if showOtherCube}\n      <T.Mesh oncreate={align}>\n        <T.BoxGeometry />\n        <T.MeshBasicMaterial />\n      </T.Mesh>\n    {/if}\n  {/snippet}\n</Align>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Studio Component in Svelte\nDESCRIPTION: This snippet conditionally includes the Studio component in a Svelte application based on whether the app is in development mode. It uses the `import.meta.env.MODE` variable to determine the current environment and imports the Studio asynchronously only when in development mode, ensuring that the production build is optimized by excluding unnecessary components.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/deploying-to-production.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Canvas } from '@threlte/core'\n  import Scene from './Scene.svelte'\n</script>\n\n<Canvas>\n  {#if import.meta.env.MODE === 'development'}\n    {#await import('@threlte/studio') then { Studio }}\n      <Studio>\n        <Scene />\n      </Studio>\n    {/await}\n  {:else}\n    <Scene />\n  {/if}\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Embedding Threlte Example in Documentation\nDESCRIPTION: This snippet demonstrates how to embed a Threlte example within a markdown document using the `<Example>` component. The `path` attribute specifies the relative path to the example's directory.  The example directory must contain an `App.svelte` file.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/examples/README.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<Example path=\"path/to/example/directory\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props in Svelte for Studio\nDESCRIPTION: This snippet defines the properties for the Studio component, specifying types, required status, and default values. The properties include 'extensions', 'transient', and 'namespace', which allow customization of the component's behavior and persistence of the application state.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/studio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\ncomponentSignature:\n  {\n    props:\n      [\n        {\n          name: 'extensions',\n          type: { name: 'SvelteComponent[]', url: './authoring-extensions' },\n          required: false\n        },\n        { name: 'transient', type: 'boolean', required: false, default: 'false' },\n        {\n          name: 'namespace',\n          type: 'boolean',\n          required: false,\n          default: \"'default'\",\n          description: 'The namespace to use for persisting the Studio state such as the editor camera position or the working space. Useful if you work on more than one Threlte app in the same origin.'\n        }\n      ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Highlighting Multiple Lines in Svelte Code Block\nDESCRIPTION: Illustrates how to highlight multiple lines in a Svelte code block using comma-separated line numbers.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/docs/docs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh position={5}>\n<T.Mesh position={10}>\n<T.Mesh position={20}>\n```\n\n----------------------------------------\n\nTITLE: Combining Virtual and Real Environments with Svelte\nDESCRIPTION: This snippet integrates real and virtual environments using <VirtualEnvironment> and <Environment> components in Svelte. It shows how to mix different environment sources and content in a single setup. Dependencies include URLs for resources and environment control properties. Inputs involve scene components, while outputs reflect their combined visual dynamics.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/virtual-environment.mdx#2025-04-22_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<VirtualEnvironment>\n  <Environment\n    url=\"…\"\n    isBackground\n  />\n\n  <T.Mesh>\n    <T.PlaneGeometry />\n  </T.Mesh>\n</VirtualEnvironment>\n```\n\n----------------------------------------\n\nTITLE: useSphericalJoint Signature in Typescript\nDESCRIPTION: This TypeScript code snippet presents the signature of the `useSphericalJoint` hook. It describes the return type, which includes writable stores for the `SphericalImpulseJoint` and the two connected `RigidBody` objects. It also shows the expected parameters: `anchorA` and `anchorB`, representing the positions of the anchors.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-spherical-joint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n\tjoint: Writable<SphericalImpulseJoint>\n\trigidBodyA: Writable<RAPIER.RigidBody>\n\trigidBodyB: Writable<RAPIER.RigidBody>\n} = useSphericalJoint(\n\tanchorA,  // Position\n  anchorB,  // Position\n)\n```\n\n----------------------------------------\n\nTITLE: Managing Audio Contexts with useThrelteAudio Hook in TypeScript\nDESCRIPTION: The code snippet demonstrates how to use the `useThrelteAudio` hook in a Threlte application to manage audio contexts. This hook will create a new audio context if none exists or return an existing one if available. It provides several functions like `getAudioListener`, `addAudioListener`, and `removeAudioListener` to interact with audio listeners. These functions accept parameters such as an `AudioListener` object or an optional `id` string. No additional dependencies are required for this snippet.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/use-threlte-audio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst {\n  audioListeners, // Map<string, AudioListener>\n  getAudioListener, // (id?: string) => AudioListener | undefined\n  addAudioListener, // (listener: AudioListener, id?: string) => void\n  removeAudioListener // (id?: string) => void\n} = useThrelteAudio()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS Classes to Svelte Code Block\nDESCRIPTION: Demonstrates how to add custom CSS classes to a Svelte code block for styling purposes.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/docs/docs.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh position={5}>\n<T.Mesh position={10}>\n<T.Mesh position={20}>\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Content for Threlte 8 Announcement\nDESCRIPTION: This Markdown snippet contains the content for the Threlte 8 release announcement, including metadata, headings, and formatted text describing new features and changes.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/blog/Threlte 8.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndate: '2025-01-20'\nimage: '/images/blog/threlte-8.png'\nauthor: 'Threlte Team'\ntitle: 'Threlte 8'\nsubtitle: 'The next major release of Threlte'\n---\n\nToday we are releasing **Threlte 8**, a significant milestone that marks a leap\nforward in performance, flexibility, and developer experience. This release has\nbeen cooking for the last 6 months. We're super excited about the potential it\nunlocks for the next chapter of 3D graphics on the web.\n\nThe new features of **Svelte 5** are groundbreaking for us as developers and\nembracing it was also an opportunity to refine the existing APIs. Furthermore, a\nlot has been happening within the world of **Three.js**. We've carved the path\nfor Threlte to take advantage of those developments too.\n\n## What's new in Threlte 8?\n\nThrelte 8 is packed with enhancements in `@threlte/core` and updates in all our\nother packages. Here are the highlights:\n\n### All-new `<T>` component\n\nThe universal [`<T>` component](/docs/reference/core/t) has been **reduced in\ncomplexity** all while **adding features and flexibility** that were just not\npossible before.\n\n- Props are now evaluated individually\n- [`attach` got a lot more\n  powerful](/docs/learn/advanced/migration-guides#attach-api--trait-components)\n- [Automatic disposal is more\n  transparent](docs/learn/advanced/migration-guides#automatic-disposal) and\n- [Events have been algined with svelte 5](/docs/learn/advanced/migration-guides#events)\n\n### New `@threlte/extras` components\n\nWe've added a lot of new things to play around with in `@threlte/extras` including:\n[`<AsciiRenderer>`](/docs/reference/extras/ascii-renderer),\n[`<CubeCamera>`](/docs/reference/extras/cube-camera),\n[`<MeshDiscardMaterial>`](/docs/reference/extras/discard-material),\n[`<RadialGradientTexture>`](/docs/reference/extras/radial-gradient-texture),\n[`<LinearGradientTexture>`](/docs/reference/extras/linear-gradient-texture),\n[`useViewport`](/docs/reference/extras/use-viewport),\n[`<HUD>`](/docs/reference/extras/hud),\n[`<Resize>`](/docs/reference/extras/resize),\n[`<meshBounds>`](/docs/reference/extras/mesh-bounds),\n[`<Detailed>`](/docs/reference/extras/detailed) and\n[`<View>`](/docs/reference/extras/view).\n\n### Custom type support for `<T>`\n\nPlugins such as\n[`interactivity`](/docs/reference/extras/interactivity#prop-types) now expose\ntypes which can be added to your ambient type definitions for the `<T>`\ncomponent to pick up. Event handlers and custom `<T>` component objects are now\ntype-safe.\n\n### Fixed frame physics\n\n`@threlte/rapier` now supports [fixed frame\nphysics](/docs/reference/rapier/framerate) letting you craft simulations with\npredictability and consistency.\n\n### Threlte plugin API\n\nThe **Plugin API** got an update to [fully embrace Svelte 5's reactivity\nmodel](/docs/learn/advanced/migration-guides#plugin-api). The doc page also\nhad an update to better introduce the API's capabilities.\n\n### This is the _WebGPU_ way\n\nThrelte 8 introduces a clear path for [using\nWebGPU](/docs/learn/advanced/webgpu). Threlte requires minimal changes to\nprojects in order to start using three.js's new WebGPU renderer and we've also\noutlined how to get started with [three's new shading\nlanguage](https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language) -\nTSL.\n\n### A new package appears\n\nAn alpha release of [Threlte Studio](/docs/reference/studio/getting-started) is\npart of this release 🎉 It's a step towards visual editing; letting you tweak\nvalues in browser and then automatically having those changes written into your\ncode. Theres a guided tour to help you get started. We hope it helps get things\nwhere you want them 🚀😀\n\n## How to migrate to Threlte 8\n\nThere are breaking changes. Threlte 8 is not backward-compatible but we've\ntried our best to cover the details within our [migration\nguide](/docs/learn/advanced/migration-guides#threlte-8). For further help,\nreach out to us on discord.\n\n## Built with the community, for the community\n\n<img\n  width=\"200\"\n  src=\"/threlte-8-diff.png\"\n  alt=\"THrelte8Diff\"\n/>\n\nThis rewrite was a team effort with great contributions from the community.\nThank you to everyone who tested out any of our `@next` releases. We're immensely\ngrateful for the time, talent, and passion of our community. You guys rock 😃\n\n## What's next?\n\nWe decided to deprecate the `npm create threlte` command. We're excited about\nSvelte's new `sv` CLI to incorporate third party packages and we're going to\noffer Threlte as a package to be installed with `sv` in the near future.\n\nWe'd love to hear about what everyone makes with Threlte 8! Take it for a spin,\nexplore the new documentation, and start building your next 3D application with\nthe super powers of Threlte 8 🎉\n\n<div class=\"mt-12 flex justify-center\">\n  <a\n    href=\"/docs/learn/getting-started/introduction\"\n    class=\"group flex w-fit flex-row gap-3 rounded-md bg-orange px-7 py-4 text-center glow-orange hover:bg-orange-400 hover:no-underline hover:glow-orange-400\"\n  >\n    <p class=\"my-0 text-lg !text-white !no-underline\">Start Building →</p>\n  </a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Types in TypeScript\nDESCRIPTION: This code defines the types for the extension's state and actions using TypeScript. It exports a scope constant and defines types for `ExtensionState` (enabled, count) and `ExtensionActions` (setEnabled, toggleEnabled, increment, decrement).\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/studio/authoring-extensions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const extensionScope = 'my-extension'\n\nexport type ExtensionState = {\n  enabled: boolean\n  count: number\n}\n\nexport type ExtensionActions = {\n  setEnabled: (enabled: boolean) => void\n  toggleEnabled: () => void\n  increment: () => void\n  decrement: () => void\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Lines as Added, Removed, or Modified in Svelte\nDESCRIPTION: Shows how to highlight lines as added, removed, or modified in a Svelte code block using +, -, or m symbols.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/docs/docs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh position={5}>\n<T.Mesh position={10}>\n<T.Mesh position={20}>\n```\n\n----------------------------------------\n\nTITLE: Automatic Disposal in Threlte 8\nDESCRIPTION: Demonstrates how automatic disposal now only affects objects referenced by a <T> component, without recursive scanning. This improves performance and makes behavior more intuitive.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { T } from '@threlte/core'\n  import { useTexture } from '@threlte/extras'\n\n  const map = useTexture('/some/texture.png')\n</script>\n\n{#if $map}\n  <T.Mesh>\n    <T.BoxGeometry />\n    <T.MeshBasicMaterial map={$map} />\n  </T.Mesh>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: usePrismaticJoint TypeScript Hook Signature\nDESCRIPTION: Defines the TypeScript signature for the usePrismaticJoint hook, showing the required and optional parameters for creating a prismatic joint between two rigid bodies\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/rapier/use-prismatic-joint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n\tjoint: Writable<PrismaticImpulseJoint>\n\trigidBodyA: Writable<RAPIER.RigidBody>\n\trigidBodyB: Writable<RAPIER.RigidBody>\n} = usePrismaticJoint(\n\tanchorA,  // Position\n  anchorB,  // Position\n  axis,     // Rotation\n  limits    // [min, max] | undefined\n)\n```\n\n----------------------------------------\n\nTITLE: Using Tip Component in MDX\nDESCRIPTION: Shows how to use the auto-imported Tip component in MDX files with various colors and types.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/docs/docs.mdx#2025-04-22_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\n<Tip color=\"orange\">orange</Tip>\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering using Default RenderStage in TypeScript\nDESCRIPTION: Shows how to set up a custom rendering task using Threlte's default renderStage for executing rendering only when necessary based on the current render mode.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/render-modes.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTask, useThrelte } from '@threlte/core'\n\nconst { renderStage } = useThrelte()\n\nuseTask(\n  () => {\n    // render here\n  },\n  { stage: renderStage, autoInvalidate: false }\n)\n```\n\n----------------------------------------\n\nTITLE: Interactivity Event Stop Propagation - Svelte\nDESCRIPTION: Demonstrates the use of `stopPropagation()` in an event handler to halt event propagation in a 3D scene, preventing events from reaching further nodes in the scene graph. Critical for optimizing event handling and preventing unintended interactions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/interactivity.mdx#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh onclick={(e) => e.stopPropagation()} />\n```\n\n----------------------------------------\n\nTITLE: Adding a Changeset for Release Notes\nDESCRIPTION: Command to create a new changeset that documents changes for users in the release notes.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx changeset\n```\n\n----------------------------------------\n\nTITLE: Installing Threlte XR Package\nDESCRIPTION: Install the @threlte/xr package via npm, a necessary dependency for setting up VR and AR functionalities within your project using WebXR in Svelte. This package is currently in beta.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/xr/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @threlte/xr\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to run the development server for the Threlte documentation site.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Different Color Representations in Svelte\nDESCRIPTION: This code demonstrates how to use different color representations within the `stops` array of the `<LinearGradientTexture>` component. It mixes string literals ('red'), hexadecimal numbers (0xff_00_00), rgb strings ('rgb(255, 0, 0)'), hex strings ('#ff0000'), and Three.js `Color` objects to define the gradient stops, showcasing the flexibility in defining colors.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/linear-gradient-texture.mdx#2025-04-22_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<LinearGradientTexture\n  stops={[\n    { color: 'red', offset: 0 },\n    { color: 0xff_00_00, offset: 0.25 },\n    { color: 'rgb(255, 0, 0)', offset: 0.5 },\n    { color: '#ff0000', offset: 0.75 },\n    { color: new Color(new Color(new Color())).set(1, 0, 0), offset: 1 }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Logging Available Actions\nDESCRIPTION: This tip advises running a console log to inspect the available actions and their structure, which aids in understanding the options for animation transitions provided by the GLTF model.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/examples/animation/Animation Transitions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(Object.entries($actions))\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Svelte Code Block in MDX\nDESCRIPTION: Demonstrates how to render a basic Svelte code block in MDX using triple backticks and language specification.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/docs/docs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<T.Mesh position={5} />\n```\n\n----------------------------------------\n\nTITLE: Importing Manual Installation Guide Component - Svelte\nDESCRIPTION: Imports the Manual Install Guide component required for installation instructions in Threlte projects. This component is essential for users who want step-by-step guidance on how to manually install packages in their Svelte applications.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/getting-started/installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ManualInstallGuide from '$components/ManualInstallGuide/ManualInstallGuide.svelte'\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of <Detailed> Component in Svelte\nDESCRIPTION: Demonstrates how to use the <Detailed> component with child meshes and different distances. The distance prop determines the visibility of each child based on its distance from the camera.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/extras/detailed.mdx#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<Detailed>\n  <T.Mesh>\n    <T.BoxGeometry />\n  </T.Mesh>\n  <T.Mesh distance={10}>\n    <T.BoxGeometry />\n  </T.Mesh>\n</Detailed>\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Textures with useTexture Hook in Threlte\nDESCRIPTION: Demonstrates loading multiple textures simultaneously using the useTexture hook from @threlte/extras. This approach loads textures for different material channels (map and normalMap).\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/basics/loading-assets.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst textures = useTexture({\n  map: '/assets/texture.png',\n  normalMap: '/assets/normal.png'\n})\n```\n\n----------------------------------------\n\nTITLE: Using Rapier Physics Stages in Threlte 8\nDESCRIPTION: Shows how to use the new physics stages in Threlte 8 with Rapier, including simulation and synchronization stages.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTask } from '@threlte/core'\nimport { useRapier } from '@threlte/rapier'\n\nconst { simulationTask } = useRapier()\n\nuseTask(\n  () => {\n    // E.g. interact with the physics world here\n  },\n  {\n    before: simulationStage\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Street Art Project Metadata in Markdown\nDESCRIPTION: Frontmatter configuration for a street art project, containing image, name, live link, repository, description, and size details\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/showcase/street-art copy 2.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nimage: 'https://images.unsplash.com/photo-1619993083831-687eaf87c98e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1632&q=80'\nname: 'Street art'\nlive: 'https://unsplash.com/t/street-photography'\nrepo: 'https://github.com/threlte/threlte/pulls?q=is%3APR+is%3Aopen+sort%3Aupdated-desc'\ndescription: 'New exciting project made with threlte'\nsize: 'large'\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Canvas Size in Threlte 8\nDESCRIPTION: Demonstrates how to set a specific size for the Canvas component by wrapping it in an HTML element with desired dimensions.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/learn/advanced/migration-guides.mdx#2025-04-22_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<div style=\"width: 500px; height: 300px;\">\n  <Canvas>\n    <Scene />\n  </Canvas>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Example Component in MDX\nDESCRIPTION: Demonstrates how to use the Example component to render examples from the src/examples folder with various options.\nSOURCE: https://github.com/threlte/threlte.git/blob/main/apps/docs/src/content/reference/docs/docs.mdx#2025-04-22_snippet_8\n\nLANGUAGE: mdx\nCODE:\n```\n<Example path=\"core/use-frame\" />\n```"
  }
]