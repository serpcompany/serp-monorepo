[
  {
    "owner": "restic",
    "repo": "restic",
    "content": "TITLE: Initializing a Restic Backup Repository\nDESCRIPTION: Creates a new restic repository at a specified location. This command initializes the repository structure and sets up encryption with a password.\n\nLANGUAGE: bash\nCODE:\n```\n$ restic init --repo /tmp/backup\nenter password for new backend:\nenter password again:\ncreated restic backend 085b3c76b9 at /tmp/backup\nPlease note that knowledge of your password is required to access the repository.\nLosing your password means that your data is irrecoverably lost.\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Restic\nDESCRIPTION: Defines the essential environment variables needed for restic to work: RESTIC_REPOSITORY for the backup location and RESTIC_PASSWORD for repository encryption.\n\nLANGUAGE: console\nCODE:\n```\nexport RESTIC_REPOSITORY=/srv/restic-repo\nexport RESTIC_PASSWORD=some-strong-password\n```\n\n----------------------------------------\n\nTITLE: Initializing a Local Repository in Restic\nDESCRIPTION: Command to create a new local restic repository at /srv/restic-repo with password protection. The repository will store backup data and encryption keys.\n\nLANGUAGE: console\nCODE:\n```\n$ restic init --repo /srv/restic-repo\nenter password for new repository:\nenter password again:\ncreated restic repository 085b3c76b9 at /srv/restic-repo\nPlease note that knowledge of your password is required to access the repository.\nLosing your password means that your data is irrecoverably lost.\n```\n\n----------------------------------------\n\nTITLE: Creating a Backup with Restic\nDESCRIPTION: Backs up the ~/work directory to the repository. This creates a snapshot containing all files from the specified directory.\n\nLANGUAGE: console\nCODE:\n```\nrestic backup ~/work\n```\n\n----------------------------------------\n\nTITLE: Creating a Second Backup with Deduplication\nDESCRIPTION: Shows how restic performs deduplication when backing up the same directory a second time. No new data is added to the repository as all files remain unchanged.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo --verbose backup ~/work\nopen repository\nenter password for repository:\nrepository a14e5863 opened (version 2, compression level auto)\nload index files\nusing parent snapshot 40dc1520\nstart scan on [/home/user/work]\nstart backup on [/home/user/work]\nscan finished in 1.881s: 5307 files, 1.720 GiB\n\nFiles:           0 new,     0 changed,  5307 unmodified\nDirs:            0 new,     0 changed,  1867 unmodified\nAdded to the repository: 0 B   (0 B   stored)\n\nprocessed 5307 files, 1.720 GiB in 0:03\nsnapshot 79766175 saved\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Backup with Restic\nDESCRIPTION: Demonstrates creating an initial backup of a directory with verbose output. The example shows the command structure, password prompt, and detailed output statistics including data deduplication information.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo --verbose backup ~/work\nopen repository\nenter password for repository:\nrepository a14e5863 opened (version 2, compression level auto)\nload index files\nstart scan on [/home/user/work]\nstart backup on [/home/user/work]\nscan finished in 1.837s: 5307 files, 1.720 GiB\n\nFiles:        5307 new,     0 changed,     0 unmodified\nDirs:         1867 new,     0 changed,     0 unmodified\nAdded to the repository: 1.200 GiB (1.103 GiB stored)\n\nprocessed 5307 files, 1.720 GiB in 0:12\nsnapshot 40dc1520 saved\n```\n\n----------------------------------------\n\nTITLE: Restoring a Specific Snapshot in restic\nDESCRIPTION: This command restores the contents of a snapshot with ID 79766175 to the /tmp/restore-work directory. The user is prompted to enter the password for the repository.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo restore 79766175 --target /tmp/restore-work\nenter password for repository:\nrestoring <Snapshot of [/home/user/work] at 2015-05-08 21:40:19.884408621 +0200 CEST> to /tmp/restore-work\n```\n\n----------------------------------------\n\nTITLE: Listing Snapshots in Restic Repository\nDESCRIPTION: Shows how to use the 'snapshots' command to list all available snapshots in a Restic repository, displaying their IDs, dates, hosts, tags, and directories.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo snapshots\nenter password for repository:\nID        Date                 Host      Tags  Directory\n----------------------------------------------------------------------\n40dc1520  2015-05-08 21:38:30  kasimir         /home/user/work\n79766175  2015-05-08 21:40:19  kasimir         /home/user/work\nbdbd3439  2015-05-08 21:45:17  luigi           /home/art\n590c8fc8  2015-05-08 21:47:38  kazik           /srv\n9f0bc19e  2015-05-08 21:46:11  luigi           /srv\n```\n\n----------------------------------------\n\nTITLE: Initializing a Restic Repository\nDESCRIPTION: Creates a new restic repository at the location specified by the RESTIC_REPOSITORY environment variable. This is required before the first backup.\n\nLANGUAGE: console\nCODE:\n```\nrestic init\n```\n\n----------------------------------------\n\nTITLE: Creating a Backup with Restic\nDESCRIPTION: Performs a backup operation on a directory, storing the backup in a previously initialized repository. Shows the scanning process, progress details, and final snapshot information.\n\nLANGUAGE: bash\nCODE:\n```\n$ restic --repo /tmp/backup backup ~/work\nenter password for repository:\nscan [/home/user/work]\nscanned 764 directories, 1816 files in 0:00\n[0:29] 100.00%  54.732 MiB/s  1.582 GiB / 1.582 GiB  2580 / 2580 items  0 errors  ETA 0:00\nduration: 0:29, 54.47MiB/s\nsnapshot 40dc1520 saved\n```\n\n----------------------------------------\n\nTITLE: Checking Repository Initialization with Console Command\nDESCRIPTION: Shows how to verify if a restic repository is already initialized by using the 'cat config' command. If the repository doesn't exist, restic returns exit code 10 (since version 0.17.0) or 1 (in older versions).\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo cat config\nFatal: repository does not exist: unable to open config file: stat /srv/restic-repo/config: no such file or directory\nIs there a repository at the following location?\n/srv/restic-repo\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Restic with AWS S3\nDESCRIPTION: Bash commands to configure environment variables required for restic to connect to an AWS S3 bucket. This includes unsetting history file for security, setting AWS region, repository location, credentials, and encryption password.\n\nLANGUAGE: bash\nCODE:\n```\n$ unset HISTFILE\n$ export AWS_DEFAULT_REGION=\"eu-west-1\"\n$ export RESTIC_REPOSITORY=\"s3:https://s3.amazonaws.com/restic-demo\"\n$ export AWS_ACCESS_KEY_ID=\"AKIAJAJSLTZCAZ4SRI5Q\"\n$ export AWS_SECRET_ACCESS_KEY=\"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\"\n$ export RESTIC_PASSWORD=\"I9n7G7G0ZpDWA3GOcJbIuwQCGvGUBkU5\"\n```\n\n----------------------------------------\n\nTITLE: Self-updating Restic using the built-in command\nDESCRIPTION: Commands showing how to use restic's self-update feature to upgrade to the latest version, including version checking before and after update.\n\nLANGUAGE: console\nCODE:\n```\n$ restic version\nrestic 0.9.3 compiled with go1.11.2 on linux/amd64\n\n$ restic self-update\nfind latest release of restic at GitHub\nlatest version is 0.9.4\ndownload file SHA256SUMS\ndownload SHA256SUMS\ndownload file SHA256SUMS\ndownload SHA256SUMS.asc\nGPG signature verification succeeded\ndownload restic_0.9.4_linux_amd64.bz2\ndownloaded restic_0.9.4_linux_amd64.bz2\nsaved 12115904 bytes in ./restic\nsuccessfully updated restic to version 0.9.4\n\n$ restic version\nrestic 0.9.4 compiled with go1.12.1 on linux/amd64\n```\n\n----------------------------------------\n\nTITLE: Using Double Verbose Mode to Show Detailed Backup Information\nDESCRIPTION: Shows how to use the double verbose flag to display detailed information about each file during backup. This example includes backing up a modified file and shows the detailed changes detected.\n\nLANGUAGE: console\nCODE:\n```\n$ echo 'more data foo bar' >> ~/work.txt\n\n$ restic -r /srv/restic-repo --verbose --verbose backup ~/work.txt\nopen repository\nenter password for repository:\nlock repository\nload index files\nusing parent snapshot f3f8d56b\nstart scan\nstart backup\nscan finished in 2.115s\nmodified  /home/user/work.txt, saved in 0.007s (22 B added)\nmodified  /home/user/, saved in 0.008s (0 B added, 378 B metadata)\nmodified  /home/, saved in 0.009s (0 B added, 375 B metadata)\nprocessed 22 B in 0:02\nFiles:           0 new,     1 changed,     0 unmodified\nDirs:            0 new,     2 changed,     0 unmodified\nData Blobs:      1 new\nTree Blobs:      3 new\nAdded:      1.116 KiB\nsnapshot 8dc503fc saved\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Restic Backup Tool\nDESCRIPTION: A complete list of environment variables supported by restic to configure repository access, authentication for various cloud storage backends, and general behavior settings. These variables can be used instead of their command-line equivalents.\n\nLANGUAGE: console\nCODE:\n```\nRESTIC_REPOSITORY_FILE              Name of file containing the repository location (replaces --repository-file)\nRESTIC_REPOSITORY                   Location of repository (replaces -r)\nRESTIC_PASSWORD_FILE                Location of password file (replaces --password-file)\nRESTIC_PASSWORD                     The actual password for the repository\nRESTIC_PASSWORD_COMMAND             Command printing the password for the repository to stdout\nRESTIC_KEY_HINT                     ID of key to try decrypting first, before other keys\nRESTIC_CACERT                       Location(s) of certificate file(s), comma separated if multiple (replaces --cacert)\nRESTIC_TLS_CLIENT_CERT              Location of TLS client certificate and private key (replaces --tls-client-cert)\nRESTIC_CACHE_DIR                    Location of the cache directory\nRESTIC_COMPRESSION                  Compression mode (only available for repository format version 2)\nRESTIC_HOST                         Only consider snapshots for this host / Set the hostname for the snapshot manually (replaces --host)\nRESTIC_PROGRESS_FPS                 Frames per second by which the progress bar is updated\nRESTIC_PACK_SIZE                    Target size for pack files\nRESTIC_READ_CONCURRENCY             Concurrency for file reads\n\nTMPDIR                              Location for temporary files (except Windows)\nTMP                                 Location for temporary files (only Windows)\n\nAWS_ACCESS_KEY_ID                   Amazon S3 access key ID\nAWS_SECRET_ACCESS_KEY               Amazon S3 secret access key\nAWS_SESSION_TOKEN                   Amazon S3 temporary session token\nAWS_DEFAULT_REGION                  Amazon S3 default region\nAWS_PROFILE                         Amazon credentials profile (alternative to specifying key and region)\nAWS_SHARED_CREDENTIALS_FILE         Location of the AWS CLI shared credentials file (default: ~/.aws/credentials)\nRESTIC_AWS_ASSUME_ROLE_ARN          Amazon IAM Role ARN to assume using discovered credentials\nRESTIC_AWS_ASSUME_ROLE_SESSION_NAME Session Name to use with the role assumption\nRESTIC_AWS_ASSUME_ROLE_EXTERNAL_ID  External ID to use with the role assumption\nRESTIC_AWS_ASSUME_ROLE_POLICY       Inline Amazion IAM session policy\nRESTIC_AWS_ASSUME_ROLE_REGION       Region to use for IAM calls for the role assumption (default: us-east-1)\nRESTIC_AWS_ASSUME_ROLE_STS_ENDPOINT URL to the STS endpoint (default is determined based on RESTIC_AWS_ASSUME_ROLE_REGION). You generally do not need to set this, advanced use only.\n\nAZURE_ACCOUNT_NAME                  Account name for Azure\nAZURE_ACCOUNT_KEY                   Account key for Azure\nAZURE_ACCOUNT_SAS                   Shared access signatures (SAS) for Azure\nAZURE_ENDPOINT_SUFFIX               Endpoint suffix for Azure Storage (default: core.windows.net)\nAZURE_FORCE_CLI_CREDENTIAL          Force the use of Azure CLI credentials for authentication\n\nB2_ACCOUNT_ID                       Account ID or applicationKeyId for Backblaze B2\nB2_ACCOUNT_KEY                      Account Key or applicationKey for Backblaze B2\n\nGOOGLE_PROJECT_ID                   Project ID for Google Cloud Storage\nGOOGLE_APPLICATION_CREDENTIALS      Application Credentials for Google Cloud Storage (e.g. $HOME/.config/gs-secret-restic-key.json)\n\nOS_AUTH_URL                         Auth URL for keystone authentication\nOS_REGION_NAME                      Region name for keystone authentication\nOS_USERNAME                         Username for keystone authentication\nOS_USER_ID                          User ID for keystone v3 authentication\nOS_PASSWORD                         Password for keystone authentication\nOS_TENANT_ID                        Tenant ID for keystone v2 authentication\nOS_TENANT_NAME                      Tenant name for keystone v2 authentication\n\nOS_USER_DOMAIN_NAME                 User domain name for keystone authentication\nOS_USER_DOMAIN_ID                   User domain ID for keystone v3 authentication\nOS_PROJECT_NAME                     Project name for keystone authentication\nOS_PROJECT_DOMAIN_NAME              Project domain name for keystone authentication\nOS_PROJECT_DOMAIN_ID                Project domain ID for keystone v3 authentication\nOS_TRUST_ID                         Trust ID for keystone v3 authentication\n\nOS_APPLICATION_CREDENTIAL_ID        Application Credential ID (keystone v3)\nOS_APPLICATION_CREDENTIAL_NAME      Application Credential Name (keystone v3)\nOS_APPLICATION_CREDENTIAL_SECRET    Application Credential Secret (keystone v3)\n\nOS_STORAGE_URL                      Storage URL for token authentication\nOS_AUTH_TOKEN                       Auth token for token authentication\n\nRCLONE_BWLIMIT                      rclone bandwidth limit\n\nRESTIC_REST_USERNAME                Restic REST Server username\nRESTIC_REST_PASSWORD                Restic REST Server password\n\nST_AUTH                             Auth URL for keystone v1 authentication\nST_USER                             Username for keystone v1 authentication\nST_KEY                              Password for keystone v1 authentication\n```\n\n----------------------------------------\n\nTITLE: Copying Snapshots Between Restic Repositories\nDESCRIPTION: Shows how to copy snapshots from one repository to another using the 'copy' command with '--from-repo' flag. This transfers snapshots while preserving their metadata.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo-copy copy --from-repo /srv/restic-repo\nrepository d6504c63 opened successfully\nrepository 3dd0878c opened successfully\n\nsnapshot 410b18a2 of [/home/user/work] at 2020-06-09 23:15:57.305305 +0200 CEST by user@kasimir\n  copy started, this may take a while...\nsnapshot 7a746a07 saved\n\nsnapshot 4e5d5487 of [/home/user/work] at 2020-05-01 22:44:07.012113 +0200 CEST by user@kasimir\nskipping snapshot 4e5d5487, was already copied to snapshot 50eb62b7\n```\n\n----------------------------------------\n\nTITLE: Creating Tagged Backups with Restic\nDESCRIPTION: Creates a backup with multiple tags that can be used later for snapshot identification and management with the forget command.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo backup --tag projectX --tag foo --tag bar ~/work\n[...]\n```\n\n----------------------------------------\n\nTITLE: Performing a Dry Run Restore in restic\nDESCRIPTION: This command performs a dry run restore of the latest snapshot with verbose output, showing what would be restored without actually writing any files. This helps preview the restore operation.\n\nLANGUAGE: console\nCODE:\n```\n$ restic restore --target /tmp/restore-work --dry-run --verbose=2 latest\n\nunchanged /restic/internal/walker/walker.go with size 2.812 KiB\nupdated   /restic/internal/walker/walker_test.go with size 11.143 KiB\nrestored  /restic/restic with size 35.318 MiB\nrestored  /restic\n[...]\nSummary: Restored 9072 files/dirs (153.597 MiB) in 0:00\n```\n\n----------------------------------------\n\nTITLE: Checking Repository Integrity in Restic\nDESCRIPTION: Verifies the integrity of the repository's metadata or optionally performs a full data check. This ensures the backup data hasn't been corrupted.\n\nLANGUAGE: console\nCODE:\n```\nrestic check\n# or full data:\nrestic check --read-data\n```\n\n----------------------------------------\n\nTITLE: Combined forget and prune with Policy-Based Retention\nDESCRIPTION: Demonstrates using the 'forget' command with the '--prune' option and a retention policy to automate the two-step removal process, keeping only the last snapshot.\n\nLANGUAGE: console\nCODE:\n```\n$ restic forget --keep-last 1 --prune\nsnapshots for host mopped, directories /home/user/work:\n\nkeep 1 snapshots:\nID        Date                 Host        Tags        Directory\n----------------------------------------------------------------------\n4bba301e  2017-02-21 10:49:18  mopped                  /home/user/work\n\nremove 1 snapshots:\nID        Date                 Host        Tags        Directory\n----------------------------------------------------------------------\n8c02b94b  2017-02-21 10:48:33  mopped                  /home/user/work\n\n1 snapshots have been removed, running prune\nloading all snapshots...\nloading indexes...\nfinding data that is still in use for 1 snapshots\n[0:00] 100.00%  1 / 1 snapshots\nsearching used packs...\ncollecting packs for deletion and repacking\n[0:00] 100.00%  5 / 5 packs processed\n\nto repack:           69 blobs / 1.078 MiB\nthis removes         67 blobs / 1.047 MiB\nto delete:            7 blobs / 25.726 KiB\ntotal prune:         74 blobs / 1.072 MiB\nremaining:           16 blobs / 38.003 KiB\nunused size after prune: 0 B (0.00% of remaining size)\n\nrepacking packs\n[0:00] 100.00%  2 / 2 packs repacked\nrebuilding index\n[0:00] 100.00%  3 / 3 packs processed\ndeleting obsolete index files\n[0:00] 100.00%  3 / 3 files deleted\nremoving 3 old packs\n[0:00] 100.00%  3 / 3 files deleted\ndone\n```\n\n----------------------------------------\n\nTITLE: Creating Test Data and Performing Backup with Restic\nDESCRIPTION: Commands to create a test file, back it up with restic, and view the resulting snapshot. This demonstrates the basic backup functionality of restic with an S3 repository.\n\nLANGUAGE: bash\nCODE:\n```\n$ dd if=/dev/urandom bs=1M count=10 of=test.bin\n10+0 records in\n10+0 records out\n10485760 bytes (10 MB, 10 MiB) copied, 0,0891322 s, 118 MB/s\n\n$ restic backup test.bin\nscan [/home/philip/restic-demo/test.bin]\nscanned 0 directories, 1 files in 0:00\n[0:04] 100.00%  2.500 MiB/s  10.000 MiB / 10.000 MiB  1 / 1 items ... ETA 0:00 \nduration: 0:04, 2.47MiB/s\nsnapshot 10fdbace saved\n\n$ restic snapshots\nID        Date                 Host        Tags        Directory\n----------------------------------------------------------------------\n10fdbace  2017-03-26 16:41:50  blackbox                /home/philip/restic-demo/test.bin\n```\n\n----------------------------------------\n\nTITLE: Checking a Restic Repository for Errors\nDESCRIPTION: This command checks the repository integrity and identifies damaged or missing files. The --read-data flag ensures all repository data is downloaded and verified, which is important for a thorough check.\n\nLANGUAGE: console\nCODE:\n```\n$ restic check --read-data\n\nusing temporary cache in /tmp/restic-check-cache-1418935501\nrepository 12345678 opened (version 2, compression level auto)\ncreated new cache in /tmp/restic-check-cache-1418935501\ncreate exclusive lock for repository\nload indexes\ncheck all packs\ncheck snapshots, trees and blobs\nerror for tree 7ef8ebab:\n  id 7ef8ebabc59aadda1a237d23ca7abac487b627a9b86508aa0194690446ff71f6 not found in repository\n[0:02] 100.00%  7 / 7 snapshots\nread all data\n[0:05] 100.00%  25 / 25 packs\nFatal: repository contains errors\n```\n\n----------------------------------------\n\nTITLE: Cross-compiling Restic for different platforms\nDESCRIPTION: Commands demonstrating how to cross-compile restic for Windows, FreeBSD, ARM Linux, and Solaris using Go's cross-compilation capabilities.\n\nLANGUAGE: console\nCODE:\n```\n$ go run build.go --goos windows --goarch amd64\n\n$ go run build.go --goos freebsd --goarch 386\n\n$ go run build.go --goos linux --goarch arm --goarm 6\n\n$ go run build.go --goos solaris --goarch amd64\n```\n\n----------------------------------------\n\nTITLE: Restoring a Single File from a Snapshot in restic\nDESCRIPTION: This command restores only a single file (/work/foo) from snapshot 79766175 to the target directory. The --include flag is used to specify which file to restore.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo restore 79766175 --target /tmp/restore-work --include /work/foo\nenter password for repository:\nrestoring <Snapshot of [/home/user/work] at 2015-05-08 21:40:19.884408621 +0200 CEST> to /tmp/restore-work\n```\n\n----------------------------------------\n\nTITLE: Setting Up PowerShell Completion for Restic\nDESCRIPTION: This code creates a PowerShell profile if it doesn't exist, generates Restic completion scripts, and adds them to the user profile. The script enables tab completion for Restic commands in PowerShell sessions.\n\nLANGUAGE: powershell\nCODE:\n```\n# Create profile if one does not exist\nPS> If (!(Test-Path $PROFILE.CurrentUserAllHosts)) {New-Item -Path $PROFILE.CurrentUserAllHosts -Force}\n\nPS> $ProfileDir = (Get-Item $PROFILE.CurrentUserAllHosts).Directory\n\n# Generate Restic completions in the same directory as the profile\nPS> restic generate --powershell-completion \"$ProfileDir\\restic-completion.ps1\"\n\n# Append to the profile file the command to load Restic completions\nPS> Add-Content -Path $PROFILE.CurrentUserAllHosts -Value \"`r`nImport-Module $ProfileDir\\restic-completion.ps1\"\n```\n\n----------------------------------------\n\nTITLE: Managing Repository Keys with Restic CLI\nDESCRIPTION: Demonstrates how to use the 'key' command to list, add, and manage repository access keys. Shows the workflow for listing existing keys, adding a new key, and verifying that multiple keys are available for the repository.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo key list\nenter password for repository:\n ID          User        Host        Created\n----------------------------------------------------------------------\n*eb78040b    username    kasimir   2015-08-12 13:29:57\n\n$ restic -r /srv/restic-repo key add\nenter password for repository:\nenter password for new key:\nenter password again:\nsaved new key as <Key of username@kasimir, created on 2015-08-12 13:35:05.316831933 +0200 CEST>\n\n$ restic -r /srv/restic-repo key list\nenter password for repository:\n ID          User        Host        Created\n----------------------------------------------------------------------\n 5c657874    username    kasimir   2015-08-12 13:35:05\n*eb78040b    username    kasimir   2015-08-12 13:29:57\n```\n\n----------------------------------------\n\nTITLE: Setting up group read-write access with setgid bit\nDESCRIPTION: These commands configure a restic repository for group read-write access by setting the setgid bit on directories and granting group read-write permissions.\n\nLANGUAGE: console\nCODE:\n```\n# find /srv/restic-repo -type d -exec chmod g+s '{}' \\;\n$ chmod -R g+rw /srv/restic-repo\n```\n\n----------------------------------------\n\nTITLE: Restic Backup Dry Run with Verbose Output\nDESCRIPTION: Running a backup in dry run mode with verbose output to see what would happen without actually modifying the repository. This example filters the output to show only added files.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo backup ~/work --dry-run -vv | grep \"added\"\nmodified  /plan.txt, saved in 0.000s (9.110 KiB added)\nmodified  /archive.tar.gz, saved in 0.140s (25.542 MiB added)\nWould be added to the repository: 25.551 MiB\n```\n\n----------------------------------------\n\nTITLE: Using skip-if-unchanged Option in Restic Backup\nDESCRIPTION: This example demonstrates using the --skip-if-unchanged option with restic backup command to avoid creating a new snapshot when files haven't changed. The command is run from within the target directory using a relative path.\n\nLANGUAGE: console\nCODE:\n```\n$ cd /home/user/work && restic -r /srv/restic-repo backup . --skip-if-unchanged\n\nopen repository\nenter password for repository:\nrepository a14e5863 opened (version 2, compression level auto)\nload index files\nusing parent snapshot 40dc1520\nstart scan on [.]\nstart backup on [.]\nscan finished in 1.814s: 5307 files, 1.720 GiB\n\nFiles:           0 new,     0 changed,  5307 unmodified\nDirs:            0 new,     0 changed,  1867 unmodified\nAdded to the repository: 0 B   (0 B   stored)\n\nprocessed 5307 files, 1.720 GiB in 0:03\nskipped creating snapshot\n```\n\n----------------------------------------\n\nTITLE: Setting Compression via Environment Variable\nDESCRIPTION: Configure compression settings using the RESTIC_COMPRESSION environment variable instead of command-line options.\n\nLANGUAGE: bash\nCODE:\n```\nRESTIC_COMPRESSION=max\n```\n\n----------------------------------------\n\nTITLE: Checking Repository Integrity with Complete Data Verification in Restic\nDESCRIPTION: Command to thoroughly check a Restic repository by reading all data files. This operation verifies the integrity of all pack files, which may incur higher bandwidth costs and take longer than the default check.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo check --read-data\n...\nload indexes\ncheck all packs\ncheck snapshots, trees and blobs\nread all data\n[0:00] 100.00%  3 / 3 items\nduration: 0:00\nno errors were found\n```\n\n----------------------------------------\n\nTITLE: Printing Files to Stdout with restic dump\nDESCRIPTION: This command demonstrates using the dump command to print a file (production.sql) from the latest snapshot directly to stdout, which is then piped to mysql. This allows direct use of backup data by other programs.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo dump latest production.sql | mysql\n```\n\n----------------------------------------\n\nTITLE: Disabling Backup Progress Estimation with --no-scan\nDESCRIPTION: Use the --no-scan option with the backup command to disable file scanning, which reduces I/O overhead for network file systems or FUSE mounts at the cost of not seeing progress estimation.\n\nLANGUAGE: bash\nCODE:\n```\nbackup --no-scan\n```\n\n----------------------------------------\n\nTITLE: Testing Forget Policy with Dry Run Option\nDESCRIPTION: Demonstrates using the --dry-run option with forget to preview which snapshots would be kept and which would be removed based on a daily retention policy.\n\nLANGUAGE: console\nCODE:\n```\n$ restic forget --keep-daily 4 --dry-run\nrepository f00c6e2a opened successfully\nApplying Policy: keep the last 4 daily snapshots\nkeep 4 snapshots:\nID        Time                 Host        Tags        Reasons         Paths\n-------------------------------------------------------------------------------\n8f8018c0  2019-10-27 11:00:00  mopped                  daily snapshot  /home/user/work\n59403279  2019-11-03 11:00:00  mopped                  daily snapshot  /home/user/work\ndfee9fb4  2019-11-10 11:00:00  mopped                  daily snapshot  /home/user/work\ne1ae2f40  2019-11-17 11:00:00  mopped                  daily snapshot  /home/user/work\n-------------------------------------------------------------------------------\n4 snapshots\n\nremove 8 snapshots:\nID        Time                 Host        Tags        Paths\n---------------------------------------------------------------\n0a1f9759  2019-09-01 11:00:00  mopped                  /home/user/work\n46cfe4d5  2019-09-08 11:00:00  mopped                  /home/user/work\nf6b1f037  2019-09-15 11:00:00  mopped                  /home/user/work\neb430a5d  2019-09-22 11:00:00  mopped                  /home/user/work\n8cf1cb9a  2019-09-29 11:00:00  mopped                  /home/user/work\n5d33b116  2019-10-06 11:00:00  mopped                  /home/user/work\nb9553125  2019-10-13 11:00:00  mopped                  /home/user/work\ne1a7b58b  2019-10-20 11:00:00  mopped                  /home/user/work\n---------------------------------------------------------------\n8 snapshots\n```\n\n----------------------------------------\n\nTITLE: Repairing Damaged Snapshots in Restic\nDESCRIPTION: This command repairs snapshots by removing inaccessible data and creating new snapshots with only the available data. The --forget flag automatically removes the original damaged snapshots after creating repaired versions.\n\nLANGUAGE: console\nCODE:\n```\n$ restic repair snapshots --forget\n\nsnapshot 6979421e of [/home/user/restic/restic] at 2022-11-02 20:59:18.617503315 +0100 CET by user@host\n  file \"/restic/internal/fuse/snapshots_dir.go\": removed missing content\n  file \"/restic/internal/restorer/restorer_unix_test.go\": removed missing content\n  file \"/restic/internal/walker/walker.go\": removed missing content\nsaved new snapshot 7b094cea\nremoved old snapshot 6979421e\n\nmodified 1 snapshots\n```\n\n----------------------------------------\n\nTITLE: Backing Up MySQL Database with Custom Filename\nDESCRIPTION: Creates a backup of a MySQL database with a custom filename using --stdin-filename to specify the name of the file in the snapshot.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo backup --stdin-filename production.sql --stdin-from-command -- mysqldump --host example mydb [...]\n```\n\n----------------------------------------\n\nTITLE: Initializing Restic Repository on Amazon S3\nDESCRIPTION: Command to initialize a new restic repository on Amazon S3. This creates the necessary directory structure and metadata in the specified S3 bucket.\n\nLANGUAGE: bash\nCODE:\n```\n$ restic init\ncreated restic backend b5c661a86a at s3:https://s3.amazonaws.com/restic-demo\n\nPlease note that knowledge of your password is required to access\nthe repository. Losing your password means that your data is\nirrecoverably lost.\n```\n\n----------------------------------------\n\nTITLE: Mounting a Repository with FUSE in restic\nDESCRIPTION: This command mounts the restic repository as a file system using FUSE, allowing you to browse the backup as a regular file system. This is useful for checking snapshot contents or restoring individual files.\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir /mnt/restic\n$ restic -r /srv/restic-repo mount /mnt/restic\nenter password for repository:\nNow serving /srv/restic-repo at /mnt/restic\nUse another terminal or tool to browse the contents of this folder.\nWhen finished, quit with Ctrl-c here or umount the mountpoint.\n```\n\n----------------------------------------\n\nTITLE: Building Restic Documentation with Python and Sphinx\nDESCRIPTION: Provides step-by-step instructions for setting up a virtual Python environment and building the Restic documentation using Sphinx.\n\nLANGUAGE: text\nCODE:\n```\n$ virtualenv venv # create virtual python environment\n$ source venv/bin/activate # activate the virtual environment\n$ cd doc\n$ pip install -r requirements.txt # install dependencies\n$ make html # build html documentation\n$ # open _build/html/index.html with your favorite browser\n```\n\n----------------------------------------\n\nTITLE: Building Restic from source using Git and Go\nDESCRIPTION: Commands to clone the restic repository from GitHub and build it using Go. Requires Go version 1.23 or later.\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/restic/restic\n[...]\n\n$ cd restic\n\n$ go run build.go\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Force CLI Credential Environment Variable\nDESCRIPTION: Example of setting the AZURE_FORCE_CLI_CREDENTIAL environment variable to force the use of Azure CLI credential, ignoring other credentials like managed identity.\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_FORCE_CLI_CREDENTIAL=true\n```\n\n----------------------------------------\n\nTITLE: Creating B2 Application Key with Limited Permissions\nDESCRIPTION: Command for creating a B2 application key with restricted permissions that allow hiding but not deleting files. This improves security by preventing attackers from deleting backups even if they gain access to the API key.\n\nLANGUAGE: bash\nCODE:\n```\nb2 create-key --bucket <bucketName> <keyName> listBuckets,readFiles,writeFiles,listFiles\n```\n\n----------------------------------------\n\nTITLE: Initializing an Amazon S3 Repository with Restic\nDESCRIPTION: Command to create a new restic repository in an Amazon S3 bucket. Creates the bucket if it doesn't exist in the specified region.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r s3:s3.us-east-1.amazonaws.com/bucket_name init\n```\n\n----------------------------------------\n\nTITLE: Running Restic Test Suite\nDESCRIPTION: Command to run all tests in the restic project to verify functionality.\n\nLANGUAGE: bash\nCODE:\n```\n$ go test ./...\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression Settings\nDESCRIPTION: Use the --compression option to control data compression. Options include 'auto' (default), 'max' (better compression at the cost of speed), or 'off' (disables compression).\n\nLANGUAGE: bash\nCODE:\n```\n--compression max\n```\n\n----------------------------------------\n\nTITLE: Analyzing Restic Performance with Profiling\nDESCRIPTION: Commands to collect and analyze CPU profile data using Go's profiling tools.\n\nLANGUAGE: bash\nCODE:\n```\n$ restic --cpu-profile . [...]\n$ go tool pprof -http localhost:12345 cpu.pprof\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Policy JSON for Restic S3 Access\nDESCRIPTION: JSON policy configuration that grants the necessary S3 permissions for restic to work with a specific bucket. It allows operations like DeleteObject, GetObject, PutObject for objects within the bucket, and ListBucket and GetBucketLocation for the bucket itself.\n\nLANGUAGE: json\nCODE:\n```\nService: S3\nAllow Actions: DeleteObject, GetObject, PutObject\nResources: arn:aws:s3:::restic-demo/*\n```\n\n----------------------------------------\n\nTITLE: Capturing and Analyzing Restic Memory Usage\nDESCRIPTION: Commands to capture and analyze heap statistics while restic is running using the listen-profile option.\n\nLANGUAGE: bash\nCODE:\n```\n$ restic --listen-profile localhost:12345 [...]\n$ curl http://localhost:12345/debug/pprof/heap -o heap.pprof\n$ go tool pprof -http localhost:12345 heap.pprof\n```\n\n----------------------------------------\n\nTITLE: Installing Restic on RHEL/CentOS Stream 8 & 9 from EPEL\nDESCRIPTION: Commands to install restic on RHEL/CentOS Stream 8 & 9 using dnf by first enabling the EPEL repository.\n\nLANGUAGE: console\nCODE:\n```\n$ dnf install epel-release\n$ dnf install restic\n```\n\n----------------------------------------\n\nTITLE: Checking Repository Health with Error Example\nDESCRIPTION: Example showing a corrupted repository with an integrity check that detects the issue.\n\nLANGUAGE: console\nCODE:\n```\n$ echo \"boom\" > /srv/restic-repo/index/de30f3231ca2e6a59af4aa84216dfe2ef7339c549dc11b09b84000997b139628\n```\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo --no-cache restore c23e491f --target /tmp/restore-work\n...\nFatal: unable to load index de30f323: load <index/de30f3231c>: invalid data returned\n```\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo check\n...\nload indexes\nerror: error loading index de30f3231ca2e6a59af4aa84216dfe2ef7339c549dc11b09b84000997b139628: LoadRaw(<index/de30f3231c>): invalid data returned\n\nThe repository index is damaged and must be repaired. You must run `restic repair index' to correct this.\n\nFatal: repository contains errors\n```\n\n----------------------------------------\n\nTITLE: Installing Restic on Solus using eopkg\nDESCRIPTION: Command to install restic on Solus using the eopkg package manager from the official repository.\n\nLANGUAGE: console\nCODE:\n```\n$ eopkg install restic\n```\n\n----------------------------------------\n\nTITLE: Backing Up Multiple Filesystems with One-File-System Option\nDESCRIPTION: Example showing how to back up multiple specific filesystems while still using the --one-file-system option to prevent crossing into other filesystems.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo backup --one-file-system / /media/usb\n```\n\n----------------------------------------\n\nTITLE: Pulling Restic Docker container from Docker Hub\nDESCRIPTION: Command to pull the official restic Docker container from Docker Hub.\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull restic/restic\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Connections\nDESCRIPTION: Set the number of concurrent connections to a backend using the -o parameter. The default is 5 connections for most backends and 2 for the local backend.\n\nLANGUAGE: bash\nCODE:\n```\n-o rest.connections=5\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasabi S3 Storage with Restic\nDESCRIPTION: Commands to set AWS credentials environment variables for Wasabi cloud storage and initialize a restic repository using Wasabi's S3-compatible API.\n\nLANGUAGE: console\nCODE:\n```\n$ export AWS_ACCESS_KEY_ID=<YOUR-WASABI-ACCESS-KEY-ID>\n$ export AWS_SECRET_ACCESS_KEY=<YOUR-WASABI-SECRET-ACCESS-KEY>\n$ restic -r s3:https://<WASABI-SERVICE-URL>/<WASABI-BUCKET-NAME> init\n```\n\n----------------------------------------\n\nTITLE: Configuring Alibaba Cloud OSS with Restic\nDESCRIPTION: Commands to set AWS credentials environment variables for Alibaba Cloud Object Storage Service and initialize a restic repository with specific DNS bucket lookup and region options.\n\nLANGUAGE: console\nCODE:\n```\n$ export AWS_ACCESS_KEY_ID=<YOUR-OSS-ACCESS-KEY-ID>\n$ export AWS_SECRET_ACCESS_KEY=<YOUR-OSS-SECRET-ACCESS-KEY>\n$ restic -o s3.bucket-lookup=dns -o s3.region=<OSS-REGION> -r s3:https://<OSS-ENDPOINT>/<OSS-BUCKET-NAME> init\n```\n\n----------------------------------------\n\nTITLE: Using Exclude Options with Restic Backup\nDESCRIPTION: Example command using multiple exclude options - both inline patterns with --exclude and patterns from a file with --exclude-file. This will exclude all .c files and patterns defined in excludes.txt.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo backup ~/work --exclude=\"*.c\" --exclude-file=excludes.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Backblaze B2 Credentials\nDESCRIPTION: Commands to set Backblaze B2 credentials environment variables for authenticating with B2 before using it as a restic backend.\n\nLANGUAGE: console\nCODE:\n```\n$ export B2_ACCOUNT_ID=<MY_APPLICATION_KEY_ID>\n$ export B2_ACCOUNT_KEY=<MY_APPLICATION_KEY>\n```\n\n----------------------------------------\n\nTITLE: Copying Snapshots Between Repositories with Filtering\nDESCRIPTION: Example of using the copy command to transfer snapshots filtered by host, path, and tags from one repository to another.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo-copy copy --from-repo /srv/restic-repo --host luigi --path /srv --tag foo,bar\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Blob Storage Account Name for Restic\nDESCRIPTION: Command to export the Azure Blob Storage account name as an environment variable for restic to use.\n\nLANGUAGE: console\nCODE:\n```\n$ export AZURE_ACCOUNT_NAME=<ACCOUNT_NAME>\n```\n\n----------------------------------------\n\nTITLE: Restoring from a Specific Subfolder in a Snapshot\nDESCRIPTION: This command demonstrates the snapshot:subfolder syntax, restoring only the /work subfolder from snapshot 79766175 and including only files matching the /foo pattern within that subfolder.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo restore 79766175:/work --target /tmp/restore-work --include /foo\nenter password for repository:\nrestoring <Snapshot of [/home/user/work] at 2015-05-08 21:40:19.884408621 +0200 CEST> to /tmp/restore-work\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud Storage Credentials for Restic\nDESCRIPTION: Commands to export Google Cloud Project ID and path to service account JSON credentials file for authentication with Google Cloud Storage.\n\nLANGUAGE: console\nCODE:\n```\n$ export GOOGLE_PROJECT_ID=123123123123\n$ export GOOGLE_APPLICATION_CREDENTIALS=$HOME/.config/gs-secret-restic-key.json\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud Storage Access Token for Restic\nDESCRIPTION: Command to use a specific Google Cloud access token for authentication. This disables all other authentication mechanisms and requires at least the devstorage.read_write scope.\n\nLANGUAGE: console\nCODE:\n```\n$ export GOOGLE_ACCESS_TOKEN=ya29.a0AfH6SMC78...\n```\n\n----------------------------------------\n\nTITLE: Repairing a Restic Repository Index\nDESCRIPTION: The repair index command rebuilds the repository index by scanning all pack files and removing references to missing files. This is a crucial first step in the repository repair process as other operations depend on a correct index.\n\nLANGUAGE: console\nCODE:\n```\n$ restic repair index\n\nrepository a14e5863 opened (version 2, compression level auto)\nloading indexes...\ngetting pack files to read...\nremoving not found pack file 83ad44f59b05f6bce13376b022ac3194f24ca19e7a74926000b6e316ec6ea5a4\nrebuilding index\n[0:00] 100.00%  27 / 27 packs processed\ndeleting obsolete index files\n[0:00] 100.00%  3 / 3 files deleted\ndone\n```\n\n----------------------------------------\n\nTITLE: Initializing a Restic Repository in Google Cloud Storage\nDESCRIPTION: Command to initialize a new restic repository in a Google Cloud Storage bucket called 'foo' at the root path.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r gs:foo:/ init\nenter password for new repository:\nenter password again:\n\ncreated restic repository bde47d6254 at gs:foo/\n[...]\n```\n\n----------------------------------------\n\nTITLE: Restoring Latest Backup with Host and Path Filters in restic\nDESCRIPTION: This command restores the latest backup for a specific host (luigi) and path (/home/art) to the target directory /tmp/restore-art. This allows for selective restoration based on host and path filters.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo restore latest --target /tmp/restore-art --path \"/home/art\" --host luigi\nenter password for repository:\nrestoring <Snapshot of [/home/art] at 2015-05-08 21:45:17.884408621 +0200 CEST> to /tmp/restore-art\n```\n\n----------------------------------------\n\nTITLE: Initializing a Restic Repository in Subfolder of rclone B2 Remote\nDESCRIPTION: Command to initialize a new restic repository in a subfolder path of a Backblaze B2 bucket using rclone as the backend.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r rclone:b2prod:yggdrasil/foo/bar/baz init\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple File Selection Methods in Restic\nDESCRIPTION: Demonstrates how to combine different file selection methods (--files-from, --files-from-raw) with additional file arguments in a single backup command.\n\nLANGUAGE: console\nCODE:\n```\n$ restic backup --files-from /tmp/files_to_backup /tmp/some_additional_file\n$ restic backup --files-from /tmp/glob-pattern --files-from-raw /tmp/generated-list /tmp/some_additional_file\n```\n\n----------------------------------------\n\nTITLE: Listing Files in a Restic Repository via rclone\nDESCRIPTION: Example showing what the file structure looks like when listing files in a newly initialized restic repository using rclone directly.\n\nLANGUAGE: console\nCODE:\n```\n$ rclone ls b2prod:yggdrasil/foo/bar/baz\n    155 bar/baz/config\n    448 bar/baz/keys/4bf9c78049de689d73a56ed0546f83b8416795295cda12ec7fb9465af3900b44\n```\n\n----------------------------------------\n\nTITLE: Setting Bandwidth Limit for rclone with Restic\nDESCRIPTION: Command to set a bandwidth limit for rclone when used with restic by exporting the RCLONE_BWLIMIT environment variable.\n\nLANGUAGE: console\nCODE:\n```\n$ export RCLONE_BWLIMIT=1M\n```\n\n----------------------------------------\n\nTITLE: Checking Repository Subset by Partition in Restic\nDESCRIPTION: Commands to check specific partitions of a repository's pack files. This divides all pack files into logical groups (here 5 groups) and checks one group at a time, allowing for incremental verification of large repositories.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo check --read-data-subset=1/5\n$ restic -r /srv/restic-repo check --read-data-subset=2/5\n$ restic -r /srv/restic-repo check --read-data-subset=3/5\n$ restic -r /srv/restic-repo check --read-data-subset=4/5\n$ restic -r /srv/restic-repo check --read-data-subset=5/5\n```\n\n----------------------------------------\n\nTITLE: Using Remote rclone Instance with Restic via SSH\nDESCRIPTION: Example showing how to use restic with a remote rclone instance running on another server via SSH.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -o rclone.program=\"ssh user@remotehost rclone\" -r rclone:b2:foo/bar\n```\n\n----------------------------------------\n\nTITLE: Running Prune to Remove Unreferenced Data\nDESCRIPTION: Shows how to reclaim storage space by using the 'prune' command to remove data that is no longer referenced by any snapshots after the forget operation.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo prune\nenter password for repository:\nrepository 33002c5e opened successfully\nloading all snapshots...\nloading indexes...\nfinding data that is still in use for 4 snapshots\n[0:00] 100.00%  4 / 4 snapshots\nsearching used packs...\ncollecting packs for deletion and repacking\n[0:00] 100.00%  5 / 5 packs processed\n\nto repack:            69 blobs / 1.078 MiB\nthis removes:         67 blobs / 1.047 MiB\nto delete:             7 blobs / 25.726 KiB\ntotal prune:          74 blobs / 1.072 MiB\nremaining:            16 blobs / 38.003 KiB\nunused size after prune: 0 B (0.00% of remaining size)\n\nrepacking packs\n[0:00] 100.00%  2 / 2 packs repacked\nrebuilding index\n[0:00] 100.00%  3 / 3 packs processed\ndeleting obsolete index files\n[0:00] 100.00%  3 / 3 files deleted\nremoving 3 old packs\n[0:00] 100.00%  3 / 3 files deleted\ndone\n```\n\n----------------------------------------\n\nTITLE: Using restic with rclone via SSH\nDESCRIPTION: This command demonstrates how to use restic with rclone through SSH to a remote host, allowing encrypted backups to cloud storage like B2 while keeping credentials on the remote host.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -o rclone.program=\"ssh user@host\" -r rclone:x\n```\n\n----------------------------------------\n\nTITLE: Generating Restic autocompletion scripts and man pages\nDESCRIPTION: Help output showing how to use restic's generate command to create man pages and autocompletion scripts for various shells.\n\nLANGUAGE: console\nCODE:\n```\n$ ./restic generate --help\n\nThe \"generate\" command writes automatically generated files (like the man pages\nand the auto-completion files for bash, fish, zsh and powershell).\n\nUsage:\n  restic generate [flags] [command]\n\nFlags:\n      --bash-completion file   write bash completion file\n      --fish-completion file   write fish completion file\n  -h, --help                   help for generate\n      --man directory          write man pages to directory\n      --powershell-completion  write powershell completion file\n      --zsh-completion file    write zsh completion file\n```\n\n----------------------------------------\n\nTITLE: Creating a repository with empty password\nDESCRIPTION: This command demonstrates how to initialize a restic repository with an empty password using the --insecure-no-password option, which is available since restic 0.17.0.\n\nLANGUAGE: console\nCODE:\n```\nrestic init --insecure-no-password\n```\n\n----------------------------------------\n\nTITLE: Backing Up Individual Files\nDESCRIPTION: Demonstrates how to back up a single file rather than an entire directory. This example shows a simpler output format without the verbose flag.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo backup ~/work.txt\nenter password for repository:\nsnapshot 249d0210 saved\n```\n\n----------------------------------------\n\nTITLE: Filtering Files by Directory in Restic Snapshot\nDESCRIPTION: Shows how to filter file listings by directory path when listing the contents of a snapshot. This displays only files directly in the specified directory.\n\nLANGUAGE: console\nCODE:\n```\n$ restic ls latest /home\n\nsnapshot 073a90db of [/home/user/work.txt] filtered by [/home] at 2024-01-21 16:51:18.474558607 +0100 CET):\n/home\n/home/user\n```\n\n----------------------------------------\n\nTITLE: Configuring VSS Timeout and Mount Point Exclusion on Windows\nDESCRIPTION: Shows how to customize VSS (Volume Shadow Copy Service) behavior on Windows by setting a timeout and disabling auto-snapshotting of mount points. This ensures proper backup of locked files.\n\nLANGUAGE: console\nCODE:\n```\n-o vss.timeout=2m30s -o vss.exclude-all-mount-points=true\n```\n\n----------------------------------------\n\nTITLE: Setting Pack Size for Large Repositories\nDESCRIPTION: Use the --pack-size option to configure larger pack sizes, which can reduce the number of files in the repository and improve upload performance for large repositories.\n\nLANGUAGE: bash\nCODE:\n```\n--pack-size\n```\n\n----------------------------------------\n\nTITLE: Using One-File-System Option with Restic Backup\nDESCRIPTION: Example demonstrating the --one-file-system option which prevents restic from crossing filesystem boundaries. This is useful to avoid backing up mounted filesystems.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo backup --one-file-system /\n```\n\n----------------------------------------\n\nTITLE: Exclude File Example for Restic Backup\nDESCRIPTION: Example content of an excludes.txt file that can be used with restic's --exclude-file option. This file contains patterns to exclude Go files and directories named 'bar' under 'foo'.\n\nLANGUAGE: text\nCODE:\n```\n# exclude go-files\n*.go\n# exclude foo/x/y/z/bar foo/x/bar foo/bar\nfoo/**/bar\n```\n\n----------------------------------------\n\nTITLE: Backing Up Files from a Raw File List\nDESCRIPTION: Uses restic to backup files listed in a file created with the --files-from-raw option, which interprets filenames as raw bytes without pattern expansion.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo backup --files-from-raw /tmp/files_to_backup\n```\n\n----------------------------------------\n\nTITLE: Listing Snapshots in Restic Repository\nDESCRIPTION: Shows how to list all snapshots stored in a restic repository using the 'snapshots' command. The output displays snapshot ID, creation date, host, tags, directory path, and size.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo snapshots\nenter password for repository:\nID        Date                 Host    Tags   Directory        Size\n-------------------------------------------------------------------------\n40dc1520  2015-05-08 21:38:30  kasimir        /home/user/work  20.643GiB\n79766175  2015-05-08 21:40:19  kasimir        /home/user/work  20.645GiB\nbdbd3439  2015-05-08 21:45:17  luigi          /home/art        3.141GiB\n590c8fc8  2015-05-08 21:47:38  kazik          /srv             580.200MiB\n9f0bc19e  2015-05-08 21:46:11  luigi          /srv             572.180MiB\n```\n\n----------------------------------------\n\nTITLE: Comparing Files in Specific Subfolders Between Snapshots\nDESCRIPTION: Demonstrates how to compare only specific subfolders between snapshots using the <snapshot>:<subfolder> syntax with the diff command.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo diff 5845b002:/restic 2ab627a6:/restic\n```\n\n----------------------------------------\n\nTITLE: Filtering Snapshots by Path in Restic\nDESCRIPTION: Demonstrates how to filter snapshot listings by directory path using the '--path' flag. This allows you to view only snapshots that contain a specific directory.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo snapshots --path=\"/srv\"\nenter password for repository:\nID        Date                 Host    Tags   Directory  Size\n-------------------------------------------------------------------\n590c8fc8  2015-05-08 21:47:38  kazik          /srv       580.200MiB\n9f0bc19e  2015-05-08 21:46:11  luigi          /srv       572.180MiB\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials for S3 Backend in Restic\nDESCRIPTION: Commands to set up AWS access credentials as environment variables, required for using Amazon S3 buckets as a restic repository backend.\n\nLANGUAGE: console\nCODE:\n```\n$ export AWS_ACCESS_KEY_ID=<MY_ACCESS_KEY>\n$ export AWS_SECRET_ACCESS_KEY=<MY_SECRET_ACCESS_KEY>\n```\n\n----------------------------------------\n\nTITLE: Filtering Snapshots by Host in Restic\nDESCRIPTION: Shows how to filter snapshot listings by host using the '--host' flag. This allows you to view only snapshots that were created on a specific host.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo snapshots --host luigi\nenter password for repository:\nID        Date                 Host    Tags   Directory  Size\n-------------------------------------------------------------------\nbdbd3439  2015-05-08 21:45:17  luigi          /home/art  3.141GiB\n9f0bc19e  2015-05-08 21:46:11  luigi          /srv       572.180MiB\n```\n\n----------------------------------------\n\nTITLE: Installing Restic on Debian using apt-get\nDESCRIPTION: Command to install restic using the apt-get package manager on Debian Linux from the official repository.\n\nLANGUAGE: console\nCODE:\n```\n$ apt-get install restic\n```\n\n----------------------------------------\n\nTITLE: Sorting Files by Extension in Restic\nDESCRIPTION: Demonstrates how to sort file listings by file extension using the '--sort extension' flag. This groups files with the same extension together.\n\nLANGUAGE: console\nCODE:\n```\n$ restic ls latest --sort extension\n\nsnapshot 711b0bb6 of [/tmp/restic] at 2025-02-03 08:16:05.310764668 +0000 UTC filtered by []:\n/tmp\n/tmp/restic\n/tmp/restic/cmd_find.go\n/tmp/restic/find.go\n/tmp/restic/conf.py\n/tmp/restic/010_introduction.rst\n```\n\n----------------------------------------\n\nTITLE: Managing Temporary Directory for Pack Files\nDESCRIPTION: Override the default temporary directory used for pack files by setting the TMPDIR environment variable (or TMP/TEMP on Windows).\n\nLANGUAGE: bash\nCODE:\n```\nTMPDIR=/path/to/temp/dir\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Volumes from VSS Snapshots on Windows\nDESCRIPTION: Demonstrates excluding specific drives, mount points, and volumes from VSS snapshots during Windows backups. This allows for fine-grained control over the snapshot process.\n\nLANGUAGE: console\nCODE:\n```\n-o vss.exclude-volumes=\"d:;c:\\mnt\\;\\\\?\\volume{04ce0545-3391-11e0-ba2f-806e6f6e6963}\"\n```\n\n----------------------------------------\n\nTITLE: Restoring with Specific Extended Attributes in restic\nDESCRIPTION: This command restores a snapshot while only including specific extended attributes (user.* and security.*) for files. The --include-xattr flag allows selective restoration of file extended attributes.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo restore 79766175 --target /tmp/restore-work --include-xattr user.* --include-xattr security.*\nenter password for repository:\nrestoring <Snapshot of [/home/user/work] at 2015-05-08 21:40:19.884408621 +0200 CEST> to /tmp/restore-work\n```\n\n----------------------------------------\n\nTITLE: Excluding Large Files with Restic Backup\nDESCRIPTION: Example showing how to exclude files larger than a specified size using the --exclude-larger-than option. This command excludes files larger than 1 MiB from the backup.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo backup ~/work --exclude-larger-than 1M\n```\n\n----------------------------------------\n\nTITLE: Removing a Single Snapshot with forget Command\nDESCRIPTION: Demonstrates how to remove a specific snapshot by ID using the 'forget' command. This example removes the snapshot of '/home/art' with ID bdbd3439.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo forget bdbd3439\nenter password for repository:\nremoved snapshot bdbd3439\n```\n\n----------------------------------------\n\nTITLE: Limiting CPU Usage with GOMAXPROCS\nDESCRIPTION: Set the GOMAXPROCS environment variable to limit the number of CPU cores used by restic, which can reduce memory usage.\n\nLANGUAGE: bash\nCODE:\n```\nGOMAXPROCS=1\n```\n\n----------------------------------------\n\nTITLE: Removing Untagged Snapshots in Restic\nDESCRIPTION: Shows how to target only untagged snapshots by specifying an empty string as the tag.\n\nLANGUAGE: console\nCODE:\n```\n$ restic forget --tag '' --keep-last 1\n```\n\n----------------------------------------\n\nTITLE: Verifying a Repaired Restic Repository\nDESCRIPTION: This final verification step checks that the repository has been successfully repaired by running a complete integrity check with data verification. If this command completes without errors, the repository is considered restored.\n\nLANGUAGE: console\nCODE:\n```\n$ restic check --read-data\n\nusing temporary cache in /tmp/restic-check-cache-2569290785\nrepository a14e5863 opened (version 2, compression level auto)\ncreated new cache in /tmp/restic-check-cache-2569290785\ncreate exclusive lock for repository\nload indexes\ncheck all packs\ncheck snapshots, trees and blobs\n[0:00] 100.00%  7 / 7 snapshots\nread all data\n[0:00] 100.00%  25 / 25 packs\nno errors were found\n```\n\n----------------------------------------\n\nTITLE: Installing Restic on Arch Linux using pacman\nDESCRIPTION: Command to install restic using the pacman package manager on Arch Linux from the official community repository.\n\nLANGUAGE: console\nCODE:\n```\n$ pacman -S restic\n```\n\n----------------------------------------\n\nTITLE: Adding capability to read all files to the restic binary\nDESCRIPTION: Uses setcap to add the cap_dac_read_search capability to the restic binary, allowing it to read all files on the system regardless of file permissions.\n\nLANGUAGE: bash\nCODE:\n```\nsetcap cap_dac_read_search=+ep ~restic/bin/restic\n```\n\n----------------------------------------\n\nTITLE: Running Restic in Docker Container with Volume Mapping\nDESCRIPTION: Example command for running Restic in a Docker container with proper volume mappings, environment variables, and hostname setting. Maps the password file and data directory, and specifies the repository endpoint.\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --hostname my-host -ti \\\n    -v $HOME/.restic/passfile:/pass \\\n    -v $HOME/importantdirectory:/data \\\n    -e RESTIC_REPOSITORY=rest:https://user:pass@hostname/ \\\n    restic/restic -p /pass backup /data\n```\n\n----------------------------------------\n\nTITLE: Running a full system backup as the restic user\nDESCRIPTION: Executes restic as the unprivileged restic user to perform a system backup, excluding system directories that don't need to be backed up. The backup repository is specified as /tmp in this example.\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u restic /home/restic/bin/restic --exclude={/dev,/media,/mnt,/proc,/run,/sys,/tmp,/var/tmp} -r /tmp backup /\n```\n\n----------------------------------------\n\nTITLE: Generating Filtered Files List for Backup with GNU find\nDESCRIPTION: Creates a list of files matching a regular expression pattern using GNU find with -print0 flag, storing the results in a temporary file for use with restic.\n\nLANGUAGE: console\nCODE:\n```\n$ find /tmp/some_folder -regex PATTERN -print0 > /tmp/files_to_backup\n```\n\n----------------------------------------\n\nTITLE: Printing All Debug Messages to Console in Restic\nDESCRIPTION: Demonstrates how to print all debug messages to the console by setting the DEBUG_FILES environment variable to a wildcard pattern.\n\nLANGUAGE: console\nCODE:\n```\n$ DEBUG_FILES=* restic check\n```\n\n----------------------------------------\n\nTITLE: Filtering Debug Logs by Specific Source Files in Restic\nDESCRIPTION: Shows how to filter debug log messages to only show output from specific source files by setting the DEBUG_FILES environment variable to a comma-separated list of filenames.\n\nLANGUAGE: console\nCODE:\n```\n$ DEBUG_FILES=main.go,lock.go restic check\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Authentication Methods for Restic\nDESCRIPTION: Commands to export authentication credentials for Azure Blob Storage, using either storage account key or SAS token.\n\nLANGUAGE: console\nCODE:\n```\n# For storage account key\n$ export AZURE_ACCOUNT_KEY=<SECRET_KEY>\n# For SAS\n$ export AZURE_ACCOUNT_SAS=<SAS_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Including External Documentation Files in reStructuredText\nDESCRIPTION: Shows how to include external reStructuredText files in the main documentation using the include directive. References design.rst, cache.rst, and REST_backend.rst files.\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: design.rst\n.. include:: cache.rst\n.. include:: REST_backend.rst\n```\n\n----------------------------------------\n\nTITLE: Listing Files in a Restic Snapshot\nDESCRIPTION: Shows how to list files in a specific snapshot using the 'ls' command with a snapshot ID. This displays the directory structure and files contained in the snapshot.\n\nLANGUAGE: console\nCODE:\n```\n$ restic ls 073a90db\n\nsnapshot 073a90db of [/home/user/work.txt] filtered by [] at 2024-01-21 16:51:18.474558607 +0100 CET):\n/home\n/home/user\n/home/user/work.txt\n```\n\n----------------------------------------\n\nTITLE: Displaying Restic Master Key with 'cat masterkey' Command\nDESCRIPTION: This command demonstrates how to view the master encryption and message authentication keys used by a restic repository. The output shows the 'mac' keys (k and r) used for Poly1305-AES authentication and the 'encrypt' key used for AES-256 encryption.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /tmp/restic-repo cat masterkey\n{\n    \"mac\": {\n      \"k\": \"evFWd9wWlndL9jc501268g==\",\n      \"r\": \"E9eEDnSJZgqwTOkDtOp+Dw==\"\n    },\n    \"encrypt\": \"UQCqa0lKZ94PygPxMRqkePTZnHRYh1k1pX2k2lM2v3Q=\",\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Snapshots by Host in Restic\nDESCRIPTION: Demonstrates how to group snapshot listings by host using the '--group-by host' flag. This organizes the output by grouping snapshots that were created on the same host.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo snapshots --group-by host\n\nenter password for repository:\nsnapshots for (host [kasimir])\nID        Date                 Host    Tags   Directory        Size\n------------------------------------------------------------------------\n40dc1520  2015-05-08 21:38:30  kasimir        /home/user/work  20.643GiB\n79766175  2015-05-08 21:40:19  kasimir        /home/user/work  20.645GiB\n2 snapshots\nsnapshots for (host [luigi])\nID        Date                 Host    Tags   Directory  Size\n-------------------------------------------------------------------\nbdbd3439  2015-05-08 21:45:17  luigi          /home/art  3.141GiB\n9f0bc19e  2015-05-08 21:46:11  luigi          /srv       572.180MiB\n2 snapshots\nsnapshots for (host [kazik])\nID        Date                 Host    Tags   Directory  Size\n-------------------------------------------------------------------\n590c8fc8  2015-05-08 21:47:38  kazik          /srv       580.200MiB\n1 snapshots\n```\n\n----------------------------------------\n\nTITLE: Inspecting Tree Blob Structure in Restic with JSON Formatting\nDESCRIPTION: Example of using 'restic cat blob' command to inspect a tree blob, showing the JSON structure with directory metadata including name, timestamps, permissions, and subtree reference. The output is piped to 'jq' for proper formatting.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /tmp/restic-repo cat blob 2da81727b6585232894cfbb8f8bdab8d1eccd3d8f7c92bc934d62e62e618ffdf | jq .\nenter password for repository:\n{\n  \"nodes\": [\n    {\n      \"name\": \"testdata\",\n      \"type\": \"dir\",\n      \"mode\": 493,\n      \"mtime\": \"2014-12-22T14:47:59.912418701+01:00\",\n      \"atime\": \"2014-12-06T17:49:21.748468803+01:00\",\n      \"ctime\": \"2014-12-22T14:47:59.912418701+01:00\",\n      \"uid\": 1000,\n      \"gid\": 100,\n      \"user\": \"fd0\",\n      \"inode\": 409704562,\n      \"content\": null,\n      \"subtree\": \"b26e315b0988ddcd1cee64c351d13a100fedbc9fdbb144a67d1b765ab280b4dc\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Examining Subtree File Entries in Restic Repository\nDESCRIPTION: Example showing how to examine the contents of a subtree in a restic repository, displaying a file entry with its metadata and content reference. The 'content' field contains a hash referencing the actual file data blob.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /tmp/restic-repo cat blob b26e315b0988ddcd1cee64c351d13a100fedbc9fdbb144a67d1b765ab280b4dc | jq .\nenter password for repository:\n{\n  \"nodes\": [\n    {\n      \"name\": \"testfile\",\n      \"type\": \"file\",\n      \"mode\": 420,\n      \"mtime\": \"2014-12-06T17:50:23.34513538+01:00\",\n      \"atime\": \"2014-12-06T17:50:23.338468713+01:00\",\n      \"ctime\": \"2014-12-06T17:50:23.34513538+01:00\",\n      \"uid\": 1000,\n      \"gid\": 100,\n      \"user\": \"fd0\",\n      \"inode\": 416863351,\n      \"size\": 1234,\n      \"links\": 1,\n      \"content\": [\n        \"50f77b3b4291e8411a027b9f9b9e64658181cc676ce6ba9958b95f268cb1109d\"\n      ]\n    },\n    [...]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Restic Repository in rclone B2 Remote\nDESCRIPTION: Command to initialize a new restic repository in the root of a Backblaze B2 bucket using rclone as the backend.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r rclone:b2prod:yggdrasil init\n```\n\n----------------------------------------\n\nTITLE: Symlink Structure in Restic Repository\nDESCRIPTION: Example showing the JSON structure of a symlink entry in a restic tree. The 'linktarget' field stores the destination of the symlink, with a 'linktarget_raw' field used for non-UTF-8 targets (in base64 encoding).\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /tmp/restic-repo cat blob 4c0a7d500bd1482ba01752e77c8d5a923304777d96b6522fae7c11e99b4e6fa6 | jq .\nenter password for repository:\n{\n  \"nodes\": [\n    {\n      \"name\": \"testlink\",\n      \"type\": \"symlink\",\n      \"mode\": 134218239,\n      \"mtime\": \"2023-07-25T20:01:44.007465374+02:00\",\n      \"atime\": \"2023-07-25T20:01:44.007465374+02:00\",\n      \"ctime\": \"2023-07-25T20:01:44.007465374+02:00\",\n      \"uid\": 1000,\n      \"gid\": 100,\n      \"user\": \"fd0\",\n      \"inode\": 33734827,\n      \"links\": 1,\n      \"linktarget\": \"example_target\",\n      \"content\": null\n    },\n    [...]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Repository with Matching Chunker Parameters\nDESCRIPTION: Example of initializing a destination repository with the same chunker parameters as the source to ensure deduplication works properly for copied snapshots.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo-copy init --from-repo /srv/restic-repo --copy-chunker-params\n```\n\n----------------------------------------\n\nTITLE: Restic Repository Lock JSON Structure\nDESCRIPTION: JSON structure used for repository locks in restic. Locks can be exclusive or non-exclusive, and contain metadata about the process that created them, including timestamp, hostname, username, process ID, and user/group IDs.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"time\": \"2015-06-27T12:18:51.759239612+02:00\",\n  \"exclusive\": false,\n  \"hostname\": \"kasimir\",\n  \"username\": \"fd0\",\n  \"pid\": 13607,\n  \"uid\": 1000,\n  \"gid\": 100\n}\n```\n\n----------------------------------------\n\nTITLE: Using the prune command with max-unused option\nDESCRIPTION: Examples of different ways to specify the max-unused limit for the prune command, which controls how much unused data is allowed to remain in the repository.\n\nLANGUAGE: bash\nCODE:\n```\nprune --max-unused 200M\nprune --max-unused 10%\nprune --max-unused unlimited\n```\n\n----------------------------------------\n\nTITLE: Building Restic Binaries for Multiple Platforms\nDESCRIPTION: Commands to build restic binaries for Linux and Windows platforms with specific build flags, environment variables, and post-processing steps to ensure reproducible builds.\n\nLANGUAGE: bash\nCODE:\n```\n$ export PATH=/usr/local/go/bin:$PATH\n$ export GOPATH=/home/build/go\n$ go version\ngo version go1.19 linux/amd64\n\n$ GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags \"-s -w\" -tags selfupdate,disable_grpc_modules -o restic_linux_amd64 ./cmd/restic\n$ bzip2 restic_linux_amd64\n\n$ GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags \"-s -w\" -tags selfupdate,disable_grpc_modules -o restic_0.14.0_windows_amd64.exe ./cmd/restic\n$ touch --reference VERSION restic_0.14.0_windows_amd64.exe\n$ TZ=Europe/Berlin zip -q -X restic_0.14.0_windows_amd64.zip restic_0.14.0_windows_amd64.exe\n```\n\n----------------------------------------\n\nTITLE: Building Release Binaries with Docker\nDESCRIPTION: Docker command to build official restic release binaries by mounting source code and output directories, with an optional verbose flag for debugging.\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm \\\n    --volume \"$PWD/restic-0.14.0:/restic\" \\\n    --volume \"$PWD/output:/output\" \\\n    restic/builder \\\n    go run helpers/build-release-binaries/main.go --version 0.14.0\n```\n\n----------------------------------------\n\nTITLE: Installing Restic on openSUSE using zypper\nDESCRIPTION: Command to install restic on openSUSE (leap 15.0+ and tumbleweed) using the zypper package manager with root privileges.\n\nLANGUAGE: console\nCODE:\n```\n# zypper install restic\n```\n\n----------------------------------------\n\nTITLE: Verifying SLSA Provenance for Docker Images\nDESCRIPTION: Command to verify the SLSA provenance of restic Docker images using the slsa-verifier tool, ensuring they were built through the official GitHub Actions workflow.\n\nLANGUAGE: console\nCODE:\n```\n$ slsa-verifier verify-image \\\n  --source-uri github.com/restic/restic \\\n  <image-name>@<digest>\n```\n\n----------------------------------------\n\nTITLE: Recursively Listing Files by Directory in Restic\nDESCRIPTION: Demonstrates how to recursively list files in a directory within a snapshot using the '--recursive' flag. This displays files in the specified directory and all subdirectories.\n\nLANGUAGE: console\nCODE:\n```\n$ restic ls --recursive latest /home\n\nsnapshot 073a90db of [/home/user/work.txt] filtered by [/home] at 2024-01-21 16:51:18.474558607 +0100 CET):\n/home\n/home/user\n/home/user/work.txt\n```\n\n----------------------------------------\n\nTITLE: Preparing a New Restic Release\nDESCRIPTION: Command to run the automated release preparation script that handles the various steps required for publishing a new restic version.\n\nLANGUAGE: bash\nCODE:\n```\ngo run helpers/prepare-release/main.go 0.14.0\n```\n\n----------------------------------------\n\nTITLE: Installing Restic on Fedora using dnf\nDESCRIPTION: Command to install restic using the dnf package manager on Fedora Linux from the official repository.\n\nLANGUAGE: console\nCODE:\n```\n$ dnf install restic\n```\n\n----------------------------------------\n\nTITLE: Adjusting CPU scheduling priority for restic\nDESCRIPTION: This command demonstrates how to use nice to adjust the CPU scheduling priority for restic, allowing better control of system resources during backup operations.\n\nLANGUAGE: bash\nCODE:\n```\n$ nice --10 ./restic -r /media/your/backup/ backup /home\n```\n\n----------------------------------------\n\nTITLE: Creating a repository on Synology NAS using SFTP\nDESCRIPTION: These commands show the correct syntax for initializing a restic repository on a Synology NAS via SFTP, addressing path specification issues that commonly occur.\n\nLANGUAGE: bash\nCODE:\n```\n$ restic -r sftp:user@nas:/volume1/restic-repo init\ncreate backend at sftp:user@nas:/volume1/restic-repo/ failed:\n    mkdirAll(/volume1/restic-repo/index): unable to create directories: [...]\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ restic -r sftp:user@nas:/restic-repo init\n```\n\n----------------------------------------\n\nTITLE: Specifying VSS Provider by GUID on Windows\nDESCRIPTION: Shows how to specify a particular VSS provider using its GUID for Windows backups. This allows for selecting specific snapshot technology providers.\n\nLANGUAGE: console\nCODE:\n```\n-o vss.provider={3f900f90-00e9-440e-873a-96e5eb079e5}\n```\n\n----------------------------------------\n\nTITLE: Defining Restic Documentation Table of Contents in reStructuredText\nDESCRIPTION: A reStructuredText toctree directive that defines the hierarchical structure of the Restic documentation. The directive includes various documentation sections from introduction to developer information with a maximum depth of 2 levels.\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   010_introduction\n   020_installation\n   030_preparing_a_new_repo\n   040_backup\n   045_working_with_repos\n   047_tuning_backup_parameters\n   050_restore\n   060_forget\n   070_encryption\n   075_scripting\n   077_troubleshooting\n   080_examples\n   090_participating\n   100_references\n   110_talks\n   faq\n   manual_rest\n   developer_information\n```\n\n----------------------------------------\n\nTITLE: Restoring Data from Restic S3 Repository\nDESCRIPTION: Commands to restore data from a restic repository stored on Amazon S3. This creates a restore directory and extracts the contents of a specific snapshot.\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir restore\n\n$ restic restore 10fdbace --target restore\nrestoring <Snapshot 10fdbace of [/home/philip/restic-demo/test.bin] at 2017-03-26 16:41:50.201418102 +0200 CEST by philip@blackbox> to restore\n\n$ ls restore/\ntest.bin\n```\n\n----------------------------------------\n\nTITLE: Displaying Restic Basic Help Command\nDESCRIPTION: Shows the output of running 'restic --help', displaying available commands and global flags.\n\nLANGUAGE: console\nCODE:\n```\n$ restic --help\n\nrestic is a backup program which allows saving multiple revisions of files and\ndirectories in an encrypted repository stored on different backends.\n\nThe full documentation can be found at https://restic.readthedocs.io/ .\n\nUsage:\n  restic [command]\n\nAvailable Commands:\n  backup        Create a new backup of files and/or directories\n  cache         Operate on local cache directories\n  cat           Print internal objects to stdout\n  check         Check the repository for errors\n  copy          Copy snapshots from one repository to another\n  diff          Show differences between two snapshots\n  dump          Print a backed-up file to stdout\n  find          Find a file, a directory or restic IDs\n  forget        Remove snapshots from the repository\n  init          Initialize a new repository\n  key           Manage keys (passwords)\n  list          List objects in the repository\n  ls            List files in a snapshot\n  migrate       Apply migrations\n  mount         Mount the repository\n  prune         Remove unneeded data from the repository\n  recover       Recover data from the repository not referenced by snapshots\n  repair        Repair the repository\n  restore       Extract the data from a snapshot\n  rewrite       Rewrite snapshots to exclude unwanted files\n  snapshots     List all snapshots\n  stats         Scan the repository and show basic statistics\n  tag           Modify tags on snapshots\n  unlock        Remove locks other processes created\n\nAdvanced Options:\n  features      Print list of feature flags\n  options       Print list of extended options\n\nAdditional Commands:\n  generate      Generate manual pages and auto-completion files (bash, fish, zsh, powershell)\n  help          Help about any command\n  self-update   Update the restic binary\n  version       Print version information\n\nFlags:\n      --cacert file                file to load root certificates from (default: use system certificates or $RESTIC_CACERT)\n      --cache-dir directory        set the cache directory. (default: use system default cache directory)\n      --cleanup-cache              auto remove old cache directories\n      --compression mode           compression mode (only available for repository format version 2), one of (auto|off|max) (default: $RESTIC_COMPRESSION) (default auto)\n  -h, --help                       help for restic\n      --http-user-agent string     set a http user agent for outgoing http requests\n      --insecure-no-password       use an empty password for the repository, must be passed to every restic command (insecure)\n      --insecure-tls               skip TLS certificate verification when connecting to the repository (insecure)\n      --json                       set output mode to JSON for commands that support it\n      --key-hint key               key ID of key to try decrypting first (default: $RESTIC_KEY_HINT)\n      --limit-download rate        limits downloads to a maximum rate in KiB/s. (default: unlimited)\n      --limit-upload rate          limits uploads to a maximum rate in KiB/s. (default: unlimited)\n      --no-cache                   do not use a local cache\n      --no-extra-verify            skip additional verification of data before upload (see documentation)\n      --no-lock                    do not lock the repository, this allows some operations on read-only repositories\n  -o, --option key=value           set extended option (key=value, can be specified multiple times)\n      --pack-size size             set target pack size in MiB, created pack files may be larger (default: $RESTIC_PACK_SIZE)\n      --password-command command   shell command to obtain the repository password from (default: $RESTIC_PASSWORD_COMMAND)\n  -p, --password-file file         file to read the repository password from (default: $RESTIC_PASSWORD_FILE)\n  -q, --quiet                      do not output comprehensive progress report\n  -r, --repo repository            repository to backup to or restore from (default: $RESTIC_REPOSITORY)\n      --repository-file file       file to read the repository location from (default: $RESTIC_REPOSITORY_FILE)\n      --retry-lock duration        retry to lock the repository if it is already locked, takes a value like 5m or 2h (default: no retries)\n      --tls-client-cert file       path to a file containing PEM encoded TLS client certificate and private key (default: $RESTIC_TLS_CLIENT_CERT)\n  -v, --verbose                    be verbose (specify multiple times or a level using --verbose=n, max level/times is 2)\n\nUse \"restic [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Adding group read access to restic repositories\nDESCRIPTION: This command grants read permission to a system group for accessing a restic repository, enabling read-only repository sharing among group members.\n\nLANGUAGE: console\nCODE:\n```\n$ chmod -R g+r /srv/restic-repo\n```\n\n----------------------------------------\n\nTITLE: Managing Tags with restic tag Command\nDESCRIPTION: Demonstrates how to set, add, and remove tags on snapshots using the restic tag command, including filtering snapshots by tags.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo tag --set NL --set CH 590c8fc8\ncreate exclusive lock for repository\nmodified tags on 1 snapshots\n```\n\n----------------------------------------\n\nTITLE: Finding Files in Repository\nDESCRIPTION: Demonstrates using the find command to search for files matching a pattern in a restic repository.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r backup find test.txt\ndebug log file restic.log\ndebug enabled\nenter password for repository:\nfound 1 matching entries in snapshot 196bc5760c909a7681647949e80e5448e276521489558525680acf1bd428af36\n  -rw-r--r--   501    20      5 2015-08-26 14:09:57 +0200 CEST path/to/test.txt\n```\n\n----------------------------------------\n\nTITLE: Dumping Repository Content to Target File in Restic\nDESCRIPTION: Shows how to dump contents directly to a file using the --target flag rather than redirecting stdout, with a specified archive format.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo dump latest / --target /home/linux.user/output.tar -a tar\n```\n\n----------------------------------------\n\nTITLE: Displaying Repository Object Contents\nDESCRIPTION: Shows how to display the JSON representation of objects in a restic repository using the cat command.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo cat snapshot d369ccc7d126594950bf74f0a348d5d98d9e99f3215082eb69bf02dc9b3e464c\nenter password for repository:\n{\n  \"time\": \"2015-08-12T12:52:44.091448856+02:00\",\n  \"tree\": \"05cec17e8d3349f402576d02576a2971fc0d9f9776ce2f441c7010849c4ff5af\",\n  \"paths\": [\n    \"/home/user/work\"\n  ],\n  \"hostname\": \"kasimir\",\n  \"username\": \"username\",\n  \"uid\": 501,\n  \"gid\": 20\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Restic on Alpine Linux using package manager\nDESCRIPTION: Command to install restic using the apk package manager on Alpine Linux from the official community repository.\n\nLANGUAGE: console\nCODE:\n```\n$ apk add restic\n```\n\n----------------------------------------\n\nTITLE: Calculating Repository Statistics by Restore Size\nDESCRIPTION: Shows how to use the stats command to calculate the size required to restore files from a snapshot.\n\nLANGUAGE: console\nCODE:\n```\n$ restic stats latest\nTotal File Count:   10538\n      Total Size:   37.824 GiB\n```\n\n----------------------------------------\n\nTITLE: Pulling Restic Docker container from GitHub Container Registry\nDESCRIPTION: Command to pull the official restic Docker container from GitHub Container Registry as an alternative source.\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull ghcr.io/restic/restic\n```\n\n----------------------------------------\n\nTITLE: Calculating Raw Data Size in Repository\nDESCRIPTION: Shows how to calculate the actual size of data stored in the repository after deduplication using the stats command with raw-data mode.\n\nLANGUAGE: console\nCODE:\n```\n$ restic stats --host myserver --mode raw-data latest\nTotal Blob Count:   340847\n      Total Size:   458.663 GiB\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Temporary Directory for Restic Operations\nDESCRIPTION: This example shows how to set a custom temporary directory for restic operations using the TMPDIR environment variable. This is useful when the default temporary directory is not suitable due to size or permission constraints.\n\nLANGUAGE: console\nCODE:\n```\n$ export TMPDIR=/var/tmp/restic-tmp\n$ restic -r /srv/restic-repo backup ~/work\n```\n\n----------------------------------------\n\nTITLE: Modifying Snapshot Metadata\nDESCRIPTION: Example showing how to change the hostname and timestamp of an existing snapshot using the rewrite command.\n\nLANGUAGE: console\nCODE:\n```\n$ restic rewrite --new-host newhost --new-time \"1999-01-01 11:11:11\"\n\nrepository b7dbade3 opened (version 2, compression level auto)\n[0:00] 100.00%  1 / 1 index files loaded\n\nsnapshot 8ed674f4 of [/path/to/abc.txt] at 2023-11-27 21:57:52.439139291 +0100 CET by user@kasimir\nsetting time to 1999-01-01 11:11:11 +0100 CET\nsetting host to newhost\nsaved new snapshot c05da643\n\nmodified 1 snapshots\n```\n\n----------------------------------------\n\nTITLE: Specifying Sphinx Documentation Dependencies\nDESCRIPTION: Lists the Python packages required for building documentation with Sphinx. The file includes Sphinx itself and the Read the Docs theme, which provides the visual styling for the generated documentation.\n\nLANGUAGE: txt\nCODE:\n```\nsphinx\nsphinx_rtd_theme\n```\n\n----------------------------------------\n\nTITLE: Installing Restic on Nix/NixOS using nix-env\nDESCRIPTION: Command to install restic on Nix/NixOS systems using the nix-env package manager.\n\nLANGUAGE: console\nCODE:\n```\n$ nix-env --install restic\n```\n\n----------------------------------------\n\nTITLE: Building Restic Docker Image with Shell Script\nDESCRIPTION: Command to build the Restic Docker image from the repository root. The resulting image will be tagged as restic/restic:latest.\n\nLANGUAGE: bash\nCODE:\n```\n./docker/build.sh\n```\n\n----------------------------------------\n\nTITLE: Creating a dedicated system user for restic backups\nDESCRIPTION: Creates a system user called 'restic' with a home directory but no login shell to run backups with limited privileges.\n\nLANGUAGE: bash\nCODE:\n```\nuseradd --system --create-home --shell /sbin/nologin restic\n```\n\n----------------------------------------\n\nTITLE: Windows VSS Error Message Example\nDESCRIPTION: Example of Windows Volume Shadow Copy Service error messages that were occurring when running backup with filesystem snapshots. This issue has been fixed to prevent these warning messages in the event log.\n\nLANGUAGE: plaintext\nCODE:\n```\nVolume Shadow Copy Service error: Unexpected error querying for the IVssWriterCallback interface.  hr = 0x80070005, Access is denied.\n. This is often caused by incorrect security settings in either the writer or requester process. \n\nOperation:\n   Gathering Writer Data\n\nContext:\n   Writer Class Id: {e8132975-6f93-4464-a53e-1050253ae220}\n   Writer Name: System Writer\n   Writer Instance ID: {54b151ac-d27d-4628-9cb0-2bc40959f50f}\n```\n\n----------------------------------------\n\nTITLE: Installing restic binary in the user's home directory\nDESCRIPTION: Creates a bin directory in the restic user's home and downloads the restic binary. The example uses version 0.12.1 but should be adjusted to the latest version.\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~restic/bin\ncurl -L https://github.com/restic/restic/releases/download/v0.12.1/restic_0.12.1_linux_amd64.bz2 | bunzip2 > ~restic/bin/restic\n```\n\n----------------------------------------\n\nTITLE: Runtime Error Example in Command Output\nDESCRIPTION: Example of a panic crash that could occur in rare cases when printing status messages and request retries simultaneously. This issue has been fixed to prevent the runtime error.\n\nLANGUAGE: go\nCODE:\n```\npanic: runtime error: slice bounds out of range [468:156]\n[...]\ngithub.com/restic/restic/internal/ui/termstatus.(*lineWriter).Write(...)\n\t/restic/internal/ui/termstatus/stdio_wrapper.go:36 +0x136\n```\n\n----------------------------------------\n\nTITLE: Installing Restic on macOS using Homebrew\nDESCRIPTION: Command to install restic on macOS using the Homebrew package manager.\n\nLANGUAGE: console\nCODE:\n```\n$ brew install restic\n```\n\n----------------------------------------\n\nTITLE: Using VSS Options with Restic Backup on Windows\nDESCRIPTION: Example of configuring Windows Shadow Copy Service (VSS) options with restic backup command. Shows how to set a custom timeout and exclude mount points from snapshotting.\n\nLANGUAGE: bash\nCODE:\n```\nRestic backup --use-fs-snapshot -o vss.timeout=5m -o vss.exclude-all-mount-points=true\n```\n\n----------------------------------------\n\nTITLE: Backing Up Compressed Data from Standard Input\nDESCRIPTION: Demonstrates piping compressed data directly into restic via standard input, though this approach doesn't handle command errors properly.\n\nLANGUAGE: console\nCODE:\n```\n# Will not notice failures, see the warning below\n$ gzip bigfile.dat | restic -r /srv/restic-repo backup --stdin\n```\n\n----------------------------------------\n\nTITLE: Formatting Go Code with gofmt\nDESCRIPTION: Command to format all Go files in the project according to Go's standard formatting rules, which is required before submitting code.\n\nLANGUAGE: bash\nCODE:\n```\ngofmt -w **/*.go\n```\n\n----------------------------------------\n\nTITLE: Restoring Data from Restic Backup\nDESCRIPTION: Restores a specific snapshot to a target directory. The command requires the snapshot ID and the target location where files will be restored.\n\nLANGUAGE: console\nCODE:\n```\nrestic restore --target /tmp/restore-work your-snapshot-ID\n```\n\n----------------------------------------\n\nTITLE: Dumping Content Using Specific Snapshot ID in Restic\nDESCRIPTION: Demonstrates how to extract a specific file (production.sql) from a repository using an explicit snapshot ID and pipe it to mysql.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo dump 098db9d5 production.sql | mysql\n```\n\n----------------------------------------\n\nTITLE: Removing Restic copr repository on Fedora\nDESCRIPTION: Command to remove the previously used copr repository for restic on Fedora to avoid conflicts with the official package.\n\nLANGUAGE: console\nCODE:\n```\n$ dnf copr remove copart/restic\n```\n\n----------------------------------------\n\nTITLE: Setting REST Server Credentials as Environment Variables\nDESCRIPTION: Commands to set REST server authentication credentials using environment variables, allowing for more secure credential management.\n\nLANGUAGE: console\nCODE:\n```\n$ export RESTIC_REST_USERNAME=<MY_REST_SERVER_USERNAME>\n$ export RESTIC_REST_PASSWORD=<MY_REST_SERVER_PASSWORD>\n```\n\n----------------------------------------\n\nTITLE: Installing Restic on macOS using MacPorts\nDESCRIPTION: Command to install restic on macOS using the MacPorts package manager with sudo privileges.\n\nLANGUAGE: console\nCODE:\n```\n$ sudo port install restic\n```\n\n----------------------------------------\n\nTITLE: Dumping Content Using Path Selection in Restic\nDESCRIPTION: Shows how to extract a file using the --path option to select the latest snapshot that contains a specific path, then pipe the content to mysql.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo dump --path /production.sql latest production.sql | mysql\n```\n\n----------------------------------------\n\nTITLE: Installing Restic on OpenBSD using pkg_add\nDESCRIPTION: Command to install restic on OpenBSD 6.3 and greater using the pkg_add package manager with root privileges.\n\nLANGUAGE: console\nCODE:\n```\n# pkg_add restic\n```\n\n----------------------------------------\n\nTITLE: Adding Restic repository for CentOS7 using yum-config-manager\nDESCRIPTION: Command to add the restic repository directly to CentOS7 using yum-config-manager as an alternative installation method.\n\nLANGUAGE: console\nCODE:\n```\n$ yum-config-manager --add-repo https://copr.fedorainfracloud.org/coprs/copart/restic/repo/epel-7/copart-restic-epel-7.repo\n```\n\n----------------------------------------\n\nTITLE: Working around Windows terminal issues with winpty\nDESCRIPTION: This snippet shows how to install and use winpty to work around password prompt issues when using restic in MSYS2 or Cygwin environments on Windows.\n\nLANGUAGE: console\nCODE:\n```\n$ pacman -S winpty\n$ winpty restic -r /srv/restic-repo init\n```\n\n----------------------------------------\n\nTITLE: Displaying GPG Key Information for Restic Verification\nDESCRIPTION: Information about the GPG key used to sign official restic releases, showing key ID, fingerprint, and owner details.\n\nLANGUAGE: text\nCODE:\n```\npub   4096R/91A6868BD3F7A907 2014-11-01\n      Key fingerprint = CF8F 18F2 8445 7597 3F79  D4E1 91A6 868B D3F7 A907\n      uid                          Alexander Neumann <alexander@bumpern.de>\n      sub   4096R/D5FC2ACF4043FDF1 2014-11-01\n```\n\n----------------------------------------\n\nTITLE: Setting Credentials for S3-compatible Storage\nDESCRIPTION: Commands to set AWS credentials environment variables for authenticating with an S3-compatible storage service, followed by initialization of a restic repository.\n\nLANGUAGE: console\nCODE:\n```\n$ export AWS_ACCESS_KEY_ID=<YOUR-ACCESS-KEY-ID>\n$ export AWS_SECRET_ACCESS_KEY=<YOUR-SECRET-ACCESS-KEY>\n$ restic -r s3:https://server:port/bucket_name init\n```\n\n----------------------------------------\n\nTITLE: Generating Bash autocompletion script for Restic\nDESCRIPTION: Command to generate and install a Bash autocompletion script for restic into the system-wide location using sudo.\n\nLANGUAGE: console\nCODE:\n```\n$ sudo ./restic generate --bash-completion /etc/bash_completion.d/restic\nwriting bash completion file to /etc/bash_completion.d/restic\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Flags\nDESCRIPTION: Use the RESTIC_FEATURES environment variable to enable or disable experimental features. Specify a comma-separated list of key-value pairs.\n\nLANGUAGE: bash\nCODE:\n```\nRESTIC_FEATURES=key1=true,key2=false\n```\n\n----------------------------------------\n\nTITLE: Setting Minio Server Credentials Environment Variables\nDESCRIPTION: Commands to set AWS credentials environment variables for authenticating with a Minio server. These variables are required before initializing a restic repository on Minio.\n\nLANGUAGE: console\nCODE:\n```\n$ export AWS_ACCESS_KEY_ID=<YOUR-MINIO-ACCESS-KEY-ID>\n$ export AWS_SECRET_ACCESS_KEY=<YOUR-MINIO-SECRET-ACCESS-KEY>\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Container Policy\nDESCRIPTION: Command to set the default container policy for new Swift containers created by restic.\n\nLANGUAGE: console\nCODE:\n```\n$ export SWIFT_DEFAULT_CONTAINER_POLICY=<MY_CONTAINER_POLICY>\n```\n\n----------------------------------------\n\nTITLE: Executing prune with recovery option for low disk space\nDESCRIPTION: Command syntax for recovering from 'no free space' errors using the unsafe-recover-no-free-space option, which allows prune to work with minimal free space.\n\nLANGUAGE: bash\nCODE:\n```\nprune --max-repack-size 0\nprune --unsafe-recover-no-free-space SOME-ID\n```\n\n----------------------------------------\n\nTITLE: Forcing Azure CLI Credentials for Restic\nDESCRIPTION: Command to set an environment variable that forces restic to use Azure CLI credentials when other credentials are present.\n\nLANGUAGE: console\nCODE:\n```\n$ export AZURE_FORCE_CLI_CREDENTIAL=true\n```\n\n----------------------------------------\n\nTITLE: Initializing a Restic Repository in Backblaze B2\nDESCRIPTION: Command to initialize a new restic repository stored in Backblaze B2. The bucket will be created automatically if it doesn't exist and the credentials have sufficient privileges.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r b2:bucketname:path/to/repo init\nenter password for new repository:\nenter password again:\ncreated restic repository eefee03bbd at b2:bucketname:path/to/repo\nPlease note that knowledge of your password is required to access the repository.\nLosing your password means that your data is irrecoverably lost.\n```\n\n----------------------------------------\n\nTITLE: Removing Snapshots with Multiple Tag Options in Restic\nDESCRIPTION: Shows how to keep only the latest snapshot of all snapshots that have either the foo or bar tag set.\n\nLANGUAGE: console\nCODE:\n```\n$ restic forget --tag foo --tag bar --keep-last 1\n```\n\n----------------------------------------\n\nTITLE: Removing Snapshots with Combined Tags in Restic\nDESCRIPTION: Demonstrates how to keep only the latest snapshot that has both the foo and bar tags set.\n\nLANGUAGE: console\nCODE:\n```\n$ restic forget --tag foo,bar --keep-last 1\n```\n\n----------------------------------------\n\nTITLE: Initializing a Restic Repository in Azure Blob Storage\nDESCRIPTION: Command to initialize a new restic repository in an Azure Blob Storage container called 'foo' in the root path.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r azure:foo:/ init\nenter password for new repository:\nenter password again:\n\ncreated restic repository a934bac191 at azure:foo:/\n[...]\n```\n\n----------------------------------------\n\nTITLE: Listing Repository Objects\nDESCRIPTION: Shows how to list specific types of objects in a restic repository using the list command.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo list snapshots\nd369ccc7d126594950bf74f0a348d5d98d9e99f3215082eb69bf02dc9b3e464c\n```\n\n----------------------------------------\n\nTITLE: Displaying Restic Backup Command Help\nDESCRIPTION: Shows the output of running 'restic backup --help', displaying available flags specific to the backup command including exclusion patterns, file selection and backup options.\n\nLANGUAGE: console\nCODE:\n```\n$ restic backup --help\n\nThe \"backup\" command creates a new snapshot and saves the files and directories\ngiven as the arguments.\n\nEXIT STATUS\n===========\n\nExit status is 0 if the command was successful.\nExit status is 1 if there was a fatal error (no snapshot created).\nExit status is 3 if some source data could not be read (incomplete snapshot created).\n\nUsage:\n  restic backup [flags] [FILE/DIR] ...\n\nFlags:\n  -n, --dry-run                                do not upload or write any data, just show what would be done\n  -e, --exclude pattern                        exclude a pattern (can be specified multiple times)\n      --exclude-caches                         excludes cache directories that are marked with a CACHEDIR.TAG file. See https://bford.info/cachedir/ for the Cache Directory Tagging Standard\n      --exclude-file file                      read exclude patterns from a file (can be specified multiple times)\n      --exclude-if-present filename[:header]   takes filename[:header], exclude contents of directories containing filename (except filename itself) if header of that file is as provided (can be specified multiple times)\n      --exclude-larger-than size               max size of the files to be backed up (allowed suffixes: k/K, m/M, g/G, t/T)\n      --files-from file                        read the files to backup from file (can be combined with file args; can be specified multiple times)\n      --files-from-raw file                    read the files to backup from file (can be combined with file args; can be specified multiple times)\n      --files-from-verbatim file               read the files to backup from file (can be combined with file args; can be specified multiple times)\n  -f, --force                                  force re-reading the source files/directories (overrides the \"parent\" flag)\n  -g, --group-by group                         group snapshots by host, paths and/or tags, separated by comma (disable grouping with '') (default host,paths)\n  -h, --help                                   help for backup\n  -H, --host hostname                          set the hostname for the snapshot manually (default: $RESTIC_HOST). To prevent an expensive rescan use the \"parent\" flag\n      --iexclude pattern                       same as --exclude pattern but ignores the casing of filenames\n      --iexclude-file file                     same as --exclude-file but ignores casing of filenames in patterns\n      --ignore-ctime                           ignore ctime changes when checking for modified files\n      --ignore-inode                           ignore inode number and ctime changes when checking for modified files\n      --no-scan                                do not run scanner to estimate size of backup\n  -x, --one-file-system                        exclude other file systems, don't cross filesystem boundaries and subvolumes\n      --parent snapshot                        use this parent snapshot (default: latest snapshot in the group determined by --group-by and not newer than the timestamp determined by --time)\n      --read-concurrency n                     read n files concurrently (default: $RESTIC_READ_CONCURRENCY or 2)\n      --skip-if-unchanged                      skip snapshot creation if identical to parent snapshot\n      --stdin                                  read backup from stdin\n      --stdin-filename filename                filename to use when reading from stdin (default \"stdin\")\n      --stdin-from-command                     interpret arguments as command to execute and store its stdout\n      --tag tags                               add tags for the new snapshot in the format `tag[,tag,...]` (can be specified multiple times) (default [])\n      --time time                              time of the backup (ex. '2012-11-01 22:08:41') (default: now)\n      --use-fs-snapshot                        use filesystem snapshot where possible (currently only Windows VSS)\n      --with-atime                             store the atime for all files and directories\n\nGlobal Flags:\n      --cacert file                file to load root certificates from (default: use system certificates or $RESTIC_CACERT)\n      --cache-dir directory        set the cache directory. (default: use system default cache directory)\n      --cleanup-cache              auto remove old cache directories\n      --compression mode           compression mode (only available for repository format version 2), one of (auto|off|max) (default: $RESTIC_COMPRESSION) (default auto)\n```\n\n----------------------------------------\n\nTITLE: Using HTTPS and Authentication with REST Server in Restic\nDESCRIPTION: Examples of different REST server configurations with HTTPS, authentication, and custom repository paths. Shows flexibility in REST backend configuration.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r rest:https://host:8000/ init\n$ restic -r rest:https://user:pass@host:8000/ init\n$ restic -r rest:https://user:pass@host:8000/my_backup_repo/ init\n$ restic -r rest:http+unix:///tmp/rest.socket:/my_backup_repo/ init\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Untagged Snapshots\nDESCRIPTION: Demonstrates how to add tags to all untagged snapshots by using an empty string as the tag filter value.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo tag --tag '' --add OTHER\n```\n\n----------------------------------------\n\nTITLE: Error Message Example for Disappeared Files During Backup\nDESCRIPTION: Sample error message that was previously shown when files disappeared between directory listing and backup operation. This has been fixed to quietly skip such files instead of showing errors.\n\nLANGUAGE: bash\nCODE:\n```\nerror: lstat /some/file/name: no such file or directory\n```\n\n----------------------------------------\n\nTITLE: Checking Repository Random Subset by Percentage in Restic\nDESCRIPTION: Commands to verify a randomly selected subset of repository data by percentage. This method is useful for regular lightweight checks, supporting both integer and floating-point percentage values.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo check --read-data-subset=2.5%\n```\n\n----------------------------------------\n\nTITLE: Windows Error Message for Missing Privileges\nDESCRIPTION: Example of the Windows error message that could occur during backup operations when attempting to access security information without sufficient privileges.\n\nLANGUAGE: markdown\nCODE:\n```\nerror: nodeFromFileInfo [...]: get named security info failed with: a required privilege is not held by the client.\n```\n\n----------------------------------------\n\nTITLE: Stuck Request Timeout Error\nDESCRIPTION: Error message that occurs when a request times out while collecting a list of files in a large repository, which can now be configured with the --stuck-request-timeout option.\n\nLANGUAGE: markdown\nCODE:\n```\nList(data) returned error, retrying after 1s: [...]: request timeout\n```\n\n----------------------------------------\n\nTITLE: Checking Repository Larger Random Subset by Percentage in Restic\nDESCRIPTION: Command to check a larger random subset (10%) of repository data. This approach balances between thorough verification and performance impact.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo check --read-data-subset=10%\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Volumes with VSS in Restic on Windows\nDESCRIPTION: Example demonstrating how to exclude specific drives, mount points and volumes from Windows Shadow Copy Service (VSS) snapshotting during backup operations.\n\nLANGUAGE: bash\nCODE:\n```\nRestic backup --use-fs-snapshot -o vss.exclude-volumes=\"d:\\;c:\\mnt\\;\\\\?\\Volume{e2e0315d-9066-4f97-8343-eb5659b35762}\"\n```\n\n----------------------------------------\n\nTITLE: Backing Up MySQL Database Output with Restic\nDESCRIPTION: Example of using the --stdin-from-command option to backup the output of mysqldump directly into restic. This ensures the command exits successfully and stores the output with a custom filename.\n\nLANGUAGE: bash\nCODE:\n```\nrestic backup --stdin-from-command --stdin-filename dump.sql mysqldump [...]\n```\n\n----------------------------------------\n\nTITLE: Checking Repository Random Subset by Size in Restic\nDESCRIPTION: Commands to verify randomly selected subsets of repository data by specifying file size. The size is converted to a percentage of total repository size, with support for various size units (K/M/G/T).\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo check --read-data-subset=50M\n$ restic -r /srv/restic-repo check --read-data-subset=10G\n```\n\n----------------------------------------\n\nTITLE: Using restic restore Command\nDESCRIPTION: Example of using the restic restore command to restore files from a snapshot to a target folder.\n\nLANGUAGE: bash\nCODE:\n```\nrestic restore -t target latest:/some/path\n```\n\n----------------------------------------\n\nTITLE: Repository Creation with Compression in Restic\nDESCRIPTION: Command example showing how to create a new repository with compression support and copy all snapshots to it. This uses the new --from-repo option which replaces the deprecated --repo2 option for both init and copy commands.\n\nLANGUAGE: bash\nCODE:\n```\nrestic -r /srv/restic-repo-copy init --from-repo /srv/restic-repo --copy-chunker-params\nrestic -r /srv/restic-repo-copy copy --from-repo /srv/restic-repo\n```\n\n----------------------------------------\n\nTITLE: Listing Detailed File Information in Restic\nDESCRIPTION: Shows how to list detailed file information in a snapshot using the '--long' option. This displays file permissions, UID, GID, size, modification time, and path.\n\nLANGUAGE: console\nCODE:\n```\n$ restic ls --long latest\n\nsnapshot 073a90db of [/home/user/work.txt] filtered by [] at 2024-01-21 16:51:18.474558607 +0100 CET):\ndrwxr-xr-x     0     0      0 2024-01-21 16:50:52 /home\ndrwxr-xr-x     0     0      0 2024-01-21 16:51:03 /home/user\n-rw-r--r--     0     0     18 2024-01-21 16:51:03 /home/user/work.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Logs in Restic using Console Environment Variables\nDESCRIPTION: Shows how to enable debug logs in Restic by setting the DEBUG_LOG environment variable to write debug messages to a specified file.\n\nLANGUAGE: console\nCODE:\n```\n$ DEBUG_LOG=/tmp/restic-debug.log restic backup ~/work\n```\n\n----------------------------------------\n\nTITLE: Running restic check command to verify repository integrity\nDESCRIPTION: This code demonstrates how to run the 'restic check' command which reports on the repository status, showing packs not referenced in any index that can be cleaned up with 'restic prune'.\n\nLANGUAGE: bash\nCODE:\n```\n$ restic check\ncreate exclusive lock for repository\nload indexes\ncheck all packs\npack 819a9a52e4f51230afa89aefbf90df37fb70996337ae57e6f7a822959206a85e: not referenced in any index\npack de299e69fb075354a3775b6b045d152387201f1cdc229c31d1caa34c3b340141: not referenced in any index\n2 additional files were found in the repo, which likely contain duplicate data.\nYou can run `restic prune` to correct this.\ncheck snapshots, trees and blobs\n[0:00] 100.00%  16 / 16 snapshots\nno errors were found\n```\n\n----------------------------------------\n\nTITLE: Sorting Files by Size in Restic Snapshot\nDESCRIPTION: Demonstrates how to sort file listings by size in reverse order using the '--sort size' and '--reverse' flags. This displays files from largest to smallest.\n\nLANGUAGE: console\nCODE:\n```\n$ restic ls --long latest --sort size --reverse\n\nsnapshot 711b0bb6 of [/tmp/restic] at 2025-02-03 08:16:05.310764668 +0000 UTC filtered by []:\n-rw-rw-r--  1000  1000  16772 2025-02-03 08:09:11 /tmp/restic/cmd_find.go\n-rw-rw-r--  1000  1000   3077 2025-02-03 08:15:46 /tmp/restic/conf.py\n-rw-rw-r--  1000  1000   2834 2025-02-03 08:09:35 /tmp/restic/find.go\n-rw-rw-r--  1000  1000   1473 2025-02-03 08:15:30 /tmp/restic/010_introduction.rst\ndrwxrwxr-x  1000  1000      0 2025-02-03 08:15:46 /tmp/restic\ndtrwxrwxrwx     0     0      0 2025-02-03 08:14:22 /tmp\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting restic command issues with Ruby\nDESCRIPTION: This code shows how to use Ruby to inspect the arguments passed to a restic command, helping to identify issues with path expansion and shell interpretation that might be causing unexpected behavior.\n\nLANGUAGE: ruby\nCODE:\n```\n$ ruby -e 'puts ARGV.inspect' restic backup --exclude \"~/documents\" ~\n[\"restic\", \"backup\", \"--exclude\", \"~/documents\", \"/home/john\"]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating shell path expansion for troubleshooting\nDESCRIPTION: These commands illustrate how shell path expansion works differently with quoted and unquoted paths, helping users understand why certain paths might not be properly expanded when used with restic.\n\nLANGUAGE: bash\nCODE:\n```\n$ echo ~/documents\n/home/john/documents\n\n$ echo \"~/documents\"\n~/documents\n\n$ echo \"$HOME/documents\"\n/home/john/documents\n```\n\n----------------------------------------\n\nTITLE: Sorting Files by Modification Time in Restic\nDESCRIPTION: Shows how to sort file listings by modification time using the '--sort time' flag. This displays files in chronological order by their last modification time.\n\nLANGUAGE: console\nCODE:\n```\n$ restic ls --long latest --sort time\n\nsnapshot 711b0bb6 of [/tmp/restic] at 2025-02-03 08:16:05.310764668 +0000 UTC filtered by []:\n-rw-rw-r--  1000  1000  16772 2025-02-03 08:09:11 /tmp/restic/cmd_find.go\n-rw-rw-r--  1000  1000   2834 2025-02-03 08:09:35 /tmp/restic/find.go\ndtrwxrwxrwx     0     0      0 2025-02-03 08:14:22 /tmp\n-rw-rw-r--  1000  1000   1473 2025-02-03 08:15:30 /tmp/restic/010_introduction.rst\ndrwxrwxr-x  1000  1000      0 2025-02-03 08:15:46 /tmp/restic\n-rw-rw-r--  1000  1000   3077 2025-02-03 08:15:46 /tmp/restic/conf.py\n```\n\n----------------------------------------\n\nTITLE: Repository File List Response in REST API v1\nDESCRIPTION: JSON array response format for API version 1 when listing files of a specific type. Returns an array of blob IDs as strings.\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"245bc4c430d393f74fbe7b13325e30dbde9fb0745e50caad57c446c93d20096b\",\n  \"85b420239efa1132c41cea0065452a40ebc20c6f8e0b132a5b2f5848360973ec\",\n  \"8e2006bb5931a520f3c7009fe278d1ebb87eb72c3ff92a50c30e90f1b8cf3e60\",\n  \"e75c8c407ea31ba399ab4109f28dd18c4c68303d8d86cc275432820c42ce3649\"\n]\n```\n\n----------------------------------------\n\nTITLE: Python Documentation Heading Structure in reStructuredText\nDESCRIPTION: Demonstrates the convention for heading levels in Python's Style Guide for documentation, showing different characters used for parts, chapters, sections, subsections, subsubsections, and paragraphs.\n\nLANGUAGE: restructuredtext\nCODE:\n```\n# with overline, for parts\n* for chapters\n= for sections\n- for subsections\n^ for subsubsections\n\" for paragraphs\n```\n\n----------------------------------------\n\nTITLE: Listing Repository Snapshots in Restic\nDESCRIPTION: Shows how to list all snapshots in a restic repository, displaying their IDs, dates, hosts, tags, and directories.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo snapshots\nID        Date                 Host        Tags        Directory\n----------------------------------------------------------------------\n562bfc5e  2018-07-14 20:18:01  mopped                  /home/user/file1\nbbacb625  2018-07-14 20:18:07  mopped                  /home/other/work\ne922c858  2018-07-14 20:18:10  mopped                  /home/other/work\n098db9d5  2018-07-14 20:18:13  mopped                  /production.sql\nb62f46ec  2018-07-14 20:18:16  mopped                  /home/user/file1\n1541acae  2018-07-14 20:18:18  mopped                  /home/other/work\n----------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Dumping Folder Content to TAR Archive with Restic\nDESCRIPTION: Demonstrates dumping the entire contents of a folder from the latest snapshot to a tar archive via stdout redirection.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo dump latest /home/other/work > restore.tar\n```\n\n----------------------------------------\n\nTITLE: Dumping Folder Content to ZIP Archive with Restic\nDESCRIPTION: Shows how to dump folder contents from the latest snapshot to a zip archive using the -a zip option.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo dump -a zip latest /home/other/work > restore.zip\n```\n\n----------------------------------------\n\nTITLE: Dumping Subfolder Content to Root of Archive in Restic\nDESCRIPTION: Demonstrates using the snapshot:subfolder syntax to include folder content at the root of the archive instead of preserving the full path.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo dump latest:/home/other/work / > restore.tar\n```\n\n----------------------------------------\n\nTITLE: Removing Snapshots by Tag with Restic Forget Command\nDESCRIPTION: Demonstrates how to use the forget command with the --tag parameter to remove all but the latest snapshot that has a specific tag.\n\nLANGUAGE: console\nCODE:\n```\n$ restic forget --tag foo --keep-last 1\n```\n\n----------------------------------------\n\nTITLE: Listing Snapshots in Restic Repository\nDESCRIPTION: Shows the output of the snapshots command displaying 12 weekly backups over a three-month period.\n\nLANGUAGE: console\nCODE:\n```\n$ restic snapshots\nrepository f00c6e2a opened successfully\nID        Time                 Host        Tags        Paths\n---------------------------------------------------------------\n0a1f9759  2019-09-01 11:00:00  mopped                  /home/user/work\n46cfe4d5  2019-09-08 11:00:00  mopped                  /home/user/work\nf6b1f037  2019-09-15 11:00:00  mopped                  /home/user/work\neb430a5d  2019-09-22 11:00:00  mopped                  /home/user/work\n8cf1cb9a  2019-09-29 11:00:00  mopped                  /home/user/work\n5d33b116  2019-10-06 11:00:00  mopped                  /home/user/work\nb9553125  2019-10-13 11:00:00  mopped                  /home/user/work\ne1a7b58b  2019-10-20 11:00:00  mopped                  /home/user/work\n8f8018c0  2019-10-27 11:00:00  mopped                  /home/user/work\n59403279  2019-11-03 11:00:00  mopped                  /home/user/work\ndfee9fb4  2019-11-10 11:00:00  mopped                  /home/user/work\ne1ae2f40  2019-11-17 11:00:00  mopped                  /home/user/work\n---------------------------------------------------------------\n12 snapshots\n```\n\n----------------------------------------\n\nTITLE: Specifying S3 Storage Class for Restic Backup\nDESCRIPTION: Command demonstrating how to specify a different storage class when backing up to Amazon S3 with restic. This affects cost and durability of the stored backup.\n\nLANGUAGE: bash\nCODE:\n```\n$ restic backup -o s3.storage-class=REDUCED_REDUNDANCY test.bin\n```\n\n----------------------------------------\n\nTITLE: Setting restrictive permissions on the restic binary\nDESCRIPTION: Changes ownership and permissions of the restic binary so that only root and the restic user can execute it, preventing other users from misusing the privileged binary.\n\nLANGUAGE: bash\nCODE:\n```\nchown root:restic ~restic/bin/restic\nchmod 750 ~restic/bin/restic\n```\n\n----------------------------------------\n\nTITLE: Filtering Debug Logs by Function Name Patterns in Restic\nDESCRIPTION: Demonstrates filtering debug messages to only show those originating from functions matching a specific pattern using the DEBUG_FUNCS environment variable.\n\nLANGUAGE: console\nCODE:\n```\n$ DEBUG_FUNCS=*unlock* restic check\n```\n\n----------------------------------------\n\nTITLE: Building Restic with Debug Support\nDESCRIPTION: Shows how to build Restic with debug support enabled, which adds the debug subcommand and profiling support for investigating performance issues.\n\nLANGUAGE: console\nCODE:\n```\n$ go run build.go -tags debug\n```\n\n----------------------------------------\n\nTITLE: PGP Key for Security Issues in Restic\nDESCRIPTION: Provides the PGP key fingerprint and details for securely reporting security vulnerabilities to the project maintainer.\n\nLANGUAGE: text\nCODE:\n```\npub   4096R/91A6868BD3F7A907 2014-11-01\n      Key fingerprint = CF8F 18F2 8445 7597 3F79  D4E1 91A6 868B D3F7 A907\n      uid                          Alexander Neumann <alexander@bumpern.de>\n      sub   4096R/D5FC2ACF4043FDF1 2014-11-01\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Tags Incrementally\nDESCRIPTION: Shows how to incrementally modify tags on snapshots by using tag filters to select specific snapshots.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo tag --tag NL --remove CH\ncreate exclusive lock for repository\nmodified tags on 1 snapshots\n\n$ restic -r /srv/restic-repo tag --tag NL --add UK\ncreate exclusive lock for repository\nmodified tags on 1 snapshots\n\n$ restic -r /srv/restic-repo tag --tag NL --remove NL\ncreate exclusive lock for repository\nmodified tags on 1 snapshots\n\n$ restic -r /srv/restic-repo tag --tag NL --add SOMETHING\nno snapshots were modified\n```\n\n----------------------------------------\n\nTITLE: Calculating Host-Specific Repository Statistics\nDESCRIPTION: Demonstrates using the stats command with the --host flag to calculate statistics for snapshots from a specific host.\n\nLANGUAGE: console\nCODE:\n```\n$ restic stats --host myserver latest\nTotal File Count:   21766\n      Total Size:   481.783 GiB\n```\n\n----------------------------------------\n\nTITLE: Outputting Restic Snapshots as JSON with jq\nDESCRIPTION: This example demonstrates how to list all snapshots in JSON format and process the output with jq for better readability. The command outputs detailed snapshot information including timestamps, paths, and identifiers.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo snapshots --json | jq .\n[\n  {\n    \"time\": \"2017-03-11T09:57:43.26630619+01:00\",\n    \"tree\": \"bf25241679533df554fc0fd0ae6dbb9dcf1859a13f2bc9dd4543c354eff6c464\",\n    \"paths\": [\n      \"/home/work/doc\"\n    ],\n    \"hostname\": \"kasimir\",\n    \"username\": \"fd0\",\n    \"uid\": 1000,\n    \"gid\": 100,\n    \"id\": \"bbeed6d28159aa384d1ccc6fa0b540644b1b9599b162d2972acda86b1b80f89e\"\n  },\n  {\n    \"time\": \"2017-03-11T09:58:57.541446938+01:00\",\n    \"tree\": \"7f8c95d3420baaac28dc51609796ae0e0ecfb4862b609a9f38ffaf7ae2d758da\",\n    \"paths\": [\n      \"/home/user/shared\"\n    ],\n    \"hostname\": \"kasimir\",\n    \"username\": \"fd0\",\n    \"uid\": 1000,\n    \"gid\": 100,\n    \"id\": \"b157d91c16f0ba56801ece3a708dfc53791fe2a97e827090d6ed9a69a6ebdca0\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Restoring Windows Volume Snapshot with Subpath Syntax\nDESCRIPTION: Command for restoring a snapshot with ID '12345678' that backed up the Windows 'C:' volume, using the <snapshot>:<subpath> syntax to work around a previously existing bug.\n\nLANGUAGE: bash\nCODE:\n```\nrestic restore 12345678:/C/C:./ --target output/folder\n```\n\n----------------------------------------\n\nTITLE: Repository Lock Circuit Breaker Error\nDESCRIPTION: Error message that could occur in restic 0.17.0 when the system failed to retry locking a repository after a lock file failed to load.\n\nLANGUAGE: markdown\nCODE:\n```\nunable to create lock in backend: circuit breaker open for file <lock/1234567890>\n```\n\n----------------------------------------\n\nTITLE: HTTP/2 Transport Error for REST Backend\nDESCRIPTION: Error message that could occur when rest-server attempted to gracefully shut down an HTTP/2 connection that was still in use by a client.\n\nLANGUAGE: markdown\nCODE:\n```\nhttp2: Transport: cannot retry err [http2: Transport received Server's graceful shutdown GOAWAY] after Request.Body was written; define Request.GetBody to avoid this error\n```\n\n----------------------------------------\n\nTITLE: Incomplete Metadata Warning Message\nDESCRIPTION: Updated warning message format that displays when restic cannot read extended metadata for a file or folder during backup operations.\n\nLANGUAGE: markdown\nCODE:\n```\nincomplete metadata for /path/to/file: <details about error>\n```\n\n----------------------------------------\n\nTITLE: Connecting to Rest-Server Over Unix Socket in Bash\nDESCRIPTION: Example showing how to start a rest-server listening on a unix socket and connecting to it with restic. This allows for secure local connections without exposing a network port.\n\nLANGUAGE: bash\nCODE:\n```\nrest-server --listen unix:/tmp/rest.socket --data /path/to/data &\nrestic -r rest:http+unix:///tmp/rest.socket:/my_backup_repo/ [...]\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom VSS Provider for Windows Backup\nDESCRIPTION: Example showing how to specify a custom Windows Shadow Copy Service (VSS) provider instead of using the default one during backup operations.\n\nLANGUAGE: bash\nCODE:\n```\nRestic backup --use-fs-snapshot -o vss.provider={b5946137-7b9f-4925-af80-51abd60b20d5}\n```\n\n----------------------------------------\n\nTITLE: Using NCDU Output Format with Restic ls Command\nDESCRIPTION: Example of using the restic ls command with the --ncdu option to output snapshot information in NCDU format, which can then be piped to the ncdu utility for visualization.\n\nLANGUAGE: bash\nCODE:\n```\nrestic ls latest --ncdu | ncdu -f -\n```\n\n----------------------------------------\n\nTITLE: Using restic diff Command\nDESCRIPTION: Example of using the restic diff command to compare files between two snapshots at a specific path.\n\nLANGUAGE: bash\nCODE:\n```\nrestic diff 12345678:/some/path 90abcef:/some/path\n```\n\n----------------------------------------\n\nTITLE: Using restic cat Command for Debugging\nDESCRIPTION: Example of using the restic cat command to inspect directory metadata for debugging purposes.\n\nLANGUAGE: bash\nCODE:\n```\nrestic cat tree <snapshot>:<subfolder>\n```\n\n----------------------------------------\n\nTITLE: Building Restic from Source with Go\nDESCRIPTION: Commands to clone and build the restic project from source code without setting GOPATH. Includes steps to verify the built version.\n\nLANGUAGE: bash\nCODE:\n```\n$ unset GOPATH\n$ git clone https://github.com/restic/restic\n$ cd restic\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Restic\nDESCRIPTION: Commands to build the restic binary using Go and run the test suite. Shows standard build and debug build options.\n\nLANGUAGE: bash\nCODE:\n```\n$ go build ./cmd/restic\n$ ./restic version\nrestic 0.14.0-dev (compiled manually) compiled with go1.19 on linux/amd64\n```\n\n----------------------------------------\n\nTITLE: Enabling Restic Debug Logging\nDESCRIPTION: Environment variable setup to enable debug logging in restic, which is useful for troubleshooting issues.\n\nLANGUAGE: bash\nCODE:\n```\n$ export DEBUG_LOG=/tmp/restic-debug.log\n$ restic backup ~/work\n```\n\n----------------------------------------\n\nTITLE: Installing Restic on Linux/macOS using pkgx\nDESCRIPTION: Command to install restic on Linux or macOS using the pkgx package manager.\n\nLANGUAGE: console\nCODE:\n```\n$ pkgx install restic\n```\n\n----------------------------------------\n\nTITLE: Installing Restic on FreeBSD using pkg\nDESCRIPTION: Command to install restic on FreeBSD 11 and later versions using the pkg package manager with root privileges.\n\nLANGUAGE: console\nCODE:\n```\n# pkg install restic\n```\n\n----------------------------------------\n\nTITLE: Installing Restic on RHEL7/CentOS using copr repository\nDESCRIPTION: Commands to install restic on RHEL7/CentOS using yum by first enabling the copr repository for restic.\n\nLANGUAGE: console\nCODE:\n```\n$ yum install yum-plugin-copr\n$ yum copr enable copart/restic\n$ yum install restic\n```\n\n----------------------------------------\n\nTITLE: Generating Zsh autocompletion script for Restic\nDESCRIPTION: Command to generate and install a Zsh autocompletion script for restic into the system-wide location using sudo.\n\nLANGUAGE: console\nCODE:\n```\n$ sudo ./restic generate --zsh-completion /usr/local/share/zsh/site-functions/_restic\nwriting zsh completion file to /usr/local/share/zsh/site-functions/_restic\n```\n\n----------------------------------------\n\nTITLE: Creating an SFTP Repository with Restic\nDESCRIPTION: Command to initialize a remote restic repository over SFTP. Requires SSH access with public key authentication set up on the target server.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r sftp:user@host:/srv/restic-repo init\nenter password for new repository:\nenter password again:\ncreated restic repository f1c6108821 at sftp:user@host:/srv/restic-repo\nPlease note that knowledge of your password is required to access the repository.\nLosing your password means that your data is irrecoverably lost.\n```\n\n----------------------------------------\n\nTITLE: Initializing a REST Server Repository in Restic\nDESCRIPTION: Command to create a repository on a remote REST server over HTTP. This requires a REST server instance to be running on the target host.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r rest:http://host:8000/ init\n```\n\n----------------------------------------\n\nTITLE: Accessing Legacy Restic Repository on Amazon S3\nDESCRIPTION: Command to access a restic repository created with a version prior to 0.8.0, which used a default prefix of 'restic' in the bucket structure.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r s3:s3.us-east-1.amazonaws.com/bucket_name/restic [...]\n```\n\n----------------------------------------\n\nTITLE: Initializing Restic Repository on Minio Server\nDESCRIPTION: Command to initialize a new restic repository on a locally running Minio server. The command specifies the S3-compatible endpoint URL and the repository name.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r s3:http://localhost:9000/restic init\nenter password for new repository:\nenter password again:\ncreated restic repository 6ad29560f5 at s3:http://localhost:9000/restic\nPlease note that knowledge of your password is required to access\nthe repository. Losing your password means that your data is irrecoverably lost.\n```\n\n----------------------------------------\n\nTITLE: Setting OpenStack Swift Authentication Variables\nDESCRIPTION: Examples of environment variables needed for different OpenStack Swift authentication methods, including Keystone v1, v2, v3, application credential, and token-based authentication.\n\nLANGUAGE: console\nCODE:\n```\n# For keystone v1 authentication\n$ export ST_AUTH=<MY_AUTH_URL>\n$ export ST_USER=<MY_USER_NAME>\n$ export ST_KEY=<MY_USER_PASSWORD>\n\n# For keystone v2 authentication (some variables are optional)\n$ export OS_AUTH_URL=<MY_AUTH_URL>\n$ export OS_REGION_NAME=<MY_REGION_NAME>\n$ export OS_USERNAME=<MY_USERNAME>\n$ export OS_PASSWORD=<MY_PASSWORD>\n$ export OS_TENANT_ID=<MY_TENANT_ID>\n$ export OS_TENANT_NAME=<MY_TENANT_NAME>\n\n# For keystone v3 authentication (some variables are optional)\n$ export OS_AUTH_URL=<MY_AUTH_URL>\n$ export OS_REGION_NAME=<MY_REGION_NAME>\n$ export OS_USERNAME=<MY_USERNAME>\n$ export OS_USER_ID=<MY_USER_ID>\n$ export OS_PASSWORD=<MY_PASSWORD>\n$ export OS_USER_DOMAIN_NAME=<MY_DOMAIN_NAME>\n$ export OS_USER_DOMAIN_ID=<MY_DOMAIN_ID>\n$ export OS_PROJECT_NAME=<MY_PROJECT_NAME>\n$ export OS_PROJECT_DOMAIN_NAME=<MY_PROJECT_DOMAIN_NAME>\n$ export OS_PROJECT_DOMAIN_ID=<MY_PROJECT_DOMAIN_ID>\n$ export OS_TRUST_ID=<MY_TRUST_ID>\n\n# For keystone v3 application credential authentication (application credential id)\n$ export OS_AUTH_URL=<MY_AUTH_URL>\n$ export OS_APPLICATION_CREDENTIAL_ID=<MY_APPLICATION_CREDENTIAL_ID>\n$ export OS_APPLICATION_CREDENTIAL_SECRET=<MY_APPLICATION_CREDENTIAL_SECRET>\n\n# For keystone v3 application credential authentication (application credential name)\n$ export OS_AUTH_URL=<MY_AUTH_URL>\n$ export OS_USERNAME=<MY_USERNAME>\n$ export OS_USER_DOMAIN_NAME=<MY_DOMAIN_NAME>\n$ export OS_APPLICATION_CREDENTIAL_NAME=<MY_APPLICATION_CREDENTIAL_NAME>\n$ export OS_APPLICATION_CREDENTIAL_SECRET=<MY_APPLICATION_CREDENTIAL_SECRET>\n\n# For authentication based on tokens\n$ export OS_STORAGE_URL=<MY_STORAGE_URL>\n$ export OS_AUTH_TOKEN=<MY_AUTH_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Initializing Restic Repository on OpenStack Swift\nDESCRIPTION: Command to initialize a new restic repository on an OpenStack Swift container with an optional path. The container will be created automatically if it doesn't exist.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r swift:container_name:/path init   # path is optional\nenter password for new repository:\nenter password again:\ncreated restic repository eefee03bbd at swift:container_name:/path\nPlease note that knowledge of your password is required to access the repository.\nLosing your password means that your data is irrecoverably lost.\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure CLI for Restic\nDESCRIPTION: Command to authenticate with Azure using the Azure CLI. The user must have at least the Storage Blob Data Contributor role assignment.\n\nLANGUAGE: console\nCODE:\n```\n$ az login\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Azure Endpoint Suffix for Restic\nDESCRIPTION: Command to specify a custom endpoint suffix for Azure Blob Storage instead of the default core.windows.net.\n\nLANGUAGE: console\nCODE:\n```\n$ export AZURE_ENDPOINT_SUFFIX=<ENDPOINT_SUFFIX>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Restic Repository with rclone Backend\nDESCRIPTION: Command to initialize a new restic repository using rclone as the backend, which allows connecting to many different cloud storage services.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r rclone:foo:bar init\n```\n\n----------------------------------------\n\nTITLE: Listing Files in rclone Remote with B2 Example\nDESCRIPTION: Example command showing how to list files in a Backblaze B2 bucket using rclone directly before using it with restic.\n\nLANGUAGE: console\nCODE:\n```\n$ rclone ls b2prod:yggdrasil\n```\n\n----------------------------------------\n\nTITLE: Using Restic with Custom rclone Configuration\nDESCRIPTION: Example showing how to use restic with custom rclone configuration options including custom path, arguments, and bandwidth limits.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -o rclone.program=\"/path/to/rclone\" \\\n  -o rclone.args=\"serve restic --stdio --bwlimit 1M --b2-hard-delete --verbose\" \\\n  -r rclone:b2:foo/bar\n```\n\n----------------------------------------\n\nTITLE: Comparing Snapshots with Restic Diff Command\nDESCRIPTION: Uses the diff command to compare two snapshots by their IDs, showing added, modified, and removed files along with size statistics.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo diff 5845b002 2ab627a6\ncomparing snapshot ea657ce5 to 2ab627a6:\n\nM    /restic/cmd_diff.go\n+    /restic/foo\nM    /restic/restic\n\nFiles:           0 new,     0 removed,     2 changed\nDirs:            1 new,     0 removed\nOthers:          0 new,     0 removed\nData Blobs:     14 new,    15 removed\nTree Blobs:      2 new,     1 removed\n  Added:   16.403 MiB\n  Removed: 16.402 MiB\n```\n\n----------------------------------------\n\nTITLE: Backing Up MySQL Database with stdin-from-command\nDESCRIPTION: Creates a backup of a MySQL database by directly piping the output of mysqldump into restic, preventing restic from interpreting the command arguments.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo backup --stdin-from-command -- mysqldump --host example mydb [...]\n```\n\n----------------------------------------\n\nTITLE: Listing Files from Latest Snapshot by Host\nDESCRIPTION: Demonstrates how to list files from the latest snapshot for a specific host using the 'ls' command with '--host' flag and the special 'latest' snapshot ID.\n\nLANGUAGE: console\nCODE:\n```\n$ restic ls --host kasimir latest\n\nsnapshot 073a90db of [/home/user/work.txt] filtered by [] at 2024-01-21 16:51:18.474558607 +0100 CET):\n/home\n/home/user\n/home/user/work.txt\n```\n\n----------------------------------------\n\nTITLE: Copying Specific Snapshots by ID\nDESCRIPTION: Example showing how to copy explicitly specified snapshots by their IDs instead of copying all snapshots.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo-copy copy --from-repo /srv/restic-repo 410b18a2 4e5d5487 latest\n```\n\n----------------------------------------\n\nTITLE: Rewriting Snapshots to Exclude Files\nDESCRIPTION: Examples showing how to remove unwanted files from snapshots by rewriting them with exclusion patterns.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo rewrite --exclude secret-file\nrepository c881945a opened (repository version 2) successfully\n\nsnapshot 6160ddb2 of [/home/user/work] at 2022-06-12 16:01:28.406630608 +0200 CEST by user@kasimir\nexcluding /home/user/work/secret-file\nsaved new snapshot b6aee1ff\n\nsnapshot 4fbaf325 of [/home/user/work] at 2022-05-01 11:22:26.500093107 +0200 CEST by user@kasimir\n\nmodified 1 snapshots\n\n$ restic -r /srv/restic-repo rewrite --exclude secret-file 6160ddb2\nrepository c881945a opened (repository version 2) successfully\n\nsnapshot 6160ddb2 of [/home/user/work] at 2022-06-12 16:01:28.406630608 +0200 CEST by user@kasimir\nexcluding /home/user/work/secret-file\nnew snapshot saved as b6aee1ff\n\nmodified 1 snapshots\n```\n\n----------------------------------------\n\nTITLE: Successful Repository Integrity Check\nDESCRIPTION: Example of a successful integrity check showing no errors in the repository.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /src/restic-repo check\n...\nload indexes\ncheck all packs\ncheck snapshots, trees and blobs\nno errors were found\n```\n\n----------------------------------------\n\nTITLE: Disabling Data Verification for Performance\nDESCRIPTION: Use the --no-extra-verify option with the backup command to disable verification of generated files, which reduces CPU usage during backups.\n\nLANGUAGE: bash\nCODE:\n```\nbackup --no-extra-verify\n```\n\n----------------------------------------\n\nTITLE: Verifying Repository Integrity\nDESCRIPTION: Use the check command with --read-data or --read-data-subset options to verify repository integrity, especially important when disabling verification during backups.\n\nLANGUAGE: bash\nCODE:\n```\ncheck --read-data\n```\n\n----------------------------------------\n\nTITLE: Increasing File Read Concurrency\nDESCRIPTION: Set the read concurrency for file operations using either RESTIC_READ_CONCURRENCY environment variable or the --read-concurrency option to optimize performance with fast storage.\n\nLANGUAGE: bash\nCODE:\n```\n--read-concurrency\n```\n\n----------------------------------------\n\nTITLE: Configuring Pack Size via Environment Variable\nDESCRIPTION: Set the pack size using the RESTIC_PACK_SIZE environment variable as an alternative to command-line options.\n\nLANGUAGE: bash\nCODE:\n```\nRESTIC_PACK_SIZE\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Feature Flags\nDESCRIPTION: Use the features command to list all currently available feature flags in restic.\n\nLANGUAGE: bash\nCODE:\n```\nfeatures\n```\n\n----------------------------------------\n\nTITLE: Verifying Snapshot Removal\nDESCRIPTION: Shows how to list snapshots after removal to verify that the specified snapshot has been successfully removed from the repository.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /srv/restic-repo snapshots\nenter password for repository:\nID        Date                 Host     Tags  Directory\n----------------------------------------------------------------------\n40dc1520  2015-05-08 21:38:30  kasimir        /home/user/work\n79766175  2015-05-08 21:40:19  kasimir        /home/user/work\n590c8fc8  2015-05-08 21:47:38  kazik          /srv\n9f0bc19e  2015-05-08 21:46:11  luigi          /srv\n```\n\n----------------------------------------\n\nTITLE: Defining Python-Style Heading Level Conventions in Markdown\nDESCRIPTION: This snippet outlines the convention for documentation heading levels used in the restic project, following Python's Style Guide for documentation structure. It defines specific characters to be used for different heading levels in the documentation hierarchy.\n\nLANGUAGE: markdown\nCODE:\n```\n# with overline, for parts\n* for chapters\n= for sections\n- for subsections\n^ for subsubsections\n\" for paragraphs\n```\n\n----------------------------------------\n\nTITLE: Configuration JSON for Restic Repository\nDESCRIPTION: JSON document stored in the encrypted config file of a restic repository. It contains the version number, unique repository ID, and chunker polynomial used for splitting large files.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 2,\n  \"id\": \"5956a3f67a6230d4a92cefb29529f10196c7d92582ec305fd71ff6d331d6271b\",\n  \"chunker_polynomial\": \"25b468838dcb75\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Local Restic Repository with CLI\nDESCRIPTION: Command line example showing how to initialize a new restic repository in a local directory using the restic init command.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /tmp/restic-repo init\n```\n\n----------------------------------------\n\nTITLE: Index File JSON Structure for Restic Repository\nDESCRIPTION: This code shows the JSON structure of an index file in a restic repository. It contains references to packs and blobs, with information about their location, size, and compression status. The \"supersedes\" field lists index files that have been replaced.\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"supersedes\": [\n    \"ed54ae36197f4745ebc4b54d10e0f623eaaaedd03013eb7ae90df881b7781452\"\n  ],\n  \"packs\": [\n    {\n      \"id\": \"73d04e6125cf3c28a299cc2f3cca3b78ceac396e4fcf9575e34536b26782413c\",\n      \"blobs\": [\n        {\n          \"id\": \"3ec79977ef0cf5de7b08cd12b874cd0f62bbaf7f07f3497a5b1bbcc8cb39b1ce\",\n          \"type\": \"data\",\n          \"offset\": 0,\n          \"length\": 38,\n          // no 'uncompressed_length' as blob is not compressed\n        },\n        {\n          \"id\": \"9ccb846e60d90d4eb915848add7aa7ea1e4bbabfc60e573db9f7bfb2789afbae\",\n          \"type\": \"data\",\n          \"offset\": 38,\n          \"length\": 112,\n          \"uncompressed_length\": 511,\n        },\n        {\n          \"id\": \"d3dc577b4ffd38cc4b32122cabf8655a0223ed22edfd93b353dc0c3f2b0fdf66\",\n          \"type\": \"data\",\n          \"offset\": 150,\n          \"length\": 123,\n          \"uncompressed_length\": 234,\n        }\n      ]\n    }, [...]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Modified Restic Snapshot with Updated Tags\nDESCRIPTION: This example shows a snapshot after modifications to its metadata (adding the 'DE' tag). The 'original' field has been added to reference the ID of the original snapshot, maintaining the relationship between versions of the same snapshot.\n\nLANGUAGE: console\nCODE:\n```\n$ restic -r /tmp/restic-repo cat snapshot 22a5af1b\nenter password for repository:\n{\n  \"time\": \"2015-01-02T18:10:50.895208559+01:00\",\n  \"tree\": \"2da81727b6585232894cfbb8f8bdab8d1eccd3d8f7c92bc934d62e62e618ffdf\",\n  \"paths\": [\n    \"/tmp/testdata\"\n  ],\n  \"hostname\": \"kasimir\",\n  \"username\": \"fd0\",\n  \"uid\": 1000,\n  \"gid\": 100,\n  \"tags\": [\n    \"NL\",\n    \"DE\"\n  ],\n  \"original\": \"251c2e5841355f743f9d4ffd3260bee765acee40a6229857e32b60446991b837\"\n}\n```\n\n----------------------------------------\n\nTITLE: Determining Go Compiler Version and Extracting Source Code\nDESCRIPTION: Commands to determine the Go compiler version used for official restic binaries, download and extract the compiler, and extract the restic source code while preserving timezone settings.\n\nLANGUAGE: bash\nCODE:\n```\n$ restic version\nrestic 0.14.0 compiled with go1.19 on linux/amd64\n$ cd /usr/local\n$ curl -L https://dl.google.com/go/go1.19.linux-amd64.tar.gz | tar xz\n```\n\n----------------------------------------\n\nTITLE: Extracting Restic Source Code\nDESCRIPTION: Commands to create a directory for restic source code and extract it while setting the timezone to Europe/Berlin to ensure reproducible builds.\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir /restic\n$ cd /restic\n$ TZ=Europe/Berlin curl -L https://github.com/restic/restic/releases/download/v0.14.0/restic-0.14.0.tar.gz | tar xz --strip-components=1\n```\n\n----------------------------------------\n\nTITLE: Pulling the Restic Builder Docker Container\nDESCRIPTION: Command to download the official restic builder Docker container which provides a controlled environment for building release binaries.\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull restic/builder\n```\n\n----------------------------------------\n\nTITLE: Extracting Source Code and Creating Output Directory\nDESCRIPTION: Commands to extract the restic source code and create an output directory for storing built binaries.\n\nLANGUAGE: bash\nCODE:\n```\ntar xvzf restic-0.14.0.tar.gz\nmkdir output\n```\n\n----------------------------------------\n\nTITLE: Building Release Binaries with Verbose Output\nDESCRIPTION: Docker command with verbose output enabled to help debug issues when building release binaries.\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm \\\n    --volume \"$PWD/restic-0.14.0:/restic\" \\\n    --volume \"$PWD/output:/output\" \\\n    restic/builder \\\n    go run helpers/build-release-binaries/main.go --version 0.14.0 --verbose\n```\n\n----------------------------------------\n\nTITLE: Setting IO priority for restic with ionice\nDESCRIPTION: This command shows how to use ionice to set restic's IO priority to the best effort class with highest priority, useful for controlling system impact during backups.\n\nLANGUAGE: bash\nCODE:\n```\n$ ionice -c2 -n0 ./restic -r /media/your/backup/ backup /home\n```\n\n----------------------------------------\n\nTITLE: Combining IO and CPU priority settings for restic\nDESCRIPTION: This example shows how to combine both ionice and nice to control both IO and CPU scheduling priorities, optimizing system responsiveness during backup operations.\n\nLANGUAGE: bash\nCODE:\n```\n$ ionice -c2 nice -n19 ./restic -r /media/gour/backup/ backup /home\n```\n\n----------------------------------------\n\nTITLE: Using S3 Glacier Storage with Restic\nDESCRIPTION: Commands for backing up to S3 Glacier storage class and restoring from it. The first command backs up a directory to Glacier, while the second command demonstrates the experimental restore feature with specific timeout and restore days parameters.\n\nLANGUAGE: console\nCODE:\n```\n$ restic backup -o s3.storage-class=GLACIER somedir/\n$ RESTIC_FEATURES=s3-restore restic restore -o s3.enable-restore=1 -o s3.restore-days=7 -o s3.restore-timeout=24h latest\n```"
  }
]