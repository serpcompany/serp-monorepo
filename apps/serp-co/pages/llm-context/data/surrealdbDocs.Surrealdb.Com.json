[
  {
    "owner": "surrealdb",
    "repo": "docs.surrealdb.com",
    "content": "TITLE: Defining API Endpoint Syntax in SurrealQL\nDESCRIPTION: Syntax for creating a custom API endpoint using the DEFINE API statement. It includes options for HTTP methods, middleware, response handling, and permissions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE API [ OVERWRITE | IF NOT EXISTS ] @endpoint\n    [ FOR @HTTP_method, .. ]\n    [ MIDDLEWARE @function, .. ]\n    [ THEN { @value } ]\n    [ PERMISSIONS [ NONE | FULL | @expression ]\n```\n\n----------------------------------------\n\nTITLE: Connecting Records with FETCH Clause in SurrealQL\nDESCRIPTION: Examples of using the FETCH clause to retrieve related record data in SurrealDB. This allows for efficient traversal of related records without using traditional SQL JOINs.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_19\n\nLANGUAGE: surql\nCODE:\n```\n-- Select all the review information\n-- and the artist's email from the artist table\nSELECT *, artist.email FROM review FETCH artist;\n\n-- Select all the article information\n-- only if the author's age (from the author table) is under 30.\nSELECT * FROM article WHERE author.age < 30 FETCH author;\n```\n\n----------------------------------------\n\nTITLE: Managing SurrealDB Connection Lifecycle in Python\nDESCRIPTION: Demonstrates how to manage the SurrealDB connection lifecycle using both manual connection management and Python's context manager for both synchronous and asynchronous connections.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/create-a-new-connection.mdx#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom surrealdb import Surreal\n\n# Without using a context manager\ndb = Surreal('ws://localhost:8000')\ndb.use('namespace', 'database')\n# Sign in and your code...\ndb.close()\n\n# Using a context manager\nwith Surreal('ws://localhost:8000') as db:\n    db.use('namespace', 'database')\n\t# Sign in and your code...\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom surrealdb import AsyncSurreal\n\n# Without using a context manager\ndb = AsyncSurreal('ws://localhost:8000')\nawait db.use('namespace', 'database')\n# Sign in and your code...\nawait db.close()\n\n# Using a context manager\nasync with AsyncSurreal('ws://localhost:8000') as db:\n    await db.use('namespace', 'database')\n\t# Sign in and your code...\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying SurrealDB with JavaScript SDK\nDESCRIPTION: This code demonstrates how to set up a connection to a SurrealDB instance using the JavaScript SDK, execute a query that creates a new record and then selects data, and handle the typed results. It shows how to import the Surreal client, establish a connection, define types, and work with query results.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Surreal } from 'surrealdb';\n\nconst db = new Surreal('http://localhost:8000');\n\nawait db.connect('root', 'root');\n\ntype Person = {\n\tid: string;\n\tname: string;\n};\n\n// Assign the variable on the connection\nconst result = await db.query<[Person[], Person[]]>(\n\t'CREATE person SET name = \"John\"; SELECT * FROM type::table($tb);',\n\t{ tb: 'person' }\n);\n\n// Get all of the results from the second query\nconst people = result[1].result;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unique ID of a Record in Rust with SurrealDB\nDESCRIPTION: This comprehensive example shows how to connect to a SurrealDB database, sign in, select a namespace and database, create a person record, and then query that person using the select() method. It demonstrates error handling and the use of the RecordId type.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/select.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::Deserialize;\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::RecordId;\nuse surrealdb::Surreal;\n\n#[derive(Debug, Deserialize)]\nstruct Person {\n\tid: RecordId,\n\tname: String,\n\tage: u8,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n\t// Connect to the database\n\tlet db = Surreal::new::<Ws>(\"localhost:8000\").await?;\n\n\t// Sign in\n\tdb.signin(Root {\n\t\tusername: \"root\",\n\t\tpassword: \"root\",\n\t})\n\t.await?;\n\n\t// Select namespace and database to use\n\tdb.use_ns(\"namespace\").use_db(\"database\").await?;\n\n\t// Create a person\n\tdb.query(\"CREATE person:john SET name = 'John Doe', age = 25\").await?.check()?;\n\n\t// Query that person\n\tlet john: Option<Person> = db.select((\"person\", \"john\")).await?;\n\tdbg!(john);\n\n\tOk(())\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CRUD Operations with SurrealDB Python SDK\nDESCRIPTION: Comprehensive example showing connection setup and basic CRUD operations using both direct methods and SurrealQL queries. Demonstrates use of the Surreal class with context manager for automatic connection handling.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/start.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Import the Surreal class\nfrom surrealdb import Surreal\n\n# Using a context manger to automatically connect and disconnect\nwith Surreal(\"ws://localhost:8000/rpc\") as db:\n    db.signin({\"username\": 'root', \"password\": 'root'})\n    db.use(\"namepace_test\", \"database_test\")\n\n    # Create a record in the person table\n    db.create(\n        \"person\",\n        {\n            \"user\": \"me\",\n            \"password\": \"safe\",\n            \"marketing\": True,\n            \"tags\": [\"python\", \"documentation\"],\n        },\n    )\n\n    # Read all the records in the table\n    print(db.select(\"person\"))\n\n    # Update all records in the table\n    print(db.update(\"person\", {\n        \"user\":\"you\",\n        \"password\":\"very_safe\",\n        \"marketing\": False,\n        \"tags\": [\"Awesome\"]\n    }))\n\n    # Delete all records in the table\n    print(db.delete(\"person\"))\n\n    # You can also use the query method \n    # doing all of the above and more in SurrealQl\n    \n    # In SurrealQL you can do a direct insert \n    # and the table will be created if it doesn't exist\n    \n    # Create\n    db.query(\"\"\"\n    insert into person {\n        user: 'me',\n        password: 'very_safe',\n        tags: ['python', 'documentation']\n    };\n    \"\"\")\n\n    # Read\n    print(db.query(\"select * from person\"))\n    \n    # Update\n    print(db.query(\"\"\"\n    update person content {\n        user: 'you',\n        password: 'more_safe',\n        tags: ['awesome']\n    };\n    \"\"\"))\n\n    # Delete\n    print(db.query(\"delete person\"))\n```\n\n----------------------------------------\n\nTITLE: Defining SurrealQL DEFINE ACCESS Statement Syntax\nDESCRIPTION: This snippet shows the full syntax for the DEFINE ACCESS statement in SurrealQL. It includes options for different access types, authentication methods, and duration settings.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS [ OVERWRITE | IF NOT EXISTS ] @name\n  ON [ ROOT | NAMESPACE | DATABASE ]\n  TYPE [\n    JWT [ ALGORITHM @algorithm KEY @key | URL @url ]\n    | RECORD\n      [ SIGNUP @expression ]\n      [ SIGNIN @expression ]\n      [ WITH JWT\n        [ ALGORITHM @algorithm KEY @key | URL @url ]\n        [ WITH ISSUER KEY @key ]\n      ]\n      [ WITH REFRESH ]\n    | BEARER FOR [ USER | RECORD ]\n  [ AUTHENTICATE @expression ]\n  [ DURATION\n    [ FOR GRANT @duration ]\n    [ FOR TOKEN @duration ]\n    [ FOR SESSION @duration ]\n  ]\n  [ COMMENT @string ]\n```\n\n----------------------------------------\n\nTITLE: Defining SurrealQL Syntax for DEFINE Statement\nDESCRIPTION: This code block outlines the comprehensive syntax for the DEFINE statement in SurrealQL, covering all possible elements that can be defined including namespaces, databases, users, tables, events, fields, parameters, functions, analyzers, indexes, and access rules.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: SurrealQL\nCODE:\n```\nDEFINE [\n\tNAMESPACE [ OVERWRITE | IF NOT EXISTS ] @name\n\t| DATABASE [ OVERWRITE | IF NOT EXISTS ] @name\n\t| USER [ OVERWRITE | IF NOT EXISTS ] @name ON [ ROOT | NAMESPACE | DATABASE ] [ PASSWORD @pass | PASSHASH @hash ] ROLES @roles\n\t| TABLE [ OVERWRITE | IF NOT EXISTS ] @name\n\t\t[ DROP ]\n\t\t[ SCHEMAFULL | SCHEMALESS ]\n\t\t[ AS SELECT @projections\n\t\t\tFROM @tables\n\t\t\t[ WHERE @condition ]\n\t\t\t[ GROUP [ BY ] @groups ]\n\t\t]\n\t\t[ PERMISSIONS [ NONE | FULL\n\t\t\t| FOR select @expression\n\t\t\t| FOR create @expression\n\t\t\t| FOR update @expression\n\t\t\t| FOR delete @expression\n\t\t] ]\n\t| EVENT [ OVERWRITE | IF NOT EXISTS ] @name ON [ TABLE ] @table WHEN @expression THEN @expression\n\t| FIELD [ OVERWRITE | IF NOT EXISTS ] @name ON [ TABLE ] @table\n\t\t[ [ FLEXIBLE ] TYPE @type ]\n\t\t[ VALUE @expression ]\n\t\t[ ASSERT @expression ]\n\t\t[ PERMISSIONS [ NONE | FULL\n\t\t\t| FOR select @expression\n\t\t\t| FOR create @expression\n\t\t\t| FOR update @expression\n\t\t\t| FOR delete @expression\n\t\t] ]\n\t| PARAM [ OVERWRITE | IF NOT EXISTS ] $@name VALUE @value\n\t| FUNCTION [ OVERWRITE | IF NOT EXISTS ] fn::@name ( [ ( @argument:@type ... ) ] ) { [@query] [RETURNS @returned] }\n\t| ANALYZER [ OVERWRITE | IF NOT EXISTS ] @name\n\t\t[ TOKENIZERS @tokenizers ]\n\t\t[ FILTERS @filters ]\n\t| INDEX [ OVERWRITE | IF NOT EXISTS ] @name ON [ TABLE ] @table [ FIELDS | COLUMNS ] @fields\n\t\t[ UNIQUE | SEARCH ANALYZER @analyzer [ BM25 [(@k1, @b)] ] [ HIGHLIGHTS ] ]\n\t| ACCESS [ OVERWRITE | IF NOT EXISTS ] @name ON [ NAMESPACE | DATABASE ]\n\t\tTYPE [\n\t\t\tJWT [ ALGORITHM @algorithm KEY @key | URL @url ]\n\t\t\t| RECORD\n\t\t\t\t[ SIGNUP @expression ]\n\t\t\t\t[ SIGNIN @expression ]\n\t\t\t\t[ WITH JWT [ ALGORITHM @algorithm KEY @key | URL @url ] [ WITH ISSUER KEY @key ] ]\n\t\t]\n\t\t[ DURATION [ FOR TOKEN @duration ] [ FOR SESSION @duration ] ]\n    [ COMMENT @string ]\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Full-Text Search in SurrealDB\nDESCRIPTION: Creates a schemaless articles table, defines a custom analyzer with tokenization and filtering rules, and creates full-text search indexes on title and body fields with BM25 scoring and highlighting capabilities.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/full-text-search.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nUSE NAMESPACE myapp DB content;\n\n-- Create a table for articles (schemaless or define fields explicitly)\nCREATE TABLE articles SCHEMALESS;\n\n-- Define a custom analyzer\nDEFINE ANALYZER my_custom_analyzer\n  TOKENIZERS class\n  FILTERS lowercase, ascii;\n\n-- Create a full-text search index\nDEFINE INDEX ml_title \n  ON TABLE article \n  FIELDS title \n  SEARCH ANALYZER my_analyzer \n  HIGHLIGHTS BM25;\n\nDEFINE INDEX ml_body \n  ON TABLE article \n  FIELDS body \n  SEARCH ANALYZER my_analyzer \n  HIGHLIGHTS BM25;\n```\n\n----------------------------------------\n\nTITLE: Conditional Record Selection with WHERE in SurrealQL\nDESCRIPTION: Example of using the WHERE clause to filter results in a SELECT statement, allowing selection of a subset of records from a table based on a specific condition.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/where.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nSELECT @fields FROM <TABLE_NAME> WHERE <CONDITION> = <VALUE>;\n```\n\n----------------------------------------\n\nTITLE: Using IF NOT EXISTS Clause in Function Definition in SurrealQL\nDESCRIPTION: Shows how to use the IF NOT EXISTS clause to define a function only if it doesn't already exist, preventing accidental overwriting of existing functions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/function.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FUNCTION IF NOT EXISTS fn::example() {};\n```\n\n----------------------------------------\n\nTITLE: Initializing SurrealDB Client Methods in Golang\nDESCRIPTION: Core initialization methods for connecting to SurrealDB, switching databases, and managing connection parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\ndb.New()\ndb.Use(namespace, database)\ndb.Let(key, value)\ndb.Unset(key)\n```\n\n----------------------------------------\n\nTITLE: Creating Records with .NET SDK for SurrealDB\nDESCRIPTION: The Create method is used to insert new records into the SurrealDB database. It supports creating records with random or specific IDs, and allows for setting specific fields. The method is generic and asynchronous, returning a task of type T.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Create<T>(resource, data)\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Operations for Person Records with SurrealDB\nDESCRIPTION: A set of functions implementing create, read, update, delete (CRUD) operations and a listing operation for person records in SurrealDB. Each function maps to a specific HTTP endpoint and method using Rocket's routing system.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nconst PERSON: &str = \"person\";\n\n#[post(\"/person/<id>\", data = \"<person>\")]\npub async fn create_person(\n    id: String,\n    person: Json<PersonData>,\n) -> Result<Json<Option<Person>>, Error> {\n    let person = DB\n        .create((PERSON, &*id))\n        .content(person.into_inner())\n        .await?;\n    Ok(Json(person))\n}\n\n#[get(\"/person/<id>\")]\npub async fn read_person(id: String) -> Result<Json<Option<Person>>, Error> {\n    let person = DB.select((PERSON, &*id)).await?;\n    Ok(Json(person))\n}\n\n#[put(\"/person/<id>\", data = \"<person>\")]\npub async fn update_person(\n    id: String,\n    person: Json<PersonData>,\n) -> Result<Json<Option<Person>>, Error> {\n    let person = DB\n        .update((PERSON, &*id))\n        .content(person.into_inner())\n        .await?;\n    Ok(Json(person))\n}\n\n#[delete(\"/person/<id>\")]\npub async fn delete_person(id: String) -> Result<Json<Option<Person>>, Error> {\n    let person = DB.delete((PERSON, &*id)).await?;\n    Ok(Json(person))\n}\n\n#[get(\"/people\")]\npub async fn list_people() -> Result<Json<Vec<Person>>, Error> {\n    let people = DB.select(PERSON).await?;\n    Ok(Json(people))\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SurrealDB operations in C# console application\nDESCRIPTION: A C# example demonstrating connection to SurrealDB, authentication, data creation, updating records, querying data, and defining model classes. The code showcases core SDK functionality including creating records, merging data, and executing custom queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/start.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing SurrealDb.Net;\nusing SurrealDb.Net.Models;\nusing SurrealDb.Net.Models.Auth;\nusing System.Text.Json;\n\nconst string TABLE = \"person\";\n\nusing var db = new SurrealDbClient(\"ws://127.0.0.1:8000/rpc\");\n\nawait db.SignIn(new RootAuth { Username = \"root\", Password = \"root\" });\nawait db.Use(\"test\", \"test\");\n\nvar person = new Person\n{\n\tTitle = \"Founder & CEO\",\n\tName = new() { FirstName = \"Tobie\", LastName = \"Morgan Hitchcock\" },\n\tMarketing = true\n};\nvar created = await db.Create(TABLE, person);\nConsole.WriteLine(ToJsonString(created));\n\nvar updated = await db.Merge<ResponsibilityMerge, Person>(\n\tnew() { Id = (TABLE, \"jaime\"), Marketing = true }\n);\nConsole.WriteLine(ToJsonString(updated));\n\nvar people = await db.Select<Person>(TABLE);\nConsole.WriteLine(ToJsonString(people));\n\nvar queryResponse = await db.Query(\n    $\"SELECT Marketing, count() AS Count FROM type::table({TABLE}) GROUP BY Marketing\"\n);\nvar groups = queryResponse.GetValue<List<Group>>(0);\nConsole.WriteLine(ToJsonString(groups));\n\nstatic string ToJsonString(object? o)\n{\n    return JsonSerializer.Serialize(o, new JsonSerializerOptions { WriteIndented = true, });\n}\n\npublic class Person : Record\n{\n\tpublic string? Title { get; set; }\n\tpublic Name? Name { get; set; }\n\tpublic bool Marketing { get; set; }\n}\npublic class Name\n{\n\tpublic string? FirstName { get; set; }\n\tpublic string? LastName { get; set; }\n}\npublic class ResponsibilityMerge : Record\n{\n\tpublic bool Marketing { get; set; }\n}\npublic class Group\n{\n\tpublic bool Marketing { get; set; }\n\tpublic int Count { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector Search with Filtering in SurrealDB\nDESCRIPTION: A complete example demonstrating how to create a dataset with vector embeddings, define an HNSW index, and perform a filtered KNN search. The example finds actors who resemble a given embedding and have won an Oscar.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/vector-search.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n-- Create a dataset of actors with embeddings and flags\nCREATE actor:1 SET name = 'Actor 1', embedding = [0.1, 0.2, 0.3, 0.4], flag = true;\nCREATE actor:2 SET name = 'Actor 2', embedding = [0.2, 0.1, 0.4, 0.3], flag = false;\nCREATE actor:3 SET name = 'Actor 3', embedding = [0.4, 0.3, 0.2, 0.1], flag = true;\nCREATE actor:4 SET name = 'Actor 4', embedding = [0.3, 0.4, 0.1, 0.2], flag = true;\n\n-- Define an embbedding to represent a face\nLET $person_embedding = [0.15, 0.25, 0.35, 0.45];\n\n-- Define an HNSW index on the actor table\nDEFINE INDEX hnsw_pts ON actor FIELDS embedding HNSW DIMENSION 4;\n\n-- Select actors who look like you and have won an Oscar\nSELECT id, flag, vector::distance::knn() AS distance FROM actor WHERE flag = true AND embedding <|2,40|> $person_embedding ORDER BY distance;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of BEGIN TRANSACTION in SurrealDB\nDESCRIPTION: This example shows a complete transaction that creates two accounts, updates their balances, and commits the changes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/transactions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nBEGIN TRANSACTION;\n\nCREATE account:one SET balance = 135605.16;\n\nCREATE account:two SET balance = 91031.31;\n\nUPDATE account:one SET balance += 300.00;\n\nUPDATE account:two SET balance -= 300.00;\n\nCOMMIT TRANSACTION;\n```\n\n----------------------------------------\n\nTITLE: SurrealQL Query Method Syntax\nDESCRIPTION: Method signature for executing SurrealQL queries with optional variable parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/writing-surrealql.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.query(query, vars)\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication with SurrealDB in Rust\nDESCRIPTION: Demonstrates how to use the signin() method to authenticate a user with SurrealDB. It includes setting up credentials, connecting to the database, and handling the returned JWT token.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/signin.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// Use the following statement to set up the access\n//\n// DEFINE ACCESS account ON DATABASE TYPE RECORD\n// \tSIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\n// \tSIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )\n// \tDURATION FOR TOKEN 15m, FOR SESSION 12h\n// ;\n\nuse serde::Serialize;\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Record;\nuse surrealdb::Surreal;\n\n#[derive(Serialize)]\nstruct Credentials<'a> {\n    email: &'a str,\n    pass: &'a str,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = Surreal::new::<Ws>(\"127.0.0.1:8000\").await?;\n    let jwt = db\n        .signin(Record {\n            namespace: \"test\",\n            database: \"test\",\n            access: \"account\",\n            params: Credentials {\n                email: \"info@surrealdb.com\",\n                pass: \"123456\",\n            },\n        })\n        .await?;\n\n    // ⚠️: It is important to note that the token should be handled securely and protected from unauthorized access.\n    let token = jwt.as_insecure_token();\n    dbg!(token);\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Records with References in SurrealQL\nDESCRIPTION: This example demonstrates how to create records with references and query them to see the automatically tracked references.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/references.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:one, person:two SET comics = [comic_book:one];\nCREATE comic_book:one SET title = \"Loki, God of Stories\";\nSELECT * FROM comic_book;\n```\n\n----------------------------------------\n\nTITLE: Safe Query Construction with Parameterization in Rust\nDESCRIPTION: Shows the recommended way to construct queries using parameterization to prevent SQL injection vulnerabilities.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/query.mdx#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet sql = \"\n    CREATE person;\n    SELECT * FROM type::table($table);\n\";\n```\n\n----------------------------------------\n\nTITLE: Insert Method Usage Examples\nDESCRIPTION: Comprehensive examples showing how to insert single and multiple records into SurrealDB using TypeScript, including type definitions and generic type parameters for different input/output scenarios.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/insert.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n\tid: string;\n\tname: string;\n\tsettings: {\n\t\tactive: boolean;\n\t\tmarketing: boolean;\n\t};\n};\n\n// Insert a single record\nconst [person] = await db.insert<Person>('person', {\n\tname: 'Tobie',\n\tsettings: {\n\t\tactive: true,\n\t\tmarketing: true,\n\t},\n});\n\n// Insert multiple records\nconst people = await db.insert<Person>('person', [\n\t{\n\t\tname: 'Tobie',\n\t\tsettings: {\n\t\t\tactive: true,\n\t\t\tmarketing: true,\n\t\t},\n\t},\n\t{\n\t\tname: 'Jaime',\n\t\tsettings: {\n\t\t\tactive: true,\n\t\t\tmarketing: true,\n\t\t},\n\t},\n]);\n\n// The content you are creating the record with might differ from the return type\nconst people = await db.insert<\n\tPerson,\n\tPick<Person, 'name'>\n>('person', [\n\t{ name: 'Tobie' },\n\t{ name: 'Jaime' },\n]);\n```\n\n----------------------------------------\n\nTITLE: Building a Complete RESTful API with SurrealDB and Rocket in Rust\nDESCRIPTION: A comprehensive Rust application that integrates SurrealDB with Rocket framework to build a RESTful API. It includes database initialization, error handling, authentication, and CRUD operations for person records with different permission levels.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\n#[macro_use]\nextern crate rocket;\n\nuse std::sync::LazyLock;\nuse surrealdb::engine::remote::ws::Client;\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::Surreal;\n\nstatic DB: LazyLock<Surreal<Client>> = LazyLock::new(Surreal::init);\n\nmod error {\n    use rocket::http::Status;\n    use rocket::response::{self, Responder, Response};\n    use rocket::Request;\n    use thiserror::Error;\n\n    #[derive(Error, Debug)]\n    pub enum Error {\n        #[error(\"database error\")]\n        Db,\n    }\n\n    impl<'r> Responder<'r, 'static> for Error {\n        fn respond_to(self, _: &'r Request<'_>) -> response::Result<'static> {\n            let error_message = format!(r#\"{{ \"error\": \"{self}\" }}\"#);\n            Response::build()\n                .status(Status::InternalServerError)\n                .header(rocket::http::ContentType::JSON)\n                .sized_body(error_message.len(), std::io::Cursor::new(error_message))\n                .ok()\n        }\n    }\n\n    impl From<surrealdb::Error> for Error {\n        fn from(error: surrealdb::Error) -> Self {\n            eprintln!(\"{error}\");\n            Self::Db\n        }\n    }\n}\n\nmod routes {\n\n    use faker_rand::en_us::names::FirstName;\n    use surrealdb::opt::auth::Record;\n\n    use crate::error::Error;\n    use crate::DB;\n    use rocket::serde::json::Json;\n    use rocket::{delete, get, post, put};\n    use serde::{Deserialize, Serialize};\n    use surrealdb::RecordId;\n    const PERSON: &str = \"person\";\n\n    #[derive(Serialize, Deserialize)]\n    struct Params<'a> {\n        name: &'a str,\n        pass: &'a str,\n    }\n\n    #[derive(Serialize, Deserialize, Clone)]\n    pub struct PersonData {\n        name: String,\n    }\n\n    #[derive(Serialize, Deserialize)]\n    pub struct Person {\n        name: String,\n        id: RecordId,\n    }\n\n    #[get(\"/\")]\n    pub async fn paths() -> &'static str {\n        r#\"\n\n-----------------------------------------------------------------------------------------------------------------------------------------\n        PATH                |           SAMPLE COMMAND                                                                                  \n-----------------------------------------------------------------------------------------------------------------------------------------\n/session: See session data  |  curl -X GET    -H \"Content-Type: application/json\"                          http://localhost:8080/session\n                            |\n/person/{id}:               |\n  Create a person           |  curl -X POST   -H \"Content-Type: application/json\" -d '{\"name\":\"John Doe\"}' http://localhost:8080/person/one\n  Get a person              |  curl -X GET    -H \"Content-Type: application/json\"                          http://localhost:8080/person/one\n  Update a person           |  curl -X PUT    -H \"Content-Type: application/json\" -d '{\"name\":\"Jane Doe\"}' http://localhost:8080/person/one\n  Delete a person           |  curl -X DELETE -H \"Content-Type: application/json\"                          http://localhost:8080/person/one\n                            |\n/people: List all people    |  curl -X GET    -H \"Content-Type: application/json\"                          http://localhost:8080/people\n\n/new_user:  Create a new record user\n/new_token: Get instructions for a new token if yours has expired\"#\n    }\n\n    #[get(\"/session\")]\n    pub async fn session() -> Result<Json<String>, Error> {\n        let res: Option<String> = DB.query(\"RETURN <string>$session\").await?.take(0)?;\n\n        Ok(Json(res.unwrap_or(\"No session data found!\".into())))\n    }\n\n    #[post(\"/person/<id>\", data = \"<person>\")]\n    pub async fn create_person(\n        id: String,\n        person: Json<PersonData>,\n    ) -> Result<Json<Option<Person>>, Error> {\n        let person = DB\n            .create((PERSON, &*id))\n            .content(person.into_inner())\n            .await?;\n        Ok(Json(person))\n    }\n\n    #[get(\"/person/<id>\")]\n    pub async fn read_person(id: String) -> Result<Json<Option<Person>>, Error> {\n        let person = DB.select((PERSON, &*id)).await?;\n        Ok(Json(person))\n    }\n\n    #[put(\"/person/<id>\", data = \"<person>\")]\n    pub async fn update_person(\n        id: String,\n        person: Json<PersonData>,\n    ) -> Result<Json<Option<Person>>, Error> {\n        let person = DB\n            .update((PERSON, &*id))\n            .content(person.into_inner())\n            .await?;\n        Ok(Json(person))\n    }\n\n    #[delete(\"/person/<id>\")]\n    pub async fn delete_person(id: String) -> Result<Json<Option<Person>>, Error> {\n        let person = DB.delete((PERSON, &*id)).await?;\n        Ok(Json(person))\n    }\n\n    #[get(\"/people\")]\n    pub async fn list_people() -> Result<Json<Vec<Person>>, Error> {\n        let people = DB.select(PERSON).await?;\n        Ok(Json(people))\n    }\n\n    #[get(\"/new_user\")]\n    pub async fn make_new_user() -> Result<String, Error> {\n        let name = rand::random::<FirstName>().to_string();\n        let pass = rand::random::<FirstName>().to_string();\n        let jwt = DB\n            .signup(Record {\n                access: \"account\",\n                namespace: \"namespace\",\n                database: \"database\",\n                params: Params {\n                    name: &name,\n                    pass: &pass,\n                },\n            })\n            .await?\n            .into_insecure_token();\n        Ok(format!(\"New user created!\\n\\nName: {name}\\nPassword: {pass}\\nToken: {jwt}\\n\\nTo log in, use this command:\\n\\nsurreal sql --namespace namespace --database database --pretty --token \\\"{jwt}\\\"\"))\n    }\n\n    #[get(\"/new_token\")]\n    pub async fn get_new_token() -> String {\n        let command = r#\"curl -X POST -H \"Accept: application/json\" -d '{\"ns\":\"namespace\",\"db\":\"database\",\"ac\":\"account\",\"user\":\"your_username\",\"pass\":\"your_password\"}' http://localhost:8000/signin\"#;\n        format!(\"Need a new token? Use this command:\\n\\n{command}\\n\\nThen log in with surreal sql --namespace namespace --database database --pretty --token YOUR_TOKEN_HERE\")\n    }\n}\n\nasync fn init() -> Result<(), surrealdb::Error> {\n    DB.connect::<Ws>(\"localhost:8000\").await?;\n\n    DB.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    DB.use_ns(\"namespace\").use_db(\"database\").await?;\n\n    DB.query(\n        \"    DEFINE TABLE person SCHEMALESS\n        PERMISSIONS FOR \n            CREATE, SELECT WHERE $auth,\n            FOR UPDATE, DELETE WHERE created_by = $auth;\n    DEFINE FIELD name ON TABLE person TYPE string;\n    DEFINE FIELD created_by ON TABLE person VALUE $auth READONLY;\n\n    DEFINE INDEX unique_name ON TABLE user FIELDS name UNIQUE;\n    DEFINE ACCESS account ON DATABASE TYPE RECORD\n\tSIGNUP ( CREATE user SET name = $name, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE name = $name AND crypto::argon2::compare(pass, $pass) )\n\tDURATION FOR TOKEN 15m, FOR SESSION 12h\n;\",\n    )\n    .await?;\n    Ok(())\n}\n\n#[launch]\npub async fn rocket() -> _ {\n    std::env::set_var(\"ROCKET_PORT\", \"8080\");\n    init().await.expect(\"Something went wrong, shutting down\");\n    rocket::build().mount(\n        \"/\",\n        routes![\n            routes::create_person,\n            routes::read_person,\n            routes::update_person,\n            routes::delete_person,\n            routes::list_people,\n            routes::paths,\n            routes::make_new_user,\n            routes::get_new_token,\n            routes::session\n        ],\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth0 User Authentication with SurrealDB REST API\nDESCRIPTION: JavaScript functions for authenticating users using Auth0 tokens and managing user data in SurrealDB. Includes functions for retrieving user information and creating/updating user records based on Auth0 authentication data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/integrate-auth0-as-authentication-provider.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst getUser = async () => {\n\tconst auth0Token = await auth0Client.getTokenSilently();\n\n\tconst response = await fetch(surrealDbConfig.endpoint + \"/key/user\", {\n\t\tmethod: \"GET\",\n\t\theaders: {\n\t\t\t\"Accept\": \"application/json\",\n\t\t\t\"Authorization\": \"Bearer \" + auth0Token\n\t\t}\n\t});\n\n\treturn response.json();\n};\n\nconst createUpdateUser = async () => {\n\tconst auth0User = await auth0Client.getUser();\n\tconst auth0Token = await auth0Client.getTokenSilently();\n\n\tlet query = {\n\t\tbody: JSON.stringify({\n\t\t\temail: auth0User.email,\n\t\t\tname: auth0User.name,\n\t\t\tnickname: auth0User.nickname,\n\t\t\tpicture: auth0User.picture\n\t\t}),\n\t\theaders: {\n\t\t\t\"Accept\": \"application/json\",\n\t\t\t\"Authorization\": \"Bearer \" + auth0Token\n\t\t}\n\t};\n\tconst surrealDbUser = await getUser();\n\tif (surrealDbUser[0].result.length == 0) {\n\t\tconsole.log(\"Token user does not exist in database. Creating record.\");\n\t\tquery.method = \"POST\";\n\t} else {\n\t\tconsole.log(\"Token user already exists in database. Updating record.\");\n\t\tquery.method = \"PUT\";\n\t}\n\n\tlet response = await fetch(surrealDbConfig.endpoint + \"/key/user\", query);\n\treturn response.json();\n};\n```\n\n----------------------------------------\n\nTITLE: Example Usage of COMMIT TRANSACTION in SurrealDB\nDESCRIPTION: This example demonstrates a complete transaction that creates two accounts, moves money between them, and commits the changes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/transactions.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nBEGIN TRANSACTION;\n\n-- Setup accounts\nCREATE account:one SET balance = 135605.16;\nCREATE account:two SET balance = 91031.31;\n\n-- Move money\nUPDATE account:one SET balance += 300.00;\nUPDATE account:two SET balance -= 300.00;\n\n-- Finalise all changes\nCOMMIT TRANSACTION;\n```\n\n----------------------------------------\n\nTITLE: Changefeed Table Definition and Usage in SurrealQL\nDESCRIPTION: Demonstrates defining a table with changefeed and showing change history\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/table.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE reading CHANGEFEED 3d;\n\nCREATE reading SET story = \"Once upon a time\";\nCREATE reading SET story = \"there was a database\";\n\nSHOW CHANGES FOR TABLE reading SINCE d\"2023-09-07T01:23:52Z\" LIMIT 10;\n\nSHOW CHANGES FOR TABLE reading SINCE 0 LIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Recursive Graph Traversal with Destructuring in SurrealQL\nDESCRIPTION: Combines recursive traversal with destructuring to collect specific fields at each depth. This query returns each city's ID, its connecting roads, and the cities it connects to.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_52\n\nLANGUAGE: surql\nCODE:\n```\nSELECT @.{1..5}.{ \n    id, \n    next_roads: ->to.*,\n    next_cities: ->to->city\n} FROM city;\n```\n\n----------------------------------------\n\nTITLE: Complete Axum Server with SurrealDB Integration in Rust\nDESCRIPTION: A complete Rust application that connects an Axum web server to SurrealDB. It includes error handling, route definitions for CRUD operations on person records, authentication, and authorization with different user permission levels.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nuse std::sync::LazyLock;\nuse axum::{Router, routing::{delete, get, post, put}};\nuse surrealdb::{Surreal, engine::remote::ws::{Client, Ws}, opt::auth::Root};\nuse tokio::net::TcpListener;\n\nstatic DB: LazyLock<Surreal<Client>> = LazyLock::new(Surreal::init);\n\nmod error {\n    use axum::http::StatusCode;\n    use axum::response::IntoResponse;\n    use axum::response::Response;\n    use axum::Json;\n    use thiserror::Error;\n\n    #[derive(Error, Debug)]\n    pub enum Error {\n        #[error(\"database error\")]\n        Db,\n    }\n\n    impl IntoResponse for Error {\n        fn into_response(self) -> Response {\n            (StatusCode::INTERNAL_SERVER_ERROR, Json(self.to_string())).into_response()\n        }\n    }\n\n    impl From<surrealdb::Error> for Error {\n        fn from(error: surrealdb::Error) -> Self {\n            eprintln!(\"{error}\");\n            Self::Db\n        }\n    }\n}\n\nmod routes {\n    use crate::error::Error;\n    use crate::DB;\n\n    use axum::{extract::Path, Json};\n    use faker_rand::en_us::names::FirstName;\n    use surrealdb::{RecordId, opt::auth::Record};\n    use serde::{Deserialize, Serialize};\n\n    const PERSON: &str = \"person\";\n\n    #[derive(Serialize, Deserialize, Clone)]\n    pub struct PersonData {\n        name: String,\n    }\n\n    #[derive(Serialize, Deserialize)]\n    pub struct Person {\n        name: String,\n        id: RecordId,\n    }\n\n    pub async fn paths() -> &'static str {\n        r#\"\n-----------------------------------------------------------------------------------------------------------------------------------------\n        PATH                |           SAMPLE COMMAND                                                                                  \n-----------------------------------------------------------------------------------------------------------------------------------------\n/session: See session data  |  curl -X GET    -H \"Content-Type: application/json\"                      http://localhost:8080/session\n                            |\n/person/{id}:               |\n  Create a person           |  curl -X POST   -H \"Content-Type: application/json\" -d '{\"name\":\"John\"}' http://localhost:8080/person/one\n  Update a person           |  curl -X PUT    -H \"Content-Type: application/json\" -d '{\"name\":\"Jane\"}' http://localhost:8080/person/one\n  Get a person              |  curl -X GET    -H \"Content-Type: application/json\"                      http://localhost:8080/person/one\n  Delete a person           |  curl -X DELETE -H \"Content-Type: application/json\"                      http://localhost:8080/person/one\n                            |\n/people: List all people    |  curl -X GET    -H \"Content-Type: application/json\"                      http://localhost:8080/people\n\n/new_user:  Create a new record user\n/new_token: Get instructions for a new token if yours has expired\"#\n    }\n\n    pub async fn session() -> Result<Json<String>, Error> {\n        let res: Option<String> = DB.query(\"RETURN <string>$session\").await?.take(0)?;\n\n        Ok(Json(res.unwrap_or(\"No session data found!\".into())))\n    }\n\n    pub async fn create_person(\n        id: Path<String>,\n        Json(person): Json<PersonData>,\n    ) -> Result<Json<Option<Person>>, Error> {\n        let person = DB.create((PERSON, &*id)).content(person).await?;\n        Ok(Json(person))\n    }\n\n    pub async fn read_person(id: Path<String>) -> Result<Json<Option<Person>>, Error> {\n        let person = DB.select((PERSON, &*id)).await?;\n        Ok(Json(person))\n    }\n\n    pub async fn update_person(\n        id: Path<String>,\n        Json(person): Json<PersonData>,\n    ) -> Result<Json<Option<Person>>, Error> {\n        let person = DB.update((PERSON, &*id)).content(person).await?;\n        Ok(Json(person))\n    }\n\n    pub async fn delete_person(id: Path<String>) -> Result<Json<Option<Person>>, Error> {\n        let person = DB.delete((PERSON, &*id)).await?;\n        Ok(Json(person))\n    }\n\n    pub async fn list_people() -> Result<Json<Vec<Person>>, Error> {\n        let people = DB.select(PERSON).await?;\n        Ok(Json(people))\n    }\n\n    #[derive(Serialize, Deserialize)]\n    struct Params<'a> {\n        name: &'a str,\n        pass: &'a str,\n    }\n\n    pub async fn make_new_user() -> Result<String, Error> {\n        let name = rand::random::<FirstName>().to_string();\n        let pass = rand::random::<FirstName>().to_string();\n        let jwt = DB\n            .signup(Record {\n                access: \"account\",\n                namespace: \"test\",\n                database: \"test\",\n                params: Params {\n                    name: &name,\n                    pass: &pass,\n                },\n            })\n            .await?\n            .into_insecure_token();\n        Ok(format!(\"New user created!\\n\\nName: {name}\\nPassword: {pass}\\nToken: {jwt}\\n\\nTo log in, use this command:\\n\\nsurreal sql --ns test --db test --pretty --token \\\"{jwt}\\\"\"))\n    }\n\n    pub async fn get_new_token() -> String {\n        let command = r#\"curl -X POST -H \"Accept: application/json\" -d '{\"ns\":\"test\",\"db\":\"test\",\"ac\":\"account\",\"user\":\"your_username\",\"pass\":\"your_password\"}' http://localhost:8000/signin\"#;\n        format!(\"Need a new token? Use this command:\\n\\n{command}\\n\\nThen log in with surreal sql --ns test --db test --pretty --token YOUR_TOKEN_HERE\")\n    }\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    DB.connect::<Ws>(\"localhost:8000\").await?;\n\n    DB.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    DB.use_ns(\"test\").use_db(\"test\").await?;\n\n    DB.query(\n        \"\n    DEFINE TABLE IF NOT EXISTS person SCHEMALESS\n        PERMISSIONS FOR \n            CREATE, SELECT WHERE $auth,\n            FOR UPDATE, DELETE WHERE created_by = $auth;\n    DEFINE FIELD IF NOT EXISTS name ON TABLE person TYPE string;\n    DEFINE FIELD IF NOT EXISTS created_by ON TABLE person VALUE $auth READONLY;\n\n    DEFINE INDEX IF NOT EXISTS unique_name ON TABLE user FIELDS name UNIQUE;\n    DEFINE ACCESS IF NOT EXISTS account ON DATABASE TYPE RECORD\n\tSIGNUP ( CREATE user SET name = $name, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE name = $name AND crypto::argon2::compare(pass, $pass) )\n\tDURATION FOR TOKEN 15m, FOR SESSION 12h\n;\",\n    )\n    .await?;\n\n    let listener = TcpListener::bind(\"localhost:8080\").await?;\n    let router = Router::new()\n        .route(\"/\", get(routes::paths))\n        .route(\"/person/:id\", post(routes::create_person))\n        .route(\"/person/:id\", get(routes::read_person))\n        .route(\"/person/:id\", put(routes::update_person))\n        .route(\"/person/:id\", delete(routes::delete_person))\n        .route(\"/people\", get(routes::list_people))\n        .route(\"/session\", get(routes::session))\n        .route(\"/new_user\", get(routes::make_new_user))\n        .route(\"/new_token\", get(routes::get_new_token));\n    axum::serve(listener, router).await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Schemafull Table in SurrealDB\nDESCRIPTION: Defines a schemafull user table with fields for firstName, lastName, and email. The email field includes an assertion to validate that the value is a valid email address.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/define-a-schema.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE user SCHEMAFULL;\n\nDEFINE FIELD firstName ON TABLE user TYPE string;\nDEFINE FIELD lastName ON TABLE user TYPE string;\nDEFINE FIELD email ON TABLE user TYPE string\n  ASSERT string::is::email($value);\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Server with Optimized Logging\nDESCRIPTION: Command to start SurrealDB server with 'info' log level and RocksDB storage engine for optimal performance in production environments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/performance-best-practices.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsurreal start --log info rocksdb://path/to/mydatabase\n```\n\n----------------------------------------\n\nTITLE: Initializing Surreal Connection in Python\nDESCRIPTION: Examples of connecting to local and remote SurrealDB endpoints using different protocols. The choice of protocol affects token and session duration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/create-a-new-connection.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Connect to a local endpoint with http protocol\ndb = Surreal('http://127.0.0.1:8000')\n\n# Connect to a remote endpoint with ws protocol\ndb = AsyncSurreal('wss://cloud.surrealdb.com')\n```\n\n----------------------------------------\n\nTITLE: Optimized DELETE Query Using Subquery in SurrealDB\nDESCRIPTION: SurrealQL query showing how to improve DELETE performance by using a subquery to leverage indexes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/performance-best-practices.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nDELETE (SELECT id FROM user WHERE age < 18);\n```\n\n----------------------------------------\n\nTITLE: Configuring Guest Access and Permissions in SurrealDB\nDESCRIPTION: This snippet demonstrates how to define table permissions and the effects of allowing or denying guest access in SurrealDB. It shows the behavior of CREATE and SELECT operations on protected and public tables under different guest access settings.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/capabilities.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n// Prepare tables with custom PERMISSIONS\ntest/test> DEFINE TABLE protected PERMISSIONS NONE;\ntest/test> DEFINE TABLE public PERMISSIONS FULL;\n\n// When guest access is allowed\n$ surreal start --allow-guests\n\ntest/test> CREATE public;\n[{ id: public:uy0qzy31v4xox8vivrd4 }]\n\ntest/test> SELECT * FROM public;\n[{ id: public:uy0qzy31v4xox8vivrd4 }]\n\ntest/test> CREATE protected;\n[]\n\ntest/test> SELECT * FROM protected;\n[]\n\n// When guest access is denied\n$ surreal start --deny-guests\n\ntest/test> CREATE public;\nThere was a problem with the database: There was a problem with the database: IAM error: Not enough permissions to perform this action\n\ntest/test> SELECT * FROM public;\nThere was a problem with the database: There was a problem with the database: IAM error: Not enough permissions to perform this action\n\ntest/test> CREATE protected;\nThere was a problem with the database: There was a problem with the database: IAM error: Not enough permissions to perform this action\n\ntest/test> SELECT * FROM protected;\nThere was a problem with the database: There was a problem with the database: IAM error: Not enough permissions to perform this action\n```\n\n----------------------------------------\n\nTITLE: Signing in with a Root User using JavaScript SDK\nDESCRIPTION: Connects to SurrealDB and signs in using the root-level user credentials. This authenticates the user for subsequent database operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/authentication.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = new Surreal();\ndb.connect('ws://localhost:8000/rpc', {\n\tnamespace: 'test',\n\tdatabase: 'test',\n});\n\ndb.signin({\n\tusername: 'john',\n\tpassword: 'VerySecurePassword!',\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Data to a Schemafull Table in SurrealDB\nDESCRIPTION: Demonstrates how to add a new user to a schemafull table using the CREATE statement. It includes an example of adding a user with all required fields and shows an error case when an invalid email is provided.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/define-a-schema.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE user CONTENT {\n    firstName: 'John',\n    lastName: 'Doe',\n    email: 'JohnDoe@someemail.com',\n};\n```\n\nLANGUAGE: surql\nCODE:\n```\nCREATE user CONTENT {\n    firstName: 'John',\n    lastName: 'Doe',\n    email: 'JohnDoe.com',\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying a Network of Friends in SurrealDB\nDESCRIPTION: Sets up a network of friends and demonstrates various recursive queries to traverse and filter the network.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_30\n\nLANGUAGE: surql\nCODE:\n```\nCREATE |person:1..20| SET name = id.id() RETURN NONE;\nFOR $person IN SELECT * FROM person {\n    LET $friends = (SELECT * FROM person WHERE id != $person.id ORDER BY rand() LIMIT 2);\n    RELATE $person->friends_with->$friends;\n};\n\nLET $third_degree = person:1.{..3}.{ id, connections: ->friends_with->person.@ };\n// Object containing array of arrays of arrays of 'person'\nRETURN $third_degree;\n// All connections: an array of arrays of arrays of 'person'\nRETURN $third_degree.connections;\n// Secondary connections: an array of arrays of 'person'\nRETURN $third_degree.{2}.connections;\n// Tertiary connections: an array of 'person'\nRETURN $third_degree.{3}.connections;\n// Tertiary connections with aliased fields and original 'person' info\nRETURN $third_degree.{\n\t\toriginal_person: id, \n\t\tthird_degree_friends: connections.{2}.connections\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Query Example Usage\nDESCRIPTION: Example implementation of a live query that monitors changes to a 'person' table. Shows how to handle different action types and process live updates with a callback function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/live.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// The uuid of the live query will be returned\nconst queryUuid = await db.live(\n\t\"person\",\n\t// The callback function takes two arguments: the 'action' and 'result' properties\n\t( action, result ) => {\n\t\t// action can be: 'CREATE', 'UPDATE', 'DELETE' or 'CLOSE'\n\t    if (action === 'CLOSE') return;\n\n\t\t// result contains either the entire record, or a set of JSON patches when diff mode is enabled\n\t\tprocessSomeLiveQueryUpdate(result);\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Complete Authentication Implementation with Token Generation\nDESCRIPTION: Full example demonstrating how to obtain a JWT token through signup endpoint and authenticate the connection. Includes database access definition, table permissions setup, and authentication flow implementation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/authenticate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::Deserialize;\nuse std::fmt::Display;\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::Surreal;\n\n#[derive(Deserialize)]\nstruct Response {\n    token: String,\n}\n\nimpl Display for Response {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"{}\", self.token)\n    }\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = Surreal::new::<Ws>(\"127.0.0.1:8000\").await?;\n    let token = ureq::post(\"http://127.0.0.1:8000/signup\")\n        .set(\"Accept\", \"application/json\")\n        .send_json(ureq::json!({\n            \"ns\": \"test\",\n            \"db\": \"test\",\n            \"ac\": \"account\",\n            \"email\": \"info@surrealdb.com\",\n            \"pass\": \"123456\"\n        }))\n        .unwrap()\n        .into_json::<Response>()\n        .unwrap()\n        .to_string();\n\n    // Not signed in, doesn't work\n    dbg!(db.query(\"CREATE cat;\").await?);\n    db.authenticate(token).await?;\n    // Now it works\n    dbg!(db.query(\"CREATE cat;\").await?);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Basic FOR Loop Syntax in SurrealQL\nDESCRIPTION: Defines the basic syntax structure for FOR loops in SurrealQL, showing the iteration variable and block structure.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/for.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nFOR @item IN @iterable {\n@block\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Live Raw Query in C#\nDESCRIPTION: Demonstrates creating a live query using raw SurrealQL statements. Supports generic type parameter for result typing and optional query parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/streaming.mdx#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nawait using var liveQuery = await db.LiveRawQuery<Person>(\"LIVE SELECT * FROM person;\");\n\n// Consume the live query...\n```\n\n----------------------------------------\n\nTITLE: Demonstrating select Method Usage in TypeScript\nDESCRIPTION: This example illustrates how to use the `select` method to retrieve all records from a table and a specific record using different `RecordId` types. It includes type definition for the `Person` interface.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/select.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n\tid: string;\n\tname: string;\n};\n\n// Select all records from a table\nconst people = await db.select<Person>('person');\n\n// Select a specific record from a table\nconst person = await db.select<Person>(new RecordId('person', 'h5wxrf2ewk8xjxosxtyc'));\nconst person = await db.select<Person>(new StringRecordId('person:h5wxrf2ewk8xjxosxtyc'));\n```\n\n----------------------------------------\n\nTITLE: Deserializing Query Results with SurrealDB Rust SDK\nDESCRIPTION: Demonstrates how to execute a query and deserialize the results into a custom struct using the take() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/query.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::Deserialize;\nuse surrealdb::engine::any::connect;\nuse surrealdb::opt::auth::Root;\n\n#[derive(Debug, Deserialize)]\nstruct Person {\n    first_name: String,\n    middle_name: String,\n    last_name: String,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = connect(\"ws://localhost:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    let query = r#\"\n    LET $data = [\"J. Jonah Jameson\", \"James Earl Jones\"];\n    RETURN $data.map(|$name| {\n    LET $names = $name.split(' ');\n    {\n       first_name:  $names[0],\n       middle_name: $names[1],\n       last_name:   $names[2]\n    }\n    });\"#;\n\n    let mut result = db.query(query).await?;\n    let people: Vec<Person> = result.take(1)?;\n    dbg!(people);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Token Duration for Access Method\nDESCRIPTION: This code demonstrates defining an access method with a very short 5-second token duration. It includes secure signup and signin methods with Argon2 password hashing for a complete authentication implementation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS account ON DATABASE TYPE RECORD\n\tSIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )\n\tDURATION FOR TOKEN 5s\n;\n```\n\n----------------------------------------\n\nTITLE: Email Change Detection Event Example\nDESCRIPTION: Example showing how to create an event that logs email changes for users, demonstrating the use of $before and $after variables along with event logging.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/event.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE EVENT OVERWRITE test ON TABLE user WHEN $before.email != $after.email THEN (\n    CREATE log SET \n        user       = $value.id,\n        action     = 'email' + ' ' + $event.lowercase() + 'd',\n        old_email  = $before.email ?? '',\n        new_email  = $after.email  ?? '',\n        at         = time::now()\n);\nUPSERT user:test SET email = 'old_email@test.com';\nUPSERT user:test SET email = 'new_email@test.com';\nDELETE user:test;\nSELECT * FROM log ORDER BY at ASC;\n```\n\n----------------------------------------\n\nTITLE: Signing in with a Root User using HTTP Request\nDESCRIPTION: Demonstrates how to authenticate with a root-level user using a raw HTTP POST request, passing username and password in JSON format.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/authentication.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n\t-H \"Accept: application/json\" \\\n\t-d '{\"user\":\"john\", \"pass\":\"VerySecurePassword!\"}' \\\n\thttp://localhost:8000/signin\n```\n\n----------------------------------------\n\nTITLE: Index-Based Join Strategy in SurrealDB\nDESCRIPTION: Demonstrates how to optimize remote field lookups by creating indexes on both the referenced field and the relationship field. The execution plan shows SurrealDB using an index-based join strategy for efficient querying.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/performance-best-practices.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE INDEX idx_user_role ON TABLE user COLUMNS role;\nDEFINE INDEX idx_access_user ON TABLE access COLUMNS user;\n\nSELECT *\nFROM access\nWHERE user.role = 'admin' \nEXPLAIN;\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tdetail: {\n\t\t\tplan: {\n\t\t\t\tindex: 'idx_access_user',\n\t\t\t\tjoins: [\n\t\t\t\t\t{\n\t\t\t\t\t\tindex: 'idx_user_role',\n\t\t\t\t\t\toperator: '=',\n\t\t\t\t\t\tvalue: 'admin'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\toperator: 'join'\n\t\t\t},\n\t\t\ttable: 'access'\n\t\t},\n\t\toperation: 'Iterate Index'\n\t},\n\t{\n\t\tdetail: {\n\t\t\ttype: 'Memory'\n\t\t},\n\t\toperation: 'Collector'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating READONLY Fields in SurrealDB\nDESCRIPTION: This example shows how to use the READONLY clause to prevent updates to a field after it's been set, useful for system-managed fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD created ON resource VALUE time::now() READONLY;\n```\n\n----------------------------------------\n\nTITLE: Executing SurrealQL Subqueries with query() Function\nDESCRIPTION: Shows how to run SurrealQL subqueries within JavaScript functions using the query() method. The example creates users and retrieves them using both direct queries and prepared queries with parameter binding.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/script/built-in-functions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE user:john, user:mary;\n\nRETURN function() {\n\t// Select all users\n\tconst users = await surrealdb.query(\"SELECT * FROM user\");\n\n\t// Prepared query\n\tconst query = new surrealdb.Query(\"SELECT * FROM $id\", {\n\t\tid: new Record('user', 'mary')\n\t});\n\n\t// Execute prepared query\n\tconst mary = (await surrealdb.query(query))[0];\n\n\t// Assign variables later to prepared query\n\tquery.bind('id', new Record('user', 'john'));\n\n\t// Execute prepared query\n\tconst john = (await surrealdb.query(query))[0];\n\n\treturn { john, mary };\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Graph Relationships\nDESCRIPTION: Examples of traversing graph relationships in both forward and reverse directions using SurrealQL syntax\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nSELECT ->wrote->posts.* AS userPosts\nFROM users:alice;\n```\n\n----------------------------------------\n\nTITLE: Complete Example of SurrealDB Connection Management in TypeScript\nDESCRIPTION: This comprehensive example demonstrates the full lifecycle of a SurrealDB connection in TypeScript, including connection setup, namespace and database selection, error handling, and connection closure. It defines a reusable function for getting a database instance with configurable settings.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/create-a-new-connection.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport Surreal from \"surrealdb\";\n\n// Define the database configuration interface\ninterface DbConfig {\n  url: string;\n  namespace: string;\n  database: string;\n}\n\n// Define the default database configuration\nconst DEFAULT_CONFIG: DbConfig = {\n  url: \"http://127.0.0.1:8000/rpc\",\n  namespace: \"test\",\n  database: \"test\",\n};\n\n// Define the function to get the database instance\nexport async function getDb(config: DbConfig = DEFAULT_CONFIG): Promise<Surreal> {\n  const db = new Surreal();\n\n  try {\n    await db.connect(config.url);\n    await db.use({ namespace: config.namespace, database: config.database });\n    return db;\n  } catch (err) {\n    console.error(\"Failed to connect to SurrealDB:\", err instanceof Error ? err.message : String(err));\n    await db.close();\n    throw err;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query via cURL in SurrealDB\nDESCRIPTION: cURL command to send a GraphQL query to SurrealDB. It includes authentication, namespace and database headers, and a query to filter persons by age.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/graphql/http.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -u \"root:root\" -H \"surreal-ns: mynamespace\" -H \"surreal-db: mydatabase\" -H \"Accept: application/json\" -d '{\"query\": \"{ person(filter: {age: {age_gt: 18}}) { id name age } }\"}' http://localhost:8000/graphql\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Function Syntax in SurrealQL\nDESCRIPTION: The syntax for defining a custom function in SurrealQL, including optional clauses for overwriting, conditional creation, and setting permissions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/function.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FUNCTION [ OVERWRITE | IF NOT EXISTS ] fn::@name( [ @argument: @type ... ] ) {\n\t[ @query ... ]\n\t[ RETURN @returned ]\n} [ COMMENT @string ] [ PERMISSIONS [ NONE | FULL | WHERE @condition]]\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Search with MTREE Index in SurrealDB\nDESCRIPTION: This snippet shows how to define a vector for a harmful substance, create an MTREE index on the embedding field, and perform a vector search using cosine similarity. It demonstrates the practical application of vector search in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/vector-search.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nLET $lead_harmful = [0.15, 0.25, 0.35, 0.45];\n\nDEFINE INDEX mt_pts ON liquidsVector FIELDS embedding MTREE DIMENSION 4 DIST COSINE TYPE F32;\n\nSELECT sample, content, vector::similarity::cosine(embedding, $lead_harmful) AS dist FROM liquidsVector WHERE embedding <|2|> $lead_harmful;\n```\n\n----------------------------------------\n\nTITLE: Binding Parameters in HTTP REST API (V1.x)\nDESCRIPTION: Demonstrates parameter binding in SurrealDB v1.x HTTP REST API, using different header names but the same approach of passing parameters as query parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -u \"root:root\" -H \"ns: mynamespace\" -H \"db: mydatabase\" -H \"Accept: application/json\" \\\n  -d 'SELECT * FROM person WHERE age > $age' http://localhost:8000/sql?age=18\n```\n\n----------------------------------------\n\nTITLE: Defining Record Access Authentication in SurrealDB using .NET SDK\nDESCRIPTION: This snippet demonstrates how to define record access authentication for users in SurrealDB using the .NET SDK's Query method. It sets up signup and signin procedures with email and password, and specifies token and session durations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/authentication.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Query(\n    $\"\"\"\n    DEFINE ACCESS account ON DATABASE TYPE RECORD\n\tSIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )\n\tDURATION FOR TOKEN 15m, FOR SESSION 12h;\n    \"\"\"\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Query Execution Plan Without Index in SurrealDB\nDESCRIPTION: Demonstrates a basic SELECT query without indexes, showing how SurrealDB performs a full table scan. The EXPLAIN command reveals the execution plan, which includes iterating through the entire table and using a memory collector for results filtering.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/performance-best-practices.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nSELECT *\nFROM user\nWHERE age < 18\nEXPLAIN;\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tdetail: {\n\t\t\ttable: 'user'\n\t\t},\n\t\toperation: 'Iterate Table'\n\t},\n\t{\n\t\tdetail: {\n\t\t\ttype: 'Memory'\n\t\t},\n\t\toperation: 'Collector'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Basic SurrealDB Operations in Embedded Rust\nDESCRIPTION: A complete Rust example demonstrating basic SurrealDB operations in embedded mode. Shows how to connect to an in-memory or RocksDB database, insert data, update records, query data, and work with typed results.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse surrealdb::RecordId;\nuse surrealdb::Surreal;\n\n// For an in memory database\nuse surrealdb::engine::local::Mem;\n\n// For a RocksDB file\n// use surrealdb::engine::local::RocksDb;\n\n#[derive(Debug, Serialize)]\nstruct Name<'a> {\n    first: &'a str,\n    last: &'a str,\n}\n\n#[derive(Debug, Serialize)]\nstruct Person<'a> {\n    title: &'a str,\n    name: Name<'a>,\n    marketing: bool,\n}\n\n#[derive(Debug, Serialize)]\nstruct Responsibility {\n    marketing: bool,\n}\n\n#[derive(Debug, Deserialize)]\nstruct Record {\n    #[allow(dead_code)]\n    id: RecordId,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    // Create database connection in memory\n    let db = Surreal::new::<Mem>(()).await?;\n    \n    // Create database connection using RocksDB\n    // let db = Surreal::new::<RocksDb>(\"path/to/database-folder\").await?;\n\n    // Select a specific namespace / database\n    db.use_ns(\"test\").use_db(\"test\").await?;\n\n    // Create a new person with a random id\n    let created: Option<Record> = db\n        .create(\"person\")\n        .content(Person {\n            title: \"Founder & CEO\",\n            name: Name {\n                first: \"Tobie\",\n                last: \"Morgan Hitchcock\",\n            },\n            marketing: true,\n        })\n        .await?;\n    dbg!(created);\n\n    // Update a person record with a specific id\n    let updated: Option<Record> = db\n        .update((\"person\", \"jaime\"))\n        .merge(Responsibility { marketing: true })\n        .await?;\n    dbg!(updated);\n\n    // Select all people records\n    let people: Vec<Record> = db.select(\"person\").await?;\n    dbg!(people);\n\n    // Perform a custom advanced query\n    let groups = db\n        .query(\"SELECT marketing, count() FROM type::table($table) GROUP BY marketing\")\n        .bind((\"table\", \"person\"))\n        .await?;\n    dbg!(groups);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SurrealQL Query via HTTP using curl (V2.x)\nDESCRIPTION: This example demonstrates how to execute a SurrealQL query via HTTP using curl with V2.x headers. It sends a SELECT query to retrieve person records where age is greater than 18. The request includes authentication credentials, namespace and database headers using the new surreal-ns and surreal-db format.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/surrealql/http.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -u \"root:root\" -H \"surreal-ns: mynamespace\" -H \"surreal-db: mydatabase\" -H \"Accept: application/json\" -d \"SELECT * FROM person WHERE age > 18\" http://localhost:8000/sql\n```\n\n----------------------------------------\n\nTITLE: Demonstrating delete Method Usage in JavaScript\nDESCRIPTION: Shows examples of using the delete method to remove all records from a table and to delete a specific record using a RecordId. It demonstrates the flexibility of the method in handling different delete scenarios.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/delete.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Delete all records from a table\nawait db.delete('person');\n\n// Delete a specific record from a table\nawait db.delete(new RecordId('person', 'h5wxrf2ewk8xjxosxtyc'));\n```\n\n----------------------------------------\n\nTITLE: LiveQuery Implementation Example in C#\nDESCRIPTION: Example demonstrating how to create and use a LiveQuery to monitor changes in a person table. The query uses a generic Person type for type-safe results and implements IAsyncDisposable for proper resource cleanup.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/live_query.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nconst string table = \"person\"; \nawait using var liveQuery = await db.LiveQuery<Person>($\"LIVE SELECT * FROM type::table({table});\");\n\n// Consume the live query...\n```\n\n----------------------------------------\n\nTITLE: Multi-Range Index Scan with OR Conditions in SurrealDB\nDESCRIPTION: Demonstrates how SurrealDB handles OR conditions by performing multiple index scans. The query planner creates separate index iteration operations for each range in the condition, optimizing complex queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/performance-best-practices.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\nSELECT age\nFROM user\nWHERE age < 7\n   OR age > 77\nEXPLAIN;\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tdetail: {\n\t\t\tplan: {\n\t\t\t\tfrom: {\n\t\t\t\t\tinclusive: false,\n\t\t\t\t\tvalue: NONE\n\t\t\t\t},\n\t\t\t\tindex: 'idx_user_age',\n\t\t\t\tto: {\n\t\t\t\t\tinclusive: false,\n\t\t\t\t\tvalue: 7\n\t\t\t\t}\n\t\t\t},\n\t\t\ttable: 'user'\n\t\t},\n\t\toperation: 'Iterate Index'\n\t},\n\t{\n\t\tdetail: {\n\t\t\tplan: {\n\t\t\t\tfrom: {\n\t\t\t\t\tinclusive: false,\n\t\t\t\t\tvalue: 77\n\t\t\t\t},\n\t\t\t\tindex: 'idx_user_age',\n\t\t\t\tto: {\n\t\t\t\t\tinclusive: false,\n\t\t\t\t\tvalue: NONE\n\t\t\t\t}\n\t\t\t},\n\t\t\ttable: 'user'\n\t\t},\n\t\toperation: 'Iterate Index'\n\t},\n\t{\n\t\tdetail: {\n\t\t\ttype: 'Memory'\n\t\t},\n\t\toperation: 'Collector'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Records with SurrealDB JavaScript SDK\nDESCRIPTION: Demonstrates how to update records in a SurrealDB database using the 'update' method. It shows updating all records in a table, updating a specific record by ID, and updating with a partial type.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/data-maniplulation.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n\tid: string;\n\tname: string;\n\tsettings: {\n\t\tactive: boolean;\n\t\tmarketing: boolean;\n\t};\n};\n\n// Update all records in a table\nconst people = await db.update<Person>('person');\n\n// Update a record with a specific ID\nconst person = await db.update<Person>(new RecordId('person', 'tobie'), {\n\tname: 'Tobie',\n\tsettings: {\n\t\tactive: true,\n\t\tmarketing: true,\n\t},\n});\n\n// The content you are updating the record with might differ from the return type\nconst record = await db.update<\n\tPerson,\n\tPick<Person, 'name'>\n>(new RecordId('person', 'tobie'), {\n\tname: 'Tobie',\n});\n```\n\n----------------------------------------\n\nTITLE: Signing in with a Database User using JavaScript SDK\nDESCRIPTION: Connects to SurrealDB and signs in with database-level user credentials, specifying the namespace and database where the user is defined.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/authentication.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = new Surreal();\ndb.connect('ws://localhost:8000/rpc', {\n\tnamespace: 'test',\n\tdatabase: 'test',\n});\n\ndb.signin({\n\t// Because we are signin in a database user, we need to let SurrealDB know on which database this user is located.\n\tnamespace: 'test',\n\tdatabase: 'test',\n\n\tusername: 'mary',\n\tpassword: 'VerySecurePassword!',\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SurrealDB Client in Rust\nDESCRIPTION: These methods are used to initialize and connect to a SurrealDB instance. They include connecting to a database, initializing a client, and setting up the namespace and database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.connect()\nSurreal::init()\nSurreal::new()\ndb.set()\ndb.use_ns().use_db()\ndb.unset()\n```\n\n----------------------------------------\n\nTITLE: Field Aliasing and Value Transformation\nDESCRIPTION: Shows how to use aliases to rename fields and transform values in SELECT queries, including string operations and object restructuring.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM person;\n\n-- Field `address` now shows up as \"string::uppercase\"\n-- name.first structure now flattened into a simple field\nSELECT\n\tname.first AS user_name,\n\tstring::uppercase(address)\nFROM person;\n\n-- \"Morgan Hitchcock\" added to `name` field structure,\n-- `angry_address` for field name instead of automatically\n-- generated \"string::uppercase(address) + '!!!'\"\nSELECT\n\tname.first,\n\t\"Morgan Hitchcock\" AS name.last,\n\tstring::uppercase(address) + \"!!!\" AS angry_address\nFROM person;\n```\n\n----------------------------------------\n\nTITLE: Selecting Records with SurrealDB Java SDK\nDESCRIPTION: Demonstrates how to select records from the database using the SurrealDB Java SDK. Shows selecting all books from a table and selecting a specific book by its ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/start.mdx#2025-04-16_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Select all books\nIterator<Book> books = driver.select(Book.class, \"book\");\n\nwhile (books.hasNext()) {\n\tSystem.out.println(\"Found book: \" + books.next().title);\n}\n\n // Select a specific book\nOptional<Book> aeon = driver.select(Book.class, new RecordId(\"book\", \"aeon\"));\n\naeon.ifPresent(value -> {\n\tSystem.out.println(\"Found book: \" + value.title);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Records with SurrealDB JavaScript SDK\nDESCRIPTION: Method for creating new records in the database with optional data. Supports both random and specific IDs.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/data-maniplulation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync db.create<T>(thing, data)\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n\tid: string;\n\tname: string;\n\tsettings: {\n\t\tactive: boolean;\n\t\tmarketing: boolean;\n\t};\n};\n\n// Create a record with a random ID\nconst [person] = await db.create<Person>('person');\n\n// Create a record with a specific ID\nconst person = await db.create<Person>(new RecordId('person', 'tobie'), {\n\tname: 'Tobie',\n\tsettings: {\n\t\tactive: true,\n\t\tmarketing: true,\n\t},\n});\n\n// The content you are creating the record with might differ from the return type\nconst [record] = await db.create<\n\tPerson,\n\tPick<Person, 'name'>\n>(\n    new RecordId('person', 'tobie'),\n    {\n        name: 'Tobie',\n    }\n);\n```\n\nLANGUAGE: surql\nCODE:\n```\nCREATE $thing CONTENT $data;\n```\n\n----------------------------------------\n\nTITLE: Executing SurrealQL Query via HTTP using curl (V1.x)\nDESCRIPTION: This example demonstrates how to execute a SurrealQL query via HTTP using curl with V1.x headers. It sends a simple SELECT query to retrieve person records where age is greater than 18. The request includes authentication credentials, namespace, database, and Accept header specifications.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/surrealql/http.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -u \"root:root\" -H \"NS: mynamespace\" -H \"DB: mydatabase\" -H \"Accept: application/json\" -d \"SELECT * FROM person WHERE age > 18\" http://localhost:8000/sql\n```\n\n----------------------------------------\n\nTITLE: Selecting Records from SurrealDB using Golang SDK\nDESCRIPTION: This example demonstrates how to use the Select method to retrieve a single record by its ID and how to fetch all records from a table. It showcases error handling and result printing.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/select.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Get entry by Record ID\n\tperson, err := surrealdb.Select[Person, models.RecordID](db, *person1.ID)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"Selected a person by record id: %+v\\n\", person)\n\n\t// Or retrieve the entire table\n\tpersons, err := surrealdb.Select[[]Person, models.Table](db, models.Table(\"persons\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"Selected all in persons table: %+v\\n\", persons)\n```\n\n----------------------------------------\n\nTITLE: Defining Record Access for User Authentication\nDESCRIPTION: Configures record-based authentication with signin and signup logic. The signin requires email and password verification, while signup creates a new user record with secure password hashing.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/authentication.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS user ON DATABASE TYPE RECORD\n\tSIGNIN (\n\t\tSELECT * FROM user WHERE email = $email AND crypto::argon2::compare(password, $password)\n\t)\n\tSIGNUP (\n\t\tCREATE user CONTENT {\n\t\t\tname: $name,\n\t\t\temail: $email,\n\t\t\tpassword: crypto::argon2::generate($password)\n\t\t}\n\t);\n```\n\n----------------------------------------\n\nTITLE: DEFINE NAMESPACE Statement Syntax in SurrealQL\nDESCRIPTION: The basic syntax structure for defining a namespace in SurrealDB. Includes optional OVERWRITE and IF NOT EXISTS clauses, along with name and comment parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/namespace.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nDEFINE NAMESPACE [ OVERWRITE | IF NOT EXISTS ] @name [ COMMENT @string ]\n```\n\n----------------------------------------\n\nTITLE: Executing Parameterized Query with SurrealDB Rust SDK\nDESCRIPTION: Demonstrates how to execute a parameterized query using the bind() method for safe query construction and execution.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/query.mdx#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::Deserialize;\nuse surrealdb::engine::any::connect;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::RecordId;\n\n#[derive(Debug, Deserialize)]\nstruct Person {\n    id: RecordId,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = connect(\"ws://localhost:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    let sql = \"\n        CREATE person;\n        SELECT * FROM type::table($table);\n    \";\n    let mut result = db.query(sql).bind((\"table\", \"person\")).await?;\n    // Get the first result from the first query\n    let created: Option<Person> = result.take(0)?;\n    dbg!(created);\n    // Get all of the results from the second query\n    let people: Vec<Person> = result.take(1)?;\n    dbg!(people);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple SurrealQL Queries with Variables in TypeScript\nDESCRIPTION: Demonstrates how to use the query method to execute multiple SurrealQL statements, including creating a record and selecting from a table. It shows type definition, variable assignment, and result handling.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/query.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n\tid: string;\n\tname: string;\n};\n\n// Assign the variable on the connection\nconst result = await db.query<[Person[], Person[]]>(\n\t'CREATE person SET name = \"John\"; SELECT * FROM type::table($tb);',\n\t{ tb: 'person' }\n);\n\n// Get the first result from the first query\nconst created = result[0].result[0];\n\n// Get all of the results from the second query\nconst people = result[1].result;\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 JWT Verification for User Authentication in SurrealDB\nDESCRIPTION: This SurrealQL code configures token verification in SurrealDB for Auth0-issued JWT tokens. It defines RECORD access type authentication using the Auth0 JWKS endpoint for public key retrieval, verifies audience claims, and authenticates users by mapping Auth0 email addresses to SurrealDB user records. The implementation validates that the token is intended for the right audience and that the email is verified.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/integrate-auth0-as-authentication-provider.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n-- Specify the namespace and database that will be used.\n-- These values should match the custom claims that we configured before.\nUSE NS test DB test;\n\n-- Define the public key to verify tokens issued by Auth0 for our application.\n-- The name of the token should match the custom claim that we configured before.\nDEFINE ACCESS auth0 ON DATABASE TYPE RECORD\n    -- We verify the token using the public keys hosted by Auth0.\n    WITH JWT URL \"https://<YOUR_AUTH0_DOMAIN>/.well-known/jwks.json\"\n    -- We check the token claims and map the email address to a record user.\n    AUTHENTICATE {\n        IF (\n            -- The JWT specification allows the audience claim to be an array or a string.\n            -- In this example, we ensure that it is provided as an array by Auth0.\n            $token.aud.is_array()\n            -- The audience claim must contain the audience of you application.\n            -- This is the value that you defined when creating the API in Auth0.\n            AND $token.aud CONTAINS \"<YOUR_AUTH0_AUDIENCE_VALUE>\"\n            -- The audience claim must contain your Auth0 user information endpoint.\n            -- It contains the domain generated when when creating the application in Auth0.\n            AND $token.aud CONTAINS \"https://<YOUR_AUTH0_DOMAIN>/userinfo\"\n            -- The email address in the token must be verified as belonging to the user.\n            AND $token['https://surrealdb.com/email_verified'] = true\n        ) {\n            -- We return the only user that matches the email address claim found in the token.\n            RETURN SELECT * FROM user WHERE email = $token['https://surrealdb.com/email']\n        }\n    }\n;\n```\n\n----------------------------------------\n\nTITLE: Creating Schemaless Tables in SurrealDB\nDESCRIPTION: Shows two methods of creating schemaless tables in SurrealDB: using the CREATE statement with custom record IDs and using the DEFINE TABLE statement with the SCHEMALESS clause.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/define-a-schema.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nCREATE IC_directory:{username: 'johndoe',full_name: 'John Doe'} CONTENT {\n\tusername: 'johndoe',\n\tfull_name: 'John Doe',\n\temail: 'johndoe@example.com',\n\tdate_of_birth: \"1990-01-01\",\n\tjoin_date: \"2024-05-30\",\n\tdepartment: 'Engineering',\n\trole: 'Software Engineer',\n\tskills: ['Python', 'JavaScript', 'surql'],\n\tmanager: manager_directory:janesmith,\n\ttags: ['full-time', 'remote']\n};\n\nUPDATE manager_directory:janesmith CONTENT {\n\tusername: 'janesmith',\n\tfull_name: 'Jane Smith',\n\temail: 'janesmith@example.com',\n\tdate_of_birth: \"1985-01-01\",\n\tjoin_date: \"2019-05-30\",\n\tdepartment: 'Engineering',\n    role: 'Software Engineer Manager',\n\tskills: ['Python', 'JavaScript', 'surql'],\n\treport: IC_directory:{ full_name: 'John Doe', username: 'johndoe' },\n\ttags: ['full-time', 'remote']\n};\n```\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE user SCHEMALESS;\n\nDEFINE FIELD firstName ON TABLE user TYPE string;\nDEFINE FIELD lastName ON TABLE user TYPE string;\nDEFINE FIELD email ON TABLE user TYPE string;\n```\n\n----------------------------------------\n\nTITLE: Field Interaction in SCHEMAFULL Table\nDESCRIPTION: Demonstrates field interactions and computed values in a SCHEMAFULL table\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/table.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE person SCHEMAFULL;\n\nDEFINE FIELD first_name ON TABLE person TYPE string ASSERT string::len($value) < 20;\nDEFINE FIELD last_name  ON TABLE person TYPE string ASSERT string::len($value) < 20;\nDEFINE FIELD name       ON TABLE person             VALUE first_name + ' ' + last_name;\n\nCREATE person SET first_name = \"Bob\", last_name = \"Bobson\";\n```\n\n----------------------------------------\n\nTITLE: Inserting Records with VALUES Keyword in SurrealQL\nDESCRIPTION: These examples show how to insert single and multiple records using the VALUES keyword, specifying field names and their corresponding values.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/insert.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Insert a single record\nINSERT INTO\n\tcompany (name, founded)\n\tVALUES  ('SurrealDB', '2021-09-10');\n\n-- Insert multiple records\nINSERT INTO\n\tcompany (name, founded)\n\tVALUES  ('Acme Inc.', '1967-05-03'), ('Apple Inc.', '1976-04-01');\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic API Endpoint in SurrealQL\nDESCRIPTION: Example of defining an API endpoint that handles GET and POST requests, uses middleware for raw body parsing, and returns a custom response with headers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE API \"/test\"\n    FOR get, post \n        MIDDLEWARE\n            api::req::raw_body(false)\n        THEN {\n            RETURN {\n                status: 200,\n                body: {\n                    request: $request.body,\n                    response: \"The server works\"\n                },\n                headers: {\n                    'last-modified': time::now(),\n                    'expires': time::now() + 4d\n                }\n            };\n        };\n```\n\n----------------------------------------\n\nTITLE: DEFINE DATABASE Statement Syntax\nDESCRIPTION: The basic syntax structure for the DEFINE DATABASE statement in SurrealQL, showing optional OVERWRITE and IF NOT EXISTS clauses.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/database.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nDEFINE DATABASE [ OVERWRITE | IF NOT EXISTS ] @name [ COMMENT @string ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Upsert Operations in TypeScript\nDESCRIPTION: Comprehensive example showing different ways to use the upsert method including upserting multiple records, single record with specific ID, and partial record updates with type safety.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/upsert.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n\tid: string;\n\tname: string;\n\tsettings: {\n\t\tactive: boolean;\n\t\tmarketing: boolean;\n\t};\n};\n\n// Upsert all records in a table\nconst multiple = await db.upsert<Person>(\n\t'person',\n\t{\n\t\tname: 'Mary Doe',\n\t\tsettings: {\n\t\t\tactive: true,\n\t\t\tmarketing: false,\n\t\t},\n\t}\n);\n\n// Upsert a record with a specific ID\nconst single = await db.upsert<Person>(\n\tnew RecordId('person', 'john-doe'),\n\t{\n\t\tname: 'John Doe',\n\t\tsettings: {\n\t\t\tactive: true,\n\t\t\tmarketing: true,\n\t\t},\n\t}\n);\n\n// The content you upsert might differ from the return type\nconst partial = await db.upsert<\n\tPerson,\n\tPick<Person, 'name'>\n>(\n\tnew RecordId('person', 'jane-doe'),\n\t{\n\t\tname: 'Jane Doe',\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Star Wars Character Relations Example\nDESCRIPTION: Shows how to query bidirectional relationships between characters using advanced graph traversal techniques.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_34\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:anakin_skywalker, person:luke_skywalker, person:the_emperor;\nRELATE person:anakin_skywalker->served->person:the_emperor;\nRELATE person:anakin_skywalker->attacked->person:the_emperor SET won = true;\nRELATE person:the_emperor->attacked->person:luke_skywalker SET won = false;\nRELATE person:luke_skywalker->son_of->person:anakin_skywalker;\nRELATE person:the_emperor->fooled->person:anakin_skywalker SET date = \"19 BBY\";\n\nSELECT VALUE <->(?)[WHERE person:the_emperor IN [in, out]] FROM ONLY person:anakin_skywalker;\nSELECT VALUE <->(?)[WHERE person:luke_skywalker IN [in, out]] FROM ONLY person:anakin_skywalker;\n```\n\n----------------------------------------\n\nTITLE: Implementing async task synchronization using Tokio channels in Rust\nDESCRIPTION: This function demonstrates how to use Tokio's mpsc channel for task synchronization instead of JoinHandles. It creates a channel with a buffer size of 1, spawns multiple tasks that each perform a database query, and waits for all tasks to complete by awaiting on the receiver.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/concurrency.mdx#2025-04-16_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nasync fn async_test(db: Arc<Surreal<Client>>, test_num: &'static str) -> std::time::Duration {\n    let (tx, mut rx) = mpsc::channel::<()>(1);\n    let start = std::time::Instant::now();\n\n    for idx in 0..=MAX {\n        let sender = tx.clone();\n        let db = db.clone();\n        tokio::spawn(async move {\n            select_index(&db, idx, test_num).await;\n            drop(sender);\n        });\n    }\n    drop(tx);\n\n\trx.recv().await;\n\n    Instant::now() - start\n}\n```\n\n----------------------------------------\n\nTITLE: PATCH Clause Implementation\nDESCRIPTION: Demonstrates using the PATCH clause to apply JSON Patch-like modifications to records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/upsert.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nUPSERT person:tobie PATCH [\n\t{\n\t\t\"op\": \"add\",\n\t\t\"path\": \"Engineering\",\n\t\t\"value\": \"true\"\n\t}\n];\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB using JavaScript SDK\nDESCRIPTION: This snippet demonstrates the basic syntax for connecting to a SurrealDB endpoint using the JavaScript SDK. It takes a URL and optional connection options as arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/connect.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.connect(url, options)\n```\n\n----------------------------------------\n\nTITLE: Advanced Full-Text Search with Highlighting and Scoring in SurrealQL\nDESCRIPTION: This snippet shows how to define indexes with BM25 and HIGHLIGHTS clauses, insert sample data, and perform an advanced search using the @@ operator with numbered placeholders. It demonstrates the use of search::highlight and search::score functions for result formatting.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_33\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER my_analyzer TOKENIZERS class, blank FILTERS lowercase, ascii;\nDEFINE INDEX text_index ON TABLE article FIELDS text SEARCH ANALYZER my_analyzer BM25 HIGHLIGHTS;\nDEFINE INDEX title_index ON TABLE article FIELDS title SEARCH ANALYZER my_analyzer BM25 HIGHLIGHTS;\n\nINSERT INTO article (title, text) VALUES\n    (\"A Study in Scarlet\", \"IN the year 1878 I took my degree of Doctor of Medicine of the University of London, and proceeded to Netley to go through the course prescribed for surgeons in the army.\"),\n    (\"A Study in Scarlet\", \"Having completed my studies there, I was duly attached to the Fifth Northumberland Fusiliers as Assistant Surgeon.\"),\n    (\"The Sign of the Four\", \"SHERLOCK HOLMES took his bottle from the corner of the mantel-piece and his hypodermic syringe from its neat morocco case.\"),\n    (\"The Hound of the Baskervilles\", \"MR. SHERLOCK HOLMES, who was usually very late in the mornings, save upon those not infrequent occasions when he was up all night, was seated at the breakfast table.\"),\n    (\"The Hound of the Baskervilles\", \"I stood upon the hearth-rug and picked up the stick which our visitor had left behind him the night before.\");\n\nSELECT\n    text,\n    title,\n    search::highlight(\"->\", \"<-\", 0) AS title,\n    search::score(0) AS text_score,\n    search::score(1) AS title_score\nFROM article\nWHERE\n    text  @0@ \"night\" OR\n    title @1@ \"hound\";\n```\n\n----------------------------------------\n\nTITLE: Implementing SurrealDB Context Provider\nDESCRIPTION: TypeScript implementation of a React context provider for managing SurrealDB connection state and client instance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/frameworks/react.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Surreal } from \"surrealdb\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport React, { createContext, useContext, useEffect, useMemo, useCallback, useState } from \"react\";\n\ninterface SurrealProviderProps {\n\tchildren: React.ReactNode;\n\t/** The database endpoint URL */\n\tendpoint: string;\n\t/** Optional existing Surreal client */\n\tclient?: Surreal;\n\t/* Optional connection parameters */\n\tparams?: Parameters<Surreal[\"connect\"]>[1];\n\t/** Auto connect on component mount, defaults to true */\n\tautoConnect?: boolean;\n}\n\ninterface SurrealProviderState {\n\t/** The Surreal instance */\n\tclient: Surreal;\n\t/** Whether the connection is pending */\n\tisConnecting: boolean;\n\t/** Whether the connection was successfully established */\n\tisSuccess: boolean;\n\t/** Whether the connection rejected in an error */\n\tisError: boolean;\n\t/** The connection error, if present */\n\terror: unknown;\n\t/** Connect to the Surreal instance */\n\tconnect: () => Promise<true>;\n\t/** Close the Surreal instance */\n\tclose: () => Promise<true>;\n}\n\nconst SurrealContext = createContext<SurrealProviderState | undefined>(undefined);\n\nexport function SurrealProvider({\n\tchildren,\n\tclient,\n\tendpoint,\n\tparams,\n\tautoConnect = true,\n}: SurrealProviderProps) {\n\t// Surreal instance remains stable across re-renders\n\tconst [surrealInstance] = useState(() => client ?? new Surreal());\n\n\t// React Query mutation for connecting to Surreal\n\tconst {\n\t\tmutateAsync: connectMutation,\n\t\tisPending,\n\t\tisSuccess,\n\t\tisError,\n\t\terror,\n\t\treset,\n\t} = useMutation({\n\t\tmutationFn: () => surrealInstance.connect(endpoint, params),\n\t});\n\n\t// Wrap mutateAsync in a stable callback\n\tconst connect = useCallback(() => connectMutation(), [connectMutation]);\n\n\t// Wrap close() in a stable callback\n\tconst close = useCallback(() => surrealInstance.close(), [surrealInstance]);\n\n\t// Auto-connect on mount (if enabled) and cleanup on unmount\n\tuseEffect(() => {\n\t\tif (autoConnect) {\n\t\t\tconnect();\n\t\t}\n\n\t\treturn () => {\n\t\t\treset();\n\t\t\tsurrealInstance.close();\n\t\t};\n\t}, [autoConnect, connect, reset, surrealInstance]);\n\n\t// Memoize the context value\n\tconst value: SurrealProviderState = useMemo(\n\t\t() => ({\n\t\t\tclient: surrealInstance,\n\t\t\tisConnecting: isPending,\n\t\t\tisSuccess,\n\t\t\tisError,\n\t\t\terror,\n\t\t\tconnect,\n\t\t\tclose,\n\t\t}),\n\t\t[surrealInstance, isPending, isSuccess, isError, error, connect, close],\n\t);\n\n\treturn <SurrealContext.Provider value={value}>{children}</SurrealContext.Provider>;\n}\n\n/**\n * Access the Surreal connection state from the context.\n */\nexport function useSurreal() {\n\tconst context = useContext(SurrealContext);\n\tif (!context) {\n\t\tthrow new Error(\"useSurreal must be used within a SurrealProvider\");\n\t}\n\treturn context;\n}\n\n/**\n * Access the Surreal client from the context.\n */\nexport function useSurrealClient() {\n\tconst { client } = useSurreal();\n\treturn client;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Patch Operations in SurrealDB\nDESCRIPTION: Complete example showing how to define and apply JSON Patch operations to a specific record in SurrealDB. Demonstrates patch operations including replace, add, and remove operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/patch.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype PatchData struct {\n\tOp    string      `json:\"op\"`    // Operation type: \"add\", \"remove\", \"replace\", etc.\n\tPath  string      `json:\"path\"`  // Path to the field to modify\n\tValue interface{} `json:\"value\"` // New value for the field (only for \"add\" or \"replace\")\n}\n\n// Define the patch operations\npatches := []PatchData{\n\t{Op: \"replace\", Path: \"/name\", Value: \"John Smith\"},\n\t{Op: \"add\", Path: \"/tags\", Value: []string{\"developer\", \"engineer\"}},\n\t{Op: \"remove\", Path: \"/oldField\"},\n}\n\n// Specify the target record\nrecordID := models.NewRecordID(\"person\", \"tobie\")\n\n// Perform the patch operation\nupdatedPatches, err := surrealdb.Patch(db, recordID, patches)\nif err != nil {\n\tpanic(err)\n}\nfmt.Printf(\"Patched person record with patches: %+v\\n\", updatedPatches)\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB Endpoint using New() Method in Golang\nDESCRIPTION: The `.New()` method is used to establish a connection to a SurrealDB endpoint. It takes a URL as a required argument and optional client options. The method returns a database connection and an error if the connection fails.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/new.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nsurrealdb.New(url, options...)();\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Math Function Reference Table\nDESCRIPTION: Reference table listing all available mathematical functions in SurrealDB including absolute values, trigonometric functions, logarithmic operations, statistical functions, and mathematical constants. Each function includes a brief description of its purpose and operation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmath::abs() // Returns absolute value\nmath::acos() // Returns arccosine\nmath::acot() // Returns arccotangent\nmath::asin() // Returns arcsine\nmath::atan() // Returns arctangent\nmath::bottom() // Returns bottom X numbers\nmath::ceil() // Rounds up to integer\nmath::clamp() // Clamps value between min/max\nmath::cos() // Returns cosine\nmath::cot() // Returns cotangent\nmath::deg2rad() // Converts degrees to radians\nmath::e // Euler's number constant\nmath::fixed() // Returns fixed decimal places\nmath::floor() // Rounds down to integer\n```\n\n----------------------------------------\n\nTITLE: Connecting to Surreal Cloud with JavaScript SDK\nDESCRIPTION: Example of connecting to a Surreal Cloud instance using the JavaScript SDK. This code demonstrates connection setup, authentication, database selection, record creation, and data querying.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-cloud/connect/sdk.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Surreal, RecordID } from \"surrealdb\";\nconst db = new Surreal();\n// Open a connection and authenticate\nawait db.connect(\"wss://cloud-docs-068rp16e0hsnl62vgooa7omjks.aws-euw1.staging.surrealdb.cloud\", {\n// Declare the namespace and database in the connection string there is no need to use the `use` method\n   namespace: \"Cloud Namespace\",\n   database: \"Cloud Database\",\n   auth: {\n\tusername: \"<created root user>\",\n\tpassword: \"<created root password>\",\n\t}\n\t});\n// If you want to select a specific namespace / database outside the connection string, you can use the `use` method\n// await db.use({ ns: 'Cloud Namespace', db: 'Cloud Database' });\n// Create record\nawait db.create(new RecordID(\"person\"), {\n\ttitle: \"Founder & CEO\",\n\tname: {\n\t\tfirst: \"Tobie\",\n\t\tlast: \"Morgan Hitchcock\",\n\t\t},\n\t\ttags: [\"python\", \"documentation\"],\n\t\t});\n\t\t// Select all records in person table\n\t\tconsole.log(await db.select(\"person\"));\n\t\tawait db.close();\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB with Various Options\nDESCRIPTION: This code snippet showcases different ways to connect to SurrealDB endpoints, including local and remote connections, specifying namespace and database, authenticating with a token or credentials, and using custom connection logic.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/connect.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Connect to a local endpoint\nawait db.connect('http://127.0.0.1:8000/rpc');\n\n// Connect to a remote endpoint\nawait db.connect('https://cloud.surrealdb.com/rpc');\n\n// Specify a namespace and database pair to use\nawait db.connect('https://cloud.surrealdb.com/rpc', {\n\tnamespace: 'surrealdb',\n\tdatabase: 'docs',\n});\n\n// Authenticate with an existing token\n// The .authenticate() function is used under the hood.\nawait db.connect('https://cloud.surrealdb.com/rpc', {\n\tauth: '.....',\n});\n\n// Authenticate using a pair of credentials\nawait db.connect('https://cloud.surrealdb.com/rpc', {\n\tauth: {\n\t\tusername: 'root',\n\t\tpassword: 'surrealdb',\n\t},\n});\n\n// Use advanced custom logic to prepare the connection to the database\nawait db.connect('https://cloud.surrealdb.com/rpc', {\n\tprepare: async (db) => {\n\t\tawait db.use({ namespace: 'surrealdb', database: 'docs' });\n\n\t\tconst token = await retrieveToken();\n\t\tif (token) await db.authenticate(token);\n\n\t\t// Any queries executed before the .prepare() function finishes will be forced to wait\n\t\t// Please note that this is also the case for queries executed within the prepare function\n\t\t// Doing so can cause the connection to stay in a initializing state\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Graph Relations in SurrealDB\nDESCRIPTION: This snippet shows various ways to traverse graph relations using the arrow operator. It demonstrates forward and backward traversal, as well as chaining multiple relations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\n-- Go through each user and find comment(s) it wrote\nSELECT ->wrote->comment FROM user;\n-- Go through each comment and find the user(s) that wrote it\nSELECT <-wrote<-user FROM comment;\n-- Go through each comment, find the user(s) that wrote it,\n-- and then find all of their comments\nSELECT <-wrote<-user->wrote->comment FROM comment;\n```\n\n----------------------------------------\n\nTITLE: Complete Create Method Implementation Example\nDESCRIPTION: Full example showing how to create records in SurrealDB using the Rust SDK, including both random and specific ID record creation. Demonstrates struct definitions, database connection, and error handling.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/create.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse surrealdb::engine::any::connect;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::RecordId;\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Person {\n    name: Option<String>,\n    marketing: Option<bool>\n}\n\n#[derive(Debug, Deserialize)]\nstruct Record {\n    id: RecordId,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = connect(\"ws://localhost:8000\").await?;\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    // Create a record with a random ID\n    let person: Option<Person> = db.create(\"person\").await?;\n    dbg!(person);\n    // Create a record with a specific ID\n    let record: Option<Record> = db\n        .create((\"person\", \"tobie\"))\n        .content(Person {\n            name: Some(\"Tobie\".into()),\n            marketing: Some(true),\n        })\n        .await?;\n    dbg!(record);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SurrealDB JavaScript SDK\nDESCRIPTION: Demonstrates various authentication scenarios using the `.signin()` method, including root user, namespace user, database user, record access, and scope-based authentication. Each example shows the required properties and how to pass additional variables for access or scope definitions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/signin.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Authenticate with a root user\nconst token = await db.signin({\n\tusername: 'root',\n\tpassword: 'surrealdb',\n});\n\n// Authenticate with a Namespace user\nconst token = await db.signin({\n\tnamespace: 'surrealdb',\n\tusername: 'tobie',\n\tpassword: 'surrealdb',\n});\n\n// Authenticate with a Database user\nconst token = await db.signin({\n\tnamespace: 'surrealdb',\n\tdatabase: 'docs',\n\tusername: 'tobie',\n\tpassword: 'surrealdb',\n});\n\n// Authenticate with Record Access\nconst token = await db.signin({\n\tnamespace: 'surrealdb',\n\tdatabase: 'docs',\n\taccess: 'user',\n\n    // Also pass any properties required by the access definition\n\tvariables: {\n    \temail: 'info@surrealdb.com',\n    \tpass: '123456',\n    },\n});\n\n// Authenticate with Scopes\nconst token = await db.signin({\n\tnamespace: 'surrealdb',\n\tdatabase: 'docs',\n\tscope: 'user',\n\n\t// Also pass any properties required by the scope definition\n\temail: 'info@surrealdb.com',\n\tpass: '123456',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Users with Specific Roles in SurrealQL\nDESCRIPTION: Examples of creating users with limited privileges in SurrealDB. This demonstrates the principle of least privilege by assigning minimal necessary roles at the appropriate level.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_18\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE USER db_viewer ON DATABASE PASSWORD 'CHANGE_THIS' ROLES VIEWER;\n```\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE USER ns_editor ON NAMESPACE PASSWORD 'CHANGE_THIS' ROLES EDITOR;\n```\n\n----------------------------------------\n\nTITLE: Defining Table Permissions in SurrealDB\nDESCRIPTION: Shows how to set table-level permissions using the DEFINE TABLE statement. It allows setting independent permissions for selecting, creating, updating, and deleting data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/table.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\n-- Specify access permissions for the 'post' table\nDEFINE TABLE post SCHEMALESS\n\tPERMISSIONS\n\t\tFOR select\n\t\t\t-- Published posts can be selected\n\t\t\tWHERE published = true\n\t\t\t-- A user can select all their own posts\n\t\t\tOR user = $auth.id\n\t\tFOR create, update\n\t\t\t-- A user can create or update their own posts\n\t\t\tWHERE user = $auth.id\n\t\tFOR delete\n\t\t\t-- A user can delete their own posts\n\t\t\tWHERE user = $auth.id\n\t\t\t-- Or an admin can delete any posts\n\t\t\tOR $auth.admin = true\n;\n```\n\n----------------------------------------\n\nTITLE: Complex Graph Query for Product Recommendations\nDESCRIPTION: Shows a complex graph query that finds products purchased by people who bought the same products as a specific person, useful for recommendation systems.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_28\n\nLANGUAGE: surql\nCODE:\n```\n-- This query\nSELECT ->purchased->product<-purchased<-person->purchased->product FROM person:tobie\n\n-- Then becomes\nperson:tobie->purchased->product<-purchased<-person->purchased->product SELECT\n```\n\n----------------------------------------\n\nTITLE: Creating Records in SurrealDB\nDESCRIPTION: Demonstrates how to create a record with either a random or specified ID in SurrealDB. The method requires a 'thing' parameter and optionally accepts 'data' for the record content.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"create\",\n    \"params\": [\n        \"person\",\n        {\n            \"name\": \"Mary Doe\"\n        }\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": [\n        {\n            \"id\": \"person:s5fa6qp4p8ey9k5j0m9z\",\n            \"name\": \"Mary Doe\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced SELECT Expressions\nDESCRIPTION: Demonstrates advanced SELECT query capabilities including nested objects, array operations, mathematical calculations, and graph traversal.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n-- Select nested objects/values\nSELECT address.city FROM person;\n\n-- Select all nested array values\n-- note the .* syntax works to select everything from an array or object-like values\nSELECT address.*.coordinates AS coordinates FROM person;\n-- Equivalent to\nSELECT address.coordinates AS coordinates FROM person;\n\n-- Select one item from an array\nSELECT address.coordinates[0] AS latitude FROM person;\n\n-- Select unique values from an array\nSELECT array::distinct(tags) FROM article;\n\n-- Select unique values from a nested array across an entire table\nSELECT array::group(tags) AS tags FROM article GROUP ALL;\n\n-- Use mathematical calculations in a select expression\nSELECT\n\t(( celsius * 1.8 ) + 32) AS fahrenheit\n\tFROM temperature;\n\n-- Return boolean expressions with an alias\nSELECT rating >= 4 as positive FROM review;\n\n-- Select manually generated object structure\nSELECT\n\t{ weekly: false, monthly: true } AS `marketing settings`\nFROM user;\n\n-- Select filtered nested array values\nSELECT address[WHERE active = true] FROM person;\n\n-- Select a person who has reacted to a post using a celebration\n-- Path can be conceptualized as:\n-- person->(reacted_to WHERE type='celebrate')->post\nSELECT * FROM person WHERE ->(reacted_to WHERE type='celebrate')->post;\n\n-- Select a remote field from connected out graph edges\nSELECT ->likes->friend.name AS friends FROM person:tobie;\n\n-- Use the result of a subquery as a returned field\nSELECT *, (SELECT * FROM events WHERE type = 'activity' LIMIT 5) AS history FROM user;\n\n-- Restructure objects in a select expression after `.` operator (since version 2.0.0)\nSELECT address.{city, country} FROM person;\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Access with Asymmetric Key in SurrealQL\nDESCRIPTION: Demonstrates how to configure JWT authentication using asymmetric RS256 algorithm with a public key, which is more secure than symmetric algorithms since only the verification key is stored in the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS token ON DATABASE TYPE RECORD WITH JWT\nALGORITHM RS256 KEY \"-----BEGIN PUBLIC KEY-----\nMUO52Me9HEB4ZyU+7xmDpnixzA/CUE7kyUuE0b7t38oCh+sQouREqIjLwgHhFdhh3cQAwr6GH07D\nThioYrZL8xATJ3Youyj8C45QnZcGUif5PkpWXDi0HJSoMFekbW6Pr4xuqIqb2LGxGDVJcLZwJ2AS\nGtu2UAfPXbBD3ffiad393M22g1iHM80YaNi+xgswG7qtXE4lR/Lt4s0MeKKX7stdWI1VIsoB+y3i\nr/OWUvJPjjDNbAsyy8tQmxydv+FUnLEP9TNT4AhN4DXcJ+XsDtW7OWt4EdSVDeKpGbIMvIrh1Pe+\nNilj8UHNyNDHa2AjK3seMo6CMvaIQJKj5o4xGFblFGwvvPD03SbuQLs1FdRjsZCeWLdYeQ3JDHE9\nsFG7DCXlpMJcaYT1mf4XHJ0gPekNLQyewTY3Vxf7FgV3GCNjV20kcDFgJA2+iVW2wSrb+txD1ycE\nkbi8jh0pedWwE40VQWaTh/8eAvX7IHWya/AEro25mq+m6vktNZLbvLphhp586kJK3Tdt3YjpkPre\nM3nkFWOWurIyKbtIV9JemfwCgt89sNV45dTlnEDEZFFGnIgDnWgx3CUo4XmhICEQU8+tklw9jJYx\niCTjhbIDEBHySSSc/pQ4ftHQmhToTlQeOdEy4LYiaEIgl1X+hzRH1hBYvWlNKe4EY1nMCKcjgt0=\n-----END PUBLIC KEY-----\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Namespace and Database in SurrealDB JavaScript Connection\nDESCRIPTION: These examples show how to specify a namespace and database pair when connecting to a SurrealDB instance using both HTTPS and WSS protocols. This approach combines the .connect() method with additional configuration options.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/create-a-new-connection.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Specify a namespace and database pair to use with https protocol\nawait db.connect('https://cloud.surrealdb.com/rpc', {\n\tnamespace: 'surrealdb',\n\tdatabase: 'docs',\n});\n\n// Specify a namespace and database pair to use with wss protocol\nawait db.connect('wss://cloud.surrealdb.com/rpc', {\n\tnamespace: 'surrealdb',\n\tdatabase: 'docs',\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing ON DELETE UNSET and ON DELETE REJECT\nDESCRIPTION: This example compares ON DELETE UNSET with ON DELETE REJECT, showing how both can prevent deletion of referenced records under different circumstances. The first example uses UNSET on a required field, while the second uses REJECT on an optional field.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/references.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\n-- Non-optional field that attempts an UNSET when referencing 'person' is deleted\nDEFINE FIELD author ON comment TYPE record<person> REFERENCE ON DELETE UNSET;\nLET $person = CREATE ONLY person;\nCREATE comment SET text = \"Cats are so much better at climbing UP a tree than down! Lol\", author = $person.id;\nDELETE person;\n\n-- Optional field which rejects the deletion of a referencing 'person'\nDEFINE FIELD author ON comment TYPE option<record<person>> REFERENCE ON DELETE REJECT;\nLET $person = CREATE ONLY person;\nCREATE comment SET text = \"Cats are so much better at climbing UP a tree than down! Lol\", author = $person.id;\nDELETE person;\n```\n\n----------------------------------------\n\nTITLE: Creating a Document with Vector Embeddings in SurrealDB\nDESCRIPTION: Example of creating a record with vector embeddings in SurrealDB. The vector is represented as an array of floating-point numbers that can be used for various applications like recommendation systems or image recognition.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/vector-search.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nCREATE Document:1 CONTENT {\n  \"items\": [\n    {\n      \"content\": \"apple\",\n      \"embedding\": [0.00995, -0.02680, -0.01881, -0.08697]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Token Duration for Database User\nDESCRIPTION: This snippet shows how to define a database user with a limited token duration of 15 minutes. Using short-lived tokens reduces the risk of token theft and misuse, enhancing security.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE USER username ON DATABASE PASSWORD 'CHANGE_THIS' DURATION FOR TOKEN 15m;\n```\n\n----------------------------------------\n\nTITLE: Setting Session Duration for Database User\nDESCRIPTION: This snippet shows how to define a database user with a limited session duration. Setting an appropriate session expiration time ensures that authentication credentials aren't valid indefinitely, improving security.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE USER username ON DATABASE PASSWORD 'CHANGE_THIS' DURATION FOR SESSION 5d;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic CRUD Operations with SurrealDB Golang SDK\nDESCRIPTION: Complete example demonstrating how to connect to SurrealDB, authenticate, and perform create, read, and delete operations using both structs and maps. Includes type definitions, error handling, and proper connection management.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/start.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\tsurrealdb \"github.com/surrealdb/surrealdb.go\"\n\t\"github.com/surrealdb/surrealdb.go/pkg/models\"\n)\n\ntype Person struct {\n\tID      \t*models.RecordID `json:\"id,omitempty\"`\n\tName    \tstring `json:\"name\"`\n\tSurname \tstring `json:\"surname\"`\n\tLocation \tmodels.GeometryPoint `json:\"location\"`\n}\n\nfunc main() {\n\t// Connect to SurrealDB\n\tdb, err := surrealdb.New(\"ws://localhost:8000\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Set the namespace and database\n\tif err = db.Use(\"testNS\", \"testDB\"); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Sign in to authentication `db`\n\tauthData := &surrealdb.Auth{\n\t\tUsername: \"root\", // use your setup username\n\t\tPassword: \"root\", // use your setup password\n\t}\n\ttoken, err := db.SignIn(authData)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Check token validity. This is not necessary if you called `SignIn` before. This authenticates the `db` instance too if sign in was\n\t// not previously called\n\tif err := db.Authenticate(token); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// And we can later on invalidate the token if desired\n\tdefer func(token string) {\n\t\tif err := db.Invalidate(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}(token)\n\n\t// Create an entry\n\tperson1, err := surrealdb.Create[Person](db, models.Table(\"persons\"), map[interface{}]interface{}{\n\t\t\"Name\":     \"John\",\n\t\t\"Surname\":  \"Doe\",\n\t\t\"Location\": models.NewGeometryPoint(-0.11, 22.00),\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"Created person with a map: %+v\\n\", person1)\n\n\t// Or use structs\n\tperson2, err := surrealdb.Create[Person](db, models.Table(\"persons\"), Person{\n\t\tName:     \"John\",\n\t\tSurname:  \"Doe\",\n\t\tLocation: models.NewGeometryPoint(-0.11, 22.00),\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"Created person with a struct: %+v\\n\", person2)\n\n\t// Get entry by Record ID\n\tperson, err := surrealdb.Select[Person, models.RecordID](db, *person1.ID)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"Selected a person by record id: %+v\\n\", person)\n\n\t// Or retrieve the entire table\n\tpersons, err := surrealdb.Select[[]Person, models.Table](db, models.Table(\"persons\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"Selected all in persons table: %+v\\n\", persons)\n\n\t// Delete an entry by ID\n\tif _, err = surrealdb.Delete[models.RecordID](db, *person2.ID); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Delete all entries\n\tif _, err = surrealdb.Delete[models.Table](db, models.Table(\"persons\")); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Confirm empty table\n\tpersons, err = surrealdb.Select[[]Person](db, models.Table(\"persons\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"No Selected person: %+v\\n\", persons)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SurrealDB Capabilities with Allowlisting Approach\nDESCRIPTION: This snippet demonstrates how to start SurrealDB with a secure configuration that denies all capabilities by default and only allows specific required functions and network access. It allows array and string functions, Argon2 hash operations, and HTTPS requests to a specific API.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Allow SurrealDB to call any functions from the array and string families, generate and compare Argon2 hashes\n# and make HTTP GET requests over HTTPS to the address of a specific API.\nsurreal start --deny-all --allow-funcs \"array, string, crypto::argon2, http::get\" --allow-net api.example.com:443\n```\n\n----------------------------------------\n\nTITLE: Comparing Different Value Types in SurrealQL\nDESCRIPTION: Examples demonstrating how different types can be compared in SurrealDB because all types are subsets of the value type. Shows both basic and complex comparison examples.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/values.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nRETURN 9 > 1;            // Returns true\nRETURN [] > time::now(); // Also returns true\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN [\n    null > none,\n    true > null,\n    1 > true,\n    'a' > 999999999,\n    1s > 'a',\n    time::now() > 1s,\n    rand::uuid() > time::now(),\n    [] > rand::uuid(),\n    {} > [],\n    (89.0, 89.0) > {},\n    <bytes>'Aeon' > (89.0, 89.0),\n    person:aeon > <bytes>'Aeon'\n];\n```\n\n----------------------------------------\n\nTITLE: Upserting with Merge using .upsert().merge() in Rust\nDESCRIPTION: Demonstrates how to use the .upsert().merge() method to combine existing record data with new data in SurrealDB using Rust.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/upsert.mdx#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ndb.upsert(resource).merge(data)\n```\n\n----------------------------------------\n\nTITLE: Executing Custom SurrealQL Query in Java\nDESCRIPTION: Demonstrates how to execute a custom SurrealQL query using the query method of the SurrealDB Java driver. The example retrieves all books where 'available' is true.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/start.mdx#2025-04-16_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nResponse response = driver.query(\"SELECT * FROM book WHERE available = true\");\n\n// Take the result of the first statement\nValue result = response.take(0);\n```\n\n----------------------------------------\n\nTITLE: Complete SurrealDB Version Check Implementation in Rust\nDESCRIPTION: Full example showing how to connect to a SurrealDB instance and retrieve its version using the version() method. Uses tokio for async runtime and includes error handling.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/version.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse surrealdb::engine::any::connect;\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = connect(\"ws://localhost:8000\").await?;\n\n    println!(\"{:?}\", db.version().await?);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a GraphQL Query with Options in SurrealDB\nDESCRIPTION: Demonstrates how to execute a GraphQL query with options in SurrealDB. The query retrieves user IDs and names, with the response formatted for readability.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"graphql\",\n    \"params\": [\n        \"{ users { id name } }\",\n        { \"pretty\": true }\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": \"{\\n    \\\"data\\\": {\\n        \\\"users\\\": [\\n            { \\\"id\\\": \\\"user:1\\\", \\\"name\\\": \\\"Alice\\\" },\\n            { \\\"id\\\": \\\"user:2\\\", \\\"name\\\": \\\"Bob\\\" }\\n        ]\\n    }\\n}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Deletions in SurrealQL\nDESCRIPTION: Shows how to implement soft deletions in SurrealDB by defining an event that archives deleted records in another table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/delete.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE EVENT archive_person ON TABLE person WHEN $event = \"DELETE\" THEN {\n    CREATE deleted_person SET\n        data = $before,\n        deleted_at = time::now()\n};\n\nCREATE |person:1..3|;\nDELETE person:1;\n\n-- Only two `person` records left\nSELECT * FROM person;\n-- But the data of `person:1` is still here\nSELECT * FROM deleted_person;\n```\n\n----------------------------------------\n\nTITLE: Creating a Table Record in SurrealQL\nDESCRIPTION: Demonstrates how to create a new record in a table with a randomly generated ID or a specified ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\n-- Create a new record\nCREATE person;\n```\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:one;\n```\n\nLANGUAGE: surql\nCODE:\n```\n-- Use the type::thing() function to provide a record's table and id separately\nCREATE type::thing(\"person\", \"one\");\n```\n\n----------------------------------------\n\nTITLE: Using ENFORCED Clause for Relation Tables in SurrealDB\nDESCRIPTION: Demonstrates the use of the ENFORCED clause on a table of TYPE RELATION to ensure that related records exist before allowing a RELATE statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/table.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE road_to TYPE RELATION IN city OUT city ENFORCED;\n\nRELATE city:one->road_to->city:three SET\n    distance = 5.5,\n    slope = 30.0;\n```\n\n----------------------------------------\n\nTITLE: Using TIMEOUT Clause in SurrealQL CREATE Statement\nDESCRIPTION: Shows how to use the TIMEOUT clause to specify the maximum execution time for a CREATE statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/create.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n-- Query attempting to create half a million `person` records\nCREATE |person:500000| SET age = 46, username = \"john-smith\" TIMEOUT 500ms;\n```\n\n----------------------------------------\n\nTITLE: Using ASSERT for Field Validation in SurrealDB\nDESCRIPTION: This example demonstrates how to use the ASSERT clause to ensure data consistency, in this case validating that a field contains a properly formatted email address.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\n-- Give the user table an email field. Store it in a string\nDEFINE FIELD email ON TABLE user TYPE string\n  -- Check if the value is a properly formatted email address\n  ASSERT string::is::email($value);\n```\n\n----------------------------------------\n\nTITLE: Creating Relations between Records with SurrealDB Java SDK\nDESCRIPTION: Shows how to create relations between records using the SurrealDB Java SDK. Demonstrates relating a book to a publisher and using a custom Relation class.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/start.mdx#2025-04-16_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nRecordId bookId = new RecordId(\"book\", \"aeon\");\nRecordId publisherId = new RecordId(\"publisher\", \"surrealdb\");\n\n// Relate a book to a publisher\ndriver.relate(bookId, \"published_by\", publisherId);\n\nRelation relation = driver.relate(Relation.class, bookId, \"published_by\", publisherId);\n            \nSystem.out.println(\"Related \" + relation.in + \" to \" + relation.out + \" with relation \" + relation.id);\n```\n\n----------------------------------------\n\nTITLE: Querying 'Which Articles Did the Person Write?' in Multiple Ways\nDESCRIPTION: Shows different equivalent approaches to find the articles written by a person using various graph traversal patterns through the 'wrote' relationship.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_26\n\nLANGUAGE: surql\nCODE:\n```\nSELECT out FROM wrote;\n\nSELECT ->wrote.out FROM person;\nSELECT ->wrote->article FROM person;\n\nSELECT <-wrote.out FROM article;\nSELECT <-wrote->article FROM article;\n```\n\n----------------------------------------\n\nTITLE: Utilizing EXPLAIN Clause in SurrealDB SELECT Statement\nDESCRIPTION: Shows how to use the EXPLAIN clause to reveal the execution plan of a SELECT statement, providing insights into query performance. EXPLAIN FULL is used to see the number of executed rows.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_23\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:tobie SET\n\tname = \"Tobie\",\n\taddress = \"1 Bagshot Row\",\n\temail = \"tobie@surrealdb.com\";\n\nSELECT * FROM person WHERE email='tobie@surrealdb.com' EXPLAIN;\nSELECT * FROM person WHERE email='tobie@surrealdb.com' EXPLAIN FULL;\n```\n\n----------------------------------------\n\nTITLE: Defining Person Table and Fields in SurrealQL\nDESCRIPTION: Creates a 'person' table with permissions, a required 'name' field, and an automatically generated 'created_by' field. The table is schemaless with specific permissions for CREATE, SELECT, UPDATE, and DELETE operations based on user authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE IF NOT EXISTS person SCHEMALESS\n    PERMISSIONS FOR \n        CREATE, SELECT WHERE $auth,\n        FOR UPDATE, DELETE WHERE created_by = $auth;\nDEFINE FIELD IF NOT EXISTS name ON TABLE person TYPE string;\nDEFINE FIELD IF NOT EXISTS created_by ON TABLE person VALUE $auth READONLY;\n```\n\n----------------------------------------\n\nTITLE: UPSERT With Unique Index Implementation\nDESCRIPTION: Demonstrates using UPSERT with unique indexes for improved performance and data integrity enforcement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/upsert.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE INDEX unique_key ON TABLE user FIELDS name, member_of UNIQUE;\nDEFINE FIELD official_name ON TABLE user VALUE name + \" the \" + the;\nUPSERT user SET name = \"Billy\", the = \"wizard\", metadata = { likes: [\"strawberries\"] };\nUPSERT user SET name = \"Billy\", the = \"wizard\", metadata = { likes: [\"strawberries\", \"fields\"] };\n```\n\n----------------------------------------\n\nTITLE: Type Conversion Functions in SurrealQL\nDESCRIPTION: Core type conversion functions that allow transforming values into specific data types like array, boolean, bytes, datetime, decimal, duration, etc. These functions are essential for data type coercion in SQL statements.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ntype::array()\ntype::bool()\ntype::bytes()\ntype::datetime()\ntype::decimal()\ntype::duration()\ntype::field()\ntype::fields()\ntype::float()\ntype::int()\ntype::number()\ntype::point()\ntype::string()\ntype::table()\ntype::thing()\ntype::range()\ntype::record()\ntype::uuid()\n```\n\n----------------------------------------\n\nTITLE: Initializing SurrealDB Client and Connecting in C#\nDESCRIPTION: Creates a new SurrealDbClient instance, connects to the database, and selects a namespace and database. This snippet demonstrates the basic setup for using SurrealDB in a .NET application.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/create-a-new-connection.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing SurrealDb.Net;\n\nusing var db = new SurrealDbClient(\"ws://127.0.0.1:8000/rpc\");\n\nawait db.Connect();\nawait db.Use(\"test\", \"test\");\n```\n\n----------------------------------------\n\nTITLE: Defining Analyzer and Full-Text Indexes in SurrealQL\nDESCRIPTION: This snippet demonstrates how to define a custom analyzer and create full-text indexes on table fields. It also includes examples of inserting data and performing a basic full-text search using the @@ operator.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_32\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER my_analyzer\n  TOKENIZERS class\n  FILTERS lowercase, ascii;\n\nDEFINE INDEX body_index ON TABLE article FIELDS body SEARCH ANALYZER my_analyzer;\nDEFINE INDEX title_index ON TABLE article FIELDS title SEARCH ANALYZER my_analyzer;\n\nCREATE article SET title = \"Machine Learning!\", body = \"Machine learning, or ML, is all the rage these days. Developers are...\";\nCREATE article SET title = \"History of machines\", body = \"The earliest 'machine' used by our ancestors was a simple sharpened stone tool. It was...\";\n\nSELECT body, title FROM article WHERE body @@ \"machine\" OR title @@ \"machine\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Updates Listener in Rust\nDESCRIPTION: Complete example demonstrating how to implement a live query listener for a person table, including connection setup, authentication, and handling of live notifications. Requires the futures crate for async stream processing.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/select_live.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse futures::StreamExt;\nuse serde::Deserialize;\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::{Notification, Surreal};\nuse surrealdb::RecordId;\n\n#[derive(Debug, Deserialize)]\nstruct Person {\n    id: RecordId,\n}\n\n// Handle the result of the live query notification\nfn handle(result: Result<Notification<Person>, surrealdb::Error>) {\n    println!(\"Received notification: {:?}\", result);\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = Surreal::new::<Ws>(\"127.0.0.1:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    // Select the \"person\" table and listen for live updates.\n    let mut stream = db.select(\"person\").live().await?;\n\n    // Process updates as they come in.\n    while let Some(result) = stream.next().await {\n        // Do something with the notification\n        handle(result);\n    }\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: SurrealDB PHP Signup Implementation Example\nDESCRIPTION: Practical example of using the signup() method with actual values, including email and password authentication for a user scope.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/signup.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$token = $db->signup([\n\t\"namespace\" => \"surrealdb\",\n\t\"database\" => \"docs\",\n\t\"scope\" => \"user\",\n\n\t// Also pass any properties required by the scope definition\n\t\"email\" => \"info@surrealdb.com\",\n\t\"pass\" => \"123456\",\n]);\n```\n\n----------------------------------------\n\nTITLE: Authenticating SurrealDB Connection with Token in JavaScript\nDESCRIPTION: This snippet demonstrates how to authenticate a SurrealDB connection using an existing token. It utilizes the .connect() method with an auth option, which internally uses the .authenticate() function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/create-a-new-connection.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Authenticate with an existing token\n// The .authenticate() function is used under the hood.\nawait db.connect('https://cloud.surrealdb.com/rpc', {\n\tauth: '.....',\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Grouping with Aggregate Functions in SurrealQL\nDESCRIPTION: A comprehensive example of using GROUP BY with aggregate functions in SurrealDB. This demonstrates inserting test data and then grouping by multiple fields while calculating counts and averages.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO person [\n    { gender: \"M\", age: 20, country: \"Japan\" },\n    { gender: \"M\", age: 25, country: \"Japan\" },\n    { gender: \"F\", age: 23, country: \"US\" },\n    { gender: \"F\", age: 30, country: \"US\" },\n    { gender: \"F\", age: 25, country: \"Korea\" },\n    { gender: \"F\", age: 45, country: \"UK\" },\n];\n\nSELECT\n\tcount() AS total,\n\tmath::mean(age) AS average_age,\n\tgender,\n\tcountry\nFROM person\nGROUP BY gender, country;\n\n-- Get the total number of records in a table\nSELECT count() AS number_of_records FROM person GROUP ALL;\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB - Method Syntax\nDESCRIPTION: Defines the basic syntax for establishing connections to SurrealDB using both synchronous and asynchronous methods. The methods take a URL parameter to specify the database endpoint.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/connect.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSurreal(url)\nAsyncSurreal(url)\n```\n\n----------------------------------------\n\nTITLE: MTREE Index Implementation in SurrealQL\nDESCRIPTION: Demonstrates creating and using an MTREE index for nearest neighbor searches with Euclidean distance metric. Shows index definition and query syntax with K parameter.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/operators.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nCREATE pts:3 SET point = [8,9,10,11];\nDEFINE INDEX mt_pts ON pts FIELDS point MTREE DIMENSION 4 DIST EUCLIDEAN;\nSELECT id FROM pts WHERE point <|2|> [2,3,4,5];\n```\n\n----------------------------------------\n\nTITLE: Executing SurrealQL Queries with TypeScript Type Safety\nDESCRIPTION: This example shows how to execute multiple SurrealQL statements in one query call with TypeScript, using type parameters for the result. It demonstrates creating a record and then selecting data with variable substitution.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/sdks/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n\tid: string;\n\tname: string;\n};\n\n// Assign the variable on the connection\nconst result = await db.query<[Person[], Person[]]>(\n\t'CREATE person SET name = \"John\"; SELECT * FROM type::table($tb);',\n\t{ tb: 'person' }\n);\n\n// Get the first result from the first query\nconst created = result[0].result[0];\n\n// Get all of the results from the second query\nconst people = result[1].result;\n```\n\n----------------------------------------\n\nTITLE: User Signup in SurrealDB Rust SDK\nDESCRIPTION: Shows how to implement user signup using the signup() method. It requires a Scope struct with namespace, database, access level, and user credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::Serialize;\nuse surrealdb::opt::auth::Scope;\n\n#[derive(Serialize)]\nstruct Credentials<'a> {\n    email: &'a str,\n    pass: &'a str,\n}\n\nlet jwt = db.signup(Scope {\n    namespace: \"test\",\n    database: \"test\",\n    access: \"user\",\n    params: Credentials {\n        email: \"info@surrealdb.com\",\n        pass: \"123456\",\n    },\n}).await?;\n\n// ⚠️: It is important to note that the token should be handled securely and protected from unauthorized access.\nlet token = jwt.as_insecure_token();\n```\n\n----------------------------------------\n\nTITLE: Adding Flexible Fields to a Schemafull Table in SurrealDB\nDESCRIPTION: Demonstrates how to add a flexible field to a schemafull table, allowing for schemaless functionality within a structured table. It includes an example of defining the flexible field and updating a user record with unstructured data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/define-a-schema.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD interactions ON TABLE user FLEXIBLE;\n```\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE user:wd99oovq358zfdmajnt7 CONTENT {\n    firstName: 'John',\n    lastName: 'Doe',\n    email: 'JohnDoe@someemail.com',\n    interactions: {\n        type: 'email',\n        subject: 'Welcome to our platform',\n        body: 'Thank you for joining our platform. We hope you enjoy your experience.',\n        date: '2024-05-30',\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Interacting with Fields of the Same Record in SurrealDB\nDESCRIPTION: Demonstrates how to define fields that reference other fields within the same record. Uses string lowercase function to normalize user input and concatenates fields to create a derived field.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_21\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE person SCHEMAFULL;\n\nDEFINE FIELD first_name ON TABLE person TYPE string VALUE string::lowercase($value);\nDEFINE FIELD last_name  ON TABLE person TYPE string VALUE string::lowercase($value);\nDEFINE FIELD name       ON TABLE person             VALUE first_name + ' ' + last_name;\n\n// Creates a `person` with the name \"bob bobson\"\nCREATE person SET first_name = \"BOB\", last_name = \"BOBSON\";\n```\n\n----------------------------------------\n\nTITLE: Testing API Endpoints with api::invoke in SurrealQL\nDESCRIPTION: Examples of using the api::invoke function to test API endpoints, demonstrating both simple invocation and passing a request body.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/api.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\napi::invoke(\"/test\");\n\napi::invoke(\"/test\", {\n    body: {\n       hi: \"please\",\n        give: \"me\",\n        the: \"information\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SurrealDB Client with Namespace and Database in C#\nDESCRIPTION: Illustrates how to create a SurrealDbClient with specific namespace and database options. This is useful when you need to connect to a particular namespace and database combination.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/create-a-new-connection.mdx#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new SurrealDbOptions\n{\n    Endpoint = \"wss://cloud.surrealdb.com/rpc\",\n    Namespace = \"surrealdb\",\n    Database = \"docs\",\n};\n\n// Specify a namespace and database pair to use\nusing var db = new SurrealDbClient(options);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Transaction Management in SurrealQL\nDESCRIPTION: This example demonstrates how to use the BEGIN statement to start a transaction, perform multiple database operations, and commit the changes. It includes creating accounts, updating balances, and finalizing the transaction.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/begin.mdx#2025-04-16_snippet_1\n\nLANGUAGE: SurrealQL\nCODE:\n```\n-- Start a new database transaction. Transactions are a way to ensure multiple operations\n-- either all succeed or all fail, maintaining data integrity.\nBEGIN TRANSACTION;\n\n-- Create a new account with the ID 'one' and set its initial balance to 135605.16\nCREATE account:one SET balance = 135605.16;\n\n-- Create another new account with the ID 'two' and set its initial balance to 91031.31\nCREATE account:two SET balance = 91031.31;\n\n-- Update the balance of account 'one' by adding 300.00 to the current balance.\n-- This could represent a deposit or other form of credit on the balance property.\nUPDATE account:one SET balance += 300.00;\n\n-- Update the balance of account 'two' by subtracting 300.00 from the current balance.\n-- This could represent a withdrawal or other form of debit on the balance property.\nUPDATE account:two SET balance -= 300.00;\n\n-- Finalize the transaction. This will apply the changes to the database. If there was an error\n-- during any of the previous steps within the transaction, all changes would be rolled back and\n-- the database would remain in its initial state.\nCOMMIT TRANSACTION;\n```\n\n----------------------------------------\n\nTITLE: Patching Records with SurrealDB JavaScript SDK\nDESCRIPTION: Illustrates how to apply JSON Patch operations to records using the 'patch' method. Examples include patching all records in a table and patching a specific record with multiple operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/data-maniplulation.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Update all records in a table\nconst people = await db.patch('person', [\n\t{ op: 'replace', path: '/created_at', value: new Date() },\n]);\n\n// Update a record with a specific ID\nconst person = await db.patch(new RecordId('person', 'tobie'), [\n\t{ op: 'replace', path: '/settings/active', value: false },\n\t{ op: 'add', path: '/tags', value: ['developer', 'engineer'] },\n\t{ op: 'remove', path: '/temp' },\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Operations for Person Records with SurrealDB in Rust\nDESCRIPTION: Five handler functions for creating, reading, updating, deleting, and listing person records in SurrealDB. Each function interfaces with the database and returns JSON responses using Axum's Json extractor.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n    const PERSON: &str = \"person\";\n\n    pub async fn create_person(\n        id: Path<String>,\n        Json(person): Json<PersonData>,\n    ) -> Result<Json<Option<Person>>, Error> {\n        let person = DB.create((PERSON, &*id)).content(person).await?;\n        Ok(Json(person))\n    }\n\n    pub async fn read_person(id: Json<String>) -> Result<Json<Option<Person>>, Error> {\n        let person = DB.select((PERSON, &*id)).await?;\n        Ok(Json(person))\n    }\n\n    pub async fn update_person(\n        id: Path<String>,\n        Json(person): Json<PersonData>,\n    ) -> Result<Json<Option<Person>>, Error> {\n        let person = DB.update((PERSON, &*id)).content(person).await?;\n        Ok(Json(person))\n    }\n\n    pub async fn delete_person(id: String) -> Result<Json<Option<Person>>, Error> {\n        let person = DB.delete((PERSON, &*id)).await?;\n        Ok(Json(person))\n    }\n\n    pub async fn list_people() -> Result<Json<Vec<Person>>, Error> {\n        let people = DB.select(PERSON).await?;\n        Ok(Json(people))\n    }\n```\n\n----------------------------------------\n\nTITLE: Patching Records in SurrealDB using JSON Patch\nDESCRIPTION: Example of patching a record in the 'person' table using JSON Patch specification. The request updates the 'last_updated' field with a new timestamp.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"patch\",\n    \"params\": [\n        \"person\",\n        [\n            { \"op\": \"replace\", \"path\": \"/last_updated\", \"value\": \"2023-06-16T08:34:25Z\" }\n        ]\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": [\n        [\n            {\n                \"op\": \"add\",\n                \"path\": \"/last_updated\",\n                \"value\": \"2023-06-16T08:34:25Z\"\n            }\n        ],\n        [\n            {\n                \"op\": \"add\",\n                \"path\": \"/last_updated\",\n                \"value\": \"2023-06-16T08:34:25Z\"\n            }\n        ]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SurrealQL Queries with Parameters in C#\nDESCRIPTION: This example demonstrates how to use the RawQuery method to execute SurrealQL statements with parameters. It creates a new person record, selects all records from a specified table, and retrieves the results.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/raw-query.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Assign the variable on the connection\nvar @params = new Dictionary<string, object> { { \"table\", \"person\" } };\nvar result = await db.RawQuery(\"CREATE person; SELECT * FROM type::table($table);\", @params);\n\n// Get the first result from the first query\nvar created = result.GetValue<Person>(0);\n\n// Get all of the results from the second query\nvar people = result.GetValue<List<Person>>(1);\n```\n\n----------------------------------------\n\nTITLE: Implementing Actix Web Server with SurrealDB in Rust\nDESCRIPTION: This snippet shows the complete implementation of an Actix web server using SurrealDB. It includes error handling, route definitions, database initialization, and server setup. The code demonstrates CRUD operations on 'person' records, user authentication, and database permissions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nuse actix_web::{App, HttpServer};\nuse std::sync::LazyLock;\nuse surrealdb::engine::remote::ws::Client;\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::Surreal;\n\nstatic DB: LazyLock<Surreal<Client>> = LazyLock::new(Surreal::init);\n\nmod error {\n    use actix_web::{HttpResponse, ResponseError};\n    use thiserror::Error;\n\n    #[derive(Error, Debug)]\n    pub enum Error {\n        #[error(\"database error\")]\n        Db(String),\n    }\n\n    impl ResponseError for Error {\n        fn error_response(&self) -> HttpResponse {\n            match self {\n                Error::Db(e) => HttpResponse::InternalServerError().body(e.to_string()),\n            }\n        }\n    }\n\n    impl From<surrealdb::Error> for Error {\n        fn from(error: surrealdb::Error) -> Self {\n            eprintln!(\"{error}\");\n            Self::Db(error.to_string())\n        }\n    }\n}\n\nmod routes {\n\n    use faker_rand::en_us::names::FirstName;\n    use surrealdb::opt::auth::Record;\n\n    use crate::error::Error;\n    use crate::DB;\n    use actix_web::web::{Json, Path};\n    use actix_web::{delete, get, post, put};\n    use serde::{Deserialize, Serialize};\n    use surrealdb::RecordId;\n    const PERSON: &str = \"person\";\n\n    #[derive(Serialize, Deserialize)]\n    pub struct PersonData {\n        name: String,\n    }\n\n    #[derive(Serialize, Deserialize)]\n    pub struct Person {\n        name: String,\n        id: RecordId,\n    }\n\n    #[get(\"/\")]\n    pub async fn paths() -> &'static str {\n        r#\"\n\n-----------------------------------------------------------------------------------------------------------------------------------------\n        PATH                |           SAMPLE COMMAND                                                                                  \n-----------------------------------------------------------------------------------------------------------------------------------------\n/session: See session data  |  curl -X GET    -H \"Content-Type: application/json\"                          http://localhost:8080/session\n                            |\n/person/{id}:               |\n  Create a person           |  curl -X POST   -H \"Content-Type: application/json\" -d '{\"name\":\"John Doe\"}' http://localhost:8080/person/one\n  Get a person              |  curl -X GET    -H \"Content-Type: application/json\"                          http://localhost:8080/person/one\n  Update a person           |  curl -X PUT    -H \"Content-Type: application/json\" -d '{\"name\":\"Jane Doe\"}' http://localhost:8080/person/one\n  Delete a person           |  curl -X DELETE -H \"Content-Type: application/json\"                          http://localhost:8080/person/one\n                            |\n/people: List all people    |  curl -X GET    -H \"Content-Type: application/json\"                          http://localhost:8080/people\n\n/new_user:  Create a new record user\n/new_token: Get instructions for a new token if yours has expired\"#\n    }\n\n    #[get(\"/session\")]\n    pub async fn session() -> Result<Json<String>, Error> {\n        let res: Option<String> = DB.query(\"RETURN <string>$session\").await?.take(0)?;\n\n        Ok(Json(res.unwrap_or(\"No session data found!\".into())))\n    }\n\n    #[post(\"/person/{id}\")]\n    pub async fn create_person(\n        id: Path<String>,\n        person: Json<PersonData>,\n    ) -> Result<Json<Option<Person>>, Error> {\n        let person = DB.create((PERSON, &*id)).content(person).await?;\n        Ok(Json(person))\n    }\n\n    #[get(\"/person/{id}\")]\n    pub async fn read_person(id: Path<String>) -> Result<Json<Option<Person>>, Error> {\n        let person = DB.select((PERSON, &*id)).await?;\n        Ok(Json(person))\n    }\n\n    #[put(\"/person/{id}\")]\n    pub async fn update_person(\n        id: Path<String>,\n        person: Json<PersonData>,\n    ) -> Result<Json<Option<Person>>, Error> {\n        let person = DB.update((PERSON, &*id)).content(person).await?;\n        Ok(Json(person))\n    }\n\n    #[delete(\"/person/{id}\")]\n    pub async fn delete_person(id: Path<String>) -> Result<Json<Option<Person>>, Error> {\n        let person = DB.delete((PERSON, &*id)).await?;\n        Ok(Json(person))\n    }\n\n    #[get(\"/people\")]\n    pub async fn list_people() -> Result<Json<Vec<Person>>, Error> {\n        let people = DB.select(PERSON).await?;\n        Ok(Json(people))\n    }\n\n    #[derive(Serialize, Deserialize)]\n    struct Params<'a> {\n        name: &'a str,\n        pass: &'a str,\n    }\n\n    #[get(\"/new_user\")]\n    pub async fn make_new_user() -> Result<String, Error> {\n        let name = rand::random::<FirstName>().to_string();\n        let pass = rand::random::<FirstName>().to_string();\n        let jwt = DB\n            .signup(Record {\n                access: \"account\",\n                namespace: \"namespace\",\n                database: \"database\",\n                params: Params {\n                    name: &name,\n                    pass: &pass,\n                },\n            })\n            .await?\n            .into_insecure_token();\n        Ok(format!(\"New user created!\\n\\nName: {name}\\nPassword: {pass}\\nToken: {jwt}\\n\\nTo log in, use this command:\\n\\nsurreal sql --namespace namespace --database database --pretty --token \\\"{jwt}\\\"\"))\n    }\n\n    #[get(\"/new_token\")]\n    pub async fn get_new_token() -> String {\n        let command = r#\"curl -X POST -H \"Accept: application/json\" -d '{\"ns\":\"namespace\",\"db\":\"database\",\"ac\":\"account\",\"user\":\"your_username\",\"pass\":\"your_password\"}' http://localhost:8000/signin\"#;\n        format!(\"Need a new token? Use this command:\\n\\n{command}\\n\\nThen log in with surreal sql --namespace namespace --database database --pretty --token YOUR_TOKEN_HERE\")\n    }\n}\n\n#[actix_web::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    DB.connect::<Ws>(\"localhost:8000\").await?;\n\n    DB.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    DB.use_ns(\"namespace\").use_db(\"database\").await?;\n\n    DB.query(\n        \"DEFINE TABLE person SCHEMALESS\n        PERMISSIONS FOR \n            CREATE, SELECT WHERE $auth,\n            FOR UPDATE, DELETE WHERE created_by = $auth;\n    DEFINE FIELD name ON TABLE person TYPE string;\n    DEFINE FIELD created_by ON TABLE person VALUE $auth READONLY;\n\n    DEFINE INDEX unique_name ON TABLE user FIELDS name UNIQUE;\n    DEFINE ACCESS account ON DATABASE TYPE RECORD\n\tSIGNUP ( CREATE user SET name = $name, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE name = $name AND crypto::argon2::compare(pass, $pass) )\n\tDURATION FOR TOKEN 15m, FOR SESSION 12h\n;\",\n    )\n    .await?;\n\n    HttpServer::new(|| {\n        App::new()\n            .service(routes::create_person)\n            .service(routes::read_person)\n            .service(routes::update_person)\n            .service(routes::delete_person)\n            .service(routes::list_people)\n            .service(routes::paths)\n            .service(routes::session)\n            .service(routes::make_new_user)\n            .service(routes::get_new_token)\n    })\n    .bind((\"localhost\", 8080))?\n    .run()\n    .await?;\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for SurrealDB Connection Readiness in JavaScript\nDESCRIPTION: This snippet shows how to use the .ready property to wait for the connection to the SurrealDB database to succeed. It's important to use this after .connect() to ensure the connection is established before executing queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/create-a-new-connection.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.ready;\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Merge in SurrealDB using Rust\nDESCRIPTION: Shows how to update records in SurrealDB using the merge method. It demonstrates merging data for all records in a table and for a specific record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\n// Update all records in a table\nlet people: Vec<Person> = db.update(\"person\")\n    .merge(Document {\n        updated_at: Datetime::default(),\n    })\n    .await?;\n// Update a record with a specific ID\nlet person: Option<Person> = db.update((\"person\", \"tobie\"))\n    .merge(Document {\n        updated_at: Datetime::default(),\n        settings: Settings {\n            active: true,\n        },\n    })\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Defining Record Access with JWT and Permissions in SurrealQL\nDESCRIPTION: An example of defining a record access method with JWT integration, including table permissions based on token claims and user authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/record.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Specify the namespace and database for the token\nUSE NS abcum DB app_vitalsense;\n\nDEFINE ACCESS token_name ON DATABASE TYPE RECORD WITH JWT\nALGORITHM RS256 KEY \"-----BEGIN PUBLIC KEY-----\nMUO52Me9HEB4ZyU+7xmDpnixzA/CUE7kyUuE0b7t38oCh+sQouREqIjLwgHhFdhh3cQAwr6GH07D\nThioYrZL8xATJ3Youyj8C45QnZcGUif5PkpWXDi0HJSoMFekbW6Pr4xuqIqb2LGxGDVJcLZwJ2AS\nGtu2UAfPXbBD3ffiad393M22g1iHM80YaNi+xgswG7qtXE4lR/Lt4s0MeKKX7stdWI1VIsoB+y3i\nr/OWUvJPjjDNbAsyy8tQmxydv+FUnLEP9TNT4AhN4DXcJ+XsDtW7OWt4EdSVDeKpGbIMvIrh1Pe+\nNilj8UHNyNDHa2AjK3seMo6CMvaIQJKj5o4xGFblFGwvvPD03SbuQLs1FdRjsZCeWLdYeQ3JDHE9\nsFG7DCXlpMJcaYT1mf4XHJ0gPekNLQyewTY3Vxf7FgV3GCNjV20kcDFgJA2+iVW2wSrb+txD1ycE\nkbi8jh0pedWwE40VQWaTh/8eAvX7IHWya/AEro25mq+m6vktNZLbvLphhp586kJK3Tdt3YjpkPre\nM3nkFWOWurIyKbtIV9JemfwCgt89sNV45dTlnEDEZFFGnIgDnWgx3CUo4XmhICEQU8+tklw9jJYx\niCTjhbIDEBHySSSc/pQ4ftHQmhToTlQeOdEy4LYiaEIgl1X+hzRH1hBYvWlNKe4EY1nMCKcjgt0=\n-----END PUBLIC KEY-----\";\n\nDEFINE TABLE user SCHEMAFULL\n  -- Authorized users can select, update, delete and create user records\n  PERMISSIONS FOR select, update, delete, create\n  -- The access method must be \"users\"\n  WHERE $access = \"users\"\n  -- The record of the user being queried must match the one identified in the token\n  -- Only matching records will be changed or returned\n  AND id = $auth.id\n  -- Allow privileged tokens to query any user\n  OR $token.privileged = true\n;\n```\n\n----------------------------------------\n\nTITLE: Basic DEFINE FIELD Syntax Definition in SurrealQL\nDESCRIPTION: Complete syntax structure for the DEFINE FIELD statement showing all possible clauses and options.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nDEFINE FIELD [ OVERWRITE | IF NOT EXISTS ] @name ON [ TABLE ] @table\n\t[ [ FLEXIBLE ] TYPE @type ]\n\t[ REFERENCE \n\t\t[   ON DELETE REJECT | \n\t\t\tON DELETE CASCADE | \n\t\t\tON DELETE IGNORE |\n\t\t\tON DELETE UNSET | \n\t\t\tON DELETE THEN @expression ]\n\t]\n\t[ DEFAULT [ALWAYS] @expression ]\n  [ READONLY ]\n\t[ VALUE @expression ]\n\t[ ASSERT @expression ]\n\t[ PERMISSIONS [ NONE | FULL\n\t\t| FOR select @expression\n\t\t| FOR create @expression\n\t\t| FOR update @expression\n\t] ]\n  [ COMMENT @string ]\n```\n\n----------------------------------------\n\nTITLE: Creating Person Record with Custom ID in SurrealQL\nDESCRIPTION: Creates a person record with explicit ID 'john' and multiple fields including nested name structure and timestamp.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/start.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE person:john SET\n\tname.first = 'John',\n\tname.last = 'Adams',\n\tname.full = string::join(' ', name.first, name.last),\n\tage = 29,\n\tadmin = true,\n\tsignup_at = time::now();\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Records in SurrealQL\nDESCRIPTION: Demonstrates various methods to create multiple records in a single CREATE statement, including using commas and range syntax.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/create.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Note: meta::tb(id) returns just the table name portion of a record ID\nCREATE townsperson, cat, dog SET\n    created_at = time::now(),\n    name = \"Just a \" + meta::tb(id);\n```\n\nLANGUAGE: surql\nCODE:\n```\n-- Creates three townperson records with a random ID\nCREATE |townsperson:3|;\n```\n\nLANGUAGE: surql\nCODE:\n```\nCREATE |townsperson:1..3|;\n```\n\nLANGUAGE: surql\nCODE:\n```\nCREATE dog, |cat:2|, |townsperson:1..3| SET\n    created_at = time::now(),\n    name = \"Just a \" + meta::tb(id);\n```\n\n----------------------------------------\n\nTITLE: Creating a Scope with Authentication in SurrealQL\nDESCRIPTION: This example demonstrates how to create a scope named 'account' with a 24-hour session duration. It includes signup and signin expressions that interact with a 'user' table, handling email and password authentication using Argon2 hashing.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/scope.mdx#2025-04-16_snippet_1\n\nLANGUAGE: SurrealQL\nCODE:\n```\n-- Enable scope authentication directly in SurrealDB\nDEFINE SCOPE account SESSION 24h\n\tSIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )\n;\n```\n\n----------------------------------------\n\nTITLE: Generating and Representing UUIDs in SurrealQL\nDESCRIPTION: This code snippet demonstrates the different ways to create or represent UUID values in SurrealQL. It shows generating UUIDs using built-in functions (rand::uuid::v4 and rand::uuid::v7), casting a string to UUID using the <uuid> type cast, and using the u-prefix syntax for UUID string literals.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/uuid.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nrand::uuid::v4();\nrand::uuid::v7();\n<uuid> \"a8f30d8b-db67-47ec-8b38-ef703e05ad1b\";\nu\"a8f30d8b-db67-47ec-8b38-ef703e05ad1b\";\n```\n\n----------------------------------------\n\nTITLE: Authenticating SurrealDB Connection with Credentials in JavaScript\nDESCRIPTION: This example shows how to authenticate a SurrealDB connection using a pair of credentials (username and password). It uses the .connect() method with an auth option containing the credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/create-a-new-connection.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Authenticate using a pair of credentials\nawait db.connect('https://cloud.surrealdb.com/rpc', {\n\tauth: {\n\t\tusername: 'root',\n\t\tpassword: 'surrealdb',\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Query Timeouts with TIMEOUT Clause in SurrealQL\nDESCRIPTION: Example of using the TIMEOUT clause to set a maximum execution time for a SurrealDB query. This prevents long-running queries from consuming excessive resources.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_20\n\nLANGUAGE: surql\nCODE:\n```\n-- Cancel this conditional filtering based on graph edge properties\n-- if it's not finished within 5 seconds\nSELECT * FROM person WHERE ->knows->person->(knows WHERE influencer = true) TIMEOUT 5s;\n```\n\n----------------------------------------\n\nTITLE: Using Let Method for Variable Assignment in Python\nDESCRIPTION: Example demonstrating how to assign a variable using let(), and then use it in subsequent database queries. Shows assigning a name object and using it in CREATE and SELECT queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/let.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Assign the variable on the connection\nawait db.let('name', {\n\t\"first\": 'Tobie',\n\t\"last\": 'Morgan Hitchcock',\n})\n\n# Use the variable in a subsequent query\nawait db.query('CREATE person SET name = $name')\n\n# Use the variable in a subsequent query\nawait db.query('SELECT * FROM person WHERE name.first = $name.first')\n```\n\n----------------------------------------\n\nTITLE: Initiating a Live Query with SurrealDB JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to initiate a live query using the db.live() method. It sets up a callback function to process live notifications for changes in the 'person' table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/streaming.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst queryUuid = await db.live(\n\t\"person\",\n\t// The callback function takes two arguments: the 'action' and 'result' properties\n\t( action, result ) => {\n\t\t// action can be: 'CREATE', 'UPDATE', 'DELETE' or 'CLOSE'\n\t    if (action === 'CLOSE') return;\n\n\t\t// result contains either the entire record, or a set of JSON patches when diff mode is enabled\n\t\tprocessSomeLiveQueryUpdate(result);\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Large Numbers of User Records in SurrealDB\nDESCRIPTION: This snippet creates a large number of user records with random IDs and demonstrates querying and pagination techniques.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_26\n\nLANGUAGE: surql\nCODE:\n```\nCREATE |user:200000| RETURN NONE;\nSELECT VALUE id FROM user LIMIT 4;\n\n-- Returns the same four records as above\nSELECT VALUE id FROM user START 0 LIMIT 2;\nSELECT VALUE id FROM user START 2 LIMIT 2;\n```\n\n----------------------------------------\n\nTITLE: Optimized Query for Selecting Multiple Records in SurrealDB\nDESCRIPTION: SurrealQL queries showing efficient ways to select multiple records by ID or ID range without full table scans.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/performance-best-practices.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\n-- Selecing indiviudal IDs\nSELECT *\nFROM user:19374837491, user:12647931632;\n```\n\nLANGUAGE: surql\nCODE:\n```\n-- Selecting a range of IDs\nSELECT *\nFROM user:12647931632..=19374837491;\n```\n\n----------------------------------------\n\nTITLE: Defining User Table with Permissions in SurrealDB\nDESCRIPTION: Creates a schemafull user table with permissions that allow authenticated Cognito users to access their own records. Includes a unique email index and field definitions for storing Cognito user information.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/integrate-aws-cognito-as-authentication-provider.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE user SCHEMAFULL\n  -- Authorized users can select, update, delete and create user records.\n  -- Records that do not match the permissions will not be modified nor returned.\n  PERMISSIONS FOR select, update, delete, create\n  WHERE\n    -- The access method must match the method that we will define.\n    $access = \"cognito\"\n    -- The record identifier must match that of the authenticated user.\n    AND id = $auth\n;\n\n-- In this example, we will use the email as the primary identifier for a user.\nDEFINE INDEX email ON user FIELDS email UNIQUE;\nDEFINE FIELD email ON user TYPE string ASSERT string::is::email($value);\n-- We define some other information present in the token that we want to store.\nDEFINE FIELD cognito_username ON user TYPE string;\n```\n\n----------------------------------------\n\nTITLE: Inserting Record with RETURN AFTER in SurrealQL\nDESCRIPTION: This snippet demonstrates the use of RETURN AFTER in an INSERT statement, which is the default behavior and returns the record after creation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/insert.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO company {\n\tname: 'SurrealDB',\n\tfounded: \"2021-09-10\",\n\tfounders: [person:tobie, person:jaime],\n\ttags: ['big data', 'database']\n} RETURN AFTER;\n```\n\n----------------------------------------\n\nTITLE: Upserting a Record in SurrealDB using Golang\nDESCRIPTION: This example demonstrates how to use the Upsert method to create or update a record in the 'persons' table. It uses a Person struct to define the data and handles potential errors.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/upsert.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Upsert a record in the \"persons\" table\nperson, err := surrealdb.Upsert[Person](db, models.Table(\"persons\"), Person{\n\tName:     \"John\",\n\tSurname:  \"Doe\",\n\tLocation: models.NewGeometryPoint(-0.11, 22.00),\n})\nif err != nil {\n\tpanic(err)\n}\nfmt.Printf(\"Upserted person with a struct: %+v\\n\", person)\n```\n\n----------------------------------------\n\nTITLE: Advanced count() Example with GROUP BY in SurrealQL\nDESCRIPTION: A more complex example demonstrating count() with a condition (age > 30) in a SELECT statement using GROUP BY country to count records per country that meet the condition.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/count.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nSELECT\n\tcountry,\n\tcount(age > 30) AS total\nFROM [\n\t{ age: 33, country: 'GBR' },\n\t{ age: 45, country: 'GBR' },\n\t{ age: 39, country: 'USA' },\n\t{ age: 29, country: 'GBR' },\n\t{ age: 43, country: 'USA' }\n]\nGROUP BY country;\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\tcountry: 'GBR',\n\t\ttotal: 2\n\t},\n\t{\n\t\tcountry: 'USA',\n\t\ttotal: 2\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Connection Logic for SurrealDB in JavaScript\nDESCRIPTION: This snippet illustrates how to use advanced custom logic to prepare a connection to a SurrealDB database. It includes setting the namespace and database, retrieving and authenticating with a token, and handling query execution timing.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/create-a-new-connection.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Use advanced custom logic to prepare the connection to the database\nawait db.connect('https://cloud.surrealdb.com/rpc', {\n\tprepare: async (db) => {\n\t\tawait db.use({ namespace: 'surrealdb', database: 'docs' });\n\n\t\tconst token = await retrieveToken();\n\t\tif (token) await db.authenticate(token);\n\n\t\t// Any queries executed before the .prepare() function finishes will be forced to wait\n\t\t// Please note that this is also the case for queries executed within the prepare function\n\t\t// Doing so can cause the connection to stay in a initializing state\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with SurrealKV Storage\nDESCRIPTION: Commands to start SurrealDB using the SurrealKV storage engine, with options for both versioned and non-versioned configurations. Includes authentication credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/start.mdx#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Without versioning (temporal queries)\nsurreal start -u root -p root surrealkv://mydb\n\n# With versioning\nsurreal start -u root -p root surrealkv+versioned://mydb\n```\n\n----------------------------------------\n\nTITLE: Altering Passed Values with VALUE Clause in SurrealDB\nDESCRIPTION: This snippet shows how to use the VALUE clause to alter a passed value before storing it in the database, in this case ensuring an email address is stored in lowercase.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\n-- Ensure that an email address is always stored in lowercase characters\nDEFINE FIELD email ON TABLE user TYPE string\n  VALUE string::lowercase($value);\n```\n\n----------------------------------------\n\nTITLE: Executing a SurrealQL Query via WebSocket API\nDESCRIPTION: The query method sends a custom SurrealQL query to the database. It supports parameterized queries with variables that can be referenced in the SQL statement, allowing for dynamic and reusable queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"query\",\n    \"params\": [\n        \"CREATE person SET name = 'John'; SELECT * FROM type::table($tb);\",\n        {\n            \"tb\": \"person\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using TEMPFILES Clause in SurrealDB SELECT Statement\nDESCRIPTION: Demonstrates how to use the TEMPFILES clause to process large result sets using temporary files instead of memory, reducing memory usage at the cost of performance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_22\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM person ORDER BY name TEMPFILES;\n```\n\n----------------------------------------\n\nTITLE: SCHEMALESS Table Definition in SurrealQL\nDESCRIPTION: Example of creating a SCHEMALESS table with field definitions and data insertion\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/table.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE user SCHEMALESS;\n\nDEFINE FIELD firstName ON TABLE user TYPE string;\nDEFINE FIELD lastName ON TABLE user TYPE string;\nDEFINE FIELD email ON TABLE user TYPE string\n  ASSERT string::is::email($value);\nDEFINE INDEX userEmailIndex ON TABLE user COLUMNS email UNIQUE;\n\nCREATE user SET firstName = 'Tobie', lastName = 'Hitchcock', email = 'Tobie.Hitchcock@surrealdb.com', photoURI = 'photo/yxCFi22Jw2.webp';\n\nCREATE user SET firstName = 'Jamie', lastName = 'Hitchcock', email = 'Jamie.Hitchcock', photoURI = 'photo/yxCFi22Jw2.webp';\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB in Python\nDESCRIPTION: Initializes a connection to a local or remote SurrealDB database endpoint. This method is used to establish a connection before performing any database operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nSurreal / AsyncSurreal\n```\n\n----------------------------------------\n\nTITLE: Creating City Nodes and Relationships for Graph Traversal in SurrealQL\nDESCRIPTION: Creates five city nodes and connects them with 'to' relationships of different types (train, road, bike path) and random distances. This setup demonstrates a linear graph structure for traversal examples.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_43\n\nLANGUAGE: surql\nCODE:\n```\nCREATE |city:1..5| SET name = <string>id.id() + 'ville';\nFOR $pair IN (<array>(1..=5)).windows(2) {\n  \tLET $city1 = type::thing(\"city\", $pair[0]);\n    LET $city2 = type::thing(\"city\", $pair[1]);\n    RELATE $city1->to->$city2 SET \n        type = rand::enum([\"train\", \"road\", \"bike path\"]),\n        distance = <int>(rand::float() * 100).ceil()\n};\n```\n\n----------------------------------------\n\nTITLE: Example React Component Using SurrealDB Hooks\nDESCRIPTION: Example React component demonstrating the usage of SurrealDB context hooks for database operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/frameworks/react.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect } from \"react\";\nimport { useSurrealClient } from \"./SurrealProvider\";\n\nexport function ExampleComponent() {\n  const client = useSurrealClient();\n  const [users, setUsers] = useState([]);\n\n  const fetchUsers = async () => {\n    try {\n      const result = await client.query(\"SELECT * FROM users\");\n      setUsers(result[0] || []); \n    } catch (err) { \n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  return (\n    <div>\n      {users.map((user) => (\n        <div key={user?.id}>\n          <h3>{user?.name}</h3>\n          <p>Email: {user?.email}</p>\n        </div>\n      ))}\n\n      {users.length === 0 && <p>No users found</p>}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SurrealDB Client with Local Endpoint in C#\nDESCRIPTION: Demonstrates how to create a SurrealDbClient instance using a local endpoint. This is typically used for development or when running SurrealDB on the same machine as the application.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/create-a-new-connection.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Creates a new client using a local endpoint\nusing var db = new SurrealDbClient(\"http://127.0.0.1:8000\");\n```\n\n----------------------------------------\n\nTITLE: Defining Literal Types on Fields in SurrealDB\nDESCRIPTION: Shows how to define fields with literal types that restrict possible values. This example defines a coffee field that accepts specific string values or a structured object with a special order.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_27\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD coffee ON TABLE order TYPE \"regular\" | \"large\" | { special_order: string };\n\nCREATE order SET coffee = { special_order: \"Venti Quadruple Ristretto Half-Decaf Soy Latte with 4 pumps of sugar-free vanilla syrup\" };\nCREATE order SET coffee = \"small\";\n```\n\n----------------------------------------\n\nTITLE: Using Reserved Variables in SurrealQL\nDESCRIPTION: Shows examples of using predefined reserved variables like $before, $after, $auth, $event, $input, $parent, and $this in various SurrealQL contexts.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/parameters.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nCREATE cat SET name = \"Mr. Meow\", nicknames = [\"Mr. Cuddlebun\"];\nUPDATE cat SET nicknames += \"Snuggles\" WHERE name = \"Mr. Meow\" RETURN $before, $after;\n```\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n        FOR select, update, delete WHERE id = $auth.id;\n```\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE EVENT user_created ON TABLE user WHEN $event = \"CREATE\" THEN (\n    CREATE log SET table = \"user\", event = $event, created_at = time::now()\n);\n```\n\nLANGUAGE: surql\nCODE:\n```\nCREATE user SET name = \"User1\", member_of = \"group1\";\nCREATE user SET name = \"User2\", member_of = \"group1\";\nCREATE user SET name = \"User3\", member_of = \"group1\";\nSELECT name, \n    (SELECT VALUE name FROM user WHERE member_of = $parent.member_of)\n    AS group_members\n    FROM user\n    WHERE name = \"User1\";\n```\n\n----------------------------------------\n\nTITLE: Comparing Bidirectional Queries in SurrealDB\nDESCRIPTION: This snippet compares two approaches for querying in the reverse direction: using a subquery with record links versus using graph relations with arrow syntax. It demonstrates how graph queries can be more concise.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nSELECT \n    *,\n    -- Check the `user` table's `comments` field\n    -- for the id of the current comment\n    (SELECT id, name FROM user WHERE $parent.id IN comments) AS author\nFROM comment;\n\n-- Equivalent graph query is much easier\n-- to read and write\nSELECT \n\t*,\n\t<-wrote<-author\nFROM comment;\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Auditing and Revocation in SurrealQL\nDESCRIPTION: Demonstrates comprehensive token management including auditing and revocation capabilities. Creates audit trails for token usage and implements token revocation checking.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/record.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS user ON DATABASE TYPE RECORD\n    SIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\n    SIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )\n    AUTHENTICATE {\n        IF type::thing(\"token\", $token.jti).revoked = true {\n            THROW \"This token has been revoked\";\n        };\n        INSERT INTO token { id: $token.jti, exp: $token.exp, revoked: false };\n        CREATE audit CONTENT { token: $token.jti, time: time::now() };\n        RETURN $auth;\n    }\n    DURATION FOR TOKEN 30d, FOR SESSION 1h\n;\n```\n\n----------------------------------------\n\nTITLE: Merging Records with SurrealDB JavaScript SDK\nDESCRIPTION: Shows how to merge data into existing records using the 'merge' method. Examples include merging data for all records in a table, merging data for a specific record, and merging with a partial type.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/data-maniplulation.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n\tid: string;\n\tname: string;\n\tupdated_at: Date;\n\tsettings: {\n\t\tactive: boolean;\n\t\tmarketing: boolean;\n\t};\n};\n\n// Update all records in a table\nconst people = await db.merge<Person>('person', {\n\tupdated_at: new Date(),\n});\n\n// Update a record with a specific ID\nconst person = await db.merge<Person>(new RecordId('person', 'tobie'), {\n\tupdated_at: new Date(),\n\tsettings: {\n\t\tactive: true,\n\t},\n});\n\n// The content you are merging the record with might differ from the return type\nconst record = await db.merge<\n\tPerson,\n\tPick<Person, 'name'>\n>(new RecordId('person', 'tobie'), {\n\tname: 'Tobie',\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Queries with Parameters in Rust\nDESCRIPTION: Demonstrates how to execute SurrealQL queries with parameter binding in Rust. The example shows creating a record, selecting data with a parameterized table name, and extracting specific results using a builder pattern approach.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/sdks/index.mdx#2025-04-16_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n// Run some queries\nlet sql = \"\n    CREATE person;\n    SELECT * FROM type::table($table);\n\";\nlet mut result = db\n    .query(sql)\n    .bind((\"table\", \"person\"))\n    .await?;\n// Get the first result from the first query\nlet created: Option<Person> = result.take(0)?;\n// Get all of the results from the second query\nlet people: Vec<Person> = result.take(1)?;\n```\n\n----------------------------------------\n\nTITLE: Optimized Query for Selecting Single Record in SurrealDB\nDESCRIPTION: SurrealQL query demonstrating the efficient way to select a single record by ID without performing a full table scan.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/performance-best-practices.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nSELECT *\nFROM user:19374837491;\n```\n\n----------------------------------------\n\nTITLE: Inserting Relations in SurrealQL\nDESCRIPTION: This comprehensive example demonstrates how to insert records into relation tables, including single and multiple relations, and how to query the resulting relationships.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/insert.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\n-- Insert records into the person table\nINSERT INTO person [\n\t{ id: 1 },\n\t{ id: 2 },\n\t{ id: 3 },\n];\n-- Insert a single relation\nINSERT RELATION INTO likes {\n\tin: person:1,\n\tid: 'object',\n\tout: person:2,\n};\n\n-- Insert multiple relations\nINSERT RELATION INTO likes [\n\t{\n\t\tin: person:1,\n\t\tid: 'array',\n\t\tout: person:2,\n\t},\n\t{\n\t\tin: person:2,\n\t\tid: 'array_two',\n\t\tout: person:3,\n\t}\n];\n\n-- Insert a relation and return the value of the likes field\nINSERT RELATION INTO likes (in, id, out)\n\tVALUES (person:1, 'values', person:2);\n\n-- Select the value of the likes field\nSELECT VALUE ->likes FROM person;\n```\n\n----------------------------------------\n\nTITLE: Defining Person Table with Permissions\nDESCRIPTION: SurrealDB definitions for creating a person table with schema validation and permissions based on authentication state.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE IF NOT EXISTS person SCHEMALESS\n    PERMISSIONS FOR \n        CREATE, SELECT WHERE $auth,\n        FOR UPDATE, DELETE WHERE created_by = $auth;\nDEFINE FIELD IF NOT EXISTS name ON TABLE person TYPE string;\nDEFINE FIELD IF NOT EXISTS created_by ON TABLE person VALUE $auth READONLY;\n```\n\n----------------------------------------\n\nTITLE: Defining a Root-level User in SurrealDB\nDESCRIPTION: Creates a root-level user named 'john' with the OWNER role and a password. Root-level users have visibility and permissions across all namespaces and databases.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/authentication.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE USER john ON ROOT PASSWORD \"VerySecurePassword!\" ROLES OWNER;\n```\n\n----------------------------------------\n\nTITLE: Implementing User Signup with SurrealDB Rust SDK\nDESCRIPTION: This example demonstrates how to use the signup() method to create a new user account. It sets up credentials, establishes a connection to the database, and executes the signup process. The resulting JWT token is then extracted and displayed.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/signup.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::Serialize;\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Record;\nuse surrealdb::Surreal;\n\n#[derive(Serialize)]\nstruct Credentials<'a> {\n    email: &'a str,\n    pass: &'a str,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = Surreal::new::<Ws>(\"127.0.0.1:8000\").await?;\n    let jwt = db\n        .signup(Record {\n            namespace: \"test\",\n            database: \"test\",\n            access: \"account\",\n            params: Credentials {\n                email: \"info@surrealdb.com\",\n                pass: \"123456\",\n            },\n        })\n        .await?;\n\n    // ⚠️: It is important to note that the token should be handled securely and protected from unauthorized access.\n    let token = jwt.as_insecure_token();\n    dbg!(token);\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SELECT Statement Syntax in SurrealQL\nDESCRIPTION: Defines the complete syntax structure for SELECT statements in SurrealQL, including all possible clauses and options for querying data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nSELECT \n\tVALUE @field | @fields [ AS @alias ] [ OMIT @fields ... ]\n\tFROM [ ONLY ] @targets\n\t[ WITH [ NOINDEX | INDEX @indexes ... ]]\n\t[ WHERE @conditions ]\n\t[ SPLIT [ ON ] @field, ... ]\n\t[ GROUP [ BY ] @field, ... ]\n\t[ ORDER [ BY ] \n\t\t@field [ COLLATE ] [ NUMERIC ] [ ASC | DESC ], ...\n\t\t| RAND() ]\n\t[ LIMIT [ BY ] @limit ]\n\t[ START [ AT ] @start 0 ]\n\t[ FETCH @fields ... ]\n\t[ TIMEOUT @duration ]\n\t[ PARALLEL ]\n\t[ TEMPFILES ]\n\t[ EXPLAIN [ FULL ]]\n;\n```\n\n----------------------------------------\n\nTITLE: Creating Graph Relationships with RELATE Statement\nDESCRIPTION: Demonstrates creating relationships between person and product nodes using different edge types (wishlist, cart, order, review) with automatically generated ULIDs\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nRELATE person:01GT2ZEF2G8AC8D7H7FMZ1ZYZ3 -> wishlist:ulid() -> product:01HGAR7A0R9BETTCMATM6SSXPT;\nRELATE person:01HBC4FGG0904R927Q82SVZ1JB -> cart:ulid() -> product:01GXRS3FZG8Y8SDBNHMC14N25X;\nRELATE person:01GCSHZEP89F1B9T33Y4M9VA9J -> order:ulid() -> product:01H35P394G93AVCEF8KX59H5RY;\nRELATE person:01FSZ7A4W888FAYSSP8T3NV3MX -> review:ulid() -> product:01GBE3CTMG93XBKM07CFH1S9S6;\n```\n\n----------------------------------------\n\nTITLE: Connecting to Surreal Cloud with Rust SDK\nDESCRIPTION: Example of connecting to a Surreal Cloud instance using the Rust SDK. This code establishes a connection, selects a namespace and database, authenticates with root credentials, creates a record, and queries data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-cloud/connect/sdk.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse surrealdb::engine::any;\nuse surrealdb::opt::auth::Root;\nuse tokio;\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Person {\n    name: String,\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Open a connection\n    let db = any::connect(\"wss://cloud-docs-068rp16e0hsnl62vgooa7omjks.aws-euw1.staging.surrealdb.cloud\").await?;\n\n    // Select a namespace and database\n    db.use_ns(\"Cloud Namespace\").use_db(\"Cloud Database\").await?;\n\n    // Authenticate\n    db.signin(Root {\n        username: \"<created root user>\",\n        password: \"<created root password>\",\n    }).await?;\n\n\tdb.query(\"CREATE person:john SET name = 'John Doe', age = 25\").await?.check()?;\n\n\t// Query that person\n\tlet john: Option<Person> = db.select((\"person\", \"john\")).await?;\n\tdbg!(john);\n\n  Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Using VERSION Clause for Time-Travel Queries in SurrealDB\nDESCRIPTION: Demonstrates how to create and query records at specific points in time using the VERSION clause. Shows creation of records with different timestamps and querying them based on those versions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/create.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\n-- Create a record for user:john at 8:00AM\nCREATE user:john SET name = 'John' VERSION d'2024-08-19T08:00:00Z';\n[[{ id: user:john, name: 'John' }]]\n\n-- Return the record for user:john at 8:00AM\nSELECT * FROM user:john VERSION d'2024-08-19T08:00:00Z';\n[[{ id: user:john, name: 'John' }]]\n\n-- Create a record for user:john at 8:01AM\nCREATE user:john SET name = 'John-1' VERSION d'2024-08-19T08:01:00Z';\n[[{ id: user:john, name: 'John-1' }]]\n\n-- Return the record for user:john at 8:01AM\nSELECT * FROM user:john VERSION d'2024-08-19T08:01:00Z';\n[[{ id: user:john, name: 'John-1' }]]\n\n-- Return an empty array because the record at the datetime does not exist\nSELECT * FROM user:john VERSION d'2024-08-19T07:00:00Z';\n[[]]\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Running Live Query with SurrealDB JavaScript SDK\nDESCRIPTION: This example shows how to subscribe to a running live query using the db.subscribeLive() method. It registers a callback function to process live notifications for an existing query identified by its UUID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/streaming.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.subscribeLive(\n\tqueryUuid,\n\t// The callback function takes an object with the \"action\" and \"result\" properties\n\t( action, result ) => {\n\t\t// action can be: \"CREATE\", \"UPDATE\", \"DELETE\" or \"CLOSE\"\n\t    if (action === 'CLOSE') return;\n\n\t\t// result contains either the entire record, or a set of JSON patches when diff mode is enabled\n\t\tprocessSomeLiveQueryUpdate(result);\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Starting a Transaction in SurrealDB\nDESCRIPTION: This snippet demonstrates how to start a transaction in SurrealDB using the BEGIN or BEGIN TRANSACTION statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/transactions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nBEGIN [ TRANSACTION ];\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Record Access in SurrealDB with Python\nDESCRIPTION: Example showing how to authenticate using record access in SurrealDB using Python client, including variables for email and password.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/handling-authentication.mdx#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Authenticate with Record Access\ndb.signin({\n\t\"namespace\": 'surrealdb',\n\t\"database\": 'docs',\n\t\"access\": 'account',\n\n    # Also pass any properties required by the access definition\n\t\"variables\": {\n        \"email\": 'info@surrealdb.com',\n        \"password\": '123456',\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Queries with WHERE Clause in SurrealQL\nDESCRIPTION: Examples of using the WHERE clause for conditional filtering in SurrealDB SELECT queries. The WHERE clause supports simple conditions, graph edge traversals, boolean logic, and filtering arrays.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\n-- Simple conditional filtering\nSELECT * FROM article WHERE published = true;\n\n-- Conditional filtering based on graph edges\nSELECT * FROM profile WHERE count(->experience->organisation) > 3;\n\n-- Conditional filtering based on graph edge properties\nSELECT * FROM person WHERE ->(reaction WHERE type='celebrate')->post;\n\n-- Conditional filtering with boolean logic\nSELECT * FROM user WHERE (admin AND active) OR owner = true;\n\n-- Select filtered nested array values\nSELECT address[WHERE active = true] FROM person;\n```\n\n----------------------------------------\n\nTITLE: Creating Graph Relations in SurrealDB\nDESCRIPTION: Example showing how to create users, comments, and relationships between them, including multiple graph relations from a single user.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_18\n\nLANGUAGE: surql\nCODE:\n```\nCREATE user:mcuserson SET name = \"User McUserson\";\nCREATE comment:one SET \n    text = \"I learned something new!\", \n    created_at = time::now();\nCREATE cat:pumpkin SET name = \"Pumpkin\";\n\nRELATE user:mcuserson->wrote->comment:one SET\n\tlocation = \"Arizona\",\n\tos = \"Windows 11\",\n\tmood = \"happy\";\n\nRELATE user:mcuserson->likes->cat:pumpkin;\n```\n\n----------------------------------------\n\nTITLE: Recursive Graph Traversal with Fixed Depth in SurrealQL\nDESCRIPTION: Uses the recursive graph syntax to traverse three levels down from city:1 following the 'to' edge. This achieves the same result as the manual traversal but with more concise syntax.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_46\n\nLANGUAGE: surql\nCODE:\n```\nSELECT @.{3}->to->city AS fourth_city FROM city:1;\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoints with Custom Responses in SurrealQL\nDESCRIPTION: This snippet shows how to define multiple API endpoints with different responses, combined with a global configuration for headers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE CONFIG API\n    MIDDLEWARE \n        api::res::headers({\n            'Access-Control-Allow-Origin': '*'\n        });\n\nDEFINE API \"/test\" FOR get THEN {};\nDEFINE API \"/test2\" FOR get THEN {\n    RETURN {\n        body: {\n            some: \"data\"\n        }\n    }\n};\n\napi::invoke(\"/test\");\napi::invoke(\"/test2\");\n```\n\n----------------------------------------\n\nTITLE: Example Usage of use() Method in SurrealDB JavaScript SDK\nDESCRIPTION: This example demonstrates how to use the 'use()' method to switch to the 'surrealdb' namespace and 'docs' database. The method is called with await, indicating it returns a Promise.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/use.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait db.use({ namespace: 'surrealdb', database: 'docs' });\n```\n\n----------------------------------------\n\nTITLE: Specifying Return Values in SurrealQL CREATE Statement\nDESCRIPTION: Demonstrates how to use the RETURN clause to control what is returned after creating a record, including options like NONE, BEFORE, AFTER, DIFF, and specific fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/create.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\n-- Create 10000 records but don't show any of them\nCREATE |person:10000| SET age = 46, username = \"john-smith\" RETURN NONE;\n```\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person SET age = 46, username = \"john-smith\" RETURN DIFF;\n```\n\nLANGUAGE: surql\nCODE:\n```\n-- Will always return NONE\nCREATE person SET age = 46, username = \"john-smith\" RETURN BEFORE;\n```\n\nLANGUAGE: surql\nCODE:\n```\n-- Return the record after creation\nCREATE person SET age = 46, username = \"john-smith\" RETURN AFTER;\n```\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person\n    SET age = 46,\n    username = \"john-smith\",\n    interests = ['skiing', 'music']\nRETURN\n    age,\n    interests,\n    age + 1 AS age_next_year;\n\nCREATE |person:5|\n    SET age = 20\nRETURN VALUE age;\n```\n\n----------------------------------------\n\nTITLE: Merging Data within a Single Record in Go\nDESCRIPTION: Demonstrates how to use the Merge method to update a specific record in the 'person' table. It defines a struct for the merge data and performs the merge operation using the SurrealDB Golang SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/merge.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype PersonMerge struct {\n\tID       models.RecordID `json:\"id\"`\n\tSettings struct {\n\t\tActive    bool `json:\"active\"`\n\t\tMarketing bool `json:\"marketing\"`\n\t} `json:\"settings\"`\n}\n\n// Define the partial update data using a struct\nmergeData := PersonMerge{\n\tID: models.NewRecordID(\"person\", \"tobie\"),\n\tSettings: struct {\n\t\tActive    bool `json:\"active\"`\n\t\tMarketing bool `json:\"marketing\"`\n\t}{\n\t\tActive:    true,\n\t\tMarketing: false,\n\t},\n}\n\n// Perform the merge operation\nupdatedPerson, err := surrealdb.Merge[Person, models.RecordID](db, mergeData.ID, mergeData)\nif err != nil {\n\tpanic(err)\n}\nfmt.Printf(\"Merged person record with struct: %+v\\n\", updatedPerson)\n```\n\n----------------------------------------\n\nTITLE: Using VERSION Clause for Time-Travel Queries in SurrealDB\nDESCRIPTION: Demonstrates how to use the VERSION clause for time-travel queries in SurrealDB with SurrealKV as the storage engine. This feature allows querying specific versions of records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_27\n\nLANGUAGE: surql\nCODE:\n```\nCREATE user:john SET name = 'John' VERSION d'2024-08-19T08:00:00Z';\n\nSELECT * FROM user:john;\n\nSELECT * FROM user:john VERSION d'2024-08-19T08:00:00Z';\n\nSELECT * FROM user:john VERSION d'2024-08-19T07:00:00Z';\n\nupdate user:john Set hight =\"55\"\n\nSELECT * FROM user:john;\n\nSELECT * FROM user:john VERSION d'2024-08-19T08:00:00Z';\n```\n\n----------------------------------------\n\nTITLE: Deep Record Traversal in SurrealQL\nDESCRIPTION: Shows how to perform multiple levels of record traversal to fetch deeply nested data from linked records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/records.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nSELECT friends.friends.friends.name FROM person:tobie;\n[\n\t{\n\t\tfriends: {\n\t\t\tfriends: {\n\t\t\t\tfriends: {\n\t\t\t\t\tname: [\n\t\t\t\t\t\t[ [\"Tobie\", \"Simon\"], [\"Simon\", \"Marcus\"] ],\n\t\t\t\t\t\t[ [\"Simon\", \"Marcus\"] ]\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Querying SurrealDB using JavaScript RPC Client\nDESCRIPTION: Example of using JavaScript with node-fetch to create an RPC client that queries SurrealDB. This snippet demonstrates creating a new person record and then selecting all records from the person table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetch = require('node-fetch');\n\nasync function querySurrealDB() {\n  // Create a new person record\n  await fetch('http://localhost:8000/rpc', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      method: 'query',\n      params: ['CREATE person SET name = \"John Doe\"; SELECT * FROM person;'],\n    }),\n  });\n\n  const data = await response.json();\n}\n\nquerySurrealDB();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic RETURN Usage in SurrealQL\nDESCRIPTION: This snippet demonstrates basic usage of the RETURN statement in SurrealQL. It shows how to return simple values, objects, and query results.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/return.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Return a simple value\nRETURN 123;\nRETURN \"I am a string!\";\nRETURN {\n\tprop: \"value\"\n};\n\n-- Return the result of a query\nRETURN SELECT * FROM person;\nRETURN (CREATE person).id;\n```\n\n----------------------------------------\n\nTITLE: ACCESS GRANT Syntax in SurrealQL\nDESCRIPTION: The syntax for the GRANT clause of the ACCESS statement, used to create access grants for system users or record users.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/access.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nACCESS @name [ ON [ ROOT | NAMESPACE | DATABASE ] ] \n\tGRANT [ FOR USER @name | FOR RECORD @record ]\n```\n\n----------------------------------------\n\nTITLE: Basic Recursive Path Queries\nDESCRIPTION: Demonstrates basic recursive path syntax using {} braces to specify traversal depth for both record and graph links.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_20\n\nLANGUAGE: surql\nCODE:\n```\n-- Two steps down the record links at the `next` field\nplanet:earth.{2}.next;\n-- Two steps down the `has` graph relation\nplanet:earth.{2}->has->(?);\n```\n\n----------------------------------------\n\nTITLE: Advanced SELECT Query in SurrealDB\nDESCRIPTION: Shows an advanced SELECT query with filtering, fetching, and accessing nested data in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/start.mdx#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT title, category, author.name.full AS author_name FROM article\nWHERE author.age < 30\nFETCH author, category;\n```\n\n----------------------------------------\n\nTITLE: Importing Data and Querying Results in TypeScript and SQL\nDESCRIPTION: This example demonstrates how to use the import method to define tables, create records, and define a function in SurrealDB. It then performs a query to retrieve the imported data. The import method requires a SurrealDB instance version >= 2.0.0.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/import.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await db.import(\n    `\n    DEFINE TABLE foo SCHEMALESS;\n    DEFINE TABLE bar SCHEMALESS;\n    CREATE foo:1 CONTENT { hello: \"world\" };\n    CREATE bar:1 CONTENT { hello: \"world\" };\n    DEFINE FUNCTION fn::foo() {\n      RETURN \"bar\";\n    };\n`)\n\nconst result = await db.query(`\n    SELECT * FROM foo;\n    SELECT * FROM bar;\n`)\n\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: Creating New Record Users with SurrealDB Authentication in Rust\nDESCRIPTION: A function that generates random credentials and signs up a new record user in SurrealDB. It returns the credentials and JWT token with instructions for using the CLI, demonstrating SurrealDB's authentication system.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Serialize, Deserialize)]\nstruct Params<'a> {\n    name: &'a str,\n    pass: &'a str,\n}\n\npub async fn make_new_user() -> Result<String, Error> {\n    let name = rand::random::<FirstName>().to_string();\n    let pass = rand::random::<FirstName>().to_string();\n    let jwt = DB\n        .signup(Record {\n            access: \"account\",\n            namespace: \"test\",\n            database: \"test\",\n            params: Params {\n                name: &name,\n                pass: &pass,\n            },\n        })\n        .await?\n        .into_insecure_token();\n    Ok(format!(\"New user created!\\n\\nName: {name}\\nPassword: {pass}\\nToken: {jwt}\\n\\nTo log in, use this command:\\n\\nsurreal sql --ns test --db test --pretty --token \\\"{jwt}\\\"\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Using THROW in Transactions for Error Handling in SurrealQL\nDESCRIPTION: This snippet shows how THROW can be used within a transaction to handle errors and cancel the transaction if certain conditions are not met, such as insufficient funds in a transfer scenario.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/throw.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nBEGIN TRANSACTION;\nLET $transfer_amount = 150;\nCREATE account:one SET dollars =  100;\nCREATE account:two SET dollars =  100;\nUPDATE account:one SET dollars -= $transfer_amount;\nUPDATE account:two SET dollars += $transfer_amount;\nIF account:one.dollars < 0 {\n    THROW \"Insufficient funds, would have $\" + <string>account:one.dollars + \" after transfer\"\n};\nCOMMIT TRANSACTION;\nSELECT * FROM account;\n```\n\n----------------------------------------\n\nTITLE: Grouping Sales Data by Product and Region in SurrealQL\nDESCRIPTION: Example query that demonstrates grouping sales data by product_id and region, calculating the sum of amounts for each group. This illustrates how to perform aggregate calculations on grouped data for analysis and reporting.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/group_by.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nSELECT\n    product_id,\n    region,\n    math::sum(amount) AS total_sales\nFROM\n    sales\nGROUP BY\n    product_id, region;\n```\n\n----------------------------------------\n\nTITLE: UPSERT Statement Syntax Definition\nDESCRIPTION: Defines the complete syntax structure for the UPSERT statement in SurrealQL, including optional clauses for content manipulation, conditions, return values, and execution parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/upsert.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nUPSERT [ ONLY ] @targets\n    [ CONTENT @value\n      | MERGE @value\n      | PATCH @value\n\t  | REPLACE @value\n      | [ SET @field = @value, ... | UNSET @field, ... ]\n    ]\n    [ WHERE @condition ]\n    [ RETURN NONE | RETURN BEFORE | RETURN AFTER | RETURN DIFF | RETURN @statement_param, ... | RETURN VALUE @statement_param ]\n    [ TIMEOUT @duration ]\n    [ PARALLEL ]\n;\n```\n\n----------------------------------------\n\nTITLE: Record Authentication Implementation in Rust\nDESCRIPTION: Example implementation of record-based authentication using custom parameters struct and signup method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/authenticating-users.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Serialize, Deserialize)]\nstruct Params<'a> {\n    name: &'a str,\n    pass: &'a str,\n}\n\ndb.signup(Record {\n    access: \"account\",\n    namespace: \"namespace\",\n    database: \"database\",\n    params: Params {\n        name: \"username\",\n        pass: \"Str0ngpAASSword!\",\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Using GROUP BY and GROUP ALL Clauses in SurrealQL\nDESCRIPTION: Examples of data aggregation and grouping in SurrealDB using GROUP BY and GROUP ALL clauses. These allow grouping by single fields, nested fields, multiple fields, and aggregate functions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\n-- Group records by a single field\nSELECT country FROM user GROUP BY country;\n\n-- Group results by a nested field\nSELECT settings.published FROM article GROUP BY settings.published;\n\n-- Group results by multiple fields\nSELECT gender, country, city FROM person GROUP BY gender, country, city;\n\n-- Use an aggregate function to select unique values from a nested array across an entire table\nSELECT array::group(tags) AS tags FROM article GROUP ALL;\n```\n\n----------------------------------------\n\nTITLE: Default Value Examples\nDESCRIPTION: Examples of setting default values for fields and using the DEFAULT ALWAYS clause.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\n-- A user is not locked by default.\nDEFINE FIELD locked ON TABLE user TYPE bool\n-- Set a default value if empty\nDEFAULT false;\n```\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE product SCHEMAFULL;\n-- Set a default value of 123.456 for the primary field\nDEFINE FIELD primary ON product TYPE number DEFAULT ALWAYS 123.456;\n```\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE post SCHEMAFULL;\nDEFINE FIELD tags ON post TYPE array<object> DEFAULT ALWAYS [];\nDEFINE FIELD tags.*.color ON post TYPE string DEFAULT ALWAYS 'red';\nDEFINE FIELD tags.*.name ON post TYPE string;\n--\nCREATE post:test;\nUPSERT post:test SET tags += { name: 'test' };\nUPSERT post:test SET tags += { name: 'test', color: 'blue' };\n```\n\n----------------------------------------\n\nTITLE: Defining Tables with Specialized TYPE Clause in SurrealDB\nDESCRIPTION: Illustrates how to define tables with different TYPE clauses, including ANY, NORMAL, and RELATION. This allows specifying the type of data that can be stored in the table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/table.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE person TYPE ANY;\nDEFINE TABLE person;\n\n-- Since it's default, we can also omit the TYPE clause\nDEFINE TABLE person TYPE NORMAL;\n\n-- Just a RELATION table, no constraints on the type of table\nDEFINE TABLE likes TYPE RELATION;\n\n-- Define a relation table, and constrain the type of relation which can be stored\nDEFINE TABLE likes TYPE RELATION FROM user TO post;\n-- OR use IN and OUT alternatively to FROM and TO\nDEFINE TABLE likes TYPE RELATION IN user OUT post;\n-- To allow a link to one of a possible set of record types, use the | operator\nDEFINE TABLE likes TYPE RELATION FROM user TO post|video;\nDEFINE TABLE likes TYPE RELATION IN user OUT post|video;\n\n-- Define a relation table, and constrain the type of relation which can be stored\nDEFINE TABLE assigned_to SCHEMAFULL TYPE RELATION IN tag OUT sticky\n    PERMISSIONS\n        FOR create, select, update, delete\n            WHERE in.owner == $auth.id AND out.author == $auth.id;\n```\n\n----------------------------------------\n\nTITLE: UPSERT With ONLY Clause\nDESCRIPTION: Shows how to use the ONLY clause with UPSERT to return a single record object instead of an array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/upsert.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nUPSERT ONLY person:tobie SET \n\tname = 'Tobie', \n\tcompany = 'SurrealDB', \n\tskills = ['Rust', 'Go', 'JavaScript'];\n```\n\n----------------------------------------\n\nTITLE: Authentication and Permissions Setup\nDESCRIPTION: Defines user authentication and table permissions for GraphQL access.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\n-- Define a user with access permissions\nDEFINE USER my_user ON DATABASE PASSWORD 'my_password';\nDEFINE ACCESS user ON DATABASE TYPE RECORD\n  SIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\n  SIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )\n  DURATION FOR SESSION 60s, FOR TOKEN 1d;\n\n-- Define a table with permissions\nDEFINE TABLE foo SCHEMAFUL PERMISSIONS FOR select WHERE $auth.email = email;\nDEFINE FIELD email ON foo TYPE string;\nDEFINE FIELD val ON foo TYPE int;\n\n-- Insert data\nCREATE foo:1 SET val = 42, email = \"user@example.com\";\nCREATE foo:2 SET val = 43, email = \"other@example.com\";\n```\n\n----------------------------------------\n\nTITLE: Initializing SurrealDB Client with Runtime-Determined Connection in Rust\nDESCRIPTION: This example shows how to use .init() to create an instance of Surreal<Any>, allowing for runtime determination of the connection type. It uses an environment variable to choose the endpoint or falls back to the memory engine.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/init.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse std::env;\nuse std::sync::LazyLock;\nuse surrealdb::engine::any::Any;\nuse surrealdb::Surreal;\n\nstatic DB: LazyLock<Surreal<Any>> = LazyLock::new(Surreal::init);\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    // Choose an endpoint at runtime using the `DB_ENDPOINT` environment variable\n    // or fallback to the memory engine.\n    let endpoint = env::var(\"DB_ENDPOINT\").unwrap_or_else(|_| \"mem://\".to_owned());\n    DB.connect(endpoint).await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Using array::sort Function in SurrealQL\nDESCRIPTION: The array::sort function sorts array elements in ascending or descending order. The sort direction can be specified using a boolean or string parameter.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_45\n\nLANGUAGE: surql\nCODE:\n```\narray::sort(array) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\narray::sort(array, bool) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\narray::sort(array, string) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::sort([ 1, 2, 1, null, \"something\", 3, 3, 4, 0 ]);\n\n[ null, 0, 1, 1, 2, 3, 3, 4, \"something\" ]\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::sort([1, 2, 1, null, \"something\", 3, 3, 4, 0], false);\n\n[ \"something\", 4, 3, 3, 2, 1, 1, 9, null ]\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::sort([1, 2, 1, null, \"something\", 3, 3, 4, 0], \"asc\");\n\n[ null, 0, 1, 1, 2, 3, 3, 4, \"something\" ]\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::sort([1, 2, 1, null, \"something\", 3, 3, 4, 0], \"desc\");\n\n[ \"something\", 4, 3, 3, 2, 1, 1, 9, null ]\n```\n\n----------------------------------------\n\nTITLE: Complete Authentication Example in Rust\nDESCRIPTION: Full working example demonstrating user authentication, record creation, and permission handling in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/authenticating-users.mdx#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse surrealdb::engine::remote::ws::Client;\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::Surreal;\n\nuse faker_rand::en_us::names::FirstName;\nuse surrealdb::opt::auth::Record;\n\nuse serde::{Deserialize, Serialize};\nuse surrealdb::{Error, RecordId};\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Person {\n    name: String,\n    id: RecordId,\n    created_by: Option<RecordId>,\n}\n\n#[derive(Serialize, Deserialize)]\nstruct Params<'a> {\n    name: &'a str,\n    pass: &'a str,\n}\n\n#[derive(Serialize, Deserialize)]\nstruct RecordUser {\n    name: String,\n    pass: String,\n}\n\nasync fn make_new_user(db: &Surreal<Client>) -> Result<RecordUser, Error> {\n    let name = rand::random::<FirstName>().to_string();\n    let pass = rand::random::<FirstName>().to_string();\n    println!(\"Signing in as user {name} and password {pass}\");\n    let jwt = db\n        .signup(Record {\n            access: \"account\",\n            namespace: \"namespace\",\n            database: \"database\",\n            params: Params {\n                name: &name,\n                pass: &pass,\n            },\n        })\n        .await?\n        .into_insecure_token();\n    println!(\"New user created!\\n\\nName: {name}\\nPassword: {pass}\\nToken: {jwt}\\n\\nTo log in, use this command:\\n\\nsurreal sql --namespace namespace --database database --pretty --token \\\"{jwt}\\\"\\n\");\n    Ok(RecordUser { name, pass })\n}\n\nasync fn get_new_token(db: &Surreal<Client>, user: &RecordUser) -> Result<(), Error> {\n    let jwt = db\n        .signin(Record {\n            access: \"account\",\n            namespace: \"namespace\",\n            database: \"database\",\n            params: Params {\n                name: &user.name,\n                pass: &user.pass,\n            },\n        })\n        .await?\n        .into_insecure_token();\n    println!(\"New token! Sign in with surreal sql --namespace namespace --database database --pretty --token \\\"{jwt}\\\"\\n\");\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let db = Surreal::new::<Ws>(\"localhost:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"namespace\").use_db(\"database\").await?;\n\n    db.query(\n        \"DEFINE TABLE person SCHEMALESS\n        PERMISSIONS FOR \n            CREATE, SELECT WHERE $auth,\n            FOR UPDATE, DELETE WHERE created_by = $auth;\n    DEFINE FIELD name ON TABLE person TYPE string;\n    DEFINE FIELD created_by ON TABLE person VALUE $auth READONLY;\n\n    DEFINE INDEX unique_name ON TABLE user FIELDS name UNIQUE;\n    DEFINE ACCESS account ON DATABASE TYPE RECORD\n\tSIGNUP ( CREATE user SET name = $name, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE name = $name AND crypto::argon2::compare(pass, $pass) )\n\tDURATION FOR TOKEN 15m, FOR SESSION 12h\n;\",\n    )\n    .await?;\n\n    db.query(\"CREATE person SET name = 'Created by root'\")\n        .await?;\n\n    let user = make_new_user(&db).await?;\n\n    get_new_token(&db, &user).await?;\n\n    db.query(\"CREATE person SET name = 'Created by record user'\")\n        .await?;\n\n    println!(\n        \"Two `person` records: {:?}\\n\",\n        db.select::<Vec<Person>>(\"person\").await?\n    );\n\n    db.query(\"DELETE person\").await?;\n\n    println!(\n        \"`person` created by root is still there: {:?}\\n\",\n        db.select::<Vec<Person>>(\"person\").await?\n    );\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: User Sign-in to SurrealDB with C#\nDESCRIPTION: Signs in a user to a specific authentication scope.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\ndb.SignIn(credentials)\n```\n\n----------------------------------------\n\nTITLE: Database Operations in Strict Mode SurrealDB\nDESCRIPTION: Demonstrates the behavior of database operations when running SurrealDB in strict mode, where all definitions must be explicit before use.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/create.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nns/db> CREATE person;\n[\"The namespace 'ns' does not exist\"]\n\nns/db> DEFINE NAMESPACE ns;\n[NONE]\n\nns/db> CREATE person;\n[\"The database 'db' does not exist\"]\n\nns/db> DEFINE DATABASE db;\n[NONE]\n\nns/db> CREATE person;\n[\"The table 'person' does not exist\"]\n\nns/db> DEFINE TABLE person;\n[NONE]\n\nns/db> CREATE person;\n[[{ id: person:c76lfw6n4yb1z2dj9xaj }]]\n```\n\n----------------------------------------\n\nTITLE: Authenticating Namespace User in SurrealDB Python SDK\nDESCRIPTION: This example shows how to authenticate a namespace user. It requires a namespace, username, and password.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/signin.mdx#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nawait db.signin({\n\t\"namespace\": 'surrealdb',\n\t\"username\": 'tobie',\n\t\"password\": 'surrealdb'\n})\n```\n\n----------------------------------------\n\nTITLE: Using In-Memory Database Client\nDESCRIPTION: Example of creating and using a SurrealDB in-memory database client to store and retrieve data\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/dotnet.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing var db = new SurrealDbMemoryClient();\n\nconst string TABLE = \"person\";\n\nvar person = new Person\n{\n    Title = \"Founder & CEO\",\n    Name = new() { FirstName = \"Tobie\", LastName = \"Morgan Hitchcock\" },\n    Marketing = true\n};\nvar created = await db.Create(TABLE, person);\nConsole.WriteLine(ToJsonString(created));\n```\n\n----------------------------------------\n\nTITLE: Finding Distinct Values in SurrealQL (Neo4j Equivalent)\nDESCRIPTION: Shows how to retrieve distinct values in SurrealQL compared to Neo4j's distinct keyword. Uses the array::distinct function with GROUP ALL to eliminate duplicates.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_13\n\nLANGUAGE: SurrealQL\nCODE:\n```\nSELECT array::distinct(name) FROM person GROUP ALL\n```\n\n----------------------------------------\n\nTITLE: Query Method Usage Example in SurrealDB .NET SDK\nDESCRIPTION: Example demonstrating how to execute queries and retrieve results using the Query() method. Shows creation of records and selecting data with parameterized table names.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/writing-surrealql.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Execute query with params\nconst string table = \"person\";\nvar result = await db.Query($\"CREATE person; SELECT * FROM type::table({table});\");\n\n// Get the first result from the first query\nvar created = result.GetValue<Person>(0);\n\n// Get all of the results from the second query\nvar people = result.GetValue<List<Person>>(1);\n```\n\n----------------------------------------\n\nTITLE: Calculating Statistics by Gender and Country in SurrealQL\nDESCRIPTION: Interactive example that groups data by gender and country, calculating the total count and average age for each group. This demonstrates multiple aggregation functions in a single query with multiple grouping criteria.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/group_by.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nSELECT\n\tcount() AS total,\n\tmath::mean(age) AS average_age,\n\tgender,\n\tcountry\nFROM rams\nGROUP BY gender, country;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of SurrealDB Python Insert\nDESCRIPTION: Demonstrates how to insert both single and multiple records into a SurrealDB database using the Python SDK. Shows record insertion with nested objects and boolean values.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/insert.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Insert a single record\ndb.insert('person', {\n\t\"name\": 'Tobie',\n\t\"settings\": {\n\t\t\"active\": True,\n\t\t\"marketing\": True,\n\t},\n})\n\n# Insert multiple records\ndb.insert('person', [\n\t{\n\t\t\"name\": 'Tobie',\n\t\t\"settings\": {\n\t\t\t\"active\": True,\n\t\t\t\"marketing\": True,\n\t\t},\n\t},\n\t{\n\t\t\"name\": 'Jaime',\n\t\t\"settings\": {\n\t\t\t\"active\": True,\n\t\t\t\"marketing\": True,\n\t\t},\n\t},\n])\n```\n\n----------------------------------------\n\nTITLE: Cargo Dependencies Configuration\nDESCRIPTION: Required dependencies configuration in Cargo.toml for SurrealDB and Tokio\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/transaction.mdx#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nsurrealdb = \"2.0.4\"\ntokio = \"1.41.0\"\n```\n\n----------------------------------------\n\nTITLE: Executing Parameterized SurrealQL Query in Java\nDESCRIPTION: Shows how to execute a parameterized SurrealQL query using the queryBind method. This example queries for books with a specific availability status passed as a parameter.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/start.mdx#2025-04-16_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nResponse response = driver.queryBind(\n\t\"SELECT * FROM book WHERE available = $status\",\n\tMap.of(\"status\", true)\n);\n\n// Take the result of the first statement\nValue result = response.take(0);\n```\n\n----------------------------------------\n\nTITLE: Deleting Records in SurrealDB using Rust\nDESCRIPTION: Illustrates how to delete records in SurrealDB using the Rust SDK. It shows deleting all records from a table and deleting a specific record by ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\n// Delete all records from a table\nlet people: Vec<Person> = db.delete(\"person\").await?;\n// Delete a specific record from a table\nlet person: Option<Person> = db.delete((\"person\", \"h5wxrf2ewk8xjxosxtyc\")).await?;\n```\n\n----------------------------------------\n\nTITLE: Complex Graph Relations Query Example\nDESCRIPTION: Demonstrates creating and querying complex relationships between multiple entities using the wildcard operator.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_33\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:hermann_hesse, person:abigail, city:calw, book:demian;\nRELATE person:hermann_hesse->wrote->book:demian SET written_in = d'1919-01-01';\nRELATE person:hermann_hesse->born_in->city:calw;\nRELATE person:abigail->likes->person:hermann_hesse;\n\nSELECT \n\t->(?).* AS what_hesse_did,\n\t<-(?).* AS what_others_did_to_hesse\nFROM person:hermann_hesse;\n```\n\n----------------------------------------\n\nTITLE: Signing In Users with Different Authentication Methods in SurrealDB .NET SDK\nDESCRIPTION: This snippet demonstrates various ways to sign in users using the SurrealDB .NET SDK, including root user, namespace user, database user, and record access authentication. It uses the SignIn method with different auth parameter types.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/authentication.mdx#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Sign in as root user\nawait db.SignIn(new RootAuth { Username = \"root\", Password = \"root\" });\n\n// Sign in using namespace auth\nawait db.SignIn(\n    new NamespaceAuth\n    {\n        Namespace = \"test\", \n        Username = \"johndoe\", \n        Password = \"password123\" \n    }\n);\n\n// Sign in using database auth\nawait db.SignIn(\n    new DatabaseAuth\n    {\n        Namespace = \"test\", \n        Database = \"test\", \n        Username = \"johndoe\", \n        Password = \"password123\" \n    }\n);\n\n// Sign in with Record Access\nvar authParams = new AuthParams\n{\n    Namespace = \"test\",\n    Database = \"test\",\n    Access = \"user\",\n    Email = \"info@surrealdb.com\",\n    Password = \"123456\"\n};\n\nJwt jwt = await db.SignIn(authParams);\n\npublic class AuthParams : ScopeAuth\n{\n\tpublic string? Username { get; set; }\n\tpublic string? Email { get; set; }\n\tpublic string? Password { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Records with ORDER BY Clause in SurrealQL\nDESCRIPTION: Examples of using the ORDER BY clause in SurrealDB to sort query results. This demonstrates sorting randomly, by single fields, multiple fields, with Unicode collation, and with numeric text values.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\n-- Order records randomly\nSELECT * FROM user ORDER BY rand();\n\n-- Order records descending by a single field\nSELECT * FROM song ORDER BY rating DESC;\n\n-- Order records by multiple fields independently\nSELECT * FROM song ORDER BY artist ASC, rating DESC;\n\n-- Order text fields with Unicode collation\nSELECT * FROM article ORDER BY title COLLATE ASC;\n\n-- Order text fields with which include numeric values\nSELECT * FROM article ORDER BY title NUMERIC ASC;\n```\n\n----------------------------------------\n\nTITLE: Using LIMIT with ONLY Clause for Single Record Retrieval\nDESCRIPTION: Examples of using the LIMIT 1 clause with ONLY to ensure that only a single record is returned from a SurrealDB query, which is required for certain operations that expect exactly one result.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_16\n\nLANGUAGE: surql\nCODE:\n```\n-- Record IDs are unique so guaranteed to be no more than 1\nSELECT * FROM ONLY person:jamie;\n\n-- Error because no guarantee that this will return a single record\nSELECT * FROM ONLY person WHERE name = \"Jaime\";\n\n-- Add `LIMIT 1` to ensure that only up to one record will be returned\nSELECT * FROM ONLY person WHERE name = \"Jaime\" LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Conditional Record Alteration with WHERE in SurrealQL\nDESCRIPTION: Example of using the WHERE clause in an UPDATE statement to specify which records to operate on based on a condition.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/where.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE [TABLE_NAME] SET [FIELDS] WHERE [CONDITION] = [VALUE];\n```\n\n----------------------------------------\n\nTITLE: Configuring API Middleware and Headers in SurrealQL\nDESCRIPTION: This example demonstrates how to use DEFINE CONFIG to set up API middleware with a timeout and a custom header for all API endpoints.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE CONFIG API\n    MIDDLEWARE \n        api::timeout(10s),\n        api::res::headers({\n            'Access-Control-Allow-Origin': '*'\n        });\n```\n\n----------------------------------------\n\nTITLE: Defining HMAC Token in SurrealQL\nDESCRIPTION: Example of defining a token using an HMAC algorithm (HS512) for database authorization in SurrealQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/token.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nUSE NS abcum DB app_vitalsense;\n\nDEFINE TOKEN token_name\n  ON DATABASE\n  TYPE HS512\n  VALUE \"sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8\"\n;\n```\n\n----------------------------------------\n\nTITLE: Authenticating Root User in SurrealDB with Python\nDESCRIPTION: Example showing how to authenticate as a root user in SurrealDB using Python client.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/handling-authentication.mdx#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Authenticate with a root user\ndb.signin({\n\t\"database\": 'root',\n\t\"password\": 'surrealdb',\n})\n```\n\n----------------------------------------\n\nTITLE: SPLIT Clause Usage Example with User Emails\nDESCRIPTION: Demonstrates how to create a user record with multiple emails and split the results using the SPLIT clause. Shows both the record creation and the query to split the email array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/split.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE user SET\n    name = \"John Doe\",\n    emails = [\"john@example.com\", \"doe@example.com\"];\n\n\n-- Split the results by each value in the emails array\nSELECT * FROM user SPLIT emails;\n```\n\n----------------------------------------\n\nTITLE: Upserting a Record in SurrealDB (JSON)\nDESCRIPTION: Demonstrates the use of the 'upsert' method to insert or update a record in the 'person' table. If the record doesn't exist, it will be created; otherwise, it will be updated with the new data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"upsert\",\n    \"params\": [\n        \"person:12s0j0bbm3ngrd5c9bx53\",\n        {\n            \"name\": \"John Doe\",\n            \"job\": \"Software developer\",\n        }\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": {\n        \"id\": \"person:12s0j0bbm3ngrd5c9bx53\",\n        \"name\": \"John Doe\",\n        \"job\": \"Software developer\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: User Creation Implementation\nDESCRIPTION: TypeScript implementation for creating a new user in SurrealDB with error handling\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/start.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDb } from \"../utils/surreal\";\nimport { jsonify } from \"surrealdb\";\n\ninterface User {\n  username: string;\n  email: string;\n  password: string;\n}\n\nasync function createUser(): Promise<void> {\n  const db = await getDb();\n  // Check if the database is initialized\n  if (!db) {\n    console.error(\"Database not initialized\");\n    return;\n  }\n  // Create a new user\n  try {\n    const user = await db.create<User>(\"User\", {\n      // User details\n      username: \"newUser\",\n      email: \"user@example.com\",\n      password: \"securePassword\", // Note: Store hashed passwords, not plain text\n    });\n    // Log the created user\n    console.log(\"User created:\", jsonify(user));\n  } catch (err: unknown) {\n    console.error(\"Failed to create user:\", err instanceof Error ? err.message : String(err));\n  } finally {\n    // Close the database connection\n    await db.close();\n  }\n}\n\ncreateUser();\n```\n\n----------------------------------------\n\nTITLE: Deleting All Records from a Table in SurrealQL\nDESCRIPTION: Demonstrates how to delete all records from a table using the DELETE statement. This query returns an empty array by default.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/delete.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Delete all records from a table\nDELETE person;\n```\n\n----------------------------------------\n\nTITLE: Signing In as Root User in SurrealDB Golang SDK\nDESCRIPTION: This example demonstrates how to sign in as a root user using the SurrealDB Golang SDK. It creates an Auth struct with username and password, then calls the SignIn method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/signin.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Sign in to authentication `db` using the root user\n\tauthData := &surrealdb.Auth{\n\t\tUsername: \"root\", // use your setup username\n\t\tPassword: \"root\", // use your setup password\n\t}\n\ttoken, err := db.SignIn(authData)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n```\n\n----------------------------------------\n\nTITLE: Using fetch() for HTTP Requests in SurrealQL Scripting\nDESCRIPTION: Demonstrates how to use the fetch() function to make HTTP requests from SurrealQL scripts. The example retrieves a list of posts and updates a specific post using the JSONPlaceholder API.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/script/built-in-functions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nRETURN function() {\n\t// List all posts\n\tconst posts = fetch('https://jsonplaceholder.typicode.com/posts');\n\n\t// Update post with ID 1\n\tconst updated = fetch('https://jsonplaceholder.typicode.com/posts/1', {\n\t\tmethod: 'PUT',\n\t\tbody: JSON.stringify({\n\t\t\tid: 1,\n\t\t\ttitle: 'foo',\n\t\t\tbody: 'bar',\n\t\t\tuserId: 1,\n\t\t}),\n\t\theaders: {\n\t\t\t'Content-type': 'application/json; charset=UTF-8',\n\t\t},\n\t});\n\n\treturn { posts, updated };\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Records in SurrealDB using JavaScript\nDESCRIPTION: Updates all records in a table or a specific record in SurrealDB. This method is used for modifying existing data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.update<T,U>(thing,data)\n```\n\n----------------------------------------\n\nTITLE: Signing Up a User in SurrealDB using .NET SDK\nDESCRIPTION: This code snippet shows how to sign up a user in SurrealDB using the .NET SDK. It creates an AuthParams object with necessary credentials and uses the SignUp method to register the user.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/authentication.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar authParams = new AuthParams\n{\n    Namespace = \"test\",\n    Database = \"test\",\n    Access = \"user\",\n\t// Also pass any properties required by the access definition\n    Email = \"info@surrealdb.com\",\n    Password = \"123456\"\n};\n\nJwt jwt = await db.SignUp(authParams);\n\npublic class AuthParams : ScopeAuth\n{\n\tpublic string? Username { get; set; }\n\tpublic string? Email { get; set; }\n\tpublic string? Password { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: CONTENT Clause Usage in UPSERT\nDESCRIPTION: Demonstrates using the CONTENT keyword to specify record data using SurrealQL objects.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/upsert.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nUPSERT person CONTENT {\n\tname: 'Tobie',\n\tcompany: 'SurrealDB',\n\tskills: ['Rust', 'Go', 'JavaScript'],\n};\n\nUPSERT person:tobie CONTENT {\n\tname: 'Tobie',\n\tcompany: 'SurrealDB',\n\tskills: ['Rust', 'Go', 'JavaScript'],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Objects in SurrealQL\nDESCRIPTION: Demonstrates creating a person record with nested objects containing various data types including numbers, strings, nested objects, and arrays.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/objects.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person SET metadata = {\n\tinterest_level: 83.67,\n\tinformation: {\n\t\tage: 23,\n\t\tgender: 'm',\n\t},\n\tmarketing: true,\n\tactivities: [\n\t\t\"clicked link\",\n\t\t\"contact form\",\n\t\t\"read email\",\n\t\t\"viewed website\",\n\t\t\"viewed website\",\n\t\t\"viewed website\",\n\t\t\"read email\",\n\t]\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up User Authentication in SurrealDB\nDESCRIPTION: Shows how to define user access controls including signup, signin, and unique name constraints using indexes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\n    DEFINE INDEX IF NOT EXISTS unique_name ON TABLE user FIELDS name UNIQUE;\n    DEFINE ACCESS IF NOT EXISTS account ON DATABASE TYPE RECORD\n\tSIGNUP ( CREATE user SET name = $name, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE name = $name AND crypto::argon2::compare(pass, $pass) )\n\tDURATION FOR TOKEN 15m, FOR SESSION 12h\n```\n\n----------------------------------------\n\nTITLE: Fetching Related Records in SurrealQL\nDESCRIPTION: This snippet demonstrates how to use the FETCH clause to retrieve a person along with their related posts in a single query. It's useful for efficiently gathering data linked through relationships without performing multiple separate queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/fetch.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM person FETCH posts;\n```\n\n----------------------------------------\n\nTITLE: Selecting Records with Python SDK\nDESCRIPTION: Demonstrates how to select all records from a table or a specific record using the select() method. It accepts a table name or RecordID as an argument.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/data-maniplulation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Select all records from a table\npeople = db.select('person')\n\n# Select a specific record from a table\nperson = db.select(RecordID('person', 'h5wxrf2ewk8xjxosxtyc'))\n```\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM $thing;\n```\n\n----------------------------------------\n\nTITLE: Implementing main function for SurrealDB GUI application in Rust\nDESCRIPTION: Initializes the application by setting up communication channels between the GUI thread and database thread. Creates the database connection, configures the database schema, and starts the Egui application.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nfn main() -> Result<(), Error> {\n    let (command_sender, command_receiver) = channel();\n    let (response_sender, response_receiver) = channel();\n\n    std::thread::spawn(|| -> Result<(), Error> {\n        let rt = tokio::runtime::Runtime::new()?;\n\n        rt.block_on(async {\n\n            let client = Surreal::new::<Ws>(\"localhost:8000\").await?;\n\n            let db = Database {\n                client,\n                command_receiver,\n                response_sender\n            };\n\n            db.signin(Root {\n                username: \"root\",\n                password: \"root\",\n            })\n            .await?;\n\n            db.use_ns(\"test\").use_db(\"test\").await?;\n\n            db.query(\n                \"    DEFINE TABLE person SCHEMALESS\n                PERMISSIONS FOR\n                    CREATE, SELECT WHERE $auth,\n                    FOR UPDATE, DELETE WHERE created_by = $auth;\n            DEFINE FIELD name ON TABLE person TYPE string;\n            DEFINE FIELD created_by ON TABLE person VALUE $auth READONLY;\n\n            DEFINE INDEX unique_name ON TABLE user FIELDS name UNIQUE;\n            DEFINE ACCESS account ON DATABASE TYPE RECORD\n            SIGNUP ( CREATE user SET name = $name, pass = crypto::argon2::generate($pass) )\n            SIGNIN ( SELECT * FROM user WHERE name = $name AND crypto::argon2::compare(pass, $pass) )\n            DURATION FOR TOKEN 15m, FOR SESSION 12h\n        ;\",\n            )\n            .await?;\n\n        loop {\n            if let Ok(command) = db.command_receiver.try_recv() {\n                match db.handle_command(command).await {\n                    Ok(s) => db.response_sender.send(s)?,\n                    Err(e) => db.response_sender.send(e.to_string())?\n                }\n            }\n        }\n        })\n    });\n\n    let app = SurrealDbApp {\n        input: String::new(),\n        results: String::new(),\n        command_sender,\n        response_receiver,\n    };\n\n    let native_options = eframe::NativeOptions::default();\n    let _ = eframe::run_native(\n        \"SurrealDB App\",\n        native_options,\n        Box::new(|_cc| Ok(Box::new(app))),\n    );\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Hybrid Record Creation with Complex IDs\nDESCRIPTION: Demonstrates creating records with metadata in the ID and sensor data in the record content, including querying example.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/time-series.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nCREATE sensor_readings:[time::now(), location:Longleat_House,sensor:ARF8394AAA] \nCONTENT {\n    temperture_celsius: 28.4,\n    humidity_percent: 55\n};\n-- Select all the temperature readings from the start until now \n-- from a specific sensor\nSELECT temperture_celsius FROM sensor_readings:[\n\tNONE,\n\tsensor:ARF8394AAA,\n]..=[\n\ttime::now(),\n\tsensor:ARF8394AAA,\n];\n```\n\n----------------------------------------\n\nTITLE: Nested IF ELSE Conditions in SurrealQL\nDESCRIPTION: Example of nested IF ELSE conditions in SurrealQL, demonstrating complex conditional logic.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/ifelse.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nIF $access = \"admin\" THEN\n    SELECT * FROM admin_data WHERE access_level = 'full'\nELSE IF $access = \"user\" THEN\n    IF $auth.role = \"premium\" THEN\n        IF $auth.subscription_status = \"active\" THEN\n            SELECT * FROM premium_user_data WHERE active = 1\n        ELSE IF $auth.subscription_status = \"trial\" THEN\n            SELECT * FROM trial_user_data\n        ELSE\n            SELECT * FROM basic_user_data\n        END\n    ELSE IF $auth.role = \"standard\" THEN\n        SELECT * FROM standard_user_data WHERE region = 'US'\n    ELSE IF $auth.role = \"standard\" AND $auth.subscription_status = \"active\" THEN\n        SELECT * FROM standard_user_data WHERE region = 'EU'\n    ELSE\n        SELECT * FROM unauthorized_user_data\n    END\nELSE\n    SELECT * FROM unknown_access_data\nEND;\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Queries - Python SurrealDB\nDESCRIPTION: Shows practical examples of implementing live queries in both synchronous and asynchronous contexts. The example demonstrates listening for changes on a 'person' table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/live.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndb.live('person')\n\n# Async\nawait db.live('person')\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Query for Delete Operation\nDESCRIPTION: Shows the underlying SurrealQL query executed by the 'delete' method in the SurrealDB JavaScript SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/data-maniplulation.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\nDELETE $thing;\n```\n\n----------------------------------------\n\nTITLE: Defining USE Statement Syntax in SurrealQL\nDESCRIPTION: This snippet shows the syntax for the USE statement in SurrealQL. It allows specifying a namespace, a database, or both.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/use.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nUSE [ NS @ns ] [ DB @db ];\n```\n\n----------------------------------------\n\nTITLE: User Signup in SurrealDB with Python SDK (v1.x)\nDESCRIPTION: This snippet shows how to sign up a user using the 'user' scope in SurrealDB v1.x with the Python SDK. It includes the required namespace, database, scope, and user credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/handling-authentication.mdx#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndb.signup({\n\t\"namespace\": 'surrealdb',\n\t\"database\": 'docs',\n\t\"scope\": 'user',\n\n\t# Also pass any properties required by the scope definition\n\t\"email\": 'info@surrealdb.com',\n\t\"password\": '123456'\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Index Usage in SurrealDB SELECT Statement\nDESCRIPTION: Illustrates how creating an index on the 'email' field affects the execution plan of a SELECT statement, showing the difference in query optimization.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_24\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE INDEX fast_email ON TABLE person FIELDS email;\n\nCREATE person:tobie SET\n\tname = \"Tobie\",\n\taddress = \"1 Bagshot Row\",\n\temail = \"tobie@surrealdb.com\";\n\nSELECT * FROM person WHERE email='tobie@surrealdb.com' EXPLAIN;\nSELECT * FROM person WHERE email='tobie@surrealdb.com' EXPLAIN FULL;\n```\n\n----------------------------------------\n\nTITLE: SurrealDB V2.x SignUp Implementation\nDESCRIPTION: Example of signing up a user using V2.x SDK version. Shows how to create authentication data with username, password, namespace, database, access level, and email.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/signup.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Sign in to authentication `db` using the root user\n\tauthData := &surrealdb.Auth{\n\t\tUsername: \"root\", // use your setup username\n\t\tPassword: \"root\", // use your setup password\n        Namespace = \"test\", \n        Database = \"test\", \n        Access = \"user\",\n        Email = \"info@surrealdb.com\",\n        Password = \"123456\"\n\t}\n\ttoken, err := db.SignUp(authData)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN Clause Syntax Definition\nDESCRIPTION: Basic syntax definition for the EXPLAIN clause, showing optional FULL keyword for detailed output\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/explain.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\n@query EXPLAIN [FULL]\n```\n\n----------------------------------------\n\nTITLE: Query Execution Without Index\nDESCRIPTION: Example showing query execution plan when querying an unindexed email field, demonstrating table iteration\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/explain.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:tobie SET\n\tname = \"Tobie\",\n\taddress = \"1 Bagshot Row\",\n\temail = \"tobie@surrealdb.com\";\n\nSELECT * FROM person WHERE email='tobie@surrealdb.com' EXPLAIN;\nSELECT * FROM person WHERE email='tobie@surrealdb.com' EXPLAIN FULL;\n```\n\n----------------------------------------\n\nTITLE: Exporting Database Functions in C# with SurrealDB SDK\nDESCRIPTION: This example demonstrates how to use the Export method to export only database functions. It creates an ExportOptions object with specific settings and then calls the Export method with these options.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/export.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new ExportOptions\n{\n    Users = false,\n    Accesses = false,\n    Params = false,\n    Functions = true,\n    Users = false,\n    Versions = false,\n    Tables = false,\n    Records = false,\n};\n\nstring schema = await db.Export(options);\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Person Record with Method Chaining\nDESCRIPTION: Demonstrates creating a person record and using method chaining to transform data using the uppercase() function on string fields\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person CONTENT {\n    name: \"John Doe\",\n    age: 30,\n    address: {\n      city: \"New York\",\n      country: \"USA\"\n    }\n};\n```\n\nLANGUAGE: surql\nCODE:\n```\nSELECT name.uppercase() FROM person;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of LiveTable Method in SurrealDB .NET SDK\nDESCRIPTION: A practical example showing how to initialize and use a live query to monitor changes to records in a 'person' table. The code creates a live query instance that can be consumed to receive real-time updates.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/live_table.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait using var liveQuery = await db.LiveTable<Person>(\"person\");\n\n// Consume the live query...\n```\n\n----------------------------------------\n\nTITLE: Defining UPDATE Statement Syntax in SurrealQL\nDESCRIPTION: This code snippet shows the syntax for the UPDATE statement in SurrealQL. It includes optional clauses for specifying content, conditions, return values, timeout, and parallel execution.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE [ ONLY ] @targets\n\t[ CONTENT @value\n\t  | MERGE @value\n\t  | PATCH @value\n\t  | REPLACE @value\n\t  | [ SET @field = @value, ... | UNSET @field, ... ]\n\t]\n\t[ WHERE @condition ]\n\t[ RETURN NONE | RETURN BEFORE | RETURN AFTER | RETURN DIFF | RETURN @statement_param, ... | RETURN VALUE @statement_param ]\n\t[ TIMEOUT @duration ]\n\t[ PARALLEL ]\n;\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with Optional Arguments in SurrealQL\nDESCRIPTION: Illustrates how to create a function with optional arguments using the option<T> type, allowing arguments to be omitted when invoking the function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/function.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FUNCTION fn::last_option($required: number, $optional: option<number>) {\n\tRETURN {\n\t\trequired_present: type::is::number($required),\n\t\toptional_present: type::is::number($optional),\n\t}\n};\n\nRETURN fn::last_option(1, 2);\n{\n\trequired_present: true,\n\toptional_present: true,\n};\n\nRETURN fn::last_option(1);\n{\n\trequired_present: true,\n\toptional_present: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Using $this Parameter to Access the Entire Record in SurrealDB\nDESCRIPTION: Shows how to use the $this parameter to access the entire record within a field definition. This example creates a field that contains a copy of the full record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_22\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD extra_self ON TABLE person VALUE $this;\nCREATE person:one SET name = \"Little person\", age = 6;\n```\n\n----------------------------------------\n\nTITLE: Live Query Notification Structure in SurrealDB\nDESCRIPTION: Structure of a live notification sent to clients when changes occur on a watched table. The notification includes the action type (CREATE, UPDATE, or DELETE), the live query's UUID, and the affected record data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"action\": \"CREATE\",\n        \"id\": \"0189d6e3-8eac-703a-9a48-d9faa78b44b9\",\n        \"result\": {\n            \"id\": \"person:8s0j0bbm3ngrd5c9bx53\",\n            \"name\": \"John\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Shortest Path in SurrealDB Graph\nDESCRIPTION: Demonstrates how to find the shortest path between two nodes in a graph using the +shortest algorithm in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_35\n\nLANGUAGE: surql\nCODE:\n```\nperson:you.{..+shortest=person:star}->knows->person;\n```\n\n----------------------------------------\n\nTITLE: SCHEMAFULL Table Definition in SurrealQL\nDESCRIPTION: Example of creating a SCHEMAFULL table with field definitions and constraints\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/table.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE user SCHEMAFULL;\n\nDEFINE FIELD firstName ON TABLE user TYPE string;\nDEFINE FIELD lastName ON TABLE user TYPE string;\nDEFINE FIELD email ON TABLE user TYPE string\n  ASSERT string::is::email($value);\nDEFINE INDEX userEmailIndex ON TABLE user COLUMNS email UNIQUE;\n\nCREATE user CONTENT {\n    firstName: 'Tobie',\n    lastName: 'Hitchcock',\n    email: 'Tobie.Hitchcock@surrealdb.com',\n    photoURI: 'photo/yxCFi22Jw2.webp'\n};\n\nSELECT * FROM user\n```\n\n----------------------------------------\n\nTITLE: Creating Records with SurrealDB Python SDK\nDESCRIPTION: The 'create' method is used to create new records in the SurrealDB database. It can create records with random IDs or specific IDs, and allows setting initial data for the record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.create(thing, data)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Create a record with a random ID\nperson = db.create('person')\n\n# Create a record with a specific ID\nperson = db.create(RecordID('person', 'tobie'), {\n\t\"name\": 'Tobie',\n\t\"settings\": {\n\t\t\"active\": True,\n\t\t\"marketing\": True,\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Using WITH Clause for Index Control in SurrealDB SELECT Statement\nDESCRIPTION: Demonstrates how to use the WITH clause to manually control index usage in SELECT statements, either forcing specific index usage or table iteration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_25\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM person\nWITH INDEX ft_email\nWHERE\n\temail = 'tobie@surrealdb.com' AND\n\tcompany = 'SurrealDB';\n\nSELECT name FROM person WITH NOINDEX WHERE job = 'engineer' AND gender = 'm';\n```\n\n----------------------------------------\n\nTITLE: Registering SurrealDB services in ASP.NET Core\nDESCRIPTION: C# code for Program.cs that configures the application and registers SurrealDB services using the AddSurreal() extension method, which injects ISurrealDbClient and SurrealDbClient as singletons.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/dependency-injection.mdx#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nvar services = builder.Services;\nvar configuration = builder.Configuration;\n\nservices.AddControllers();\nservices.AddEndpointsApiExplorer();\nservices.AddSwaggerGen();\nservices.AddSurreal(configuration.GetConnectionString(\"SurrealDB\"));\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n\tapp.UseSwagger();\n\tapp.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Basic DEFINE EVENT Syntax in SurrealQL\nDESCRIPTION: The fundamental syntax structure for defining events in SurrealDB, showing all possible clauses including OVERWRITE, IF NOT EXISTS, WHEN, THEN, and COMMENT.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/event.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE EVENT [ OVERWRITE | IF NOT EXISTS ] @name ON [ TABLE ] @table [ WHEN @expression ] THEN @expression [ COMMENT @string ]\n```\n\n----------------------------------------\n\nTITLE: Example of Upserting with Merge in SurrealDB using Rust\nDESCRIPTION: Provides a complete example of using .upsert().merge() to update a record in the 'person' table by merging new data with existing data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/upsert.mdx#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::Surreal;\n\n#[derive(Debug, Serialize, Deserialize, Default)]\nstruct Person {\n    name: String,\n    company: Option<String>,\n    active: Option<bool>,\n    marketing: Option<bool>,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Settings {\n    active: bool,\n    marketing: bool,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = Surreal::new::<Ws>(\"127.0.0.1:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    // upsert a single record\n    let person: Option<Person> = db\n        .upsert((\"person\", \"tobie\"))\n        .merge(Person {\n            name: \"Tobie\".into(),\n            ..Default::default()\n        })\n        .await?;\n\n    dbg!(person);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Init Pattern with Static Database Connection\nDESCRIPTION: Example showing how to use the DB static singleton pattern to ensure a single database instance is available across a Rust application using LazyLock.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nstatic DB: LazyLock<Surreal<Client>> = LazyLock::new(Surreal::init);\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    // Connect to the database\n    DB.connect::<Wss>(\"cloud.surrealdb.com\").await?;\n    // Select a namespace + database\n    DB.use_ns(\"test\").use_db(\"test\").await?;\n    // Create or update a specific record\n    let tobie: Option<Record> = DB\n        .update((\"person\", \"tobie\"))\n        .content(Person { name: \"Tobie\" })\n        .await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Live Query with SurrealDB Python SDK\nDESCRIPTION: The live() method initiates a live query for a specified table name. It takes two arguments: table (required) and diff (optional). When diff is set to true, notifications include JSON Patch objects instead of entire records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/streaming.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.live('person')\n\n# Async\nawait db.live('person')\n```\n\n----------------------------------------\n\nTITLE: Inserting Records with Custom Return Fields in SurrealQL\nDESCRIPTION: These examples show how to return specific fields, modify output with ad-hoc fields, and return the value of a single field using the RETURN clause in INSERT statements.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/insert.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO person {\n    age: 46,\n    username : \"john-smith\",\n    interests : ['skiing', 'music'] }\nRETURN\n    age,\n    interests,\n    age + 1 AS age_next_year;\n\nINSERT INTO planet [\n\t{\n\t\tname: 'Venus',\n        surface_temp: 462,\n        temp_55_km_up: 27\n\t},\n\t{\n\t\tname: 'Earth',\n        surface_temp: 15,\n        temp_55_km_up: -55\n\t}\n] RETURN VALUE temp_55_km_up;\n```\n\n----------------------------------------\n\nTITLE: Using Value Patch Function in SurrealQL\nDESCRIPTION: Demonstrates the value::patch function which applies JSON Patch operations to modify a value. Takes a value and an array of patch objects as parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/value.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nvalue::patch(value, patch: array<object>) -> value\n```\n\nLANGUAGE: surql\nCODE:\n```\nLET $company = {\n    company: 'SurrealDB',\n    latest_version: '1.5.4'\n};\n\n$company.patch([{\n\t\t'op': 'replace',\n\t\t'path': 'latest_version',\n\t\t'value': '2.0'\n}]);\n```\n\n----------------------------------------\n\nTITLE: Creating Static SurrealDB Client with WebSocket Connection in Rust\nDESCRIPTION: This example demonstrates how to create a global, static instance of the SurrealDB client using .init() and then connect to a WebSocket endpoint. It uses LazyLock for thread-safe initialization.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/init.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse std::sync::LazyLock;\nuse surrealdb::engine::remote::ws::{Client, Ws};\nuse surrealdb::Surreal;\n\nstatic DB: LazyLock<Surreal<Client>> = LazyLock::new(Surreal::init);\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    // Connect to the database\n    DB.connect::<Ws>(\"127.0.0.1:8000\").await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Record Links in SurrealDB\nDESCRIPTION: This snippet shows how to query a user record along with its linked comments using record links. It retrieves the user's name and the details of the comments associated with them.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nSELECT \n    name, \n    comments.{ created_at, text }\nFROM user;\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication in SurrealDB with Python\nDESCRIPTION: Example showing how to authenticate using a JWT token in SurrealDB using Python client.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/handling-authentication.mdx#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndb.authenticate('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTdXJyZWFsREIiLCJpYXQiOjE1MTYyMzkwMjIsIm5iZiI6MTUxNjIzOTAyMiwiZXhwIjoxODM2NDM5MDIyLCJOUyI6InRlc3QiLCJEQiI6InRlc3QiLCJTQyI6InVzZXIiLCJJRCI6InVzZXI6dG9iaWUifQ.N22Gp9ze0rdR06McGj1G-h2vu6a6n9IVqUbMFJlOxxA')\n```\n\n----------------------------------------\n\nTITLE: Defining Record Access with Refresh Token in SurrealDB\nDESCRIPTION: This snippet demonstrates how to define a record access method that includes a refresh token. It sets up signup and signin procedures, and configures durations for the grant, token, and session.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/record.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS user ON DATABASE TYPE RECORD\n\tSIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )\n\tWITH REFRESH\n\tDURATION FOR GRANT 15d, FOR TOKEN 1m, FOR SESSION 12h\n;\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Sets in SurrealQL\nDESCRIPTION: This example demonstrates defining a set field for a traveler table to store visited countries. When adding items to a set, duplicates are automatically removed, as shown by adding 'country:uk' twice.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/sets.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD visited ON TABLE traveler TYPE set<record<country>>;\nCREATE traveler:one SET visited = [country:canada, country:usa, country:korea, country:japan];\n-- Traveler comes back from a trip\nUPDATE traveler:one SET visited += country:uk;\n-- And again\nUPDATE traveler:one SET visited += country:uk;\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\\n\\t{\\n\\t\\tid: traveler:one,\\n\\t\\tvisited: [\\n\\t\\t\\tcountry:canada,\\n\\t\\t\\tcountry:usa,\\n\\t\\t\\tcountry:korea,\\n\\t\\t\\tcountry:japan,\\n\\t\\t\\tcountry:uk\\n\\t\\t]\\n\\t}\\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Person Record Using SurrealDB Golang SDK\nDESCRIPTION: This example demonstrates how to use the Create method to insert a new person record into the 'persons' table. It includes setting name, surname, and location data, with error handling.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/create.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Create an entry\n\tperson1, err := surrealdb.Create[Person](db, models.Table(\"persons\"), map[interface{}]interface{}{\n\t\t\"Name\":     \"John\",\n\t\t\"Surname\":  \"Doe\",\n\t\t\"Location\": models.NewGeometryPoint(-0.11, 22.00),\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"Created person with a map: %+v\\n\", person1)\n```\n\n----------------------------------------\n\nTITLE: Optimized UPDATE Query Using Subquery in SurrealDB\nDESCRIPTION: SurrealQL query demonstrating how to improve UPDATE performance by using a subquery to leverage indexes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/performance-best-practices.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE (SELECT id FROM user WHERE age < 18)\nSET adult = false;\n```\n\n----------------------------------------\n\nTITLE: Using FROM Clause with Different Target Types in SurrealDB\nDESCRIPTION: Examples of using the FROM clause with various target types including multiple tables, variables, record identifiers, lists, objects, and subqueries. The FROM clause specifies the source from which to select data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n-- Selects all records from both 'user' and 'admin' tables.\nSELECT * FROM user, admin;\n\n-- Selects all records from the table named in the variable '$table',\n-- but only if the 'admin' field of those records is true.\n-- Equivalent to 'SELECT * FROM user WHERE admin = true'.\nLET $table = \"user\";\nSELECT * FROM type::table($table) WHERE admin = true;\n\n-- Selects a single record from:\n-- * the table named in the variable '$table',\n-- * and the identifier named in the variable '$id'.\n-- This query is equivalent to 'SELECT * FROM user:admin'.\nLET $table = \"user\";\nLET $id = \"admin\";\nSELECT * FROM type::thing($table, $id);\n\n-- Selects all records for specific users 'tobie' and 'jaime',\n-- as well as all records for the company 'surrealdb'.\nSELECT * FROM user:tobie, user:jaime, company:surrealdb;\n\n-- Selects records from a list of identifiers. The identifiers can be numerical,\n-- string, or specific records such as 'person:lrym5gur8hzws72ux5fa'.\nSELECT * FROM [3648937, \"test\", person:lrym5gur8hzws72ux5fa, person:4luro9170uwcv1xrfvby];\n\n-- Selects data from an object that includes a 'person' key,\n-- which is associated with a specific person record, and an 'embedded' key set to true.\nSELECT * FROM { person: person:lrym5gur8hzws72ux5fa, embedded: true };\n\n-- This command first performs a subquery, which selects all 'user' records and adds a\n-- computed 'adult' field that is true if the user's 'age' is 18 or older.\n-- The main query then selects all records from this subquery where 'adult' is true.\nSELECT * FROM (SELECT age >= 18 AS adult FROM user) WHERE adult = true;\n```\n\n----------------------------------------\n\nTITLE: Selecting Records in SurrealDB Rust SDK\nDESCRIPTION: Shows how to select records from a table or a specific record using the select() method. This method can retrieve all records from a table or a single record by ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n// Select all records from a table\nlet people: Vec<Person> = db.select(\"person\").await?;\n// Select a specific record from a table\nlet person: Option<Person> = db.select((\"person\", \"h5wxrf2ewk8xjxosxtyc\")).await?\n```\n\n----------------------------------------\n\nTITLE: Inserting Relations in SurrealDB using JavaScript\nDESCRIPTION: Inserts one or multiple relations into the SurrealDB database. This method is specifically for creating relationships between records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.insertRelation<T,U>(thing,data)\n```\n\n----------------------------------------\n\nTITLE: Using MERGE Clause for Partial Updates in SurrealQL\nDESCRIPTION: This snippet shows how to use the MERGE clause to update specific fields in records. It demonstrates updating all records and then a specific record with new settings.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/update.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\n-- Update certain fields on all records\nUPDATE person MERGE {\n\tsettings: {\n\t\tmarketing: true,\n\t},\n};\n\n-- Update certain fields on a specific record\nUPDATE person:tobie MERGE {\n\tsettings: {\n\t\tmarketing: true,\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Access with JWKS in SurrealQL\nDESCRIPTION: Shows how to configure JWT authentication using a JSON Web Key Set (JWKS) URL, which allows key rotation without service disruption and enhances security by fetching verification keys from an authoritative source.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS token ON DATABASE TYPE RECORD WITH JWT\nURL \"https://example.com/.well-known/jwks.json\";\n```\n\n----------------------------------------\n\nTITLE: Connecting to Surreal Cloud with Python SDK\nDESCRIPTION: Example of connecting to a Surreal Cloud instance using the Python SDK. This code shows how to establish a connection, authenticate with root credentials, select a namespace and database, and perform basic CRUD operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-cloud/connect/sdk.mdx#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom surrealdb import Surreal, RecordID\n# Open a connection\nwith Surreal(url=\"wss://cloud-demo-06a98cg0u1qs3d4mnl774mlq8k.aws-use1.surreal.cloud\") as db:\n# Select a namespace and database\ndb.use(\"Cloud Namespace\", \"Cloud Database\")\n# Authenticate\ndb.signin(username=\"<created root user>\", password=\"<created root password>\")\n# Create a record\ndb.create(RecordID(\"grocery\", \"1\"), {\n\t\"name\": \"Banana\",\n\t\"quantity\": 10,\n})\n# Select a specific record\nprint(db.select(RecordID(\"grocery\", \"1\")))\n```\n\n----------------------------------------\n\nTITLE: Example Usage of New() Method for SurrealDB Connection in Golang\nDESCRIPTION: These examples demonstrate how to use the `.New()` method to connect to both local and remote SurrealDB endpoints. The first two examples show basic usage, while the third example includes error handling.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/new.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Connect to a local endpoint\nsurrealdb.New(\"ws://localhost:8000\");\n// Connect to a remote endpoint\nsurrealdb.New(\"ws://cloud.surrealdb.com\");\n```\n\nLANGUAGE: go\nCODE:\n```\ndb, err := surrealdb.New(\"ws://localhost:8000\")\n\tif err != nil {\n\t\tpanic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SurrealQL Queries in SurrealDB Rust SDK\nDESCRIPTION: Demonstrates how to execute SurrealQL queries using the query() method. This method allows running multiple statements and binding variables.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n// Run some queries\nlet sql = \"\n    CREATE person;\n    SELECT * FROM type::table($table);\n\";\nlet mut result = db\n    .query(sql)\n    .bind((\"table\", \"person\"))\n    .await?;\n// Get the first result from the first query\nlet created: Option<Person> = result.take(0)?;\n// Get all of the results from the second query\nlet people: Vec<Person> = result.take(1)?\n```\n\n----------------------------------------\n\nTITLE: Example of Upserting with Patch in SurrealDB using Rust\nDESCRIPTION: Provides a complete example of using .upsert().patch() to update a record in the 'person' table by applying JSON Patch operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/upsert.mdx#2025-04-16_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::opt::PatchOp;\nuse surrealdb::sql::Datetime;\nuse surrealdb::Surreal;\n\n#[derive(Debug, Serialize, Deserialize, Default)]\nstruct Person {\n    name: String,\n    company: Option<String>,\n    settings: Option<Settings>,\n    created_at: Option<Datetime>,\n    tags: Option<Vec<String>>,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Settings {\n    active: bool,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = Surreal::new::<Ws>(\"127.0.0.1:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    // upsert a record with a specific ID\n    let person: Option<Person> = db\n        .upsert((\"person\", \"tobie\"))\n        .patch(PatchOp::replace(\"/settings/active\", false))\n        .patch(PatchOp::add(\"/tags\", &[\"developer\", \"engineer\"]))\n        .patch(PatchOp::remove(\"/company\"))\n        .await?;\n    dbg!(person);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: SurrealQL Query Example Usage\nDESCRIPTION: Example demonstrating how to create a person record and select from a table using variables.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/writing-surrealql.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Assign the variable on the connection\ndb.query(\n\t'CREATE person SET name = \"John\"; SELECT * FROM type::table($tb);',\n\t{ \"tb\": 'person' }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing subscribeLive Callback in TypeScript\nDESCRIPTION: This example demonstrates how to use the subscribeLive method to process live notifications from a SurrealDB query. It handles different action types and processes the result accordingly.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/subscribelive.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.subscribeLive(\n\tqueryUuid,\n\t// The callback function takes an object with the \"action\" and \"result\" properties\n\t( action, result ) => {\n\t\t// action can be: \"CREATE\", \"UPDATE\", \"DELETE\" or \"CLOSE\"\n\t    if (action === 'CLOSE') return;\n\n\t\t// result contains either the entire record, or a set of JSON patches when diff mode is enabled\n\t\tprocessSomeLiveQueryUpdate(result);\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Rocket Server with SurrealDB Routes\nDESCRIPTION: The main server initialization function that sets up Rocket's HTTP server on port 8080 and mounts all the defined routes for the API. This is the entry point for the application.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n#[launch]\npub async fn rocket() -> _ {\n    std::env::set_var(\"ROCKET_PORT\", \"8080\");\n    init().await.expect(\"Something went wrong, shutting down\");\n    rocket::build().mount(\n        \"/\",\n        routes![\n            routes::create_person,\n            routes::read_person,\n            routes::update_person,\n            routes::delete_person,\n            routes::list_people,\n            routes::paths,\n            routes::make_new_user,\n            routes::get_new_token,\n            routes::session\n        ],\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Insert Method Example Usage in SurrealDB .NET SDK\nDESCRIPTION: Demonstrates how to insert multiple Post records into a SurrealDB database using the .NET SDK. The example shows creating a List of Post objects with specific properties and inserting them into the 'post' table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/insert.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar posts = new List<Post>\n{\n    new Post\n    {\n        Id = (\"post\", \"First\"),\n        Title = \"An article\",\n        Content = \"This is the first article\"\n    },\n    new Post\n    {\n        Id = (\"post\", \"Second\"),\n        Title = \"An article\",\n        Content = \"This is the second article\"\n    }\n};\n\nawait db.Insert(\"post\", posts);\n```\n\n----------------------------------------\n\nTITLE: Updating Records with SurrealDB Java SDK\nDESCRIPTION: Shows how to update existing records using the SurrealDB Java SDK. Demonstrates updating a single record by its ID and updating all records in a table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/start.mdx#2025-04-16_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Modify an existing book record\nexisting.available = false;\n\n// Update the book record\nBook updated = driver.update(Book.class, existing.id, UpType.MERGE, existing);\n\n// Print the book status\nSystem.out.println(\"New availability: \" + updated.available);\n\n// Create an empty book instance\nBook update = new Book();\n\nupdate.available = true;\n\n// Update all book records\nIterator<Book> updated = driver.update(Book.class, \"book\", UpType.MERGE, update);\n```\n\n----------------------------------------\n\nTITLE: Batch Creating Versioned Records in SurrealDB\nDESCRIPTION: Shows how to create multiple records with different versions and query them based on timestamp. Demonstrates counting records for specific versions versus total records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/create.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nCREATE |user:10| VERSION d\"2020-09-09\";\n\n[[{ id: user:rtbjoqv1xe9wnxjx5aro }, { id: user:tkik878q8uoddvuucu0a }, { id: user:rcnywgogvlipv3tb8qut }, { id: user:30ynx82x52ff77dxzv1i }, { id: user:59mxi0xosi3im5ccbx8l }, { id: user:nolu7yreqs4e5m7255oa }, { id: user:u384ycj1d2esi3yrasli }, { id: user:n4xnrq98ookevhmdd7d2 }, { id: user:5j5ujfu4dokcpdk51qa8 }, { id: user:jiqmlvrgafeorr50nvn9 }]]\n\nCREATE |user:10| VERSION d\"2020-09-10\";\n[[{ id: user:ze98ow4bzdcndzc5nlqj }, { id: user:gjqu2uh3wnp1cpjg1unt }, { id: user:17bxpjl4ptbxv9k2ghmt }, { id: user:fmqqeajf52neg4c7oaoq }, { id: user:bfn45ewsg86auvekeuz0 }, { id: user:834yq1tyatwopb4726mj }, { id: user:veehoua4cu65ff4wc8pf }, { id: user:y3az4pizc0ddpruixw6g }, { id: user:xrn6eqrtyqgg8cgpm9zp }, { id: user:s06acf74rsnvhvim3ys5 }]]\n\nRETURN count(SELECT * FROM user VERSION d\"2020-09-09\"); -- returns 10\n[10]\n\nRETURN count(SELECT * FROM user); -- returns 21\n[21]\n```\n\n----------------------------------------\n\nTITLE: ACCESS REVOKE Syntax in SurrealQL\nDESCRIPTION: The syntax for the REVOKE clause of the ACCESS statement, used to revoke grants created with a specific access method so they can no longer be used for authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/access.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nACCESS @name [ ON [ ROOT | NAMESPACE | DATABASE ] ]\n\tREVOKE [ GRANT @id | ALL | WHERE @expression ] \n]\n```\n\n----------------------------------------\n\nTITLE: Authenticating with JWT Token in SurrealDB .NET SDK\nDESCRIPTION: This code snippet shows how to authenticate a connection using a JWT token in the SurrealDB .NET SDK. It uses the Authenticate method, which takes a JWT object as an argument.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/authentication.mdx#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Authenticate(jwt)\n```\n\n----------------------------------------\n\nTITLE: Updating User Records with SurrealDB in TypeScript\nDESCRIPTION: Demonstrates how to update user information in SurrealDB using the update method. The code includes type definitions and error handling for updating specific user fields like username and email using a RecordId.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/start.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDb } from \"../utils/surreal\";\nimport { jsonify, RecordId } from \"surrealdb\";\n\ninterface User {\n    id: RecordId;\n    username: string;\n    password: string;\n    email: string;\n}\n\nexport async function updateUser() {\n  const db = await getDb();\n  if (!db) {\n    console.error(\"Database not initialized\");\n    return;\n  }\n  try {\n    const updatedUser = await db.update(new RecordId(\"User\", \"nsg3k2he7mhxa8hk5qdu\"), {\n        username: \"John Doe\",\n        email: \"john@example.com\",\n    });\n    console.log(\"Updated user:\", jsonify(updatedUser));\n    return updatedUser;\n  } catch (err) {\n    console.error(\"Failed to update user:\", err);\n  } finally {\n    await db.close();\n  }\n}\n\nupdateUser();\n```\n\n----------------------------------------\n\nTITLE: Setting Up User Authentication\nDESCRIPTION: Definitions for user authentication including unique name index and access rules for signup/signin.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\n    DEFINE INDEX IF NOT EXISTS unique_name ON TABLE user FIELDS name UNIQUE;\n    DEFINE ACCESS IF NOT EXISTS account ON DATABASE TYPE RECORD\n\tSIGNUP ( CREATE user SET name = $name, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE name = $name AND crypto::argon2::compare(pass, $pass) )\n\tDURATION FOR TOKEN 15m, FOR SESSION 12h\n```\n\n----------------------------------------\n\nTITLE: Defining SHOW Statement Syntax in SurrealQL\nDESCRIPTION: This snippet demonstrates the syntax for the SHOW statement in SurrealQL. It shows how to replay changes for a table since a specific timestamp or versionstamp, with an optional limit.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/show.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nSHOW CHANGES FOR TABLE @tablename\n\tSINCE @timestamp | @versionstamp\n\t[ LIMIT @number ]\n```\n\n----------------------------------------\n\nTITLE: Using Blank Tokenizer in SurrealQL Analyzer\nDESCRIPTION: This example demonstrates defining an analyzer with a blank tokenizer, which splits text based on whitespace. It includes the analyzer definition and a sample usage with search::analyze().\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/analyzer.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER example_blank TOKENIZERS blank;\nsearch::analyze(\"example_blank\", \"hello world\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Live Query Method - Python SurrealDB\nDESCRIPTION: Demonstrates the basic syntax for initiating a live query on a table in SurrealDB using Python. The method takes a required table parameter and an optional diff parameter that controls whether changes are returned as JSON Patch objects or complete records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/live.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.live(table, diff)\n```\n\n----------------------------------------\n\nTITLE: Using ONLY Clause in SurrealQL CREATE Statement\nDESCRIPTION: Shows how to use the ONLY clause to return a single record object instead of an array when creating a single record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/create.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n-- Returns an array with a single record inside\nCREATE person:tobie SET\n    name = 'Tobie',\n    company = 'SurrealDB',\n    skills = ['Rust', 'Go', 'JavaScript'];\n\n-- Returns just a single record\nCREATE ONLY person:tobie SET\n    name = 'Tobie',\n    company = 'SurrealDB',\n    skills = ['Rust', 'Go', 'JavaScript'];\n```\n\n----------------------------------------\n\nTITLE: Setting Session Duration for Access Method\nDESCRIPTION: This code demonstrates defining an access method with a 12-hour session duration. It includes secure signup and signin methods with Argon2 password hashing for a complete authentication implementation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS account ON DATABASE TYPE RECORD\n\tSIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )\n\tDURATION FOR SESSION 12h\n;\n```\n\n----------------------------------------\n\nTITLE: Translating update Method to SurrealQL Query\nDESCRIPTION: This snippet shows the equivalent SurrealQL query that the `.update()` method generates and executes in the database. It uses placeholders for the 'thing' (table or record) and 'data' to be updated.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/update.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $thing CONTENT $data;\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Record with Specific ID in Rust\nDESCRIPTION: Demonstrates how to insert a single record with a specific ID into a SurrealDB table using the Rust SDK. It includes setting up the database connection, signing in, and inserting a person record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/insert.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse surrealdb::engine::any::connect;\nuse surrealdb::opt::auth::Root;\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Settings {\n    active: bool,\n    marketing: bool,\n}\n\n#[derive(Serialize)]\nstruct Data<'a> {\n    name: &'a str,\n    settings: Settings,\n}\n\n#[derive(Debug, Deserialize)]\nstruct Person {\n    name: String,\n    settings: Settings,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = connect(\"ws://localhost:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    let person: Option<Person> = db\n        .insert((\"person\", \"tobie\"))\n        .content(Data {\n            name: \"Tobie\",\n            settings: Settings {\n                active: true,\n                marketing: true,\n            },\n        })\n        .await?;\n    dbg!(person);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Results Based on ML Predictions in SurrealQL\nDESCRIPTION: Shows how to filter query results based on the computed price predictions from the ML model. This example selects houses with predicted prices above a certain threshold.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/ml/functions.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM (\n\t\tSELECT \n\t\t\t*, \n\t\t\tml::house-price-prediction<0.0.1>({ squarefoot: squarefoot_col, num_floors: num_floors_col }) AS price_prediction \n\t\tFROM house_listing\n\t) \n\tWHERE price_prediction > 177206.21875;\n```\n\n----------------------------------------\n\nTITLE: Error Messages for ON DELETE UNSET and REJECT\nDESCRIPTION: This shows the different error messages produced when attempting to delete a record referenced by a field with ON DELETE UNSET (for required fields) versus ON DELETE REJECT.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/references.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\n-------- Query --------\n\n'An error occured while updating references for `person:jn7ux92gna61hxhc7fta`: Found NONE for field `author`, with record `comment:xrfbrrx2nw16l83io2cs`, but expected a record<person>'\n\n-------- Query --------\n\n'Cannot delete `person:3fm76xztvfab99eq780l` as it is referenced by `comment:ig0ogusbm64cier5ovv9` with an ON DELETE REJECT clause'\n```\n\n----------------------------------------\n\nTITLE: Updating Records in SurrealDB using .NET SDK\nDESCRIPTION: Updates all records in a table or a specific record in the database. The method replaces the current document/record data with the specified data. It accepts a table name or a specific RecordId, and optionally the data to update.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/data-manipulation.mdx#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Update<T>(thing, data)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar post = new Post\n{\n    Id = (\"post\", \"another\"),\n    Title = \"A new article\",\n    Content = \"This is a new article created using the .NET SDK\"\n};\n\n// Updates a single record\nawait db.Update(post);\n\nvar data = new Person\n{\n    Name = \"Tobie\",\n    Settings = new Settings\n    {\n        Active = true,\n        Marketing = true,\n    },\n};\n\n// Updates all records inside the \"person\" table\nawait db.Update(\"person\", data);\n```\n\n----------------------------------------\n\nTITLE: Table Permissions with WHERE in SurrealQL\nDESCRIPTION: Example of using the WHERE clause to specify conditions for table permissions. Different CRUD operations have different permission conditions based on user authentication and record ownership.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/where.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\n-- Specify access permissions for the 'post' table\nDEFINE TABLE post SCHEMALESS\n\tPERMISSIONS\n\t\tFOR select\n\t\t\t-- Published posts can be selected\n\t\t\tWHERE published = true\n\t\t\t-- A user can select all their own posts\n\t\t\tOR user = $auth.id\n\t\tFOR create, update\n\t\t\t-- A user can create or update their own posts\n\t\t\tWHERE user = $auth.id\n\t\tFOR delete\n\t\t\t-- A user can delete their own posts\n\t\t\tWHERE user = $auth.id\n\t\t\t-- Or an admin can delete any posts\n\t\t\tOR $auth.admin = true\n;\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structures for Person Management\nDESCRIPTION: Defines the data structures used for person management, including PersonData for input and Person for database records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Serialize, Deserialize, Clone)]\npub struct PersonData {\n    name: String,\n}\n\n#[derive(Serialize, Deserialize)]\npub struct Person {\n    name: String,\n    id: RecordId,\n}\n```\n\n----------------------------------------\n\nTITLE: Complete SurrealDB Node.js Integration Example\nDESCRIPTION: Full example demonstrating the setup and usage of SurrealDB with the Node.js engine, including connection handling and database operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/engines/node.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Surreal } from 'surrealdb';\nimport { surrealdbNodeEngines } from '@surrealdb/node';\n\n// Enable the WebAssembly engines\nconst db = new Surreal({\n    engines: surrealdbNodeEngines(),\n});\n\n// Now we can start SurrealDB as an in-memory database\nawait db.connect(\"mem://\");\n// Or we can start a persisted SurrealKV database\nawait db.connect(\"surrealkv://demo\");\n// Or a persisted SurrealKV database with versioning (temoral queries)\nawait db.connect(\"surrealkv+versioned://demo\");\n\n// Now use the JavaScript SDK as normal.\n\n// Close the database connection\nawait db.close();\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB in JavaScript\nDESCRIPTION: Connects to a local or remote SurrealDB database endpoint. This method initializes the connection to the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.connect(url, options)\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying User Table in SurrealDB\nDESCRIPTION: Demonstrates creating a schemaless user table with defined fields, indexes, and inserting sample data. Includes field validations and unique constraints for email.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/surreal cloud.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\n-- Create schemaless user table.\nDEFINE TABLE user SCHEMALESS;\n\n-- Define some fields.\nDEFINE FIELD firstName ON TABLE user TYPE string;\nDEFINE FIELD lastName ON TABLE user TYPE string;\nDEFINE FIELD email ON TABLE user TYPE string\n  ASSERT string::is::email($value);\nDEFINE INDEX userEmailIndex ON TABLE user COLUMNS email UNIQUE;\n\n-- SEE IT IN ACTION - Example 1\n-- 1: Add a user with all required fields and an undefined one.\nCREATE user CONTENT { \n\tfirstName = 'Tobie', \n\tlastName = 'Hitchcock', \n\temail = 'Tobie.Hitchcock@surrealdb.com',\n};\n\n-- Query the data\nSELECT * FROM user;\n```\n\n----------------------------------------\n\nTITLE: Implementing ON DELETE CASCADE in SurrealDB\nDESCRIPTION: This snippet demonstrates how ON DELETE CASCADE causes related records to be automatically deleted when their parent record is deleted. The example shows a person with comments that are automatically removed when the person record is deleted.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/references.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD author ON comment TYPE record<person> REFERENCE ON DELETE CASCADE;\nDEFINE FIELD comments ON person TYPE references;\n\nCREATE person:one;\nCREATE comment SET author = person:one, text = \"5/10 for this blog post. The problems I have with it are...\";\nCREATE comment SET author = person:one, text = \"WOW! I never knew you could cut a rope with an arrow.\";\n\n-- Show all the details of comments for 'person:one'\nperson:one.comments.*.*;\nDELETE person:one;\n-- Comments no longer exist\nSELECT * FROM comment;\n```\n\n----------------------------------------\n\nTITLE: Root User Authentication in SurrealDB with .NET SDK\nDESCRIPTION: Signs in as a root user to SurrealDB using the .NET SDK. Root authentication requires a username and password, providing system-wide access to the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/signin.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Sign in as root user\nawait db.SignIn(new RootAuth { Username = \"root\", Password = \"root\" });\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with In-Memory Storage\nDESCRIPTION: Command to start SurrealDB using in-memory storage engine. This configuration runs the database entirely in memory without persistence.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/start.mdx#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start memory\n```\n\n----------------------------------------\n\nTITLE: Executing a Simple GraphQL Query in SurrealDB\nDESCRIPTION: The graphql method (available since v2.0.0) allows executing GraphQL queries against the database. This example shows a simple query to retrieve user data with just ID and name fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"graphql\",\n    \"params\": [ \"{ users { id name } }\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Record with Object Syntax in SurrealQL\nDESCRIPTION: This example demonstrates how to insert a record into the 'company' table using object syntax, including various field types like strings, dates, and arrays.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/insert.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO company {\n\tname: 'SurrealDB',\n\tfounded: \"2021-09-10\",\n\tfounders: [person:tobie, person:jaime],\n\ttags: ['big data', 'database']\n};\n```\n\n----------------------------------------\n\nTITLE: Simple Data Type Definitions\nDESCRIPTION: Examples of defining fields with basic data types and multiple allowed types using the vertical bar operator.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n-- Set a field to have the string data type\nDEFINE FIELD email ON TABLE user TYPE string;\n\n-- Set a field to have the datetime data type\nDEFINE FIELD created ON TABLE user TYPE datetime;\n\n-- Set a field to have the bool data type\nDEFINE FIELD locked ON TABLE user TYPE bool;\n\n-- Set a field to have the number data type\nDEFINE FIELD login_attempts ON TABLE user TYPE number;\n\n-- Set a field to have either the uuid or int type\nDEFINE FIELD user_id ON TABLE user TYPE uuid|int;\n```\n\n----------------------------------------\n\nTITLE: Connecting to Surreal Cloud with .NET SDK\nDESCRIPTION: Example of connecting to a Surreal Cloud instance using the .NET SDK. This code demonstrates authentication, database selection, record creation with nested properties, record updates, and executing queries with grouped results.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-cloud/connect/sdk.mdx#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing SurrealDb.Net;\nusing SurrealDb.Net.Models;\nusing SurrealDb.Net.Models.Auth;\nusing System.Text.Json;\n\nconst string TABLE = \"person\";\n\nusing var db = new SurrealDbClient(\"wss://cloud-docs-068rp16e0hsnl62vgooa7omjks.aws-euw1.staging.surrealdb.cloud/rpc\");\n\nawait db.SignIn(new RootAuth { Username = \"<created root user>\", Password = \"<created root password>\" });\nawait db.Use(\"Cloud Namespace\", \"Cloud Database\");\n\n// Create a new instance of a person with nested properties\nvar person = new Person\n{\n\tTitle = \"Founder & CEO\",\n\tName = new() { FirstName = \"Tobie\", LastName = \"Morgan Hitchcock\" },\n\tMarketing = true\n};\n\n// Create a new record in the database and store the result\nvar created = await db.Create(TABLE, person);\nConsole.WriteLine(ToJsonString(created));\n\n// Merge (update) an existing record with new marketing value\n// Uses generic types to specify the merge data and return type\nvar updated = await db.Merge<ResponsibilityMerge, Person>(\n\tnew() { Id = (TABLE, \"jaime\"), Marketing = true }\n);\nConsole.WriteLine(ToJsonString(updated));\n\n// Select all records from the person table\nvar people = await db.Select<Person>(TABLE);\nConsole.WriteLine(ToJsonString(people));\n\n// Perform a grouped query to count records by marketing status\nvar queryResponse = await db.Query(\n    $\"SELECT Marketing, count() AS Count FROM type::table({TABLE}) GROUP BY Marketing\"\n);\nvar groups = queryResponse.GetValue<List<Group>>(0);\nConsole.WriteLine(ToJsonString(groups));\n\nstatic string ToJsonString(object? o)\n{\n    return JsonSerializer.Serialize(o, new JsonSerializerOptions { WriteIndented = true, });\n}\n\npublic class Person : Record\n{\n\tpublic string? Title { get; set; }\n\tpublic Name? Name { get; set; }\n\tpublic bool Marketing { get; set; }\n}\npublic class Name\n{\n\tpublic string? FirstName { get; set; }\n\tpublic string? LastName { get; set; }\n}\npublic class ResponsibilityMerge : Record\n{\n\tpublic bool Marketing { get; set; }\n}\npublic class Group\n{\n\tpublic bool Marketing { get; set; }\n\tpublic int Count { get; set; }\n}\n\n// Run \ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Transaction Example with COMMIT in SurrealQL\nDESCRIPTION: A complete example showing a transaction that transfers money between accounts, including account creation and balance updates, finalized with a COMMIT statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/commit.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nBEGIN TRANSACTION;\n\n-- Setup accounts\nCREATE account:one SET balance = 135605.16;\nCREATE account:two SET balance = 91031.31;\n\n-- Move money\nUPDATE account:one SET balance += 300.00;\nUPDATE account:two SET balance -= 300.00;\n\n-- Finalise all changes\nCOMMIT TRANSACTION;\n```\n\n----------------------------------------\n\nTITLE: Applying JSON Patch to All Records in Python\nDESCRIPTION: This example demonstrates how to use the `.patch()` method to update all records in a table. It sets the 'created_at' field to the current UTC datetime for all records in the 'person' table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/patch.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nawait db.patch('person', [\n\t{ \"op\": 'replace', \"path\": '/created_at', \"value\": datetime.datetime.utcnow() },\n])\n```\n\n----------------------------------------\n\nTITLE: Event with Permissions Example\nDESCRIPTION: Complex example showing how events can be used to implement additional checks and changes that bypass normal permission restrictions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/event.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE EVENT on_comment_created ON TABLE comment\n    WHEN $event = \"CREATE\"\n    THEN {\n        IF $after.post.disable_comments {\n            THROW \"Can't create a comment - Comments are disabled for this post\";\n        };\n        UPDATE $after.id SET\n            approved = $after.post.author == $after.author;\n    };\n```\n\n----------------------------------------\n\nTITLE: Inserting Person Records and Relationships in SurrealDB\nDESCRIPTION: Creates a set of person records and establishes relationships between them using the 'knows' relation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_28\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO person [\n\t{ id: person:tobie, name: 'Tobie', friends: [person:jaime, person:micha] },\n\t{ id: person:jaime, name: 'Jaime', friends: [person:mary] },\n\t{ id: person:micha, name: 'Micha', friends: [person:john] },\n\t{ id: person:john, name: 'John' },\n\t{ id: person:mary, name: 'Mary' },\n\t{ id: person:tim, name: 'Tim' },\n];\n\nINSERT RELATION INTO knows [\n\t{ id: knows:1, in: person:tobie, out: person:jaime },\n\t{ id: knows:2, in: person:tobie, out: person:micha },\n\t{ id: knows:3, in: person:micha, out: person:john },\n\t{ id: knows:4, in: person:jaime, out: person:mary },\n\t{ id: knows:5, in: person:mary, out: person:tim },\n];\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Record Access in SurrealDB with TypeScript\nDESCRIPTION: This snippet shows how to authenticate with Record Access in SurrealDB. It uses the signin method with namespace, database, access, and variables for email and password.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/handling-authentication.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Authenticate with Record Access\nconst token = await db.signin({\n\tnamespace: 'surrealdb',\n\tdatabase: 'docs',\n\taccess: 'account',\n\n    // Also pass any properties required by the access definition\n\tvariables: {\n    \temail: 'info@surrealdb.com',\n    \tpass: '123456',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with SurrealDB JavaScript SDK\nDESCRIPTION: Demonstrates how to delete records using the 'delete' method. Examples include deleting all records from a table and deleting a specific record by ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/data-maniplulation.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Delete all records from a table\nawait db.delete('person');\n\n// Delete a specific record from a table\nawait db.delete(new RecordId('person', 'h5wxrf2ewk8xjxosxtyc'));\n```\n\n----------------------------------------\n\nTITLE: User Signup in SurrealDB JavaScript SDK\nDESCRIPTION: Signs up a new user to a specific authentication scope in SurrealDB. This method is used for user registration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.signup(vars)\n```\n\n----------------------------------------\n\nTITLE: Signing Up New User with SurrealDB PHP SDK\nDESCRIPTION: This snippet shows how to sign up a new scoped user using the signup method from the Surreal class. It includes examples for both pre-2.0 and 2.0+ versions of SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/core/authentication.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$db->signup([\n\t\"namespace\" => \"surrealdb\",\n\t\"database\" => \"surrealdb\",\n\t\"scope\" => \"user\",\n\t\"email\" => \"user@email.com\",\n\t\"pass\" => \"password-123\"\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// 2.0 and above\n$db->signup([\n\t\"namespace\" => \"surrealdb\",\n\t\"database\" => \"surrealdb\",\n\t\"access\" => \"user\",\n\t\"email\" => \"user@email.com\",\n\t\"pass\" => \"password-123\"\n]);\n```\n\n----------------------------------------\n\nTITLE: Custom Function Definition with WHERE in SurrealQL\nDESCRIPTION: Example of defining a custom function that uses the WHERE clause to check if a relation exists between two nodes. The function queries a table with conditions specified in the WHERE clause.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/where.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n-- Define a function that checks if a relation exists between two nodes\nDEFINE FUNCTION fn::relation_exists(\n\t$in: record,\n\t$tb: string,\n\t$out: record\n) {\n\t-- Check if a relation exists between the two nodes.\n\tLET $results = SELECT VALUE id FROM type::table($tb) WHERE in = $in AND out = $out;\n\t-- Return true if a relation exists, false otherwise\n    RETURN array::len($results) > 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining INSERT Statement Syntax in SurrealQL\nDESCRIPTION: This snippet shows the general syntax for the INSERT statement in SurrealQL, including optional clauses for ignoring duplicates, inserting relations, and specifying return values.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/insert.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nINSERT [ IGNORE | RELATION ] INTO @what\n\t[ @value\n\t  | (@fields) VALUES (@values)\n\t\t[ ON DUPLICATE KEY UPDATE @field = @value ... ]\n\t]\n\t[ RETURN NONE | RETURN BEFORE | RETURN AFTER | RETURN DIFF | RETURN @statement_param, ... | RETURN VALUE @statement_param ]\n;\n```\n\n----------------------------------------\n\nTITLE: Using select() Method in Python\nDESCRIPTION: Demonstrates how to use the select() method to retrieve all records from a table or a specific record using RecordID\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/select.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Select all records from a table\ndb.select('person')\n\n# Select a specific record from a table\nawait db.select(RecordID('person', 'h5wxrf2ewk8xjxosxtyc'))\n```\n\n----------------------------------------\n\nTITLE: Inserting Relations with Python SDK\nDESCRIPTION: Shows how to insert one or multiple relations into the database using the insert_relation() method. It accepts a table name and either a single relation or an array of relations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/data-maniplulation.mdx#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Insert a single record\ndb.insert_relation('likes', {\n\t\"in\": RecordID('person', 'tobie'),\n\t\"out\": RecordID('post', 123)\n})\n\n# Insert multiple records across tables\npeople = db.insert_relation('likes', [\n\t{\n    \t\"in\": RecordID('person', 'tobie'),\n    \t\"out\": RecordID('post', 123),\n\t},\n\t{\n    \t\"in\": RecordID('person', 'jaime'),\n    \t\"out\": RecordID('post', 456),\n\t}\n])\n```\n\nLANGUAGE: surql\nCODE:\n```\nINSERT RELATION INTO $table $data;\n```\n\n----------------------------------------\n\nTITLE: Importing Data Example in PHP\nDESCRIPTION: Complete example showing how to connect to a SurrealDB instance, read data from a file, and import it into the database using the import() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/import.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// connect and select the namespace + database that the import function will use to import the data\n$db->connect('http://localhost:8080', [\n\t'namespace' => 'example',\n\t'database' => 'example',\n]);\n\n// grab file contents and import the data\n$import = file_get_contents('data.surql');\n$db->import($import, 'admin', 'password');\n```\n\n----------------------------------------\n\nTITLE: Using array::any Function in SurrealQL\nDESCRIPTION: Demonstrates checking if any array values match certain conditions using array::any function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::any([ 1, 2, 3, NONE, 'SurrealDB', 5 ]);\n\n[\"same\", \"same?\", \"Dude, same!\"].any(\"same\");\n\n[1, 2, \"SurrealDB\"].any(|$var| $var.is_string());\n```\n\n----------------------------------------\n\nTITLE: Creating a Small Network of Friends in SurrealDB\nDESCRIPTION: Sets up a small network of friends and acquaintances to demonstrate path collection and shortest path algorithms.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_32\n\nLANGUAGE: surql\nCODE:\n```\nCREATE \n\tperson:you, \n\tperson:friend1, person:friend2, \n\tperson:acquaintance1, person:acquaintance2, person:acquaintance3, \n\tperson:star\n-- Give each of them a name like 'you', 'friend1', etc.\nSET name = id.id();\n\n-- You have two friends\nRELATE person:you->knows->[person:friend1, person:friend2];\n-- The first friend is shy and only knows one other person\nRELATE person:friend1->knows->person:friend2;\n-- The second friend is very social and knows many people you barely know\nRELATE person:friend2->knows->[person:acquaintance1, person:acquaintance2, person:acquaintance3];\n-- One of those people knows the movie star\nRELATE person:acquaintance3->knows->person:star;\n```\n\n----------------------------------------\n\nTITLE: Various Graph Clause Examples in SurrealQL\nDESCRIPTION: Provides multiple examples of graph clauses with different capabilities including WHERE conditions, ORDER BY, GROUP BY, LIMIT, and START. This demonstrates the SQL-like flexibility in graph traversals.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_66\n\nLANGUAGE: surql\nCODE:\n```\nCREATE |person:1..3|;\n\nRELATE person:1->likes->person:2 SET like_strength = 20, know_in_person = true;\nRELATE person:1->likes->person:3 SET like_strength = 5,  know_in_person = false;\nRELATE person:2->likes->person:1 SET like_strength = 10, know_in_person = true;\nRELATE person:2->likes->person:3 SET like_strength = 12, know_in_person = false;\nRELATE person:3->likes->person:1 SET like_strength = 2,  know_in_person = false;\nRELATE person:3->likes->person:2 SET like_strength = 9,  know_in_person = false;\n\nSELECT ->likes AS likes FROM person;\nSELECT ->(SELECT like_strength FROM likes) AS likes FROM person;\nSELECT ->(SELECT like_strength FROM likes WHERE like_strength > 10) AS likes FROM person;\nSELECT ->(likes WHERE like_strength > 10) AS likes FROM person;\nSELECT ->(SELECT like_strength, know_in_person FROM likes ORDER BY like_strength DESC) AS likes FROM person;\nSELECT ->(SELECT count() as count, know_in_person FROM likes GROUP BY know_in_person) AS likes FROM person;\nSELECT ->(likes LIMIT 1) AS likes FROM person;\nSELECT ->(likes START 1) AS likes FROM person;\n```\n\n----------------------------------------\n\nTITLE: Defining Query Method Syntax in Rust for SurrealDB\nDESCRIPTION: Demonstrates the basic syntax for using the query() method in the SurrealDB Rust SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/query.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.query(query)\n```\n\n----------------------------------------\n\nTITLE: Using CONTINUE to Skip Loop Iterations Based on Condition in SurrealQL\nDESCRIPTION: This example demonstrates how to use the CONTINUE statement to skip loop iterations for people under 18 years old when setting voting eligibility.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/continue.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Set can_vote to true for every person over 18 years old.\nFOR $person IN (SELECT id, age FROM person) {\n\tIF ($person.age < 18) {\n\t\tCONTINUE;\n\t};\n\n\tUPDATE $person.id SET can_vote = true;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating User Records with ULID in SurrealDB\nDESCRIPTION: This snippet demonstrates creating user records using ULID for sortable, time-based IDs while maintaining randomness.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_28\n\nLANGUAGE: surql\nCODE:\n```\nFOR $num IN 0..100 {\n    CREATE user:ulid() SET num = $num;\n    sleep(1ms);\n};\n\nSELECT * FROM user WHERE num IN 50..=51;\nSELECT * FROM user START 50 LIMIT 2;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Relation Existence Check Function in SurrealQL\nDESCRIPTION: Shows how to create a more complex custom function that checks if a relation exists between two nodes in a database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/function.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FUNCTION fn::relation_exists(\n\t$in: record,\n\t$tb: string,\n\t$out: record\n) {\n\t-- Check if a relation exists between the two nodes.\n\tLET $results = SELECT VALUE id FROM type::table($tb) WHERE in = $in AND out = $out;\n\t-- Return true if a relation exists, false otherwise\n    RETURN array::len($results) > 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Lemmatization Analyzer in SurrealQL\nDESCRIPTION: This snippet demonstrates how to define an analyzer with a custom lemmatization mapper and use it for text analysis. It showcases the mapper filter, which enables lemmatization based on a custom dictionary file.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/analyzer.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER lemme_english TOKENIZERS blank,class FILTERS lowercase,mapper('../tests/data/lemmatization-en.txt');\n\nRETURN [\n    search::analyze(\"lemme_english\", \"He drove and swam\"),\n];\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t[\n\t\t'he',\n\t\t'drive',\n\t\t'and',\n\t\t'swim'\n\t]\n]\n```\n\n----------------------------------------\n\nTITLE: Dynamic Data Creation with JSON\nDESCRIPTION: Example demonstrating how to create records using serde_json's json! macro for dynamic data structures.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/flexible-typing.mdx#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse serde_json::json;\nlet new_student = db.create(Resource::from(\"student\")).content(json!({\n    \"age\": 15,\n    \"weekly_allowance\": 20.5\n})).await?;\nprint!(\"{new_student}\");\n```\n\n----------------------------------------\n\nTITLE: Closing SurrealDB Connection in JavaScript\nDESCRIPTION: This example demonstrates how to close the persistent connection to the SurrealDB database using the .close() method. It's important to call this method when done with the connection to free up resources.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/create-a-new-connection.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.close();\n```\n\n----------------------------------------\n\nTITLE: Removing Fields from Records in SurrealQL\nDESCRIPTION: This snippet demonstrates two ways to remove a field from a record: setting it to NONE or using the UNSET keyword.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/update.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n-- Remove the company field by setting it to NONE or using the UNSET keyword\nUPDATE person:tobie SET company = NONE;\n\nUPDATE person:tobie UNSET company;\n```\n\n----------------------------------------\n\nTITLE: Conditional Update with WHERE Clause in SurrealQL\nDESCRIPTION: This example shows how to use a WHERE clause to conditionally update records. It updates the skills of all persons whose company is not 'SurrealDB'.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/update.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\n-- Update all records which match the condition that `company` is not equal to \"SurrealDB\"\nUPDATE person SET skills += \"System design\" WHERE company != \"SurrealDB\";\n```\n\n----------------------------------------\n\nTITLE: Binding Parameters in Rust SDK\nDESCRIPTION: Demonstrates the secure way to bind parameters in SurrealDB queries using Rust SDK, using the bind method to prevent SQL injection. Also shows the insecure approach that should be avoided.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n// Do this:\nlet name = \"tobie\"; // User-controlled input.\nlet mut result = db\n    .query(\"CREATE person CONTENT name = $name;\")\n    .bind((\"name\", name))\n    .await?;\n```\n\nLANGUAGE: rust\nCODE:\n```\n// highlight-next-line\n// Do NOT do this:\nlet name = \"tobie\"; // User-controlled input.\nlet mut result = db\n    .query(format!(\"CREATE person CONTENT name = {name};\"))\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Live Queries in SurrealDB JavaScript SDK\nDESCRIPTION: Registers a callback for a running live query in SurrealDB. This method is used to handle updates from live queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.subscribeLive<T>(queryUuid,callback)\n```\n\n----------------------------------------\n\nTITLE: Using Select Method with Different Query Types\nDESCRIPTION: Examples demonstrating various ways to use the Select method including querying all records from a table, selecting specific records using string IDs, and selecting records using GUIDs.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/select.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Select all records from a table\nvar people = await db.Select<Person>(\"person\");\n\n// Select a specific record from a table\nvar person = await db.Select<Person>((\"person\", \"h5wxrf2ewk8xjxosxtyc\"));\nvar person = await db.Select<Person>(new StringRecordId(\"person:h5wxrf2ewk8xjxosxtyc\"));\n\n// Select a specific record from a table, given a non-string id\nvar person = await db.Select<Person>((\"person\", new Guid(\"8424486b-85b3-4448-ac8d-5d51083391c7\")));\n```\n\n----------------------------------------\n\nTITLE: Modifying Table Schema Example\nDESCRIPTION: Example showing how to change a table from schemaless to schemafull, demonstrating the progression from flexible to strict schema enforcement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/alter.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE user SCHEMALESS;\nDEFINE FIELD name ON TABLE user TYPE string;\nCREATE user SET name = \"LordofSalty\";\n\n-- Now make it schemafull to ensure that no other fields can be used\nALTER TABLE user SCHEMAFULL;\n```\n\n----------------------------------------\n\nTITLE: Adding Properties to Edge Tables\nDESCRIPTION: Shows how to add metadata to edge relationships using SET and CONTENT clauses, including timestamp creation and data fetching from connected nodes\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nRELATE person:01GT2ZEF2G8AC8D7H7FMZ1ZYZ3 -> wishlist:ulid() -> product:01HGAR7A0R9BETTCMATM6SSXPT\nSET time.created_at = time::now();\n\nRELATE person:01GCSHZEP89F1B9T33Y4M9VA9J -> order:ulid() -> product:01H35P394G93AVCEF8KX59H5RY \nCONTENT {\n    quantity: 2,\n    product_name: ->product.name,\n\t\tprice: ->product.price,\n    shipping_address: <-person.address\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Level in SurrealDB HTTP REST API\nDESCRIPTION: Shows how to specify the namespace and database for authentication when using the SurrealDB HTTP REST API, ensuring correct user authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/troubleshooting.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nsurreal-auth-ns surreal-auth-db\n```\n\n----------------------------------------\n\nTITLE: Type Checking with String vs Record ID in SurrealQL\nDESCRIPTION: Demonstration of type checking between regular strings and record IDs in SurrealQL using type functions. Shows how the 'r' prefix affects type detection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/strings.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::is::string(\"person:john\");\nRETURN type::is::record(\"person:john\");\nRETURN type::is::record(r\"person:john\");\n```\n\n----------------------------------------\n\nTITLE: Using Parameters in JavaScript Client Library\nDESCRIPTION: Demonstrates how to use parameters with SurrealDB's JavaScript client library, passing them as JSON values.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/parameters.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet people = await surreal.query(\"SELECT * FROM article WHERE status INSIDE $status\", {\n\tstatus: [\"live\", \"draft\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Database Connection and Schema Setup\nDESCRIPTION: Database connection configuration, authentication, and schema definition including tables and access controls\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nDB.connect::<Ws>(\"localhost:8000\").await?;\n\nDB.signin(Root {\n    username: \"root\",\n    password: \"root\",\n})\n.await?;\n\nDB.use_ns(\"test\").use_db(\"test\").await?;\n\nDB.query(\n    \"\nDEFINE TABLE IF NOT EXISTS person SCHEMALESS\n    PERMISSIONS FOR \n        CREATE, SELECT WHERE $auth,\n        FOR UPDATE, DELETE WHERE created_by = $auth;\nDEFINE FIELD IF NOT EXISTS name ON TABLE person TYPE string;\nDEFINE FIELD IF NOT EXISTS created_by ON TABLE person VALUE $auth READONLY;\n\nDEFINE INDEX IF NOT EXISTS unique_name ON TABLE user FIELDS name UNIQUE;\nDEFINE ACCESS IF NOT EXISTS account ON DATABASE TYPE RECORD\nSIGNUP ( CREATE user SET name = $name, pass = crypto::argon2::generate($pass) )\nSIGNIN ( SELECT * FROM user WHERE name = $name AND crypto::argon2::compare(pass, $pass) )\nDURATION FOR TOKEN 15m, FOR SESSION 12h\n;\",\n)\n.await?;\n```\n\n----------------------------------------\n\nTITLE: Using signup Method with Record Access in Python SurrealDB SDK\nDESCRIPTION: This example demonstrates how to use the signup method with Record Access in SurrealDB 2.x and above. It includes the required namespace, database, and access parameters, along with additional variables needed for user authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/signup.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndb.signup({\n\t\"namespace\": 'surrealdb',\n\t\"database\": 'docs',\n\t\"access\": 'user',\n\n    # Also pass any properties required by the scope definition\n\t\"variables\": {\n        \"email\": 'info@surrealdb.com',\n        \"password\": '123456',\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Records with Insert<T> Method in SurrealDB .NET\nDESCRIPTION: Method for inserting one or multiple records into the database. Supports batch inserts and allows specifying the target table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/data-manipulation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar posts = new List<Post>\n{\n    new Post\n    {\n        Id = (\"post\", \"First\"),\n        Title = \"An article\",\n        Content = \"This is the first article\"\n    },\n    new Post\n    {\n        Id = (\"post\", \"Second\"),\n        Title = \"An article\",\n        Content = \"This is the second article\"\n    }\n};\n\nawait db.Insert(\"post\", posts);\n```\n\n----------------------------------------\n\nTITLE: Using SELECT Statement in Graph Clauses in SurrealQL\nDESCRIPTION: Demonstrates how to embed a SELECT statement inside a graph traversal to filter and transform relationship data. This query shows who each person knows and whether they dated.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_60\n\nLANGUAGE: surql\nCODE:\n```\nSELECT \n\tid, \n\t->(SELECT out.id AS counterpart, !!dated AS dated FROM knows) AS acquaintances\nFROM person;\n```\n\n----------------------------------------\n\nTITLE: Advanced Ordering Examples in SurrealQL\nDESCRIPTION: This snippet showcases various advanced ordering techniques including random ordering, descending order, multiple field ordering, lexical collation, and numeric sorting for text fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/order_by.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Order records randomly\nSELECT * FROM <table> ORDER BY rand();\n\n-- Order records descending by a single field\nSELECT * FROM <table> ORDER BY <field> DESC;\n\n-- Order records by multiple fields independently\nSELECT * FROM <table> ORDER BY <field> ASC, <field2> DESC;\n\n-- Order text fields with lexical collation instead of Unicode order\nSELECT * FROM <table> ORDER BY <field> COLLATE ASC;\n\n-- Order text fields with which include numeric values\nSELECT * FROM <table> ORDER BY <field> NUMERIC ASC;\n\n-- COLLATE and NUMERIC can be used together\nSELECT * FROM <table> ORDER BY <field> COLLATE NUMERIC ASC;\n```\n\n----------------------------------------\n\nTITLE: Storing Record Links in SurrealQL\nDESCRIPTION: Shows how to store record IDs within other records, creating relationships between records using arrays of references.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/records.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:jaime SET name = 'Jaime', friends = [person:tobie, person:simon];\nCREATE person:tobie SET name = 'Tobie', friends = [person:simon, person:marcus];\nCREATE person:simon SET name = 'Simon', friends = [person:jaime, person:tobie];\nCREATE person:marcus SET name = 'Marcus', friends = [person:tobie];\n```\n\n----------------------------------------\n\nTITLE: WHERE Clause Syntax in SurrealQL\nDESCRIPTION: Basic syntax for the WHERE clause in SurrealQL statements. The WHERE clause is optional and follows the main statement with a condition that acts as a filter.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/where.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nSTATEMENT\n    [WHERE condition;]\n\n```\n\n----------------------------------------\n\nTITLE: Various Recursive Query Examples in SurrealDB\nDESCRIPTION: Demonstrates different types of recursive queries, including unlimited depth, range-limited depth, and complex tree structures.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_29\n\nLANGUAGE: surql\nCODE:\n```\n-- Any depth\nperson:tobie.{..}(->knows->person).name;\n\n-- Minimum 2, maximum 5 iterations of recursion (or either)\nperson:tobie.{2..6}(->knows->person).name;\nperson:tobie.{2..}(->knows->person).name;\nperson:tobie.{..6}(->knows->person).name;\n\n-- Generate complex recursive tree structures:\n-- Fetches connections up to 3 levels deep, \n-- collecting their name, id, and connections along the way\n-- 3 levels, because the first iteration is used to collect\n-- the details for person:tobie\nperson:tobie.{..4}.{ id, name, connections: ->knows->person.@ };\n\n-- @ is a shortcut to the current document, and acts as a shorthand to start an idiom path.\n-- The \".\" can optionally be omitted\nSELECT @{1..4}(->knows->person).name AS names_2nds FROM person;\n\n-- Recursive idioms work with any idiom parts, not limited to graphs\n-- Here, we recursively fetch friends and then collect their names\nperson:tobie.{1..5}(.friend).name;\n```\n\n----------------------------------------\n\nTITLE: Defining User Table and Permissions in SurrealDB\nDESCRIPTION: SurrealQL statements to define a user table with permissions, unique email index, and field definitions for storing user data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/integrate-auth0-as-authentication-provider.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE user SCHEMAFULL\n  -- Authorized users can select, update, delete and create user records.\n  -- Records that do not match the permissions will not be modified nor returned.\n  PERMISSIONS FOR select, update, delete, create\n  WHERE\n    -- The access method must match the method that we will define.\n    $access = \"auth0\"\n    -- The record identifier must match that of the authenticated user.\n    AND id = $auth\n;\n\n-- In this example, we will use the email as the primary identifier for a user.\nDEFINE INDEX email ON user FIELDS email UNIQUE;\nDEFINE FIELD email ON user TYPE string ASSERT string::is::email($value);\n-- We define some other information present in the token that we want to store.\nDEFINE FIELD name ON user TYPE string;\nDEFINE FIELD nickname ON user TYPE string;\nDEFINE FIELD picture ON user TYPE string;\n```\n\n----------------------------------------\n\nTITLE: Scope User Authentication in SurrealDB with .NET SDK\nDESCRIPTION: Signs in as a scoped user in SurrealDB using the .NET SDK. This authentication method uses a custom AuthParams class that extends ScopeAuth to provide scope-specific authentication with email and password.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/signin.mdx#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Sign in as a scoped user\nvar authParams = new AuthParams\n{\n    Namespace = \"test\",\n    Database = \"test\",\n    Scope = \"user\",\n    Email = \"info@surrealdb.com\",\n    Password = \"123456\"\n};\n\nJwt jwt = await db.SignIn(authParams);\n\npublic class AuthParams : ScopeAuth\n{\n\tpublic string? Username { get; set; }\n\tpublic string? Email { get; set; }\n\tpublic string? Password { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating SurrealDB Connection with JWT Token in Python\nDESCRIPTION: This method authenticates the current SurrealDB connection using a JWT token. It takes a single required argument 'token' which is the JWT authentication token. The method can be used in both synchronous and asynchronous contexts.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/authenticate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.authenticate(token)\n```\n\nLANGUAGE: python\nCODE:\n```\ndb.authenticate('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTdXJyZWFsREIiLCJpYXQiOjE1MTYyMzkwMjIsIm5iZiI6MTUxNjIzOTAyMiwiZXhwIjoxODM2NDM5MDIyLCJOUyI6InRlc3QiLCJEQiI6InRlc3QiLCJTQyI6InVzZXIiLCJJRCI6InVzZXI6dG9iaWUifQ.N22Gp9ze0rdR06McGj1G-h2vu6a6n9IVqUbMFJlOxxA')\n```\n\nLANGUAGE: python\nCODE:\n```\nawait db.authenticate('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTdXJyZWFsREIiLCJpYXQiOjE1MTYyMzkwMjIsIm5iZiI6MTUxNjIzOTAyMiwiZXhwIjoxODM2NDM5MDIyLCJOUyI6InRlc3QiLCJEQiI6InRlc3QiLCJTQyI6InVzZXIiLCJJRCI6InVzZXI6dG9iaWUifQ.N22Gp9ze0rdR06McGj1G-h2vu6a6n9IVqUbMFJlOxxA')\n```\n\n----------------------------------------\n\nTITLE: Calculating Cosine Similarity in SurrealDB\nDESCRIPTION: The vector::similarity::cosine function computes the Cosine similarity between two vectors. It takes two arrays as input and returns a number indicating how closely the vectors are oriented to each other.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_17\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::similarity::cosine([10, 50, 200], [400, 100, 20]);\n```\n\n----------------------------------------\n\nTITLE: Advanced Text Analysis and Word Frequency Calculation in SurrealQL\nDESCRIPTION: This example shows how to use a lemmatization analyzer for text analysis, word filtering, and frequency calculation. It demonstrates the use of various SurrealQL functions and an UPSERT statement for data manipulation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/analyzer.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER lemme_english TOKENIZERS blank,class FILTERS lowercase,mapper('../tests/data/lemmatization-en.txt');\n\nLET $text = \"The Wheel of Time turns, and Ages come and pass, leaving memories that become legend. Legend fades to myth, and even myth is long forgotten when the Age that gave it birth comes again. In one Age, called the Third Age by some, an Age yet to come, an Age long past, a wind rose in the Mountains of Mist. The wind was not the beginning. There are neither beginnings nor endings to the turning of the Wheel of Time. But it was a beginning.\";\n\nLET $words = search::analyze(\"lemme_english\", $text)\n    .filter(|$c| $c.is_alpha());\nFOR $word IN $words {\n    UPSERT type::thing(\"word\", $word) SET frequency += 1;\n};\n\nSELECT * FROM word WHERE frequency >=3 ORDER BY frequency DESC;\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tfrequency: 8,\n\t\tid: word:the\n\t},\n\t{\n\t\tfrequency: 6,\n\t\tid: word:age\n\t},\n\t{\n\t\tfrequency: 4,\n\t\tid: word:a\n\t},\n\t{\n\t\tfrequency: 4,\n\t\tid: word:be\n\t},\n\t{\n\t\tfrequency: 4,\n\t\tid: word:of\n\t},\n\t{\n\t\tfrequency: 3,\n\t\tid: word:and\n\t},\n\t{\n\t\tfrequency: 3,\n\t\tid: word:come\n\t},\n\t{\n\t\tfrequency: 3,\n\t\tid: word:to\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Book Data and Analyzer in SurrealQL\nDESCRIPTION: This snippet creates a book record, defines an analyzer, and creates a search index for the book title.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/search.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nCREATE book:1 SET title = \"Rust Web Programming\";\nDEFINE ANALYZER book_analyzer TOKENIZERS blank, class, camel, punct FILTERS snowball(english);\nDEFINE INDEX book_title ON book FIELDS title SEARCH ANALYZER book_analyzer BM25;\n```\n\n----------------------------------------\n\nTITLE: Defining a User and Table in SurrealQL\nDESCRIPTION: This example shows how to define a database user 'db_user' with a password and OWNER role, and a schemafull table 'person'. It then uses the INFO statement to view the database's current definitions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: SurrealQL\nCODE:\n```\nDEFINE USER db_user ON DATABASE PASSWORD \"strongpassword\" ROLES OWNER;\nDEFINE TABLE person SCHEMAFULL;\nINFO FOR DB;\n```\n\n----------------------------------------\n\nTITLE: Using THROW for Conditional Transaction Cancellation in SurrealDB\nDESCRIPTION: This example shows how to use the THROW statement to conditionally cancel a transaction based on account balance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/transactions.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nBEGIN TRANSACTION;\n\nCREATE account:one SET dollars =  100;\nCREATE account:two SET dollars =  100;\n\nLET $transfer_amount = 150;\nUPDATE account:one SET dollars -= $transfer_amount;\nUPDATE account:two SET dollars += $transfer_amount;\nIF account:one.dollars < 0 {\n    THROW \"Insufficient funds, would have $\" + <string>account:one.dollars + \" after transfer\"\n};\nCOMMIT TRANSACTION;\nSELECT * FROM account;\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Person Records with OMIT Clause in SurrealQL\nDESCRIPTION: This example demonstrates creating person records and then using the OMIT clause to exclude specific fields from the query results. It shows how to omit single fields and nested object fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/omit.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:tobie SET\n\tname = 'Tobie',\n\tpassword = '123456',\n\topts.security = 'secure',\n\topts.enabled = true;\nCREATE person:jaime SET\n\tname = 'Jaime',\n\tpassword = 'asdfgh',\n\topts.security = 'secure',\n\topts.enabled = false;\n\nSELECT * FROM person;\n-- Omit the password field and security field in the options object\nSELECT * OMIT password, opts.security FROM person;\n\n-- Using destructuring syntax (since 2.0.0)\nSELECT * OMIT password, opts.{ security, enabled } FROM person;\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Scopes in SurrealDB with TypeScript\nDESCRIPTION: This code demonstrates how to authenticate with Scopes in SurrealDB. It uses the signin method with namespace, database, scope, and additional properties required by the scope definition.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/handling-authentication.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Authenticate with Scopes\nconst token = await db.signin({\n\tnamespace: 'surrealdb',\n\tdatabase: 'docs',\n\tscope: 'user',\n\n\t// Also pass any properties required by the scope definition\n\temail: 'info@surrealdb.com',\n\tpass: '123456',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Path Handler in Actix-Web\nDESCRIPTION: Creates a GET endpoint handler for the root path ('/') that displays available API endpoints and example curl commands for interacting with the server.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n#[get(\"/\")]\npub async fn paths() -> &'static str {\n    r#\"\n\n-----------------------------------------------------------------------------------------------------------------------------------------\n        PATH                |           SAMPLE COMMAND                                                                                  \n-----------------------------------------------------------------------------------------------------------------------------------------\n/session: See session data  |  curl -X GET    -H \"Content-Type: application/json\"                          http://localhost:8080/session\n                            |\n/person/{id}:               |\n  Create a person           |  curl -X POST   -H \"Content-Type: application/json\" -d '{\"name\":\"John Doe\"}' http://localhost:8080/person/one\n  Get a person              |  curl -X GET    -H \"Content-Type: application/json\"                          http://localhost:8080/person/one\n  Update a person           |  curl -X PUT    -H \"Content-Type: application/json\" -d '{\"name\":\"Jane Doe\"}' http://localhost:8080/person/one\n  Delete a person           |  curl -X DELETE -H \"Content-Type: application/json\"                          http://localhost:8080/person/one\n                            |\n/people: List all people    |  curl -X GET    -H \"Content-Type: application/json\"                          http://localhost:8080/people\n\n/new_user:  Create a new record user\n/new_token: Get instructions for a new token if yours has expired\"#\n}\n```\n\n----------------------------------------\n\nTITLE: Additional SPLIT Clause Examples in SurrealQL\nDESCRIPTION: Examples of using the SPLIT clause with nested arrays and in combination with subqueries and filtering. These demonstrate more advanced usage patterns for array expansion in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\n-- Split the results by each value in a nested array\nSELECT * FROM country SPLIT locations.cities;\n\n-- Filter the result of a subquery\nSELECT * FROM (SELECT * FROM person SPLIT loggedin) WHERE loggedin > '2023-05-01';\n```\n\n----------------------------------------\n\nTITLE: Merging Data into Records in SurrealDB (JSON)\nDESCRIPTION: Illustrates the use of the 'merge' method to merge specified data into all records in a table. This example adds an 'active' field with a value of true to all records in the 'person' table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"merge\",\n    \"params\": [\n        \"person\",\n        {\n            \"active\": true\n        }\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"result\": [\n      {\n          \"active\": true,\n          \"id\": \"person:8s0j0bbm3ngrd5c9bx53\",\n          \"name\": \"John Doe\"\n      },\n      {\n          \"active\": true,\n          \"id\": \"person:s5fa6qp4p8ey9k5j0m9z\",\n          \"name\": \"Mary Doe\"\n      }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Record References in SurrealDB\nDESCRIPTION: To use record references, you need to enable the experimental capability. This can be done when starting the database or via an environment variable.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/references.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --allow-experimental record_references\n```\n\nLANGUAGE: bash\nCODE:\n```\nSURREAL_CAPS_ALLOW_EXPERIMENTAL = \"record_references\"\n```\n\n----------------------------------------\n\nTITLE: Upserting Records in SurrealDB using JavaScript\nDESCRIPTION: Inserts records into SurrealDB or updates them if they already exist. This method combines the functionality of insert and update.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.upsert<T,U>(thing,data)\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Application with SurrealProvider\nDESCRIPTION: Example of wrapping the root React application component with SurrealProvider for database connectivity.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/frameworks/react.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport { SurrealProvider } from \"./SurrealProvider\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\")!);\n\nroot.render(\n  <React.StrictMode>\n    <SurrealProvider endpoint=\"http://127.0.0.1:8000\" autoConnect>\n      <App />\n    </SurrealProvider>\n  </React.StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Authenticating with JWT in SurrealDB using C#\nDESCRIPTION: Authenticates the current connection using a JWT token.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\ndb.Authenticate(token)\n```\n\n----------------------------------------\n\nTITLE: Creating User Records with Incrementing Numbers in SurrealDB\nDESCRIPTION: This snippet demonstrates creating user records with incrementing numbers and shows how to change record IDs from random to a specific format.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_23\n\nLANGUAGE: surql\nCODE:\n```\nFOR $i IN 0..5 {\n    CREATE user SET user_num = $i, name = \"User number \" + <string>user_num;\n};\n\nFOR $user IN SELECT * FROM user {\n    -- Use type::thing to make a record ID\n    -- from the user_num field\n    CREATE type::thing(\"user\", $user.user_num);\n    -- Then delete the old user\n    DELETE $user;\n};\n\nSELECT * FROM user;\n```\n\n----------------------------------------\n\nTITLE: Authenticating SurrealDB Client with Credentials in C#\nDESCRIPTION: Shows how to create a SurrealDbClient instance using username and password credentials. This method is used for basic authentication when connecting to a SurrealDB instance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/create-a-new-connection.mdx#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new SurrealDbOptions\n{\n    Endpoint = \"wss://cloud.surrealdb.com/rpc\",\n    Username = \"root\",\n    Password = \"surrealdb\",\n};\n\n// Authenticate using a pair of credentials\nusing var db = new SurrealDbClient(options);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticated User Info in SurrealDB Python SDK\nDESCRIPTION: Returns the record of an authenticated scope user in SurrealDB. This method is used to fetch information about the currently authenticated user.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\ndb.info()\n```\n\n----------------------------------------\n\nTITLE: Basic Live Select Method Syntax in Rust\nDESCRIPTION: Shows the basic syntax for initiating a live query using the select().live() method in SurrealDB Rust SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/select_live.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.select(resource).live()\n```\n\n----------------------------------------\n\nTITLE: Example Usage of LiveRawQuery in SurrealDB .NET SDK\nDESCRIPTION: A practical example showing how to create and use a live query to continuously monitor records of type Person. The query is initiated with a LIVE SELECT statement that watches all records in the person table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/live_raw_query.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait using var liveQuery = await db.LiveRawQuery<Person>(\"LIVE SELECT * FROM person;\");\n\n// Consume the live query...\n```\n\n----------------------------------------\n\nTITLE: Using ASCII Filter in SurrealQL Analyzer\nDESCRIPTION: This example demonstrates defining an analyzer with a class tokenizer and ASCII filter, which removes diacritical marks. It includes the analyzer definition and a sample usage with search::analyze().\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/analyzer.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER example_ascii TOKENIZERS class FILTERS ascii;\nsearch::analyze(\"example_ascii\", \"résumé café\");\n```\n\n----------------------------------------\n\nTITLE: Advanced Graph Clause with LIMIT and Custom Field in SurrealQL\nDESCRIPTION: Demonstrates using clauses like LIMIT and adding computed fields (time::now()) in a graph traversal query, showcasing the flexibility of graph clauses.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_64\n\nLANGUAGE: surql\nCODE:\n```\nSELECT ->(SELECT *, time::now() AS queried_at FROM knows LIMIT 1) FROM person:one;\n```\n\n----------------------------------------\n\nTITLE: Merging Data with UPDATE in SurrealDB\nDESCRIPTION: Shows how to merge new data into existing records using the UPDATE statement in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/start.mdx#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE person MERGE {\n\tage: 30,\n\tadmin: false\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Query with Variables in SurrealDB\nDESCRIPTION: This example demonstrates how to execute a SurrealQL query using the Query method with a parameter. It selects all records from a table name passed as a variable parameter.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/query.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nresult, err := db.Query(\"SELECT * FROM type::table($tb)\", map[string]interface{}{\"tb\": \"person\"})\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Person Record in SurrealDB\nDESCRIPTION: Shows how to create a person record with nested friend data, demonstrating SurrealDB's ability to handle complex data structures.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_40\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:5 CONTENT {\n    name: \"Eve\",\n    friends: [\n        {\n            id: \"person:6\",\n            name: \"Frank\",\n            age: 25\n        },\n        {\n            id: \"person:7\",\n            name: \"Grace\",\n            age: 19\n        },\n        {\n            id: \"person:8\",\n            name: \"Heidi\",\n            age: 17\n        }\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Drop Table Definition\nDESCRIPTION: Demonstrates how to define drop tables for automatic data cleanup in time series applications.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/time-series.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE sensor_readings DROP;\n```\n\n----------------------------------------\n\nTITLE: Graph Navigation with Related Records\nDESCRIPTION: Shows how to create and query related records using graph traversal patterns in SurrealDB with explorer and location entities\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\nCREATE planet:unknown_planet;\nCREATE city:el_dorado          SET name = \"El Dorado\";\nCREATE explorer:drake          SET name = \"Drake\";\nCREATE explorer:local_guide    SET name = \"Local Guide\";\n\nRELATE explorer:drake->discovered->planet:unknown_planet;\nRELATE explorer:drake->visited->city:el_dorado;\nRELATE explorer:local_guide->assisted->explorer:drake;\n```\n\nLANGUAGE: surql\nCODE:\n```\nSELECT \n    *,\n    ->? AS actions,\n    <-? AS was,\n    <->? AS involved_in\nFROM explorer:drake;\n```\n\n----------------------------------------\n\nTITLE: Complete SurrealDB Connection Example in Java\nDESCRIPTION: A full example demonstrating how to connect to an in-memory SurrealDB instance, select a namespace and database, and ensure proper connection closure using try-with-resources.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/core/create-a-new-connection.mdx#2025-04-16_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.surrealdb.example;\n\nimport com.surrealdb.Surreal;\n\npublic class Example {\n\n    public static void main(String[] args) {\n        try (final Surreal driver = new Surreal()) {\n            // Connect to an in-memory database\n            driver.connect(\"memory\");\n\n            // Select a namespace and database\n            driver.useNs(\"surrealdb\").useDb(\"docs\");\n\t\t}\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Queries with Parameters in SurrealDB .NET SDK\nDESCRIPTION: Example demonstrating how to execute SurrealQL queries with parameters, create records, and retrieve results from different query statements in the result set. Shows how to extract single objects and lists from query results.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/query.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Execute query with params\nconst string table = \"person\";\nvar result = await db.Query($\"CREATE person; SELECT * FROM type::table({table});\");\n\n// Get the first result from the first query\nvar created = result.GetValue<Person>(0);\n\n// Get all of the results from the second query\nvar people = result.GetValue<List<Person>>(1);\n```\n\n----------------------------------------\n\nTITLE: Using signup Method with Scopes in Python SurrealDB SDK\nDESCRIPTION: This example shows how to use the signup method with Scopes in SurrealDB 1.x. It includes the required namespace, database, and scope parameters, along with additional properties needed for user authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/signup.mdx#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nawait db.signup({\n\t\"namespace\": 'surrealdb',\n\t\"database\": 'docs',\n\t\"scope\": 'user',\n\n\t# Also pass any properties required by the scope definition\n\t\"email\": 'info@surrealdb.com',\n\t\"password\": '123456'\n})\n```\n\n----------------------------------------\n\nTITLE: Using array::fold function in SurrealQL\nDESCRIPTION: The array::fold function reduces an array to a single value by applying a function to each element with an accumulator. It requires an initial value and a closure that defines the operation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_20\n\nLANGUAGE: surql\nCODE:\n```\narray::fold(array, initial_value, @closure) -> value\n```\n\nLANGUAGE: surql\nCODE:\n```\n-- Returns 53\n[10,12,10,15].fold(100, |$a, $b| $a - $b);\n```\n\nLANGUAGE: surql\nCODE:\n```\n\"I am a forwards string\"\n  .split('')\n  .fold(\"\", |$one, $two| $two + $one);\n```\n\nLANGUAGE: surql\nCODE:\n```\n\"I don't like whitespace\"\n  .split(\" \")\n  .fold(\"\", |$one, $two| $one + \"_\" + $two);\n```\n\nLANGUAGE: surql\nCODE:\n```\n\"I don't like whitespace\"\n  .split(\" \")\n  .fold(\"\", |$one, $two, $index| IF $index = 0 { $one + $two } ELSE { $one + \"_\" + $two });\n```\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO person (\n  -- Create 1000 objects with a random ULID and incrementing number\n    (<array>0..1000).fold([], |$v, $_, $i| {\n    $v.append( { \n      id: rand::ulid(),\n      person_num: $i\n      });\n    })\n);\n```\n\nLANGUAGE: surql\nCODE:\n```\nCREATE city:one, city:two, city:three;\nRELATE city:one -> to -> city:two SET distance = 25.5;\nRELATE city:two -> to -> city:three SET distance = 4.1;\n[\n\tcity:one,\n\tcity:two,\n\tcity:three\n].map(|$v| { {\n\tcity: $v,\n\tdistance: 0,\n\tfrom: NONE,\n\tto: NONE,\n\ttrips: 0\n} }).fold({\n\tcity: NONE,\n\tdistance: 0,\n\tfrom: NONE,\n\tto: NONE,\n\ttrips: 0\n}, |$acc, $val, $i| {\n\tRETURN IF $i = 0 {\n\t\t{\n\t\t\tcity: $val.city,\n\t\t\tdistance: 0,\n\t\t\tfrom: $val.city,\n\t\t\tto: NONE,\n\t\t\ttrips: $acc.trips + 1\n\t\t}\n  }\n\tELSE {\n\t\t{\n\t\t\tcity: $val.city,\n\t\t\tdistance: (SELECT VALUE distance FROM ONLY to WHERE in = $acc.city AND out = $val.city LIMIT 1) + $acc.distance,\n\t\t\tfrom: $acc.from,\n\t\t\tto: $val.city,\n\t\t\ttrips: $acc.trips + 1\n\t\t}\n  };\n}).chain(|$v| { {\n\tdistance: $v.distance,\n\tfrom: $v.from,\n\tto: $v.to,\n\ttrips: $v.trips\n} });\n```\n\n----------------------------------------\n\nTITLE: RawQuery Method Usage Example in SurrealDB .NET SDK\nDESCRIPTION: Example showing how to use RawQuery() with parameters to execute queries and retrieve results. Demonstrates parameter passing and result extraction.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/writing-surrealql.mdx#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Assign the variable on the connection\nvar @params = new Dictionary<string, object> { { \"table\", \"person\" } };\nvar result = await db.RawQuery(\"CREATE person; SELECT * FROM type::table($table);\", @params);\n\n// Get the first result from the first query\nvar created = result.GetValue<Person>(0);\n\n// Get all of the results from the second query\nvar people = result.GetValue<List<Person>>(1);\n```\n\n----------------------------------------\n\nTITLE: Implementing Secure Password Handling in SurrealDB\nDESCRIPTION: This SurrealQL code demonstrates secure user authentication implementation with Argon2 password hashing. It defines a user table with appropriate permissions, fields validation, and secure signup/signin methods using cryptographic comparison.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE user SCHEMAFULL\n  -- Only allow users to query their own record, including their password.\n\tPERMISSIONS\n\t\tFOR select, update, delete WHERE id = $auth.id;\n\nDEFINE FIELD name ON user TYPE string;\nDEFINE FIELD email ON user TYPE string ASSERT string::is::email($value);\nDEFINE FIELD password ON user TYPE string;\n\nDEFINE INDEX email ON user FIELDS email UNIQUE;\n\nDEFINE ACCESS user ON DATABASE TYPE RECORD\n\tSIGNUP (\n\t\tCREATE user CONTENT {\n\t\t\tname: $name,\n\t\t\temail: $email,\n\t\t\tpassword: crypto::argon2::generate($password) -- Use Argon2 to generate the hash.\n\t\t}\n\t)\n\tSIGNIN (\n\t\tSELECT * FROM user WHERE email = $email AND\n\t\t  crypto::argon2::compare(password, $password) -- Use Argon2 to compare the hashes.\n\t);\n```\n\n----------------------------------------\n\nTITLE: Querying Database Info\nDESCRIPTION: SurrealQL statements to retrieve information about the database and namespace\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/working-with-surrealdb-over-http-via-postman.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nINFO FOR ROOT / DB / NS\n```\n\nLANGUAGE: surql\nCODE:\n```\nINFO FOR NS\n```\n\n----------------------------------------\n\nTITLE: Basic SELECT Query Examples\nDESCRIPTION: Demonstrates fundamental SELECT queries including creating records, selecting all fields, specific fields, and using the ONLY keyword.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:tobie SET\n\tname.first = \"Tobie\",\n\taddress = \"1 Bagshot Row\",\n\temail = \"tobie@surrealdb.com\";\n\n-- Select all fields from a table\nSELECT * FROM person;\n\n-- Select specific fields from a table\nSELECT name, address, email FROM person;\n\n-- Select all fields from a specific record\nSELECT * FROM person:tobie;\n\n-- Select specific fields from a specific record\nSELECT name, address, email FROM person:tobie;\n\n-- Select just a single record\n-- Using the ONLY keyword, just an object\n-- for the record in question will be returned.\n-- This, instead of an array with a single object.\nSELECT * FROM ONLY person:tobie;\n```\n\n----------------------------------------\n\nTITLE: Creating a Record with Nested Data in SurrealQL\nDESCRIPTION: This example demonstrates creating a person record with nested address information using the CREATE statement in SurrealQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person CONTENT {\n    name: \"John Doe\",\n    age: 30,\n    address: {\n      city: \"New York\",\n      country: \"USA\"\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Collecting All Paths in a Friend Network using SurrealDB\nDESCRIPTION: Demonstrates the use of the '+path' algorithm to collect all possible paths in a friend network.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_33\n\nLANGUAGE: surql\nCODE:\n```\nperson:you.{..+path}->knows->person;\n```\n\n----------------------------------------\n\nTITLE: Creating Records in SurrealDB using JavaScript\nDESCRIPTION: Creates a new record in the SurrealDB database. This method is used for inserting new data into a table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.create<T,U>(thing,data)\n```\n\n----------------------------------------\n\nTITLE: Defining a Database Token in SurrealQL\nDESCRIPTION: This snippet demonstrates defining a token with database-level authorization using the HS512 signature algorithm. Database tokens provide access to all tables within a specific database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/token.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\n-- Specify the namespace and database for the token\nUSE NS abcum DB app_vitalsense;\n\n-- Set the name of the token\nDEFINE TOKEN token_name\n  -- Use this OAuth provider for database authorization\n  ON DATABASE\n  -- Specify the cryptographic signature algorithm used to verify the token\n  TYPE HS512\n  -- Specify the public key so we can verify the authenticity of the token\n  VALUE \"sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8\"\n;\n```\n\n----------------------------------------\n\nTITLE: Using a Separate Counter Record for Auto-incrementing IDs in SurrealDB\nDESCRIPTION: This snippet shows a more performant method for implementing auto-incrementing IDs using a separate counter record. It uses UPSERT statements within transactions to ensure atomicity and demonstrates error handling.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_32\n\nLANGUAGE: surql\nCODE:\n```\nBEGIN TRANSACTION;\nUPSERT person_id:counter SET num += 1;\n-- Creates a person:1\nCREATE type::thing(\"person\", person_id:counter.num);\nCOMMIT TRANSACTION;\n\nBEGIN TRANSACTION;\n-- Latest ID is now 2\nUPSERT person_id:counter SET num += 1;\n-- Whoops, invalid datetime format\n-- Transaction fails and all changes are rolled back\nCREATE type::thing(\"person\", person_id:counter.num) SET created_at = <datetime>'2025_01+01';\nCOMMIT TRANSACTION;\n\n-- Latest ID is still 1\nRETURN person_id:counter.num;\n```\n\n----------------------------------------\n\nTITLE: Method Chaining for Complex Queries in SurrealDB 2.0\nDESCRIPTION: Demonstration of method chaining syntax in SurrealDB 2.0, allowing for more readable and functional-style queries. This approach enables left-to-right reading of complex operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n[[1,2,3],[1,4,6],[4,2,4],2].flatten().distinct().windows(2).len();\n```\n\n----------------------------------------\n\nTITLE: Inferring Price Predictions using ML Model in SurrealQL SELECT Statement\nDESCRIPTION: Demonstrates how to use the ML function to infer price predictions for all rows in the house_listing table. The function is used within a SELECT statement to create a new column with the predicted prices.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/ml/functions.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nSELECT \n\t*, \n\tml::house-price-prediction<0.0.1>({ squarefoot: squarefoot_col, num_floors: num_floors_col }) AS price_prediction \nFROM house_listing;\n```\n\n----------------------------------------\n\nTITLE: Order of Operations when Setting Field Values in SurrealDB\nDESCRIPTION: Explains how field computations are processed in alphabetical order, which affects dependent field values. This example shows how the calculation timing impacts composite fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_26\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE person SCHEMAFULL;\n\nDEFINE FIELD first_name ON TABLE person TYPE string VALUE string::lowercase($value);\nDEFINE FIELD last_name  ON TABLE person TYPE string VALUE string::lowercase($value);\nDEFINE FIELD full_name  ON TABLE person             VALUE first_name + ' ' + last_name;\n\n// Creates a `person` with `full_name` of \"bob BOBSON\", not \"bob bobson\"\nCREATE person SET first_name = \"Bob\", last_name = \"Bobson\";\n```\n\n----------------------------------------\n\nTITLE: Complex Method Chaining in SurrealDB\nDESCRIPTION: Illustrates how method chaining improves readability when multiple functions are called in sequence. The example combines array push and join operations using both traditional and method chaining approaches.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_57\n\nLANGUAGE: surql\nCODE:\n```\n-- Traditional syntax\narray::join(array::push([\"Again\", \"again\"], \"again\"));\n\n-- Method chaining syntax\n[\"Again\", \"again\"].push(\"again\").join(\" and \");\n```\n\n----------------------------------------\n\nTITLE: Removing Fields in SurrealQL (Neo4j Equivalent)\nDESCRIPTION: Shows how to remove specific fields from records in SurrealQL compared to Neo4j's REMOVE operation. Uses the UNSET keyword to delete a field while preserving the record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_17\n\nLANGUAGE: SurrealQL\nCODE:\n```\nUPDATE person UNSET last_name WHERE name = \"Jane\"\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Operations for Person Management\nDESCRIPTION: Implements create, read, update, delete, and list operations for person records using SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nconst PERSON: &str = \"person\";\n\n#[post(\"/person/{id}\")]\npub async fn create_person(\n    id: Path<String>,\n    person: Json<PersonData>,\n) -> Result<Json<Option<Person>>, Error> {\n    let person = DB.create((PERSON, &*id)).content(person).await?;\n    Ok(Json(person))\n}\n\n#[get(\"/person/{id}\")]\npub async fn read_person(id: Path<String>) -> Result<Json<Option<Person>>, Error> {\n    let person = DB.select((PERSON, &*id)).await?;\n    Ok(Json(person))\n}\n\n#[put(\"/person/{id}\")]\npub async fn update_person(\n    id: Path<String>,\n    person: Json<PersonData>,\n) -> Result<Json<Option<Person>>, Error> {\n    let person = DB.update((PERSON, &*id)).content(person).await?;\n    Ok(Json(person))\n}\n\n#[delete(\"/person/{id}\")]\npub async fn delete_person(id: Path<String>) -> Result<Json<Option<Person>>, Error> {\n    let person = DB.delete((PERSON, &*id)).await?;\n    Ok(Json(person))\n}\n\n#[get(\"/people\")]\npub async fn list_people() -> Result<Json<Vec<Person>>, Error> {\n    let people = DB.select(PERSON).await?;\n    Ok(Json(people))\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic with IF ELSE in SurrealQL\nDESCRIPTION: Shows how to use conditional logic with the LET statement to define parameters based on type checking.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/let.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nLET $num = 10;\n\nLET $num_type =\n         IF type::is::int($num)     { \"integer\" }\n    ELSE IF type::is::decimal($num) { \"decimal\" }\n    ELSE IF type::is::float($num)   { \"float\"   };\n```\n\n----------------------------------------\n\nTITLE: Breaking Down Complex Graph Queries Step by Step\nDESCRIPTION: Demonstrates how to break down a complex graph query into logical steps for better understanding, showing the path from a person to products purchased by similar people.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_29\n\nLANGUAGE: surql\nCODE:\n```\n-- Starting with Tobie\nperson:tobie\n-- move on to his purchased products\n->purchased->product\n-- that were also purchased by persons...\n<-purchased<-person\n-- what are all of those persons' purchased products?\n->purchased->product\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Different Methods\nDESCRIPTION: Demonstrates three different methods for updating records: update() for complete replacement, merge() for partial updates, and patch() for specific field modifications.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/core/data-querying.mdx#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$person = $db->update($person->id, [\n\t\"name\" => \"Tobie\",\n\t\"lastname\" => \"Morgan Hitchcock\",\n\t\"age\" => 31\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$person = $db->merge($person->id, [\n\t\"age\" => 31\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$person = $db->patch($person->id, [\n\t\"path\" => \"/hobbies/0\",\n\t\"op\" => \"replace\",\n\t\"value\" => \"writing\"\n]);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ListenLive in SurrealDB .NET SDK\nDESCRIPTION: This example demonstrates how to use the ListenLive method to consume a live query. The method takes a queryUuid parameter and returns a stream of Person objects that can be consumed by the application.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/listen_live.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait using var liveQuery = db.ListenLive<Person>(queryUuid);\n\n// Consume the live query...\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Patch in SurrealDB using Rust\nDESCRIPTION: Demonstrates how to update records in SurrealDB using the patch method. It shows applying JSON Patch operations to all records in a table and to a specific record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\n// Update all records in a table\nlet people: Vec<Person> = db.update(\"person\")\n    .patch(PatchOp::replace(\"/created_at\", Datetime::default()))\n    .await?;\n\n// Update a record with a specific ID\nlet person: Option<Person> = db.update((\"person\", \"tobie\"))\n    .patch(PatchOp::replace(\"/settings/active\", false))\n    .patch(PatchOp::add(\"/tags\", &[\"developer\", \"engineer\"]))\n    .patch(PatchOp::remove(\"/temp\"))\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Creating a Point Geometry Using Coordinates in SurrealQL\nDESCRIPTION: This snippet demonstrates how to update a record with a geometry point using the tuple format (longitude, latitude). This is the simplest way to define a geolocation point in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/geometries.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE city:london SET centre = (-0.118092, 51.509865);\n```\n\n----------------------------------------\n\nTITLE: Bulk Inserting Multiple Records in SurrealQL\nDESCRIPTION: This example shows how to perform a bulk insert of multiple records in a single query using an array of objects.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/insert.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO person [\n   { id: \"jaime\", name: \"Jaime\", surname: \"Morgan Hitchcock\" },\n   { id: \"tobie\", name: \"Tobie\", surname: \"Morgan Hitchcock\" },\n]\n```\n\n----------------------------------------\n\nTITLE: Switching Namespace and Database in SurrealDB JavaScript SDK\nDESCRIPTION: Switches to a specific namespace and database within SurrealDB. This method allows you to change the context of your database operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.use(namespace,database)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Create Method in .NET SDK for SurrealDB\nDESCRIPTION: These examples demonstrate different ways to use the Create method. They show how to create a record with a random ID, create a record with specific fields, and create a record with a specific ID and nested objects.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/create.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Create a record with a random ID\nvar person = await db.Create<Person>(\"person\");\n\n// Create a record with a random ID & specific fields\nvar person = await db.Create(\"person\", new Person { Name = \"Tobie\" });\n\n// Create a record with a specific ID\nvar personToCreate = new Person\n{\n    Id = (\"person\", \"tobie\"),\n    Name = \"Tobie\",\n    Settings = new Settings\n    {\n        Active = true,\n        Marketing = true,\n    },\n};\nvar result = await db.Create(personToCreate);\n```\n\n----------------------------------------\n\nTITLE: Recursive Graph Traversal with Range in SurrealQL\nDESCRIPTION: Uses a range (1 to 20) to follow the path as far as possible, up to 20 times. The query stops at the 5th and final depth because there are no more connections after city:5.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_50\n\nLANGUAGE: surql\nCODE:\n```\ncity:1.{1..20}->to->city;\n```\n\n----------------------------------------\n\nTITLE: Manual Multi-level Graph Traversal in SurrealQL\nDESCRIPTION: Demonstrates a traditional approach to traversing multiple levels of a graph by explicitly specifying each hop. This query finds the fourth city from city:1 by traversing three graph edges.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_44\n\nLANGUAGE: surql\nCODE:\n```\nSELECT ->to->city->to->city->to->city AS fourth_city FROM city:1;\n```\n\n----------------------------------------\n\nTITLE: Database Connection and Schema Setup\nDESCRIPTION: Database connection configuration, authentication, and schema definition implementation\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nDB.connect::<Ws>(\"localhost:8000\").await?;\n\nDB.signin(Root {\n    username: \"root\",\n    password: \"root\",\n})\n.await?;\n\nDB.use_ns(\"test\").use_db(\"test\").await?;\n\nDB.query(\n    \"\nDEFINE TABLE IF NOT EXISTS person SCHEMALESS\n    PERMISSIONS FOR \n        CREATE, SELECT WHERE $auth,\n        FOR UPDATE, DELETE WHERE created_by = $auth;\nDEFINE FIELD IF NOT EXISTS name ON TABLE person TYPE string;\nDEFINE FIELD IF NOT EXISTS created_by ON TABLE person VALUE $auth READONLY;\n\nDEFINE INDEX IF NOT EXISTS unique_name ON TABLE user FIELDS name UNIQUE;\nDEFINE ACCESS IF NOT EXISTS account ON DATABASE TYPE RECORD\nSIGNUP ( CREATE user SET name = $name, pass = crypto::argon2::generate($pass) )\nSIGNIN ( SELECT * FROM user WHERE name = $name AND crypto::argon2::compare(pass, $pass) )\nDURATION FOR TOKEN 15m, FOR SESSION 12h\n;\",\n)\n.await?;\n```\n\n----------------------------------------\n\nTITLE: Authenticating Connection with JWT Token in JavaScript\nDESCRIPTION: This example demonstrates how to use the `authenticate()` method to authenticate the current connection with a JWT token. The method is called with a JWT token string as its argument and is used with the `await` keyword, indicating it returns a Promise.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/authenticate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait db.authenticate('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTdXJyZWFsREIiLCJpYXQiOjE1MTYyMzkwMjIsIm5iZiI6MTUxNjIzOTAyMiwiZXhwIjoxODM2NDM5MDIyLCJOUyI6InRlc3QiLCJEQiI6InRlc3QiLCJTQyI6InVzZXIiLCJJRCI6InVzZXI6dG9iaWUifQ.N22Gp9ze0rdR06McGj1G-h2vu6a6n9IVqUbMFJlOxxA');\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SurrealDB using Java SDK\nDESCRIPTION: This code snippet demonstrates how to authenticate with SurrealDB using different credential types including Root, Namespace, and Database. It shows the process of connecting to the database, setting the namespace and database, and then signing in with various authentication methods.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/core/handling-authentication.mdx#2025-04-16_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.surrealdb.example;\n\nimport com.surrealdb.Surreal;\nimport com.surrealdb.signin.Database;\nimport com.surrealdb.signin.Namespace;\nimport com.surrealdb.signin.Root;\n\npublic class Example {\n\n    public static void main(String[] args) {\n        try (final Surreal driver = new Surreal()) {\n          \tdriver.connect(\"wss://example.com\");\n            driver.useNs(\"example\").useDb(\"example\");\n\n\t\t\t// Authenticate as root user\n\t\t\tdriver.signin(new Root(\"root\", \"root\"));\n\n\t\t\t// Authenticate as a namespace user\n\t\t\tdriver.signin(new Namespace(\"root\", \"root\", \"ns\"));\n\n\t\t\t// Authenticate as a database user\n            driver.signin(new Database(\"root\", \"root\", \"ns\", \"db\"));\n\t\t}\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: REMOVE Statement Syntax in SurrealQL\nDESCRIPTION: The syntax for the REMOVE statement in SurrealQL, showing various options for removing different types of resources such as namespaces, databases, users, access, events, fields, indexes, analyzers, functions, params, and tables.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/remove.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nREMOVE [\n\tNAMESPACE [ IF EXISTS ] @name\n\t| DATABASE [ IF EXISTS] @name\n\t| USER [ IF EXISTS ] @name ON [ ROOT | NAMESPACE | DATABASE ]\n\t| ACCESS [ IF EXISTS ] @name ON [ NAMESPACE | DATABASE ]\n\t| EVENT [ IF EXISTS ] @name ON [ TABLE ] @table\n\t| FIELD [ IF EXISTS ] @name ON [ TABLE ] @table\n\t| INDEX [ IF EXISTS ] @name ON [ TABLE ] @table\n    | ANALYZER [ IF EXISTS ] @name\n    | FUNCTION [ IF EXISTS ] fn::@name\n    | PARAM [ IF EXISTS ] $@name\n\t| TABLE [ IF EXISTS ] @name\n]\n```\n\n----------------------------------------\n\nTITLE: Using THROW in User Authentication in SurrealQL\nDESCRIPTION: This snippet shows how to use the THROW statement within a custom user authentication process. It throws an error if invalid credentials are provided.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/throw.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- In this example, we throw a custom error when a user provides invalid signin details\nDEFINE ACCESS user ON DATABASE TYPE RECORD\n\tSIGNIN {\n\t\tLET $user = (SELECT * FROM user WHERE username = $username AND crypto::argon2::compare(password, $password));\n\t\tIF !$user {\n\t\t\tTHROW \"You either provided invalid credentials, or a user with the username \" + <string> $username + \" might not exist.\";\n\t\t};\n\n\t\tRETURN $user;\n\t}\n\tDURATION FOR SESSION 1w\n;\n```\n\n----------------------------------------\n\nTITLE: Unfolded Recursive Query in SurrealDB\nDESCRIPTION: Illustrates how a recursive query unfolds, showing the structure at each depth level.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_25\n\nLANGUAGE: surql\nCODE:\n```\n-- Original query\nplanet:earth.{1..2}.{ name, id, contains: ->has->(?).@ };\n\n-- Unfolds to:\nplanet:earth\n\t.{\n\t\tname, \n\t\tid,\n\t\tcontains: ->has->(?).{\n\t\t  name, \n\t\t  id,\n\t\t  contains: ->has->(?)\n\t    }\n\t};\n```\n\n----------------------------------------\n\nTITLE: Fetching and Replacing Record IDs with Actual Values in SurrealQL\nDESCRIPTION: This example shows how to use the FETCH clause to replace record ids with their actual record values. It retrieves article data including the author's full name and category, fetching related author and category information.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/fetch.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nSELECT title, category, author.name.full AS author_name FROM article\nWHERE author.age < 30\nFETCH author, category;\n```\n\n----------------------------------------\n\nTITLE: Transaction Cancellation Example in SurrealQL\nDESCRIPTION: Demonstrates a complete transaction workflow with account balance updates that gets cancelled using the CANCEL statement, rolling back all changes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/cancel.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nBEGIN TRANSACTION;\n\n-- Setup accounts\nCREATE account:one SET balance = 135605.16;\nCREATE account:two SET balance = 91031.31;\n\n-- Move money\nUPDATE account:one SET balance += 300.00;\nUPDATE account:two SET balance -= 300.00;\n\n-- Rollback all changes\nCANCEL TRANSACTION;\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Query for patch Method\nDESCRIPTION: This snippet shows the SurrealQL query that is executed in the database when the `.patch()` method is called. It uses the 'UPDATE' statement with the 'PATCH' keyword.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/patch.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $thing PATCH $data;\n```\n\n----------------------------------------\n\nTITLE: Inserting Relations with InsertRelation<T> Method in SurrealDB .NET\nDESCRIPTION: Method for inserting relationships between records in the database. Supports creating connections between records with additional metadata.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/data-manipulation.mdx#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.InsertRelation(\n    new WroteRelation\n    {\n        In = (\"user\", \"u1\"),\n        Out = (\"post\", \"p1\"),\n        CreatedAt = now,\n        NumberOfPages = 144\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Fields with Input Values on Duplicate Key in SurrealQL\nDESCRIPTION: This example shows how to update fields of an existing record with values from the attempted insert using the $input parameter in the ON DUPLICATE KEY UPDATE clause.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/insert.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO city (id, population, at_year) VALUES (\"Calgary\", 1665000, 2024)\nON DUPLICATE KEY UPDATE\n\tpopulation = $input.population,\n\tat_year = $input.at_year;\n```\n\n----------------------------------------\n\nTITLE: Authentication Methods for SurrealDB PHP\nDESCRIPTION: Methods for managing user authentication, including signup, signin, token management, and user information retrieval.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$db->signup($vars)\n$db->signin($vars)\n$db->invalidate()\n$db->authenticate(token)\n$db->info()\n```\n\n----------------------------------------\n\nTITLE: Inserting Single and Multiple Relations in TypeScript\nDESCRIPTION: This example demonstrates how to use the insertRelation method to insert both a single relation and multiple relations. It defines a Likes type and uses RecordId to reference related records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/insertrelation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Likes = {\n\tid: RecordId<\"likes\">;\n\tin: RecordId<\"person\">;\n\tout: RecordId<\"post\">;\n};\n\n// Insert a single record\nconst [person] = await db.insertRelation<Likes>('likes', {\n\tin: new RecordId('person', 'tobie'),\n\tout: new RecordId('post', 123),\n});\n\n// Insert multiple records across tables\nconst people = await db.insertRelation<Likes>('likes', [\n\t{\n    \tin: new RecordId('person', 'tobie'),\n    \tout: new RecordId('post', 123),\n\t},\n\t{\n    \tin: new RecordId('person', 'jaime'),\n    \tout: new RecordId('post', 456),\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Extracting Data from RecordId in PHP for SurrealDB\nDESCRIPTION: Shows how to access the table name and identifier from a RecordId object. Includes examples for both simple and complex identifiers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/data-types.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Simple\n$rid = new RecordId(\"person\", \"john\");\n$rid->tb // \"person\"\n$rid->id // \"john\"\n\n// Complex\n$rid = new RecordId(\"recording\", [\"city\" => \"London\", \"data\" => 123 ]);\n\n$rid->id         // [ \"city\" => \"London\", \"data\" => 123 ]\n$rid->id[\"city\"] // \"London\"\n$rid->id[\"data\"] // 123\n```\n\n----------------------------------------\n\nTITLE: MERGE Clause in UPSERT\nDESCRIPTION: Shows how to use MERGE clause to upsert specific fields without affecting other existing data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/upsert.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nUPSERT person MERGE {\n\tsettings: {\n\t\tmarketing: true,\n\t},\n};\n\nUPSERT person:tobie MERGE {\n\tsettings: {\n\t\tmarketing: true,\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Complex Purchase Event Example\nDESCRIPTION: Advanced event example that handles purchase creation by establishing relationships between customers and products while creating log entries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/event.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE EVENT purchase_made ON TABLE purchase\n    WHEN $before == NONE\n    THEN {\n        LET $customer = (SELECT * FROM customer WHERE id = $after.customer);\n        LET $product = (SELECT * FROM product WHERE id = $after.product);\n\n        RELATE $customer->bought->$product CONTENT {\n            quantity: $after.quantity,\n            total: $after.total,\n            status: 'Pending',\n        };\n\n        CREATE log SET\n            customer_id = $after.customer,\n            product_id = $after.product,\n            action = 'purchase_created',\n            timestamp = time::now();\n    };\n```\n\n----------------------------------------\n\nTITLE: Concurrent Processing with PARALLEL Clause in SurrealQL\nDESCRIPTION: Example of using the PARALLEL clause for concurrent processing of large result sets in SurrealDB. This improves performance for complex queries with many interconnected records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_21\n\nLANGUAGE: surql\nCODE:\n```\n-- Fetch and process the person, purchased and product targets in parallel\n-- Select every product that was purchased by a person that purchased a product that person tobie also purchased\nSELECT ->purchased->product<-purchased<-person->purchased->product FROM person:tobie PARALLEL;\n```\n\n----------------------------------------\n\nTITLE: Using DEFAULT Clause in SurrealDB Field Definition\nDESCRIPTION: This snippet demonstrates the use of the DEFAULT clause when defining a field. It shows how a default value is calculated if no other value is provided, but can be overridden in queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD updated ON TABLE user DEFAULT time::now();\n\n-- Set `updated` to the year 1900\nCREATE user SET updated = d\"1900-01-01\";\n-- Then set to the year 1910\nUPDATE user SET updated = d\"1910-01-01\";\n```\n\n----------------------------------------\n\nTITLE: Constructing and Using StringRecordId in C#\nDESCRIPTION: This snippet demonstrates how to create and use StringRecordId objects. It shows direct construction, explicit casting from a string, and using StringRecordId in a client.Select method call.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/data-types.mdx#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// Table is \"person\"\n// Unique identifier on the table is \"john\"\nvar rid = new StringRecordId(\"person:john\");\n\n// Alternatively, a StringRecordId can be inferred explicitly from a string\nvar rid = (StringRecordId)\"person:john\";\nawait client.Select((StringRecordId)\"person:john\");\n```\n\n----------------------------------------\n\nTITLE: LIVE SELECT with DIFF Mode\nDESCRIPTION: Example showing LIVE SELECT with DIFF mode enabled, which returns changes as JSON Patch messages.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/live.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nLIVE SELECT DIFF FROM person;\n\n['b87cbb0d-ca15-4f0a-8f86-caa680672aa5']\n```\n\n----------------------------------------\n\nTITLE: Importing Data Using .Import() Method in .NET SDK for SurrealDB\nDESCRIPTION: This snippet demonstrates the syntax for the Import method in the .NET SDK for SurrealDB. It takes a string input containing SurrealQL script and an optional cancellationToken for graceful cancellation of asynchronous operations. This method requires SurrealDB version 2.0.0 or higher.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/import.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Import(string)\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Array-Based IDs in SurrealQL\nDESCRIPTION: Shows how to create records using arrays as identifiers, which is useful for record range queries and provides better performance than WHERE clause filtering.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\nCREATE weather:['London', d'2025-02-13T05:00:00Z'] SET\n    temperature = 5.7,\n    conditions = \"cloudy\";\n```\n\n----------------------------------------\n\nTITLE: Deleting Users with SurrealDB in TypeScript\nDESCRIPTION: Shows how to delete user records from SurrealDB using the delete method. Includes error handling and database connection management.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/start.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { jsonify } from \"surrealdb\";\nimport { getDb } from \"../utils/surreal\";\n\nexport async function deleteUser() {\n  const db = await getDb();\n  if (!db) {\n    console.error(\"Database not initialized\");\n    return;\n  }\n  try {\n    const deletedUser = await db.delete('User');\n    console.log(\"Deleted user:\", jsonify(deletedUser));\n    return deletedUser;\n  } catch (err) {\n    console.error(\"Failed to delete user:\", err);\n  } finally {\n    await db.close();\n  }\n}\n\ndeleteUser();\n```\n\n----------------------------------------\n\nTITLE: Creating Record Links Between User and Comments in SurrealDB\nDESCRIPTION: This snippet demonstrates how to create a user record and link it to multiple comment records using record links. The user record stores references to comments in an array field.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nLET $new_user = CREATE ONLY user SET name = \"User McUserson\";\n-- Create a new comment, use the output to update the user\nUPDATE $new_user SET comments += (CREATE ONLY comment SET \n    text = \"I learned something new!\", \n    created_at = time::now())\n    .id;\nUPDATE $new_user SET comments += (CREATE ONLY comment SET\n    text = \"I don't get it, can you explain?\",\n    created_at = time::now())\n    .id;\n```\n\n----------------------------------------\n\nTITLE: Patching Records in SurrealDB using .NET SDK\nDESCRIPTION: Applies JSON Patch changes to all records or a specific record in the database. This method patches document/record data with the specified JSON Patch data. It requires a table name or a specific RecordId to patch, and the JSON Patch data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/data-manipulation.mdx#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Patch<T>(resource, data)\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Update a record with a specific ID\nvar result = await db.Patch((\"person\", \"tobie\"), patches);\n\n// Update all records in a table\nvar result = await db.Patch(\"person\", patches);\n```\n\n----------------------------------------\n\nTITLE: KNN Search Results in SurrealDB\nDESCRIPTION: The output from a KNN vector search query in SurrealDB, showing the matched actors with their distance scores and flags. This demonstrates how the vector::distance::knn() function returns the computed distances from the query vector.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/vector-search.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t[\n\t\t{\n\t\t\tdistance: 0.09999999999999998f,\n\t\t\tflag: true,\n\t\t\tid: actor:1\n\t\t},\n\t\t{\n\t\t\tdistance: 0.412310562561766f,\n\t\t\tflag: true,\n\t\t\tid: actor:4\n\t\t}\n\t]\n];\n```\n\n----------------------------------------\n\nTITLE: Signing Up with Scopes in TypeScript\nDESCRIPTION: This example shows how to use the `.signup()` method with Scopes in SurrealDB 1.x. It includes the required namespace, database, and scope properties, along with additional variables needed for authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/signup.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await db.signup({\n\tnamespace: 'surrealdb',\n\tdatabase: 'docs',\n\tscope: 'user',\n\n\t// Also pass any properties required by the scope definition\n\temail: 'info@surrealdb.com',\n\tpass: '123456',\n});\n```\n\n----------------------------------------\n\nTITLE: Database Information Query\nDESCRIPTION: Example of querying database-level configuration including users, tables, params, models, functions, and analyzers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/info.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nINFO FOR DB;\n```\n\nLANGUAGE: surql\nCODE:\n```\n{\n    accesses: {},\n    analyzers: {},\n    apis: {},\n    buckets: {},\n    configs: {},\n    functions: {},\n    models: {},\n    params: {},\n    tables: {\n        person: 'DEFINE TABLE person TYPE ANY SCHEMALESS PERMISSIONS NONE'\n    },\n    users: {\n        db_user: \"DEFINE USER db_user ON DATABASE PASSHASH '$argon2id$v=19$m=19456,t=2,p=1$S8WJ88AnJwWah2VjqnmnoA$OJcQs9SHC5R5q3kOimiKsV5fIUpwZiax3RUcW8VQupk' ROLES OWNER DURATION FOR TOKEN 1h, FOR SESSION NONE\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Table Information with STRUCTURE Clause\nDESCRIPTION: Example showing the difference between regular table info and structured output.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/info.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE user SCHEMAFULL;\nDEFINE FIELD name ON user TYPE STRING;\n\nINFO FOR TABLE user;\nINFO FOR TABLE user STRUCTURE;\n```\n\n----------------------------------------\n\nTITLE: Pagination with LIMIT and START in SurrealQL\nDESCRIPTION: Examples of implementing pagination in SurrealDB queries using the LIMIT clause with the START parameter. This allows retrieving records in batches for efficient data handling.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\n-- Start at record 50 and select the following 50 records\nSELECT * FROM user LIMIT 50 START 50;\n```\n\n----------------------------------------\n\nTITLE: Creating a Person Record with SurrealQL in Surrealist\nDESCRIPTION: This query creates a new record in the 'person' table with name and age fields. It demonstrates the basic syntax for creating records in SurrealDB using the CREATE statement with the SET keyword to define field values.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/surrealql/surrealist.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person SET name = \"John\", age = 30;\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB in C#\nDESCRIPTION: Demonstrates the use of the Connect() method to establish a connection to the SurrealDB instance. This method is automatically called before any other operation but can be called explicitly for performance optimization.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/create-a-new-connection.mdx#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Connect();\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Record with UPDATE in SurrealDB\nDESCRIPTION: Demonstrates updating a specific record using its ID in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/start.mdx#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE person:john SET\n\tname.first = 'David',\n\tname.full = string::join(' ', name.first, name.last);\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Relation Field Types in SurrealDB\nDESCRIPTION: Demonstrates how to define and constrain the in/out fields of a graph relation table with specific record types.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_36\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD in ON TABLE wrote TYPE record<author>;\nDEFINE FIELD out ON TABLE wrote TYPE record<book>;\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Connection Examples in PHP\nDESCRIPTION: Demonstrates various ways to connect to SurrealDB endpoints including local connections, remote connections, and connections with namespace and database specifications.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/connect.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Connect to a local endpoint\n$db->connect('http://127.0.0.1:8000/rpc');\n\n// Connect to a remote endpoint\n$db->connect('https://cloud.surrealdb.com/rpc');\n\n// Specify a namespace and database pair to use\n$db->connect('https://cloud.surrealdb.com/rpc', [\n\t\"namespace\" => \"surrealdb\",\n\t\"database\" => \"docs\",\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing ONLY Clause in SurrealDB SELECT Statement\nDESCRIPTION: Shows how to use the ONLY clause to filter a single resource from an array or limit the result to one record when multiple resources might be returned.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_26\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM ONLY person:john;\n\n-- Fails\nSELECT * FROM ONLY table_name;\n-- Succeeds\nSELECT * FROM ONLY table_name LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Authenticating Namespace User in SurrealDB with TypeScript\nDESCRIPTION: This code shows how to authenticate with a Namespace user in SurrealDB. It uses the signin method with namespace, username, and password parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/handling-authentication.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Authenticate with a Namespace user\nconst token = await db.signin({\n\tnamespace: 'surrealdb',\n\tusername: 'tobie',\n\tpassword: 'surrealdb',\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Field Access Methods in SurrealQL\nDESCRIPTION: Shows different ways to access specific fields or all fields of a record, demonstrating the different results obtained with various idiom patterns.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\n-- Returns 'tobie'\n(SELECT * FROM ONLY person:tobie).name;\n-- Returns [ person:tobie ]\n(SELECT * FROM ONLY person:tobie).id;\n-- Returns both name and id inside an array\n(SELECT * FROM ONLY person:tobie).*;\n```\n\n----------------------------------------\n\nTITLE: Creating Relations Before Records in SurrealDB\nDESCRIPTION: Demonstrates how graph tables can be created before the related records exist, with an option to enforce record existence using the ENFORCED keyword.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_19\n\nLANGUAGE: surql\nCODE:\n```\n-- Works fine\nRELATE person:one->likes->person:two;\n-- Returns []\nperson:one->likes->person;\n-- Finally create the 'person' records\nCREATE person:one, person:two;\n-- Now it returns [ person:two ]\nperson:one->likes->person;\n```\n\n----------------------------------------\n\nTITLE: LIVE SELECT Statement Syntax\nDESCRIPTION: The formal syntax definition for LIVE SELECT statements in SurrealQL, showing optional clauses for field selection, diff mode, targeting, conditions, and fetching.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/live.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nLIVE SELECT\n\t[\n\t\t[ VALUE ] @fields [ AS @alias ]\n\t\t| DIFF\n\t]\n\tFROM @targets\n\t[ WHERE @conditions ]\n\t[ FETCH @fields ... ]\n;\n```\n\n----------------------------------------\n\nTITLE: Extracting Table Name from SurrealDB Record ID using meta::tb()\nDESCRIPTION: The meta::tb() function extracts and returns the table name from a SurrealDB Record ID. This example shows its usage in a RETURN statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/meta.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nRETURN meta::tb(person:tobie);\n\n\"person\"\n```\n\n----------------------------------------\n\nTITLE: Creating Graph Structure in SurrealDB\nDESCRIPTION: Creates a hierarchical data structure with planets, countries, states/provinces, and cities using CREATE, UPDATE, and RELATE statements. Sets both record links and graph relationships between entities.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_17\n\nLANGUAGE: surql\nCODE:\n```\nCREATE\n\t// One planet\n\tplanet:earth,\n\t// Two countries\n\tcountry:us, country:canada,\n\t// Four states/provinces\n\tstate:california, state:texas,\n\tprovince:ontario, province:bc,\n\t// Eight cities\n\tcity:los_angeles, city:san_francisco,\n\tcity:houston,     city:dallas,\n\tcity:vancouver,   city:victoria,\n\tcity:toronto,     city:ottawa\n\t// Give them each names like 'earth', 'us', 'bc', etc.\n\tSET name = id.id();\n\n// Record and graph links from planet to country\nUPDATE planet:earth     SET next = [country:us, country:canada];\nRELATE planet:earth     ->has->    [country:us, country:canada];\n\n// Record and graph links from country to state/province\nUPDATE country:us       SET next = [state:california, state:texas];\nUPDATE country:canada   SET next = [province:ontario, province:bc];\nRELATE country:us       ->has->    [state:california, state:texas];\nRELATE country:canada   ->has->    [province:bc, province:ontario];\n\n// Record and graph links from state/province to city\nUPDATE state:california SET next = [city:los_angeles, city:san_francisco];\nUPDATE state:texas      SET next = [city:houston, city:dallas];\nUPDATE province:ontario SET next = [city:toronto, city:ottawa];\nUPDATE province:bc      SET next = [city:vancouver, city:victoria];\nRELATE state:california ->has->    [city:los_angeles, city:san_francisco];\nRELATE state:texas      ->has->    [city:houston, city:dallas];\nRELATE province:bc      ->has->    [city:vancouver, city:victoria];\nRELATE province:ontario ->has->    [city:toronto, city:ottawa];\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Merge Method in Rust\nDESCRIPTION: Provides a complete example of using the update().merge() method to update all records in a table and a single record with new data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/update.mdx#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::Surreal;\n\n#[derive(Debug, Serialize, Deserialize, Default)]\nstruct Person {\n    name: String,\n    company: Option<String>,\n    active: Option<bool>,\n    marketing: Option<bool>,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Settings {\n    active: bool,\n    marketing: bool,\n}\n\n#[derive(Debug, Serialize)]\nstruct Company {\n    company: String,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = Surreal::new::<Ws>(\"127.0.0.1:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    db.query(\"CREATE person:tobie SET name = 'Tobie'; CREATE person:jaime SET name = 'jaime';\")\n        .await?;\n\n    // Update all records in a table\n    let people: Vec<Person> = db\n        .update(\"person\")\n        .merge(Company {\n            company: \"SurrealDB\".into(),\n        })\n        .await?;\n    dbg!(people);\n\n    // Update a single record\n    let person: Option<Person> = db\n        .update((\"person\", \"jaime\"))\n        .merge(Settings {\n            active: true,\n            marketing: true,\n        })\n        .await?;\n    dbg!(person);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Deletion Behavior with ON DELETE IGNORE in SurrealQL\nDESCRIPTION: This example shows the default deletion behavior for references, which is to ignore deletions. It demonstrates how references are maintained even when the referenced record is deleted.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/references.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD friends ON person TYPE option<array<record<person>>> REFERENCE ON DELETE IGNORE;\nDEFINE FIELD friended_by ON person TYPE references<person, friends>;\n\nCREATE person:one SET friends = [person:two];\nCREATE person:two;\nDELETE person:one;\nperson:two.*;\n```\n\n----------------------------------------\n\nTITLE: Consuming Live Query Data with Observable in C#\nDESCRIPTION: Example of consuming live query data using an Observable pattern, which is non-blocking and allows for reactive programming.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/streaming.mdx#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nliveQuery\n    .ToObservable()\n    .Subscribe((response) => \n    {\n        // Either an Open, Create, Update, Delete or Close notification...\n\n        if (response is SurrealDbLiveQueryOpenResponse)\n        {\n            // Do something...\n        }\n        if (response is SurrealDbLiveQueryCreateResponse<Person> create)\n        {\n            // Use the `Result` record\n        }\n        if (response is SurrealDbLiveQueryUpdateResponse<Person> update)\n        {\n            // Use the `Result` record\n        }\n        if (response is SurrealDbLiveQueryDeleteResponse<Person> delete)\n        {\n            // Use the `Result` record\n        }\n        if (response is SurrealDbLiveQueryCloseResponse)\n        {\n            // Do something...\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating Relations Between Records in Rust\nDESCRIPTION: Shows how to create relations between records using the .insert().relation() method in the SurrealDB Rust SDK. It demonstrates inserting person and company records, then creating 'founded' relations between them.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/insert.mdx#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse surrealdb::engine::any::connect;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::RecordId;\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Settings {\n    active: bool,\n    marketing: bool,\n}\n\n#[derive(Serialize)]\nstruct Data<'a> {\n    id: RecordId,\n    name: &'a str,\n}\n\n#[derive(Debug, Deserialize)]\nstruct Record {\n    name: String,\n    id: RecordId,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Founded {\n    #[serde(rename = \"in\")]\n    founder: RecordId,\n    #[serde(rename = \"out\")]\n    company: RecordId,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = connect(\"ws://localhost:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    let records: Vec<Record> = db\n        .insert(())\n        .content(vec![\n            Data {\n                id: RecordId::from((\"person\", \"tobie\")),\n                name: \"Tobie\",\n            },\n            Data {\n                id: RecordId::from((\"person\", \"jaime\")),\n                name: \"Jaime\",\n            },\n            Data {\n                id: RecordId::from((\"company\", \"surrealdb\")),\n                name: \"SurrealDB\",\n            },\n        ])\n        .await?;\n    dbg!(records);\n\n    let founded: Vec<Founded> = db\n        .insert(\"founded\")\n        .relation(vec![\n            Founded {\n                founder: RecordId::from((\"person\", \"tobie\")),\n                company: RecordId::from((\"company\", \"surrealdb\")),\n            },\n            Founded {\n                founder: RecordId::from((\"person\", \"jaime\")),\n                company: RecordId::from((\"company\", \"surrealdb\")),\n            },\n        ])\n        .await?;\n    dbg!(founded);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Remote Field Lookup Setup in SurrealDB\nDESCRIPTION: Sets up a relationship between access and user tables, demonstrating how to define a record field and create related records. This example creates the foundation for remote field queries and joins.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/performance-best-practices.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD user ON TABLE access TYPE record<user>;\n\nCREATE user:1 SET name = 'foo', role = 'admin';\nCREATE user:2 SET name = 'bar', role = 'admin';\n\nCREATE access:A SET user = user:1;\nCREATE access:B SET user = user:2;\n\nSELECT *\nFROM access\nWHERE user.role = 'admin'\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tid: access:A,\n\t\tuser: user:1\n\t},\n\t{\n\t\tid: access:B,\n\t\tuser: user:2\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Using array::all Function in SurrealQL\nDESCRIPTION: Shows various ways to use array::all function to check array values against conditions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::all([ 1, 2, 3, NONE, 'SurrealDB', 5 ]);\n\nRETURN [\"all\", \"clear\"].all();\n\nRETURN [\"same\", \"same\", \"same\"].all(\"same\");\n\n[\"What's\", \"it\", \"got\", \"in\", \"its\", \"pocketses??\"].all(|$s| $s.len() > 1);\n\n[1, 2, \"SurrealDB\"].all(|$var| $var.is_string());\n```\n\n----------------------------------------\n\nTITLE: Defining Bearer Access Method for System Users in SurrealQL\nDESCRIPTION: Example of defining a bearer access method for system users with duration settings for grant, token, and session validity periods.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/bearer.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS api ON DATABASE TYPE USER DURATION FOR GRANT 30d, FOR TOKEN 15m, FOR SESSION 12h;\n```\n\n----------------------------------------\n\nTITLE: Customizing UPDATE Statement Return Values in SurrealQL\nDESCRIPTION: This snippet demonstrates different ways to alter the return value of UPDATE statements in SurrealQL. It shows how to return no result, a changeset diff, the record before or after changes, specific fields, or a single field value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/update.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\n-- Don't return any result\nUPDATE person SET skills += 'reading' RETURN NONE;\n\n-- Return the changeset diff\nUPDATE person SET skills += 'reading' RETURN DIFF;\n\n-- Return the record before changes were applied\nUPDATE person SET skills += 'reading' RETURN BEFORE;\n\n-- Return the record after changes were applied (the default)\nUPDATE person SET skills += 'reading' RETURN AFTER;\n\n-- Return the value of the 'skills' field without the field name\nUPDATE person SET skills += 'reading' RETURN VALUE skills;\n\n-- Return a specific field only from the updated records\nUPDATE person:tobie SET skills = ['skiing', 'music'] RETURN name, interests;\n```\n\n----------------------------------------\n\nTITLE: Delete Method Usage Examples in SurrealDB Golang SDK\nDESCRIPTION: Examples showing how to delete a single record by ID and how to delete all records from a table using the Delete method. Demonstrates error handling using panic.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/delete.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\t// Delete an entry by ID\n\tif err = surrealdb.Delete[models.RecordID](db, *person2.ID); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Delete all entries\n\tif err = surrealdb.Delete[models.Table](db, models.Table(\"persons\")); err != nil {\n\t\tpanic(err)\n\t}\n```\n\n----------------------------------------\n\nTITLE: Update Record Example in SurrealDB Using Golang\nDESCRIPTION: Demonstrates how to update a single record in the 'persons' table using the Update method. The example shows updating a person's surname and location using a struct with specific field values.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/update.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Update a single record in the \"persons\" table\nupdatedPerson, err := surrealdb.Update[Person](db, models.RecordID(\"persons\", \"person123\"), Person{\n\tName:     \"John\",\n\tSurname:  \"Smith\", // Updated surname\n\tLocation: models.NewGeometryPoint(-0.12, 23.00), // Updated location\n})\nif err != nil {\n\tpanic(err)\n}\nfmt.Printf(\"Updated person with a struct: %+v\\n\", updatedPerson)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Linked Records in SurrealDB\nDESCRIPTION: SurrealQL commands to create teacher, student, and classroom records with links between them.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/fetch.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nCREATE teacher:one SET name = id.id();\nCREATE student:one, student:two, student:three SET name = id.id();\n\nCREATE classroom SET\n    location = (-16.7, 64.4),\n    school_name = \"Jöklaskóli\",\n    teacher = teacher:one,\n    students = [student:one, student:two, student:three];\n```\n\n----------------------------------------\n\nTITLE: Python Merge Method Usage Examples\nDESCRIPTION: Examples showing how to use merge() to update all records in a table and update a specific record using RecordID. Demonstrates merging with datetime and nested object structures.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/merge.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Update all records in a table\nawait db.merge('person', {\n\tupdated_at: datetime.datetime.utcnow()\n})\n\n# Update a record with a specific ID\nawait db.merge(RecordID('person', 'tobie'), {\n\t\"updated_at\": datetime.datetime.utcnow(),\n\t\"settings\": {\n\t\t\"active\": true,\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Complex Geographic Data Model Creation\nDESCRIPTION: Sets up a hierarchical geographic data model using graph relations between countries, states, and cities.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_40\n\nLANGUAGE: surql\nCODE:\n```\nCREATE country:usa SET name = \"USA\";\nCREATE state:pennsylvania SET population = 12970000;\nCREATE state:michigan SET population = 10030000;\nCREATE city:philadelphia, city:pittsburgh, city:detroit, city:grand_rapids;\n\nRELATE country:usa->contains->[state:pennsylvania, state:michigan];\nRELATE state:pennsylvania->contains->[city:philadelphia, city:pittsburgh];\nRELATE state:michigan->contains->[city:detroit, city:grand_rapids];\n```\n\n----------------------------------------\n\nTITLE: Create Method Usage Examples\nDESCRIPTION: Demonstrates various ways to create records including random ID generation, specific ID creation, and type-safe data handling with TypeScript generics.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/create.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n\tid: string;\n\tname: string;\n\tsettings: {\n\t\tactive: boolean;\n\t\tmarketing: boolean;\n\t};\n};\n\n// Create a record with a random ID\nconst [person] = await db.create<Person>('person');\n\n// Create a record with a specific ID\nconst person = await db.create<Person>(new RecordId('person', 'tobie'), {\n\tname: 'Tobie',\n\tsettings: {\n\t\tactive: true,\n\t\tmarketing: true,\n\t},\n});\n\n// The content you are creating the record with might differ from the return type\nconst [record] = await db.create<\n\tPerson,\n\tPick<Person, 'name'>\n>(\n    new RecordId('person', 'tobie'),\n    {\n        name: 'Tobie',\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: IF ELSE Chain with Return in SurrealQL\nDESCRIPTION: Example of an IF ELSE chain with RETURN statement at the beginning, demonstrating concise conditional logic.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/ifelse.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nLET $num = 100;\n\nRETURN IF $num < 0 {\n    \"Negative\"\n} ELSE IF $num = 0 {\n    \"Zero\"\n} ELSE IF $num = 13 {\n    \"Thirteen\"\n} ELSE {\n    \"Positive uninteresting number\"\n};\n```\n\n----------------------------------------\n\nTITLE: Collecting Unique Records in SurrealDB Graph Traversal\nDESCRIPTION: Shows how to use the +collect algorithm to gather all unique records in a graph traversal, starting with the closest connections.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_36\n\nLANGUAGE: surql\nCODE:\n```\nperson:you.{..+collect}->knows->person;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sample Data for Graph Querying Examples\nDESCRIPTION: Creates sample data with a person who wrote two articles, establishing relationships with timestamps for demonstration of graph querying techniques.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_24\n\nLANGUAGE: surql\nCODE:\n```\nCREATE \n\tperson:aristotle,\n\tarticle:on_sleep_and_sleeplessness,\n\tarticle:on_dreams;\nRELATE person:aristotle->wrote->[\n\t\tarticle:on_sleep_and_sleeplessness,\n\t\tarticle:on_dreams\n\t]\n\t// Written sometime around the year 330 BC\n\tSET time_written = d\"-0330-01-01\";\n```\n\n----------------------------------------\n\nTITLE: Using IF NOT EXISTS Clause in SurrealDB Field Definition\nDESCRIPTION: This snippet demonstrates the use of the IF NOT EXISTS clause to define a field only if it doesn't already exist, preventing errors when attempting to create duplicate fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_16\n\nLANGUAGE: surql\nCODE:\n```\n-- Create a field if it does not already exist\nDEFINE FIELD IF NOT EXISTS email ON TABLE user TYPE string;\n```\n\n----------------------------------------\n\nTITLE: Live Query Implementation\nDESCRIPTION: Shows how to implement live queries for real-time streaming of metric updates.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/time-series.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nLIVE SELECT * FROM daily_measurements_by_location;\n```\n\n----------------------------------------\n\nTITLE: Checking Record Existence with record::exists() in SurrealQL\nDESCRIPTION: The record::exists() function checks if a given record exists in the database. It returns a boolean value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/record.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nRETURN record::exists(r\"person:tobie\");\n-- false\n\nCREATE person:tobie;\nRETURN record::exists(r\"person:tobie\");\n-- true\n```\n\n----------------------------------------\n\nTITLE: Implementing Record Fetching in Rust\nDESCRIPTION: Rust code demonstrating how to create, query, and fetch linked records using the SurrealDB Rust SDK. It includes struct definitions, database connection, and query execution.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/fetch.mdx#2025-04-16_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse surrealdb:{\n    engine::remote::ws::Ws,\n    opt::{auth::Root, Resource},\n    sql::Datetime,\n    RecordId, Surreal,\n};\n\n// Dance classes table name\nconst DANCE: &str = \"dance\";\n// Students table name\nconst STUDENT: &str = \"student\";\n\n// Dance class table schema\n#[derive(Debug, Serialize, Deserialize)]\nstruct DanceClass {\n    id: RecordId,\n    name: String,\n    created_at: Datetime,\n}\n\n// Student table schema\n#[derive(Debug, Serialize)]\nstruct Student {\n    id: RecordId,\n    name: String,\n    classes: Vec<RecordId>,\n    created_at: Datetime,\n}\n\n// Student model with full class details\n#[derive(Debug, Deserialize)]\n#[allow(dead_code)]\nstruct StudentClasses {\n    id: RecordId,\n    name: String,\n    classes: Vec<DanceClass>,\n    created_at: Datetime,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    // Connect to the database server\n    let db = Surreal::new::<Ws>(\"localhost:8000\").await?;\n\n    // Sign in into the server\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    // Select the namespace and database to use\n    db.use_ns(\"namespace\").use_db(\"database\").await?;\n\n    // Create a dance class and store the result\n    let classes: Option<DanceClass> = db\n        .create(DANCE)\n        .content(DanceClass {\n            id: RecordId::from((DANCE, \"dc101\")),\n            name: \"Introduction to Dancing\".to_owned(),\n            created_at: Datetime::default(),\n        })\n        .await?;\n\n    // Create a student and assign her to the previous dance class\n    // We don't care about the result here so we don't need to\n    // type-hint and store it. We use `Resource::from` to return\n    // a `sql::Value` instead and ignore it.\n    db.create(Resource::from(STUDENT))\n        .content(Student {\n            id: RecordId::from((STUDENT, \"jane\")),\n            name: \"Jane Doe\".to_owned(),\n            classes: classes.into_iter().map(|class| class.id).collect(),\n            created_at: Datetime::default(),\n        })\n        .await?;\n\n    // Run a query to retrieve students and full class info\n    let mut results = db.query(format!(\"SELECT * FROM {STUDENT} FETCH classes\")).await?;\n\n    // Extract the first query statement result and deserialise it as a vector of students\n    let students: Vec<StudentClasses> = results.take(0)?;\n\n    // Use the result as you see fit. In this case we are simply pretty printing it.\n    println!(\"Students = {:?}\", students);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating Authentication in SurrealDB JavaScript SDK\nDESCRIPTION: Invalidates the authentication for the current connection in SurrealDB. This method is used for logging out or ending a session.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.invalidate()\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Server with Docker\nDESCRIPTION: This command starts a SurrealDB server using Docker, exposing port 8000 and using the latest image. It uses the 'start' command to initialize the server.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/docker.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --pull always -p 8000:8000 surrealdb/surrealdb:latest start\n```\n\n----------------------------------------\n\nTITLE: Starting Server with Root User Authentication\nDESCRIPTION: Command to start SurrealDB with a configured root user and password for secure access.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/file.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root rocksdb:mydatabase.db\n```\n\n----------------------------------------\n\nTITLE: Using Futures for Dynamic Field Values in SurrealDB\nDESCRIPTION: This example demonstrates how to use a future to create a field that is calculated each time it is accessed, unlike the VALUE clause.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD accessed_at ON TABLE user VALUE <future> { time::now() };\n\nCREATE user:one;\nSELECT * FROM ONLY user:one;\n-- Sleep for one second\nSLEEP 1s;\n-- `accessed_at` is a different value now\nSELECT * FROM ONLY user:one;\n```\n\n----------------------------------------\n\nTITLE: Using Value Class for Type Checking and Conversion in Java\nDESCRIPTION: Demonstrates how to use the Value class to represent SurrealDB data types, perform type checking, and convert data. This example checks if a query result is a long integer before accessing it.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/start.mdx#2025-04-16_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nValue result = driver.query(\"RETURN 123\").take(0);\n\n// Check if the result is a long before casting\nif (result.isLong()) {\n\tSystem.out.println(\"Long value: \" + result.getLong());\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling GraphQL in SurrealDB Configuration\nDESCRIPTION: SurrealQL statement to enable GraphQL for a database. This statement is sent to the /sql endpoint to configure GraphQL access.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/graphql/http.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surrealql\nCODE:\n```\nDEFINE CONFIG GRAPHQL AUTO;\n```\n\n----------------------------------------\n\nTITLE: Inserting Single and Multiple Records in PHP with SurrealDB\nDESCRIPTION: Demonstrates how to insert single and multiple records into a SurrealDB database using the PHP SDK. It shows various ways to use the insert method, including inserting a single record, using RecordId, and inserting multiple records at once.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/insert.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Insert a single record\n[$person] = $db->insert('person', [\n\t\"name\" => 'Tobie',\n\t\"settings\" => [\n\t\t\"active\" => true,\n\t\t\"marketing\" => true,\n\t],\n]);\n\n$person = $db->insert(new RecordId('person', 'tobie'), [\n\t\"name\" => 'Tobie',\n\t\"settings\" => [\n\t\t\"active\" => true,\n\t\t\"marketing\" => true,\n\t],\n]);\n\n// Insert multiple records\n$people = $db->insert('person', [\n\t[\n\t\t\"name\" => 'Tobie',\n\t\t\"settings\" => [\n\t\t\t\"active\" => true,\n\t\t\t\"marketing\" => true,\n\t\t],\n\t],\n\t[\n\t\t\"name\" => 'Jaime',\n\t\t\"settings\" => [\n\t\t\t\"active\" => true,\n\t\t\t\"marketing\" => true,\n\t\t],\n\t],\n]);\n\n// The content you are creating the record with might differ from the return type\n$people = $db->insert('person', [\n\t[ \"name\" => 'Tobie' ],\n\t[ \"name\" => 'Jaime' ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Variables in RELATE Statement with SET in SurrealQL\nDESCRIPTION: Example of passing variables in the SET block of a RELATE statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nLET $time = time::now();\n\nRELATE person:l19zjikkw1p1h9o6ixrg->wrote->article:8nkk6uj4yprt49z7y3zm\n    SET time.written = $time;\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Records on Duplicate Key in SurrealQL\nDESCRIPTION: This snippet demonstrates how to update existing records when inserting duplicates using the ON DUPLICATE KEY UPDATE clause, including operations like incrementing values and adding to arrays.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/insert.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO product (name, url) VALUES ('Salesforce', 'salesforce.com') ON DUPLICATE KEY UPDATE tags += 'crm';\n```\n\n----------------------------------------\n\nTITLE: Defining a Field on a Table in SurrealQL\nDESCRIPTION: This snippet demonstrates how to define a field named 'name' of type string on the 'person' table, and then use the INFO statement to view the table's definition. It also shows how to add a comment to the field definition.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: SurrealQL\nCODE:\n```\nDEFINE FIELD name ON TABLE person TYPE string COMMENT \"Todo: add assertion for maximum length\";\nINFO FOR TABLE person;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Info<T>() Method in SurrealDB .NET SDK\nDESCRIPTION: Demonstrates how to use the Info<T>() method to retrieve the authenticated user's information as a strongly-typed User object.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/info.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar currentUser = await db.Info<User>();\n```\n\n----------------------------------------\n\nTITLE: Array Operations with Closures\nDESCRIPTION: Complex example showing array filtering, validation, and type casting using multiple closures.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/closures.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n[NONE, NONE, \"good data\", \"Also good\", \"important\", NULL]\n    .filter(|$v| $v.is_string())\n    .all(|$s| $s.len() > 5)\n    .chain(|$v| <string>$v);\n```\n\n----------------------------------------\n\nTITLE: Upserting Records in SurrealDB using .NET SDK\nDESCRIPTION: Creates or updates a specific record in the database. This method creates a new document/record or replaces the current one with the specified data. It requires the data to be inserted or updated.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/data-manipulation.mdx#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Upsert<T>(data)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar person = new Person\n{\n    Id = (\"person\", \"tobie\"), // Id is mandatory to apply create or update\n    Name = \"Tobie\",\n    Settings = new Settings\n    {\n        Active = true,\n        Marketing = true,\n    },\n};\n\n// Create a new record when it doesn't exist\nvar created = await db.Upsert(person);\n\n// Update an existing record when it does exist\nvar updated = await db.Upsert(person);\n```\n\n----------------------------------------\n\nTITLE: Exporting SurrealDB Database using Token Authentication\nDESCRIPTION: This command exports a SurrealDB database using token-based authentication instead of username and password. It specifies the connection URL, token, namespace, and database, saving the export to 'export.surql'.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/export.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal export --conn http://localhost:8000 --token <token> --ns test --db test export.surql\n```\n\n----------------------------------------\n\nTITLE: Advanced Range Operations with Functional Programming in SurrealQL\nDESCRIPTION: Demonstrates advanced usage of ranges combined with array functions and anonymous functions for complex data transformations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ranges.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\n-- Construct an array\n(<array> 1..=100)\n-- Turn it into an array that increments by 10\n    .map(|$v| $v * 10)\n-- Turn each number into a object with original and square root value\n    .map(|$v| { original: $v, square_root: math::sqrt($v) })\n-- Keep only those with square roots in between 11 and 12\n    .filter(|$obj| $obj.square_root IN 11..12);\n```\n\n----------------------------------------\n\nTITLE: Inserting Records in SurrealDB\nDESCRIPTION: Shows how to insert a single record or perform bulk inserts in SurrealDB. The method requires a 'thing' parameter for the table and 'data' for the record(s) to insert.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"insert\",\n    \"params\": [\n        \"person\",\n        {\n            \"name\": \"Mary Doe\"\n        }\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": [\n        {\n            \"id\": \"person:s5fa6qp4p8ey9k5j0m9z\",\n            \"name\": \"Mary Doe\"\n        }\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"insert\",\n    \"params\": [\n        \"person\",\n        [\n            {\n                \"name\": \"Mary Doe\"\n            },\n            {\n                \"name\": \"John Doe\"\n            }\n        ]\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": [\n        {\n            \"id\": \"person:s5fa6qp4p8ey9k5j0m9z\",\n            \"name\": \"Mary Doe\"\n        },\n        {\n            \"id\": \"person:xtbbojcm82a97vus9x0j\",\n            \"name\": \"John Doe\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Signing In with Scopes in SurrealDB Golang SDK\nDESCRIPTION: This example demonstrates how to sign in with scopes. It includes a Scope field in the Auth struct along with other necessary fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/signin.mdx#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Sign in to authentication `db` using the root user\n\tauthData := &surrealdb.Auth{\n\t\tUsername: \"root\", // use your setup username\n\t\tPassword: \"root\", // use your setup password\n        Namespace: \"test\", \n        Database: \"test\", \n        Scope: \"user\",\n        Email: \"info@surrealdb.com\",\n        Password: \"123456\"\n\t}\n\ttoken, err := db.SignIn(authData)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Function with Conditional Permissions in SurrealQL\nDESCRIPTION: Illustrates how to create a function with a WHERE clause to specify conditional permissions, in this case, only allowing admin users to access the function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/function.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FUNCTION fn::fetchAllProducts() {\n\tRETURN (SELECT * FROM product LIMIT 10);\n} PERMISSIONS WHERE $auth.admin = true;\n```\n\n----------------------------------------\n\nTITLE: Multiple Statements in Nested IF ELSE with New Scope Syntax\nDESCRIPTION: Example of using multiple statements inside nested IF ELSE conditions using the new scope syntax in SurrealQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/ifelse.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nIF $access = 'admin'\n\t{\n        CREATE admin_user_event SET \n            time = time::now(),\n            info = \"Admin user activity registered\";\n\t\tSELECT * FROM admin_data WHERE access_level = 'full';\n\t}\nELSE IF $access = 'user'\n\t{\n\t\tIF $auth.role = 'premium'\n\t\t\t{\n                CREATE premium_user_event SET \n                    time = time::now(),\n                    info = \"Premium user activity registered\";\n\n\t\t\t\tIF $auth.subscription_status = 'active'\n\t\t\t\t\t{ SELECT * FROM premium_user_data WHERE active = 1 }\n\t\t\t\tELSE IF $auth.subscription_status = 'trial'\n\t\t\t\t\t{ SELECT * FROM trial_user_data }\n\t\t\t\tELSE\n\t\t\t\t\t{ SELECT * FROM basic_user_data }\n\t\t\t}\n\t\tELSE IF $auth.role = 'standard'\n\t\t\t{ SELECT * FROM standard_user_data WHERE region = 'US' }\n\t\tELSE IF $auth.role = 'standard' AND $auth.subscription_status = 'active'\n\t\t\t{ SELECT * FROM standard_user_data WHERE region = 'EU' }\n\t\tELSE\n\t\t\t{ SELECT * FROM unauthorized_user_data }\n\t}\nELSE\n\t{ SELECT * FROM unknown_access_data }\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Connection in Rust\nDESCRIPTION: Comprehensive example demonstrating different ways to connect to SurrealDB using the Rust SDK, including local connections, remote connections, and configuration options with timeout settings.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/connect.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse std::sync::LazyLock;\nuse std::time::Duration;\nuse surrealdb::engine::remote::ws::{Client, Ws, Wss};\nuse surrealdb::opt::Config;\nuse surrealdb::Surreal;\n\nstatic DB: LazyLock<Surreal<Client>> = LazyLock::new(Surreal::init);\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    // Connect to a local endpoint\n    DB.connect::<Ws>(\"127.0.0.1:8000\").await?;\n    // Connect to a remote endpoint\n    DB.connect::<Wss>(\"cloud.surrealdb.com\").await?;\n    // A tuple with a Config struct can also be passed in for fine tuning of the connection\n    let config = Config::default().query_timeout(Duration::from_millis(1500));\n    DB.connect::<Ws>((\"127.0.0.1:8000\", config)).await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Python SDK\nDESCRIPTION: Shows how to create a new record in the database using the create() method. It can create a record with a random ID or a specific ID, and accepts optional data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/data-maniplulation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Create a record with a random ID\nperson = db.create('person')\n\n# Create a record with a specific ID\nperson = db.create(RecordID('person', 'tobie'), {\n\t\"name\": 'Tobie',\n\t\"settings\": {\n\t\t\"active\": True,\n\t\t\"marketing\": True,\n\t}\n})\n```\n\nLANGUAGE: surql\nCODE:\n```\nCREATE $thing CONTENT $data;\n```\n\n----------------------------------------\n\nTITLE: Using use_ns() and use_db() Methods in SurrealDB Rust SDK\nDESCRIPTION: This example demonstrates how to use the use_ns() and use_db() methods to switch to a specific namespace and database in a SurrealDB Rust application. It includes setting up a connection and error handling.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/use.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::Surreal;\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = Surreal::new::<Ws>(\"127.0.0.1:8000\").await?;\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Arrays in SurrealQL\nDESCRIPTION: Demonstrates how to filter arrays using the WHERE clause or ? operator in SurrealQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/arrays.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\n[true, false, true][WHERE $this = true];\n\n[1,2,NONE][? $this];\n```\n\n----------------------------------------\n\nTITLE: Performing Buffered Computation with ML Model in SurrealQL\nDESCRIPTION: Shows how to perform a buffered computation using a trained machine learning model. This method uses key mappings defined in the .surml file to map input fields to the correct order.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/ml/functions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nml::house-price-prediction<0.0.1>({squarefoot: 500.0, num_floors: 1.0});\n```\n\n----------------------------------------\n\nTITLE: Executing SurrealQL Queries with Python\nDESCRIPTION: This example shows how to execute multiple SurrealQL statements in one asynchronous query call with Python. It demonstrates creating a record and selecting data with variable substitution, along with accessing the query results.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/sdks/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Assign the variable on the connection\nresult = await db.query('CREATE person; SELECT * FROM type::table($tb)', {\n\t'tb': 'person',\n})\n# Get the first result from the first query\nresult[0]['result'][0]\n# Get all of the results from the second query\nresult[1]['result']\n```\n\n----------------------------------------\n\nTITLE: Removing Items from Arrays and Reducing Numeric Values in SurrealQL\nDESCRIPTION: This example shows how to use the -= operator to remove an item from an array and decrease a numeric value in a single UPDATE statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/update.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE person:tobie SET \n\tskills -= 'Go', \n\tdollars -= 1;\n```\n\n----------------------------------------\n\nTITLE: Defining RECORD Access with Duration in SurrealQL\nDESCRIPTION: This example demonstrates how to create a RECORD access method for accounts with specific token and session durations. It includes SIGNUP and SIGNIN clauses with password hashing.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS account ON DATABASE TYPE RECORD\n\tSIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )\n\tDURATION FOR TOKEN 15m, FOR SESSION 12h\n;\n```\n\n----------------------------------------\n\nTITLE: Inserting a Relation Using InsertRelation Method in C#\nDESCRIPTION: This example demonstrates how to use the InsertRelation method to insert a new relation between a user and a post. It includes specifying the in and out records, creation timestamp, and additional properties of the relation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/insert_relation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.InsertRelation(\n    new WroteRelation\n    {\n        In = (\"user\", \"u1\"),\n        Out = (\"post\", \"p1\"),\n        CreatedAt = now,\n        NumberOfPages = 144\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Relationships with Arrays in SurrealQL\nDESCRIPTION: Examples of using arrays in RELATE statements to create multiple graph edges at once.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO cat (id) VALUES (\"mr_meow\"), (\"mrs_meow\"), (\"kitten\");\nRELATE [cat:mr_meow, cat:mrs_meow]->parent_of->cat:kitten;\n```\n\nLANGUAGE: surql\nCODE:\n```\nCREATE cat:kitten2;\nRELATE [cat:mr_meow, cat:mrs_meow]->parent_of->[cat:kitten, cat:kitten2];\n```\n\n----------------------------------------\n\nTITLE: Exporting Data from SurrealDB using PHP SDK\nDESCRIPTION: This example demonstrates how to connect to a remote SurrealDB database, export data using the export() method, and save the exported data to a JSON file. It requires an existing database with data and proper authentication credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/export.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// connect to the remote database. For the export to work, the database must exists with also existing data.\n$db->connect('http://localhost:8080', [\n\t'namespace' => 'example',\n\t'database' => 'example',\n]);\n\n// Export data\n$response = $db->export('admin', 'password');\n\n// Create a file and write the response to it\n$fp = fopen('exported_data.json', 'w');\n\n// Write the response to the file\nfwrite($fp, $response);\n\n// Close the file\nfclose($fp);\n```\n\n----------------------------------------\n\nTITLE: LIMIT with ONLY Clause in SurrealQL\nDESCRIPTION: Examples showing how to use LIMIT with the ONLY clause to ensure that a query returns at most one record, which is necessary for some query patterns.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/limit.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\n-- Record IDs are unique so guaranteed to be no more than 1\nSELECT * FROM ONLY person:jamie;\n\n-- Error because no guarantee that this will return a single record\nSELECT * FROM ONLY person WHERE name = \"Jaime\";\n\n-- Add `LIMIT 1` to ensure that only up to one record will be returned\nSELECT * FROM ONLY person WHERE name = \"Jaime\" LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Defining a Relation Table in SurrealDB\nDESCRIPTION: This snippet shows how to define a table as a relation type and specify the allowed record types for the 'in' and 'out' fields. This improves type safety and visual output in tools like Surrealist.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE likes TYPE RELATION IN person OUT blog_post | book;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Relationships Before Creating Records\nDESCRIPTION: Shows how to create graph relationships for records that don't yet exist, which is useful when calculated fields depend on those relationships.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_22\n\nLANGUAGE: surql\nCODE:\n```\nLET $road = SELECT * FROM ONLY road WHERE name = \"Dalhurst Way\" LIMIT 1;\nRELATE [\n    house:[218, \"Dalhurst Way\"],\n    house:[222, \"Dalhurst Way\"],\n    house:[226, \"Dalhurst Way\"],\n]->has_road->$road;\n```\n\n----------------------------------------\n\nTITLE: Using time::from::millis Function in SurrealQL\nDESCRIPTION: The time::from::millis function calculates a datetime based on the milliseconds since January 1, 1970 0:00:00 UTC.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_25\n\nLANGUAGE: surql\nCODE:\n```\ntime::from::millis(number) -> datetime\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::from::millis(1000);\n\nd\"1970-01-01T00:00:01Z\"\n```\n\n----------------------------------------\n\nTITLE: User Management Functions in Rust\nDESCRIPTION: Implementation of user creation and token generation functions using SurrealDB's authentication system.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/authenticating-users.mdx#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nasync fn make_new_user(db: &Surreal<Client>) -> Result<RecordUser, Error> {\n    let name = rand::random::<FirstName>().to_string();\n    let pass = rand::random::<FirstName>().to_string();\n    println!(\"Signing in as user {name} and password {pass}\");\n    let jwt = db\n        .signup(Record {\n            access: \"account\",\n            namespace: \"namespace\",\n            database: \"database\",\n            params: Params {\n                name: &name,\n                pass: &pass,\n            },\n        })\n        .await?\n        .into_insecure_token();\n    println!(\"New user created!\\n\\nName: {name}\\nPassword: {pass}\\nToken: {jwt}\\n\\nTo log in, use this command:\\n\\nsurreal sql --namespace namespace --database database --pretty --token \\\"{jwt}\\\"\\n\");\n    Ok(RecordUser { name, pass })\n}\n\nasync fn get_new_token(db: &Surreal<Client>, user: &RecordUser) -> Result<(), Error> {\n    let jwt = db\n        .signin(Record {\n            access: \"account\",\n            namespace: \"namespace\",\n            database: \"database\",\n            params: Params {\n                name: &user.name,\n                pass: &user.pass,\n            },\n        })\n        .await?\n        .into_insecure_token();\n    println!(\"New token! Sign in with surreal sql --namespace namespace --database database --pretty --token \\\"{jwt}\\\"\\n\");\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Content in SurrealDB using Rust\nDESCRIPTION: Illustrates how to update records in SurrealDB using the content method. It shows updating all records in a table and updating a specific record by ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n// Update all records in a table\nlet people: Vec<Person> = db.update(\"person\").await?;\n// Update a record with a specific ID\nlet person: Option<Person> = db\n    .update((\"person\", \"tobie\"))\n    .content(Person {\n        name: \"Tobie\",\n        settings: {\n            active: true,\n            marketing: true,\n        },\n    }).await?;\n```\n\n----------------------------------------\n\nTITLE: Inserting Relations with SurrealDB JavaScript SDK\nDESCRIPTION: Method for inserting relationship records between different tables in the database. Supports single and multiple relation insertions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/data-maniplulation.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync db.insert_relation<T>(table, data)\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype Likes = {\n\tid: RecordId<\"likes\">;\n\tin: RecordId<\"person\">;\n\tout: RecordId<\"post\">;\n};\n\n// Insert a single record\nconst [person] = await db.insert_relation<Likes>('likes', {\n\tin: new RecordId('person', 'tobie'),\n\tout: new RecordId('post', 123),\n});\n\n// Insert multiple records across tables\nconst people = await db.insert<Likes>('likes', [\n\t{\n    \tin: new RecordId('person', 'tobie'),\n    \tout: new RecordId('post', 123),\n\t},\n\t{\n    \tin: new RecordId('person', 'jaime'),\n    \tout: new RecordId('post', 456),\n\t},\n]);\n```\n\nLANGUAGE: surql\nCODE:\n```\nINSERT RELATION INTO $table $data;\n```\n\n----------------------------------------\n\nTITLE: SurrealDB SDK Database Configuration and Initialization\nDESCRIPTION: Utility module for initializing and configuring the SurrealDB connection with TypeScript interfaces\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/start.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Surreal from \"surrealdb\";\n\n// Define the database configuration interface\ninterface DbConfig {\n  url: string;\n  namespace: string;\n  database: string;\n}\n\n// Define the default database configuration\nconst DEFAULT_CONFIG: DbConfig = {\n  url: \"http://127.0.0.1:8000/rpc\",\n  namespace: \"test\",\n  database: \"test\",\n};\n\n// Define the function to get the database instance\nexport async function getDb(config: DbConfig = DEFAULT_CONFIG): Promise<Surreal> {\n  const db = new Surreal();\n\n  try {\n    await db.connect(config.url);\n    await db.use({ namespace: config.namespace, database: config.database });\n    return db;\n  } catch (err) {\n    console.error(\"Failed to connect to SurrealDB:\", err instanceof Error ? err.message : String(err));\n    await db.close();\n    throw err;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example in SurrealDB\nDESCRIPTION: JSON body for a GraphQL query to retrieve names from the person table. This query is sent to the /graphql endpoint.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/graphql/http.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": \"{ person { name } }\"\n}\n```\n\n----------------------------------------\n\nTITLE: HMAC JWT Access Configuration Example\nDESCRIPTION: Demonstrates configuring JWT access using HMAC (HS512) algorithm with a symmetric key for database authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/jwt.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Specify the namespace and database for the token\nUSE NS abcum DB app_vitalsense;\n\n-- Set the name of the token\nDEFINE ACCESS token_name\n  -- Use this token provider for database authentication\n  ON DATABASE\n  -- Specify the type of access being defined\n  TYPE JWT\n  -- Specify the cryptographic signature algorithm used to verify the token\n  ALGORITHM HS512\n  -- Specify the symmetric key used to sign and verify the authenticity of the token\n  KEY \"sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8\";\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Parameters in SurrealQL\nDESCRIPTION: Demonstrates how to define parameters using the LET statement and use them in subsequent queries. Parameters can store any value, including query results.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/parameters.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\n-- Define the parameter\nLET $suffix = \"Morgan Hitchcock\";\n-- Use the parameter\nCREATE person SET name = \"Tobie \" + $suffix;\n-- (Another way to do the same)\nCREATE person SET name = string::join(\" \", \"Jaime\", $suffix);\n```\n\nLANGUAGE: surql\nCODE:\n```\n-- Assuming the CREATE statements from the previous example\nLET $founders = (SELECT * FROM person);\nRETURN $founders.name;\n```\n\n----------------------------------------\n\nTITLE: Raw Compute with SurrealML Model\nDESCRIPTION: Python code demonstrating how to perform raw computation with a loaded SurrealML model by directly providing input vectors.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/index.mdx#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nprint(new_file.raw_compute(input_vector=[5, 6]))\n```\n\n----------------------------------------\n\nTITLE: Updating Records in SurrealDB using PHP SDK\nDESCRIPTION: Demonstrates various ways to use the ->update() method, including updating all records in a table, updating a specific record by ID, and updating with different data structures.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/update.mdx#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Update all records in a table\n$people = $db->update('person');\n\n// Update a record with a specific ID\n$person = $db->update(new RecordId('person', 'tobie'), [\n\t\"name\" => 'Tobie',\n\t\"settings\" => [\n\t\t\"active\" => true,\n\t\t\"marketing\" => true,\n\t],\n]);\n\n// The content you are updating the record with might differ from the return type\n$record = $db->update(new RecordId('person', 'tobie'), [\n\t\"name\" => 'Tobie',\n]);\n```\n\n----------------------------------------\n\nTITLE: Inserting a Person Record with SurrealDB Golang SDK\nDESCRIPTION: Example showing how to insert a new person record into the 'persons' table using a map representation. The example demonstrates handling the response which contains the inserted Person object and any potential errors.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/insert.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Insert an entry\nperson2, err := surrealdb.Insert[Person](db, models.Table(\"persons\"), map[interface{}]interface{}{\n    \"Name\":     \"Jane\",\n    \"Surname\":  \"Smith\",\n    \"Location\": models.NewGeometryPoint(-0.12, 22.01),\n})\nif err != nil {\n    panic(err)\n}\nfmt.Printf(\"Inserted person with a map: %+v\\n\", person2)\n\n```\n\n----------------------------------------\n\nTITLE: Executing SurrealQL Queries in JavaScript\nDESCRIPTION: Runs a set of SurrealQL statements against the SurrealDB database. This method allows for complex queries and operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.query<T>(sql,vars)\n```\n\n----------------------------------------\n\nTITLE: Exporting Database Contents to File in Rust\nDESCRIPTION: Complete example showing how to connect to a database, create a record, and export the contents to a file.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/export.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse surrealdb::engine::any::connect;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::opt::Resource;\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = connect(\"http://localhost:8000\").await?;\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    // Create a `person` record\n    db.create(Resource::from(\"person\")).await?;\n\n    db.export(\"backup.surql\").await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Using Gap in PreparedQuery for Dynamic Values in TypeScript\nDESCRIPTION: Demonstrates how to use Gap instances in PreparedQuery to set or override values when sending the query, allowing for more flexible and dynamic query construction.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/utilities.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst name = new Gap<string>();\nconst enabled = new Gap(true);\nconst query = new PreparedQuery(\n    /* surql */ `CREATE person SET name = $name, enabled = $enabled`,\n    { name, enabled }\n);\n\n// All gaps without a default value must be passed\nawait surreal.query(\n    query,\n    [name.fill(\"John Doe\")]\n);\n\n// You can also override gap default values\nawait surreal.query(\n    query,\n    [\n        name.fill(\"John Doe\"),\n        enabled.fill(false),\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring SurrealDB Docker Container\nDESCRIPTION: A Docker Compose configuration for setting up a SurrealDB node with environment variables for user credentials and logging.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/index.mdx#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  surrealdb:\n    image: surrealdb/surrealdb\n    command: start\n    environment:\n      - SURREAL_USER=root\n      - SURREAL_PASS=root\n      - SURREAL_LOG=trace\n    ports:\n      - 8000:8000\n```\n\n----------------------------------------\n\nTITLE: Basic UPSERT Without WHERE Clause\nDESCRIPTION: Demonstrates basic UPSERT operations without a WHERE clause, showing how it behaves primarily as an INSERT statement in this case.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/upsert.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nUPSERT person SET name = 'Billy';\nUPSERT person SET name = 'Bobby';\nSELECT * FROM person;\n```\n\n----------------------------------------\n\nTITLE: Using IF NOT EXISTS Clause in SurrealDB\nDESCRIPTION: Demonstrates the usage of the IF NOT EXISTS clause when defining a table. This ensures that the table is only created if it doesn't already exist.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/table.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\n-- Create a TABLE if it does not already exist\nDEFINE TABLE IF NOT EXISTS reading\n```\n\n----------------------------------------\n\nTITLE: Database Initialization and Configuration\nDESCRIPTION: Rust code for setting up SurrealDB connection, authentication, and defining database schema including tables, fields, and access permissions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nfn main() -> Result<(), Error> {\n    let rt = tokio::runtime::Runtime::new()?;\n\n    let _: Result<(), Error> = rt.block_on(async {\n\n            let db = Surreal::new::<Ws>(\"localhost:8000\").await?;\n\n            db.signin(Root {\n                username: \"root\",\n                password: \"root\",\n            })\n            .await?;\n\n            db.use_ns(\"test\").use_db(\"test\").await?;\n\n            db.query(\n                \"    DEFINE TABLE person SCHEMALESS\n                PERMISSIONS FOR\n                    CREATE, SELECT WHERE $auth,\n                    FOR UPDATE, DELETE WHERE created_by = $auth;\n            DEFINE FIELD name ON TABLE person TYPE string;\n            DEFINE FIELD created_by ON TABLE person VALUE $auth READONLY;\n\n            DEFINE INDEX unique_name ON TABLE user FIELDS name UNIQUE;\n            DEFINE ACCESS account ON DATABASE TYPE RECORD\n            SIGNUP ( CREATE user SET name = $name, pass = crypto::argon2::generate($pass) )\n            SIGNIN ( SELECT * FROM user WHERE name = $name AND crypto::argon2::compare(pass, $pass) )\n            DURATION FOR TOKEN 15m, FOR SESSION 12h\n        ;\",\n            )\n            .await?;\n        Ok(())\n        });\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Using Record Range Syntax with Values in SurrealQL\nDESCRIPTION: Demonstrates how SurrealDB's value comparison enables record range syntax. Examples show filtering records using datetime values in record IDs and the NONE and open-range (..) syntax.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/values.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE time_data:[d'2024-07-23T00:00:00.000Z'];\nCREATE time_data:[d'2024-07-24T00:00:00.000Z'];\nCREATE time_data:[d'2024-07-25T00:00:00.000Z'];\n-- Records from the 24th to the 25th\nSELECT * FROM time_data:[d'2024-07-24']..[d'2024-07-25'];\n-- Records from the 24th\nSELECT * FROM time_data:[d'2024-07-24']..\n-- All records\nSELECT * FROM time_data:[NONE]..\n```\n\nLANGUAGE: surql\nCODE:\n```\nCREATE temperature:['London', d'2025-02-19T00:00:00.000Z'] SET val = 5.5;\nCREATE temperature:['London', d'2025-02-20T00:00:00.000Z'] SET val = 5.7;\n\n-- Return all records as long as index 0 = 'London'\nSELECT * FROM temperature:['London', NONE]..=['London', ..];\n```\n\n----------------------------------------\n\nTITLE: Explaining Query Plans in SurrealQL (Neo4j Equivalent)\nDESCRIPTION: Shows how to generate query execution plans in SurrealQL similar to Neo4j's EXPLAIN functionality. This helps in understanding and optimizing query performance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_11\n\nLANGUAGE: SurrealQL\nCODE:\n```\nSELECT name FROM person WHERE name = \"Jane\" EXPLAIN\n```\n\n----------------------------------------\n\nTITLE: SPLIT Clause Output Example in SurrealQL\nDESCRIPTION: The output result of using the SPLIT clause, showing how each array value becomes a separate record while retaining all other fields from the original record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\temails: 'me@me.com',\n\t\tid: user:tr5sxe8iygdco05faoh0,\n\t\tname: 'Name'\n\t},\n\t{\n\t\temails: 'longer_email@other_service.com',\n\t\tid: user:tr5sxe8iygdco05faoh0,\n\t\tname: 'Name'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Example Implementation of LiveQuery in SurrealDB Golang SDK\nDESCRIPTION: This example demonstrates how to use the Live method to initiate a live query subscription on a table. It imports the required packages, creates a table reference, sets the diff parameter, and initiates the live query, returning a UUID that can be used to reference the query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/live.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/surrealdb/surrealdb.go\"\n\t\"github.com/surrealdb/surrealdb.go/pkg/models\"\n)\n\nfunc main() {\n\t// Assuming db is an instance of your database connection\n\ttable := models.Table(\"person\")\n\tdiff := true  // Whether to receive diffs or not\n\n\tuuid, err := surreal.Live(db, table, diff)\n\tif err != nil {\n\t\tfmt.Println(\"Error initiating live query:\", err)\n\t\treturn\n\t}\n\n\t// Use the UUID for the live query...\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Method Usage Examples\nDESCRIPTION: Examples showing how to delete all records from a table and how to delete a specific record using RecordID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/delete.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Delete all records from a table\nawait db.delete('person')\n\n# Delete a specific record from a table\nawait db.delete(RecordID('person', 'h5wxrf2ewk8xjxosxtyc'))\n```\n\n----------------------------------------\n\nTITLE: Signing In for Record Access in SurrealDB Golang SDK\nDESCRIPTION: This example shows how to sign in for record access. It includes additional fields like Access, Email, and Password in the Auth struct.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/signin.mdx#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Sign in to authentication `db` using the root user\n\tauthData := &surrealdb.Auth{\n\t\tUsername: \"root\", // use your setup username\n\t\tPassword: \"root\", // use your setup password\n        Namespace: \"test\", \n        Database: \"test\", \n        Access: \"user\",\n        Email: \"info@surrealdb.com\",\n        Password: \"123456\"\n\t}\n\ttoken, err := db.SignIn(authData)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions on Fields in SurrealDB\nDESCRIPTION: This snippet demonstrates how to set specific permissions on fields to control who can perform operations on them, using the PERMISSIONS clause for SELECT and UPDATE operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_18\n\nLANGUAGE: surql\nCODE:\n```\n-- Set permissions for the email field\nDEFINE FIELD email ON TABLE user\n  PERMISSIONS\n    FOR select WHERE published=true OR user=$auth.id\n    FOR update WHERE user=$auth.id OR $auth.role=\"admin\";\n```\n\n----------------------------------------\n\nTITLE: Recursive Path Traversal\nDESCRIPTION: Demonstrates recursive graph traversal to find connected records up to a specified depth\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_16\n\nLANGUAGE: surql\nCODE:\n```\nperson:tobie.{2}(->friends_with->person).name;\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Auto-generated ID in SurrealQL\nDESCRIPTION: Demonstrates how to create a record without specifying an ID, allowing SurrealDB to generate a random ID automatically.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/records.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person SET name = 'Tobie';\n\nperson:aio58g22n3upq16hsani\n```\n\n----------------------------------------\n\nTITLE: Querying Record Ranges in SurrealDB\nDESCRIPTION: This snippet demonstrates various ways to query record ranges in SurrealDB using different conditions and formats.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_21\n\nLANGUAGE: surql\nCODE:\n```\n-- Select all person records with IDs between the given range\nSELECT * FROM person:1..1000;\n\n-- Select all records for a particular location, inclusive\nSELECT * FROM temperature:['London', NONE]..=['London', ..];\n\n-- Select all temperature records with IDs less than a maximum value\nSELECT * FROM temperature:..['London', '2022-08-29T08:09:31'];\n\n-- Select all temperature records with IDs greater than a minimum value\nSELECT * FROM temperature:['London', '2022-08-29T08:03:39']..\n\n-- Select all temperature records with IDs between the specified range\nSELECT * FROM temperature:['London', '2022-08-29T08:03:39']..['London', '2022-08-29T08:09:31'];\n```\n\n----------------------------------------\n\nTITLE: Creating a GeometryCollection in SurrealQL\nDESCRIPTION: This snippet shows how to update a record with a GeometryCollection for storing multiple different geometry types in a single value. The collection contains an array of geometry objects, each with its own type and coordinates.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/geometries.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE university:oxford SET buildings = {\n\ttype: \"GeometryCollection\",\n\tgeometries: [\n\t\t{\n\t\t\ttype: \"MultiPoint\",\n\t\t\tcoordinates: [\n\t\t\t\t[10.0, 11.2],\n\t\t\t\t[10.5, 11.9]\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\ttype: \"Polygon\",\n\t\t\tcoordinates: [[\n\t\t\t\t[-0.38314819, 51.37692386], [0.1785278, 51.37692386],\n\t\t\t\t[0.1785278, 51.61460570], [-0.38314819, 51.61460570],\n\t\t\t\t[-0.38314819, 51.37692386]\n\t\t\t]]\n\t\t},\n\t\t{\n\t\t\ttype: \"MultiPolygon\",\n\t\t\tcoordinates: [\n\t\t\t\t[\n\t\t\t\t\t[ [10.0, 11.2], [10.5, 11.9], [10.8, 12.0], [10.0, 11.2] ]\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t[ [9.0, 11.2], [10.5, 11.9], [10.3, 13.0], [9.0, 11.2] ]\n\t\t\t\t]\n\t\t\t]\n\t\t}\n\t]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Array with Allowed Values in SurrealDB\nDESCRIPTION: This example shows how to restrict values in an array field, demonstrating an Access Control List implementation with specific allowed permissions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_19\n\nLANGUAGE: surql\nCODE:\n```\n-- An ACL can be applied to any kind of resource (record)\nDEFINE FIELD resource ON TABLE acl TYPE record;\n-- We associate the acl with a user using record<user>\nDEFINE FIELD user ON TABLE acl TYPE record<user>;\n\n-- The permissions for the user+resource will be stored in an array.\nDEFINE FIELD permissions ON TABLE acl TYPE array\n  -- The array must not be empty because at least one permission is required to make a valid ACL\n  -- The items in the array must also be restricted to specific permissions\n  ASSERT\n      array::len($value) > 0\n      AND $value ALLINSIDE [\"create\", \"read\", \"write\", \"delete\"];\n\n-- SEE IT IN ACTION\n-- 1: Add users\nCREATE user:tobie SET firstName = 'Tobie', lastName = 'Hitchcock',\n  email = 'Tobie.Hitchcock@surrealdb.com';\nCREATE user:abc SET firstName = 'A', lastName = 'B',\n  email = 'c@d.com';\nCREATE user:efg SET firstName = 'E', lastName = 'F',\n  email = 'g@h.com';\n\n-- 2: Create a resource\nCREATE document:SurrealDB_whitepaper SET\n  name = \"some messaging queue\";\n\n-- 3: Associate with ACL\nCREATE acl SET user = user:tobie, resource = document:SurrealDB_whitepaper, permissions = [\"create\", \"write\", \"read\"];\nCREATE acl SET user = user:abc, resource = document:SurrealDB_whitepaper, permissions = [\"read\", \"delete\"];\n\n-- Test Asserts using failure examples\n-- A: Create ACL without permissions field\nCREATE acl SET\n  user = user:efg,\n  permissions = [], # FAIL - permissions must not be empty\n  resource = document:SurrealDB_whitepaper;\n-- B: Create acl with invalid permisson\nCREATE acl SET\n  user = user:efg,\n  permissions = [\"all\"], # FAIL - This value is not allowed in the array\n  resource = document:SurrealDB_whitepaper;\n```\n\n----------------------------------------\n\nTITLE: Graph Link Traversal Query\nDESCRIPTION: Shows how to traverse graph relationships using the ->has-> syntax to access different levels of the hierarchy with type filtering.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_19\n\nLANGUAGE: surql\nCODE:\n```\nSELECT \n\t-- Show all `country` records located at `out`\n\t->has->country AS countries,\n\t-- Show all `province` or `state` records located at `out`\t\n\t->has->country->has->(province, state) AS state_provinces,\n\t-- Or use (?) to show any type of record located at `out`\n\t->has->(?)->has->(?)->has->(?) AS cities\nFROM planet:earth;\n```\n\n----------------------------------------\n\nTITLE: Using Tagged Template for Query Construction in TypeScript\nDESCRIPTION: Demonstrates the use of tagged template literals with the surql function to create queries with automatic variable escaping and support for Gap instances.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/utilities.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { surql, surrealql } from 'surrealdb';\n\nconst content = { name: \"Tobie\" };\nconst query = surql`CREATE person CONTENT ${content}`;\nawait surreal.query(query);\n\n// Or use gaps\nconst name = new Gap(\"Tobie\");\nconst query = surql`CREATE person CONTENT ${{ name }}`;\nawait surreal.query(query);\nawait surreal.query(\n    query,\n    // Or override a Gap's default value\n    [name.fill(\"Jaime\")]\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Graph Edges in SurrealQL\nDESCRIPTION: Examples of adding data to graph edges using SET and CONTENT clauses in the RELATE statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nRELATE person:l19zjikkw1p1h9o6ixrg->wrote->article:8nkk6uj4yprt49z7y3zm\n    SET \n\t\tmetadata.time_written = time::now(),\n\t\tmetadata.location = \"Tallinn\";\n```\n\nLANGUAGE: surql\nCODE:\n```\nRELATE person:l19zjikkw1p1h9o6ixrg->wrote->article:8nkk6uj4yprt49z7y3zm\n\tCONTENT {\n\t\tmetadata: {\n\t\t\ttime_written: time::now(),\n\t\t\tlocation: \"Tallinn\"\n\t\t}\n\t};\n```\n\n----------------------------------------\n\nTITLE: Killing Live Query with KillAsync in C#\nDESCRIPTION: Shows how to manually terminate a live query using the KillAsync method. Includes optional cancellation token support for graceful termination.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/streaming.mdx#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar liveQuery = await db.LiveRawQuery<Person>(\"LIVE SELECT * FROM person;\");\n\n// Consume the live query...\n\n// Manually kill the live query\nawait liveQuery.KillAsync();\n```\n\n----------------------------------------\n\nTITLE: Merging Records in SurrealDB using Python\nDESCRIPTION: Modifies all records in a table or a specific record in the SurrealDB database. This method allows for partial updates to existing records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ndb.merge(thing,data)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of CANCEL TRANSACTION in SurrealDB\nDESCRIPTION: This example demonstrates a transaction that creates two accounts, moves money between them, but then cancels all changes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/transactions.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nBEGIN TRANSACTION;\n\n-- Setup accounts\nCREATE account:one SET balance = 135605.16;\nCREATE account:two SET balance = 91031.31;\n\n-- Move money\nUPDATE account:one SET balance += 300.00;\nUPDATE account:two SET balance -= 300.00;\n\n-- Rollback all changes\nCANCEL TRANSACTION;\n```\n\n----------------------------------------\n\nTITLE: Querying 'Who Wrote the Articles?' in Multiple Ways\nDESCRIPTION: Demonstrates multiple equivalent ways to query for the person who wrote articles using different graph traversal patterns through the 'wrote' relationship.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_25\n\nLANGUAGE: surql\nCODE:\n```\n-- All queries lead to `person:artistotle` twice,\n-- via different paths and thus different field names\n-- and/or structure\n\n-- Directly from the `wrote` table\nSELECT in FROM wrote;\n\n-- From a single `person` record\nSELECT ->wrote.in FROM person;\nSELECT ->wrote<-person FROM person;\n\n-- From two `article` records\nSELECT <-wrote.in FROM article;\nSELECT <-wrote<-person FROM article;\n```\n\n----------------------------------------\n\nTITLE: SurrealDB .NET SignUp V1.x Implementation\nDESCRIPTION: Example implementation of SignUp method using Scopes in V1.x, showing authentication with email and password credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/signup.mdx#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// With Scopes\nvar authParams = new AuthParams\n{\n    Namespace = \"test\",\n    Database = \"test\",\n    Scope = \"user\",\n\t// Also pass any properties required by the scope definition\n    Email = \"info@surrealdb.com\",\n    Password = \"123456\"\n};\n\nJwt jwt = await db.SignUp(authParams);\n\npublic class AuthParams : ScopeAuth\n{\n\tpublic string? Username { get; set; }\n\tpublic string? Email { get; set; }\n\tpublic string? Password { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining data structures for person records in SurrealDB Rust application\nDESCRIPTION: Defines the PersonData struct used for record creation and the Person struct that represents the database records including the name, id, and created_by fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Serialize, Deserialize, Clone, Default)]\npub struct PersonData {\n    name: String,\n    id: Option<String>,\n}\n\n#[derive(Serialize, Deserialize, Debug)]\npub struct Person {\n    name: String,\n    id: RecordId,\n    created_by: Option<RecordId>,\n}\n```\n\n----------------------------------------\n\nTITLE: Using search::highlight Function in SurrealQL\nDESCRIPTION: This example demonstrates the usage of the search::highlight function to highlight matching keywords in search results.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/search.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nSELECT id, search::highlight('<b>', '</b>', 1) AS title\n\tFROM book WHERE title @1@ 'rust web';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Comment Styles in SurrealQL\nDESCRIPTION: Shows all supported comment syntax in SurrealQL including multi-line comments using /* */, single-line comments using #, //, and --. The examples demonstrate how comments can be used both standalone and inline within queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/comments.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\n/*\nIn SurrealQL, comments can be written as single-line\nor multi-line comments, and comments can be used and\ninterspersed within statements.\n*/\n\nSELECT * FROM /* get all users */ user;\n\n# There are a number of ways to use single-line comments\nSELECT * FROM user;\n\n// Alternatively using two forward-slash characters\nSELECT * FROM user;\n\n-- Another way is to use two dash characters\nSELECT * FROM user;\n```\n\n----------------------------------------\n\nTITLE: Executing a Custom Function in SurrealDB\nDESCRIPTION: Using the run method to execute a custom function with arguments. The first parameter is the function name prefixed with 'fn::', the second parameter is the version (null for latest), and the third parameter is an array of arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"run\",\n    \"params\": [ \"fn::calculate_discount\", null, [ 100, 15 ] ]\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting with JWT Token Authentication\nDESCRIPTION: Example command showing how to connect to SurrealDB using a JWT token instead of username/password credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/sql.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql --endpoint http://localhost:8000 --namespace test --database test --token <token>\n```\n\n----------------------------------------\n\nTITLE: Creating Pre-computed Table Views\nDESCRIPTION: Demonstrates setting up pre-computed table views for real-time metric aggregation from sensor readings.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/time-series.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE daily_measurements_by_location AS\n\tSELECT\n    id[1] AS location,\n\t\ttime::day(id[0]) AS day,\n\t\tmath::mean(id[3]) AS avg_temperture_celsius,\n\t\tmath::mean(id[4]) AS avg_humidity_percent\n\tFROM sensor_readings\n\tGROUP BY id[1];\n```\n\n----------------------------------------\n\nTITLE: Author and Book Relations with Filtering\nDESCRIPTION: Demonstrates filtering graph queries using WHERE clauses on both edges and vertices.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_35\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:j_r_r_tolkien SET\n\tname = \"J.R.R. Tolkien\",\n\tborn = d'1891-01-03';\nCREATE person:plato SET \n\tname = \"Plato\", \n\tborn = \"-0428-06-01\";\n\nCREATE book:fotr SET \n\tname = \"The Fellowship of the Ring\";\nCREATE book:republic SET \n\tname = \"The Republic\",\n\toriginal_name = \"Πολιτεία\";\n\nRELATE person:j_r_r_tolkien->wrote->book:fotr SET written_at = \"North Oxford\";\nRELATE person:plato->wrote->book:republic SET written_at = \"Athens\";\n\nSELECT \n\tname,\n\t->(wrote WHERE written_at = \"Athens\")->book.* AS books_written_in_athens\nFROM person;\n```\n\n----------------------------------------\n\nTITLE: Implementing ON DELETE THEN in SurrealDB\nDESCRIPTION: This snippet demonstrates using ON DELETE THEN to execute custom logic when a referenced record is deleted. It shows how to move deleted comments from a person's comments array to a deleted_comments array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/references.mdx#2025-04-16_snippet_16\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD comments ON person TYPE option<array<record<comment>>> REFERENCE ON DELETE THEN {\n    UPDATE $this SET\n        deleted_comments += $reference,\n        comments -= $reference;\n};\nDEFINE FIELD author ON comment TYPE references;\n\nCREATE person:one SET comments += (CREATE ONLY comment SET text = \"Estonia is bigger than I expected!\").id;\nLET $comment = CREATE ONLY comment SET text = \"I don't get the joke here?\";\nUPDATE person:one SET comments += $comment.id;\nDELETE $comment;\nSELECT * FROM person:one;\n```\n\n----------------------------------------\n\nTITLE: Defining Types for ID Fields in SurrealDB\nDESCRIPTION: Shows how to specify allowed types for the id field of a table. The example demonstrates using primitive types as well as complex record IDs with multiple components.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_30\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD id ON TABLE something TYPE string;\nDEFINE FIELD id ON TABLE something TYPE int;\nDEFINE FIELD id ON TABLE something TYPE uuid;\n\n-- using multiple data types for a Complex Record ID\nDEFINE FIELD id ON TABLE log TYPE [record, \"info\" | \"warn\" | \"error\", datetime];\n\n-- Incorrect ID format, generates an error\nCREATE log SET level = \"info\", time = time::now(), message = \"Database started\";\n\n-- Acceptable ID format\nCREATE log:[user:one, \"info\", time::now()] SET message = \"Database started\";\n```\n\n----------------------------------------\n\nTITLE: Counting Records in SurrealQL (Neo4j Equivalent)\nDESCRIPTION: Demonstrates how to count records in SurrealQL compared to Neo4j's counting approach. Uses the count() function with GROUP ALL to aggregate across all records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_12\n\nLANGUAGE: SurrealQL\nCODE:\n```\nSELECT count() AS person_count FROM person GROUP ALL\n```\n\n----------------------------------------\n\nTITLE: Revoking Specific Grant in SurrealDB\nDESCRIPTION: Demonstrates creating a user record, defining bearer access method, generating an API key, and revoking a specific grant using its ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/access.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\n-- Create record representing a user\nCREATE user:1 CONTENT { name: \"tobie\" };\n-- Define bearer access method to generate API keys\nDEFINE ACCESS api ON DATABASE TYPE BEARER FOR RECORD DURATION FOR GRANT 10d;\n-- Generate bearer grant to be used by the user\nACCESS api GRANT FOR RECORD user:1;\n```\n\nLANGUAGE: surql\nCODE:\n```\nACCESS api REVOKE GRANT NJ2I2d7OXxN9;\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Access with Custom Authentication in SurrealDB\nDESCRIPTION: This snippet demonstrates how to define a JWT access method with custom authentication logic in SurrealDB. It includes checks for token issuer and audience, and sets a session duration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/jwt.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS user ON DATABASE TYPE JWT\nALGORITHM HS512 KEY \"sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8\"\nAUTHENTICATE {\n  IF $token.iss != \"surrealdb-test\" { THROW \"Invalid token issuer\" };\n  IF type::is::array($token.aud) {\n    IF \"surrealdb-test\" NOT IN $token.aud { THROW \"Invalid token audience\" }\n  } ELSE {\n    IF $token.aud IS NOT \"surrealdb-test\" { THROW \"Invalid token audience\" }\n  };\n}\nDURATION FOR SESSION 2h;\n```\n\n----------------------------------------\n\nTITLE: Defining Indexes in SurrealQL (Neo4j Equivalent)\nDESCRIPTION: Shows how to create an index on a table column in SurrealDB compared to Neo4j's index creation syntax. Indexes improve query performance for frequently searched fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_7\n\nLANGUAGE: SurrealQL\nCODE:\n```\nDEFINE INDEX idx_name  ON TABLE person COLUMNS name\n```\n\n----------------------------------------\n\nTITLE: Output of Future Expressions with $this in SurrealDB\nDESCRIPTION: Shows the results of querying a record with a dynamically computed followers field based on a future expression. The output reflects changes as new relationships are created.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_25\n\nLANGUAGE: surql\nCODE:\n```\n-------- Query --------\n\n[\n\t{\n\t\tfollowers: [\n\t\t\tperson:one\n\t\t],\n\t\tid: person:three\n\t}\n]\n\n-------- Query --------\n[\n\t{\n\t\tfollowers: [\n\t\t\tperson:one,\n\t\t\tperson:two\n\t\t],\n\t\tid: person:three\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Using session::ip() to retrieve IP address in SurrealQL\nDESCRIPTION: The session::ip() function returns the IP address associated with the current user's session.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/session.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nsession::ip() -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN session::ip();\n\n\"2001:db8:3333:4444:CCCC:DDDD:EEEE:FFFF\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom API with $request Parameter in SurrealQL\nDESCRIPTION: This snippet demonstrates how to define a custom API endpoint using the DEFINE API statement in SurrealQL. It shows the usage of the $request parameter to access the request body and set custom response headers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/parameters.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE API OVERWRITE \"/test\"\n    FOR get, post \n        MIDDLEWARE\n            api::req::raw_body(false)\n        THEN {\n            RETURN {\n                status: 404,\n                body: $request.body,\n                headers: {\n                    'bla': '123'\n                }\n            };\n        };\n```\n\n----------------------------------------\n\nTITLE: Basic Manual Transaction Implementation\nDESCRIPTION: Rust implementation of a manual transaction that creates two accounts and transfers money between them using direct queries\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/transaction.mdx#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::Surreal;\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n\tlet db = Surreal::new::<Ws>(\"localhost:8000\").await?;\n\n\tdb.signin(Root {\n\t\tusername: \"root\",\n\t\tpassword: \"root\",\n\t})\n\t.await?;\n\n\tdb.use_ns(\"namespace\").use_db(\"database\").await?;\n\n    let response = db\n\n        // Start transaction\n        .query(\"BEGIN\")\n\n        // Setup accounts\n        .query(\"\n            CREATE account:one SET balance = 135605.16;\n            CREATE account:two SET balance = 91031.31;\n        \")\n\n        // Move money\n        .query(\"\n            UPDATE account:one SET balance += 300.00;\n            UPDATE account:two SET balance -= 300.00;\n        \")\n\n        // Finalise\n        .query(\"COMMIT\")\n        .await?;\n\n    println!(\"{response:#?}\");\n\n\t// See if any errors were returned\n\tresponse.check()?;\n\n\tOk(())\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Results with LIMIT Clause in SurrealQL\nDESCRIPTION: Examples of using the LIMIT clause to restrict the number of records returned in a SurrealDB query. This is useful for pagination and performance optimization.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\n-- Select only the top 50 records from the person table\nSELECT * FROM person LIMIT 50;\n```\n\n----------------------------------------\n\nTITLE: Creating Pre-computed Table View in SurrealDB\nDESCRIPTION: Demonstrates how to define a table as a view that aggregates data from the review table. This pre-computed view is event-based, materialized, and incrementally updating.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/table.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\n-- Define a table as a view which aggregates data from the review table\nDEFINE TABLE avg_product_review TYPE NORMAL AS\nSELECT\n\tcount() AS number_of_reviews,\n\tmath::mean(<float> rating) AS avg_review,\n\t->product.id AS product_id,\n\t->product.name AS product_name\nFROM review\nGROUP BY product_id, product_name;\n\n-- Query the projection\nSELECT * FROM avg_product_review;\n```\n\n----------------------------------------\n\nTITLE: Complete Concurrent Database Example\nDESCRIPTION: Full implementation demonstrating concurrent database operations with different client configurations\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/concurrency.mdx#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse std::sync::Arc;\nuse std::time::Instant;\nuse surrealdb::engine::remote::ws::{Client, Ws};\nuse surrealdb::opt::auth::Root;\nuse surrealdb::{Error, Surreal};\n\nconst MAX: usize = 50_000;\n\nenum DbType {\n    Standard,\n    With1,\n    With1000,\n}\n\nimpl DbType {\n    async fn generate(self) -> Result<Surreal<Client>, Error> {\n        let db = match self {\n            DbType::Standard => Surreal::new::<Ws>(\"localhost:8000\").await,\n            DbType::With1 => Surreal::new::<Ws>(\"localhost:8000\").with_capacity(1).await,\n            DbType::With1000 => {\n                Surreal::new::<Ws>(\"localhost:8000\")\n                    .with_capacity(1000)\n                    .await\n            }\n        }?;\n        db.use_ns(\"namespace\").use_db(\"database\").await?;\n        db.signin(Root {\n            username: \"root\",\n            password: \"root\",\n        })\n        .await?;\n        Ok(db)\n    }\n}\n\nasync fn select_index(db: &Surreal<Client>, idx: usize, test_num: &'static str) {\n    let mut result = db\n        .query(\"SELECT * FROM $idx\")\n        .bind((\"idx\", idx))\n        .await\n        .unwrap();\n\n    let db_idx: Option<usize> = result.take(0).unwrap();\n    if let Some(db_idx) = db_idx {\n        println!(\"{test_num} - {idx}: {db_idx}\");\n    }\n}\n\nasync fn async_test(db: Arc<Surreal<Client>>, test_num: &'static str) -> std::time::Duration {\n    let start = std::time::Instant::now();\n    let mut handles = vec![];\n    for idx in 0..=MAX {\n        let db = db.clone();\n        handles.push(tokio::spawn(async move {\n            select_index(&db, idx, test_num).await;\n        }));\n    }\n    for h in handles {\n        h.await.unwrap();\n    }\n    Instant::now() - start\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n\n    let db_standard = Arc::new(DbType::Standard.generate().await?);\n    let db_with_1 = Arc::new(DbType::With1.generate().await?);\n    let db_with_1000 = Arc::new(DbType::With1000.generate().await?);\n\n    let start = std::time::Instant::now();\n    for idx in 0..=MAX {\n        select_index(&db_standard, idx, \"Test1\").await;\n    }\n\n    let res_1 = format!(\"Regular DB: {:?}\", Instant::now() - start);\n    let res_2 = format!(\"Async with capacity 1: {:?}\", async_test(db_with_1, \"Test2\").await);\n    let res_3 = format!(\n        \"Async with capacity 1000: {:?}\",\n        async_test(db_with_1000, \"Test3\").await\n    );\n    let res_4 = format!(\n        \"Async with unbounded capacity: {:?}\",\n        async_test(db_standard, \"Test4\").await\n    );\n\n    println!(\"{res_1}\\n{res_2}\\n{res_3}\\n{res_4}\");\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of LiveNotifications in SurrealDB Golang SDK\nDESCRIPTION: Demonstrates how to use the LiveNotifications method to listen for notifications from a live query. The example shows setting up a goroutine to process notifications and handling application termination signals.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/live_notification.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n)\n\n// Assume db is your database connection with a LiveNotifications method.\nfunc main() {\n\t// Assuming queryUuid is obtained from a previous Live() call.\n\tqueryUuid := \"your-query-uuid-here\"\n\n\tnotifications, err := db.LiveNotifications(queryUuid)\n\tif err != nil {\n\t\tfmt.Println(\"Error setting up notifications:\", err)\n\t\treturn\n\t}\n\n\t// Listen for notifications in a goroutine.\n\tgo func() {\n\t\tfor notification := range notifications {\n\t\t\t// Process each notification as it arrives.\n\t\t\tfmt.Printf(\"Received notification: %+v\\n\", notification)\n\t\t}\n\t}()\n\n\t// Wait for a ctrl-C (SIGINT) or termination signal (SIGTERM) before exiting.\n\tsigs := make(chan os.Signal, 1)\n\tsignal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)\n\t<-sigs\n\n\tfmt.Println(\"Exiting...\")\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Query\nDESCRIPTION: The underlying SurrealQL query that gets executed when using the create() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/create.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nCREATE $thing CONTENT $data;\n```\n\n----------------------------------------\n\nTITLE: PHP Examples of SurrealDB Merge Operations\nDESCRIPTION: Demonstrates different ways to use the merge() method including updating all records in a table and updating specific records using RecordId. Shows how to merge timestamps, settings objects, and simple fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/merge.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Update all records in a table\n$people = $db->merge('person', [\n\t\"updated_at\" => new Date(),\n]);\n\n// Update a record with a specific ID\n$person = $db->merge(new RecordId('person', 'tobie'), [\n\t\"updated_at\" => new Date(),\n\t\"settings\" => [\n\t\t\"active\" => true,\n\t],\n]);\n\n// The content you are merging the record with might differ from the return type\n$record = $db->merge(new RecordId('person', 'tobie'), [\n\t\"name\" => 'Tobie',\n]);\n```\n\n----------------------------------------\n\nTITLE: Using SPLIT Clause for Array Processing in SurrealQL\nDESCRIPTION: Examples of using the SPLIT clause to transform array values into separate records. This clause is useful for data analysis by expanding arrays into individual records that include the original record's data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nCREATE user SET\n    name = \"Name\",\n    emails = [\"me@me.com\", \"longer_email@other_service.com\"];\n\n-- Split the results by each value in an array\nSELECT * FROM user SPLIT emails;\n```\n\n----------------------------------------\n\nTITLE: Initiating Live Queries in SurrealDB Python SDK\nDESCRIPTION: Initiates a live query for a specified table name in SurrealDB. This method enables real-time data streaming for the specified table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndb.live(table, diff)\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with SurrealDB Java SDK\nDESCRIPTION: Demonstrates how to delete records using the SurrealDB Java SDK. Shows deleting a specific record by its ID and deleting all records in a table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/start.mdx#2025-04-16_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// Delete a specific book\ndriver.delete(new RecordId(\"book\", \"aeon\"));\n\n// Delete all book records\ndriver.delete(\"book\");\n```\n\n----------------------------------------\n\nTITLE: Querying SurrealDB in Rust\nDESCRIPTION: These methods are used for querying data from SurrealDB. They include running SurrealQL statements, executing functions, selecting records, and performing live queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ndb.query()\ndb.run()\ndb.select()\ndb.select().live()\n```\n\n----------------------------------------\n\nTITLE: Initializing SurrealDB SDK and Connecting to Database\nDESCRIPTION: Demonstrates how to instantiate the SurrealDB driver, connect to an in-memory database, and select a namespace and database. Uses a try-with-resources block for proper resource management.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/start.mdx#2025-04-16_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage me.yourname.example;\n\nimport com.surrealdb.Surreal;\n\npublic class SurrealDB {\n\n    public static void main(String[] args) {\n\n\t\t// Instantiate the driver\n\t\ttry (final Surreal driver = new Surreal()) {\n\t\t\t// Connect to an in-memory database\n\t\t\tdriver.connect(\"memory\");\n\n\t\t\t// Select a namespace and database\n\t\t\tdriver.useNs(\"example\").useDb(\"example\");\n\n\t\t\t// ...\n\t\t}\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: SurrealQL ALTER Statement Syntax\nDESCRIPTION: Formal syntax definition for the ALTER statement, showing all possible clauses and options for modifying tables including schema type, permissions, and comments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/alter.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nALTER [\n\t| TABLE [ IF EXISTS ] @name\n\t\t[ DROP ]\n\t\t[ SCHEMAFULL | SCHEMALESS ]\n\t\t[ PERMISSIONS [ NONE | FULL\n\t\t\t| FOR select @expression\n\t\t\t| FOR create @expression\n\t\t\t| FOR update @expression\n\t\t\t| FOR delete @expression\n\t\t] ]\n    [ COMMENT @string ]\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Full Record Data Using Record ID in SurrealDB\nDESCRIPTION: This snippet shows how to access the entire data of a record using the id.* syntax when working with record IDs as pointers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_34\n\nLANGUAGE: surql\nCODE:\n```\nSELECT id.* FROM $record;\n```\n\n----------------------------------------\n\nTITLE: Using SELECT in Graph Queries in SurrealDB\nDESCRIPTION: Illustrates how to use SELECT statements and their clauses inside graph queries, particularly at the graph edge portion of the query for more complex data retrieval and manipulation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_28\n\nLANGUAGE: surql\nCODE:\n```\nCREATE |person:1..3|;\n\nRELATE person:1->likes->person:2 SET like_strength = 20, know_in_person = true;\nRELATE person:1->likes->person:3 SET like_strength = 5,  know_in_person = false;\nRELATE person:2->likes->person:1 SET like_strength = 10, know_in_person = true;\nRELATE person:2->likes->person:3 SET like_strength = 12, know_in_person = false;\nRELATE person:3->likes->person:1 SET like_strength = 2,  know_in_person = false;\nRELATE person:3->likes->person:2 SET like_strength = 9,  know_in_person = false;\n\nSELECT ->likes AS likes FROM person;\nSELECT ->(SELECT like_strength FROM likes) AS likes FROM person;\nSELECT ->(SELECT like_strength FROM likes WHERE like_strength > 10) AS likes FROM person;\nSELECT ->(likes WHERE like_strength > 10) AS likes FROM person;\nSELECT ->(SELECT like_strength, know_in_person FROM likes ORDER BY like_strength DESC) AS likes FROM person;\nSELECT ->(SELECT count() as count, know_in_person FROM likes GROUP BY know_in_person) AS likes FROM person;\nSELECT ->(likes LIMIT 1) AS likes FROM person;\nSELECT ->(likes START 1) AS likes FROM person;\n```\n\n----------------------------------------\n\nTITLE: Creating Records with SurrealDB Java SDK\nDESCRIPTION: Shows how to create new book records using the SurrealDB Java SDK. Demonstrates creating a record with an auto-generated ID and creating a record with a custom ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/start.mdx#2025-04-16_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// Create a new book\nBook book = new Book(\n\t\"Aeon's Surreal Renaissance\",\n\t\"Dave MacLeod\",\n\tZonedDateTime.parse(\"2024-10-15T00:00:00Z\"),\n\ttrue\n);\n\n// Create a book record\nBook created = driver.create(Book.class, \"book\", book).get(0);\n\n// Print the record id\nSystem.out.println(\"Created a new book with id \" + created.id);\n\n// Create a book record with a custom id\nBook created = driver.create(Book.class, new RecordId(\"book\", \"aeon\"), book);\n```\n\n----------------------------------------\n\nTITLE: Maximum Request Body Size Configuration\nDESCRIPTION: Shows how to set maximum allowed request body size using api::req::max_body.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/api.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE API \"/test\"\n    FOR get \n        MIDDLEWARE\n            api::req::max_body(\"1000b\")\n        THEN {\n            RETURN {\n                headers: {\n                    \"requested-at\": time::now()\n                },\n                body: SELECT * FROM person\n            };\n        };\n```\n\n----------------------------------------\n\nTITLE: Using GetResults Method on SurrealDbLiveQuery in C#\nDESCRIPTION: Example of using the GetResults method to iterate through all CREATE, UPDATE, and DELETE actions from a live query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/streaming.mdx#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nawait using var liveQuery = await db.LiveRawQuery<Person>(\"LIVE SELECT * FROM person;\");\n\nawait foreach (var response in liveQuery.GetResults())\n{\n    // Either a Create, Update or Delete notification...\n\n    if (response is SurrealDbLiveQueryCreateResponse<Person> create)\n    {\n        // Use the `Result` record\n    }\n    if (response is SurrealDbLiveQueryUpdateResponse<Person> update)\n    {\n        // Use the `Result` record\n    }\n    if (response is SurrealDbLiveQueryDeleteResponse<Person> delete)\n    {\n        // Use the `Result` record\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SHOW Statement Response in SurrealQL\nDESCRIPTION: This snippet shows the expected response format when using the SHOW statement in SurrealQL. It includes changes made to the table, such as table definition and record updates, along with their corresponding versionstamps.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/show.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tchanges: [\n\t\t\t{\n\t\t\t\tdefine_table: {\n\t\t\t\t\tname: 'reading'\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\tversionstamp: 65536\n\t},\n\t{\n\t\tchanges: [\n\t\t\t{\n\t\t\t\tupdate: {\n\t\t\t\t\tid: reading:bavjgpnhkgvudfg4mg16,\n\t\t\t\t\tstory: 'Once upon a time'\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\tversionstamp: 131072\n\t},\n\t{\n\t\tchanges: [\n\t\t\t{\n\t\t\t\tupdate: {\n\t\t\t\t\tid: reading:liq4e7hzjaw7bp5t4pn1,\n\t\t\t\t\tstory: 'there was a database'\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\tversionstamp: 196608\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining patch Method Syntax in Python\nDESCRIPTION: This snippet shows the method signature for the `.patch()` function in the SurrealDB Python SDK. It takes two required arguments: 'thing' (table name or RecordID) and 'data' (JSON Patch data).\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/patch.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.patch(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Generating Different Types of Random IDs in SurrealQL\nDESCRIPTION: Shows various methods for generating random record IDs including default random GUIDs, ULID-based and UUID-based identifiers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n// Generate a random record ID 20 characters in length\n// Charset: `abcdefghijklmnopqrstuvwxyz0123456789`\nCREATE temperature:rand() SET time = time::now(), celsius = 37.5;\n// Identical to the above CREATE statement, because\n// :rand() is the default random ID format\nCREATE temperature SET time = time::now(), celsius = 37.5;\n\n// Generate a ULID-based record ID\nCREATE temperature:ulid() SET time = time::now(), celsius = 37.5;\n// Generate a UUIDv7-based record ID\nCREATE temperature:uuid() SET time = time::now(), celsius = 37.5;\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Create<T> Method in SurrealDB .NET\nDESCRIPTION: Method for creating new records in the database. Supports creating records with random IDs or specific IDs, and allows setting custom fields during creation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/data-manipulation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Create a record with a random ID\nvar person = await db.Create<Person>(\"person\");\n\n// Create a record with a random ID & specific fields\nvar person = await db.Create(\"person\", new Person { Name = \"Tobie\" });\n\n// Create a record with a specific ID\nvar personToCreate = new Person\n{\n    Id = (\"person\", \"tobie\"),\n    Name = \"Tobie\",\n    Settings = new Settings\n    {\n        Active = true,\n        Marketing = true,\n    },\n};\nvar result = await db.Create(personToCreate);\n```\n\n----------------------------------------\n\nTITLE: Using type::thing() Function for Dynamic Record IDs in SurrealQL\nDESCRIPTION: Demonstrates using the type::thing() function to create a record that uses a parameter or function call as its entire record identifier.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_17\n\nLANGUAGE: surql\nCODE:\n```\nLET $now = time::now();\n\nCREATE type::thing(\"weather\", $now) SET city = 'London';\n```\n\n----------------------------------------\n\nTITLE: Object Destructuring Patterns\nDESCRIPTION: Examples of destructuring nested objects and using OMIT clause to exclude specific fields from results\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:1 SET name = 'John', age = 21, obj = { a: 1, b: 2, c: { d: 3, e: 4, f: 5 } };\n```\n\nLANGUAGE: surql\nCODE:\n```\nSELECT obj.{ a, c.{ e, f } } FROM person;\n```\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * OMIT obj.c.{ d, f } FROM person;\n```\n\n----------------------------------------\n\nTITLE: Authentication in SurrealDB with Rust\nDESCRIPTION: These methods handle authentication and session management in SurrealDB. They include authenticating with a JWT token, signing in, signing up, and invalidating authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ndb.authenticate()\ndb.invalidate()\ndb.signin()\ndb.signup()\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields in SurrealQL (Neo4j Equivalent)\nDESCRIPTION: Shows how to retrieve specific fields from records in SurrealDB compared to Neo4j's property selection. This example selects only the name field from person records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_9\n\nLANGUAGE: SurrealQL\nCODE:\n```\nSELECT name  FROM person\n```\n\n----------------------------------------\n\nTITLE: Creating a MultiPoint Geometry in SurrealQL\nDESCRIPTION: This snippet demonstrates how to update a record with a MultiPoint geometry for storing multiple points in a single value. It requires defining the type and providing an array of coordinate pairs.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/geometries.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE person:tobie SET locations = {\n\ttype: \"MultiPoint\",\n\tcoordinates: [\n\t\t[10.0, 11.2],\n\t\t[10.5, 11.9]\n\t],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DEFINE CONFIG Statement Syntax in SurrealQL\nDESCRIPTION: This snippet shows the general syntax for the DEFINE CONFIG statement, including options for API and GraphQL configuration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE CONFIG [ OVERWRITE | IF NOT EXISTS ] \n\n  [ API [ MIDDLEWARE @expression, .. ] [ PERMISSIONS [ NONE | FULL | @expression ] ]\n\n  [ GRAPHQL \n    [ AUTO | NONE ]\n    [ TABLES (AUTO | NONE | INCLUDE table1, table2, ...) ]\n    [ FUNCTIONS (AUTO | NONE | INCLUDE [function1, function2, ...] | EXCLUDE [function1, function2, ...]) ] ]\n```\n\n----------------------------------------\n\nTITLE: SurrealQL Query for Upserting Content\nDESCRIPTION: Shows the equivalent SurrealQL query for the .upsert().content() method in Rust.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/upsert.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nupsert $resource CONTENT $data;\n```\n\n----------------------------------------\n\nTITLE: Defining Access in SurrealDB with Python SDK (v2.x)\nDESCRIPTION: This snippet demonstrates how to define access for user authentication in SurrealDB v2.x using the Python SDK's .query() method. It creates an 'account' access type with signup and signin rules.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/handling-authentication.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.query(\"\"\"\n    DEFINE ACCESS account ON DATABASE TYPE RECORD\n        SIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\n    \tSIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )\n        DURATION FOR TOKEN 15m, FOR SESSION 12h;\n    \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Signing up as a Record User using HTTP Request\nDESCRIPTION: Demonstrates user registration via HTTP POST request, providing the access method name and required user information to create a new account.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/authentication.mdx#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n\t-H \"Accept: application/json\" \\\n\t-d '{\"NS\":\"test\", \"DB\":\"test\", \"AC\":\"user\", \"name\":\"John Doe\", \"email\":\"john.doe@example.com\", \"password\":\"VerySecurePassword!\"}' \\\n\thttp://localhost:8000/signup\n```\n\n----------------------------------------\n\nTITLE: Starting Live Table Queries in SurrealDB with C#\nDESCRIPTION: Initiates a live query for a specific table, optionally including diff information.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\ndb.LiveTable<T>(table, diff)\n```\n\n----------------------------------------\n\nTITLE: Extracting Identifier from SurrealDB Record ID using meta::id()\nDESCRIPTION: The meta::id() function extracts and returns the identifier from a SurrealDB Record ID. This example demonstrates its usage in a RETURN statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/meta.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nRETURN meta::id(person:tobie);\n\n\"tobie\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating RETURN in Conditional Statements in SurrealQL\nDESCRIPTION: This snippet demonstrates how RETURN can be used in conditional statements within functions to break execution based on conditions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/return.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FUNCTION fn::round::up($num: number) {\n    IF $num % 2 == 0 {\n        RETURN $num; -- Breaks execution for the function\n    };\n\n    -- This is only executed if the RETURN inside the IF statement did not break execution\n    RETURN $num + 1;\n};\n```\n\n----------------------------------------\n\nTITLE: Performing Advanced Full-Text Search with SurrealDB\nDESCRIPTION: Demonstrates a complex full-text search query that searches for 'machine learning' across title and body fields, with custom highlighting, combined relevance scoring, and result ordering by score.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/full-text-search.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nSELECT *,\n  search::highlight(\"**\", \"**\", 1) AS body,\n  search::highlight(\"##\", \"\", 0) AS title,\n  search::score(0) + search::score(1) AS score\nFROM article\nWHERE title @0@ \"machine\"\n   OR body @1@ \"machine learning\"\nORDER BY score DESC\nLIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Querying SurrealDB using Python SDK\nDESCRIPTION: This snippet demonstrates the query method syntax in the Python SDK with required and optional parameters for executing SurrealQL statements against a SurrealDB database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/sdks/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndb.query(sql, vars)\n```\n\n----------------------------------------\n\nTITLE: IF ELSE with Multiple Branches in SurrealQL\nDESCRIPTION: Example of IF ELSE statement with multiple ELSE IF branches and a final ELSE, demonstrating complex conditional logic.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/ifelse.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n// Original syntax\nIF $access = \"admin\" THEN\n\tSELECT * FROM account\nELSE IF $access = \"user\" THEN\n\tSELECT * FROM $auth.account\nELSE {\n    THROW \"Access method hasn't been defined!\"\n}\nEND;\n\n// New scope syntax\nRETURN\n    IF $access = \"admin\" { (SELECT * FROM account) }\n    ELSE IF $access = \"user\"  { (SELECT * FROM $auth.account) }\n    ELSE { THROW \"Access method hasn't been defined!\" };\n```\n\n----------------------------------------\n\nTITLE: Using search::score Function in SurrealQL\nDESCRIPTION: This example shows how to use the search::score function to retrieve relevance scores for matched content.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/search.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nSELECT id, title, search::score(1) AS score FROM book\n\tWHERE title @1@ 'rust web'\n\tORDER BY score DESC;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticated User Info from SurrealDB in C#\nDESCRIPTION: Returns the record of an authenticated scope user.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\ndb.Info<T>()\n```\n\n----------------------------------------\n\nTITLE: Configuring SurrealDB Security Capabilities\nDESCRIPTION: Example of starting SurrealDB with specific capability restrictions, denying all capabilities by default and allowing only specific functions and network access.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/capabilities.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --deny-all --allow-funcs \"array, string, crypto::argon2, http::get\" --allow-net api.example.com:443\n```\n\n----------------------------------------\n\nTITLE: Deleting Records from SurrealDB in JavaScript\nDESCRIPTION: Deletes all records or a specific record from SurrealDB. This method is used for removing data from the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.delete<T,U>(thing)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with JWT Token in SurrealDB C#\nDESCRIPTION: Demonstrates how to authenticate a database connection using a JWT token. The JWT token contains claims for namespace, database, scope, and user identification.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/authentication.mdx#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar jwt = new Jwt(\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTdXJyZWFsREIiLCJpYXQiOjE1MTYyMzkwMjIsIm5iZiI6MTUxNjIzOTAyMiwiZXhwIjoxODM2NDM5MDIyLCJOUyI6InRlc3QiLCJEQiI6InRlc3QiLCJTQyI6InVzZXIiLCJJRCI6InVzZXI6dG9iaWUifQ.N22Gp9ze0rdR06McGj1G-h2vu6a6n9IVqUbMFJlOxxA\");\nawait db.Authenticate(jwt);\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Python SDK\nDESCRIPTION: Demonstrates how to update all records in a table or a specific record using the update() method. It replaces the current document data with the specified data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/data-maniplulation.mdx#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Update all records in a table\ndb.update('person', {name: \"Jaime\"})\n\n# Update a record with a specific ID\ndb.update(RecordID('person', 'tobie'), {\n\t\"name\": 'Tobie',\n\t\"settings\": {\n\t\t\"active\": True,\n\t\t\"marketing\": True,\n\t}\n})\n```\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $thing CONTENT $data;\n```\n\n----------------------------------------\n\nTITLE: Implementing ON DELETE REJECT in SurrealDB\nDESCRIPTION: This example shows how ON DELETE REJECT prevents the deletion of records that are referenced by other records. The scenario demonstrates utilities connected to a house, where the house cannot be deleted until it is disconnected from all utilities.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/references.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD connected_to ON utility TYPE option<array<record<house>>> REFERENCE ON DELETE REJECT;\nDEFINE FIELD using ON house TYPE references<utility>;\n\nCREATE house:one;\nCREATE utility:gas, utility:water SET connected_to = [house:one];\n```\n\n----------------------------------------\n\nTITLE: Grouping Query Output Example in SurrealQL\nDESCRIPTION: Example output of GROUP BY queries in SurrealDB, showing the results of grouping by gender and country with aggregate calculations, as well as a simple count of all records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\n-------- Query --------\n\n[\n\t{\n\t\taverage_age: 25,\n\t\tcountry: 'Korea',\n\t\tgender: 'F',\n\t\ttotal: 1\n\t},\n\t{\n\t\taverage_age: 45,\n\t\tcountry: 'UK',\n\t\tgender: 'F',\n\t\ttotal: 1\n\t},\n\t{\n\t\taverage_age: 26,\n\t\tcountry: 'US',\n\t\tgender: 'F',\n\t\ttotal: 2\n\t},\n\t{\n\t\taverage_age: 22,\n\t\tcountry: 'Japan',\n\t\tgender: 'M',\n\t\ttotal: 2\n\t}\n]\n\n-------- Query --------\n\n[\n\t{\n\t\tnumber_of_records: 6\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Ignoring Duplicates During Insert in SurrealQL\nDESCRIPTION: This snippet demonstrates how to use the IGNORE clause to silently ignore duplicate records during an insert operation without throwing an error.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/insert.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nINSERT IGNORE INTO person [\n   { id: \"jaime\", name: \"Jaime\", surname: \"Morgan Hitchcock\" },\n   { id: \"tobie\", name: \"Tobie\", surname: \"Morgan Hitchcock\" },\n\n   { id: \"jaime\", name: \"Jaime\", surname: \"Morgan Hitchcock\" }, -- will not throw an error\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Future that Depends on Other Fields in SurrealQL\nDESCRIPTION: This example demonstrates a future that calculates a value based on another field in the record. The 'can_drive' field is dynamically computed based on the 'birthday' field's value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/futures.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FUNCTION fn::get_age($birthdate: datetime) -> int {\n    duration::years(time::now() - $birthdate)\n};\n\nCREATE person SET\n    birthday = <datetime> \"2007-06-22\",\n    can_drive = <future> { fn::get_age(birthday) >= 18 }\n;\n```\n\n----------------------------------------\n\nTITLE: Complex SurrealDB Query with Path Repetition and String Manipulation\nDESCRIPTION: Demonstrates a multi-step query involving shortest path finding, path repetition, and string manipulation of the results.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_39\n\nLANGUAGE: surql\nCODE:\n```\n-- Start with you\nperson:you\n-- Get the shortest path\n\t.{..+shortest=person:star+inclusive}\n-- by following ->knows->person\n\t(->knows->person)\n-- then grab the names\n\t.name\n-- and capitalize each one\n\t.map(|$n| $n.uppercase());\n```\n\n----------------------------------------\n\nTITLE: Calculating Euclidean Distance in SurrealDB\nDESCRIPTION: The vector::distance::euclidean function computes the Euclidean distance between two vectors. It takes two arrays as input and returns a number representing the straight-line distance between the points.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::distance::euclidean([10, 50, 200], [400, 100, 20]);\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Variables in SurrealDB Python SDK\nDESCRIPTION: Assigns a value as a variable for the current SurrealDB connection. This method is useful for storing and reusing values across multiple queries within the same connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndb.let(key,value)\n```\n\n----------------------------------------\n\nTITLE: HNSW Index Implementation in SurrealQL\nDESCRIPTION: Shows implementation of HNSW (Hierarchical Navigable Small World) index for approximate nearest neighbor search with configurable accuracy parameters EFC and M.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/operators.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nCREATE pts:3 SET point = [8,9,10,11];\nDEFINE INDEX mt_pts ON pts FIELDS point HNSW DIMENSION 4 DIST EUCLIDEAN EFC 150 M 12;\nSELECT id FROM pts WHERE point <|10,40|> [2,3,4,5];\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Future in SurrealQL\nDESCRIPTION: This snippet demonstrates how to create a simple future that computes the current time when accessed. The value will be dynamically computed every time the record is accessed.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/futures.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person SET accessed_date = <future> { time::now() };\n```\n\n----------------------------------------\n\nTITLE: Email Validation Example\nDESCRIPTION: Example of adding email field validation to user table using string::is::email function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD email ON TABLE user TYPE string ASSERT $value.is_email();\n```\n\n----------------------------------------\n\nTITLE: Defining signup Method Syntax in JavaScript\nDESCRIPTION: This snippet shows the method syntax for the `.signup()` function in the SurrealDB JavaScript SDK. It takes an object with namespace, database, and either scope or access properties, along with any additional required variables.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/signup.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.signup({`{ namespace, database, [ scope | access ], [...] }`})\n```\n\n----------------------------------------\n\nTITLE: Creating a Document with Record Links in SurrealDB\nDESCRIPTION: This snippet demonstrates how to create an article document with a reference to a person document using record links in SurrealDB. It shows how to establish relationships between documents without embedding the entire related document.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/document.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nCREATE article SET\n\tcreated_at = time::now(),\n\tauthor = person:john,\n\ttitle = 'Lorem ipsum dolor',\n\ttext = 'Donec eleifend, nunc vitae commodo accumsan, mauris est fringilla.';\n\nCREATE person:john SET\n\tname.first = 'John',\n\tname.last = 'Adams',\n\tname.full = string::join(' ', name.first, name.last),\n\tage = 29,\n\tadmin = true,\n\tsignup_at = time::now()\n;\n```\n\n----------------------------------------\n\nTITLE: Using Ranges with Different Data Types in SurrealQL\nDESCRIPTION: Demonstrates how ranges can be constructed and used with various data types, including strings, dates, and arrays.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ranges.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- All true\n'g' IN 'a'..'z';\nd\"2024-01-01\" IN d\"2020-01-01\"..=d\"2025-01-01\";\n['London', d\"2022-02-02\", 5.7] IN ['London', d\"2020-01-01\"]..=['London', d\"2024-12-31\"];\n\n-- All false\n\"ㅋㅋㅋ\" IN \"a\"..\"z\";\nd\"2028-01-01\" IN d\"2020-01-01\"..=d\"2025-01-01\";\n['Philadelphia', d\"2022-02-02\", 5.7] IN ['London', d\"2020-01-01\"]..=['London', d\"2024-12-31\"];\n```\n\n----------------------------------------\n\nTITLE: Defining Select Method Signature in Golang for SurrealDB SDK\nDESCRIPTION: This snippet shows the method signature for the Select function in the SurrealDB Golang SDK. It uses generic types T and R for flexible result handling and resource specification.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/select.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Select[T, R](resource)\n```\n\n----------------------------------------\n\nTITLE: Querying Array-based Record IDs\nDESCRIPTION: Shows how to query temperature readings using array-based record IDs with time range selection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/time-series.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nSELECT id[2] AS temperture_celsius FROM sensor_readings:[\n\tNONE,\n\tsensor:ARF8394AAA\n]..=[\n\ttime::now(),\n\tsensor:ARF8394AAA\n];\n```\n\n----------------------------------------\n\nTITLE: Executing Raw Queries in SurrealDB with C#\nDESCRIPTION: Runs a set of SurrealQL statements against the database using a raw query, with optional variables.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\ndb.RawQuery<T>(sql, vars)\n```\n\n----------------------------------------\n\nTITLE: Update Method Usage Examples in Python\nDESCRIPTION: Demonstrates two common use cases: updating all records in a table and updating a specific record by ID. Shows how to update simple fields and nested objects.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/update.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Update all records in a table\ndb.update('person', {name: \"Jaime\"})\n\n# Update a record with a specific ID\ndb.update(RecordID('person', 'tobie'), {\n\t\"name\": 'Tobie',\n\t\"settings\": {\n\t\t\"active\": True,\n\t\t\"marketing\": True,\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Using Patch Method with Examples in C#\nDESCRIPTION: Examples showing how to use the .Patch() method to update either a specific record using its ID or all records in a table. The method accepts a record identifier or table name and a collection of patches to apply.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/patch.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Update a record with a specific ID\nvar result = await db.Patch((\"person\", \"tobie\"), patches);\n\n// Update all records in a table\nvar result = await db.Patch(\"person\", patches);\n```\n\n----------------------------------------\n\nTITLE: Filtering Live Query Responses with OfType in C#\nDESCRIPTION: Example of filtering live query responses by type using the OfType operator with an Observable, to focus on specific event types.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/streaming.mdx#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nliveQuery\n    .ToObservable()\n    .OfType<SurrealDbLiveQueryCreateResponse<Person>>()\n    .Select(response => response.Result)\n    .Subscribe((record) => \n    {\n        // Use the created record\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining Relate Method Syntax in C#\nDESCRIPTION: This snippet shows the method signature for the Relate function in the .NET SDK for SurrealDB. It creates a relation between records and takes table, in, out, and data as parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/relate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Relate(table, @in, @out, data)\n```\n\n----------------------------------------\n\nTITLE: Updating a Specific Record by ID in SurrealQL\nDESCRIPTION: This snippet demonstrates how to update a single record by specifying its ID. It adds a new skill to the skills array of the person with ID 'tobie'.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/update.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n-- Update a record with a specific string id to add a new skill: 'Rust'\nUPDATE person:tobie SET skills += 'Rust';\n```\n\n----------------------------------------\n\nTITLE: Comparing PBKDF2 Hashed Passwords in SurrealQL\nDESCRIPTION: Compares a hashed-and-salted pbkdf2 password value with an unhashed password value, returning a boolean result.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/crypto.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\ncrypto::pbkdf2::compare(string, string) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nLET $hash = \"$pbkdf2-sha256$i=10000,l=32$DBURRPJODKEt0IId1Lqe+w$Ve8Z00mibHDSKLbyKTceEBBcDpGoK0AEUl7QzDTIec4\";\nLET $pass = \"this is a strong password\";\nRETURN crypto::pbkdf2::compare($hash, $pass);\n\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: Creating SurrealDB Client with Remote Endpoint in C#\nDESCRIPTION: Shows how to create a SurrealDbClient instance using a remote endpoint. This is used when connecting to a SurrealDB instance hosted on a different server or in the cloud.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/create-a-new-connection.mdx#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Creates a new client using a remote endpoint\nusing var db = new SurrealDbClient(\"wss://cloud.surrealdb.com/rpc\");\n```\n\n----------------------------------------\n\nTITLE: Executing Queries with Parameters in Golang\nDESCRIPTION: Demonstrates how to execute SurrealQL queries with parameter binding in Golang. The example shows creating a record and selecting data from a parameterized table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/sdks/index.mdx#2025-04-16_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// Assign the variable on the connection\nresult, err := db.Query(\"CREATE person; SELECT * FROM type::table($tb);\", map[string]string{\n\t\"tb\": \"person\"\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating with JWT Token in SurrealDB with TypeScript\nDESCRIPTION: This example illustrates how to authenticate the current connection with a JWT token in SurrealDB using the authenticate method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/handling-authentication.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.authenticate('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTdXJyZWFsREIiLCJpYXQiOjE1MTYyMzkwMjIsIm5iZiI6MTUxNjIzOTAyMiwiZXhwIjoxODM2NDM5MDIyLCJOUyI6InRlc3QiLCJEQiI6InRlc3QiLCJTQyI6InVzZXIiLCJJRCI6InVzZXI6dG9iaWUifQ.N22Gp9ze0rdR06McGj1G-h2vu6a6n9IVqUbMFJlOxxA');\n```\n\n----------------------------------------\n\nTITLE: Listening to Live Query Responses in C#\nDESCRIPTION: Example of how to listen to responses from an existing live query using the ListenLive method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/streaming.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait using var liveQuery = db.ListenLive<Person>(queryUuid);\n\n// Consume the live query...\n```\n\n----------------------------------------\n\nTITLE: Merging Single Record Data in C#\nDESCRIPTION: Examples showing how to merge data for a single record using both strongly-typed objects and Dictionary approach. Demonstrates merging specific fields while preserving existing data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/merge.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Only changes the fields specified in the merge object\nvar merge = new PersonMerge\n{\n    Id = (\"person\", \"tobie\"),\n    Settings = new Settings\n    {\n        Active = true,\n        Marketing = false,\n    },\n};\nvar result = await db.Merge<PersonMerge, Person>(merge);\n\n// Only changes the fields specified in the Dictionary\nvar data = new Dictionary<string, object>\n{\n    { \"tags\", new List<string> { \"developer\", \"engineer\" } }\n};\n\nvar result = await db.Merge<Person>((\"person\", \"tobie\"), data);\n```\n\n----------------------------------------\n\nTITLE: Python Example Usage of SurrealDB Upsert\nDESCRIPTION: Examples showing how to upsert records in a table and update specific records using RecordID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/upsert.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Update all records in a table\ndb.upsert('person', {name: \"Jaime\"})\n\n# Update a record with a specific ID\ndb.upsert(RecordID('person', 'tobie'), {\n\t\"name\": 'Tobie',\n\t\"settings\": {\n\t\t\"active\": True,\n\t\t\"marketing\": True,\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in SurrealQL\nDESCRIPTION: Demonstrates the string::concat function that combines multiple strings into one.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::concat('this', ' ', 'is', ' ', 'a', ' ', 'test');\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Access with IF NOT EXISTS Clause in SurrealDB\nDESCRIPTION: This snippet shows how to define a JWT access method only if it doesn't already exist in SurrealDB. It uses the IF NOT EXISTS clause to prevent overwriting existing access methods.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/jwt.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS IF NOT EXISTS example ON DATABASE TYPE JWT ALGORITHM HS512 KEY\n\"sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8\";\n```\n\n----------------------------------------\n\nTITLE: Starting the SurrealDB Web Server\nDESCRIPTION: Command to initialize the web server for interacting with SurrealDB operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/start.mdx#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbun run src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Integrating Model Predictions with Database Queries\nDESCRIPTION: A SurrealQL script that creates sample house listings, executes the house price prediction model on each listing, and filters results based on the predicted price.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/index.mdx#2025-04-16_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nCREATE house_listing SET squarefoot_col = 500.0, num_floors_col = 1.0;\nCREATE house_listing SET squarefoot_col = 1000.0, num_floors_col = 2.0;\nCREATE house_listing SET squarefoot_col = 1500.0, num_floors_col = 3.0;\n\nSELECT * FROM (\n\tSELECT *,\n\tml::house_price_prediction<0.0.1>({\n\t\tsquarefoot: squarefoot_col,\n\t\tnum_floors: num_floors_col\n\t}) AS price_prediction\n\tFROM house_listing\n)\nWHERE price_prediction > 177206.21875;\n```\n\n----------------------------------------\n\nTITLE: SurrealDB .NET Connect Method Example Usage\nDESCRIPTION: Example of how to use the Connect method to establish a connection with a SurrealDB database in a .NET application.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/connect.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Connect();\n```\n\n----------------------------------------\n\nTITLE: Let Method Usage Example in PHP\nDESCRIPTION: Example demonstrating how to use the let() method to assign variables and use them in subsequent queries. Shows variable assignment and usage in CREATE and SELECT statements.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/let.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Assign the variable on the connection\n$db->let('name', [\n\t\"first\" => \"Tobie\",\n\t\"last\" => \"Morgan Hitchcock\",\n]);\n\n// Use the variable in a subsequent query\n$db->query('CREATE person SET name = $name');\n\n// Use the variable in a subsequent query\n$db->query('SELECT * FROM person WHERE name.first = $name.first');\n```\n\n----------------------------------------\n\nTITLE: Using unset Method with SurrealDB Python SDK\nDESCRIPTION: Example demonstrating how to remove a variable named 'name' from the current database connection using the unset method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/unset.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Remove the variable from the connection\nawait db.unset('name')\n```\n\n----------------------------------------\n\nTITLE: Mapping Array Elements with Closures in SurrealQL\nDESCRIPTION: The array::map function allows calling an anonymous function (closure) on every item in the array before passing it on. It supports various operations including type annotations and index access.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_31\n\nLANGUAGE: surql\nCODE:\n```\narray::map(array, @closure) -> array;\n```\n\nLANGUAGE: surql\nCODE:\n```\n[1, 2, 3].map(|$v| $v * 2);\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\"1\", \"2\", \"3\"].map(|$val| {\n  LET $num = <number>$val;\n  LET $is_even = IF $num % 2 = 0 { true } ELSE { false };\n  {\n    value: $num,\n    is_even: $is_even\n  }\n});\n```\n\nLANGUAGE: surql\nCODE:\n```\n[1, 2, 3].map(|$num: int| -> int { $num + 1.1 });\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\n  \": first used in the year 876\",\n  \": the number of moons in the sky\",\n  \": also called a pair\"\n]\n  .map(|$item, $index| <string>$index + $item);\n```\n\nLANGUAGE: surql\nCODE:\n```\n-- Create 1000 objects with a random ULID\nINSERT INTO person ((<array>0..=1000).map(|| {id: rand::ulid()}));\n```\n\n----------------------------------------\n\nTITLE: Creating a LineString Geometry in SurrealQL\nDESCRIPTION: This snippet demonstrates how to update a record with a LineString geometry for storing a path. The LineString requires a type property and coordinates array containing points that form the line.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/geometries.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE city:london SET distance = {\n    type: \"Line\",\n    coordinates: [[-0.118092, 51.509865],[0.1785278, 51.37692386]],\n};\n```\n\n----------------------------------------\n\nTITLE: LET Statement Basic Syntax in SurrealQL\nDESCRIPTION: Demonstrates the fundamental syntax for creating parameters using the LET statement, where parameters are prefixed with $ symbol and can optionally include type definitions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/let.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nLET $@parameter [: @type_name] = @value;\n```\n\n----------------------------------------\n\nTITLE: Expanding Record Fields with Dot-Star in SurrealQL\nDESCRIPTION: Demonstrates how dot-star notation can be used differently depending on context - either to expand all fields of a record or to extract values from an object.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\n-- person:tobie.* means \"expand all of the fields of person:tobie\"\nSELECT * FROM ONLY person:tobie.*;\n(SELECT * FROM ONLY person:tobie.*);\n\n-- `.*` here means \"go through each fields of the\n-- statement and return their values\"\n-- (SELECT * FROM ONLY person:tobie).*;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Update Method in SurrealDB .NET SDK\nDESCRIPTION: Examples demonstrating how to use the Update method to update records in SurrealDB. The first example updates a single record with a specific ID, while the second example updates all records in a table with the same data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/update.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar post = new Post\n{\n    Id = (\"post\", \"another\"),\n    Title = \"A new article\",\n    Content = \"This is a new article created using the .NET SDK\"\n};\n\n// Updates a single record\nawait db.Update(post);\n\nvar data = new Person\n{\n    Name = \"Tobie\",\n    Settings = new Settings\n    {\n        Active = true,\n        Marketing = true,\n    },\n};\n\n// Updates all records inside the \"person\" table\nawait db.Update(\"person\", data);\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP POST Function in SurrealQL\nDESCRIPTION: API definition for the http::post() function which performs remote HTTP POST requests with a JSON body. It accepts a URL string, request body object, and optional headers object, returning the response value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/http.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nhttp::post(string, object) -> value\n```\n\nLANGUAGE: surql\nCODE:\n```\nhttp::post(string, object, object) -> value\n```\n\n----------------------------------------\n\nTITLE: Merging Data in SurrealDB with Python\nDESCRIPTION: The merge method updates all records in a table or a specific record with the provided data. It can be used to update multiple fields or nested structures.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/data-maniplulation.mdx#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Update all records in a table\ndb.merge('person', {\n\t\"updated_at\": datetime.datetime.now().isoformat()\n})\n\n# Update a record with a specific ID\ndb.merge(RecordID('person', 'tobie'), {\n\t\"updated_at\": datetime.datetime.now().isoformat(),\n\t\"settings\": {\n\t\t\"active\": True,\n\t}\n})\n```\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $thing MERGE $data;\n```\n\n----------------------------------------\n\nTITLE: Importing Mini Version of Surreal Deal Store Dataset with CLI\nDESCRIPTION: Command to import the mini version of the Surreal Deal Store dataset into SurrealDB using the CLI import command. Connects to a local server and imports data into the test namespace and database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/demo.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal import --conn http://localhost:8000 --user root --pass root --ns test --db test surreal-deal-store-mini.surql\n```\n\n----------------------------------------\n\nTITLE: Creating a Date Value with JavaScript in SurrealQL\nDESCRIPTION: This snippet demonstrates how to create a SurrealQL record with a timestamp using a JavaScript function that returns a Date object, which is automatically converted to a SurrealQL datetime value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/script/type-conversion.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nCREATE user:test SET created_at = function() {\n\treturn new Date();\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Film Record with Embedded Function in SurrealQL\nDESCRIPTION: This snippet demonstrates creating a film record with an embedded function that filters and transforms ratings. The function uses the 'this' context to access the film's ratings, showcasing how embedded functions can interact with the current document's data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/script/context.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nCREATE film SET\n\tratings = [\n\t\t{ rating: 6, user: user:bt8e39uh1ouhfm8ko8s0 },\n\t\t{ rating: 8, user: user:bsilfhu88j04rgs0ga70 },\n\t],\n\tfeatured = function() {\n\t\treturn this.ratings.filter(\n\t\t\t({ rating }) => rating >= 7\n\t\t).map(({ rating, ...data }) => {\n\t\t\treturn {\n\t\t\t\t...data,\n\t\t\t\trating: rating * 10\n\t\t\t};\n\t\t});\n\t}\n;\n```\n\n----------------------------------------\n\nTITLE: Output of Path Collection Query in SurrealDB\nDESCRIPTION: Shows the structured output of a query that collects all paths in a friend network, starting from 'person:you'.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_34\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t[\n\t\tperson:friend2,\n\t\tperson:acquaintance2\n\t],\n\t[\n\t\tperson:friend2,\n\t\tperson:acquaintance1\n\t],\n\t[\n\t\tperson:friend1,\n\t\tperson:friend2,\n\t\tperson:acquaintance2\n\t],\n\t[\n\t\tperson:friend1,\n\t\tperson:friend2,\n\t\tperson:acquaintance1\n\t],\n\t[\n\t\tperson:friend2,\n\t\tperson:acquaintance3,\n\t\tperson:star\n\t],\n\t[\n\t\tperson:friend1,\n\t\tperson:friend2,\n\t\tperson:acquaintance3,\n\t\tperson:star\n\t]\n]\n```\n\n----------------------------------------\n\nTITLE: Importing SurrealML and SKLearn Dependencies\nDESCRIPTION: Python code showing the necessary imports for working with SurrealML and scikit-learn, including the SurMlFile class, Engine enum, and an example dataset.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.linear_model import LinearRegression\nfrom surrealml import SurMlFile, Engine\nfrom surrealml.model_templates.datasets.house_linear import HOUSE_LINEAR\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Array Functions Reference Table\nDESCRIPTION: HTML table listing array function names and their descriptions. Each function is linked to its corresponding documentation section within the page. The table provides a quick reference for all available array manipulation functions in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th scope=\"col\">Function</th>\n      <th scope=\"col\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayadd\"><code>array::add()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Adds an item to an array if it doesn't exist</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayall\"><code>array::all()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Checks whether all array values are truthy, or equal to a condition</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayany\"><code>array::any()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Checks whether any array value is truthy, or equal to a condition</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayat\"><code>array::at()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Returns value for X index, or in reverse for a negative index</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayappend\"><code>array::append()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Appends an item to the end of an array</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayboolean_and\"><code>array::boolean_and()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Perform the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\">AND</a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\"> </a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\">bitwise operations</a> on two arrays</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayboolean_or\"><code>array::boolean_or()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Perform the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">OR</a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\"> </a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">bitwise operations</a> on two arrays</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayboolean_xor\"><code>array::boolean_xor()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Perform the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">XOR</a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\"> </a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">bitwise operations</a> on two arrays</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayboolean_not\"><code>array::boolean_not()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Perform the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">NOT</a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\"> </a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">bitwise operations</a> on an array</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arraycombine\"><code>array::combine()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Combines all values from two arrays together</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arraycomplement\"><code>array::complement()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Returns the complement of two arrays</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayclump\"><code>array::clump()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Returns the original array split into multiple arrays of X size</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayconcat\"><code>array::concat()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Returns the merged values from two arrays</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arraydifference\"><code>array::difference()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Returns the difference between two arrays</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arraydistinct\"><code>array::distinct()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Returns the unique items in an array</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayfill\"><code>array::fill()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Fills an existing array of the same value</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayfilter\"><code>array::filter()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Filters out values that do not match a pattern</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayfilter_index\"><code>array::filter_index()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Returns the indexes of all occurrences of all matching X value</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayfind\"><code>array::find()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Returns the first matching value</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayfind_index\"><code>array::find_index()</code></a></td>\n      <td>Returns the index of the first occurrence of X value</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayfirst\"><code>array::first()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Returns the first item in an array</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayflatten\"><code>array::flatten()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Flattens multiple arrays into a single array</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayfold\"><code>array::fold()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Applies an operation on an initial value plus every element in the array, returning the final result.</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arraygroup\"><code>array::group()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Flattens and returns the unique items in an array</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayinsert\"><code>array::insert()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Inserts an item at the end of an array, or in a specific position</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayintersect\"><code>array::intersect()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Returns the values which intersect two arrays</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayis_empty\"><code>array::is_empty()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Checks if an array is empty</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arrayjoin\"><code>array::join()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Returns concatenated value of an array with a string in between.</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arraylast\"><code>array::last()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Returns the last item in an array</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arraylen\"><code>array::len()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Returns the length of an array</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arraylogical_and\"><code>array::logical_and()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Performs the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\">AND</a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\"> </a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\">logical operations</a> on two arrays</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arraylogical_or\"><code>array::logical_or()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Performs the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\">OR</a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\"> </a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\">logical operations</a> on two arrays</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arraylogical_xor\"><code>array::logical_xor()</code></a></td>\n      <td scope=\"row\" data-label=\"Description\">Performs the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\">XOR</a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\"> </a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\">logical operations</a> on two arrays</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" data-label=\"Function\"><a href=\"#arraymap\"><code>array::map()</code></a></td>\n```\n\n----------------------------------------\n\nTITLE: Specifying Linking Tables in SurrealQL\nDESCRIPTION: This snippet shows how to define more specific reference fields to distinguish between different types of references, such as owners and publishers of comic books.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/references.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD comics ON person TYPE option<array<record<comic_book>>> REFERENCE;\nDEFINE FIELD products ON publisher TYPE option<array<record<comic_book|book>>> REFERENCE;\nDEFINE FIELD owners ON comic_book TYPE references<person>;\nDEFINE FIELD publishers ON comic_book TYPE references<publisher>;\n\nCREATE person:one, person:two SET comics = [comic_book:one];\nCREATE publisher:one SET products = [comic_book:one, book:one];\nCREATE comic_book:one SET title = \"Loki, God of Stories\";\nSELECT * FROM comic_book;\n```\n\n----------------------------------------\n\nTITLE: Implementing User Signup Command Handler\nDESCRIPTION: Handler for signup command that generates random credentials and creates a new user account in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nCommand::SignUp => {\n    let name = rand::random::<FirstName>().to_string();\n    let pass = rand::random::<FirstName>().to_string();\n    self.signup(Record {\n        access: \"account\",\n        namespace: \"test\",\n        database: \"test\",\n        params: Params {\n            name: &name,\n            pass: &pass,\n        },\n    })\n    .await?;\n    Ok(format!(\n        \"New user created!\\n\\n{{ \\\"name\\\": \\\"{name}\\\", \\n \\\"pass\\\": \\\"{pass}\\\" }}\"\n    ))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing QueryRaw Method in Golang for SurrealDB\nDESCRIPTION: A complete implementation example showing how to use QueryRaw to execute SurrealQL statements against SurrealDB. The example demonstrates preparing queries with parameters, executing them, and handling the results.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/raw-query.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n)\n\n// QueryStmt represents a database query.\ntype QueryStmt struct {\n\tSQL         string\n\tVars        map[string]interface{}\n\tResult      QueryResult\n\tunmarshaler interface{}\n}\n\n// QueryResult is a simple type representing a query result.\ntype QueryResult struct {\n\tData string\n}\n\n// DB simulates a database connection.\ntype DB struct {\n\tcon Connection\n}\n\n// Connection simulates a connection that can send queries.\ntype Connection struct{}\n\n// RPCResponse is a generic response wrapper.\ntype RPCResponse[T any] struct {\n\tResult *T\n}\n\n// Send simulates sending the combined query to the database.\n// For this example, it returns a dummy result for each query.\nfunc (c *Connection) Send(res *RPCResponse[[]QueryResult], method, query string, params map[string]interface{}) error {\n\t// For simplicity, we assume one result per query.\n\tdummyResults := []QueryResult{\n\t\t{Data: \"Result for query: SELECT * FROM person WHERE id = 1\"},\n\t}\n\tres.Result = &dummyResults\n\treturn nil\n}\n\n// GetUnmarshaler returns a dummy unmarshaler.\nfunc (c *Connection) GetUnmarshaler() interface{} {\n\treturn nil\n}\n\n// QueryRaw executes the queries by concatenating them, sending them to the DB,\n// and assigning each query its corresponding result.\nfunc QueryRaw(db *DB, queries *[]QueryStmt) error {\n\tpreparedQuery := \"\"\n\tparameters := map[string]interface{}{}\n\n\tfor i := 0; i < len(*queries); i++ {\n\t\tpreparedQuery += fmt.Sprintf(\"%s;\", (*queries)[i].SQL)\n\t\tfor k, v := range (*queries)[i].Vars {\n\t\t\tparameters[k] = v\n\t\t}\n\t}\n\n\tif preparedQuery == \"\" {\n\t\treturn fmt.Errorf(\"no query to run\")\n\t}\n\n\tvar res RPCResponse[[]QueryResult]\n\tif err := db.con.Send(&res, \"query\", preparedQuery, parameters); err != nil {\n\t\treturn err\n\t}\n\n\tfor i := 0; i < len(*queries); i++ {\n\t\t(*queries)[i].Result = (*res.Result)[i]\n\t\t(*queries)[i].unmarshaler = db.con.GetUnmarshaler()\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\t// Create a dummy database instance.\n\tdb := &DB{\n\t\tcon: Connection{},\n\t}\n\n\t// Define the query statement(s).\n\tqueries := []QueryStmt{\n\t\t{\n\t\t\tSQL:  \"SELECT * FROM person WHERE id = $id\",\n\t\t\tVars: map[string]interface{}{\"id\": 1},\n\t\t},\n\t}\n\n\t// Perform the query operation.\n\tif err := QueryRaw(db, &queries); err != nil {\n\t\tlog.Fatalf(\"QueryRaw failed: %v\", err)\n\t}\n\n\t// Print the query result.\n\tfmt.Printf(\"Query result: %+v\\n\", queries[0].Result)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Fields with Field Access Idiom in SurrealQL\nDESCRIPTION: Example showing how to use the field access idiom with dot notation to retrieve a nested field (city) from an address object within a person record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nSELECT address.city FROM person;\n```\n\n----------------------------------------\n\nTITLE: Interchangeability Between Sets and Arrays in SurrealQL\nDESCRIPTION: This example shows how sets and arrays can be used interchangeably. A field defined as a set will never hold duplicate items, while an array field can accept a set as input and vice versa.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/sets.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD bank_accounts ON TABLE customer TYPE set<int>;\nDEFINE FIELD languages ON TABLE customer TYPE array<string>;\n\nCREATE customer SET\n    bank_accounts = [\n      55555,\n      55555,\n      98787\n    ],\n    languages = <set>[\n        \"en\",\n        \"ja\",\n        \"kr\",\n        \"kr\"\n    ];\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\\n\\t{\\n\\t\\tbank_accounts: [\\n\\t\\t\\t55555,\\n\\t\\t\\t98787\\n\\t\\t],\\n\\t\\tid: customer:uv6mn62t8td9vzvfogh4,\\n\\t\\tlanguages: [\\n\\t\\t\\t'en',\\n\\t\\t\\t'ja',\\n\\t\\t\\t'kr'\\n\\t\\t]\\n\\t}\\n]\n```\n\n----------------------------------------\n\nTITLE: Return Value Modification\nDESCRIPTION: Shows different ways to modify the return value of UPSERT operations using RETURN clause variations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/upsert.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\nUPSERT person:tobie SET interests += 'reading' RETURN NONE;\n\nUPSERT person:tobie SET interests += 'reading' RETURN DIFF;\n\nUPSERT person:tobie SET interests += 'reading' RETURN BEFORE;\n\nUPSERT person:tobie SET interests += 'reading' RETURN AFTER;\n\nUPSERT person:tobie SET interests = ['skiing', 'music'] RETURN name, interests;\n```\n\n----------------------------------------\n\nTITLE: Relation Table Permissions with WHERE in SurrealQL\nDESCRIPTION: Example of defining permissions for a relation table using the WHERE clause. Permissions for CRUD operations are granted based on the relationship between the authenticated user and the related records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/where.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n-- Define a relation table, and constrain the type of relation which can be stored\nDEFINE TABLE assigned_to SCHEMAFULL TYPE RELATION IN tag OUT sticky\n    PERMISSIONS\n        FOR create, select, update, delete\n            WHERE in.owner == $auth.id AND out.author == $auth.id;\n```\n\n----------------------------------------\n\nTITLE: Revoking Conditional Grants in SurrealDB\nDESCRIPTION: Shows how to create multiple users, generate bearer grants for them, and revoke grants based on user attributes using record links.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/access.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\n-- Create records representing users\nCREATE user:1 CONTENT { name: \"tobie\" };\nCREATE user:2 CONTENT { name: \"jaime\" };\n-- Define bearer access method to generate API keys\nDEFINE ACCESS api ON DATABASE TYPE BEARER FOR RECORD DURATION FOR GRANT 10d;\n-- Generate bearer grants to be used by the users\nACCESS api GRANT FOR RECORD user:1;\nACCESS api GRANT FOR RECORD user:2;\n```\n\nLANGUAGE: surql\nCODE:\n```\nACCESS api REVOKE WHERE subject.record.name = \"tobie\";\n```\n\n----------------------------------------\n\nTITLE: Applying JSON Patch to Records in TypeScript\nDESCRIPTION: This example demonstrates how to use the `.patch()` method to update all records in a table and a specific record with a given ID. It shows different JSON Patch operations like replace, add, and remove.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/patch.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Update all records in a table\nconst people = await db.patch('person', [\n\t{ op: 'replace', path: '/created_at', value: new Date() },\n]);\n\n// Update a record with a specific ID\nconst person = await db.patch(new RecordId('person', 'tobie'), [\n\t{ op: 'replace', path: '/settings/active', value: false },\n\t{ op: 'add', path: '/tags', value: ['developer', 'engineer'] },\n\t{ op: 'remove', path: '/temp' },\n]);\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Records by ID in SurrealQL\nDESCRIPTION: Shows how to delete specific records using their numeric or string IDs in SurrealQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/delete.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Delete a record with a specific numeric id\nDELETE person:100;\n\n-- Delete a record with a specific string id\nDELETE person:tobie;\n```\n\n----------------------------------------\n\nTITLE: Using Punct Tokenizer in SurrealQL Analyzer\nDESCRIPTION: This snippet shows how to define an analyzer with a punct tokenizer, which splits text based on punctuation. It includes the analyzer definition and a sample usage with search::analyze().\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/analyzer.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER example_punct TOKENIZERS punct;\nsearch::analyze(\"example_punct\", \"Hello, World!\");\n```\n\n----------------------------------------\n\nTITLE: Patching Records in SurrealDB using Python\nDESCRIPTION: Applies JSON Patch changes to all records in a table or a specific record in the SurrealDB database. This method enables fine-grained modifications to existing data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\ndb.patch(thing,data)\n```\n\n----------------------------------------\n\nTITLE: Defining Root JWT Access in SurrealDB\nDESCRIPTION: This snippet demonstrates how to define a root-level JWT access method in SurrealDB. It specifies the token name, access level, JWT type, algorithm, and encryption key.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/jwt.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS token_name\n  ON ROOT\n  TYPE JWT\n  ALGORITHM HS512\n  KEY \"sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8\";\n```\n\n----------------------------------------\n\nTITLE: Using count() Function Without Arguments in SurrealQL\nDESCRIPTION: The count() function without arguments returns 1, useful for counting the total number of rows in a SELECT statement with a GROUP BY clause.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/count.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\ncount() -> 1\n```\n\n----------------------------------------\n\nTITLE: Configuring HMAC Authentication in SurrealDB\nDESCRIPTION: SurrealQL queries demonstrating how to define JWT access using HMAC algorithm (HS256) with Auth0 client secret for token verification.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/integrate-auth0-as-authentication-provider.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS auth0 ON DATABASE TYPE RECORD\n  WITH JWT ALGORITHM HS256 KEY \"<YOUR_AUTH0_CLIENT_SECRET_VALUE>\"\n;\n```\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TOKEN auth0 ON SCOPE user TYPE HS256 VALUE \"<YOUR_AUTH0_CLIENT_SECRET_VALUE>\";\n```\n\n----------------------------------------\n\nTITLE: Using LET Parameters in RELATE Statements\nDESCRIPTION: Demonstrates using parameters to create relationships between multiple records. This example creates a relationship for every combination of person and article IDs, with each relationship having a timestamp.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\n-- These two statements store the result of the subquery in a parameter\n-- The subquery returns an array of IDs\nLET $person =  (SELECT VALUE id FROM person);\nLET $article = (SELECT VALUE id FROM article);\n\n-- This statement creates a relationship record for every combination of Record IDs\n-- Such that if we have 10 records each in the person and article table\n-- We get 100 records in the wrote edge table (10*10 = 100)\n-- In this case it would mean that each article would have 10 authors\nRELATE $person->wrote->$article SET time.written = time::now();\n```\n\n----------------------------------------\n\nTITLE: Defining Update Merge Method Syntax in Rust\nDESCRIPTION: Demonstrates the syntax for the update().merge() method, which merges new data with existing document data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/update.mdx#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\ndb.update(resource).merge(data)\n```\n\n----------------------------------------\n\nTITLE: Using Contains Functions and Operators in SurrealDB\nDESCRIPTION: This snippet demonstrates various ways to check if one string is contained within another in SurrealDB, using the IN operator and string::contains() function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n-- false\n\"Umple\" IN \"Rumplestiltskin\";\nstring::contains(\"Rumplestiltskin\", \"Umple\");\n-- Same function using method syntax\n\"Rumplestiltskin\".contains(\"Umple\");\n\n-- true\n\"umple\" IN \"Rumplestiltskin\";\nstring::contains(\"Rumplestiltskin\", \"umple\");\n\"Rumplestiltskin\".contains(\"umple\");\n```\n\n----------------------------------------\n\nTITLE: Initiating Live Queries in SurrealDB JavaScript SDK\nDESCRIPTION: Initiates a live query in SurrealDB. This method allows for real-time updates on specified tables or records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.live<T>(table, callback,diff)\n```\n\n----------------------------------------\n\nTITLE: Authenticating a Connection with JWT Token in PHP for SurrealDB\nDESCRIPTION: This method authenticates the current connection with a JWT token. It takes a single required argument 'token' of type string, which is the JWT authentication token.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/authenticate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->authenticate($token)\n```\n\nLANGUAGE: php\nCODE:\n```\n$db->authenticate('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTdXJyZWFsREIiLCJpYXQiOjE1MTYyMzkwMjIsIm5iZiI6MTUxNjIzOTAyMiwiZXhwIjoxODM2NDM5MDIyLCJOUyI6InRlc3QiLCJEQiI6InRlc3QiLCJTQyI6InVzZXIiLCJJRCI6InVzZXI6dG9iaWUifQ.N22Gp9ze0rdR06McGj1G-h2vu6a6n9IVqUbMFJlOxxA');\n```\n\n----------------------------------------\n\nTITLE: Authenticating Database User in SurrealDB with TypeScript\nDESCRIPTION: This example illustrates how to authenticate with a Database user in SurrealDB. It uses the signin method with namespace, database, username, and password arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/handling-authentication.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Authenticate with a Database user\nconst token = await db.signin({\n\tnamespace: 'surrealdb',\n\tdatabase: 'docs',\n\tusername: 'tobie',\n\tpassword: 'surrealdb',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with Full Permissions in SurrealQL\nDESCRIPTION: Shows how to create a function that fetches all products and grants full access permissions to all users.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/function.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FUNCTION fn::fetchAllProducts() {\n\tRETURN (SELECT * FROM product LIMIT 10);\n} PERMISSIONS FULL;\n\nRETURN fn::fetchAllProducts();\n```\n\n----------------------------------------\n\nTITLE: Merging Records in SurrealDB using JavaScript\nDESCRIPTION: Modifies all records in a table or a specific record in SurrealDB. This method is used for partial updates of existing data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.merge<T,U>(thing,data)\n```\n\n----------------------------------------\n\nTITLE: Using ONLY Keyword with RETURN BEFORE in SurrealQL DELETE Statement\nDESCRIPTION: Demonstrates the use of the ONLY keyword with RETURN BEFORE clause to return the object for a specific record before deletion.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/delete.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDELETE ONLY person:tobie RETURN BEFORE;\n```\n\n----------------------------------------\n\nTITLE: Comparing Performance of Regular Query vs Record Range Scan in SurrealDB\nDESCRIPTION: This snippet creates a large number of records and compares the performance between a regular query using a WHERE clause and a record range scan.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_22\n\nLANGUAGE: surql\nCODE:\n```\nFOR $num IN 0..=100000 {\n  CREATE person SET id = $num, num = $num  \n};\n\n-- Assign the output to an unused parameter\n-- to avoid excessive output\nLET $_ = SELECT * FROM person WHERE num IN 0..=1000;\nLET $_ = SELECT * FROM person:0..=1000;\n```\n\n----------------------------------------\n\nTITLE: PHP SurrealDB Authentication Examples\nDESCRIPTION: Complete examples showing how to authenticate with different user types including root, namespace, database, and scope users. Each example demonstrates the required parameters for that authentication level.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/signin.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Authenticate with a root user\n$token = $db->signin([\n\t\"username\" => \"root\",\n\t\"password\" => \"surrealdb\",\n]);\n\n// Authenticate with a Namespace user\n$token = $db->signin([\n\t\"namespace\" => \"surrealdb\",\n\t\"username\" => \"tobie\",\n\t\"password\" => \"surrealdb\",\n]);\n\n// Authenticate with a Database user\n$token = $db->signin([\n\t\"namespace\" => \"surrealdb\",\n\t\"database\" => \"docs\",\n\t\"username\" => \"tobie\",\n\t\"password\" => \"surrealdb\",\n]);\n\n// Authenticate with a Scope user\n$token = $db->signin([\n\t\"namespace\" => \"surrealdb\",\n\t\"database\" => \"docs\",\n\t\"scope\" => \"user\",\n\n\t// Also pass any properties required by the scope definition\n\t\"email\" => \"info@surrealdb.com\",\n\t\"pass\" => \"123456\",\n]);\n```\n\n----------------------------------------\n\nTITLE: Advanced Recursive Path Queries\nDESCRIPTION: Shows advanced recursive path techniques including range specification and instruction grouping with parentheses.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_21\n\nLANGUAGE: surql\nCODE:\n```\nplanet:earth.{1..3}(->has->(?)).name;\n```\n\n----------------------------------------\n\nTITLE: User Signup in SurrealDB (v1.x)\nDESCRIPTION: This snippet shows how to sign up a user in SurrealDB version 1.x using the signup method. It includes the namespace, database, scope, and required properties.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/handling-authentication.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await db.signup({\n\tnamespace: 'surrealdb',\n\tdatabase: 'docs',\n\tscope: 'user',\n\n\t// Also pass any properties required by the scope definition\n\temail: 'info@surrealdb.com',\n\tpass: '123456',\n});\n```\n\n----------------------------------------\n\nTITLE: Example of Upserting Content in SurrealDB with Rust\nDESCRIPTION: Provides a complete example of using .upsert().content() to update a record in the 'person' table with new company information.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/upsert.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::RecordId;\nuse surrealdb::Surreal;\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Person {\n    id: RecordId,\n    name: Option<String>,\n    company: Option<String>,\n    settings: Option<Settings>,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Settings {\n    active: bool,\n    marketing: bool,\n}\n\n#[derive(Debug, Serialize)]\nstruct Company {\n    company: String,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = Surreal::new::<Ws>(\"127.0.0.1:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    // upsert one record in a table\n    let person: Option<Person> = db\n        .upsert((\"person\", \"jaime\"))\n        .content(Company {\n            company: \"SurrealDB\".into(),\n        })\n        .await?;\n    dbg!(person);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ON DELETE REJECT Behavior\nDESCRIPTION: This snippet shows what happens when attempting to delete a record that is protected by ON DELETE REJECT. The house record cannot be deleted because it is referenced by utility records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/references.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nhouse:one.*;\nDELETE house:one;\n```\n\n----------------------------------------\n\nTITLE: Using the .refs() Method in SurrealQL\nDESCRIPTION: This snippet demonstrates how to use the .refs() method to dynamically find references to a record, with options to narrow down the search by table and field name.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/references.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD comics ON person TYPE option<array<record<comic_book>>> REFERENCE;\nDEFINE FIELD borrowed_comics ON person TYPE option<array<record<comic_book>>> REFERENCE;\n\nCREATE person:one SET comics = [comic_book:one];\nCREATE person:two SET borrowed_comics = [comic_book:one];\nCREATE comic_book:one SET title = \"Loki, God of Stories\";\n\n-- All references\ncomic_book:one.refs();\n-- All references from 'person' records\ncomic_book:one.refs('person');\n-- All references from 'person' records via a field 'comics'\ncomic_book:one.refs('person', 'comics');\n```\n\n----------------------------------------\n\nTITLE: Defining a Database-level User in SurrealDB\nDESCRIPTION: Creates a database-level user named 'mary' with the EDITOR role. Database-level users have visibility and permissions limited to resources within their assigned database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/authentication.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE USER mary ON DATABASE PASSWORD \"VerySecurePassword!\" ROLES EDITOR;\n```\n\n----------------------------------------\n\nTITLE: SurrealQL DELETE ONLY Statement Issue\nDESCRIPTION: Demonstration of the DELETE ONLY statement issue where it fails without RETURN $before clause. The workaround shows how to properly use DELETE ONLY by forcing result output with RETURN $before.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/faqs/known-issues.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:one;\n\n// Currently fails\nDELETE ONLY person:one;\n\n// Workaround: add RETURN $before\nDELETE ONLY person:one RETURN $before;\n```\n\n----------------------------------------\n\nTITLE: Starting Basic RocksDB Server\nDESCRIPTION: Basic command to start a SurrealDB server with RocksDB persistence to disk.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/file.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start rocksdb:mydatabase.db\n```\n\n----------------------------------------\n\nTITLE: Selecting Records from SurrealDB in Python\nDESCRIPTION: Selects all records in a table or a specific record from the SurrealDB database. This method is used for retrieving data from the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndb.select(thing)\n```\n\n----------------------------------------\n\nTITLE: Creating a User Document in SurrealDB\nDESCRIPTION: This snippet demonstrates how to create a user document with nested address objects in SurrealDB. It showcases the flexibility of document databases by storing multiple addresses as an array within a single user record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/document.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nCREATE users CONTENT {\n    name: \"Alice Smith\",\n    email: \"alice@example.com\",\n    age: 29,\n    addresses: [\n        {\n            type: \"home\",\n            address_line: \"123 Maple St\",\n            city: \"Springfield\",\n            country: \"USA\"\n        },\n        {\n            type: \"work\",\n            address_line: \"456 Oak Ave\",\n            city: \"Metropolis\",\n            country: \"USA\"\n        }\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Signing In with Credentials using SurrealDB PHP SDK\nDESCRIPTION: This snippet demonstrates various methods of signing in with credentials using the signin method. It covers root, namespace, database, scope, and access authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/core/authentication.mdx#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$token = $db->signin([\n\t\"username\" => \"root\",\n\t\"password\" => \"root\"\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$token = $db->signin([\n\t\"username\" => \"root\",\n\t\"password\" => \"root\",\n\t\"namespace\" => \"surrealdb\"\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$token = $db->signin([\n\t\"username\" => \"root\",\n\t\"password\" => \"root\",\n\t\"namespace\" => \"surrealdb\",\n\t\"database\" => \"surrealdb\"\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$token = $db->signin([\n\t\"email\" => \"user@email.com\",\n\t\"pass\" => \"root\",\n\t\"namespace\" => \"surrealdb\",\n\t\"database\" => \"surrealdb\",\n\t\"scope\" => \"user\"\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$token = $db->signin([\n\t\"email\" => \"user@email.com\",\n\t\"pass\" => \"root\",\n\t\"namespace\" => \"surrealdb\",\n\t\"database\" => \"surrealdb\",\n\t\"access\" => \"user\"\n]);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Truthiness in SurrealQL DELETE Statement\nDESCRIPTION: Illustrates how the WHERE clause in a DELETE statement evaluates the truthiness of a value, deleting records where a field exists and is not a default value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/delete.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nCREATE cat:one SET age = 4;\nCREATE cat:two;\nDELETE cat WHERE age;\nSELECT * FROM cat;\n```\n\n----------------------------------------\n\nTITLE: Calculating Area of a Geometry in SurrealQL\nDESCRIPTION: The geo::area function calculates the area of a geometry in square meters. This example demonstrates calculating the approximate area of Wyoming state using four corner points in a polygon.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/geo.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nRETURN geo::area({\n  type: \"Polygon\",\n  coordinates: [[\n    [-111.0690, 45.0032],\n    [-104.0838, 44.9893],\n    [-104.0910, 40.9974],\n    [-111.0672, 40.9862]\n  ]]\n});\n```\n\n----------------------------------------\n\nTITLE: Using OVERWRITE Clause in Function Definition in SurrealQL\nDESCRIPTION: Demonstrates how to use the OVERWRITE clause to define a function and overwrite an existing one if it already exists, ensuring the latest version is always in use.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/function.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FUNCTION OVERWRITE fn::example {};\n```\n\n----------------------------------------\n\nTITLE: Extracting Values from a Record in SurrealQL\nDESCRIPTION: Demonstrates how parentheses affect the behavior of dot-star notation when accessing record properties, returning the values as an array instead of a structured record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\n(SELECT * FROM ONLY person:tobie).*;\n```\n\n----------------------------------------\n\nTITLE: Database Schema Definition in SurrealQL\nDESCRIPTION: Defines table schema with permissions, fields, and authentication-related configurations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/authenticating-users.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE person SCHEMALESS\n    PERMISSIONS FOR \n        CREATE, SELECT WHERE $auth,\n        FOR UPDATE, DELETE WHERE created_by = $auth;\nDEFINE FIELD name ON TABLE person TYPE string;\nDEFINE FIELD created_by ON TABLE person VALUE $auth READONLY;\n\nDEFINE INDEX unique_name ON TABLE user FIELDS name UNIQUE;\nDEFINE ACCESS account ON DATABASE TYPE RECORD\nSIGNUP ( CREATE user SET name = $name, pass = crypto::argon2::generate($pass) )\nSIGNIN ( SELECT * FROM user WHERE name = $name AND crypto::argon2::compare(pass, $pass) )\nDURATION FOR TOKEN 15m, FOR SESSION 12h\n```\n\n----------------------------------------\n\nTITLE: Connecting to Local and Remote SurrealDB Endpoints in JavaScript\nDESCRIPTION: These snippets demonstrate how to connect to local and remote SurrealDB endpoints using both HTTP and WebSocket protocols. They show the basic usage of the .connect() method with different URLs.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/create-a-new-connection.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Connect to a local endpoint with http protocol\nawait db.connect('http://127.0.0.1:8000/rpc');\n\n // Connect to a local endpoint with ws protocol\nawait db.connect('ws://127.0.0.1:8000/rpc');\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Connect to a remote endpoint with http protocol\nawait db.connect('https://cloud.surrealdb.com/rpc');\n\n // Connect to a remote endpoint with ws protocol\nawait db.connect('wss://cloud.surrealdb.com/rpc');\n```\n\n----------------------------------------\n\nTITLE: Create Method Usage Examples in PHP\nDESCRIPTION: Examples showing different ways to create records using the create method, including creating records with random IDs, specific IDs, and different data structures.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/create.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Create a record with a random ID\n[$person] = $db->create('person');\n\n// Create a record with a specific ID\n$person = $db->create(new RecordId('person', 'tobie'), [\n\t\"name\" => 'Tobie',\n\t\"settings\" => [\n\t\t\"active\" => true,\n\t\t\"marketing\" => true,\n\t],\n]);\n\n// The content you are creating the record with might differ from the return type\n[$record] = $db->create(\n    new RecordId('person', 'tobie'),\n    [\"name\" => \"Tobie\"]\n);\n```\n\n----------------------------------------\n\nTITLE: Removing Tables in SurrealQL (Neo4j Equivalent)\nDESCRIPTION: Demonstrates how to completely remove a table from the database in SurrealQL. This is more destructive than DELETE as it removes both the data and the table definition.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_20\n\nLANGUAGE: SurrealQL\nCODE:\n```\nREMOVE TABLE person\n```\n\n----------------------------------------\n\nTITLE: User Signup in SurrealDB with Python SDK (v2.x)\nDESCRIPTION: This code example demonstrates how to sign up a user using the 'account' access method in SurrealDB v2.x with the Python SDK. It includes the required namespace, database, access, and variables.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/handling-authentication.mdx#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndb.signup({\n\t\"namespace\": 'surrealdb',\n\t\"database\": 'docs',\n\t\"access\": 'account',\n\n    # Also pass any properties required by the access definition\n\t\"variables\": {\n        \"email\": 'info@surrealdb.com',\n        \"password\": '123456'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Records with TypeScript in SurrealDB\nDESCRIPTION: This example demonstrates various ways to use the `.update()` method, including updating all records in a table, updating a specific record by ID, and updating with partial data. It also shows type definitions and usage of generics for type safety.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/update.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n\tid: string;\n\tname: string;\n\tsettings: {\n\t\tactive: boolean;\n\t\tmarketing: boolean;\n\t};\n};\n\n// Update all records in a table\nconst people = await db.update<Person>('person');\n\n// Update a record with a specific ID\nconst person = await db.update<Person>(new RecordId('person', 'tobie'), {\n\tname: 'Tobie',\n\tsettings: {\n\t\tactive: true,\n\t\tmarketing: true,\n\t},\n});\n\n// The content you are updating the record with might differ from the return type\nconst record = await db.update<\n\tPerson,\n\tPick<Person, 'name'>\n>(new RecordId('person', 'tobie'), {\n\tname: 'Tobie',\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing RecordID in Python for SurrealDB\nDESCRIPTION: Shows how to create a RecordID object with a table name and a unique identifier. This is used to represent records returned from SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/data-types.mdx#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# table is \"person\"\n# unique identifier on the table is \"john\"\nrid = RecordID(\"person\", \"john\")\n```\n\n----------------------------------------\n\nTITLE: Authentication Credential Structures in Rust\nDESCRIPTION: Defines the core authentication structures for Root, Namespace, Database and Record access in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/authenticating-users.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub struct Root<'a> {\n    pub username: &'a str,\n    pub password: &'a str,\n}\n\npub struct Namespace<'a> {\n    pub namespace: &'a str,\n    pub username: &'a str,\n    pub password: &'a str,\n}\n\npub struct Database<'a> {\n    pub namespace: &'a str,\n    pub database: &'a str,\n    pub username: &'a str,\n    pub password: &'a str,\n}\n\n// P: any type that implements Serialize\npub struct Record<'a, P> {\n    pub namespace: &'a str,\n    pub database: &'a str,\n    pub access: &'a str,\n    pub params: P,\n}\n```\n\n----------------------------------------\n\nTITLE: SurrealQL Date Format Specifiers\nDESCRIPTION: A comprehensive list of date formatting specifiers used in SurrealQL functions like string::is::datetime and time::format. Each specifier provides different ways to format date components including years, months, days, weeks, and their variations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/formatters.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n%Y    # Full year (2001)\n%C    # Century (20)\n%y    # Year in 2 digits (01)\n%m    # Month number (07)\n%b    # Abbreviated month (Jul)\n%B    # Full month name (July)\n%h    # Abbreviated month (Jul)\n%d    # Day number (08)\n%e    # Space-padded day (8)\n%a    # Abbreviated weekday (Sun)\n%A    # Full weekday (Sunday)\n%w    # Day of week (0-6)\n%u    # ISO day of week (1-7)\n%U    # Week number (28)\n%W    # Week number from Monday\n%G    # ISO week date year\n%g    # ISO week year in 2 digits\n%V    # ISO week number\n%j    # Day of year (189)\n%D    # MM/DD/YY format\n%x    # Locale date format\n%F    # ISO date format\n%v    # DD-Mon-YYYY format\n```\n\n----------------------------------------\n\nTITLE: Export Configuration Example in Rust\nDESCRIPTION: Shows how to use export configuration options to customize what gets exported from the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/export.mdx#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse surrealdb::engine::any::connect;\nuse surrealdb::opt::auth::Root;\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = connect(\"http://localhost:8000\").await?;\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    db.query(\n        \"\n    DEFINE FUNCTION fn::get_cats() { RETURN SELECT * FROM cat };\n    DEFINE TABLE person SCHEMAFULL;\n    DEFINE FIELD name ON person TYPE string;\n    DEFINE FIELD age ON person TYPE int;\n    CREATE person SET name = 'Aeon', age = 20;\n    CREATE cat SET name = 'Cat of Aeon';\n    \",\n    )\n    .await?;\n\n    // Cat-related implementation is still experimental\n    // so don't export the cat table or get_cats() function\n    db.export(\"backup.surql\")\n        .with_config()\n        .tables(vec![\"person\"])\n        .functions(false)\n        .await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Using CONTINUE to Handle Bad Data in SurrealQL Loop\nDESCRIPTION: This example shows how to use CONTINUE to skip iterations when encountering NONE values in a dataset, ensuring only valid weather data is processed and inserted into the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/continue.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Data retrieved from somewhere which contains many NONE values\nLET $weather = [\n\t{\n\t\tcity: 'London',\n\t\ttemperature: 22.2,\n\t\ttimestamp: 1722565566389\n\t},\n\tNONE,\n\t{\n\t\tcity: 'London',\n\t\ttemperature: 20.1,\n\t\ttimestamp: 1722652002699\n\t},\n    {\n        city: 'Phoenix',\n        temperature: 45.1,\n        timestamp: 1722565642160\n    },\n    NONE,\n    NONE,\n    {\n        city: 'Phoenix',\n        temperature: 45.1,\n        timestamp: 1722652070372\n    },\n];\n\nFOR $data IN $weather {\n    IF $data IS NONE {\n        CONTINUE;\n    };\n\n\tCREATE weather CONTENT $data;\n};\n```\n\n----------------------------------------\n\nTITLE: Executing Simple Query with SurrealDB Rust SDK\nDESCRIPTION: Shows how to use the query() method to execute a SurrealQL query, including database connection, authentication, and result handling.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/query.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse surrealdb::engine::any::connect;\nuse surrealdb::opt::auth::Root;\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = connect(\"ws://localhost:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    let query = r#\"\n        LET $data = [\"J. Jonah Jameson\", \"James Earl Jones\"];\n        RETURN $data.map(|$name| {\n            LET $names = $name.split(' ');\n            {\n                first_name:  $names[0],\n                middle_name: $names[1],\n                last_name:   $names[2]\n            }\n        });\n    \"#;\n\n    let result = db.query(query).await?;\n    println!(\"Number of statements: {}\", result.num_statements());\n    dbg!(result);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dot-Star to Extract Object Values in SurrealQL\nDESCRIPTION: Demonstrates how the dot-star notation can be used to extract all values from an object and return them as an array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\n{ a: 1, b: 2 }.*;\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Import in SurrealDB with Rust\nDESCRIPTION: Complete example showing how to connect to a SurrealDB instance, authenticate as root, select a namespace and database, and import data from a backup file. Uses tokio for async operations and includes error handling.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/import.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse surrealdb::engine::any::connect;\nuse surrealdb::opt::auth::Root;\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = connect(\"http://localhost:8000\").await?;\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n    db.import(\"backup.surql\").await?;\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating Authentication in SurrealDB with TypeScript\nDESCRIPTION: This snippet shows how to invalidate the authentication for the current connection in SurrealDB using the invalidate method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/handling-authentication.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.invalidate();\n```\n\n----------------------------------------\n\nTITLE: Using array::intersect function in SurrealQL\nDESCRIPTION: The array::intersect function calculates the values which intersect two arrays, returning a single array containing the values which are in both arrays.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_23\n\nLANGUAGE: surql\nCODE:\n```\narray::intersect(array, array) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::intersect([1, 2, 3, 4], [3, 4, 5, 6]);\n\n[ 3, 4 ]\n```\n\n----------------------------------------\n\nTITLE: Defining ORDER BY Clause Syntax in SurrealQL\nDESCRIPTION: This snippet shows the syntax for the ORDER BY clause in SurrealQL. It includes options for field ordering, collation, numeric sorting, and random ordering.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/order_by.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\n[ ORDER [ BY ] \n\t@field [ COLLATE ] [ NUMERIC ] [ ASC | DESC ], ...\n\t| RAND() ]\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Method Syntax for SurrealDB JavaScript SDK signin\nDESCRIPTION: Defines the method syntax for signing in to SurrealDB using the JavaScript SDK. The method takes an object with various authentication properties.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/signin.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.signin({`{ ... }`})\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Content Method in Rust\nDESCRIPTION: Provides a complete example of using the update().content() method to update all records in a table with new company information.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/update.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::Surreal;\n\n#[derive(Debug, Serialize, Deserialize, Default)]\nstruct Person {\n    name: Option<String>,\n    company: Option<String>,\n    settings: Option<Settings>,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Settings {\n    active: bool,\n    marketing: bool,\n}\n\n#[derive(Debug, Serialize)]\nstruct Company {\n    company: String,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = Surreal::new::<Ws>(\"127.0.0.1:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    db.query(\"CREATE person:tobie, person:jaime\").await?;\n\n    // Update all records in a table\n    let people: Vec<Person> = db\n        .update(\"person\")\n        .content(Company {\n            company: \"SurrealDB\".into(),\n        })\n        .await?;\n    dbg!(people);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Multiple Strings Using string::similarity::fuzzy in SurrealQL\nDESCRIPTION: A comprehensive example demonstrating how to compare multiple strings against an original string using the fuzzy similarity function and store the results.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_36\n\nLANGUAGE: surql\nCODE:\n```\nLET $original = \"SurrealDB\";\nLET $strings = [\"SurralDB\", \"surrealdb\", \"DB\", \"Surreal\", \"real\", \"basebase\", \"eel\", \"eal\"];\n\nFOR $string IN $strings {\n    LET $score = string::similarity::fuzzy($original, $string);\n    IF $score > 0 {\n        CREATE comparison SET of = $original + '\\t' + $string,\n        score = $score\n    };\n};\n\nSELECT of, score FROM comparison ORDER BY score DESC;\n```\n\n----------------------------------------\n\nTITLE: Creating and Using UUID in SurrealDB JavaScript SDK\nDESCRIPTION: Demonstrates how to create, generate and convert UUID values using the custom Uuid class implementation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/data-types.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Uuid(uuid: string | ArrayBuffer | Uint8Array | Uuid)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst uuid = new Uuid(\"159408af-2c23-4ac6-944d-75c3ed09e038\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst v4 = Uuid.v4();\nconst v7 = Uuid.v7();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nUuid.v4().toString();\nUuid.v4().toUint8Array();\nUuid.v4().toArrayBuffer();\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcuts in SurrealQL Editors\nDESCRIPTION: List of keyboard shortcuts available in SurrealQL editors for efficient navigation and editing. These shortcuts help with tasks like indentation, searching, commenting, and executing queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-cloud/advanced-topics/surrealql-editors.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n    <thead>\n        <tr>\n            <th scope=\"col\">Shortcuts</th>\n            <th scope=\"col\">Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td scope=\"row\" data-label=\"Shortcuts\">\n                <code>tab</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Indent the current line by 4 spaces.\n            </td>\n        </tr>\n\t\t<tr>\n            <td scope=\"row\" data-label=\"Shortcuts\">\n                <code>shift + tab</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Unindent the current line by 4 spaces.\n            </td>\n        </tr>\n\t\t<tr>\n            <td scope=\"row\" data-label=\"Shortcuts\">\n                <code>ctrl/cmd + f</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Open the search and replace panel\n            </td>\n        </tr>\n\t\t<tr>\n            <td scope=\"row\" data-label=\"Shortcuts\">\n                <code>ctrl/cmd + /</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Toggles comments on the selected or active line(s)\n            </td>\n        </tr>\n\t\t<tr>\n            <td scope=\"row\" data-label=\"Shortcuts\">\n                <code>ctrl/cmd + left click</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Place multiple cursors at the clicked locations\n            </td>\n        </tr>\n\t\t<tr>\n            <td scope=\"row\" data-label=\"Shortcuts\">\n                <code>ctrl/cmd + shift + L</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Selects all occurrences of the currently selected text\n            </td>\n        </tr>\n\t\t<tr>\n            <td scope=\"row\" data-label=\"Shortcuts\">\n                <code>ctrl/cmd + d</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Selects next occurrence of the currently selected text\n            </td>\n        </tr>\n\t\t<tr>\n            <td scope=\"row\" data-label=\"Shortcuts\">\n                <code>ctrl/cmd + enter</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Execute the query query (only applied to the query editor)\n            </td>\n        </tr>\n\t</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Defining Database JWT Access in SurrealDB\nDESCRIPTION: This snippet shows how to define a database-level JWT access method in SurrealDB. It includes setting the namespace and database, token name, access level, JWT type, algorithm, and encryption key.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/jwt.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nUSE NS abcum DB app_vitalsense;\n\nDEFINE ACCESS token_name\n  ON DATABASE\n  TYPE JWT\n  ALGORITHM HS512\n  KEY \"sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8\";\n```\n\n----------------------------------------\n\nTITLE: LIMIT Result Example in SurrealQL\nDESCRIPTION: Shows the result of applying a LIMIT clause with a START value to an array, demonstrating which elements are returned.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/limit.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t5,\n\t6,\n\t7,\n\t8,\n\t9\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Up User Authentication in SurrealQL\nDESCRIPTION: Defines a unique index for user names and sets up access rules for user signup and signin. It creates a 'user' record on signup with a hashed password and defines signin behavior. Also sets token and session durations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\n    DEFINE INDEX IF NOT EXISTS unique_name ON TABLE user FIELDS name UNIQUE;\n    DEFINE ACCESS IF NOT EXISTS account ON DATABASE TYPE RECORD\n\tSIGNUP ( CREATE user SET name = $name, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE name = $name AND crypto::argon2::compare(pass, $pass) )\n\tDURATION FOR TOKEN 15m, FOR SESSION 12h\n```\n\n----------------------------------------\n\nTITLE: Automatic Edge Deletion When Related Records Are Removed\nDESCRIPTION: Demonstrates how graph edges are automatically deleted when one of the connected records is removed, using a love triangle example where deleting one person breaks two relationships.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_19\n\nLANGUAGE: surql\nCODE:\n```\n-- Create three people\nCREATE person:one, person:two, person:three;\n\n-- And a love triangle involving them all\nRELATE person:one  ->likes->person:two;\nRELATE person:two  ->likes->person:three;\nRELATE person:three->likes->person:one;\n\n-- Person two moves to Venus permanently, so delete\nDELETE person:two;\n\n-- Only one `likes` relationship is left\nSELECT * FROM likes;\n```\n\n----------------------------------------\n\nTITLE: Updating Records in SurrealDB using C#\nDESCRIPTION: Updates all records in a table or a specific record with the provided data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\ndb.Update<T>(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Defining select Method Syntax in TypeScript\nDESCRIPTION: This snippet shows the method signature for the `select` function in the SurrealDB JavaScript SDK. It uses a generic type parameter T for type-safe querying.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/select.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.select<T>(thing)\n```\n\n----------------------------------------\n\nTITLE: Method Syntax for InsertRelation in SurrealDB Golang SDK\nDESCRIPTION: The basic syntax for the InsertRelation method that takes a table name and data to insert into the relation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/insert_relation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.InsertRelation[T](table, data)\n```\n\n----------------------------------------\n\nTITLE: Creating a Function with No Permissions in SurrealQL\nDESCRIPTION: Demonstrates how to define a function that fetches payment details but denies access to all non-admin users.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/function.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FUNCTION fn::fetchAllPaymentDetails() {\n\tRETURN (SELECT stored_cards.expiry_year FROM payment_details LIMIT 5);\n} PERMISSIONS NONE;\n\nRETURN fn::fetchAllPaymentDetails();\n```\n\n----------------------------------------\n\nTITLE: Database Information Structure in SurrealQL\nDESCRIPTION: Example of the database information structure returned by the INFO statement, showing the organization of database components including analyzers, functions, models, params, scopes, tables, tokens, and users.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/concepts/database.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n{\n\tanalyzers: {},\n\tfunctions: {},\n\tmodels: {},\n\tparams: {},\n\tscopes: {},\n\ttables: {},\n\ttokens: {},\n\tusers: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data with SurrealDB in Golang\nDESCRIPTION: Methods for executing queries, selecting records, and managing live queries in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\ndb.Query[T](sql string, vars ...interface{})\ndb.RawQuery[T](sql, vars)\ndb.Select[T,R](resource)\ndb.Live[T](table, diff)\ndb.LiveNotifications[T](queryUuid)\ndb.Kill(queryUuid)\n```\n\n----------------------------------------\n\nTITLE: Database User Authentication in SurrealDB with .NET SDK\nDESCRIPTION: Signs in as a database user in SurrealDB using the .NET SDK. Database authentication requires specifying the namespace, database, username, and password for database-level access.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/signin.mdx#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Sign in using database auth\nawait db.SignIn(\n    new DatabaseAuth\n    {\n        Namespace = \"test\", \n        Database = \"test\", \n        Username = \"johndoe\", \n        Password = \"password123\" \n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Mutating Data with SurrealDB in Golang\nDESCRIPTION: Methods for creating, updating, and deleting records in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\ndb.Create[T](table, data)\ndb.Insert[T](table, data)\ndb.InsertRelation[T](table, data)\ndb.Update[T](table, data)\ndb.Upsert[T](table, data)\ndb.Merge[T](what, data)\ndb.Patch[T](table, data)\ndb.Delete(data)\n```\n\n----------------------------------------\n\nTITLE: Selecting Records from SurrealDB in JavaScript\nDESCRIPTION: Selects all records in a table or a specific record from SurrealDB. This method is used for retrieving data from the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.select<T>(thing)\n```\n\n----------------------------------------\n\nTITLE: Response from Literal Type Validation in SurrealDB\nDESCRIPTION: Shows the success and error responses when creating records with valid and invalid literal field values. The error message indicates the expected type format.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_28\n\nLANGUAGE: surql\nCODE:\n```\n-------- Query --------\n\n[\n\t{\n\t\tcoffee: {\n\t\t\tspecial_order: 'Venti Quadruple Ristretto Half-Decaf Soy Latte with 4 pumps of sugar-free vanilla syrup'\n\t\t},\n\t\tid: order:ga3m9qxtv8m02wdgoe73\n\t}\n]\n\n-------- Query --------\n\"Found 'small' for field `coffee`, with record `order:juq3twfic1s6gxw9ljgj`, but expected a 'regular' | 'large' | { special_order: string }\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Minkowski Distance in SurrealDB\nDESCRIPTION: The vector::distance::minkowski function computes the Minkowski distance between two vectors. It takes two arrays and a number p as input, returning a generalized distance metric.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_16\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::distance::minkowski([10, 20, 15, 10, 5], [12, 24, 18, 8, 7], 3);\n```\n\n----------------------------------------\n\nTITLE: Enabling Authentication for SurrealDB\nDESCRIPTION: Command to update the SurrealDB Helm deployment with authentication enabled. This is done after creating the initial admin credentials to secure the database installation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/azure.mdx#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ helm upgrade \\\n    --set surrealdb.path=$TIKV_URL \\\n    --set surrealdb.auth=true \\\n    --set ingress.enabled=false \\\n    --set service.type=LoadBalancer \\\n    --set service.port=80 \\\n    --set service.targetPort=8000 \\\n    --set image.tag=latest \\\n    surrealdb-tikv surrealdb/surrealdb\n```\n\n----------------------------------------\n\nTITLE: Defining Fields with Type Constraints in SurrealQL\nDESCRIPTION: Example of defining a field with constraints for all properties, using the dot-star notation to specify that all properties of an object field must be of a specific type.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD obj ON test TYPE object;\nDEFINE FIELD obj.* ON test TYPE number;\n```\n\n----------------------------------------\n\nTITLE: Using array::join function in SurrealQL\nDESCRIPTION: The array::join function takes an array and a string as parameters and returns a concatenated string with the delimiter between each array element.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_25\n\nLANGUAGE: surql\nCODE:\n```\narray::join(array, string) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::join([\"again\", \"again\", \"again\"], \" and \");\n\n\"again and again and again\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Record Type Selection in Graph Queries\nDESCRIPTION: Demonstrates how to query multiple record types (product and subscription) in a single graph traversal.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_31\n\nLANGUAGE: surql\nCODE:\n```\nSELECT \n\t->purchased->(product, subscription)\n\t<-purchased<-person\n\t->purchased->(product, subscription)\nFROM person:tobie;\n```\n\n----------------------------------------\n\nTITLE: Conditional Record Updates with FOR Loop\nDESCRIPTION: Shows how to update multiple records based on a SELECT query result using FOR loop iteration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/for.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Set can_vote to true for every person over 18 years old.\nFOR $person IN (SELECT VALUE id FROM person WHERE age >= 18) {\n\tUPDATE $person SET can_vote = true;\n};\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Record Links using REFERENCE in SurrealDB v2.2.0+\nDESCRIPTION: This snippet demonstrates how to define bidirectional record links using the REFERENCE clause introduced in SurrealDB v2.2.0. It shows field definitions, record creation, and querying of bidirectional references.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD comments ON user TYPE option<array<record<comment>>> REFERENCE;\nDEFINE FIELD author ON comment TYPE references;\n\nLET $new_user = CREATE ONLY user SET name = \"User McUserson\";\n-- Create a new comment, use the output to update the user\nUPDATE $new_user SET comments += (CREATE ONLY comment:one SET \n    text = \"I learned something new!\", \n    created_at = time::now())\n    .id;\nUPDATE $new_user SET comments += (CREATE ONLY comment:two SET\n    text = \"I don't get it, can you explain?\",\n    created_at = time::now())\n    .id;\n\n-- 'author' field is populated with the 'user' who wrote the comment\nSELECT * FROM ONLY comment:one;\n-- Or use .refs() to grab the references\ncomment:one.refs();\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with custom user credentials\nDESCRIPTION: Launches an in-memory SurrealDB server with custom username and password. These credentials will bootstrap the server, after which you can use DEFINE USER statements to manage users.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/memory.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user username --pass 123456 memory\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Kill Method\nDESCRIPTION: Demonstrates how to use the kill() method with async/await to terminate a live query by its UUID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/kill.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.kill(queryUuid)\n```\n\n----------------------------------------\n\nTITLE: Query Method Syntax in SurrealDB .NET SDK\nDESCRIPTION: The basic syntax for the Query method in the SurrealDB .NET SDK. This method is asynchronous and accepts SQL statements to be executed against the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/query.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Query(sql)\n```\n\n----------------------------------------\n\nTITLE: Validating Email Addresses in SurrealQL\nDESCRIPTION: The string::is::email function checks if a string is a valid email address. It takes a string input and returns a boolean.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_19\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::email(\"info@surrealdb.com\");\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: Filtering Grants by User Properties in SurrealQL\nDESCRIPTION: Example showing how to filter and display grants based on properties of the associated record users, leveraging record links to access user fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/access.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nACCESS api SHOW WHERE subject.record.name = \"tobie\";\n```\n\n----------------------------------------\n\nTITLE: Defining Arrays with Maximum Length in SurrealDB\nDESCRIPTION: Shows how to define an array field with a maximum number of items in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/arrays.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD employees ON TABLE team TYPE array<record<employee>, 5>;\nCREATE team SET employees = [\n\temployee:one, \n\temployee:two, \n\temployee:three, \n\temployee:four, \n\temployee:five, \n\temployee:doesnt_belong\n];\n```\n\n----------------------------------------\n\nTITLE: Using array::reduce Function in SurrealQL\nDESCRIPTION: The array::reduce function applies a closure to each element of an array, accumulating a value that is returned after processing all elements. The closure receives the current accumulated value and the next item in the array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_39\n\nLANGUAGE: surql\nCODE:\n```\narray::reduce(array, @closure) -> value\n```\n\nLANGUAGE: surql\nCODE:\n```\n[10,20,30,40].reduce(|$a, $b| $a + $b);\n```\n\nLANGUAGE: surql\nCODE:\n```\n\"I am a forwards string\"\n  .split('')\n  .reduce(|$one, $two| $two + $one);\n```\n\nLANGUAGE: surql\nCODE:\n```\n'gnirts sdrawrof a ma I'\n```\n\nLANGUAGE: surql\nCODE:\n```\n\"I don't like whitespace\"\n  .split(\" \")\n  .reduce(|$one, $two| $one + \"_\" + $two);\n```\n\nLANGUAGE: surql\nCODE:\n```\n\"I_don't_like_whitespace\"\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\n    {\n        name: \"Daughter\",\n        money: 100\n    },\n    {\n        name: \"Father\",\n        money: 1000\n    },\n    {\n        name: \"Grandfather\",\n        money: 550\n    },\n    {\n        name: \"Great-grandmother\",\n        money: 10000\n    }\n].reduce(|$one, $two, $index| IF $index > 2 { $one } ELSE {\n    {\n        name: $one.name + \" and \" + $two.name,\n        money: $one.money + $two.money\n    }\n});\n```\n\nLANGUAGE: surql\nCODE:\n```\n{\n\tmoney: 1650,\n\tname: 'Daughter and Father and Grandfather'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Loop Break Condition\nDESCRIPTION: Example showing how to create person records from an array until a number threshold is reached, demonstrating conditional BREAK usage\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/break.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nLET $numbers = [1,2,3,4,5,6,7,8,9];\n\nFOR $num IN $numbers {\n    IF $num > 5 {\n        BREAK;\n\n    } ELSE IF $num < 5 {\n        CREATE type::thing(\n            'person', $num\n        ) CONTENT {\n            name: \"Person number \" + <string>$num\n        };\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Using object::entries() in SurrealQL\nDESCRIPTION: The object::entries function transforms an object into an array with arrays of key-value combinations. Available since v1.1.0.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/object.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nobject::entries(object) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN object::entries({\n  a: 1,\n  b: true\n});\n\n[\n  [ \"a\", 1 ],\n  [ \"b\", true ],\n]\n```\n\n----------------------------------------\n\nTITLE: ACCESS SHOW Syntax in SurrealQL\nDESCRIPTION: The syntax for the SHOW clause of the ACCESS statement, used to display details of grants created with a specific access method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/access.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nACCESS @name [ ON [ ROOT | NAMESPACE | DATABASE ] ]\n\tSHOW [ GRANT @id | ALL | WHERE @expression ]\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Array Data in SurrealQL\nDESCRIPTION: This snippet creates a student record with an array of test results, where each result contains score, date, and name properties for different courses.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nCREATE student SET results = [\n\t{ score: 76, date: \"2017-06-18T08:00:00Z\", name: \"Algorithmics\" },\n\t{ score: 83, date: \"2018-03-21T08:00:00Z\", name: \"Concurrent Programming\" },\n\t{ score: 69, date: \"2018-09-17T08:00:00Z\", name: \"Advanced Computer Science 101\" },\n\t{ score: 73, date: \"2019-04-20T08:00:00Z\", name: \"Distributed Databases\" },\n];\n```\n\n----------------------------------------\n\nTITLE: Creating SurrealDB-Specific Types with JavaScript\nDESCRIPTION: This example shows how to use special JavaScript classes provided by SurrealDB to create duration values, record IDs, and UUID values within embedded functions. These special classes handle the conversion to SurrealQL types.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/script/type-conversion.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE user:test SET\n\tsession_timeout = function() {\n\t\treturn new Duration('1w');\n\t},\n\tbest_friend = function() {\n\t\treturn new Record('user', 'joanna');\n\t},\n\tidentifier = function() {\n\t\treturn new Uuid('03412258-988f-47cd-82db-549902cdaffe');\n\t}\n;\n```\n\n----------------------------------------\n\nTITLE: Uploading Trained Model to SurrealDB\nDESCRIPTION: Python code for uploading a trained machine learning model to a SurrealDB node using the SurMlFile.upload function. It specifies the model file, target URL, and authentication details.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/index.mdx#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nurl = \"http://0.0.0.0:8000/ml/import\"\nSurMlFile.upload(\n    path=\"./linear.surml\",\n    url=url,\n    chunk_size=36864,\n    namespace=\"test\",\n    database=\"test\",\n    username=\"root\",\n    password=\"root\"\n)\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with Versioned SurrealKV\nDESCRIPTION: Launches SurrealDB with SurrealKV storage engine enabled for historical/temporal querying.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start -u root -p root surrealkv+versioned://mydb\n```\n\n----------------------------------------\n\nTITLE: Using array::flatten function in SurrealQL\nDESCRIPTION: The array::flatten function flattens an array of arrays, returning a new array with all sub-array elements concatenated into it.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_19\n\nLANGUAGE: surql\nCODE:\n```\narray::flatten(array) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::flatten([ [1, 2], [3, 4], 'SurrealDB', [5, 6, [7, 8]] ]);\n```\n\n----------------------------------------\n\nTITLE: Authenticating Root User in SurrealDB with TypeScript\nDESCRIPTION: This snippet demonstrates how to authenticate with a root user in SurrealDB. It uses the signin method with username and password credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/handling-authentication.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Authenticate with a root user\nconst token = await db.signin({\n\tusername: 'root',\n\tpassword: 'surrealdb',\n});\n```\n\n----------------------------------------\n\nTITLE: Using string::similarity::jaro Function in SurrealDB\nDESCRIPTION: This example shows the usage of the string::similarity::jaro function in SurrealDB, which provides a more intuitive similarity score for different string comparisons.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\n-- 0.8095238095238096f\nstring::similarity::jaro(\"United Kingdom\", \"United\");\n-- 0.7857142857142857f\nstring::similarity::jaro(\"United Kingdom\", \"Unite\");\n-- 1\nstring::similarity::jaro(\"United\", \"United\");\n-- 0.9444444444444445f\nstring::similarity::jaro(\"United\", \"Unite\");\n```\n\n----------------------------------------\n\nTITLE: Using Logical AND Operator in SurrealQL\nDESCRIPTION: Demonstrates how the logical AND operator checks whether multiple values are truthy, returning the last truthy value in the chain. In this example, all values are truthy, so the result is 30.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/operators.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM 10 AND 20 AND 30;\n\n30\n```\n\n----------------------------------------\n\nTITLE: Invalidating Authentication in SurrealDB Rust SDK\nDESCRIPTION: Shows how to invalidate the current authentication session using the invalidate() method. This method takes no arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\ndb.invalidate().await?\n```\n\n----------------------------------------\n\nTITLE: Generating Argon2 Hashed Passwords in SurrealQL\nDESCRIPTION: Hashes and salts a password using the argon2 hashing algorithm. Note that at this time, there is no way to customize the parameters for this function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/crypto.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\ncrypto::argon2::generate(string) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN crypto::argon2::generate(\"this is a strong password\");\n\n\"$argon2id$v=19$m=4096,t=3,p=1$pbZ6yJ2rPJKk4pyEMVwslQ$jHzpsiB+3S/H+kwFXEcr10vmOiDkBkydVCSMfRxV7CA\"\n```\n\n----------------------------------------\n\nTITLE: Output of Combined Snowball and Mapper Analysis\nDESCRIPTION: The result of analyzing text with both snowball and mapper filters, showing how irregular word forms like 'ran' and 'feet' are properly mapped to their base forms.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_28\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t'manag',\n\t'manag',\n\t'manag',\n\t'run',\n\t'run',\n\t'foot',\n\t'foot',\n\t'introspect',\n\t'introspect',\n\t'introspect'\n]\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB via Ngrok\nDESCRIPTION: Command to establish connection to SurrealDB through Ngrok tunnel with authentication details\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/connect-to-surrealdb-via-ngrok-tunnel.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql --conn wss://[ngrok-address] --user root --pass root --ns test --db test --pretty\n```\n\n----------------------------------------\n\nTITLE: User Signup in SurrealDB (v2.x)\nDESCRIPTION: This code snippet demonstrates how to sign up a user in SurrealDB version 2.x using the signup method. It includes the namespace, database, access method, and required variables.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/handling-authentication.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await db.signup({\n\tnamespace: 'surrealdb',\n\tdatabase: 'docs',\n\taccess: 'account',\n\n    // Also pass any properties required by the access definition\n\tvariables: {\n    \temail: 'info@surrealdb.com',\n    \tpass: '123456',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Namespace in SurrealQL\nDESCRIPTION: Syntax for creating a namespace in SurrealDB using the DEFINE NAMESPACE statement, with options for overwriting existing namespaces or conditional creation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/concepts/namespace.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nDEFINE NAMESPACE [ OVERWRITE | IF NOT EXISTS ] @name [ COMMENT @string ]\n```\n\n----------------------------------------\n\nTITLE: Using HTTP POST Function in SurrealQL\nDESCRIPTION: Examples of using the http::post() function in a RETURN statement, showing both usage without headers and with custom headers. Both examples return a JSON response from the server.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/http.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nRETURN http::post('https://dummyjson.com/comments/1', {\n  \"id\": 1,\n  \"body\": \"This is some awesome thinking!\",\n  \"postId\": 100,\n  \"user\": {\n    \"id\": 63,\n    \"username\": \"eburras1q\"\n  }\n});\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN http::post('https://dummyjson.com/comments/1', {\n  \"id\": 1,\n  \"body\": \"This is some awesome thinking!\",\n  \"postId\": 100,\n  \"user\": {\n    \"id\": 63,\n    \"username\": \"eburras1q\"\n  }\n}, {\n  'Authorization': 'Bearer your-token-here',\n  'Content-Type': 'application/json',\n  'x-custom-header': 'custom-value'\n});\n```\n\nLANGUAGE: surql\nCODE:\n```\n{\n  \"id\": 1,\n  \"body\": \"This is some awesome thinking!\",\n  \"postId\": 100,\n  \"user\": {\n    \"id\": 63,\n    \"username\": \"eburras1q\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Array Length in SurrealQL\nDESCRIPTION: The array::len function calculates the length of an array, returning a number. It includes all items when counting the number of items in the array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_27\n\nLANGUAGE: surql\nCODE:\n```\narray::len(array) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::len([ 1, 2, 1, null, \"something\", 3, 3, 4, 0 ]);\n\n9\n```\n\n----------------------------------------\n\nTITLE: Sanitizing HTML Content in SurrealQL\nDESCRIPTION: Shows how to use string::html::sanitize function to clean user-generated HTML content by removing potentially dangerous elements while preserving safe HTML formatting.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::html::sanitize(\"<h1>Safe Title</h1><script>alert('XSS')</script><p>Safe paragraph. Not safe <span onload='logout()'>event</span>.</p>\");\n\n['<h1>Safe Title</h1><p>Safe paragraph. Not safe <span>event</span>.</p>']\n```\n\n----------------------------------------\n\nTITLE: Record Access Authentication in SurrealDB with .NET SDK\nDESCRIPTION: Signs in with record access in SurrealDB using the .NET SDK. This example uses AuthParams class that extends ScopeAuth to provide email and password-based authentication for accessing specific records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/signin.mdx#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Sign in with Record Access\nvar authParams = new AuthParams\n{\n    Namespace = \"test\",\n    Database = \"test\",\n    Access = \"user\",\n    Email = \"info@surrealdb.com\",\n    Password = \"123456\"\n};\n\nJwt jwt = await db.SignIn(authParams);\n\npublic class AuthParams : ScopeAuth\n{\n\tpublic string? Username { get; set; }\n\tpublic string? Email { get; set; }\n\tpublic string? Password { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Relation Between Records in SurrealDB (JSON)\nDESCRIPTION: Shows how to use the 'relate' method to create a relationship between two records. This example creates a 'knows' relation between two person records, optionally including additional data for the relation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"relate\",\n    \"params\": [\n        \"person:12s0j0bbm3ngrd5c9bx53\",\n        \"knows\",\n        \"person:8s0j0bbm3ngrd5c9bx53\"\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": {\n        \"id\": \"knows:12s0j0bbm3ngrd5c9bx53:8s0j0bbm3ngrd5c9bx53\",\n        \"in\": \"person:12s0j0bbm3ngrd5c9bx53\",\n        \"out\": \"person:8s0j0bbm3ngrd5c9bx53\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 2,\n    \"method\": \"relate\",\n    \"params\": [\n        \"person:john_doe\",          // in\n        \"knows\",                    // relation\n        \"person:jane_smith\",        // out\n        { \"since\": \"2020-01-01\" }   // data\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 2,\n    \"result\": {\n        \"id\": \"knows:person:john_doe:person:jane_smith\",\n        \"in\": \"person:jane_smith\",\n        \"out\": \"person:john_doe\",\n        \"since\": \"2020-01-01\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Bearing Between Two Points in SurrealQL\nDESCRIPTION: The geo::bearing function calculates the bearing between two geolocation points in degrees, with 0 representing north. This example calculates the bearing from Paris to Le Puy En Velay.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/geo.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- LET used here for readability\nLET $paris = (2.358058597411099, 48.861109346459536);\nLET $le_puy_en_velay = (3.883428431947686, 45.04383588468415);\nRETURN geo::bearing($paris, $le_puy_en_velay);\n```\n\n----------------------------------------\n\nTITLE: Purging Expired and Revoked Grants in SurrealDB\nDESCRIPTION: Examples of purging expired or revoked grants with various time conditions to maintain database performance and prevent grant collisions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/access.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nACCESS api PURGE EXPIRED;\n```\n\nLANGUAGE: surql\nCODE:\n```\nACCESS api PURGE REVOKED FOR 90d;\n```\n\nLANGUAGE: surql\nCODE:\n```\nACCESS api PURGE EXPIRED, REVOKED FOR 1y;\n```\n\n----------------------------------------\n\nTITLE: Creating Data for Text Sorting in SurrealDB\nDESCRIPTION: This snippet demonstrates how to create records from an array of strings in SurrealDB, which will be used to illustrate text sorting.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nFOR $word IN ['1', '2', '11', 'Ábaco', 'kitty', 'Zoo'] {\n\tCREATE data SET val = $word;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Namespace JWT Access in SurrealDB\nDESCRIPTION: This snippet illustrates how to define a namespace-level JWT access method in SurrealDB. It includes setting the namespace, token name, access level, JWT type, algorithm, and encryption key.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/jwt.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nUSE NS abcum;\n\nDEFINE ACCESS token_name\n  ON NAMESPACE\n  TYPE JWT\n  ALGORITHM HS512\n  KEY \"sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8\";\n```\n\n----------------------------------------\n\nTITLE: Using bytes::len Function in SurrealQL RETURN Statement\nDESCRIPTION: Example demonstrating the usage of bytes::len function in a RETURN statement. It shows the byte length of various strings, including ASCII, Greek, and mixed Korean/Chinese characters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/bytes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nRETURN [\n    bytes::len(<bytes>\"Simple ASCII string\"),\n    bytes::len(<bytes>\"οὐ γὰρ δυνατόν ἐστιν ἔτι καθεύδειν\"),\n    bytes::len(<bytes>\"청춘예찬 靑春禮讚\")\n];\n```\n\n----------------------------------------\n\nTITLE: Using Uppercase Filter in SurrealQL Analyzer\nDESCRIPTION: This example demonstrates defining an analyzer with a class tokenizer and uppercase filter. It includes the analyzer definition and a sample usage with search::analyze().\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/analyzer.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER example_uppercase TOKENIZERS class FILTERS uppercase;\nsearch::analyze(\"example_uppercase\", \"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Traversing Graph Relations Directly from Records in SurrealDB\nDESCRIPTION: This snippet demonstrates how to traverse graph relations directly from record IDs without using a SELECT statement. It shows both single-direction and bidirectional traversal.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_16\n\nLANGUAGE: surql\nCODE:\n```\ncomment:one<-wrote<-user;\n\nuser:mcuserson->likes->cat;\n\nuser:mcuserson.{ name, cats: ->likes->cat };\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integers with rand::int() in SurrealQL\nDESCRIPTION: The rand::int() function generates random integer values. Without parameters, it returns any random integer. With min and max parameters, it returns a random integer within the specified range.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/rand.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nrand::int() -> int\n```\n\nLANGUAGE: surql\nCODE:\n```\nrand::int(number, number) -> int\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::int();\n\n6841551695902514727\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::int(10, 15);\n\n13\n```\n\n----------------------------------------\n\nTITLE: Using search::analyze Function in SurrealQL\nDESCRIPTION: This example demonstrates the usage of the search::analyze function to analyze text using a defined analyzer.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/search.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nRETURN search::analyze(\"book_analyzer\", \"A hands-on guide to developing, packaging, and deploying fully functional Rust web applications\");\n```\n\n----------------------------------------\n\nTITLE: Record Link Traversal Query\nDESCRIPTION: Demonstrates how to traverse record links using nested next fields to access countries, states/provinces, and cities from a planet record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_18\n\nLANGUAGE: surql\nCODE:\n```\nSELECT \n\tnext AS countries,\n\tnext.next AS states_provinces,\n\tnext.next.next AS cities\nFROM planet:earth;\n```\n\n----------------------------------------\n\nTITLE: Generating Equivalent SurrealQL Query for select Method\nDESCRIPTION: This snippet shows the SurrealQL query that is executed when the `select` method is called. It demonstrates how the JavaScript SDK translates the method call into a database query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/select.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM $thing;\n```\n\n----------------------------------------\n\nTITLE: Exporting SurrealDB Database to Local File\nDESCRIPTION: This example demonstrates how to export a SurrealDB database to a local file named 'export.surql'. It includes connection details, authentication, and specifies the namespace and database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/export.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal export --conn http://localhost:8000 --user root --pass root --ns test --db test export.surql\n```\n\n----------------------------------------\n\nTITLE: SurrealDB .NET SignUp V2.x Implementation\nDESCRIPTION: Example implementation of SignUp method using Record Access in V2.x, demonstrating authentication with email and password credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/signup.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// With Record Access\nvar authParams = new AuthParams\n{\n    Namespace = \"test\",\n    Database = \"test\",\n    Access = \"user\",\n\t// Also pass any properties required by the access definition\n    Email = \"info@surrealdb.com\",\n    Password = \"123456\"\n};\n\nJwt jwt = await db.SignUp(authParams);\n\npublic class AuthParams : ScopeAuth\n{\n\tpublic string? Username { get; set; }\n\tpublic string? Email { get; set; }\n\tpublic string? Password { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Run Method in SurrealDB .NET SDK\nDESCRIPTION: These examples demonstrate how to use the Run method to execute SurrealQL functions. The first example retrieves the current time, while the second shows passing arguments to a string repeat function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/run.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nDateTime now = await db.Run<DateTime>(\"time::now\");\n\nstring result = await db.Run<string>(\"string::repeat\", [\"test\", 3]);\n```\n\n----------------------------------------\n\nTITLE: Defining subscribe_live Method in Python for SurrealDB SDK\nDESCRIPTION: This code snippet shows the method signature for the 'subscribe_live' function in the SurrealDB Python SDK. It takes a query_uuid as a required argument and returns a queue that receives notification messages from a running live query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/subscribelive.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.subscribe_live(query_uuid)\n```\n\n----------------------------------------\n\nTITLE: Querying Recursive Graph Structure in SurrealDB\nDESCRIPTION: Demonstrates how to use '.@' for recursive graph queries, combining results from multiple levels of depth.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_23\n\nLANGUAGE: surql\nCODE:\n```\nplanet:earth\n\t.{1..2}\n\t.{\n\t\tname, \n\t\tid,\n-- Query with ->has->(?) on the current record\n\t\tcontains: ->has->(?).@\n\t};\n```\n\n----------------------------------------\n\nTITLE: ONLY Keyword Usage in FROM Clause\nDESCRIPTION: Shows how to use the ONLY keyword in FROM clause to retrieve data from single tables and limit results. This is particularly useful with SDKs for guaranteed single object deserialization.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/from.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Select only the 'user' table.\nSELECT * FROM ONLY user:one ;\n\n-- Selects only the first 10 records from the 'user' table.\nSELECT * FROM ONLY user LIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Analyzer with Blank Tokenizer and EdgeNGram Filter in SurrealQL\nDESCRIPTION: Creates an analyzer that splits text by whitespace and applies an edge n-gram filter from 3 to 10 characters. Then tests the analyzer using search::analyze function on a sample text.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_16\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER blank_edgengram TOKENIZERS blank FILTERS edgengram(3, 10);\nsearch::analyze(\"blank_edgengram\", \"The Wheel of Time turns, and Ages come and pass, leaving memories that become legend.\");\n```\n\n----------------------------------------\n\nTITLE: Database Definition with IF NOT EXISTS\nDESCRIPTION: Example demonstrating how to define a database only if it doesn't already exist, using the IF NOT EXISTS clause.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/database.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Create a DATABASE if it does not already exist\nDEFINE DATABASE IF NOT EXISTS app_vitalsense;\n```\n\n----------------------------------------\n\nTITLE: Working with Bytes Type in SurrealQL\nDESCRIPTION: This snippet shows how to define fields with the bytes data type and how to create records with byte values. The bytes type is used for storing binary data like images or files in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Define a field with a single type\nDEFINE FIELD image ON TABLE product TYPE bytes;\n\n-- Create a record with a bytes field and set the value\nCREATE foo SET value = <bytes>\"bar\";\n\n```\n\n----------------------------------------\n\nTITLE: JavaScript Usage Example\nDESCRIPTION: Example demonstrating how to assign a variable using .let() and use it in subsequent queries. Shows setting a complex object as a variable and using it in CREATE and SELECT statements.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/let.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Assign the variable on the connection\nawait db.let('name', {\n\tfirst: 'Tobie',\n\tlast: 'Morgan Hitchcock',\n});\n\n// Use the variable in a subsequent query\nawait db.query('CREATE person SET name = $name');\n\n// Use the variable in a subsequent query\nawait db.query('SELECT * FROM person WHERE name.first = $name.first');\n```\n\n----------------------------------------\n\nTITLE: SurrealQL Anonymous Function Basic Syntax\nDESCRIPTION: Demonstrates the basic syntax structure for defining anonymous functions in SurrealQL with parameters and expressions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/closures.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\n$@parameter = |@parameters| @expression;\n```\n\n----------------------------------------\n\nTITLE: Executing SurrealQL Queries in Python\nDESCRIPTION: Runs a set of SurrealQL statements against the SurrealDB database. This method allows for executing complex queries and operations using SurrealQL syntax.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndb.query(sql,vars)\n```\n\n----------------------------------------\n\nTITLE: Defining Wildcard API Paths in SurrealQL\nDESCRIPTION: Example of creating an API endpoint with a wildcard path, allowing for matching multiple path segments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/api.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE API OVERWRITE \"/test/*anything_goes\" FOR get THEN {\n    RETURN {\n        body: {\n            some: \"data\"\n        }\n    }\n};\n\napi::invoke(\"/test/this_matches\");\napi::invoke(\"/test/same_here\");\napi::invoke(\"/test/works/with/multiple/paths/now\");\n```\n\n----------------------------------------\n\nTITLE: Using SurrealDB Use Method in Python\nDESCRIPTION: Examples showing both synchronous and asynchronous usage of the use() method to switch to the 'surrealdb' namespace and 'docs' database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/use.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndb.use('surrealdb', 'docs')\n\n# Async\nawait db.use('surrealdb', 'docs')\n```\n\n----------------------------------------\n\nTITLE: Create Method Syntax in Rust\nDESCRIPTION: Basic syntax for the create() method in the SurrealDB Rust SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.create(resource).content(data)\n```\n\n----------------------------------------\n\nTITLE: Initiating a Live Query with SurrealQL in C#\nDESCRIPTION: Example of initiating a live query from a SurrealQL statement using the LiveQuery method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/streaming.mdx#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nconst string table = \"person\"; \nawait using var liveQuery = await db.LiveQuery<Person>($\"LIVE SELECT * FROM type::table({table});\");\n\n// Consume the live query...\n```\n\n----------------------------------------\n\nTITLE: Insert Relation Method Signature\nDESCRIPTION: Method signature for inserting relations in SurrealDB using Python SDK. Takes table name and data as required arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/insert_relation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.insert_relation(table, data)\n```\n\n----------------------------------------\n\nTITLE: Generating PBKDF2 Hashed Passwords in SurrealQL\nDESCRIPTION: Hashes and salts a password using the pbkdf2 hashing algorithm. Note that at this time, there is no way to customize the number of iterations for pbkdf2.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/crypto.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\ncrypto::pbkdf2::generate(string) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN crypto::pbkdf2::generate(\"this is a strong password\");\n\n\"$pbkdf2-sha256$i=10000,l=32$DBURRPJODKEt0IId1Lqe+w$Ve8Z00mibHDSKLbyKTceEB\"\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Integer and Large Numeric IDs in SurrealQL\nDESCRIPTION: Demonstrates creating records with integer IDs within the 64-bit signed range and large numbers outside that range that are stored as strings.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nCREATE temperature:17493 SET time = time::now(), celsius = 37.5;\nCREATE year:29878977097987987979232 SET\n    events = [\n        \"Galactic senate convenes\",\n        \"Mr. Bean still waits in a field\"\n    ];\n```\n\n----------------------------------------\n\nTITLE: Defining Update Method Syntax in Rust\nDESCRIPTION: Shows the basic syntax for the update() method in the SurrealDB Rust SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.update(resource)\n```\n\n----------------------------------------\n\nTITLE: Using surrealdb.Result[T] for type-safe query results in Golang\nDESCRIPTION: This example shows how to use the surrealdb.Result[T] helper type to handle the response from a SurrealDB query in a type-safe manner. It demonstrates sending a query to select users and handling the result.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/data-types.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar res surrealdb.Result[[]Users]\nerr := db.Send(&res, \"select\", model.Table(\"users\"))\nif err != nil {\n\tpanic(err)\n}\nfmt.Printf(\"users: %+v\\n\", users.R)\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Minutes in SurrealQL\nDESCRIPTION: The duration::mins function counts how many minutes fit into a duration. It takes a duration as input and returns a number.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/duration.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nduration::mins(duration) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN duration::mins(3w);\n\n30240\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Return Value in SurrealQL\nDESCRIPTION: This snippet demonstrates how to use RETURN to set the result of a transaction in SurrealQL. It shows that only the RETURN value is output, omitting results of other queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/return.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nBEGIN TRANSACTION;\n\n-- We are executing quite a few queries here\nLET $firstname = \"John\";\nLET $lastname = \"Doe\";\n\nLET $person = CREATE person CONTENT {\n\tfirstname: $firstname,\n\tlastname: $lastname,\n};\n\n-- But because we end with a RETURN query, only the person's ID will be returned\n-- The results of the other queries will be omitted.\nRETURN $person.id;\n\n-- One issue with this approach is that query errors are generic.\n-- To get around that, use a block, which is executed as a transaction by itself.\n\nCOMMIT TRANSACTION;\n```\n\n----------------------------------------\n\nTITLE: Inserting Vector Data into SurrealDB\nDESCRIPTION: This snippet demonstrates how to insert sample data into a 'liquidsVector' table, including vector embeddings for each entry. The embeddings are represented as arrays of floating-point numbers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/vector-search.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO liquidsVector [\n    {sample:'Sea water', content: 'The sea water contains some amount of lead', embedding: [0.1, 0.2, 0.3, 0.4] },\n    {sample:'Tap water', content: 'The team lead by Dr. Rose found out that the tap water in was potable', embedding:[1.0, 0.1, 0.4, 0.3]},\n    {sample:'Sewage water', content: 'High amounts of a were found in Sewage water', embedding : [0.4, 0.3, 0.2, 0.1]}\n];\n```\n\n----------------------------------------\n\nTITLE: Authenticating with a New Token in SurrealDB\nDESCRIPTION: This snippet shows how to authenticate with SurrealDB using a new token. It includes the command to sign in with updated token information for executing SQL queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/authenticating-users.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsurreal sql --namespace namespace --database database --pretty --token \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpYXQiOjE3MzA4NjQ2NDAsIm5iZiI6MTczMDg2NDY0MCwiZXhwIjoxNzMwODY1NTQwLCJpc3MiOiJTdXJyZWFsREIiLCJqdGkiOiIyZjExZTQzZi04ODg1LTRmNzAtOGI2Zi0zNGZmZGZlZWY4MDUiLCJOUyI6Im5hbWVzcGFjZSIsIkRCIjoiZGF0YWJhc2UiLCJBQyI6ImFjY291bnQiLCJJRCI6InVzZXI6YW92bHN0dzBvN2R1Y2J4ZWpqZWsifQ.0GWwMiAjn5kKUoNAw2TxAdVLhWIHeJsVWvlAzw1QZ91qdIhkazygdG5uFl5DHVmmoYC-cLo-ko27jiRCid5xDg\"\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Index for Bidirectional Relations in SurrealDB\nDESCRIPTION: This snippet demonstrates how to create a unique index for bidirectional relations like friendships. It ensures that the relation can only be established once between two records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD key ON TABLE friends_with VALUE <string>array::sort([in, out]);\nDEFINE INDEX only_one_friendship ON TABLE friends_with FIELDS key UNIQUE;\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB in Unauthenticated Mode\nDESCRIPTION: Initializes SurrealDB without authentication, granting root-level access to all users.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --unauthenticated\n```\n\n----------------------------------------\n\nTITLE: Interactive Web Interface for SurrealDB Operations\nDESCRIPTION: Creates a web server using Bun that provides a UI for interacting with SurrealDB operations. Includes script execution functionality and styled HTML interface.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/start.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve, spawnSync } from \"bun\";\nimport { join } from \"path\";\nimport { cwd } from \"process\";\nimport { existsSync } from \"fs\";\n\nfunction executeScript(scriptName: string) {\n  const scriptPath = join(cwd(), \"src\", `${scriptName}-user.ts`);\n  if (!existsSync(scriptPath)) {\n    return `Error: Script file \"${scriptName}-user.ts\" not found in the src directory.`;\n  }\n  const result = spawnSync([\"bun\", scriptPath], {\n    stdout: \"pipe\",\n    stderr: \"pipe\",\n  });\n  if (result.success) {\n    return result.stdout.toString();\n  }\n  return `Error executing script: ${result.stderr.toString()}`;\n}\n\nserve({\n  port: 3000,\n  fetch(req) {\n    const url = new URL(req.url);\n    const script = url.searchParams.get(\"script\");\n    if (script) {\n      const output = executeScript(script);\n      return new Response(output, {\n        headers: { \"Content-Type\": \"text/plain\" },\n      });\n    }\n    return new Response(`<!DOCTYPE html>...`);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Equivalent Graph Queries in SurrealQL\nDESCRIPTION: Demonstrates how the dot operator or destructuring can sometimes produce the same results as a graph clause with SELECT. Both queries return all relationship data from person:one.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_62\n\nLANGUAGE: surql\nCODE:\n```\nSELECT ->(SELECT * FROM knows) FROM person:one;\nSELECT ->knows.* FROM person:one;\n```\n\n----------------------------------------\n\nTITLE: User Signup in SurrealDB Python SDK\nDESCRIPTION: Signs up this connection to a specific authentication scope in SurrealDB. This method is used for user registration and authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\ndb.signup(vars)\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB via WebSocket in PHP\nDESCRIPTION: Establishes a connection to the SurrealDB instance using the WebSocket protocol.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/core/initialization.mdx#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$db->connect(\"ws://127.0.0.1:8000/rpc\");\n```\n\n----------------------------------------\n\nTITLE: Translated SurrealQL Query for Select Method\nDESCRIPTION: This snippet shows the equivalent SurrealQL query that the select() method generates and runs in the database. It selects all fields from the specified resource.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/select.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM $resource;\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB - Usage Examples\nDESCRIPTION: Demonstrates practical examples of connecting to a SurrealDB instance using both synchronous and asynchronous connection methods. Shows how to connect to a cloud instance of SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/connect.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSurreal('https://cloud.surrealdb.com')\n\n# async\nAsyncSurreal('https://cloud.surrealdb.com')\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with TLS Encryption in Bash\nDESCRIPTION: Shows how to start SurrealDB with TLS encryption for secure communication. This enables encryption in transit to protect against man-in-the-middle attacks.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# If you want to serve TLS directly with SurrealDB:\nsurreal start --web-crt \"cert.pem\" --web-key \"key.pem\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating Namespace User in SurrealDB with Python\nDESCRIPTION: Example showing how to authenticate as a namespace user in SurrealDB using Python client.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/handling-authentication.mdx#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Authenticate with a Namespace user\ndb.signin({\n\t\"namespace\": 'surrealdb',\n\t\"username\": 'tobie',\n\t\"password\": '123456',\n})\n```\n\n----------------------------------------\n\nTITLE: Delete Method Definition in Python\nDESCRIPTION: Method signature for the delete operation in SurrealDB Python SDK. Takes a thing parameter which can be either a table name or RecordID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/delete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.delete(thing,data)\n```\n\n----------------------------------------\n\nTITLE: Generating UUID v7 from Timestamp in SurrealQL\nDESCRIPTION: Demonstrates the usage of rand::uuid::v7 function to generate a UUID v7 from a given timestamp. It includes examples of using the function in a RETURN statement and in a series of CREATE operations with time-based queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/rand.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::uuid::v7(d\"2021-09-07T04:27:53Z\");\n```\n\nLANGUAGE: surql\nCODE:\n```\nCREATE ONLY test:[rand::uuid::v7()] SET created = time::now(), num = 1;\nSLEEP 100ms;\n\nLET $rec = CREATE ONLY test:[rand::uuid::v7()] SET created = time::now(), num = 2;\nSLEEP 100ms;\nCREATE ONLY test:[rand::uuid::v7()] SET created = time::now(), num = 3;\n-- Select the value of the record created before the current record in the table\nSELECT VALUE num FROM test:[rand::uuid::v7($rec.created - 100ms)]..;\n```\n\n----------------------------------------\n\nTITLE: Defining Record Access Method Syntax in SurrealQL\nDESCRIPTION: The syntax for defining a record access method in SurrealDB using SurrealQL. It includes options for signup, signin, JWT configuration, and duration settings.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/record.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS [ OVERWRITE | IF NOT EXISTS ] @name\n  ON DATABASE TYPE RECORD\n    [ SIGNUP @expression ]\n    [ SIGNIN @expression ]\n    [ WITH JWT\n      [ ALGORITHM @algorithm KEY @key | URL @url ]\n      [ WITH ISSUER KEY @key ]\n    ]\n    [ WITH REFRESH ]\n  [ AUTHENTICATE @expression ]\n  [ DURATION\n    [ FOR TOKEN @duration ]\n    [ FOR SESSION @duration ]\n  ]\n```\n\n----------------------------------------\n\nTITLE: Sorting Arrays Naturally in SurrealDB\nDESCRIPTION: The array::sort_natural function sorts an array in ascending or descending order, with numeric strings sorted numerically. It can take an optional boolean or string parameter to specify the sort direction.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_47\n\nLANGUAGE: surql\nCODE:\n```\narray::sort_natural(array) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\narray::sort_natural(array, bool) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\narray::sort_natural(array, string) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\n[8, 9, 10, '3', '2.2', '11'].sort();\n[8, 9, 10, '3', '2.2', '11'].sort_natural();\n```\n\n----------------------------------------\n\nTITLE: Valid Field Names in SurrealQL\nDESCRIPTION: Shows how to create fields with both simple ASCII names and complex characters using backticks.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/objects.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE ONLY user SET my_name = 'name';\nCREATE ONLY user SET `mi_nómine😊` = 'name';\n```\n\n----------------------------------------\n\nTITLE: Showing RETURN Breaking Execution in Transactions in SurrealQL\nDESCRIPTION: This snippet illustrates how RETURN breaks execution in transactions, preventing subsequent statements from being executed.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/return.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nBEGIN;\nRETURN 1; -- I am executed\nCREATE a; -- I am not executed\nRETURN 2; -- I am not executed\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Comparing Traditional and Method Chaining Syntax for Multiple String Operations in SurrealQL\nDESCRIPTION: Examples demonstrating the difference between traditional function calls and method chaining for multiple string operations, highlighting improved readability.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_42\n\nLANGUAGE: surql\nCODE:\n```\n-- Traditional syntax\nstring::concat(\n  string::uppercase(\n    string::replace(\n      string::replace(\"I'll send you a check for the catalog\", \"ck\", \"que\")\n    , \"og\", \"ogue\")\n  )\n, \"!!!!\");\n\n-- Method chaining syntax\n\"I'll send you a check for the catalog\"\n  .replace(\"ck\", \"que\")\n  .replace(\"og\", \"ogue\")\n  .uppercase()\n  .concat(\"!!!!\");\n```\n\n----------------------------------------\n\nTITLE: Using NGram Filter in SurrealQL Analyzer\nDESCRIPTION: This snippet demonstrates the usage of the ngram filter in a SurrealQL analyzer. It shows how to create an analyzer with ngram tokenization and apply it to a text string, generating n-grams of specified lengths.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/analyzer.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER example_ngram TOKENIZERS class FILTERS ngram(1,3);\nsearch::analyze(\"example_ngram\", \"apple banana\");\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t'a',\n\t'ap',\n\t'app',\n\t'p',\n\t'pp',\n\t'ppl',\n\t'p',\n\t'pl',\n\t'ple',\n\t'l',\n\t'le',\n\t'e',\n\t'b',\n\t'ba',\n\t'ban',\n\t'a',\n\t'an',\n\t'ana',\n\t'n',\n\t'na',\n\t'nan',\n\t'a',\n\t'an',\n\t'ana',\n\t'n',\n\t'na',\n\t'a'\n]\n```\n\n----------------------------------------\n\nTITLE: Working with SELECT and Arrays in SurrealQL\nDESCRIPTION: Shows how SELECT statements return arrays by default and demonstrates the use of the ONLY keyword.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/arrays.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Even this returns an array\nSELECT * FROM 9;\n-- Use the ONLY clause to return a single item\nSELECT * FROM ONLY 9;\n-- Error: array has more than one item\nSELECT * FROM ONLY [1,9];\n```\n\n----------------------------------------\n\nTITLE: Retrieving K-Nearest Neighbors Distance in SurrealDB\nDESCRIPTION: The vector::distance::knn function returns the distance computed during a query by the Knn operator. It is used within a SELECT statement to avoid recomputation of distances.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\nCREATE pts:1 SET point = [1,2,3,4];\nCREATE pts:2 SET point = [4,5,6,7];\nCREATE pts:3 SET point = [8,9,10,11];\nSELECT id, vector::distance::knn() AS dist FROM pts WHERE point <|2,EUCLIDEAN|> [2,3,4,5];\n```\n\n----------------------------------------\n\nTITLE: Equality Comparison Examples in SurrealQL\nDESCRIPTION: Examples showing equality comparison using = and IS operators across different data types\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/operators.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM true = \"true\";\n\nfalse\n\nSELECT * FROM 10 = \"10\";\n\nfalse\n\nSELECT * FROM 10 = 10.00;\n\ntrue\n\nSELECT * FROM 10 = \"10.3\";\n\nfalse\n\nSELECT * FROM [1, 2, 3] = [1, 2, 3];\n\ntrue\n\nSELECT * FROM [1, 2, 3] = [1, 2, 3, 4];\n\nfalse\n\nSELECT * FROM { this: \"object\" } = { this: \"object\" };\n\ntrue\n\nSELECT * FROM { this: \"object\" } = { another: \"object\" };\n\nfalse\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Schema with Specific Table Inclusion in SurrealQL\nDESCRIPTION: This example demonstrates how to include specific tables in the GraphQL schema configuration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE CONFIG GRAPHQL TABLES INCLUDE user, post, comment;\n```\n\n----------------------------------------\n\nTITLE: Using time::yday Function in SurrealQL\nDESCRIPTION: The time::yday function extracts the day of the year as a number from a datetime, or from the current date if no datetime argument is present.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_21\n\nLANGUAGE: surql\nCODE:\n```\ntime::yday(option<datetime>) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::yday(d\"2021-11-01T08:30:17+00:00\");\n\n305\n```\n\n----------------------------------------\n\nTITLE: Deleting Data in SurrealDB with Python\nDESCRIPTION: The delete method removes all records from a table or a specific record from the database. It can be used with either a table name or a specific RecordID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/data-maniplulation.mdx#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Delete all records from a table\ndb.delete('person')\n\n# Delete a specific record from a table\ndb.delete(RecordID('person', 'h5wxrf2ewk8xjxosxtyc'))\n```\n\nLANGUAGE: surql\nCODE:\n```\nDELETE $thing;\n```\n\n----------------------------------------\n\nTITLE: Creating User Records with Random Relationships in SurrealDB\nDESCRIPTION: This snippet creates user records and establishes random 'likes' relationships between them, demonstrating graph relationships in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_24\n\nLANGUAGE: surql\nCODE:\n```\nFOR $i IN 0..5 {\n    CREATE user SET user_num = $i, name = \"User number \" + <string>user_num;\n};\n\nLET $users = SELECT * FROM user;\nFOR $user IN $users {\n    LET $others = array::complement($users, [$user.id]);\n    FOR $counterpart IN $others {\n        IF rand::bool() {\n            RELATE $user->likes->$counterpart;\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Random UUIDs with rand::uuid() in SurrealQL\nDESCRIPTION: The rand::uuid() function generates random UUID values. It can generate UUIDs either completely randomly or based on a provided datetime value for timestamp-based UUIDs.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/rand.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nrand::uuid() -> uuid\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::uuid();\n\n[u\"e20b2836-e689-4643-998d-b17a16800323\"]\n```\n\nLANGUAGE: surql\nCODE:\n```\nrand::uuid(datetime) -> uuid\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::uuid(d\"2021-09-07T04:27:53Z\");\n```\n\nLANGUAGE: surql\nCODE:\n```\nCREATE ONLY test:[rand::uuid()] SET created = time::now(), num = 1;\nSLEEP 100ms;\n\nLET $rec = CREATE ONLY test:[rand::uuid()] SET created = time::now(), num = 2;\nSLEEP 100ms;\nCREATE ONLY test:[rand::uuid()] SET created = time::now(), num = 3;\n-- Select the value of the record created before the current record in the table\nSELECT VALUE num FROM test:[rand::uuid($rec.created - 100ms)]..;\n```\n\n----------------------------------------\n\nTITLE: Translating Update Merge to SurrealQL\nDESCRIPTION: Shows the equivalent SurrealQL query for the update().merge() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/update.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $resource MERGE $data;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Delete Operations in C#\nDESCRIPTION: This example demonstrates two ways to use the Delete method: deleting all records from a table and deleting a specific record using its RecordId.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/delete.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Delete all records from a table\nawait db.Delete(\"person\");\n\n// Delete a specific record from a table\nawait db.Delete((\"person\", \"h5wxrf2ewk8xjxosxtyc\"));\n```\n\n----------------------------------------\n\nTITLE: Record User Bearer Authentication Setup\nDESCRIPTION: Example of setting up bearer authentication for record users, including creating a user record and generating a bearer grant.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/bearer.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\n-- Create record representing a user\nCREATE user:1 CONTENT { name: \"tobie\" };\n-- Define bearer access method to generate API keys for record users\nDEFINE ACCESS api ON DATABASE TYPE BEARER FOR RECORD DURATION FOR GRANT 10d;\n-- Generate bearer grant to be used by a specific automation belonging to the user\nACCESS api GRANT FOR RECORD user:1;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticated User Information with SurrealDB JavaScript SDK\nDESCRIPTION: This example demonstrates how to use the .info() method to retrieve the record of an authenticated scope user. The result is stored in the 'user' variable.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/info.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await db.info();\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB Python SDK using pip\nDESCRIPTION: This command installs the SurrealDB Python SDK from PyPI using pip. It's the first step in setting up the SDK for use in a Python project.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/installation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install surrealdb\n```\n\n----------------------------------------\n\nTITLE: Merging Table-wide Data in C#\nDESCRIPTION: Examples demonstrating how to merge data across all records in a table using both strongly-typed objects and Dictionary approach.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/merge.mdx#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Only changes the fields specified in the merge object\nvar merge = new PersonMerge\n{\n    Settings = new Settings\n    {\n        Active = true,\n        Marketing = false,\n    },\n};\nvar result = await db.Merge<PersonMerge, Person>(\"person\", merge);\n\n// Only changes the fields specified in the Dictionary\nvar data = new Dictionary<string, object>\n{\n    { \"tags\", new List<string> { \"developer\", \"engineer\" } }\n};\n\nvar result = await db.Merge<Person>(\"person\", data);\n```\n\n----------------------------------------\n\nTITLE: Finding Centroid of a Geometry in SurrealQL\nDESCRIPTION: The geo::centroid function calculates the geometric center (centroid) of a polygon formed by multiple geolocation points. This example finds the centroid among four European cities.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/geo.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nRETURN geo::centroid({\n  type: \"Polygon\",\n  coordinates: [[\n    [-0.03921743611083, 51.88106875736589], -- London\n    [30.48112752349519, 50.68377089794912], -- Kyiv\n    [23.66174524001544, 42.94500782833793], -- Sofia\n    [ 1.92481534361859, 41.69698118125476] -- Barcelona\n  ]]\n});\n```\n\n----------------------------------------\n\nTITLE: Connect Method Syntax in Rust\nDESCRIPTION: Basic syntax for the connect() method in SurrealDB Rust SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/connect.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.connect(address)\n```\n\n----------------------------------------\n\nTITLE: Using RegEx for String Validation in SurrealDB\nDESCRIPTION: This example demonstrates how to use a regular expression with the ASSERT clause to validate a string field, ensuring it matches a specific pattern (in this case, an ISO-3166 country code).\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_20\n\nLANGUAGE: surql\nCODE:\n```\n-- Specify a field on the user table\nDEFINE FIELD countrycode ON user TYPE string\n\t-- Ensure country code is ISO-3166\n\tASSERT $value = /[A-Z]{3}/\n\t-- Set a default value if empty\n\tVALUE $value OR $before OR 'GBR'\n;\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Literals in SurrealQL\nDESCRIPTION: Demonstrates how to define and use simple literals in SurrealQL, including single value and multiple option literals.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/literals.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nLET $nine: 9 = 9;\nLET $nine: 9 = 10;\n```\n\nLANGUAGE: surql\nCODE:\n```\nLET $nine: 9 | \"9\" | \"nine\" = \"Nein\";\n```\n\n----------------------------------------\n\nTITLE: Initializing SurrealDB Client in Rust\nDESCRIPTION: This snippet shows the basic syntax for initializing a new unconnected instance of the SurrealDB client using the .init() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/init.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nSurreal::init()\n```\n\n----------------------------------------\n\nTITLE: Overriding Global API Configuration for Specific Endpoints in SurrealQL\nDESCRIPTION: This example demonstrates how to override the global API configuration for a specific endpoint, setting a very short timeout.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE CONFIG API\n    MIDDLEWARE \n        api::timeout(10s),\n        api::res::headers({\n            'Access-Control-Allow-Origin': '*'\n        });\n\nDEFINE API OVERWRITE \"/test\"\n    FOR get \n        MIDDLEWARE\n            api::timeout(1µs)\n        THEN {\n            RETURN {\n                status: 200,\n                body: { \n                    data: (SELECT * FROM person),\n                    however: \"This will probably never return because the timeout is 1 microsecond\"\n                }\n            };\n        };\n\napi::invoke(\"/test\");\n```\n\n----------------------------------------\n\nTITLE: Executing Queries with Parameters in C#\nDESCRIPTION: Demonstrates how to execute SurrealQL queries with interpolated parameters in C#. The example shows creating a record and selecting data from a table, then accessing specific results from different queries in the result set.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/sdks/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Execute query with params\nconst string table = \"person\";\nvar result = await db.Query($\"CREATE person; SELECT * FROM type::table({table});\");\n\n// Get the first result from the first query\nvar created = result.GetValue<Person>(0);\n\n// Get all of the results from the second query\nvar people = result.GetValue<List<Person>>(1);\n```\n\n----------------------------------------\n\nTITLE: Using surreal fix command to migrate SurrealDB data\nDESCRIPTION: Example showing how to use the surreal fix command to automatically update data format when upgrading from SurrealDB 1.x to 2.x, with examples for both SurrealKV and RocksDB datastores.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/upgrading/migrating-data-to-2.x.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# For SurrealKV\nsurreal fix surrealkv://mydata\n\n# For RocksDB\nsurreal fix rocksdb:somedatabase\n```\n\n----------------------------------------\n\nTITLE: Creating Array Unions in SurrealDB\nDESCRIPTION: The array::union function combines two arrays, removing duplicate values and returning a single array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_53\n\nLANGUAGE: surql\nCODE:\n```\narray::union(array, array) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::union([1, 2, 1, 6], [1, 3, 4, 5, 6]);\n```\n\n----------------------------------------\n\nTITLE: Basic REBUILD Index Example in SurrealQL\nDESCRIPTION: Example showing how to rebuild an index named 'uniq_isbn' on the 'book' table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/rebuild.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nREBUILD INDEX uniq_isbn ON book;\n```\n\n----------------------------------------\n\nTITLE: Importing ML Model with User Authentication\nDESCRIPTION: Example of importing a SurrealML model using username/password authentication with the surreal ml import command.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/ml/import.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal ml import --conn http://localhost:8000 --user root --pass root --ns test --db test my-surrealml-model.surml\n```\n\n----------------------------------------\n\nTITLE: Executing User-defined SurrealQL Function\nDESCRIPTION: Example demonstrating how to create and execute a user-defined function that returns an integer value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/run.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse surrealdb::engine::any::connect;\nuse surrealdb::opt::auth::Root;\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = connect(\"ws://localhost:8000\").await?;\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    db.query(\"DEFINE FUNCTION fn::return_one() -> int { RETURN 1 };\")\n        .await?;\n\n    let res: i32 = db.run(\"fn::return_one\").await?;\n    dbg!(res);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Records in SurrealDB using Python\nDESCRIPTION: Inserts one or multiple records into the SurrealDB database. This method allows for bulk insertion of data into a specified table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ndb.insert(thing,data)\n```\n\n----------------------------------------\n\nTITLE: Calculating Dot Product of Vectors in SurrealQL\nDESCRIPTION: The vector::dot function computes the dot product of two vectors. It takes two arrays as input and returns a single number representing the dot product.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::dot([1, 2, 3], [1, 2, 3]);\n\n14\n```\n\n----------------------------------------\n\nTITLE: SurrealQL Index Usage Examples\nDESCRIPTION: Demonstrates practical examples of using the WITH clause in SurrealQL queries. Shows how to force specific index usage and table iteration in different query scenarios.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/with.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- forces the query planner to use the specified index(es):\nSELECT * FROM person\nWITH INDEX ft_email\nWHERE\n\temail = 'tobie@surrealdb.com' AND\n\tcompany = 'SurrealDB';\n\n-- forces the usage of the table iterator\nSELECT name FROM person WITH NOINDEX WHERE job = 'engineer' AND gender = 'm';\n```\n\n----------------------------------------\n\nTITLE: Querying Linked Records with FETCH in SurrealDB\nDESCRIPTION: SurrealQL query demonstrating the use of FETCH to retrieve linked records in a single query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/fetch.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM classroom FETCH teacher, students;\n```\n\n----------------------------------------\n\nTITLE: Parsing URL Host in SurrealQL\nDESCRIPTION: This function extracts the hostname from a valid URL. It works with both domain names and IP addresses.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/parse.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nparse::url::host(string) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN parse::url::host(\"https://surrealdb.com:80/features?some=option#fragment\");\nRETURN parse::url::host(\"http://127.0.0.1/index.html\");\n\n\"surrealdb.com\"\n\n\"127.0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Creating Edge Relationships with Properties\nDESCRIPTION: Shows how to create an edge between nodes with additional properties using the RELATE statement\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nRELATE users:alice->wrote->posts:helloworld CONTENT {\n    created_at: \"2025-01-01\"\n};\n```\n\n----------------------------------------\n\nTITLE: Using Decimal Numbers to Avoid Rounding Errors in SurrealDB\nDESCRIPTION: This snippet shows how using decimal numbers can avoid common rounding errors that occur with floating point calculations. Decimal numbers offer higher precision at the cost of performance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/numbers.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nRETURN 0.3dec + 0.3dec + 0.3dec + 0.1dec;\n\n1.0\n```\n\n----------------------------------------\n\nTITLE: Executing SurrealML Models in Python\nDESCRIPTION: Demonstrates both raw and buffered computation methods for model execution in Python. Raw compute directly uses input vectors while buffered compute uses named parameters with automatic normalization.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/computation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# raw compute\nprint(new_file.raw_compute(input_vector=[5, 6]))\n\n# buffered compute (implement data from the meta data)\nprint(\n\tnew_file.buffered_compute(\n\t\tvalue_map={\n\t\t\t\"squarefoot\": 5, \n\t\t\t\"num_floors\": 6\n\t\t}\n\t)\n)\n```\n\n----------------------------------------\n\nTITLE: Example Query Usage with Variables in Python SurrealDB SDK\nDESCRIPTION: Demonstrates how to use the query method to create a person record and select from a table using variables. Shows variable assignment and multiple statement execution.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/query.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nawait db.query(\n\t'CREATE person SET name = \"John\"; SELECT * FROM type::table($tb);',\n\t{ \"tb\": 'person' }\n)\n```\n\n----------------------------------------\n\nTITLE: Basic SurrealDB Upgrade Command\nDESCRIPTION: Upgrades SurrealDB to the latest stable version\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/upgrade.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal upgrade\n```\n\n----------------------------------------\n\nTITLE: Creating ROOT User in SurrealQL\nDESCRIPTION: Example of creating a ROOT level user with owner role and specified session and token durations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/user.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Create the user with an owner role and some example durations\nDEFINE USER username ON ROOT PASSWORD '123456' ROLES OWNER DURATION FOR SESSION 15m, FOR TOKEN 5s;\n```\n\n----------------------------------------\n\nTITLE: Defining Literals in Database Schema using SurrealQL\nDESCRIPTION: Illustrates how to define and use literals within a database schema using DEFINE FIELD statements in SurrealQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/literals.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD error_info ON TABLE info TYPE\n      { error: \"Continue\" }\n    | { error: \"RetryWithId\", id: string }\n    | { error: \"Deprecated\", message: string };\n\nCREATE info SET\n\terror_info = { error: \"Deprecated\", message: \"You shouldn't use this anymore\" };\n-- Doesn't conform to definition, will not work\nCREATE info SET\n\terror_info = \"You shouldn't use this anymore\";\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Statements for Creating Relations\nDESCRIPTION: Provides the equivalent SurrealQL statements for creating and querying the relations demonstrated in the Rust SDK example.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/insert.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nRELATE [person:jaime, person:tobie]->founded->company:surrealdb;\nSELECT ->founded->company FROM person;\n```\n\n----------------------------------------\n\nTITLE: Explicitly Specifying Numeric Types in SurrealDB\nDESCRIPTION: This example demonstrates how to explicitly specify the numeric type using type casting or numeric suffixes (f for float, dec for decimal). This provides precise control over the numeric representation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/numbers.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nCREATE event SET\n\tyear = <int> 2022,\n\ttemperature = <float> 41.5 + 5f,\n\thorizon = <decimal> 31 + 3dec\n;\n```\n\n----------------------------------------\n\nTITLE: JSON Response from SurrealQL HTTP Query\nDESCRIPTION: This snippet shows the JSON response format from a SurrealQL query executed via HTTP. The response includes execution time, status, and the result array containing the matching records. Each record includes fields like age, id, and name.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/surrealql/http.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"time\": \"14.357166ms\",\n\t\t\"status\": \"OK\",\n\t\t\"result\": [\n\t\t\t{\n\t\t\t\t\"age\": \"23\",\n\t\t\t\t\"id\": \"person:6r7wif0uufrp22h0jr0o\"\n\t\t\t\t\"name\": \"Simon\",\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"age\": \"28\",\n\t\t\t\t\"id\": \"person:6r7wif0uufrp22h0jr0o\"\n\t\t\t\t\"name\": \"Marcus\",\n\t\t\t},\n\t\t]\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with GraphQL Support (Windows)\nDESCRIPTION: Command to start SurrealDB with GraphQL module enabled on Windows, using environment variables to allow experimental features.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/graphql/surrealist.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# From greater than or equal to V2.2.0\n$env:SURREAL_CAPS_ALLOW_EXPERIMENTAL=graphql surreal start --log debug --user root --password root\n\n# From versions lower than V2.2.0\n$env:SURREAL_EXPERIMENTAL_GRAPHQL = \"true\" surreal start --log debug --user root --password root\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Record Pointers using type::thing\nDESCRIPTION: Function that converts values into record pointer definitions. Takes two arguments to form a record ID and can handle various input formats including direct IDs and objects.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_18\n\nLANGUAGE: surql\nCODE:\n```\nLET $tb = \"person\";\nLET $id = \"tobie\";\nRETURN type::thing($tb, $id);\n```\n\nLANGUAGE: surql\nCODE:\n```\nFOR $data IN [\n\t{\n\t\tid: 9,\n\t\tname: 'Billy'\n\t},\n\t{\n\t\tid: 10,\n\t\tname: 'Bobby'\n\t}\n] {\n\tUPSERT type::thing('person', $data.id) CONTENT $data;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Special Characters for Complex Record IDs in SurrealQL\nDESCRIPTION: Demonstrates using the ⟨ and ⟩ characters directly instead of backticks for complex record IDs, including emoji characters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nCREATE ⟨📖⟩ SET\n    time = time::now(),\n    author = person:tobie;\n```\n\n----------------------------------------\n\nTITLE: Creating a New SurrealDB Connection in Rust\nDESCRIPTION: Shows how to create a new connection to a SurrealDB endpoint using the Surreal::new() method. This method takes an endpoint URL and returns a new database instance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nlet db = Surreal::new::<Ws>(\"127.0.0.1:8000\").await?\n```\n\n----------------------------------------\n\nTITLE: Connection Status Property Example in TypeScript\nDESCRIPTION: Shows the different states of db.status property during connection lifecycle including disconnected, connecting, connected, and error states.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/properties.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndb.status; // \"disconnected\"\n\ndb.connect();\ndb.status; // \"connecting\"\n\nawait db.ready;\ndb.status; // \"connected\"\n\n// Once an error in the connection occurs\ndb.status; // \"error\"\n```\n\n----------------------------------------\n\nTITLE: Upsert Example Implementation in .NET\nDESCRIPTION: Demonstrates practical usage of the Upsert method with a Person object, showing both creation and update scenarios. The example includes setting up a record with an ID and nested objects, then performing upsert operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/upsert.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar person = new Person\n{\n    Id = (\"person\", \"tobie\"), // Id is mandatory to apply create or update\n    Name = \"Tobie\",\n    Settings = new Settings\n    {\n        Active = true,\n        Marketing = true,\n    },\n};\n\n// Create a new record when it doesn't exist\nvar created = await db.Upsert(person);\n\n// Update an existing record when it does exist\nvar updated = await db.Upsert(person);\n```\n\n----------------------------------------\n\nTITLE: Using Let Method with SurrealDB Queries\nDESCRIPTION: Example demonstrating how to assign a variable using Let and use it in subsequent queries. Shows setting a name object and using it in CREATE and SELECT statements.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/let.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Assign the variable on the connection\ndb.Let(\"name\", new Name { FirstName = \"Tobie\", LastName = \"Morgan Hitchcock\" });\n\n// Use the variable in a subsequent query\ndb.Query(\"CREATE person SET name = $name\");\n\n// Use the variable in a subsequent query\ndb.Query(\"SELECT * FROM person WHERE name.first_name = $name.first_name\");\n```\n\n----------------------------------------\n\nTITLE: Inserting Records with Python SDK\nDESCRIPTION: Demonstrates how to insert one or multiple records into a table using the insert() method. It accepts a table name and either a single record or an array of records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/data-maniplulation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Insert a single record\ndb.insert('person', {\n\t\"name\": 'Tobie',\n\t\"settings\": {\n\t\t\"active\": True,\n\t\t\"marketing\": True,\n\t},\n})\n\n# Insert multiple records\ndb.insert('person', [\n\t{\n\t\t\"name\": 'Tobie',\n\t\t\"settings\": {\n\t\t\t\"active\": True,\n\t\t\t\"marketing\": True,\n\t\t},\n\t},\n\t{\n\t\t\"name\": 'Jaime',\n\t\t\"settings\": {\n\t\t\t\"active\": True,\n\t\t\t\"marketing\": True,\n\t\t},\n\t},\n])\n```\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO $table $data;\n```\n\n----------------------------------------\n\nTITLE: Adding a Future to a Schema Definition in SurrealQL\nDESCRIPTION: This example shows how to define a field with a future value in a table schema. The 'accessed_at' field will be updated with the current time on every query, unlike non-future values.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/futures.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD accessed_at ON TABLE user VALUE <future> { time::now() };\n\nCREATE user:one;\nSELECT * FROM ONLY user:one;\n-- Sleep for one second\nSLEEP 1s;\n-- `accessed_at` is a different value now\nSELECT * FROM ONLY user:one;\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to SurrealDB Embedded JavaScript Functions\nDESCRIPTION: Demonstrates how to create parameters and pass them into a JavaScript function within SurrealDB. The example shows creating a string parameter and an array parameter, then using them in a function that joins the values into a formatted string.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/script/arguments.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\n-- Create a new parameter\nLET $val = \"SurrealDB\";\n-- Create a new parameter\nLET $words = [\"awesome\", \"advanced\", \"cool\"];\n-- Pass the parameter values into the function\nCREATE article SET summary = function($val, $words) {\n\tconst [val, words] = arguments;\n\treturn `${val} is ${words.join(', ')}`;\n};\n```\n\n----------------------------------------\n\nTITLE: Working with Geometry Objects in Python\nDESCRIPTION: Example showing how to use Geometry objects and convert them to GeoJSON format.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/data-types.mdx#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nline = GeometryLine([\n    GeometryPoint([1, 2]),\n    GeometryPoint([3, 4]),\n])\n\nline.to_json()     # { type: \"LineString\", coordinates: [ [1, 2], [3, 4] ] }\njson.dumps(line)   # '{ type: \"LineString\", coordinates: [ [1, 2], [3, 4] ] }'\n```\n\n----------------------------------------\n\nTITLE: Matching on Literals using IF LET in SurrealQL\nDESCRIPTION: Demonstrates how to use IF LET statements to match on literals in SurrealQL, particularly when dealing with object-based literals.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/literals.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD error_info ON TABLE info TYPE\n\t{ Continue:    { message: \"\" }} |\n\t{ Retry: { error: \"Retrying\", after: duration }} |\n\t{ Deprecated:  { message: string }};\n```\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FUNCTION fn::handle_error($data: record<info>) -> string {\n\tLET $err = $data.error_info;\n\tRETURN IF $err.Continue {\n\t\t\"Continue\"\n\t}\n\tELSE IF $err.Retry {\n\t\tsleep($err.Retry.after);\n\t\t\"Now retrying again\"\n\t}\n\tELSE IF $err.Deprecated {\n\t\t$err.Deprecated.message\n\t}\n};\n```\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO info [\n\t{ error_info: { Continue: { message: \"\" } }},\n\t{ error_info: { Retry: { error: \"Retrying\", after: 1s } }},\n\t{ error_info: { Deprecated: { message: \"Thought I said you shouldn't use this anymore\" } }}\n];\n\nLET $info = SELECT * FROM info;\nfn::handle_error($info[0].id);\nfn::handle_error($info[1].id);\nfn::handle_error($info[2].id);\n```\n\n----------------------------------------\n\nTITLE: Mutating Data in SurrealDB with Rust\nDESCRIPTION: These methods are used for creating, updating, and deleting data in SurrealDB. They include operations for inserting, updating, upserting, and deleting records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ndb.create()\ndb.delete()\ndb.insert()\ndb.update()\ndb.upsert()\n```\n\n----------------------------------------\n\nTITLE: Defining Token with IF NOT EXISTS Clause in SurrealQL\nDESCRIPTION: Example of using the IF NOT EXISTS clause to define a token only if it doesn't already exist in SurrealQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/token.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TOKEN IF NOT EXISTS example ON SCOPE example TYPE HS512 VALUE \"example\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Floating Point Precision Limits in SurrealDB\nDESCRIPTION: This snippet illustrates the precision limits of floating point numbers in SurrealDB. When a high-precision number is used, it's automatically truncated to the precision limit of a 64-bit float.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/numbers.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nRETURN 13.5719384719384719385639856394139476937756394756;\n\n\n13.571938471938473\n```\n\n----------------------------------------\n\nTITLE: Protected Parameters Example in SurrealQL\nDESCRIPTION: Illustrates the behavior of pre-defined and protected parameters, showing error cases when attempting to redefine protected variables.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/let.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nLET $before = \"Before!\";\n\n-- Returns [\"Before!\"];\nRETURN $before;\n\n-- Returns the `person` records before deletion\nDELETE person RETURN $before;\n\n-- Returns \"Before!\" again\nRETURN $before;\n```\n\nLANGUAGE: surql\nCODE:\n```\nLET $auth = 1;\nLET $session = 10;\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Relation with ONLY Keyword in SurrealDB\nDESCRIPTION: Creates a single graph relationship between a person and an article record using the ONLY keyword, which returns a single object instead of an array with one object.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nRELATE ONLY person:l19zjikkw1p1h9o6ixrg->wrote->article:8nkk6uj4yprt49z7y3zm;\n```\n\n----------------------------------------\n\nTITLE: Generating Version 4 UUIDs with rand::uuid::v4() in SurrealQL\nDESCRIPTION: The rand::uuid::v4() function generates a random version 4 UUID value. Version 4 UUIDs are randomly generated and do not contain timestamp information.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/rand.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nrand::uuid::v4() -> uuid\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::uuid::v4();\n\n[u\"4def23a5-a847-4934-8dad-c64ccc48921b\"]\n```\n\n----------------------------------------\n\nTITLE: Defining a Non-Future VALUE Clause in SurrealQL Schema\nDESCRIPTION: This snippet demonstrates a non-future VALUE clause that is only calculated when the record is created or updated, not recalculated during SELECT queries that don't modify the record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/futures.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD updated ON TABLE user VALUE time::now();\n\nCREATE user:one;\nSELECT * FROM ONLY user:one;\n-- Sleep for one second\nSLEEP 1s;\n-- `updated` is still the same\nSELECT * FROM ONLY user:one;\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Query Translation\nDESCRIPTION: Shows the underlying SurrealQL query that is executed when the merge() method is called.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/merge.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $thing MERGE $data;\n```\n\n----------------------------------------\n\nTITLE: Querying Surreal Cloud Version via HTTP using cURL in Bash\nDESCRIPTION: Example of connecting to a Surreal Cloud instance via HTTP using cURL to retrieve the version information. This demonstrates the basic format of a cURL request to the Surreal Cloud API.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-cloud/connect/http.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"https://cloud-demo-069qmb9jjttknc0djomp73flfs.aws-use1.surreal.cloud/version\"\n```\n\n----------------------------------------\n\nTITLE: Insert Relations Example\nDESCRIPTION: Example demonstrating how to insert both single and multiple relations between records using RecordID references. Shows creation of 'likes' relationships between person and post records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/insert_relation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Insert a single record\ndb.insert_relation('likes', {\n\t\"in\": RecordID('person', 'tobie'),\n\t\"out\": RecordID('post', 123)\n})\n\n# Insert multiple records across tables\npeople = db.insert_relation('likes', [\n\t{\n    \t\"in\": RecordID('person', 'tobie'),\n    \t\"out\": RecordID('post', 123),\n\t},\n\t{\n    \t\"in\": RecordID('person', 'jaime'),\n    \t\"out\": RecordID('post', 456),\n\t}\n])\n```\n\n----------------------------------------\n\nTITLE: Using the Use Method in SurrealDB Golang SDK\nDESCRIPTION: This example demonstrates how to use the `.Use()` method to switch to a specific namespace and database named 'test'.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/use.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ndb.Use(\"test\", \"test\");\n```\n\n----------------------------------------\n\nTITLE: Wait For Method Example Implementation\nDESCRIPTION: Comprehensive example demonstrating the usage of wait_for() method in different scenarios including connection initialization, authentication, and database selection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/wait_for.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse std::task::Poll;\n\nuse surrealdb::engine::remote::ws::{Client, Ws};\nuse surrealdb::opt::auth::Root;\nuse surrealdb::opt::WaitFor::{Connection, Database};\nuse surrealdb::Surreal;\n\nuse futures::poll;\nuse std::pin::pin;\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n\n    // Create an unconnected client\n    // At this point wait_for should continue to wait for both the connection and database selection.\n    let db: Surreal<Client> = Surreal::init();\n    assert_eq!(poll!(pin!(db.wait_for(Connection))), Poll::Pending);\n    assert_eq!(poll!(pin!(db.wait_for(Database))), Poll::Pending);\n\n    // Connect to the server\n    // The connection event should fire and allow wait_for to return immediately when waiting for a connection.\n    // When waiting for a database to be selected, it should continue waiting.\n    db.connect::<Ws>(\"127.0.0.1:8000\").await.unwrap();\n    assert_eq!(poll!(pin!(db.wait_for(Connection))), Poll::Ready(()));\n    assert_eq!(poll!(pin!(db.wait_for(Database))), Poll::Pending);\n\n    // Sign into the server\n    // At this point the connection has already been established but the database hasn't been selected yet.\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await\n    .unwrap();\n    assert_eq!(poll!(pin!(db.wait_for(Connection))), Poll::Ready(()));\n    assert_eq!(poll!(pin!(db.wait_for(Database))), Poll::Pending);\n\n    // Selecting a namespace shouldn't fire the database selection event.\n    db.use_ns(\"namespace\").await.unwrap();\n    assert_eq!(poll!(pin!(db.wait_for(Connection))), Poll::Ready(()));\n    assert_eq!(poll!(pin!(db.wait_for(Database))), Poll::Pending);\n\n    // Select the database to use\n    // Both the connection and database events have fired, wait_for should return immediately for both.\n    db.use_db(\"database\").await.unwrap();\n    assert_eq!(poll!(pin!(db.wait_for(Connection))), Poll::Ready(()));\n    assert_eq!(poll!(pin!(db.wait_for(Database))), Poll::Ready(()));\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: SurrealDB PHP Query Example Usage\nDESCRIPTION: Example demonstrating how to create a person record and query the table using variables. Shows how to access different result sets from multiple queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/query.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Assign the variable on the connection\n$result = db->query(\n\t'CREATE person SET name = \"John\"; SELECT * FROM type::table($tb);',\n\t[ \"tb\" => \"person\" ]\n);\n\n// Get the first result from the first query\n$created = $result[0]->result[0];\n\n// Get all of the results from the second query\n$people = $result[1]->result;\n```\n\n----------------------------------------\n\nTITLE: Update Method Syntax Definition in Python\nDESCRIPTION: Defines the basic syntax for the update() method in the Python SurrealDB SDK. Takes a thing parameter (table name or RecordID) and data parameter for the update content.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.update(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Records into a Table in Rust\nDESCRIPTION: Shows how to insert multiple records into a SurrealDB table using the Rust SDK. It includes setting up the database connection, signing in, and inserting multiple person records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/insert.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse surrealdb::engine::any::connect;\nuse surrealdb::opt::auth::Root;\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Settings {\n    active: bool,\n    marketing: bool,\n}\n\n#[derive(Serialize)]\nstruct Data<'a> {\n    name: &'a str,\n    settings: Settings,\n}\n\n#[derive(Debug, Deserialize)]\nstruct Person {\n    name: String,\n    settings: Settings,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = connect(\"ws://localhost:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    let people: Vec<Person> = db\n        .insert(\"person\")\n        .content(vec![\n            Data {\n                name: \"Tobie\",\n                settings: Settings {\n                    active: true,\n                    marketing: false,\n                },\n            },\n            Data {\n                name: \"Jaime\",\n                settings: Settings {\n                    active: true,\n                    marketing: true,\n                },\n            },\n        ])\n        .await?;\n    dbg!(people);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Example with JWT Token\nDESCRIPTION: Example showing how to authenticate a SurrealDB connection using a JWT token object. The code demonstrates creating a new JWT instance with a token string and using it to authenticate the database connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/authenticate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nJwt jwt = new JWT(\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTdXJyZWFsREIiLCJpYXQiOjE1MTYyMzkwMjIsIm5iZiI6MTUxNjIzOTAyMiwiZXhwIjoxODM2NDM5MDIyLCJOUyI6InRlc3QiLCJEQiI6InRlc3QiLCJTQyI6InVzZXIiLCJJRCI6InVzZXI6dG9iaWUifQ.N22Gp9ze0rdR06McGj1G-h2vu6a6n9IVqUbMFJlOxxA\");\nawait db.Authenticate(jwt);\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Record in SurrealDB\nDESCRIPTION: The type::record function converts values into records. It accepts record or string as input, with an optional record type parameter.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::record(\"cat:one\");\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Live Query Notifications in SurrealDB Python SDK\nDESCRIPTION: The subscribe_live() method returns a queue that receives notification messages from a running live query. It takes the UUID of a running live query as a required argument.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/streaming.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndb.subscribe_live(UUID)\n\n# Async\nawait db.subscribe_live(UUID)\n```\n\n----------------------------------------\n\nTITLE: Password Hashing Example in SurrealDB\nDESCRIPTION: Shows password hashing and comparison using Argon2 cryptographic functions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nLET $hash1 = crypto::argon2::generate(\"myPaSSWord\");\nLET $hash2 = crypto::argon2::generate(\"myPaSSWord\");\n\nRETURN [$hash1, $hash2];\n-- First returns true, second returns false\nRETURN [\n    crypto::argon2::compare($hash1, \"myPaSSWord\")\n    crypto::argon2::compare($hash1, \"Wrongpassword\")\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring EKS Cluster for SurrealDB\nDESCRIPTION: YAML configuration for setting up an EKS cluster with necessary node groups, networking, and storage configurations for running SurrealDB with TiKV backend.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/amazon.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\nmetadata:\n  name: ${CLUSTER_NAME}\n  region: ${AWS_REGION}\n  version: '1.27'\n  tags:\n    karpenter.sh/discovery: ${CLUSTER_NAME}\n    env: ${CLUSTER_NAME}\n# ... rest of the cluster config ...\n```\n\n----------------------------------------\n\nTITLE: Specifying Deletion Behavior with ON DELETE UNSET in SurrealQL\nDESCRIPTION: This snippet demonstrates how to use ON DELETE UNSET to remove linked records when they are deleted, providing a way to maintain referential integrity.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/references.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD comments ON person TYPE option<array<record<comment>>> REFERENCE ON DELETE UNSET;\nDEFINE FIELD author ON comment TYPE references;\n\nCREATE person:one;\nUPDATE person:one SET comments += (CREATE ONLY comment SET text = \"Estonia is bigger than I expected!\").id;\nLET $comment = CREATE ONLY comment SET text = \"I don't get the joke here?\";\nUPDATE person:one SET comments += $comment.id;\nDELETE $comment;\nperson:one.comments.*.*;\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with Custom Configuration\nDESCRIPTION: Initializes SurrealDB with custom bind address, warning-level logging, and JavaScript scripting enabled.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --bind 0.0.0.0:2218 --log warn --allow-scripting\n```\n\n----------------------------------------\n\nTITLE: Generating Array Windows in SurrealDB\nDESCRIPTION: The array::windows function returns a series of arrays of a specified size, created by moving one index at a time down the original array. It returns an empty array if the original array is not long enough to create a single output array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_54\n\nLANGUAGE: surql\nCODE:\n```\narray::windows(array, size: int) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nLET $array = [1, 2, 3, 4];\nRETURN array::windows($array, 2);\nRETURN array::windows($array, 5);\n```\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:grandfather, person:father, person:son;\n\nFOR $pair IN array::windows([\"grandfather\", \"father\", \"son\"], 2) {\n    LET $first = type::thing(\"person\", $pair[0]);\n    LET $second = type::thing(\"person\", $pair[1]);\n    RELATE $first->father_of->$second;\n};\n\nSELECT id, ->father_of->person, ->father_of->father_of->person FROM person;\n```\n\n----------------------------------------\n\nTITLE: Configuring Actix-Web Server Routes\nDESCRIPTION: Sets up the Actix-Web server with all route handlers for person management, session handling, and authentication endpoints.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nHttpServer::new(|| {\n    App::new()\n        .service(routes::create_person)\n        .service(routes::read_person)\n        .service(routes::update_person)\n        .service(routes::delete_person)\n        .service(routes::list_people)\n        .service(routes::paths)\n        .service(routes::session)\n        .service(routes::make_new_user)\n        .service(routes::get_new_token)\n})\n.bind((\"localhost\", 8080))?\n.run()\n.await?;\n```\n\n----------------------------------------\n\nTITLE: Querying Data with SELECT in SurrealDB\nDESCRIPTION: Demonstrates various ways to use the SELECT statement in SurrealDB, including selecting from multiple tables and specific records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/start.mdx#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- Select all records from a table\nSELECT * FROM article;\n\n-- Select records from multiple tables\nSELECT * FROM category, person;\n\n-- Selecting specific records\nSELECT * FROM person:john;\n```\n\n----------------------------------------\n\nTITLE: Creating and Using PreparedQuery in TypeScript\nDESCRIPTION: Shows how to create a PreparedQuery object with a query string and bindings, and how to use it with the query() method. Also demonstrates dynamic query building using the append() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/utilities.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = new PreparedQuery(\n    /* surql */ `CREATE person CONTENT $content`,\n    { content: {} }\n);\n\nawait surreal.query(query);\n\n// Dynamic query building\nconst query = new PreparedQuery(\"SELECT * FROM person\");\n\nconst filterName = \"Alice\";\nif (filterName) {\n  query.append` WHERE name = ${filterName}`;\n}\n\nconst results = await surreal.query(query);\n```\n\n----------------------------------------\n\nTITLE: Defining Person Table with Permissions in SurrealDB\nDESCRIPTION: Creates a person table with schema validation, required fields, and permission controls based on user authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE IF NOT EXISTS person SCHEMALESS\n    PERMISSIONS FOR \n        CREATE, SELECT WHERE $auth,\n        FOR UPDATE, DELETE WHERE created_by = $auth;\nDEFINE FIELD IF NOT EXISTS name ON TABLE person TYPE string;\nDEFINE FIELD IF NOT EXISTS created_by ON TABLE person VALUE $auth READONLY;\n```\n\n----------------------------------------\n\nTITLE: Buffered Compute with SurrealML Model\nDESCRIPTION: Python code showing how to perform buffered computation with a loaded SurrealML model by providing input values as a dictionary, which automatically applies normalization.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/index.mdx#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nprint(\n\tnew_file.buffered_compute(\n\t\tvalue_map={\n\t\t\t\"squarefoot\": 5,\n\t\t\t\"num_floors\": 6\n\t\t}\n\t)\n)\n```\n\n----------------------------------------\n\nTITLE: Using VALUE Clause in SurrealDB Field Definition\nDESCRIPTION: This example illustrates the use of the VALUE clause, which ignores attempts to set the field to any other value and always uses the specified value expression.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD updated ON TABLE user VALUE time::now();\n\n-- Ignores 1900 date, sets `updated` to current time\nCREATE user SET updated = d\"1900-01-01\";\n-- Ignores again, updates to current time\nUPDATE user SET updated = d\"1900-01-01\";\n```\n\n----------------------------------------\n\nTITLE: Basic count() Example in RETURN Statement\nDESCRIPTION: Example showing count() function without arguments in a RETURN statement, which returns 1.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/count.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nRETURN count();\n\n1\n```\n\n----------------------------------------\n\nTITLE: Using Array Functions in SurrealQL\nDESCRIPTION: Shows the usage of array functions like filter() and map() for array manipulation in SurrealQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/arrays.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\n[1,3,5].filter(|$val| $val > 2);\n[1,3,5][WHERE $this > 2];\n\n[1,2,3].map(|$item| $item + 1);\n\n[1,2,3].map(|$v, $i| \"At index \" + <string>$i + \" we got a \" + <string>$v + \"!\");\n```\n\n----------------------------------------\n\nTITLE: Using Mathematical Constants in SurrealDB Query\nDESCRIPTION: This snippet demonstrates how to use a mathematical constant (PI) in a SurrealDB query to calculate the radius of a circle from its circumference.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/numbers.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nCREATE circle SET radius = circumference / ( 2 * MATH::PI );\n```\n\n----------------------------------------\n\nTITLE: Consuming Live Query Data with IAsyncEnumerable in C#\nDESCRIPTION: Example of how to consume live query data using an IAsyncEnumerable, which will block the current thread until the query is killed.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/streaming.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait foreach (var response in liveQuery)\n{\n    // Either an Open, Create, Update, Delete or Close notification...\n\n    if (response is SurrealDbLiveQueryOpenResponse)\n    {\n        // Do something...\n    }\n    if (response is SurrealDbLiveQueryCreateResponse<Person> create)\n    {\n        // Use the `Result` record\n    }\n    if (response is SurrealDbLiveQueryUpdateResponse<Person> update)\n    {\n        // Use the `Result` record\n    }\n    if (response is SurrealDbLiveQueryDeleteResponse<Person> delete)\n    {\n        // Use the `Result` record\n    }\n    if (response is SurrealDbLiveQueryCloseResponse)\n    {\n        // Do something...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Recursive Function in SurrealQL\nDESCRIPTION: Demonstrates how to create a recursive function that relates multiple records to each other, creating a star-like structure in the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/function.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FUNCTION fn::relate_all($records: array<record>) {\n  IF $records.len() < 2 {\n      -- Don't do anything, ending the recursion\n  }  ELSE {\n      LET $first = $records[0];\n      LET $remainder = $records[1..];\n      FOR $counterpart IN $remainder {\n          RELATE $first->to->$counterpart;\n      };\n      fn::relate_all($remainder);\n  }\n};\n\nCREATE |person:1..7|;\n\nfn::relate_all(SELECT VALUE id FROM person);\n\nSELECT id, ->to->? FROM person;\n```\n\n----------------------------------------\n\nTITLE: Importing data into SurrealDB 2.0.0\nDESCRIPTION: Command to import a previously exported .surql file into a SurrealDB 2.0.0 instance, specifying connection details, user credentials, namespace, and database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/upgrading/migrating-data-to-2.x.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal import --conn http://localhost:8000 --user root --pass root --ns test --db test downloads/export.surql\n```\n\n----------------------------------------\n\nTITLE: Creating New SurrealDB Record Users with Random Credentials\nDESCRIPTION: A function that creates a new record user with randomly generated credentials and returns a JWT token. This endpoint demonstrates SurrealDB's authentication system using the Record authentication method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Serialize, Deserialize)]\nstruct Params<'a> {\n    name: &'a str,\n    pass: &'a str,\n}\n\n#[get(\"/new_user\")]\npub async fn make_new_user() -> Result<String, Error> {\n    let name = rand::random::<FirstName>().to_string();\n    let pass = rand::random::<FirstName>().to_string();\n    let jwt = DB\n        .signup(Record {\n            access: \"account\",\n            namespace: \"namespace\",\n            database: \"database\",\n            params: Params {\n                name: &name,\n                pass: &pass,\n            },\n        })\n        .await?\n        .into_insecure_token();\n    Ok(format!(\"New user created!\\n\\nName: {name}\\nPassword: {pass}\\nToken: {jwt}\\n\\nTo log in, use this command:\\n\\nsurreal sql --namespace namespace --database database --pretty --token \\\"{jwt}\\\"\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Clamping Values in SurrealQL\nDESCRIPTION: The math::clamp function constrains a number within the specified range, defined by a minimum and a maximum value. It returns the minimum if the number is less than it, the maximum if greater, or the number itself if within range.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::clamp(1, 5, 10);\n\n5\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Paths in Schemas using Futures in SurrealDB\nDESCRIPTION: This snippet shows how to define a graph path as a field on a table using a future. This ensures the field is recalculated each time the record is queried, not just on creation or update.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_17\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD employers ON TABLE person VALUE <future> { RETURN SELECT VALUE <-employs<-company FROM ONLY $this };\n\nCREATE person:1, person:2, company:1;\nRELATE company:1->employs->person:1;\nperson:1.*;\n```\n\n----------------------------------------\n\nTITLE: Implementing UI Layout and Event Handlers\nDESCRIPTION: Implementation of the Egui UI layout with buttons and event handlers for database operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\negui::SidePanel::left(\"left\").show(ctx, |ui| {\n    if let Ok(response) = self.response_receiver.try_recv() {\n        self.results = response;\n    }\n    if ui.button(\"Create person\").clicked() {\n        self.send(Command::CreatePerson(self.input.clone()))\n    };\n    if ui.button(\"Delete person\").clicked() {\n        self.send(Command::DeletePerson(self.input.clone()))\n    }\n    if ui.button(\"List people\").clicked() {\n        self.send(Command::ListPeople)\n    }\n    if ui.button(\"Session data\").clicked() {\n        self.send(Command::Session)\n    }\n    if ui.button(\"New user\").clicked() {\n        self.send(Command::SignUp)\n    }\n    if ui.button(\"Sign in as record user\").clicked() {\n        self.send(Command::SignIn(self.input.clone()));\n    }\n    if ui.button(\"Sign in as root\").clicked() {\n        self.send(Command::SignInRoot)\n    }\n    if ui.button(\"Raw query\").clicked() {\n        self.send(Command::RawQuery(self.input.clone()))\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Logical OR Operation on Arrays in SurrealQL\nDESCRIPTION: The array::logical_or function performs the OR logical operations element-wise between two arrays. The resulting array has a length of the longer input array, with each element being the result of the logical OR operation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_29\n\nLANGUAGE: surql\nCODE:\n```\narray::logical_or(lh: array, rh: array)\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::logical_or([true, false, true, false], [true, true, false, false]);\n\n[ true, true, true, false ]\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::logical_or([0, 1], []);\n\n[ 0, 1 ]\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Schema with Function Inclusion and Exclusion in SurrealQL\nDESCRIPTION: This snippet shows how to include specific functions and exclude others in the GraphQL schema configuration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE CONFIG GRAPHQL FUNCTIONS INCLUDE [getUser, listPosts, searchComments];\n```\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE CONFIG GRAPHQL FUNCTIONS EXCLUDE [debugFunction, testFunction];\n```\n\n----------------------------------------\n\nTITLE: Inserting Records with SurrealDB JavaScript SDK\nDESCRIPTION: Method for inserting single or multiple records into the database. Supports batch operations and partial data inputs.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/data-maniplulation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync db.insert<T>(table, data)\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n\tid: string;\n\tname: string;\n\tsettings: {\n\t\tactive: boolean;\n\t\tmarketing: boolean;\n\t};\n};\n\n// Insert a single record\nconst [person] = await db.insert<Person>('person', {\n\tname: 'Tobie',\n\tsettings: {\n\t\tactive: true,\n\t\tmarketing: true,\n\t},\n});\n\n// Insert multiple records\nconst people = await db.insert<Person>('person', [\n\t{\n\t\tname: 'Tobie',\n\t\tsettings: {\n\t\t\tactive: true,\n\t\t\tmarketing: true,\n\t\t},\n\t},\n\t{\n\t\tname: 'Jaime',\n\t\tsettings: {\n\t\t\tactive: true,\n\t\t\tmarketing: true,\n\t\t},\n\t},\n]);\n\n// The content you are creating the record with might differ from the return type\nconst people = await db.insert<\n\tPerson,\n\tPick<Person, 'name'>\n>('person', [\n\t{ name: 'Tobie' },\n\t{ name: 'Jaime' },\n]);\n```\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO $table $data;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Set Method Usage with SurrealDB .NET SDK\nDESCRIPTION: Example demonstrating how to use the Set method to assign variables on a database connection and then use those variables in subsequent queries. The example shows setting a complex object and referencing it in different query contexts.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/set.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Assign the variable on the connection\nawait db.Set(\"name\", new Name { FirstName = \"Tobie\", LastName = \"Morgan Hitchcock\" });\n\n// Use the variable in a subsequent query\nawait db.Query($\"CREATE person SET name = $name\");\n\n// Use the variable in a subsequent query\nawait db.Query($\"SELECT * FROM person WHERE name.first_name = $name.first_name\");\n```\n\n----------------------------------------\n\nTITLE: Using Select Method in Rust for SurrealDB\nDESCRIPTION: This example demonstrates how to use the select() method to retrieve all records from a table or a specific record by ID. It shows two use cases: selecting all records from the 'person' table and selecting a specific record with an ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/select.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// Select all records from a table\nlet people: Vec<Person> = db.select(\"person\").await?;\n// Select a specific record from a table\nlet person: Option<Person> = db.select((\"person\", \"h5wxrf2ewk8xjxosxtyc\")).await?;\n```\n\n----------------------------------------\n\nTITLE: Event Emitter Subscription Example in TypeScript\nDESCRIPTION: Demonstrates continuous event subscription handling with the db.emitter property, including subscribing, checking subscription status, and unsubscribing.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/properties.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction listener(error: Error) {\n    console.error(\"An error occurred:\", error);\n}\n\n// Listen for the event\ndb.emitter.subscribe(\"error\", listener);\n// Check if the listener is subscribed\ndb.emitter.isSubscribed(\"error\", listener);\n// Unsubscribe the listener\ndb.emitter.unSubscribe(\"error\", listener);\n```\n\n----------------------------------------\n\nTITLE: Current Record Reference Queries\nDESCRIPTION: Demonstrates the use of @ symbol to reference the current record in recursive queries and SELECT statements.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_22\n\nLANGUAGE: surql\nCODE:\n```\n-- Will now call `.{1..3}(has->(?))` on every planet record it finds\nSELECT @.{1..3}(->has->(?)) AS cities FROM planet;\n-- Will now call `.len()` on every `name` field it finds\nSELECT name.len()           AS length FROM planet;\n```\n\n----------------------------------------\n\nTITLE: Output of ID Type Validation in SurrealDB\nDESCRIPTION: Shows the error message when an invalid ID format is used and the successful creation of a record with a properly formatted complex ID that matches the defined type.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_31\n\nLANGUAGE: surql\nCODE:\n```\n-------- Query --------\n\n\"Found 'c6zdrbyuo1xmgm30stl0' for field `id`, with record `log:c6zdrbyuo1xmgm30stl0`, but expected a [record, 'info' | 'warn' | 'error', datetime]\"\n\n-------- Query --------\n\n[\n\t{\n\t\tid: log:[\n\t\t\tuser:one,\n\t\t\t'info',\n\t\t\td'2025-03-25T03:36:16.323Z'\n\t\t],\n\t\tmessage: 'Database started'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Parameter Assignment Example in SurrealQL\nDESCRIPTION: Shows how to assign a simple string value to a parameter and use it in a CREATE statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/let.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Define the parameter\nLET $name = \"tobie\";\n-- Use the parameter\nCREATE person SET name = $name;\n```\n\n----------------------------------------\n\nTITLE: Finding Record References with record::refs() in SurrealQL\nDESCRIPTION: The record::refs() function returns the record IDs of any records that have a record link along with a REFERENCES clause. It can be used with optional table and field name filters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/record.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD best_friend ON person TYPE option<record<person>> REFERENCE;\n\n-- Both Billy and Bobby think Gaston is their best friend\nCREATE person:billy, person:bobby SET best_friend = person:gaston;\n-- But not Gaston\nCREATE person:gaston SET best_friend = NONE;\n\nperson:gaston.refs();\n```\n\n----------------------------------------\n\nTITLE: Converting SurrealDB 1.x Database Storage Format\nDESCRIPTION: Examples of using the surreal fix command to convert database storage from version 1.x to 2.0 format. Shows usage with different database paths.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/fix.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal fix surrealkv://mydatabase.db\n\nsurreal fix rocksdb:somedatabase\n```\n\n----------------------------------------\n\nTITLE: LIVE SELECT with WHERE Clause\nDESCRIPTION: Example demonstrating how to filter live query results using a WHERE clause.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/live.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nLIVE SELECT * FROM person WHERE age > 18;\n```\n\n----------------------------------------\n\nTITLE: Querying Database Information in SurrealDB\nDESCRIPTION: Shows how to query system information using INFO statements and return session data in a new database environment.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/create.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nINFO FOR ROOT;\nINFO FOR NS;\nINFO FOR DB;\nRETURN $session;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Not Function with Various Falsy Values in SurrealQL\nDESCRIPTION: Examples of using the 'not' function with various falsy values in SurrealQL. It returns true for empty string, false, empty array, empty object, and zero.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/not.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nRETURN [\n    not(\"\"),\n    not(false),\n    not([]),\n    not({}),\n    not(0)\n];\n```\n\n----------------------------------------\n\nTITLE: Signing Up with Record Access in TypeScript\nDESCRIPTION: This example demonstrates how to use the `.signup()` method with Record Access in SurrealDB 2.x and above. It includes the required namespace, database, and access properties, along with additional variables needed for authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/signup.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await db.signup({\n\tnamespace: 'surrealdb',\n\tdatabase: 'docs',\n\taccess: 'user',\n\n    // Also pass any properties required by the scope definition\n\tvariables: {\n    \temail: 'info@surrealdb.com',\n    \tpass: '123456',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating DATABASE User in SurrealQL\nDESCRIPTION: Example of creating a DATABASE level user with viewer role after selecting both namespace and database context.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/user.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n-- Specify the namespace and database for the user\nUSE NS abcum DB app_vitalsense;\n-- Create the user with a viewer role and some example durations\nDEFINE USER username ON DATABASE PASSWORD '123456' ROLES VIEWER DURATION FOR SESSION 5d, FOR TOKEN 2h;\n```\n\n----------------------------------------\n\nTITLE: Using OVERWRITE Clause in SurrealDB Field Definition\nDESCRIPTION: This example shows how to use the OVERWRITE clause to define a field and overwrite an existing one if it already exists, ensuring the latest definition is always in use.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_17\n\nLANGUAGE: surql\nCODE:\n```\n-- Create an FIELD and overwrite if it already exists\nDEFINE FIELD OVERWRITE example ON TABLE user TYPE string;\n```\n\n----------------------------------------\n\nTITLE: Creating a Future with Dynamic Access to Remote Records in SurrealQL\nDESCRIPTION: This snippet shows how futures can dynamically access remote records, perform subqueries, or use graph traversal. The 'adult_friends' field is populated with names of friends who are over 18.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/futures.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person SET\n\tname = 'Jason',\n\tfriends = [person:tobie, person:jaime],\n\tadult_friends = <future> { friends[WHERE age > 18].name }\n;\n```\n\n----------------------------------------\n\nTITLE: Performing Simple Keyword Search with SurrealDB\nDESCRIPTION: A basic query demonstrating traditional keyword matching in SurrealDB, which selects all articles that contain 'fox' in their title. This approach doesn't account for language variations or relevance ranking.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/full-text-search.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM articles WHERE 'fox' IN title;\n```\n\n----------------------------------------\n\nTITLE: Updating Records with SurrealDB JavaScript SDK\nDESCRIPTION: Method for updating existing records in the database. This operation replaces the current document data with specified data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/data-maniplulation.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync db.update<T>(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP GET Function in SurrealQL\nDESCRIPTION: API definition for the http::get() function which performs remote HTTP GET requests and returns the response value. It handles JSON responses automatically and accepts custom headers as an optional parameter.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/http.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nhttp::get(string) -> value\n```\n\nLANGUAGE: surql\nCODE:\n```\nhttp::get(string, object) -> value\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Method Chaining for String Functions in SurrealQL\nDESCRIPTION: Examples showing how to use method chaining for string functions in SurrealQL, improving readability when calling multiple functions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_41\n\nLANGUAGE: surql\nCODE:\n```\n-- Traditional syntax\nstring::is::alphanum(\"MyStrongPassword123\");\n\n-- Method chaining syntax\n\"MyStrongPassword123\".is_alphanum();\n```\n\n----------------------------------------\n\nTITLE: Parameter Persistence and Reuse in SurrealQL\nDESCRIPTION: Shows how parameters persist across the current connection and can be reused between different namespaces and databases.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/parameters.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nLET $billy = CREATE ONLY person:billy SET name = \"Billy\";\n-- Fails as `person:billy` already exists\nCREATE person CONTENT $billy;\n\nUSE NAMESPACE other_namespace;\nUSE DATABASE other_database;\n-- Succeeds as `person:billy` does not yet exist in this namespace and database\nCREATE person CONTENT $billy;\n```\n\n----------------------------------------\n\nTITLE: Inserting Single and Multiple Relations in SurrealDB with Golang SDK\nDESCRIPTION: Example demonstrating how to insert both a single relation and multiple relations between records using the SurrealDB Golang SDK. The example creates 'likes' relations between person and post records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/insert_relation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Likes struct {\n\tID  models.RecordID `json:\"id\"`\n\tIn  models.RecordID `json:\"in\"`\n\tOut models.RecordID `json:\"out\"`\n}\n\n// Insert a single record into the \"likes\" relation\nlike, err := surrealdb.InsertRelation[Likes](db, models.Table(\"likes\"), map[interface{}]interface{}{\n\t\"in\":  models.NewRecordID(\"person\", \"tobie\"),\n\t\"out\": models.NewRecordID(\"post\", \"123\"),\n})\nif err != nil {\n\tpanic(err)\n}\nfmt.Printf(\"Inserted single like relation: %+v\\n\", like)\n\n// Insert multiple records into the \"likes\" relation\nlikes, err := surrealdb.InsertRelation[[]Likes](db, models.Table(\"likes\"), []map[interface{}]interface{}{\n\t{\n\t\t\"in\":  models.NewRecordID(\"person\", \"tobie\"),\n\t\t\"out\": models.NewRecordID(\"post\", \"123\"),\n\t},\n\t{\n\t\t\"in\":  models.NewRecordID(\"person\", \"jaime\"),\n\t\t\"out\": models.NewRecordID(\"post\", \"456\"),\n\t},\n})\nif err != nil {\n\tpanic(err)\n}\nfmt.Printf(\"Inserted multiple like relations: %+v\\n\", likes)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticated User Info in SurrealDB JavaScript SDK\nDESCRIPTION: Returns the record of an authenticated scope user in SurrealDB. This method is used to get information about the current user.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.info<T>()\n```\n\n----------------------------------------\n\nTITLE: Defining patch Method Syntax in TypeScript\nDESCRIPTION: This snippet shows the method signature for the `.patch()` function in the SurrealDB JavaScript SDK. It takes a 'thing' (table name or RecordId) and 'data' (JSON Patch data) as arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/patch.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.patch<T,U>(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Numeric Type Inference with UPSERT\nDESCRIPTION: Shows type inference for numeric operations where the click_count field is automatically inferred as an integer type with default value 0.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/upsert.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nUPSERT webpage:home SET click_count += 1;\n```\n\n----------------------------------------\n\nTITLE: Defining SurrealDB Use Method Syntax in Python\nDESCRIPTION: Method signature for switching namespace and database in SurrealDB using Python SDK. Takes two required parameters: namespace and database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/use.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.use(namespace, database)\n```\n\n----------------------------------------\n\nTITLE: Object-based Complex Record ID Creation\nDESCRIPTION: Shows how to create sensor readings using object-based complex record IDs for optimized time series data storage.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/time-series.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE sensor_readings:{\n    timestamp: time::now(),\n    location: location:Longleat_House,\n    sensor: sensor:ARF8394AAA,\n    temperture_celsius: 28.4,\n    humidity_percent: 55\n};\n```\n\n----------------------------------------\n\nTITLE: Piping SQL Statements from File\nDESCRIPTION: Example showing how to pipe SQL statements from a file to the SurrealDB server.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/sql.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncat myfile.surql | surreal sql --endpoint http://localhost:8000 --username root --password root --namespace test --database test\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Live Queries in SurrealDB Python SDK\nDESCRIPTION: Returns a queue that receives notification messages from a running live query in SurrealDB. This method is used to consume real-time updates from a live query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndb.subscribe_Live(query_uuid)\n```\n\n----------------------------------------\n\nTITLE: LiveNotifications Method Syntax in SurrealDB Golang SDK\nDESCRIPTION: Defines the method signature for LiveNotifications in the SurrealDB Golang SDK. This method takes a query UUID as a parameter and returns a channel for receiving notifications from a live query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/live_notification.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.LiveNotifications[UUID string](queryUuid)\n```\n\n----------------------------------------\n\nTITLE: Natural Lexical Sorting of Arrays in SurrealDB\nDESCRIPTION: The array::sort_natural_lexical function sorts an array, treating numeric strings as numbers and alphabetical strings in lexical order. It can take an optional boolean or string parameter to specify the sort direction.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_48\n\nLANGUAGE: surql\nCODE:\n```\narray::sort_natural_lexical(array) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\narray::sort_natural_lexical(array, bool) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\narray::sort_natural_lexical(array, string) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\n['Obrigado', 'senhor', 'Álvares', 8, 9, 10, '3', '2.2', '11'].sort();\n['Obrigado', 'senhor', 'Álvares', 8, 9, 10, '3', '2.2', '11'].sort_natural_lexical();\n```\n\n----------------------------------------\n\nTITLE: Using HTTP PATCH Function in SurrealQL\nDESCRIPTION: Examples of using the http::patch() function in a RETURN statement, showing both usage without headers and with custom headers. Both examples return a JSON response from the server.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/http.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nRETURN http::patch('https://dummyjson.com/comments/1', {\n  \"id\": 1,\n  \"body\": \"This is some awesome thinking!\",\n  \"postId\": 100,\n  \"user\": {\n    \"id\": 63,\n    \"username\": \"eburras1q\"\n  }\n});\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN http::patch('https://dummyjson.com/comments/1', {\n  \"id\": 1,\n  \"body\": \"This is some awesome thinking!\",\n  \"postId\": 100,\n  \"user\": {\n    \"id\": 63,\n    \"username\": \"eburras1q\"\n  }\n}, {\n  'Authorization': 'Bearer your-token-here',\n  'Content-Type': 'application/json',\n  'x-custom-header': 'custom-value'\n});\n```\n\nLANGUAGE: surql\nCODE:\n```\n{\n  \"id\": 1,\n  \"body\": \"This is some awesome thinking!\",\n  \"postId\": 100,\n  \"user\": {\n    \"id\": 63,\n    \"username\": \"eburras1q\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Chain Method in SurrealQL\nDESCRIPTION: Demonstrates the chain() method which allows calling an anonymous function on a value. The function takes a closure parameter and returns the processed value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/value.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nvalue.chain(|$val_name| @closure_body) -> value;\n```\n\nLANGUAGE: surql\nCODE:\n```\n'SurrealDB'.chain(|$n| $n + ' 2.0');\n```\n\nLANGUAGE: surql\nCODE:\n```\n{ company: 'SurrealDB', latest_version: '2.0' }\n    .chain(|$name| <string>$name)\n    .replace('SurrealDB', 'SURREALDB!!!!!');\n```\n\n----------------------------------------\n\nTITLE: Using time::hour Function in SurrealQL\nDESCRIPTION: The time::hour function extracts the hour as a number from a datetime, or from the current date if no datetime argument is present.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\ntime::hour(option<datetime>) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::hour(d\"2021-11-01T08:30:17+00:00\");\n\n8\n```\n\n----------------------------------------\n\nTITLE: Training a Linear Regression Model with SKLearn\nDESCRIPTION: Python code demonstrating how to train a simple linear regression model using scikit-learn with the provided HOUSE_LINEAR dataset.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmodel = LinearRegression()\nmodel.fit(HOUSE_LINEAR[\"inputs\"], HOUSE_LINEAR[\"outputs\"])\n```\n\n----------------------------------------\n\nTITLE: Working with Duration Type in SurrealDB JavaScript SDK\nDESCRIPTION: Shows various ways to create and manipulate Duration values, including parsing from strings, milliseconds, and unit-specific constructors.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/data-types.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew Duration(duration: string | number)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Parsed from a duration string\nconst dur = new Duration(\"1w2d\");\n// Input milliseconds\nconst dur = new Duration(1000);\n// From a compact format ([ms, ns])\nconst dur = new Duration([10000, 300]);\n\n// By a unit amount\nconst dur = Duration.nanoseconds(1000);\nconst dur = Duration.microseconds(1000);\nconst dur = Duration.milliseconds(1000);\nconst dur = Duration.seconds(1000);\nconst dur = Duration.minutes(1000);\nconst dur = Duration.hours(1000);\nconst dur = Duration.days(1000);\nconst dur = Duration.weeks(1000);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst dur = new Duration(\"7d\");\n\n// Format as string, always as small as possible\ndur.toString();     // 1w\n// Get inner (float) milliseconds\ndur._milliseconds;  // 604800000\n// Get compact format\ndur.toCompact();    // [604800]\n\n// How many of a full unit fit into the duration\ndur.nanoseconds;    // 604800000000000\ndur.microseconds;   // 604800000000\ndur.milliseconds;   // 604800000\ndur.seconds;        // 604800\ndur.minutes;        // 10080\ndur.hours;          // 168\ndur.days;           // 7\ndur.weeks;          // 1\n```\n\n----------------------------------------\n\nTITLE: Graph Querying with Destructuring Syntax\nDESCRIPTION: Shows how to use destructuring syntax in SurrealDB 2.0+ to simplify field selection in graph queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_42\n\nLANGUAGE: surql\nCODE:\n```\nSELECT\n    id,\n\t-- access id and population on a single line\n    ->contains->state.{id, population},\n    ->contains->state->contains->city.id\nFROM country:usa;\n```\n\n----------------------------------------\n\nTITLE: Authenticating with JWT in SurrealDB JavaScript SDK\nDESCRIPTION: Authenticates the current connection with a JWT token in SurrealDB. This method is used for token-based authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.authenticate(token)\n```\n\n----------------------------------------\n\nTITLE: Defining Method Syntax for signin() in Rust\nDESCRIPTION: Shows the basic syntax for calling the signin() method on a SurrealDB instance in Rust.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/signin.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.signin(credentials)\n```\n\n----------------------------------------\n\nTITLE: Querying 'When Was the Article Written?' in Multiple Ways\nDESCRIPTION: Demonstrates different approaches to query the timestamp of when articles were written using various graph traversal patterns.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_27\n\nLANGUAGE: surql\nCODE:\n```\nSELECT time_written FROM wrote;\nSELECT ->wrote.time_written as time_written FROM person;\nSELECT <-wrote.time_written as time_written FROM article;\n```\n\n----------------------------------------\n\nTITLE: Setting Null Value in SurrealDB\nDESCRIPTION: Shows how using Null creates a field with an empty value. The children field exists in the record but contains null as its value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/none_and_null.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE person SET children = null;\n```\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM person; -- Returns { id: person:2cz8rj0dc4tktxlkjquc, children: null }\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements by Index in SurrealQL\nDESCRIPTION: Demonstrates using square bracket notation with an index to access a specific element (the first one at index 0) in an array and retrieve its score property.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nSELECT results[0].score FROM student;\n```\n\n----------------------------------------\n\nTITLE: Using Basic SurrealQL Database Functions\nDESCRIPTION: Examples of calling SurrealDB functions using their full path names. The snippet demonstrates string splitting, array length calculation, type checking, and record ID creation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nstring::split(\"SurrealDB 2.0 is on its way!\", \" \");\narray::len([1,2,3]);\ntype::is::number(10);\ntype::thing(\"cat\", \"mr_meow\");\n```\n\n----------------------------------------\n\nTITLE: Using Future Expressions with $this in SurrealDB\nDESCRIPTION: Demonstrates defining a field with a future expression that references the current record using $this. This example creates a followers field that dynamically retrieves records following the current person.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_24\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD followers\n\tON TABLE person\n\tVALUE <future> { (SELECT VALUE <-follows<-person.id FROM ONLY $this) };\n\nCREATE person:one, person:two, person:three;\n\nRELATE person:one->follows->person:three;\nSELECT * FROM person:three;\n\nRELATE person:two->follows->person:three;\nSELECT * FROM person:three;\n```\n\n----------------------------------------\n\nTITLE: LIMIT and START with Array Selection in SurrealQL\nDESCRIPTION: Example of using LIMIT and START clauses with an array, demonstrating how to select a specific range of elements from an array in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_17\n\nLANGUAGE: surql\nCODE:\n```\n-- Select the first 5 records from the array\nSELECT * FROM [1,2,3,4,5,6,7,8,9,10] LIMIT 5 START 4;\n```\n\n----------------------------------------\n\nTITLE: Downloading and Importing Dataset with cURL\nDESCRIPTION: Commands to download the Surreal Deal Store dataset and import it into SurrealDB using cURL. First downloads the file and then POSTs it to the import endpoint with authentication headers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/demo.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Download the file\ncurl -L \"https://datasets.surrealdb.com/surreal-deal-store.surql\" -o surreal-deal-store.surql\n\n# Load the file into the database using the rest endpoint\ncurl -v -X POST -u \"root:root\" -H \"NS: test\" -H \"DB: test\" -H \"Accept: application/json\" --data-binary @surreal-deal-store.surql http://localhost:8000/import\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Server with In-Memory Database\nDESCRIPTION: Command to start a SurrealDB server with an in-memory database, setting root user credentials and allowing all access.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/demo.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new in-memory server\nsurreal start --user root --pass root --allow-all\n```\n\n----------------------------------------\n\nTITLE: Defining ACCESS with IF NOT EXISTS Clause in SurrealQL\nDESCRIPTION: This snippet shows how to use the IF NOT EXISTS clause when defining an access method. This ensures the access method is only created if it doesn't already exist.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS IF NOT EXISTS example ON NAMESPACE ...;\n```\n\n----------------------------------------\n\nTITLE: Creating Live Table Query in C#\nDESCRIPTION: Shows how to create a live query that monitors changes to a specific table. Includes support for diff mode to receive JSON Patch objects instead of full records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/streaming.mdx#2025-04-16_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nawait using var liveQuery = await db.LiveTable<Person>(\"person\");\n\n// Consume the live query...\n```\n\n----------------------------------------\n\nTITLE: Converting RecordID to String in Python for SurrealDB (Complex)\nDESCRIPTION: Shows how RecordID objects with complex identifiers or table names are converted to strings, including special character handling.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/data-types.mdx#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nstr(RecordID('table', '123'))\n# 'table:⟨123⟩'\nstr(RecordID('table', '123withletters'))\n# 'table:123withletters'\nstr(RecordID('table', 'complex-string'))\n# 'table:⟨complex-string⟩'\nstr(RecordID('table-name', 123))\n# '⟨table-name⟩:123'\n```\n\n----------------------------------------\n\nTITLE: Performing Logical XOR Operation on Arrays in SurrealQL\nDESCRIPTION: The array::logical_xor function performs the XOR logical operations element-wise between two arrays. The resulting array has a length of the longer input array, with each element being the result of the logical XOR operation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_30\n\nLANGUAGE: surql\nCODE:\n```\narray::logical_xor(lh: array, rh: array)\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::logical_xor([true, false, true, false], [true, true, false, false]);\n\n[ false, true, true, false ]\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::logical_xor([0, 1], [])\n\n[ 0, 1 ]\n```\n\n----------------------------------------\n\nTITLE: Advanced SurrealDB GitHub Actions Configuration\nDESCRIPTION: Complete example showing all available configuration options for the SurrealDB GitHub Action, including authentication, logging, and additional arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/using-github-actions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: SurrealDB CI\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Git checkout\n      uses: actions/checkout@v4\n    - name: Start SurrealDB\n      uses: surrealdb/setup-surreal@v2\n      with:\n        surrealdb_version: latest\n        surrealdb_port: 8000\n        surrealdb_username: root\n        surrealdb_password: root\n        surrealdb_auth: false\n        surrealdb_strict: false\n        surrealdb_log: info\n        surrealdb_additional_args: --allow-all\n        surrealdb_retry_count: 30\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Record Access in SurrealDB Python SDK\nDESCRIPTION: This example demonstrates how to authenticate using Record Access. It requires a namespace, database, access type, and any additional variables required by the access definition.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/signin.mdx#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nawait db.signin({\n\t\"namespace\": 'surrealdb',\n\t\"database\": 'docs',\n\t\"access\": 'user',\n\n    # Also pass any properties required by the access definition\n\t\"variables\": {\n        \"email\": 'info@surrealdb.com',\n        \"password\": '123456'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Ranges in FOR Loops in SurrealQL\nDESCRIPTION: Shows how integer ranges can be used in FOR loops for iterative operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ranges.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nFOR $year IN 0..=2024 {\n    CREATE historical_events SET\n        for_year = $year,\n        events = \"To be added\";\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value in Array in SurrealQL\nDESCRIPTION: The array::max function returns the greatest value from an array of values. It can be used with arrays of any SurrealQL value type.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_32\n\nLANGUAGE: surql\nCODE:\n```\narray::max(array<any>) -> any\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::max([0, 1, 2]);\n\n2\n```\n\nLANGUAGE: surql\nCODE:\n```\narray::max([NONE, NULL, 9, 9.9]);\n\n9.9f\n```\n\n----------------------------------------\n\nTITLE: Calculating Normalized Levenshtein Distance in SurrealQL\nDESCRIPTION: The string::distance::normalized_levenshtein function calculates the normalized Levenshtein distance between two strings. It returns a float value between 0 and 1, where 1 indicates identical strings.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nLET $first     = \"In a hole in the ground there lived a hobbit\";\nLET $same      = \"In a hole in the ground there lived a hobbit\";\nLET $close     = \"In a hole in the GROUND there lived a Hobbit\";\nLET $different = \"A narrow passage holds four hidden treasures\";\nLET $short     = \"Hi I'm Brian\";\n\n-- Returns 1\nstring::distance::normalized_levenshtein($first, $same);\n-- Returns 0.8409090909090909f\nstring::distance::normalized_levenshtein($first, $close);\n-- Returns 0.20454545454545459f\nstring::distance::normalized_levenshtein($first, $different);\n-- Returns 0.13636363636363635f\nstring::distance::normalized_levenshtein($first, $short);\n```\n\n----------------------------------------\n\nTITLE: Validating Valid Geographic Point in SurrealQL\nDESCRIPTION: Example showing validation of a valid geographic point within the acceptable range of -180° to 180° longitude and -90° to 90° latitude.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/geo.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nRETURN geo::is::valid( (51.509865, -0.118092) );\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: Graph Relation Field Assertions in SurrealDB\nDESCRIPTION: Example of adding assertions to graph relation fields to enforce business rules.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_38\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD out ON TABLE wrote TYPE record<book> ASSERT $value.language = \"English\";\n\nCREATE book:demian SET title = \"Demian. Die Geschichte von Emil Sinclairs Jugend\", language = \"German\";\nCREATE author:hesse SET name = \"Hermann Hesse\";\n\nRELATE author:hesse->wrote->book:demian;\n```\n\n----------------------------------------\n\nTITLE: Custom ASSERT with Error Message in SurrealDB\nDESCRIPTION: This snippet shows how to create a custom assertion with a specific error message using a combination of IF-ELSE and THROW statements.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD num ON data TYPE int ASSERT {\n    IF $input % 2 = 0 {\n        RETURN true\n    } ELSE {\n        THROW \"Tried to make a \" + <string>$this + \" but `num` field requires an even number\"\n    }\n};\n\nCREATE data SET num = 11;\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB in Strict Mode\nDESCRIPTION: Initializes SurrealDB with strict mode enabled, requiring explicit definition of NAMESPACE, DATABASE, and TABLE before use.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --strict --log debug memory\n```\n\n----------------------------------------\n\nTITLE: Using PARALLEL Keyword in SurrealQL CREATE Statement\nDESCRIPTION: Demonstrates how to use the PARALLEL keyword to process CREATE statements concurrently rather than sequentially.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/create.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:26, CREATE person:27 PARALLEL;\n```\n\n----------------------------------------\n\nTITLE: Multiple Fields Projection in SurrealDB\nDESCRIPTION: The type::fields function projects multiple fields within a SELECT statement. It accepts an array of field names.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:test SET title = 'Mr', name.first = 'Tobie', name.last = 'Morgan Hitchcock';\n\nLET $param = ['name.first', 'name.last'];\n\nSELECT type::fields($param), type::fields(['title']) FROM person;\n```\n\n----------------------------------------\n\nTITLE: count() with Boolean True in RETURN Statement\nDESCRIPTION: Example showing count() function with a truthy value (true) in a RETURN statement, which returns 1.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/count.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nRETURN count(true);\n\n1\n```\n\n----------------------------------------\n\nTITLE: Running SurrealQL Queries with JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to use the db.query() method to execute SurrealQL statements. It creates a person record and then selects all records from the 'person' table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/writing-surrealql.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n\tid: string;\n\tname: string;\n};\n\n// Assign the variable on the connection\nconst result = await db.query<[Person[], Person[]]>(\n\t'CREATE person SET name = \"John\"; SELECT * FROM type::table($tb);',\n\t{ tb: 'person' }\n);\n\n// Get the first result from the first query\nconst created = result[0].result[0];\n\n// Get all of the results from the second query\nconst people = result[1].result;\n```\n\n----------------------------------------\n\nTITLE: Using IF NOT EXISTS Clause in SurrealQL\nDESCRIPTION: Example showing how to create a user only if it doesn't already exist using the IF NOT EXISTS clause.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/user.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\n-- Create a USER if it does not already exist\nDEFINE USER IF NOT EXISTS example ON ROOT PASSWORD \"example\" ROLES OWNER;\n```\n\n----------------------------------------\n\nTITLE: Basic DEFINE PARAM Usage in SurrealQL\nDESCRIPTION: Example showing how to create a basic parameter and use it with HTTP requests.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/param.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE PARAM $endpointBase VALUE \"https://dummyjson.com\";\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN http::get($endpointBase + \"/products\");\n```\n\n----------------------------------------\n\nTITLE: Using Literal Types in SurrealQL DELETE Statement\nDESCRIPTION: Demonstrates how to use SurrealDB's literal types in a DELETE statement to match on specific field structures within objects.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/delete.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD error_info ON TABLE info TYPE\n      { continue: { message: \"Continue\" } }\n    | { retry_with_id: { error: string  } }\n    | { deprecated: { message: string   } };\n\nCREATE info SET error_info = { continue: { message: \"Continue\" }};\nCREATE info SET error_info = { continue: { message: \"Continue\" }};\nCREATE info SET error_info = { deprecated: { message: \"We don't use this anymore\" }};\n\nDELETE info WHERE error_info.continue;\nSELECT * FROM info;\n```\n\n----------------------------------------\n\nTITLE: Index-Based Query Execution in SurrealDB\nDESCRIPTION: Shows how defining an index on the age field optimizes a query by using an index-based scan instead of a full table scan. The execution plan demonstrates how SurrealDB limits the scan range based on the condition.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/performance-best-practices.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE INDEX idx_user_age ON user FIELDS age;\n\nSELECT age\nFROM user\nWHERE age > 18\nEXPLAIN;\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tdetail: {\n\t\t\tplan: {\n\t\t\t\tfrom: {\n\t\t\t\t\tinclusive: false,\n\t\t\t\t\tvalue: 18\n\t\t\t\t},\n\t\t\t\tindex: 'idx_user_age',\n\t\t\t\tto: {\n\t\t\t\t\tinclusive: false,\n\t\t\t\t\tvalue: NONE\n\t\t\t\t}\n\t\t\t},\n\t\t\ttable: 'user'\n\t\t},\n\t\toperation: 'Iterate Index'\n\t},\n\t{\n\t\tdetail: {\n\t\t\ttype: 'Memory'\n\t\t},\n\t\toperation: 'Collector'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Invalidating Authentication in SurrealDB Rust SDK\nDESCRIPTION: This code snippet demonstrates how to use the .invalidate() method to invalidate authentication for a SurrealDB connection. It includes setting up access permissions, authenticating with a token, and then invalidating the authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/invalidate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// Use the following statement to set up the access\n//\n// DEFINE ACCESS account ON DATABASE TYPE RECORD\n// \tSIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\n// \tSIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )\n// \tDURATION FOR TOKEN 15m, FOR SESSION 12h\n// ;\n\n// DEFINE TABLE cat SCHEMALESS\n//     PERMISSIONS for select, update, delete, create\n//     WHERE $auth.id;\n\nuse serde::Deserialize;\nuse std::fmt::Display;\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::Surreal;\n\n#[derive(Deserialize)]\nstruct Response {\n    token: String,\n}\n\nimpl Display for Response {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"{}\", self.token)\n    }\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = Surreal::new::<Ws>(\"127.0.0.1:8000\").await?;\n\n    let token = ureq::post(\"http://127.0.0.1:8000/signup\")\n        .set(\"Accept\", \"application/json\")\n        .send_json(ureq::json!({\n            \"ns\": \"ns\",\n            \"db\": \"db\",\n            \"ac\": \"account\",\n            \"email\": \"info@surrealdb.com\",\n            \"pass\": \"123456\"\n        }))\n        .unwrap()\n        .into_json::<Response>()\n        .unwrap()\n        .to_string();\n\n    db.authenticate(token).await?;\n    // User is present inside the $auth parameter\n    dbg!(db.query(\"RETURN $auth\").await?);\n\n    db.invalidate().await?;\n    // User is now gone\n    dbg!(db.query(\"RETURN $auth;\").await?);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Validating DateTime String Format in SurrealDB\nDESCRIPTION: Demonstrates how to check if a date-time string matches a specific format pattern using string::is::datetime function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/formatters.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::datetime(\"5sep2024pm012345.6789\", \"%d%b%Y%p%I%M%S%.f\");\n```\n\n----------------------------------------\n\nTITLE: Using RawQuery with Parameters in C#\nDESCRIPTION: Shows how to use the RawQuery method with parameter dictionaries in C#. The example demonstrates creating a record, selecting data with a parameterized table name, and extracting specific results from the query execution.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/sdks/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Assign the variable on the connection\nvar @params = new Dictionary<string, object> { { \"table\", \"person\" } };\nvar result = await db.RawQuery(\"CREATE person; SELECT * FROM type::table($table);\", @params);\n\n// Get the first result from the first query\nvar created = result.GetValue<Person>(0);\n\n// Get all of the results from the second query\nvar people = result.GetValue<List<Person>>(1);\n```\n\n----------------------------------------\n\nTITLE: Calculating Hamming Distance in SurrealDB\nDESCRIPTION: The vector::distance::hamming function computes the Hamming distance between two vectors. It takes two arrays as input and returns a number representing the minimum number of substitutions required to change one vector into the other.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::distance::hamming([1, 2, 2], [1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Comparing Geometry Objects in PHP for SurrealDB\nDESCRIPTION: Shows how to use the is() method to compare Geometry objects for equality, including points and lines.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/data-types.mdx#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$point1 = new GeometryPoint([1, 2]);\n$point2 = new GeometryPoint([3, 4]);\n$line = new GeometryLine([$point1, $point2]);\n\n$point1->is($point1);      // true\n$point1->is($point2);      // false\n$point1->is($line);        // false\n\n// Checks the inner values, does not need to be the same instance\n$duplicate = new GeometryPoint([1, 2]);\n$point1->is($duplicate);   // true\n```\n\n----------------------------------------\n\nTITLE: Creating Records with SurrealDB PHP SDK\nDESCRIPTION: Demonstrates how to create a new record in the database using the create() method. The example shows creating a person record with basic information including arrays.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/core/data-querying.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$person = $db->create(\"person:tobie\", [\n\t\"name\" => \"Tobie\",\n\t\"lastname\" => \"Morgan Hitchcock\",\n\t\"age\" => 30,\n\t\"hobbies\" => [\"reading\", \"coding\"]\n]);\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Python SDK close() Method Syntax\nDESCRIPTION: The syntax for the close() method in the SurrealDB Python SDK. This method does not take any parameters and is called on the database object.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/close.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndb.close()\n```\n\n----------------------------------------\n\nTITLE: Defining Query Method Syntax in Golang\nDESCRIPTION: This snippet shows the method signature for the Query function in the SurrealDB Golang SDK. It accepts a SQL string and optional variable map, returning query results of a specified type and any errors.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/query.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Query[TResult any](sql string, vars map[string]interface{}) (*[]QueryResult[TResult], error)\n```\n\n----------------------------------------\n\nTITLE: Breaking Loop on NONE Values in Weather Data\nDESCRIPTION: Example demonstrating how to process weather data and break the loop when encountering NONE values, using array sorting and conditional checks\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/break.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Data retrieved from somewhere which contains many NONE values\nLET $weather = [\n\t{\n\t\tcity: 'London',\n\t\ttemperature: 22.2,\n\t\ttimestamp: 1722565566389\n\t},\n\tNONE,\n\t{\n\t\tcity: 'London',\n\t\ttemperature: 20.1,\n\t\ttimestamp: 1722652002699\n\t},\n    {\n        city: 'Phoenix',\n        temperature: 45.1,\n        timestamp: 1722565642160\n    },\n    NONE,\n    NONE,\n    {\n        city: 'Phoenix',\n        temperature: 45.1,\n        timestamp: 1722652070372\n    },\n];\n\n-- Sort the data to move the NONE values to the end\n-- and break once the first NONE is reached\nFOR $data IN array::sort::desc($weather) {\n    IF $data IS NONE {\n        BREAK;\n    } ELSE {\n        CREATE weather CONTENT $data;\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Using HTTP GET Function in SurrealQL\nDESCRIPTION: Examples of using the http::get() function in a RETURN statement, showing both basic usage and usage with custom headers. Both examples return HTML code from the specified URL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/http.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nRETURN http::get('https://surrealdb.com');\n\n-- The HTML code is returned\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN http::get('https://surrealdb.com', {\n\t'x-my-header': 'some unique string'\n});\n\n-- The HTML code is returned\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB Endpoints in Rust\nDESCRIPTION: Demonstrates how to connect to local and remote SurrealDB endpoints using WebSocket (Ws) and WebSocket Secure (Wss) protocols.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// Connect to a local endpoint\nDB.connect::<Ws>(\"127.0.0.1:8000\").await?;\n// Connect to a remote endpoint\nDB.connect::<Wss>(\"cloud.surrealdb.com\").await?\n```\n\n----------------------------------------\n\nTITLE: Collate Numeric Sorting of Text Data in SurrealDB\nDESCRIPTION: This example shows how to combine COLLATE and NUMERIC keywords in SurrealDB for both alphabetic and numeric sorting of text data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nSELECT VALUE val FROM data ORDER BY val COLLATE NUMERIC;\n```\n\n----------------------------------------\n\nTITLE: Enforcing Record Existence in SurrealDB Relations\nDESCRIPTION: Shows how to enforce record existence in relations using the ENFORCED keyword in table definition.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_20\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE likes TYPE RELATION IN person OUT person ENFORCED;\n```\n\n----------------------------------------\n\nTITLE: UPSERT With WHERE Clause and No ID\nDESCRIPTION: Shows how UPSERT behaves when using a WHERE clause without specifying a record ID, demonstrating conditional update/insert behavior.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/upsert.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nUPSERT person SET name = 'Jaime' WHERE name = 'Jaime';\n```\n\n----------------------------------------\n\nTITLE: Array Type Definitions\nDESCRIPTION: Examples of defining fields with array types, including typed arrays and size-limited arrays.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\n-- Set a field to have the array data type\nDEFINE FIELD roles ON TABLE user TYPE array<string>;\n\n-- Set a field to have the array data type, equivalent to `array<any>`\nDEFINE FIELD posts ON TABLE user TYPE array;\n\n-- Set a field to have the array object data type\nDEFINE FIELD emails ON TABLE user TYPE array<object>;\n\n-- Field for a block in a game showing the possible directions a character can move next.\n-- The array can contain no more than four directions\nDEFINE FIELD next_paths ON TABLE block TYPE array<\"north\" | \"east\" | \"south\" | \"west\", 4>;\n```\n\n----------------------------------------\n\nTITLE: Multi-line Method Chaining for Enhanced Readability in SurrealDB\nDESCRIPTION: An example of spreading method chaining across multiple lines in SurrealDB 2.0 to further improve readability of complex queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\n[[1,2,3],[1,4,6],[4,2,4]]\n    .flatten()\n    .distinct()\n    .windows(2)\n    .len();\n```\n\n----------------------------------------\n\nTITLE: Creating SurrealProvider Context in SolidJS\nDESCRIPTION: TypeScript code for creating a SurrealProvider context in SolidJS. This provider manages the SurrealDB connection state and provides access to the client throughout the application.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/frameworks/solidjs.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n    useContext,\n    createContext, \n    JSX, \n    createSignal,\n    createEffect, \n    onCleanup, \n    Accessor, \n    onMount \n} from \"solid-js\";\nimport Surreal from \"surrealdb\";\nimport { createMutation } from \"@tanstack/solid-query\";\nimport { createStore } from \"solid-js/store\";\n\ninterface SurrealProviderProps {\n\tchildren: JSX.Element;\n\t/** The database endpoint URL */\n\tendpoint: string;\n\t/** Optional existing Surreal client */\n\tclient?: Surreal;\n\t/* Optional connection parameters */\n\tparams?: Parameters<Surreal[\"connect\"]>[1];\n\t/** Auto connect on component mount, defaults to true */\n\tautoConnect?: boolean;\n}\n\ninterface SurrealProviderState {\n\t/** The Surreal instance */\n\tclient: Accessor<Surreal>;\n\t/** Whether the connection is pending */\n\tisConnecting: Accessor<boolean>;\n\t/** Whether the connection was successfully established */\n\tisSuccess: Accessor<boolean>;\n\t/** Whether the connection rejected in an error */\n\tisError: Accessor<boolean>;\n\t/** The connection error, if present */\n\terror: Accessor<unknown|null>;\n\t/** Connect to the Surreal instance */\n\tconnect: () => Promise<void>;\n\t/** Close the Surreal instance */\n\tclose: () => Promise<true>;\n}\n\n// Store interface to track the Surreal instance and connection status\ninterface SurrealProviderStore {\n\tinstance: Surreal;\n\tstatus: \"connecting\" | \"connected\" | \"disconnected\";\n}\n\nconst SurrealContext = createContext<SurrealProviderState>();\n\nexport function SurrealProvider(props: SurrealProviderProps) {\n\t// Initialize store with either provided client or new instance\n\tconst [store, setStore] = createStore<SurrealProviderStore>({ \n\t\tinstance: props.client ?? new Surreal(),\n\t\tstatus: \"disconnected\"\n\t});\n\n\t// Use TanStack Query's mutation hook to manage the async connection state\n\tconst { \n\t\tmutateAsync,\n\t\tisError,\n\t\terror,\n\t\treset\n\t} = createMutation(() => ({\n\t\tmutationFn: async () => {\n\t\t\tsetStore(\"status\", \"connecting\");\n\t\t\tawait store.instance.connect(props.endpoint, props.params);\n\t\t}\n\t}));\n\n\t// Effect to handle auto-connection and cleanup\n\tcreateEffect(() => {\n\t\t// Connect automatically if autoConnect is true\n\t\tif(props.autoConnect) {\n\t\t\tmutateAsync();\n\t\t}\n\n\t\t// Cleanup function to reset mutation state and close connection\n\t\tonCleanup(() => {\n\t\t\treset();\n\t\t\tstore.instance.close();\n\t\t});\n\t});\n\n\t// Subscribe to connection events when component mounts\n\tonMount(() => {\n\t\t// Update store status when connection is established\n\t\tstore.instance.emitter.subscribe(\"connected\", () => {\n\t\t\tsetStore(\"status\", \"connected\");\n\t\t});\n\n\t\t// Update store status when connection is lost\n\t\tstore.instance.emitter.subscribe(\"disconnected\", () => {\n\t\t\tsetStore(\"status\", \"disconnected\");\n\t\t});\n\t});\n\n\t// Create the value object that will be provided through context\n\tconst providerValue: SurrealProviderState = {\n\t\tclient: () => store.instance,\n\t\tclose: () => store.instance.close(),\n\t\tconnect: mutateAsync,\n\t\terror: () => error,\n\t\tisConnecting: () => store.status === \"connecting\",\n\t\tisError: () => isError,\n\t\tisSuccess: () => store.status === \"connected\"\n\t};\n\n\treturn (\n\t\t<SurrealContext.Provider value={providerValue}>\n\t\t\t{props.children}\n\t\t</SurrealContext.Provider>\n\t);\n}\n\n// Custom hook to access the SurrealDB context\nexport function useSurreal(): SurrealProviderState {\n\tconst context = useContext(SurrealContext);\n\t\n\t// Ensure the hook is used within a provider\n\tif(!context) {\n\t\tthrow new Error(\"useSurreal must be used within a SurrealProvider\");\n\t}\n\n\treturn context;\n}\n```\n\n----------------------------------------\n\nTITLE: Using OVERWRITE Clause in SurrealQL\nDESCRIPTION: Example demonstrating how to create or overwrite an existing user using the OVERWRITE clause.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/user.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n-- Create an USER and overwrite if it already exists\nDEFINE USER OVERWRITE example ON ROOT PASSWORD \"example\" ROLES OWNER;\n```\n\n----------------------------------------\n\nTITLE: Invalidating Authentication in SurrealDB Python SDK\nDESCRIPTION: Invalidates the authentication for the current connection to SurrealDB. This method is used for logging out or terminating a user session.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\ndb.invalidate()\n```\n\n----------------------------------------\n\nTITLE: Extracting Data from RecordID in Python for SurrealDB\nDESCRIPTION: Illustrates how to access the table name and identifier from a RecordID object, including complex identifiers like dictionaries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/data-types.mdx#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Simple\nrid = RecordID(\"person\", \"john\")\nrid.table_name # \"person\"\nrid.id # \"john\"\n\n# Complex\nrid = RecordID(\"recording\", { city: \"London\", data: 123 })\nrid.id      # { city: \"London\", data: 123 }\nrid.id.city # \"London\"\nrid.id.data # 123\n```\n\n----------------------------------------\n\nTITLE: Filtering Graph Edges with Time Conditions in SurrealDB\nDESCRIPTION: Shows how to filter graph edges based on time conditions using the WHERE clause to limit purchases to the last 3 weeks.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_30\n\nLANGUAGE: surql\nCODE:\n```\nSELECT \n\t->purchased->product\n\t<-purchased<-person->(purchased WHERE created_at > time::now() - 3w)\n\t->purchased->product\nFROM person:tobie;\n```\n\n----------------------------------------\n\nTITLE: Upserting with Patch using .upsert().patch() in Rust\nDESCRIPTION: Shows how to use the .upsert().patch() method to apply JSON Patch changes to records in SurrealDB using Rust.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/upsert.mdx#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\ndb.upsert(resource).patch(patch_op)\n```\n\n----------------------------------------\n\nTITLE: Python Method Syntax for SurrealDB Upsert\nDESCRIPTION: Basic syntax for the upsert() method that takes a thing (table name or RecordID) and data parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/upsert.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.upsert(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Using OVERWRITE Clause in SurrealDB\nDESCRIPTION: Shows how to use the OVERWRITE clause when defining a table. This allows overwriting an existing table definition if it already exists.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/table.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\n-- Create an TABLE and overwrite if it already exists\nDEFINE TABLE OVERWRITE example;\n```\n\n----------------------------------------\n\nTITLE: Method Syntax for SurrealDB Python Insert\nDESCRIPTION: Defines the basic syntax for the insert() method that takes a table name and data as required arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/insert.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.insert(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Snowball Filter for English Stemming in SurrealQL\nDESCRIPTION: Defines an analyzer with the snowball filter for English stemming, which reduces words to their base forms by removing suffixes according to language-specific rules.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_22\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER snowball_test TOKENIZERS blank,punct FILTERS snowball(english);\nsearch::analyze(\"snowball_test\", \"\n    manager managing management\n    running ran \n    foot feet\n    introspective\n    introspection\n    introspected\n\");\n```\n\n----------------------------------------\n\nTITLE: Optimizing Composite IDs for Efficient Querying in SurrealDB\nDESCRIPTION: This snippet demonstrates how to optimize composite IDs by reordering elements for more efficient querying in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_30\n\nLANGUAGE: surql\nCODE:\n```\nCREATE event:[user:one, \"debug\", d'2025-05-05T08:00:00Z'] SET info = \"Logged in\";\nCREATE event:[user:one, \"debug\", d'2025-05-05T08:10:00Z'] SET info = \"Logged out\";\nCREATE event:[user:two, \"debug\", d'2025-05-05T08:01:00Z'] SET info = \"Logged in\";\n\n-- Only returns events for user:one and \"debug\"\nSELECT * FROM event:[user:one, \"debug\", d'2025-05-05']..[user:one, \"debug\", d'2025-05-06'];\n```\n\n----------------------------------------\n\nTITLE: Converting Values to String in SurrealDB\nDESCRIPTION: The type::string function converts any value except NONE, NULL, and bytes into a string format.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_16\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::string(12345);\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Fields in All Records Using SET in SurrealQL\nDESCRIPTION: This example shows how to update multiple fields for all records in the person table. It demonstrates adding new fields, modifying existing arrays, and creating computed fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/update.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Update all records in a table\n-- The `enjoys` field will also be an array.\n-- The += operator alone is enough to infer the type\nUPDATE person SET \n\tdollars = 50,\n\tskills += 'breathing',\n\tenjoys += 'reading',\n\tfull_name = name + ' Mc' + name + 'erson';\n```\n\n----------------------------------------\n\nTITLE: Range-based FOR Loop\nDESCRIPTION: Demonstrates using integer ranges in FOR loops to create sequential records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/for.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nFOR $year IN 0..=2024 {\n    CREATE historical_events SET\n        for_year = $year,\n        events = \"To be added\";\n}\n```\n\n----------------------------------------\n\nTITLE: Basic RELATE Statement Syntax in SurrealQL\nDESCRIPTION: The syntax for the RELATE statement in SurrealQL, showing optional clauses for content, return values, timeout, and parallel execution.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nRELATE [ ONLY ] @from_record -> @table -> @to_record\n\t[ CONTENT @value\n\t  | SET @field = @value ...\n\t]\n\t[ RETURN NONE | RETURN BEFORE | RETURN AFTER | RETURN DIFF | RETURN @statement_param, ... | RETURN VALUE @statement_param ]\n\t[ TIMEOUT @duration ]\n\t[ PARALLEL ]\n;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RETURN Breaking Execution in SurrealQL Functions\nDESCRIPTION: This snippet shows how RETURN breaks execution in functions in SurrealDB v2.0.0 and later. It demonstrates that statements after RETURN are not executed.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/return.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FUNCTION fn::person::create($firstname: string, $lastname: string) {\n\tLET $person = CREATE person CONTENT {\n\t\tfirstname: $firstname,\n\t\tlastname: $lastname,\n\t};\n\n\t-- The RETURN statement will set the return value of the custom function, and further queries will not be executed.\n\tRETURN $person.id;\n\n    -- This query will never be executed\n    CREATE person SET firstname = \"Stephen\", lastname = \"Strange\";\n};\n\nfn::person::create(\"Thanos\", \"Johnson\");\nSELECT * FROM person;\n```\n\n----------------------------------------\n\nTITLE: Calculating Jaccard Similarity in SurrealDB\nDESCRIPTION: The vector::similarity::jaccard function computes the Jaccard similarity between two vectors. It takes two arrays as input and returns a number measuring the intersection divided by the union of the datasets represented by the vectors.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_18\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::similarity::jaccard([0,1,2,5,6], [0,2,3,4,5,7,9]);\n```\n\n----------------------------------------\n\nTITLE: User Signin in SurrealDB Rust SDK\nDESCRIPTION: Demonstrates user signin using the signin() method. Similar to signup, it requires a Scope struct with user credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::Serialize;\nuse surrealdb::opt::auth::Scope;\n\n#[derive(Serialize)]\nstruct Credentials<'a> {\n    email: &'a str,\n    pass: &'a str,\n}\n\nlet jwt = db.signin(Scope {\n    namespace: \"test\",\n    database: \"test\",\n    access: \"user\",\n    params: Credentials {\n        email: \"info@surrealdb.com\",\n        pass: \"123456\",\n    },\n}).await?;\n\n// ⚠️: It is important to note that the token should be handled securely and protected from unauthorized access.\nlet token = jwt.as_insecure_token();\n```\n\n----------------------------------------\n\nTITLE: SignUp Method Syntax in Go\nDESCRIPTION: Basic method signature for the SignUp function that handles user registration with credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/signup.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nawait db.SignUp(credentials)\n```\n\n----------------------------------------\n\nTITLE: Starting In-Memory Database\nDESCRIPTION: Command to start a local in-memory database with test namespace and database, including authentication credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql --endpoint memory --namespace test --database test --auth-level root --username username --password password\n```\n\n----------------------------------------\n\nTITLE: Using OVERWRITE Clause in SurrealQL\nDESCRIPTION: Demonstrates how to define an access method that overwrites any existing definition with the same name.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/record.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS OVERWRITE example ON DATABASE TYPE RECORD;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents with SELECT in SurrealQL\nDESCRIPTION: A basic SELECT query in SurrealQL that retrieves all documents from the users table. This demonstrates the SQL-like syntax of SurrealQL for data retrieval operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/document.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM users;\n```\n\n----------------------------------------\n\nTITLE: Basic Query Method Syntax in SurrealDB .NET SDK\nDESCRIPTION: Method signature for executing SurrealQL statements against the database using Query()\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/writing-surrealql.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Query(sql)\n```\n\n----------------------------------------\n\nTITLE: Displaying Query Results with OMIT Clause in SurrealQL\nDESCRIPTION: This snippet shows the output of three different queries: one without OMIT, one with OMIT for specific fields, and one using destructuring syntax to omit nested fields. It illustrates how the OMIT clause affects the returned data structure.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/omit.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-------- Query 3 (132.138µs) --------\n\n[\n\t{\n\t\tid: person:jaime,\n\t\tname: 'Jaime',\n\t\topts: {\n\t\t\tenabled: false,\n\t\t\tsecurity: 'secure'\n\t\t},\n\t\tpassword: 'asdfgh'\n\t},\n\t{\n\t\tid: person:tobie,\n\t\tname: 'Tobie',\n\t\topts: {\n\t\t\tenabled: true,\n\t\t\tsecurity: 'secure'\n\t\t},\n\t\tpassword: '123456'\n\t}\n]\n\n-------- Query 4 (61.876µs) --------\n\n[\n\t{\n\t\tid: person:jaime,\n\t\tname: 'Jaime',\n\t\topts: {\n\t\t\tenabled: false\n\t\t}\n\t},\n\t{\n\t\tid: person:tobie,\n\t\tname: 'Tobie',\n\t\topts: {\n\t\t\tenabled: true\n\t\t}\n\t}\n]\n\n-------- Query 5 (52.152µs) --------\n\n[\n\t{\n\t\tid: person:jaime,\n\t\tname: 'Jaime',\n\t\topts: {}\n\t},\n\t{\n\t\tid: person:tobie,\n\t\tname: 'Tobie',\n\t\topts: {}\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Auto-generated Field Names in SurrealQL\nDESCRIPTION: Shows how field names are automatically generated when using mathematical operations and array construction.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/objects.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nSELECT\n    math::mean(temps),\n    [ math::min(temps), math::max(temps) ]\nFROM { temps: [-5, 8, 9] };\n```\n\n----------------------------------------\n\nTITLE: Authenticating Root User in SurrealDB Python SDK\nDESCRIPTION: This snippet demonstrates how to authenticate a root user using the 'signin' method. It requires a username and password for root access.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/signin.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nawait db.signin({\n\t\"username\": 'root',\n\t\"password\": 'surrealdb'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a MultiPolygon Geometry in SurrealQL\nDESCRIPTION: This snippet demonstrates how to update a record with a MultiPolygon geometry for storing multiple polygon areas in a single value. Each polygon is defined with its own coordinate structure following GeoJSON format.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/geometries.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE university:oxford SET locations = {\n\ttype: \"MultiPolygon\",\n\tcoordinates: [\n\t\t[\n\t\t\t[ [10.0, 11.2], [10.5, 11.9], [10.8, 12.0], [10.0, 11.2] ]\n\t\t],\n\t\t[\n\t\t\t[ [9.0, 11.2], [10.5, 11.9], [10.3, 13.0], [9.0, 11.2] ]\n\t\t]\n\t]\n};\n```\n\n----------------------------------------\n\nTITLE: Throwing Complex Data Types in SurrealQL\nDESCRIPTION: This example demonstrates that THROW can be used with complex data types like arrays and objects, and can even use the result of a SELECT statement as the error value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/throw.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nCREATE event SET time = time::now();\nCREATE event SET time = time::now();\nTHROW SELECT * FROM event;\n```\n\n----------------------------------------\n\nTITLE: Using String Functions for Custom Text Searching in SurrealDB\nDESCRIPTION: This snippet demonstrates the use of various string functions in SurrealDB for custom text searching and manipulation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\nSELECT \n    $this AS word, \n    $this.lowercase() = \"sleek\" AS is_sleek\nFROM [\"sleek\", \"SLEEK\", \"Sleek\", \"sleeek\"];\n```\n\n----------------------------------------\n\nTITLE: Defining Upsert Method Syntax in Golang\nDESCRIPTION: This snippet shows the method syntax for the Upsert function in the SurrealDB Golang SDK. It takes a table name and data as arguments, and returns a generic type T.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/upsert.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Upsert[T](table, data)\n```\n\n----------------------------------------\n\nTITLE: Using record::exists() with Method Syntax in SurrealQL\nDESCRIPTION: This example demonstrates using record::exists() with method syntax in a loop to create records if they don't exist.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/record.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nFOR $person IN [\"Haakon_VII\", \"Ferdinand_I\", \"Manuel_II\", \"Wilhelm_II\", \"George_I\", \"Albert_I\", \"Alfonso_XIII\", \"George_V\", \"Frederick_VIII\"] {\n    LET $record_name = type::thing(\"person\", $person.lowercase());\n    IF !$record_name.exists() {\n        CREATE $record_name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Truthiness of Values in SurrealQL\nDESCRIPTION: Examples demonstrating how truthiness is evaluated for different value types in SurrealDB using array::all() method and double negation operator.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/values.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::all([\"\", 1, 2, 3]); // false because of \"\"\nRETURN array::all([{}, 1, 2, 3]); // false because of {}\nRETURN array::all([\"SurrealDB\", { is_nice_database: true }, 1, 2, 3]);  // true\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN [\n    !!\"Has a value\", !!\"\",             // true, false\n    !!true, !!false,                   // true, false\n    !!{ is_nice_database: true }, !!{} // true, false\n    ];\n```\n\n----------------------------------------\n\nTITLE: Flexible Query Example with Resource\nDESCRIPTION: Example showing how to use Resource type for flexible typing when querying data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/flexible-typing.mdx#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::opt::Resource;\nuse surrealdb::{Error, Surreal};\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    let db = Surreal::new::<Ws>(\"localhost:8000\").await?;\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n    db.use_ns(\"namespace\").use_db(\"database\").await?;\n    let all_students = db.select(Resource::from(\"student\")).await?;\n    println!(\"All students debug: {all_students:?}\\n\");\n    println!(\"All students display: {all_students}\");\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Record with RETURN NONE in SurrealQL\nDESCRIPTION: This example shows how to insert a record and return nothing using the RETURN NONE clause, which can be useful to avoid excess output.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/insert.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO company {\n\tname: 'SurrealDB',\n\tfounded: \"2021-09-10\",\n\tfounders: [person:tobie, person:jaime],\n\ttags: ['big data', 'database']\n} RETURN NONE;\n```\n\n----------------------------------------\n\nTITLE: DEFINE NAMESPACE with OVERWRITE Clause in SurrealQL\nDESCRIPTION: Example showing how to create or overwrite an existing namespace, ensuring the latest definition is applied.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/namespace.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n-- Create an NAMESPACE and overwrite if it already exists\nDEFINE NAMESPACE OVERWRITE example;\n```\n\n----------------------------------------\n\nTITLE: Using Decimal Numbers with the dec Suffix in SurrealDB\nDESCRIPTION: This example demonstrates how to use 128-bit decimal numbers by applying the 'dec' suffix. This provides higher precision for financial calculations and other scenarios where precision is critical.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/numbers.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nCREATE product SET price = 99.99dec;\n```\n\n----------------------------------------\n\nTITLE: DEFINE PARAM with OVERWRITE Clause in SurrealQL\nDESCRIPTION: Example showing how to use the OVERWRITE clause to create or update a parameter, overwriting any existing definition.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/param.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE PARAM OVERWRITE $example VALUE 123;\n```\n\n----------------------------------------\n\nTITLE: Sample Data Insertion for GROUP BY Example in SurrealQL\nDESCRIPTION: Setup code that inserts sample data into the 'rams' table for demonstration purposes. The data includes gender, age, and country attributes that will be used in the GROUP BY example.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/group_by.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO rams [\n    { gender: \"M\", age: 20, country: \"Japan\" },\n    { gender: \"M\", age: 25, country: \"Japan\" },\n    { gender: \"F\", age: 23, country: \"US\" },\n    { gender: \"F\", age: 30, country: \"US\" },\n    { gender: \"F\", age: 25, country: \"Korea\" },\n    { gender: \"F\", age: 45, country: \"UK\" },\n];\n```\n\n----------------------------------------\n\nTITLE: Complete System User Bearer Authentication Setup\nDESCRIPTION: Series of commands to define a system user, create a bearer access method, and generate a bearer grant for automation purposes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/bearer.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Define system user that access will be granted to\nDEFINE USER automation ON DATABASE PASSWORD 'secret' ROLES VIEWER;\n-- Define bearer access method to generate API keys for system users\nDEFINE ACCESS api ON DATABASE TYPE BEARER FOR USER DURATION FOR GRANT 10d;\n-- Generate bearer grant to be used by a specific automation\nACCESS api GRANT FOR USER automation;\n```\n\n----------------------------------------\n\nTITLE: Normalizing Vectors in SurrealQL\nDESCRIPTION: The vector::normalize function computes the normalization of a vector, transforming it to a unit vector. It takes an array representing a vector and returns a new array with the normalized values.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::normalize([ 4, 3 ]);\n\n[0.8f, 0.6f]\n```\n\n----------------------------------------\n\nTITLE: Integer and Large Numeric ID Output in SurrealQL\nDESCRIPTION: Shows the output of creating records with integer and large numeric IDs, demonstrating how large numbers outside the 64-bit range are enclosed by ⟨ and ⟩ characters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\n-------- Query --------\n\n[\n\t{\n\t\tcelsius: 37.5f,\n\t\tid: temperature:17493,\n\t\ttime: d'2025-02-17T06:21:08.911Z'\n\t}\n]\n\n-------- Query s--------\n\n[\n\t{\n\t\tevents: [\n\t\t\t'Galactic senate convenes',\n\t\t\t'Mr. Bean still waits in a field'\n\t\t],\n\t\tid: year:⟨29878977097987987979232⟩\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Using crypto::sha1 Hash Function in SurrealQL\nDESCRIPTION: Returns the sha1 hash of the input string value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/crypto.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\ncrypto::sha1(string) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN crypto::sha1(\"tobie\");\n\n\"c6be709a1b6429472e0c5745b411f1693c4717be\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating Users with SurrealDB Python SDK\nDESCRIPTION: The 'signin' method is used to authenticate users with different levels of access. It accepts various parameters depending on the type of user being authenticated, such as username, password, namespace, database, scope, and access.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/signin.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.signin({ ... })\n```\n\n----------------------------------------\n\nTITLE: Upsert Method Syntax in .NET\nDESCRIPTION: Defines the basic syntax for the Upsert method that creates or updates a specific record in SurrealDB using generic type parameter T.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/upsert.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Upsert<T>(data)\n```\n\n----------------------------------------\n\nTITLE: Storing Query Results with LET in SurrealQL\nDESCRIPTION: Demonstrates storing subquery results in a parameter for subsequent operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/let.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Define the parameter\nLET $adults = (SELECT * FROM person WHERE age > 18);\n-- Use the parameter\nUPDATE $adults SET adult = true;\n```\n\n----------------------------------------\n\nTITLE: QueryRaw Usage Examples in PHP\nDESCRIPTION: Examples demonstrating how to use queryRaw method with and without parameters to query users from a database. Shows parameter binding and direct query execution.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/queryRaw.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Query the database for all users with the firstname \"Tobie\" with parameters.\n$response = $db->queryRaw(\n\t'SELECT * FROM users WHERE firstname = $firstname',\n\t['firstname' => 'Tobie']\n);\n\n// Query the database for all users with the firstname \"Tobie\" without parameters.\n$response = $db->queryRaw('SELECT * FROM users WHERE firstname = \"Tobie\"');\n```\n\n----------------------------------------\n\nTITLE: One-time Event Subscription Example in TypeScript\nDESCRIPTION: Shows how to use subscribeOnce method for one-time event handling with various connection states.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/properties.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst disconnectedPromise = db.emitter.subscribeOnce(\"disconnected\");\nconst connectingPromise = db.emitter.subscribeOnce(\"connecting\");\nconst connectedPromise = db.emitter.subscribeOnce(\"connected\");\nconst errorPromise = db.emitter.subscribeOnce(\"error\");\n```\n\n----------------------------------------\n\nTITLE: Using array::slice Function in SurrealQL\nDESCRIPTION: The array::slice function extracts a portion of an array between specified positions. It supports various combinations of positive and negative indices for flexible slicing operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_44\n\nLANGUAGE: surql\nCODE:\n```\narray::slice(array, start: int, len: int) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::slice([ 1, 2, 3, 4, 5 ], 1, 2);\n\n[2, 3]\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::slice([ 1, 2, 3, 4, 5 ], 1, -1);\n\n[ 2, 3, 4 ]\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::slice([ 1, 2, 3, 4, 5 ], 2);\n\n[ 3, 4, 5 ]\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::slice([ 1, 2, 3, 4, 5 ], -2);\n\n[ 4, 5 ]\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::slice([ 1, 2, 3, 4, 5 ], -3, 2);\n\n[ 3, 4 ]\n```\n\n----------------------------------------\n\nTITLE: Correctly Inserting Datetime Values in Schemafull Tables\nDESCRIPTION: Shows the proper way to insert data into a schemafull table with a datetime field by explicitly casting the string to a datetime using the 'd' prefix.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/datetimes.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE event SCHEMAFULL;\nDEFINE FIELD time ON event TYPE datetime;\n// highlight-next-line\nCREATE event SET time = d\"2023-07-03T07:18:52.84114Z\";\n```\n\n----------------------------------------\n\nTITLE: API Invocation with Request Options\nDESCRIPTION: Demonstrates invoking an API endpoint with custom body and headers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/api.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\napi::invoke(\"/test\", {\n    body: <bytes> '{ \"a\": true }',\n    headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/cbor\",\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing unset() Method in Rust for SurrealDB\nDESCRIPTION: This example demonstrates how to use the unset() method in a Rust application with SurrealDB. It shows connecting to the database, setting a variable, and then unsetting it.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/unset.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::Serialize;\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::Surreal;\n\n#[derive(Debug, Serialize)]\nstruct Name<'a> {\n    first: &'a str,\n    last: &'a str,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = Surreal::new::<Ws>(\"127.0.0.1:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    // Assign the variable on the connection\n    db.set(\n        \"name\",\n        Name {\n            first: \"Tobie\",\n            last: \"Morgan Hitchcock\",\n        },\n    )\n    .await?;\n    dbg!(db.query(\"RETURN $name\").await?);\n\n    db.unset(\"name\").await?;\n    // Aaaand now it's gone\n    dbg!(db.query(\"RETURN $name\").await?);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Redefining and Shadowing Parameters in SurrealQL\nDESCRIPTION: Explains how to redefine parameter values and demonstrates parameter shadowing within different scopes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/parameters.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nLET $my_name = \"Alucard\";\n$my_name = \"Sypha\";\nRETURN $my_name;\n```\n\nLANGUAGE: surql\nCODE:\n```\nLET $nums = [\n    [1,2],\n    [3,4]\n];\n\n{\n    LET $nums = $nums.flatten();\n    -- Flattened into a single array,\n    -- so $nums is shadowed as [1,2,3,4]\n    RETURN $nums;\n};\n\n-- Returns original unflattened $nums:\n-- [[1,2], [3,4]]\nRETURN $nums;\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Capabilities in Rust SDK\nDESCRIPTION: Demonstrates how to configure SurrealDB capabilities in Rust, specifically showing how to deny the HTTP function while allowing other capabilities. Uses the Capabilities struct to set permissions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/setup.mdx#2025-04-16_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    let config = Config::default().capabilities(Capabilities::all().with_deny_function(\"http\")?);\n    let db = connect((\"mem://\", config)).await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    println!(\"{:?}\", db.query(\"http::get('http://www.surrealdb.com')\").await);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Records with Specific IDs using RecordId in Rust\nDESCRIPTION: Demonstrates how to insert records with specific IDs using the RecordId struct in the SurrealDB Rust SDK. It shows inserting multiple person records with predefined IDs.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/insert.mdx#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse surrealdb::engine::any::connect;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::RecordId;\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Settings {\n    active: bool,\n    marketing: bool,\n}\n\n#[derive(Serialize)]\nstruct Data<'a> {\n    id: RecordId,\n    name: &'a str,\n}\n\n#[derive(Debug, Deserialize)]\nstruct Person {\n    name: String,\n    id: RecordId,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = connect(\"ws://localhost:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    let people: Vec<Person> = db\n        .insert(())\n        .content(vec![\n            Data {\n                id: RecordId::from((\"person\", \"tobie\")),\n                name: \"Tobie\",\n            },\n            Data {\n                id: RecordId::from((\"person\", \"jaime\")),\n                name: \"Jaime\",\n            },\n        ])\n        .await?;\n    dbg!(people);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Surreal Cloud Instance via CLI\nDESCRIPTION: Command to establish a connection to a Surreal Cloud Instance using the surreal sql command. Requires an endpoint URL and authentication token (JWT) which can be found in the Surreal Cloud console.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-cloud/connect/cli.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql --endpoint <endpoint> --token <token>\n```\n\n----------------------------------------\n\nTITLE: AWS Cognito Pre-Token Generation Lambda (v1.x)\nDESCRIPTION: Lambda function that adds custom claims to AWS Cognito tokens for SurrealDB v1.x integration using Scope and Token method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/integrate-aws-cognito-as-authentication-provider.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst handler = async (event) => {\n  event.response = {\n    claimsOverrideDetails: {\n      claimsToAddOrOverride: {\n        tk: \"cognito\", // The name of the token given when defining it with DEFINE TOKEN.\n        sc: \"user\", // The scope that the token has been defined for with DEFINE TOKEN.\n        ns: \"test\", // The namespace selected when calling DEFINE TOKEN.\n        db: \"test\", // The database selected when calling DEFINE TOKEN.\n      },\n    },\n  };\n\n  return event;\n};\n\nexport { handler };\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Fuzzy Matching with ~ Operator in SurrealQL\nDESCRIPTION: Examples showing the use of the ~ operator for fuzzy matching, which returns a boolean result.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_33\n\nLANGUAGE: surql\nCODE:\n```\nRETURN \"SurrealDB\" ~ \"db\";\n-- true\nRETURN \"SurrealDB\" ~ \"surrealdb\"\n-- true\n```\n\n----------------------------------------\n\nTITLE: Complex Array Manipulation in SurrealQL\nDESCRIPTION: Demonstrates advanced array manipulation using chained array functions in SurrealQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/arrays.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\n[\n\tNONE,\n\t{\n\t\tat: (98, 65.7),\n\t\tname: \"Some city\"\n\t},\n\t{\n\t\tat: (-190.7, 0),\n\t\tname: NONE\n\t},\n    {\n        name: \"Other city\",\n        at: (0.0, 0.1)\n    },\n\t{\n        name: \"Nonexistent city\",\n        at: (200.0, 66.5)\n    }\n]\n    .filter(|$v| $v != NONE AND $v.name != NONE)\n    .filter(|$v| $v.at.is_valid())\n    .map(|$v, $i| {\n        item: $i,\n        name: $v.name,\n        coordinates: $v.at\n    });\n```\n\n----------------------------------------\n\nTITLE: Updating Records in SurrealQL (Neo4j Equivalent)\nDESCRIPTION: Demonstrates how to update specific fields in records that match certain criteria in SurrealQL compared to Neo4j's SET clause. This adds or modifies a field value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_16\n\nLANGUAGE: SurrealQL\nCODE:\n```\nUPDATE person SET last_name = \"Doe\" WHERE name = \"Jane\"\n```\n\n----------------------------------------\n\nTITLE: SurrealDB PHP Query Method Syntax\nDESCRIPTION: Basic syntax for the query() method that accepts a query string and optional variables array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/query.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->query($query, $vars)\n```\n\n----------------------------------------\n\nTITLE: Defining Upsert Method Syntax in PHP\nDESCRIPTION: Shows the basic syntax for the upsert method in the SurrealDB PHP SDK. The method takes two parameters: $thing for specifying the target table/record and $data for the record content.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/upsert.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->upsert($thing, $data);\n```\n\n----------------------------------------\n\nTITLE: Using array::insert function in SurrealQL\nDESCRIPTION: The array::insert function inserts a value into an array at a specific position. A negative index can be provided to specify a position relative to the end of the array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_22\n\nLANGUAGE: surql\nCODE:\n```\narray::insert(array, value, number) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::insert([1, 2, 3, 4], 5, 2);\n\n[ 1, 2, 5, 3, 4 ]\n```\n\n----------------------------------------\n\nTITLE: Binding Parameters in HTTP REST API (V2.x)\nDESCRIPTION: Shows how to bind parameters when using SurrealDB's HTTP REST API in version 2.x by appending the parameters as query parameters to the endpoint URL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -u \"root:root\" -H \"surreal-ns: mynamespace\" -H \"surreal-db: mydatabase\" -H \"Accept: application/json\" \\\n-d 'SELECT * FROM person WHERE age > $age' http://localhost:8000/sql?age=18\n```\n\n----------------------------------------\n\nTITLE: CBOR Tag Mappings for SurrealDB Data Types\nDESCRIPTION: Definition of custom CBOR tags used to represent SurrealDB-specific data types in the protocol. Each tag maps to a specific data type with defined serialization format.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/cbor.mdx#2025-04-16_snippet_0\n\nLANGUAGE: CBOR\nCODE:\n```\nTag 0: Datetime (ISO 8601 string)\nTag 6: NONE value\nTag 7: Table name (string)\nTag 8: Record ID (array[2])\nTag 9: UUID (string)\nTag 10: Decimal (string)\nTag 12: Datetime (compact array[2])\nTag 13: Duration (string)\nTag 14: Duration (compact array[2])\nTag 15: Future (string)\nTag 37: UUID (binary)\nTag 49: Range (array[2])\nTag 50: Included Range Bound\nTag 51: Excluded Range Bound\nTags 88-94: Geometry types\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Arrays in SurrealDB\nDESCRIPTION: The type::array function converts values into arrays. It accepts either an array or range as input and returns an array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::array(1..=3);\n```\n\n----------------------------------------\n\nTITLE: Avoiding Infinite Recursion with Futures in SurrealQL\nDESCRIPTION: This example shows how to avoid infinite recursion by carefully designing future queries. The SELECT query only retrieves the ID field, preventing recursive access to the future field.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/futures.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nCREATE |person:10| RETURN NONE;\n\nDEFINE FIELD random_friend\n    ON person\n    VALUE <future> { (SELECT VALUE id FROM ONLY person ORDER BY RAND() LIMIT 1) };\n\nCREATE person;\n```\n\n----------------------------------------\n\nTITLE: Selecting Records from SurrealDB in C#\nDESCRIPTION: Selects all records in a table or a specific record, returning results of type T.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\ndb.Select<T>(thing)\n```\n\n----------------------------------------\n\nTITLE: FROM Clause Usage Examples\nDESCRIPTION: Demonstrates various ways to use the FROM clause including querying multiple tables, using variables, selecting specific records, and working with subqueries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/from.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Selects all records from both 'user' and 'admin' tables.\nSELECT * FROM user, admin;\n\n-- Selects all records from the table named in the variable '$table',\n-- but only if the 'admin' field of those records is true.\n-- Equivalent to 'SELECT * FROM user WHERE admin = true'.\nLET $table = \"user\";\nSELECT * FROM type::table($table) WHERE admin = true;\n\n-- Selects a single record from:\n-- * the table named in the variable '$table',\n-- * and the identifier named in the variable '$id'.\n-- This query is equivalent to 'SELECT * FROM user:admin'.\nLET $table = \"user\";\nLET $id = \"admin\";\nSELECT * FROM type::thing($table, $id);\n\n-- Selects all records for specific users 'tobie' and 'jaime',\n-- as well as all records for the company 'surrealdb'.\nSELECT * FROM user:tobie, user:jaime, company:surrealdb;\n\n-- Selects records from a list of identifiers. The identifiers can be numerical,\n-- string, or specific records such as 'person:lrym5gur8hzws72ux5fa'.\nSELECT * FROM [3648937, \"test\", person:lrym5gur8hzws72ux5fa, person:4luro9170uwcv1xrfvby];\n\n-- Selects data from an object that includes a 'person' key,\n-- which is associated with a specific person record, and an 'embedded' key set to true.\nSELECT * FROM { person: person:lrym5gur8hzws72ux5fa, embedded: true };\n\n-- This command first performs a subquery, which selects all 'user' records and adds a\n-- computed 'adult' field that is true if the user's 'age' is 18 or older.\n-- The main query then selects all records from this subquery where 'adult' is true.\nSELECT * FROM (SELECT age >= 18 AS adult FROM user) WHERE adult = true;\n```\n\n----------------------------------------\n\nTITLE: Importing Data to Surreal Cloud Using CLI\nDESCRIPTION: Command to import a .surql file into a Surreal Cloud instance. Uses the surreal import command with connection details and authentication credentials to import the previously exported data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-cloud/advanced-topics/migrating-data.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal import --conn <connection-url> --user root --pass root --ns test --db test downloads/export.surql\n```\n\n----------------------------------------\n\nTITLE: Basic SurrealDB Connection and Queries\nDESCRIPTION: Rust code demonstrating how to connect to SurrealDB, authenticate, and execute basic queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/setup.mdx#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::Surreal;\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n\n    // Connect to the server\n    let db = Surreal::new::<Ws>(\"127.0.0.1:8000\").await?;\n\n    // Signin as a namespace, database, or root user\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    // Select a specific namespace / database\n    db.use_ns(\"test\").use_db(\"test\").await?;\n\n    let some_queries = db.query(\"\n        RETURN 9; \n        RETURN 10; \n        SELECT * FROM { is: 'Nice database' };\n    \").await?;\n    dbg!(some_queries);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Granting Access for Record User in SurrealQL\nDESCRIPTION: Example showing how to create a record representing a user, define a bearer access method for records, and generate a bearer grant for an end-user.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/access.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n-- Create record representing a user\nCREATE user:1 CONTENT { name: \"tobie\" };\n-- Define bearer access method to generate API keys\nDEFINE ACCESS api ON DATABASE TYPE BEARER FOR RECORD DURATION FOR GRANT 10d;\n-- Generate bearer grant to be used by the user\nACCESS api GRANT FOR RECORD user:1;\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with TiKV backend\nDESCRIPTION: This command starts a SurrealDB server instance, specifying the TiKV cluster endpoint as the backing data store.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/tikv.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start tikv://127.0.0.1:2379\n```\n\n----------------------------------------\n\nTITLE: Defining signup Method Syntax in Python SurrealDB SDK\nDESCRIPTION: This snippet shows the basic syntax for calling the signup method on a SurrealDB database instance in Python. It takes a dictionary of arguments as its parameter.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/signup.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.signup({ ... })\n```\n\n----------------------------------------\n\nTITLE: Using Multi-Part Durations with Datetimes in SurrealDB\nDESCRIPTION: Demonstrates combining multiple duration units to modify a datetime value, creating a complex time offset with hours, minutes, seconds, and milliseconds.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/datetimes.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nCREATE event SET time = d\"2023-07-03T07:18:52.841147Z\" + 1h30m20s1350ms;\n```\n\n----------------------------------------\n\nTITLE: Inserting Records into SurrealDB with C#\nDESCRIPTION: Inserts one or multiple records into the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\ndb.Insert<T>(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Implementing Snowball Stemming in SurrealQL Analyzers\nDESCRIPTION: This example shows how to create analyzers using the Snowball stemming filter for different languages. It demonstrates the application of these analyzers to English and German text, reducing words to their root forms.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/analyzer.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER english_snowball TOKENIZERS class FILTERS snowball(english);\nDEFINE ANALYZER german_snowball TOKENIZERS class FILTERS snowball(german);\n\nRETURN [\n    search::analyze(\"english_snowball\", \"Looking at some running cats\"),\n    search::analyze(\"german_snowball\", \"Sollen wir was trinken gehen?\")\n];\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t[\n\t\t'look',\n\t\t'at',\n\t\t'some',\n\t\t'run',\n\t\t'cat'\n\t],\n\t[\n\t\t'soll',\n\t\t'wir',\n\t\t'was',\n\t\t'trink',\n\t\t'geh',\n\t\t'?'\n\t]\n]\n```\n\n----------------------------------------\n\nTITLE: Using PATCH Clause for JSON Patching in SurrealQL\nDESCRIPTION: This example demonstrates how to use the PATCH clause to apply changes to a record using JSON Patch-like operations. It adds a new field to a specific record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/update.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\n-- Patch the JSON response\nUPDATE person:tobie PATCH [\n\t{\n\t\t\"op\": \"add\",\n\t\t\"path\": \"Engineering\",\n\t\t\"value\": \"true\"\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Throwing a Simple Error Message in SurrealQL\nDESCRIPTION: This example demonstrates how to throw a basic error message using the THROW statement in SurrealQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/throw.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Throw an error\nTHROW \"some error message\";\n```\n\n----------------------------------------\n\nTITLE: Error Handling Implementation\nDESCRIPTION: Custom error type implementation with SurrealDB error conversion and Axum response integration\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nmod error {\n    use axum::http::StatusCode;\n    use axum::response::IntoResponse;\n    use axum::response::Response;\n    use axum::Json;\n    use thiserror::Error;\n\n    #[derive(Error, Debug)]\n    pub enum Error {\n        #[error(\"database error\")]\n        Db,\n    }\n\n    impl IntoResponse for Error {\n        fn into_response(self) -> Response {\n            (StatusCode::INTERNAL_SERVER_DATABASE, Json(self.to_string())).into_response()\n        }\n    }\n\n    impl From<surrealdb::Error> for Error {\n        fn from(error: surrealdb::Error) -> Self {\n            eprintln!(\"{error}\");\n            Self::Db\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Casting to Sets for Deduplication in SurrealQL\nDESCRIPTION: This example demonstrates how casting to a set can be used as a convenient way to deduplicate items in an array, similar to using the array::distinct() function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/sets.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nLET $array = [1,1,3,4,4,4,4,4,4];\n\nRETURN [\n    $array.distinct(),\n    <set>$array\n];\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\\n\\t[\\n\\t\\t1,\\n\\t\\t3,\\n\\t\\t4\\n\\t],\\n\\t[\\n\\t\\t1,\\n\\t\\t3,\\n\\t\\t4\\n\\t]\\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Variables in SurrealDB (JSON)\nDESCRIPTION: This WebSocket-only example shows how to store a variable on the current connection. These variables can be referenced in queries with a $ prefix during the connection lifetime.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"let\",\n    \"params\": [ \"website\", \"https://surrealdb.com/\" ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Transaction in SurrealDB\nDESCRIPTION: This snippet shows the syntax for cancelling a transaction in SurrealDB using the CANCEL statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/transactions.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nCANCEL [ TRANSACTION ];\n```\n\n----------------------------------------\n\nTITLE: Implementing Upsert Operation in PHP\nDESCRIPTION: Demonstrates a practical example of using the upsert method to create or update a user record. The example shows how to create a RecordId instance and use it with the upsert method to add user data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/upsert.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$id = new RecordId('users', 'tobie');\n\n// Upsert a record to the \"users\" collection.\n$response = $db->upsert($id, [\n\t'firstname' => 'Tobie',\n\t'lastname' => 'Hitchcock',\n]);\n```\n\n----------------------------------------\n\nTITLE: Working with Floating Point Numbers in SurrealDB\nDESCRIPTION: This snippet shows how to create a record with a floating point value. Numbers with decimal points or outside the integer range are automatically parsed as 64-bit floating point values.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/numbers.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE event SET temperature = 41.5;\n```\n\n----------------------------------------\n\nTITLE: LIMIT with Arrays in SurrealQL\nDESCRIPTION: Example showing how the LIMIT clause can be used with arrays, including using the START parameter to begin at a specific array index.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/limit.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Select the first 5 records from the array\nSELECT * FROM [1,2,3,4,5,6,7,8,9,10] LIMIT 5 START 4;\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB via Websocket in Golang\nDESCRIPTION: Demonstrates how to establish a connection to SurrealDB using Websocket protocol. Includes examples for both secure and non-secure connections.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/connection-engines.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb, err := surrealdb.New(\"ws://localhost:8000\")\n```\n\nLANGUAGE: go\nCODE:\n```\ndb, err := surrealdb.New(\"wss://localhost:8000\")\n```\n\n----------------------------------------\n\nTITLE: Modifying Table Permissions Example\nDESCRIPTION: Example demonstrating how to modify table permissions using the ALTER statement, showing that only the items to be altered need to be included.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/alter.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Will show up as DEFINE TABLE user TYPE ANY SCHEMAFULL PERMISSIONS NONE\nDEFINE TABLE user SCHEMAFULL;\n\n-- Now defined as DEFINE TABLE user TYPE ANY SCHEMAFULL PERMISSIONS FULL\nALTER TABLE user PERMISSIONS FOR create FULL;\n```\n\n----------------------------------------\n\nTITLE: Executing Raw Computation with ML Model in SurrealQL\nDESCRIPTION: Demonstrates a basic raw computation using a trained machine learning model called 'house-price-prediction' with version '0.0.1'. The function takes two numeric inputs as a vector.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/ml/functions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nml::house-price-prediction<0.0.1>(500.0, 1.0);\n```\n\n----------------------------------------\n\nTITLE: Patching Records in SurrealDB using JavaScript\nDESCRIPTION: Applies JSON Patch changes to all records in a table or a specific record in SurrealDB. This method allows for fine-grained updates.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.patch<T,U>(thing,data)\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Access Control in SurrealDB\nDESCRIPTION: This snippet demonstrates how to configure network access control in SurrealDB. It shows examples of denying access to localhost and private IPv4 ranges, allowing access to specific ports, and allowing access to some private networks while denying others.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/capabilities.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n// Deny network access to localhost and private IPv4 ranges\n$ surreal start --allow-net --deny-net \"127.0.0.1\",\"localhost\",\"10.0.0.0/8\",\"192.168.0.0/16\",\"172.16.0.0/12\"\n\n// Allow access to an internal system but only to port 443\n$ surreal start --allow-net internal.example.com:433\n\n// Allow access to some private networks but not to others\n$ surreal start --allow-net 10.0.0.0/16 --deny-net 10.10.0.0/24\n```\n\n----------------------------------------\n\nTITLE: Switching Namespace and Database in SurrealDB JavaScript SDK\nDESCRIPTION: This example demonstrates how to switch to a specific namespace and database using the .use() method in the SurrealDB JavaScript SDK. This is useful for changing the database context after establishing a connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/create-a-new-connection.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.use({ namespace: 'surrealdb', database: 'docs' });\n```\n\n----------------------------------------\n\nTITLE: SignIn Method Syntax in .NET SDK for SurrealDB\nDESCRIPTION: Basic syntax for the SignIn method in the .NET SDK for SurrealDB. The method requires credentials for authentication and supports an optional cancellationToken parameter for graceful cancellation of asynchronous operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/signin.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.SignIn(credentials)\n```\n\n----------------------------------------\n\nTITLE: SurrealQL Query Response with Multiple Statements\nDESCRIPTION: The response from executing multiple SQL statements in a single query. Each statement's result includes status, execution time, and the actual result data. This enables batch operations while maintaining detailed execution information.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"result\": [\n      {\n          \"status\": \"OK\",\n          \"time\": \"152.5µs\",\n          \"result\": [\n              {\n                  \"id\": \"person:8s0j0bbm3ngrd5c9bx53\",\n                  \"name\": \"John\"\n              }\n          ]\n      },\n      {\n          \"status\": \"OK\",\n          \"time\": \"32.375µs\",\n          \"result\": [\n              {\n                  \"id\": \"person:8s0j0bbm3ngrd5c9bx53\",\n                  \"name\": \"John\"\n              }\n          ]\n      }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using string::similarity::jaro_winkler Function in SurrealQL\nDESCRIPTION: Examples demonstrating the use of string::similarity::jaro_winkler function to compare string similarities with Jaro-Winkler similarity scores.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_40\n\nLANGUAGE: surql\nCODE:\n```\nLET $first     = \"In a hole in the ground there lived a hobbit\";\nLET $same      = \"In a hole in the ground there lived a hobbit\";\nLET $close     = \"In a hole in the GROUND there lived a Hobbit\";\nLET $different = \"A narrow passage holds four hidden treasures\";\nLET $short     = \"Hi I'm Brian\";\n\n-- Returns 0\nstring::similarity::jaro_winkler($first, $same);\n-- Returns 0.8931203931203932f\nstring::similarity::jaro_winkler($first, $close);\n-- Returns 0.6266233766233765f\nstring::similarity::jaro_winkler($first, $different);\n-- Returns 0.4379509379509379f\nstring::similarity::jaro_winkler($first, $short);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information with Info Method in SurrealDB Golang SDK\nDESCRIPTION: Example of how to use the Info method to retrieve the current authenticated user's record. The method returns the user data typed as the generic type parameter T (User in this example).\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/info.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar currentUser = db.Info<User>();\n```\n\n----------------------------------------\n\nTITLE: GROUP BY Clause Syntax in SurrealQL\nDESCRIPTION: The formal syntax definition for the GROUP BY clause in SurrealQL. The clause accepts one or more fields to group by, represented by @fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/group_by.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nGROUP BY @fields\n```\n\n----------------------------------------\n\nTITLE: Insert Method TypeScript Signature\nDESCRIPTION: TypeScript method signature for the SurrealDB insert operation that takes a table/RecordId and data as arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/insert.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.insert<T,U>(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Server with Basic Authentication\nDESCRIPTION: Example of starting a SurrealDB server in memory with username and password authentication, listening on the default address 127.0.0.1:8000.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start memory --user my_username --pass my_password\n```\n\n----------------------------------------\n\nTITLE: Using array::range Function in SurrealQL\nDESCRIPTION: The array::range function creates an array of consecutive numbers starting from a given value and containing a specified count of elements.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_38\n\nLANGUAGE: surql\nCODE:\n```\narray::range(start: int, count: int) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::range(1, 10);\n\n[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::range(3, 2);\n\n[ 3, 4 ]\n```\n\n----------------------------------------\n\nTITLE: Graph Querying with Field Selection\nDESCRIPTION: Advanced graph querying techniques showing different approaches to field selection and result structuring.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_41\n\nLANGUAGE: surql\nCODE:\n```\nSELECT\n    id,\n    ->contains->state.id,\n    ->contains->state.population,\n    ->contains->state->contains->city.id\nFROM country:usa;\n```\n\n----------------------------------------\n\nTITLE: Initializing SurrealDB PHP Connection Methods\nDESCRIPTION: Core methods for establishing and managing database connections, including connect, close, use, let, and unset operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$db->connect($url, $options)\n$db->close()\n$db->use($options)\n$db->let($key,$val)\n$db->unset($key)\n```\n\n----------------------------------------\n\nTITLE: LIVE SELECT with FETCH Clause\nDESCRIPTION: Example showing how to use the FETCH clause within a live query to retrieve related data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/live.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nLIVE SELECT * FROM person WHERE age > 18 FETCH friends;\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance Between Two Points in SurrealQL\nDESCRIPTION: The geo::distance function calculates the haversine distance in meters between two geolocation points. This example calculates the distance between London and Harare.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/geo.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nlet $london = (-0.04592553673505285, 51.555282574465764);\nlet $harare = (30.463880214538577, -17.865161568822085);\nRETURN geo::distance($london, $harare);\n```\n\n----------------------------------------\n\nTITLE: Performing Mathematical Calculations in SurrealQL\nDESCRIPTION: Examples of using various mathematical functions in SurrealQL, including statistical operations, interpolation, and logarithmic calculations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_17\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::interquartile([ 1, 40, 60, 10, 2, 901 ]);\n\n51\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::lerp(0, 10, 0.5);\n\n5\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::lerpangle(0, 180, 0.5);\n\n90\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::ln(10);\n\n2.302585092994046\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::log(100, 10);\n\n2\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::log10(1000);\n\n3\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::log2(8);\n\n3\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::max([ 26.164, 13.746189, 23, 16.4, 41.42 ]);\n\n41.42\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::mean([ 26.164, 13.746189, 23, 16.4, 41.42 ]);\n\n24.1460378\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::median([ 26.164, 13.746189, 23, 16.4, 41.42 ]);\n\n23\n```\n\n----------------------------------------\n\nTITLE: Database Initialization Function\nDESCRIPTION: Async function to initialize database connection, authentication, and schema definitions\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nasync fn init() -> Result<(), surrealdb::Error> {\n    DB.connect::<Ws>(\"localhost:8000\").await?;\n\n    DB.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    DB.use_ns(\"namespace\").use_db(\"database\").await?;\n\n    DB.query(\n        \"    DEFINE TABLE person SCHEMALESS\n        PERMISSIONS FOR \n            CREATE, SELECT WHERE $auth,\n            FOR UPDATE, DELETE WHERE created_by = $auth;\n    DEFINE FIELD name ON TABLE person TYPE string;\n    DEFINE FIELD created_by ON TABLE person VALUE $auth READONLY;\n\n    DEFINE INDEX unique_name ON TABLE user FIELDS name UNIQUE;\n    DEFINE ACCESS account ON DATABASE TYPE RECORD\n\tSIGNUP ( CREATE user SET name = $name, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE name = $name AND crypto::argon2::compare(pass, $pass) )\n\tDURATION FOR TOKEN 15m, FOR SESSION 12h\n;\",\n    )\n    .await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking Functions in SurrealDB\nDESCRIPTION: Collection of type checking functions that validate the data type of input values. Each function returns a boolean indicating whether the input matches the specified type.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_20\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::is::array([ 'a', 'b', 'c' ]);\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::is::bool(true);\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::is::datetime(time::now());\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::is::decimal(<decimal> 13.5719384719384719385639856394139476937756394756);\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::is::float(<float> 41.5);\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::is::geometry((-0.118092, 51.509865));\n```\n\n----------------------------------------\n\nTITLE: Authentication Methods for SurrealDB in Golang\nDESCRIPTION: Methods for handling user authentication, session management, and token validation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\ndb.SignUp(credentials)\ndb.SignIn(credentials)\ndb.Invalidate()\ndb.Authenticate(token)\ndb.Info[T]()\n```\n\n----------------------------------------\n\nTITLE: Array Boolean AND Operation in SurrealQL\nDESCRIPTION: Function that performs logical AND operations on array elements based on truthiness. Takes two arrays as input and returns a boolean array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\narray::boolean_and(lh: array, rh: array)\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::boolean_and([\"true\", \"false\", 1, 1], [\"true\", \"true\", 0, \"true\"]);\n```\n\n----------------------------------------\n\nTITLE: Deploying SurrealDB with Helm\nDESCRIPTION: Commands to deploy SurrealDB using Helm chart with TiKV configuration and authentication settings.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/google.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add surrealdb https://helm.surrealdb.com\n$ helm repo update\n$ helm install \\\n    --set surrealdb.path=$TIKV_URL \\\n    --set surrealdb.auth=false \\\n    --set ingress.enabled=true \\\n    --set image.tag=latest \\\n    surrealdb-tikv surrealdb/surrealdb\n```\n\n----------------------------------------\n\nTITLE: Closing SurrealDB Connection with Python SDK\nDESCRIPTION: The close() method is used to close the persistent connection to the SurrealDB database. It can be used in both synchronous and asynchronous contexts. After closing the connection, you can re-establish it using the connect() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/close.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.close()\n```\n\nLANGUAGE: python\nCODE:\n```\nawait db.close()\n```\n\n----------------------------------------\n\nTITLE: Inserting Record with RETURN DIFF in SurrealQL\nDESCRIPTION: This snippet demonstrates how to insert a record and return the changeset diff using the RETURN DIFF clause.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/insert.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO company {\n\tname: 'SurrealDB',\n\tfounded: \"2021-09-10\",\n\tfounders: [person:tobie, person:jaime],\n\ttags: ['big data', 'database']\n} RETURN DIFF;\n```\n\n----------------------------------------\n\nTITLE: Defining Record Access with Symmetric JWT in SurrealDB\nDESCRIPTION: This snippet shows how to define a record access method using a symmetric algorithm (HS512) with a shared secret key. The issuer is implicitly defined when using a symmetric algorithm.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/record.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS token_name ON DATABASE TYPE RECORD WITH JWT\n-- Symmetric algorithm with a symmetric key\n-- The same key is used to sign and verify\nALGORITHM HS512 KEY \"secret\";\n-- The following clause is implicit:\n-- WITH ISSUER ALGORITHM HS512 KEY \"secret\"\n```\n\n----------------------------------------\n\nTITLE: Accessing SurrealQL Variables with value() Function\nDESCRIPTION: Demonstrates how to retrieve SurrealQL variable values from within JavaScript functions using the value() method. The example shows accessing simple variables, nested properties, and filtering array values.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/script/built-in-functions.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nLET $something = 123;\nLET $obj = {\n\tnested: 456\n};\n\nLET $arr = [\n\t{ value: 1 },\n\t{ value: 2 },\n\t{ value: 3 },\n\t{ value: 4 },\n\t{ value: 5 },\n\t{ value: 6 },\n];\n\nRETURN function() {\n\t// Get the value for a variable\n\tconst something = await surrealdb.value(\"$something\");\n\n\t// Get the value for a nested property\n\tconst nested = await surrealdb.value(\"$obj.nested\");\n\n\t// Filter properties from an array\n\tconst fromArray = await surrealdb.value(\"$arr[WHERE value > 3].value\");\n\n\treturn { something, nested, fromArray };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-Time Anomaly Detection with Custom Events in SurrealQL\nDESCRIPTION: This code snippet demonstrates how to create a custom event trigger in SurrealDB for real-time anomaly detection on sensor readings. It calculates outlier thresholds and sends HTTP POST requests when anomalies are detected.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/time-series.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\n-- Trigger the event on when a record is created\nDEFINE EVENT sensor_anomaly_notification ON sensor_readings WHEN $event = 'CREATE'\nTHEN {\n    -- Get the desired time range you want to track\n    -- here we're grabing just the past hour\n    LET $temp_past_hour = (\n            SELECT VALUE id[3] FROM sensor_readings:[\n                time::now() - 1h,\n                ]..=[\n                time::now()\n            ]);\n    -- Calculate both the upper and lower threshold for an outlier\n    -- using the standard Q1 - 1.5 * IQR formula for the low outliers\n    LET $low_outliers = (\n        RETURN math::percentile($temp_past_hour, 25) - 1.5 * math::interquartile($temp_past_hour)\n    );\n    -- Q3 + 1.5 * IQR formula for the high outliers\n    LET $high_outliers = (\n        RETURN math::percentile($temp_past_hour, 75) + 1.5 * math::interquartile($temp_past_hour)\n    );\n    \n    -- If a low outlier is found send a http post request\n    -- with the outlier details\n    IF $after.id[3] < $low_outliers {\n        http::post('https://dummyjson.com/comments/1', {\n            id: rand::ulid(),\n            outlier: $after.id,\n            message: 'Outlier Detected: low temperature'\n        });\n    };\n\n    -- If a high outlier is found send a http post request\n    -- with the outlier details\n    IF $after.id[3] > $high_outliers {\n        http::post('https://dummyjson.com/comments/1', {\n            id: rand::ulid(),\n            outlier: $after.id,\n            message: 'Outlier Detected: high temperature'\n        });\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Invalidate Method Syntax in SurrealDB .NET SDK\nDESCRIPTION: Shows the basic method signature for invalidating authentication in a SurrealDB connection. The method is asynchronous and returns a Task.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/invalidate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Invalidate()\n```\n\n----------------------------------------\n\nTITLE: Using time::ceil Function in SurrealQL\nDESCRIPTION: This snippet demonstrates the usage of the time::ceil function to round a datetime up to the next largest duration. It shows examples with different time intervals.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nLET $now = d'2024-08-30T02:22:50.231631Z';\n\nRETURN [\n  time::ceil($now, 1h),\n  time::ceil($now, 1w)\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Pre-Established Relationships\nDESCRIPTION: Creates house records after relationships have been established, demonstrating how the has_road_access field evaluates differently based on existing paths.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_23\n\nLANGUAGE: surql\nCODE:\n```\nCREATE house:[218, \"Dalhurst Way\"] SET floors = 2, bedrooms = 5;\nCREATE house:[0, \"Middle of nowhere\"] SET floors = 4, bedrooms = 12;\n```\n\n----------------------------------------\n\nTITLE: Parsing Email Username in SurrealQL\nDESCRIPTION: This function parses and returns an email username from a valid email address. It extracts the part before the @ symbol.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/parse.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nparse::email::user(string) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN parse::email::user(\"info@surrealdb.com\");\n\n\"info\"\n```\n\n----------------------------------------\n\nTITLE: Translating Update Patch to SurrealQL\nDESCRIPTION: Shows the equivalent SurrealQL query for the update().patch() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/update.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $resource PATCH $data;\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Ranges in SurrealQL\nDESCRIPTION: Demonstrates the syntax for creating ranges with different inclusivity/exclusivity options for the lower and upper bounds.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ranges.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\n-- From 0 up to 9\n0..10;\n-- From 0 up to 10\n0..=10;\n-- From 1 to 9\n0>..10;\n-- From 1 to 10\n0>..=10;\n```\n\n----------------------------------------\n\nTITLE: Generating Random Float Values with rand::float() in SurrealQL\nDESCRIPTION: The rand::float() function generates a random floating point number. Without parameters, it returns a value between 0 and 1. With two parameters, it returns a value within the specified range.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/rand.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nrand::float() -> float\n```\n\nLANGUAGE: surql\nCODE:\n```\nrand::float(number, number) -> float\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::float();\n\n0.7812733136200293\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::float(10, 15);\n\n11.305355983514927\n```\n\n----------------------------------------\n\nTITLE: Executing Model Prediction with SurrealQL\nDESCRIPTION: A SurrealQL function call to execute a house price prediction model with specific input parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/index.mdx#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nml::house-price-prediction<0.0.1>({\n\tsquarefoot: 500.0,\n\tnum_floors: 2.0\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Polygon Geometry in SurrealQL\nDESCRIPTION: This snippet shows how to update a record with a Polygon geometry for defining a boundary area. The polygon requires a type property and coordinates array with nested arrays representing the outer ring and any holes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/geometries.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE city:london SET boundary = {\n\ttype: \"Polygon\",\n\tcoordinates: [[\n\t\t[-0.38314819, 51.37692386], [0.1785278, 51.37692386],\n\t\t[0.1785278, 51.61460570], [-0.38314819, 51.61460570],\n\t\t[-0.38314819, 51.37692386]\n\t]]\n};\n```\n\n----------------------------------------\n\nTITLE: Validating Alphanumeric Strings in SurrealQL\nDESCRIPTION: The string::is::alphanum function checks if a string contains only alphanumeric characters. It takes a string input and returns a boolean.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::alphanum(\"ABC123\");\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Query\nDESCRIPTION: The underlying SurrealQL query that gets executed when using the insert() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/insert.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO $thing $data;\n```\n\n----------------------------------------\n\nTITLE: Using object::values() in SurrealQL\nDESCRIPTION: The object::values function returns an array with all the values of an object. Available since v1.1.0.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/object.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nobject::values(object) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN object::values({\n  a: 1,\n  b: true\n});\n\n[ 1, true ]\n```\n\n----------------------------------------\n\nTITLE: Converting Objects to Arrays with Dot-Star in SurrealQL\nDESCRIPTION: Shows how applying dot-star to an object turns it into an array of values, and demonstrates the result when using this in a SELECT statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\n-- Turns the object into an array, returning\n-- [ person:tobie, 'tobie' ]\n{ id: person:tobie, name: 'tobie' }.*;\n-- Thus equivalent to SELECT * FROM [ person:tobie, 'tobie' ]\nSELECT * FROM { id: person:tobie, name: 'tobie' }.*;\n```\n\n----------------------------------------\n\nTITLE: Authenticating Database User in SurrealDB Python SDK\nDESCRIPTION: This snippet illustrates how to authenticate a database user. It requires a namespace, database, username, and password.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/signin.mdx#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait db.signin({\n\t\"namespace\": 'surrealdb',\n\t\"database\": 'docs',\n\t\"username\": 'tobie',\n\t\"password\": 'surrealdb'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Article with Related Records in SurrealQL\nDESCRIPTION: Creates an article record with relationships to author and category, demonstrating subqueries and record relationships.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/start.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE article SET\n\tcreated_at = time::now(),\n\tauthor = person:john,\n\ttitle = 'Lorem ipsum dolor',\n\ttext = 'Donec eleifend, nunc vitae commodo accumsan, mauris est fringilla.',\n\tcategory = (SELECT VALUE id FROM ONLY category WHERE name = 'Technology' LIMIT 1);\n```\n\n----------------------------------------\n\nTITLE: SurrealDB .NET SignUp Method Syntax\nDESCRIPTION: Basic method signature for signing up to a specific authentication scope or access method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/signup.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.SignUp(credentials)\n```\n\n----------------------------------------\n\nTITLE: Output of Enhanced Analyzer with Punct Tokenizer\nDESCRIPTION: The result of analyzing text with the improved blank_edgengram analyzer that properly handles punctuation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_19\n\nLANGUAGE: surql\nCODE:\n```\n['The', 'Whe', 'Whee', 'Wheel', 'Tim', 'Time', 'tur', 'turn', 'turns', 'and', 'Age', 'Ages', 'com', 'come', 'and', 'pas', 'pass', 'lea', 'leav', 'leavi', 'leavin', 'leaving', 'mem', 'memo', 'memor', 'memori', 'memorie', 'memories', 'tha', 'that', 'bec', 'beco', 'becom', 'become', 'leg', 'lege', 'legen', 'legend']\n```\n\n----------------------------------------\n\nTITLE: Checking String Type in SurrealQL\nDESCRIPTION: The type::is::string function checks if the passed value is of type string.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_22\n\nLANGUAGE: surql\nCODE:\n```\ntype::is::string(any) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::is::string(\"abc\");\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: Creating Relationships Between Records with SurrealDB Golang SDK\nDESCRIPTION: A complete example demonstrating how to create a relationship between records in SurrealDB using the Golang SDK. The example shows connecting to the database, creating a relationship structure, and using the Relate function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/relate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/surrealdb/surrealdb.go\"\n\t\"github.com/surrealdb/surrealdb.go/pkg/models\"\n)\n\nfunc main() {\n\t// Assuming db is an instance of your database connection.\n\tdb, err := surrealdb.New(\"ws://localhost:8000/rpc\")\n\tif err != nil {\n\t\tfmt.Println(\"Error connecting to DB:\", err)\n\t\treturn\n\t}\n\n\t// Create a new relationship.\n\trelationship := &surrealdb.Relationship{\n\t\tIn:       models.RecordID{Table: \"user\", ID: \"john\"},\n\t\tOut:      models.RecordID{Table: \"post\", ID: \"123\"},\n\t\tRelation: \"wrote\",\n\t\tData: map[string]interface{}{\n\t\t\t\"created_at\": time.Now(),\n\t\t\t\"pages\":      14,\n\t\t},\n\t}\n\n\t// Use the Relate function from the surrealdb package.\n\terr = surrealdb.Relate(db, relationship)\n\tif err != nil {\n\t\tfmt.Println(\"Error creating relation:\", err)\n\t\treturn\n\t}\n\n\tfmt.Printf(\"Created relation with ID: %v\\n\", relationship.ID)\n}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using time::group Function in SurrealQL\nDESCRIPTION: The time::group function reduces and rounds a datetime down to a particular time interval. It takes a datetime and a string interval parameter (year, month, day, hour, minute, second).\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\ntime::group(datetime, string) -> datetime\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::group(d\"2021-11-01T08:30:17+00:00\", \"year\");\n\nd\"2021-01-01T00:00:00Z\"\n```\n\n----------------------------------------\n\nTITLE: Basic Method Chaining in SurrealDB\nDESCRIPTION: Demonstrates the difference between traditional function syntax and method chaining syntax for array manipulation in SurrealDB. The example shows how to push a new element to an array using both approaches.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_55\n\nLANGUAGE: surql\nCODE:\n```\n-- Traditional syntax\narray::push([\"Again\", \"again\"], \"again\");\n\n-- Method chaining syntax\n[\"Again\", \"again\"].push(\"again\");\n```\n\n----------------------------------------\n\nTITLE: Response from Basic Method Chaining Example\nDESCRIPTION: Shows the response returned after executing the array push operation in either traditional or method chaining syntax.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_56\n\nLANGUAGE: surql\nCODE:\n```\n[\"Again\", \"again\", \"again\"]\n```\n\n----------------------------------------\n\nTITLE: Example Response for 'use' Method in SurrealDB RPC Protocol\nDESCRIPTION: Shows the response format after setting the namespace and database. A null result indicates successful execution.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SurMlFile Object with Model Metadata\nDESCRIPTION: Python code showing how to create a SurMlFile object with the trained model, specify a name, inputs, and the engine type, and add a version.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfile = SurMlFile(\n\tmodel=model,\n\tname=\"house-price-prediction\",\n\tinputs=HOUSE_LINEAR[\"inputs\"],\n\tengine=Engine.SKLEARN\n)\n\nfile.add_version(version=\"0.0.1\")\n```\n\n----------------------------------------\n\nTITLE: Adding Record Data in SurrealQL\nDESCRIPTION: Shows how to add data to a record using the SET clause or the CONTENT clause when creating a new record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/create.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Create a new record with a text id\nCREATE person:tobie SET\n    name = 'Tobie',\n    company = 'SurrealDB',\n    skills = ['Rust', 'Go', 'JavaScript'];\n```\n\nLANGUAGE: surql\nCODE:\n```\n-- Create a new record with a numeric id\nCREATE person:100 CONTENT {\n\tname: 'Tobie',\n\tcompany: 'SurrealDB',\n\tskills: ['Rust', 'Go', 'JavaScript'],\n};\n```\n\n----------------------------------------\n\nTITLE: Output of NGram Filter Analysis\nDESCRIPTION: The result of analyzing 'cars!' with the ngram filter, showing all possible substrings from 1 to 4 characters generated by moving through the string character by character.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_21\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t'c', 'ca', 'car', 'cars',\n\t'a', 'ar', 'ars', 'ars!',\n\t'r', 'rs', 'rs!',\n\t's', 's!',\n\t'!'\n]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of .Import() Method in .NET SDK for SurrealDB\nDESCRIPTION: This example shows how to use the Import method to define tables, create records, and define a function in SurrealDB. The input string contains SurrealQL commands to create schemaless tables 'foo' and 'bar', insert records, and define a function 'fn::foo()'.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/import.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nstring input = \n        \"\"\"\n        DEFINE TABLE foo SCHEMALESS;\n        DEFINE TABLE bar SCHEMALESS;\n        CREATE foo:1 CONTENT { hello: \"world\" };\n        CREATE bar:1 CONTENT { hello: \"world\" };\n        DEFINE FUNCTION fn::foo() {\n            RETURN \"bar\";\n        };\n        \"\"\";\n\nawait db.Import(input);\n```\n\n----------------------------------------\n\nTITLE: Implementing External Authentication Provider Access in SurrealQL\nDESCRIPTION: Demonstrates how to define database access with JWT authentication and handle external provider authentication using email verification. The code checks for existing user authentication or falls back to email-based user lookup.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/record.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS user ON DATABASE TYPE RECORD\n    WITH JWT ALGORITHM HS512 KEY 'secret'\n    AUTHENTICATE {\n        IF $auth.id {\n            RETURN $auth.id;\n        } ELSE IF $token.email {\n            RETURN SELECT * FROM user WHERE email = $token.email;\n        };\n    }\n;\n```\n\n----------------------------------------\n\nTITLE: Closing SurrealDB Connection in Java\nDESCRIPTION: Shows two methods for closing a SurrealDB connection: manually calling the close() method and using a try-with-resources block. Proper connection closure is important for freeing up resources.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/core/create-a-new-connection.mdx#2025-04-16_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Close the connection manually\ndriver.close();\n\n// Using try-with-resources\ntry (Surreal driver = new Surreal()) {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using time::unix Function in SurrealQL\nDESCRIPTION: The time::unix function returns a datetime as an integer representing the number of seconds since the UNIX epoch until a certain datetime, or from the current date if no datetime argument is present.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_18\n\nLANGUAGE: surql\nCODE:\n```\ntime::unix(option<datetime>) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::unix(d\"2021-11-01T08:30:17+00:00\");\n\n1635755417\n```\n\n----------------------------------------\n\nTITLE: Defining a Book Model Class for SurrealDB\nDESCRIPTION: Creates a POJO class representing book records in the database. Includes fields for id, title, author, publication date, and availability status. Provides a default constructor and a parameterized constructor.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/start.mdx#2025-04-16_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage me.yourname.surrealdb;\n\nimport com.surrealdb.RecordId;\n\nimport java.time.ZonedDateTime;\n\npublic class Book {\n    public RecordId id;\n    public String title;\n    public String author;\n    public ZonedDateTime publishedAt;\n    public boolean available;\n\n    //  A default constructor is required\n    public Book() {\n    }\n\n    public Book(String title, String author, ZonedDateTime publishedAt, boolean available) {\n        this.title = title;\n        this.author = author;\n        this.publishedAt = publishedAt;\n        this.available = available;\n    }\n\n    @Override\n    public String toString() {\n        return \"Book{\" +\n                \"id=\" + id +\n                \", title='\" + title + '\\'' +\n                \", author='\" + author + '\\'' +\n                \", publishedAt=\" + publishedAt +\n                \", available=\" + available +\n                '}';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Method Syntax for Info<T>() in SurrealDB .NET SDK\nDESCRIPTION: Shows the basic method signature for the Info<T>() method which returns the record of an authenticated scope user. It is an asynchronous method that returns a task of type T.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/info.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Info<T>()\n```\n\n----------------------------------------\n\nTITLE: Using Info Method in SurrealDB PHP SDK\nDESCRIPTION: This example demonstrates how to use the info() method to retrieve information about the authenticated user. The returned user information is stored in the $user variable.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/info.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = $db->info();\n```\n\n----------------------------------------\n\nTITLE: Type Enforcement in SurrealQL Functions\nDESCRIPTION: Examples of functions with type constraints and error handling for type mismatches.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/closures.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n-- Define a function with a return type\n$to_upper = |$text: string| -> string { string::uppercase($text) };\nRETURN $to_upper(\"hello\");  -- Returns \"HELLO\"\nRETURN $to_upper(123);      -- Error: type mismatch\n\n-- Define a function that accepts only numbers\n$square = |$num: number| $num * $num;\nRETURN $square(4);    -- Returns 16\nRETURN $square(\"4\");  -- Error: type mismatch\n```\n\n----------------------------------------\n\nTITLE: Copying Records Between Tables in SurrealQL\nDESCRIPTION: This snippet demonstrates how to copy records from one table to another using the INSERT statement combined with a SELECT query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/insert.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO recordings_san_francisco (SELECT * FROM temperature WHERE city = 'San Francisco');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Rejected Network Access Query in SurrealQL\nDESCRIPTION: Shows how SurrealDB rejects a query attempting to make an unauthorized HTTP request, displaying the error message returned to the user.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/capabilities.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nRETURN http::get(\"https://www.surrealdb.com\");\n\n[\"Access to network target 'www.surrealdb.com:443' is not allowed\"]\n```\n\n----------------------------------------\n\nTITLE: Delete Method Syntax in SurrealDB Golang SDK\nDESCRIPTION: Method signature for the Delete operation in SurrealDB Golang SDK. The method is generic and accepts type parameters T and R.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/delete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Delete[T any, R any](resource)\n```\n\n----------------------------------------\n\nTITLE: Updating Record Links with PreparedQuery in TypeScript\nDESCRIPTION: Shows how to properly format record links in queries using PreparedQuery and StringRecordId, ensuring compatibility with SurrealDB's expected syntax.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/utilities.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst people = [\"person:tobie\", \"person:jamie\"];\n\nconst query = new PreparedQuery(\n  /* surql */`UPDATE person:john SET $content`,\n  { content: { friends: people.map(p => new StringRecordId(p)) } }\n);\n```\n\n----------------------------------------\n\nTITLE: Signing In with SurrealDB Golang SDK\nDESCRIPTION: This method signs in to a root, namespace, database or scope user. It takes a credentials argument of type surrealdb.Auth and returns a token and an error.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/signin.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nawait db.SignIn(credentials)\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP DELETE Function with Headers in SurrealQL\nDESCRIPTION: API definition for the http::delete function that accepts a string URL and an object for custom headers, returning a value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/http.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nhttp::delete(string, object) -> value\n```\n\n----------------------------------------\n\nTITLE: Creating Open-Ended Ranges in SurrealQL\nDESCRIPTION: Shows how to create open-ended ranges by omitting one of the delimiters, including an infinite range.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ranges.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Anything from 0 and up\n0..;\n-- Anything from 1 and up\n0>..;\n-- Anything up to 99\n..100;\n-- Anything up to 100\n..=100;\n-- An infinite range\n..;\n```\n\n----------------------------------------\n\nTITLE: Model Execution in SurrealDB\nDESCRIPTION: Demonstrates how to execute a model within SurrealDB using SQL syntax with named parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/computation.mdx#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nml::house-price-prediction<0.0.1>({\n\tsquarefoot: squarefoot_col,\n\tnum_floors: num_floors_col\n})\n```\n\n----------------------------------------\n\nTITLE: User Signin in SurrealDB JavaScript SDK\nDESCRIPTION: Signs in an existing user to a specific authentication scope in SurrealDB. This method is used for user authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.signin(vars)\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP PATCH Function in SurrealQL\nDESCRIPTION: API definition for the http::patch() function which performs remote HTTP PATCH requests with a JSON body. It accepts a URL string, request body object, and optional headers object, returning the response value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/http.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nhttp::patch(string, object) -> value\n```\n\nLANGUAGE: surql\nCODE:\n```\nhttp::patch(string, object, object) -> value\n```\n\n----------------------------------------\n\nTITLE: Starting a single-node TiKV development cluster\nDESCRIPTION: This command starts a simple single-node TiKV development cluster using tiup.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/tikv.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntiup playground --tag surrealdb --mode tikv-slim --pd 1 --kv 1\n```\n\n----------------------------------------\n\nTITLE: Creating Person Relationship Data for Graph Clauses in SurrealQL\nDESCRIPTION: Sets up three person records with various relationship attributes (friends, dated, married_to) to demonstrate filtering and selection in graph clauses.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_59\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:one, person:two, person:three;\nRELATE person:one->knows->person:two SET\n\tfriends = true,\n    dated = true,\n    married_to = true;\n\nRELATE person:one->knows->person:three SET\n    dated = true;\n\nRELATE person:two->knows->person:three SET\n\tfriends = true;\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Query for Select Method\nDESCRIPTION: This snippet shows the SurrealQL query that is executed when using the ->select() method. The $thing parameter is replaced with the actual table name or record ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/select.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM $thing;\n```\n\n----------------------------------------\n\nTITLE: Table Information Query\nDESCRIPTION: Example of querying table-specific information including events, fields, and live statement configurations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/info.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nINFO FOR TABLE user;\n```\n\nLANGUAGE: surql\nCODE:\n```\n{\n    events: {},\n    fields: {\n        name: 'DEFINE FIELD name ON user TYPE string PERMISSIONS FULL'\n    },\n    indexes: {},\n    lives: {},\n    tables: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Relation Between Records in C#\nDESCRIPTION: This example demonstrates how to use the Relate method to create a relation between a user and a post. It includes creating a data object and calling the Relate method with specific parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/relate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar data = new WroteRelation { CreatedAt = DateTime.UtcNow, NumberOfPages = 14 };\n\nawait db.Relate<WroteRelation, WroteRelation>(\n    \"wrote\",\n    (\"user\", \"one\"),\n    (\"post\", \"one\"),\n    data\n);\n```\n\n----------------------------------------\n\nTITLE: RecordId Base Class Implementation\nDESCRIPTION: Defines the base RecordId class with Table property and DeserializeId method for type conversion.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/data-types.mdx#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RecordId\n{\n    public string Table { get; }\n\n    public T DeserializeId<T>();\n\n    // ... The rest is omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Typed LET Statements in SurrealQL\nDESCRIPTION: Demonstrates type safety in LET statements including error handling and complex type definitions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/let.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nLET $number: int = \"9\";\n```\n\nLANGUAGE: surql\nCODE:\n```\nLET $vals: array<bool> = some:record.vals;\nLET $len: number = $vals.filter(|$val| $val = true).len();\n$len;\n```\n\nLANGUAGE: surql\nCODE:\n```\n-- Use .map() to turn each string into a bool\nLET $vals: array<bool> = some:record.vals.map(|$val| <bool>$val);\nLET $len: number = $vals.filter(|$val| $val = true).len();\n$len;\n```\n\n----------------------------------------\n\nTITLE: Signing up as a Record User using JavaScript SDK\nDESCRIPTION: Creates a new user account using the record access mechanism. Provides the required name, email, and password variables for the signup process.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/authentication.mdx#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = new Surreal();\ndb.connect('ws://localhost:8000/rpc', {\n\tnamespace: 'test',\n\tdatabase: 'test',\n});\n\ndb.signup({\n\tnamespace: 'test',\n\tdatabase: 'test',\n\n\t// Provide the name of the access method\n\taccess: 'user',\n\n\t// Provide the variables used by the signup query\n\tvariables: {\n    \tname: 'John Doe',\n    \temail: 'john.doe@example.com',\n    \tpassword: 'VerySecurePassword!',\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Terminating Live Queries in SurrealDB with C#\nDESCRIPTION: Kills a running live query identified by its UUID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\ndb.Kill(queryUuid)\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-incrementing IDs in SurrealDB\nDESCRIPTION: This snippet demonstrates how to create auto-incrementing IDs in SurrealDB using the record::id() and type::thing() functions. It creates records from person:1 to person:10 and then adds a new record with the next available ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_31\n\nLANGUAGE: surql\nCODE:\n```\n-- Create records from person:1 to person:10\nCREATE |person:1..10|;\nLET $latest = SELECT VALUE id FROM ONLY person ORDER BY id DESC LIMIT 1;\nCREATE type::thing(\"person\", $latest.id() + 1);\n```\n\n----------------------------------------\n\nTITLE: Defining a Unique Index for Relationships in SurrealQL\nDESCRIPTION: Example of defining a unique index to ensure only unique relationships are created in a graph edge table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE INDEX unique_relationships\n    ON TABLE wrote\n    COLUMNS in, out UNIQUE;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Information in SurrealDB\nDESCRIPTION: Example of the response from SELECT * FROM $token query showing JWT claims in an authenticated session. Includes standard JWT fields like expiration time, issued at time, and SurrealDB-specific claims for namespace, database, and user identification.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/authentication.mdx#2025-04-16_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n{\n\t\"AC\": \"user\",\n\t\"DB\": \"test\",\n\t\"ID\": \"user:example\",\n\t\"NS\": \"test\",\n\t\"exp\": 1723118226,\n\t\"iat\": 1723114626,\n\t\"iss\": \"SurrealDB\",\n\t\"jti\": \"3b3fe74a-955c-46d7-9400-363848912292\",\n\t\"nbf\": 1723114626\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Schemafull Tables with Datetime Fields in SurrealDB\nDESCRIPTION: Sets up a schemafull table with a strictly typed datetime field, then demonstrates an error when attempting to insert a string instead of a datetime value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/datetimes.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE event SCHEMAFULL;\nDEFINE FIELD time ON event TYPE datetime;\n// highlight-next-line\nCREATE event SET time = \"2023-07-03T07:18:52.841147\";\n```\n\n----------------------------------------\n\nTITLE: Using Sets in SurrealDB\nDESCRIPTION: Demonstrates the use of sets, a subtype of arrays with automatic deduplication in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/arrays.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nRETURN <set>[1,1,2];\n\n-- Returns [1,2]\n```\n\n----------------------------------------\n\nTITLE: Inserting Single and Multiple Relations with SurrealDB PHP SDK\nDESCRIPTION: Demonstrates how to use the insertRelation method to insert both a single relation and multiple relations into the database. It uses RecordId objects to specify the related entities.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/insertRelation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Insert a single relation\n$relation = $db->insertRelation('person', [\n\t\"id\" => new RecordId('person', 'tobie'),\n\t\"in\" => new RecordId('company', 'surreal'),\n\t\"out\" => new RecordId('role', 'founder'),\n]);\n\n// Insert multiple relations\n$relations = $db->insertRelation('person', [\n\t[\n\t\t\"id\" => new RecordId('person', 'tobie'),\n\t\t\"in\" => new RecordId('company', 'surreal'),\n\t\t\"out\" => new RecordId('role', 'founder'),\n\t],\n\t[\n\t\t\"id\" => new RecordId('person', 'jaime'),\n\t\t\"in\" => new RecordId('company', 'surreal'),\n\t\t\"out\" => new RecordId('role', 'cofounder'),\n\t],\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Any Value Type in Schema\nDESCRIPTION: Shows how to use the 'any' keyword in a schema definition to allow a field to accept any possible value type.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/values.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD anything ON TABLE person TYPE any;\n```\n\n----------------------------------------\n\nTITLE: Using subscribe_live Method in Python with SurrealDB SDK\nDESCRIPTION: This example demonstrates how to use the 'subscribe_live' method in an asynchronous context. It calls the method with a UUID, presumably of a previously started live query, to subscribe to its notifications.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/subscribelive.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nawait db.subscribe_live(UUID)\n```\n\n----------------------------------------\n\nTITLE: Defining Email Field with Validation in SurrealQL\nDESCRIPTION: Adds an email field to the user table with a built-in validation to ensure the value is a valid email address using the string::is::email() function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD email ON TABLE user TYPE string ASSERT $value.is_email();\n```\n\n----------------------------------------\n\nTITLE: Array Concat Operation in SurrealQL\nDESCRIPTION: Function that merges two arrays together, maintaining duplicate values. Returns a single combined array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\narray::concat(array, array) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::concat([1, 2, 3, 4], [3, 4, 5, 6]);\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Scopes in SurrealDB Python SDK\nDESCRIPTION: This snippet shows how to authenticate using Scopes. It requires a namespace, database, scope, and any additional properties required by the scope definition.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/signin.mdx#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nawait db.signin({\n\t\"namespace\": 'surrealdb',\n\t\"database\": 'docs',\n\t\"scope\": 'user',\n\n\t# Also pass any properties required by the scope definition\n\t\"email\": 'info@surrealdb.com',\n\t\"pass\": '123456'\n})\n```\n\n----------------------------------------\n\nTITLE: Defining User Table with AWS Cognito Authorization in SurrealQL\nDESCRIPTION: This snippet defines a user table with permissions that validate AWS Cognito JWT tokens. It ensures that users can only access their own data by checking token claims including scope, issuer, audience, and email verification status. It also sets up an email index and field definitions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/integrate-aws-cognito-as-authentication-provider.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE user SCHEMAFULL\n  -- Authorized users can select, update, delete and create user records.\n  -- Records that do not match the permissions will not be modified nor returned.\n  PERMISSIONS FOR select, update, delete, create\n  WHERE\n    -- The token scope must match the scope that we defined.\n    -- The name of the scope should match the scope that we defined before.\n    $scope = \"user\"\n    -- The issuer claim must match the URL of your AWS Cognito user pool.\n    AND $token.iss = \"https://cognito-idp.<YOUR_AWS_REGION>.amazonaws.com/<YOUR_COGNITO_USER_POOL_ID>\"\n    -- The audience claim must match you AWS Cognito Client ID.\n    AND $token.aud = \"<YOUR_COGNITO_CLIENT_ID>\"\n    -- The email claim must match the email of the user being queried.\n    AND email = $token.email\n    -- The email must be verified as belonging to the user.\n    AND $token.email_verified = true\n;\n\n-- In this example, we will use the email as the primary identifier for a user.\nDEFINE INDEX email ON user FIELDS email UNIQUE;\nDEFINE FIELD email ON user TYPE string ASSERT string::is::email($value);\n-- We define some other information present in the token that we want to store.\nDEFINE FIELD cognito_username ON user TYPE string;\n```\n\n----------------------------------------\n\nTITLE: Query Response for Advanced Graph Clause\nDESCRIPTION: Shows the response from an advanced graph clause query, including a computed timestamp field and with results limited to a single record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_65\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\t\"->knows\": [\n\t\t\t{\n\t\t\t\tdated: true,\n\t\t\t\tid: knows:2tsz3aomelegp060ii7d,\n\t\t\t\tin: person:one,\n\t\t\t\tout: person:three,\n\t\t\t\tqueried_at: d'2025-01-24T02:16:31.811Z'\n\t\t\t}\n\t\t]\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Killing a Live Query in SurrealDB WebSocket API\nDESCRIPTION: The kill method terminates an active live query by its UUID. This websocket-only method stops the server from sending further notifications for the specified live query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"kill\",\n    \"params\": [ \"0189d6e3-8eac-703a-9a48-d9faa78b44b9\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Parameters with let() Method in SurrealDB Python SDK\nDESCRIPTION: Demonstrates how to assign and use connection parameters using the let() method. The method takes a key and value argument to store data that can be referenced in subsequent queries using the $ prefix.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/parameters.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.let(key, value)\n```\n\n----------------------------------------\n\nTITLE: Encoding HTML Special Characters in SurrealQL\nDESCRIPTION: The string::html::encode function encodes special characters into HTML entities to prevent HTML injection. It takes a string input and returns the encoded string.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::html::encode(\"<h1>Safe Title</h1><script>alert('XSS')</script><p>Safe paragraph. Not safe <span onload='logout()'>event</span>.</p>\");\n\n['&lt;h1&gt;Safe&#32;Title&lt;&#47;h1&gt;&lt;script&gt;alert(&apos;XSS&apos;)&lt;&#47;script&gt;&lt;p&gt;Safe&#32;paragraph.&#32;Not&#32;safe&#32;&lt;span&#32;onload&#61;&apos;logout()&apos;&gt;event&lt;&#47;span&gt;.&lt;&#47;p&gt;']\n```\n\n----------------------------------------\n\nTITLE: Formatting Datetime in SurrealQL\nDESCRIPTION: This example shows how to use the time::format function to output a datetime as a string according to a specific format.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::format(d\"2021-11-01T08:30:17+00:00\", \"%Y-%m-%d\");\n```\n\n----------------------------------------\n\nTITLE: Complex Array Filtering in SurrealQL\nDESCRIPTION: Shows advanced array filtering techniques with nested objects in SurrealQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/arrays.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n[\n    {\n        name: \"Boston\",\n        population: NONE,\n        first_mayor: \"John Phillips\"\n    },\n    {\n        name: \"Smurfville\",\n        population: 55,\n        first_mayor: \"Papa Smurf\"\n    },\n    {\n        name: \"Harrisburg\",\n        population: 50183,\n        first_mayor: NONE\n    }\n][WHERE $this.population]\n [WHERE $this.first_mayor];\n```\n\n----------------------------------------\n\nTITLE: Transaction Error Handling with THROW in SurrealQL\nDESCRIPTION: Shows how to use THROW instead of CANCEL for conditional transaction termination, including balance validation logic.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/cancel.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nBEGIN TRANSACTION;\n\n-- Setup accounts\nCREATE account:one SET balance = 135605.16;\nCREATE account:two SET balance = 200.31;\n\n-- Move money\nUPDATE account:one SET balance += 300.00;\nUPDATE account:two SET balance -= 300.00;\n\nIF account:two.balance < 0 {\n    THROW \"Not enough funds\";\n};\n\nCOMMIT TRANSACTION;\n```\n\n----------------------------------------\n\nTITLE: Wildcard Operator Usage in Graph Queries\nDESCRIPTION: Shows how to use the ? wildcard operator to query all linked records regardless of type.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_32\n\nLANGUAGE: surql\nCODE:\n```\nSELECT \n\t->purchased->(?)\n\t<-purchased<-person\n\t->purchased->(?)\nFROM person:tobie;\n```\n\n----------------------------------------\n\nTITLE: Switching to a Specific Namespace in SurrealQL\nDESCRIPTION: This example demonstrates how to switch to the 'test' namespace using the USE statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/use.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nUSE NS test; -- Switch to the 'test' Namespace\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB SDK with Package Managers\nDESCRIPTION: Commands for installing the SurrealDB SDK using different Node.js package managers including Bun, NPM, Yarn, and Pnpm.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/frameworks/react.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install surrealdb\nnpm install --save surrealdb\nyarn add surrealdb\npnpm install surrealdb\n```\n\n----------------------------------------\n\nTITLE: Using Different RETURN Clauses in SurrealQL DELETE Statement\nDESCRIPTION: Shows various RETURN clauses that can be used with the DELETE statement to specify the data returned for each deleted document.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/delete.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n-- Don't return any result (the default)\nDELETE user WHERE age < 18 RETURN NONE;\n\n-- Return the changeset diff\nDELETE user WHERE interests CONTAINS 'reading' RETURN DIFF;\n\n-- Return the record before changes were applied\nDELETE user WHERE interests CONTAINS 'reading' RETURN BEFORE;\n\n-- Return the record after changes were applied\nDELETE user WHERE interests CONTAINS 'reading' RETURN AFTER;\n```\n\n----------------------------------------\n\nTITLE: Encoding HTML Content in SurrealQL\nDESCRIPTION: Demonstrates how to use string::html::encode function to safely handle user-generated content that will be rendered in HTML, preventing XSS attacks by converting special characters to HTML entities.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::html::encode(\"<h1>Safe Title</h1><script>alert('XSS')</script><p>Safe paragraph. Not safe <span onload='logout()'>event</span>.</p>\");\n\n['&lt;h1&gt;Safe&#32;Title&lt;&#47;h1&gt;&lt;script&gt;alert(&apos;XSS&apos;)&lt;&#47;script&gt;&lt;p&gt;Safe&#32;paragraph.&#32;Not&#32;safe&#32;&lt;span&#32;onload&#61;&apos;logout()&apos;&gt;event&lt;&#47;span&gt;.&lt;&#47;p&gt;']\n```\n\n----------------------------------------\n\nTITLE: Matching Array Elements in SurrealQL\nDESCRIPTION: The array::matches function returns an array of booleans indicating which elements of the input array contain a specified value. It works with arrays of primitive values and objects.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_33\n\nLANGUAGE: surql\nCODE:\n```\narray::matches(array, value) -> array<bool>\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::matches([0, 1, 2], 1);\n\n[false, true, false]\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::matches([{id: r\"ohno:0\"}, {id: r\"ohno:1\"}], {id: r\"ohno:1\"});\n\n[ false, true ]\n```\n\n----------------------------------------\n\nTITLE: Defining a Scope Token with Table Permissions in SurrealQL\nDESCRIPTION: This example shows how to define a scope token using RS256 verification and implement table-level access control. It leverages JWT claims to restrict user access to only their own records based on email matching.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/token.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\n-- Specify the namespace and database for the token\nUSE NS abcum DB app_vitalsense;\n\n-- Necessary in order to define a scope token\nDEFINE SCOPE users;\n\nDEFINE TOKEN token_name ON SCOPE users TYPE RS256 VALUE \"-----BEGIN PUBLIC KEY-----\nMUO52Me9HEB4ZyU+7xmDpnixzA/CUE7kyUuE0b7t38oCh+sQouREqIjLwgHhFdhh3cQAwr6GH07D\nThioYrZL8xATJ3Youyj8C45QnZcGUif5PkpWXDi0HJSoMFekbW6Pr4xuqIqb2LGxGDVJcLZwJ2AS\nGtu2UAfPXbBD3ffiad393M22g1iHM80YaNi+xgswG7qtXE4lR/Lt4s0MeKKX7stdWI1VIsoB+y3i\nr/OWUvJPjjDNbAsyy8tQmxydv+FUnLEP9TNT4AhN4DXcJ+XsDtW7OWt4EdSVDeKpGbIMvIrh1Pe+\nNilj8UHNyNDHa2AjK3seMo6CMvaIQJKj5o4xGFblFGwvvPD03SbuQLs1FdRjsZCeWLdYeQ3JDHE9\nsFG7DCXlpMJcaYT1mf4XHJ0gPekNLQyewTY3Vxf7FgV3GCNjV20kcDFgJA2+iVW2wSrb+txD1ycE\nkbi8jh0pedWwE40VQWaTh/8eAvX7IHWya/AEro25mq+m6vktNZLbvLphhp586kJK3Tdt3YjpkPre\nM3nkFWOWurIyKbtIV9JemfwCgt89sNV45dTlnEDEZFFGnIgDnWgx3CUo4XmhICEQU8+tklw9jJYx\niCTjhbIDEBHySSSc/pQ4ftHQmhToTlQeOdEy4LYiaEIgl1X+hzRH1hBYvWlNKe4EY1nMCKcjgt0=\n-----END PUBLIC KEY-----\";\n\nDEFINE TABLE user SCHEMAFULL\n  -- Authorized users can select, update, delete and create user records\n  PERMISSIONS FOR select, update, delete, create\n  -- The current scope must be \"users\"\n  WHERE $scope = \"users\"\n  -- The email of the user being queried must match the email claim in the token\n  -- Only matching records will be changed or returned\n  AND email = $token.email\n;\n\nDEFINE INDEX email ON user FIELDS email UNIQUE;\nDEFINE FIELD email ON user TYPE string ASSERT string::is::email($value);\nDEFINE FIELD name ON user TYPE string;\nDEFINE FIELD nickname ON user TYPE string;\nDEFINE FIELD picture ON user TYPE string;\n```\n\n----------------------------------------\n\nTITLE: Fetching Remote Records in SurrealQL\nDESCRIPTION: Demonstrates how to fetch properties from linked records using nested field traversal.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/records.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nSELECT friends.name FROM person:tobie;\n[\n\t{\n\t\tfriends: {\n\t\t\tname: [\"Simon\", \"Marcus\"]\n\t\t}\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Numeric IDs in SurrealQL\nDESCRIPTION: Shows different ways to create records with numeric identifiers and demonstrates how string-form numbers are differentiated from actual numbers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nCREATE article SET id = 10;\nCREATE article SET id = \"10\";\nCREATE article SET id = \"article10\";\nSELECT VALUE id FROM article;\n```\n\n----------------------------------------\n\nTITLE: Transposing 2D Arrays in SurrealDB\nDESCRIPTION: The array::transpose function performs 2D array transposition, effectively 'layering' multiple arrays on top of each other. It handles arrays of different sizes by adding NONE for missing values.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_52\n\nLANGUAGE: surql\nCODE:\n```\narray::transpose(array<array>) -> array<array>\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::transpose([[0, 1], [2, 3]]);\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::transpose([\n    ['🟦', '🟥', '🟩'],\n    ['⬜', '🟦', '🟨'],\n    ['🟧', '🟧', '🟥']\n]);\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\n    ['Movie', 'Bad guy'], \n    ['Avengers: Infinity War', 'Thanos'], \n    ['Groundhog Day'],\n    ['Star Wars', 'Palpatine']\n].transpose();\n```\n\n----------------------------------------\n\nTITLE: Starting Unauthenticated Server\nDESCRIPTION: Command to start SurrealDB without authentication, suitable for testing purposes only.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/file.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --unauthenticated rocksdb:mydatabase.db\n```\n\n----------------------------------------\n\nTITLE: Defining Query Method Syntax in TypeScript\nDESCRIPTION: Shows the method signature for the query function in the SurrealDB JavaScript SDK. It takes a query string and optional variables as arguments, with a generic type parameter for the result.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/query.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.query<T>(query, vars)\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Arrays in SurrealDB\nDESCRIPTION: Illustrates how to create arrays with complex nested structures in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/arrays.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person SET results = [\n\t{ score: 76, date: \"2017-06-18T08:00:00Z\", name: \"Algorithmics\" },\n\t{ score: 83, date: \"2018-03-21T08:00:00Z\", name: \"Concurrent Programming\" },\n\t{ score: 69, date: \"2018-09-17T08:00:00Z\", name: \"Advanced Computer Science 101\" },\n\t{ score: 73, date: \"2019-04-20T08:00:00Z\", name: \"Distributed Databases\" },\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Relationship in SurrealQL\nDESCRIPTION: Example of creating a simple relationship between a person and an article using the RELATE statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:aristotle, article:on_sleep_and_sleeplessness;\nRELATE person:aristotle->wrote->article:on_sleep_and_sleeplessness;\n```\n\n----------------------------------------\n\nTITLE: Using IF NOT EXISTS Clause in SurrealQL\nDESCRIPTION: Shows how to define a conditional access method that only creates if it doesn't already exist in the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/record.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS IF NOT EXISTS example ON DATABASE TYPE RECORD;\n```\n\n----------------------------------------\n\nTITLE: Defining the close() Method in SurrealDB JavaScript SDK\nDESCRIPTION: This snippet shows the method syntax for the close() function in the SurrealDB JavaScript SDK. It is used to close the persistent connection to the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/close.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.close()\n```\n\n----------------------------------------\n\nTITLE: Query Execution With Index\nDESCRIPTION: Example showing improved query execution plan when using an index on the email field\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/explain.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE INDEX fast_email ON TABLE person FIELDS email;\n\nCREATE person:tobie SET\n\tname = \"Tobie\",\n\taddress = \"1 Bagshot Row\",\n\temail = \"tobie@surrealdb.com\";\n\nSELECT * FROM person WHERE email='tobie@surrealdb.com' EXPLAIN;\nSELECT * FROM person WHERE email='tobie@surrealdb.com' EXPLAIN FULL;\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Parameters in SurrealDB JavaScript SDK\nDESCRIPTION: Assigns a value as a parameter for the current SurrealDB connection. This method is useful for setting connection-specific variables.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.let(key,val)\n```\n\n----------------------------------------\n\nTITLE: Geometry Types in SurrealDB JavaScript SDK\nDESCRIPTION: Demonstrates the usage of Geometry types including methods for JSON conversion, equality checking, and specific geometry implementations like Point and Line.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/data-types.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst line = new GeometryLine([\n    new GeometryPoint([1, 2]),\n    new GeometryPoint([3, 4]),\n]);\n\nline.toJSON();          // { type: \"LineString\", coordinates: [ [1, 2], [3, 4] ] }\nJSON.stringify(line);   // '{ type: \"LineString\", coordinates: [ [1, 2], [3, 4] ] }'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst point1 = new GeometryPoint([1, 2]);\nconst point2 = new GeometryPoint([3, 4]);\nconst line = new GeometryLine([point1, point2]);\n\npoint1.is(point1);      // true\npoint1.is(point2);      // false\npoint1.is(line);        // false\n\n// Checks the inner values, does not need to be the same instance\nconst duplicate = new GeometryPoint([1, 2]);\npoint1.is(duplicate);   // true\n```\n\n----------------------------------------\n\nTITLE: Chain Function with Closure\nDESCRIPTION: Example of using a closure within the chain function to perform numeric operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/closures.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\n\"Two\"\n    .replace(\"Two\", \"2\")\n    .chain(|$num| <number>$num * 1000);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Time Function Usage in SurrealQL\nDESCRIPTION: This snippet shows examples of using time functions with and without arguments. If no argument is provided, the current datetime is used.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\ntime::hour(d'2024-09-04T00:32:44.107Z');\ntime::hour();\n\ntime::minute(d'2024-09-04T00:32:44.107Z');\ntime::minute();\n\ntime::yday(d'2024-09-04T00:32:44.107Z');\ntime::yday();\n```\n\n----------------------------------------\n\nTITLE: Comparing Password Hashes in SurrealQL\nDESCRIPTION: Uses SurrealQL's built-in crypto function to compare password hashes for verifying user credentials during authentication troubleshooting.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/troubleshooting.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surrealql\nCODE:\n```\ncrypto::argon2::compare\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RETURN in Top-Level Statements in SurrealQL\nDESCRIPTION: This snippet shows how RETURN behaves in top-level statements, breaking execution only within the most top-level statement it is executed in, without preventing subsequent top-level statements from executing.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/return.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nLET $id = 123;\nLET $id = {\n    IF $id {\n        RETURN type::thing('table', $id);\n    };\n\n    RETURN table:rand();\n};\n\n-- This still executes. The `RETURN` statement only broke until the block in the variable assignment.\nCREATE $id;\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Project Dependencies\nDESCRIPTION: Required dependencies for working with SurrealDB in Rust, including serde for serialization and tokio for async runtime.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/flexible-typing.mdx#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nserde = \"1.0.214\"\nserde_json = \"1.0.132\"\nsurrealdb = \"2.0.4\"\ntokio = \"1.41.0\"\n```\n\n----------------------------------------\n\nTITLE: Unset Method Usage Example\nDESCRIPTION: JavaScript example showing how to remove a variable named 'name' from the database connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/unset.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Remove the variable from the connection\nawait db.unset('name');\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Person Relationships for Recursion Testing in SurrealQL\nDESCRIPTION: Creates three person records where each person likes the other two, then demonstrates how the number of results doubles with each recursion level due to the interconnected nature of the graph.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_56\n\nLANGUAGE: surql\nCODE:\n```\nCREATE |person:1..3|;\nFOR $person IN (SELECT * FROM person) {\n  LET $others = (SELECT * FROM person WHERE id != $person.id);\n    FOR $other IN $others {\n        RELATE $person->likes->$other;\n    }\n};\nRETURN [\n\tperson:1.{2}->likes->person,\n\tperson:1.{3}->likes->person,\n\tperson:1.{4}->likes->person\n];\n```\n\n----------------------------------------\n\nTITLE: SurrealQL INFO Statement Syntax\nDESCRIPTION: The base syntax for the INFO statement showing all possible command variations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/info.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nINFO FOR [\n\tROOT\n\t| NS | NAMESPACE\n\t| DB | DATABASE\n\t| TABLE @table\n\t| USER @user [ON @level]\n    | INDEX @index ON @table\n];\n```\n\n----------------------------------------\n\nTITLE: Parameter Usage in SELECT Queries\nDESCRIPTION: Shows how to use parameters as variables in SELECT queries, including subquery results and predefined variables.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\n-- Store the subquery result in a variable and query that result.\nLET $avg_price = (\n\tSELECT math::mean(price) AS avg_price FROM product GROUP ALL\n).avg_price;\n\n-- Find the name of the product where the price is higher than the avg price\nSELECT name FROM product\nWHERE [price] > $avg_price;\n\n-- Use the parent instance's field in a subquery (predefined variable)\nSELECT *, (SELECT * FROM events WHERE host == $parent.id) AS hosted_events FROM user;\n```\n\n----------------------------------------\n\nTITLE: Database Setup Query in SurrealQL\nDESCRIPTION: Creates a schemafull user table with defined fields for firstName, lastName and email with validation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/advanced-topics/embedding-surrealist.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\n-- Create a schemafull user table.\nDEFINE TABLE user SCHEMAFULL;\n-- Define some fields.\nDEFINE FIELD firstName ON TABLE user TYPE string;\nDEFINE FIELD lastName ON TABLE user TYPE string;\nDEFINE FIELD email ON TABLE user TYPE string;\n  ASSERT string::is::email($value);\n```\n\n----------------------------------------\n\nTITLE: Implementing Deref and helper traits for the SurrealDB database client in Rust\nDESCRIPTION: Implements the Deref trait to simplify access to client methods and a StringIt trait to convert Option<Person> results to String outputs. Also defines a constant for the person table name.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nimpl Deref for Database {\n    type Target = Surreal<Client>;\n\n    fn deref(&self) -> &Self::Target {\n        &self.client\n    }\n}\n\ntrait StringIt {\n    fn string(self) -> Result<String, Error>;\n}\n\nimpl StringIt for Option<Person> {\n    fn string(self) -> Result<String, Error> {\n        match self {\n            Some(t) => Ok(format!(\"{t:?}\")),\n            None => Ok(\"[]\".into()),\n        }\n    }\n}\n\nconst PERSON: &str = \"person\";\n```\n\n----------------------------------------\n\nTITLE: Defining RawQuery Method Syntax in C#\nDESCRIPTION: This snippet shows the method signature for the RawQuery method in the SurrealDB .NET SDK. It takes SQL and optional parameters as arguments and returns an awaitable task.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/raw-query.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.RawQuery(sql, params)\n```\n\n----------------------------------------\n\nTITLE: Configuring SurrealDB Authentication in Docker\nDESCRIPTION: This command starts SurrealDB with authentication enabled, setting up a root user. It demonstrates how to use the '--user' and '--pass' arguments to configure initial credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/docker.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --pull always -p 80:8000 -v /mydata:/mydata surrealdb/surrealdb:latest start --user root --pass root rocksdb:mydatabase.db\n```\n\n----------------------------------------\n\nTITLE: Defining Use Method Syntax in C# for SurrealDB .NET SDK\nDESCRIPTION: This snippet shows the method signature for the Use() method in the SurrealDB .NET SDK. It takes namespace and database parameters, and returns an asynchronous task.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/use.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Use(ns, db)\n```\n\n----------------------------------------\n\nTITLE: Defining User Table and Fields for Record Authentication\nDESCRIPTION: Sets up a user table with appropriate fields and permissions for record-based authentication. Includes email validation and uniqueness constraints, and sets up permissions to allow users to manage their own records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/authentication.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE user SCHEMAFULL\n\tPERMISSIONS\n\t\tFOR select, update, delete WHERE id = $auth.id;\n\nDEFINE FIELD name ON user TYPE string;\nDEFINE FIELD email ON user TYPE string ASSERT string::is::email($value);\nDEFINE FIELD password ON user TYPE string;\n\nDEFINE INDEX email ON user FIELDS email UNIQUE;\n```\n\n----------------------------------------\n\nTITLE: Using HTTP PUT Function in SurrealQL\nDESCRIPTION: Examples of using the http::put() function in a RETURN statement, showing both usage without headers and with custom headers. Both examples return a JSON response from the server.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/http.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nRETURN http::put('https://dummyjson.com/comments', {\n  \"id\": 1,\n  \"body\": \"This is some awesome thinking!\",\n  \"postId\": 100,\n  \"user\": {\n    \"id\": 63,\n    \"username\": \"eburras1q\"\n  }\n});\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN http::put('https://dummyjson.com/comments', {\n  \"id\": 1,\n  \"body\": \"This is some awesome thinking!\",\n  \"postId\": 100,\n  \"user\": {\n    \"id\": 63,\n    \"username\": \"eburras1q\"\n  }\n}, {\n  'Authorization': 'Bearer your-token-here',\n  'Content-Type': 'application/json',\n  'x-custom-header': 'custom-value'\n});\n```\n\nLANGUAGE: surql\nCODE:\n```\n{\n  \"id\": 1,\n  \"body\": \"This is some awesome thinking!\",\n  \"postId\": 100,\n  \"user\": {\n    \"id\": 63,\n    \"username\": \"eburras1q\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scope in SurrealDB using PHP SDK\nDESCRIPTION: This snippet demonstrates how to define a scope for user authentication in SurrealDB using the query method. It includes examples for both pre-2.0 and 2.0+ versions of SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/core/authentication.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->query('\n\tDEFINE SCOPE user SESSION 24h\n\tSIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) );\n');\n```\n\nLANGUAGE: php\nCODE:\n```\n$db->query('\nDEFINE ACCESS user ON DATABASE TYPE RECORD\n\tSIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )\n\tDURATION FOR TOKEN 15m, FOR SESSION 12h\n;');\n```\n\n----------------------------------------\n\nTITLE: Output of $this Parameter Usage in SurrealDB\nDESCRIPTION: Shows the result of using the $this parameter in a field definition, where extra_self contains a copy of the record's data including its ID and other fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_23\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tage: 6,\n\t\textra_self: {\n\t\t\tage: 6,\n\t\t\tid: person:one,\n\t\t\tname: 'Person'\n\t\t},\n\t\tid: person:one,\n\t\tname: 'Person'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB with Local Endpoint\nDESCRIPTION: Command to start a SurrealQL shell connected to a locally running SurrealDB instance, specifying the endpoint, namespace, and database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/surrealql/cli.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql --endpoint http://localhost:8000 --ns test --db test\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB without Identification Headers in Bash\nDESCRIPTION: Demonstrates how to start SurrealDB without identification headers and test the connection using curl. This improves security by reducing information disclosure.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ surreal start --no-identification-headers &\n$ curl -vvv \"127.0.0.1:8000\"\n*   Trying 127.0.0.1:8000...\n* Connected to 127.0.0.1 (127.0.0.1) port 8000 (#0)\n> GET / HTTP/1.1\n> Host: 127.0.0.1:8000\n> User-Agent: curl/7.81.0\n> Accept: */*\n>\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 307 Temporary Redirect\n< location: https://surrealdb.com/app\n< access-control-allow-origin: *\n< vary: origin\n< vary: access-control-request-method\n< vary: access-control-request-headers\n< x-request-id: deec3301-e930-4389-a0da-b2a336bd2631\n< content-length: 0\n< date: Mon, 17 Jun 2024 15:49:43 GMT\n<\n* Connection #0 to host 127.0.0.1 left intact\n```\n\n----------------------------------------\n\nTITLE: Executing HTTP DELETE Request with Custom Headers in SurrealQL\nDESCRIPTION: Example of using the http::delete function with custom headers to delete a comment from a dummy JSON API.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/http.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\nRETURN http::delete('https://dummyjson.com/comments/1', {\n\t'x-my-header': 'some unique string'\n});\n\nnull\n```\n\n----------------------------------------\n\nTITLE: Working with None Type in C#\nDESCRIPTION: Demonstrates how to construct and use the None type, including assigning it to record values.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/data-types.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar none = new None();\n\n// Change the value of a record to None\nvar myRecord = new MyRecord();\nmyRecord.Value = new None();\n```\n\n----------------------------------------\n\nTITLE: Using object::len() in SurrealQL\nDESCRIPTION: The object::len function returns the amount of key-value pairs an object holds. Available since v1.1.0.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/object.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nobject::len(object) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN object::len({\n  a: 1,\n  b: true\n});\n\n2\n```\n\n----------------------------------------\n\nTITLE: Using time::nano Function in SurrealQL\nDESCRIPTION: The time::nano function returns a datetime as an integer representing the number of nanoseconds since the UNIX epoch until a datetime, or the current date if no datetime argument is present.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\ntime::nano(option<datetime>) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::nano(d\"2021-11-01T08:30:17+00:00\");\n\n1635755417000000000\n```\n\n----------------------------------------\n\nTITLE: DEFINE NAMESPACE with IF NOT EXISTS Clause in SurrealQL\nDESCRIPTION: Example demonstrating how to create a namespace only if it doesn't already exist, preventing duplicate namespace errors.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/namespace.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Create a NAMESPACE if it does not already exist\nDEFINE NAMESPACE IF NOT EXISTS example;\n```\n\n----------------------------------------\n\nTITLE: Creating Records with SurrealDB in Rust\nDESCRIPTION: Demonstrates how to create records in SurrealDB using the Rust SDK. It shows creating a record with a random ID and creating a record with a specific ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n// Create a record with a random ID\nlet person: Option<Person> = db.create(\"person\").await?;\n// Create a record with a specific ID\nlet record: Record = db\n    .create((\"person\", \"tobie\"))\n    .content(Person {\n        name: \"Tobie\",\n        settings: {\n            active: true,\n            marketing: true,\n       },\n    }).await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Relationships in SurrealQL (Neo4j Equivalent)\nDESCRIPTION: Demonstrates how to create relationships between records in SurrealDB compared to Neo4j's approach. Uses the RELATE statement to connect entities in a graph structure.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_6\n\nLANGUAGE: SurrealQL\nCODE:\n```\nRELATE person:Jane -> order -> product:iPhone\n```\n\n----------------------------------------\n\nTITLE: Dynamic Sleep Usage in SELECT Query with SurrealQL\nDESCRIPTION: Example demonstrating how to use sleep() to introduce a 100ms delay between processing each record in a SELECT query, while tracking the elapsed time.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/sleep.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Create 3 `person` records\nCREATE |person:3|;\n\nLET $now = time::now();\n\nSELECT *, \n  sleep(100ms) AS _, \n  time::now() - $now AS elapsed\nFROM person;\n```\n\n----------------------------------------\n\nTITLE: Sleep Function with Parallel Operations in SurrealQL\nDESCRIPTION: Example showing how sleep() can be used to monitor the progress of a concurrent index building operation without interfering with the background process.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/sleep.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nCREATE |user:50000| SET name = id.id() RETURN NONE;\nDEFINE INDEX unique_name ON TABLE user FIELDS name UNIQUE CONCURRENTLY;\nINFO FOR INDEX unique_name ON TABLE user;√\nRETURN sleep(50ms);\nINFO FOR INDEX unique_name ON TABLE user;\nRETURN sleep(50ms);\nINFO FOR INDEX unique_name ON TABLE user;\nRETURN sleep(50ms);\nINFO FOR INDEX unique_name ON TABLE user;\n```\n\n----------------------------------------\n\nTITLE: Array Clump Operation in SurrealQL\nDESCRIPTION: Function that splits an array into sub-arrays of specified size. The last sub-array may be smaller if the size doesn't divide evenly.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\narray::clump(array, size: int) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nLET $array = [1, 2, 3, 4];\nRETURN array::clump($array, 2);\nRETURN array::clump($array, 3);\n```\n\n----------------------------------------\n\nTITLE: Recursive Query with Timeout in SurrealQL\nDESCRIPTION: Demonstrates how to use a timeout with recursive queries to prevent excessive resource consumption. This is especially important for open-ended ranges that could cause exponential growth of results.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_58\n\nLANGUAGE: surql\nCODE:\n```\nSELECT @.{..}.{ id, likes: ->likes->person.@ } FROM person TIMEOUT 1s;\n```\n\n----------------------------------------\n\nTITLE: Deleting Records Based on Conditions in SurrealQL\nDESCRIPTION: Illustrates how to use the WHERE clause in a DELETE statement to conditionally delete records based on specific criteria.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/delete.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\n-- Update all records which match the condition\nDELETE city WHERE name = 'London';\n```\n\n----------------------------------------\n\nTITLE: Parameter Assignment Example in SurrealDB\nDESCRIPTION: Example demonstrating how to assign a parameter and use it in subsequent queries. Shows variable assignment and query usage patterns.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/parameters.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Assign the variable on the connection\nawait db.let('name', {\n\tfirst: 'Tobie',\n\tlast: 'Morgan Hitchcock',\n});\n\n// Use the variable in a subsequent query\nawait db.query('CREATE person SET name = $name');\n\n// Use the variable in a subsequent query\nawait db.query('SELECT * FROM person WHERE name.first = $name.first');\n```\n\n----------------------------------------\n\nTITLE: Public-Key JWT Access Configuration Example\nDESCRIPTION: Shows how to configure JWT access using RS256 public-key cryptography for token verification.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/jwt.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Specify the namespace and database for the token\nUSE NS abcum DB app_vitalsense;\n\n-- Set the name of the token\nDEFINE ACCESS token_name\n  -- Use this token provider for database authentication\n  ON DATABASE\n  -- Specify the type of access being defined\n  TYPE JWT\n  -- Specify the cryptographic signature algorithm used to verify the token\n  ALGORITHM RS256\n  -- Specify the public key used to verify the authenticity of the token\n  KEY \"-----BEGIN PUBLIC KEY-----\nMUO52Me9HEB4ZyU+7xmDpnixzA/CUE7kyUuE0b7t38oCh+sQouREqIjLwgHhFdhh3cQAwr6GH07D\nThioYrZL8xATJ3Youyj8C45QnZcGUif5PkpWXDi0HJSoMFekbW6Pr4xuqIqb2LGxGDVJcLZwJ2AS\nGtu2UAfPXbBD3ffiad393M22g1iHM80YaNi+xgswG7qtXE4lR/Lt4s0MeKKX7stdWI1VIsoB+y3i\nr/OWUvJPjjDNbAsyy8tQmxydv+FUnLEP9TNT4AhN4DXcJ+XsDtW7OWt4EdSVDeKpGbIMvIrh1Pe+\nNilj8UHNyNDHa2AjK3seMo6CMvaIQJKj5o4xGFblFGwvvPD03SbuQLs1FdRjsZCeWLdYeQ3JDHE9\nsFG7DCXlpMJcaYT1mf4XHJ0gPekNLQyewTY3Vxf7FgV3GCNjV20kcDFgJA2+iVW2wSrb+txD1ycE\nkbi8jh0pedWwE40VQWaTh/8eAvX7IHWya/AEro25mq+m6vktNZLbvLphhp586kJK3Tdt3YjpkPre\nM3nkFWOWurIyKbtIV9JemfwCgt89sNV45dTlnEDEZFFGnIgDnWgx3CUo4XmhICEQU8+tklw9jJYx\niCTjhbIDEBHySSSc/pQ4ftHQmhToTlQeOdEy4LYiaEIgl1X+hzRH1hBYvWlNKe4EY1nMCKcjgt0=\n-----END PUBLIC KEY-----\";\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB SDK with Maven\nDESCRIPTION: Adds the SurrealDB dependency to a Maven project's pom.xml file. Specifies the groupId, artifactId, and version for the SurrealDB Java SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/installation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.surrealdb</groupId>\n    <artifactId>surrealdb</artifactId>\n    <version>0.2.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB SDK with Gradle (Kotlin)\nDESCRIPTION: Configures the SurrealDB dependency in a Gradle build file using Kotlin DSL syntax. Defines the SurrealDB version and adds it as an implementation dependency.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/installation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nval surrealdbVersion by extra(\"0.2.1\")\n\ndependencies {\n    implementation(\"com.surrealdb:surrealdb:${surrealdbVersion}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data with SurrealDB PHP\nDESCRIPTION: Methods for querying data from the database using SurrealQL statements and selecting records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$db->query($sql,$vars)\n$db->select($thing)\n```\n\n----------------------------------------\n\nTITLE: Using TIMEOUT in SurrealQL DELETE Statement\nDESCRIPTION: Shows how to use the TIMEOUT keyword in a DELETE statement to specify a maximum duration for the operation, preventing long-running deletions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/delete.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nDELETE person WHERE ->knows->person->(knows WHERE influencer = false) TIMEOUT 5s;\n```\n\n----------------------------------------\n\nTITLE: Selecting Records with SurrealDB JavaScript SDK\nDESCRIPTION: Method for selecting all records from a table or a specific record by ID. Supports generic typing for type-safe queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/data-maniplulation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync db.select<T>(thing)\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n\tid: string;\n\tname: string;\n};\n\n// Select all records from a table\nconst people = await db.select<Person>('person');\n\n// Select a specific record from a table\nconst person = await db.select<Person>(new RecordId('person', 'h5wxrf2ewk8xjxosxtyc'));\nconst person = await db.select<Person>(new StringRecordId('person:h5wxrf2ewk8xjxosxtyc'));\n```\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM $thing;\n```\n\n----------------------------------------\n\nTITLE: Using Value Diff Function in SurrealQL\nDESCRIPTION: Shows usage of the value::diff function which returns JSON Patch operations required to transform one value into another. Returns an array of patch objects.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/value.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nvalue::diff(value, value) -> array<object>\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN 'tobie'.diff('tobias');\n```\n\nLANGUAGE: surql\nCODE:\n```\n{ company: 'SurrealDB' }.diff({ company: 'SurrealDB!!', latest_version: '2.0', location: city:london });\n```\n\n----------------------------------------\n\nTITLE: Invalidating User Session in SurrealDB (JSON)\nDESCRIPTION: This example demonstrates how to invalidate a user's session for the current connection. This effectively logs out the currently authenticated user.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"invalidate\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Removing References to Enable Deletion with ON DELETE REJECT\nDESCRIPTION: This snippet demonstrates how to properly delete a record protected by ON DELETE REJECT by first removing the references to it. The house can be deleted after disconnecting it from utilities.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/references.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE utility:gas   SET connected_to -= house:one;\nUPDATE utility:water SET connected_to -= house:one;\n\nDELETE house:one;\n```\n\n----------------------------------------\n\nTITLE: Array-based Complex Record ID Creation\nDESCRIPTION: Demonstrates creating sensor readings using array-based complex record IDs for efficient time series data storage and querying.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/time-series.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nCREATE sensor_readings:[\n\ttime::now(),\n\tlocation:Longleat_House,\n\tsensor:ARF8394AAA,\n\t28.4,\n\t55\n];\n```\n\n----------------------------------------\n\nTITLE: Upgrading SurrealDB to the latest version\nDESCRIPTION: This command upgrades the installed SurrealDB to the latest version. It should be run after installation to ensure you have the most up-to-date version of SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/windows.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal upgrade\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Table Name in SurrealDB\nDESCRIPTION: The type::table function extracts or converts values into table names. It accepts record or string as input.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_17\n\nLANGUAGE: surql\nCODE:\n```\nRETURN [\n  type::table(\"person\"),\n  type::table(cat:one)\n];\n```\n\n----------------------------------------\n\nTITLE: Redefining Index for Successful Transaction in SurrealDB\nDESCRIPTION: This example shows how to redefine an index to make it less strict, allowing the transaction to complete successfully.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/transactions.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nBEGIN TRANSACTION;\nDEFINE INDEX OVERWRITE unique_person ON TABLE person FIELDS name, born UNIQUE;\n\nINSERT INTO person [\n    { name: 'Agatha Christie', born: d'1890-09-15' },\n    { name: 'Billy Billerson', born: d'1979-09-11' },\n    { name: 'Agatha Christie', born: d'1955-05-15' },\n];\n\nTHROW \"Reached the end\";\nCOMMIT TRANSACTION;\n```\n\n----------------------------------------\n\nTITLE: Encoding Point to Geohash in SurrealQL\nDESCRIPTION: The geo::hash::encode function converts a geolocation point into a geohash string. It can accept an optional precision parameter to control the geohash length.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/geo.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nRETURN geo::hash::encode( (51.509865, -0.118092) );\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN geo::hash::encode( (51.509865, -0.118092), 5 );\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Statement Syntax in SurrealQL\nDESCRIPTION: Specifies the syntax for the DELETE statement in SurrealQL, including optional clauses for targeting, conditions, return values, timeout, and parallel execution.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/delete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nDELETE [ FROM | ONLY ] @targets\n\t[ WHERE @condition ]\n\t[ RETURN NONE | RETURN BEFORE | RETURN AFTER | RETURN DIFF | RETURN @statement_param, ... ]\n\t[ TIMEOUT @duration ]\n\t[ PARALLEL ]\n;\n```\n\n----------------------------------------\n\nTITLE: count() with Array in RETURN Statement\nDESCRIPTION: Example showing count() function with an array containing various values in a RETURN statement. It returns 5 because there are 5 truthy values in the array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/count.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nRETURN count([ 1, 2, 3, null, 0, false, (15 > 10), rand::uuid() ]);\n\n5\n```\n\n----------------------------------------\n\nTITLE: Calculating Pearson Correlation in SurrealDB\nDESCRIPTION: The vector::similarity::pearson function computes the Pearson correlation coefficient between two vectors. It takes two arrays as input and returns a number reflecting the degree of linear relationship between them.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_19\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::similarity::pearson([1,2,3], [1,5,7]);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Axum Router with SurrealDB Routes in Rust\nDESCRIPTION: Configuration of the Axum router with HTTP method-specific handlers for various endpoints. This code maps URL paths to their respective handler functions and sets up a TCP listener for the server.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nlet listener = TcpListener::bind(\"localhost:8080\").await?;\nlet router = Router::new()\n    .route(\"/\", get(routes::paths))\n    .route(\"/person/:id\", post(routes::create_person))\n    .route(\"/person/:id\", get(routes::read_person))\n    .route(\"/person/:id\", put(routes::update_person))\n    .route(\"/person/:id\", delete(routes::delete_person))\n    .route(\"/people\", get(routes::list_people))\n    .route(\"/session\", get(routes::session))\n    .route(\"/new_user\", get(routes::make_new_user))\n    .route(\"/new_token\", get(routes::get_new_token));\naxum::serve(listener, router).await?;\n```\n\n----------------------------------------\n\nTITLE: Modifying Output with RETURN Clause in RELATE Statements\nDESCRIPTION: Shows different ways to control the output of RELATE statements using the RETURN clause. Options include NONE, BEFORE, AFTER, DIFF, or specific fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\n-- Don't return any result\nRELATE person:l19zjikkw1p1h9o6ixrg->wrote->article:8nkk6uj4yprt49z7y3zm\n    SET time.written = time::now()\n    RETURN NONE;\n\n-- Return the changeset diff\nRELATE person:l19zjikkw1p1h9o6ixrg->wrote->article:8nkk6uj4yprt49z7y3zm\n    SET time.written = time::now()\n    RETURN DIFF;\n\n-- Return the record before changes were applied\nRELATE person:l19zjikkw1p1h9o6ixrg->wrote->article:8nkk6uj4yprt49z7y3zm\n    SET time.written = time::now()\n    RETURN BEFORE;\n\n-- Return the record after changes were applied (the default)\nRELATE person:l19zjikkw1p1h9o6ixrg->wrote->article:8nkk6uj4yprt49z7y3zm\n    SET time.written = time::now()\n    RETURN AFTER;\n\n-- Return a specific field only from the updated records\nRELATE person:l19zjikkw1p1h9o6ixrg->wrote->article:8nkk6uj4yprt49z7y3zm\n    SET time.written = time::now()\n    RETURN time;\n\n-- Return only the value of a specific field without the field name\nRELATE person:l19zjikkw1p1h9o6ixrg->wrote->article:8nkk6uj4yprt49z7y3zm\n    SET time.written = time::now()\n    RETURN VALUE time;\n```\n\n----------------------------------------\n\nTITLE: Updating Graph Edge Data in SurrealQL\nDESCRIPTION: Example of updating data in a graph edge table using the UPDATE statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\n-- Add a small synopsis composed of the table name and article ID\nUPDATE wrote SET\n    metadata.description = meta::tb(out) + ' written by ' + <string>in;\n```\n\n----------------------------------------\n\nTITLE: Using count() Function with Value Argument in SurrealQL\nDESCRIPTION: The count() function with a value argument checks if the value is truthy and returns 1 or 0 accordingly. Useful for counting rows meeting specific conditions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/count.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\ncount(any) -> number\n```\n\n----------------------------------------\n\nTITLE: Query Response for Graph Clause with SELECT\nDESCRIPTION: Shows the response from using a SELECT statement within a graph clause, providing structured information about each person's acquaintances and whether they dated them.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_61\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tacquaintances: [\n\t\t\t{\n\t\t\t\tcounterpart: person:three,\n\t\t\t\tdated: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tcounterpart: person:two,\n\t\t\t\tdated: true\n\t\t\t}\n\t\t],\n\t\tid: person:one\n\t},\n\t{\n\t\tacquaintances: [],\n\t\tid: person:three\n\t},\n\t{\n\t\tacquaintances: [\n\t\t\t{\n\t\t\t\tcounterpart: person:three,\n\t\t\t\tdated: false\n\t\t\t}\n\t\t],\n\t\tid: person:two\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Working with Complex RecordId Types\nDESCRIPTION: Demonstrates handling RecordId with complex data types like custom objects and tuples.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/data-types.mdx#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar rid = new RecordId(\"table\", new CityId { city: \"London\" });\nvar id = rid.DeserializeId<CityId>(); // CityId { city: \"London\" }\n\nvar rid = new RecordId(\"table\", (\"London\", 42));\nvar id = rid.DeserializeId<(string, int)>(); // (\"London\", 42)\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB PHP SDK via Composer\nDESCRIPTION: Command to install the SurrealDB PHP SDK package using Composer package manager.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/setup.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require surrealdb/surrealdb.php\n```\n\n----------------------------------------\n\nTITLE: Defining Signup Method Syntax in Rust for SurrealDB\nDESCRIPTION: This snippet shows the basic syntax for the signup() method in the SurrealDB Rust SDK. It takes a credentials argument which contains variables used in the signup query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/signup.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.signup(credentials)\n```\n\n----------------------------------------\n\nTITLE: Invalidating User Session in SurrealDB PHP SDK\nDESCRIPTION: This snippet shows how to invalidate a user session and sign out the user using the invalidate method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/core/authentication.mdx#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$db->invalidate();\n```\n\n----------------------------------------\n\nTITLE: Getting Information About the Current Namespace\nDESCRIPTION: Command syntax to retrieve information about the current namespace in SurrealDB, which returns details about databases, accesses, and users.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/concepts/namespace.mdx#2025-04-16_snippet_1\n\nLANGUAGE: syntax\nCODE:\n```\nINFO FOR [ NS | NAMESPACE ];\n```\n\n----------------------------------------\n\nTITLE: FROM Clause Basic Syntax\nDESCRIPTION: Defines the basic syntax structure for the FROM clause in SurrealQL statements.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/from.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nSTATEMENT\n    [FROM [ONLY] @targets;]\n```\n\n----------------------------------------\n\nTITLE: Custom Error Message Filtering with Mapper in SurrealQL\nDESCRIPTION: This snippet demonstrates how to use a custom mapper for filtering and unifying multilingual error messages. It shows the definition of an analyzer with a mapper filter and its application in text analysis.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/analyzer.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER error_filter FILTERS mapper('error_filter.txt');\n\nLET $messages = \n\t[\"File not found\", \"Datei nicht gefunden\", \"Zeitüberschreitung\"]\n\t.map(|$word| $word.replace(' ', '_'))\n\t.join(' ');\nsearch::analyze(\"error_filter\", $messages);\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t'NOT_FOUND',\n\t'NOT_FOUND',\n\t'TIMEOUT'\n]\n```\n\n----------------------------------------\n\nTITLE: Basic REMOVE Statement Usage in SurrealQL\nDESCRIPTION: Examples of basic usage of the REMOVE statement to remove various resources such as namespaces, databases, users, access, events, fields, indexes, analyzers, functions, params, and tables.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/remove.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nREMOVE NAMESPACE surrealdb;\n\nREMOVE DATABASE blog;\n\nREMOVE USER writer ON NAMESPACE;\n\nREMOVE USER writer ON DATABASE;\n\nREMOVE ACCESS token ON NAMESPACE;\n\nREMOVE ACCESS user ON DATABASE;\n\nREMOVE EVENT new_post ON TABLE article;\n\n-- Only works for Schemafull tables (i.e. tables with a schema)\nREMOVE FIELD tags ON TABLE article;\n\nREMOVE INDEX authors ON TABLE article;\n\nREMOVE ANALYZER example_ascii;\n\nREMOVE FUNCTION fn::update_author;\n\nREMOVE PARAM $author;\n\nREMOVE TABLE article;\n```\n\n----------------------------------------\n\nTITLE: Record User Signin to SurrealDB (JSON)\nDESCRIPTION: This example demonstrates how to sign in with a record access method by specifying namespace, database, access method, and authentication credentials. Returns a JWT token upon successful authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"signin\",\n    \"params\": [\n        {\n            \"NS\": \"surrealdb\",\n            \"DB\": \"docs\",\n            \"AC\": \"commenter\",\n\n            \"username\": \"johndoe\",\n            \"password\": \"SuperStrongPassword!\"\n        }\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTdXJyZWFsREIiLCJpYXQiOjE1MTYyMzkwMjIsIm5iZiI6MTUxNjIzOTAyMiwiZXhwIjoxODM2NDM5MDIyLCJOUyI6InRlc3QiLCJEQiI6InRlc3QiLCJTQyI6InVzZXIiLCJJRCI6InVzZXI6dG9iaWUifQ.N22Gp9ze0rdR06McGj1G-h2vu6a6n9IVqUbMFJlOxxA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Translating delete Method to SurrealQL Query\nDESCRIPTION: Illustrates the equivalent SurrealQL query that the delete method generates and executes in the database. It uses a parameterized query with $thing representing the table or record to be deleted.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/delete.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nDELETE $thing;\n```\n\n----------------------------------------\n\nTITLE: Creating NAMESPACE User in SurrealQL\nDESCRIPTION: Example of creating a NAMESPACE level user with editor role after selecting the namespace context.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/user.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Specify the namespace\nUSE NS abcum;\n-- Create the user with an editor role and some example durations\nDEFINE USER username ON NAMESPACE PASSWORD '123456' ROLES EDITOR DURATION FOR SESSION 12h, FOR TOKEN 1m;\n```\n\n----------------------------------------\n\nTITLE: Comparing Bcrypt Hashed Passwords in SurrealQL\nDESCRIPTION: Compares a hashed-and-salted bcrypt password value with an unhashed password value, returning a boolean result.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/crypto.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\ncrypto::bcrypt::compare(string, any) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nLET $hash = \"$2b$12$OD7hrr1Hycyk8NUwOekYY.cogCICpUnwNvDZ9NiC1qCPHzpVAQ9BO\";\nLET $pass = \"this is a strong password\";\nRETURN crypto::bcrypt::compare($hash, $pass);\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: Duration Method Chaining Example\nDESCRIPTION: Demonstrates method chaining syntax introduced in v2.0.0 for calling duration functions using the dot operator. Shows comparison between traditional syntax and method chaining approach.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/duration.mdx#2025-04-16_snippet_17\n\nLANGUAGE: surql\nCODE:\n```\n-- Traditional syntax\nduration::mins(2d6h);\n\n-- Method chaining syntax\n2d6h.mins();\n```\n\nLANGUAGE: surql\nCODE:\n```\n3240\n```\n\nLANGUAGE: surql\nCODE:\n```\n-- Traditional syntax\nduration::mins(duration::from::millis(98734234));\n\n-- Method chaining syntax\nduration::from::millis(98734234).mins();\n```\n\nLANGUAGE: surql\nCODE:\n```\n1645\n```\n\n----------------------------------------\n\nTITLE: Using time::min Function in SurrealQL\nDESCRIPTION: The time::min function returns the least datetime from an array of datetimes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\ntime::min(array<datetime>) -> datetime\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::min([ d\"1987-06-22T08:30:45Z\", d\"1988-06-22T08:30:45Z\" ])\n\nd\"1987-06-22T08:30:45Z\"\n```\n\n----------------------------------------\n\nTITLE: Signing in with a Database User using HTTP Request\nDESCRIPTION: Demonstrates authentication with a database-level user via HTTP POST request, including namespace and database parameters to locate the user.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/authentication.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n\t-H \"Accept: application/json\" \\\n\t-d '{\"NS\":\"test\", \"DB\":\"test\", \"user\":\"mary\", \"pass\":\"VerySecurePassword!\"}' \\\n\thttp://localhost:8000/signin\n```\n\n----------------------------------------\n\nTITLE: Selecting and Ordering Text Data in SurrealDB\nDESCRIPTION: This snippet shows how to select and order text data in SurrealDB using the ORDER BY clause. It demonstrates the default Unicode sorting behavior.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nSELECT VALUE val FROM data ORDER BY val;\n```\n\n----------------------------------------\n\nTITLE: Bounded Recursive Query in SurrealDB\nDESCRIPTION: Shows how to limit the depth of a recursive query using a bounded range, collecting first- and second-degree relations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_38\n\nLANGUAGE: surql\nCODE:\n```\nperson:you.{..2+collect}->knows->person;\n```\n\n----------------------------------------\n\nTITLE: Ascending Sort Shorthand in SurrealDB\nDESCRIPTION: The array::sort::asc function is a convenience function to sort an array in ascending order.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_49\n\nLANGUAGE: surql\nCODE:\n```\narray::sort::asc(array) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::sort::asc([ 1, 2, 1, null, \"something\", 3, 3, 4, 0 ]);\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with GraphQL Module (MacOS)\nDESCRIPTION: Command to start SurrealDB with the GraphQL module enabled on MacOS. It sets the SURREAL_CAPS_ALLOW_EXPERIMENTAL environment variable and uses the surreal start command with debug logging and root credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/graphql/http.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# From greater than or equal to V2.2.0\nSURREAL_CAPS_ALLOW_EXPERIMENTAL=graphql surreal start --log debug --user root --password root\n\n# From versions lower than V2.2.0\nSURREAL_EXPERIMENTAL_GRAPHQL = \"true\" surreal start --log debug --user root --password root\n```\n\n----------------------------------------\n\nTITLE: Selecting Namespace and Database in SurrealDB with C#\nDESCRIPTION: Shows how to use the Use() method to switch to a specific namespace and database after connecting. This is useful for managing multiple databases or namespaces within the same application.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/create-a-new-connection.mdx#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Use(\"test\", \"test\");\n```\n\n----------------------------------------\n\nTITLE: Using array::add Function in SurrealQL\nDESCRIPTION: Demonstrates adding an item to an array only if it doesn't already exist.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::add([\"one\", \"two\"], \"three\");\n```\n\n----------------------------------------\n\nTITLE: Creating Graph Relations in SurrealDB\nDESCRIPTION: This snippet demonstrates how to create a graph relation between a user and a comment using the RELATE statement. It also shows how to set metadata on the relation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nLET $new_user = CREATE ONLY user SET name = \"User McUserson\";\nLET $new_comment = CREATE ONLY comment SET \n    text = \"I learned something new!\", \n    created_at = time::now();\n\nRELATE $new_user->wrote->$new_comment SET\n\tlocation = \"Arizona\",\n\tos = \"Windows 11\",\n\tmood = \"happy\";\n```\n\n----------------------------------------\n\nTITLE: Output of ON DELETE REJECT Operation\nDESCRIPTION: This shows the query output for the ON DELETE REJECT example, displaying the reference relationships and the error message when attempting to delete a record protected by ON DELETE REJECT.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/references.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\n-------- Query --------\n\n{\n\tid: house:one,\n\tusing: [\n\t\tutility:gas,\n\t\tutility:water\n\t]\n}\n\n-------- Query --------\n\n'Cannot delete `house:one` as it is referenced by `utility:gas` with an ON DELETE REJECT clause'\n```\n\n----------------------------------------\n\nTITLE: Creating User Records with Incremental Numbers in SurrealDB\nDESCRIPTION: This snippet creates user records with random IDs and an incremental 'num' field, demonstrating querying techniques for both approaches.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_27\n\nLANGUAGE: surql\nCODE:\n```\nFOR $num IN 0..100 {\n    CREATE user SET num = $num;\n    sleep(1ms); -- Simulate a bit of time between user creation\n};\n\nSELECT * FROM user WHERE num IN 50..=51;\nSELECT * FROM user START 50 LIMIT 2;\n```\n\n----------------------------------------\n\nTITLE: Converting UUID to Datetime in SurrealQL\nDESCRIPTION: The time::from::uuid function calculates a datetime based on the UUID. It takes a UUID string as input and returns a datetime value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_30\n\nLANGUAGE: surql\nCODE:\n```\ntime::from::uuid(uuid) -> datetime\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::from::uuid(u'01944ab6-c1e5-7760-ab6a-127d37eb1b94');\n\nd'2025-01-09T10:57:58.757Z'\n```\n\n----------------------------------------\n\nTITLE: Specifying Linking Tables and Field Names in SurrealQL\nDESCRIPTION: This example demonstrates how to define reference fields that specify both the table and field name, allowing for more granular control over references.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/references.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD comics ON person TYPE option<array<record<comic_book>>> REFERENCE;\nDEFINE FIELD borrowed_comics ON person TYPE option<array<record<comic_book>>> REFERENCE;\nDEFINE FIELD owned_by ON comic_book TYPE references<person, comics>;\nDEFINE FIELD borrowed_by ON comic_book TYPE references<person, borrowed_comics>;\n\nCREATE person:one SET comics = [comic_book:one];\nCREATE person:two SET borrowed_comics = [comic_book:one];\nCREATE comic_book:one SET title = \"Loki, God of Stories\";\nSELECT * FROM comic_book;\n```\n\n----------------------------------------\n\nTITLE: Using Method Chaining with Object Functions in SurrealQL\nDESCRIPTION: Method chaining allows functions to be called using the . dot operator on a value instead of the full function path. Available since v2.0.0.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/object.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\n-- Traditional syntax\nobject::values({\n  a: 1,\n  b: true\n});\n\n-- Method chaining syntax\n{\n  a: 1,\n  b: true\n}.values();\n```\n\nLANGUAGE: surql\nCODE:\n```\n[1, true]\n```\n\nLANGUAGE: surql\nCODE:\n```\n-- Traditional syntax\narray::max(object::values(object::from_entries([[\"a\", 1], [\"b\", 2]])));\n\n-- Method chaining syntax\nobject::from_entries([[\"a\", 1], [\"b\", 2]]).values().max();\n```\n\nLANGUAGE: surql\nCODE:\n```\n2\n```\n\n----------------------------------------\n\nTITLE: Creating a Future that Depends on a Statement in SurrealQL\nDESCRIPTION: This example shows how to create a future that uses a SELECT statement to compute its value. Statement-based futures must be wrapped in parentheses.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/futures.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD random_movie\n    ON app_screen\n    VALUE <future> { (SELECT * FROM ONLY movie ORDER BY RAND() LIMIT 1) };\n```\n\n----------------------------------------\n\nTITLE: Strict Typing Example with SurrealDB\nDESCRIPTION: Complete example showing how to use strict typing with a Student struct to query the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/flexible-typing.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::{Error, Surreal};\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Student {\n    name: String,\n    class_id: u32,\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    let db = Surreal::new::<Ws>(\"localhost:8000\").await?;\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n    db.use_ns(\"namespace\").use_db(\"database\").await?;\n    let all_students: Vec<Student> = db.select(\"student\").await?;\n    println!(\"All students: {all_students:?}\");\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting and Selecting Person Records as Record User in SurrealDB\nDESCRIPTION: This snippet demonstrates deleting all 'person' records and then selecting them as a record user. It shows that the record user can only delete and view records they created.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ntest/test> DELETE person RETURN BEFORE;\n-- Query 1\n[\n\t{\n\t\tcreated_by: user:qx2apv5oc8mh03wtah0q,\n\t\tid: person:8y06y06jmmb7e58trckz,\n\t\tname: 'Aeon'\n\t}\n]\n\ntest/test> SELECT * FROM person;\n-- Query 1\n[\n\t{\n\t\tid: person:hdl0unwts4atic65nh7l,\n\t\tname: 'Aeon'\n\t}\n]\n\ntest/test> UPDATE person SET name = \"Yogurt\";\n-- Query 1\n[]\n```\n\n----------------------------------------\n\nTITLE: Computing Arccosine in SurrealQL\nDESCRIPTION: The math::acos function returns the arccosine (inverse cosine) of a number, which must be in the range -1 to 1. The result is expressed in radians.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::acos(0.5);\n\n1.0471975511965979\n```\n\n----------------------------------------\n\nTITLE: Static Singleton Database Connection\nDESCRIPTION: Implementation of a static singleton pattern for maintaining a single database connection across the application.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/setup.mdx#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse std::sync::LazyLock;\nuse surrealdb::engine::remote::ws::{Client, Ws};\nuse surrealdb::opt::auth::Root;\nuse surrealdb::RecordId;\nuse surrealdb::Surreal;\n\n#[derive(Debug, Deserialize)]\nstruct Record {\n    id: RecordId,\n}\n\n#[derive(Debug, Serialize)]\nstruct Person<'a> {\n    name: &'a str,\n    marketing: bool,\n}\n\nstatic DB: LazyLock<Surreal<Client>> = LazyLock::new(Surreal::init);\n\nasync fn upsert_tobie() -> surrealdb::Result<()> {\n    let tobie: Option<Record> = DB\n        .upsert((\"person\", \"tobie\"))\n        .content(Person {\n            name: \"Tobie\",\n            marketing: true,\n        })\n        .await?;\n    dbg!(tobie);\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    DB.connect::<Ws>(\"localhost:8000\").await?;\n    DB.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n    DB.use_ns(\"test\").use_db(\"test\").await?;\n    upsert_tobie().await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: IF ELSE with THROW in SurrealQL\nDESCRIPTION: Example of using THROW inside an IF ELSE statement to handle errors.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/ifelse.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nLET $badly_formatted_datetime = \"2024-04TT08:08:08Z\";\n// Original syntax\nIF !type::is::datetime($badly_formatted_datetime) THEN {\n    THROW \"Whoops, that isn't a real datetime\"\n} END;\n\n// New scope syntax\nIF !type::is::datetime($badly_formatted_datetime) {\n    THROW \"Whoops, that isn't a real datetime\"\n};\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Query for patch Method\nDESCRIPTION: This snippet shows the SurrealQL query that is executed when the `.patch()` method is called. It uses the UPDATE statement with the PATCH clause to apply the JSON Patch data to the specified records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/patch.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $thing PATCH $data;\n```\n\n----------------------------------------\n\nTITLE: Complex Query Using Traditional Function Calls in SurrealDB\nDESCRIPTION: An example of a complex query using nested function calls in SurrealDB before version 2.0. This demonstrates the potential readability issues with deeply nested functions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\narray::len(array::windows(array::distinct(array::flatten([[1,2,3],[1,4,6],[4,2,4]])), 2));\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with Experimental Features (Flag)\nDESCRIPTION: Launches SurrealDB with experimental capabilities enabled via command line flag.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --allow-experimental record_references\n```\n\nLANGUAGE: bash\nCODE:\n```\nSURREAL_CAPS_ALLOW_EXPERIMENTAL=\"record_references, graphql, define_api\" surreal start\n```\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --allow-experimental record_references,graphql,define_api\n```\n\n----------------------------------------\n\nTITLE: Using string::similarity::fuzzy Function in SurrealDB\nDESCRIPTION: This example shows how to use the string::similarity::fuzzy function in SurrealDB to get a numerical similarity score between strings, which can be more informative than simple fuzzy matching.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nSELECT \n    $this AS word, \n    string::similarity::fuzzy(\"United Kingdom\", $this) AS similarity\nFROM [\"United Kingdom\", \"United kingdom\", \"ited\", \"United Kingdóm\", \"i\"]\nORDER BY similarity DESC;\n```\n\n----------------------------------------\n\nTITLE: Selecting Namespace and Database in SurrealDB Java SDK\nDESCRIPTION: Demonstrates how to switch to a specific namespace and database after connecting to SurrealDB. This is useful for managing multiple databases or namespaces within a single connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/core/create-a-new-connection.mdx#2025-04-16_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndriver.useNs(\"surrealdb\").useDb(\"docs\");\n```\n\n----------------------------------------\n\nTITLE: Validating DateTime Strings in SurrealQL\nDESCRIPTION: The string::is::datetime function checks if a string representation of a date and time matches a specified format. It takes a string input and a format string, returning a boolean.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_17\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::datetime(\"2015-09-05 23:56:04\", \"%Y-%m-%d %H:%M:%S\");\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: Array Containment Operators in SurrealDB\nDESCRIPTION: This example shows how to use array containment operators in SurrealDB, which can also be applied to strings as they are essentially arrays of characters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\n-- If 1,2,3 contains each item in 1,2...\n[1,2,3] CONTAINSALL [1,2];\n-- then each item in 1,2 is inside 1,2,3\n[1,2] ALLINSIDE [1,2,3];\n```\n\n----------------------------------------\n\nTITLE: Defining Merge Method Syntax in Go\nDESCRIPTION: Shows the syntax for the Merge method in the SurrealDB Golang SDK. This method is used to modify all records in a table or a specific record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/merge.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Merge[T](what, data)\n```\n\n----------------------------------------\n\nTITLE: Reverse Graph Traversal Query\nDESCRIPTION: Demonstrates how to query graph relationships in reverse direction to find connected nodes\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nSELECT <-wrote-.* AS authors\nFROM posts:helloworld;\n```\n\n----------------------------------------\n\nTITLE: Decoding Geohash to Point in SurrealQL\nDESCRIPTION: The geo::hash::decode function converts a geohash string into a geolocation point. This example decodes a geohash representing a location in London.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/geo.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nRETURN geo::hash::decode(\"mpuxk4s24f51\");\n```\n\n----------------------------------------\n\nTITLE: Basic Graph Relation Queries with Aliases\nDESCRIPTION: Demonstrates querying graph relations with and without aliases to control result structure.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_39\n\nLANGUAGE: surql\nCODE:\n```\nCREATE cat:one, cat:two, cat:three;\n\nRELATE cat:one->friends_with->cat:two;\nRELATE cat:two->friends_with->cat:three;\n\nSELECT ->friends_with->cat->friends_with->cat FROM cat:one;\n-- create an alias for the result using the `AS` clause.\nSELECT ->friends_with->cat->friends_with->cat AS friends_of_friends FROM cat:one;\n```\n\n----------------------------------------\n\nTITLE: Ordering Records in Ascending Order in SurrealQL\nDESCRIPTION: This example demonstrates how to order records in ascending order by a single field.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/order_by.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM <table> ORDER BY <field> ASC;\n```\n\n----------------------------------------\n\nTITLE: Enhanced Analyzer with Blank and Punct Tokenizers in SurrealQL\nDESCRIPTION: Defines an improved analyzer that splits text by both whitespace and punctuation before applying the edge n-gram filter, allowing cleaner token generation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_18\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER blank_edgengram TOKENIZERS blank, punct FILTERS edgengram(3, 10);\nsearch::analyze(\"blank_edgengram\", \"The Wheel of Time turns, and Ages come and pass, leaving memories that become legend.\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Information in SurrealDB\nDESCRIPTION: Example of the response from SELECT * FROM $session query in an authenticated session for a record user using the HTTP REST API. Shows the structure of the session object with fields like namespace, database, IP address, and authentication details.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/authentication.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"ac\": \"user\",\n\t\"db\": \"test\",\n\t\"exp\": null,\n\t\"id\": \"example-client\",\n\t\"ip\": \"127.0.0.1\",\n\t\"ns\": \"test\",\n\t\"or\": \"http://www.example.com\",\n\t\"rd\": \"user:example\",\n\t\"tk\": {\n\t\t\"AC\": \"user\",\n\t\t\"DB\": \"test\",\n\t\t\"ID\": \"user:example\",\n\t\t\"NS\": \"test\",\n\t\t\"exp\": 1723118226,\n\t\t\"iat\": 1723114626,\n\t\t\"iss\": \"SurrealDB\",\n\t\t\"jti\": \"3b3fe74a-955c-46d7-9400-363848912292\",\n\t\t\"nbf\": 1723114626\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Relations in SurrealDB\nDESCRIPTION: Demonstrates how to insert new relation records in SurrealDB. The method accepts a 'table' parameter for the relation table and 'data' containing relation details including 'in' and 'out' fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"insert_relation\",\n    \"params\": [\n        \"likes\",                   // (relation table)\n        {                          // data\n            \"in\": \"user:alice\",\n            \"out\": \"post:123\",\n            \"since\": \"2024-09-15T12:34:56Z\"\n        }\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": {\n        \"id\": \"likes:user:alice:post:123\",\n        \"in\": \"user:alice\",\n        \"out\": \"post:123\",\n        \"since\": \"2024-09-15T12:34:56Z\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 2,\n    \"method\": \"insert_relation\",\n    \"params\": [\n        null,                      // relation table is null\n        {                          // data\n            \"id\": \"follows:user:alice:user:bob\",\n            \"in\": \"user:alice\",\n            \"out\": \"user:bob\",\n            \"since\": \"2024-09-15T12:34:56Z\"\n        }\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 2,\n    \"result\": {\n        \"id\": \"follows:user:alice:user:bob\",\n        \"in\": \"user:alice\",\n        \"out\": \"user:bob\",\n        \"since\": \"2024-09-15T12:34:56Z\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 3,\n    \"method\": \"insert_relation\",\n    \"params\": [\n        \"likes\"  // Missing the data parameter\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 3,\n    \"error\": {\n        \"code\": -32602,\n        \"message\": \"Invalid parameters\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using array::remove Function in SurrealQL\nDESCRIPTION: The array::remove function removes an item from a specific position in an array. A negative index can be provided to specify a position relative to the end of the array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_40\n\nLANGUAGE: surql\nCODE:\n```\narray::remove(array, number) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::remove([1, 2, 3, 4, 5], 2);\n\n[ 1, 2, 4, 5 ]\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::remove([1, 2, 3, 4, 5], -2);\n\n[ 1, 2, 3, 5 ]\n```\n\n----------------------------------------\n\nTITLE: Using count() Function with Array Argument in SurrealQL\nDESCRIPTION: The count() function with an array argument counts the number of truthy items in the array. For counting all items regardless of truthiness, use array::len() instead.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/count.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\ncount(array) -> number\n```\n\n----------------------------------------\n\nTITLE: Using Select Method in PHP with SurrealDB SDK\nDESCRIPTION: This example demonstrates how to use the ->select() method to retrieve all records from a table and how to select a specific record using RecordId or StringRecordId.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/select.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Select all records from a table\n$people = $db->select('person');\n\n// Select a specific record from a table\n$person = $db->select(new RecordId('person', 'h5wxrf2ewk8xjxosxtyc'));\n$person = $db->select(new StringRecordId('person:h5wxrf2ewk8xjxosxtyc'));\n```\n\n----------------------------------------\n\nTITLE: Generic RecordId Implementation\nDESCRIPTION: Defines a generic version of RecordId for strongly-typed Id field access.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/data-types.mdx#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RecordIdOf<T> : RecordId\n{\n    public T Id { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid FOR Loop Modification Example\nDESCRIPTION: Demonstrates a limitation where variables cannot be modified inside a FOR loop.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/for.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nLET $init = [];\n\nFOR $num IN 1..=3 {\n\t$init += $num;\n};\n\nRETURN $init;\n```\n\n----------------------------------------\n\nTITLE: LIMIT and START Result Example in SurrealQL\nDESCRIPTION: The output result of using LIMIT and START clauses with an array in SurrealDB, showing the selected range of elements from the array (elements 5 through 9 in the 1-indexed array).\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/select.mdx#2025-04-16_snippet_18\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t5,\n\t6,\n\t7,\n\t8,\n\t9\n]\n```\n\n----------------------------------------\n\nTITLE: Defining .info() Method Signature in TypeScript for SurrealDB SDK\nDESCRIPTION: This snippet shows the method signature for the .info() method in the SurrealDB JavaScript SDK. It uses a generic type T for flexible return typing.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/info.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.info<T>()\n```\n\n----------------------------------------\n\nTITLE: Signing In as Database User in SurrealDB Golang SDK\nDESCRIPTION: This example demonstrates signing in as a database user. It includes username, password, namespace, and database in the Auth struct.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/signin.mdx#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Sign in to authentication `db` using the root user\n\tauthData := &surrealdb.Auth{\n\t\tUsername: \"root\", // use your setup username\n\t\tPassword: \"root\", // use your setup password\n        Namespace: \"test\", \n        Database: \"test\", \n\t}\n\ttoken, err := db.SignIn(authData)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n```\n\n----------------------------------------\n\nTITLE: Viewing Stored User Record with Hashed Password in SurrealDB\nDESCRIPTION: Example showing how a user record is stored in SurrealDB with the password securely hashed using Argon2. The root user can view all user records, but the passwords are securely stored using cryptographic hashing.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_21\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tid: user:qx2apv5oc8mh03wtah0q,\n\t\tname: 'Gerard',\n\t\tpass: '$argon2id$v=19$m=19456,t=2,p=1$j0ktTqUxRjOWYnwS5LoMFQ$2NcGkf5+IuLml6NorPy/Le6T8RppYXTXakwY5cDiZPY'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Using Class Tokenizer in SurrealQL Analyzer\nDESCRIPTION: This example demonstrates defining an analyzer with a class tokenizer, which splits text based on Unicode character class changes. It includes the analyzer definition and a sample usage with search::analyze().\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/analyzer.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER example_class TOKENIZERS class;\nsearch::analyze(\"example_class\", \"123abc!XYZ\");\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value in Array in SurrealQL\nDESCRIPTION: The array::min function returns the least value from an array of values. It can be used with arrays of any SurrealQL value type.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_34\n\nLANGUAGE: surql\nCODE:\n```\narray::min(array<any>) -> any\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::min([0, 1, 2]);\n\n0\n```\n\nLANGUAGE: surql\nCODE:\n```\narray::min([NONE, NULL, 9, 9.9]);\n\nNONE\n```\n\n----------------------------------------\n\nTITLE: Executing a Machine Learning Model in SurrealDB\nDESCRIPTION: Using the run method to execute a machine learning model. When using ML models (prefixed with 'ml::'), the version parameter is required. The example shows an image classifier receiving base64-encoded image data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"run\",\n    \"params\": [ \"ml::image_classifier\", \"v2.1\", [ \"image_data_base64\" ] ]\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Query\nDESCRIPTION: The corresponding SurrealQL query that gets executed when using the insert_relation() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/insert_relation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nINSERT RELATION INTO $table $data;\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Record Access in SurrealQL\nDESCRIPTION: An example of defining a basic record access method named 'account' with signup, signin, and duration settings for tokens and sessions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/record.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS account ON DATABASE TYPE RECORD\n\tSIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )\n\tDURATION FOR TOKEN 15m, FOR SESSION 12h\n;\n```\n\n----------------------------------------\n\nTITLE: Validating Single SurrealQL File\nDESCRIPTION: Command to validate a single SurrealQL file using the surreal validate command.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/validate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal validate user.surql\n```\n\n----------------------------------------\n\nTITLE: Running SurrealDB with Full Configuration in Docker\nDESCRIPTION: This command demonstrates a full configuration for running SurrealDB in Docker, including port mapping, volume mounting, authentication, and specifying the storage engine.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/docker.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --pull always -p 80:8000 -v /local-dir:/container-dir surrealdb/surrealdb:latest start --user root --pass root rocksdb:/container-dir/mydatabase.db\n```\n\n----------------------------------------\n\nTITLE: Using time::now Function in SurrealQL\nDESCRIPTION: The time::now function returns the current datetime as an ISO8601 timestamp.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\ntime::now() -> datetime\n```\n\n----------------------------------------\n\nTITLE: Deploying SurrealDB with Helm\nDESCRIPTION: Steps to deploy SurrealDB using Helm charts and configure initial credentials\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/kubernetes.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add surrealdb https://helm.surrealdb.com\nhelm repo update\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get -n tikv svc/basic-pd\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport TIKV_URL=tikv://basic-pd.tikv:2379\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --set surrealdb.path=$TIKV_URL --set surrealdb.unauthenticated=true --set image.tag=latest surrealdb-tikv surrealdb/surrealdb\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --set surrealdb.path=$TIKV_URL --set image.tag=latest surrealdb-tikv surrealdb/surrealdb\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Number in SurrealDB\nDESCRIPTION: The type::number function converts values into number format. It accepts decimal, float, int, number, or string as input.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::number(\"12345\");\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Scopes in SurrealDB with Python\nDESCRIPTION: Example showing how to authenticate using scopes in SurrealDB using Python client, including scope-specific properties.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/handling-authentication.mdx#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Authenticate with Scopes\ndb.signin({\n\t\"namespace\": 'surrealdb',\n\t\"database\": 'docs',\n\t\"scope\": 'user',\n\n\t# Also pass any properties required by the scope definition\n\t\"email\": 'info@surrealdb.com',\n\t\"password\": '123456'\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying SurrealDB installation\nDESCRIPTION: This command checks if SurrealDB is installed correctly by displaying the help information. It should be run after installation to confirm that the SurrealDB command-line tool is accessible.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/windows.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal help\n```\n\n----------------------------------------\n\nTITLE: Root Information Query\nDESCRIPTION: Example of querying root-level system information including users, namespaces, and system metrics.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/info.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nINFO FOR ROOT;\n```\n\nLANGUAGE: surql\nCODE:\n```\n{\n    accesses: {},\n    namespaces: {\n        ns: 'DEFINE NAMESPACE ns'\n    },\n    nodes: {\n        \"0e87c953-68d7-40e1-9090-3dfc404af25e\": 'NODE 0e87c953-68d7-40e1-9090-3dfc404af25e SEEN 1742869701355 ACTIVE'\n    },\n    system: {\n        available_parallelism: 14,\n        cpu_usage: 4.646921157836914f,\n        load_average: [\n            2.02734375f,\n            1.96728515625f,\n            1.95751953125f\n        ],\n        memory_allocated: 13466855,\n        memory_usage: 180961280,\n        physical_cores: 14,\n        threads: 32\n    },\n    users: {\n        root: \"DEFINE USER root ON ROOT PASSHASH '$argon2id$v=19$m=19456,t=2,p=1$9yvw6eHPjYWV0nEWFtSmYA$g46zgZgWROeI8fqxVekvxodqd+Q8D95sUqyjXnqzrR0' ROLES OWNER DURATION FOR TOKEN 1h, FOR SESSION NONE\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: User Sign-up in SurrealDB using C#\nDESCRIPTION: Signs up a new user to a specific authentication scope.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\ndb.SignUp(credentials)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Claims in Auth0 Action (Scope and Token)\nDESCRIPTION: JavaScript code for an Auth0 action to add custom claims required by SurrealDB, including namespace, database, scope, and token.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/integrate-auth0-as-authentication-provider.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexports.onExecutePostLogin = async (event, api) => {\n  if (event.authorization) {\n    // The claims in this block are expected by SurrealDB.\n    // These values should match your SurrealDB installation.\n    api.accessToken.setCustomClaim(`https://surrealdb.com/ns`, \"test\");\n    api.accessToken.setCustomClaim(`https://surrealdb.com/db`, \"test\");\n    // These values correspond to the names of the SCOPE and TOKEN resources\n    // which will be created in SurrealDB during the next section.\n    api.accessToken.setCustomClaim(`https://surrealdb.com/sc`, \"user\");\n    api.accessToken.setCustomClaim(`https://surrealdb.com/tk`, \"auth0\");\n\n    // In this block, we will add additional claims which are not required by SurrealDB.\n    // These claims can be used from SurrealQL to implement application logic.\n    // In this example, we will add the data that we will store for each user.\n    // We will also use some of this data to perform authorization.\n    api.accessToken.setCustomClaim(`https://surrealdb.com/email`, event.user.email);\n    api.accessToken.setCustomClaim(`https://surrealdb.com/email_verified`, event.user.email_verified);\n    api.accessToken.setCustomClaim(`https://surrealdb.com/name`, event.user.name);\n    api.accessToken.setCustomClaim(`https://surrealdb.com/nickname`, event.user.nickname);\n    api.accessToken.setCustomClaim(`https://surrealdb.com/picture`, event.user.picture);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using array::last function in SurrealQL\nDESCRIPTION: The array::last function returns the last value from an array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_26\n\nLANGUAGE: surql\nCODE:\n```\narray::last(array) -> any\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::last([ 's', 'u', 'r', 'r', 'e', 'a', 'l' ]);\n\n\"l\"\n```\n\n----------------------------------------\n\nTITLE: Using array::reverse Function in SurrealQL\nDESCRIPTION: The array::reverse function reverses the order of elements in an array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_42\n\nLANGUAGE: surql\nCODE:\n```\narray::reverse(array) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::reverse([ 1, 2, 3, 4, 5 ]);\n\n[ 5, 4, 3, 2, 1 ]\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure Example\nDESCRIPTION: Shows the recommended folder structure for a SurrealDB project\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/start.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmy-surrealdb-project/\n├── src/\n│   ├── start-db.ts\n│   ├── create-user.ts\n│   ├── query-user.ts\n│   ├── update-user.ts\n│   ├── delete-user.ts\n│   ├── index.ts\n└── utils/\n    └── surreal.ts\n```\n\n----------------------------------------\n\nTITLE: String Lowercase Conversion in SurrealQL\nDESCRIPTION: Shows how to convert a string to lowercase.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::lowercase('THIS IS A TEST');\n```\n\n----------------------------------------\n\nTITLE: Executing SurrealQL Queries with PHP\nDESCRIPTION: This example demonstrates how to execute multiple SurrealQL statements in one query call with PHP. It shows creating a record and then selecting data with variable substitution, along with how to access the query results.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/sdks/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Assign the variable on the connection\n$result = db->query(\n\t'CREATE person SET name = \"John\"; SELECT * FROM type::table($tb);',\n\t[ \"tb\" => \"person\" ]\n);\n\n// Get the first result from the first query\n$created = $result[0]->result[0];\n\n// Get all of the results from the second query\n$people = $result[1]->result;\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for UPDATE Statement in SurrealQL\nDESCRIPTION: This snippet shows how to use the TIMEOUT keyword in an UPDATE statement to specify a maximum duration for the operation. If the statement exceeds this duration, the transaction will fail and return an error without updating any records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/update.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE person \n\tSET important = true \n\tWHERE ->knows->person->(knows WHERE influencer = true) \n\tTIMEOUT 5s;\n```\n\n----------------------------------------\n\nTITLE: Complete Delete Implementation Example in Rust\nDESCRIPTION: Comprehensive example showing how to delete single and multiple records using the SurrealDB Rust SDK. Demonstrates connection setup, authentication, and both single and bulk record deletion operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/delete.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse surrealdb::engine::any::connect;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::opt::Resource;\nuse surrealdb::RecordId;\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Person {\n    id: RecordId,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = connect(\"ws://localhost:8000\").await?;\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    // Create three `person` records\n    db.create(Resource::from((\"person\", \"one\"))).await?;\n    db.create(Resource::from((\"person\", \"two\"))).await?;\n    db.create(Resource::from((\"person\", \"three\"))).await?;\n\n    let deleted_one: Option<Person> = db.delete((\"person\", \"one\")).await?;\n    dbg!(deleted_one);\n    let deleted_rest: Vec<Person> = db.delete(\"person\").await?;\n    dbg!(deleted_rest);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Using session::ns() to retrieve current namespace in SurrealQL\nDESCRIPTION: The session::ns() function returns the name of the currently selected namespace in the SurrealDB session.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/session.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nsession::ns() -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN session::ns();\n\n\"my_ns\"\n```\n\n----------------------------------------\n\nTITLE: Defining Book Analyzer in SurrealQL\nDESCRIPTION: This snippet defines an analyzer named 'book_analyzer' with specific tokenizers and filters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/search.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER book_analyzer TOKENIZERS blank, class, camel, punct FILTERS snowball(english);\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB Shell\nDESCRIPTION: Command to connect to SurrealDB's interactive shell with root credentials and pretty printing enabled.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/integrate-aws-cognito-as-authentication-provider.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql -u root -p root --pretty\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Export Method TypeScript Definition\nDESCRIPTION: TypeScript method signature for the export function showing available options including tables and functions configuration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/export.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.export(options?: {\n  tables?: string[] | boolean;\n  functions?: boolean;\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structures for Person Records in SurrealDB\nDESCRIPTION: Two structs for handling person data: PersonData for incoming request data with just a name field, and Person for database records that include both name and record ID. These structures are used for serialization and deserialization.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Serialize, Deserialize, Clone)]\npub struct PersonData {\n    name: String,\n}\n\n#[derive(Serialize, Deserialize)]\npub struct Person {\n    name: String,\n    id: RecordId,\n}\n```\n\n----------------------------------------\n\nTITLE: KILL Statement Basic Syntax\nDESCRIPTION: The fundamental syntax for the KILL statement that accepts a UUID value\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/kill.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nKILL @value;\n```\n\n----------------------------------------\n\nTITLE: Explicit Casting of Valid Datetime Strings in SurrealDB\nDESCRIPTION: Uses the <datetime> cast operator to explicitly convert a properly formatted string to a datetime value, which will validate the format and throw an error if invalid.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/datetimes.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nCREATE event SET time = <datetime>\"2023-07-03T07:18:52.841147Z\";\n```\n\n----------------------------------------\n\nTITLE: Limiting Results in SurrealQL (Neo4j Equivalent)\nDESCRIPTION: Demonstrates how to limit the number of returned records in SurrealQL compared to Neo4j's LIMIT clause. Restricts the query to return only the specified number of records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_14\n\nLANGUAGE: SurrealQL\nCODE:\n```\nSELECT * FROM person LIMIT 10\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Experimental Features in SurrealDB SQL\nDESCRIPTION: These commands demonstrate how to enable multiple experimental capabilities (record_references and graphql) either through environment variables or command line flags when launching SurrealDB SQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/sql.mdx#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nSURREAL_CAPS_ALLOW_EXPERIMENTAL=\"record_references, graphql\" surreal sql ...\n\n-- OR \n\nsurreal sql -e [CONNECTION_STRING] --allow-experimental record_references,graphql\n```\n\n----------------------------------------\n\nTITLE: Numeric Sorting of Text Data in SurrealDB\nDESCRIPTION: This example illustrates how to use the NUMERIC keyword in SurrealDB to sort strings that parse into numbers as actual numbers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nSELECT VALUE val FROM data ORDER BY val NUMERIC;\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Greeting Function in SurrealQL\nDESCRIPTION: Demonstrates how to define a basic custom function that takes a name argument and returns a greeting string.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/function.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FUNCTION fn::greet($name: string) {\n\tRETURN \"Hello, \" + $name + \"!\";\n}\n\n-- Returns: \"Hello, Tobie!\"\nRETURN fn::greet(\"Tobie\");\n```\n\n----------------------------------------\n\nTITLE: Generating Random Float Numbers with rand() in SurrealQL\nDESCRIPTION: The rand() function generates a random floating point number between 0 and 1. It can be used in RETURN statements or to randomize ordering in SELECT statements.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/rand.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nrand() -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand();\n\n0.7062321084863658\n```\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM [{ age: 33 }, { age: 45 }, { age: 39 }] ORDER BY rand();\n\n\n[\n\t{\n\t\tage: 45\n\t},\n\t{\n\t\tage: 39\n\t},\n\t{\n\t\tage: 33\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining SCOPE Syntax in SurrealQL\nDESCRIPTION: This snippet shows the syntax for the DEFINE SCOPE statement in SurrealQL. It includes optional clauses for OVERWRITE and IF NOT EXISTS, as well as required parameters for name, session duration, signup expression, and signin expression.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/scope.mdx#2025-04-16_snippet_0\n\nLANGUAGE: SurrealQL\nCODE:\n```\nDEFINE SCOPE [ OVERWRITE | IF NOT EXISTS ] @name SESSION @duration SIGNUP @expression SIGNIN @expression [ COMMENT @string ]\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Graph Relationships in SurrealQL\nDESCRIPTION: Creates two person records that like each other, forming a circular relationship. This demonstrates a scenario that could cause unbounded recursion when traversed without limits.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_54\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:one, person:two;\nRELATE person:one->likes->person:two;\nRELATE person:two->likes->person:one;\n-- Open-ended range\nperson:one.{..}->likes->person;\n```\n\n----------------------------------------\n\nTITLE: Using array::find function in SurrealQL\nDESCRIPTION: The array::find function returns the first occurrence of a value in an array or NONE if the array doesn't contain the value. It can also take a closure for custom searching.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_16\n\nLANGUAGE: surql\nCODE:\n```\narray::find(array, value) -> value | NONE\narray::find(array, @closure) -> value | NONE\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::find(['a', 'b', 'c', 'b', 'a'], 'b');\n-- b\n\nRETURN [1, 2, 3].find(4);\n-- [NONE]\n```\n\nLANGUAGE: surql\nCODE:\n```\n-- Find a number 3 or greater\nRETURN [1, 2, 3].find(|$num| $num > 3);\n\n-- Find the first adventurer good enough for the task\n[\n    { strength: 15, intelligence: 6,  name: \"Dom the Magnificent\" },\n    { strength: 10, intelligence: 15, name: \"Mardine\"             },\n    { strength: 20, intelligence: 3,  name: \"Gub gub\"             },\n    { strength: 10, intelligence: 18, name: \"Lumin695\"            }\n].find(|$c| $c.strength > 9 AND $c.intelligence > 9);\n```\n\n----------------------------------------\n\nTITLE: Executing a GraphQL Query with Variables in SurrealDB\nDESCRIPTION: Advanced GraphQL query execution with variables and a named operation. This example demonstrates passing a user ID variable to fetch a specific user's information using a named query operation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"graphql\",\n    \"params\": [\n        {\n            \"query\": \"query GetUser($id: ID!) { user(id: $id) { id name } }\",\n            \"variables\": { \"id\": \"user:1\" },\n            \"operationName\": \"GetUser\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Hamming Distance in SurrealQL\nDESCRIPTION: The string::distance::hamming function calculates the Hamming distance between two strings of equal length. It requires two input strings and returns an integer representing the distance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nLET $first     = \"In a hole in the ground there lived a hobbit\";\nLET $same      = \"In a hole in the ground there lived a hobbit\";\nLET $close     = \"In a hole in the GROUND there lived a Hobbit\";\nLET $different = \"A narrow passage holds four hidden treasures\";\nLET $short     = \"Hi I'm Brian\";\n\n-- Returns 0\nstring::distance::hamming($first, $same);\n-- Returns 7\nstring::distance::hamming($first, $close);\n-- Returns 40\nstring::distance::hamming($first, $different);\n-- Error: strings must be of equal length\nstring::distance::hamming($first, $short);\n```\n\n----------------------------------------\n\nTITLE: Raw Response Body Configuration\nDESCRIPTION: Example of configuring an endpoint to return raw byte responses.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/api.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE API \"/test\"\n    FOR get \n        MIDDLEWARE\n            api::res::raw_body(true)\n        THEN {\n            RETURN {\n                headers: {\n                    \"requested-at\": time::now()\n                },\n                body: SELECT * FROM person\n            };\n        };\n```\n\n----------------------------------------\n\nTITLE: Extracting Table Name with record::tb() in SurrealQL\nDESCRIPTION: The record::tb() function extracts and returns the table name from a SurrealDB Record ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/record.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nRETURN record::tb(person:tobie);\n\n\"person\"\n```\n\n----------------------------------------\n\nTITLE: Finding Bottom Values in Array with SurrealQL\nDESCRIPTION: The math::bottom function returns the bottom X set of numbers in a set of numbers. It takes an array of numbers and a count as arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::bottom([1, 2, 3], 2);\n\n[ 2, 1 ]\n```\n\n----------------------------------------\n\nTITLE: Array Complement Operation in SurrealQL\nDESCRIPTION: Function that returns elements from the first array that are not present in the second array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\narray::complement(array, array) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::complement([1, 2, 3, 4], [3, 4, 5, 6]);\n```\n\n----------------------------------------\n\nTITLE: Selecting Records using Record ID\nDESCRIPTION: Shows different methods to select a record using the select() method, either with a direct ID reference or using RecordID/RecordStringId objects.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/core/data-querying.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$person = $db->select($person->id);\n```\n\nLANGUAGE: php\nCODE:\n```\n// using the StringRecordId\n$id = StringRecordId::create(\"person:tobie\");\n$person = $db->select($id);\n\n// using the RecordId\n$id = RecordId::create(\"person\", \"tobie\");\n$person = $db->select($id);\n```\n\n----------------------------------------\n\nTITLE: Deleting Graph Edges in SurrealQL\nDESCRIPTION: Demonstrates how to delete graph edges between two records in the database using the DELETE statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/delete.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nRELATE person:tobie->bought->product:iphone;\n\nDELETE person:tobie->bought WHERE out=product:iphone;\n```\n\n----------------------------------------\n\nTITLE: Generating Random Datetime Values with rand::time() in SurrealQL\nDESCRIPTION: The rand::time() function generates random datetime values. Without parameters, it returns any random datetime. You can specify a range using unix timestamps or datetime values to constrain the result.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/rand.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nrand::time() -> datetime\nrand::time(number, number) -> datetime\nrand::time(datetime, datetime) -> datetime\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::time();\n\n-- d'2026-09-07T04:27:53Z'\n\nRETURN rand::time(198371, 1223138713);\n\n-- d'1991-01-13T23:27:17Z'\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::time(d'1970-01-01', d'2000-01-01');\n\n-- d'1999-05-29T17:02:16Z\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Data with DELETE in SurrealDB\nDESCRIPTION: Illustrates using the DELETE statement with a condition and returning deleted records in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/start.mdx#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nDELETE article WHERE author.name.first = 'David' RETURN BEFORE;\n```\n\n----------------------------------------\n\nTITLE: Improving Readability with Multi-line Function Calls in SurrealDB\nDESCRIPTION: A technique to improve readability of complex queries in SurrealDB before version 2.0 by spreading the nested function calls across multiple lines.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\narray::len(\n    array::clump(\n        array::distinct(\n            array::flatten([[1,2,3],[1,4,6],[4,2,4]])\n        )\n    , 2)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Record with Random ID in SurrealQL\nDESCRIPTION: Demonstrates how to create a record without specifying the full ID, allowing SurrealDB to assign a random identifier.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE company;\n```\n\n----------------------------------------\n\nTITLE: Defining insertRelation Method Syntax in PHP\nDESCRIPTION: Specifies the syntax for the insertRelation method in the SurrealDB PHP SDK. The method takes two parameters: $thing (the target table) and $data (the relation data to insert).\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/insertRelation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$db->insertRelation($thing, $data)\n```\n\n----------------------------------------\n\nTITLE: Converting Values to UUID using type::uuid\nDESCRIPTION: Function that converts string values into UUID format. Accepts either string or UUID input and returns a UUID value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_19\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::uuid(\"0191f946-936f-7223-bef5-aebbc527ad80\");\n```\n\n----------------------------------------\n\nTITLE: Switching to a Specific Database in SurrealQL\nDESCRIPTION: This example shows how to switch to the 'test' database using the USE statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/use.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nUSE DB test; -- Switch to the 'test' Database\n```\n\n----------------------------------------\n\nTITLE: Opening Interactive SQL Shell\nDESCRIPTION: Command to connect to a running SurrealDB instance and open an interactive SQL shell with namespace and database specification.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql --endpoint http://localhost:8000 --namespace ns --database db --username root --password root --pretty\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Delete Query\nDESCRIPTION: The underlying SurrealQL query that the delete() method generates, including the RETURN BEFORE clause to return deleted items.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/delete.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nDELETE FROM $resource RETURN BEFORE;\n```\n\n----------------------------------------\n\nTITLE: Defining Token with DEFINE TOKEN Statement in SurrealQL\nDESCRIPTION: Syntax for the DEFINE TOKEN statement in SurrealQL, used to configure token verification for different scopes and types.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/token.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TOKEN [ OVERWRITE | IF NOT EXISTS ] @name ON [ NAMESPACE | DATABASE | SCOPE @scope ] TYPE @type VALUE @value [ COMMENT @string ]\n```\n\n----------------------------------------\n\nTITLE: Viewing User Records as Root User in SurrealDB\nDESCRIPTION: This snippet shows how a root user can view the 'user' table, including hashed passwords. It demonstrates that passwords are securely stored using argon2 hashing.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_21\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tid: user:qx2apv5oc8mh03wtah0q,\n\t\tname: 'Gerard',\n\t\tpass: '$argon2id$v=19$m=19456,t=2,p=1$j0ktTqUxRjOWYnwS5LoMFQ$2NcGkf5+IuLml6NorPy/Le6T8RppYXTXakwY5cDiZPY'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Server\nDESCRIPTION: Command to start a local SurrealDB server with root user authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/setup.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root\n```\n\n----------------------------------------\n\nTITLE: Using time::from::micros Function in SurrealQL\nDESCRIPTION: The time::from::micros function calculates a datetime based on the microseconds since January 1, 1970 0:00:00 UTC.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_24\n\nLANGUAGE: surql\nCODE:\n```\ntime::from::micros(number) -> datetime\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::from::micros(1000000);\n\nd\"1970-01-01T00:00:01Z\"\n```\n\n----------------------------------------\n\nTITLE: Using Complex Literals in SurrealQL\nDESCRIPTION: Shows how to define literals with multiple types and rich data structures in SurrealQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/literals.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nLET $flexible_param: datetime | uuid | \"N/A\" = \"N/A\";\nLET $flexible_param: datetime | uuid | \"N/A\" = <datetime>\"2024-09-01\";\n```\n\nLANGUAGE: surql\nCODE:\n```\nLET $status: \"Ok\" | { err: string } = { err: \"Forgot to plug it in\" };\n```\n\n----------------------------------------\n\nTITLE: Using string::similarity::fuzzy Function in SurrealQL\nDESCRIPTION: Examples demonstrating the use of string::similarity::fuzzy function to compare string similarities with numeric scores.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_34\n\nLANGUAGE: surql\nCODE:\n```\n-- returns 51\nRETURN string::similarity::fuzzy(\"DB\", \"DB\");\n-- returns 47\nRETURN string::similarity::fuzzy(\"DB\", \"db\");\n```\n\n----------------------------------------\n\nTITLE: Using Mathematical Constants in SurrealDB Queries\nDESCRIPTION: Demonstration of how to use built-in mathematical constants in SurrealDB queries. These constants are accessed using their paths and do not require parentheses.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nRETURN [math::pi, math::tau, math::e];\n```\n\n----------------------------------------\n\nTITLE: Defining TiDB Cluster Configuration\nDESCRIPTION: This YAML configuration defines a TiDB cluster with PD and TiKV components, including resource requests, node selectors, and affinity rules for high availability.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/azure.mdx#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pingcap.com/v1alpha1\nkind: TidbCluster\nmetadata:\n  name: sdb-datastore\nspec:\n  version: v6.5.0\n  timezone: UTC\n  configUpdateStrategy: RollingUpdate\n  pvReclaimPolicy: Delete\n  enableDynamicConfiguration: true\n  schedulerName: default-scheduler\n  topologySpreadConstraints:\n  - topologyKey: topology.kubernetes.io/zone\n  helper:\n    image: alpine:3.16.0\n  pd:\n    baseImage: pingcap/pd\n    maxFailoverCount: 0\n    replicas: 3\n    storageClassName: managed-csi-premium\n    requests:\n      cpu: 500m\n      storage: 10Gi\n      memory: 1Gi\n    config: |\n      [dashboard]\n        internal-proxy = true\n      [replication]\n        location-labels = [\"topology.kubernetes.io/zone\", \"kubernetes.io/hostname\"]\n        max-replicas = 3\n    nodeSelector:\n      dedicated: pd\n    tolerations:\n    - effect: NoSchedule\n      key: dedicated\n      operator: Equal\n      value: pd\n    affinity:\n      podAntiAffinity:\n        requiredDuringSchedulingIgnoredDuringExecution:\n        - labelSelector:\n            matchExpressions:\n            - key: app.kubernetes.io/component\n              operator: In\n              values:\n              - pd\n          topologyKey: kubernetes.io/hostname\n  tikv:\n    baseImage: pingcap/tikv\n    maxFailoverCount: 0\n    replicas: 3\n    storageClassName: managed-csi-premium\n    requests:\n      cpu: 1\n      storage: 10Gi\n      memory: 2Gi\n    config: {}\n    nodeSelector:\n      dedicated: tikv\n    tolerations:\n    - effect: NoSchedule\n      key: dedicated\n      operator: Equal\n      value: tikv\n    affinity:\n      podAntiAffinity:\n        requiredDuringSchedulingIgnoredDuringExecution:\n        - labelSelector:\n            matchExpressions:\n            - key: app.kubernetes.io/component\n              operator: In\n              values:\n              - tikv\n          topologyKey: kubernetes.io/hostname\n  tidb:\n    replicas: 0\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Query\nDESCRIPTION: The corresponding SurrealQL query that gets executed when using the delete method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/delete.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nDELETE $thing;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of .Unset() Method in SurrealDB Golang SDK\nDESCRIPTION: A simple example showing how to remove a parameter named 'name' from the current SurrealDB connection using the .Unset() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/unset.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ndb.Unset(\"name\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Day from Datetime in SurrealQL\nDESCRIPTION: This example shows how to use the time::day function to extract the day as a number from a given datetime.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::day(d\"2021-11-01T08:30:17+00:00\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating VALUE Clause Behavior in SurrealDB\nDESCRIPTION: This snippet shows how the VALUE clause sets the value every time a record is modified, but does not recalculate in a SELECT statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD updated ON TABLE user VALUE time::now();\n\nCREATE user:one;\nSELECT * FROM ONLY user:one;\n-- Sleep for one second\nSLEEP 1s;\n-- `updated` is still the same\nSELECT * FROM ONLY user:one;\n```\n\n----------------------------------------\n\nTITLE: Defining a Complex Literal Type for Full Text Search in SurrealDB\nDESCRIPTION: Demonstrates defining a field with a complex union type containing multiple structured options. This example creates a filter field for use with full text search functionality.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_29\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD filter ON TABLE search_settings TYPE\n      \"None\"\n    | { type: \"Ascii\" }\n    | { type: \"EdgeNgram\", from: int, to: int }\n    | { type: \"Lowercase\" }\n    | { type: \"Ngram\", from: int, to: int }\n    | { type: \"Snowball\", language: string }\n    | { type: \"Uppercase\" };\n```\n\n----------------------------------------\n\nTITLE: NGram Filter Example in SurrealQL\nDESCRIPTION: Creates an analyzer using the ngram filter with min length 1 and max length 4, which generates all possible substrings within the specified length range.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_20\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER example_analyzer FILTERS ngram(1,4);\nsearch::analyze(\"example_analyzer\", \"cars!\");\n```\n\n----------------------------------------\n\nTITLE: Basic IF ELSE Usage in SurrealQL\nDESCRIPTION: Examples of basic IF ELSE usage in SurrealQL, showing both legacy and modern syntax.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/ifelse.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n// Original syntax\nIF 9 = 9 THEN RETURN \"Nine is indeed nine\" END;\n\n// New scope syntax\nIF 9 = 9 { RETURN 'Nine is indeed nine' };\n```\n\n----------------------------------------\n\nTITLE: Implementing New User Creation\nDESCRIPTION: Creates an endpoint for generating new record users with random credentials and JWT tokens.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Serialize, Deserialize)]\nstruct Params<'a> {\n    name: &'a str,\n    pass: &'a str,\n}\n\n#[get(\"/new_user\")]\npub async fn make_new_user() -> Result<String, Error> {\n    let name = rand::random::<FirstName>().to_string();\n    let pass = rand::random::<FirstName>().to_string();\n    let jwt = DB\n        .signup(Record {\n            access: \"account\",\n            namespace: \"namespace\",\n            database: \"database\",\n            params: Params {\n                name: &name,\n                pass: &pass,\n            },\n        })\n        .await?\n        .into_insecure_token();\n    Ok(format!(\"New user created!\\n\\nName: {name}\\nPassword: {pass}\\nToken: {jwt}\\n\\nTo log in, use this command:\\n\\nsurreal sql --namespace namespace --database database --pretty --token \\\"{jwt}\\\"\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Signing in as a Record User using JavaScript SDK\nDESCRIPTION: Authenticates an existing record user by providing email and password. Uses the defined signin logic to verify credentials and establish a session.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/authentication.mdx#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = new Surreal();\ndb.connect('ws://localhost:8000/rpc', {\n\tnamespace: 'test',\n\tdatabase: 'test',\n});\n\ndb.signin({\n\tnamespace: 'test',\n\tdatabase: 'test',\n\n\t// Provide the name of the access method\n\taccess: 'user',\n\n\t// Provide the variables used by the signin query\n\tvariables: {\n    \temail: 'john.doe@example.com',\n    \tpassword: 'VerySecurePassword!',\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Records in SurrealDB\nDESCRIPTION: Example of deleting a specific record from SurrealDB using its record ID. The response includes the deleted record's data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"delete\",\n    \"params\": [ \"person:8s0j0bbm3ngrd5c9bx53\" ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": {\n        \"active\": true,\n        \"id\": \"person:8s0j0bbm3ngrd5c9bx53\",\n        \"last_updated\": \"2023-06-16T08:34:25Z\",\n        \"name\": \"John Doe\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Records in SurrealDB using .NET SDK\nDESCRIPTION: Deletes all records in a table or a specific record from the database. It requires a table name or a RecordId to delete.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/data-manipulation.mdx#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Delete(resource)\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Delete all records from a table\nawait db.Delete(\"person\");\n\n// Delete a specific record from a table\nawait db.Delete((\"person\", \"h5wxrf2ewk8xjxosxtyc\"));\n```\n\n----------------------------------------\n\nTITLE: Basic Table Definition in SurrealQL\nDESCRIPTION: Simple example of declaring a basic table named 'reading'\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/table.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE reading;\n```\n\n----------------------------------------\n\nTITLE: Subtracting Vectors in SurrealDB\nDESCRIPTION: The vector::subtract function performs element-wise subtraction between two vectors. It takes two arrays as input and returns a new array with the differences.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::subtract([4, 5, 6], [3, 2, 1]);\n```\n\n----------------------------------------\n\nTITLE: Filtering Records in SurrealQL (Neo4j Equivalent)\nDESCRIPTION: Demonstrates how to filter records using a WHERE clause in SurrealQL compared to Neo4j's filtering. This query selects names of records that match a specific condition.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_10\n\nLANGUAGE: SurrealQL\nCODE:\n```\nSELECT name FROM person WHERE name = \"Jane\"\n```\n\n----------------------------------------\n\nTITLE: Using SHOW Statement in SurrealQL\nDESCRIPTION: This example demonstrates how to use the SHOW statement in SurrealQL. It includes defining a change feed, creating records, and then replaying changes since a specific date or versionstamp.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/show.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Define the change feed and its duration\nDEFINE TABLE reading CHANGEFEED 3d;\n\n-- Create some records in the reading table\nCREATE reading SET story = \"Once upon a time\";\nCREATE reading SET story = \"there was a database\";\n\n-- Replay changes to the reading table since a date\nSHOW CHANGES FOR TABLE reading SINCE d\"2023-09-07T01:23:52Z\" LIMIT 10;\n-- Replay changes to the reading table since a versionstamp\nSHOW CHANGES FOR TABLE reading SINCE 1 LIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Defining select() Method Syntax in Python\nDESCRIPTION: Shows the basic syntax for the select() method in the SurrealDB Python SDK\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/select.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.select(thing)\n```\n\n----------------------------------------\n\nTITLE: Deleting Records in SurrealQL (Neo4j Equivalent)\nDESCRIPTION: Demonstrates how to delete specific records in SurrealQL compared to Neo4j's DELETE operation. This removes records that match the specified condition.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_18\n\nLANGUAGE: SurrealQL\nCODE:\n```\nDELETE person WHERE name = \"Jane\"\n```\n\n----------------------------------------\n\nTITLE: Using OVERWRITE Clause in GraphQL Configuration in SurrealQL\nDESCRIPTION: This snippet demonstrates how to use the OVERWRITE clause to redefine an existing GraphQL configuration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE CONFIG OVERWRITE GRAPHQL TABLES INCLUDE user, post FUNCTIONS NONE;\n```\n\n----------------------------------------\n\nTITLE: Using time::week Function in SurrealQL\nDESCRIPTION: The time::week function extracts the week as a number from a datetime, or from the current date if no datetime argument is present.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_20\n\nLANGUAGE: surql\nCODE:\n```\ntime::week(option<datetime>) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::week(d\"2021-11-01T08:30:17+00:00\");\n\n44\n```\n\n----------------------------------------\n\nTITLE: Output for Third Degree Friends Query in SurrealDB\nDESCRIPTION: Shows the structured output of a query that returns third-degree connections in a friend network.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_31\n\nLANGUAGE: surql\nCODE:\n```\n{\n\toriginal_person: person:1,\n\tthird_degree_friends: [\n\t\tperson:13,\n\t\tperson:3,\n\t\tperson:14,\n\t\tperson:10,\n\t\tperson:8,\n\t\tperson:3,\n\t\tperson:3,\n\t\tperson:14\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Recursive Graph Traversal with Partial Path Repetition in SurrealQL\nDESCRIPTION: Uses parentheses to specify which part of the path should be repeated in the recursive traversal. This query repeats the '->to->city' portion twice, then appends '->to.*' once at the end.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_49\n\nLANGUAGE: surql\nCODE:\n```\nSELECT @.{2}(->to->city)->to.* AS third_journey FROM city:1;\n```\n\n----------------------------------------\n\nTITLE: Killing a Running Live Query with SurrealDB JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to kill a running live query using the db.kill() method. It takes the UUID of the live query as an argument to terminate the specified query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/streaming.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.kill(queryUuid)\n```\n\n----------------------------------------\n\nTITLE: Defining Public-Key Token in SurrealQL\nDESCRIPTION: Example of defining a token using a public-key cryptography algorithm (RS256) for database authorization in SurrealQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/token.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nUSE NS abcum DB app_vitalsense;\n\nDEFINE TOKEN token_name\n  ON DATABASE\n  TYPE RS256\n  VALUE \"-----BEGIN PUBLIC KEY-----\nMUO52Me9HEB4ZyU+7xmDpnixzA/CUE7kyUuE0b7t38oCh+sQouREqIjLwgHhFdhh3cQAwr6GH07D\nThioYrZL8xATJ3Youyj8C45QnZcGUif5PkpWXDi0HJSoMFekbW6Pr4xuqIqb2LGxGDVJcLZwJ2AS\nGtu2UAfPXbBD3ffiad393M22g1iHM80YaNi+xgswG7qtXE4lR/Lt4s0MeKKX7stdWI1VIsoB+y3i\nr/OWUvJPjjDNbAsyy8tQmxydv+FUnLEP9TNT4AhN4DXcJ+XsDtW7OWt4EdSVDeKpGbIMvIrh1Pe+\nNilj8UHNyNDHa2AjK3seMo6CMvaIQJKj5o4xGFblFGwvvPD03SbuQLs1FdRjsZCeWLdYeQ3JDHE9\nsFG7DCXlpMJcaYT1mf4XHJ0gPekNLQyewTY3Vxf7FgV3GCNjV20kcDFgJA2+iVW2wSrb+txD1ycE\nkbi8jh0pedWwE40VQWaTh/8eAvX7IHWya/AEro25mq+m6vktNZLbvLphhp586kJK3Tdt3YjpkPre\nM3nkFWOWurIyKbtIV9JemfwCgt89sNV45dTlnEDEZFFGnIgDnWgx3CUo4XmhICEQU8+tklw9jJYx\niCTjhbIDEBHySSSc/pQ4ftHQmhToTlQeOdEy4LYiaEIgl1X+hzRH1hBYvWlNKe4EY1nMCKcjgt0=\n-----END PUBLIC KEY-----\"\n;\n```\n\n----------------------------------------\n\nTITLE: Validating Domain Names in SurrealQL\nDESCRIPTION: The string::is::domain function checks if a string is a valid domain name. It takes a string input and returns a boolean.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_18\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::domain(\"surrealdb.com\");\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: Regex Matching in SurrealDB\nDESCRIPTION: This example shows how to use the string::matches() function in SurrealDB for regex matching on strings.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\n-- true\nstring::matches(\"Cat\", \"[HC]at\");\n-- Also true\nstring::matches(\"Hat\", \"[HC]at\");\n```\n\n----------------------------------------\n\nTITLE: Comparing Fuzzy Similarity Scores for Different String Lengths in SurrealQL\nDESCRIPTION: Examples showing how the fuzzy similarity score varies with string length and content.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_35\n\nLANGUAGE: surql\nCODE:\n```\n-- returns 51\nRETURN string::similarity::fuzzy(\"DB\", \"DB\");\n-- returns 2997\nRETURN string::similarity::fuzzy(\n  \"Surreal Cloud Beta is now live! We are excited to announce that we are inviting users from the waitlist to join. Stay tuned for your invitation!\", \"Surreal Cloud Beta is now live! We are excited to announce that we are inviting users from the waitlist to join. Stay tuned for your invitation!\"\n);\n-- returns 151 despite nowhere close to exact match\nRETURN string::similarity::fuzzy(\n  \"Surreal Cloud Beta is now live! We are excited to announce that we are inviting users from the waitlist to join. Stay tuned for your invitation!\", \"Surreal\"\n);\n```\n\n----------------------------------------\n\nTITLE: Authenticating with JWT Token in SurrealDB (JSON)\nDESCRIPTION: This example shows how to authenticate a user against SurrealDB using a JWT token. The token contains encoded authentication information for the user session.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"authenticate\",\n    \"params\": [ \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTdXJyZWFsREIiLCJpYXQiOjE1MTYyMzkwMjIsIm5iZiI6MTUxNjIzOTAyMiwiZXhwIjoxODM2NDM5MDIyLCJOUyI6InRlc3QiLCJEQiI6InRlc3QiLCJTQyI6InVzZXIiLCJJRCI6InVzZXI6dG9iaWUifQ.N22Gp9ze0rdR06McGj1G-h2vu6a6n9IVqUbMFJlOxxA\" ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Sanitizing HTML Content in SurrealQL\nDESCRIPTION: The string::html::sanitize function sanitizes HTML code to prevent dangerous HTML injection while keeping safe HTML syntax intact. It takes a string input and returns the sanitized HTML string.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::html::sanitize(\"<h1>Safe Title</h1><script>alert('XSS')</script><p>Safe paragraph. Not safe <span onload='logout()'>event</span>.</p>\");\n\n['<h1>Safe Title</h1><p>Safe paragraph. Not safe <span>event</span>.</p>']\n```\n\n----------------------------------------\n\nTITLE: Executing SurrealQL Functions with the Run Method in SurrealDB .NET SDK\nDESCRIPTION: The Run method allows executing SurrealQL functions from the .NET SDK. It accepts a function name, an optional version parameter, and optional arguments to pass to the function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/run.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Run(name, version, args)\n```\n\n----------------------------------------\n\nTITLE: Using math::min Function in SurrealQL\nDESCRIPTION: Returns the smallest number from an array of numbers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_19\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::min([ 26.164, 13.746189, 23, 16.4, 41.42 ]);\n```\n\n----------------------------------------\n\nTITLE: Using time::month Function in SurrealQL\nDESCRIPTION: The time::month function extracts the month as a number from a datetime, or from the current date if no datetime argument is present.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\ntime::month(option<datetime>) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::month(d\"2021-11-01T08:30:17+00:00\");\n\n11\n```\n\n----------------------------------------\n\nTITLE: Avoiding Common Record Type Definition Issues in SurrealQL\nDESCRIPTION: Explains how to properly define record type fields, warning against using record<any> which would restrict records to a table literally named 'any'.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_20\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD possessions ON TABLE person TYPE option<array<record<any>>>;\n\n-- Won't work, 'book' and 'house' are not of table 'any'\nCREATE person SET\n    possessions = [ book:one, house:one ];\n\n-- Actually expects this, which is probably\n-- not what the DEFINE FIELD intended\nCREATE person SET\n    possessions = [ any:one, any:two ];\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Data for House Listings in SurrealQL\nDESCRIPTION: Creates sample data for house listings with square footage and number of floors columns to be used in subsequent ML examples.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/ml/functions.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nCREATE house_listing SET squarefoot_col = 500.0, num_floors_col = 1.0;\nCREATE house_listing SET squarefoot_col = 1000.0, num_floors_col = 2.0;\nCREATE house_listing SET squarefoot_col = 1500.0, num_floors_col = 3.0;\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Query\nDESCRIPTION: Shows the underlying SurrealQL query that is executed when using the select() method\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/select.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM $thing;\n```\n\n----------------------------------------\n\nTITLE: Converting Seconds to Duration\nDESCRIPTION: The duration::from::secs function converts a numeric value representing seconds into a duration type. Takes a number as input and returns a duration value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/duration.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\nduration::from::secs(number) -> duration\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN duration::from::secs(3);\n\n3s\n```\n\n----------------------------------------\n\nTITLE: Creating a Point Geometry Using GeoJSON Format in SurrealQL\nDESCRIPTION: This snippet shows how to update a record with a geometry point using the traditional GeoJSON format. This approach requires specifying the type as \"Point\" and providing coordinates as an array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/geometries.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE city:london SET centre = {\n    type: \"Point\",\n    coordinates: [-0.118092, 51.509865],\n};\n```\n\n----------------------------------------\n\nTITLE: REBUILD Index with IF EXISTS Clause in SurrealQL\nDESCRIPTION: Example demonstrating how to safely rebuild an index using the IF EXISTS clause, which only attempts the rebuild if the index exists.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/rebuild.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nREBUILD INDEX IF EXISTS uniq_isbn ON book;\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Schema to Auto-Include All Tables and Functions in SurrealQL\nDESCRIPTION: This snippet demonstrates how to configure the GraphQL schema to automatically include all tables and functions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE CONFIG GRAPHQL TABLES AUTO FUNCTIONS AUTO;\n```\n\n----------------------------------------\n\nTITLE: Using array::find_index function in SurrealQL\nDESCRIPTION: The array::find_index function returns the index of the first occurrence of a value in an array or NONE if the array doesn't contain the value. It can be called using the alias array::index_of.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_17\n\nLANGUAGE: surql\nCODE:\n```\narray::find_index(array, value) -> number | NONE\narray::find_index(array, @closure) -> number | NONE\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::find_index(['a', 'b', 'c', 'b', 'a'], 'b');\n-- 1\n\nRETURN [1, 2, 3].find_index(4);\n-- NONE\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN [1, 2, 3].find_index(|$num| $num > 3);\n-- NONE\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\"cat\", \"badger\", \"dog\", \"octopus\"].index_of(\"octopus\");\n-- 3\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB with Different Storage Options in Rust\nDESCRIPTION: Commands for adding SurrealDB to a Rust project with various storage engine options. This includes in-memory database, RocksDB file storage, FoundationDB cluster, and TiKV cluster support.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# For an in memory database\ncargo add surrealdb --features kv-mem\n\n# For a RocksDB file\ncargo add surrealdb --features kv-rocksdb\n\n# For FoundationDB cluster (FoundationDB must be installed and the appropriate version selected)\ncargo add surrealdb --features kv-fdb-7_1\n\n# For a TiKV cluster (TiKV and other dependencies must be installed)\ncargo add surrealdb --features kv-tikv\n```\n\n----------------------------------------\n\nTITLE: SDK Query Example with Unsupported IF EXISTS Clause\nDESCRIPTION: Example showing unsupported IF EXISTS/IF NOT EXISTS clauses in DEFINE statements when using SDKs. The query parser cannot correctly handle these clauses in pre-2.0 versions unless using the sql2 feature flag in Rust SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/faqs/known-issues.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait db.query(\n    'DEFINE FIELD IF NOT EXISTS email ON TABLE user TYPE string;'\n);\n```\n\n----------------------------------------\n\nTITLE: count() with Condition in SELECT Statement\nDESCRIPTION: Example showing count() function with a condition (age > 35) in a SELECT statement with GROUP ALL clause, counting records that meet the condition.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/count.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nSELECT count(age > 35) FROM [{ age: 33 }, { age: 45 }, { age: 39 }] GROUP ALL;\n\n2\n```\n\n----------------------------------------\n\nTITLE: Parameterized Manual Transaction Implementation\nDESCRIPTION: Enhanced version of the manual transaction using parameter binding for the transfer amount to prevent typos\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/transaction.mdx#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::Surreal;\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n\tlet db = Surreal::new::<Ws>(\"localhost:8000\").await?;\n\n\tdb.signin(Root {\n\t\tusername: \"root\",\n\t\tpassword: \"root\",\n\t})\n\t.await?;\n\n\tdb.use_ns(\"namespace\").use_db(\"database\").await?;\n\n    // Set the parameter $transfer_amount for later use\n    db.set(\"transfer_amount\", 300).await?;\n\n    let response = db\n\n        // Start transaction\n        .query(\"BEGIN\")\n\n        // Setup accounts\n        .query(\"\n            CREATE account:one SET balance = 135605.16;\n            CREATE account:two SET balance = 91031.31;\n        \")\n\n        // Move money\n        .query(\"\n            UPDATE account:one SET balance += $transfer_amount;\n            UPDATE account:two SET balance -= $transfer_amount;\n        \")\n\n        // Finalise\n        .query(\"COMMIT\")\n        .await?;\n\n    println!(\"{response:#?}\");\n\n\t// See if any errors were returned\n\tresponse.check()?;\n\n\tOk(())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining string::similarity::jaro Function in SurrealQL\nDESCRIPTION: API definition for the string::similarity::jaro function, which calculates the Jaro similarity between two strings and returns a float.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_37\n\nLANGUAGE: surql\nCODE:\n```\nstring::similarity::jaro(string, string) -> float\n```\n\n----------------------------------------\n\nTITLE: Comparing Parser Instructions vs Casting to Decimal in SurrealDB\nDESCRIPTION: This example shows the difference between casting a float to decimal (which can introduce precision errors) versus using the dec suffix as a parser instruction to create a decimal directly from the input value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/numbers.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n-- Creates the imprecise float 3.888888888888889 and casts it into a decimal as 3.888888888888889dec\nRETURN <decimal>3.8888888888888888;\n-- Uses the input 3.8888888888888888 to directly create a decimal\nRETURN 3.8888888888888888dec;\n```\n\n----------------------------------------\n\nTITLE: Calculating Angle Between Vectors in SurrealQL\nDESCRIPTION: The vector::angle function computes the angle between two vectors. It takes two arrays representing vectors and returns a number representing the angle in radians.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::angle([5, 10, 15], [10, 5, 20]);\n\n0.36774908225917935f\n```\n\n----------------------------------------\n\nTITLE: Authenticating SurrealDB Connection with JWT Token - Basic Syntax\nDESCRIPTION: Basic method syntax for authenticating a SurrealDB connection using a JWT token.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/authenticate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.authenticate(token)\n```\n\n----------------------------------------\n\nTITLE: Translating PHP Insert Method to SurrealQL Query\nDESCRIPTION: Shows the equivalent SurrealQL query that the PHP insert method generates and executes in the database. It uses the $thing and $data variables to represent the table name and data respectively.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/insert.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO $thing $data;\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structures for Person Records in SurrealDB\nDESCRIPTION: Two structs for handling person data: PersonData for input/creation and Person for output with generated ID. These structs are serializable/deserializable for JSON API interactions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Serialize, Deserialize, Clone)]\npub struct PersonData {\n    name: String,\n}\n\n#[derive(Serialize, Deserialize)]\npub struct Person {\n    name: String,\n    id: RecordId,\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Normalisers to SurrealML Model Headers in Rust\nDESCRIPTION: Rust code showing how to add normalizers (linear scaling in this case) to input columns in a SurrealML header.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/storage.mdx#2025-04-16_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nheader.add_normaliser(\n    \"squarefoot\".to_string(),\n    NormaliserType::LinearScaling(LinearScaling { min: 0.0, max: 1.0 })\n);\nheader.add_normaliser(\n    \"num_floors\".to_string(),\n    NormaliserType::LinearScaling(LinearScaling { min: 0.0, max: 1.0 })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating KIND Kubernetes Cluster\nDESCRIPTION: Commands to create and verify a new Kubernetes cluster using KIND (Kubernetes in Docker)\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/kubernetes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkind create cluster -n surreal-demo\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl config current-context\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get ns\n```\n\n----------------------------------------\n\nTITLE: Switching Namespace and Database in SurrealDB Python SDK\nDESCRIPTION: Switches to a specific namespace and database within the SurrealDB connection. This method allows for easy navigation between different namespaces and databases.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndb.use(namespace,database)\n```\n\n----------------------------------------\n\nTITLE: Sample SurrealDB Data Creation\nDESCRIPTION: SurrealQL queries to create sample student records in the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/flexible-typing.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nCREATE student SET name = \"Student 1\", class_id = 10; CREATE student SET name = \"Another student\", class_id = 20;\n```\n\n----------------------------------------\n\nTITLE: Using math::stddev Function in SurrealQL\nDESCRIPTION: Calculates the standard deviation of values in a numeric array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_34\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::stddev([ 1, 40, 60, 10, 2, 901 ]);\n```\n\n----------------------------------------\n\nTITLE: Using REPLACE Clause with READONLY Fields in SurrealQL\nDESCRIPTION: This example illustrates the behavior of the REPLACE clause with READONLY fields. It shows that REPLACE maintains the previous behavior regarding READONLY fields, generating an error if the content doesn't match.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/update.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD created ON person TYPE datetime DEFAULT d'2024-01-01T00:00:00Z' READONLY;\nCREATE person:gladys SET age = 90;\n-- Attempts to change `created` field, error\nUPDATE person:gladys REPLACE { age: 70 };\n-- `created` equals current value, query works\nUPDATE person:gladys REPLACE { age: 70, created: d'2024-01-01T00:00:00Z' };\n```\n\n----------------------------------------\n\nTITLE: Comparing Fuzzy Similarity Scores in SurrealDB\nDESCRIPTION: This snippet demonstrates how fuzzy similarity scores in SurrealDB are relative to the compared strings and may not always reflect intuitive similarity.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\n-- return 131 and 111\nstring::similarity::fuzzy(\"United Kingdom\", \"United\");\nstring::similarity::fuzzy(\"United Kingdom\", \"Unite\");\n\n-- also return 131 and 111\nstring::similarity::fuzzy(\"United\", \"United\");\nstring::similarity::fuzzy(\"United\", \"Unite\");\n```\n\n----------------------------------------\n\nTITLE: Custom Field Names with AS Clause\nDESCRIPTION: Demonstrates how to customize automatically generated field names using the AS clause.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/objects.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nSELECT\n    math::mean(temps) AS mean_temps,\n    [ math::min(temps), math::max(temps) ] AS avg_temps\nFROM { temps: [-5, 8, 9] };\n```\n\n----------------------------------------\n\nTITLE: IF ELSE Modern Syntax in SurrealQL\nDESCRIPTION: The modern syntax for IF ELSE statements in SurrealQL, using curly braces for code blocks.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/ifelse.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nIF @condition { @expression; .. }\n   [ ELSE IF @condition { @expression; .. } ] ...\n   [ ELSE { @expression; .. } ]\n```\n\n----------------------------------------\n\nTITLE: Using array::shuffle Function in SurrealQL\nDESCRIPTION: The array::shuffle function randomly reorganizes the order of elements in an array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_43\n\nLANGUAGE: surql\nCODE:\n```\narray::shuffle(array) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::shuffle([ 1, 2, 3, 4, 5 ]);\n\n[ 2, 1, 4, 3, 5 ]\n```\n\n----------------------------------------\n\nTITLE: Killing Live Query by UUID in C#\nDESCRIPTION: Demonstrates how to kill a running live query using its UUID. Includes optional cancellation token for graceful termination.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/streaming.mdx#2025-04-16_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Kill(queryUuid);\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with Limited Capabilities\nDESCRIPTION: Launches SurrealDB with restricted capabilities, allowing only specific functions and network access.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --deny-all --allow-funcs \"array, string, crypto::argon2, http::get\" --allow-net api.example.com:443\n```\n\n----------------------------------------\n\nTITLE: Working with Decimal Types\nDESCRIPTION: Implementation of Decimal class for handling decimal numbers with string conversion and JSON serialization\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/data-types.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew Decimal(decimal: string | number | Decimal);\n\nconst decimal = new Decimal(\"123.456\");\ndecimal.toString(); // \"123.456\"\n\nconst decimal = new Decimal(\"123.456\");\ndecimal.toJSON();        // \"123.456\"\nJSON.stringify(decimal); // \"123.456\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB CLI\nDESCRIPTION: Command to connect to the SurrealDB CLI with specified namespace and database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/fetch.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsurrealdb % surreal sql --user root --pass root --ns namespace --db database --pretty\n```\n\n----------------------------------------\n\nTITLE: Using meta::table() as an Alias for meta::tb()\nDESCRIPTION: The meta::table() function is an alias for meta::tb(), also extracting and returning the table name from a SurrealDB Record ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/meta.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nRETURN meta::table(person:tobie);\n\n\"person\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Response in SurrealDB\nDESCRIPTION: The response from executing a GraphQL query contains a data object with the requested fields. This maintains the standard GraphQL response format, making it compatible with client-side GraphQL libraries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": {\n        \"data\": {\n            \"users\": [\n                { \"id\": \"user:1\", \"name\": \"Alice\" },\n                { \"id\": \"user:2\", \"name\": \"Bob\" }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Output of SLEEP During Parallel Operations in SurrealQL\nDESCRIPTION: This snippet shows a possible output from the previous example, demonstrating how the index building progresses over time despite the SLEEP statements.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/sleep.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n-------- Query 1 --------\n{\n\tbuilding: {\n\t\tcount: 0,\n\t\tstatus: 'initial'\n\t}\n}\n\n-------- Query 2 --------\n{\n\tbuilding: {\n\t\tcount: 17250,\n\t\tstatus: 'initial'\n\t}\n}\n\n-------- Query 3 --------\n{\n\tbuilding: {\n\t\tcount: 33542,\n\t\tstatus: 'initial'\n\t}\n}\n\n-------- Query 4 --------\n{\n\tbuilding: {\n\t\tstatus: 'built'\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining insertRelation Method Syntax in TypeScript\nDESCRIPTION: This snippet shows the method signature for the insertRelation function in the SurrealDB JavaScript SDK. It takes a table name and data as parameters, with a generic type T for the return value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/insertrelation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.insertRelation<T>(table, data)\n```\n\n----------------------------------------\n\nTITLE: Creating Records in SurrealQL (Neo4j Equivalent)\nDESCRIPTION: Examples of creating records in SurrealDB compared to Neo4j node creation. Shows how to insert multiple records into a table and implicitly create the table if it doesn't exist.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_5\n\nLANGUAGE: SurrealQL\nCODE:\n```\nINSERT INTO person [     {id: \"John\", name: \"John\"},     {id: \"Jane\", name: \"Jane\"} ]\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Configuration Setup\nDESCRIPTION: Sets up basic GraphQL configuration with automatic table and function inclusion.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\n-- Define GraphQL configuration\nDEFINE CONFIG GRAPHQL TABLES AUTO FUNCTIONS AUTO;\n```\n\n----------------------------------------\n\nTITLE: Converting Nanoseconds to Datetime in SurrealQL\nDESCRIPTION: The time::from::nanos function calculates a datetime based on the nanoseconds since January 1, 1970 0:00:00 UTC. It takes a number as input and returns a datetime value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_26\n\nLANGUAGE: surql\nCODE:\n```\ntime::from::nanos(number) -> datetime\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::from::nanos(1000000);\n\nd\"1970-01-01T00:00:00.001Z'\n```\n\n----------------------------------------\n\nTITLE: Record Range with Object-Based IDs in SurrealQL\nDESCRIPTION: Example showing how to use the NONE to open-range (..) pattern with object-based record IDs to filter temperature data for a specific city.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/values.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nCREATE temperature:{ city: 'London', time: d'2025-02-19T00:00:00.000Z' } SET val = 5.5;\nCREATE temperature:{ city: 'London', time: d'2025-02-20T00:00:00.000Z' } SET val = 5.7;\n\nSELECT * FROM temperature:{ city: 'London', time: NONE }..{ city: 'London', time: .. };\n```\n\nLANGUAGE: surql\nCODE:\n```\n[{\n\tid: temperature:{\n\t\tcity: 'London',\n\t\ttime: d'2025-02-19T00:00:00Z'\n\t},\n\tval: 5.5f\n},\n{\n\tid: temperature:{\n\t\tcity: 'London',\n\t\ttime: d'2025-02-20T00:00:00Z'\n\t},\n\tval: 5.7f\n}]\n```\n\n----------------------------------------\n\nTITLE: SPLIT Clause Syntax Definition\nDESCRIPTION: Defines the basic syntax structure for using the SPLIT clause in SurrealQL queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/split.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nSPLIT [ON] @field\n```\n\n----------------------------------------\n\nTITLE: Terminating Live Query in SurrealDB Python SDK\nDESCRIPTION: The kill() method terminates a running live query by its UUID. It takes the UUID of the live query you wish to terminate as a required argument.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/streaming.mdx#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndb.kill(query_uuid)\n\n# Async\nawait db.kill(query_uuid)\n```\n\n----------------------------------------\n\nTITLE: Using Record IDs as Record Links in SurrealDB\nDESCRIPTION: This snippet demonstrates how record IDs can be used as pointers to access all fields of a record. It shows the correct way to use a standalone record ID as a record pointer.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_33\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:1 SET data = {\n    some: \"demo\",\n    data: \"for\",\n    demonstration: \"purposes\"\n};\n\nLET $record = SELECT id FROM person:1;\nSELECT * FROM $record;\n```\n\n----------------------------------------\n\nTITLE: Parsing Email Host in SurrealQL\nDESCRIPTION: This function parses and returns an email host from a valid email address. It extracts the domain portion after the @ symbol.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/parse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nparse::email::host(string) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN parse::email::host(\"info@surrealdb.com\");\n\n\"surrealdb.com\"\n```\n\n----------------------------------------\n\nTITLE: Defining the RPC Method Syntax for 'use' Command\nDESCRIPTION: The 'use' method specifies or unsets the namespace and/or database for the current connection. It takes namespace and database parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nuse [ ns, db ]\n```\n\n----------------------------------------\n\nTITLE: Comparing Scrypt Hashed Passwords in SurrealQL\nDESCRIPTION: Compares a hashed-and-salted scrypt password value with an unhashed password value, returning a boolean result.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/crypto.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\ncrypto::scrypt::compare(string, string) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nLET $hash = \"$scrypt$ln=15,r=8,p=1$8gl7bipl0FELTy46YJOBrw$eRcS1qR22GI8VHo58WOXn9JyfDivGo5yTJFvpDyivuw\";\nLET $pass = \"this is a strong password\";\nRETURN crypto::scrypt::compare($hash, $pass);\n\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Data from SurrealDB in Rust\nDESCRIPTION: A handler function that queries the current session information from SurrealDB. It demonstrates using the query method with a SurrealQL statement and processing the result into a JSON response.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\npub async fn session() -> Result<Json<String>, Error> {\n    let res: Option<String> = DB.query(\"RETURN <string>$session\").await?.take(0)?;\n\n    Ok(Json(res.unwrap_or(\"No session data found!\".into())))\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Live Query Responses in SurrealDB using C#\nDESCRIPTION: Listens for responses from an existing live query identified by its UUID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\ndb.ListenLive<T>(queryUuid)\n```\n\n----------------------------------------\n\nTITLE: Password Hashing Example in SurrealDB\nDESCRIPTION: Demonstrates password hashing and comparison using crypto::argon2 functions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nLET $hash1 = crypto::argon2::generate(\"myPaSSWord\");\nLET $hash2 = crypto::argon2::generate(\"myPaSSWord\");\n\nRETURN [$hash1, $hash2];\n-- First returns true, second returns false\nRETURN [\n    crypto::argon2::compare($hash1, \"myPaSSWord\")\n    crypto::argon2::compare($hash1, \"Wrongpassword\")\n];\n```\n\n----------------------------------------\n\nTITLE: Using time::millis Function in SurrealQL\nDESCRIPTION: The time::millis function extracts the milliseconds as a number from a datetime, or from the current date if no datetime argument is present.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\ntime::millis(option<datetime>) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::millis(d\"1987-06-22T08:30:45Z\");\n\n551349045000\n```\n\n----------------------------------------\n\nTITLE: Using time::year Function in SurrealQL\nDESCRIPTION: The time::year function extracts the year as a number from a datetime, or from the current date if no datetime argument is present.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_22\n\nLANGUAGE: surql\nCODE:\n```\ntime::year(option<datetime>) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::year(d\"2021-11-01T08:30:17+00:00\");\n\n2021\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Executing SQL Commands in SurrealDB\nDESCRIPTION: This snippet demonstrates how to authenticate and execute SQL commands in SurrealDB using a token. It includes the command to log in and execute SQL queries with namespace and database specifications.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/authenticating-users.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsurreal sql --namespace namespace --database database --pretty --token \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpYXQiOjE3MzA4NjQ2NDAsIm5iZiI6MTczMDg2NDY0MCwiZXhwIjoxNzMwODY1NTQwLCJpc3MiOiJTdXJyZWFsREIiLCJqdGkiOiIwNmYwOGFhZi0zYzIyLTQ5N2UtYWRmNC0zNDMxMzA5YWYxOGEiLCJOUyI6Im5hbWVzcGFjZSIsIkRCIjoiZGF0YWJhc2UiLCJBQyI6ImFjY291bnQiLCJJRCI6InVzZXI6YW92bHN0dzBvN2R1Y2J4ZWpqZWsifQ.tHCVlubg3G2j05-LsEaE6jRHMwrBtccJcR6uC9Z6Lo-egrYlBybEEfOZh020OxWxKvUt8eA92-6TjwBvSpN5KA\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Claims in Auth0 Action (DEFINE ACCESS)\nDESCRIPTION: JavaScript code for an Auth0 action to add custom claims required by SurrealDB, including namespace, database, and access method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/integrate-auth0-as-authentication-provider.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexports.onExecutePostLogin = async (event, api) => {\n  if (event.authorization) {\n    // The claims in this block are expected by SurrealDB.\n    // These values should match your SurrealDB installation.\n    api.accessToken.setCustomClaim(`https://surrealdb.com/ns`, \"test\");\n    api.accessToken.setCustomClaim(`https://surrealdb.com/db`, \"test\");\n    // This value corresponds to the name of the JWT access method\n    // which will be created in SurrealDB during the next section.\n    api.accessToken.setCustomClaim(`https://surrealdb.com/ac`, \"auth0\");\n\n    // In this block, we will add additional claims which are not required by SurrealDB.\n    // These claims can be used from SurrealQL to implement application logic.\n    // In this example, we will add the data that we will store for each user.\n    // We will also use some of this data to perform authorization.\n    api.accessToken.setCustomClaim(`https://surrealdb.com/email`, event.user.email);\n    api.accessToken.setCustomClaim(`https://surrealdb.com/email_verified`, event.user.email_verified);\n    api.accessToken.setCustomClaim(`https://surrealdb.com/name`, event.user.name);\n    api.accessToken.setCustomClaim(`https://surrealdb.com/nickname`, event.user.nickname);\n    api.accessToken.setCustomClaim(`https://surrealdb.com/picture`, event.user.picture);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using TIMEOUT Clause in Graph Queries\nDESCRIPTION: Demonstrates how to set a timeout duration for a graph query using the TIMEOUT clause, which cancels the operation if it exceeds the specified time limit.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\n-- Cancel this conditional filtering based on graph edge properties\n-- if not finished within 5 seconds\nSELECT * FROM person WHERE ->knows->person->(knows WHERE influencer = true) TIMEOUT 5s;\n```\n\n----------------------------------------\n\nTITLE: Kill Method Usage Example in Golang\nDESCRIPTION: Complete example showing how to use the Kill method to terminate a live query, including error handling and necessary imports.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/kill.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    surreal \"github.com/surrealdb/surrealdb.go\"\n)\n\nfunc main() {\n    // Assuming db is an instance of your database connection\n    // and uuid is a string containing the query UUID you want to kill\n    queryUuid := \"your-query-uuid-here\"\n\n    err := surreal.Kill(queryUuid)\n    if err != nil {\n        fmt.Println(\"Error killing query:\", err)\n        return\n    }\n\n    fmt.Println(\"Successfully killed query\")\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB via HTTP in Golang\nDESCRIPTION: Shows how to connect to SurrealDB using HTTP protocol. Notes that some functions are not natively available on HTTP but are implemented in the library. Live queries still use websocket if supported by the backend.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/connection-engines.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ndb, err := surrealdb.New(\"http://localhost:8000\")\n```\n\nLANGUAGE: go\nCODE:\n```\ndb, err := surrealdb.New(\"https://localhost:8000\")\n```\n\n----------------------------------------\n\nTITLE: Defining ACCESS with OVERWRITE Clause in SurrealQL\nDESCRIPTION: This example demonstrates the use of the OVERWRITE clause when defining an access method. This allows for modifying an existing access method definition.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS OVERWRITE example ON NAMESPACE ...;\n```\n\n----------------------------------------\n\nTITLE: Using String Prefixes for SurrealQL-like Functionality in TypeScript\nDESCRIPTION: Illustrates the use of string prefix functions (s, d, r, u) to replicate SurrealQL string prefixes in JavaScript, providing type-specific string representations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/utilities.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { s, d, r, u } from 'surrealdb';\n\nconst string = s`I am a string`;\nconst date = d`2024-05-06T17:44:57.085Z`;\nconst record = r`person:tobie`;\nconst uuid = u`92b84bde-39c8-4b4b-92f7-626096d6c4d9`;\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Record References in SurrealDB SQL using Environment Variables\nDESCRIPTION: This command demonstrates how to enable the experimental 'record_references' capability using the SURREAL_CAPS_ALLOW_EXPERIMENTAL environment variable when launching the SurrealDB SQL interface.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/sql.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nSURREAL_CAPS_ALLOW_EXPERIMENTAL=\"record_references\" surreal sql ... \n```\n\n----------------------------------------\n\nTITLE: Using Use Method in C# with SurrealDB .NET SDK\nDESCRIPTION: This example demonstrates how to use the Use() method to switch to a specific namespace and database named 'test' in the SurrealDB .NET SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/use.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Use(\"test\", \"test\");\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Days in SurrealQL\nDESCRIPTION: The duration::days function counts how many days fit into a duration. It takes a duration as input and returns a number.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/duration.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nduration::days(duration) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN duration::days(3w);\n\n21\n```\n\n----------------------------------------\n\nTITLE: Signing In as Namespace User in SurrealDB Golang SDK\nDESCRIPTION: This example shows how to sign in as a namespace user. It includes the namespace in addition to username and password in the Auth struct.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/signin.mdx#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Sign in to authentication `db` using the root user\n\tauthData := &surrealdb.Auth{\n\t\tUsername: \"root\", // use your setup username\n\t\tPassword: \"root\", // use your setup password\n        Namespace: \"test\", \n\t}\n\ttoken, err := db.SignIn(authData)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n```\n\n----------------------------------------\n\nTITLE: Kill Method Syntax in Golang\nDESCRIPTION: Method signature for the Kill function that terminates a live query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/kill.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Kill(queryUuid string)\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Division in SurrealQL\nDESCRIPTION: The vector::divide function performs element-wise division between two vectors. It takes two arrays and returns a new array with each element of the first divided by the corresponding element of the second.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::divide([10, -20, 30, 0], [0, -1, 2, -3]);\n\n[NaN, 20, 15, 0]\n```\n\n----------------------------------------\n\nTITLE: Projecting Vectors in SurrealDB\nDESCRIPTION: The vector::project function computes the projection of one vector onto another. It takes two arrays as input and returns a new array representing the projection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::project([1, 2, 3], [4, 5, 6]);\n```\n\n----------------------------------------\n\nTITLE: Defining Insert Method Syntax in Rust\nDESCRIPTION: Shows the basic syntax for the insert() method in the SurrealDB Rust SDK. It demonstrates inserting content and creating relations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/insert.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.insert(resource).content(data);\ndb.insert(resource).relation(data);\n```\n\n----------------------------------------\n\nTITLE: Using Transactions for Error Testing in SurrealDB\nDESCRIPTION: This example demonstrates how to use transactions with a final THROW statement to test for errors in a group of queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/transactions.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nBEGIN TRANSACTION;\nDEFINE INDEX unique_name ON TABLE person FIELDS name UNIQUE;\n\nINSERT INTO person [\n    { name: 'Agatha Christie', born: d'1890-09-15' },\n    { name: 'Billy Billerson', born: d'1979-09-11' },\n\t-- Pretend there are is 10,000 more objects here\n    { name: 'Agatha Christie', born: d'1955-05-15' },\n];\n\nTHROW \"Reached the end\";\nCOMMIT TRANSACTION;\n```\n\n----------------------------------------\n\nTITLE: User Signup with Record Access Method in SurrealDB (JSON)\nDESCRIPTION: This example demonstrates how to sign up a user using the SIGNUP query defined in a record access method. It requires namespace, database, access method, and user-specific variables.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"signup\",\n    \"params\": [\n        {\n            \"NS\": \"surrealdb\",\n            \"DB\": \"docs\",\n            \"AC\": \"commenter\",\n\n            \"username\": \"johndoe\",\n            \"password\": \"SuperStrongPassword!\"\n        }\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"result\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTdXJyZWFsREIiLCJpYXQiOjE1MTYyMzkwMjIsIm5iZiI6MTUxNjIzOTAyMiwiZXhwIjoxODM2NDM5MDIyLCJOUyI6InRlc3QiLCJEQiI6InRlc3QiLCJTQyI6InVzZXIiLCJJRCI6InVzZXI6dG9iaWUifQ.N22Gp9ze0rdR06McGj1G-h2vu6a6n9IVqUbMFJlOxxA\"\n}\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Query for Update Operation\nDESCRIPTION: Shows the underlying SurrealQL query executed by the 'update' method in the SurrealDB JavaScript SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/data-maniplulation.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $thing CONTENT $data;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ngrok HTTP Tunnel\nDESCRIPTION: Command to create an Ngrok tunnel for SurrealDB's default port 8000\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/connect-to-surrealdb-via-ngrok-tunnel.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 8000\n```\n\n----------------------------------------\n\nTITLE: Checking Database Health Status with SurrealDB .NET SDK\nDESCRIPTION: This code demonstrates the Health method which checks the status of the SurrealDB database server and storage engine. The method returns a boolean value indicating whether the database is healthy.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/health.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Health()\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Datetime in SurrealDB\nDESCRIPTION: The type::datetime function converts values into datetime format. It accepts datetime or string as input.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::datetime(\"2022-04-27T18:12:27+00:00\");\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for SurrealDB Intents\nDESCRIPTION: HTML table structure defining the list of available intents in SurrealDB application with their names, views, and descriptions. Each intent includes information about its purpose and any required arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/advanced-topics/intents.mdx#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<table>\n    <thead>\n        <tr>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">View</th>\n            <th scope=\"col\">Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td scope=\"row\" data-label=\"Type\">\n                <code>open-command-palette</code>\n            </td>\n            <td scope=\"row\" data-label=\"View\">\n                &hyphen;\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Open the command palette dialog.\n            </td>\n        </tr>\n        <!-- Additional rows omitted for brevity -->\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: DEFINE PARAM Syntax Definition in SurrealQL\nDESCRIPTION: The formal syntax definition for the DEFINE PARAM statement, showing all possible clauses and parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/param.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nDEFINE PARAM [ OVERWRITE | IF NOT EXISTS ] $@name \n    VALUE @value\n    [ COMMENT @string ]\n    [ PERMISSIONS [ NONE | FULL | WHERE @condition ] ]\n```\n\n----------------------------------------\n\nTITLE: Validating Invalid Geographic Point in SurrealQL\nDESCRIPTION: Example demonstrating validation of an invalid geographic point with longitude outside the acceptable range of -180° to 180°.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/geo.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nRETURN geo::is::valid( (-181.0, -0.118092) );\n\nfalse\n```\n\n----------------------------------------\n\nTITLE: IF ELSE Legacy Syntax in SurrealQL\nDESCRIPTION: The legacy syntax for IF ELSE statements in SurrealQL, using THEN and END keywords.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/ifelse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nIF @condition THEN @expression | { @expression; .. }\n   [ ELSE IF @condition THEN @expression | { @expression; .. } ] ...\n   [ ELSE @expression | { @expression; .. } ]\nEND;\n```\n\n----------------------------------------\n\nTITLE: Defining a Namespace Token in SurrealQL\nDESCRIPTION: This snippet shows how to define a token with namespace-level authorization using the HS512 signature algorithm. Namespace tokens can be used to manage all tables and databases within a namespace.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/token.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n-- Specify the namespace for the token\nUSE NS abcum;\n\n-- Set the name of the token\nDEFINE TOKEN token_name\n  -- Use this OAuth provider for namespace authorization\n  ON NAMESPACE\n  -- Specify the cryptographic signature algorithm used to verify the token\n  TYPE HS512\n  -- Specify the public key so we can verify the authenticity of the token\n  VALUE \"sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8\"\n;\n```\n\n----------------------------------------\n\nTITLE: Generating ULID from Timestamp in SurrealQL\nDESCRIPTION: Demonstrates the usage of rand::ulid function to generate a ULID from a given timestamp. It includes examples of using the function in a RETURN statement and in a series of CREATE operations with time-based queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/rand.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::ulid(d\"2021-09-07T04:27:53Z\");\n```\n\nLANGUAGE: surql\nCODE:\n```\nCREATE ONLY test:[rand::ulid()] SET created = time::now(), num = 1;\nSLEEP 100ms;\n\nLET $rec = CREATE ONLY test:[rand::ulid()] SET created = time::now(), num = 2;\nSLEEP 100ms;\nCREATE ONLY test:[rand::ulid()] SET created = time::now(), num = 3;\n-- Select the value of the record created before the current record in the table\nSELECT VALUE num FROM test:[rand::ulid($rec.created - 100ms)]..;\n```\n\n----------------------------------------\n\nTITLE: SurrealDB V1.x SignUp Implementation\nDESCRIPTION: Example of signing up a user using V1.x SDK version. Similar to V2.x but uses 'Scope' instead of 'Access' in the authentication data structure.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/signup.mdx#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Sign in to authentication `db` using the root user\n\tauthData := &surrealdb.Auth{\n\t\tUsername: \"root\", // use your setup username\n\t\tPassword: \"root\", // use your setup password\n        Namespace = \"test\", \n        Database = \"test\", \n        Scope = \"user\",\n        Email = \"info@surrealdb.com\",\n        Password = \"123456\"\n\t}\n\ttoken, err := db.SignUp(authData)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n```\n\n----------------------------------------\n\nTITLE: Response Format for RELATE Statement\nDESCRIPTION: Shows the response format when creating a graph relationship, returning an array containing a single relationship object with id, in, and out properties.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_17\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tid: bought:ctwsll49k37a7rmqz9rr,\n\t\tin: person:tobie,\n\t\tout: product:iphone\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Profile\nDESCRIPTION: Cargo.toml configuration for optimizing release build performance, matching SurrealDB's own release profile.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/setup.mdx#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[profile.release]\nlto = true\nstrip = true\nopt-level = 3\npanic = 'abort'\ncodegen-units = 1\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Multiplication in SurrealQL\nDESCRIPTION: The vector::multiply function performs element-wise multiplication of two vectors. It takes two arrays and returns a new array with the product of corresponding elements.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::multiply([1, 2, 3], [1, 2, 3]);\n\n[1, 4, 9]\n```\n\n----------------------------------------\n\nTITLE: Example of Removing Parameters in SurrealDB Python SDK\nDESCRIPTION: Practical example demonstrating how to remove a specific parameter from the connection using the unset() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/parameters.mdx#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Remove the variable from the connection\ndb.unset('name')\n```\n\n----------------------------------------\n\nTITLE: Querying Graph Relationships in SurrealDB\nDESCRIPTION: This snippet demonstrates how to query graph relationships in SurrealDB, showing incoming and outgoing connections for each user.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_25\n\nLANGUAGE: surql\nCODE:\n```\nSELECT\n    id,\n    ->?->? AS did, \n    <-?<-? AS done_to\nFROM user;\n```\n\n----------------------------------------\n\nTITLE: LiveRawQuery Method Syntax in SurrealDB .NET SDK\nDESCRIPTION: The method signature for initiating a live query from a raw SurrealQL statement in the SurrealDB .NET SDK. It accepts a SQL query string, optional parameters, and an optional cancellation token.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/live_raw_query.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.LiveRawQuery<T>(sql, params)\n```\n\n----------------------------------------\n\nTITLE: Defining Reference Fields in SurrealQL\nDESCRIPTION: This snippet shows how to define fields for record references, including a referencing field on one table and a references field on another table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/references.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD comics ON person TYPE option<array<record<comic_book>>> REFERENCE;\nDEFINE FIELD owners ON comic_book TYPE references;\n```\n\n----------------------------------------\n\nTITLE: SurrealQL JWT Access Method Syntax Definition\nDESCRIPTION: Defines the basic syntax structure for creating JWT access methods in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/jwt.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nDEFINE ACCESS [ OVERWRITE | IF NOT EXISTS ] @name\n  ON [ ROOT | NAMESPACE | DATABASE ]\n  TYPE JWT [ ALGORITHM @algorithm KEY @key | URL @url ]\n  [ AUTHENTICATE @expression ]\n  [ DURATION FOR SESSION @duration ]\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Run Method Basic Syntax\nDESCRIPTION: Basic method syntax for the .run() function in SurrealDB Rust SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/run.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.run(function)\n```\n\n----------------------------------------\n\nTITLE: SurrealQL Editor Keyboard Shortcuts\nDESCRIPTION: A list of keyboard shortcuts supported by SurrealQL editors in Surrealist to help users navigate and edit more efficiently, including shortcuts for indentation, searching, commenting, multiple cursors, text selection, and query execution.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/advanced-topics/surrealql-editors.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n    <thead>\n        <tr>\n            <th scope=\"col\">Shortcuts</th>\n            <th scope=\"col\">Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td scope=\"row\" data-label=\"Shortcuts\">\n                <code>tab</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Indent the current line by 4 spaces.\n            </td>\n        </tr>\n\t\t<tr>\n            <td scope=\"row\" data-label=\"Shortcuts\">\n                <code>shift + tab</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Unindent the current line by 4 spaces.\n            </td>\n        </tr>\n\t\t<tr>\n            <td scope=\"row\" data-label=\"Shortcuts\">\n                <code>ctrl/cmd + f</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Open the search and replace panel\n            </td>\n        </tr>\n\t\t<tr>\n            <td scope=\"row\" data-label=\"Shortcuts\">\n                <code>ctrl/cmd + /</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Toggles comments on the selected or active line(s)\n            </td>\n        </tr>\n\t\t<tr>\n            <td scope=\"row\" data-label=\"Shortcuts\">\n                <code>ctrl/cmd + left click</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Place multiple cursors at the clicked locations\n            </td>\n        </tr>\n\t\t<tr>\n            <td scope=\"row\" data-label=\"Shortcuts\">\n                <code>ctrl/cmd + shift + L</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Selects all occurrences of the currently selected text\n            </td>\n        </tr>\n\t\t<tr>\n            <td scope=\"row\" data-label=\"Shortcuts\">\n                <code>ctrl/cmd + d</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Selects next occurrence of the currently selected text\n            </td>\n        </tr>\n\t\t<tr>\n            <td scope=\"row\" data-label=\"Shortcuts\">\n                <code>ctrl/cmd + enter</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Execute the query query (only applied to the query editor)\n            </td>\n        </tr>\n\t</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Record ID Output with type::thing() in SurrealQL\nDESCRIPTION: Shows the output of creating a record with a dynamic identifier using the type::thing() function, displaying the timestamp enclosed in ⟨ and ⟩ characters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_18\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tcity: 'London',\n\t\tid: weather:⟨2025-02-18T02:30:08.563Z⟩\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Person using surrealdb.O in Golang\nDESCRIPTION: This snippet demonstrates how to use surrealdb.O, a helper type, to simplify the creation of a Person object in the SurrealDB Golang SDK. It shows the comparison between using a regular map and the surrealdb.O type for improved readability.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/data-types.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nperson, err := surrealdb.Create[Person](db, models.Table(\"persons\"), surrealdb.O{\n\t\"Name\":     \"John\",\n\t\"Surname\":  \"Doe\",\n\t\"Location\": models.NewGeometryPoint(-0.11, 22.00),\n})\n```\n\n----------------------------------------\n\nTITLE: Translating merge() to SurrealQL Query\nDESCRIPTION: Shows the equivalent SurrealQL query that is executed when using the merge() method. It uses placeholders for the 'thing' and 'data' parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/merge.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $thing MERGE $data;\n```\n\n----------------------------------------\n\nTITLE: Upserting Content with .upsert().content() in Rust\nDESCRIPTION: Shows how to use the .upsert().content() method to replace existing record data with new data in SurrealDB using Rust.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/upsert.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ndb.upsert(resource).content(data)\n```\n\n----------------------------------------\n\nTITLE: Executing a Built-in Function in SurrealDB\nDESCRIPTION: The run method allows execution of built-in functions. This example demonstrates calling the time::now function to get the current timestamp without any arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"run\",\n    \"params\": [ \"time::now\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining bytes::len Function in SurrealQL\nDESCRIPTION: API definition for the bytes::len function, which takes a bytes value as input and returns an integer representing the length in bytes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/bytes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nbytes::len(bytes) -> int\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Information from SurrealDB\nDESCRIPTION: A function that executes a SurrealQL query to retrieve the current session information from the database. This endpoint allows users to see their current session data for debugging purposes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n#[get(\"/session\")]\npub async fn session() -> Result<Json<String>, Error> {\n    let res: Option<String> = DB.query(\"RETURN <string>$session\").await?.take(0)?;\n\n    Ok(Json(res.unwrap_or(\"No session data found!\".into())))\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Nanosecond Precision in SurrealDB Datetimes\nDESCRIPTION: Demonstrates SurrealDB's ability to handle datetimes with nanosecond precision, storing the complete timestamp with fractional seconds.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/datetimes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE event SET time = d\"2023-07-03T07:18:52.841147Z\";\n```\n\n----------------------------------------\n\nTITLE: SPLIT Clause Query Result Example\nDESCRIPTION: Shows the expected JSON output format when using the SPLIT clause on an email array field, demonstrating how each array element becomes a separate record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/split.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"emails\": \"john@example.com\",\n        \"id\": \"user:some_id\",\n        \"name\": \"John Doe\"\n    },\n    {\n        \"emails\": \"doe@example.com\",\n        \"id\": \"user:some_id\",\n        \"name\": \"John Doe\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Converting Minutes to Duration in SurrealQL\nDESCRIPTION: The duration::from::mins function converts a numeric amount of minutes into a duration that represents minutes. It takes a number as input and returns a duration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/duration.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\nduration::from::mins(number) -> duration\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN duration::from::mins(3);\n\n3m\n```\n\n----------------------------------------\n\nTITLE: LIVE SELECT with Parameters (Unsupported)\nDESCRIPTION: Example showing currently unsupported parameter usage in live queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/live.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nLIVE SELECT * FROM person WHERE $field > $value\n```\n\n----------------------------------------\n\nTITLE: Importing SurrealQL File with Token Authentication\nDESCRIPTION: This command demonstrates how to import a SurrealQL script file using token-based authentication instead of username and password. It specifies the connection URL, token, namespace, database, and the file to import.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/import.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal import --conn http://localhost:8000 --token <token> --ns test --db test downloads/surreal_deal_v1.surql\n```\n\n----------------------------------------\n\nTITLE: Converting RecordId to String in PHP for SurrealDB\nDESCRIPTION: Demonstrates how to convert RecordId objects to their string representations, handling various types of identifiers including simple values, complex characters, and arrays/objects.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/data-types.mdx#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Simple\n$rid = (new RecordId(\"table\", 123))->toString();\n// 'table:123'\n$rid = (new RecordId(\"table\", \"abc\"))->toString();\n// 'table:abc'\n\n// Complex characters\n$rid = (new RecordId(\"table\", \"123\"))->toString();\n// 'table:⟨123⟩'\n$rid = (new RecordId(\"table\", \"123withletters\"))->toString();\n// 'table:123withletters'\n$rid = (new RecordId(\"table\", \"complex-string\"))->toString();\n// 'table:⟨complex-string⟩'\n$rid = (new RecordId(\"table-name\", 123))->toString();\n// '⟨table-name⟩:123'\n\n// Objects and Arrays\n$rid = (new RecordId(\"table\", [\"city\" => \"London\"]))->toString();\n// 'table:{ city: \"London\" }'\n$rid = (new RecordId(\"table\", [\"London\"]))->toString();\n// 'table:[\"London\"]'\n```\n\n----------------------------------------\n\nTITLE: Empty Namespace Information Result\nDESCRIPTION: Example output when retrieving information about an empty namespace, showing the structure of the returned object with empty collections.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/concepts/namespace.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n{\n\tdatabases: {},\n\taccesses: {},\n\tusers: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using RocksDB Database Client\nDESCRIPTION: Example of creating and using a SurrealDB RocksDB database client for persistent storage\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/dotnet.mdx#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing var db = new SurrealDbRocksDbClient(\"data.db\");\n\nconst string TABLE = \"person\";\n\nvar person = new Person\n{\n    Title = \"Founder & CEO\",\n    Name = new() { FirstName = \"Tobie\", LastName = \"Morgan Hitchcock\" },\n    Marketing = true\n};\nvar created = await db.Create(TABLE, person);\nConsole.WriteLine(ToJsonString(created));\n```\n\n----------------------------------------\n\nTITLE: Type Checking Functions in SurrealQL\nDESCRIPTION: Functions for validating the type of values in SurrealQL. These functions return boolean values indicating whether a value matches the specified type.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ntype::is::array()\ntype::is::bool()\ntype::is::bytes()\ntype::is::collection()\ntype::is::datetime()\ntype::is::decimal()\ntype::is::duration()\ntype::is::float()\ntype::is::geometry()\ntype::is::int()\ntype::is::line()\ntype::is::none()\ntype::is::null()\ntype::is::multiline()\ntype::is::multipoint()\ntype::is::multipolygon()\ntype::is::number()\ntype::is::object()\ntype::is::point()\ntype::is::polygon()\ntype::is::range()\ntype::is::record()\ntype::is::string()\ntype::is::uuid()\n```\n\n----------------------------------------\n\nTITLE: Conditional Bearer Access Method Definition\nDESCRIPTION: Examples of defining bearer access methods with IF NOT EXISTS and OVERWRITE clauses for handling existing definitions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/bearer.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n-- Create a BEARER access method for the example database if it does not already exist\nDEFINE ACCESS IF NOT EXISTS example ON DATABASE TYPE BEARER;\n\n-- Create a BEARER access method for the example database and overwrite if it already exists\nDEFINE ACCESS OVERWRITE example ON DATABASE TYPE BEARER;\n```\n\n----------------------------------------\n\nTITLE: Adding Normalizers to SurMlFile\nDESCRIPTION: Python code demonstrating how to add normalization information to the SurMlFile object for each input column to ensure proper data preprocessing.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfile.add_normaliser(\n\t\"squarefoot\",\n\t\"z_score\",\n\tHOUSE_LINEAR[\"squarefoot\"].mean(),\n\tHOUSE_LINEAR[\"squarefoot\"].std()\n)\n\nfile.add_normaliser(\n\t\"num_floors\",\n\t\"z_score\",\n\tHOUSE_LINEAR[\"num_floors\"].mean(),\n\tHOUSE_LINEAR[\"num_floors\"].std()\n)\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from SurrealDB Query\nDESCRIPTION: Example of a JSON response returned by SurrealDB after querying the users table. The response shows SurrealDB's document structure with nested objects, arrays, and automatically generated IDs.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/document.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": \"users:xyz123\", \n        \"name\": \"Alice Smith\",\n        \"email\": \"alice@example.com\",\n        \"age\": 29,\n        \"addresses\": [\n            {\n                \"type\": \"home\",\n                \"address_line\": \"123 Maple St\",\n                \"city\": \"Springfield\",\n                \"country\": \"USA\"\n            },\n            {\n                \"type\": \"work\",\n                \"address_line\": \"456 Oak Ave\",\n                \"city\": \"Metropolis\",\n                \"country\": \"USA\"\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: LiveTable Method Syntax in SurrealDB .NET SDK\nDESCRIPTION: The method signature for initiating a live query from a table in SurrealDB using the .NET SDK. This allows you to subscribe to changes in a specific table with optional parameters for differential updates.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/live_table.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.LiveTable<T>(table, diff)\n```\n\n----------------------------------------\n\nTITLE: Converting Weeks to Duration\nDESCRIPTION: The duration::from::weeks function converts a numeric value representing weeks into a duration type. Takes a number as input and returns a duration value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/duration.mdx#2025-04-16_snippet_16\n\nLANGUAGE: surql\nCODE:\n```\nduration::from::weeks(number) -> duration\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN duration::from::weeks(3);\n\n3w\n```\n\n----------------------------------------\n\nTITLE: User Signin in SurrealDB Python SDK\nDESCRIPTION: Signs this connection in to a specific authentication scope in SurrealDB. This method is used for user authentication and session management.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\ndb.signin(vars)\n```\n\n----------------------------------------\n\nTITLE: Executing Built-in SurrealQL Function\nDESCRIPTION: Example showing how to execute a built-in SurrealQL function (rand::float) using the run method with database connection and authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/run.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse surrealdb::engine::any::connect;\nuse surrealdb::opt::auth::Root;\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = connect(\"ws://localhost:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    let res: f32 = db.run(\"rand::float\").await?;\n    dbg!(res);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Rounding Down Datetime in SurrealQL\nDESCRIPTION: This snippet demonstrates the use of the time::floor function to round a datetime down by a specific duration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::floor(d\"2021-11-01T08:30:17+00:00\", 1w);\n```\n\n----------------------------------------\n\nTITLE: Using math::sign Function in SurrealQL\nDESCRIPTION: Returns the sign of a number (1 for positive, -1 for negative, 0 for zero).\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_29\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::sign(-42);\n```\n\n----------------------------------------\n\nTITLE: Authenticating Database User in SurrealDB with Python\nDESCRIPTION: Example showing how to authenticate as a database user in SurrealDB using Python client.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/handling-authentication.mdx#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Authenticate with a Database user\ndb.signin({\n\t\"namespace\": 'surrealdb',\n\t\"database\": 'docs',\n\t\"username\": 'tobie',\n\t\"password\": '123456',\n})\n```\n\n----------------------------------------\n\nTITLE: Checking SurrealDB Identification Headers\nDESCRIPTION: Demonstrates how SurrealDB server by default includes identification headers that reveal version information, which can be disabled using the --no-identification-headers flag for enhanced security.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ surreal start &\n$ curl -vvv \"127.0.0.1:8000\"\n*   Trying 127.0.0.1:8000...\n* Connected to 127.0.0.1 (127.0.0.1) port 8000 (#0)\n> GET / HTTP/1.1\n> Host: 127.0.0.1:8000\n> User-Agent: curl/7.81.0\n> Accept: */*\n>\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 307 Temporary Redirect\n< location: https://surrealdb.com/app\n< access-control-allow-origin: *\n< vary: origin\n< vary: access-control-request-method\n< vary: access-control-request-headers\n# highlight-start\n< surreal-version: surrealdb-2.0.0+20240612.2184e80f\n< server: SurrealDB\n# highlight-end\n< x-request-id: 157413ce-7cc4-41a1-a93b-0940bf87874c\n< content-length: 0\n< date: Mon, 17 Jun 2024 15:47:29 GMT\n<\n* Connection #0 to host 127.0.0.1 left intact\n```\n\n----------------------------------------\n\nTITLE: Defining Update Content Method Syntax in Rust\nDESCRIPTION: Demonstrates the syntax for the update().content() method, which replaces the current document data with new data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/update.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ndb.update(resource).content(data)\n```\n\n----------------------------------------\n\nTITLE: String Contains Check in SurrealQL\nDESCRIPTION: Shows how to check if one string contains another using string::contains function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::contains('abcdefg', 'cde');\n```\n\n----------------------------------------\n\nTITLE: Record ID Validation in SurrealQL\nDESCRIPTION: Validates if a string is a valid Record ID, optionally checking against a specific table. Returns a boolean value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_30\n\nLANGUAGE: surql\nCODE:\n```\nstring::is::record(string, option<string | table>) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::record(\"person:test\");\nRETURN string::is::record(\"person:test\", \"person\");\nRETURN string::is::record(\"person:test\", \"other\");\nRETURN string::is::record(\"not a record id\");\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Example in SurrealDB Golang SDK\nDESCRIPTION: A simple example showing how to authenticate a database connection using a JWT token in the SurrealDB Golang SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/authenticate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ndb.Authenticate(\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTdXJyZWFsREIiLCJpYXQiOjE1MTYyMzkwMjIsIm5iZiI6MTUxNjIzOTAyMiwiZXhwIjoxODM2NDM5MDIyLCJOUyI6InRlc3QiLCJEQiI6InRlc3QiLCJTQyI6InVzZXIiLCJJRCI6InVzZXI6dG9iaWUifQ.N22Gp9ze0rdR06McGj1G-h2vu6a6n9IVqUbMFJlOxxA\");\n```\n\n----------------------------------------\n\nTITLE: Executing SurrealQL Functions with Run Method in PHP\nDESCRIPTION: This example demonstrates how to use the 'run' method to execute SurrealQL functions. It shows two ways of calling the method: with positional arguments and with named arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/run.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$functionA = $db->run(\"fn::hello_world\", null, [\"Tobie\"]);\n$functionB = $db->run(\"fn::hello_world\", \"v1\", [\"Tobie\"]);\n\n// or with named arguments\n$functionA = $db->run(\"fn::hello_world\", params: [\"Tobie\"]);\n$functionB = $db->run(\"fn::hello_world\", version: \"v1\", params: [\"Tobie\"]);\n```\n\n----------------------------------------\n\nTITLE: Deleting Records from SurrealDB in C#\nDESCRIPTION: Deletes all records or a specific record from the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\ndb.Delete(thing)\n```\n\n----------------------------------------\n\nTITLE: Rounding Up with Ceiling Function in SurrealQL\nDESCRIPTION: The math::ceil function rounds a number up to the next largest integer. It takes a single numeric argument.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::ceil(13.146572);\n\n14\n```\n\n----------------------------------------\n\nTITLE: TypeScript Method Signature\nDESCRIPTION: The method signature for the .let() function that assigns a value as a parameter for the database connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/let.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.let(key: string, val: any)\n```\n\n----------------------------------------\n\nTITLE: Database Query Function\nDESCRIPTION: Function to perform a select query with index binding and result handling\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/concurrency.mdx#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nasync fn select_index(db: &Surreal<Client>, idx: usize, test_num: &'static str) {\n    let mut result = db\n        .query(\"SELECT * FROM $idx\")\n        .bind((\"idx\", idx))\n        .await\n        .unwrap();\n\n    let db_idx: Option<usize> = result.take(0).unwrap();\n    if let Some(db_idx) = db_idx {\n        println!(\"{test_num} - {idx}: {db_idx}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Set Method Syntax in SurrealDB .NET SDK\nDESCRIPTION: Defines the syntax for the Set method which assigns a value as a parameter for the database connection. It requires a key and value parameter, with an optional cancellationToken for handling asynchronous operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/set.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Set(key, value)\n```\n\n----------------------------------------\n\nTITLE: Defining JWKS Token in SurrealQL\nDESCRIPTION: Example of defining a token using JWKS (JSON Web Key Set) for database authorization in SurrealQL. The value is a URL pointing to a JWKS object.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/token.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nUSE NS abcum DB app_vitalsense;\n\nDEFINE TOKEN token_name\n  ON DATABASE\n  TYPE JWKS\n  VALUE \"https://example.com/.well-known/jwks.json\"\n;\n```\n\n----------------------------------------\n\nTITLE: Using HTTP HEAD Function in SurrealQL\nDESCRIPTION: Examples of using the http::head() function in a RETURN statement, showing both basic usage and usage with custom headers. Both examples return null as expected from a HEAD request.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/http.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nRETURN http::head('https://surrealdb.com');\n\nnull\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN http::head('https://surrealdb.com', {\n\t'x-my-header': 'some unique string'\n});\n\nnull\n```\n\n----------------------------------------\n\nTITLE: Output of ON DELETE THEN Operation\nDESCRIPTION: This shows the before and after states of a person record when ON DELETE THEN is triggered by deleting a referenced comment. The comment is removed from the comments array and added to the deleted_comments array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/references.mdx#2025-04-16_snippet_17\n\nLANGUAGE: surql\nCODE:\n```\n-------- Query --------\n\n[\n\t{\n\t\tcomments: [\n\t\t\tcomment:lbeyh2icushpwo0ak5ux,\n\t\t\tcomment:90tdnyoa14cge2ocmep7\n\t\t],\n\t\tid: person:one\n\t}\n]\n\n-------- Query --------\n\n[\n\t{\n\t\tcomments: [\n\t\t\tcomment:lbeyh2icushpwo0ak5ux\n\t\t],\n\t\tdeleted_comments: [\n\t\t\tcomment:90tdnyoa14cge2ocmep7\n\t\t],\n\t\tid: person:one\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Showing Details of a Specific Grant in SurrealQL\nDESCRIPTION: Example demonstrating how to show the details of a specific access grant using its ID. Note that the secret key is redacted in the output.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/access.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nACCESS api SHOW GRANT JdvDFKMCVYoM;\n```\n\n----------------------------------------\n\nTITLE: Base64 Encode Function Definition\nDESCRIPTION: API definition for the encoding::base64::encode() function that converts bytes to base64 encoded string.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/encoding.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nencoding::base64::encode(bytes) -> string\n```\n\n----------------------------------------\n\nTITLE: Defining string::similarity::jaro_winkler Function in SurrealQL\nDESCRIPTION: API definition for the string::similarity::jaro_winkler function, which calculates the Jaro-Winkler similarity between two strings and returns a float.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_39\n\nLANGUAGE: surql\nCODE:\n```\nstring::similarity::jaro_winkler(string, string) -> float\n```\n\n----------------------------------------\n\nTITLE: Granting Access for System User in SurrealQL\nDESCRIPTION: Example demonstrating how to define a system user, create a bearer access method, and generate a bearer grant for automation purposes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/access.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Define system user for automation\nDEFINE USER automation ON DATABASE PASSWORD 'secret' ROLES VIEWER;\n-- Define bearer access method to generate API keys\nDEFINE ACCESS api ON DATABASE TYPE BEARER FOR USER DURATION FOR GRANT 10d;\n-- Generate bearer grant to be used by the automation\nACCESS api GRANT FOR USER automation;\n```\n\n----------------------------------------\n\nTITLE: Object-Based Record ID Output in SurrealQL\nDESCRIPTION: Shows the output of creating a record with an object-based identifier, displaying the full object structure in the id field.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tid: temperature:{\n\t\t\tcity: 'London',\n\t\t\tdate: d'2025-02-18T02:23:39.328Z'\n\t\t},\n\t\tlocation: (0.1276, 51.5072),\n\t\ttemperature: 23.7f\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Records in SurrealDB using Python\nDESCRIPTION: Updates all records in a table or a specific record in the SurrealDB database. This method is used to modify existing data in the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\ndb.update(thing,data)\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Schema with Specific Tables and Functions in SurrealQL\nDESCRIPTION: This example shows how to configure the GraphQL schema to include specific tables and functions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE CONFIG GRAPHQL TABLES INCLUDE user, post FUNCTIONS INCLUDE [getUser, listPosts];\n```\n\n----------------------------------------\n\nTITLE: Defining Patch Method Signature in Golang\nDESCRIPTION: Method signature for the Patch function that applies JSON Patch operations to database records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/patch.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Patch[T](what, patches)\n```\n\n----------------------------------------\n\nTITLE: Generating UUID v4 from Timestamp in SurrealQL\nDESCRIPTION: Demonstrates the usage of rand::uuid::v4 function to generate a UUID v4 from a given timestamp. It includes an example of using the function in a RETURN statement and in a series of CREATE operations with time-based queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/rand.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::uuid::v4(d\"2021-09-07T04:27:53Z\");\n```\n\nLANGUAGE: surql\nCODE:\n```\nCREATE ONLY test:[rand::uuid::v4()] SET created = time::now(), num = 1;\nSLEEP 100ms;\n\nLET $rec = CREATE ONLY test:[rand::uuid::v4()] SET created = time::now(), num = 2;\nSLEEP 100ms;\nCREATE ONLY test:[rand::uuid::v4()] SET created = time::now(), num = 3;\n-- Select the value of the record created before the current record in the table\nSELECT VALUE num FROM test:[rand::uuid::v4($rec.created - 100ms)]..;\n```\n\n----------------------------------------\n\nTITLE: Valid Record ID Examples in SurrealQL\nDESCRIPTION: Examples of valid record ID formats in SurrealQL, showing different approaches including text, random IDs, Unicode symbols, arrays and objects.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\ncompany:surrealdb\ncompany:w6xb3izpgvz4n0gow6q7\nreaction:`🤪`\nweather:['London', d'2025-02-14T01:52:50.375Z']\nuser:{ email: 'me@me.com', since: d'2025-02-14T01:54:46.920Z' }\n```\n\n----------------------------------------\n\nTITLE: SurrealDB PHP Use Method Example\nDESCRIPTION: Practical example demonstrating how to switch to the 'surrealdb' namespace and 'docs' database using the use() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/use.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$db->use([\n    \"namespace\" => \"surrealdb\",\n    \"database\" => \"docs\"\n]);\n```\n\n----------------------------------------\n\nTITLE: Closing SurrealDB Connection in JavaScript\nDESCRIPTION: Closes the persistent connection to the SurrealDB database. This method should be called when the connection is no longer needed.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.close()\n```\n\n----------------------------------------\n\nTITLE: Constructing a RecordId in PHP for SurrealDB\nDESCRIPTION: Demonstrates how to create a RecordId object representing a record in a SurrealDB table. The RecordId consists of a table name and a unique identifier for the record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/data-types.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// table is \"person\"\n// unique identifier on the table is \"john\"\n$rid = new RecordId(\"person\", \"john\");\n```\n\n----------------------------------------\n\nTITLE: Configuring SurrealDB Server with Environment Variables\nDESCRIPTION: Demonstrates how to use environment variables to configure SurrealDB server settings, as an alternative to command-line flags. This approach is useful for setting values without directly passing them on the command line.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nexport SURREAL_CAPS_DENY_RPC=\"method1,method2\"\nexport SURREAL_CAPS_DENY_HTTP=\"route1,route2\"\nexport SURREAL_TEMPORARY_DIRECTORY=\"/path/to/temp\"\nexport SURREAL_IMPORT_FILE=\"/path/to/import.surql\"\n\nsurreal start\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with Authentication\nDESCRIPTION: Initializes SurrealDB with default authentication enabled and root user credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start -u root -p root\n```\n\n----------------------------------------\n\nTITLE: Unicode Text in SurrealQL Strings\nDESCRIPTION: Demonstration of using Unicode characters and emojis in SurrealQL strings. All strings in SurrealDB support full Unicode representation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/strings.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person SET text = \"I ❤️ SurrealDB\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Information Endpoint\nDESCRIPTION: Creates an endpoint to retrieve current session information from the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\npub async fn session() -> Result<Json<String>, Error> {\n    let res: Option<String> = DB.query(\"RETURN <string>$session\").await?.take(0)?;\n\n    Ok(Json(res.unwrap_or(\"No session data found!\".into())))\n}\n```\n\n----------------------------------------\n\nTITLE: OVERWRITE Event Example\nDESCRIPTION: Example demonstrating how to use the OVERWRITE clause to replace an existing event definition.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/event.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE EVENT OVERWRITE example ON example THEN {};\n```\n\n----------------------------------------\n\nTITLE: Output of Weighted Graph Relations in SurrealDB\nDESCRIPTION: This snippet shows the output of querying NPCs with their weighted relationships, displaying the strength of connections between each NPC and others based on the 'greeted' counter in the relationship edge.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tid: npc:1,\n\t\trelations: [\n\t\t\t{\n\t\t\t\tlike_strength: 8,\n\t\t\t\twith: npc:3\n\t\t\t},\n\t\t\t{\n\t\t\t\tlike_strength: 8,\n\t\t\t\twith: npc:4\n\t\t\t},\n\t\t\t{\n\t\t\t\tlike_strength: 4,\n\t\t\t\twith: npc:2\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tid: npc:2,\n\t\trelations: [\n\t\t\t{\n\t\t\t\tlike_strength: 10,\n\t\t\t\twith: npc:1\n\t\t\t},\n\t\t\t{\n\t\t\t\tlike_strength: 4,\n\t\t\t\twith: npc:3\n\t\t\t},\n\t\t\t{\n\t\t\t\tlike_strength: 6,\n\t\t\t\twith: npc:4\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tid: npc:3,\n\t\trelations: [\n\t\t\t{\n\t\t\t\tlike_strength: 6,\n\t\t\t\twith: npc:2\n\t\t\t},\n\t\t\t{\n\t\t\t\tlike_strength: 3,\n\t\t\t\twith: npc:4\n\t\t\t},\n\t\t\t{\n\t\t\t\tlike_strength: 11,\n\t\t\t\twith: npc:1\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tid: npc:4,\n\t\trelations: [\n\t\t\t{\n\t\t\t\tlike_strength: 7,\n\t\t\t\twith: npc:1\n\t\t\t},\n\t\t\t{\n\t\t\t\tlike_strength: 6,\n\t\t\t\twith: npc:3\n\t\t\t},\n\t\t\t{\n\t\t\t\tlike_strength: 7,\n\t\t\t\twith: npc:2\n\t\t\t}\n\t\t]\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Random GUIDs with rand::guid() in SurrealQL\nDESCRIPTION: The rand::guid() function generates random GUID strings. By default, it produces a 20-character string. You can specify a fixed length or a range of lengths for the generated GUID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/rand.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nrand::guid() -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nrand::guid(number) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nrand::guid(min, max) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::guid();\n\n\"4uqmrmtjhtjeg77et0dl\"\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::guid(10);\n\n\"f3b6cjh0nt\"\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::guid(5, 15);\n\n\"894bqt4lp\"\n```\n\n----------------------------------------\n\nTITLE: Invalidate Method Syntax in SurrealDB Golang SDK\nDESCRIPTION: The basic syntax for calling the Invalidate method on a SurrealDB database connection object. This method invalidates authentication for the current connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/invalidate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Invalidate()\n```\n\n----------------------------------------\n\nTITLE: Async Test Implementation\nDESCRIPTION: Function to perform concurrent database operations using tokio tasks\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/concurrency.mdx#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nasync fn async_test(db: Arc<Surreal<Client>>, test_num: &'static str) -> std::time::Duration {\n    let start = std::time::Instant::now();\n    let mut handles = vec![];\n    for idx in 0..=MAX {\n        let db = db.clone();\n        handles.push(tokio::spawn(async move {\n            select_index(&db, idx, test_num).await;\n        }));\n    }\n    for h in handles {\n        h.await.unwrap();\n    }\n    Instant::now() - start\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SurrealDB .NET SDK as PackageReference in project file\nDESCRIPTION: Adds the SurrealDB .NET SDK as a package reference in your project file (*.csproj, *.fsproj, etc.). This XML snippet should be included in the ItemGroup section of your project file.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/installation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"SurrealDb.Net\" Version=\"${value}\" />\n```\n\n----------------------------------------\n\nTITLE: Insert Method Syntax in SurrealDB .NET SDK\nDESCRIPTION: Shows the basic method signature for inserting records into a SurrealDB database using the .NET SDK. The method is generic and accepts a table name and data to insert.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/insert.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Insert<T>(table, data)\n```\n\n----------------------------------------\n\nTITLE: Configuring SurrealKV Provider with Dependency Injection\nDESCRIPTION: Setup code for registering the SurrealDB KV provider using .NET dependency injection\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/dotnet.mdx#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nvar services = builder.Services;\nvar configuration = builder.Configuration;\n\nservices\n  .AddSurreal(\"Endpoint=surrealkv://data.db\")\n  .AddSurrealKvProvider();\n```\n\n----------------------------------------\n\nTITLE: SurrealQL Equivalent Query\nDESCRIPTION: The underlying SurrealQL query that is executed when using the upsert() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/upsert.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nUPSERT $thing CONTENT $data;\n```\n\n----------------------------------------\n\nTITLE: Removing Connection Variables in SurrealDB (JSON)\nDESCRIPTION: This WebSocket-only example demonstrates how to remove a previously set variable from the current connection. This prevents further access to the variable in subsequent queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"unset\",\n    \"params\": [ \"website\" ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": null\n}\n```\n\n----------------------------------------\n\nTITLE: User Creation Query in SurrealQL\nDESCRIPTION: Demonstrates creating a new user record with the required fields in the user table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/advanced-topics/embedding-surrealist.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- 1: Add a user with all required fields.\nCREATE user CONTENT {\n    firstName: 'John',\n    lastName: 'Doe',\n    email: 'JohnDoe@someemail.com',\n};\n```\n\n----------------------------------------\n\nTITLE: DEFINE USER Statement Syntax in SurrealQL\nDESCRIPTION: Formal syntax definition for the DEFINE USER statement, showing all possible clauses and parameters including user level, authentication, roles, and durations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/user.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nDEFINE USER [ OVERWRITE | IF NOT EXISTS ] @name\n\tON [ ROOT | NAMESPACE | DATABASE ]\n\t[ PASSWORD @pass | PASSHASH @hash ]\n\t[ ROLES @roles ]\n\t[ DURATION [ FOR TOKEN @duration [ , ] ] [ FOR SESSION @duration ] ]\n  [ COMMENT @string ]\n```\n\n----------------------------------------\n\nTITLE: String-based RecordId Implementation\nDESCRIPTION: Defines a specialized RecordId class for string-based identifiers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/data-types.mdx#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RecordIdOfString : RecordIdOf<string>\n{\n    // The available properties, inherited from `RecordId` and `RecordIdOf<string>`\n    public string Table { get; }\n    public string Id { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using object::keys() in SurrealQL\nDESCRIPTION: The object::keys function returns an array with all the keys of an object. Available since v1.1.0.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/object.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nobject::keys(object) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN object::keys({\n  a: 1,\n  b: true\n});\n\n[ \"a\", \"b\" ]\n```\n\n----------------------------------------\n\nTITLE: SurrealDB .NET Connect Method Syntax\nDESCRIPTION: The Connect method syntax for establishing a connection to a SurrealDB database from a .NET application. This method connects the client to the underlying endpoint and improves performance by avoiding cold starts.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/connect.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Connect()\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Invalid Datetime Casting in SurrealDB\nDESCRIPTION: Demonstrates the error that occurs when attempting to cast an improperly formatted string as a datetime, helping ensure data integrity.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/datetimes.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nCREATE event SET time = <datetime>\"2023-07-03T07:18:52.841147\";\n```\n\n----------------------------------------\n\nTITLE: Using object::from_entries() in SurrealQL\nDESCRIPTION: The object::from_entries function transforms an array with arrays of key-value combinations into an object. Available since v1.1.0.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/object.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nobject::from_entries(array) -> object\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN object::from_entries([\n  [ \"a\", 1 ],\n  [ \"b\", true ],\n]);\n\n{\n  a: 1,\n  b: true\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing URL Fragment in SurrealQL\nDESCRIPTION: This function extracts the fragment component from a valid URL. It returns the part after the # symbol.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/parse.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nparse::url::fragment(string) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN parse::url::fragment(\"https://surrealdb.com:80/features?some=option#fragment\");\n\n\"fragment\"\n```\n\n----------------------------------------\n\nTITLE: Using PARALLEL Clause for Concurrent Processing in SurrealDB\nDESCRIPTION: Shows how to use the PARALLEL keyword to fetch and process edges and remote records concurrently, which can improve performance for large result sets.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\n-- Fetch and process the person, purchased and product targets in parallel\n-- Select every product that was purchased by a person that purchased a product that person tobie also purchased\nSELECT ->purchased->product<-purchased<-person->purchased->product FROM person:tobie PARALLEL;\n```\n\n----------------------------------------\n\nTITLE: Using math::pow Function in SurrealQL\nDESCRIPTION: Calculates a number raised to a specified power.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_25\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::pow(1.07, 10);\n```\n\n----------------------------------------\n\nTITLE: Output of Basic Analyzer with Blank Tokenizer\nDESCRIPTION: The result of analyzing text with the blank_edgengram analyzer, showing tokens that include punctuation marks.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_17\n\nLANGUAGE: surql\nCODE:\n```\n['The', 'Whe', 'Whee', 'Wheel', 'Tim', 'Time', 'tur', 'turn', 'turns', 'turns,', 'and', 'Age', 'Ages', 'com', 'come', 'and', 'pas', 'pass', 'pass,', 'lea', 'leav', 'leavi', 'leavin', 'leaving', 'mem', 'memo', 'memor', 'memori', 'memorie', 'memories', 'tha', 'that', 'bec', 'beco', 'becom', 'become', 'leg', 'lege', 'legen', 'legend', 'legend.']\n```\n\n----------------------------------------\n\nTITLE: Password Hashing Demo\nDESCRIPTION: Demonstration of password hashing and comparison using crypto::argon2 functions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nLET $hash1 = crypto::argon2::generate(\"myPaSSWord\");\nLET $hash2 = crypto::argon2::generate(\"myPaSSWord\");\n\nRETURN [$hash1, $hash2];\n-- First returns true, second returns false\nRETURN [\n    crypto::argon2::compare($hash1, \"myPaSSWord\")\n    crypto::argon2::compare($hash1, \"Wrongpassword\")\n];\n```\n\n----------------------------------------\n\nTITLE: Declaring Let Method Syntax in Python\nDESCRIPTION: Method signature showing the basic syntax for the let() method which takes a key and value parameter.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/let.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.let(key, value)\n```\n\n----------------------------------------\n\nTITLE: Creating Records as Record User in SurrealDB\nDESCRIPTION: Example showing how creating a 'person' record as a record user includes the 'created_by' field automatically set from the $auth parameter.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ntest/test> CREATE person SET name = 'Aeon';\n-- Query 1\n[\n\t{\n\t\tcreated_by: user:qx2apv5oc8mh03wtah0q,\n\t\tid: person:8syfiq2ovztn2tbr8mhb,\n\t\tname: 'Aeon'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Computing Cross Product of Vectors in SurrealQL\nDESCRIPTION: The vector::cross function calculates the cross product of two vectors. It takes two arrays as input and returns a new array representing the resulting vector.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::cross([1, 2, 3], [4, 5, 6]);\n\n[-3, 6, -3]\n```\n\n----------------------------------------\n\nTITLE: Create Method TypeScript Signature\nDESCRIPTION: Method signature showing the TypeScript definition for the create() method with generic type parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.create<T,U>(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Using math::top Function in SurrealQL\nDESCRIPTION: Returns the top N values from a numeric array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_38\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::top([1, 40, 60, 10, 2, 901], 3);\n```\n\n----------------------------------------\n\nTITLE: Defining Patch Method Signature in C#\nDESCRIPTION: Method signature for the .Patch<T>() function that applies JSON Patch changes to records in the database. It takes a resource parameter (table name or specific RecordId) and the JSON Patch data to apply.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/patch.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Patch<T>(resource, data)\n```\n\n----------------------------------------\n\nTITLE: Using Lowercase Filter in SurrealQL Analyzer\nDESCRIPTION: This snippet shows how to define an analyzer with a class tokenizer and lowercase filter. It includes the analyzer definition and a sample usage with search::analyze().\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/analyzer.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER example_lowercase TOKENIZERS class FILTERS lowercase;\nsearch::analyze(\"example_lowercase\", \"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Setting Up Recursive Relations in SurrealDB\nDESCRIPTION: Creates a family tree structure using person records connected via child_of relationships for demonstrating recursive queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_22\n\nLANGUAGE: surql\nCODE:\n```\nCREATE |person:1..15|;\n-- parents of person:1\nRELATE person:1->child_of->[person:2, person:3];\n-- grandparents of person:1\nRELATE person:2->child_of->[person:4, person:5];\nRELATE person:3->child_of->[person:6, person:7];\n-- great-grandparents of person:1\nRELATE person:4->child_of->[person:8, person:9];\nRELATE person:5->child_of->[person:10, person:11];\nRELATE person:6->child_of->[person:12, person:13];\nRELATE person:7->child_of->[person:14, person:15];\n```\n\n----------------------------------------\n\nTITLE: Defining Create Method Syntax in SurrealDB Golang SDK\nDESCRIPTION: This snippet shows the syntax for the Create method in the SurrealDB Golang SDK. It takes a generic type T, a table name, and data as arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Create[T](table, data)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Decimal Types in SurrealDB PHP SDK\nDESCRIPTION: Implementation of Decimal class for handling decimal numbers, including initialization and string/JSON conversion methods. Uses string representation due to PHP's lack of native decimal support.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/data-types.mdx#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnew Decimal(string|float|Decimal $decimal);\n\n$decimal = new Decimal(\"123.456\");\ndecimal->toString(); // \"123.456\"\n\n$decimal = new Decimal(\"123.456\");\n$decimal->toJson();                  // \"123.456\"\njson_encode(decimal);                // \"123.456\"\n```\n\n----------------------------------------\n\nTITLE: Switching Namespace and Database in SurrealDB Python SDK\nDESCRIPTION: Demonstrates how to switch to a specific namespace and database after connecting using the .use() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/create-a-new-connection.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndb.use(namespace='surrealdb', database='docs')\n```\n\n----------------------------------------\n\nTITLE: Responsive Image Component with Light/Dark Mode Support\nDESCRIPTION: JSX code for rendering the Surrealist logo with support for both light and dark modes using a custom Image component with appropriate styling.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  alt=\"Surrealist\"\n  width={100}\n  className=\"flag-image-title\"\n  src={{\n    light: LightSurrealist,\n    dark: ImageLogo,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Calculating Chebyshev Distance in SurrealDB\nDESCRIPTION: The vector::distance::chebyshev function computes the Chebyshev distance between two vectors. It takes two arrays as input and returns a number representing the maximum difference along any dimension.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::distance::chebyshev([2, 4, 5, 3, 8, 2], [3, 1, 5, -3, 7, 2]);\n```\n\n----------------------------------------\n\nTITLE: Creating Relationships for Non-Existent Records\nDESCRIPTION: Demonstrates setting up a database schema where a field value depends on graph relationships, allowing relationships to be established before records exist.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_21\n\nLANGUAGE: surql\nCODE:\n```\n-- Returns true if $this->has_road path is not empty\nDEFINE FIELD has_road_access ON TABLE house VALUE !!$this->has_road->road;\nCREATE road SET name = \"Dalhurst Way\", length = 10.5;\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Custom ID in SurrealQL\nDESCRIPTION: Shows how to create a record with a specific, user-defined ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/records.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:tester SET name = 'Tobie';\n\nperson:tester\n```\n\n----------------------------------------\n\nTITLE: Namespace User Authentication in SurrealDB with .NET SDK\nDESCRIPTION: Signs in as a namespace user in SurrealDB using the .NET SDK. Namespace authentication requires specifying the namespace, username, and password for namespace-level access.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/signin.mdx#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Sign in using namespace auth\nawait db.SignIn(\n    new NamespaceAuth\n    {\n        Namespace = \"test\", \n        Username = \"johndoe\", \n        Password = \"password123\" \n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Insert Method Syntax in Golang for SurrealDB\nDESCRIPTION: Shows the method signature for the Insert method in the SurrealDB Golang SDK. This generic method takes a table name and data to insert into the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/insert.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Insert[T](table, data)\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Query for Patch Operation\nDESCRIPTION: Illustrates the underlying SurrealQL query executed by the 'patch' method in the SurrealDB JavaScript SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/data-maniplulation.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $thing PATCH $data;\n```\n\n----------------------------------------\n\nTITLE: Defining Select Method Syntax in Rust for SurrealDB\nDESCRIPTION: This snippet shows the syntax for the select() method in the SurrealDB Rust SDK. It takes a 'resource' argument which can be a table name or a record ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/select.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.select(resource)\n```\n\n----------------------------------------\n\nTITLE: Using Health Method in PHP with SurrealDB SDK\nDESCRIPTION: This example demonstrates how to use the health() method to check the database health and interpret the result. It returns 200 for good health and 500 for a failure.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/health.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$health = $db->health();\necho \"The health status is: $health.\"; // 200 or 500\n```\n\n----------------------------------------\n\nTITLE: Accessing All Elements in an Array in SurrealQL\nDESCRIPTION: Shows how to use the dot-star (.*) notation to retrieve all elements from an array in a record, which returns all scores from the results array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nSELECT results.* FROM student;\n```\n\n----------------------------------------\n\nTITLE: Initiating a Live Query in SurrealDB WebSocket API\nDESCRIPTION: The live method initiates a real-time query for a specified table. This websocket-only method returns a UUID that identifies the live query connection and allows the client to receive notifications for any creation, update, or deletion operations on the specified table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"live\",\n    \"params\": [ \"person\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing None Type Structure in C#\nDESCRIPTION: Defines the None type as a readonly struct to represent absence of value in the .NET SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/data-types.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic readonly struct None { }\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Parameters and Function Calls in IDs in SurrealQL\nDESCRIPTION: Shows how to use parameters and function calls inside array and object-based record IDs, allowing for dynamic ID generation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_16\n\nLANGUAGE: surql\nCODE:\n```\nLET $now = time::now();\n\nCREATE weather:['Seoul', $now] SET\n    temperature = -2.3,\n    conditions = \"cloudy\";\n\nCREATE weather:['London', time::now()] SET\n    temperature = 5.3,\n    conditions = \"cloudy\";\n```\n\n----------------------------------------\n\nTITLE: FOR Loop with External Parameters\nDESCRIPTION: Shows how to use variables declared outside the FOR loop within the loop body.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/for.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nLET $table1 = \"person\";\nLET $table2 = \"cat\";\n\nFOR $i in 0..4 {\n    CREATE type::thing($table1, $i);\n\tCREATE type::thing($table2, $i);\n};\n```\n\n----------------------------------------\n\nTITLE: DEFINE PARAM with IF NOT EXISTS Clause in SurrealQL\nDESCRIPTION: Example demonstrating how to use the IF NOT EXISTS clause to conditionally create a parameter only if it doesn't already exist.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/param.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE PARAM IF NOT EXISTS $example VALUE 123;\n```\n\n----------------------------------------\n\nTITLE: Fuzzy Matching Examples in SurrealDB\nDESCRIPTION: This snippet demonstrates various examples of fuzzy matching in SurrealDB, showing some potentially surprising results due to the underlying algorithm.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\n -- true\n\"United Kingdom\" ~ \"United kingdom\";\n-- true (second string entirely contained in first)\n\"United Kingdom\" ~ \"ited\";\n-- Also true!\n\"United Kingdom\" ~ \"i\";\n-- false\n\"United Kingdom\" ~ \"United Kingdóm\";\n```\n\n----------------------------------------\n\nTITLE: Base64 Encode Text Example\nDESCRIPTION: Example showing base64 encoding of text string bytes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/encoding.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nRETURN encoding::base64::encode(<bytes>\"hello\");\n\n\"aGVsbG8\"\n```\n\n----------------------------------------\n\nTITLE: Implementing person deletion command handler in SurrealDB Rust application\nDESCRIPTION: Handles the DeletePerson command, either deleting all person records if input is empty or deleting a specific record by its ID key.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nCommand::DeletePerson(s) => {\n    if s.is_empty() {\n        let res: Vec<Person> = self.delete(PERSON).await?;\n        Ok(format!(\"{res:?}\"))\n    } else {\n        let key = RecordIdKey::from(s);\n        self.delete::<Option<Person>>((PERSON, key)).await?.string()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking UUID Type in SurrealQL\nDESCRIPTION: The type::is::uuid function checks if the passed value is of type uuid.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_23\n\nLANGUAGE: surql\nCODE:\n```\ntype::is::uuid(any) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::is::uuid(u\"018a6680-bef9-701b-9025-e1754f296a0f\");\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: Dynamic Record Creation with Time-based ID\nDESCRIPTION: Creates a record with an incrementing number field using current date as part of the record ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/upsert.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nUPSERT event_for:[time::now().format(\"%Y-%m-%d\")] SET\n    number += 1;\n```\n\n----------------------------------------\n\nTITLE: Importing SurrealDB SDK in Different Environments\nDESCRIPTION: Different methods for importing the SurrealDB SDK in various JavaScript environments including ES6 modules, CommonJS, Deno, and via CDN.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/installation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Surreal from 'surrealdb';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Surreal } = require('surrealdb');\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Importing from Deno\nimport Surreal from \"https://deno.land/x/surrealdb/mod.ts\";\n\n// Import with version \nimport Surreal from \"https://deno.land/x/surrealdb@1.0.0/mod.ts\";\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport Surreal from \"https://unpkg.com/surrealdb\";\n// or\nimport Surreal from \"https://cdn.jsdelivr.net/npm/surrealdb\";\n```\n\n----------------------------------------\n\nTITLE: Calculating Cotangent in SurrealQL\nDESCRIPTION: The math::cot function returns the cotangent of a number, which is assumed to be in radians. The cotangent is the reciprocal of the tangent function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::cot(1);\n\n0.6420926159343306\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Server\nDESCRIPTION: Commands to start the SurrealDB server and connect to it via CLI\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/concurrency.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root\n```\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql --user root --pass root --ns namespace --db database --pretty\n```\n\n----------------------------------------\n\nTITLE: Snowball Filter for Finnish Stemming in SurrealQL\nDESCRIPTION: Demonstrates the snowball filter for Finnish language stemming, which is particularly effective for languages with complex but regular declension patterns.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_24\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER snowball_test TOKENIZERS blank,punct FILTERS snowball(finnish);\nsearch::analyze(\"snowball_test\", \"talo talon taloa talossa talostani taloonsa talolla talolta talolle talona taloksi taloin talotta taloineen\");\n```\n\n----------------------------------------\n\nTITLE: Computing Vector Magnitude in SurrealQL\nDESCRIPTION: The vector::magnitude function calculates the magnitude (length) of a vector. It takes a single array representing a vector and returns a number representing its magnitude.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::magnitude([ 1, 2, 3, 3, 3, 4, 5 ]);\n\n8.54400374531753f\n```\n\n----------------------------------------\n\nTITLE: Streaming Export Data in Rust\nDESCRIPTION: Example demonstrating how to export database contents as a stream of bytes instead of writing to a file.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/export.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse futures::StreamExt;\nuse surrealdb::engine::any::connect;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::opt::Resource;\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = connect(\"http://localhost:8000\").await?;\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    // Create a `person` record\n    db.create(Resource::from(\"person\")).await?;\n\n    let mut stream = db.export(()).await?;\n\n    while let Some(Ok(line)) = stream.next().await {\n        let content = String::from_utf8(line).unwrap();\n        println!(\"{content}\");\n    }\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Example Request for 'use' Method in SurrealDB RPC Protocol\nDESCRIPTION: Shows how to format a request to change the current namespace and database to 'surrealdb' and 'docs' respectively.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"use\",\n    \"params\": [ \"surrealdb\", \"docs\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidate Method Syntax in SurrealDB Rust SDK\nDESCRIPTION: This code snippet shows the basic syntax for using the .invalidate() method in the SurrealDB Rust SDK. It is used to invalidate the authentication for the current connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/invalidate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ndb.invalidate()\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB in C#\nDESCRIPTION: Connects the client to the underlying SurrealDB endpoint, improving performance by avoiding cold starts.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\ndb.Connect()\n```\n\n----------------------------------------\n\nTITLE: Consuming SurrealDB client in a controller\nDESCRIPTION: C# implementation of a WeatherForecastController that injects and uses ISurrealDbClient to perform database operations on a weatherForecast table, demonstrating Select and Create operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/dependency-injection.mdx#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace SurrealDbWeatherApi.Controllers;\n\n[ApiController]\n[Route(\"[controller]\")]\npublic class WeatherForecastController : ControllerBase\n{\n\tprivate const string Table = \"weatherForecast\";\n\n\tprivate readonly ISurrealDbClient _surrealDbClient;\n\n\tpublic WeatherForecastController(ISurrealDbClient surrealDbClient)\n\t{\n\t\t_surrealDbClient = surrealDbClient;\n\t}\n\n\t[HttpGet]\n\t[Route(\"/\")]\n\tpublic Task<List<WeatherForecast>> GetAll(CancellationToken cancellationToken)\n\t{\n\t\treturn _surrealDbClient.Select<WeatherForecast>(Table, cancellationToken);\n\t}\n\n\t[HttpPost]\n\t[Route(\"/\")]\n\tpublic Task<WeatherForecast> Create(CreateWeatherForecast data, CancellationToken cancellationToken)\n\t{\n\t\tvar weatherForecast = new WeatherForecast\n\t\t{\n\t\t\tDate = data.Date,\n\t\t\tCountry = data.Country,\n\t\t\tTemperatureC = data.TemperatureC,\n\t\t\tSummary = data.Summary\n\t\t};\n\n\t\treturn _surrealDbClient.Create(Table, weatherForecast, cancellationToken);\n\t}\n\n    // ...\n\t// Other methods omitted for brevity\n}\n\npublic class CreateWeatherForecast\n{\n\tpublic DateTime Date { get; set; }\n\tpublic string? Country { get; set; }\n\tpublic int TemperatureC { get; set; }\n\tpublic string? Summary { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Boolean Values with rand::bool() in SurrealQL\nDESCRIPTION: The rand::bool() function generates a random boolean value (true or false). It takes no parameters and returns a boolean type.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/rand.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nrand::bool() -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::bool();\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: SurrealDB PHP Use Method Syntax\nDESCRIPTION: Method signature showing how to call use() with namespace and database parameters. Both parameters are initially required and passed as an associative array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/use.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->use([ \"namespace\" => \"...\", \"database\" => \"...\" ]);\n```\n\n----------------------------------------\n\nTITLE: Namespace Token JWT Payload Structure\nDESCRIPTION: The required claims for a namespace token JWT payload. At minimum, it must include expiration time, token name, and namespace identifier.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/token.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 2147483647,\n  \"tk\": \"token_name\",\n  \"ns\": \"abcum\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Milliseconds in SurrealQL\nDESCRIPTION: The duration::millis function counts how many milliseconds fit into a duration. It takes a duration as input and returns a number.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/duration.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nduration::millis(duration) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN duration::millis(3w);\n\n1814400000\n```\n\n----------------------------------------\n\nTITLE: Field Projection in SurrealDB Queries\nDESCRIPTION: The type::field function projects a single field within a SELECT statement. It's used for dynamic field selection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:test SET title = 'Mr', name.first = 'Tobie', name.last = 'Morgan Hitchcock';\n\nLET $param = 'name.first';\n\nSELECT type::field($param), type::field('name.last') FROM person;\n```\n\n----------------------------------------\n\nTITLE: Using SurrealKV Database Client\nDESCRIPTION: Example of creating and using a SurrealDB KV database client for persistent storage\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/dotnet.mdx#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing var db = new SurrealDbKvClient(\"data.db\");\n\nconst string TABLE = \"person\";\n\nvar person = new Person\n{\n    Title = \"Founder & CEO\",\n    Name = new() { FirstName = \"Tobie\", LastName = \"Morgan Hitchcock\" },\n    Marketing = true\n};\nvar created = await db.Create(TABLE, person);\nConsole.WriteLine(ToJsonString(created));\n```\n\n----------------------------------------\n\nTITLE: Database Client Initialization\nDESCRIPTION: Global static database client setup using LazyLock\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse std::sync::LazyLock;\nstatic DB: LazyLock<Surreal<Client>> = LazyLock::new(Surreal::init);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Invalidate Method with Defer\nDESCRIPTION: A practical example showing how to use the Invalidate method within a defer function to ensure the authentication token is invalidated when the function ends. Includes error handling with panic.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/invalidate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// And we can later on invalidate the token if desired\n\tdefer func(token string) {\n\t\tif err := db.Invalidate(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}(token)\n```\n\n----------------------------------------\n\nTITLE: Database Start Script\nDESCRIPTION: Script to start the SurrealDB instance using Node.js child process\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/start.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { spawn } from \"child_process\";\n\nconsole.log(\"Starting SurrealDB...\");\n\nconst surrealProcess = spawn(\"surreal\", [\"start\", \"--unauthenticated\"], {\n  stdio: \"inherit\",\n});\n\nsurrealProcess.on(\"error\", (error) => {\n  console.error(\"Failed to start SurrealDB:\", error.message);\n});\n\nsurrealProcess.on(\"exit\", (code) => {\n  if (code === 0) {\n    console.log(\"SurrealDB process exited successfully\");\n  } else {\n    console.error(`SurrealDB process exited with code ${code}`);\n  }\n});\n\n// Keep the script running\nprocess.stdin.resume();\n```\n\n----------------------------------------\n\nTITLE: Logging Output for Rejected Network Access\nDESCRIPTION: Shows the warning message logged by SurrealDB server when a network access capability is denied.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/capabilities.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nWARN surrealdb_core::ctx::context: Capabilities denied outgoing network connection attempt, target: 'www.surrealdb.com:443'\n```\n\n----------------------------------------\n\nTITLE: SurrealDB PHP Signup Method Syntax\nDESCRIPTION: Basic syntax for the signup() method showing the required parameters including namespace, database, and scope configuration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/signup.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->signup([\n    \"namespace\" => \"test\",\n    \"database\" => \"db\",\n    \"scope\" => \"scope\",\n    // ... other variables\n]);\n```\n\n----------------------------------------\n\nTITLE: Output of Edge Counting Graph Relations in SurrealDB\nDESCRIPTION: This snippet shows the output of counting edges between NPCs to determine relationship strengths. It displays the count of 'greeted' edges between each pair of NPCs, representing how much they like each other.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tcounterpart: npc:2,\n\t\tlike_strength: 6,\n\t\tnpc: npc:1\n\t},\n\t{\n\t\tcounterpart: npc:3,\n\t\tlike_strength: 9,\n\t\tnpc: npc:1\n\t},\n\t{\n\t\tcounterpart: npc:4,\n\t\tlike_strength: 5,\n\t\tnpc: npc:1\n\t},\n\t{\n\t\tcounterpart: npc:1,\n\t\tlike_strength: 9,\n\t\tnpc: npc:2\n\t},\n\t{\n\t\tcounterpart: npc:3,\n\t\tlike_strength: 6,\n\t\tnpc: npc:2\n\t},\n\t{\n\t\tcounterpart: npc:4,\n\t\tlike_strength: 5,\n\t\tnpc: npc:2\n\t},\n\t{\n\t\tcounterpart: npc:1,\n\t\tlike_strength: 10,\n\t\tnpc: npc:3\n\t},\n\t{\n\t\tcounterpart: npc:2,\n\t\tlike_strength: 7,\n\t\tnpc: npc:3\n\t},\n\t{\n\t\tcounterpart: npc:4,\n\t\tlike_strength: 3,\n\t\tnpc: npc:3\n\t},\n\t{\n\t\tcounterpart: npc:1,\n\t\tlike_strength: 6,\n\t\tnpc: npc:4\n\t},\n\t{\n\t\tcounterpart: npc:2,\n\t\tlike_strength: 4,\n\t\tnpc: npc:4\n\t},\n\t{\n\t\tcounterpart: npc:3,\n\t\tlike_strength: 10,\n\t\tnpc: npc:4\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for SurrealDB SQL Command in Bash\nDESCRIPTION: This command shows the help information and usage instructions for the 'surreal sql' command, displaying available options and flags.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/sql.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql --help\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with Environment Variables - PowerShell\nDESCRIPTION: Example showing how to start SurrealDB using environment variables in PowerShell instead of command-line arguments for network and function permissions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/env.mdx#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$env:SURREAL_CAPS_ALLOW_NET\n$env:SURREAL_CAPS_DENY_FUNC=\"crypto::md5, http::post, http::delete\"\nsurreal start --user root --pass root\n```\n\n----------------------------------------\n\nTITLE: JWKS JWT Access Configuration Example\nDESCRIPTION: Demonstrates setting up JWT access using a remote JWKS endpoint for dynamic key verification.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/jwt.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n-- Specify the namespace and database for the token\nUSE NS abcum DB app_vitalsense;\n\n-- Set the name of the token\nDEFINE ACCESS token_name\n  -- Use this token provider for database authentication\n  ON DATABASE\n  -- Specify the type of access being defined\n  TYPE JWT\n  -- Specify the URL where the JWKS object can be found\n  URL \"https://example.com/.well-known/jwks.json\";\n```\n\n----------------------------------------\n\nTITLE: Using the close() Method in SurrealDB JavaScript SDK\nDESCRIPTION: This example demonstrates how to use the close() method in an asynchronous context to close the connection to the SurrealDB database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/close.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait db.close();\n```\n\n----------------------------------------\n\nTITLE: Using GetUpdatedRecords Method on SurrealDbLiveQuery in C#\nDESCRIPTION: Example of using the GetUpdatedRecords method to iterate through only the updated records from a live query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/streaming.mdx#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nawait using var liveQuery = await db.LiveRawQuery<Person>(\"LIVE SELECT * FROM person;\");\n\nawait foreach (var record in liveQuery.GetUpdatedRecords())\n{\n    // Use the updated record\n}\n```\n\n----------------------------------------\n\nTITLE: Using Variables in RELATE Statement with CONTENT in SurrealQL\nDESCRIPTION: Example of passing variables in the CONTENT block of a RELATE statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nLET $time = time::now();\nRELATE person:l19zjikkw1p1h9o6ixrg->wrote->article:8nkk6uj4yprt49z7y3zm\n    CONTENT {\n        time: {\n            written: $time\n        }\n    };\n```\n\n----------------------------------------\n\nTITLE: Converting Hours to Duration in SurrealQL\nDESCRIPTION: The duration::from::hours function converts a numeric amount of hours into a duration that represents hours. It takes a number as input and returns a duration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/duration.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nduration::from::hours(number) -> duration\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN duration::from::hours(3);\n\n3h\n```\n\n----------------------------------------\n\nTITLE: Basic KILL Statement Usage with Live Query\nDESCRIPTION: Example showing how to terminate a live query using its UUID obtained from a LIVE SELECT statement\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/kill.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nLIVE SELECT DIFF FROM person;\n-- output: u'0189d6e3-8eac-703a-9a48-d9faa78b44b9'\n\n-- Some time later...\nKILL u\"0189d6e3-8eac-703a-9a48-d9faa78b44b9\";\n```\n\n----------------------------------------\n\nTITLE: Mapper Filter Configuration File Example\nDESCRIPTION: Sample content for a mapper filter configuration file that maps irregular word forms to their base forms, with each line containing a base form and its variant separated by a tab.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_26\n\nLANGUAGE: text\nCODE:\n```\nrun\tran\nfoot\tfeet\n```\n\n----------------------------------------\n\nTITLE: Computing Arcsine in SurrealQL\nDESCRIPTION: The math::asin function returns the arcsine (inverse sine) of a number, which must be in the range -1 to 1. The result is expressed in radians.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::asin(0.5);\n\n0.5235987755982989\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Version Method Example Usage\nDESCRIPTION: Example showing how to call the Version() method and get the SurrealDB version string. Returns a formatted version string like 'surrealdb-1.1.1'.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/version.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nstring version = await db.Version(); // Will return \"surrealdb-1.1.1\"\n```\n\n----------------------------------------\n\nTITLE: Swapping Array Elements in SurrealDB\nDESCRIPTION: The array::swap function swaps two values in an array based on their indexes. It can use positive or negative indexes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_51\n\nLANGUAGE: surql\nCODE:\n```\narray::swap(array, from: int, to: int) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::swap([\"What's\", \"its\", \"got\", \"in\", \"it\", \"pocketses?\"], 1, 4);\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::swap([ 1, 2, 3, 4, 5 ], 0, -1);\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Version Output Format\nDESCRIPTION: Example output showing the version structure returned by the version() method, which follows the semver format with major, minor, and patch version numbers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/version.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nVersion { major: 2, minor: 0, patch: 3 }\n```\n\n----------------------------------------\n\nTITLE: Query Output for Record Links in SurrealDB\nDESCRIPTION: This snippet shows the output of querying a user with linked comments, displaying the user's name and the properties of the comment records (creation time and text content).\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tcomments: [\n\t\t\t{\n\t\t\t\tcreated_at: d'2024-12-12T02:39:07.644Z',\n\t\t\t\ttext: 'I learned something new!'\n\t\t\t},\n\t\t\t{\n\t\t\t\tcreated_at: d'2024-12-12T02:39:07.645Z',\n\t\t\t\ttext: \"I don't get it, can you explain?\"\n\t\t\t}\n\t\t],\n\t\tname: 'User McUserson'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Patch Method Syntax in PHP for SurrealDB\nDESCRIPTION: This snippet shows the method syntax for the ->patch() function in the SurrealDB PHP SDK. It takes three parameters: $thing (required), $data (optional), and $diff (optional).\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/patch.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->patch($thing, $data, $diff)\n```\n\n----------------------------------------\n\nTITLE: Merge Method Signature in C#\nDESCRIPTION: Method signature for the Merge operation in SurrealDB .NET SDK that modifies records by merging existing data with new data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/merge.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Merge<T>(resource, data)\n```\n\n----------------------------------------\n\nTITLE: Flexible Type Definitions\nDESCRIPTION: Example of using flexible types to enable schemaless functionality within a schemafull table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE user SCHEMAFULL;\nDEFINE FIELD name ON TABLE user TYPE string;\nDEFINE FIELD metadata ON TABLE user FLEXIBLE TYPE object;\nDEFINE FIELD metadata.user_id ON TABLE TYPE int;\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector Endpoint for SurrealDB\nDESCRIPTION: Sets the OTEL_EXPORTER_OTLP_ENDPOINT environment variable to specify the GRPC endpoint of the OpenTelemetry Collector running in a Kubernetes cluster.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/observability.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nOTEL_EXPORTER_OTLP_ENDPOINT=\"http://my-collector.monitoring.svc.cluster.local:4317\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Invalidate Method\nDESCRIPTION: Demonstrates how to call the Invalidate method to clear authentication for the current database connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/invalidate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Invalidate();\n```\n\n----------------------------------------\n\nTITLE: Using array::prepend Function in SurrealQL\nDESCRIPTION: The array::prepend function adds a value to the beginning of an array and returns the modified array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_36\n\nLANGUAGE: surql\nCODE:\n```\narray::prepend(array, value) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::prepend([1, 2, 3, 4], 5);\n\n[ 5, 1, 2, 3, 4 ]\n```\n\n----------------------------------------\n\nTITLE: Datetime Prefix Examples in SurrealQL\nDESCRIPTION: Examples of using the 'd' prefix to create datetime literals in SurrealQL with various formats including timezone specifications and precision levels.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/strings.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nRETURN d\"2023-11-28T11:41:20.262Z\";       --- Sub-second precision included, timezone defaulted to UTC\nRETURN d\"2023-11-28T11:41:20.262+04:00\";  --- Sub-second precision included, timezone specified as UTC + 4:00\nRETURN d\"2023-11-28T11:41:20.262-04:00\";  --- Sub-second precision included, timezone specified as UTC - 4:00\nRETURN d\"2023-11-28T11:41:20Z\";           --- Sub-second precision excluded, timezone defaulted to UTC\nRETURN d\"2023-11-28T11:41:20+04:00\";      --- Sub-second precision excluded, timezone specified as UTC + 4:00\n```\n\n----------------------------------------\n\nTITLE: Using session::rd() to retrieve record authentication data in SurrealQL\nDESCRIPTION: The session::rd() function returns the current user's record authentication data. This function was introduced in SurrealDB version 2.0.0.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/session.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nsession::rd() -> string\n```\n\n----------------------------------------\n\nTITLE: Database Token JWT Payload Structure\nDESCRIPTION: The required claims for a database token JWT payload. It must include expiration time, token name, namespace identifier, and database identifier.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/token.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 2147483647,\n  \"tk\": \"token_name\",\n  \"ns\": \"abcum\",\n  \"db\": \"app_vitalsense\"\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Record Identifier with record::id() in SurrealQL\nDESCRIPTION: The record::id() function extracts and returns the identifier from a SurrealDB Record ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/record.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nRETURN record::id(person:tobie);\n\n\"tobie\"\n```\n\n----------------------------------------\n\nTITLE: Array Boolean OR Operation in SurrealQL\nDESCRIPTION: Function that performs logical OR operations on array elements based on truthiness. Takes two arrays as input and returns a boolean array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\narray::boolean_or(lh: array, rh: array)\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::boolean_or([false, true, false, true], [false, false, true, true])\n```\n\n----------------------------------------\n\nTITLE: Defining Health Method Syntax in PHP for SurrealDB\nDESCRIPTION: This snippet shows the syntax for the health() method in the SurrealDB PHP SDK. It's used to check the health status of the database and storage engine.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/health.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->health();\n```\n\n----------------------------------------\n\nTITLE: Creating Integer Values in SurrealDB\nDESCRIPTION: This example demonstrates how to create a record with an integer value. Numbers without decimal points within the range -9223372036854775808 to 9223372036854775807 are automatically parsed as 64-bit integers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/numbers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nCREATE event SET year = 2022;\n```\n\n----------------------------------------\n\nTITLE: Converting ULID to Datetime in SurrealQL\nDESCRIPTION: The time::from::ulid function calculates a datetime based on the ULID. It takes a ULID string as input and returns a datetime value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_29\n\nLANGUAGE: surql\nCODE:\n```\ntime::from::ulid(ulid) -> datetime\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::from::ulid(\"01JH5BBTK9FKTGSDXHWP5YP9TQ\");\n\nd'2025-01-09T10:57:03.593Z'\n```\n\n----------------------------------------\n\nTITLE: Handling Timezones in SurrealDB Datetimes\nDESCRIPTION: Shows how SurrealDB handles timezone offsets in datetime values, automatically converting and storing all datetimes in UTC format.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/datetimes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nCREATE event SET time = d\"2023-07-03T07:18:52.841147+02:00\";\n```\n\n----------------------------------------\n\nTITLE: Calculating Levenshtein Distance in SurrealQL\nDESCRIPTION: The string::distance::levenshtein function calculates the Levenshtein distance between two strings. It takes two input strings and returns an integer representing the distance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nLET $first     = \"In a hole in the ground there lived a hobbit\";\nLET $same      = \"In a hole in the ground there lived a hobbit\";\nLET $close     = \"In a hole in the GROUND there lived a Hobbit\";\nLET $different = \"A narrow passage holds four hidden treasures\";\nLET $short     = \"Hi I'm Brian\";\n\n-- Returns 0\nstring::distance::levenshtein($first, $same);\n-- Returns 7\nstring::distance::levenshtein($first, $close);\n-- Returns 35\nstring::distance::levenshtein($first, $different);\n-- Returns 38\nstring::distance::levenshtein($first, $short);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Password Hashing and Comparison in SurrealQL\nDESCRIPTION: Shows how password hashing and comparison work using SurrealDB's crypto::argon2 functions. It generates two hashes for the same password and demonstrates comparison with correct and incorrect passwords.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nLET $hash1 = crypto::argon2::generate(\"myPaSSWord\");\nLET $hash2 = crypto::argon2::generate(\"myPaSSWord\");\n\nRETURN [$hash1, $hash2];\n-- First returns true, second returns false\nRETURN [\n    crypto::argon2::compare($hash1, \"myPaSSWord\")\n    crypto::argon2::compare($hash1, \"Wrongpassword\")\n];\n```\n\n----------------------------------------\n\nTITLE: Limitations of Record ID Definitions in SurrealDB\nDESCRIPTION: This snippet illustrates that DEFINE FIELD statements for record ID values are currently ignored in SurrealDB. It shows an alternative method to achieve custom ID generation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_35\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD id ON user VALUE rand::int(1, 1000000000) READONLY;\nCREATE user;\n```\n\nLANGUAGE: surql\nCODE:\n```\nCREATE user SET id = rand::int(1, 1000000000);\n```\n\n----------------------------------------\n\nTITLE: Using array::group function in SurrealQL\nDESCRIPTION: The array::group function flattens and returns the unique items in an array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_21\n\nLANGUAGE: surql\nCODE:\n```\narray::group(array) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::group([1, 2, 3, 4, [3, 5, 6], [2, 4, 5, 6], 7, 8, 8, 9]);\n\n[ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n```\n\n----------------------------------------\n\nTITLE: Validating IP Addresses in SurrealQL\nDESCRIPTION: The string::is::ip function checks if a string is a valid IP address. It takes a string input and returns a boolean.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_21\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::ip(\"192.168.0.1\");\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with root user configuration\nDESCRIPTION: This command starts the SurrealDB server with a configured root-level user for security.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/tikv.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root tikv://127.0.0.1:2379\n```\n\n----------------------------------------\n\nTITLE: Defining Basic API Endpoints in Rocket for SurrealDB\nDESCRIPTION: A function that returns a string showing available API endpoints and sample curl commands for interacting with the API. This serves as a root endpoint documentation for users trying the API.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n    #[get(\"/\")]\n    pub async fn paths() -> &'static str {\n        r#\"\n\n-----------------------------------------------------------------------------------------------------------------------------------------\n        PATH                |           SAMPLE COMMAND                                                                                  \n-----------------------------------------------------------------------------------------------------------------------------------------\n/session: See session data  |  curl -X GET    -H \"Content-Type: application/json\"                          http://localhost:8080/session\n                            |\n/person/{id}:               |\n  Create a person           |  curl -X POST   -H \"Content-Type: application/json\" -d '{\"name\":\"John Doe\"}' http://localhost:8080/person/one\n  Get a person              |  curl -X GET    -H \"Content-Type: application/json\"                          http://localhost:8080/person/one\n  Update a person           |  curl -X PUT    -H \"Content-Type: application/json\" -d '{\"name\":\"Jane Doe\"}' http://localhost:8080/person/one\n  Delete a person           |  curl -X DELETE -H \"Content-Type: application/json\"                          http://localhost:8080/person/one\n                            |\n/people: List all people    |  curl -X GET    -H \"Content-Type: application/json\"                          http://localhost:8080/people\n\n/new_user:  Create a new record user\n/new_token: Get instructions for a new token if yours has expired\"#\n    }\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Query for insertRelation\nDESCRIPTION: This snippet shows the SurrealQL query that is executed when calling the insertRelation method. It uses placeholders for the table name and data to be inserted.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/insertrelation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nINSERT RELATION INTO $table $data;\n```\n\n----------------------------------------\n\nTITLE: Generating ULID in SurrealQL\nDESCRIPTION: Shows how to use the rand::ulid function to generate a random ULID. It includes an example of using the function in a RETURN statement with the expected output.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/rand.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::ulid();\n\n[u\"01H9QDG81Q7SB33RXB7BEZBK7G\"]\n```\n\n----------------------------------------\n\nTITLE: Removing Parameters with .Unset() Method in SurrealDB Golang SDK\nDESCRIPTION: The .Unset() method removes a specified parameter for the current SurrealDB connection. It requires a string key that identifies which parameter to remove from the connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/unset.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Unset(key string)\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB without authentication\nDESCRIPTION: Starts an in-memory SurrealDB server with authentication disabled using the --unauthenticated flag. This is useful for simple testing but not recommended for production.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/memory.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --unauthenticated memory\n```\n\n----------------------------------------\n\nTITLE: Response from Complex Method Chaining Example\nDESCRIPTION: Shows the string output after applying both array push and join operations in sequence.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_58\n\nLANGUAGE: surql\nCODE:\n```\n\"Again and again and again\"\n```\n\n----------------------------------------\n\nTITLE: Index Information with CONCURRENTLY\nDESCRIPTION: Example of checking index status when built with CONCURRENTLY clause, showing progress updates.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/info.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nCREATE |user:50000| SET name = id.id() RETURN NONE;\nDEFINE INDEX unique_name ON TABLE user FIELDS name UNIQUE CONCURRENTLY;\nINFO FOR INDEX unique_name ON user;\nSLEEP 50ms;\nINFO FOR INDEX unique_name ON user;\nSLEEP 50ms;\nINFO FOR INDEX unique_name ON user;\nSLEEP 50ms;\nINFO FOR INDEX unique_name ON user;\n```\n\n----------------------------------------\n\nTITLE: Defining ANALYZER Statement Syntax in SurrealQL\nDESCRIPTION: This snippet shows the syntax for the DEFINE ANALYZER statement in SurrealQL. It allows specifying the analyzer name, tokenizers, filters, and an optional comment.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/analyzer.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER [ OVERWRITE | IF NOT EXISTS ] @name [ TOKENIZERS @tokenizers ] [ FILTERS @filters ] [ COMMENT @string ]\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Admin Credentials for SurrealDB\nDESCRIPTION: Commands to connect to the SurrealDB instance, define the root user with admin privileges, and verify the connection using the new credentials. This step sets up the initial authentication for the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/azure.mdx#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ export SURREALDB_URL=http://$(kubectl get service surrealdb-tikv -o json | jq -r .status.loadBalancer.ingress[0].ip)\n\n$ surreal sql -e $SURREALDB_URL\n> DEFINE USER root ON ROOT PASSWORD 'StrongSecretPassword!' ROLES OWNER;\n\n# Verify you can connect to the database with the new credentials:\n\n$ surreal sql -u root -p 'StrongSecretPassword!' -e $SURREALDB_URL\n> INFO FOR ROOT\n[{ accesses: {  }, namespaces: { ns: 'DEFINE NAMESPACE ns' }, nodes: { \"0e87c953-68d7-40e1-9090-3dfc404af25e\": 'NODE 0e87c953-68d7-40e1-9090-3dfc404af25e SEEN 1742870304370 ACTIVE' }, system: { available_parallelism: 14, cpu_usage: 5.905298233032227f, load_average: [1.2802734375f, 1.5400390625f, 1.71484375f], memory_allocated: 13492047, memory_usage: 187547648, physical_cores: 14, threads: 32 }, users: { root: \"DEFINE USER root ON ROOT PASSHASH '...' ROLES OWNER DURATION FOR TOKEN 1h, FOR SESSION NONE\" } }]\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring User Table in SurrealDB\nDESCRIPTION: SurrealQL commands to create a user table, enable GraphQL for it, define fields, and insert a sample user. This prepares the database for GraphQL querying.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/graphql/surrealist.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE user SCHEMAFULL;\n\n-- Enable GraphQL for the user table.\nDEFINE CONFIG GRAPHQL AUTO;\n\n-- Define some fields.\nDEFINE FIELD firstName ON TABLE user TYPE string;\nDEFINE FIELD lastName ON TABLE user TYPE string;\nDEFINE FIELD email ON TABLE user TYPE string\n  ASSERT string::is::email($value);\nDEFINE INDEX userEmailIndex ON TABLE user COLUMNS email UNIQUE;\n\n-- Create a new User\nCREATE user CONTENT {\n    firstName: 'Jon',\n    lastName: 'Doe',\n    email: 'Jon.Doe@surrealdb.com',\n};\n```\n\n----------------------------------------\n\nTITLE: Using array::repeat Function in SurrealQL\nDESCRIPTION: The array::repeat function creates an array of a given size containing the specified value repeated for each element.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_41\n\nLANGUAGE: surql\nCODE:\n```\narray::repeat(any, count: int) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::repeat(1, 10);\n\n[ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 ]\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::repeat(\"hello\", 2);\n\n[ \"hello\", \"hello\" ]\n```\n\n----------------------------------------\n\nTITLE: Basic SurrealDB Server Connection Check\nDESCRIPTION: Example of using the isready command to check if a SurrealDB server is ready at a specific endpoint.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/isready.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal isready --conn http://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Defining Select Method Syntax in PHP for SurrealDB SDK\nDESCRIPTION: This snippet shows the method syntax for the ->select() method in the SurrealDB PHP SDK. It takes a single argument $thing, which can be a string, RecordId, or StringRecordId.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/select.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->select($thing)\n```\n\n----------------------------------------\n\nTITLE: Using crypto::blake3 Hash Function in SurrealQL\nDESCRIPTION: Returns the blake3 hash of the input string value. Available since v2.0.0.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/crypto.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\ncrypto::blake3(string) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN crypto::blake3(\"tobie\");\n\n'85052e9aab1b67b6622d94a08441b09fd5b7aca61ee360416d70de5da67d86ca'\n```\n\n----------------------------------------\n\nTITLE: Array Iteration with FOR Loop\nDESCRIPTION: Demonstrates creating person records by iterating over an array of names using a FOR loop.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/for.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Create a person for everyone in the array\nFOR $name IN ['Tobie', 'Jaime'] {\n\tCREATE type::thing('person', $name) CONTENT {\n\t\tname: $name\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Data from SurrealDB in JavaScript\nDESCRIPTION: Exports data from a specified Namespace and Database in SurrealDB. This method is useful for backing up or transferring data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.export()\n```\n\n----------------------------------------\n\nTITLE: Displaying SurrealDB CLI Help Information\nDESCRIPTION: This command shows the general help information for the SurrealDB command-line tool. It provides an overview of available commands, usage syntax, and options.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/help.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal help\n```\n\n----------------------------------------\n\nTITLE: Switching Namespace and Database in SurrealDB Rust SDK\nDESCRIPTION: Demonstrates how to switch to a specific namespace and database using the use_ns() and use_db() methods. These methods are typically chained together.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\ndb.use_ns(\"test\").use_db(\"test\").await?\n```\n\n----------------------------------------\n\nTITLE: Live Query Output Example\nDESCRIPTION: Example output showing the notifications received from the live query stream for various database operations\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/live.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nCreate from live ID 63853ee1-aa9b-4e04-a54a-3b900a3cbaaa:\n  Account {\n    id: Thing {\n        tb: \"account\",\n        id: String(\n            \"cjk4pk2am5chjs4hxjpz\",\n        ),\n    },\n    balance: 10.0,\n}\n\nCreate from live ID 63853ee1-aa9b-4e04-a54a-3b900a3cbaaa:\n  Account {\n    id: Thing {\n        tb: \"account\",\n        id: String(\n            \"dp98mide1w91fnjoezf0\",\n        ),\n    },\n    balance: 10.0,\n}\n\nUpdate from live ID 63853ee1-aa9b-4e04-a54a-3b900a3cbaaa:\n  Account {\n    id: Thing {\n        tb: \"account\",\n        id: String(\n            \"cjk4pk2am5chjs4hxjpz\",\n        ),\n    },\n    balance: 1010.0,\n}\n\nUpdate from live ID 63853ee1-aa9b-4e04-a54a-3b900a3cbaaa:\n  Account {\n    id: Thing {\n        tb: \"account\",\n        id: String(\n            \"dp98mide1w91fnjoezf0\",\n        ),\n    },\n    balance: 1010.0,\n}\n\nDelete from live ID 63853ee1-aa9b-4e04-a54a-3b900a3cbaaa:\n  Account {\n    id: Thing {\n        tb: \"account\",\n        id: String(\n            \"cjk4pk2am5chjs4hxjpz\",\n        ),\n    },\n    balance: 1010.0,\n}\n\nDelete from live ID 63853ee1-aa9b-4e04-a54a-3b900a3cbaaa:\n  Account {\n    id: Thing {\n        tb: \"account\",\n        id: String(\n            \"dp98mide1w91fnjoezf0\",\n        ),\n    },\n    balance: 1010.0,\n}\n```\n\n----------------------------------------\n\nTITLE: Using math::nearestrank Function in SurrealQL\nDESCRIPTION: Finds the nearest rank value in an array of numbers based on a given target value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_21\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::nearestrank([1, 40, 60, 10, 2, 901], 50);\n```\n\n----------------------------------------\n\nTITLE: Converting Nanoseconds to Duration\nDESCRIPTION: The duration::from::nanos function converts a numeric value representing nanoseconds into a duration type. Takes a number as input and returns a duration value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/duration.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\nduration::from::nanos(number) -> duration\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN duration::from::nanos(3);\n\n3ns\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Datetime Values in SurrealDB\nDESCRIPTION: Creates an event record with a datetime field using the 'd' prefix to explicitly cast a string as a datetime value. As of v2.0.0, SurrealDB requires explicit datetime casting.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/datetimes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nCREATE event SET time = d\"2023-07-03T07:18:52Z\";\n```\n\n----------------------------------------\n\nTITLE: Output of Recursive Graph Query in SurrealDB\nDESCRIPTION: Shows the structured output of a recursive graph query, including nested 'contains' fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_24\n\nLANGUAGE: surql\nCODE:\n```\n{\n\tcontains: [\n\t\t{\n\t\t\tcontains: [\n\t\t\t\tprovince:ontario,\n\t\t\t\tprovince:bc\n\t\t\t],\n\t\t\tid: country:canada,\n\t\t\tname: 'canada'\n\t\t},\n\t\t{\n\t\t\tcontains: [\n\t\t\t\tstate:texas,\n\t\t\t\tstate:california\n\t\t\t],\n\t\t\tid: country:us,\n\t\t\tname: 'us'\n\t\t}\n\t],\n\tid: planet:earth,\n\tname: 'earth'\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mathematical Constants in SurrealQL\nDESCRIPTION: Examples of retrieving various mathematical constants in SurrealQL, including fractions of pi, logarithmic values, and infinity.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_16\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::frac_1_pi;\n\n0.3183098861837907f\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::frac_1_sqrt_2;\n\n0.7071067811865476f\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::frac_2_pi;\n\n0.6366197723675814f\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::frac_2_sqrt_pi;\n\n1.1283791670955126f\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::frac_pi_2;\n\n1.5707963267948966f\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::frac_pi_3;\n\n1.0471975511965979f\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::frac_pi_4;\n\n0.7853981633974483f\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::frac_pi_6;\n\n0.5235987755982989f\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::frac_pi_8;\n\n0.39269908169872414f\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::inf;\n\ninf\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::ln_10;\n\n2.302585092994046f\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::ln_2;\n\n0.6931471805599453f\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::log10_2;\n\n0.3010299956639812f\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::log10_e;\n\n0.4342944819032518f\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::log2_10;\n\n3.321928094887362f\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::log2_e;\n\n1.4426950408889634f\n```\n\n----------------------------------------\n\nTITLE: Adding Output Information to SurMlFile\nDESCRIPTION: Python code showing how to add output normalization information to the SurMlFile object to ensure proper interpretation of model predictions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfile.add_output(\n\t\"house_price\",\n\t\"z_score\",\n\tHOUSE_LINEAR[\"outputs\"].mean(),\n\tHOUSE_LINEAR[\"outputs\"].std()\n)\n```\n\n----------------------------------------\n\nTITLE: Array Combine Operation in SurrealQL\nDESCRIPTION: Function that combines values from two arrays into an array of arrays. Returns all possible combinations of elements.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\narray::combine(array, array) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::combine([1, 2], [2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Querying SurrealDB using TypeScript/JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to use the query method in the JavaScript/TypeScript SDK to execute SurrealQL statements. It shows the method syntax, required arguments, and how to handle query results including using generics for type safety.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/sdks/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync db.query<T>(query, vars)\n```\n\n----------------------------------------\n\nTITLE: Database JWT Token Payload Structure\nDESCRIPTION: This JSON structure shows the minimum required claims for a database-level JWT token payload in SurrealDB, including expiration time, access method name, namespace, and database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/jwt.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 2147483647,\n  \"ac\": \"token_name\",\n  \"ns\": \"abcum\",\n  \"db\": \"app_vitalsense\"\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Update Patch Operation to SurrealQL\nDESCRIPTION: Shows the equivalent SurrealQL query for the update patch operation in the Rust SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_21\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $resource PATCH $data;\n```\n\n----------------------------------------\n\nTITLE: Creating Records in SurrealDB using C#\nDESCRIPTION: Creates a new record in the database with the specified data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\ndb.Create<T>(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB on a custom port\nDESCRIPTION: This command starts the SurrealDB server on a custom port (8080) for web connections and database clients.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/tikv.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root --bind 0.0.0.0:8080 tikv://127.0.0.1:2379\n```\n\n----------------------------------------\n\nTITLE: Method Syntax for Delete Operation\nDESCRIPTION: Syntax definition for the delete operation in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_43\n\nLANGUAGE: json\nCODE:\n```\ndelete [ thing ]\n```\n\n----------------------------------------\n\nTITLE: Token Validation with Error Handling in SurrealDB Golang SDK\nDESCRIPTION: An example showing how to check a token's validity with error handling. This authenticates the database instance if sign in wasn't previously called.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/authenticate.mdx#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Check token validity. This is not necessary if you called `SignIn` before. This authenticates the `db` instance too if sign in was\n\t// not previously called\n\tif err := db.Authenticate(token); err != nil {\n\t\tpanic(err)\n\t}\n```\n\n----------------------------------------\n\nTITLE: Using object::is_empty() in SurrealQL\nDESCRIPTION: The object::is_empty function checks whether the object contains values. Available since v2.2.0.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/object.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nobject::is_empty(object) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN {\n  name: \"Aeon\",\n  age: 20\n}.is_empty();\n\nfalse\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN object::is_empty({});\n\ntrue\n```\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD metadata\n  ON house\n  TYPE object\n  ASSERT !$value.is_empty();\nCREATE house SET metadata = {};\nCREATE house SET metadata = { floors: 5 };\n```\n\nLANGUAGE: surql\nCODE:\n```\n-------- Query --------\n\n'Found {  } for field `metadata`, with record `house:aei2fms2jccm46ceib8l`, but field must conform to: !$value.is_empty()'\n\n-------- Query --------\n\n[\n\t{\n\t\tid: house:g126ct3m0scbkockq32u,\n\t\tmetadata: {\n\t\t\tfloors: 5\n\t\t}\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Working with Table Objects in SurrealDB PHP SDK\nDESCRIPTION: Implementation of Table class for handling table names in SurrealDB, including initialization and string/JSON conversion methods.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/data-types.mdx#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnew Table(string $table);\n\n$table = new Table(\"table\");\n$table->toString();              // \"table\"\n\n$table = new Table(\"table\");\n$table->jsonSerializable();      // \"table\"\njson_encode($table);             // \"table\"\n```\n\n----------------------------------------\n\nTITLE: Using session::token() to retrieve authentication token in SurrealQL\nDESCRIPTION: The session::token() function returns the current authentication token used in the SurrealDB session.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/session.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nsession::token() -> string\n```\n\n----------------------------------------\n\nTITLE: IF NOT EXISTS Event Example\nDESCRIPTION: Example showing how to use the IF NOT EXISTS clause to conditionally create an event only if it doesn't already exist.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/event.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE EVENT IF NOT EXISTS example ON example THEN {};\n```\n\n----------------------------------------\n\nTITLE: Checking Record Type in SurrealQL\nDESCRIPTION: The type::is::record function checks if the passed value is of type record. It can also validate if a record belongs to a specific table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_21\n\nLANGUAGE: surql\nCODE:\n```\ntype::is::record(any) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::is::record(user:tobie);\n\ntrue\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::is::record(user:tobie, 'test');\n\nfalse\n```\n\n----------------------------------------\n\nTITLE: Validating Hexadecimal Strings in SurrealQL\nDESCRIPTION: The string::is::hexadecimal function checks if a string is a valid hexadecimal value. It takes a string input and returns a boolean.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_20\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::hexadecimal(\"ff009e\");\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: Database Definition with OVERWRITE\nDESCRIPTION: Example showing how to define a database with the OVERWRITE clause to replace an existing database definition.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/database.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n-- Create a DATABASE and overwrite if it already exists\nDEFINE DATABASE OVERWRITE app_vitalsense;\n```\n\n----------------------------------------\n\nTITLE: Boolean Operations and String Comparisons in SurrealDB\nDESCRIPTION: Shows how to use boolean operators and functions for string comparisons and length checks.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/booleans.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person SET \n    name = \"Billy\", \n    name_is_billy = name = \"Billy\",\n    name_is_long = string::len(name) > 10;\n```\n\n----------------------------------------\n\nTITLE: Querying SurrealDB using PHP SDK\nDESCRIPTION: This snippet shows how to use the query method in the PHP SDK. It demonstrates the method syntax with required and optional parameters and provides an example of executing multiple SurrealQL statements with variable substitution.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/sdks/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$db->query($query, $vars)\n```\n\n----------------------------------------\n\nTITLE: Basic LIVE SELECT Usage\nDESCRIPTION: Basic example of a LIVE SELECT query that monitors all changes to the person table, returning a UUID used to identify the live query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/live.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nLIVE SELECT * FROM person;\n\n['b1f1d115-ad0f-460d-8cbf-dbc7ce48851c']\n```\n\n----------------------------------------\n\nTITLE: Using Scrypt Generate Function in SurrealQL\nDESCRIPTION: Example of using the crypto::scrypt::generate function in a RETURN statement to hash a password string. The function automatically handles salting and returns the complete hash string with algorithm parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/crypto.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\nRETURN crypto::scrypt::generate(\"this is a strong password\");\n\n\"$scrypt$ln=15,r=8,p=1$8gl7bipl0FELTy46YJOBrw$eRcS1qR22GI8VHo58WOXn9JyfDivGo5yTJFvpDyivuw\"\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Export Method SurrealQL Examples\nDESCRIPTION: Comprehensive SurrealQL examples showing data creation and various export scenarios including table-specific exports, function-only exports, and full database exports.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/export.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n// Create some data\ndb.query(`\n    DEFINE TABLE foo SCHEMALESS;\n    DEFINE TABLE bar SCHEMALESS;\n    CREATE foo:1 CONTENT { hello: \"world\" };\n    CREATE bar:1 CONTENT { hello: \"world\" };\n    DEFINE FUNCTION fn::foo() {\n      RETURN \"bar\";\n    };\n`)\n\n// Export specific tables only\ndb.export({\n  tables: [\"foo\", \"bar\"],\n  functions: true\n})\n\n// Export functions only\ndb.export({\n  tables: false,\n  functions: true\n})\n\n// Export nothing\ndb.export({\n  tables: false,\n  functions: false\n})\n\n// Export everything\ndb.export()\n```\n\n----------------------------------------\n\nTITLE: Using GetDeletedRecords with Live Query in C#\nDESCRIPTION: Demonstrates how to iterate through deleted records from a live query asynchronously. Uses a Person type for tracking deleted records from the person table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/streaming.mdx#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nawait using var liveQuery = await db.LiveRawQuery<Person>(\"LIVE SELECT * FROM person;\");\n\nawait foreach (var record in liveQuery.GetDeletedRecords())\n{\n    // Use the deleted record\n}\n```\n\n----------------------------------------\n\nTITLE: Using array::append Function in SurrealQL\nDESCRIPTION: Demonstrates appending a value to the end of an array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::append([1, 2, 3, 4], 5);\n```\n\n----------------------------------------\n\nTITLE: Configuring SurrealDB with Node.js Engine\nDESCRIPTION: Example of initializing a new SurrealDB instance with the Node.js engine configuration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/engines/node.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = new Surreal({\n    engines: surrealdbNodeEngines(),\n});\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Validation in SurrealQL\nDESCRIPTION: Checks if a string matches semantic versioning format. Returns a boolean value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_27\n\nLANGUAGE: surql\nCODE:\n```\nstring::is::semver(string) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::semver(\"1.0.0\");\n```\n\n----------------------------------------\n\nTITLE: Using array::is_empty function in SurrealQL\nDESCRIPTION: The array::is_empty function checks whether the array contains values. It returns true for empty arrays and false otherwise.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_24\n\nLANGUAGE: surql\nCODE:\n```\narray::is_empty(array) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::is_empty([1, 2, 3, 4]);\n\nfalse\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::is_empty([]);\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: Root User Signin to SurrealDB (JSON)\nDESCRIPTION: This example shows how to sign in as a root user by providing username and password credentials. This method provides authentication at the database root level.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"signin\",\n    \"params\": [\n        {\n            \"user\": \"tobie\",\n            \"pass\": \"3xtr3m3ly-s3cur3-p@ssw0rd\"\n        }\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Using merge() Method in TypeScript with SurrealDB\nDESCRIPTION: Demonstrates how to use the merge() method to update records in a table or a specific record. It includes examples of updating all records, updating a specific record, and merging with a subset of fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/merge.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n\tid: string;\n\tname: string;\n\tupdated_at: Date;\n\tsettings: {\n\t\tactive: boolean;\n\t\tmarketing: boolean;\n\t};\n};\n\n// Update all records in a table\nconst people = await db.merge<Person>('person', {\n\tupdated_at: new Date(),\n});\n\n// Update a record with a specific ID\nconst person = await db.merge<Person>(new RecordId('person', 'tobie'), {\n\tupdated_at: new Date(),\n\tsettings: {\n\t\tactive: true,\n\t},\n});\n\n// The content you are merging the record with might differ from the return type\nconst record = await db.merge<\n\tPerson,\n\tPick<Person, 'name'>\n>(new RecordId('person', 'tobie'), {\n\tname: 'Tobie',\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Addition in SurrealQL\nDESCRIPTION: The vector::add function performs element-wise addition of two vectors. It takes two arrays as input and returns a new array with the sum of corresponding elements.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::add([1, 2, 3], [1, 2, 3]);\n\n[2, 4, 6]\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Query for Update Method\nDESCRIPTION: Shows the SurrealQL query that is executed when using the ->update() method in the PHP SDK. This query updates the specified thing with the provided data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/update.mdx#2025-04-16_snippet_2\n\nLANGUAGE: SurrealQL\nCODE:\n```\nUPDATE $thing CONTENT $data;\n```\n\n----------------------------------------\n\nTITLE: Basic Function Definitions in SurrealQL\nDESCRIPTION: Shows basic examples of anonymous functions including a number doubling function and string concatenation function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/closures.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Define an anonymous function that doubles a number\n$double = |$n: number| $n * 2;\nRETURN $double(2);  -- Returns 4\n\n-- Define a function that concatenates two strings\n$concat = |$a: string, $b: string| $a + $b;\nRETURN $concat(\"Hello, \", \"World!\");  -- Returns \"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Defining Upsert Method Syntax in Rust\nDESCRIPTION: Demonstrates the basic syntax for the upsert method in the SurrealDB Rust SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/upsert.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.upsert(resource)\n```\n\n----------------------------------------\n\nTITLE: WITH Clause Syntax Definition\nDESCRIPTION: Defines the formal syntax structure for the WITH clause in SurrealQL queries. Shows the basic syntax pattern for specifying index usage or forcing table iteration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/with.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\n[ WITH [ NOINDEX | INDEX @indexes ... ]]\n```\n\n----------------------------------------\n\nTITLE: Advanced CRUD Operations with Structs\nDESCRIPTION: Implementation of Create, Read, Update operations using serializable Rust structs.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/setup.mdx#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::opt::Resource;\nuse surrealdb::RecordId;\nuse surrealdb::Surreal;\nuse surrealdb::Value;\n\n#[derive(Debug, Serialize)]\nstruct Name<'a> {\n    first: &'a str,\n    last: &'a str,\n}\n\n#[derive(Debug, Serialize)]\nstruct Person<'a> {\n    title: &'a str,\n    name: Name<'a>,\n    marketing: bool,\n}\n\n#[derive(Debug, Serialize)]\nstruct Responsibility {\n    marketing: bool,\n}\n\n#[derive(Debug, Deserialize)]\nstruct Record {\n    id: RecordId,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = Surreal::new::<Ws>(\"127.0.0.1:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"test\").use_db(\"test\").await?;\n\n    // Create a new person with a random id\n    let created: Option<Record> = db\n        .create(\"person\")\n        .content(Person {\n            title: \"Founder & CEO\",\n            name: Name {\n                first: \"Tobie\",\n                last: \"Morgan Hitchcock\",\n            },\n            marketing: true,\n        })\n        .await?;\n    dbg!(created);\n\n    // Update a person record with a specific id\n    db.update(Resource::from((\"person\", \"jaime\")))\n        .merge(Responsibility { marketing: true })\n        .await?;\n\n    // Select all people records\n    let people: Vec<Record> = db.select(\"person\").await?;\n    dbg!(people);\n\n    // Perform a custom advanced query\n    let mut groups = db\n        .query(\"SELECT marketing, count() FROM type::table($table) GROUP BY marketing\")\n        .bind((\"table\", \"person\"))\n        .await?;\n    dbg!(groups.take::<Value>(0).unwrap());\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a basic in-memory SurrealDB server\nDESCRIPTION: Starts an in-memory SurrealDB database server that doesn't persist data on shutdown. This is the most basic command to get a SurrealDB instance running quickly for development or testing.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/memory.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start memory\n```\n\n----------------------------------------\n\nTITLE: Generating Fly.io Configuration\nDESCRIPTION: Command to generate the initial fly.toml configuration file without immediate deployment.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/fly.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfly launch --no-deploy\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB using curl script on macOS\nDESCRIPTION: This command downloads and executes the SurrealDB install script, which installs the latest version of SurrealDB into /usr/local/bin or a user-specified folder.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/macos.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSf https://install.surrealdb.com | sh\n```\n\n----------------------------------------\n\nTITLE: Declaring Select Method in C#\nDESCRIPTION: Method signature showing the Select<T> declaration for retrieving records from SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/select.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Select<T>(resource)\n```\n\n----------------------------------------\n\nTITLE: Sleep Function Query Response in SurrealQL\nDESCRIPTION: The response from the previous query showing how each record has a progressively increasing elapsed time due to the sleep function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/sleep.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\t_: NONE,\n\t\telapsed: 101ms457µs,\n\t\tid: person:fkgvriz1kl2tcgv6yqfq\n\t},\n\t{\n\t\t_: NONE,\n\t\telapsed: 203ms599µs,\n\t\tid: person:lgibwdgtvx4v8ck60guk\n\t},\n\t{\n\t\t_: NONE,\n\t\telapsed: 305ms728µs,\n\t\tid: person:pr0uby896y1az2p44wtw\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: String IPv6 Validation in SurrealQL\nDESCRIPTION: Validates if a given string is a valid IPv6 address. Returns a boolean value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_23\n\nLANGUAGE: surql\nCODE:\n```\nstring::is::ipv6(string) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::ipv6(\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\");\n```\n\n----------------------------------------\n\nTITLE: User Document Response in SurrealDB\nDESCRIPTION: This JSON response shows the result of creating a user document in SurrealDB. It includes the automatically generated record ID with the 'users:' prefix, which SurrealDB uses to uniquely identify each record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/document.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": \"users:a2ndbh1hsquvkvthws09\", \n        \"name\": \"Alice Smith\",\n        \"email\": \"alice@example.com\",\n        \"age\": 29,\n        \"addresses\": [\n            {\n                \"type\": \"home\",\n                \"address_line\": \"123 Maple St\",\n                \"city\": \"Springfield\",\n                \"country\": \"USA\"\n            },\n            {\n                \"type\": \"work\",\n                \"address_line\": \"456 Oak Ave\",\n                \"city\": \"Metropolis\",\n                \"country\": \"USA\"\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Invalidating Authentication in SurrealDB using C#\nDESCRIPTION: Invalidates the authentication for the current connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\ndb.Invalidate()\n```\n\n----------------------------------------\n\nTITLE: Testing SurrealDB Installation\nDESCRIPTION: Commands to retrieve the SurrealDB endpoint from the Kubernetes ingress resource.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/amazon.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport SURREALDB_ENDPOINT=$(kubectl get ingress surrealdb-tikv -o json | jq '.status.loadBalancer.ingress[0].hostname' | xargs)\necho $SURREALDB_ENDPOINT\n```\n\n----------------------------------------\n\nTITLE: Sample SurrealQL Query\nDESCRIPTION: Example SurrealQL query for grouping and counting records by marketing status.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/setup.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nSELECT marketing, count() FROM person GROUP BY marketing;\n```\n\n----------------------------------------\n\nTITLE: IF ELSE as Subquery in UPSERT Statement\nDESCRIPTION: Example of using IF ELSE as a subquery within an UPSERT statement in SurrealQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/ifelse.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nUPSERT person SET railcard =\n\t(IF age <= 10 THEN)\n\t\t'junior'\n\tELSE IF age <= 21 THEN\n\t\t'student'\n\tELSE IF age >= 65 THEN\n\t\t'senior'\n\tELSE\n\t\tNULL\n\tEND\n;\n```\n\n----------------------------------------\n\nTITLE: Parsing URL Query in SurrealQL\nDESCRIPTION: This function extracts the query string from a valid URL. It returns the part after the ? symbol and before any fragment.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/parse.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nparse::url::query(string) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN parse::url::query(\"https://surrealdb.com:80/features?some=option#fragment\");\n\n\"some=option\"\n```\n\n----------------------------------------\n\nTITLE: Defining Use Method Syntax in Golang for SurrealDB SDK\nDESCRIPTION: This snippet shows the method syntax for the `.Use()` function in the SurrealDB Golang SDK. It takes two parameters: namespace and database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/use.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Use(namespace, database)\n```\n\n----------------------------------------\n\nTITLE: Switching Namespace and Database in SurrealDB JavaScript SDK\nDESCRIPTION: The 'use()' method switches to a specific namespace and database. It requires 'namespace' and 'database' arguments. If only one is specified, the current connection details will be used for the other.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/use.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.use({ namespace: 'surrealdb', database: 'docs' });\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Workflow Deployment\nDESCRIPTION: Shell commands for committing and pushing the SurrealDB workflow configuration to the repository.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/using-github-actions.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit add .github/workflows/surrealdb-ci.yml\ngit commit -m \"Add SurrealDB CI workflow\"\ngit push origin main\n```\n\n----------------------------------------\n\nTITLE: Using array::at Function in SurrealQL\nDESCRIPTION: Shows how to retrieve values from an array at specific indices, including negative indices for reverse lookup.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::at(['s', 'u', 'r', 'r', 'e', 'a', 'l'], 2);\n\nRETURN array::at(['s', 'u', 'r', 'r', 'e', 'a', 'l'], -3);\n```\n\n----------------------------------------\n\nTITLE: Rounding Down with Floor Function in SurrealQL\nDESCRIPTION: The math::floor function rounds a number down to the nearest integer. It takes a single numeric argument.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::floor(13.746189);\n\n13\n```\n\n----------------------------------------\n\nTITLE: Comparing Argon2 Hashed Passwords in SurrealQL\nDESCRIPTION: Compares a hashed-and-salted argon2 password value with an unhashed password value, returning a boolean result.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/crypto.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\ncrypto::argon2::compare(string, string) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nLET $hash = \"$argon2id$v=19$m=4096,t=3,p=1$pbZ6yJ2rPJKk4pyEMVwslQ$jHzpsiB+3S/H+kwFXEcr10vmOiDkBkydVCSMfRxV7CA\";\nLET $pass = \"this is a strong password\";\nRETURN crypto::argon2::compare($hash, $pass);\n\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: Patching Data in SurrealDB with Python\nDESCRIPTION: The patch method applies JSON Patch changes to all records or a specific record in the database. It allows for more granular updates using operations like replace, add, and remove.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/data-maniplulation.mdx#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Update all records in a table\ndb.patch('person', [\n\t{ \"op\": 'replace', \"path\": '/created_at', \"value\": datetime.datetime.now().isoformat() },\n])\n\n# Update a record with a specific ID\ndb.patch(RecordID('person', 'tobie'), [\n\t{ \"op\": 'replace', \"path\": '/settings/active', \"value\": False },\n\t{ \"op\": 'add', \"path\": '/tags', \"value\": ['developer', 'engineer'] },\n\t{ \"op\": 'remove', \"path\": '/temp' },\n])\n```\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $thing PATCH $data;\n```\n\n----------------------------------------\n\nTITLE: Applying JSON Patch to Records in SurrealDB using PHP\nDESCRIPTION: This example demonstrates how to use the ->patch() method to update all records in a table and a specific record with a given ID. It shows applying multiple patch operations including replace, add, and remove.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/patch.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Update all records in a table\n$people = $db->patch('person', [\n\t[ \"op\" => 'replace', \"path\" => '/created_at', \"value\" => new Date() ],\n]);\n\n// Update a record with a specific ID\n$person = $db->patch(new RecordId('person', 'tobie'), [\n\t[ \"op\" => 'replace', \"path\" => '/settings/active', \"value\" => false ],\n\t[ \"op\" => 'add', \"path\" => '/tags', \"value\" => ['developer', 'engineer'] ],\n\t[ \"op\" => 'remove', \"path\" => '/temp' ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Query\nDESCRIPTION: Shows the underlying SurrealQL query that is executed when using the update() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/update.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $thing CONTENT $data;\n```\n\n----------------------------------------\n\nTITLE: Switching Namespace and Database in SurrealDB using C#\nDESCRIPTION: Switches to a specific namespace and database in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\ndb.Use(namespace, database)\n```\n\n----------------------------------------\n\nTITLE: Example Response for 'version' Method in SurrealDB RPC Protocol\nDESCRIPTION: Shows the response format containing version details of the SurrealDB server including version number, build identifier, and timestamp.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": {\n        \"version\": \"2.0.0-beta.2\",\n        \"build\": \"abc123\",\n        \"timestamp\": \"2024-09-15T12:34:56Z\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying EKS Cluster\nDESCRIPTION: Commands to deploy the EKS cluster using eksctl with environment variables for cluster name and region.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/amazon.mdx#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nexport CLUSTER_NAME=surrealdb-cluster\nexport AWS_REGION=eu-west-1\n\nenvsubst < surrealdb-cluster.yml | eksctl create cluster -f -\n\naws eks update-kubeconfig --name $CLUSTER_NAME\n```\n\n----------------------------------------\n\nTITLE: Creating Duration Objects in Python\nDESCRIPTION: Examples of different ways to create Duration objects including string parsing, millisecond input, and unit-specific constructors.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/data-types.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Parsed from a duration string\nDuration(\"1w2d\")\n# Input milliseconds\nDuration(1000)\n# From a compact format ([ms, ns])\nDuration([10000, 300])\n\n# By a unit amount\nDuration.nanoseconds(1000)\nDuration.microseconds(1000)\nDuration.milliseconds(1000)\nDuration.seconds(1000)\nDuration.minutes(1000)\nDuration.hours(1000)\nDuration.days(1000)\nDuration.weeks(1000)\n```\n\n----------------------------------------\n\nTITLE: Using time::round Function in SurrealQL\nDESCRIPTION: The time::round function rounds a datetime up by a specific duration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\ntime::round(datetime, duration) -> datetime\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::round(d\"2021-11-01T08:30:17+00:00\", 1w);\n\nd\"2021-11-04T00:00:00Z\"\n```\n\n----------------------------------------\n\nTITLE: CANCEL Statement Syntax in SurrealQL\nDESCRIPTION: The basic syntax for the CANCEL statement in SurrealQL, which can be used to rollback a transaction.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/cancel.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nCANCEL [ TRANSACTION ];\n```\n\n----------------------------------------\n\nTITLE: Exporting SurrealML Model with Token Authentication\nDESCRIPTION: This command demonstrates how to export a SurrealML model using token-based authentication instead of username and password. It includes the connection URL, authentication token, namespace, database, model name, version, and output file.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/ml/export.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal ml export --conn http://localhost:8000 --token <token> --ns test --db test --name my-surrealml-model --version 1.0.0 my-surrealml-model.surml\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Parameters Structure in Rust\nDESCRIPTION: Struct definition for handling authentication parameters with lifetime annotations for name and password fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Serialize, Deserialize)]\nstruct Params<'a> {\n    name: &'a str,\n    pass: &'a str,\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing a Record's Properties in SurrealQL\nDESCRIPTION: Shows different ways to select all properties of a specific record using dot-star notation with various syntax arrangements.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM ONLY person:tobie.*;    -- This works\nSELECT * FROM ONLY (person:tobie.*);  -- Equivalent to above\nSELECT * FROM ONLY { id: person:tobie, name: 'tobie' }; -- Equivalent to above\n```\n\n----------------------------------------\n\nTITLE: Defining Update Patch Method Syntax in Rust\nDESCRIPTION: Demonstrates the syntax for the update().patch() method, which applies JSON Patch changes to records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/update.mdx#2025-04-16_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\ndb.update(resource).patch(patch_op)\n```\n\n----------------------------------------\n\nTITLE: Access Method Definition in SurrealQL\nDESCRIPTION: Defines the access method for record-based authentication including signup and signin logic with token durations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/authenticating-users.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS account ON DATABASE TYPE RECORD\n\tSIGNUP ( CREATE user SET name = $name, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE name = $name AND crypto::argon2::compare(pass, $pass) )\n\tDURATION FOR TOKEN 15m, FOR SESSION 12h;\n```\n\n----------------------------------------\n\nTITLE: Using CONTENT Clause for Record Updates in SurrealQL\nDESCRIPTION: This snippet demonstrates how to use the CONTENT clause to specify the entire record data for an update. It shows updating all records and then a specific record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/update.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\n-- Update all records with the same content\nUPDATE person CONTENT {\n\tname: 'John',\n\tcompany: 'SurrealDB',\n\tskills: ['Rust', 'Go', 'JavaScript'],\n};\n\n-- Oops, now they are both named John.\n-- Update a specific record with some content\nUPDATE person:tobie CONTENT {\n\tname: 'Tobie',\n\tcompany: 'SurrealDB',\n\tskills: ['Rust', 'Go', 'JavaScript'],\n};\n```\n\n----------------------------------------\n\nTITLE: Example Usage of SurrealDB PHP SDK Invalidate Method\nDESCRIPTION: Demonstrates a practical example of using the invalidate() method to remove authentication from a database connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/invalidate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$db->invalidate();\n```\n\n----------------------------------------\n\nTITLE: Translating Update Merge Operation to SurrealQL\nDESCRIPTION: Presents the equivalent SurrealQL query for the update merge operation in the Rust SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_19\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $resource MERGE $data;\n```\n\n----------------------------------------\n\nTITLE: Including Start Node in SurrealDB Graph Traversal\nDESCRIPTION: Demonstrates the use of +inclusive to include the starting node in the result of graph traversal algorithms.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_37\n\nLANGUAGE: surql\nCODE:\n```\nperson:you.{..+shortest=person:star+inclusive}->knows->person;\nperson:you.{..+collect+inclusive}->knows->person;\n```\n\n----------------------------------------\n\nTITLE: Removing Connection Variables in SurrealDB Python SDK\nDESCRIPTION: Removes a previously set variable for the current SurrealDB connection. This method helps in managing the connection's state by removing unnecessary variables.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndb.unset(key)\n```\n\n----------------------------------------\n\nTITLE: Deleting Graph Edges in SurrealDB\nDESCRIPTION: Shows how to delete a specific graph edge between two records using the DELETE statement with graph traversal syntax and a WHERE clause.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_18\n\nLANGUAGE: surql\nCODE:\n```\nDELETE person:tobie->bought WHERE out=product:iphone RETURN BEFORE;\n```\n\n----------------------------------------\n\nTITLE: Using math::sin Function in SurrealQL\nDESCRIPTION: Calculates the sine of a number in radians.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_30\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::sin(1);\n```\n\n----------------------------------------\n\nTITLE: RecordId Class Implementation\nDESCRIPTION: Implementation of RecordId class for handling record identifiers with various construction methods and string conversions\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/data-types.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnew RecordId<Tb extends string>(tb: Tb, id: RecordIdValue)\n\nconst rid = new RecordId(\"person\", \"john\");\n\nconst rid = new RecordId(\"person\", \"john\");\nrid.tb // \"person\"\nrid.id // \"john\"\n\nconst rid = new RecordId(\"recording\", { city: \"London\", data: 123 });\nrid.id      // { city: \"London\", data: 123 }\nrid.id.city // \"London\"\nrid.id.data // 123\n```\n\n----------------------------------------\n\nTITLE: Creating Graph Edge for Deletion Example\nDESCRIPTION: Creates a graph edge between a person and a product for demonstration purposes, showing how the relationship is stored with in and out properties.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_16\n\nLANGUAGE: surql\nCODE:\n```\nRELATE person:tobie->bought->product:iphone;\n```\n\n----------------------------------------\n\nTITLE: Enforcing Unidirectional Relationships in SurrealQL\nDESCRIPTION: Example of restricting the type definition of graph edge fields to enforce unidirectional relationships.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD in  ON TABLE wrote TYPE record<person>;\nDEFINE FIELD out ON TABLE wrote TYPE record<article>;\n```\n\n----------------------------------------\n\nTITLE: Unset Method TypeScript Definition\nDESCRIPTION: TypeScript method signature for the unset() function that removes a parameter from the database connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/unset.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.unset(key: string)\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with RocksDB Storage\nDESCRIPTION: Launches SurrealDB using RocksDB as the storage engine with root credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start -u root -p root rocksdb://mydb\n```\n\n----------------------------------------\n\nTITLE: Authenticating with JWT in SurrealDB Python SDK\nDESCRIPTION: Authenticates the current connection with a JWT token in SurrealDB. This method allows for token-based authentication using JSON Web Tokens.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\ndb.authenticate(token)\n```\n\n----------------------------------------\n\nTITLE: Base64 Encode Numbers Example\nDESCRIPTION: Example demonstrating base64 encoding of numeric bytes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/encoding.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nRETURN encoding::base64::encode(<bytes>\"2323\");\n\n\"MjMyMw\"\n```\n\n----------------------------------------\n\nTITLE: Connecting with Namespace Authentication Level\nDESCRIPTION: Example command showing how to connect to SurrealDB using namespace-level authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/sql.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql --endpoint http://localhost:8000 --namespace test --database test --auth-level namespace --username username --password password\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB using new() method in Rust\nDESCRIPTION: This snippet demonstrates the basic syntax for the new() method in the SurrealDB Rust SDK. It shows how to connect to a database endpoint using a WebSocket connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/new.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nSurreal::new::<T>(address)\n```\n\n----------------------------------------\n\nTITLE: Providing Token Renewal Instructions for SurrealDB in Rust\nDESCRIPTION: A simple function that returns instructions for obtaining a new authentication token using the SurrealDB signin endpoint. This assists users when their JWT token has expired.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\n    pub async fn get_new_token() -> String {\n        let command = r#\"curl -X POST -H \"Accept: application/json\" -d '{\"ns\":\"test\",\"db\":\"test\",\"ac\":\"account\",\"user\":\"your_username\",\"pass\":\"your_password\"}' http://localhost:8000/signin\"#;\n        format!(\"Need a new token? Use this command:\\n\\n{command}\\n\\nThen log in with surreal sql --ns test --db test --pretty --token YOUR_TOKEN_HERE\")\n    }\n```\n\n----------------------------------------\n\nTITLE: User Authentication Setup in SurrealDB\nDESCRIPTION: Configures user authentication with unique name constraints and password hashing using Argon2.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\n    DEFINE INDEX IF NOT EXISTS unique_name ON TABLE user FIELDS name UNIQUE;\n    DEFINE ACCESS IF NOT EXISTS account ON DATABASE TYPE RECORD\n\tSIGNUP ( CREATE user SET name = $name, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE name = $name AND crypto::argon2::compare(pass, $pass) )\n\tDURATION FOR TOKEN 15m, FOR SESSION 12h\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Microseconds in SurrealQL\nDESCRIPTION: The duration::micros function counts how many microseconds fit into a duration. It takes a duration as input and returns a number.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/duration.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nduration::micros(duration) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN duration::micros(3w);\n\n1814400000000\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Integer in SurrealDB\nDESCRIPTION: The type::int function converts values into integer format. It accepts decimal, float, int, number, or string as input.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::int(\"12345\");\n```\n\n----------------------------------------\n\nTITLE: QueryRaw Method Syntax in PHP\nDESCRIPTION: Basic syntax for the queryRaw method showing the required query parameter and optional params argument.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/queryRaw.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->queryRaw($query, $params);\n```\n\n----------------------------------------\n\nTITLE: Using time::max Function in SurrealQL\nDESCRIPTION: The time::max function returns the greatest datetime from an array of datetimes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\ntime::max(array<datetime>) -> datetime\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::max([ d\"1987-06-22T08:30:45Z\", d\"1988-06-22T08:30:45Z\" ])\n\nd\"1988-06-22T08:30:45Z\"\n```\n\n----------------------------------------\n\nTITLE: Terminating Live Queries in SurrealDB JavaScript SDK\nDESCRIPTION: Kills a running live query in SurrealDB. This method is used to stop receiving updates from a specific live query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.kill(queryUuid)\n```\n\n----------------------------------------\n\nTITLE: SurrealQL Function Response Examples\nDESCRIPTION: Demonstration of the expected responses from various SurrealQL database function calls, including string splitting results, array length, boolean type checking result, and a record ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-------- Query --------\n\n[\n\t'SurrealDB',\n\t'2.0',\n\t'is',\n\t'on',\n\t'its',\n\t'way!'\n]\n\n-------- Query --------\n\n3\n\n-------- Query --------\n\ntrue\n\n-------- Query --------\n\ncat:mr_meow\n```\n\n----------------------------------------\n\nTITLE: Using time::second Function in SurrealQL\nDESCRIPTION: The time::second function extracts the second as a number from a datetime, or from the current date if no datetime argument is present.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_16\n\nLANGUAGE: surql\nCODE:\n```\ntime::second(option<datetime>) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::second(d\"2021-11-01T08:30:17+00:00\");\n\n17\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Query\nDESCRIPTION: Shows the underlying SurrealQL query that gets executed when using the insert() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/insert.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO $thing $data;\n```\n\n----------------------------------------\n\nTITLE: Defining OMIT Clause Syntax in SurrealQL\nDESCRIPTION: This snippet shows the basic syntax for using the OMIT clause in SurrealQL. It specifies that fields can be omitted from a specific table in the result set.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/omit.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nOMIT @fields FROM @table\n```\n\n----------------------------------------\n\nTITLE: Array Boolean NOT Operation in SurrealQL\nDESCRIPTION: Function that performs logical NOT operations on array elements based on truthiness. Takes one array as input and returns a boolean array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\narray::boolean_not(array)\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::boolean_not([ false, true, 0, 1 ]);\n```\n\n----------------------------------------\n\nTITLE: Multi-line Strings in SurrealQL\nDESCRIPTION: Example showing how to create multi-line string literals in SurrealQL. String values can include line breaks that are preserved in the stored value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/strings.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person SET text = \"This\nis\nover\nmultiple\nlines\";\n```\n\n----------------------------------------\n\nTITLE: Update Method Syntax Definition in Golang\nDESCRIPTION: Defines the basic syntax for the Update method in the SurrealDB Golang SDK. The method is generic and accepts a table name and data parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Update[T](table, data)\n```\n\n----------------------------------------\n\nTITLE: Double NOT Operator in SurrealQL\nDESCRIPTION: Example showing the double NOT (!!) operator which determines truthiness of a value\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/operators.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM !!\"Has a value\";\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: Image Component Implementation\nDESCRIPTION: Implementation of the Image component with light/dark mode support for the GraphQL logo.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/graphql/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n    alt=\"GraphQL\"\n    width={100}\n    className=\"flag-image-title\"\n    src={{\n        light: LightGql,\n        dark: DarkGql,\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Output of Bidirectional Query in SurrealDB\nDESCRIPTION: This snippet shows the result of querying comments with their authors using a bidirectional approach. Each comment includes its properties and an array of authors who wrote it.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tauthor: [\n\t\t\t{\n\t\t\t\tid: user:f3t90z8uvns76sr3nxrd,\n\t\t\t\tname: 'User McUserson'\n\t\t\t}\n\t\t],\n\t\tcreated_at: d'2024-12-12T02:39:07.645Z',\n\t\tid: comment:gj1vtsd9d19z9afrc14j,\n\t\ttext: \"I don't get it, can you explain?\"\n\t},\n\t{\n\t\tauthor: [\n\t\t\t{\n\t\t\t\tid: user:f3t90z8uvns76sr3nxrd,\n\t\t\t\tname: 'User McUserson'\n\t\t\t}\n\t\t],\n\t\tcreated_at: d'2024-12-12T02:39:07.644Z',\n\t\tid: comment:zhnbfopxspekknsi6vx6,\n\t\ttext: 'I learned something new!'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Base64 Decode Numbers Example\nDESCRIPTION: Example showing base64 decoding returning numeric byte array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/encoding.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nRETURN encoding::base64::decode(\"MjMyMw\");\n\n[\n    50,\n    51,\n    50,\n    51,\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information in SurrealDB PHP SDK\nDESCRIPTION: This snippet demonstrates how to get user information after successful authentication using the info method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/core/authentication.mdx#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$user = $db->info();\n```\n\n----------------------------------------\n\nTITLE: Jsonifying SurrealDB Response Data in TypeScript\nDESCRIPTION: Demonstrates the use of the jsonify() utility to convert SurrealDB-specific data types into a JSON representation, preserving the structure and types as SurrealDB would.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/utilities.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njsonify({\n    rid: new RecordId(\"person\", \"tobie\"),\n\tdec: new Decimal(\"3.333333\"),\n\tdur: new Duration(\"1d2h\"),\n\tgeo: new GeometryLine([\n\t\tnew GeometryPoint([1, 2]),\n\t\tnew GeometryPoint([3, 4]),\n\t]),\n\n\ttb: new Table(\"table_name\"),\n\tuuid: new Uuid(\"92b84bde-39c8-4b4b-92f7-626096d6c4d9\"),\n\tdate: new Date(\"2024-05-06T17:44:57.085Z\"),\n\tundef: undefined,\n\tnull: null,\n\tnum: 123,\n\tfloat: 123.456,\n\ttrue: true,\n\tfalse: false,\n\tstring: \"I am a string\",\n});\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL LET Statement\nDESCRIPTION: Example of the equivalent LET statement in SurrealQL syntax for setting parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/set.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nLET $name = {\n    first: \"Tobie\",\n    last: \"Morgan Hitchcock\",\n};\n```\n\n----------------------------------------\n\nTITLE: Method Chaining with Record Functions in SurrealQL\nDESCRIPTION: Method chaining allows functions to be called using the . dot operator on a value of a certain type instead of the full path of the function followed by the value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/record.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n-- Traditional syntax\nrecord::id(r\"person:aeon\");\n\n-- Method chaining syntax\nr\"person:aeon\".id();\n```\n\n----------------------------------------\n\nTITLE: Delete Method Syntax in Rust\nDESCRIPTION: Basic syntax definition for the delete() method in the SurrealDB Rust SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/delete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.delete(resource)\n```\n\n----------------------------------------\n\nTITLE: RecordId String Conversion\nDESCRIPTION: Examples of converting RecordId instances to strings with various input types and escape handling\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/data-types.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nnew RecordId('table', 123).toString();\n// 'table:123'\nnew RecordId('table', 'abc').toString();\n// 'table:abc'\n\nnew RecordId('table', '123').toString();\n// 'table:⟨123⟩'\nnew RecordId('table', '123withletters').toString();\n// 'table:123withletters'\nnew RecordId('table', 'complex-string').toString();\n// 'table:⟨complex-string⟩'\nnew RecordId('table-name', 123).toString();\n// '⟨table-name⟩:123'\n\nnew RecordId('table', { city: \"London\" }).toString();\n// 'table:{ city: \"London\" }'\nnew RecordId('table', [\"London\"]).toString();\n// 'table:[\"London\"]'\n\nnew StringRecordId(\"person:john\");\n```\n\n----------------------------------------\n\nTITLE: Computing Cosine in SurrealQL\nDESCRIPTION: The math::cos function returns the cosine of a number, which is assumed to be in radians. The result is a value between -1 and 1.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::cos(1);\n\n0.5403023058681398\n```\n\n----------------------------------------\n\nTITLE: Illustrating Implicit RETURN in SurrealQL\nDESCRIPTION: This snippet shows how values on their own are treated as if they have an implicit RETURN in front, producing the same output as explicit RETURN statements.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/return.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n123;\n\"I am a string!\";\n{\n\tprop: \"value\"\n};\nSELECT * FROM person;\n(CREATE person).id;\n```\n\n----------------------------------------\n\nTITLE: ACCESS Statement Syntax in SurrealQL\nDESCRIPTION: The formal syntax definition for the ACCESS statement, showing all available clauses including GRANT, SHOW, REVOKE, and PURGE operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/access.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nACCESS @name [ ON [ ROOT | NAMESPACE | DATABASE ] ] [\n\tGRANT [ FOR USER @name | FOR RECORD @record ]\n\t| SHOW [ GRANT @id | ALL | WHERE @expression ] \n\t| REVOKE [ GRANT @id | ALL | WHERE @expression ] \n\t| PURGE [ EXPIRED | REVOKED [ , EXPIRED | REVOKED ] ] [ FOR @duration ]\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing list people, raw query, and session commands in SurrealDB Rust application\nDESCRIPTION: Handles the ListPeople command to retrieve all person records, the RawQuery command to execute custom SurrealQL queries, and the Session command to display current session data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nCommand::ListPeople => {\n    let person: Vec<Person> = self.select(PERSON).await?;\n    Ok(format!(\"{person:?}\"))\n}\nCommand::RawQuery(q) => match self.query(q).await {\n    Ok(ok) => Ok(format!(\"{ok:?}\")),\n    Err(e) => Ok(e.to_string()),\n},\nCommand::Session => Ok(self\n    .query(\"RETURN <string>$session\")\n    .await?\n    .take::<Option<String>>(0)?\n    .unwrap_or(\"No session data found!\".into()))\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Float in SurrealDB\nDESCRIPTION: The type::float function converts values into float format. It accepts decimal, float, int, number, or string as input.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::float(\"12345\");\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with Environment Variables - Bash\nDESCRIPTION: Example showing how to start SurrealDB using environment variables in Bash instead of command-line arguments for network and function permissions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/env.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSURREAL_CAPS_ALLOW_NET\nSURREAL_CAPS_DENY_FUNC=\"crypto::md5, http::post, http::delete\"\nsurreal start --user root --pass root\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Kill Method in SurrealDB .NET SDK\nDESCRIPTION: A simple example showing how to use the Kill method to terminate a live query by passing in the query's UUID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/kill.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Kill(queryUuid);\n```\n\n----------------------------------------\n\nTITLE: Traditional Query for Road Information in SurrealQL\nDESCRIPTION: Shows a traditional approach to query the details of the third connection in the path from city:1, returning information about the edge between city:3 and city:4.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_47\n\nLANGUAGE: surql\nCODE:\n```\nSELECT ->to->city->to->city->to.* AS third_journey FROM city:1;\n```\n\n----------------------------------------\n\nTITLE: Embed Control with JavaScript\nDESCRIPTION: Shows how to control Surrealist embeds using the iframe messaging protocol to set queries programmatically.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/advanced-topics/embedding-surrealist.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst embed = document.getElementById(\"#embed\");\n\nembed.postMessage({\n\taction: \"set_query\",\n\toptions: {\n\t\tquery: \"SELECT * FROM example;\"\n\t}\n}, \"https://surrealist.app\");\n```\n\n----------------------------------------\n\nTITLE: Comparing Datetime Values in SurrealDB\nDESCRIPTION: Demonstrates comparing two datetime values using SurrealDB's comparison operators, returning a boolean result that can be used in queries and conditions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/datetimes.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM d\"2023-07-03T07:18:52Z\" < d\"2023-07-03T07:18:52.84114Z\";\n```\n\n----------------------------------------\n\nTITLE: Performing Logical AND Operation on Arrays in SurrealQL\nDESCRIPTION: The array::logical_and function performs the AND logical operation element-wise between two arrays. The resulting array has a length of the longer input array, with each element being the result of the logical AND operation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_28\n\nLANGUAGE: surql\nCODE:\n```\narray::logical_and(lh: array, rh: array)\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::logical_and([true, false, true, false], [true, true, false, false]);\n\n[ true, false, false, false ]\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::logical_and([0, 1], [])\n\n[ 0, null ]\n```\n\n----------------------------------------\n\nTITLE: Generating Random Strings with rand::string() in SurrealQL\nDESCRIPTION: The rand::string() function generates random string values. By default, it produces a 32-character string. You can specify a fixed length or a range of lengths for the generated string.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/rand.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nrand::string() -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nrand::string(number) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nrand::string(number, number) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::string();\n\n\"N8Q86mklN6U7kv0A2XCRh5UlpQMSvdoT\"\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::string(15);\n\n\"aSCtrfJj4pSJ7Xq\"\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::string(10, 15);\n\n\"rEUWFUMcx0YH\"\n```\n\n----------------------------------------\n\nTITLE: Combined Snowball and Mapper Filters in SurrealQL\nDESCRIPTION: Creates an analyzer that combines English stemming with custom word mapping to handle both regular and irregular word forms, using an external mapping file.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_27\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER mapper TOKENIZERS blank FILTERS snowball(english),mapper('mapper.txt');\nsearch::analyze(\"mapper\", \"\n    manager managing management\n    running ran \n    foot feet\n    introspective\n    introspection\n    introspected\n\");\n```\n\n----------------------------------------\n\nTITLE: Invalidating Authentication in SurrealDB Python SDK - Method Syntax\nDESCRIPTION: The basic syntax for the invalidate() method which removes the current authentication credentials from the database connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/invalidate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.invalidate()\n```\n\n----------------------------------------\n\nTITLE: Converting RecordID to String in Python for SurrealDB (Simple)\nDESCRIPTION: Demonstrates how to convert a RecordID object with simple identifiers to a string representation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/data-types.mdx#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nstr(RecordID('table', 123))\n# 'table:123'\nstr(RecordID('table', 'abc'))\n# 'table:abc'\n```\n\n----------------------------------------\n\nTITLE: Table Class Implementation\nDESCRIPTION: Table class implementation for handling table names with string conversion and JSON serialization\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/data-types.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnew Table(table: string);\n\nconst table = new Table(\"table\");\ntable.toString();    // \"table\"\n\nconst table = new Table(\"table\");\ntable.toJSON();        // \"table\"\nJSON.stringify(table); // \"table\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Absolute Value in SurrealQL\nDESCRIPTION: The math::abs function returns the absolute value of a number. It takes a single numeric argument and returns its absolute value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::abs(-13.746189);\n\n13.746189\n```\n\n----------------------------------------\n\nTITLE: Wrapping SolidJS Application with SurrealProvider\nDESCRIPTION: Example of how to set up the App.tsx component in a SolidJS application, incorporating the SurrealProvider, QueryClientProvider, and other necessary providers for routing and authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/frameworks/solidjs.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Component } from 'solid-js';\nimport { Router, Route } from \"@solidjs/router\";\nimport { SurrealProvider } from './lib/providers/SurrealProvider';\nimport { QueryClientProvider } from '@tanstack/solid-query';\nimport { tanstackClient } from './lib/query-client';\nimport { AuthProvider } from './lib/providers/auth';\nimport { AppLayout } from './components/layout/app';\n\n\nconst App: Component = () => {\n\treturn (\n\t\t<QueryClientProvider client={tanstackClient}>\n\t\t\t<SurrealProvider\n\t\t\t\tendpoint={import.meta.env.VITE_DB_HOST}\n\t\t\t\tautoConnect\n\t\t\t\tparams={{\n\t\t\t\t\tnamespace: \"surrealdb\",\n\t\t\t\t\tdatabase: \"pollwebapp\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<AuthProvider>\n\t\t\t\t\t<Router>\n\t\t\t\t\t\t<Route path=\"/\" component={AppLayout}>\n\t\t\t\t\t\t\t... your routes here\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Router>\n\t\t\t\t</AuthProvider>\n\t\t\t</SurrealProvider>\n\t\t</QueryClientProvider>\n\t);\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing SurrealDB Authentication Provider in SolidJS\nDESCRIPTION: Creates an AuthProvider component that handles user authentication operations including login, register, and logout functionality using SurrealDB. The provider manages authentication state and exposes methods through a custom hook useAuth.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/frameworks/solidjs.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Accessor, createContext, ParentProps, useContext } from \"solid-js\";\nimport { createStore } from \"solid-js/store\";\nimport { useSurreal } from \"../lib/providers/SurrealProvider\";\n\ninterface AuthProviderState {\n\tuser: Accessor<UserRecord | undefined>;\n\tlogin: (email: string, password: string) => Promise<void>;\n\tregister: (data: Omit<UserRecord, \"id\">) => Promise<void>;\n\tlogout: () => Promise<void>;\n}\n\ninterface AuthProviderStore {\n\tuser: UserRecord | undefined;\n\tstatus: \"idle\" | \"signing-in\" | \"signing-up\" | \"signing-out\" | \"signed-in\" | \"signed-up\";\n}\n\nconst AuthContext = createContext<AuthProviderState>();\n\nexport function AuthProvider(props: ParentProps) {\n\n\tconst { \n\t\tclient, \n\t\tclose, \n\t\tconnect \n\t} = useSurreal();\n\n\tconst [store, setStore] = createStore<AuthProviderStore>({\n\t\tuser: undefined,\n\t\tstatus: \"idle\"\n\t});\n\n\tconst login = async (email: string, password: string) => {\n\t\tconst db = client();\n\t\t\n\t\tsetStore(\"status\", \"signing-in\");\n\n\t\tawait db.signin({ \n\t\t\taccess: \"user\",\n\t\t\tnamespace: \"surrealdb\",\n\t\t\tdatabase: \"pollwebapp\",\n\t\t\tvariables: {\n\t\t\t\temail: email,\n\t\t\t\tpass: password\n\t\t\t}\n\t\t});\n\n\t\tsetStore(\"status\", \"signed-up\");\n\t};\n\n\tconst register = async (data: Omit<UserRecord, \"id\">) => {\n\t\tconst db = client();\n\n\t\tsetStore(\"status\", \"signing-up\");\n\n\t\tawait db.signup({\n\t\t\taccess: \"user\",\n\t\t\tnamespace: \"surrealdb\",\n\t\t\tdatabase: \"pollwebapp\",\n\t\t\tvariables: data\n\t\t}); \n\n\t\tsetStore(\"status\", \"signed-up\");\n\t};\n\n\tconst logout = async () => {\n\n\t\tsetStore(\"status\", \"signing-out\");\n\n\t\tawait close();\n\t\tawait connect();\n\n\t\tsetStore(\"status\", \"idle\");\n\t};\n\n\tconst providerValue: AuthProviderState = {\n\t\tuser: () => store.user,\n\t\tlogin,\n\t\tregister,\n\t\tlogout\n\t};\n\n\treturn (\n\t\t<AuthContext.Provider value={providerValue}>\n\t\t\t{props.children}\n\t\t</AuthContext.Provider>\n\t);\n}\n\nexport function useAuth(): AuthProviderState {\n\tconst ctx = useContext(AuthContext);\n\n\tif(!ctx) {\n\t\tthrow new Error(\"useAuth must be used within an AuthProvider\");\n\t}\n\n\treturn ctx;\n}\n```\n\n----------------------------------------\n\nTITLE: Including Composer Autoload for SurrealDB PHP SDK\nDESCRIPTION: Includes the Composer-generated autoload.php file to load all installed classes and dependencies for the SurrealDB PHP SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/core/initialization.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninclude_once __DIR__ . '/vendor/autoload.php';\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Start Command Help Output\nDESCRIPTION: Complete help output showing all available options and configurations for the SurrealDB start command, including database settings, authentication, HTTP server configuration, and capability controls\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nStart the database server\n\nUsage: surreal start [OPTIONS] [PATH]\n\nArguments:\n  [PATH]\n          Database path used for storing data\n          \n          [env: SURREAL_PATH=]\n          [default: memory]\n\nOptions:\n      --no-banner\n          Whether to hide the startup banner\n          \n          [env: SURREAL_NO_BANNER=]\n\n  -l, --log <LOG>\n          The logging level for the command-line tool\n          \n          [env: SURREAL_LOG=]\n          [default: info]\n          [possible values: none, full, error, warn, info, debug, trace]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatabase:\n      --node-membership-refresh-interval <NODE_MEMBERSHIP_REFRESH_INTERVAL>\n          The interval at which to refresh node registration information\n          \n          [env: SURREAL_NODE_MEMBERSHIP_REFRESH_INTERVAL=]\n          [default: 3s]\n\n      --node-membership-check-interval <NODE_MEMBERSHIP_CHECK_INTERVAL>\n          The interval at which process and archive inactive nodes\n          \n          [env: SURREAL_NODE_MEMBERSHIP_CHECK_INTERVAL=]\n          [default: 15s]\n\n      --node-membership-cleanup-interval <NODE_MEMBERSHIP_CLEANUP_INTERVAL>\n          The interval at which to process and cleanup archived nodes\n          \n          [env: SURREAL_NODE_MEMBERSHIP_CLEANUP_INTERVAL=]\n          [default: 300s]\n\n      --changefeed-gc-interval <CHANGEFEED_GC_INTERVAL>\n          The interval at which to perform changefeed garbage collection\n          \n          [env: SURREAL_CHANGEFEED_GC_INTERVAL=]\n          [default: 10s]\n\n  -s, --strict\n          Whether strict mode is enabled on this database instance\n          \n          [env: SURREAL_STRICT=]\n\n      --query-timeout <QUERY_TIMEOUT>\n          The maximum duration that a set of statements can run for\n          \n          [env: SURREAL_QUERY_TIMEOUT=]\n\n      --transaction-timeout <TRANSACTION_TIMEOUT>\n          The maximum duration that any single transaction can run for\n          \n          [env: SURREAL_TRANSACTION_TIMEOUT=]\n\nAuthentication:\n  -u, --username <USERNAME>\n          The username for the initial database root user. Only if no other root user exists\n          \n          [env: SURREAL_USER=]\n          [aliases: user]\n\n  -p, --password <PASSWORD>\n          The password for the initial database root user. Only if no other root user exists\n          \n          [env: SURREAL_PASS=]\n          [aliases: pass]\n\n      --unauthenticated\n          Whether to allow unauthenticated access\n          \n          [env: SURREAL_UNAUTHENTICATED=]\n\nDatastore connection:\n      --kvs-ca <KVS_CA>\n          Path to the CA file used when connecting to the remote KV store\n          \n          [env: SURREAL_KVS_CA=]\n\n      --kvs-crt <KVS_CRT>\n          Path to the certificate file used when connecting to the remote KV store\n          \n          [env: SURREAL_KVS_CRT=]\n\n      --kvs-key <KVS_KEY>\n          Path to the private key file used when connecting to the remote KV store\n          \n          [env: SURREAL_KVS_KEY=]\n\nHTTP server:\n      --web-crt <WEB_CRT>\n          Path to the certificate file for encrypted client connections\n          \n          [env: SURREAL_WEB_CRT=]\n\n      --web-key <WEB_KEY>\n          Path to the private key file for encrypted client connections\n          \n          [env: SURREAL_WEB_KEY=]\n\n      --client-ip <CLIENT_IP>\n          The method of detecting the client's IP address\n          \n          [env: SURREAL_CLIENT_IP=]\n          [default: socket]\n\n          Possible values:\n          - none:             Don't use client IP\n          - socket:           Raw socket IP\n          - CF-Connecting-IP: Cloudflare connecting IP\n          - Fly-Client-IP:    Fly.io client IP\n          - True-Client-IP:   Akamai, Cloudflare true client IP\n          - X-Real-IP:        Nginx real IP\n          - X-Forwarded-For:  Industry standard header used by many proxies\n\n  -b, --bind <LISTEN_ADDRESSES>\n          The hostname or IP address to listen for connections on\n          \n          [env: SURREAL_BIND=]\n          [default: 127.0.0.1:8000]\n\n      --no-identification-headers\n          Whether to suppress the server name and version headers\n          \n          [env: SURREAL_NO_IDENTIFICATION_HEADERS=]\n\nCapabilities:\n  -A, --allow-all\n          Allow all capabilities except for those more specifically denied\n          \n          [env: SURREAL_CAPS_ALLOW_ALL=]\n\n      --allow-scripting\n          Allow execution of embedded scripting functions\n          \n          [env: SURREAL_CAPS_ALLOW_SCRIPT=]\n\n      --allow-guests\n          Allow guest users to execute queries\n          \n          [env: SURREAL_CAPS_ALLOW_GUESTS=]\n\n      --allow-funcs [<ALLOW_FUNCS>...]\n          Allow execution of all functions except for functions that are specifically denied. Alternatively, you can provide a comma-separated list of function names to\n          allow\n          Specifically denied functions and function families prevail over any other allowed function execution.\n          Function names must be in the form <family>[::<name>]. For example:\n           - 'http' or 'http::*' -> Include all functions in the 'http' family\n           - 'http::get' -> Include only the 'get' function in the 'http' family\n          \n          \n          [env: SURREAL_CAPS_ALLOW_FUNC=]\n\n      --allow-arbitrary-query [<ALLOW_ARBITRARY_QUERY>...]\n          Allow execution of arbitrary queries by certain user groups except when specifically denied. Alternatively, you can provide a comma-separated list of user groups to allow\n\n          Specifically denied user groups prevail over any other allowed user group.\n          User groups must be one of \"guest\", \"record\" or \"system\".\n          \n          \n          [env: SURREAL_CAPS_ALLOW_ARBITRARY_QUERY=]\n\n      --allow-net [<ALLOW_NET>...]\n          Allow all outbound network connections except for network targets that are specifically denied. Alternatively, you can provide a comma-separated list of network targets to allow\n\n          Specifically denied network targets prevail over any other allowed outbound network connections.\n          Targets must be in the form of <host>[:<port>], <ipv4|ipv6>[/<mask>]. For example:\n           - 'surrealdb.com', '127.0.0.1' or 'fd00::1' -> Match outbound connections to these hosts on any port\n           - 'surrealdb.com:80', '127.0.0.1:80' or 'fd00::1:80' -> Match outbound connections to these hosts on port 80\n           - '10.0.0.0/8' or 'fd00::/8' -> Match outbound connections to any host in these networks\n          \n          \n          [env: SURREAL_CAPS_ALLOW_NET=]\n\n      --allow-rpc [<ALLOW_RPC>...]\n          Allow all RPC methods to be called except for routes that are specifically denied. Alternatively, you can provide a comma-separated list of RPC methods to\n          allow.\n          \n          [env: SURREAL_CAPS_ALLOW_RPC=]\n          [default: ]\n\n      --allow-http [<ALLOW_HTTP>...]\n          Allow all HTTP routes to be requested except for routes that are specifically denied. Alternatively, you can provide a comma-separated list of HTTP routes to allow.\n          \n          [env: SURREAL_CAPS_ALLOW_HTTP=]\n          [default: ]\n\n  -D, --deny-all\n          Deny all capabilities except for those more specifically allowed\n          \n          [env: SURREAL_CAPS_DENY_ALL=]\n\n      --deny-scripting\n          Deny execution of embedded scripting functions\n          \n          [env: SURREAL_CAPS_DENY_SCRIPT=]\n\n      --deny-guests\n          Deny guest users to execute queries\n          \n          [env: SURREAL_CAPS_DENY_GUESTS=]\n\n      --deny-funcs [<DENY_FUNCS>...]\n          Deny execution of all functions except for functions that are specifically allowed. Alternatively, you can provide a comma-separated list of function names to deny.\n          Specifically allowed functions and function families prevail over a general denial of function execution.\n          Function names must be in the form <family>[::<name>]. For example:\n           - 'http' or 'http::*' -> Include all functions in the 'http' family\n           - 'http::get' -> Include only the 'get' function in the 'http' family\n          \n          \n          [env: SURREAL_CAPS_DENY_FUNC=]\n\n      --deny-arbitrary-query [<DENY_ARBITRARY_QUERY>...]\n          Deny execution of arbitrary queries by certain user groups except when specifically allowed. Alternatively, you can provide a comma-separated list of user groups to deny.\n          Specifically allowed user groups prevail over a general denial of user group.\n          User groups must be one of \"guest\", \"record\" or \"system\".\n          \n          \n          [env: SURREAL_CAPS_DENY_ARBITRARY_QUERY=]\n\n      --deny-net [<DENY_NET>...]\n          Deny all outbound network connections except for network targets that are specifically allowed. Alternatively, you can provide a comma-separated list of network targets to deny.\n          Specifically allowed network targets prevail over a general denial of outbound network connections.\n          Targets must be in the form of <host>[:<port>], <ipv4|ipv6>[/<mask>]. For example:\n           - 'surrealdb.com', '127.0.0.1' or 'fd00::1' -> Match outbound connections to these hosts on any port\n           - 'surrealdb.com:80', '127.0.0.1:80' or 'fd00::1:80' -> Match outbound connections to these hosts on port 80\n           - '10.0.0.0/8' or 'fd00::/8' -> Match outbound connections to any host in these networks\n          \n          \n          [env: SURREAL_CAPS_DENY_NET=]\n\n      --deny-rpc [<DENY_RPC>...]\n```\n\n----------------------------------------\n\nTITLE: Using ML Function in RETURN Statement in SurrealQL\nDESCRIPTION: Demonstrates how to use the machine learning function in a RETURN statement, showing both the function call and its output.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/ml/functions.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nRETURN ml::house-price-prediction<0.0.1>({squarefoot: 500.0, num_floors: 1.0});\n\n250000\n```\n\n----------------------------------------\n\nTITLE: Converting Unix Timestamp to Datetime in SurrealQL\nDESCRIPTION: The time::from::unix function calculates a datetime based on the seconds since January 1, 1970 0:00:00 UTC. It takes a number as input and returns a datetime value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_28\n\nLANGUAGE: surql\nCODE:\n```\ntime::from::unix(number) -> datetime\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::from::unix(1000);\n\nd\"1970-01-01T00:16:40Z\"\n```\n\n----------------------------------------\n\nTITLE: Using Set Parameters in SurrealDB .NET SDK Queries\nDESCRIPTION: This example demonstrates how to set a parameter and use it in subsequent queries. It sets a 'name' parameter and then uses it in CREATE and SELECT queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/parameters.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Assign the variable on the connection\nawait db.Set(\"name\", new Name { FirstName = \"Tobie\", LastName = \"Morgan Hitchcock\" });\n\n// Use the variable in a subsequent query\nawait db.Query($\"CREATE person SET name = $name\");\n\n// Use the variable in a subsequent query\nawait db.Query($\"SELECT * FROM person WHERE name.first_name = $name.first_name\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Sender Method\nDESCRIPTION: Helper method implementation for sending commands through the channel with error handling.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nimpl SurrealDbApp {\n    fn send(&mut self, command: Command) {\n        if let Err(e) = self.command_sender.send(command) {\n            self.results = e.to_string()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Without Identification Headers\nDESCRIPTION: Launches SurrealDB without server identification headers in HTTP responses.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --no-identification-headers\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Event Records with Composite IDs in SurrealDB\nDESCRIPTION: This snippet shows how to create event records with composite IDs and demonstrates querying techniques for these records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_29\n\nLANGUAGE: surql\nCODE:\n```\nCREATE event:[d'2025-05-05T08:00:00Z', user:one, \"debug\"] SET info = \"Logged in\";\nCREATE event:[d'2025-05-05T08:10:00Z', user:one, \"debug\"] SET info = \"Logged out\";\nCREATE event:[d'2025-05-05T08:01:00Z', user:two, \"debug\"] SET info = \"Logged in\";\n\nSELECT * FROM event:[d'2025-05-05', user:one, \"debug\"]..[d'2025-05-06', user:one, \"debug\"];\n\n-- Same result! user name and \"debug\" are irrelevant\n-- SELECT * FROM event:[d'2025-05-05']..[d'2025-05-06'];\n```\n\n----------------------------------------\n\nTITLE: SurrealQL Query for Upserting with Merge\nDESCRIPTION: Shows the equivalent SurrealQL query for the .upsert().merge() method in Rust.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/upsert.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nupsert $resource MERGE $data;\n```\n\n----------------------------------------\n\nTITLE: Setting Method Syntax for SurrealDB Parameter Assignment\nDESCRIPTION: Method signature for assigning values as parameters in a SurrealDB connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/parameters.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync db.let(key, val)\n```\n\n----------------------------------------\n\nTITLE: AWS EKS Cluster Cleanup\nDESCRIPTION: Series of commands to clean up Kubernetes resources including TiDB monitor, cluster components, Helm releases, and the EKS cluster itself. Removes all deployed components and associated infrastructure.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/amazon.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete -f tidb-monitor.yaml -n tidb-cluster\nkubectl delete -f tidb-cluster.yaml -n tidb-cluster\nhelm uninstall surrealdb-tikv\nhelm -n kube-system uninstall aws-load-balancer-controller\nhelm -n tidb-admin uninstall tidb-operator\n\neksctl delete cluster \\\n    --force \\\n    --disable-nodegroup-eviction \\\n    --parallel 10 \\\n    --name $CLUSTER_NAME\n```\n\n----------------------------------------\n\nTITLE: User Signup Request Body\nDESCRIPTION: JSON payload for user signup request\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/working-with-surrealdb-over-http-via-postman.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ns\": \"test\",\n    \"db\": \"test\",\n    \"ac\": \"human\",\n    \"email\": \"test@surreal.com\",\n    \"pass\":\"1234567886\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using time::timezone Function in SurrealQL\nDESCRIPTION: The time::timezone function returns the current local timezone offset in hours.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_17\n\nLANGUAGE: surql\nCODE:\n```\ntime::timezone() -> string\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Nanoseconds in SurrealQL\nDESCRIPTION: The duration::nanos function counts how many nanoseconds fit into a duration. It takes a duration as input and returns a number.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/duration.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nduration::nanos(duration) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN duration::nanos(3w);\n\n1814400000000000\n```\n\n----------------------------------------\n\nTITLE: Operator Binding Power Examples in SurrealQL\nDESCRIPTION: Series of examples demonstrating operator precedence and binding power in SurrealQL, including arithmetic, casting, and logical operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/operators.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\n1 + 3 * 4;\n1 + (3 * 4);\n-- Final expression\n1 + 12;\n-- Output\n13\n```\n\nLANGUAGE: surql\nCODE:\n```\n2**3 * 3;\n(2**3) * 3;\n-- Final expression\n8*3;\n-- Output\n24\n```\n\nLANGUAGE: surql\nCODE:\n```\n<string>-4;\n<string>(-4);\n-- Output\n\"-4\"\n```\n\nLANGUAGE: surql\nCODE:\n```\n<number>\"9\"**9;\n(<number>\"9\")**9;\n-- Final expression\n9**9;\n-- Output\n387420489\n```\n\nLANGUAGE: surql\nCODE:\n```\n\"c\" + \"at\" IN \"cats\";\n(\"c\" + \"at\") IN \"cats\";\n-- Final expression\n\"cat\" IN \"cats\";\n-- Output\ntrue\n```\n\nLANGUAGE: surql\nCODE:\n```\ntrue AND false OR true;\n(true AND false) OR true;\n-- Final expression\nfalse OR true;\n-- Output\ntrue\n```\n\nLANGUAGE: surql\nCODE:\n```\n<decimal>-4**2+4;\n((<decimal>(-4))**2)+4;\n-- Output\n20\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Category Record in SurrealQL\nDESCRIPTION: Creates a new record in the category table with name and timestamp fields using SurrealQL's CREATE statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/start.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE category SET\n\tname = 'Technology',\n\tcreated_at = time::now();\n```\n\n----------------------------------------\n\nTITLE: Defining THROW Statement Syntax in SurrealQL\nDESCRIPTION: This snippet shows the basic syntax for the THROW statement in SurrealQL. It demonstrates that the statement is followed by an error value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/throw.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nTHROW @error\n```\n\n----------------------------------------\n\nTITLE: Using array::push Function in SurrealQL\nDESCRIPTION: The array::push function adds a value to the end of an array and returns the modified array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_37\n\nLANGUAGE: surql\nCODE:\n```\narray::push(array, value) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::push([1, 2, 3, 4], 5);\n\n[ 1, 2, 3, 4, 5 ]\n```\n\n----------------------------------------\n\nTITLE: Method Syntax for Relate in SurrealDB Golang SDK\nDESCRIPTION: The syntax for the Relate method in the SurrealDB Golang SDK, used to create relationships between records in the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/relate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Relate(table, @in, @out, data)\n```\n\n----------------------------------------\n\nTITLE: Type Inference with UPSERT Array Operations\nDESCRIPTION: Demonstrates type inference for array operations using the += operator, where SurrealDB automatically infers the interests field as array<string>.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/upsert.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nUPSERT person:tobie SET interests += 'Java';\n```\n\n----------------------------------------\n\nTITLE: Defining subscribeLive Method Syntax in TypeScript\nDESCRIPTION: This snippet shows the method signature for the subscribeLive function in the SurrealDB JavaScript SDK. It takes a queryUuid and a callback function as arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/subscribelive.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.subscribeLive<T>(queryUuid, callback)\n```\n\n----------------------------------------\n\nTITLE: Using math::sum Function in SurrealQL\nDESCRIPTION: Calculates the sum of all numbers in an array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_35\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::sum([ 26.164, 13.746189, 23, 16.4, 41.42 ]);\n```\n\n----------------------------------------\n\nTITLE: Defining Invalidate Method Syntax in TypeScript\nDESCRIPTION: This snippet shows the method syntax for the `invalidate()` function in the SurrealDB JavaScript SDK. It is a method of the database object that takes no parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/invalidate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.invalidate()\n```\n\n----------------------------------------\n\nTITLE: String Numeric Validation in SurrealQL\nDESCRIPTION: Validates if a string contains only numeric characters. Returns a boolean value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_26\n\nLANGUAGE: surql\nCODE:\n```\nstring::is::numeric(string) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::numeric(\"1484091748\");\n```\n\n----------------------------------------\n\nTITLE: Parameter Removal Example in SurrealDB\nDESCRIPTION: Example showing how to remove a previously set parameter from a SurrealDB connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/parameters.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Remove the variable from the connection\nawait db.unset('name');\n```\n\n----------------------------------------\n\nTITLE: Utilizing Ranges in WHERE Clauses in SurrealQL\nDESCRIPTION: Demonstrates how ranges can be used in WHERE clauses for more concise and potentially more performant queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ranges.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM person WHERE age >= 18 AND age <= 65;\nSELECT * FROM person WHERE age IN 18..=65;\n\nDELETE person;\nCREATE |person:20000| SET age = (rand::float() * 120).round() RETURN NONE;\n\n-- Assign output to a parameter so the SELECT output is not displayed\nLET $_ = SELECT * FROM person WHERE age > 18 AND age < 65;\nLET $_ = SELECT * FROM person WHERE age in 18..=65;\n```\n\n----------------------------------------\n\nTITLE: Setting Parameters Method Syntax in Rust\nDESCRIPTION: Basic syntax for the set() method in SurrealDB Rust SDK for assigning connection parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/set.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.set(key, value)\n```\n\n----------------------------------------\n\nTITLE: Method Syntax for Authenticate in SurrealDB Golang SDK\nDESCRIPTION: The syntax for calling the Authenticate method in the SurrealDB Golang SDK. It requires a JWT token as an argument.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/authenticate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Authenticate(token)\n```\n\n----------------------------------------\n\nTITLE: Scaling Vectors in SurrealDB\nDESCRIPTION: The vector::scale function multiplies each item in a vector by a number. It takes an array and a number as input and returns a new scaled array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::scale([3, 1, 5, -3, 7, 2], 5);\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with Command-Line Arguments\nDESCRIPTION: Example command showing how to start SurrealDB with user credentials and security configurations using command-line arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/env.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root --allow-net --deny-funcs \"crypto::md5, http::post, http::delete\"\n```\n\n----------------------------------------\n\nTITLE: Using array::sort_lexical Function in SurrealQL\nDESCRIPTION: The array::sort_lexical function sorts array elements in lexical (alphabetical) order instead of Unicode list order. It properly handles accented characters and other language-specific sorting needs.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_46\n\nLANGUAGE: surql\nCODE:\n```\narray::sort_lexical(array) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\narray::sort_lexical(array, bool) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\narray::sort_lexical(array, string) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\n['Obrigado', 'senhor', 'Álvares'].sort();\n['Obrigado', 'senhor', 'Álvares'].sort_lexical();\n```\n\nLANGUAGE: surql\nCODE:\n```\n-------- Query 1 (443.209µs) --------\n\n[ 'Obrigado', 'senhor', 'Álvares' ]\n\n-------- Query 2 (457.542µs) --------\n\n[ 'Álvares', 'Obrigado', 'senhor' ]\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB Python SDK\nDESCRIPTION: Command to install the SurrealDB Python package using pip package manager.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/start.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install surrealdb\n```\n\n----------------------------------------\n\nTITLE: Using time::wday Function in SurrealQL\nDESCRIPTION: The time::wday function extracts the week day as a number from a datetime, or from the current date if no datetime argument is present.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_19\n\nLANGUAGE: surql\nCODE:\n```\ntime::wday(option<datetime>) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::wday(d\"2021-11-01T08:30:17+00:00\");\n\n1\n```\n\n----------------------------------------\n\nTITLE: Using math::spread Function in SurrealQL\nDESCRIPTION: Calculates the spread (range) of values in a numeric array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_31\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::spread([ 1, 40, 60, 10, 2, 901 ]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving SurrealDB Version in Rust\nDESCRIPTION: This method is used to retrieve the current version of the SurrealDB instance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\ndb.version()\n```\n\n----------------------------------------\n\nTITLE: Defining RETURN Statement Syntax in SurrealQL\nDESCRIPTION: This snippet shows the basic syntax for the RETURN statement in SurrealQL. It demonstrates that RETURN is followed by a value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/return.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nRETURN @value\n```\n\n----------------------------------------\n\nTITLE: RELATE Statement Response Format in SurrealDB\nDESCRIPTION: Shows the response format for a RELATE statement with the ONLY keyword, returning a single object with id, in, and out properties representing the relationship.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\n{\n\tid: wrote:k9f1rqn3oikolr1560u3,\n\tin: person:l19zjikkw1p1h9o6ixrg,\n\tout: article:8nkk6uj4yprt49z7y3zm\n}\n```\n\n----------------------------------------\n\nTITLE: Database Client Initialization\nDESCRIPTION: Global static database client initialization using LazyLock\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse std::sync::LazyLock;\nstatic DB: LazyLock<Surreal<Client>> = LazyLock::new(Surreal::init);\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Function Namespace Example\nDESCRIPTION: Example showing the conventional namespacing pattern for complex function names in SurrealDB using double colons\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/concepts/writing-stored-procedures.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surrealql\nCODE:\n```\nfn::project::has_member\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB SDK with Gradle (Kotlin)\nDESCRIPTION: Adds the SurrealDB Java SDK as a dependency in a Gradle project using Kotlin syntax. Defines the SDK version and includes it in the dependencies block.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/start.mdx#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nval surrealdbVersion by extra(\"0.2.1\")\n\ndependencies {\n    implementation(\"com.surrealdb:surrealdb:${surrealdbVersion}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Root JWT Token Payload Structure\nDESCRIPTION: This JSON structure shows the minimum required claims for a root-level JWT token payload in SurrealDB, including expiration time and access method name.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/jwt.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 2147483647,\n  \"ac\": \"token_name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining unset() Method Syntax in Rust for SurrealDB\nDESCRIPTION: This snippet shows the syntax for the unset() method in the SurrealDB Rust SDK. It removes a parameter from the database connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/unset.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.unset(key)\n```\n\n----------------------------------------\n\nTITLE: Defining StringRecordId Class in C#\nDESCRIPTION: This snippet shows the class definition for StringRecordId, which is used to represent Record Ids as strings in the SurrealDB .NET SDK. It contains a single property 'Value' to store the string representation of the Record Id.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/data-types.mdx#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StringRecordId\n{\n    public string Value { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Output of ON DELETE CASCADE Operation\nDESCRIPTION: This shows the query output for the ON DELETE CASCADE example, demonstrating how the comments initially exist but are removed after the person record is deleted.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/references.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\n-------- Query --------\n\n[\n\t{\n\t\tauthor: person:one,\n\t\tid: comment:8msvp0egg8cdlyu4vvn9,\n\t\ttext: 'WOW! I never knew you could cut a rope with an arrow.'\n\t},\n\t{\n\t\tauthor: person:one,\n\t\tid: comment:i72qfjy59vbn81hk6lrm,\n\t\ttext: '5/10 for this blog post. The problems I have with it are...'\n\t}\n]\n\n-------- Query --------\n\n[]\n\n-------- Query --------\n\n[]\n```\n\n----------------------------------------\n\nTITLE: REMOVE Statement Usage with IF EXISTS Clause in SurrealQL\nDESCRIPTION: Examples of using the REMOVE statement with the IF EXISTS clause, which only removes the resource if it exists. This feature is available since version 1.3.0.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/remove.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nREMOVE NAMESPACE IF EXISTS surrealdb;\n\nREMOVE DATABASE IF EXISTS blog;\n\nREMOVE USER IF EXISTS writer ON NAMESPACE;\n\nREMOVE USER IF EXISTS writer ON DATABASE;\n\nREMOVE ACCESS IF EXISTS token ON NAMESPACE;\n\nREMOVE ACCESS IF EXISTS user ON DATABASE;\n\nREMOVE EVENT IF EXISTS new_post ON TABLE article;\n\n-- Only works for Schemaful tables (i.e. tables with a schema)\nREMOVE FIELD IF EXISTS tags ON TABLE article;\n\nREMOVE INDEX IF EXISTS authors ON TABLE article;\n\nREMOVE ANALYZER IF EXISTS example_ascii;\n\nREMOVE FUNCTION IF EXISTS fn::update_author;\n\nREMOVE PARAM IF EXISTS $author;\n\nREMOVE TABLE IF EXISTS article;\n```\n\n----------------------------------------\n\nTITLE: Using Info Method Syntax in SurrealDB Golang SDK\nDESCRIPTION: The syntax for the Info method in the SurrealDB Golang SDK. This method is used to retrieve the record of an authenticated scope user.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/info.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Info<T>()\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Scope in SurrealDB (v1.x)\nDESCRIPTION: This snippet shows how to define an authentication scope for SurrealDB version 1.x using the query method. It sets up a user scope with signup and signin procedures.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/handling-authentication.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst authentication = await db.query(\n\" DEFINE SCOPE user SESSION 24h\n\tSIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) ); \"\n);\n```\n\n----------------------------------------\n\nTITLE: Connecting with Root Authentication Level\nDESCRIPTION: Example command showing how to connect to SurrealDB using root authentication level with username and password.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/sql.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql --endpoint http://localhost:8000 --namespace test --database test --auth-level root --username username --password password\n```\n\n----------------------------------------\n\nTITLE: Dependencies Configuration\nDESCRIPTION: Required dependencies in Cargo.toml for SurrealDB and Tokio\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/concurrency.mdx#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nsurrealdb = \"2.0.4\"\ntokio = \"1.41.0\"\n```\n\n----------------------------------------\n\nTITLE: Removing Field Using None in SurrealDB\nDESCRIPTION: Demonstrates how using None effectively removes a field from a record. The children field is removed entirely from the record using None.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/none_and_null.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE person SET children = NONE;\n```\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM person; -- Returns { id: person:2cz8rj0dc4tktxlkjquc }\n```\n\n----------------------------------------\n\nTITLE: Translating Update Content to SurrealQL\nDESCRIPTION: Shows the equivalent SurrealQL query for the update().content() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/update.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $resource CONTENT $data;\n```\n\n----------------------------------------\n\nTITLE: Defining Record ID Fields in a Schema in SurrealQL\nDESCRIPTION: Shows how to define fields that accept record IDs in a schema, using the 'record' type with optional table specification to restrict record types.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_19\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD possessions ON TABLE person TYPE option<array<record>>;\nDEFINE FIELD friends ON TABLE person TYPE option<array<record<person>>>;\n\nCREATE person SET\n    possessions = [ book:one, house:one],\n    friends = [ person:one, person:two ];\n```\n\n----------------------------------------\n\nTITLE: Root-Level Information Result\nDESCRIPTION: Example output of the INFO FOR ROOT command, showing namespaces, nodes, system information, and root users in the SurrealDB instance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/concepts/namespace.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\taccesses: {},\n\t\tnamespaces: {},\n\t\tnodes: {\n\t\t\t\"0e87c953-68d7-40e1-9090-3dfc404af25e\": 'NODE 0e87c953-68d7-40e1-9090-3dfc404af25e SEEN 1742869518357 ACTIVE'\n\t\t},\n\t\tsystem: {\n\t\t\tavailable_parallelism: 14,\n\t\t\tcpu_usage: 4.321133613586426f,\n\t\t\tload_average: [\n\t\t\t\t2.2265625f,\n\t\t\t\t2.2138671875f,\n\t\t\t\t2.044921875f\n\t\t\t],\n\t\t\tmemory_allocated: 13428527,\n\t\t\tmemory_usage: 154812416,\n\t\t\tphysical_cores: 14,\n\t\t\tthreads: 32\n\t\t},\n\t\tusers: {\n\t\t\troot: \"DEFINE USER root ON ROOT PASSHASH '...' ROLES OWNER DURATION FOR TOKEN 1h, FOR SESSION NONE\"\n\t\t}\n\t}\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Record-Based JWT Authentication with AWS Cognito in SurrealDB\nDESCRIPTION: Defines a record-based access method using JWT verification with AWS Cognito's JWKS endpoint. Authenticates users by validating token claims and mapping the email address to a user record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/integrate-aws-cognito-as-authentication-provider.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n-- Specify the namespace and database that will be used.\n-- These values should match the custom claims that we configured before.\nUSE NS test DB test;\n\n-- Define the public key to verify tokens issued by your AWS Cognito user pool.\n-- The name of the access method should match the custom claim that we configured before.\nDEFINE ACCESS cognito ON DATABASE TYPE RECORD\n-- We verify the token using the public keys hosted by AWS.\n    WITH JWT URL \"https://cognito-idp.<YOUR_AWS_REGION>.amazonaws.com/<YOUR_COGNITO_USER_POOL_ID>/.well-known/jwks.json\"\n    -- We check the token claims and map the email address to a record user.\n    AUTHENTICATE {\n        IF (\n            -- The issuer claim must match the URL of your AWS Cognito user pool.\n            $token.iss = \"https://cognito-idp.<YOUR_AWS_REGION>.amazonaws.com/<YOUR_COGNITO_USER_POOL_ID>\"\n            -- The audience claim must match you AWS Cognito Client ID.\n            AND $token.aud = \"<YOUR_COGNITO_CLIENT_ID>\"\n            -- The email address in the token must be verified as belonging to the user.\n            AND $token.email_verified = true\n        ) {\n            -- We return the only user that matches the email address claim found in the token.\n            RETURN SELECT * FROM user WHERE email = $token.email\n        }\n  }\n;\n```\n\n----------------------------------------\n\nTITLE: LiveQuery Method Syntax in SurrealDB Golang SDK\nDESCRIPTION: This snippet shows the syntax for the Live[T] method in the SurrealDB Golang SDK. The method accepts a table parameter and a diff boolean parameter to indicate whether to receive diffs or not.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/live.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Live[UUID](table, diff)\n```\n\n----------------------------------------\n\nTITLE: Defining Export Method Syntax in C#\nDESCRIPTION: This snippet shows the method syntax for the Export function in the SurrealDB .NET SDK. It takes optional export options and a cancellation token as arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/export.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Export(options)\n```\n\n----------------------------------------\n\nTITLE: Checking Current Database in SurrealQL\nDESCRIPTION: This snippet demonstrates how to use the INFO statement to check the current database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/use.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nINFO FOR DB; -- Check the current Database\n```\n\n----------------------------------------\n\nTITLE: Converting Microseconds to Duration in SurrealQL\nDESCRIPTION: The duration::from::micros function converts a numeric amount of microseconds into a duration that represents microseconds. It takes a number as input and returns a duration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/duration.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nduration::from::micros(number) -> duration\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN duration::from::micros(3);\n\n3μs\n```\n\n----------------------------------------\n\nTITLE: Using math::variance Function in SurrealQL\nDESCRIPTION: Calculates the variance of values in a numeric array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_40\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::variance([ 1, 40, 60, 10, 2, 901 ]);\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Boolean Operation Response\nDESCRIPTION: Example response showing the results of boolean operations and comparisons.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/booleans.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n[\n    {\n        \"id\": \"person:8ii7v7f54a2m1rla1y6b\",\n        \"name\": \"Billy\",\n        \"name_is_billy\": true,\n        \"name_is_long\": false\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Using math::sqrt Function in SurrealQL\nDESCRIPTION: Calculates the square root of a number.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_32\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::sqrt(15);\n```\n\n----------------------------------------\n\nTITLE: JavaScript SDK Bearer Authentication Implementation\nDESCRIPTION: Example showing how to authenticate using a bearer token with the SurrealDB JavaScript SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/bearer.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = new Surreal();\ndb.connect('ws://localhost:8000/rpc', {\n\tnamespace: 'test',\n\tdatabase: 'test',\n});\n\ndb.signin({\n\tnamespace: 'test',\n\tdatabase: 'test',\n\t// Provide the name of the access method\n\taccess: 'api',\n\t// Provide the bearer key in the \"key\" variable\n\tvariables: {\n    \t\tkey: 'surreal-bearer-BNb2pS0GmaJz-5eTfQ5uEu8jbRb3oblqVMAt8',\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Defining merge() Method Syntax in JavaScript\nDESCRIPTION: Shows the syntax for the merge() method in the SurrealDB JavaScript SDK. It takes two parameters: 'thing' (required) and 'data' (optional).\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/merge.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.merge<T,U>(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Output of Infinite Recursion Error in SurrealQL\nDESCRIPTION: This snippet shows the error message that occurs when a future causes infinite recursion.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/futures.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\n'Reached excessive computation depth due to functions, subqueries, or futures'\n```\n\n----------------------------------------\n\nTITLE: Merging Data in SurrealDB using C#\nDESCRIPTION: Modifies all records in a table or a specific record by merging the provided data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\ndb.Merge<T>(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Selecting Records in SurrealDB\nDESCRIPTION: Shows how to select all records from a table or a single record in SurrealDB. The method accepts a 'thing' parameter representing the table or record ID to select.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"select\",\n    \"params\": [ \"person\" ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": [\n        {\n            \"id\": \"person:8s0j0bbm3ngrd5c9bx53\",\n            \"name\": \"John\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealML with PyTorch and SKLearn\nDESCRIPTION: Command to install SurrealML with both PyTorch and scikit-learn dependencies using pip from the GitHub repository.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"git+https://github.com/surrealdb/surrealml#egg=surrealml[sklearn,torch]\"\n```\n\n----------------------------------------\n\nTITLE: Casting Ranges to Arrays in SurrealQL\nDESCRIPTION: Shows how to cast a range into an array, which can be useful for various operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ranges.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n<array> 1..3;\n```\n\n----------------------------------------\n\nTITLE: Exporting a Database as SurrealQL Script using SurrealDB CLI\nDESCRIPTION: This command exports a database as a SurrealQL script. It requires specifying the namespace and database, and allows setting connection details and authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/export.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal export [OPTIONS] --namespace <NAMESPACE> --database <DATABASE> [FILE]\n```\n\n----------------------------------------\n\nTITLE: Sleep Function API Definition in SurrealQL\nDESCRIPTION: The sleep function signature that accepts a duration parameter and returns none. This function introduces a delay in query execution for the specified time period.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/sleep.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nsleep(duration) -> none\n```\n\n----------------------------------------\n\nTITLE: Validating ASCII Strings in SurrealQL\nDESCRIPTION: The string::is::ascii function checks if a string contains only ASCII characters. It takes a string input and returns a boolean.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_16\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::ascii(\"ABC123\");\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: Initiating Live Queries in SurrealDB with C#\nDESCRIPTION: Starts a live query from a SurrealQL statement, returning real-time updates of type T.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\ndb.LiveQuery<T>(sql)\n```\n\n----------------------------------------\n\nTITLE: Using session::id() to retrieve session ID in SurrealQL\nDESCRIPTION: The session::id() function returns the current user's session identifier, which is a unique string that identifies the current session.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/session.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nsession::id() -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN session::id();\n\n\"I895rKuixHwCNIduyBIYH2M0Pga7oUmWnng5exEE4a7EB942GVElGrnRhE5scF5d\"\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB using Homebrew on macOS\nDESCRIPTION: This command installs SurrealDB using the Homebrew package manager, which installs both the command-line tools and the SurrealDB server as a single executable.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/macos.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install surrealdb/tap/surreal\n```\n\n----------------------------------------\n\nTITLE: Setting Root Authentication Secrets\nDESCRIPTION: Commands to set up secure username and password credentials using Fly.io secrets.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/fly.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfly secrets set SURREAL_USER=\"...\"\nfly secrets set SURREAL_PASS=\"...\"\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint with Middleware\nDESCRIPTION: Example of defining an API endpoint with raw_body middleware and custom response handling.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE API \"/test\"\n    FOR get \n        MIDDLEWARE\n            api::req::raw_body(false)\n        THEN {\n            RETURN {\n                status: 404,\n                body: $request.body,\n                headers: { the_time_is_now: time::now() }\n            };\n        };\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB with In-Memory Endpoint\nDESCRIPTION: Command to start a SurrealQL shell with an in-memory database instance, specifying the memory endpoint, namespace, and database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/surrealql/cli.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n## Run query in memory\nsurreal sql --endpoint memory --ns test --db test\n```\n\n----------------------------------------\n\nTITLE: Using IF EXISTS Clause Example\nDESCRIPTION: Example showing how to use the IF EXISTS clause to prevent errors when altering potentially non-existent tables.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/alter.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nALTER TABLE IF EXISTS user SCHEMAFULL;\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB SDK via Package Managers\nDESCRIPTION: Commands for installing the SurrealDB SDK using different Node.js package managers including bun, npm, yarn, and pnpm.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/installation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install surrealdb\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save surrealdb\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add surrealdb\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install surrealdb\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Years in SurrealQL\nDESCRIPTION: The duration::years function counts how many years fit into a duration. It takes a duration as input and returns a number.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/duration.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nduration::years(duration) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN duration::years(300w);\n\n5\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Dockerfile Configuration\nDESCRIPTION: Dockerfile configuration that specifies the base image, exposes port 8080, and sets up the SurrealDB start command with file storage.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/fly.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nFROM surrealdb/surrealdb:latest\nEXPOSE 8080\nCMD [\"start\", \"--bind\", \"0.0.0.0:8080\", \"file://data/srdb.db\"]\n```\n\n----------------------------------------\n\nTITLE: Built-in Function Response in SurrealDB\nDESCRIPTION: The response from executing a built-in function (time::now), which returns the current timestamp in ISO format. The result is directly available without needing to extract it from a complex structure.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": \"2024-09-15T12:34:56Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Method Syntax for db.query()\nDESCRIPTION: This snippet shows the method signature for the db.query() function. It accepts a query string and optional variables, and returns a Promise.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/writing-surrealql.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync db.query<T>(query, vars)\n```\n\n----------------------------------------\n\nTITLE: Defining Geometry Fields in SurrealQL\nDESCRIPTION: This snippet demonstrates how to define fields with geometry data types in SurrealQL. It shows examples of defining a point location field, a field accepting any geometric type, and a field restricted to specific geometric types.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\n-- Define a field with a single type\nDEFINE FIELD location ON TABLE restaurant TYPE geometry<point>;\n-- Define a field with any geometric type\nDEFINE FIELD area ON TABLE restaurant TYPE geometry<feature>;\n-- Define a field with specific geometric types\nDEFINE FIELD area ON TABLE restaurant TYPE geometry<polygon|multipolygon|collection>;\n```\n\n----------------------------------------\n\nTITLE: Basic SurrealDB connection example in Rust\nDESCRIPTION: This example shows how to create a basic connection to a SurrealDB instance using the new() method with a WebSocket connection to a local endpoint.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/new.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::Surreal;\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = Surreal::new::<Ws>(\"127.0.0.1:8000\").await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Rust Dependencies\nDESCRIPTION: Command to add required dependencies to the Rust project using cargo.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/fetch.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo add serde --features serde_derive\n```\n\n----------------------------------------\n\nTITLE: Connection String with Naming Policy for SurrealDB .NET SDK\nDESCRIPTION: A connection string example that includes the NamingPolicy parameter. This setting controls the naming convention used when interacting with the database, set to SnakeCaseLower in this example.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/connection-strings.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nEndpoint=http://127.0.0.1:8000;NS=test;DB=test;User=root;Pass=root;NamingPolicy=SnakeCaseLower\n```\n\n----------------------------------------\n\nTITLE: count() in SELECT Statement with GROUP ALL\nDESCRIPTION: Example showing count() function in a SELECT statement with GROUP ALL clause, counting all records in the array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/count.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nSELECT count() FROM [{ age: 33 }, { age: 45 }, { age: 39 }] GROUP ALL;\n\n3\n```\n\n----------------------------------------\n\nTITLE: Method Syntax for Killing Live Queries in SurrealDB Python SDK\nDESCRIPTION: This snippet shows the syntax for the 'kill' method in the SurrealDB Python SDK. It takes a single argument 'query_uuid' which represents the UUID of the live query to be terminated.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/kill.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndb.kill(query_uuid)\n```\n\n----------------------------------------\n\nTITLE: String Containment Operators in SurrealDB\nDESCRIPTION: This snippet demonstrates the use of containment operators with strings in SurrealDB, treating strings as arrays of characters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\n\"Rumplestiltskin\" CONTAINSALL [\"umple\", \"kin\"];\n\"kin\" ALLINSIDE \"Rumplestiltskin\";\n[\"kin\", \"someotherstring\"] ANYINSIDE \"Rumplestiltskin\";\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB Helm Chart with TiKV Backend\nDESCRIPTION: Commands to add the SurrealDB Helm repository and install SurrealDB with TiKV as the backend. This configuration disables authentication initially and sets up a LoadBalancer service type for external access.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/azure.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ helm repo add surrealdb https://helm.surrealdb.com\n$ helm repo update\n$ helm install \\\n    --set surrealdb.path=$TIKV_URL \\\n    --set surrealdb.auth=false \\\n    --set ingress.enabled=false \\\n    --set service.type=LoadBalancer \\\n    --set service.port=80 \\\n    --set service.targetPort=8000 \\\n    --set image.tag=latest \\\n    surrealdb-tikv surrealdb/surrealdb\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Server\nDESCRIPTION: Command to start a running SurrealDB instance with root user credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/fetch.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsurreal start --user root --pass root\n```\n\n----------------------------------------\n\nTITLE: Parameter Assignment and Comparison in SurrealQL\nDESCRIPTION: Examples showing the difference between parameter assignment and equality comparison in SurrealQL queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/operators.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\n$name = \"Trevor\";\n-- Binds \"Trevor\" to $name and returns `NONE`\n-- Does not return `true`\n$name = \"Trevor\";\n```\n\nLANGUAGE: surql\nCODE:\n```\n$name = \"Trevor\";\n-- Both return `true`\n\"Trevor\" = $name;\n$name == \"Trevor\";\n```\n\n----------------------------------------\n\nTITLE: Removing Parameters with unset() Method in SurrealDB Python SDK\nDESCRIPTION: Shows how to remove a previously set parameter using the unset() method. Takes a key argument to specify which parameter to remove from the connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/parameters.mdx#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndb.unset(key)\n```\n\n----------------------------------------\n\nTITLE: ML Import Command Help Output\nDESCRIPTION: The complete help output showing all available options and arguments for the surreal ml import command.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/ml/import.mdx#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nImport a SurrealML model into an existing database\n\nUsage: surreal ml import [OPTIONS] --namespace <NAMESPACE> --database <DATABASE> <FILE>\n\nArguments:\n  <FILE>  Path to the SurrealML file to import\n\nOptions:\n  -e, --endpoint <ENDPOINT>      Remote database server url to connect to [default: ws://localhost:8000] [aliases: conn]\n  -u, --username <USERNAME>      Database authentication username to use when connecting [env: SURREAL_USER=] [aliases: user]\n  -p, --password <PASSWORD>      Database authentication password to use when connecting [env: SURREAL_PASS=] [aliases: pass]\n      --auth-level <AUTH_LEVEL>  Authentication level to use when connecting\n                                 Must be enabled in the server and uses the values of '--namespace' and '--database'\n                                  [env: SURREAL_AUTH_LEVEL=] [default: root] [possible values: root, namespace, ns, database, db]\n      --namespace <NAMESPACE>    The namespace selected for the operation [env: SURREAL_NAMESPACE=] [aliases: ns]\n      --database <DATABASE>      The database selected for the operation [env: SURREAL_DATABASE=] [aliases: db]\n  -h, --help                     Print help\n```\n\n----------------------------------------\n\nTITLE: Inserting Record with RETURN BEFORE in SurrealQL\nDESCRIPTION: This example shows the usage of RETURN BEFORE in an INSERT statement, which is essentially the same as RETURN NONE for inserts.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/insert.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nINSERT INTO company {\n\tname: 'SurrealDB',\n\tfounded: \"2021-09-10\",\n\tfounders: [person:tobie, person:jaime],\n\ttags: ['big data', 'database']\n} RETURN BEFORE;\n```\n\n----------------------------------------\n\nTITLE: Basic LIMIT Examples in SurrealQL\nDESCRIPTION: Examples showing how to use the LIMIT clause to retrieve a specific number of records and how to combine it with START for pagination.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/limit.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Select the first 10 records\nSELECT * FROM person LIMIT 10;\n\n-- Start at record 50 and select the following 10 records\nSELECT * FROM person LIMIT 10 START 50;\n```\n\n----------------------------------------\n\nTITLE: Translating Create Operation to SurrealQL\nDESCRIPTION: Shows the equivalent SurrealQL query for the create operation in the Rust SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\nCREATE $resource CONTENT $data;\n```\n\n----------------------------------------\n\nTITLE: Configuring SurrealDB connection string in appsettings.Development.json\nDESCRIPTION: JSON configuration that adds a SurrealDB connection string to the application settings file, specifying server location, namespace, database, and credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/dependency-injection.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"AllowedHosts\": \"*\",\n  \"Logging\": {\n    \"LogLevel\": {\n    \"Default\": \"Information\",\n    \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  },\n  \"ConnectionStrings\": {\n    \"SurrealDB\": \"Server=http://127.0.0.1:8000;Namespace=test;Database=test;Username=root;Password=root\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Query for Merge Operation\nDESCRIPTION: Displays the underlying SurrealQL query executed by the 'merge' method in the SurrealDB JavaScript SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/data-maniplulation.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $thing MERGE $data;\n```\n\n----------------------------------------\n\nTITLE: Configuring Scope-Based JWT Authentication with AWS Cognito in SurrealDB (Legacy v1.x)\nDESCRIPTION: Defines a scope-based token verification method using JWKS for AWS Cognito integration in SurrealDB v1.x. Creates a user scope and configures token verification with Cognito's JWKS endpoint.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/integrate-aws-cognito-as-authentication-provider.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\n-- Specify the namespace and database that will be used.\n-- These values should match the custom claims that we configured before.\nUSE NS test DB test;\n\n-- Define the scope where the token will be used.\n-- The name of the scope should match the custom claim that we configured before.\nDEFINE SCOPE user;\n\n-- Define the public key to verify tokens issued by your AWS Cognito user pool.\n-- The name of the token should match the custom claim that we configured before.\nDEFINE TOKEN cognito ON SCOPE user TYPE JWKS\n  VALUE \"https://cognito-idp.<YOUR_AWS_REGION>.amazonaws.com/<YOUR_COGNITO_USER_POOL_ID>/.well-known/jwks.json\";\n;\n```\n\n----------------------------------------\n\nTITLE: Custom Function Response in SurrealDB\nDESCRIPTION: The response from executing a custom function that calculates a discount. The function receives two arguments (price and discount percentage) and returns the discounted price as a direct result.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": 85\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Query Method Signature\nDESCRIPTION: TypeScript method signature for the live() function that initiates a live query on a SurrealDB table. Takes a table name, callback function, and optional diff parameter.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/live.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.live<T>(table: string, callback: (action: string, result: T) => void, diff?: boolean)\n```\n\n----------------------------------------\n\nTITLE: Namespace Information Query\nDESCRIPTION: Example of querying namespace-level information including users, databases and access methods.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/info.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nINFO FOR NS;\n```\n\nLANGUAGE: surql\nCODE:\n```\n{\n    accesses: {},\n    databases: {},\n    users: {\n        n: \"DEFINE USER n ON NAMESPACE PASSHASH '' ROLES VIEWER DURATION FOR TOKEN 1h, FOR SESSION NONE\",\n        username: \"DEFINE USER username ON NAMESPACE PASSHASH '$argon2id$v=19$m=19456,t=2,p=1$K9DIBCuzH2IA6w7t3ZVGkQ$KkRODt0cqgUap9OwZCxLJC4ESo6wEToUk55oumhmgA0' ROLES EDITOR DURATION FOR TOKEN 1m, FOR SESSION 12h\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SurrealDB server startup output\nDESCRIPTION: This snippet shows the expected output when starting a SurrealDB server with custom user, password, and port settings.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/tikv.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root --bind 0.0.0.0:8080 tikv://127.0.0.1:2379\n2025-02-14T12:16:28.660617Z  INFO surreal::env: Running 2.2.0 for macos on aarch64\n2025-02-14T12:16:28.660678Z  INFO surrealdb::core::kvs::ds: Connecting to kvs store at tikv://127.0.0.1:2379\n2025-02-14T12:16:28.660825Z  INFO tikv_client::common::security: connect to rpc server at endpoint: \"http://127.0.0.1:2379\"\n2025-02-14T12:16:28.661224Z  INFO tikv_client::common::security: connect to rpc server at endpoint: \"http://127.0.0.1:2379\"\n2025-02-14T12:16:28.662509Z  INFO tikv_client::pd::cluster: All PD endpoints are consistent: [\"127.0.0.1:2379\"]\n2025-02-14T12:16:28.662547Z  INFO tikv_client::common::security: connect to rpc server at endpoint: \"http://127.0.0.1:2379\"\n2025-02-14T12:16:28.662756Z  INFO tikv_client::common::security: connect to rpc server at endpoint: \"http://127.0.0.1:2379\"\n2025-02-14T12:16:28.663523Z  INFO tikv_client::common::security: connect to rpc server at endpoint: \"http://127.0.0.1:2379\"\n2025-02-14T12:16:28.663710Z  INFO tikv_client::common::security: connect to rpc server at endpoint: \"http://127.0.0.1:2379\"\n2025-02-14T12:16:28.664321Z  INFO surrealdb::core::kvs::ds: Connected to kvs store at tikv://127.0.0.1:2379\n2025-02-14T12:16:28.665553Z  INFO tikv_client::pd::client: connect to tikv endpoint: \"127.0.0.1:20160\"\n2025-02-14T12:16:28.665568Z  INFO tikv_client::common::security: connect to rpc server at endpoint: \"http://127.0.0.1:20160\"\n2025-02-14T12:16:28.667826Z  WARN surrealdb::core::kvs::ds: Credentials were provided, but existing root users were found. The root user 'root' will not be created\n2025-02-14T12:16:28.667832Z  WARN surrealdb::core::kvs::ds: Consider removing the --user and --pass arguments from the server start command\n2025-02-14T12:16:28.680059Z  INFO surrealdb::net: Listening for a system shutdown signal.\n2025-02-14T12:16:28.680066Z  INFO surrealdb::net: Started web server on 0.0.0.0:8080\n```\n\n----------------------------------------\n\nTITLE: Transforming Duration Objects in Python\nDESCRIPTION: Methods to transform Duration objects into different formats and extract time unit values.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/data-types.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndur = Duration(\"7d\")\n\n# Format as string, always as small as possible\ndur.to_string()     # 1w\n# Get inner milliseconds\ndur._milliseconds  # 604800000\n# Get compact format\ndur.to_compact()    # [604800]\n\n# How many of a full unit fit into the duration\ndur.nanoseconds    # 604800000000000\ndur.microseconds   # 604800000000\ndur.milliseconds   # 604800000\ndur.seconds        # 604800\ndur.minutes        # 10080\ndur.hours          # 168\ndur.days           # 7\ndur.weeks          # 1\n```\n\n----------------------------------------\n\nTITLE: Kill Method Syntax in SurrealDB JavaScript SDK\nDESCRIPTION: Defines the syntax for the kill() method that takes a queryUuid parameter to terminate a specific live query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/kill.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.kill(queryUuid)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SLEEP Usage in SurrealQL\nDESCRIPTION: This example demonstrates how to use the SLEEP statement in SurrealQL. It shows two cases: sleeping for one second and sleeping for 100 milliseconds.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/sleep.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Sleep one second\nSLEEP 1s;\n-- Sleep 100 milliseconds\nSLEEP 100ms;\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Range in SurrealDB\nDESCRIPTION: The type::range function converts values into ranges. It accepts range or array with two values as input.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::range([1, 2]);\n\nRETURN type::range(1..10)\n\nRETURN type::range([1,9,4]);\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Booleans in SurrealDB\nDESCRIPTION: The type::bool function converts values into booleans. It accepts either a boolean or string as input.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::bool(\"true\");\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Boolean Values in SurrealDB\nDESCRIPTION: Demonstrates how boolean values can be written in different cases while maintaining the same functionality.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/booleans.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person SET \n    newsletter = FALSE,\n    interested = True,\n    very_interested = trUE;\n```\n\n----------------------------------------\n\nTITLE: Inserting a Relation with Auto-Generated ID in SurrealDB (JSON)\nDESCRIPTION: Demonstrates how to insert a relation between two users in the 'friendship' table using the 'insert_relation' method. The ID is automatically generated based on the table, in, and out fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 4,\n    \"method\": \"insert_relation\",\n    \"params\": [\n        \"friendship\",              // table (relation table)\n        {                          // data\n            \"in\": \"user:alice\",\n            \"out\": \"user:bob\",\n            \"since\": \"2024-09-15\"\n        }\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 4,\n    \"result\": {\n        \"id\": \"friendship:user:alice:user:bob\",\n        \"in\": \"user:alice\",\n        \"out\": \"user:bob\",\n        \"since\": \"2024-09-15\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting All Records in SurrealQL (Neo4j Equivalent)\nDESCRIPTION: Shows how to delete all records from a table in SurrealQL compared to Neo4j's approach. This empties the table while keeping its structure intact.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_19\n\nLANGUAGE: SurrealQL\nCODE:\n```\nDELETE person\n```\n\n----------------------------------------\n\nTITLE: Defining Record Access with Asymmetric JWT in SurrealDB\nDESCRIPTION: This snippet demonstrates how to define a record access method that can issue tokens with an asymmetric key pair using the RS256 algorithm. It includes both the public key for verification and the private key for signing.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/record.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS token_name ON DATABASE TYPE RECORD WITH JWT\nALGORITHM RS256\n  KEY \"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu1SU1LfVLPHCozMxH2Mo\n4lgOEePzNm0tRgeLezV6ffAt0gunVTLw7onLRnrq0/IzW7yWR7QkrmBL7jTKEn5u\n+qKhbwKfBstIs+bMY2Zkp18gnTxKLxoS2tFczGkPLPgizskuemMghRniWaoLcyeh\nkd3qqGElvW/VDL5AaWTg0nLVkjRo9z+40RQzuVaE8AkAFmxZzow3x+VJYKdjykkJ\n0iT9wCS0DRTXu269V264Vf/3jvredZiKRkgwlL9xNAwxXFg0x/XFw005UWVRIkdg\ncKWTjpBP2dPwVZ4WWC+9aGVd+Gyn1o0CLelf4rEjGoXbAAEgAqeGUxrcIlbjXfbc\nmwIDAQAB\n-----END PUBLIC KEY-----\"\n  WITH ISSUER KEY \"-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC7VJTUt9Us8cKj\nMzEfYyjiWA4R4/M2bS1GB4t7NXp98C3SC6dVMvDuictGeurT8jNbvJZHtCSuYEvu\nNMoSfm76oqFvAp8Gy0iz5sxjZmSnXyCdPEovGhLa0VzMaQ8s+CLOyS56YyCFGeJZ\nqgtzJ6GR3eqoYSW9b9UMvkBpZODSctWSNGj3P7jRFDO5VoTwCQAWbFnOjDfH5Ulg\np2PKSQnSJP3AJLQNFNe7br1XbrhV//eO+t51mIpGSDCUv3E0DDFcWDTH9cXDTTlR\nZVEiR2BwpZOOkE/Z0/BVnhZYL71oZV34bKfWjQIt6V/isSMahdsAASACp4ZTGtwi\nVuNd9tybAgMBAAECggEBAKTmjaS6tkK8BlPXClTQ2vpz/N6uxDeS35mXpqasqskV\nlaAidgg/sWqpjXDbXr93otIMLlWsM+X0CqMDgSXKejLS2jx4GDjI1ZTXg++0AMJ8\nsJ74pWzVDOfmCEQ/7wXs3+cbnXhKriO8Z036q92Qc1+N87SI38nkGa0ABH9CN83H\nmQqt4fB7UdHzuIRe/me2PGhIq5ZBzj6h3BpoPGzEP+x3l9YmK8t/1cN0pqI+dQwY\ndgfGjackLu/2qH80MCF7IyQaseZUOJyKrCLtSD/Iixv/hzDEUPfOCjFDgTpzf3cw\nta8+oE4wHCo1iI1/4TlPkwmXx4qSXtmw4aQPz7IDQvECgYEA8KNThCO2gsC2I9PQ\nDM/8Cw0O983WCDY+oi+7JPiNAJwv5DYBqEZB1QYdj06YD16XlC/HAZMsMku1na2T\nN0driwenQQWzoev3g2S7gRDoS/FCJSI3jJ+kjgtaA7Qmzlgk1TxODN+G1H91HW7t\n0l7VnL27IWyYo2qRRK3jzxqUiPUCgYEAx0oQs2reBQGMVZnApD1jeq7n4MvNLcPv\nt8b/eU9iUv6Y4Mj0Suo/AU8lYZXm8ubbqAlwz2VSVunD2tOplHyMUrtCtObAfVDU\nAhCndKaA9gApgfb3xw1IKbuQ1u4IF1FJl3VtumfQn//LiH1B3rXhcdyo3/vIttEk\n48RakUKClU8CgYEAzV7W3COOlDDcQd935DdtKBFRAPRPAlspQUnzMi5eSHMD/ISL\nDY5IiQHbIH83D4bvXq0X7qQoSBSNP7Dvv3HYuqMhf0DaegrlBuJllFVVq9qPVRnK\nxt1Il2HgxOBvbhOT+9in1BzA+YJ99UzC85O0Qz06A+CmtHEy4aZ2kj5hHjECgYEA\nmNS4+A8Fkss8Js1RieK2LniBxMgmYml3pfVLKGnzmng7H2+cwPLhPIzIuwytXywh\n2bzbsYEfYx3EoEVgMEpPhoarQnYPukrJO4gwE2o5Te6T5mJSZGlQJQj9q4ZB2Dfz\net6INsK0oG8XVGXSpQvQh3RUYekCZQkBBFcpqWpbIEsCgYAnM3DQf3FJoSnXaMhr\nVBIovic5l0xFkEHskAjFTevO86Fsz1C2aSeRKSqGFoOQ0tmJzBEs1R6KqnHInicD\nTQrKhArgLXX4v3CddjfTRJkFWDbE/CkvKZNOrcf1nhaGCPspRJj2KUkj1Fhl9Cnc\ndn/RsYEONbwQSjIfMPkvxF+8HQ==\n-----END PRIVATE KEY-----\"\n;\n```\n\n----------------------------------------\n\nTITLE: Calculating Manhattan Distance in SurrealDB\nDESCRIPTION: The vector::distance::manhattan function computes the Manhattan distance between two vectors. It takes two arrays as input and returns a number representing the sum of the absolute differences of their corresponding elements.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/vector.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\nRETURN vector::distance::manhattan([10, 20, 15, 10, 5], [12, 24, 18, 8, 7]);\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for Import Command\nDESCRIPTION: This command shows how to access the help information for the SurrealDB CLI import command. It provides details on usage, available options, and their descriptions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/import.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal import --help\n```\n\n----------------------------------------\n\nTITLE: Configuring SurrealDB JavaScript SDK with WebAssembly Engine\nDESCRIPTION: Example of how to create a new Surreal instance with the WebAssembly engine enabled.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/engines/wasm.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = new Surreal({\n    engines: surrealdbWasmEngines(),\n});\n```\n\n----------------------------------------\n\nTITLE: UUID Validation in SurrealQL\nDESCRIPTION: Checks if a string is a valid UUID. Returns a boolean value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_31\n\nLANGUAGE: surql\nCODE:\n```\nstring::is::uuid(string) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::uuid(\"018a6680-bef9-701b-9025-e1754f296a0f\");\n```\n\n----------------------------------------\n\nTITLE: Accessing SurrealQL Functions in Embedded JavaScript\nDESCRIPTION: This example demonstrates how to access native SurrealQL functions from within an embedded JavaScript function. Specifically, it shows how to generate a UUID using the rand::uuid::v4() function via the surrealdb.functions object.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/script/surrealql-functions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nRETURN function() {\n\t// Using the rand::uuid::v4() function\n\tconst uuid = surrealdb.functions.rand.uuid.v4();\n};\n```\n\n----------------------------------------\n\nTITLE: Using Double Not Operator with Truthy Values in SurrealQL\nDESCRIPTION: Examples of using the '!!' operator (double not) with various truthy values in SurrealQL. This is functionally identical to using 'not' twice and is a more common pattern.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/not.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nRETURN [\n    !!\"I have value\",\n    !!true,\n    !![\"value!\"],\n    !!{i_have: \"value\"},\n    !!100\n];\n```\n\n----------------------------------------\n\nTITLE: Checking SurrealDB installation on macOS\nDESCRIPTION: This command verifies the successful installation of SurrealDB by displaying the help information for the SurrealDB command-line tool.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/macos.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal help\n```\n\n----------------------------------------\n\nTITLE: Removing a Connection Parameter with Unset Method in SurrealDB .NET SDK\nDESCRIPTION: Example demonstrating how to use the Unset method to remove a parameter named 'name' from the current database connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/unset.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Unset(\"name\");\n```\n\n----------------------------------------\n\nTITLE: Multiple Response Headers Configuration\nDESCRIPTION: Shows how to set multiple response headers using api::res::headers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/api.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE API \"/test\"\n    FOR get \n        MIDDLEWARE\n            api::res::headers({\n                \"country-origin\": \"CA\",\n                \"language\": \"FR\"\n            })\n        THEN {\n            RETURN {\n                headers: {\n                    \"requested-at\": time::now()\n                },\n                body: SELECT * FROM person\n            };\n        };\n```\n\n----------------------------------------\n\nTITLE: Query Method Signature in Rust\nDESCRIPTION: Shows the method signature for the query method in Rust. This method executes SurrealQL statements with optional variable bindings using a builder pattern approach.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/sdks/index.mdx#2025-04-16_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\ndb.query(sql).bind(vars)\n```\n\n----------------------------------------\n\nTITLE: Converting Degrees to Radians in SurrealQL\nDESCRIPTION: The math::deg2rad function converts an angle from degrees to radians. It takes a single numeric argument representing degrees.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::deg2rad(180);\n\n3.141592653589793\n```\n\n----------------------------------------\n\nTITLE: Setting up Rust Project Dependencies\nDESCRIPTION: Commands to create a new Rust project and add required dependencies including surrealdb, tokio, and serde.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/setup.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo new my_project\ncd my_project\ncargo add surrealdb\ncargo add tokio --features macros,rt-multi-thread\ncargo add serde --features derive\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Weeks in SurrealQL\nDESCRIPTION: The duration::weeks function counts how many weeks fit into a duration. It takes a duration as input and returns a number.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/duration.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nduration::weeks(duration) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN duration::weeks(3w);\n\n3\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with Debug Logging in Docker\nDESCRIPTION: This command starts SurrealDB with debug-level logging enabled. It demonstrates how to control logging verbosity using the '--log' argument when running the container.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/docker.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir mydata # Create a directory to store the database, owned by the current user\ndocker run --rm --pull always -p 8000:8000 --user $(id -u) -v $(pwd)/mydata:/mydata surrealdb/surrealdb:latest start --log debug rocksdb:/mydata/mydatabase.db\n```\n\n----------------------------------------\n\nTITLE: Record Operations as Root User in SurrealDB CLI\nDESCRIPTION: Example of creating a person record as a root user in SurrealDB CLI. When operating as a root user, the record doesn't include a created_by field since the $auth parameter is not set for root users.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ntest/test> CREATE person SET name = 'Aeon';\n-- Query 1\n[\n\t{\n\t\tid: person:hdl0unwts4atic65nh7l,\n\t\tname: 'Aeon'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: QueryRaw Method Syntax in Golang\nDESCRIPTION: Function signature for the QueryRaw method, which takes a database connection pointer and a slice of query statements to execute.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/raw-query.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc QueryRaw(db *DB, queries *[]QueryStmt) error\n```\n\n----------------------------------------\n\nTITLE: Parsing URL Path in SurrealQL\nDESCRIPTION: This function extracts the path component from a valid URL. It returns the part after the host and port, before any query string or fragment.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/parse.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nparse::url::path(string) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN parse::url::path(\"https://surrealdb.com:80/features?some=option#fragment\");\n\n\"/features\"\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Error Response Example\nDESCRIPTION: Example of error responses when attempting to create duplicate definitions without IF NOT EXISTS clause.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nResponse { client: Surreal { router: OnceLock(Router { sender: Sender { .. }, last_id: 4, features: {LiveQueries} }), engine: PhantomData<surrealdb::api::engine::any::Any> }, results: {0: (Stats { execution_time: Some(252.625µs) }, Err(Api(Query(\"The table 'person' already exists\")))), 1: (Stats { execution_time: Some(79.167µs) }, Err(Api(Query(\"The field 'name' already exists\")))), 2: (Stats { execution_time: Some(69.5µs) }, Err(Api(Query(\"The field 'created_by' already exists\")))), 3: (Stats { execution_time: Some(73.625µs) }, Err(Api(Query(\"The index 'unique_name' already exists\")))), 4: (Stats { execution_time: Some(73.583µs) }, Err(Api(Query(\"The access method 'account' already exists in the database 'test'\"))))}, live_queries: {} }\n```\n\n----------------------------------------\n\nTITLE: Sample SurrealDB server startup output\nDESCRIPTION: Shows the expected console output when starting an in-memory SurrealDB server with user credentials and a custom port. The output includes information about the KVS store initialization, user creation, and server binding.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/memory.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root --bind 0.0.0.0:8080 memory\n2023-08-30T15:06:34.788821Z  INFO surrealdb::kvs::ds: Starting kvs store in memory\n2023-08-30T15:06:34.788859Z  INFO surrealdb::kvs::ds: Started kvs store in memory\n2023-08-30T15:06:34.789222Z  INFO surrealdb::kvs::ds: Initial credentials were provided and no existing root-level users were found: create the initial user 'root'.\n2023-08-30T15:06:35.205123Z  INFO surrealdb::node: Started node agent\n2023-08-30T15:06:35.205827Z  INFO surrealdb::net: Started web server on 0.0.0.0:8080\n```\n\n----------------------------------------\n\nTITLE: Creating Person Record with JavaScript Array Mapping Function\nDESCRIPTION: Demonstrates creating a person record with a field 'scores' that uses an embedded JavaScript function to map an array. The function multiplies each value in [1,2,3] by 10 and returns the resulting array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/script/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person SET scores = function() {\n\treturn [1,2,3].map(v => v * 10);\n};\n```\n\n----------------------------------------\n\nTITLE: Executing Live Raw Queries in SurrealDB using C#\nDESCRIPTION: Initiates a live query from a raw SurrealQL statement, providing real-time updates of type T.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\ndb.LiveRawQuery<T>(sql)\n```\n\n----------------------------------------\n\nTITLE: Type Mismatch Example\nDESCRIPTION: Example demonstrating type mismatch error when defining nested fields with incompatible types.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD OVERWRITE fd ON c TYPE { a: string, b: number };\nDEFINE FIELD OVERWRITE fd.* ON c TYPE number;\n```\n\n----------------------------------------\n\nTITLE: Checking LoadBalancer External IP Assignment\nDESCRIPTION: Command to monitor the LoadBalancer service until it gets assigned an external IP address, which will be used to access the SurrealDB instance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/azure.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get service surrealdb-tikv\n\nNAME             TYPE           CLUSTER-IP    EXTERNAL-IP    PORT(S)          AGE\nsurrealdb-tikv   LoadBalancer   10.0.38.191   20.13.45.154   80:30378/TCP   6m34s\n```\n\n----------------------------------------\n\nTITLE: Calculating Arctangent in SurrealQL\nDESCRIPTION: The math::atan function returns the arctangent (inverse tangent) of a number. The result is expressed in radians.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::atan(1);\n\n0.7853981633974483\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP PUT Function in SurrealQL\nDESCRIPTION: API definition for the http::put() function which performs remote HTTP PUT requests with a JSON body. It accepts a URL string, request body object, and optional headers object, returning the response value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/http.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nhttp::put(string, object) -> value\n```\n\nLANGUAGE: surql\nCODE:\n```\nhttp::put(string, object, object) -> value\n```\n\n----------------------------------------\n\nTITLE: SurrealQL Equivalent Query\nDESCRIPTION: The underlying SurrealQL query that is executed when using the merge() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/merge.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $thing MERGE $data;\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with debug logging level\nDESCRIPTION: Launches an in-memory SurrealDB server with debug level logging for increased verbosity. The --log flag controls the logging level, with 'info' being the default if not specified.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/memory.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --log debug memory\n```\n\n----------------------------------------\n\nTITLE: Updating SurrealDB using Chocolatey\nDESCRIPTION: This command updates the installed SurrealDB to the latest version using the Chocolatey package manager. It ensures you have the most recent version of SurrealDB installed.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/windows.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nchoco update surreal\n```\n\n----------------------------------------\n\nTITLE: Query Response for Manual Multi-level Graph Traversal\nDESCRIPTION: Shows the response from the manual multi-level graph traversal query, returning city:4 as the fourth city in the path from city:1.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_45\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tfourth_city: [\n\t\t\tcity:4\n\t\t]\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining authenticate Method Syntax in TypeScript\nDESCRIPTION: This snippet shows the method signature for the `authenticate()` function in the SurrealDB JavaScript SDK. It takes a single string parameter `token` and is likely an asynchronous method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/authenticate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.authenticate(token: string)\n```\n\n----------------------------------------\n\nTITLE: Closing SurrealDB Connection in Python\nDESCRIPTION: Shows how to close the persistent connection to the SurrealDB database using the .close() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/create-a-new-connection.mdx#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndb.close()\n```\n\n----------------------------------------\n\nTITLE: Accessing Euler's Number in SurrealQL\nDESCRIPTION: The math::e constant represents the base of the natural logarithm (Euler's number). It returns the value of e as a float.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::e;\n\n2.718281828459045f\n```\n\n----------------------------------------\n\nTITLE: Starting Server with Debug Logging\nDESCRIPTION: Command to start SurrealDB with debug level logging for increased verbosity.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/file.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --log debug rocksdb:mydatabase.db\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with Network Restrictions\nDESCRIPTION: Initializes SurrealDB with internet access but restricted function usage.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root --allow-net --deny-funcs \"crypto::md5, http::post, http::delete\"\n```\n\n----------------------------------------\n\nTITLE: Project Directory Creation Commands\nDESCRIPTION: Terminal commands to create and navigate to a new project directory\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/start.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Make a new directory\nmkdir my-surrealdb-project\n# Navigate into the directory\ncd my-surrealdb-project\n```\n\n----------------------------------------\n\nTITLE: NOT Operator Examples in SurrealQL\nDESCRIPTION: Examples demonstrating the NOT (!) operator which reverses the truthiness of values\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/operators.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM !(TRUE OR FALSE)\n\nfalse\n\nSELECT * FROM !\"Has a value\";\n\nfalse\n```\n\n----------------------------------------\n\nTITLE: NULL Coalescing Operator in SurrealQL\nDESCRIPTION: Example of the ?? operator checking for truthy non-NULL values\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/operators.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM NULL ?? 0 ?? false ?? 10;\n\n0\n```\n\n----------------------------------------\n\nTITLE: Displaying SurrealDB Start Command Help\nDESCRIPTION: Command to show the help information and usage instructions for the SurrealDB start command\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --help\n```\n\n----------------------------------------\n\nTITLE: Buffered Compute Implementation in Rust\nDESCRIPTION: Demonstrates buffered computation using a HashMap in Rust with named parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/computation.mdx#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet mut input_values = HashMap::new();\ninput_values.insert(String::from(\"squarefoot\"), 1000.0);\ninput_values.insert(String::from(\"num_floors\"), 2.0);\n\nlet output = compute_unit.buffered_compute(&mut input_values).unwrap();\n```\n\n----------------------------------------\n\nTITLE: Defining Update Method Syntax in PHP for SurrealDB\nDESCRIPTION: Specifies the syntax for the ->update() method in the PHP SDK for SurrealDB. The method takes two parameters: $thing (required) and $data (optional).\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$db->update($thing, $data)\n```\n\n----------------------------------------\n\nTITLE: Error Message for Invalid Recursive Query in SurrealDB\nDESCRIPTION: Shows the error message returned when attempting to use multiple '.@' symbols in a recursive query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_27\n\nLANGUAGE: surql\nCODE:\n```\n'Tried to use a `@` repeat recurse symbol in a position where it is not supported'\n```\n\n----------------------------------------\n\nTITLE: Using Double Not Function with Truthy Values in SurrealQL\nDESCRIPTION: Examples of using the 'not' function twice with various truthy values in SurrealQL. It returns true for non-empty string, true, non-empty array, non-empty object, and non-zero number.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/not.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nRETURN [\n    not(not(\"I have value\")),\n    not(not(true)),\n    not(not([\"value!\"])),\n    not(not({i_have: \"value\"})),\n    not(not(100))\n];\n```\n\n----------------------------------------\n\nTITLE: Using math::rad2deg Function in SurrealQL\nDESCRIPTION: Converts an angle from radians to degrees.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_27\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::rad2deg(3.141592653589793);\n```\n\n----------------------------------------\n\nTITLE: Importing SurrealDB SDK in Java\nDESCRIPTION: Demonstrates how to import and initialize the SurrealDB SDK in a Java application. Creates a new instance of the Surreal class.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/installation.mdx#2025-04-16_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport com.surrealdb.Surreal;\n\n...\n\nSurreal surreal = new Surreal();\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Boolean Values in SurrealDB\nDESCRIPTION: Demonstrates how to create a record with simple boolean field values.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/booleans.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person SET newsletter = false, interested = true;\n```\n\n----------------------------------------\n\nTITLE: Alternative Connection String Example with SurrealDB .NET SDK\nDESCRIPTION: An alternative connection string example for the SurrealDB .NET SDK using Endpoint syntax with aliases. It uses short form aliases for namespace (NS), database (DB), and user credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/connection-strings.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nEndpoint=http://127.0.0.1:8000;NS=test;DB=test;User=root;Pass=root\n```\n\n----------------------------------------\n\nTITLE: Insecure Network Capability Configuration (Anti-pattern)\nDESCRIPTION: This snippet shows an approach that should be avoided where all network capabilities are allowed with exceptions. This denylisting approach is risky as it may miss certain vulnerable endpoints, making them accessible by default.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Avoid doing this:\n# Allow SurrealDB to make outgoing HTTP GET and POST request to any address except to some known private CIDR blocks.\nsurreal start --deny-all --allow-funcs \"http::get, http::post\" --allow-net --deny-net \"10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Response\nDESCRIPTION: Sample JSON response from a GraphQL query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"foo\": [\n      {\n        \"id\": \"foo:1\",\n        \"val\": 42\n      },\n      {\n        \"id\": \"foo:2\",\n        \"val\": 43\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sleep Function Parallel Operations Response in SurrealQL\nDESCRIPTION: The output showing how sleep() allows checking the progress of index building at intervals without blocking the concurrent operation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/sleep.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n-------- Query 1 --------\n{ \n    building: {\n        initial: 0,\n        pending: 0,\n        status: 'indexing', \n        updated: 0\n    }\n}\n\n-------- Query 2 --------\n{ \n    building: {\n        initial: 100,\n        pending: 20,\n        status: 'indexing', \n        updated: 0\n    }\n}\n\n-------- Query 3 --------\n{ \n    building: {\n        initial: 100,\n        pending: 4,\n        status: 'indexing', \n        updated: 16\n    }\n}\n\n-------- Query 4 --------\n{\n    building: {\n        status: 'ready'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Output Example\nDESCRIPTION: Example output showing the results of the previous SQL queries in JSON format.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n[\n\t{\n\t\tage: 20,\n\t\tid: person:6jodx8xv39jsxdgykt0t\n\t}\n]\n\n[\n\t{\n\t\tage: 30,\n\t\tid: person:10bcq2owseyqqoinjgxl\n\t}\n]\n\n[\n\t{\n\t\tage: 30,\n\t\tid: person:10bcq2owseyqqoinjgxl\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Access in SurrealDB with Python SDK (v1.x)\nDESCRIPTION: This snippet shows how to define a user scope for authentication in SurrealDB v1.x using the Python SDK's .query() method. It sets up signup and signin rules for the 'user' scope.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/handling-authentication.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndb.query(\"\"\"\n    DEFINE SCOPE user SESSION 24h\n\t    SIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\n\t    SIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) );\n    \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using session::db() to retrieve current database in SurrealQL\nDESCRIPTION: The session::db() function returns the name of the currently selected database in the SurrealDB session.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/session.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nsession::db() -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN session::db();\n\n\"my_db\"\n```\n\n----------------------------------------\n\nTITLE: Using time::minute Function in SurrealQL\nDESCRIPTION: The time::minute function extracts the minutes as a number from a datetime, or from the current date if no datetime argument is present.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\ntime::minute(option<datetime>) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::minute(d\"2021-11-01T08:30:17+00:00\");\n\n30\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Response in SurrealDB\nDESCRIPTION: Example JSON response from a GraphQL query in SurrealDB. It includes execution time, status, and the result set with filtered person records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/graphql/http.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"time\": \"14.357166ms\",\n\t\t\"status\": \"OK\",\n\t\t\"result\": [\n\t\t\t{\n\t\t\t\t\"age\": \"23\",\n\t\t\t\t\"id\": \"person:6r7wif0uufrp22h0jr0o\"\n\t\t\t\t\"name\": \"Simon\",\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"age\": \"28\",\n\t\t\t\t\"id\": \"person:6r7wif0uufrp22h0jr0o\"\n\t\t\t\t\"name\": \"Marcus\",\n\t\t\t},\n\t\t]\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with RocksDB Storage\nDESCRIPTION: Command to start SurrealDB using RocksDB as the storage engine for single-node on-disk storage. Includes authentication credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/start.mdx#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start -u root -p root rocksdb://mydb\n```\n\n----------------------------------------\n\nTITLE: Unset Method Syntax in PHP\nDESCRIPTION: The method signature for removing a parameter from a SurrealDB connection. Takes a single required string parameter 'key' that specifies the name of the variable to remove.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/unset.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->unset($key)\n```\n\n----------------------------------------\n\nTITLE: Query Method Signature in Golang\nDESCRIPTION: Shows the method signature for the Query method in Golang. This method executes SurrealQL statements with optional variable bindings.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/sdks/index.mdx#2025-04-16_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ndb.Query(sql, vars)\n```\n\n----------------------------------------\n\nTITLE: Creating GKE Autopilot Cluster\nDESCRIPTION: Command to create a new GKE autopilot cluster in the specified region and project.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/google.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud container clusters create-auto surrealdb-guide --region REGION --project PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Committing a Transaction in SurrealDB\nDESCRIPTION: This snippet shows the syntax for committing a transaction in SurrealDB using the COMMIT statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/transactions.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nCOMMIT [ TRANSACTION ];\n```\n\n----------------------------------------\n\nTITLE: Querying Without FETCH Clause in SurrealQL\nDESCRIPTION: This snippet demonstrates a query similar to the previous example but without using the FETCH clause. It retrieves article data including the title, category, and author's full name, but doesn't fetch the full records for author and category.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/fetch.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nSELECT title, category, author.name.full AS author_name FROM article\nWHERE author.age < 30;\n```\n\n----------------------------------------\n\nTITLE: Using math::sqrt_2 Constant in SurrealQL\nDESCRIPTION: Returns the mathematical constant square root of 2.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_33\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::sqrt_2;\n```\n\n----------------------------------------\n\nTITLE: String Longitude Validation in SurrealQL\nDESCRIPTION: Checks if a given string represents a valid longitude value. Returns a boolean value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_25\n\nLANGUAGE: surql\nCODE:\n```\nstring::is::longitude(string) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::longitude(\"51.509865\");\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP DELETE Function in SurrealQL\nDESCRIPTION: API definition for the http::delete function, which takes a string URL as a parameter and returns a value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/http.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\nhttp::delete(string) -> value\n```\n\n----------------------------------------\n\nTITLE: KILL Statement with Parameters\nDESCRIPTION: Example demonstrating how to use parameters with the KILL statement\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/kill.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Define the parameter\nLET $live_query_id = u\"0189d6e3-8eac-703a-9a48-d9faa78b44b9\";\n-- Use the parameter\nKILL $live_query_id;\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Arrays in SurrealQL\nDESCRIPTION: Demonstrates how to create arrays and access their elements using indexing in SurrealQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/arrays.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\n-- Return a full array\nRETURN [1,2,3,4,5];\n-- Return the first (\"zeroeth\") item\nRETURN [1,2,3,4,5][0];\n-- Return indexes 0 to 2 of an array\nRETURN [1,2,3,4,5][0..=2];\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Bytes in SurrealDB\nDESCRIPTION: The type::bytes function converts values into bytes. It accepts either bytes or string as input.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::bytes(\"A few bytes\");\n```\n\n----------------------------------------\n\nTITLE: Defining Main Application Structure\nDESCRIPTION: Core application struct definition containing UI state and channel communication components.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nstruct SurrealDbApp {\n    input: String,\n    results: String,\n    command_sender: Sender<Command>,\n    response_receiver: Receiver<String>,\n}\n```\n\n----------------------------------------\n\nTITLE: String Pattern Matching in SurrealQL\nDESCRIPTION: Demonstrates regex pattern matching on strings.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nRETURN [\n  string::matches(\"grey\", \"gr(a|e)y\"),\n  string::matches(\"gray\", \"gr(a|e)y\")\n];\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Server\nDESCRIPTION: Command to start a SurrealDB instance with root credentials\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/transaction.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with Experimental Features (Environment Variable)\nDESCRIPTION: Initializes SurrealDB with experimental capabilities enabled via environment variable.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nSURREAL_CAPS_ALLOW_EXPERIMENTAL=\"record_references,graphql\" surreal start\n```\n\n----------------------------------------\n\nTITLE: Optional Field Definitions\nDESCRIPTION: Examples of defining optional fields using the option type wrapper.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\n-- A user may enter a biography, but it is not required.\n-- By using the option type you also allow for NONE values.\nDEFINE FIELD biography ON TABLE user TYPE option<string>;\n\nDEFINE FIELD user ON TABLE POST TYPE option<record<user>>;\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent Storage Volume\nDESCRIPTION: Command to create a 1GB volume in the specified region for persistent data storage.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/fly.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfly volumes create data --region <region> --size 1\n```\n\n----------------------------------------\n\nTITLE: Adding SurrealML Core Dependency in Rust\nDESCRIPTION: Toml configuration for adding the surrealml-core dependency to a Rust project's Cargo.toml file.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/storage.mdx#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nsurrealml-core = \"0.0.8\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB CLI\nDESCRIPTION: Command to connect to SurrealDB CLI with authentication and database selection\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/live.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurrealdb % surreal sql --user root --pass root --ns namespace --db database --pretty\n```\n\n----------------------------------------\n\nTITLE: Record Operations as Record User in SurrealDB CLI\nDESCRIPTION: Example of creating, deleting and updating person records as a record user. When a record user performs operations, the created_by field is automatically populated with their user ID, and they can only manipulate records they created.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ntest/test> CREATE person SET name = 'Aeon';\n-- Query 1\n[\n\t{\n\t\tcreated_by: user:qx2apv5oc8mh03wtah0q,\n\t\tid: person:8syfiq2ovztn2tbr8mhb,\n\t\tname: 'Aeon'\n\t}\n]\n```\n\nLANGUAGE: bash\nCODE:\n```\ntest/test> DELETE person RETURN BEFORE;\n-- Query 1\n[\n\t{\n\t\tcreated_by: user:qx2apv5oc8mh03wtah0q,\n\t\tid: person:8y06y06jmmb7e58trckz,\n\t\tname: 'Aeon'\n\t}\n]\n\ntest/test> SELECT * FROM person;\n-- Query 1\n[\n\t{\n\t\tid: person:hdl0unwts4atic65nh7l,\n\t\tname: 'Aeon'\n\t}\n]\n\ntest/test> UPDATE person SET name = \"Yogurt\";\n-- Query 1\n[]\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB using Windows PowerShell\nDESCRIPTION: This command downloads and executes the SurrealDB install script using Windows PowerShell. It securely installs the latest version of SurrealDB into the C:\\Program Files\\SurrealDB folder or a user-specified location.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/windows.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\niwr https://windows.surrealdb.com -useb | iex\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB via CLI\nDESCRIPTION: Shows the command line syntax for connecting to a SurrealDB instance using the CLI with endpoint and authentication token.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/surreal cloud.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql --endpoint <connection-string> --token <token>\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Info Method Syntax\nDESCRIPTION: Basic syntax for using the info() method to retrieve authenticated user information from SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/info.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.info()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Token in SurrealDB PHP SDK\nDESCRIPTION: This snippet shows how to authenticate using a previously obtained auth token with the authenticate method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/core/authentication.mdx#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$db->authenticate($token);\n```\n\n----------------------------------------\n\nTITLE: Closing SurrealDB Connection in Python\nDESCRIPTION: Closes the persistent connection to the SurrealDB database. This method should be called when the connection is no longer needed to free up resources.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndb.close()\n```\n\n----------------------------------------\n\nTITLE: Using StringRecordId in PHP for SurrealDB\nDESCRIPTION: Shows how to use the StringRecordId class to send a Record Id back to SurrealDB in string format, allowing the server to handle parsing.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/data-types.mdx#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnew StringRecordId(\"person:john\");\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Complex Text IDs in SurrealQL\nDESCRIPTION: Shows how to create record IDs with complex characters by using backticks around the table name and/or record identifier.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nCREATE article:`8424486b-85b3-4448-ac8d-5d51083391c7` SET\n    time = time::now(),\n    author = person:tobie;\n\nCREATE `Artykuł`:100 SET\n    author = person:`Lech_Wałęsa`;\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Server via CLI with Authentication\nDESCRIPTION: Command to start a SurrealDB server on the default endpoint (http://localhost:8000) with root username and password authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/surrealql/cli.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --endpoint http://localhost:8000 --user root --pass root\n```\n\n----------------------------------------\n\nTITLE: Utility Methods for SurrealDB PHP\nDESCRIPTION: Supporting methods for database maintenance and monitoring, including data import/export and health checking.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$db->import($content, $username, $password)\n$db->export($username, $password)\n$db->health()\n$db->status()\n```\n\n----------------------------------------\n\nTITLE: Using math::pi Constant in SurrealQL\nDESCRIPTION: Returns the mathematical constant π (pi).\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_24\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::pi;\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Query\nDESCRIPTION: The equivalent SurrealQL query that is executed when using the create() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/create.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nCREATE $resource CONTENT $data;\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Query\nDESCRIPTION: The underlying SurrealQL query that gets executed when using the create method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/create.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nCREATE $thing CONTENT $data;\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Release Profile for SurrealDB Embedded Usage\nDESCRIPTION: Cargo.toml configuration for optimizing the release profile when using SurrealDB as an embedded database in Rust applications.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/performance-best-practices.mdx#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[profile.release]\nlto = true\nstrip = true\nopt-level = 3\npanic = 'abort'\ncodegen-units = 1\n```\n\n----------------------------------------\n\nTITLE: Defining Delete Method Syntax in C#\nDESCRIPTION: This snippet shows the method signature for the Delete operation in the SurrealDB .NET SDK. It takes a resource parameter and returns an awaitable task.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/delete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Delete(resource)\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Access with OVERWRITE Clause in SurrealDB\nDESCRIPTION: This snippet demonstrates how to define a JWT access method and overwrite it if it already exists in SurrealDB. It uses the OVERWRITE clause to modify existing access method definitions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/jwt.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS OVERWRITE example ON DATABASE TYPE JWT ALGORITHM HS512 KEY 'secret';\n```\n\n----------------------------------------\n\nTITLE: Event Type-Specific Examples\nDESCRIPTION: Multiple examples showing how to create events triggered by specific operations (CREATE, UPDATE, DELETE) with different use cases.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/event.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE EVENT publish_post ON TABLE publish_post\n    WHEN $event = \"CREATE\"\n    THEN (\n        UPDATE post SET status = \"PUBLISHED\" WHERE id = $after.post_id\n    );\n\nDEFINE EVENT user_updated ON TABLE user\n    WHEN $event = \"UPDATE\"\n    THEN (\n        CREATE notification SET message = \"User updated\", user_id = $after.id, created_at = time::now()\n    );\n\nDEFINE EVENT user_deleted ON TABLE user\n    WHEN $event = \"DELETE\"\n    THEN (\n        CREATE notification SET message = \"User deleted\", user_id = $before.id, created_at = time::now()\n    );\n\nDEFINE EVENT user_event ON TABLE user\n    WHEN $event = \"CREATE\" OR $event = \"UPDATE\" OR $event = \"DELETE\"\n    THEN (\n        CREATE log SET\n            table = \"user\",\n            event = $event,\n            happened_at = time::now()\n    );\n```\n\n----------------------------------------\n\nTITLE: Using math::midhinge Function in SurrealQL\nDESCRIPTION: Calculates the midhinge (average of first and third quartiles) of a numeric array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_18\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::midhinge([ 1, 40, 60, 10, 2, 901 ]);\n```\n\n----------------------------------------\n\nTITLE: User Query Implementation\nDESCRIPTION: TypeScript implementation for querying users from SurrealDB with proper typing and error handling\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/start.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDb } from \"../utils/surreal\";\nimport { jsonify } from \"surrealdb\";\n\ninterface User {\n  id: string;\n  // Add other user properties here\n}\n\nexport async function getAllUsers(): Promise<User[] | undefined> {\n  const db = await getDb();\n  if (!db) {\n    console.error(\"Database not initialized\");\n    return undefined;\n  }\n  try {\n    const users = await db.select<User>(\"User\");\n    console.log(\"All users:\", jsonify(users));\n    return users;\n  } catch (err) {\n    console.error(\"Failed to get users:\", err);\n    return undefined;\n  } finally {\n    await db.close();\n  }\n}\n\ngetAllUsers();\n```\n\n----------------------------------------\n\nTITLE: Creating a new ASP.NET Core project with SurrealDB\nDESCRIPTION: Commands to create a new ASP.NET Core web application and add the SurrealDB.Net package dependency.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/dependency-injection.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new webapp -o SurrealDbWeatherApi\ncd SurrealDbWeatherApi\ndotnet add package SurrealDb.Net\n```\n\n----------------------------------------\n\nTITLE: String Join with Delimiter in SurrealQL\nDESCRIPTION: Shows how to join multiple strings with a specified delimiter.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::join(', ', 'a', 'list', 'of', 'items');\n```\n\n----------------------------------------\n\nTITLE: Selecting Random Values from a Set with rand::enum() in SurrealQL\nDESCRIPTION: The rand::enum() function randomly selects one value from a set of provided values. It accepts any number of values of any type and returns one of them randomly.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/rand.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nrand::enum(value...) -> any\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::enum('one', 'two', 3, 4.15385, 'five', true);\n\n\"five\"\n```\n\n----------------------------------------\n\nTITLE: Defining delete Method Syntax in TypeScript\nDESCRIPTION: Defines the method signature for the delete operation in the SurrealDB JavaScript SDK. It takes a generic type parameter and a 'thing' argument.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/delete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.delete<T,U>(thing)\n```\n\n----------------------------------------\n\nTITLE: Exporting data from SurrealDB 2.0.0-alpha\nDESCRIPTION: Command to export data from a SurrealDB 2.0.0-alpha instance to a .surql file, specifying connection details, user credentials, namespace, and database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/upgrading/migrating-data-to-2.x.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Example export command to export data to a file called `export.surql` in the downloads directory.\nsurreal export --conn http://localhost:8000 --user root --pass root --ns test --db test downloads/export.surql\n```\n\n----------------------------------------\n\nTITLE: Kill Method Syntax for SurrealDB .NET SDK\nDESCRIPTION: The basic syntax for the Kill method in the SurrealDB .NET SDK which is used to terminate a running live query by its UUID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/kill.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Kill(queryUuid)\n```\n\n----------------------------------------\n\nTITLE: Defining Scrypt Generate Function in SurrealQL\nDESCRIPTION: API definition for the crypto::scrypt::generate function that takes a string input and returns a hashed string output.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/crypto.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\ncrypto::scrypt::generate(string) -> string\n```\n\n----------------------------------------\n\nTITLE: Using time::is::leap_year Function in SurrealQL\nDESCRIPTION: The time::is::leap_year function checks if a given datetime falls in a leap year. It can use the current datetime if none is provided and supports method chaining.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_23\n\nLANGUAGE: surql\nCODE:\n```\ntime::is::leap_year(datetime) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\n-- Checks with current datetime if none is passed\nRETURN time::is::leap_year();\n\nRETURN time::is::leap_year(d\"1987-06-22T08:30:45Z\");\n[false]\n\nRETURN time::is::leap_year(d\"1988-06-22T08:30:45Z\");\n[true]\n\n-- Using function via method chaining\nRETURN d'2024-09-03T02:33:15.349397Z'.is_leap_year();\n[true]\n```\n\n----------------------------------------\n\nTITLE: Hamming Distance in SurrealDB\nDESCRIPTION: This snippet demonstrates the use of the Hamming distance algorithm in SurrealDB, which only compares strings of equal length.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\n-- Error: strings have different length\nstring::distance::hamming(\"United Kingdom\", \"United\");\n-- Returns 0\nstring::distance::hamming(\"United\", \"United\");\n-- Returns 1\nstring::distance::hamming(\"United\", \"Unitéd\");\n-- Returns 6\nstring::distance::hamming(\"United\", \"uNITED\");\n```\n\n----------------------------------------\n\nTITLE: Using SurrealDB Command-Line Tools in Docker\nDESCRIPTION: This command shows how to access the SurrealDB command-line tools within the Docker container. It runs the 'help' command to display available options and subcommands.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/docker.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --pull always surrealdb/surrealdb:latest help\n```\n\n----------------------------------------\n\nTITLE: Using Field Definitions with Relations in SurrealDB\nDESCRIPTION: Example of using DEFINE FIELD with relations for a street-house relationship pattern where addresses can be registered before houses exist.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_21\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD street ON house VALUE $this<-contains<-street;\nCREATE street:frankfurt_road;\nRELATE street:frankfurt_road->contains->[\n    house:[200, \"Frankfurt Road\"], \n    house:[205, \"Frankfurt Road\"],\n    house:[210, \"Frankfurt Road\"],\n];\n\n-- Twelve months later once the house is built and size is known...\nCREATE house:[200, \"Frankfurt Road\"] SET sq_m = 110.5;\n```\n\n----------------------------------------\n\nTITLE: Creating a Person Record as Record User in SurrealDB\nDESCRIPTION: This snippet shows creating a 'person' record in SurrealDB using a record user. The created record includes a 'created_by' field set by the $auth parameter.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ntest/test> CREATE person SET name = 'Aeon';\n-- Query 1\n[\n\t{\n\t\tcreated_by: user:qx2apv5oc8mh03wtah0q,\n\t\tid: person:8syfiq2ovztn2tbr8mhb,\n\t\tname: 'Aeon'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Listing GCP Projects and Regions\nDESCRIPTION: Commands to list available Google Cloud Platform projects and regions for cluster deployment.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/google.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud projects list\n\ngcloud compute regions list --project PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Decimal in SurrealDB\nDESCRIPTION: The type::decimal function converts values into decimal format. It accepts decimal, float, int, number, or string as input.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::decimal(\"12345\");\n```\n\n----------------------------------------\n\nTITLE: Mutating Data with SurrealDB PHP\nDESCRIPTION: Methods for creating, updating, and deleting records in the database, including support for JSON Patch operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$db->create($thing,$data)\n$db->insert($thing,$data)\n$db->insertRelation($thing,$data)\n$db->update($thing,$data)\n$db->merge($thing,$data)\n$db->patch($thing,$data)\n$db->delete($thing,$data)\n```\n\n----------------------------------------\n\nTITLE: Using Logical OR Operator in SurrealQL\nDESCRIPTION: Shows how the logical OR operator checks whether any value in a chain is truthy, returning the first truthy value encountered. In this example, 10 is the first truthy value in the chain.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/operators.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM 0 OR false OR 10;\n\n10\n```\n\n----------------------------------------\n\nTITLE: PHP SurrealDB Signin Method Syntax\nDESCRIPTION: Basic syntax for the signin() method showing the structure of the authentication parameters array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/signin.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->signin([\n    \"namespace\" => \"test\",\n    \"database\" => \"db\",\n    \"scope\" => \"scope\",\n    // ... other variables\n]);\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Server\nDESCRIPTION: Command to start a SurrealDB instance with root credentials in memory storage mode\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root\n```\n\n----------------------------------------\n\nTITLE: KILL Statement Error Examples\nDESCRIPTION: Examples showing error cases when using invalid UUIDs with the KILL statement\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/kill.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nLET $rand = rand::uuid();\nKILL $rand;\nKILL u'9276b05b-e59a-49cd-9dd1-17c6fd15c28f';\n```\n\nLANGUAGE: surql\nCODE:\n```\n\"Can not execute KILL statement using id '$rand'\"\n\"Can not execute KILL statement using id 'u'9276b05b-e59a-49cd-9dd1-17c6fd15c28f''\"\n```\n\n----------------------------------------\n\nTITLE: UUID Prefix in SurrealQL\nDESCRIPTION: Example of using the 'u' prefix to define a UUID literal in SurrealQL. The parser expects UUID values to follow the standard format with hexadecimal digits.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/strings.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nRETURN u\"8c54161f-d4fe-4a74-9409-ed1e137040c1\";\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Query for Patch Operation\nDESCRIPTION: This snippet shows the SurrealQL query that is executed by the ->patch() method in the database. It uses the UPDATE statement with the PATCH clause.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/patch.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $thing PATCH $data;\n```\n\n----------------------------------------\n\nTITLE: Implementing User SignIn Command Handler\nDESCRIPTION: Handler for signin command that deserializes user credentials and authenticates against SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nCommand::SignIn(s) => {\n    let Ok(Params { name, pass }) = serde_json::from_str::<Params>(&s) else {\n        return Ok(\"Params don't work!\".to_string());\n    };\n    self.signin(Record {\n        access: \"account\",\n        namespace: \"test\",\n        database: \"test\",\n        params: Params { name, pass },\n    })\n    .await?;\n    Ok(format!(\"Signed in as {name}!\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Query\nDESCRIPTION: The underlying SurrealQL query that gets executed when using the delete method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/delete.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nDELETE $thing;\n```\n\n----------------------------------------\n\nTITLE: Using math::product Function in SurrealQL\nDESCRIPTION: Calculates the product of all numbers in an array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_26\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::product([ 26.164, 13.746189, 23, 16.4, 41.42 ]);\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB Server with SQL Client\nDESCRIPTION: Example of connecting to a running SurrealDB server using the SQL client command with authentication credentials and namespace/database specification.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql --endpoint http://127.0.0.1:8000 --namespace my_namespace --database my_database --auth-level root --username my_username --password my_password\n```\n\n----------------------------------------\n\nTITLE: Creating TiKV Cluster\nDESCRIPTION: Commands to set up TiKV operators and monitoring in the EKS cluster.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/amazon.mdx#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl create namespace tidb-cluster\n\ncurl -O https://raw.githubusercontent.com/pingcap/tidb-operator/v1.5.0/examples/aws/tidb-cluster.yaml && \\\ncurl -O https://raw.githubusercontent.com/pingcap/tidb-operator/v1.5.0/examples/aws/tidb-monitor.yaml && \\\ncurl -O https://raw.githubusercontent.com/pingcap/tidb-operator/v1.5.0/examples/aws/tidb-dashboard.yaml\n\nkubectl apply -f tidb-cluster.yaml -n tidb-cluster && \\\nkubectl apply -f tidb-monitor.yaml -n tidb-cluster\n```\n\n----------------------------------------\n\nTITLE: HTTP Bearer Authentication Request\nDESCRIPTION: Example of authenticating with a bearer token using a direct HTTP request to SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/bearer.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n\t-H \"Accept: application/json\" \\\n\t-d '{\"NS\":\"test\", \"DB\":\"test\", \"AC\":\"api\", \"key\":\"surreal-bearer-BNb2pS0GmaJz-5eTfQ5uEu8jbRb3oblqVMAt8\"}' \\\n\thttp://localhost:8000/signin\n```\n\n----------------------------------------\n\nTITLE: Translating Delete Operation to SurrealQL\nDESCRIPTION: Presents the equivalent SurrealQL query for the delete operation in the Rust SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_23\n\nLANGUAGE: surql\nCODE:\n```\nDELETE FROM $resource RETURN BEFORE;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Permission Differences Between Root and Record Users in SurrealDB\nDESCRIPTION: Shows how record users can only delete their own records due to permission constraints, while records created by root users remain unaffected. Demonstrates permission-based access control in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ntest/test> DELETE person RETURN BEFORE;\n-- Query 1\n[\n\t{\n\t\tcreated_by: user:qx2apv5oc8mh03wtah0q,\n\t\tid: person:8y06y06jmmb7e58trckz,\n\t\tname: 'Aeon'\n\t}\n]\n\ntest/test> SELECT * FROM person;\n-- Query 1\n[\n\t{\n\t\tid: person:hdl0unwts4atic65nh7l,\n\t\tname: 'Aeon'\n\t}\n]\n\ntest/test> UPDATE person SET name = \"Yogurt\";\n-- Query 1\n[]\n```\n\n----------------------------------------\n\nTITLE: Help Command Output\nDESCRIPTION: Shows the complete help text output displaying all available options and their descriptions\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/upgrade.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nUpgrade to the latest stable version\n\nUsage: surreal upgrade [OPTIONS]\n\nOptions:\n      --nightly            Install the latest nightly version\n      --alpha              Install the latest alpha version\n      --beta               Install the latest beta version\n      --version <VERSION>  Install a specific version\n      --dry-run            Don't actually replace the executable\n  -l, --log <LOG>          The logging level for the command-line tool [env: SURREAL_LOG=] [default: info] [possible values: none, full, error, warn, info, debug, trace]\n  -h, --help               Print help\n```\n\n----------------------------------------\n\nTITLE: Configuring Function Allowlists and Denylists in SurrealDB\nDESCRIPTION: This snippet shows how to configure function allowlists and denylists in SurrealDB. It demonstrates how to allow all functions except specific ones, and how to allow only certain custom functions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/capabilities.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\n// Allow all functions except the http family and crypto::md5()\nsurreal start --allow-funcs --deny-funcs \"http\",\"crypto::md5\"\n\n// Allow certain custom functions only (all custom functions start with \"fn::\")\nsurreal start --allow-funcs \"fn::shared_fn\"\n```\n\n----------------------------------------\n\nTITLE: Basic Database Definition Example\nDESCRIPTION: Example showing how to select a namespace and define a basic database using SurrealQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/database.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Specify the namespace for the database\nUSE NS abcum;\n\n-- Define database\nDEFINE DATABASE app_vitalsense;\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for SurrealML Export Command\nDESCRIPTION: This command shows how to access the help information for the 'surreal ml export' command, which provides details on usage, arguments, and options available for exporting SurrealML models.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/ml/export.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal ml export --help\n```\n\n----------------------------------------\n\nTITLE: Importing SurrealDB Golang SDK into a project\nDESCRIPTION: Import statement to include the SurrealDB SDK and related packages in your Go code. This imports the main SurrealDB package and the models package which provides data structures for interacting with the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/installation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"fmt\"\n\tsurrealdb \"github.com/surrealdb/surrealdb.go\"\n\t\"github.com/surrealdb/surrealdb.go/pkg/models\"\n)\n```\n\n----------------------------------------\n\nTITLE: Output of English Snowball Filter\nDESCRIPTION: The result of analyzing various English word forms with the snowball filter, showing how related words are reduced to common stems.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_23\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t'manag',\n\t'manag',\n\t'manag',\n\t'run',\n\t'ran',\n\t'foot',\n\t'feet',\n\t'introspect',\n\t'introspect',\n\t'introspect'\n]\n```\n\n----------------------------------------\n\nTITLE: Using Camel Tokenizer in SurrealQL Analyzer\nDESCRIPTION: This snippet shows how to define an analyzer with a camel tokenizer, which splits text based on camelCase. It includes the analyzer definition and a sample usage with search::analyze().\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/analyzer.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER example_camel TOKENIZERS camel;\nsearch::analyze(\"example_camel\", \"helloWorld\");\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Server with CLI\nDESCRIPTION: Command to start a SurrealDB instance with root user credentials, serving at localhost:8000 by default.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root\n```\n\n----------------------------------------\n\nTITLE: Invoking API Endpoint - Basic Usage\nDESCRIPTION: Shows how to invoke a defined API endpoint using api::invoke function with just a path parameter.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\napi::invoke(\"/test\");\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB CLI\nDESCRIPTION: Command to connect to SurrealDB's interactive shell with namespace and database specification\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql --user root --pass root --ns test --db test --pretty\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB Nightly on Windows\nDESCRIPTION: PowerShell command to download and install the nightly version of SurrealDB on Windows systems. Installs to C:\\Program Files\\SurrealDB by default.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/nightly.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\niex \"& { $(irm https://windows.surrealdb.com) } -Nightly\"\n```\n\n----------------------------------------\n\nTITLE: Formatting DateTime String in SurrealDB\nDESCRIPTION: Demonstrates how to format a datetime string into a specific pattern using the time::format function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/formatters.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::format(\"2021-11-01T08:30:17+00:00\", \"%Y-%m-%d\");\n```\n\n----------------------------------------\n\nTITLE: Configuring UUID v7 in Embedded Mode\nDESCRIPTION: Provides instructions for enabling rand::uuid::v7 in embedded mode by adding specific configuration to the .cargo/config.toml file in the project.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/rand.mdx#2025-04-16_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[build]\nrustflags = [\"--cfg\", \"uuid_unstable\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring SurrealDB connection with capabilities in Rust\nDESCRIPTION: This example demonstrates how to configure a SurrealDB connection using the new() method with a Config struct to set specific capabilities, including denying a particular function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/new.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    let config = Config::default()\n        .capabilities(Capabilities::all().with_deny_function(\"math::abs\")?);\n    let db = connect((\"mem://\", config)).await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    // Result: Err(Db(FunctionNotAllowed(\"math::abs\")))\n    println!(\"{:?}\", db.query(\"math::abs(-10)\").await?);\n    println!(\"{:?}\", db.run::<i32>(\"math::abs\").args(-10).await);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Code Comment Shortcut in Query Editor\nDESCRIPTION: Keyboard shortcut for commenting out a line in the Surrealist query editor. The shortcut is platform-specific with Cmd+/ for macOS and Ctrl+/ for Windows/Linux.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-cloud/advanced-topics/search-and-shortcuts.mdx#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`Cmd + /` or `Ctrl + /`\n```\n\n----------------------------------------\n\nTITLE: Namespace JWT Token Payload Structure\nDESCRIPTION: This JSON structure displays the minimum required claims for a namespace-level JWT token payload in SurrealDB, including expiration time, access method name, and namespace.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/jwt.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 2147483647,\n  \"ac\": \"token_name\",\n  \"ns\": \"abcum\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB on a specific port\nDESCRIPTION: Launches an in-memory SurrealDB server bound to port 8080 on all network interfaces using the --bind argument. This allows you to change the default port SurrealDB uses for web connections and database clients.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/memory.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root --bind 0.0.0.0:8080 memory\n```\n\n----------------------------------------\n\nTITLE: Connecting with Database Authentication Level\nDESCRIPTION: Example command showing how to connect to SurrealDB using database-level authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/sql.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql --endpoint http://localhost:8000 --namespace test --database test --auth-level database --username username --password password\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Records for UPDATE Examples in SurrealQL\nDESCRIPTION: This snippet demonstrates creating two person records using the CREATE statement to prepare for UPDATE examples. It shows creating a record with a random ID and another with a specific ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/update.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Create a Schemaless person table with a random id\nCREATE person CONTENT {\n    name: 'John',\n    company: 'Surrealist',\n    skills: ['JavaScript', 'Go' , 'SurrealQL']\n};\n\n-- Create another person with a specific id\nCREATE person:tobie CONTENT {\n    name: 'Tobie',\n    company: 'SurrealDB',\n    skills: ['JavaScript', 'Go' , 'SurrealQL']\n};\n```\n\n----------------------------------------\n\nTITLE: String IPv4 Validation in SurrealQL\nDESCRIPTION: Validates if a given string is a valid IPv4 address. Returns a boolean value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_22\n\nLANGUAGE: surql\nCODE:\n```\nstring::is::ipv4(string) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::ipv4(\"192.168.0.1\");\n```\n\n----------------------------------------\n\nTITLE: Querying All Users with GraphQL\nDESCRIPTION: A GraphQL query to fetch all users from the user table, retrieving their firstName, lastName, and email fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/graphql/surrealist.mdx#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    user {\n        firstName\n        lastName\n        email\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Export Method Usage Examples\nDESCRIPTION: Examples demonstrating different ways to use the export method including exporting all data, specific tables, and functions only.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/export.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Export everything\nconst result = await db.export();\n\n// Export specific tables only\nconst specificTables = await db.export({\n  tables: [\"foo\", \"bar\"]\n});\n\n// Export functions only\nconst functionsOnly = await db.export({\n  functions: true,\n  tables: false\n});\n```\n\n----------------------------------------\n\nTITLE: URL Validation in SurrealQL\nDESCRIPTION: Checks if a string is a valid URL. Returns a boolean value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_29\n\nLANGUAGE: surql\nCODE:\n```\nstring::is::url(string) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::url(\"https://surrealdb.com\");\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Email with GraphQL\nDESCRIPTION: A GraphQL query to fetch a specific user by their email address, demonstrating the use of filters in GraphQL queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/graphql/surrealist.mdx#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    user(filter: {email: {eq: \"Jon.Doe@surrealdb.com\"}}) {\n        firstName\n        lastName\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Response for Range-based Recursive Traversal\nDESCRIPTION: Shows the response from the range-based recursive traversal, returning city:5 as the furthest city reachable from city:1 through the defined path.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_51\n\nLANGUAGE: surql\nCODE:\n```\n[\n\tcity:5\n]\n```\n\n----------------------------------------\n\nTITLE: Alternative DateTime Format Validation in SurrealDB\nDESCRIPTION: Shows another example of datetime string validation with a different format pattern using string::is::datetime function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/formatters.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::datetime(\"23:56:00 2015-09-05\", \"%Y-%m-%d %H:%M\");\n```\n\n----------------------------------------\n\nTITLE: Converting Seconds to Datetime in SurrealQL\nDESCRIPTION: The time::from::secs function calculates a datetime based on the seconds since January 1, 1970 0:00:00 UTC. It takes a number as input and returns a datetime value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_27\n\nLANGUAGE: surql\nCODE:\n```\ntime::from::secs(number) -> datetime\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::from::secs(1000);\n\nd\"1970-01-01T00:16:40Z\"\n```\n\n----------------------------------------\n\nTITLE: Implementing person creation command handler in SurrealDB Rust application\nDESCRIPTION: Handles the CreatePerson command by deserializing JSON input into a PersonData struct and passing it to the database create function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nCommand::CreatePerson(s) => {\n    let person_data: PersonData = serde_json::from_str(&s)?;\n    self.create::<Option<Person>>(PERSON)\n        .content(person_data)\n        .await?\n        .string()\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Current Namespace in SurrealQL\nDESCRIPTION: This snippet shows how to use the INFO statement to check the current namespace.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/use.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nINFO FOR NS; -- Check the current Namespace\n```\n\n----------------------------------------\n\nTITLE: Importing SurrealDB JavaScript SDK and WebAssembly Engine\nDESCRIPTION: Code snippet showing how to import the Surreal class from the SurrealDB JavaScript SDK and the surrealdbWasmEngines function from the WebAssembly package.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/engines/wasm.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Surreal } from 'surrealdb';\nimport { surrealdbWasmEngines } from '@surrealdb/wasm';\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling Implementation\nDESCRIPTION: Implementation of custom error types for handling SurrealDB errors and converting them to Actix responses\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nmod error {\n    use actix_web::{HttpResponse, ResponseError};\n    use thiserror::Error;\n\n    #[derive(Error, Debug)]\n    pub enum Error {\n        #[error(\"database error\")]\n        Db(String),\n    }\n\n    impl ResponseError for Error {\n        fn error_response(&self) -> HttpResponse {\n            match self {\n                Error::Db(e) => HttpResponse::InternalServerError().body(e.to_string()),\n            }\n        }\n    }\n\n    impl From<surrealdb::Error> for Error {\n        fn from(error: surrealdb::Error) -> Self {\n            eprintln!(\"{error}\");\n            Self::Db(error.to_string())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB using Chocolatey\nDESCRIPTION: This command installs SurrealDB using the Chocolatey package manager. It installs both the command-line tools and the SurrealDB server as a single executable.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/windows.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchoco install surreal\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Server\nDESCRIPTION: Command to start a SurrealDB instance with root user credentials for development purposes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root\n```\n\n----------------------------------------\n\nTITLE: Single Response Header Configuration\nDESCRIPTION: Example of setting a single response header using api::res::header.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/api.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE API \"/test\"\n    FOR get \n        MIDDLEWARE\n            api::res::header(\"country-origin\", \"CA\")\n        THEN {\n            RETURN {\n                headers: {\n                    \"requested-at\": time::now()\n                },\n                body: SELECT * FROM person\n            };\n        };\n```\n\n----------------------------------------\n\nTITLE: Displaying ML Command Help in SurrealDB CLI\nDESCRIPTION: This command shows the help information and usage instructions for the 'surreal ml' command. It provides general information on arguments, inputs, and additional options for managing SurrealML models within an existing database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/ml/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal ml --help\n```\n\nLANGUAGE: bash\nCODE:\n```\nManage SurrealML models within an existing database\n\nUsage: surreal ml <COMMAND>\n\nCommands:\n  import  Import a SurrealML model into an existing database\n  export  Export a SurrealML model from an existing database\n  help    Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help  Print help\n```\n\n----------------------------------------\n\nTITLE: Invalidate Method Syntax in SurrealDB PHP SDK\nDESCRIPTION: Shows the basic syntax for calling the invalidate() method on a SurrealDB database connection instance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/invalidate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->invalidate()\n```\n\n----------------------------------------\n\nTITLE: Defining the Unset Method Signature in .NET SDK for SurrealDB\nDESCRIPTION: The signature definition for the Unset method in the SurrealDB .NET SDK, which removes a parameter for the current database connection. It takes a key parameter and an optional cancellation token.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/unset.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Unset(key)\n```\n\n----------------------------------------\n\nTITLE: Converting RecordID with Objects and Arrays to String in Python for SurrealDB\nDESCRIPTION: Illustrates how RecordID objects containing dictionaries or lists as identifiers are converted to string representations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/data-types.mdx#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nstr(RecordID('table', { city: \"London\" }))\n# 'table:{ city: \"London\" }'\nstr(RecordID('table', [\"London\"]))\n# 'table:[\"London\"]'\n```\n\n----------------------------------------\n\nTITLE: Delete Method Usage Examples in PHP\nDESCRIPTION: Examples showing how to delete all records from a table and how to delete a specific record using a RecordId.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/delete.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Delete all records from a table\n$db->delete('person');\n\n// Delete a specific record from a table\n$db->delete(new RecordId('person', 'h5wxrf2ewk8xjxosxtyc'));\n```\n\n----------------------------------------\n\nTITLE: Importing Data Method Syntax in PHP\nDESCRIPTION: Method signature for importing data into SurrealDB using the PHP SDK. Takes content, username, and password as required parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/import.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->import($content, $username, $password);\n```\n\n----------------------------------------\n\nTITLE: Implementing Central and Right Panel UI Layout\nDESCRIPTION: Implementation of the central input panel and right-side scrollable results panel in the Egui interface.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\negui::CentralPanel::default().show(ctx, |ui| {\n    ui.label(RichText::new(\"Input:\").heading());\n    ui.text_edit_multiline(&mut self.input);\n});\negui::SidePanel::right(\"right\").show(ctx, |ui| {\n    egui::ScrollArea::vertical().show(ui, |ui| {\n        ui.label(RichText::new(\"Results:\").heading());\n        ui.text_edit_multiline(&mut self.results);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Running SurrealDB Experiments\nDESCRIPTION: Commands to test SurrealDB deployment and verify data persistence\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/kubernetes.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/surrealdb-tikv 8000\n```\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql --conn 'http://localhost:8000' --user root --pass surrealdb\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pod\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pod surrealdb-tikv-7488f6f654-lsrwp\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB .NET SDK using .NET CLI\nDESCRIPTION: Installs the SurrealDB .NET SDK using the .NET CLI tool. This command adds the SurrealDb.Net package to your project dependencies.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/installation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package SurrealDb.Net\n```\n\n----------------------------------------\n\nTITLE: Defining Record User Access\nDESCRIPTION: SurrealQL statement to define record-level user authentication with signup and signin logic\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/working-with-surrealdb-over-http-via-postman.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS human ON DATABASE TYPE RECORD\n    SIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\n    SIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )\n    DURATION FOR SESSION 24h\n;\n```\n\n----------------------------------------\n\nTITLE: Using search::offsets Function in SurrealQL\nDESCRIPTION: This example shows how to use the search::offsets function to retrieve the positions of matching keywords in search results.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/search.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nSELECT id, title, search::offsets(1) AS title_offsets\n\tFROM book WHERE title @1@ 'rust web';\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB Node.js Engine via Package Managers\nDESCRIPTION: Commands for installing the @surrealdb/node package using different Node.js package managers (npm, yarn, pnpm).\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/engines/node.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @surrealdb/node\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @surrealdb/node\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @surrealdb/node\n```\n\n----------------------------------------\n\nTITLE: Sample output of SurrealDB help command\nDESCRIPTION: This shows the expected output of the 'surreal help' command, displaying the SurrealDB ASCII art logo, documentation links, and available subcommands with their descriptions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/linux.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n.d8888b.                                             888 8888888b.  888888b.\nd88P  Y88b                                            888 888  'Y88b 888  '88b\nY88b.                                                 888 888    888 888  .88P\n 'Y888b.   888  888 888d888 888d888  .d88b.   8888b.  888 888    888 8888888K.\n\t'Y88b. 888  888 888P'   888P'   d8P  Y8b     '88b 888 888    888 888  'Y88b\n\t  '888 888  888 888     888     88888888 .d888888 888 888    888 888    888\nY88b  d88P Y88b 888 888     888     Y8b.     888  888 888 888  .d88P 888   d88P\n 'Y8888P'   'Y88888 888     888      'Y8888  'Y888888 888 8888888P'  8888888P'\n\n\nSurrealDB command-line interface and server\n\nTo get started using SurrealDB, and for guides on connecting to and building applications\non top of SurrealDB, check out the SurrealDB documentation (https://surrealdb.com/docs).\n\nIf you have questions or ideas, join the SurrealDB community (/community).\n\nIf you find a bug, submit an issue on Github (https://github.com/surrealdb/surrealdb/issues).\n\nWe would love it if you could star the repository (https://github.com/surrealdb/surrealdb).\n\n----------\n\nUSAGE:\n\tsurreal [SUBCOMMAND]\n\nOPTIONS:\n\t-h, --help    Print help information\n\nSUBCOMMANDS:\n\tstart      Start the database server\n\timport     Import a SQL script into an existing database\n\texport     Export an existing database into a SQL script\n\tversion    Output the command-line tool version information\n\tsql        Start an SQL REPL in your terminal with pipe support\n\thelp       Print this message or the help of the given subcommand(s)\n\n```\n\n----------------------------------------\n\nTITLE: Using crypto::md5 Hash Function in SurrealQL\nDESCRIPTION: Returns the md5 hash of the input string value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/crypto.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\ncrypto::md5(string) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN crypto::md5(\"tobie\");\n\n\"4768b3fc7ac751e03a614e2349abf3bf\"\n```\n\n----------------------------------------\n\nTITLE: Email Validation in SurrealDB\nDESCRIPTION: Demonstrates email field definition with validation using string::is::email function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD email ON TABLE user TYPE string ASSERT $value.is_email();\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with GraphQL Module (Windows)\nDESCRIPTION: Command to start SurrealDB with the GraphQL module enabled on Windows. It sets the SURREAL_CAPS_ALLOW_EXPERIMENTAL environment variable and uses the surreal start command with debug logging and root credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/graphql/http.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# From greater than or equal to V2.2.0\n$env:SURREAL_CAPS_ALLOW_EXPERIMENTAL=graphql surreal start --log debug --user root --password root\n\n# From versions lower than V2.2.0\n$env:SURREAL_EXPERIMENTAL_GRAPHQL = \"true\" surreal start --log debug --user root --password root\n```\n\n----------------------------------------\n\nTITLE: Creating Basic SurrealDB GitHub Actions Workflow\nDESCRIPTION: Initial YAML configuration for setting up a basic SurrealDB workflow in GitHub Actions. Includes essential setup parameters like version, port, authentication, and logging.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/using-github-actions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: SurrealDB CI\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Git checkout\n      uses: actions/checkout@v4\n    - name: Start SurrealDB\n      uses: surrealdb/setup-surreal@v2\n      with:\n        surrealdb_version: latest\n        surrealdb_port: 8000\n        surrealdb_username: root\n        surrealdb_password: root\n        surrealdb_auth: false\n        surrealdb_strict: false\n        surrealdb_log: info\n        surrealdb_additional_args: --allow-all\n        surrealdb_retry_count: 30\n```\n\n----------------------------------------\n\nTITLE: Changing SurrealDB Port in Docker\nDESCRIPTION: This snippet shows how to change the default port SurrealDB uses for web connections when running in Docker. It maps port 80 on the host to port 8000 in the container.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/docker.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --pull always -p 80:8000 -v /mydata:/mydata surrealdb/surrealdb:latest start --user root --pass root rocksdb:/mydata/mydatabase.db\n```\n\n----------------------------------------\n\nTITLE: Output of bytes::len Function in SurrealQL\nDESCRIPTION: The result of executing the bytes::len function on different string inputs, showing the byte length for each.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/bytes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n[ 19, 67, 25 ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for SurrealDB WebAssembly Engine\nDESCRIPTION: Vite configuration options to properly handle the SurrealDB WebAssembly engine in a project.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/engines/wasm.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\noptimizeDeps: {\n    exclude: [\"@surrealdb/wasm\"],\n    esbuildOptions: {\n        target: \"esnext\",\n    },\n},\nesbuild: {\n    supported: {\n        \"top-level-await\": true\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Array Boolean XOR Operation in SurrealQL\nDESCRIPTION: Function that performs logical XOR operations on array elements. Takes two arrays as input and returns a boolean array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\narray::boolean_xor(lh: array, rh: array)\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::boolean_xor([false, true, false, true], [false, false, true, true]);\n```\n\n----------------------------------------\n\nTITLE: Running SurrealDB Docker Container with Optimized Logging\nDESCRIPTION: Docker command to run SurrealDB container with 'info' log level for production use, ensuring optimal performance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/performance-best-practices.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm --pull always -p 8000:8000 surrealdb/surrealdb:latest start --log info rocksdb://path/to/mydatabase\n```\n\n----------------------------------------\n\nTITLE: Setting up a new .NET console project with SurrealDB SDK\nDESCRIPTION: Commands to create a new .NET console application and add the SurrealDB SDK package dependency using the dotnet CLI.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/start.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new console app\ndotnet new console -o SurrealDbExample\n\n# Navigate into the generated directory\ncd SurrealDbExample\n\n# Add the SurrealDB SDK to your project via the dotnet CLI\ndotnet add package SurrealDb.Net\n```\n\n----------------------------------------\n\nTITLE: Executing HTTP DELETE Request in SurrealQL\nDESCRIPTION: Example of using the http::delete function in a RETURN statement to delete a comment from a dummy JSON API.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/http.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\nRETURN http::delete('https://dummyjson.com/comments/1');\n\nnull\n```\n\n----------------------------------------\n\nTITLE: Importing SurrealDB SDK for Synchronous API in Python\nDESCRIPTION: This code snippet shows how to import the Surreal class from the surrealdb package for synchronous API usage in a Python project.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/installation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom surrealdb import Surreal\n```\n\n----------------------------------------\n\nTITLE: Installing WebAssembly Engine for SurrealDB JavaScript SDK\nDESCRIPTION: Commands to install the WebAssembly engine for the SurrealDB JavaScript SDK using different package managers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/engines/wasm.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @surrealdb/wasm\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @surrealdb/wasm\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @surrealdb/wasm\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Sample CRUD Operations\nDESCRIPTION: Example SurrealQL queries to demonstrate CRUD operations that trigger live notifications.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/select_live.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person;\nUPDATE person SET is_nice_person = true;\nDELETE person;\n```\n\n----------------------------------------\n\nTITLE: Using session::origin() to retrieve HTTP origin in SurrealQL\nDESCRIPTION: The session::origin() function returns the HTTP origin associated with the current user's session, which indicates where the request originated from.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/session.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nsession::origin() -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN session::origin();\n\n\"http://localhost:3000\"\n```\n\n----------------------------------------\n\nTITLE: Using Invalidate Method in TypeScript\nDESCRIPTION: This example demonstrates how to use the `invalidate()` method in an asynchronous context. It calls the method on the database object and awaits its completion.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/invalidate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.invalidate();\n```\n\n----------------------------------------\n\nTITLE: Method Signature for ListenLive in SurrealDB .NET SDK\nDESCRIPTION: This code shows the method signature for ListenLive, which consumes responses from an existing live query. It requires a queryUuid parameter that identifies which live query to consume.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/listen_live.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndb.ListenLive<T>(queryUuid)\n```\n\n----------------------------------------\n\nTITLE: Viewing User Records in SurrealDB as Root User\nDESCRIPTION: Example showing how the root user can view user records, including securely hashed passwords created with the Argon2 algorithm, demonstrating SurrealDB's security features.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_21\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tid: user:qx2apv5oc8mh03wtah0q,\n\t\tname: 'Gerard',\n\t\tpass: '$argon2id$v=19$m=19456,t=2,p=1$j0ktTqUxRjOWYnwS5LoMFQ$2NcGkf5+IuLml6NorPy/Le6T8RppYXTXakwY5cDiZPY'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Using array::first function in SurrealQL\nDESCRIPTION: The array::first function returns the first value from an array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_18\n\nLANGUAGE: surql\nCODE:\n```\narray::first(array) -> any\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::first([ 's', 'u', 'r', 'r', 'e', 'a', 'l' ]);\n\n\"s\"\n```\n\n----------------------------------------\n\nTITLE: Basic Sensor Reading Creation in SurrealDB\nDESCRIPTION: Demonstrates the basic way of creating sensor readings with fields in a record using standard record creation syntax.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/time-series.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nCREATE sensor_readings CONTENT {\n    timestamp: time::now(),\n    location: location:Longleat_House,\n    sensor: sensor:ARF8394AAA,\n    temperture_celsius: 28.4,\n    humidity_percent: 55\n};\n```\n\n----------------------------------------\n\nTITLE: String Ends With Check in SurrealQL\nDESCRIPTION: Demonstrates checking if a string ends with a specific substring.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::ends_with('some test', 'test');\n```\n\n----------------------------------------\n\nTITLE: Raw Request Body Configuration\nDESCRIPTION: Demonstrates setting up an endpoint to handle raw byte request bodies.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/api.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE API \"/test\"\n    FOR get \n        MIDDLEWARE\n            api::req::raw_body(true)\n        THEN {\n            RETURN {\n                headers: {\n                    \"requested-at\": time::now()\n                },\n                body: SELECT * FROM person\n            };\n        };\n```\n\n----------------------------------------\n\nTITLE: Querying Related Records in SurrealQL\nDESCRIPTION: Examples of querying related records using the graph relationship syntax in SurrealQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Aristotle's id and the articles he wrote\nSELECT id, ->wrote->article FROM person:aristotle;\n-- Every `person`'s id and written articles\n-- Same output as above as the database has a single `person` record\nSELECT id, ->wrote->article FROM person;\n-- Directly follow the path from Aristotle to his written articles\nRETURN person:aristotle->wrote->article;\n```\n\n----------------------------------------\n\nTITLE: Update Method Syntax in SurrealDB .NET SDK\nDESCRIPTION: The syntax for the Update method in the SurrealDB .NET SDK. This method accepts a thing parameter (table name or RecordId) and data to update the record with, and returns a generic type T.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Update<T>(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Graph Relations with Weighted Interactions in SurrealDB\nDESCRIPTION: This snippet demonstrates creating weighted relationships between NPCs using graph relations with a 'greeted' counter. It creates NPC records, establishes relationships between them with weight tracking, and queries the strength of relationships.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\n-- Create 4 'npc' records\nCREATE |npc:1..4|;\n\nFOR $npc IN SELECT * FROM npc {\n    -- Give each npc 20 random interactions\n    FOR $_ IN 0..20 {\n      -- Looks for a random NPC, use array::complement to filter out self\n      LET $counterpart = rand::enum(array::complement((SELECT * FROM npc), [$npc]));\n      -- See if they have a relation yet\n      LET $existing = SELECT * FROM knows WHERE in = $npc.id AND out = $counterpart.id;\n      -- If relation exists, increase 'greeted' by one\n      IF !!$existing {\n        UPDATE $existing SET greeted += 1;\n      -- Otherwise create the relation and set 'greeted' to 1\n      } ELSE {\n        RELATE $npc->knows->$counterpart SET greeted = 1;\n      }  \n    };\n};\n\nSELECT \n\tid, \n\t->knows.{ like_strength: greeted, with: out } AS relations\n\tFROM npc;\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB server with default memory option\nDESCRIPTION: Starts SurrealDB with the implicit memory option as the default. This command is functionally identical to 'surreal start memory'.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/memory.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields from Record IDs in SurrealQL\nDESCRIPTION: Demonstrates different ways to select data directly from record IDs, including selecting the whole record and specific fields.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/records.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person SET name = 'Tobie', email = 'tobie@surrealdb.com', opts.enabled = true;\n\n-- Select the whole record\nperson:aio58g22n3upq16hsani.*\n\n-- Select specific fields (since 2.0.0)\nperson:aio58g22n3upq16hsani.{ name, email }\n```\n\n----------------------------------------\n\nTITLE: Converting Date-Only Strings to Datetime in SurrealDB\nDESCRIPTION: Shows how SurrealDB conveniently parses and converts date-only strings to datetime values, setting the time component to midnight UTC.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/datetimes.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nCREATE event SET time = <datetime>\"2024-04-03\";\n```\n\n----------------------------------------\n\nTITLE: Record ID Prefix in SurrealQL\nDESCRIPTION: Example of using the 'r' prefix to specify a record ID literal in SurrealQL. Without this prefix in SurrealQL v2.0+, values are treated as regular strings instead of record references.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/strings.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nRETURN r\"person:john\";\n```\n\n----------------------------------------\n\nTITLE: Displaying ML Import Command Help\nDESCRIPTION: Command to display help information and usage instructions for the surreal ml import command.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/ml/import.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal ml import --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Validate Command Help\nDESCRIPTION: Command to display help information for the validate command, showing available options and usage instructions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/validate.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsurreal validate --help\n```\n\nLANGUAGE: text\nCODE:\n```\nValidate SurrealQL query files\n\nUsage: surreal validate [OPTIONS] [PATTERNS]...\n\nArguments:\n  [PATTERNS]...  Glob pattern for the files to validate [default: **/*.surql]\n\nOptions:\n  -l, --log <LOG>  The logging level for the command-line tool [env: SURREAL_LOG=] [default: info] [possible values: none, full, error, warn, info, debug, trace]\n  -h, --help       Print help\n```\n\n----------------------------------------\n\nTITLE: Invalidating Authentication in SurrealDB with Python\nDESCRIPTION: Method to invalidate the current authentication session in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/handling-authentication.mdx#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndb.invalidate()\n```\n\n----------------------------------------\n\nTITLE: CLI Database Query\nDESCRIPTION: Command to query the SurrealDB database using the CLI with authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/setup.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql --user root --pass root --namespace test --database test --pretty\n```\n\n----------------------------------------\n\nTITLE: Rust Dependencies Configuration\nDESCRIPTION: TOML configuration showing required dependencies for implementing live queries\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/live.mdx#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nfutures = \"0.3.31\"\nserde = { version = \"1.0.214\", features = [\"serde_derive\"] }\nsurrealdb = \"2.0.4\"\ntokio = \"1.41.0\"\n```\n\n----------------------------------------\n\nTITLE: API Timeout Configuration\nDESCRIPTION: Example of setting request timeout using api::timeout middleware function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/api.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE API \"/test\"\n    FOR get \n        MIDDLEWARE\n            api::timeout(1s)\n        THEN {\n            RETURN {\n                headers: {\n                    \"requested-at\": time::now()\n                },\n                body: SELECT * FROM person\n            };\n        };\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Kubernetes Resources and Azure AKS Cluster\nDESCRIPTION: Commands to remove all the resources created during the installation process, including the SurrealDB Helm chart, TiDB operator, and the Azure AKS cluster itself.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/azure.mdx#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ helm uninstall surrealdb-tikv\n$ helm -n tidb-operator uninstall tidb-operator\n$ az aks delete --name surrealdb-aks-cluster --resource-group rg-surrealdb-aks\n$ az group delete --resource-group rg-surrealdb-aks\n```\n\n----------------------------------------\n\nTITLE: Installing React Query Package\nDESCRIPTION: Commands for installing @tanstack/react-query package using different Node.js package managers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/frameworks/react.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun install @tanstack/react-query\nnpm install --save @tanstack/react-query\nyarn add @tanstack/react-query\npnpm install @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: String Damerau-Levenshtein Distance in SurrealQL\nDESCRIPTION: Shows how to calculate the Damerau-Levenshtein distance between strings.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nLET $first     = \"In a hole in the ground there lived a hobbit\";\nLET $same      = \"In a hole in the ground there lived a hobbit\";\nLET $close     = \"In a hole in the GROUND there lived a Hobbit\";\nLET $different = \"A narrow passage holds four hidden treasures\";\nLET $short     = \"Hi I'm Brian\";\n\n-- Returns 0\nstring::distance::damerau_levenshtein($first, $same);\n-- Returns 7\nstring::distance::damerau_levenshtein($first, $close);\n-- Returns 34\nstring::distance::damerau_levenshtein($first, $different);\n-- Returns 38\nstring::distance::damerau_levenshtein($first, $short);\n```\n\n----------------------------------------\n\nTITLE: Importing SurrealQL File Using SurrealDB CLI\nDESCRIPTION: This command imports a SurrealQL script file into a SurrealDB database using username and password authentication. It specifies the connection URL, credentials, namespace, database, and the file to import.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/import.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal import --conn http://localhost:8000 --user root --pass root --ns test --db test downloads/surreal_deal_v1.surql\n```\n\n----------------------------------------\n\nTITLE: Basic Connection String Example with SurrealDB .NET SDK\nDESCRIPTION: A basic connection string example for the SurrealDB .NET SDK using Server syntax. It includes server address, namespace, database, and authentication credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/connection-strings.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nServer=http://127.0.0.1:8000;Namespace=test;Database=test;Username=root;Password=root\n```\n\n----------------------------------------\n\nTITLE: Cargo Dependencies Configuration\nDESCRIPTION: Required dependencies for the Rust project including SurrealDB, Rocket, and utilities\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nfaker_rand = \"0.1.1\"\nrand = \"0.8.5\"\nrocket = { version = \"0.5.1\", features = [\"json\"] }\nserde = { version = \"1.0.209\", features = [\"derive\"] }\nsurrealdb = \"2.0.4\"\nthiserror = \"1.0.64\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Method Syntax in SurrealDB\nDESCRIPTION: Examples of using method syntax with the '.' operator to call functions on existing values in SurrealDB 2.0. This syntax improves readability and allows for method chaining.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n\"SurrealDB 2.0 is on its way!\".split(\" \");\n[1,2,3].len();\n10.is_number();\n```\n\n----------------------------------------\n\nTITLE: Output of Bidirectional Record Links in SurrealDB\nDESCRIPTION: This snippet shows the output of querying a comment with bidirectional links, displaying both the comment's properties and the references to users who authored it using the .refs() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\n-------- Query --------\n\n{\n\tauthor: [\n\t\tuser:ie8yc8woe0rwo5cgln57\n\t],\n\tcreated_at: d'2024-12-31T04:51:47.504Z',\n\tid: comment:one,\n\ttext: 'I learned something new!'\n}\n\n-------- Query --------\n\n[\n\tuser:ie8yc8woe0rwo5cgln57\n]\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Server with Authentication\nDESCRIPTION: Command to start SurrealDB server locally with root user authentication\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/working-with-surrealdb-over-http-via-postman.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nsurreal start --user root --pass root\n```\n\n----------------------------------------\n\nTITLE: Validating Multiple SurrealQL Files with Glob Pattern\nDESCRIPTION: Command to validate multiple SurrealQL files using a glob pattern that matches all .surql files in all directories.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/validate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal validate **/*.surql\n```\n\n----------------------------------------\n\nTITLE: Installing TiKV using tiup\nDESCRIPTION: This command installs the tiup command-line tool, which is used for deploying and managing TiKV clusters of any size.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/tikv.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSf https://tiup-mirrors.pingcap.com/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Using Health Method with SurrealDB .NET SDK\nDESCRIPTION: This example shows how to call the Health method and store the returned boolean status indicating whether the database server is healthy.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/health.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbool status = await db.Health();\n```\n\n----------------------------------------\n\nTITLE: Live Query Implementation in Rust\nDESCRIPTION: Complete Rust implementation for monitoring real-time changes to account records using live queries, including connection setup and stream handling\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/live.mdx#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse futures::StreamExt;\nuse serde::Deserialize;\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::{RecordId, Surreal};\n\nconst ACCOUNT: &str = \"account\";\n\n#[derive(Debug, Deserialize)]\nstruct Account {\n    id: RecordId,\n    balance: f64,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = Surreal::new::<Ws>(\"localhost:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"namespace\").use_db(\"database\").await?;\n\n    let mut sample_accounts = db.select(ACCOUNT).range(\"a\"..=\"g\").live().await?;\n\n    while let Some(result) = sample_accounts.next().await {\n        match result {\n            Ok(notification) => {\n                let action = notification.action;\n                let account: Account = notification.data;\n                let id = notification.query_id;\n                println!(\"{action:?} from live ID {id}:\\n  {account:#?}\\n\");\n            }\n            Err(error) => eprintln!(\"{error}\"),\n        }\n    }\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in to Azure and Creating AKS Cluster\nDESCRIPTION: These commands log in to Azure, create a resource group, and set up an AKS cluster with monitoring enabled and spread across multiple availability zones.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/azure.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ az login\n$ az account list\n\n$ az group create --name rg-surrealdb-aks --location westeurope\n\n$ az aks create \\\n    --resource-group rg-surrealdb-aks \\\n    --location westeurope \\\n    --name surrealdb-aks-cluster \\\n    --generate-ssh-keys \\\n    --load-balancer-sku standard \\\n    --node-count 3 \\\n    --zones 1 2 3 \\\n    --enable-addons monitoring \\\n    --tier standard\n\n$ az aks get-credentials --resource-group rg-surrealdb-aks --name surrealdb-aks-cluster\n\n$ kubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Docker Container\nDESCRIPTION: Command to start a local SurrealDB instance using Docker with root credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/integrate-aws-cognito-as-authentication-provider.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --pull always -p 8000:8000 surrealdb/surrealdb:latest \\\n  start --user root --pass root\n```\n\n----------------------------------------\n\nTITLE: COMMIT Statement Syntax in SurrealQL\nDESCRIPTION: The basic syntax for the COMMIT statement in SurrealQL. The TRANSACTION keyword is optional.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/commit.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nCOMMIT [ TRANSACTION ];\n```\n\n----------------------------------------\n\nTITLE: Table Definition and Data Insertion Example\nDESCRIPTION: Creates a schemaful table with a field and inserts sample data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE foo SCHEMAFUL;\nDEFINE FIELD val ON foo TYPE int;\nCREATE foo:1 SET val = 42;\n```\n\n----------------------------------------\n\nTITLE: Creating Person Record as Record User\nDESCRIPTION: JSON input for creating a person record as a record user, which will automatically include the created_by field based on the authenticated user's ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"recorduserperson\" }\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Duration in SurrealDB\nDESCRIPTION: The type::duration function converts values into duration format. It accepts duration or string as input.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::duration(\"4h\");\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with SurrealKV Storage\nDESCRIPTION: Initializes SurrealDB using SurrealKV as the storage engine with root credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start -u root -p root surrealkv://mydb\n```\n\n----------------------------------------\n\nTITLE: Configuring kubectl Credentials\nDESCRIPTION: Command to configure kubectl credentials for accessing the newly created GKE cluster.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/google.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud container clusters get-credentials surrealdb-guide --region REGION --project PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Defining string::similarity::fuzzy Function in SurrealQL\nDESCRIPTION: API definition for the string::similarity::fuzzy function, which compares the similarity of two strings and returns an integer score.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_32\n\nLANGUAGE: surql\nCODE:\n```\nstring::similarity::fuzzy(string, string) -> int\n```\n\n----------------------------------------\n\nTITLE: Killing Live Queries with SurrealDB Python SDK\nDESCRIPTION: The 'kill' method terminates a running live query using its UUID. It requires the query_uuid as a mandatory argument. This method can be used in both synchronous and asynchronous contexts.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/kill.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.kill(query_uuid)\n\n# Async\nawait db.kill(query_uuid)\n```\n\n----------------------------------------\n\nTITLE: Raw Compute Implementation in Rust\nDESCRIPTION: Shows how to perform raw computation using direct vector input in Rust.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/computation.mdx#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet x = vec![1000.0, 2.0];\nlet data: ArrayD<f32> = ndarray::arr1(&x).into_dyn();\n\nlet output = compute_unit.raw_compute(data, None).unwrap();\n```\n\n----------------------------------------\n\nTITLE: Basic DEFINE NAMESPACE Example in SurrealQL\nDESCRIPTION: Simple example showing how to create a namespace for a company called Abcum Ltd.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/namespace.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Namespace for Abcum Ltd.\nDEFINE NAMESPACE abcum;\n```\n\n----------------------------------------\n\nTITLE: Authenticate Method Syntax in .NET SDK\nDESCRIPTION: Method signature for authenticating a SurrealDB connection using a JWT token.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/authenticate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Authenticate(jwt)\n```\n\n----------------------------------------\n\nTITLE: String Length Calculation in SurrealQL\nDESCRIPTION: Demonstrates getting the length of a string.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::len('this is a test');\n```\n\n----------------------------------------\n\nTITLE: Output of Hieroglyphs Mapper Analysis\nDESCRIPTION: The result of analyzing hieroglyphic symbols with the mapper filter, showing the conversion to descriptive English terms.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_31\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t'seated_man',\n\t'goddess_with_feather'\n]\n```\n\n----------------------------------------\n\nTITLE: Linux Installation Options Block\nDESCRIPTION: Lists the three package formats available for Linux installation of Surrealist: deb for Debian-based systems, rpm for Red Hat-based systems, and AppImage for other distributions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/installation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `deb` for Ubuntu and Debian-based systems\n- `rpm` for Fedora and Red Hat-based systems\n- `AppImage` for other Linux distributions\n```\n\n----------------------------------------\n\nTITLE: Implementing Root User SignIn Handler\nDESCRIPTION: Handler for root user authentication with hardcoded root credentials for testing purposes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nCommand::SignInRoot => {\n    self.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n    Ok(format!(\"Back to root!\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Database Schema Information with INFO Statements in SurrealQL\nDESCRIPTION: SurrealQL provides INFO statements that can be used to programmatically extract schema information from the database. These statements allow you to access the same information that powers the Designer view.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/concepts/designing-the-database-schema.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINFO FOR DB\n```\n\nLANGUAGE: sql\nCODE:\n```\nINFO FOR TABLE\n```\n\n----------------------------------------\n\nTITLE: Defining Database Structure in SurrealQL\nDESCRIPTION: Syntax for defining a new database in SurrealDB using the DEFINE DATABASE statement. Includes optional parameters for overwriting existing databases and adding comments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/concepts/database.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nDEFINE DATABASE [ OVERWRITE | IF NOT EXISTS ] @name [ COMMENT @string ]\n```\n\n----------------------------------------\n\nTITLE: Validating Alphabetic Strings in SurrealQL\nDESCRIPTION: The string::is::alpha function checks if a string contains only alphabetic characters. It takes a string input and returns a boolean.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::alpha(\"ABCDEF\");\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: Signing in as a Record User using HTTP Request\nDESCRIPTION: Authenticates a record user via HTTP POST request, providing the access method and required credentials to establish a session.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/authentication.mdx#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n\t-H \"Accept: application/json\" \\\n\t-d '{\"NS\":\"test\", \"DB\":\"test\", \"AC\":\"user\", \"email\":\"john.doe@example.com\", \"password\":\"VerySecurePassword!\"}' \\\n\thttp://localhost:8000/signin\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Object-Based IDs in SurrealQL\nDESCRIPTION: Demonstrates creating records with object-based identifiers, noting that object fields are ordered alphabetically which is important for record range queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\nCREATE temperature:{ city: 'London', date: time::now() } SET\n    temperature = 23.7,\n\tlocation = (0.1276, 51.5072),\n```\n\n----------------------------------------\n\nTITLE: PHP Method Signature for SurrealDB Merge Operation\nDESCRIPTION: Defines the basic syntax for the merge() method in the PHP SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/merge.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->merge($thing, $data)\n```\n\n----------------------------------------\n\nTITLE: Creating a Person Record as Root User in SurrealDB\nDESCRIPTION: This snippet demonstrates creating a 'person' record in SurrealDB using the root user. The created record doesn't include a 'created_by' field.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ntest/test> CREATE person SET name = 'Aeon';\n-- Query 1\n[\n\t{\n\t\tid: person:hdl0unwts4atic65nh7l,\n\t\tname: 'Aeon'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB on Linux using the install script\nDESCRIPTION: This command downloads and runs the SurrealDB install script, which automatically installs the latest version of SurrealDB into /usr/local/bin or a user-specified location.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/linux.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSf https://install.surrealdb.com | sh\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Info Method Usage Examples\nDESCRIPTION: Examples showing both synchronous and asynchronous usage of the info() method for retrieving user information.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/info.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndb.info()\n\n# Async\nawait db.info()\n```\n\n----------------------------------------\n\nTITLE: Parsing URL Domain in SurrealQL\nDESCRIPTION: This function extracts the domain from a valid URL. It returns null if the URL contains an IP address instead of a domain name.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/parse.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nparse::url::domain(string) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN parse::url::domain(\"https://surrealdb.com:80/features?some=option#fragment\");\nRETURN parse::url::domain(\"http://127.0.0.1/index.html\");\n\n\"surrealdb.com\"\n\nnull\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Docker Container\nDESCRIPTION: Command to run a SurrealDB instance using Docker for testing purposes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/integrate-auth0-as-authentication-provider.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --pull always -p 8000:8000 surrealdb/surrealdb:latest \\\n  start --user root --pass root\n```\n\n----------------------------------------\n\nTITLE: Downloading and Importing Mini Dataset with cURL\nDESCRIPTION: Commands to download the mini version of the Surreal Deal Store dataset and import it into SurrealDB using cURL. First downloads the file and then POSTs it to the import endpoint with authentication headers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/demo.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Download the file\ncurl -L \"https://datasets.surrealdb.com/surreal-deal-store-mini.surql\" -o surreal-deal-store-mini.surql\n\n# Load the file into the database using the rest endpoint\ncurl -v -X POST -u \"root:root\" -H \"NS: test\" -H \"DB: test\" -H \"Accept: application/json\" --data-binary @surreal-deal-store-mini.surql http://localhost:8000/import\n```\n\n----------------------------------------\n\nTITLE: Adding Durations to Datetime Values in SurrealDB\nDESCRIPTION: Shows how to modify a datetime by adding a duration, in this case adding 2 weeks to a date. SurrealDB supports various duration units for time calculations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/datetimes.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nCREATE event SET time = d\"2023-07-03T07:18:52Z\" + 2w;\n```\n\n----------------------------------------\n\nTITLE: Invalidating Authentication in SurrealDB C#\nDESCRIPTION: Shows how to invalidate the current authentication session. The method accepts an optional cancellationToken parameter for graceful cancellation of the asynchronous operation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/authentication.mdx#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Invalidate();\n```\n\n----------------------------------------\n\nTITLE: Python Merge Method Syntax\nDESCRIPTION: Basic syntax definition for the merge() method in the SurrealDB Python SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/merge.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.merge(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Importing SurrealDB Node.js Engine\nDESCRIPTION: Code showing how to import the necessary modules from SurrealDB and its Node.js engine plugin.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/engines/node.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Surreal } from 'surrealdb';\nimport { surrealdbNodeEngines } from '@surrealdb/node';\n```\n\n----------------------------------------\n\nTITLE: Commenting Code in Surrealist Query Editor\nDESCRIPTION: Demonstrates the keyboard shortcut for commenting out a line in the Surrealist query editor.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/advanced-topics/search-and-shortcuts.mdx#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nComment out a line in the query editor using `Cmd + /` or `Ctrl + /`.\n```\n\n----------------------------------------\n\nTITLE: Installing TiDB Operator via Helm\nDESCRIPTION: Commands to add PingCAP helm repository and install TiDB operator using Helm.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/google.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ helm repo add pingcap https://charts.pingcap.org\n$ helm repo update\n$ helm install \\\n\t-n tidb-operator \\\n    --create-namespace \\\n\ttidb-operator \\\n\tpingcap/tidb-operator \\\n\t--version v1.5.0\n```\n\n----------------------------------------\n\nTITLE: Fix Command Help Output\nDESCRIPTION: The complete help output showing all available options and arguments for the fix command, including environment variables and default values.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/fix.mdx#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nFix database storage issues\n\nUsage: surreal fix [OPTIONS] [PATH]\n\nArguments:\n  [PATH]  Database path used for storing data [env: SURREAL_PATH=] [default: memory]\n\nOptions:\n  -l, --log <LOG>  The logging level for the command-line tool [env: SURREAL_LOG=] [default: info] [possible values: none, full, error, warn, info, debug, trace]\n  -h, --help       Print help\n```\n\n----------------------------------------\n\nTITLE: Machine Learning Model Response in SurrealDB\nDESCRIPTION: The response from executing a machine learning image classifier model. The result is the classification label determined by the model based on the input image data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": \"cat\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Registration Data\nDESCRIPTION: SurrealQL query to retrieve all records from the registration table\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/connect-to-surrealdb-via-ngrok-tunnel.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM registration\n```\n\n----------------------------------------\n\nTITLE: Equivalent SurrealQL Query for create Method\nDESCRIPTION: This SurrealQL query represents the database operation performed by the 'create' method of the Python SDK. It creates a new record with the specified content.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/create.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE $thing CONTENT $data\n```\n\n----------------------------------------\n\nTITLE: RecordId Construction Examples\nDESCRIPTION: Shows different ways to construct RecordId instances including implicit conversion from tuples.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/data-types.mdx#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Table is \"person\"\n// Unique identifier on the table is \"john\"\nvar rid = new RecordId(\"person\", \"john\");\n\n// Alternatively, a RecordId can be inferred implicitly from a Tuple of 2 elements\nRecordId rid = (\"person\", \"john\");\nawait client.Select((\"person\", \"john\"));\n```\n\n----------------------------------------\n\nTITLE: Basic Field Definition Examples\nDESCRIPTION: Simple examples showing basic field declaration and nested field definitions using dot notation and array indexing.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/field.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\n-- Declare the name of a field.\nDEFINE FIELD email ON TABLE user;\n```\n\nLANGUAGE: surql\nCODE:\n```\n-- Define nested object property types\nDEFINE FIELD emails.address ON TABLE user TYPE string;\nDEFINE FIELD emails.primary ON TABLE user TYPE bool;\n\n-- Define individual fields on an array\nDEFINE FIELD metadata[0] ON person TYPE datetime;\nDEFINE FIELD metadata[1] ON person TYPE int;\n```\n\n----------------------------------------\n\nTITLE: Parsing URL Scheme in SurrealQL\nDESCRIPTION: This function extracts the scheme component from a valid URL. It returns the lowercase scheme name without the colon delimiter.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/parse.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nparse::url::scheme(string) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN parse::url::scheme(\"https://surrealdb.com:80/features?some=option#fragment\");\n\n'https'\n```\n\n----------------------------------------\n\nTITLE: FoundationDB Configuration Variables\nDESCRIPTION: HTML table structure defining FoundationDB-specific environment variables with their default values and configuration options.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/env.mdx#2025-04-16_snippet_4\n\nLANGUAGE: markup\nCODE:\n```\n<code>SURREAL_FOUNDATIONDB_TRANSACTION_MAX_RETRY_DELAY</code>\n```\n\n----------------------------------------\n\nTITLE: Selecting Records with Select<T> Method in SurrealDB .NET\nDESCRIPTION: Method for selecting all records or a specific record from a table. Supports generic type parameter for strong typing and accepts either table name or RecordId as arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/data-manipulation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Select all records from a table\nvar people = await db.Select<Person>(\"person\");\n\n// Select a specific record from a table\nvar person = await db.Select<Person>((\"person\", \"h5wxrf2ewk8xjxosxtyc\"));\nvar person = await db.Select<Person>(new StringRecordId(\"person:h5wxrf2ewk8xjxosxtyc\"));\n\n// Select a specific record from a table, given a non-string id\nvar person = await db.Select<Person>((\"person\", new Guid(\"8424486b-85b3-4448-ac8d-5d51083391c7\")));\n```\n\n----------------------------------------\n\nTITLE: Validating Multiple SurrealQL Files with Multiple Patterns\nDESCRIPTION: Command to validate multiple SurrealQL files using multiple specific paths and patterns.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/validate.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal validate index.surql schemas/*.surql queries/*.surql\n```\n\n----------------------------------------\n\nTITLE: Using SurrealKV with versioning in Rust SDK\nDESCRIPTION: This snippet shows how to create a new SurrealDB connection using SurrealKV with versioning enabled. It requires adding the 'surreal-kv' feature flag to the surrealdb dependency.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/new.mdx#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse surrealdb::engine::local::SurrealKv;\nuse surrealdb::Surreal;\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = Surreal::new::<SurrealKv>(\"path/to/database-folder\").versioned().await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Import Method Syntax for SurrealDB Rust SDK\nDESCRIPTION: Basic syntax declaration for the import method in SurrealDB Rust SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/import.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.import(source)\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Instance with Memory Storage\nDESCRIPTION: Command to start a SurrealDB instance in memory mode with root user credentials\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/connect-to-surrealdb-via-ngrok-tunnel.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start memory -A --user root --pass root\n```\n\n----------------------------------------\n\nTITLE: Illustrating SLEEP During Parallel Operations in SurrealQL\nDESCRIPTION: This complex example demonstrates the use of SLEEP statements in conjunction with other operations, particularly during the creation of a concurrent index. It shows how SLEEP does not interfere with background operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/sleep.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nCREATE |user:50000| SET name = id.id() RETURN NONE;\nDEFINE INDEX unique_name ON TABLE user FIELDS name UNIQUE CONCURRENTLY;\nINFO FOR INDEX unique_name ON TABLE user;\nSLEEP 50ms;\nINFO FOR INDEX unique_name ON TABLE user;\nSLEEP 50ms;\nINFO FOR INDEX unique_name ON TABLE user;\nSLEEP 50ms;\nINFO FOR INDEX unique_name ON TABLE user;\n```\n\n----------------------------------------\n\nTITLE: Deploying SurrealDB Instance\nDESCRIPTION: Final command to deploy the configured SurrealDB instance to Fly.io.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/fly.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: GraphQL Not Configured Error Response\nDESCRIPTION: Shows the error response when attempting to access GraphQL endpoint without configuration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\n{\n  \"error\": \"NotConfigured: GraphQL endpoint is not configured. Please define the GraphQL configuration using DEFINE CONFIG GRAPHQL.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Info Method Syntax in SurrealDB PHP SDK\nDESCRIPTION: This snippet shows the syntax for the info() method in the SurrealDB PHP SDK. The method is called on the database object and returns information about the authenticated user.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/info.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->info()\n```\n\n----------------------------------------\n\nTITLE: Advanced URL Intent with Parameters for Surrealist Web App\nDESCRIPTION: An example of an advanced intent that contains additional arguments, showing how to open the settings page and switch to the appearance tab.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/advanced-topics/intents.mdx#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://surrealist.app/?intent=open-settings:tab=appearance\n```\n\n----------------------------------------\n\nTITLE: Defining Run Method Syntax in PHP for SurrealDB SDK\nDESCRIPTION: This snippet shows the syntax for the 'run' method in the SurrealDB PHP SDK. It takes three parameters: the function name, an optional version, and optional parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/run.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->run($function, $version, $params);\n```\n\n----------------------------------------\n\nTITLE: Creating SurrealDB Deployment Directory\nDESCRIPTION: Commands to create and navigate to deployment directory, with options for different operating systems to create a Dockerfile.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/fly.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir surrealdb-deployment && cd surrealdb-deployment\n## Uncomment the below line for macOS or Linux\n# nano Dockerfile\n## Uncomment the below line for Windows\n# notepad Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Descending Sort Shorthand in SurrealDB\nDESCRIPTION: The array::sort::desc function is a convenience function to sort an array in descending order.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_50\n\nLANGUAGE: surql\nCODE:\n```\narray::sort::desc(array) -> array\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::sort::desc([ 1, 2, 1, null, \"something\", 3, 3, 4, 0 ]);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Surreal Cloud with PHP SDK\nDESCRIPTION: Example of connecting to a Surreal Cloud instance using the PHP SDK. This code shows how to establish a connection with namespace and database parameters and authenticate with root user credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-cloud/connect/sdk.mdx#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndb = new Surreal();\n\n$db->connect(\"wss://cloud-docs-068rp16e0hsnl62vgooa7omjks.aws-euw1.staging.surrealdb.cloud/rpc\", [\n    \"namespace\" => \"Cloud Namespace\",\n    \"database\" => \"Cloud Database\",\n    \"versionCheck\" => false // <-- optional ( default: true )\n]);\n\n$db->signin([\n   \"username\" => \"<created root user>\",\n   \"password\" => \"<created root password>\"\n]);\n```\n\n----------------------------------------\n\nTITLE: Loading SurrealML Files in Rust\nDESCRIPTION: Rust code demonstrating how to load SurrealML files either from a file path or from bytes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/storage.mdx#2025-04-16_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nlet new_file = SurMlFile::from_file(\"./stash/test.surml\").unwrap();\nlet file_from_bytes = SurMlFile::from_bytes(surml_file.to_bytes()).unwrap();\n```\n\n----------------------------------------\n\nTITLE: Defining Import Method Syntax in TypeScript\nDESCRIPTION: This snippet shows the method syntax for the import function in the SurrealDB JavaScript SDK. It takes a string parameter 'data' and is called on the database instance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/import.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.import(data: string)\n```\n\n----------------------------------------\n\nTITLE: Installation UI Component Implementation\nDESCRIPTION: JSX implementation of the installation options interface showing OS choices using IconBox components\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Boxes wider columns={3} class=\"pt-2\">\n\t<IconBox\n\t\ttitle=\"MacOS\"\n\t\thref=\"/docs/surrealdb/installation/macos\"\n\t\ticon={{ light: AppleLightLogo, dark: AppleDarkLogo }}\n\t/>\n\t<IconBox\n\t\ttitle=\"Windows\"\n\t\thref=\"/docs/surrealdb/installation/windows\"\n\t\ticon={{ light: WindowsLightLogo, dark: WindowsDarkLogo }}\n\t/>\n\t<IconBox\n\t\ttitle=\"Linux\"\n\t\thref=\"/docs/surrealdb/installation/linux\"\n\t\ticon={{ light: LinuxLightLogo, dark: LinuxDarkLogo }}\n\t/>\n</Boxes>\n```\n\n----------------------------------------\n\nTITLE: Using math::mode Function in SurrealQL\nDESCRIPTION: Returns the most frequent value in a numeric array. In case of ties, returns the highest value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_20\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::mode([ 1, 40, 60, 10, 2, 901 ]);\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Modal in Surrealist\nDESCRIPTION: Shows how to open the search modal in Surrealist using keyboard shortcuts. This modal provides access to various features and shortcuts.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/advanced-topics/search-and-shortcuts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSurrealist offers a range of shortcuts to help you navigate the interface more efficiently. You can find a list of all available shortcuts by pressing `Ctrl + K` or `Cmd + K` on your keyboard.\n```\n\n----------------------------------------\n\nTITLE: Kill Live Query Response in SurrealDB WebSocket API\nDESCRIPTION: The response to a kill request, confirming that the live query has been terminated. The result is null when the operation succeeds.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Using math::trimean Function in SurrealQL\nDESCRIPTION: Calculates the trimean of values in a numeric array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_39\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::trimean([ 1, 40, 60, 10, 2, 901 ]);\n```\n\n----------------------------------------\n\nTITLE: LiveQuery Method Signature in C#\nDESCRIPTION: Method signature showing the LiveQuery generic method that initiates a live query from a SurrealQL statement. The method accepts a SQL query string and an optional cancellation token.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/live_query.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.LiveQuery<T>(sql)\n```\n\n----------------------------------------\n\nTITLE: Base64 Decode Verification Example\nDESCRIPTION: Example demonstrating verification of decoded value against original input.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/encoding.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nRETURN encoding::base64::decode(\"aGVsbG8\") = <bytes>\"hello\";\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: LIMIT Clause Syntax in SurrealQL\nDESCRIPTION: The formal syntax for the LIMIT clause in SurrealQL. The clause can limit the number of records returned and optionally start from a specific position (with START parameter).\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/clauses/limit.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nLIMIT @number [START @start 0]\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Access in SurrealDB (v2.x)\nDESCRIPTION: This snippet demonstrates how to define authentication access for a SurrealDB database using the query method in the JavaScript SDK. It sets up record-based authentication with signup and signin procedures.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/handling-authentication.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst authentication = await db.query(\n\" DEFINE ACCESS account ON DATABASE TYPE RECORD\n\tSIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\n\tSIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )\n\tDURATION FOR TOKEN 15m, FOR SESSION 12h; \"\n);\n```\n\n----------------------------------------\n\nTITLE: Volume Mount Configuration\nDESCRIPTION: Configuration snippet for fly.toml to mount the persistent storage volume to the instance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/fly.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n[mounts]\nsource=\"data\"\ndestination=\"/data\"\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Version Method Syntax in Rust\nDESCRIPTION: Basic syntax for calling the version() method on a SurrealDB instance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/version.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.version()\n```\n\n----------------------------------------\n\nTITLE: Deploying TiDB Operator\nDESCRIPTION: Steps to install and verify TiDB operator using Helm and kubectl\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/kubernetes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f https://raw.githubusercontent.com/pingcap/tidb-operator/v1.4.5/manifests/crd.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add pingcap https://charts.pingcap.org\nhelm repo update\nhelm install \\\n\t-n tidb-operator \\\n  --create-namespace \\\n\ttidb-operator \\\n\tpingcap/tidb-operator \\\n\t--version v1.4.5\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods --namespace tidb-operator -l app.kubernetes.io/instance=tidb-operator\n```\n\n----------------------------------------\n\nTITLE: Working with Non-String RecordId\nDESCRIPTION: Shows how to handle RecordId with numeric identifiers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/data-types.mdx#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar rid = new RecordId(\"table\", 42);\nstring table = rid.Table; // \"table\"\nint id = rid.DeserializeId<int>(); // 42\n```\n\n----------------------------------------\n\nTITLE: Accessing the Last Element of an Array in SurrealQL\nDESCRIPTION: Demonstrates using the dollar sign bracket notation ([$]) to access the last element in an array and retrieve its score property.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\nSELECT results[$].score FROM student;\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Headers Configuration\nDESCRIPTION: JSON headers configuration for HTTP requests to SurrealDB\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/working-with-surrealdb-over-http-via-postman.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nAccept:application/json\nNS:{{namespace}}\nDB:{{database}}\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Server\nDESCRIPTION: Command to start a SurrealDB instance with root credentials\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/live.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB Golang SDK using go get\nDESCRIPTION: Command to install the SurrealDB Golang SDK from pkg.go.dev using go get. This is the primary method to add the SDK as a dependency to your Go project.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/installation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/surrealdb/surrealdb.go\n```\n\n----------------------------------------\n\nTITLE: Upserting Records in SurrealDB with C#\nDESCRIPTION: Creates or updates a specific record in the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\ndb.Upsert<T>(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Defining Insert Method Syntax in PHP for SurrealDB\nDESCRIPTION: Defines the syntax for the insert method in the SurrealDB PHP SDK. It takes two arguments: $thing (the table name or RecordId) and $data (the record(s) to insert).\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/insert.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->insert($thing, $data)\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for SurrealDB Export Command\nDESCRIPTION: This command displays the help information and usage instructions for the 'surreal export' command, providing details on available options and arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/export.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsurreal export --help\n```\n\n----------------------------------------\n\nTITLE: Hieroglyphs to English Mapping with Mapper Filter in SurrealQL\nDESCRIPTION: Demonstrates using the mapper filter to translate hieroglyphic symbols to English descriptions using an external mapping file.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_30\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER mapper TOKENIZERS blank FILTERS mapper('mapper.txt');\nsearch::analyze(\"mapper\", \"𓀀 𓁦\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Geometry Types in TypeScript\nDESCRIPTION: Signatures for various geometry types including Polygon, MultiPoint, MultiLine, MultiPolygon, and Collection classes\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/data-types.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew GeometryPolygon([GeometryLine, ...GeometryLine[]]);\nnew GeometryMultiPoint([GeometryPoint, ...GeometryPoint[]]);\nnew GeometryMultiLine([GeometryLine, ...GeometryLine[]]);\nnew GeometryMultiPolygon([GeometryPolygon, ...GeometryPolygon[]]);\nnew GeometryCollection([Geometry, ...Geometry[]]);\n```\n\n----------------------------------------\n\nTITLE: Excluding Functions from GraphQL Configuration in SurrealDB\nDESCRIPTION: Demonstrates how to configure GraphQL to exclude specific functions from the API.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE CONFIG GRAPHQL FUNCTIONS EXCLUDE [debugFunction, testFunction];\n```\n\n----------------------------------------\n\nTITLE: Checking SurrealDB Version with Short Flag\nDESCRIPTION: This command uses the short flag -V to display the version of the installed SurrealDB command-line tool. This feature is available since version 1.2.0.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/version.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal -V\n```\n\n----------------------------------------\n\nTITLE: Authenticating with JWT in SurrealDB Rust SDK\nDESCRIPTION: Demonstrates how to authenticate the current connection using a JWT token with the authenticate() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\ndb.authenticate(jwt).await?\n```\n\n----------------------------------------\n\nTITLE: Basic Export Method Syntax in Rust\nDESCRIPTION: Simple method signature showing how to call the export method on a database instance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/export.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.export(target)\n```\n\n----------------------------------------\n\nTITLE: Generating UUID v7 in SurrealQL\nDESCRIPTION: Shows how to use the rand::uuid::v7 function to generate a random Version 7 UUID. It includes an example of using the function in a RETURN statement with the expected output.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/rand.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nRETURN rand::uuid::v7();\n\n[u'0190d9df-c6cd-7e8a-aae2-aa3a162507ed']\n```\n\n----------------------------------------\n\nTITLE: Query Response for Traditional Road Information\nDESCRIPTION: Shows the response from the traditional query for road information, containing details about the connection between city:3 and city:4, including distance, type, and edge ID.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_48\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tfourth_city: [\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tdistance: 80,\n\t\t\t\t\tid: to:sw2pery99jomfhibzfrh,\n\t\t\t\t\tin: city:3,\n\t\t\t\t\tout: city:4,\n\t\t\t\t\ttype: 'train'\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Merging Records in SurrealDB using .NET SDK\nDESCRIPTION: Modifies all records in a table or a specific record by merging the current document/record data with the specified data. It requires a table name or a specific RecordId to merge, and optionally the data to merge.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/data-manipulation.mdx#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Merge<T>(resource, data)\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Only changes the fields specified in the merge object\nvar merge = new PersonMerge\n{\n    Id = (\"person\", \"tobie\"),\n    Settings = new Settings\n    {\n        Active = true,\n        Marketing = false,\n    },\n};\nvar result = await db.Merge<PersonMerge, Person>(merge);\n\n// Only changes the fields specified in the Dictionary\nvar data = new Dictionary<string, object>\n{\n    { \"tags\", new List<string> { \"developer\", \"engineer\" } }\n};\n\nvar result = await db.Merge<Person>((\"person\", \"tobie\"), data);\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Only changes the fields specified in the merge object\nvar merge = new PersonMerge\n{\n    Settings = new Settings\n    {\n        Active = true,\n        Marketing = false,\n    },\n};\nvar result = await db.Merge<PersonMerge, Person>(\"person\", merge);\n\n// Only changes the fields specified in the Dictionary\nvar data = new Dictionary<string, object>\n{\n    { \"tags\", new List<string> { \"developer\", \"engineer\" } }\n};\n\nvar result = await db.Merge<Person>(\"person\", data);\n```\n\n----------------------------------------\n\nTITLE: SurrealKV Configuration Variables\nDESCRIPTION: HTML table structure defining SurrealKV-specific environment variables for data synchronization and durability settings.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/env.mdx#2025-04-16_snippet_6\n\nLANGUAGE: markup\nCODE:\n```\n<code>SURREAL_SURREALKV_SYNC_DATA</code>\n```\n\n----------------------------------------\n\nTITLE: SurrealML Export Command Help Output\nDESCRIPTION: This snippet shows the detailed help output for the 'surreal ml export' command, including usage syntax, available arguments, options, and their descriptions. It provides comprehensive information on how to use the command for exporting SurrealML models.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/ml/export.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nExport a SurrealML model from an existing database\n\nUsage: surreal ml export [OPTIONS] --name <NAME> --version <VERSION> --namespace <NAMESPACE> --database <DATABASE> [FILE]\n\nArguments:\n  [FILE]  Path to the SurrealML file to export. Use dash - to write into stdout. [default: -]\n\nOptions:\n      --name <NAME>              The name of the model [env: SURREAL_NAME=]\n      --version <VERSION>        The version of the model [env: SURREAL_VERSION=]\n  -e, --endpoint <ENDPOINT>      Remote database server url to connect to [default: ws://localhost:8000] [aliases: conn]\n  -u, --username <USERNAME>      Database authentication username to use when connecting [env: SURREAL_USER=] [aliases: user]\n  -p, --password <PASSWORD>      Database authentication password to use when connecting [env: SURREAL_PASS=] [aliases: pass]\n    -t, --token <TOKEN>            Authentication token in JWT format to use when connecting [env: SURREAL_TOKEN=]\n      --auth-level <AUTH_LEVEL>  Authentication level to use when connecting\n                                 Must be enabled in the server and uses the values of '--namespace' and '--database'\n                                  [env: SURREAL_AUTH_LEVEL=] [default: root] [possible values: root, namespace, ns, database, db]\n      --namespace <NAMESPACE>    The namespace selected for the operation [env: SURREAL_NAMESPACE=] [aliases: ns]\n      --database <DATABASE>      The database selected for the operation [env: SURREAL_DATABASE=] [aliases: db]\n  -h, --help                     Print help\n```\n\n----------------------------------------\n\nTITLE: count() with Boolean Expression in RETURN Statement\nDESCRIPTION: Example showing count() function with a falsy boolean expression (10 > 15) in a RETURN statement, which returns 0.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/count.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nRETURN count(10 > 15);\n\n0\n```\n\n----------------------------------------\n\nTITLE: Providing Instructions for Token Renewal in SurrealDB\nDESCRIPTION: A function that returns instructions for generating a new authentication token when the current one expires. Instead of handling the token renewal directly, it provides a curl command example for users to follow.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n#[get(\"/new_token\")]\npub async fn get_new_token() -> String {\n    let command = r#\"curl -X POST -H \"Accept: application/json\" -d '{\"ns\":\"namespace\",\"db\":\"database\",\"ac\":\"account\",\"user\":\"your_username\",\"pass\":\"your_password\"}' http://localhost:8000/signin\"#;\n    format!(\"Need a new token? Use this command:\\n\\n{command}\\n\\nThen log in with surreal sql --namespace namespace --database database --pretty --token YOUR_TOKEN_HERE\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SurrealDB Instance in PHP\nDESCRIPTION: Creates a new instance of the Surreal class to interact with the SurrealDB database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/core/initialization.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$db = new Surreal();\n```\n\n----------------------------------------\n\nTITLE: Rendering Cloud Signup Button with Icon in JSX\nDESCRIPTION: JSX code snippet showing how to render a signup button for Surreal Cloud with an animated arrow icon using the astro-icon component library.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-cloud/getting-started/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<a\n\thref=\"https://surrealist.app/cloud\"\n\tclass=\"gradient-button group mt-2 mb-6\"\n>\n\tSign up for Surreal Cloud\n\t<Icon name=\"fa6-solid:arrow-right\" class=\"w-4 transition-transform group-hover:translate-x-1\" />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Creating Objects with Non-ASCII Field Names\nDESCRIPTION: Demonstrates how to create standalone objects with non-ASCII field names using string literals.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/objects.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM ONLY {\n    \"mi_nómine\": \"name\"\n};\n```\n\n----------------------------------------\n\nTITLE: Using math::neg_inf Constant in SurrealQL\nDESCRIPTION: Returns the negative infinity constant.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_22\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::neg_inf;\n```\n\n----------------------------------------\n\nTITLE: Defining Not Function in SurrealQL\nDESCRIPTION: API definition of the 'not' function in SurrealQL. It takes any value as input and returns a boolean.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/not.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nnot(any) -> bool\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Status with PHP SDK Method Syntax\nDESCRIPTION: Basic syntax for the status() method in the SurrealDB PHP SDK. This method is called on a database connection instance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/status.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->status();\n```\n\n----------------------------------------\n\nTITLE: Output of Finnish Snowball Filter\nDESCRIPTION: The result of analyzing different forms of the Finnish word 'talo' (house), demonstrating how the snowball filter reduces all declined forms to the root word.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_25\n\nLANGUAGE: surql\nCODE:\n```\n['talo', 'talo', 'talo', 'talo', 'talo', 'talo', 'talo', 'talo', 'talo', 'talo', 'talo', 'talo', 'talot', 'talo']\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Features with Command Line Flag in SurrealDB\nDESCRIPTION: This command shows how to enable experimental features using the '--allow-experimental' flag with a connection string when launching the SurrealDB SQL interface.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/sql.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql -e [CONNECTION_STRING] --allow-experimental record_references \n```\n\n----------------------------------------\n\nTITLE: Converting Geometry to JSON in PHP for SurrealDB\nDESCRIPTION: Demonstrates how to convert a Geometry object (in this case, a GeometryLine) to its GeoJSON representation using the toJson() method or json_encode().\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/data-types.mdx#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$line = new GeometryLine([\n    new GeometryPoint([1, 2]),\n    new GeometryPoint([3, 4]),\n]);\n\n$line->toJson();                    // '{ type: \"LineString\", coordinates: [ [1, 2], [3, 4] ] }'\njson_encode($line);                 // '{ type: \"LineString\", coordinates: [ [1, 2], [3, 4] ] }'\n```\n\n----------------------------------------\n\nTITLE: Unsafe Query Construction in Rust (Not Recommended)\nDESCRIPTION: Demonstrates an unsafe way to construct queries with user input, which should be avoided due to potential SQL injection vulnerabilities.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/query.mdx#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet bad_sql = format!(\"\\nCREATE {user_input};\\nSELECT * FROM {user_input};\");\n```\n\n----------------------------------------\n\nTITLE: Comparing Geometry Objects in Python\nDESCRIPTION: Examples of comparing different Geometry objects using the is() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/data-types.mdx#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npoint1 = GeometryPoint([1, 2])\npoint2 = GeometryPoint([3, 4])\nline = GeometryLine([point1, point2])\n\npoint1.is(point1)      # true\npoint1.is(point2)      # false\npoint1.is(line)        # false\n\n# Checks the inner values, does not need to be the same instance\nduplicate = GeometryPoint([1, 2])\npoint1.is(duplicate)   # true\n```\n\n----------------------------------------\n\nTITLE: Loading ML Models with Python in SurrealML\nDESCRIPTION: Python code for loading a previously saved .surml file, specifying the engine type.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/storage.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnew_file = SurMlFile.load(path=\"./linear.surml\", engine=Engine.SKLEARN)\n```\n\n----------------------------------------\n\nTITLE: Unsetting Parameters in SurrealDB .NET SDK\nDESCRIPTION: This method removes a parameter for the current connection. It takes a key as a required argument, with an optional cancellationToken for asynchronous operation cancellation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/parameters.mdx#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Unset(key)\n```\n\n----------------------------------------\n\nTITLE: Checking SurrealDB Version with Long Flag\nDESCRIPTION: This command uses the long flag --version to display the version of the installed SurrealDB command-line tool.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/version.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal --version\n```\n\n----------------------------------------\n\nTITLE: Creating a MultiLineString Geometry in SurrealQL\nDESCRIPTION: This snippet shows how to update a record with a MultiLineString geometry for storing multiple lines in a single value. Each line is defined as a series of coordinate pairs within the coordinates array.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/geometries.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE travel:yellowstone SET routes = {\n\ttype: \"MultiLineString\",\n\tcoordinates: [\n\t\t[ [10.0, 11.2], [10.5, 11.9] ],\n\t\t[ [11.0, 12.2], [11.5, 12.9], [12.0, 13.0] ]\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TiDB Cluster\nDESCRIPTION: Commands to create and verify TiDB cluster deployment\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/kubernetes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns tikv\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -n tikv -f https://raw.githubusercontent.com/pingcap/tidb-operator/v1.4.5/examples/basic/tidb-cluster.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get -n tikv tidbcluster\n```\n\n----------------------------------------\n\nTITLE: Wait For Method Syntax in Rust\nDESCRIPTION: Basic syntax for using the wait_for() method in the SurrealDB Rust SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/wait_for.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.wait_for(event)\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Geometry Point in SurrealDB\nDESCRIPTION: The type::point function converts values into geometry points. It accepts array or point as input.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\nRETURN type::point([ 51.509865, -0.118092 ]);\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Record IDs\nDESCRIPTION: Shows how to query records with nested IDs and access related data from connected tables.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/time-series.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nSELECT id, id[2].coordinates AS sensor_coordinates\nFROM sensor_readings:[\n\t'2024-08-13T03:32:19.109Z',\n\tlocation:Longleat_House,\n\tsensor:ARF8394AAA,\n\t28.4,\n\t55\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Sleep Function Usage in SurrealQL\nDESCRIPTION: Examples of using the sleep function with RETURN statements to introduce delays of different durations (1 second and 500 milliseconds).\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/sleep.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nRETURN sleep(1s);\nRETURN sleep(500ms);\n```\n\n----------------------------------------\n\nTITLE: Defining update Method Syntax in TypeScript\nDESCRIPTION: This snippet shows the method signature for the `.update()` function in the SurrealDB JavaScript SDK. It takes a 'thing' (table name or RecordId) and optional 'data' as arguments, and returns a generic type.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.update<T,U>(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Type Casting in SurrealQL\nDESCRIPTION: Examples showing error behavior when using type casting with incorrect input formats in SurrealQL. Type casting will generate runtime errors for invalid inputs.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/strings.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\n// Change _ to - in both examples to fix the input\nRETURN <uuid>\"018f0e6a_9b95-7ecc-8a38-aea7bf3627dd\";\nRETURN <datetime>\"2024_06-06T12:00:00Z\";\n```\n\n----------------------------------------\n\nTITLE: URL Intent for Surrealist Desktop Application\nDESCRIPTION: An example of using the surrealist URI protocol to trigger an intent in the desktop application, specifically to toggle database serving functionality.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/advanced-topics/intents.mdx#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsurrealist://?intent=toggle-serving\n```\n\n----------------------------------------\n\nTITLE: Navigation Button with Icon in JSX\nDESCRIPTION: JSX code for a styled navigation button that links to the Surrealist installation guide. Includes hover animation effects for the arrow icon using Tailwind CSS classes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<a\n\thref=\"/docs/surrealist/installation\"\n\tclass=\"gradient-button group mt-2\"\n>\n\tInstallation guide\n\t<Icon name=\"fa6-solid:arrow-right\" class=\"w-4 transition-transform group-hover:translate-x-1\" />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Installing RocksDB Provider Package\nDESCRIPTION: Command to add the SurrealDB RocksDB provider package to a .NET project\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/dotnet.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package SurrealDb.Embedded.RocksDb\n```\n\n----------------------------------------\n\nTITLE: Adding Required Dependencies for SurrealDB in Rust\nDESCRIPTION: Commands for adding the necessary additional dependencies when working with SurrealDB in Rust, including serde for serialization and tokio for async runtime support.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo add serde --features derive\ncargo add tokio --features macros,rt-multi-thread\n```\n\n----------------------------------------\n\nTITLE: Saving ML Models with Python in SurrealML\nDESCRIPTION: Python code for saving a trained model to a .surml file, including setting the model name, inputs, and engine type.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/storage.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfile = SurMlFile(\n\tmodel=model, # the trained model object\n\tname=\"house-price-prediction\",\n\tinputs=HOUSE_LINEAR[\"inputs\"],\n\tengine=Engine.SKLEARN # change to the pytorch version is storing a pytorch model\n)\n\nfile.add_version(version=\"0.0.1\")\nfile.save(path=\"./linear.surml\")\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic API Paths in SurrealQL\nDESCRIPTION: Example of creating an API endpoint with a dynamic path segment, allowing for flexible URL matching.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/api.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE API OVERWRITE \"/test/:anything_goes\" FOR get THEN {\n    RETURN {\n        body: {\n            some: \"data\"\n        }\n    }\n};\n\napi::invoke(\"/test/this_matches\");\napi::invoke(\"/test/same_here\");\napi::invoke(\"/test/but/this/wont/match\");\n```\n\n----------------------------------------\n\nTITLE: DROP Table Definition in SurrealQL\nDESCRIPTION: Example of defining a DROP table that disallows record creation and updates\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/table.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE reading DROP;\n```\n\n----------------------------------------\n\nTITLE: Implementing SurrealDB Desktop Application with Rust and EGUI\nDESCRIPTION: A complete implementation of a desktop application that interfaces with SurrealDB. The application provides functionality for user management, CRUD operations on person records, and executing raw queries. It uses channels for async communication between the GUI and database operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\nuse std::{\\n    ops::Deref,\\n    sync::mpsc::{channel, Receiver, Sender},\\n};\\n\\nuse egui::RichText;\\nuse surrealdb::{\\n    engine::remote::ws::{Client, Ws},\\n    opt::auth::{Record, Root},\\n    RecordId, RecordIdKey, Surreal,\\n};\\n\\nuse anyhow::Error;\\nuse faker_rand::en_us::names::FirstName;\\nuse serde::{Deserialize, Serialize};\\n\\nconst PERSON: &str = \"person\";\\n\\n#[derive(Serialize, Deserialize)]\\nstruct Params<'a> {\\n    name: &'a str,\\n    pass: &'a str,\\n}\\n\\n#[derive(Serialize, Deserialize, Clone, Default)]\\npub struct PersonData {\\n    name: String,\\n    id: Option<String>,\\n}\\n\\n#[derive(Serialize, Deserialize, Debug)]\\npub struct Person {\\n    name: String,\\n    id: RecordId,\\n    created_by: Option<RecordId>,\\n}\\n\\n#[derive(Debug, Clone)]\\nenum Command {\\n    CreatePerson(String),\\n    DeletePerson(String),\\n    ListPeople,\\n    RawQuery(String),\\n    SignUp,\\n    SignIn(String),\\n    SignInRoot,\\n    Session,\\n}\\n\\nstruct Database {\\n    client: Surreal<Client>,\\n    command_receiver: Receiver<Command>,\\n    response_sender: Sender<String>,\\n}\\n\\nimpl Deref for Database {\\n    type Target = Surreal<Client>;\\n\\n    fn deref(&self) -> &Self::Target {\\n        &self.client\\n    }\\n}\\n\\ntrait StringIt {\\n    fn string(self) -> Result<String, Error>;\\n}\\n\\nimpl StringIt for Option<Person> {\\n    fn string(self) -> Result<String, Error> {\\n        match self {\\n            Some(t) => Ok(format!(\"{t:?}\")),\\n            None => Ok(\"[]\".into()),\\n        }\\n    }\\n}\\n\\nimpl Database {\\n    async fn handle_command(&self, command: Command) -> Result<String, Error> {\\n        match command {\\n            Command::CreatePerson(s) => {\\n                let person_data: PersonData = serde_json::from_str(&s)?;\\n                self.create::<Option<Person>>(PERSON)\\n                    .content(person_data)\\n                    .await?\\n                    .string()\\n            }\\n            Command::DeletePerson(s) => {\\n                if s.is_empty() {\\n                    let res: Vec<Person> = self.delete(PERSON).await?;\\n                    Ok(format!(\"{res:?}\"))\\n                } else {\\n                    let key = RecordIdKey::from(s);\\n                    self.delete::<Option<Person>>((PERSON, key)).await?.string()\\n                }\\n            }\\n            Command::ListPeople => {\\n                let person: Vec<Person> = self.select(PERSON).await?;\\n                Ok(format!(\"{person:?}\"))\\n            }\\n            Command::SignUp => {\\n                let name = rand::random::<FirstName>().to_string();\\n                let pass = rand::random::<FirstName>().to_string();\\n                self.signup(Record {\\n                    access: \"account\",\\n                    namespace: \"test\",\\n                    database: \"test\",\\n                    params: Params {\\n                        name: &name,\\n                        pass: &pass,\\n                    },\\n                })\\n                .await?;\\n                Ok(format!(\\n                    \"New user created!\\n\\n{{ \\\"name\\\": \\\"{name}\\\", \\n \\\"pass\\\": \\\"{pass}\\\" }}\"\\n                ))\\n            }\\n            Command::RawQuery(q) => match self.query(q).await {\\n                Ok(ok) => Ok(format!(\"{ok:?}\")),\\n                Err(e) => Ok(e.to_string()),\\n            },\\n            Command::SignIn(s) => {\\n                let Ok(Params { name, pass }) = serde_json::from_str::<Params>(&s) else {\\n                    return Ok(\"Params don't work!\".to_string());\\n                };\\n                self.signin(Record {\\n                    access: \"account\",\\n                    namespace: \"test\",\\n                    database: \"test\",\\n                    params: Params { name, pass },\\n                })\\n                .await?;\\n                Ok(format!(\"Signed in as {name}!\"))\\n            }\\n            Command::SignInRoot => {\\n                self.signin(Root {\\n                    username: \"root\",\\n                    password: \"root\",\\n                })\\n                .await?;\\n                Ok(format!(\"Back to root!\"))\\n            }\\n            Command::Session => Ok(self\\n                .query(\"RETURN <string>$session\")\\n                .await?\\n                .take::<Option<String>>(0)?\\n                .unwrap_or(\"No session data found!\".into())),\\n        }\\n    }\\n}\\n\\nstruct SurrealDbApp {\\n    input: String,\\n    results: String,\\n    command_sender: Sender<Command>,\\n    response_receiver: Receiver<String>,\\n}\\n\\nimpl SurrealDbApp {\\n    fn send(&mut self, command: Command) {\\n        if let Err(e) = self.command_sender.send(command) {\\n            self.results = e.to_string()\\n        }\\n    }\\n}\\n\\nimpl eframe::App for SurrealDbApp {\\n    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {\\n        egui::SidePanel::left(\"left\").show(ctx, |ui| {\\n            if let Ok(response) = self.response_receiver.try_recv() {\\n                self.results = response;\\n            }\\n            if ui.button(\"Create person\").clicked() {\\n                self.send(Command::CreatePerson(self.input.clone()))\\n            };\\n            if ui.button(\"Delete person\").clicked() {\\n                self.send(Command::DeletePerson(self.input.clone()))\\n            }\\n            if ui.button(\"List people\").clicked() {\\n                self.send(Command::ListPeople)\\n            }\\n            if ui.button(\"Session data\").clicked() {\\n                self.send(Command::Session)\\n            }\\n            if ui.button(\"New user\").clicked() {\\n                self.send(Command::SignUp)\\n            }\\n            if ui.button(\"Sign in as record user\").clicked() {\\n                self.send(Command::SignIn(self.input.clone()));\\n            }\\n            if ui.button(\"Sign in as root\").clicked() {\\n                self.send(Command::SignInRoot)\\n            }\\n            if ui.button(\"Raw query\").clicked() {\\n                self.send(Command::RawQuery(self.input.clone()))\\n            }\\n        });\\n        egui::CentralPanel::default().show(ctx, |ui| {\\n            ui.label(RichText::new(\"Input:\").heading());\\n            ui.text_edit_multiline(&mut self.input);\\n        });\\n        egui::SidePanel::right(\"right\").show(ctx, |ui| {\\n            egui::ScrollArea::vertical().show(ui, |ui| {\\n                ui.label(RichText::new(\"Results:\").heading());\\n                ui.text_edit_multiline(&mut self.results);\\n            });\\n        });\\n    }\\n}\\n\\nfn main() -> Result<(), Error> {\\n    let (command_sender, command_receiver) = channel();\\n    let (response_sender, response_receiver) = channel();\\n\\n    std::thread::spawn(|| -> Result<(), Error> {\\n        let rt = tokio::runtime::Runtime::new()?;\\n\\n        rt.block_on(async {\\n\\n            let client = Surreal::new::<Ws>(\"localhost:8000\").await?;\\n      \\n            let db = Database {\\n                client,\\n                command_receiver,\\n                response_sender\\n            };\\n\\n            db.signin(Root {\\n                username: \"root\",\\n                password: \"root\",\\n            })\\n            .await?;\\n\\n            db.use_ns(\"test\").use_db(\"test\").await?;\\n\\n            db.query(\\n                \"    DEFINE TABLE person SCHEMALESS\\n                PERMISSIONS FOR\\n                    CREATE, SELECT WHERE $auth,\\n                    FOR UPDATE, DELETE WHERE created_by = $auth;\\n            DEFINE FIELD name ON TABLE person TYPE string;\\n            DEFINE FIELD created_by ON TABLE person VALUE $auth READONLY;\\n\\n            DEFINE INDEX unique_name ON TABLE user FIELDS name UNIQUE;\\n            DEFINE ACCESS account ON DATABASE TYPE RECORD\\n            SIGNUP ( CREATE user SET name = $name, pass = crypto::argon2::generate($pass) )\\n            SIGNIN ( SELECT * FROM user WHERE name = $name AND crypto::argon2::compare(pass, $pass) )\\n            DURATION FOR TOKEN 15m, FOR SESSION 12h\\n        ;\",\\n            )\\n            .await?;\\n\\n        loop {\\n            if let Ok(command) = db.command_receiver.try_recv() {\\n                match db.handle_command(command).await {\\n                    Ok(s) => db.response_sender.send(s)?,\\n                    Err(e) => db.response_sender.send(e.to_string())?\\n                }\\n            }\\n        }\\n        })\\n    });\\n\\n    let app = SurrealDbApp {\\n        input: String::new(),\\n        results: String::new(),\\n        command_sender,\\n        response_receiver,\\n    };\\n\\n    let native_options = eframe::NativeOptions::default();\\n    let _ = eframe::run_native(\\n        \"SurrealDB App\",\\n        native_options,\\n        Box::new(|_cc| Ok(Box::new(app))),\\n    );\\n    Ok(())\\n}\n```\n\n----------------------------------------\n\nTITLE: User Information Queries\nDESCRIPTION: Examples of querying user information at different levels (root, namespace, database).\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/info.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nINFO FOR USER root ON ROOT;\nINFO FOR USER ns_user ON NAMESPACE;\nINFO FOR USER db_user ON DATABASE;\n\n```\n\nLANGUAGE: surql\nCODE:\n```\nINFO FOR USER db_user ON DATABASE;\nINFO FOR USER db_user;\n```\n\nLANGUAGE: surql\nCODE:\n```\n\"DEFINE USER db_user ON DATABASE PASSHASH '$argon2id$v=19$m=19456,t=2,p=1$S8WJ88AnJwWah2VjqnmnoA$OJcQs9SHC5R5q3kOimiKsV5fIUpwZiax3RUcW8VQupk' ROLES OWNER DURATION FOR TOKEN 1h, FOR SESSION NONE\"\n```\n\n----------------------------------------\n\nTITLE: Random ID Creation Output in SurrealQL\nDESCRIPTION: Shows the output of creating a record with a randomly generated ID, displaying the table name followed by a 20-character random identifier.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tid: company:ezs644u19mae2p68404j\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: SurrealQL Test Queries\nDESCRIPTION: SurrealQL queries to test the live query functionality by creating, updating, and deleting account records\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/live.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nFOR $_ IN 0..10 { CREATE account SET balance = 10 };\nUPDATE account SET balance += 1000;\nDELETE account;\n```\n\n----------------------------------------\n\nTITLE: Starting Server with Custom Port\nDESCRIPTION: Command to start SurrealDB on a specific port (8080) with root authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/file.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root --bind 0.0.0.0:8080 rocksdb://path/to/mydatabase\n```\n\n----------------------------------------\n\nTITLE: Defining application and database structs for SurrealDB GUI in Rust\nDESCRIPTION: Creates the main data structures for the application including the SurrealDbApp for the GUI, the Database struct for database operations, and the Command enum for communication between them.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nstruct SurrealDbApp {\n    input: String,\n    results: String,\n    command_sender: Sender<Command>,\n    response_receiver: Receiver<String>,\n}\n\nstruct Database {\n    client: Surreal<Client>,\n    command_receiver: Receiver<Command>,\n    response_sender: Sender<String>,\n}\n\n#[derive(Debug, Clone)]\nenum Command {\n    CreatePerson(String),\n    DeletePerson(String),\n    ListPeople,\n    RawQuery(String),\n    SignUp,\n    SignIn(String),\n    SignInRoot,\n    Session,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Compute Unit in Rust\nDESCRIPTION: Initializes a compute unit for model execution in Rust.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/computation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet compute_unit = ModelComputation {\n    surml_file: &mut new_file,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB using Scoop\nDESCRIPTION: This command installs SurrealDB using the Scoop package manager. It installs both the command-line tools and the SurrealDB server as a single executable.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/windows.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nscoop install surrealdb\n```\n\n----------------------------------------\n\nTITLE: Defining Export Method Syntax in PHP for SurrealDB SDK\nDESCRIPTION: This snippet shows the method signature for the export() function in the SurrealDB PHP SDK. It takes two required parameters: username and password for authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/export.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->export($username, $password);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Version Method in Golang\nDESCRIPTION: This example shows how to call the '.Version()' method and store the result in a variable. The version information is returned as a value that can be assigned to a variable for further use.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/version.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nversion := db.Version()\n```\n\n----------------------------------------\n\nTITLE: Generating Bcrypt Hashed Passwords in SurrealQL\nDESCRIPTION: Hashes and salts a password using the bcrypt hashing algorithm. Note that at this time, there is no way to customize the work factor for bcrypt.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/crypto.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\ncrypto::bcrypt::generate(string) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN crypto::bcrypt::generate(\"this is a strong password\");\n\n\"$2b$12$OD7hrr1Hycyk8NUwOekYY.cogCICpUnwNvDZ9NiC1qCPHzpVAQ9BO\"\n```\n\n----------------------------------------\n\nTITLE: Adjusting Editor View Size in Surrealist\nDESCRIPTION: Shows keyboard shortcuts for increasing and decreasing the view size of the editor in Surrealist.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/advanced-topics/search-and-shortcuts.mdx#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nIncrease the view size of your editor with `cmd + Option + +` or reduce with `cmd + Option + -`.\n```\n\n----------------------------------------\n\nTITLE: Complete Rust Implementation Example\nDESCRIPTION: Comprehensive example showing parameter setting and usage in queries, including struct definition, connection setup, and error handling.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/set.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::Serialize;\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::Surreal;\n\n#[derive(Debug, Serialize)]\nstruct Name<'a> {\n    first: &'a str,\n    last: &'a str,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = Surreal::new::<Ws>(\"127.0.0.1:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    // Assign the variable on the connection\n    db.set(\n        \"name\",\n        Name {\n            first: \"Tobie\",\n            last: \"Morgan Hitchcock\",\n        },\n    )\n    .await?;\n    // Use the variable in a subsequent query\n    let create = db.query(\"CREATE person SET name = $name\").await?;\n    dbg!(create);\n    // Use the variable in a subsequent query\n    let select = db\n        .query(\"SELECT * FROM person WHERE name.first = $name.first\")\n        .await?;\n    dbg!(select);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving SurrealML Files in Rust\nDESCRIPTION: Rust code for creating a SurrealML file by combining a header with model bytes and writing it to disk.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/storage.mdx#2025-04-16_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nlet surml_file = SurMlFile::new(header, model_bytes);\nsurml_file.write(\"./stash/test.surml\").unwrap();\n```\n\n----------------------------------------\n\nTITLE: Checking Database Status Example\nDESCRIPTION: Example showing how to check the database status and handle the response. Returns 200 if the database is running properly or 500 if the database is down or unreachable.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/status.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$status = $db->status();\necho \"The status code is: $status.\"; // 200 or 500\n```\n\n----------------------------------------\n\nTITLE: Help Command for SurrealDB Upgrade\nDESCRIPTION: Displays help information and usage instructions for the upgrade command\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/upgrade.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsurreal upgrade --help\n```\n\n----------------------------------------\n\nTITLE: Enabling SurrealDB Allocator Feature in Rust\nDESCRIPTION: Cargo.toml dependency configuration to enable the allocator feature for improved performance when using SurrealDB in Rust.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/performance-best-practices.mdx#2025-04-16_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nsurrealdb = { version = \"2\", features = [\"allocator\", \"storage-mem\", \"storage-surrealkv\", \"storage-rocksdb\", \"protocol-http\", \"protocol-ws\", \"rustls\"] }\n```\n\n----------------------------------------\n\nTITLE: Egyptian Hieroglyphs Mapper Configuration File\nDESCRIPTION: Example of a mapper configuration file that translates Egyptian hieroglyphs to descriptive English terms, demonstrating how the mapper can be used for any type of string mapping.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_29\n\nLANGUAGE: text\nCODE:\n```\nseated_man\t𓀀\nman_with_hand_to_mouth\t𓀁\nseated_woman\t𓁐\ngoddess_with_feather\t𓁦\n```\n\n----------------------------------------\n\nTITLE: Manual Record Creation Alternative\nDESCRIPTION: Shows the alternative approach using UPDATE statement requiring more manual work compared to UPSERT.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/upsert.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nIF (SELECT * FROM event_for:[time::now().format(\"%Y-%m-%d\")]).is_empty() {\n    CREATE event_for:[time::now().format(\"%Y-%m-%d\")] SET number = 1;\n} ELSE {\n    UPDATE event_for:[time::now().format(\"%Y-%m-%d\")] SET number += 1;\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying TiDB Operator on AKS\nDESCRIPTION: These commands install the TiDB operator using Helm, which manages the lifecycle of TiDB clusters on Kubernetes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/azure.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl create -f https://raw.githubusercontent.com/pingcap/tidb-operator/v1.5.0/manifests/crd.yaml\n\n$ helm repo add pingcap https://charts.pingcap.org\n$ helm repo update\n$ helm install \\\n  -n tidb-operator \\\n  --create-namespace \\\n  tidb-operator \\\n  pingcap/tidb-operator \\\n  --version v1.5.0\n\n$ kubectl get pods --namespace tidb-operator -l app.kubernetes.io/instance=tidb-operator\n```\n\n----------------------------------------\n\nTITLE: Rust Import Statements for SurrealML\nDESCRIPTION: Required Rust import statements for using SurrealML's computation functionality.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/computation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse surrealml_core::storage::surml_file::SurMlFile;\nuse surrealml_core::execution::compute::ModelComputation;\nuse ndarray::ArrayD;\nuse std::collections::HashMap;\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Text IDs in SurrealQL\nDESCRIPTION: Demonstrates how to create records with simple text identifiers containing letters, numbers and underscores.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nCREATE company:surrealdb SET name = 'SurrealDB';\nCREATE user_version_2025 SET name = 'Alucard';\n```\n\n----------------------------------------\n\nTITLE: Running the SurrealDB .NET example application\nDESCRIPTION: Command to execute the .NET console application after ensuring that the SurrealDB server is running on the specified address.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/start.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Example SQL Queries\nDESCRIPTION: Sample SQL queries demonstrating creation of person records and filtering by age.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nns/db> CREATE person SET age = 20;\nns/db> CREATE person SET age = 30;\nns/db> SELECT * FROM person WHERE age > 25;\n```\n\n----------------------------------------\n\nTITLE: Working with Simple RecordId\nDESCRIPTION: Demonstrates how to extract data from a basic string-based RecordId.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/data-types.mdx#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar rid = new RecordId(\"person\", \"john\");\nstring table = rid.Table; // \"person\"\nstring id = rid.DeserializeId<string>(); // \"john\"\n```\n\n----------------------------------------\n\nTITLE: Connection Ready Property Example in TypeScript\nDESCRIPTION: Demonstrates the usage of db.ready property for connection establishment, showing equivalence with connect() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/properties.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = new Surreal();\n\n// These two promises are the same\nconst promise1 = db.connect();\nconst promise2 = db.ready;\n```\n\n----------------------------------------\n\nTITLE: Complex Object Deserialization with Run Method\nDESCRIPTION: Example showing how to execute a user-defined function that returns a complex object and deserialize it into a Rust struct using serde.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/run.mdx#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::Deserialize;\nuse surrealdb::engine::any::connect;\nuse surrealdb::opt::auth::Root;\n\n#[derive(Debug, Deserialize)]\nstruct Person {\n    first_name: String,\n    middle_name: String,\n    last_name: String,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = connect(\"ws://localhost:8000\").await?;\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    db.query(\n        \"DEFINE FUNCTION fn::j_jonah_jameson() -> object { RETURN \n        { \n          first_name: 'J',\n          middle_name: 'Jonah',\n          last_name: 'Jameson'\n        } \n    };\",\n    )\n    .await?;\n\n    let res: Person = db.run(\"fn::j_jonah_jameson\").await?;\n    dbg!(res);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Geometry Types in SurrealDB PHP SDK\nDESCRIPTION: Signatures for creating different geometry types including MultiPoint, MultiLine, MultiPolygon and GeometryCollection objects.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/data-types.mdx#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnew GeometryMultiPoint([GeometryPoint, ...GeometryPoint[]]);\n\nnew GeometryMultiLine([GeometryLine, ...GeometryLine[]]);\n\nnew GeometryMultiPolygon([GeometryPolygon, ...GeometryPolygon[]]);\n\nnew GeometryCollection([Geometry, ...Geometry[]]);\n```\n\n----------------------------------------\n\nTITLE: Loading a Model from .surml Format\nDESCRIPTION: Python code showing how to load a previously saved model from a .surml file with its engine specification.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/index.mdx#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nnew_file = SurMlFile.load(path=\"./linear.surml\", engine=Engine.SKLEARN)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Unset Method\nDESCRIPTION: Demonstrates how to remove a variable named 'name' from the SurrealDB connection using the unset method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/unset.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Remove the variable from the connection\n$db->unset('name');\n```\n\n----------------------------------------\n\nTITLE: Creating Strings with Single Quotes in SurrealQL\nDESCRIPTION: Basic example of creating a string value using single quotation marks in SurrealQL. This snippet demonstrates setting a text field with a simple string literal.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/strings.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person SET text = 'Lorem ipsum dolor sit amet';\n```\n\n----------------------------------------\n\nTITLE: Cargo Dependencies Configuration\nDESCRIPTION: Required dependencies for the Rust project including SurrealDB, Actix-web, and utilities\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nactix-web = \"4.9.0\"\nfaker_rand = \"0.1.1\"\nrand = \"0.8.5\"\nserde = { version = \"1.0.209\", features = [\"derive\"] }\nsurrealdb = \"2.0.4\"\nthiserror = \"1.0.64\"\n```\n\n----------------------------------------\n\nTITLE: WaitFor Enum Definition in Rust\nDESCRIPTION: Definition of the WaitFor enum that specifies the types of events that can be waited for.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/wait_for.mdx#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub enum WaitFor {\n    Connection,\n    Database,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Unset Method in SurrealDB .NET SDK\nDESCRIPTION: This example shows how to use the Unset method to remove a parameter named 'name' from the current connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/parameters.mdx#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Unset(\"name\");\n```\n\n----------------------------------------\n\nTITLE: RocksDB Configuration Variables\nDESCRIPTION: HTML table structure defining RocksDB-specific environment variables including thread count, buffer sizes, and file handling configurations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/env.mdx#2025-04-16_snippet_5\n\nLANGUAGE: markup\nCODE:\n```\n<code>SURREAL_ROCKSDB_THREAD_COUNT</code>\n```\n\n----------------------------------------\n\nTITLE: Using math::tau Constant in SurrealQL\nDESCRIPTION: Returns the mathematical constant τ (tau), which equals 2π.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_37\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::tau;\n```\n\n----------------------------------------\n\nTITLE: String Latitude Validation in SurrealQL\nDESCRIPTION: Checks if a given string represents a valid latitude value. Returns a boolean value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_24\n\nLANGUAGE: surql\nCODE:\n```\nstring::is::latitude(string) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::latitude(\"-0.118092\");\n```\n\n----------------------------------------\n\nTITLE: Collate Sorting of Text Data in SurrealDB\nDESCRIPTION: This snippet demonstrates the use of the COLLATE keyword in SurrealDB to sort Unicode strings in alphabetic order rather than Unicode order.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nSELECT VALUE val FROM data ORDER BY val COLLATE;\n```\n\n----------------------------------------\n\nTITLE: Formatting Decimal Places in SurrealQL\nDESCRIPTION: The math::fixed function returns a number with the specified number of decimal places. It takes two arguments: the number to format and the number of decimal places.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_14\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::fixed(13.146572, 2);\n\n13.15\n```\n\n----------------------------------------\n\nTITLE: Launching SurrealDB Interactive Shell\nDESCRIPTION: Command to start an interactive SurrealDB shell for running SurrealQL statements.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/integrate-auth0-as-authentication-provider.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql -u root -p root --pretty\n```\n\n----------------------------------------\n\nTITLE: Cleanup Commands\nDESCRIPTION: Commands to clean up all deployed resources and delete the GKE cluster.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/google.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete tidbcluster sdb-datastore\nhelm uninstall surrealdb-tikv\nhelm -n tidb-operator uninstall tidb-operator\ngcloud container clusters delete surrealdb-guide --region REGION --project PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Parameters in SurrealDB Rust SDK\nDESCRIPTION: Shows how to set connection parameters using the set() method. This method allows setting variables that can be used in subsequent queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n// Assign the variable on the connection\ndb.set(\"name\", Name {\n    first: \"Tobie\",\n    last: \"Morgan Hitchcock\",\n}).await?;\n// Use the variable in a subsequent query\ndb.query(\"CREATE person SET name = $name\").await?;\n// Use the variable in a subsequent query\ndb.query(\"SELECT * FROM person WHERE name.first = $name.first\").await?\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealML with SKLearn Only\nDESCRIPTION: Command to install SurrealML with only scikit-learn dependencies using pip from the GitHub repository.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install \"git+https://github.com/surrealdb/surrealml#egg=surrealml[sklearn]\"\n```\n\n----------------------------------------\n\nTITLE: Isready Command Help Output\nDESCRIPTION: The complete help output showing all available options and configurations for the isready command.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/isready.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCheck if the SurrealDB server is ready to accept connections\n\nUsage: surreal is-ready [OPTIONS]\n\nOptions:\n  -e, --endpoint <ENDPOINT>  Remote database server url to connect to [default: ws://localhost:8000] [aliases: conn]\n  -l, --log <LOG>            The logging level for the command-line tool [env: SURREAL_LOG=] [default: info] [possible values: none, full, error, warn, info, debug, trace]\n  -h, --help                 Print help\n```\n\n----------------------------------------\n\nTITLE: Query Response for Destructured Recursive Traversal\nDESCRIPTION: Shows the comprehensive response from the destructured recursive traversal, containing details about each city, its outgoing roads, and the cities those roads connect to.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_53\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tid: city:1,\n\t\tnext_cities: [\n\t\t\tcity:2\n\t\t],\n\t\tnext_roads: [\n\t\t\t{\n\t\t\t\tdistance: 33,\n\t\t\t\tid: to:bl6i9djau0pg24pqrwd9,\n\t\t\t\tin: city:1,\n\t\t\t\tout: city:2,\n\t\t\t\ttype: 'road'\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tid: city:2,\n\t\tnext_cities: [\n\t\t\tcity:3\n\t\t],\n\t\tnext_roads: [\n\t\t\t{\n\t\t\t\tdistance: 45,\n\t\t\t\tid: to:ybugfnlzv6kcrkaj49ig,\n\t\t\t\tin: city:2,\n\t\t\t\tout: city:3,\n\t\t\t\ttype: 'road'\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tid: city:3,\n\t\tnext_cities: [\n\t\t\tcity:4\n\t\t],\n\t\tnext_roads: [\n\t\t\t{\n\t\t\t\tdistance: 80,\n\t\t\t\tid: to:sw2pery99jomfhibzfrh,\n\t\t\t\tin: city:3,\n\t\t\t\tout: city:4,\n\t\t\t\ttype: 'train'\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tid: city:4,\n\t\tnext_cities: [\n\t\t\tcity:5\n\t\t],\n\t\tnext_roads: [\n\t\t\t{\n\t\t\t\tdistance: 29,\n\t\t\t\tid: to:42hlspf4z5lpqceyv68p,\n\t\t\t\tin: city:4,\n\t\t\t\tout: city:5,\n\t\t\t\ttype: 'train'\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tid: city:5,\n\t\tnext_cities: [],\n\t\tnext_roads: []\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Example HOUSE_LINEAR Dataset Structure\nDESCRIPTION: Python code showing the structure of the HOUSE_LINEAR example dataset, including input and output data, normalization information, and the expected input order.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nHOUSE_LINEAR = {\n    \"inputs\": inputs,\n    \"outputs\": house_price,\n\n    \"squarefoot\": squarefoot,\n    \"num_floors\": num_floors,\n    \"input order\": [\"squarefoot\", \"num_floors\"],\n    \"raw_inputs\": {\n        \"squarefoot\": raw_squarefoot,\n        \"num_floors\": raw_num_floors,\n    },\n    \"normalised_inputs\": {\n        \"squarefoot\": squarefoot,\n        \"num_floors\": num_floors,\n    },\n    \"normalisers\": {\n        \"squarefoot\": {\n            \"type\": \"z_score\",\n            \"mean\": squarefoot.mean(),\n            \"std\": squarefoot.std()\n        },\n        \"num_floors\": {\n            \"type\": \"z_score\",\n            \"mean\": num_floors.mean(),\n            \"std\": num_floors.std()\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB SDK with Maven\nDESCRIPTION: Adds the SurrealDB Java SDK as a dependency in a Maven project. Specifies the groupId, artifactId, and version in the dependency block.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/start.mdx#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.surrealdb</groupId>\n    <artifactId>surrealdb</artifactId>\n    <version>0.2.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Array Reduction Alternative\nDESCRIPTION: Shows how to use array::reduce as an alternative to FOR loop variable modification.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/for.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\n(<array>1..=3).reduce(|$one, $two| $one + $two);\n```\n\n----------------------------------------\n\nTITLE: REBUILD Statement Syntax in SurrealQL\nDESCRIPTION: The formal syntax definition for the REBUILD statement in SurrealQL. Supports optional IF EXISTS and TABLE clauses for index rebuilding operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/rebuild.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nREBUILD [\n\tINDEX [ IF EXISTS ] @name ON [ TABLE ] @table\n]\n```\n\n----------------------------------------\n\nTITLE: Example Response for 'info' Method in SurrealDB RPC Protocol\nDESCRIPTION: Shows the response format containing the authenticated user's record information, which varies based on schema and user.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": {\n        \"id\": \"user:john\",\n        \"name\": \"John Doe\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TiKV Cluster Configuration\nDESCRIPTION: YAML configuration for creating a TiKV cluster with PD and TiKV components.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/google.mdx#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pingcap.com/v1alpha1\nkind: TidbCluster\nmetadata:\n  name: sdb-datastore\nspec:\n  version: v6.5.0\n  timezone: UTC\n  configUpdateStrategy: RollingUpdate\n  pvReclaimPolicy: Delete\n  enableDynamicConfiguration: true\n  schedulerName: default-scheduler\n  topologySpreadConstraints:\n  - topologyKey: topology.kubernetes.io/zone\n  helper:\n    image: alpine:3.16.0\n  pd:\n    baseImage: pingcap/pd\n    maxFailoverCount: 0\n    replicas: 3\n    storageClassName: premium-rwo\n    requests:\n      cpu: 500m\n      storage: 10Gi\n      memory: 1Gi\n    config: |\n      [dashboard]\n        internal-proxy = true\n      [replication]\n        location-labels = [\"topology.kubernetes.io/zone\", \"kubernetes.io/hostname\"]\n        max-replicas = 3\n    nodeSelector:\n      dedicated: pd\n    tolerations:\n    - effect: NoSchedule\n      key: dedicated\n      operator: Equal\n      value: pd\n    affinity:\n      podAntiAffinity:\n        requiredDuringSchedulingIgnoredDuringExecution:\n        - labelSelector:\n            matchExpressions:\n            - key: app.kubernetes.io/component\n              operator: In\n              values:\n              - pd\n          topologyKey: kubernetes.io/hostname\n  tikv:\n    baseImage: pingcap/tikv\n    maxFailoverCount: 0\n    replicas: 3\n    storageClassName: premium-rwo\n    requests:\n      cpu: 1\n      storage: 10Gi\n      memory: 2Gi\n    config: {}\n    nodeSelector:\n      dedicated: tikv\n    tolerations:\n    - effect: NoSchedule\n      key: dedicated\n      operator: Equal\n      value: tikv\n    affinity:\n      podAntiAffinity:\n        requiredDuringSchedulingIgnoredDuringExecution:\n        - labelSelector:\n            matchExpressions:\n            - key: app.kubernetes.io/component\n              operator: In\n              values:\n              - tikv\n          topologyKey: kubernetes.io/hostname\n  tidb:\n    replicas: 0\n```\n\n----------------------------------------\n\nTITLE: Translating Update Content Operation to SurrealQL\nDESCRIPTION: Displays the equivalent SurrealQL query for the update content operation in the Rust SDK.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/rust.mdx#2025-04-16_snippet_17\n\nLANGUAGE: surql\nCODE:\n```\nUPDATE $resource CONTENT $data;\n```\n\n----------------------------------------\n\nTITLE: Database Client Type Implementation\nDESCRIPTION: Enum and implementation for different database client configurations with varying capacities\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/concurrency.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nenum DbType {\n    Standard,\n    With1,\n    With1000,\n}\n\nimpl DbType {\n    async fn generate(self) -> Result<Surreal<Client>, Error> {\n        let db = match self {\n            DbType::Standard => Surreal::new::<Ws>(\"localhost:8000\").await,\n            DbType::With1 => Surreal::new::<Ws>(\"localhost:8000\").with_capacity(1).await,\n            DbType::With1000 => {\n                Surreal::new::<Ws>(\"localhost:8000\")\n                    .with_capacity(1000)\n                    .await\n            }\n        }?;\n        db.use_ns(\"namespace\").use_db(\"database\").await?;\n        db.signin(Root {\n            username: \"root\",\n            password: \"root\",\n        })\n        .await?;\n        Ok(db)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting TiKV PD Service URL in Kubernetes\nDESCRIPTION: Commands to retrieve the TiKV PD service URL from Kubernetes and export it as an environment variable for use with SurrealDB installation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/azure.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get service sdb-datastore-pd\n\nNAME               TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE\nsdb-datastore-pd   ClusterIP   10.0.161.101   <none>        2379/TCP   5m27s\n\n$ export TIKV_URL=tikv://sdb-datastore-pd:2379\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealKV Provider Package\nDESCRIPTION: Command to add the SurrealDB SurrealKV provider package to a .NET project\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/dotnet.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package SurrealDb.Embedded.SurrealKv\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Version with SurrealDB PHP SDK\nDESCRIPTION: This snippet demonstrates how to use the version() method to retrieve the current version of a remote SurrealDB database. It includes error handling to catch and display any exceptions that might occur during the process.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/version.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ntry {\n\t$version = $db->version();\n\techo \"The remote database is running version $version.\";\n} catch (Exception $e) {\n\techo \"An error occurred while retrieving the version: \" . $e->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Root-Level Information\nDESCRIPTION: Command syntax to retrieve information about all namespaces and system-wide settings in the SurrealDB instance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/concepts/namespace.mdx#2025-04-16_snippet_3\n\nLANGUAGE: syntax\nCODE:\n```\nINFO FOR ROOT;\n```\n\n----------------------------------------\n\nTITLE: Including Composer Autoloader in PHP\nDESCRIPTION: Code to include the Composer autoloader in your PHP script to enable the use of installed packages.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/setup.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire __DIR__ . '/vendor/autoload.php'\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Provider with Dependency Injection\nDESCRIPTION: Setup code for registering the SurrealDB in-memory provider using .NET dependency injection\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/dotnet.mdx#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nvar services = builder.Services;\nvar configuration = builder.Configuration;\n\nservices\n  .AddSurreal(\"Endpoint=mem://\")\n  .AddInMemoryProvider();\n```\n\n----------------------------------------\n\nTITLE: Defining SLEEP Statement Syntax in SurrealQL\nDESCRIPTION: This snippet shows the basic syntax for the SLEEP statement in SurrealQL. It specifies that the statement should be followed by a duration parameter.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/sleep.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nSLEEP @duration;\n```\n\n----------------------------------------\n\nTITLE: Alpha Release SurrealDB Upgrade\nDESCRIPTION: Upgrades SurrealDB to the latest alpha version\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/upgrade.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsurreal upgrade --alpha\n```\n\n----------------------------------------\n\nTITLE: Removing Connection Parameters in SurrealDB using C#\nDESCRIPTION: Removes a parameter from the current SurrealDB connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\ndb.Unset(key)\n```\n\n----------------------------------------\n\nTITLE: Importing Image Components in Markdown\nDESCRIPTION: Import statements for image components and assets used in the documentation page.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/graphql/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from \"@components/Image.astro\";\nimport LightGql from \"@img/icon/light/gql.png\";\nimport DarkGql from \"@img/icon/dark/gql.png\";\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB SDK with Gradle (Groovy)\nDESCRIPTION: Configures the SurrealDB dependency in a Gradle build file using Groovy syntax. Sets the SurrealDB version and adds it as an implementation dependency.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/installation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\next {\n    surrealdbVersion = \"0.2.1\"\n}\n\ndependencies {\n    implementation \"com.surrealdb:surrealdb:${surrealdbVersion}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Method Syntax in PHP\nDESCRIPTION: Base syntax for the create method in the SurrealDB PHP SDK. Takes a thing parameter and optional data parameter.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/create.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->create($thing, $data)\n```\n\n----------------------------------------\n\nTITLE: Invalid Recursive Query with Multiple '.@' in SurrealDB\nDESCRIPTION: Demonstrates an invalid query where multiple '.@' symbols are used, which is not supported in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_26\n\nLANGUAGE: surql\nCODE:\n```\nplanet:earth\n\t.{1..2}\n\t.{\n\t\tname, \n\t\tid,\n-- Query with ->has->(?) on the current record\n\t\tcontains: ->has->(?).@,\n        contains2: ->has->(?).@\n\t};\n```\n\n----------------------------------------\n\nTITLE: Let Method Syntax in PHP\nDESCRIPTION: Method signature for the let() function in SurrealDB PHP SDK that assigns a value as a parameter for the database connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/let.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->let($name, $value)\n```\n\n----------------------------------------\n\nTITLE: Using Edgengram Filter in SurrealQL Analyzer\nDESCRIPTION: This snippet shows how to define an analyzer with a class tokenizer and edgengram filter, which creates prefix tokens. It includes the analyzer definition and a sample usage with search::analyze().\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/analyzer.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER example_edgengram TOKENIZERS class FILTERS edgengram(1,3);\nsearch::analyze(\"example_edgengram\", \"apple banana\");\n```\n\n----------------------------------------\n\nTITLE: Basic URL Intent for Opening Connections in Surrealist Web App\nDESCRIPTION: A simple example of using the intent query parameter to open the connections dialog in the Surrealist web application.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/advanced-topics/intents.mdx#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://surrealist.app/?intent=open-connections\n```\n\n----------------------------------------\n\nTITLE: Using Not Function with String Input in SurrealQL\nDESCRIPTION: Example of using the 'not' function with a string input in SurrealQL. It returns false as the string is considered truthy.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/not.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nRETURN not(\"I speak the truth\");\n\nfalse\n```\n\n----------------------------------------\n\nTITLE: Installing In-Memory Provider Package\nDESCRIPTION: Command to add the SurrealDB in-memory provider package to a .NET project\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/dotnet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package SurrealDb.Embedded.InMemory\n```\n\n----------------------------------------\n\nTITLE: Numeric Record ID Query Output in SurrealQL\nDESCRIPTION: Shows the output of querying records with numeric IDs, demonstrating how string-form numbers are enclosed by ⟨ and ⟩ characters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\n[\n\tarticle:10,\n\tarticle:⟨10⟩,\n    article:article10\n]\n```\n\n----------------------------------------\n\nTITLE: Database Client Initialization\nDESCRIPTION: Global static initialization of SurrealDB client using LazyLock\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse std::sync::LazyLock;\nstatic DB: LazyLock<Surreal<Client>> = LazyLock::new(Surreal::init);\n```\n\n----------------------------------------\n\nTITLE: Defining geo::is::valid Function API in SurrealQL\nDESCRIPTION: API definition for the geo::is::valid function that takes a geometry parameter and returns a boolean indicating if it's a valid geography type.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/geo.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\ngeo::is::valid(geometry) -> bool\n```\n\n----------------------------------------\n\nTITLE: Invalid Field Type Definitions for Graph Relations\nDESCRIPTION: Shows invalid attempts to redefine graph relation in/out fields with non-record types.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_37\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD in ON TABLE wrote TYPE string;\nDEFINE FIELD out ON TABLE wrote TYPE int;\n```\n\n----------------------------------------\n\nTITLE: Query Response for Multi-depth Recursion Testing\nDESCRIPTION: Shows the exponential growth of results at different recursion depths in a highly connected graph, demonstrating how quickly results can multiply.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_57\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t[\n\t\tperson:1,\n\t\tperson:2,\n\t\tperson:1,\n\t\tperson:3\n\t],\n\t[\n\t\tperson:3,\n\t\tperson:2,\n\t\tperson:1,\n\t\tperson:3,\n\t\tperson:3,\n\t\tperson:2,\n\t\tperson:1,\n\t\tperson:2\n\t],\n\t[\n\t\tperson:1,\n\t\tperson:2,\n\t\tperson:1,\n\t\tperson:3,\n\t\tperson:3,\n\t\tperson:2,\n\t\tperson:1,\n\t\tperson:2,\n\t\tperson:1,\n\t\tperson:2,\n\t\tperson:1,\n\t\tperson:3,\n\t\tperson:3,\n\t\tperson:2,\n\t\tperson:1,\n\t\tperson:3\n\t]\n]\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with TiKV Storage\nDESCRIPTION: Command to start SurrealDB in a multi-node scalable cluster configuration using TiKV as the storage engine.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/introduction/start.mdx#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start tikv://127.0.0.1:2379\n```\n\n----------------------------------------\n\nTITLE: Defining InsertRelation Method Syntax in C#\nDESCRIPTION: This snippet shows the method signature for the InsertRelation method in the SurrealDB .NET SDK. It is a generic method that takes a table and data as parameters, and returns an awaitable task.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/insert_relation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.InsertRelation<T>(table, data)\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Server from CLI\nDESCRIPTION: Commands to start a SurrealDB server instance and connect to it via CLI\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root\n\nsurreal sql --user root --pass root --ns test --db test --pretty\n```\n\n----------------------------------------\n\nTITLE: Setting SurrealDB CLI Capabilities\nDESCRIPTION: Example of starting SurrealDB using CLI commands with specific capability flags. Shows how to deny certain functions while allowing others.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/setup.mdx#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --allow-all --deny-funcs \"http\"\nsurreal sql --ns ns --db db\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Load Balancer Controller\nDESCRIPTION: Commands to install and configure the AWS Load Balancer Controller for managing Ingress and LoadBalancer services.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/amazon.mdx#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexport ACCOUNT_NUMBER=$(aws sts get-caller-identity --query \"Account\" --output text)\n\ncurl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.5.4/docs/install/iam_policy.json\n\naws iam create-policy \\\n    --policy-name AWSLoadBalancerControllerIAMPolicy \\\n    --policy-document file://iam_policy.json\n\n# ... rest of ALB controller installation ...\n```\n\n----------------------------------------\n\nTITLE: Displaying Isready Command Help\nDESCRIPTION: Shows how to view the help information for the isready command, which displays available options and usage instructions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/isready.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal isready --help\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Renewal Instructions\nDESCRIPTION: Creates an endpoint that provides instructions for obtaining a new authentication token.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n#[get(\"/new_token\")]\npub async fn get_new_token() -> String {\n    let command = r#\"curl -X POST -H \"Accept: application/json\" -d '{\"ns\":\"namespace\",\"db\":\"database\",\"ac\":\"account\",\"user\":\"your_username\",\"pass\":\"your_password\"}' http://localhost:8000/signin\"#;\n    format!(\"Need a new token? Use this command:\\n\\n{command}\\n\\nThen log in with surreal sql --namespace namespace --database database --pretty --token YOUR_TOKEN_HERE\")\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SurrealDB using Scoop\nDESCRIPTION: This command updates the installed SurrealDB to the latest version using the Scoop package manager. It ensures you have the most recent version of SurrealDB installed.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/windows.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nscoop update surrealdb\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Variables Response in SurrealDB\nDESCRIPTION: The response from executing a parameterized GraphQL query returns the specific user identified by the variable. This shows how GraphQL can be used for precise data retrieval with runtime variables.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": {\n        \"data\": {\n            \"user\": { \"id\": \"user:1\", \"name\": \"Alice\" }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Truthy Coalescing Operator in SurrealQL\nDESCRIPTION: Example of the ?: operator checking for truthy values\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/operators.mdx#2025-04-16_snippet_5\n\nLANGUAGE: surql\nCODE:\n```\nSELECT * FROM NULL ?: 0 ?: false ?: 10;\n\n10\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Parameters in SurrealDB with C#\nDESCRIPTION: Assigns a value as a parameter for the current SurrealDB connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\ndb.Set(key, value)\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB with Helm\nDESCRIPTION: Helm commands to install SurrealDB with TiKV backend and ALB ingress configuration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/amazon.mdx#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhelm repo add surrealdb https://helm.surrealdb.com\nhelm repo update\n\nTIKV_URL=tikv://basic-pd.tidb-cluster:2379\n\nhelm install \\\n    --set surrealdb.path=$TIKV_URL \\\n    --set surrealdb.auth=false \\\n    --set service.type=\"NodePort\" \\\n    --set ingress.enabled=true \\\n    # ... rest of helm install configuration ...\n```\n\n----------------------------------------\n\nTITLE: Setting Parameters in SurrealDB .NET SDK\nDESCRIPTION: This method assigns a value as a parameter for the current connection. It takes a key and a value as required arguments, with an optional cancellationToken for asynchronous operation cancellation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/parameters.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Set(key, val)\n```\n\n----------------------------------------\n\nTITLE: Creating Specialized Node Pools for TiDB and TiKV\nDESCRIPTION: These commands create separate node pools for TiDB operator, PD (Placement Driver), and TiKV nodes, each with specific VM sizes and configurations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/azure.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ az aks nodepool add --name admin \\\n    --resource-group rg-surrealdb-aks \\\n    --cluster-name surrealdb-aks-cluster \\\n    --zones 1 2 3 \\\n    --node-count 1 \\\n    --labels dedicated=admin\n\n$ az aks nodepool add --name pd \\\n    --resource-group rg-surrealdb-aks \\\n    --cluster-name surrealdb-aks-cluster \\\n    --node-vm-size Standard_F4s_v2 \\\n    --zones 1 2 3 \\\n    --node-count 3 \\\n    --labels dedicated=pd \\\n    --node-taints dedicated=pd:NoSchedule\n\n$ az aks nodepool add --name tikv \\\n    --resource-group rg-surrealdb-aks \\\n    --cluster-name surrealdb-aks-cluster \\\n    --node-vm-size Standard_E8s_v4 \\\n    --zones 1 2 3 \\\n    --node-count 3 \\\n    --labels dedicated=tikv \\\n    --node-taints dedicated=tikv:NoSchedule \\\n    --enable-ultra-ssd\n```\n\n----------------------------------------\n\nTITLE: SurrealDB CLI Connection Command\nDESCRIPTION: Command to connect to SurrealDB using the Surreal CLI with namespace, database, and authentication details.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/select_live.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql --namespace ns --database db --user root --pass root --pretty\n```\n\n----------------------------------------\n\nTITLE: Configuring RocksDB Provider with Dependency Injection\nDESCRIPTION: Setup code for registering the SurrealDB RocksDB provider using .NET dependency injection\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/embedding/dotnet.mdx#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nvar services = builder.Services;\nvar configuration = builder.Configuration;\n\nservices\n  .AddSurreal(\"Endpoint=rocksdb://data.db\")\n  .AddRocksDbProvider();\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Hours in SurrealQL\nDESCRIPTION: The duration::hours function counts how many hours fit into a duration. It takes a duration as input and returns a number.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/duration.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nduration::hours(duration) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN duration::hours(3w);\n\n504\n```\n\n----------------------------------------\n\nTITLE: Scope Token JWT Payload Structure\nDESCRIPTION: The required claims for a scope token JWT payload. It includes expiration time, token name, namespace identifier, database identifier, and scope name.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/token.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 2147483647,\n  \"tk\": \"token_name\",\n  \"ns\": \"abcum\",\n  \"db\": \"app_vitalsense\",\n  \"sc\": \"users\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SurrealDB PHP SDK\nDESCRIPTION: PHP code to import the SurrealDB SDK class for use in your application.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/setup.mdx#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Surreal\\Surreal;\n```\n\n----------------------------------------\n\nTITLE: BREAK Statement Basic Syntax\nDESCRIPTION: The basic syntax for the BREAK statement in SurrealQL\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/break.mdx#2025-04-16_snippet_0\n\nLANGUAGE: syntax\nCODE:\n```\nBREAK\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Interface with Keyboard Shortcut in Surrealist\nDESCRIPTION: Key command to open the search modal in Surrealist, which provides access to shortcuts and navigation options. This shortcut works cross-platform by using Ctrl+K for Windows/Linux and Cmd+K for macOS.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-cloud/advanced-topics/search-and-shortcuts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`Ctrl + K` or `Cmd + K`\n```\n\n----------------------------------------\n\nTITLE: Connect Method Syntax in PHP\nDESCRIPTION: The basic method signature for connecting to a SurrealDB database endpoint. Takes a host URL string and an optional options array as parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/connect.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->connect($host, $options)\n```\n\n----------------------------------------\n\nTITLE: Output of Successfully Avoiding Infinite Recursion in SurrealQL\nDESCRIPTION: This snippet shows the successful output when infinite recursion is avoided in a future query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/futures.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tid: person:d7uyc9m5gtg7r4cvvq7d,\n\t\trandom_friend: person:fv76w83vbgularvl0dvv\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Strings with Double Quotes in SurrealQL\nDESCRIPTION: Example showing how to create a string value using double quotation marks in SurrealQL. Both single and double quotes can be used to define strings.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/strings.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person SET text = \"Lorem ipsum dolor sit amet\";\n```\n\n----------------------------------------\n\nTITLE: File Storage Deprecation Warning\nDESCRIPTION: Warning message shown when using deprecated file:// prefix for database storage path.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfile:// is deprecated, please use surrealkv:// or rocksdb://\n```\n\n----------------------------------------\n\nTITLE: Let Method Syntax in Golang\nDESCRIPTION: Method signature for the Let function that assigns a value as a parameter for the database connection. Takes a string key and an interface{} value as arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/let.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Let(key string, value interface{})\n```\n\n----------------------------------------\n\nTITLE: Saving a Model to .surml Format\nDESCRIPTION: Python code demonstrating how to save the trained model and its metadata to a .surml file for later use.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/index.mdx#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfile.save(path=\"./linear.surml\")\n```\n\n----------------------------------------\n\nTITLE: Patching Records in SurrealDB with C#\nDESCRIPTION: Applies JSON Patch changes to all records in a table or a specific record.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\ndb.Patch<T>(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Debugging Authentication with Environment Variable in SurrealDB\nDESCRIPTION: Sets an environment variable to forward access errors directly to clients for debugging authentication issues. This should only be used in controlled environments with trusted clients due to potential security risks.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/troubleshooting.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nSURREAL_INSECURE_FORWARD_ACCESS_ERRORS=true\n```\n\n----------------------------------------\n\nTITLE: Verifying SurrealDB installation with help command\nDESCRIPTION: This command checks whether SurrealDB was installed correctly by displaying the help information, showing available commands and options.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/linux.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal help\n```\n\n----------------------------------------\n\nTITLE: Complex Record ID with Emoji Output in SurrealQL\nDESCRIPTION: Shows how a complex record ID with an emoji character appears in query output, enclosed by ⟨ and ⟩ characters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tauthor: person:tobie,\n\t\tid: ⟨📖⟩:svk5taacnhnk5000129r,\n\t\ttime: d'2025-02-17T05:25:04.932Z'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: CONTINUE Statement Syntax in SurrealQL\nDESCRIPTION: The basic syntax for the CONTINUE statement in SurrealQL. It is used without any additional parameters or conditions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/continue.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nCONTINUE\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with GraphQL Support (MacOS)\nDESCRIPTION: Command to start SurrealDB with GraphQL module enabled on MacOS, using environment variables to allow experimental features.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/graphql/surrealist.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# From greater than or equal to V2.2.0\nSURREAL_CAPS_ALLOW_EXPERIMENTAL=graphql surreal start --log debug --user root --password root\n\n# From versions lower than V2.2.0\nSURREAL_EXPERIMENTAL_GRAPHQL = \"true\" surreal start --log debug --user root --password root\n```\n\n----------------------------------------\n\nTITLE: SurrealQL Query for Upserting with Patch\nDESCRIPTION: Shows the equivalent SurrealQL query for the .upsert().patch() method in Rust.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/upsert.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nUPSERT $resource PATCH $data;\n```\n\n----------------------------------------\n\nTITLE: Query Method Syntax in Python SurrealDB SDK\nDESCRIPTION: Basic syntax for the query method that executes SurrealQL statements against the database. Takes a query string and optional variables as arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/query.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.query(query, vars)\n```\n\n----------------------------------------\n\nTITLE: Query Response for Equivalent Graph Queries\nDESCRIPTION: Shows the response from equivalent graph queries using different syntax, returning all relationship data from the 'knows' edges originating from person:one.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_63\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\t\"->knows\": [\n\t\t\t{\n\t\t\t\tdated: true,\n\t\t\t\tid: knows:2tsz3aomelegp060ii7d,\n\t\t\t\tin: person:one,\n\t\t\t\tout: person:three\n\t\t\t},\n\t\t\t{\n\t\t\t\tdated: true,\n\t\t\t\tfriends: true,\n\t\t\t\tid: knows:g54z9zapdkssxb4p4pjc,\n\t\t\t\tin: person:one,\n\t\t\t\tmarried_to: true,\n\t\t\t\tout: person:two\n\t\t\t}\n\t\t]\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Exporting Data from SurrealDB Using CLI\nDESCRIPTION: Command to export data from a SurrealDB instance to a .surql file. Uses the surreal export command with connection details and authentication credentials to create an export file in the downloads directory.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-cloud/advanced-topics/migrating-data.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal export --conn <connection-url> --user root --pass root --ns test --db test downloads/export.surql\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB SDK with Package Managers\nDESCRIPTION: Commands for installing the SurrealDB SDK using different package managers like Bun, NPM, Yarn, and Pnpm.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/frameworks/solidjs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install surrealdb\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save surrealdb\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add surrealdb\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install surrealdb\n```\n\n----------------------------------------\n\nTITLE: Rust Project Dependencies\nDESCRIPTION: Required dependencies for the Axum-SurrealDB integration project including version specifications\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\naxum = \"0.7.7\"\nfaker_rand = \"0.1.1\"\nrand = \"0.8.5\"\nserde = { version = \"1.0.209\", features = [\"derive\"] }\nsurrealdb = \"2.0.4\"\nthiserror = \"1.0.64\"\ntokio = \"1.0.40\"\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Assets in JSX\nDESCRIPTION: JSX import statements for components and image assets needed for the Surrealist documentation page, including light and dark mode variants of the Surrealist logo.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Icon } from 'astro-icon/components';\nimport Image from \"@components/Image.astro\";\nimport ImageLogo from \"@img/icon/dark/surrealist.png\";\nimport LightSurrealist from '@img/icon/light/surrealist-light.png';\n```\n\n----------------------------------------\n\nTITLE: Component Imports\nDESCRIPTION: Import statements for Astro components used in the documentation page including Since, Tabs and TabItem components.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nimport Since from '@components/shared/Since.astro'\nimport Tabs from \"@components/Tabs/Tabs.astro\";\nimport TabItem from \"@components/Tabs/TabItem.astro\";\n```\n\n----------------------------------------\n\nTITLE: Beta Release SurrealDB Upgrade\nDESCRIPTION: Upgrades SurrealDB to the latest beta version\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/upgrade.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsurreal upgrade --beta\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB Nightly on MacOS/Linux\nDESCRIPTION: Command to download and install the nightly version of SurrealDB on MacOS or Linux systems using the official install script. The script installs to /usr/local/bin by default.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/nightly.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://install.surrealdb.com | sh -s -- --nightly\n```\n\n----------------------------------------\n\nTITLE: Removing Connection Parameters in SurrealDB JavaScript SDK\nDESCRIPTION: Removes a parameter from the current SurrealDB connection. This method allows you to unset previously defined connection variables.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.unset(key)\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with root user credentials\nDESCRIPTION: Launches an in-memory SurrealDB server with a top-level user named 'root' with password 'root'. This configures initial authentication credentials for the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/memory.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root memory\n```\n\n----------------------------------------\n\nTITLE: Nightly Release SurrealDB Upgrade\nDESCRIPTION: Upgrades SurrealDB to the latest nightly version\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/upgrade.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsurreal upgrade --nightly\n```\n\n----------------------------------------\n\nTITLE: Importing SurrealDB SDK for Asynchronous API in Python\nDESCRIPTION: This code snippet demonstrates how to import the AsyncSurreal class from the surrealdb package for asynchronous API usage in a Python project.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/installation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom surrealdb import AsyncSurreal\n```\n\n----------------------------------------\n\nTITLE: Base64 Encode Empty Bytes Example\nDESCRIPTION: Example showing base64 encoding of empty bytes returning true.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/encoding.mdx#2025-04-16_snippet_1\n\nLANGUAGE: surql\nCODE:\n```\nRETURN encoding::base64::encode(<bytes>\"\");\n\ntrue\n```\n\n----------------------------------------\n\nTITLE: Timeout Implementation\nDESCRIPTION: Demonstrates how to set a timeout duration for complex UPSERT operations with interconnected records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/upsert.mdx#2025-04-16_snippet_13\n\nLANGUAGE: surql\nCODE:\n```\nUPSERT person:3 SET important = true WHERE ->knows->person->(knows WHERE influencer = true) TIMEOUT 5s;\n```\n\n----------------------------------------\n\nTITLE: Parsing URL Port in SurrealQL\nDESCRIPTION: This function extracts the port number from a valid URL. It returns the numeric value of the port if specified in the URL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/parse.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nparse::url::port(string) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN parse::url::port(\"https://surrealdb.com:80/features?some=option#fragment\");\n\n80\n```\n\n----------------------------------------\n\nTITLE: Testing SurrealDB Connection\nDESCRIPTION: Command to test connection to SurrealDB endpoint using the surreal CLI\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/amazon.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql -e https://$SURREALDB_ENDPOINT\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for a documentation page about array functions in SurrealQL, including sidebar position, labels and meta description.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsidebar_position: 3\nsidebar_label: Array functions\ntitle: Array functions | SurrealQL\ndescription: These functions can be used when working with, and manipulating arrays of data.\n---\n```\n\n----------------------------------------\n\nTITLE: Using Invalidate Method in SurrealDB Python SDK - Examples\nDESCRIPTION: Examples showing both synchronous and asynchronous usage of the invalidate() method for removing authentication credentials.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/invalidate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndb.invalidate()\n\n# Async\nawait db.invalidate()\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Level in SurrealDB CLI\nDESCRIPTION: Demonstrates how to specify the namespace and database for authentication when using the SurrealDB CLI, which is crucial for correctly authenticating users.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/security/troubleshooting.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--auth-level ns --auth-level db\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Dependencies\nDESCRIPTION: Cargo.toml configuration for required dependencies in the Rust project.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/fetch.mdx#2025-04-16_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nserde = { version = \"1.0.214\", features = [\"serde_derive\"] }\nsurrealdb = \"2.0.4\"\ntokio = \"1.41.0\"\n```\n\n----------------------------------------\n\nTITLE: Using math::round Function in SurrealQL\nDESCRIPTION: Rounds a number to the nearest integer.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_28\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::round(13.53124);\n```\n\n----------------------------------------\n\nTITLE: Example Request for 'version' Method in SurrealDB RPC Protocol\nDESCRIPTION: Shows how to format a request to retrieve version information about the SurrealDB server.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"version\"\n}\n```\n\n----------------------------------------\n\nTITLE: Live Query Response in SurrealDB WebSocket API\nDESCRIPTION: The response to a live query request, containing the query UUID that uniquely identifies this live connection. This UUID will be included in all subsequent notifications for this query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": \"0189d6e3-8eac-703a-9a48-d9faa78b44b9\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using IF NOT EXISTS Clause in GraphQL Configuration in SurrealQL\nDESCRIPTION: This example shows how to use the IF NOT EXISTS clause to define a GraphQL configuration only if it doesn't already exist.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE CONFIG GRAPHQL IF NOT EXISTS TABLES AUTO FUNCTIONS AUTO;\n```\n\n----------------------------------------\n\nTITLE: Creating Records as Root User in SurrealDB\nDESCRIPTION: Example showing how to create a 'person' record in SurrealDB using the CLI as a root user. The root user creates records without the 'created_by' field.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ntest/test> CREATE person SET name = 'Aeon';\n-- Query 1\n[\n\t{\n\t\tid: person:hdl0unwts4atic65nh7l,\n\t\tname: 'Aeon'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Close Method Syntax in SurrealDB PHP SDK\nDESCRIPTION: The basic syntax for the close() method used to terminate a database connection. The method is called on a database instance object and requires no parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/close.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->close()\n```\n\n----------------------------------------\n\nTITLE: Running SurrealDB Nightly with Docker\nDESCRIPTION: Docker command to pull and run the latest nightly version of SurrealDB, exposing port 8000 for database access.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/nightly.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --pull always -p 8000:8000 surrealdb/surrealdb:nightly start\n```\n\n----------------------------------------\n\nTITLE: Unsetting Method Syntax for SurrealDB Parameters\nDESCRIPTION: Method signature for removing parameters from a SurrealDB connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/core/parameters.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync db.unset(key)\n```\n\n----------------------------------------\n\nTITLE: Persisting SurrealDB Data with Docker Volume\nDESCRIPTION: This snippet demonstrates how to persist SurrealDB data using a Docker volume. It creates a local directory for data storage and mounts it to the container, using the RocksDB storage engine.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/docker.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir mydata # Create a directory to store the database, owned by the current user\ndocker run --rm --pull always -p 8000:8000 --user $(id -u) -v $(pwd)/mydata:/mydata surrealdb/surrealdb:latest start rocksdb:/mydata/mydatabase.db\n```\n\n----------------------------------------\n\nTITLE: Editor View Size Adjustment Shortcuts\nDESCRIPTION: Keyboard shortcuts for increasing and decreasing the editor view size in Surrealist. These shortcuts use a combination of keys to adjust the view proportions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-cloud/advanced-topics/search-and-shortcuts.mdx#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`cmd + Option + +` or `cmd + Option + -`\n```\n\n----------------------------------------\n\nTITLE: Error Response for Exceeding Recursion Limit\nDESCRIPTION: Shows the error message when a recursive query exceeds the maximum recursion depth of 256, which happens with circular relationships without proper bounds.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_55\n\nLANGUAGE: surql\nCODE:\n```\n'Exceeded the idiom recursion limit of 256.'\n```\n\n----------------------------------------\n\nTITLE: Example Usage of SurrealDB Close Method\nDESCRIPTION: Practical example showing how to close a database connection using the close() method in PHP.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/close.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$db->close();\n```\n\n----------------------------------------\n\nTITLE: React/Astro Image Component Implementation\nDESCRIPTION: Image component implementation for displaying SurrealQL logos with light/dark mode support.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  alt=\"QL\"\n  width={100}\n  className=\"flag-image-title\"\n  src={{\n    light: LightLogo,\n    dark: DarkLogo,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Railway Logo in MDX with Light/Dark Mode\nDESCRIPTION: React/MDX component implementation for displaying the Railway logo with support for light and dark mode themes using the Image component.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/railway.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n    alt=\"Railway\"\n    width={100}\n    className=\"flag-image-title\"\n    src={{\n        light: LightLogo,\n        dark: DarkLogo,\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Flags Table in Markdown\nDESCRIPTION: This code snippet defines a markdown table that lists various feature flags available in Surrealist, including their names and descriptions. It covers options like toggling feature flags, models view, API docs view, themes, newsfeed, database version check, highlight tool, SurrealDB version compatibility, and changelog view.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/advanced-topics/settings-and-customisation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n    <thead>\n        <tr>\n            <th scope=\"col\">Options</th>\n            <th scope=\"col\">Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td scope=\"row\" data-label=\"Type\">\n                <code>feature_flags</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Toggle feature flags.\n            </td>\n        </tr>\n        <tr>\n            <td scope=\"row\" data-label=\"Type\">\n                <code>models_view</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Toggle the view for SurrealML models.\n            </td>\n        </tr>\n        <tr>\n            <td scope=\"row\" data-label=\"Type\">\n                <code>apidocs_view</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Toggle the view for API documentation.\n            </td>\n        </tr>\n        <tr>\n            <td scope=\"row\" data-label=\"Type\">\n                <code>themes</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Toggle between light and dark mode.\n            </td>\n        </tr>\n        <tr>\n            <td scope=\"row\" data-label=\"Type\">\n                <code>newsfeed</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Toggle the newsfeed view.\n            </td>\n        </tr>\n        <tr>\n            <td scope=\"row\" data-label=\"Type\">\n                <code>database_version_check</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Toggle the database version check in the Surrealist CLI\n            </td>\n        </tr>\n        <tr>\n            <td scope=\"row\" data-label=\"Type\">\n                <code>highlight_tool</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Toggle the highlight tool.\n            </td>\n        </tr>\n        <tr>\n            <td scope=\"row\" data-label=\"Type\">\n                <code>surreal_compat</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Toggle SurrealDB version between `1.x` and `2.x`.\n            </td>\n        </tr>\n        <tr>\n            <td scope=\"row\" data-label=\"Type\">\n                <code>changelog</code>\n            </td>\n            <td scope=\"row\" data-label=\"Description\">\n                Toggle the changelog view to see the latest changes, read all or unread all.\n            </td>\n        </tr>\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Importing ML Model with Token Authentication\nDESCRIPTION: Example of importing a SurrealML model using JWT token authentication with the surreal ml import command.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/ml/import.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal import --conn http://localhost:8000 --token <token> --ns test --db test my-surrealml-model.surml\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Failure Handling in SurrealQL\nDESCRIPTION: Shows how to implement user authentication with signup and signin capabilities, including validation of user status. Includes custom error throwing for disabled users.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/access/record.mdx#2025-04-16_snippet_7\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ACCESS user ON DATABASE TYPE RECORD\n    SIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass), enabled = true )\n    SIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )\n    AUTHENTICATE {\n        IF !$auth.enabled {\n            THROW \"This user is not enabled\";\n        };\n\n        RETURN $auth;\n    }\n;\n```\n\n----------------------------------------\n\nTITLE: Defining BEGIN Statement Syntax in SurrealQL\nDESCRIPTION: This snippet shows the syntax for the BEGIN statement in SurrealQL. It allows for an optional TRANSACTION keyword after BEGIN.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/begin.mdx#2025-04-16_snippet_0\n\nLANGUAGE: SurrealQL\nCODE:\n```\nBEGIN [ TRANSACTION ];\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with Debug Logging\nDESCRIPTION: Launches SurrealDB with verbose logging and RocksDB storage engine.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/start.mdx#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --log debug rocksdb:mydatabase.db\n```\n\n----------------------------------------\n\nTITLE: Setting Namespace and Database for SurrealDB in PHP\nDESCRIPTION: Specifies the namespace and database to use for the current SurrealDB connection, which is required before sending queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/core/initialization.mdx#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$db->use([\n\t\"namespace\" => \"test\",\n\t\"database\" => \"test\"\n]);\n```\n\n----------------------------------------\n\nTITLE: React/JSX Component Imports\nDESCRIPTION: Import statements for various React/Astro components and image assets used in the installation documentation page\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Icon } from \"astro-icon/components\";\nimport Version from '@components/Version.astro';\nimport IconBox from '@components/boxes/IconBox.astro';\nimport Boxes from '@src/components/boxes/Boxes.astro';\n\nimport AppleLightLogo from \"@img/icon/light/apple.png\";\nimport AppleDarkLogo from \"@img/icon/dark/apple.png\";\n\nimport WindowsLightLogo from \"@img/icon/light/windows.png\";\nimport WindowsDarkLogo from \"@img/icon/dark/windows.png\";\n\nimport LinuxLightLogo from \"@img/icon/light/linux.png\";\nimport LinuxDarkLogo from \"@img/icon/dark/linux.png\";\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Schema with Auto-Include in SurrealQL\nDESCRIPTION: This snippet shows how to configure the GraphQL schema to automatically include all tables and functions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE CONFIG GRAPHQL  AUTO;\n```\n\n----------------------------------------\n\nTITLE: Markdown Page Configuration\nDESCRIPTION: Front matter configuration for the documentation page, setting up sidebar position, labels, and page metadata.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 1\nsidebar_label: Overview\ntitle: SurrealQL | Query Language \ndescription: In this section, you will explore SurrealQL, a powerful database query language that closely resembles traditional SQL but comes with unique differences and improvements.\nno_page_headings: true\n---\n```\n\n----------------------------------------\n\nTITLE: Delete Method Syntax in PHP\nDESCRIPTION: Basic syntax for the delete method in SurrealDB PHP SDK. Takes a thing parameter that can be either a string table name or a RecordId object.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/delete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$db->delete($thing)\n```\n\n----------------------------------------\n\nTITLE: Disabling Tauri Plugin Logs for SurrealDB Performance\nDESCRIPTION: JSON configuration in tauri.conf.json to disable Tauri plugin logging, improving SurrealDB performance in Tauri applications.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/performance-best-practices.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"plugins\": {\n\t\t\"logger\": {\n\t\t\t\"enabled\": false\n\t\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using string::similarity::jaro Function in SurrealQL\nDESCRIPTION: Examples demonstrating the use of string::similarity::jaro function to compare string similarities with Jaro similarity scores.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_38\n\nLANGUAGE: surql\nCODE:\n```\nLET $first     = \"In a hole in the ground there lived a hobbit\";\nLET $same      = \"In a hole in the ground there lived a hobbit\";\nLET $close     = \"In a hole in the GROUND there lived a Hobbit\";\nLET $different = \"A narrow passage holds four hidden treasures\";\nLET $short     = \"Hi I'm Brian\";\n\n-- Returns 1\nstring::similarity::jaro($first, $same);\n-- Returns 0.8218673218673219f\nstring::similarity::jaro($first, $close);\n-- Returns 0.6266233766233765f\nstring::similarity::jaro($first, $different);\n-- Returns 0.4379509379509379f\nstring::similarity::jaro($first, $short);\n```\n\n----------------------------------------\n\nTITLE: Loading ONNX Model Files in Rust\nDESCRIPTION: Rust code for loading an ONNX model file from disk into memory as bytes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/storage.mdx#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet mut file = File::open(\"./stash/linear_test.onnx\").expect(\"File to be found\");\nlet mut model_bytes = Vec::new();\nfile.read_to_end(&mut model_bytes).expect(\"File content to be read to string\");\n```\n\n----------------------------------------\n\nTITLE: SurrealDB PHP SDK Version Method Syntax\nDESCRIPTION: This snippet shows the syntax for calling the version() method on a SurrealDB database instance in PHP. The method is called on the $db object, which represents the database connection.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/methods/version.mdx#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$db->version();\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB Server from CLI\nDESCRIPTION: Commands to start and connect to a SurrealDB instance with root credentials\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root\n\nsurreal sql --user root --pass root --ns test --db test --pretty\n```\n\n----------------------------------------\n\nTITLE: Response Format for Mathematical Constants in SurrealDB\nDESCRIPTION: Example of the response format when querying mathematical constants in SurrealDB. The constants are returned as floating-point numbers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t3.141592653589793f,\n\t6.283185307179586f,\n\t2.718281828459045f\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Person Records as Root User\nDESCRIPTION: JSON input examples for creating two person records as a root user in SurrealDB. These records will be used to demonstrate permission differences.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"Billy\", \"id\": \"billy\" }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"Billina\", \"id\": \"billina\" }\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Features in Rust SDK\nDESCRIPTION: Shows how to enable all experimental features in SurrealDB using the Rust SDK. Demonstrates the use of with_all_experimental_features_allowed() method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/setup.mdx#2025-04-16_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    \n    let config = Config::default().capabilities(Capabilities::all().with_all_experimental_features_allowed());\n    let db = connect((\"mem://\", config)).await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    println!(\"{:?}\", db.query(\"DEFINE FIELD comics ON person TYPE option<array<record<comic_book>>> REFERENCE\"));\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning IF ELSE Result to Variable in SurrealQL\nDESCRIPTION: Example of assigning the result of an IF ELSE statement to a variable in SurrealQL.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/ifelse.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nLET $num = 9;\n\n// Original syntax\nLET $odd_even =\n  IF $num % 2 = 0 THEN\n    \"even\"\n  ELSE\n    \"odd\"\n  END;\n\n// New scope syntax\nLET $odd_even = \n    IF $num % 2 = 0 { \"even\" } \n    ELSE { \"odd\" };\n```\n\n----------------------------------------\n\nTITLE: Querying SurrealDB using .NET SDK\nDESCRIPTION: This snippet shows the query method syntax for the .NET SDK. It includes the required SQL parameter and an optional cancellationToken parameter for handling asynchronous operation cancellation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/sdks/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Query(sql)\n```\n\n----------------------------------------\n\nTITLE: Authenticating SurrealDB Client with Token in C#\nDESCRIPTION: Demonstrates how to create a SurrealDbClient instance with token-based authentication. This method is used when you have a pre-existing authentication token for secure access.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/create-a-new-connection.mdx#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new SurrealDbOptions\n{\n    Endpoint = \"wss://cloud.surrealdb.com/rpc\",\n    Token = \"......\",\n};\n\n// Authenticate with an existing token\nusing var db = new SurrealDbClient(options);\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Patch Method in Rust\nDESCRIPTION: Provides a complete example of using the update().patch() method to apply various JSON Patch operations to records.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/update.mdx#2025-04-16_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::opt::PatchOp;\nuse surrealdb::sql::Datetime;\nuse surrealdb::Surreal;\n\n#[derive(Debug, Serialize, Deserialize, Default)]\nstruct Person {\n    name: String,\n    company: Option<String>,\n    settings: Option<Settings>,\n    created_at: Option<Datetime>,\n    tags: Option<Vec<String>>,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Settings {\n    active: bool,\n}\n\n#[tokio::main]\nasync fn main() -> surrealdb::Result<()> {\n    let db = Surreal::new::<Ws>(\"127.0.0.1:8000\").await?;\n\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    db.use_ns(\"ns\").use_db(\"db\").await?;\n\n    db.query(\n        \"\n        CREATE person:tobie SET name = 'Tobie', company = 'SurrealDB'; \n        CREATE person:jaime SET name = 'jaime', company = 'SurrealDB';\",\n    )\n    .await?;\n\n    // Update all records in a table\n    let people: Vec<Person> = db\n        .update(\"person\")\n        .patch(PatchOp::replace(\"/created_at\", Datetime::default()))\n        .await?;\n    dbg!(people);\n\n    // Update a record with a specific ID\n    let person: Option<Person> = db\n        .update((\"person\", \"tobie\"))\n        .patch(PatchOp::replace(\"/settings/active\", false))\n        .patch(PatchOp::add(\"/tags\", &[\"developer\", \"engineer\"]))\n        .patch(PatchOp::remove(\"/company\"))\n        .await?;\n    dbg!(person);\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Parse Errors with String Prefixes in SurrealQL\nDESCRIPTION: Examples showing how string prefixes in SurrealQL cause parse-time errors with invalid input, preventing the query from executing when formats are incorrect.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/strings.mdx#2025-04-16_snippet_10\n\nLANGUAGE: surql\nCODE:\n```\n// Will not parse in either case until _ is changed to -\nRETURN u\"018f0e6a_9b95-7ecc-8a38-aea7bf3627dd\";\nRETURN d\"2024_06-06T12:00:00Z\";\n```\n\n----------------------------------------\n\nTITLE: Displaying SurrealDB CLI Version\nDESCRIPTION: This command displays the current version of the SurrealDB command-line tool, along with the platform and architecture.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/version.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal version\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB via HTTP in PHP\nDESCRIPTION: Establishes a connection to the SurrealDB instance using the HTTP protocol.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/core/initialization.mdx#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$db->connect(\"http://127.0.0.1:8000/rpc\");\n```\n\n----------------------------------------\n\nTITLE: Exporting SurrealML Model Using SurrealDB CLI\nDESCRIPTION: This command exports a SurrealML model from a SurrealDB database using username and password authentication. It specifies the connection URL, credentials, namespace, database, model name, version, and output file.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/ml/export.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsurreal ml export --conn http://localhost:8000 --user root --pass root --ns test --db test --name my-surrealml-model --version 1.0.0 my-surrealml-model.surml\n```\n\n----------------------------------------\n\nTITLE: YouTube Iframe Embedding\nDESCRIPTION: Embedded YouTube video player with responsive styling and security parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe width=\"100%\" src=\"https://www.youtube.com/embed/TyX45cyZ-W0?si=S9M59afDEiqxeC5d\" style={{ aspectRatio: 1.7, paddingTop: '20px' }} title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Calculating Arccotangent in SurrealQL\nDESCRIPTION: The math::acot function returns the arccotangent (inverse cotangent) of a number. The result is expressed in radians.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::acot(1);\n\n0.7853981633974483\n```\n\n----------------------------------------\n\nTITLE: LIVE SELECT with Table Parameter\nDESCRIPTION: Example showing supported parameter usage for table reference in live queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/live.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nLIVE SELECT * FROM $table WHERE field > 50\n```\n\n----------------------------------------\n\nTITLE: Updating SurrealDB using Homebrew on macOS\nDESCRIPTION: This command updates SurrealDB to the latest version using the Homebrew package manager.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/macos.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew upgrade surrealdb/tap/surreal\n```\n\n----------------------------------------\n\nTITLE: SurrealDB CLI Help Command Output\nDESCRIPTION: This snippet shows the full output of the 'surreal help' command. It includes the SurrealDB ASCII art logo, usage instructions, available commands, and command-line options.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/help.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n .d8888b.                                             888 8888888b.  888888b.\nd88P  Y88b                                            888 888  'Y88b 888  '88b\nY88b.                                                 888 888    888 888  .88P\n 'Y888b.   888  888 888d888 888d888  .d88b.   8888b.  888 888    888 8888888K.\n    'Y88b. 888  888 888P'   888P'   d8P  Y8b     '88b 888 888    888 888  'Y88b\n      '888 888  888 888     888     88888888 .d888888 888 888    888 888    888\nY88b  d88P Y88b 888 888     888     Y8b.     888  888 888 888  .d88P 888   d88P\n 'Y8888P'   'Y88888 888     888      'Y8888  'Y888888 888 8888888P'  8888888P'\n\n\nTo get started using SurrealDB, and for guides on connecting to and building applications\non top of SurrealDB, check out the SurrealDB documentation (https://surrealdb.com/docs).\n\nIf you have questions or ideas, join the SurrealDB community (/community).\n\nIf you find a bug, submit an issue on GitHub (https://github.com/surrealdb/surrealdb/issues).\n\nWe would love it if you could star the repository (https://github.com/surrealdb/surrealdb).\n\n----------\n\nUsage: surreal [OPTIONS] <COMMAND>\n\nCommands:\n  start     Start the database server\n  import    Import a SurrealQL script into an existing database\n  export    Export an existing database as a SurrealQL script\n  version   Output the command-line tool and remote server version information\n  upgrade   Upgrade to the latest stable version\n  sql       Start an SQL REPL in your terminal with pipe support\n  ml        Manage SurrealML models within an existing database\n  is-ready  Check if the SurrealDB server is ready to accept connections [aliases: isready]\n  validate  Validate SurrealQL query files\n  fix       Fix database storage issues\n  help      Print this message or the help of the given subcommand(s)\n\nOptions:\n  -l, --log <LOG>             The logging level for the command-line tool [env: SURREAL_LOG=] [default: info] [possible values: none, full, error, warn, info, debug, trace]\n      --online-version-check  Whether to allow web check for client version upgrades at start [env: SURREAL_ONLINE_VERSION_CHECK=]\n  -h, --help                  Print help\n  -V, --version               Print version\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Version Method Syntax\nDESCRIPTION: Method signature for retrieving the SurrealDB instance version. Returns a string containing the version number.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/version.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.Version()\n```\n\n----------------------------------------\n\nTITLE: Switching to Specific Namespace and Database in SurrealQL\nDESCRIPTION: This example illustrates how to switch to both the 'test' namespace and 'test' database simultaneously using the USE statement.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/use.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nUSE NS test DB test; -- Switch to the 'test' Namespace and 'test' Database\n```\n\n----------------------------------------\n\nTITLE: Importing Required SurrealML Dependencies in Rust\nDESCRIPTION: Rust code showing the necessary import statements for working with SurrealML file operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/storage.mdx#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse std::fs::File;\nuse std::io::{self, Read, Write};\n\nuse surrealml_core::storage::surml_file::SurMlFile;\nuse surrealml_core::storage::header::Header;\nuse surrealml_core::storage::header::normalisers:{\n    wrapper::NormaliserType,\n    linear_scaling::LinearScaling\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Column Names to SurMlFile\nDESCRIPTION: Python code showing how to add column names to the SurMlFile object in the correct order to match the training data structure.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfile.add_column(\"squarefoot\")\nfile.add_column(\"num_floors\")\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Tables and Wildcards in Graph Clauses in SurrealQL\nDESCRIPTION: Demonstrates how to query multiple graph tables simultaneously using comma separation, and how to use the '?' wildcard to select from all possible graph tables in a traversal.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_67\n\nLANGUAGE: surql\nCODE:\n```\nCREATE person:one SET name = \"Þor\";\nCREATE dog:one SET name = \"Fenrir\";\nCREATE cat:one SET name = \"Jólakötturinn\";\nRELATE person:one->feeds->cat:one SET at = time::now();\nRELATE dog:one->plays_with->cat:one SET at = time::now();\n\n-- Select from both 'feeds' and 'plays_with'\nSELECT <-(SELECT * FROM feeds, plays_with ORDER BY at) FROM cat:one;\n-- Or any graph table\nSELECT <-(SELECT * FROM ? ORDER BY at) FROM cat:one;\n```\n\n----------------------------------------\n\nTITLE: Displaying SurrealDB Version Command Help\nDESCRIPTION: This command shows the help information and usage instructions for the version command in the SurrealDB CLI.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/version.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsurreal version --help\n```\n\n----------------------------------------\n\nTITLE: Using array::pop Function in SurrealQL\nDESCRIPTION: The array::pop function removes a value from the end of an array and returns it. If the array is empty, NONE is returned.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/array.mdx#2025-04-16_snippet_35\n\nLANGUAGE: surql\nCODE:\n```\narray::pop(array) -> value\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN array::pop([ 1, 2, 3, 4 ]);\n\n4\n```\n\n----------------------------------------\n\nTITLE: Using math::tan Function in SurrealQL\nDESCRIPTION: Calculates the tangent of a number in radians.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_36\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::tan(1);\n```\n\n----------------------------------------\n\nTITLE: Specific Version SurrealDB Upgrade\nDESCRIPTION: Upgrades SurrealDB to a specified version using the --version flag\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/upgrade.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsurreal upgrade --version [VERSION]\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Student Struct in Rust\nDESCRIPTION: Basic struct definition for a Student type with serialization and deserialization traits.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/flexible-typing.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Serialize, Deserialize)]\nstruct Student {\n    name: String,\n    class_id: u32,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bun for SurrealDB Documentation\nDESCRIPTION: Command to install the required packages for the SurrealDB documentation using Bun package manager. Requires Bun to be installed and Node.js v20.0.0 or higher.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun i\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with debug logging\nDESCRIPTION: This command starts the SurrealDB server with debug level logging for increased verbosity.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/tikv.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --log debug tikv://127.0.0.1:2379\n```\n\n----------------------------------------\n\nTITLE: Creating SurrealML Header with Input/Output Columns in Rust\nDESCRIPTION: Rust code demonstrating how to create a header for a SurrealML file with input columns and an output column.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/storage.mdx#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nlet mut header = Header::fresh();\nheader.add_column(String::from(\"squarefoot\"));\nheader.add_column(String::from(\"num_floors\"));\nheader.add_output(String::from(\"house_price\"), None);\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Version Command Help Output\nDESCRIPTION: This is the output of the 'surreal version --help' command, showing the usage, options, and descriptions for the version command.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/version.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nOutput the command-line tool and remote server version information\n\nUsage: surreal version [OPTIONS]\n\nOptions:\n  -e, --endpoint <ENDPOINT>  Remote database server url to connect to [aliases: conn]\n  -l, --log <LOG>            The logging level for the command-line tool [env: SURREAL_LOG=] [default: info] [possible values: none, full, error, warn, info, debug, trace]\n  -h, --help                 Print help\n```\n\n----------------------------------------\n\nTITLE: Showing Floating Point Rounding Errors in SurrealDB\nDESCRIPTION: This example demonstrates the common floating point rounding errors that can occur when performing arithmetic operations. These errors are inherent to floating point representation in computers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/numbers.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nRETURN 0.3 + 0.3 + 0.3 + 0.1;\n1.0000000000000002\n```\n\n----------------------------------------\n\nTITLE: Defining Informational Path Documentation for API Endpoints in Rust\nDESCRIPTION: A function that returns a helpful string containing all available API endpoints and example curl commands. This serves as documentation for users accessing the root path of the API.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/axum.mdx#2025-04-16_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n    pub async fn paths() -> &'static str {\n        r#\"\n-----------------------------------------------------------------------------------------------------------------------------------------\n        PATH                |           SAMPLE COMMAND                                                                                  \n-----------------------------------------------------------------------------------------------------------------------------------------\n/session: See session data  |  curl -X GET    -H \"Content-Type: application/json\"                      http://localhost:8080/session\n                            |\n/person/{id}:               |\n  Create a person           |  curl -X POST   -H \"Content-Type: application/json\" -d '{\"name\":\"John\"}' http://localhost:8080/person/one\n  Update a person           |  curl -X PUT    -H \"Content-Type: application/json\" -d '{\"name\":\"Jane\"}' http://localhost:8080/person/one\n  Get a person              |  curl -X GET    -H \"Content-Type: application/json\"                      http://localhost:8080/person/one\n  Delete a person           |  curl -X DELETE -H \"Content-Type: application/json\"                      http://localhost:8080/person/one\n                            |\n/people: List all people    |  curl -X GET    -H \"Content-Type: application/json\"                      http://localhost:8080/people\n\n/new_user:  Create a new record user\n/new_token: Get instructions for a new token if yours has expired\"#\n    }\n```\n\n----------------------------------------\n\nTITLE: Embedding Surrealist Video Guide in JSX\nDESCRIPTION: JSX code for embedding a detailed YouTube tutorial video about Surrealist. The iframe includes configuration for responsive display and security attributes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n\twidth=\"100%\"\n\tsrc=\"https://www.youtube.com/embed/VQnHYKNiPso?si=wxkBYCpiIVqXQB1J\"\n\ttitle=\"Surrealist\"\n\tframeborder=\"0\"\n\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n\treferrerpolicy=\"strict-origin-when-cross-origin\"\n\tstyle={{ aspectRatio: 1.7 }}\n\tallowfullscreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tokio Runtime for SurrealDB in Rust\nDESCRIPTION: Rust code to configure the Tokio asynchronous runtime with optimized settings for running SurrealDB, including multi-threading and increased stack size.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/performance-best-practices.mdx#2025-04-16_snippet_4\n\nLANGUAGE: rs\nCODE:\n```\nfn main() {\n\ttokio::runtime::Builder::new_multi_thread()\n    .enable_all()\n    .thread_stack_size(10 * 1024 * 1024) // 10MiB\n    .build()\n    .unwrap()\n    .block_on(async {\n      // Your application code\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Cognito Pre-Token Generation Lambda (v2.x)\nDESCRIPTION: Lambda function that adds custom claims to AWS Cognito tokens for SurrealDB v2.x integration using DEFINE ACCESS method.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/integrate-aws-cognito-as-authentication-provider.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst handler = async (event) => {\n  event.response = {\n    claimsOverrideDetails: {\n      claimsToAddOrOverride: {\n        ac: \"cognito\", // The access method that has been defined using DEFINE ACCESS.\n        ns: \"test\", // The namespace selected when calling DEFINE ACCESS.\n        db: \"test\", // The database selected when calling DEFINE ACCESS.\n      },\n    },\n  };\n\n  return event;\n};\n\nexport { handler };\n```\n\n----------------------------------------\n\nTITLE: Server Startup Log Output\nDESCRIPTION: Example of successful server startup logs showing authentication status and server initialization.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/running/file.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsurreal start --user root --pass root --bind 0.0.0.0:8080 rocksdb:mydatabase.db\n2023-08-30T15:06:34.788739Z  INFO surreal::dbs: ✅🔒 Authentication is enabled 🔒✅\n2023-08-30T15:06:34.788821Z  INFO surrealdb::kvs::ds: Starting kvs store in file:mydatabase.db\n2023-08-30T15:06:34.788859Z  INFO surrealdb::kvs::ds: Started kvs store in file:mydatabase.db\n2023-08-30T15:06:34.789222Z  INFO surrealdb::kvs::ds: Initial credentials were provided and no existing root-level users were found: create the initial user 'root'.\n2023-08-30T15:06:35.205123Z  INFO surrealdb::node: Started node agent\n2023-08-30T15:06:35.205827Z  INFO surrealdb::net: Started web server on 0.0.0.0:8080\n```\n\n----------------------------------------\n\nTITLE: Converting Milliseconds to Duration in SurrealQL\nDESCRIPTION: The duration::from::millis function converts a numeric amount of milliseconds into a duration that represents milliseconds. It takes a number as input and returns a duration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/duration.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\nduration::from::millis(number) -> duration\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN duration::from::millis(3);\n\n3ms\n```\n\n----------------------------------------\n\nTITLE: Using time::micros Function in SurrealQL\nDESCRIPTION: The time::micros function extracts the microseconds as a number from a datetime, or from the current date if no datetime argument is present.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/time.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\ntime::micros(option<datetime>) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN time::micros(d\"1987-06-22T08:30:45Z\");\n\n551349045000000\n```\n\n----------------------------------------\n\nTITLE: Front Matter Configuration for Math Functions Documentation\nDESCRIPTION: YAML front matter configuration for the documentation page, specifying the sidebar position, labels, title and description for math functions documentation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsidebar_position: 11\nsidebar_label: Math functions\ntitle: Math functions | SurrealQL\ndescription: These functions can be used when analysing numeric data and numeric collections.\n---\n```\n\n----------------------------------------\n\nTITLE: Embedding Surrealist Introduction Video in JSX\nDESCRIPTION: JSX code for embedding a YouTube video that introduces Surrealist. The iframe includes aspect ratio styling and various attributes for proper display and security.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealist/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n\twidth=\"100%\"\n\tsrc=\"https://www.youtube.com/embed/l0_lj-ILVhE?si=gNnTmumSuJLBjr2q\"\n\ttitle=\"Surrealist\"\n\tframeborder=\"0\"\n\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n\treferrerpolicy=\"strict-origin-when-cross-origin\"\n\tstyle={{ aspectRatio: 1.7 }}\n\tallowfullscreen\n\tclass=\"mt-8\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Inserting Records into SurrealDB using JavaScript\nDESCRIPTION: Inserts one or multiple records into the SurrealDB database. This method is similar to create but can handle bulk insertions.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.insert<T,U>(thing,data)\n```\n\n----------------------------------------\n\nTITLE: Defining unset Method in Python SurrealDB SDK\nDESCRIPTION: Method signature for unsetting a variable in a SurrealDB connection. Takes a required key parameter that specifies the variable name to be removed.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/unset.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb.unset(key)\n```\n\n----------------------------------------\n\nTITLE: Creating and Verifying TiDB Cluster\nDESCRIPTION: These commands apply the TiDB cluster configuration and verify the deployment by checking the status of the created pods.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/azure.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl apply -f tikv-cluster.yaml\n\n$ kubectl get tidbcluster\n\n$ kubectl get pods\n```\n\n----------------------------------------\n\nTITLE: Declaring Upsert Method Signature in TypeScript\nDESCRIPTION: TypeScript method signature for the upsert operation that takes a thing (table name or RecordId) and data parameters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/upsert.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndb.upsert<T,U>(thing, data)\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB CLI\nDESCRIPTION: Command to connect to SurrealDB CLI with specified namespace and database\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/concepts/transaction.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal sql --user root --pass root --ns namespace --db database --pretty\n```\n\n----------------------------------------\n\nTITLE: Defining Method Syntax for use_ns() and use_db() in SurrealDB Rust SDK\nDESCRIPTION: This snippet shows the method syntax for chaining use_ns() and use_db() methods to switch to a specific namespace and database in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/use.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndb.use_ns(ns).use_db(db)\n```\n\n----------------------------------------\n\nTITLE: Querying SurrealDB with C#\nDESCRIPTION: Runs a set of SurrealQL statements against the database, returning results of type T.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/methods/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\ndb.Query<T>(sql)\n```\n\n----------------------------------------\n\nTITLE: Data Management in SurrealDB with Rust\nDESCRIPTION: These methods are used for exporting and importing data in SurrealDB. They allow exporting the database to a file or stream and importing data from a file.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/methods/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\ndb.export()\ndb.import()\n```\n\n----------------------------------------\n\nTITLE: Error Response Example in SurrealDB\nDESCRIPTION: Shows the error response format when attempting to create duplicate definitions without IF NOT EXISTS clause.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/actix.mdx#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nResponse { client: Surreal { router: OnceLock(Router { sender: Sender { .. }, last_id: 4, features: {LiveQueries} }), engine: PhantomData<surrealdb::api::engine::any::Any> }, results: {0: (Stats { execution_time: Some(252.625µs) }, Err(Api(Query(\"The table 'person' already exists\")))), 1: (Stats { execution_time: Some(79.167µs) }, Err(Api(Query(\"The field 'name' already exists\")))), 2: (Stats { execution_time: Some(69.5µs) }, Err(Api(Query(\"The field 'created_by' already exists\")))), 3: (Stats { execution_time: Some(73.625µs) }, Err(Api(Query(\"The index 'unique_name' already exists\")))), 4: (Stats { execution_time: Some(73.583µs) }, Err(Api(Query(\"The access method 'account' already exists in the database 'test'\"))))}, live_queries: {} }\n```\n\n----------------------------------------\n\nTITLE: Error Response Example in SurrealDB\nDESCRIPTION: Shows the error response format when attempting to redefine existing database objects without IF NOT EXISTS clause.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nResponse { client: Surreal { router: OnceLock(Router { sender: Sender { .. }, last_id: 4, features: {LiveQueries} }), engine: PhantomData<surrealdb::api::engine::any::Any> }, results: {0: (Stats { execution_time: Some(252.625µs) }, Err(Api(Query(\"The table 'person' already exists\")))), 1: (Stats { execution_time: Some(79.167µs) }, Err(Api(Query(\"The field 'name' already exists\")))), 2: (Stats { execution_time: Some(69.5µs) }, Err(Api(Query(\"The field 'created_by' already exists\")))), 3: (Stats { execution_time: Some(73.625µs) }, Err(Api(Query(\"The index 'unique_name' already exists\")))), 4: (Stats { execution_time: Some(73.583µs) }, Err(Api(Query(\"The access method 'account' already exists in the database 'test'\"))))}, live_queries: {} }\n```\n\n----------------------------------------\n\nTITLE: String Prefix Examples in SurrealQL\nDESCRIPTION: Examples demonstrating string prefixes in SurrealQL v2.0. This snippet shows how regular strings with and without the 's' prefix are equivalent.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/strings.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nRETURN \"5:20\";\nRETURN s\"5:20\";\nRETURN \"5:20\" == s\"5:20\";\n```\n\n----------------------------------------\n\nTITLE: Graph Relations with Edge Counting in SurrealDB\nDESCRIPTION: This snippet demonstrates an alternative approach to weighted relationships using multiple graph edges and counting them. It creates NPC records, establishes multiple 'greeted' relationships, and queries relationship strength by counting edges.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\n-- Create 4 'npc' records\nCREATE |npc:1..4|;\n\nFOR $npc IN SELECT * FROM npc {\n    -- Give each npc 20 random interactions\n    FOR $_ IN 0..20 {\n      -- Looks for a random NPC, use array::complement to filter out self\n      LET $counterpart = rand::enum(array::complement((SELECT * FROM npc), [$npc]));\n      RELATE $npc->greeted->$counterpart;\n    };\n};\n\nSELECT \n\tcount() AS like_strength, \n\tin AS npc, \n\tout AS counterpart\nFROM greeted\nGROUP BY npc, counterpart;\n```\n\n----------------------------------------\n\nTITLE: Calculating OSA Distance in SurrealQL\nDESCRIPTION: The string::distance::osa_distance function calculates the Optimal String Alignment (OSA) distance between two strings. It takes two input strings and returns an integer representing the distance.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_11\n\nLANGUAGE: surql\nCODE:\n```\nLET $first     = \"In a hole in the ground there lived a hobbit\";\nLET $same      = \"In a hole in the ground there lived a hobbit\";\nLET $close     = \"In a hole in the GROUND there lived a Hobbit\";\nLET $different = \"A narrow passage holds four hidden treasures\";\nLET $short     = \"Hi I'm Brian\";\n\n-- Returns 0\nstring::distance::osa_distance($first, $same);\n-- Returns 7\nstring::distance::osa_distance($first, $close);\n-- Returns 34\nstring::distance::osa_distance($first, $different);\n-- Returns 38\nstring::distance::osa_distance($first, $short);\n```\n\n----------------------------------------\n\nTITLE: String Greeting Function with Return Type\nDESCRIPTION: Demonstrates defining a function with explicit return type that creates a greeting message.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/closures.mdx#2025-04-16_snippet_2\n\nLANGUAGE: surql\nCODE:\n```\n-- Define a function that greets a person\n$greet = |$name: string| -> string { \"Hello, \" + $name + \"!\" };\nRETURN $greet(\"Alice\");   -- Returns \"Hello, Alice!\"\n```\n\n----------------------------------------\n\nTITLE: Searching Errors with Custom Mapper Analyzer in SurrealQL\nDESCRIPTION: This example shows how to define an index using a custom error filter analyzer and perform a search query. It demonstrates the practical application of a mapper-based analyzer in data indexing and retrieval.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/analyzer.mdx#2025-04-16_snippet_12\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE ANALYZER error_filter FILTERS mapper('error_filter.txt');\nDEFINE INDEX OVERWRITE errors ON TABLE error FIELDS message SEARCH ANALYZER error_filter;\n\nFOR $message IN [\"File not found\", \"Datei nicht gefunden\", \"Zeitüberschreitung\"] {\n\tCREATE error SET message = $message.replace(' ', '_'), at = time::now();\n};\n\nSELECT * FROM error WHERE message @@ \"NOT_FOUND\";\n```\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tat: d'2024-11-13T03:56:12.039252Z',\n\t\tid: error:acbc044syhnx54wzs3n9,\n\t\tmessage: 'File_not_found'\n\t},\n\t{\n\t\tat: d'2024-11-13T03:56:12.043643Z',\n\t\tid: error:5ifxic9s750x24ts4zof,\n\t\tmessage: 'Datei_nicht_gefunden'\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Example of Infinite Recursion with Futures in SurrealQL\nDESCRIPTION: This example demonstrates how a future can cause infinite recursion when it references a field that contains itself. The query fails with an error about excessive computation depth.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/futures.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nCREATE |person:10| RETURN NONE;\n\nDEFINE FIELD random_friend\n    ON person\n    VALUE <future> { (SELECT * FROM ONLY person ORDER BY RAND() LIMIT 1) };\n\nCREATE person;\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling Implementation\nDESCRIPTION: Implementation of custom error type with Rocket response handling and SurrealDB error conversion\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nmod error {\n    use rocket::http::Status;\n    use rocket::response::{self, Responder, Response};\n    use rocket::Request;\n    use thiserror::Error;\n\n    #[derive(Error, Debug)]\n    pub enum Error {\n        #[error(\"database error\")]\n        Db,\n    }\n\n    impl<'r> Responder<'r, 'static> for Error {\n        fn respond_to(self, _: &'r Request<'_>) -> response::Result<'static> {\n            let error_message = format!(r#\"{{ \"error\": \"{self}\" }}\"#);\n            Response::build()\n                .status(Status::InternalServerError)\n                .header(rocket::http::ContentType::JSON)\n                .sized_body(error_message.len(), std::io::Cursor::new(error_message))\n                .ok()\n        }\n    }\n\n    impl From<surrealdb::Error> for Error {\n        fn from(error: surrealdb::Error) -> Self {\n            eprintln!(\"{error}\");\n            Self::Db\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying JSON Patch to Specific Record in Python\nDESCRIPTION: This example shows how to use the `.patch()` method to update a specific record. It modifies multiple fields of a record with ID 'tobie' in the 'person' table using various JSON Patch operations.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/patch.mdx#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nawait db.patch(RecordID('person', 'tobie'), [\n\t{ \"op\": 'replace', \"path\": '/settings/active', \"value\": false },\n\t{ \"op\": 'add', \"path\": '/tags', \"value\": ['developer', 'engineer'] },\n\t{ \"op\": 'remove', \"path\": '/temp' },\n])\n```\n\n----------------------------------------\n\nTITLE: Using crypto::sha256 Hash Function in SurrealQL\nDESCRIPTION: Returns the sha256 hash of the input string value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/crypto.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\ncrypto::sha256(string) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN crypto::sha256(\"tobie\");\n\n\"33fe1859daba927ea5674813adc1cf34b9e2795f2b7e91602fae19c0d0c493af\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'use' Method Parameter Combinations in SurQL\nDESCRIPTION: Shows various combinations of namespace and database parameters and their effects when using the 'use' method in SurrealDB.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\n[none, none]     -- Won't change ns or db\n[\"test\", none]   -- Change ns to test\n[none, \"test\"]   -- Change db to test\n[\"test\", \"test\"] -- Change ns and db to test\n\n[none, null]     -- Will only unset the database\n[null, none]     -- Will throw an error, you cannot unset only the database\n[null, null]     -- Will unset both ns and db\n[\"test\", null]   -- Change ns to test and unset db\n```\n\n----------------------------------------\n\nTITLE: Cargo Dependencies Configuration\nDESCRIPTION: Required dependencies for the Rust project including Egui, SurrealDB, and utility crates with their specific versions and features.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/egui.mdx#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nanyhow = \"1.0.91\"\neframe = \"0.29.1\"\negui = \"0.29.1\"\nfaker_rand = \"0.1.1\"\nrand = \"0.8.5\"\nserde = { version = \"1.0.209\", features = [\"derive\"] }\nserde_json = \"1.0.132\"\nsurrealdb = \"2.0.4\"\ntokio = { version = \"1.41.0\", features = [\"rt\"] }\n```\n\n----------------------------------------\n\nTITLE: Using SurrealDB JavaScript SDK with WebAssembly Engine\nDESCRIPTION: Complete example demonstrating how to set up and use the SurrealDB JavaScript SDK with the WebAssembly engine, including connecting to in-memory and IndexedDB databases.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/engines/wasm.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Surreal } from 'surrealdb';\nimport { surrealdbWasmEngines } from '@surrealdb/wasm';\n\n// Enable the WebAssembly engines\nconst db = new Surreal({\n    engines: surrealdbWasmEngines(),\n});\n\n// Now we can start SurrealDB as an in-memory database\n\nawait db.connect(\"mem://\");\n\n// Or we can start a persisted IndexedDB database\n\nawait db.connect(\"indxdb://demo\");\n\n// Now use the JavaScript SDK as normal.\n```\n\n----------------------------------------\n\nTITLE: Binding Parameters in .NET (C#) SDK\nDESCRIPTION: Demonstrates parameter binding in the .NET SDK for SurrealDB, showing how the Query method automatically handles parameter binding while RawQuery should be avoided for user input.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Do this:\nstring name = \"tobie\"; // User-controlled input.\nvar result = await db.Query($\"CREATE person CONTENT name = {name};\");\n\n// Translated as \"CREATE person CONTENT name = $p0;\"\n// with the parameter $p0 having the value \"tobie\"\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// highlight-next-line\n// Do NOT do this:\nstring name = \"tobie\"; // User-controlled input.\nvar result = await db.RawQuery($\"CREATE person CONTENT name = \"{name}\";\");\n```\n\n----------------------------------------\n\nTITLE: Method Chaining for Type Checking in SurrealQL\nDESCRIPTION: Method chaining allows functions to be called using the . dot operator on a value of a certain type instead of the full path of the function followed by the value. This feature was introduced in v2.0.0.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/type.mdx#2025-04-16_snippet_24\n\nLANGUAGE: surql\nCODE:\n```\n-- Traditional syntax\ntype::is::record(r\"person:aeon\", \"cat\")\n\n-- Method chaining syntax\nr\"person:aeon\".is_record(\"cat\");\n```\n\nLANGUAGE: surql\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Using crypto::sha512 Hash Function in SurrealQL\nDESCRIPTION: Returns the sha512 hash of the input string value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/crypto.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\ncrypto::sha512(string) -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN crypto::sha512(\"tobie\");\n\n\"39f0160c946c4c53702112d6ef3eea7957ea8e1c78787a482a89f8b0a8860a20ecd543432e4a187d9fdcd1c415cf61008e51a7e8bf2f22ac77e458789c9cdccc\"\n```\n\n----------------------------------------\n\nTITLE: Updating a Record in SurrealDB (JSON)\nDESCRIPTION: Shows how to use the 'update' method to replace the data of a specific record in the 'person' table. This method replaces the entire record with the new data provided.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"update\",\n    \"params\": [\n        \"person:8s0j0bbm3ngrd5c9bx53\",\n        {\n            \"name\": \"John Doe\"\n        }\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"result\": {\n        \"id\": \"person:8s0j0bbm3ngrd5c9bx53\",\n        \"name\": \"John Doe\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using IF NOT EXISTS Clause in DEFINE SCOPE in SurrealQL\nDESCRIPTION: This snippet illustrates the use of the IF NOT EXISTS clause when defining a scope. This clause, introduced in v1.3.0, allows creating a scope only if it doesn't already exist, preventing errors if the scope is already defined.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/scope.mdx#2025-04-16_snippet_2\n\nLANGUAGE: SurrealQL\nCODE:\n```\n-- Create a SCOPE if it does not already exist\nDEFINE SCOPE IF NOT EXISTS example;\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP HEAD Function in SurrealQL\nDESCRIPTION: API definition for the http::head() function which performs remote HTTP HEAD requests and returns null. It accepts either a URL string alone or a URL string and an object containing request headers.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/http.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nhttp::head(string) -> null\n```\n\nLANGUAGE: surql\nCODE:\n```\nhttp::head(string, object) -> null\n```\n\n----------------------------------------\n\nTITLE: Importing Surreal Deal Store Dataset with CLI\nDESCRIPTION: Command to import the full Surreal Deal Store dataset into SurrealDB using the CLI import command. Connects to a local server and imports data into the test namespace and database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/demo.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal import --conn http://localhost:8000 --user root --pass root --ns test --db test surreal-deal-store.surql\n```\n\n----------------------------------------\n\nTITLE: Binding Parameters in JavaScript SDK\nDESCRIPTION: Shows how to securely pass parameters to SurrealDB queries using the JavaScript SDK, separating the query from the parameter values to prevent injection attacks.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/security-best-practices.mdx#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// Do this:\nconst name = \"tobie\"; // User-controlled input.\nconst result = await db.query(\n\t'CREATE person CONTENT name = $name;',\n\t{ name }\n);\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// highlight-next-line\n// Do NOT do this:\nconst name = \"tobie\"; // User-controlled input.\nconst result = await db.query(`CREATE person CONTENT name = \"${name}\";`);\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB SDK with Gradle (Groovy)\nDESCRIPTION: Adds the SurrealDB Java SDK as a dependency in a Gradle project using Groovy syntax. Specifies the SDK version and includes it in the dependencies block.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-java/start.mdx#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\next {\n    surrealdbVersion = \"0.2.1\"\n}\n\ndependencies {\n    implementation \"com.surrealdb:surrealdb:${surrealdbVersion}\"\n}\n```\n\n----------------------------------------\n\nTITLE: RawQuery Method Syntax in SurrealDB .NET SDK\nDESCRIPTION: Method signature for executing raw SurrealQL statements with parameters\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/writing-surrealql.mdx#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.RawQuery(sql, params)\n```\n\n----------------------------------------\n\nTITLE: Output After Record Deletion Affecting Graph Edges\nDESCRIPTION: Shows the remaining relationship after deleting a record that was part of a graph structure, demonstrating automatic edge cleanup.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/relate.mdx#2025-04-16_snippet_20\n\nLANGUAGE: surql\nCODE:\n```\n[\n\t{\n\t\tid: likes:55szjin5yfqwl4sbmy1f,\n\t\tin: person:three,\n\t\tout: person:one\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Bidirectional Relations in SurrealDB\nDESCRIPTION: This snippet shows how to query bidirectional relations using the <-> operator. It also demonstrates how to exclude a record's own ID from the results using the array::complement() function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_15\n\nLANGUAGE: surql\nCODE:\n```\nSELECT *, array::complement(<->friends_with<->person, [id]) AS friends FROM person;\n```\n\n----------------------------------------\n\nTITLE: Using session::ac() to retrieve user access method in SurrealQL\nDESCRIPTION: The session::ac() function returns the current user's access method. This function was previously known as session::sc() in versions before SurrealDB 2.0.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/session.mdx#2025-04-16_snippet_0\n\nLANGUAGE: surql\nCODE:\n```\nsession::ac() -> string\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN session::ac();\n\n\"user\"\n```\n\n----------------------------------------\n\nTITLE: Defining Person Table with Permissions in SurrealDB\nDESCRIPTION: Demonstrates how to define a person table with schema constraints and field-level permissions based on user authentication.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE TABLE IF NOT EXISTS person SCHEMALESS\n    PERMISSIONS FOR \n        CREATE, SELECT WHERE $auth,\n        FOR UPDATE, DELETE WHERE created_by = $auth;\nDEFINE FIELD IF NOT EXISTS name ON TABLE person TYPE string;\nDEFINE FIELD IF NOT EXISTS created_by ON TABLE person VALUE $auth READONLY;\n```\n\n----------------------------------------\n\nTITLE: Traversing Relationships in SurrealQL (Neo4j Equivalent)\nDESCRIPTION: Shows how to traverse relationships between records in SurrealQL compared to Neo4j's pattern matching. Uses the -> operator to navigate graph relationships.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_15\n\nLANGUAGE: SurrealQL\nCODE:\n```\nSELECT name, ->order->product.name FROM person\n```\n\n----------------------------------------\n\nTITLE: Selecting All Records in SurrealQL (Neo4j Equivalent)\nDESCRIPTION: The SurrealQL equivalent of retrieving all nodes with a specific label in Neo4j. Uses the SELECT statement to fetch all records from a table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/models/graph.mdx#2025-04-16_snippet_8\n\nLANGUAGE: SurrealQL\nCODE:\n```\nSELECT * FROM person\n```\n\n----------------------------------------\n\nTITLE: Creating Test Registration Record\nDESCRIPTION: SurrealQL query to create a new registration record with sample user data\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/connect-to-surrealdb-via-ngrok-tunnel.mdx#2025-04-16_snippet_3\n\nLANGUAGE: surql\nCODE:\n```\nCREATE registration SET \nfull_name = 'John Doe',\nemail = 'johndoe@gmail.com',\naddress_line1 = 'Room number 1, Hogwarts',\naddress_line2 = 'Near Diagon Alley',\ncity = 'Hogwarts',\ncountry = 'England';\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Data with Conditions in SurrealDB\nDESCRIPTION: Demonstrates how to query nested data structures with conditions, extracting names of friends over 18 years old.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/idioms.mdx#2025-04-16_snippet_41\n\nLANGUAGE: surql\nCODE:\n```\nSELECT friends[WHERE age > 18].name FROM person WHERE id = r'person:5';\n```\n\n----------------------------------------\n\nTITLE: SurrealDB General Environment Variables\nDESCRIPTION: HTML table structure defining core SurrealDB environment variables and their corresponding commands, arguments and details.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/env.mdx#2025-04-16_snippet_3\n\nLANGUAGE: markup\nCODE:\n```\n<code>SURREAL_NO_IDENTIFICATION_HEADERS</code>\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for SurrealDB Documentation\nDESCRIPTION: Command to build and generate static content into the 'build' directory, which can then be served using any static contents hosting service.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Updating SurrealDB to the latest version\nDESCRIPTION: This command updates an existing SurrealDB installation to the latest version by running the same install script used for initial installation.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/installation/linux.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSf https://install.surrealdb.com | sh\n```\n\n----------------------------------------\n\nTITLE: Converting Days to Duration in SurrealQL\nDESCRIPTION: The duration::from::days function converts a numeric amount of days into a duration that represents days. It takes a number as input and returns a duration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/duration.mdx#2025-04-16_snippet_9\n\nLANGUAGE: surql\nCODE:\n```\nduration::from::days(number) -> duration\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN duration::from::days(3);\n\n3d\n```\n\n----------------------------------------\n\nTITLE: Managing Deleted Links in SurrealDB\nDESCRIPTION: Demonstrates behavior of graph links when referenced records are deleted and shows how to handle deleted record references.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/graph_relations.mdx#2025-04-16_snippet_23\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD comments ON person TYPE option<array<record<comment>>> REFERENCE ON DELETE THEN {\n    UPDATE $this SET\n        deleted_comments += $reference,\n        comments -= $reference;\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Table to JSON in Python for SurrealDB\nDESCRIPTION: Demonstrates how a Table object is represented as a string when converted to JSON using the json.dumps() function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/data-types.mdx#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntable = Table(\"table\")\njson.dumps(table) # \"table\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving SurrealDB Version using Golang SDK\nDESCRIPTION: This snippet demonstrates how to use the '.Version()' method to retrieve the version of the SurrealDB instance. The method takes no arguments and returns the version information.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-golang/methods/version.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndb.Version()\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for SurrealDB Documentation\nDESCRIPTION: Command to start a local development server that opens a browser window. Changes to the documentation are reflected live without restarting the server.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealML with PyTorch Only\nDESCRIPTION: Command to install SurrealML with only PyTorch dependencies using pip from the GitHub repository.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealml/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"git+https://github.com/surrealdb/surrealml#egg=surrealml[torch]\"\n```\n\n----------------------------------------\n\nTITLE: Complex Record ID Output in SurrealQL\nDESCRIPTION: Shows how complex character record IDs appear in query output, enclosed by ⟨ and ⟩ characters to indicate parts with complex characters.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/datamodel/ids.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\n-------- Query --------\n\n[\n\t{\n\t\tauthor: person:tobie,\n\t\tid: article:⟨8424486b-85b3-4448-ac8d-5d51083391c7⟩,\n\t\ttime: d'2025-02-18T01:48:46.364Z'\n\t}\n]\n\n-------- Query --------\n\n[\n\t{\n\t\tauthor: person:⟨Lech_Wałęsa⟩,\n\t\tid: ⟨Artykuł⟩:100\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Installing TiDB Operator CRDs\nDESCRIPTION: Command to install Custom Resource Definitions (CRDs) for TiDB operator.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/deployment/google.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f https://raw.githubusercontent.com/pingcap/tidb-operator/v1.5.0/manifests/crd.yaml\n```\n\n----------------------------------------\n\nTITLE: Example Request for 'info' Method in SurrealDB RPC Protocol\nDESCRIPTION: Shows how to format a request to retrieve information about the currently authenticated user.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/integration/rpc.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"method\": \"info\"\n}\n```\n\n----------------------------------------\n\nTITLE: Killing Live Queries in SurrealDB Python SDK\nDESCRIPTION: Terminates a running live query in SurrealDB. This method is used to stop real-time data streaming for a specific query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndb.kill(query_uuid)\n```\n\n----------------------------------------\n\nTITLE: Importing Data into SurrealDB in JavaScript\nDESCRIPTION: Imports data into a specified Namespace and Database in SurrealDB. This method is used for restoring backups or initializing data.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/methods/index.mdx#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\ndb.import()\n```\n\n----------------------------------------\n\nTITLE: Fuzzy Equality Operators in SurrealDB\nDESCRIPTION: This example shows the usage of fuzzy equality operators in SurrealDB for approximate string matching.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/reference-guide/full-text-search.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\n\"big\" ~ \"Big\";\n\"big\" !~ \"small\";\n[\"Big\", \"small\"] ?~ \"big\";\n[\"Big\", \"big\"] *~ \"big\";\n```\n\n----------------------------------------\n\nTITLE: Deleting Records in SurrealDB using Python\nDESCRIPTION: Deletes all records or a specific record from the SurrealDB database. This method is used to remove data from the database.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\ndb.delete(thing,data)\n```\n\n----------------------------------------\n\nTITLE: Converting Duration to Seconds in SurrealQL\nDESCRIPTION: The duration::secs function counts how many seconds fit into a duration. It takes a duration as input and returns a number.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/duration.mdx#2025-04-16_snippet_6\n\nLANGUAGE: surql\nCODE:\n```\nduration::secs(duration) -> number\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN duration::secs(3w);\n\n1814400\n```\n\n----------------------------------------\n\nTITLE: Base64 Decode Function Definition\nDESCRIPTION: API definition for the encoding::base64::decode() function that converts base64 string back to bytes.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/encoding.mdx#2025-04-16_snippet_4\n\nLANGUAGE: surql\nCODE:\n```\nencoding::base64::decode(string) -> bytes\n```\n\n----------------------------------------\n\nTITLE: Installing @tanstack/solid-query Package\nDESCRIPTION: Commands for installing the @tanstack/solid-query package using different package managers to manage asynchronous connection states.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-javascript/frameworks/solidjs.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun install @tanstack/solid-query\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tanstack/solid-query\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tanstack/solid-query\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @tanstack/solid-query\n```\n\n----------------------------------------\n\nTITLE: Advanced GraphQL Query Examples\nDESCRIPTION: Demonstrates various GraphQL query patterns including limit, start, order, and filter.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  foo(limit: 1) {\n    id\n    val\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  foo(start: 1) {\n    id\n    val\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  foo(order: { desc: val }) {\n    id\n    val\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  foo(filter: { val: { eq: 42 } }) {\n    id\n    val\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ULID Validation in SurrealQL\nDESCRIPTION: Validates if a string is a valid ULID (Universally Unique Lexicographically Sortable Identifier). Returns a boolean value.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/string.mdx#2025-04-16_snippet_28\n\nLANGUAGE: surql\nCODE:\n```\nstring::is::ulid(string) -> bool\n```\n\nLANGUAGE: surql\nCODE:\n```\nRETURN string::is::ulid(\"01JCJB3TPQ50XTG32WM088NKJD\");\n```\n\n----------------------------------------\n\nTITLE: Using math::percentile Function in SurrealQL\nDESCRIPTION: Calculates the value below which a specified percentage of observations fall.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/functions/database/math.mdx#2025-04-16_snippet_23\n\nLANGUAGE: surql\nCODE:\n```\nRETURN math::percentile([1, 40, 60, 10, 2, 901], 50);\n```\n\n----------------------------------------\n\nTITLE: Email Validation Field Definition in SurrealDB\nDESCRIPTION: Example of adding email field validation to user table using string::is::email function.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-rust/frameworks/rocket.mdx#2025-04-16_snippet_8\n\nLANGUAGE: surql\nCODE:\n```\nDEFINE FIELD email ON TABLE user TYPE string ASSERT $value.is_email();\n```\n\n----------------------------------------\n\nTITLE: Example SurrealQL Query for Postman\nDESCRIPTION: A simple SurrealQL query example for use in Postman's request body. This INFO command returns database information and demonstrates the raw text format required when sending queries via Postman.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/surrealql/http.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nINFO for db\n```\n\n----------------------------------------\n\nTITLE: Creating Table Entry\nDESCRIPTION: JSON payload for creating a new entry in the Person table\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-tutorials/working-with-surrealdb-over-http-via-postman.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    age: 32,\n    name: 'John'\n}\n```\n\n----------------------------------------\n\nTITLE: Running the ASP.NET Core application\nDESCRIPTION: Command to start the ASP.NET Core application with the SurrealDB integration.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/dependency-injection.mdx#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Displaying Fix Command Help Information\nDESCRIPTION: Command to display help information for the fix command, showing available options and arguments.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/fix.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsurreal fix --help\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: Example of a basic GraphQL query to fetch data from a table.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealql/statements/define/config.mdx#2025-04-16_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  foo {\n    id\n    val\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Global SurrealDB Upgrade Command\nDESCRIPTION: Upgrades globally installed SurrealDB with elevated permissions\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/cli/upgrade.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo surreal upgrade\n```\n\n----------------------------------------\n\nTITLE: Using GetCreatedRecords Method on SurrealDbLiveQuery in C#\nDESCRIPTION: Example of using the GetCreatedRecords method to iterate through only the created records from a live query.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-dotnet/core/streaming.mdx#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nawait using var liveQuery = await db.LiveRawQuery<Person>(\"LIVE SELECT * FROM person;\");\n\nawait foreach (var record in liveQuery.GetCreatedRecords())\n{\n    // Use the created record\n}\n```\n\n----------------------------------------\n\nTITLE: RawQuery Method Signature in C#\nDESCRIPTION: Displays the method signature for the RawQuery method in C#. This method runs SurrealQL statements against the database, supporting raw SQL queries with optional parameters and cancellation token.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-surrealdb/querying/sdks/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nawait db.RawQuery(sql, params)\n```\n\n----------------------------------------\n\nTITLE: Creating Records in SurrealDB using Python\nDESCRIPTION: Creates a new record in the SurrealDB database. This method is used to insert new data into a specified table or with a specific identifier.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/methods/index.mdx#2025-04-16_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ndb.create(thing,data)\n```\n\n----------------------------------------\n\nTITLE: Deleting Records from SurrealDB\nDESCRIPTION: Shows different approaches to delete records using the delete() method, either with direct ID reference or using RecordID/RecordStringId objects.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-php/core/data-querying.mdx#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$db->delete($person->id);\n```\n\nLANGUAGE: php\nCODE:\n```\n$id = StringRecordId::create(\"person:tobie\");\n$db->delete($id);\n\n$id = RecordId::create(\"person\", \"tobie\");\n$db->delete($id);\n```\n\n----------------------------------------\n\nTITLE: Using Parameters in SurrealDB Python Queries\nDESCRIPTION: Example showing how to set a complex parameter and use it in subsequent database queries. Demonstrates setting a dictionary as a parameter and accessing its values in queries.\nSOURCE: https://github.com/surrealdb/docs.surrealdb.com/blob/main/src/content/doc-sdk-python/concepts/parameters.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Assign the variable on the connection\ndb.let('name', {\n\t\"first\": 'Tobie',\n\t\"last\": 'Morgan Hitchcock',\n})\n\n# Use the variable in a subsequent query\ndb.query('CREATE person SET name = $name')\n\n# Use the variable in a subsequent query\ndb.query('SELECT * FROM person WHERE name.first = $name.first')\n```"
  }
]