[
  {
    "owner": "appwrite",
    "repo": "demos-for-vue",
    "content": "TITLE: Initializing Appwrite SDK in VueJS\nDESCRIPTION: JavaScript code to initialize the Appwrite SDK and create a session. This code should be placed in a separate file for easy importing.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-database/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Appwrite from  'appwrite'\nconst appwrite =  new Appwrite()\nappwrite\n  .setEndpoint('http://EndpointURL.example/') // Replace this with your endpoint\n  .setProject('ProjectID') // Replace this with your projectID\n \nlet promise = sdk.account.createSession('emailaddress', 'password'); // Replace with a appwrite account you created\n\npromise.then(function (response) {\n      console.log(`Successfully logged in as: ${response.name}`); // Success\n  }, function (error) {\n      console.error(error); // Failure\n  });\n \n \nexport { appwrite }\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload Functionality with Appwrite in Vue.js\nDESCRIPTION: Script section of the FileUploader component that handles file upload logic using Appwrite SDK. It includes state management for the upload process, file selection validation, and event emission to notify parent components when uploads complete.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-fileupload/README.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script>\nimport { appwrite } from '../utils'\n\nexport default {\n    data() {\n        return {\n            uploading: false\n        }\n    },\n    methods: {\n        uploadFile() {\n\t    if (this.uploading) { return }\n            if (this.$refs.fileUpload.files[0]) {\n                let promise = appwrite.storage.createFile(this.$refs.fileUpload.files[0], ['*'], ['*']);\n\n                this.uploading = true\n\n                promise.then((response) => {\n                    console.log(response); // Success\n                    this.uploading = false\n                    this.$emit(\"refreshData\")\n                }, function (error) {\n                    console.error(error); // Failure\n                    this.uploading = false\n                });\n            }\n        }\n    }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Fetching in VueJS Component\nDESCRIPTION: VueJS component code that imports the Appwrite SDK, sets up data properties, and implements a method to fetch tasks from the Appwrite database.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-database/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\nimport { appwrite } from './utils'\n\nexport default {\n name: 'App',\n components: {\n },\n data: function() {\n   return {\n    tasks: [],\n    newTask: ''\n   }\n },\n created: function() {\n   this.fetchTasks()\n },\n methods: {\n   fetchTasks: function() {\n    let promise = appwrite.database.listDocuments('CollectionID');\n\n    promise.then((response) => {\n        console.log(response); // Success\n        this.tasks = response.documents\n    }, function (error) {\n        console.log(error); // Failure\n    });\n   }\n }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing File Management Functions with Appwrite in Vue.js\nDESCRIPTION: Script section for the FileComponent that handles file download and deletion using Appwrite SDK. It receives file data as props from parent components and emits events when files are deleted to trigger list refreshes.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-fileupload/README.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script>\nimport { appwrite } from '../utils'\n\nexport default {\n    props: ['fileData'],\n    methods: {\n        downloadFile: function() {\n            let result = appwrite.storage.getFileDownload(this.fileData.$id);\n            var download = window.open(result, '_blank')\n            download.focus()\n        },\n        deleteFile: function() {\n            let promise = appwrite.storage.deleteFile(this.fileData.$id);\n\n            promise.then(() => {\n                this.$emit(\"refreshData\")\n            }, function (error) {\n                console.error(error)\n            });\n        }\n    }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Completion Toggle with Appwrite Database in Vue.js\nDESCRIPTION: Function that toggles a task's completion status in the Appwrite database using the updateDocument() API. It updates the task's 'done' property, maintains the existing permissions, and emits a refresh event to the parent component.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-database/README.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndoneTask: function() {\n    let promise = appwrite.database.updateDocument(this.data.$collection, this.data.$id, {\n        done: !this.data.done\n    }, ['*'], ['*']);\n\n    this.data.done = !this.data.done\n\n    promise.then(() => {\n        this.$emit('refreshData')\n    }, function(error) {\n        console.error(error);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Task Functionality\nDESCRIPTION: JavaScript function to add new tasks to the Appwrite database, including validation and state updates.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-database/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncreateNewTask: function() {\n    if (this.newTask === '') {\n        return\n    }\n\n    let promise = appwrite.database.createDocument('CollectionID', {\n        task: this.newTask,\n        done: false,\n        date: new Date()\n    }, ['*'], ['*']);\n\n    promise.then(() => {\n        this.fetchTasks()\n        this.newTask = ''\n    }, function(error) {\n        console.log(error); // Failure\n    });\n},\n```\n\n----------------------------------------\n\nTITLE: Initializing Appwrite SDK Configuration\nDESCRIPTION: Setup code for initializing the Appwrite SDK with API endpoint and project ID configuration in utils.js\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-locale_api/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Appwrite from \"appwrite\";\n\nlet sdk = new Appwrite();\n\nsdk\n  .setEndpoint(\"[API ENDPOINT]\") // Your API Endpoint\n  .setProject(\"[Your Project ID]\"); // Your project ID\n\nexport {sdk};\n```\n\n----------------------------------------\n\nTITLE: Appwrite SDK Initialization\nDESCRIPTION: JavaScript utility file for initializing Appwrite SDK with endpoint configuration and session creation.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-fileupload/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Appwrite from  'appwrite'\nconst appwrite =  new Appwrite()\nappwrite\n  .setEndpoint('http://EndpointURL.example/') // Replace this with your endpoint\n  .setProject('ProjectID') // Replace this with your projectID\n \nlet promise = sdk.account.createSession('emailaddress', 'password'); // Replace with a appwrite account you created\n\npromise.then(function (response) {\n      console.log(`Successfully logged in as: ${response.name}`); // Success\n  }, function (error) {\n      console.error(error); // Failure\n  });\n \n \nexport { appwrite }\n```\n\n----------------------------------------\n\nTITLE: Task Component Script Setup\nDESCRIPTION: JavaScript setup for task component including Appwrite integration and props definition.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-database/README.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\nimport { appwrite } from './../utils` // We use a ../ because we are within a folder (the component one.)\n\nexport default {\n  props: ['data'], // The data prop which we used in the template and will use in our methods is defined here.\n \n  // We will also create a method object for what comes next.\n  methods: {\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Task Deletion Functionality\nDESCRIPTION: JavaScript function to delete tasks from Appwrite database with event emission for data refresh.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-database/README.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndeleteTask: function() {\n    let promise = appwrite.database.deleteDocument(this.data.$collection, this.data.$id);\n\n    promise.then(() => {\n        this.$emit('refreshData')\n    }, function(error) {\n        console.error(error);\n    });\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue.js Template Structure\nDESCRIPTION: Core template structure for the To-Do list application using Vue.js syntax, including task list rendering and new task input form.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-database/README.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div class=\"TaskCore\">\n    <h1>Appwrite TO-DO List</h1>\n    <div v-for=\"data in tasks\" :key=\"data.task\">\n\t<!-- we will place the task component here -->\n    </div>\n    <div class=\"newTaskForm\">\n      <input v-model=\"newTask\" placeholder=\"Add New Task\">\n      <button v-on:click.prevent=\"createNewTask\"><span>+</span></button>\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue App Component Logic\nDESCRIPTION: JavaScript implementation of the main Vue component with Appwrite integration for file management.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-fileupload/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\nimport { appwrite } from './utils'\n\nexport default {\n name: 'App',\n components: {\n },\n data() {\n   return {\n     allFiles: []\n   }\n },\n created() {\n   this.getAllFiles()\n },\n methods: {\n   getAllFiles: function() {\n     let promise = appwrite.storage.listFiles();\n\n      promise.then((response) => {\n          console.log(response); // Success\n          this.allFiles = response.files\n      }, function (error) {\n          console.error(error); // Failure\n      });\n   }\n }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Implementation with Appwrite Locale API\nDESCRIPTION: Main Vue component implementation showing the integration with Appwrite Locale API, including template structure, script logic, and styling\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-locale_api/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<template id=\"app\">\n  <div>\n    <h1 class=\"header\">app<strong>write</strong> Locale API example</h1>\n    <div class=\"info\">\n      <h1>Here are you Location Details!</h1>\n      <p>\n        <strong>Your IP Address</strong>\n        : &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{ info.ip }}\n      </p>\n      <p>\n        <strong>Your Country</strong>\n        : &nbsp;&nbsp;&nbsp;{{ info.country }}\n      </p>\n      <p>\n        <strong>Your Country Code</strong>\n        : &nbsp;&nbsp;&nbsp;{{ info.countryCode }}\n      </p>\n      <p>\n        <strong>Your Continent</strong>\n        : &nbsp;&nbsp;&nbsp;{{ info.continent }}\n      </p>\n      <p>\n        <strong>Your Currency</strong>\n        : &nbsp;&nbsp;&nbsp;{{ info.currency }}\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { sdk } from \"./utils\";\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      info: {},\n    };\n  },\n  method: {\n    fetchApiData() {\n      let promise = sdk.locale.get();\n      promise.then(\n        function () {\n          this.setResults; // Success\n        },\n        function (error) {\n          console.log(error); // Failure\n        }\n      );\n    },\n    setResults(results) {\n      this.info = results;\n    },\n  },\n};\n</script>\n\n<style>\nbody {\n  background-color: #171d37;\n}\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n.header {\n  text-align: center;\n  font-family: \"Poppins\", sans-serif;\n  color: #f35884;\n  margin-left: 10%;\n}\n.info {\n  text-align: center;\n  margin-left: 35%;\n  width: 500px;\n  height: 400px;\n  background-color: white;\n  border-radius: 10px;\n  box-shadow: 0px 0px 10px #f35884;\n  font-family: \"Poppins\", sans-serif;\n}\n.info h1 {\n  padding-top: 50px;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating File Uploader Template in Vue.js\nDESCRIPTION: HTML template for a file uploader component that includes a hidden file input and a button to trigger file selection. The component shows upload status through button text changes and disables the button during upload.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-fileupload/README.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <div class=\"fileUploader\">\n        <input type=\"file\" ref=\"fileUpload\" v-on:change=\"uploadFile\" />\n        <button @click=\"$refs.fileUpload.click()\" :disabled=\"uploading\">{{this.uploading ? 'Uploading... ' : 'Upload File'}}</button>\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Task Component in Vue.js Template\nDESCRIPTION: HTML template code that integrates the Task component into the main application. It binds task data to the component and sets up an event listener for refreshing tasks when changes occur.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-database/README.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<Task v-bind:data=\"data\" v-on:refreshData='fetchTasks' />\n```\n\n----------------------------------------\n\nTITLE: Using FileComponent in Vue Template\nDESCRIPTION: HTML template code for implementing the FileComponent with binding to file data and an event listener for refreshing the file list when changes occur.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-fileupload/README.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<FileComponent v-bind:fileData=\"file\" v-on:refreshData=\"getAllFiles\" />\n```\n\n----------------------------------------\n\nTITLE: Task Component Template Structure\nDESCRIPTION: Vue.js template for individual task components with click handlers and conditional styling.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-database/README.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <div class=\"taskComponent\" v-on:click.self=\"doneTask\">\n        <div v-on:click.self=\"doneTask\" v-bind:class=\"!this.data.done ? 'taskName' : 'taskName taskDone'\">{{data.task}}</div>\n        <div class=\"taskDelete\" v-on:click=\"deleteTask\"><span /></div>\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating File Display Component Template in Vue.js\nDESCRIPTION: HTML template for displaying file information such as name and MIME type, along with download and delete action buttons. This component is used in conjunction with v-for to display multiple files.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-fileupload/README.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <div class=\"fileComponent\">\n        <div class=\"fileInfo\">\n            <h2>{{fileData.name}}</h2>\n            <p>{{fileData.mimeType}}</p>\n        </div>\n\n        <button @click=\"downloadFile\">Download</button>\n        <button @click=\"deleteFile\" class=\"deleteButton\">Delete</button>\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing Task Component in Vue.js Application\nDESCRIPTION: JavaScript code to import a Task component in the main App.vue file. This code enables the Task component to be used within the parent application.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-database/README.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport Task from './components/Task'\n```\n\n----------------------------------------\n\nTITLE: Importing Appwrite and Custom Components in Vue.js\nDESCRIPTION: Code that shows how to import Appwrite utilities and custom file handling components into the main Vue application file.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-fileupload/README.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { appwrite ] from './utils`'\n```\n\n----------------------------------------\n\nTITLE: Importing File Upload Components in Vue.js\nDESCRIPTION: Importing the custom FileUploader and FileComponent components that were created earlier in the tutorial for handling file uploads and displaying files.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-fileupload/README.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport FileUploader from './components/FileUploader'\nimport FileComponent from './components/FileComponent'\n```\n\n----------------------------------------\n\nTITLE: Registering Task Component in Vue.js Component Definition\nDESCRIPTION: JavaScript code to register the Task component in the Vue.js components object. This makes the component available for use in the template section of App.vue.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-database/README.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncomponents: {\n  Task\n},\n```\n\n----------------------------------------\n\nTITLE: Registering Components in Vue.js\nDESCRIPTION: Registering the imported components in the Vue components object to make them available for use in the template.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-fileupload/README.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncomponents: {\n    FileUploader,\n    FileComponent\n},\n```\n\n----------------------------------------\n\nTITLE: Using FileUploader Component in Vue Template\nDESCRIPTION: HTML template code for implementing the FileUploader component with an event listener that triggers the getAllFiles method when files are refreshed.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-fileupload/README.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<FileUploader v-on:refreshData=\"getAllFiles\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Vue.js Task Component with CSS\nDESCRIPTION: CSS styling for a Task component in a Vue.js to-do application. Includes styles for task items, completed tasks, delete buttons, and hover effects to enhance the user interface.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-database/README.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .taskComponent {\n        margin: 0 auto;\n        margin-top: 15px;\n        margin-bottom: 15px;\n        position: relative;\n    }\n\n    .taskName {\n        width: calc(100% - 40px);\n        width: 70%;\n        box-shadow: 0px 0px 10px black;\n        height: 50px;\n        border-radius: 10px;\n        margin: 0 auto;\n        line-height: 50px;\n        font-size: 25px;\n        transition: 0.2s;\n    }\n\n\n    .taskComponent:hover .taskName {\n        text-decoration: line-through;\n        cursor: pointer;\n        color: #535353;\n    }\n\n    .taskDone {\n        text-decoration: line-through;\n        color: #535353;\n    }\n\n    .taskDelete {\n        position: absolute;\n        width: 40px;\n        height: 40px;\n        background-color: #f85353;\n        right: 20px;\n        top: 50%;\n        transform: translateY(-50%);\n        border-radius: 10px;\n        transition: 0.5s;\n        color: white;\n    }\n\n    .taskDelete > span {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        height: 5px;\n        background-color: white;\n        width: 20px;\n        transform: translateX(-50%) translateY(-50%);\n    }\n\n    .taskDelete:hover {\n        box-shadow: 0px 0px 10px black;\n        scale: 1.05;\n        cursor: pointer;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Styling the File Display Component in Vue.js\nDESCRIPTION: CSS styles for the FileComponent that formats file information display, positions elements, and styles action buttons including distinct styling for the delete button with hover effects and shadows.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-fileupload/README.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .fileComponent {\n        width: 90%;\n        height: 65px;\n        box-shadow: 0px 0px 10px black;\n        margin: 0 auto;\n        border-radius: 10px;\n        position: relative;\n    }\n    \n    .fileInfo {\n        position: relative;\n        height: 100%;\n        width: 200px;\n        float: left;\n    }\n\n    .fileInfo h2 {\n        position: absolute;\n        left: 10px;\n        top: 5px;\n        margin: 0px;\n    }\n\n    .fileInfo p {\n        position: absolute;\n        left: 10px;\n        top: 35px;\n        margin: 0px;\n    }\n\n    .fileComponent button {\n        float: right;\n        width: 100px;\n        height: 40px;\n        background: #c52653;\n        color: white;\n        border: none;\n        border-radius: 10px;\n        font-size: 17px;\n        transition: 0.5s;\n        margin-top: 12px;\n        margin-right: 10px;\n    }\n\n    .fileComponent button:hover:not([disabled]) {\n        scale: 1.05;\n        cursor: pointer;\n        box-shadow: 0px 0px 10px black;\n    }\n\n    .deleteButton {\n        background-color: #ff3333 !important;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Styling the File Uploader Component in Vue.js\nDESCRIPTION: CSS styles for the FileUploader component that hides the file input, styles the upload button with hover effects, and provides visual feedback during the upload process with disabled state styling.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-fileupload/README.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .fileUploader input {\n        display: none\n    }\n\n    .fileUploader button {\n        width: 200px;\n        height: 40px;\n        background: #c52653;\n        color: white;\n        border: none;\n        border-radius: 10px;\n        font-size: 25px;\n        transition: 0.5s;\n    }\n\n    .fileUploader button:disabled {\n        background: #bb657d;\n    }\n\n    .fileUploader button:hover:not([disabled]) {\n        scale: 1.05;\n        cursor: pointer;\n        box-shadow: 0px 0px 10px black;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Styling the To-Do List Component\nDESCRIPTION: CSS styling for the To-Do list application, including task container, input form, and button styling with hover effects.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-database/README.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  * {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  }\n\n  .TaskCore {\n    width: 500px;\n    height: auto;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    box-shadow: 0px 0px 10px black;\n    padding: 30px;\n    border-radius: 10px;\n    text-align: center;\n    max-height: 80%;\n    overflow-y: auto;\n  }\n\n  .newTaskForm input {\n    width: calc(100% - 40px);\n    width: 60%;\n    box-shadow: 0px 0px 10px black;\n    height: 40px;\n    border-radius: 10px;\n    margin: 0 auto;\n    line-height: 40px;\n    text-align: center;\n    font-size: 25px;\n    margin-top: 30px;\n  }\n\n  .newTaskForm button {\n    position: relative;\n    display: block;\n    margin: 0 auto;\n    margin-top: 20px;\n    border: none;\n    height: 50px;\n    width: 50px;\n    background-color: #53f85b;\n    border-radius: 10px;\n    transition: 0.5s;\n  }\n\n  .newTaskForm button span {\n    color: white;\n    font-size: 50px;\n    line-height: 30px;\n  }\n\n  .newTaskForm button:hover {\n    box-shadow: 0px 0px 10px black;\n    scale: 1.05;\n    cursor: pointer;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Vue App Styling\nDESCRIPTION: CSS styling for the main Vue component including layout and visual effects.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-fileupload/README.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  * {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  }\n\n  .FileCore {\n    width: 500px;\n    height: auto;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    box-shadow: 0px 0px 10px black;\n    padding: 30px;\n    border-radius: 10px;\n    text-align: center;\n    max-height: 80%;\n    overflow-y: auto;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating VueJS Project and Installing Appwrite SDK\nDESCRIPTION: Commands to create a new VueJS project using Vue CLI and install the Appwrite SDK.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-database/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx @vue/cli create --default example-database\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add appwrite\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn serve\n```\n\n----------------------------------------\n\nTITLE: Installing Vue CLI Project\nDESCRIPTION: Commands to create a new Vue.js project using Vue CLI and add the Appwrite SDK dependency.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-fileupload/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx @vue/cli create --default example-fileupload\ncd example-fileupload\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add appwrite\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn serve\n```\n\n----------------------------------------\n\nTITLE: Installing Vue CLI and Project Setup\nDESCRIPTION: Commands to install Vue CLI globally, create a new Vue project, and install the Appwrite SDK dependency\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-locale_api/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -g @vue/cli\nvue create appwrite-locale-vue\ncd appwrite-locale-vue\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install appwrite\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run serve -- --port [port_number_of_api_endpoint]\n```\n\n----------------------------------------\n\nTITLE: Basic VueJS App Template\nDESCRIPTION: A minimal VueJS app template to start building the tasks application.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-database/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n   <div></div>\n</template>\n\n<script>\nexport default {\n  name: 'App',\n  components: {\n  }\n}\n</script>\n\n<style>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Basic Vue App Template\nDESCRIPTION: Initial Vue component template after removing boilerplate code.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-fileupload/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n   <div></div>\n</template>\n\n<script>\nexport default {\n  name: 'App',\n  components: {\n  }\n}\n</script>\n\n<style>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Vue App Main Component Template\nDESCRIPTION: Main Vue component template with file list rendering functionality.\nSOURCE: https://github.com/appwrite/demos-for-vue/blob/master/example-fileupload/README.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div class=\"FileCore\">\n    <h1>Appwrite File Upload</h1>\n    <!-- File Uploader will go here -->\n    <h2>Uploaded Files:</h2>\n    <div v-for=\"file in allFiles\" :key=\"file.$id\">\n      <!-- File Component will go here -->\n    </div>\n  </div>\n</template>\n```"
  }
]