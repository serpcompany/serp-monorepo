[
  {
    "owner": "odin-lang",
    "repo": "examples.git",
    "content": "TITLE: Running Odin Examples Command\nDESCRIPTION: Command line instruction for running Odin example programs from their respective directories.\nSOURCE: https://github.com/odin-lang/examples.git/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nodin run .\n```\n\n----------------------------------------\n\nTITLE: Odin Compilation Flags\nDESCRIPTION: Compiler flags required for code contributions to ensure code quality and conformance to standards.\nSOURCE: https://github.com/odin-lang/examples.git/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-vet -strict-style -vet-tabs -disallow-do -warnings-as-errors\n```\n\n----------------------------------------\n\nTITLE: Running Odin Program from Command Line\nDESCRIPTION: This command demonstrates how to compile and run an Odin program using the Odin compiler in the current directory.\nSOURCE: https://github.com/odin-lang/examples.git/blob/master/absolute_beginners/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nodin run .\n```\n\n----------------------------------------\n\nTITLE: Running the Odin Vulkan Triangle Example\nDESCRIPTION: Command to compile and run the Vulkan triangle example using Odin. This will execute the program using the pre-compiled shaders.\nSOURCE: https://github.com/odin-lang/examples.git/blob/master/vulkan/triangle_glfw/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nodin run .\n```\n\n----------------------------------------\n\nTITLE: Compiling Vulkan Shaders with glslc\nDESCRIPTION: Commands to compile the vertex and fragment shaders using glslc, which is part of the Vulkan SDK. This generates the spv binary shader files that the example loads at runtime.\nSOURCE: https://github.com/odin-lang/examples.git/blob/master/vulkan/triangle_glfw/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nglslc shader.vert -o vert.spv\nglslc shader.frag -o frag.spv\n```\n\n----------------------------------------\n\nTITLE: Running Raylib Examples in Odin\nDESCRIPTION: Instructions for correctly running the example files. Examples must be run with the '-file' flag and from the same directory as the example to ensure proper resource loading.\nSOURCE: https://github.com/odin-lang/examples.git/blob/master/raylib/ports/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd shaders\nodin run shaders_mesh_instancing.odin -file\n```\n\n----------------------------------------\n\nTITLE: Importing Metal-related packages in Odin\nDESCRIPTION: Demonstrates how to import the necessary vendor packages for Metal development in Odin, including Foundation, Metal, and QuartzCore (Core Animation).\nSOURCE: https://github.com/odin-lang/examples.git/blob/master/metal/learn_metal/README.md#2025-04-21_snippet_0\n\nLANGUAGE: odin\nCODE:\n```\nimport NS  \"vendor:darwin/Foundation\"\nimport MTL \"vendor:darwin/Metal\"\nimport CA  \"vendor:darwin/QuartzCore\"\n```\n\n----------------------------------------\n\nTITLE: Adding extra linker flags for SDL2 with Homebrew\nDESCRIPTION: Shows the command-line syntax for building an Odin program with extra linker flags to support SDL2 libraries installed via Homebrew.\nSOURCE: https://github.com/odin-lang/examples.git/blob/master/metal/learn_metal/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nodin build . -extra-linker-flags:\"-L/opt/homebrew/lib\"\n```\n\n----------------------------------------\n\nTITLE: Running the Odin Image Information Generator\nDESCRIPTION: Command to run the generator program that creates the images.odin file with image metadata information.\nSOURCE: https://github.com/odin-lang/examples.git/blob/master/code_generation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nodin run generate_image_info\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Main Odin Program\nDESCRIPTION: Command to build and run the main program that utilizes the generated images.odin file to access and process image information.\nSOURCE: https://github.com/odin-lang/examples.git/blob/master/code_generation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nodin run .\n```\n\n----------------------------------------\n\nTITLE: Expected Program Output\nDESCRIPTION: The expected console output from running the main program, showing image dimensions, sizes, and conditional loading based on image width.\nSOURCE: https://github.com/odin-lang/examples.git/blob/master/code_generation/README.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nLong_Cat is 9 x 46 pixels and 183 bytes large\n\nRound_Cat is 20 x 24 pixels and 317 bytes large\nRound_Cat has width > 15, so we loaded it!\nThe loaded PNG image is indeed 20 pixels wide!\n\nTuna is 24 x 20 pixels and 318 bytes large\nTuna has width > 15, so we loaded it!\nThe loaded PNG image is indeed 24 pixels wide!\n```\n\n----------------------------------------\n\nTITLE: Running the Odin Echo Server\nDESCRIPTION: Command to compile and run the server component of the echo server application using the Odin compiler.\nSOURCE: https://github.com/odin-lang/examples.git/blob/master/net/tcp_echo_server/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nodin run server\n```\n\n----------------------------------------\n\nTITLE: Running the Odin Echo Client\nDESCRIPTION: Command to compile and run the client component of the echo server application using the Odin compiler.\nSOURCE: https://github.com/odin-lang/examples.git/blob/master/net/tcp_echo_server/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nodin run client\n```\n\n----------------------------------------\n\nTITLE: Connecting to Echo Server with Telnet\nDESCRIPTION: Alternative method to connect to the echo server using the telnet utility, which connects to localhost (127.0.0.1) on port 8080.\nSOURCE: https://github.com/odin-lang/examples.git/blob/master/net/tcp_echo_server/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntelnet 127.0.0.1 8080\n```\n\n----------------------------------------\n\nTITLE: Navigating to Web Directory using Bash\nDESCRIPTION: Command to change the current directory to the web folder where the compiled WebAssembly files are located.\nSOURCE: https://github.com/odin-lang/examples.git/blob/master/wasm/js_wasm32/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd web\n```\n\n----------------------------------------\n\nTITLE: Running Python HTTP Server\nDESCRIPTION: Command to start a simple HTTP server using Python to serve the website locally on port 8000.\nSOURCE: https://github.com/odin-lang/examples.git/blob/master/wasm/js_wasm32/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m http.server\n```\n\n----------------------------------------\n\nTITLE: Running Node.js HTTP Server\nDESCRIPTION: Command to start an HTTP server using Node.js' http-server package to serve the website locally on port 8000.\nSOURCE: https://github.com/odin-lang/examples.git/blob/master/wasm/js_wasm32/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx http-server -p 8000 .\n```\n\n----------------------------------------\n\nTITLE: Font Resource Table in Markdown\nDESCRIPTION: Markdown table documenting font resources with details about their authors, licenses, and usage notes. Includes both bitmap fonts and TTF files with appropriate attributions.\nSOURCE: https://github.com/odin-lang/examples.git/blob/master/raylib/ports/text/resources/LICENSE.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| resource                       | author      | licence | notes |\n| :----------------------------- | :---------: | :------ | :---- |\n| fonts/alagard.png              | Hewett Tsoi | [Freeware](https://www.dafont.com/es/alagard.font)  |  Atlas created by [@raysan5](https://github.com/raysan5) |\n| fonts/romulus.png              | Hewett Tsoi | [Freeware](https://www.dafont.com/es/romulus.font)  |  Atlas created by [@raysan5](https://github.com/raysan5) |\n| fonts/alpha_beta.png           | [Brian Kent (AEnigma)](https://www.dafont.com/es/aenigma.d188) | [Freeware](https://www.dafont.com/es/alpha-beta.font)  |  Atlas created by [@raysan5](https://github.com/raysan5) |\n| fonts/setback.png              | [Brian Kent (AEnigma)](https://www.dafont.com/es/aenigma.d188) | [Freeware](https://www.dafont.com/es/setback.font)  |  Atlas created by [@raysan5](https://github.com/raysan5) |\n| fonts/jupiter_crash.png        | [Brian Kent (AEnigma)](https://www.dafont.com/es/aenigma.d188) | [Freeware](https://www.dafont.com/es/jupiter-crash.font)  |  Atlas created by [@raysan5](https://github.com/raysan5) |\n| fonts/mecha.png                | Captain Falcon | [Freeware](https://www.dafont.com/es/mecha-cf.font)  |  Atlas created by [@raysan5](https://github.com/raysan5) |\n| fonts/pixelplay.png            | Aleksander Shevchuk | [Freeware](https://www.dafont.com/es/pixelplay.font)  |  Atlas created by [@raysan5](https://github.com/raysan5) |\n| fonts/pixantiqua.ttf           | Gerhard Gro√ümann | [Freeware](https://www.dafont.com/es/pixantiqua.font)  |  Atlas created by [@raysan5](https://github.com/raysan5) |\n```"
  }
]