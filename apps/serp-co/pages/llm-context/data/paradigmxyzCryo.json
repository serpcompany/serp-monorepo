[
  {
    "owner": "paradigmxyz",
    "repo": "cryo",
    "content": "TITLE: Using the Cryo CLI Tool - Core Command Structure\nDESCRIPTION: The main command structure and options for the cryo tool, which extracts blockchain data to parquet, csv, or json formats. It includes various configuration options for content, source specification, data acquisition, and output formatting.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncryo extracts blockchain data to parquet, csv, or json\n\nUsage: cryo [OPTIONS] [DATATYPE]...\n\nArguments:\n  [DATATYPE]...  datatype(s) to collect, use cryo datasets to see all available\n\nOptions:\n      --remember    Remember current command for future use\n  -v, --verbose     Extra verbosity\n      --no-verbose  Run quietly without printing information to stdout\n  -h, --help        Print help\n  -V, --version     Print version\n\nContent Options:\n  -b, --blocks <BLOCKS>...           Block numbers, see syntax below\n      --timestamps <TIMESTAMPS>...   Timestamp numbers in unix, overridden by blocks\n  -t, --txs <TXS>...                 Transaction hashes, see syntax below\n  -a, --align                        Align chunk boundaries to regular intervals,\n                                     e.g. (1000 2000 3000), not (1106 2106 3106)\n      --reorg-buffer <N_BLOCKS>      Reorg buffer, save blocks only when this old,\n                                     can be a number of blocks [default: 0]\n  -i, --include-columns [<COLS>...]  Columns to include alongside the defaults,\n                                     use `all` to include all available columns\n  -e, --exclude-columns [<COLS>...]  Columns to exclude from the defaults\n      --columns [<COLS>...]          Columns to use instead of the defaults,\n                                     use `all` to use all available columns\n      --u256-types <U256_TYPES>...   Set output datatype(s) of U256 integers\n                                     [default: binary, string, f64]\n      --hex                          Use hex string encoding for binary columns\n  -s, --sort [<SORT>...]             Columns(s) to sort by, `none` for unordered\n      --exclude-failed               Exclude items from failed transactions\n\nSource Options:\n  -r, --rpc <RPC>                    RPC url [default: ETH_RPC_URL env var]\n      --network-name <NETWORK_NAME>  Network name [default: name of eth_getChainId]\n\nAcquisition Options:\n  -l, --requests-per-second <limit>  Ratelimit on requests per second\n      --max-retries <R>              Max retries for provider errors [default: 5]\n      --initial-backoff <B>          Initial retry backoff time (ms) [default: 500]\n      --max-concurrent-requests <M>  Global number of concurrent requests\n      --max-concurrent-chunks <M>    Number of chunks processed concurrently\n      --chunk-order <CHUNK_ORDER>    Chunk collection order (normal, reverse, or random)\n  -d, --dry                          Dry run, collect no data\n\nOutput Options:\n  -c, --chunk-size <CHUNK_SIZE>      Number of blocks per file [default: 1000]\n      --n-chunks <N_CHUNKS>          Number of files (alternative to --chunk-size)\n      --partition-by <PARTITION_BY>  Dimensions to partition by\n  -o, --output-dir <OUTPUT_DIR>      Directory for output files [default: .]\n      --subdirs <SUBDIRS>...         Subdirectories for output files\n                                     can be `datatype`, `network`, or custom string\n      --label <LABEL>                Label to add to each filename\n      --overwrite                    Overwrite existing files instead of skipping\n      --csv                          Save as csv instead of parquet\n      --json                         Save as json instead of parquet\n      --row-group-size <GROUP_SIZE>  Number of rows per row group in parquet file\n      --n-row-groups <N_ROW_GROUPS>  Number of rows groups in parquet file\n      --no-stats                     Do not write statistics to parquet files\n      --compression <NAME [#]>...    Compression algorithm and level [default: lz4]\n      --report-dir <REPORT_DIR>      Directory to save summary report\n                                     [default: {output_dir}/.cryo/reports]\n      --no-report                    Avoid saving a summary report\n\nDataset-specific Options:\n      --address <ADDRESS>...         Address(es)\n      --to-address <address>...      To Address(es)\n      --from-address <address>...    From Address(es)\n      --call-data <CALL_DATA>...     Call data(s) to use for eth_calls\n      --function <FUNCTION>...       Function(s) to use for eth_calls\n      --inputs <INPUTS>...           Input(s) to use for eth_calls\n      --slot <SLOT>...               Slot(s)\n      --contract <CONTRACT>...       Contract address(es)\n      --topic0 <TOPIC0>...           Topic0(s) [aliases: event]\n      --topic1 <TOPIC1>...           Topic1(s)\n      --topic2 <TOPIC2>...           Topic2(s)\n      --topic3 <TOPIC3>...           Topic3(s)\n      --event-signature <SIG>...     Event signature for log decoding\n      --inner-request-size <BLOCKS>  Blocks per request (eth_getLogs) [default: 1]\n      --js-tracer <tracer>           Event signature for log decoding\n\nOptional Subcommands:\n      cryo help                      display help message\n      cryo help syntax               display block + tx specification syntax\n      cryo help datasets             display list of all datasets\n      cryo help <DATASET(S)>         display info about a dataset\n```\n\n----------------------------------------\n\nTITLE: Running Cryo with Basic Command Syntax\nDESCRIPTION: Shows the basic command syntax for running Cryo to collect data from the blockchain. The example demonstrates how to specify a dataset, blockrange, and output format.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/reference/reference.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncryo <dataset> [--blockrange] [--output-format] [--other options]\n```\n\n----------------------------------------\n\nTITLE: Available Datasets in Cryo\nDESCRIPTION: Complete list of available blockchain datasets that can be extracted using cryo, including individual datasets like blocks, transactions, and logs, as well as dataset group names that combine related datasets.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\ncryo datasets\n─────────────\n- address_appearances\n- balance_diffs\n- balance_reads\n- balances\n- blocks\n- code_diffs\n- code_reads\n- codes\n- contracts\n- erc20_balances\n- erc20_metadata\n- erc20_supplies\n- erc20_transfers\n- erc20_approvals\n- erc721_metadata\n- erc721_transfers\n- eth_calls\n- four_byte_counts (alias = 4byte_counts)\n- geth_calls\n- geth_code_diffs\n- geth_balance_diffs\n- geth_storage_diffs\n- geth_nonce_diffs\n- geth_opcodes\n- javascript_traces (alias = js_traces)\n- logs (alias = events)\n- native_transfers\n- nonce_diffs\n- nonce_reads\n- nonces\n- slots (alias = storages)\n- storage_diffs (alias = slot_diffs)\n- storage_reads (alias = slot_reads)\n- traces\n- trace_calls\n- transactions (alias = txs)\n- vm_traces (alias = opcode_traces)\n\ndataset group names\n───────────────────\n- blocks_and_transactions: blocks, transactions\n- call_trace_derivatives: contracts, native_transfers, traces\n- geth_state_diffs: geth_balance_diffs, geth_code_diffs, geth_nonce_diffs, geth_storage_diffs\n- state_diffs: balance_diffs, code_diffs, nonce_diffs, storage_diffs\n- state_reads: balance_reads, code_reads, nonce_reads, storage_reads\n\nuse cryo help <DATASET> to print info about a specific dataset\n```\n\n----------------------------------------\n\nTITLE: Documentation Structure for Cryo Datasets\nDESCRIPTION: A markdown template outlining the comprehensive documentation structure for each dataset in the Cryo project. The structure includes semantic description, schema, tips and tricks, available options, examples in CLI and Python, and optional information about byte size and collection time.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/dataset_guide.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Dataset Reference\n\n- for each dataset:\n    - semantic description\n    - schema\n    - tips and tricks\n    - available options\n    - examples in cli and python\n    - possibly: byte size and collection time\n```\n\n----------------------------------------\n\nTITLE: Block and Transaction Specification Syntax for Cryo\nDESCRIPTION: Detailed syntax guide for specifying blocks, timestamps, and transactions in cryo commands. Includes various notation formats for ranges, abbreviations, and file references to target specific blockchain data.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nBlock specification syntax\n- can use numbers                    --blocks 5000 6000 7000\n- can use ranges                     --blocks 12M:13M 15M:16M\n- can use a parquet file             --blocks ./path/to/file.parquet[:COLUMN_NAME]\n- can use multiple parquet files     --blocks ./path/to/files/*.parquet[:COLUMN_NAME]\n- numbers can contain { _ . K M B }  5_000 5K 15M 15.5M\n- omitting range end means latest    15.5M: == 15.5M:latest\n- omitting range start means 0       :700 == 0:700\n- minus on start means minus end     -1000:7000 == 6001:7001\n- plus sign on end means plus start  15M:+1000 == 15M:15.001M\n- can use every nth value            2000:5000:1000 == 2000 3000 4000\n- can use n values total             100:200/5 == 100 124 149 174 199\n\nTimestamp specification syntax\n- can use numbers                    --timestamp 5000 6000 7000\n- can use ranges                     --timestamp 12M:13M 15M:16M\n- can use a parquet file             --timestamp ./path/to/file.parquet[:COLUMN_NAME]\n- can use multiple parquet files     --timestamp ./path/to/files/*.parquet[:COLUMN_NAME]\n- can contain { _ . m h d w M y }    31_536_000 525600m 8760h 365d 52.143w 12.17M 1y\n- omitting range end means latest    15.5M: == 15.5M:latest\n- omitting range start means 0       :700 == 0:700\n- minus on start means minus end     -1000:7000 == 6001:7001\n- plus sign on end means plus start  15M:+1000 == 15M:15.001M\n- can use n values total             100:200/5 == 100 124 149 174 199\n\nTransaction specification syntax\n- can use transaction hashes         --txs TX_HASH1 TX_HASH2 TX_HASH3\n- can use a parquet file             --txs ./path/to/file.parquet[:COLUMN_NAME]\n                                     (default column name is transaction_hash)\n- can use multiple parquet files     --txs ./path/to/ethereum__logs*.parquet\n```\n\n----------------------------------------\n\nTITLE: Extracting block data with Cryo\nDESCRIPTION: A basic example showing how to use Cryo to extract block data from a blockchain node. This command fetches the latest 100 blocks.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/intro/example_usage.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncryo blocks -n 100\n```\n\n----------------------------------------\n\nTITLE: Loading Cryo datasets with Python\nDESCRIPTION: Example showing how to load Cryo datasets into Python for analysis. The code imports the necessary package and loads a dataset stored at a specific path.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/intro/example_usage.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport cryo\ndataset = cryo.load('/path/to/dataset')\n```\n\n----------------------------------------\n\nTITLE: Using balance_diffs Feature in Cryo\nDESCRIPTION: Shows how to use the balance_diffs feature in Cryo to track account balance changes over time or between specific blocks. This feature helps examine how account balances change for either native tokens or ERC20 tokens.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/balance_diffs.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# balance_diffs\n```\n\n----------------------------------------\n\nTITLE: Reading ERC20 Token Balances in Python for Cryo\nDESCRIPTION: This function retrieves ERC20 token balances for specified accounts, tokens, and blocks using the Cryo framework. It handles both single and multiple account/token/block queries, returning a pandas DataFrame with the results.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/balance_reads.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef get_erc20_balance(\n    accounts: Accounts,\n    tokens: Tokens,\n    blocks: Blocks,\n    *,\n    provider: ProviderSpec = None,\n    context: Optional[spec.Context] = None,\n) -> pd.DataFrame:\n    \"\"\"get ERC20 token balances\"\"\"\n\n    # process inputs\n    accounts = standardize_accounts(accounts)\n    tokens = standardize_tokens(tokens)\n    blocks = standardize_blocks(blocks)\n    if isinstance(accounts, str):\n        accounts = [accounts]\n    if isinstance(tokens, str):\n        tokens = [tokens]\n    if isinstance(blocks, (str, int)):\n        blocks = [blocks]\n    provider = get_provider(provider)\n\n    # get data\n    raw = provider.batch_eth_call(\n        to=tokens,\n        function_name='balanceOf',\n        function_parameters=[accounts],\n        blocks=blocks,\n        context=context,\n    )\n\n    # format output\n    df = pd.DataFrame(raw)\n    df = df.rename(columns={'result': 'balance'})\n    return df\n```\n\n----------------------------------------\n\nTITLE: Reading Native Token Balances in Python for Cryo\nDESCRIPTION: This function retrieves native token balances for specified accounts and blocks using the Cryo framework. It handles both single and multiple account/block queries, returning a pandas DataFrame with the results.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/balance_reads.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef get_native_balance(\n    accounts: Accounts,\n    blocks: Blocks,\n    *,\n    provider: ProviderSpec = None,\n    context: Optional[spec.Context] = None,\n) -> pd.DataFrame:\n    \"\"\"get native token balances\"\"\"\n\n    # process inputs\n    accounts = standardize_accounts(accounts)\n    blocks = standardize_blocks(blocks)\n    if isinstance(accounts, str):\n        accounts = [accounts]\n    if isinstance(blocks, (str, int)):\n        blocks = [blocks]\n    provider = get_provider(provider)\n\n    # get data\n    raw = provider.batch_eth_get_balance(\n        accounts=accounts,\n        blocks=blocks,\n        context=context,\n    )\n\n    # format output\n    df = pd.DataFrame(raw)\n    df = df.rename(columns={'result': 'balance'})\n    return df\n```\n\n----------------------------------------\n\nTITLE: Extracting Native Transfers with Cryo CLI\nDESCRIPTION: Example command for extracting native transfers (ETH sending) using the Cryo CLI. This command extracts data from block 16000000 to 16001000 and outputs the result as CSV files.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/native_transfers.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncryo native_transfers -b 16000000:16001000\n```\n\n----------------------------------------\n\nTITLE: Using address_appearances Module in Cryo\nDESCRIPTION: Description of the address_appearances module which tracks when addresses appear in Ethereum blocks, transactions, logs, and traces. It explains the module's functionality, output format, and available parameters.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/address_appearances.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# address_appearances\n\nTracks when addresses appear in various locations in blocks, transactions, logs, and traces.\n\n## parameters\n\n- `addresses`: optional list of addresses, defaults to all addresses\n- `blocks`: optional range of blocks, defaults to all blocks\n- `entity_types`: optional list of entity types where addresses might appear, defaults to all entity types\n- `appearance_types`: optional list of appearance types, defaults to all appearance types\n\n## usage\n\n```bash\ncryo address_appearances -a 0x... -o addresses.parquet\n```\n\n## output format\n\n| column | type | description |\n| ------ | ---- | ----------- |\n| `block_number` | `int64` | number of block where appearance occurs |\n| `address` | `string` | checksummed address that appears |\n| `entity_type` | `string` | type of entity where appearances occurs |\n| `appearance_type` | `string` | type of appearance |\n| `transaction_index` | `int64` | tx index where appearance occurs (optional) |\n| `log_index` | `int64` | log index where appearance occurs (optional) |\n| `trace_index` | `int64` | trace address index where appearance occurs (optional) |\n\n## entity types\n\nEntity types describe what object the address is appearing in.\n\n| entity_type | description |\n| ------ | ---- |\n| `block` | block |\n| `transaction` | transaction |\n| `log` | log |\n| `trace` | trace |\n\n## appearance types\n\nAppearance types describe what role the address is playing when it appears.\n\n| appearance_type | description |\n| ------ | ---- |\n| `block.author` | address of block's author |\n| `transaction.to` | recipient address of transaction |\n| `transaction.from` | sender address of transaction |\n| `log.address` | contract address that emitted log |\n| `log.topic1` | 1st indexed field of log (after topics[0], which is the log signature) |\n| `log.topic2` | 2nd indexed field of log (after topics[0], which is the log signature) |\n| `log.topic3` | 3rd indexed field of log (after topics[0], which is the log signature) |\n| `trace.from` | sender address of trace call |\n| `trace.to` | recipient address of trace call |\n| `trace.address` | address of a create (which can be precomputed) |\n```\n\n----------------------------------------\n\nTITLE: Configuring ERC20 Token Supply Data Collection in Python\nDESCRIPTION: This script configures the collection of ERC20 token supply data from Ethereum. It specifies network endpoints, token addresses, and data collection parameters including a function to get total supply of tokens using the ERC20 totalSupply() method.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/erc20_supplies.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nname = 'erc20_supplies'\n\nendpoints = ['https://eth-mainnet.g.alchemy.com/v2/demo']\n\nblock_timestamps = 'outer'\nstart_block = 0\nend_block = None\n\nfunction_sig = 'totalSupply()'\n\naddresses = [\n    '0xdac17f958d2ee523a2206206994597c13d831ec7',  # USDT\n    '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',  # USDC\n    '0x6b175474e89094c44da98b954eedeac495271d0f',  # DAI\n    '0x0000000000085d4780b73119b644ae5ecd22b376',  # TUSD\n    '0x8e870d67f660d95d5be530380d0ec0bd388289e1',  # PAX\n    '0x57ab1ec28d129707052df4df418d58a2d46d5f51',  # sUSD\n    '0x0000000000000000000000000000000000000000',  # ETH\n    '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599',  # WBTC\n    '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',  # WETH\n    '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',  # UNI\n    '0x514910771af9ca656af840dff83e8264ecf986ca',  # LINK\n    '0x0d8775f648430679a709e98d2b0cb6250d2887ef',  # BAT\n    '0xf629cbd94d3791c9250152bd8dfbdf380e2a3b9c',  # ENJ\n    '0xc944e90c64b2c07662a292be6244bdf05cda44a7',  # GRT\n    '0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2',  # MKR\n    '0x03ab458634910aad20ef5f1c8ee96f1d6ac54919',  # RAI\n    '0xd533a949740bb3306d119cc777fa900ba034cd52',  # CRV\n    '0x408e41876cccdc0f92210600ef50372656052a38',  # REN\n    '0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f',  # SNX\n    '0xba100000625a3754423978a60c9317c58a424e3d',  # BAL\n    '0xc18360217d8f7ab5e7c516566761ea12ce7f9d72',  # ENS\n    '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9',  # AAVE\n    '0x0f5d2fb29fb7d3cfee444a200298f468908cc942',  # MANA\n    '0xa693B19d2931d498c5B318dF961919BB4aee87a5',  # UST\n    '0x853d955acef822db058eb8505911ed77f175b99e',  # FRAX\n    '0x956f47f50a910163d8bf957cf5846d573e7f87ca',  # FEI\n    '0x6b3595068778dd592e39a122f4f5a5cf09c90fe2',  # SUSHI\n    '0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0',  # MATIC\n    '0x4e15361fd6b4bb609fa63c81a2be19d873717870',  # FTM\n    '0x111111111117dc0aa78b770fa6a738034120c302',  # 1INCH\n    '0x5a98fcbea516cf06857215779fd812ca3bef1b32',  # LDO\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering Cryo data by block number range\nDESCRIPTION: Command demonstrating how to extract blocks within a specific range using the --start and --end flags for precise data selection.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/intro/example_usage.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncryo blocks --start 15000000 --end 15000100\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Historical Calls in Cryo\nDESCRIPTION: Example of retrieving all historical calls from the Ethereum blockchain using the Cryo tool, with the output directed to the terminal.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/blocks.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncryo calls --rpc $ETH_RPC_URL\n```\n\n----------------------------------------\n\nTITLE: Saving Cryo Call Data to CSV File\nDESCRIPTION: Example showing how to retrieve Ethereum calls using Cryo and save the results to a CSV file. This allows for easier analysis of historical transaction data.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/blocks.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncryo calls -o calls.csv --rpc $ETH_RPC_URL\n```\n\n----------------------------------------\n\nTITLE: Filtering Calls by Block Range in Cryo\nDESCRIPTION: Command to filter Ethereum calls to a specific block range (from block 16000000 to 16001000) and save the results to a CSV file. This allows for targeted historical analysis.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/blocks.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncryo calls -o calls.csv --blocks 16000000:16001000 --rpc $ETH_RPC_URL\n```\n\n----------------------------------------\n\nTITLE: Filtering Calls by Specific Addresses in Cryo\nDESCRIPTION: Example of retrieving Ethereum calls filtered by specific to/from addresses, limiting to a defined block range, and saving the output to a CSV file.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/blocks.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncryo calls -o calls.csv --blocks 16000000:16001000 --to 0xabcd --from 0x1234 --rpc $ETH_RPC_URL\n```\n\n----------------------------------------\n\nTITLE: Generating Balance Difference Report in Python\nDESCRIPTION: This function generates a detailed report of balance differences for Ethereum accounts between two blocks.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/geth_balance_diffs.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef print_balance_diff_report(\n    diffs: pl.DataFrame,\n    old_block: int,\n    new_block: int,\n    old_total: int,\n    new_total: int,\n) -> None:\n    print('old block:', old_block)\n    print('new block:', new_block)\n    print()\n    print('old total:', toolstr.format(old_total))\n    print('new total:', toolstr.format(new_total))\n    print('diff     :', toolstr.format(new_total - old_total))\n    print()\n\n    n_changed = (diffs['diff'] != 0).sum()\n    n_increased = (diffs['diff'] > 0).sum()\n    n_decreased = (diffs['diff'] < 0).sum()\n    print('n_changed  :', n_changed)\n    print('n_increased:', n_increased)\n    print('n_decreased:', n_decreased)\n    print()\n\n    increases = diffs.filter(pl.col('diff') > 0)\n    decreases = diffs.filter(pl.col('diff') < 0)\n    print('increase total:', toolstr.format(increases['diff'].sum()))\n    print('decrease total:', toolstr.format(decreases['diff'].sum()))\n    print()\n\n    print('top increases')\n    toolstr.print_dataframe(\n        increases.select(['address', 'balance_old', 'balance', 'diff'])[:10],\n        show_index=True,\n        column_formats={\n            'balance_old': {'decimals': 0},\n            'balance': {'decimals': 0},\n            'diff': {'decimals': 0, 'order_of_magnitude': True},\n        },\n    )\n    print()\n\n    print('top decreases')\n    toolstr.print_dataframe(\n        decreases.select(['address', 'balance_old', 'balance', 'diff'])[:10],\n        show_index=True,\n        column_formats={\n            'balance_old': {'decimals': 0},\n            'balance': {'decimals': 0},\n            'diff': {'decimals': 0, 'order_of_magnitude': True},\n        },\n    )\n```\n\n----------------------------------------\n\nTITLE: Calculating Balance Differences in Python\nDESCRIPTION: This function calculates the differences in balances between two blocks for Ethereum accounts.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/geth_balance_diffs.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef compute_balance_diffs(\n    old_df: pl.DataFrame,\n    new_df: pl.DataFrame,\n    old_block: int,\n    new_block: int,\n) -> pl.DataFrame:\n    diffs = new_df.join(old_df, on='address', how='outer', suffix='_old')\n    diffs = diffs.with_columns(\n        [\n            pl.col('balance').fill_null(0).alias('balance'),\n            pl.col('balance_old').fill_null(0).alias('balance_old'),\n            (pl.col('balance') - pl.col('balance_old')).alias('diff'),\n        ]\n    )\n    diffs = diffs.with_columns(\n        [\n            pl.when(pl.col('diff') > 0)\n            .then(pl.lit('increase'))\n            .when(pl.col('diff') < 0)\n            .then(pl.lit('decrease'))\n            .otherwise(pl.lit('unchanged'))\n            .alias('change'),\n        ]\n    )\n    diffs = diffs.with_columns(\n        [\n            pl.col('diff').abs().alias('abs_diff'),\n        ]\n    )\n    diffs = diffs.sort('abs_diff', descending=True)\n    return diffs\n```\n\n----------------------------------------\n\nTITLE: Processing Balance Data in Python\nDESCRIPTION: This function processes balance data for Ethereum accounts, converting raw data into a structured format and calculating differences.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/geth_balance_diffs.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef process_balance_data(\n    balance_data: Dict[str, Any],\n    block_number: int,\n    verbose: bool = True,\n) -> Tuple[pl.DataFrame, pl.DataFrame]:\n    # Convert balance data to DataFrame\n    df = pl.DataFrame(\n        {\n            'address': list(balance_data.keys()),\n            'balance': [int(v) for v in balance_data.values()],\n        }\n    )\n    df = df.with_columns(\n        [\n            pl.col('address').str.to_lowercase().alias('address'),\n            pl.col('balance').cast(pl.UInt256),\n        ]\n    )\n\n    # Sort by balance descending\n    df = df.sort('balance', descending=True)\n\n    # Compute total balance\n    total = df['balance'].sum()\n    if verbose:\n        print('block:', block_number)\n        print('n_addresses:', len(df))\n        print('total balance:', toolstr.format(total))\n        print()\n\n    return df, total\n```\n\n----------------------------------------\n\nTITLE: Defining FourByteCount Schema in Rust for CryoDB\nDESCRIPTION: Defines the FourByteCount struct with a schema for storing and retrieving four-byte function signature counts in CryoDB. The schema includes a topic, key, and value, where the key is the four-byte signature and the value is a count of how many times it appears.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/four_byte_counts.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub struct FourByteCount;\n\nimpl Schema for FourByteCount {\n    type Topic = &'static str;\n    type Key = [u8; 4];\n    type Value = u64;\n\n    fn topic() -> Self::Topic {\n        \"four_byte_counts\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Load and Update Functions for FourByteCount in Rust\nDESCRIPTION: Provides implementation for loading four-byte function signature counts from a database and updating counts when new signatures are encountered. The update_counts function handles batch operations on multiple signatures.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/four_byte_counts.md#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nimpl FourByteCount {\n    /// Load the counts for the given four byte signatures.\n    pub fn get<Db: Database>(db: &Db, keys: &[[u8; 4]]) -> Result<Vec<Option<u64>>> {\n        db.get_values(Self::topic(), keys)\n    }\n\n    /// Update the counts for the given four byte signatures.\n    /// If the signature does not exist, it will be created with a count of `increment`.\n    /// If the signature exists, its count will be incremented by `increment`.\n    pub fn update_counts<Db: Database>(\n        db: &mut Db,\n        keys: &[[u8; 4]],\n        increment: u64,\n    ) -> Result<()> {\n        let counts = Self::get(db, keys)?;\n\n        let mut pairs = Vec::with_capacity(keys.len());\n        for (i, count) in counts.iter().enumerate() {\n            let count = count.unwrap_or(0) + increment;\n            pairs.push((keys[i], count));\n        }\n\n        db.insert_values(Self::topic(), &pairs)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cryo via pip\nDESCRIPTION: This command installs Cryo using pip, the Python package installer. It's the simplest method for most users.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/intro/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install cryo\n```\n\n----------------------------------------\n\nTITLE: Installing Cryo via pip\nDESCRIPTION: Simple command to install Cryo using pip package manager. This method is faster and doesn't require Rust to be installed.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/cryo_python/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install cryo\n```\n\n----------------------------------------\n\nTITLE: Installing Cryo Python Package from PyPI\nDESCRIPTION: Instructions for installing the Cryo Python package using pip package manager\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install maturin\npip install cryo\n```\n\n----------------------------------------\n\nTITLE: Installing Cryo from Crates.io\nDESCRIPTION: Commands for installing the Cryo CLI tool directly from crates.io using Cargo\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install cryo_cli\n```\n\n----------------------------------------\n\nTITLE: Installing Cryo from Source using Cargo\nDESCRIPTION: Instructions for installing the Cryo CLI tool from source code using Cargo package manager\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/paradigmxyz/cryo\ncd cryo\ncargo install --path ./crates/cli\n```\n\n----------------------------------------\n\nTITLE: Installing Cryo from source\nDESCRIPTION: These commands clone the Cryo repository from GitHub and install it from the source code. This method is useful for developers or users who need the latest unreleased features.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/intro/installation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/paradigmxyz/cryo.git\ncd cryo\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing Cryo from source\nDESCRIPTION: Series of commands to install Cryo from source. This method allows using the latest unreleased version but requires additional setup including Rust and Maturin.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/cryo_python/installation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install maturin\ngit clone https://github.com/paradigmxyz/cryo\ncd cryo/crates/python\nmaturin build --release\npip install --force-reinstall <OUTPUT_OF_MATURIN_BUILD>.whl\n```\n\n----------------------------------------\n\nTITLE: Installing Cryo Python Package from Source\nDESCRIPTION: Commands for building and installing the Cryo Python package from source code using maturin\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install maturin\ngit clone https://github.com/paradigmxyz/cryo\ncd cryo/crates/python\nmaturin build --release\npip install --force-reinstall <OUTPUT_OF_MATURIN_BUILD>.whl\n```\n\n----------------------------------------\n\nTITLE: Initializing Slots Class in Python\nDESCRIPTION: This snippet defines the Slots class with its constructor and basic attributes. It initializes the slots data structure and sets up the necessary components for slot management.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/slots.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass Slots:\n    def __init__(self):\n        self.slots = {}\n        self.next_slot = 0\n        self.open_slots = []\n        self.highest_slot = -1\n```\n\n----------------------------------------\n\nTITLE: Creating New Slot in Python\nDESCRIPTION: This method creates a new slot in the Slots class. It either uses an available open slot or creates a new one, updating the necessary counters and data structures.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/slots.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef new_slot(self):\n    if self.open_slots:\n        slot = self.open_slots.pop(0)\n    else:\n        slot = self.next_slot\n        self.next_slot += 1\n    self.slots[slot] = {}\n    self.highest_slot = max(self.highest_slot, slot)\n    return slot\n```\n\n----------------------------------------\n\nTITLE: Setting Slot Data in Python\nDESCRIPTION: This method sets data for a specific key in a given slot. It creates the slot if it doesn't exist and updates the data accordingly.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/slots.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef set_slot(self, slot, key, data):\n    if slot not in self.slots:\n        self.slots[slot] = {}\n    self.slots[slot][key] = data\n    self.highest_slot = max(self.highest_slot, slot)\n```\n\n----------------------------------------\n\nTITLE: Getting Slot Data in Python\nDESCRIPTION: This method retrieves data for a specific key from a given slot. It returns None if the slot or key doesn't exist.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/slots.md#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef get_slot(self, slot, key):\n    return self.slots.get(slot, {}).get(key)\n```\n\n----------------------------------------\n\nTITLE: Initializing VM Traces Module in Python\nDESCRIPTION: This snippet defines the __init__ function for the vm_traces module. It imports necessary dependencies and sets up the module's structure.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/vm_traces.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING, Callable\n\nfrom .._utils import types\n\nif TYPE_CHECKING:\n    from .. import Cryo\n\n\ndef __init__(self: Cryo) -> None:\n    self.vm_traces = types.SimpleNamespace()\n    self.vm_traces.get = types.SimpleNamespace()\n    self.vm_traces.process = types.SimpleNamespace()\n```\n\n----------------------------------------\n\nTITLE: Processing VM Traces in Python\nDESCRIPTION: This function processes VM traces, likely for analysis or further manipulation. It takes a traces parameter and returns a processed version of the traces.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/vm_traces.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef process_traces(self: Cryo, traces: list[dict]) -> list[dict]:\n    return [self.vm_traces.process_trace(trace) for trace in traces]\n```\n\n----------------------------------------\n\nTITLE: Processing Individual VM Trace in Python\nDESCRIPTION: This function processes a single VM trace. It extracts relevant information from the trace and returns a dictionary with processed data.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/vm_traces.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef process_trace(self: Cryo, trace: dict) -> dict:\n    return {\n        'pc': trace['pc'],\n        'op': trace['op'],\n        'gas': trace['gas'],\n        'gasCost': trace['gasCost'],\n        'depth': trace['depth'],\n        'stack': trace['stack'],\n        'memory': trace['memory'],\n    }\n```\n\n----------------------------------------\n\nTITLE: Deleting Slot in Python\nDESCRIPTION: This method deletes a specified slot from the Slots class. It removes the slot data, adds the slot number to the open slots list, and updates the highest slot if necessary.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/slots.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef delete_slot(self, slot):\n    if slot in self.slots:\n        del self.slots[slot]\n        self.open_slots.append(slot)\n        self.open_slots.sort()\n        if slot == self.highest_slot:\n            self.highest_slot = max(self.slots.keys()) if self.slots else -1\n```\n\n----------------------------------------\n\nTITLE: Checking Slot Existence in Python\nDESCRIPTION: This method checks if a specific slot exists in the Slots class.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/slots.md#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef has_slot(self, slot):\n    return slot in self.slots\n```\n\n----------------------------------------\n\nTITLE: Getting All Slot Keys in Python\nDESCRIPTION: This method returns a list of all keys present in a given slot.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/slots.md#2025-04-16_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef get_slot_keys(self, slot):\n    return list(self.slots.get(slot, {}).keys())\n```\n\n----------------------------------------\n\nTITLE: Getting Highest Slot Number in Python\nDESCRIPTION: This method returns the highest slot number currently in use.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/slots.md#2025-04-16_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef get_highest_slot(self):\n    return self.highest_slot\n```\n\n----------------------------------------\n\nTITLE: Getting All Slot Numbers in Python\nDESCRIPTION: This method returns a list of all slot numbers currently in use, sorted in ascending order.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/slots.md#2025-04-16_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef get_all_slots(self):\n    return sorted(self.slots.keys())\n```\n\n----------------------------------------\n\nTITLE: Installing pandas for Cryo output\nDESCRIPTION: Optional command to install pandas if you want Cryo to output results using pandas instead of polars.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/cryo_python/installation.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install pandas\n```\n\n----------------------------------------\n\nTITLE: Using cryo_test CLI for Environment Comparison in Bash\nDESCRIPTION: This bash CLI helps compare cryo outputs across different environments by setting up comparison directories, collecting data, and performing comparisons. It supports comparing different RPC endpoints, cryo executables, and running in Python mode.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/crates/python/python/cryo_test/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncryo_test is a cli tool for comparing cryo outputs across different conditions\n\nUsage: cryo_test QUERY [OPTIONS]\n\nThis will 1. setup comparison dir, 2. collect data, and 3. compare outputs\n\nExamples:\n  cryo_test --rpc source1=https://h1.com source2=https://h2.com (compare rpc's)\n  cryo_test --executable old=/path/to/cryo1 new=/path/to/cryo2 (compare executables)\n  cryo_test --python ... (use python)\n  cryo_test --cli-vs-python ... (compare cli vs python)\n\nOptions:\n  -h, --help                                 show this help message and exit\n  -e, --executable, --executables EXECUTABLE [...]\n                                             executable(s) to use\n  --rpc RPC [...]                            rpc endpoint(s) to use\n  -d, --datatype, --datatypes DATATYPE [...]\n                                             datatype(s) to collect\n  -p, --python                               use python for all batches\n  --cli-vs-python                            compare cli to python\n  -r, --rerun                                rerun previous comparison\n  --label LABEL                              name of comparison\n  -s, --steps {setup,collect,compare} [...]  steps to perform {setup, collect, compare}\n  --dir DIR                                  directory for storing comparison data\n  -i, --interactive                          load data in interactive python session\n  --scan-interactive                         scan data in interactive python session\n  --debug, --pdb                             enter debug mode upon error\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries in Python\nDESCRIPTION: This snippet imports necessary Python libraries for data processing, file handling, and Ethereum interactions.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/geth_balance_diffs.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport os\nimport sys\nimport json\nfrom typing import Any, Dict, List, Tuple\n\nimport polars as pl\nimport toolsql\nimport toolstr\n\nfrom ctc import evm\nfrom ctc.toolbox import pl_utils\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Reference Section\nDESCRIPTION: This snippet defines a top-level header in Markdown, indicating the start of a reference section for the Cryo project documentation.\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/cryo_python/reference.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# reference\n```\n\n----------------------------------------\n\nTITLE: Ethereum Call Data Header\nDESCRIPTION: A markdown heading indicating a section for Ethereum call data processing\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/datasets/eth_calls.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# eth_calls\n```\n\n----------------------------------------\n\nTITLE: Markdown Header\nDESCRIPTION: Simple markdown header indicating CLI section\nSOURCE: https://github.com/paradigmxyz/cryo/blob/main/book/reference/interfaces/cli.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# cli\n```"
  }
]