[
  {
    "owner": "atrexus",
    "repo": "wincpp",
    "content": "TITLE: Setting up CMake Project Configuration for wincpp\nDESCRIPTION: Configures the basic CMake project settings including required version, C++ standard, and project name. This is the foundation configuration needed before defining specific targets.\nSOURCE: https://github.com/atrexus/wincpp/blob/main/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required (VERSION 3.8)\n\n# Set our C++ standard\nset (CMAKE_CXX_STANDARD 23)\n\n# Define our project\nproject (wincpp LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Integrating wincpp using CMake\nDESCRIPTION: This snippet demonstrates how to integrate the wincpp library into a project using CMake's FetchContent functionality.  It downloads the latest version of wincpp from the specified URL.  The `FetchContent_Declare` command declares the library and its source, `FetchContent_MakeAvailable` makes it available for use, and  `target_link_libraries` links the wincpp library to the specified project target making it available to the project.  Requires CMake and a CMakeLists.txt file.  The output is wincpp linked into the project.\nSOURCE: https://github.com/atrexus/wincpp/blob/main/README.md#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude (FetchContent) # if you don't have this already\n\n# Fetch the latest version\nFetchContent_Declare (wincpp URL https://github.com/atrexus/wincpp/releases/latest/download/wincpp-src.zip)\nFetchContent_MakeAvailable (wincpp)\n\n# Link the library into your project\ntarget_link_libraries(your_project PRIVATE wincpp)\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library wincpp in CMake\nDESCRIPTION: This snippet creates a static library named `wincpp`. Static libraries are linked directly into the executable during the linking phase of the build process.\nSOURCE: https://github.com/atrexus/wincpp/blob/main/src/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(wincpp STATIC)\n```\n\n----------------------------------------\n\nTITLE: Creating Interface Library _wincpp_core in CMake\nDESCRIPTION: This snippet creates an interface library named `_wincpp_core`. Interface libraries are used to group header files and include directories without compiling any actual code. They primarily serve to propagate include directories and other interface properties to dependent targets.\nSOURCE: https://github.com/atrexus/wincpp/blob/main/src/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(_wincpp_core INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Adding Header Files to Interface Library in CMake\nDESCRIPTION: This snippet adds the header files defined in the `header_files` variable to the `_wincpp_core` interface library.  It uses the `target_sources` command with the `INTERFACE` keyword, ensuring that the header files are visible to any target that links against `_wincpp_core`.\nSOURCE: https://github.com/atrexus/wincpp/blob/main/src/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(_wincpp_core INTERFACE ${header_files})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Interface Library in CMake\nDESCRIPTION: This snippet adds include directories to the `_wincpp_core` interface library.  It uses generator expressions to specify different include directories for the build and install interfaces.  `$<BUILD_INTERFACE:...>` is used during the build process and  `$<INSTALL_INTERFACE:...>` is used when the library is installed.\nSOURCE: https://github.com/atrexus/wincpp/blob/main/src/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(_wincpp_core SYSTEM INTERFACE \n\t$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>\n\t$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type in CMake\nDESCRIPTION: Sets the default CMake build type to RelWithDebInfo, which provides optimized binaries with debug information.\nSOURCE: https://github.com/atrexus/wincpp/blob/main/examples/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#set(CMAKE_BUILD_TYPE RelWithDebInfo)\n```\n\n----------------------------------------\n\nTITLE: Setting Private Include Directory for wincpp in CMake\nDESCRIPTION: This snippet adds a private include directory to the `wincpp` library. The `PRIVATE` keyword ensures that this include directory is only used when compiling the source files of the `wincpp` library and is not propagated to dependent targets.\nSOURCE: https://github.com/atrexus/wincpp/blob/main/src/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(wincpp PRIVATE ${include_dir})\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to wincpp Library in CMake\nDESCRIPTION: This snippet adds the source files to the `wincpp` static library.  It uses the `target_sources` command with the `PRIVATE` keyword, indicating that these source files are only used to build the `wincpp` library itself and are not exposed to other targets that link against it.\nSOURCE: https://github.com/atrexus/wincpp/blob/main/src/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(wincpp PRIVATE \t\n\t\"process.cpp\"\n\t\"module_factory.cpp\"\n\t\"memory_factory.cpp\"\n\t\"window_factory.cpp\"\n\t\"thread_factory.cpp\"\n\n\t\"memory/allocation.cpp\"\n\t\"memory/pointer.cpp\"\n\t\"memory/region.cpp\"\n\t\"memory/protection.cpp\"\n\t\"memory/protection_operation.cpp\"\n\t\"memory/memory.cpp\"\n\n\t\"modules/module.cpp\"\n\t\"modules/export.cpp\"\n\t\"modules/section.cpp\"\n\t\"modules/object.cpp\"\n\n\t\"patterns/scanner.cpp\"\n\t\"patterns/pattern.cpp\"\n\n\t\"windows/window.cpp\"\n\n\t\"threads/thread.cpp\"\n\n\t\"core/win.cpp\"\n\t\"core/error.cpp\"\n\t\"core/snapshot.cpp\"\n\t\n\t\"core/errors/win32.cpp\"\n\t\"core/errors/user.cpp\"\n \"memory/allocation.cpp\")\n```\n\n----------------------------------------\n\nTITLE: Linking wincpp to _wincpp_core in CMake\nDESCRIPTION: This snippet links the `wincpp` static library to the `_wincpp_core` interface library. This ensures that any target that links against `wincpp` will also inherit the include directories and other interface properties defined by `_wincpp_core`.\nSOURCE: https://github.com/atrexus/wincpp/blob/main/src/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(wincpp INTERFACE _wincpp_core)\n```\n\n----------------------------------------\n\nTITLE: Configuring wincpp_test Executable in CMake\nDESCRIPTION: Creates and configures the wincpp_test executable target. The target is renamed to 'test', built from test.cpp, and linked against the wincpp library.\nSOURCE: https://github.com/atrexus/wincpp/blob/main/examples/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(wincpp_test)\nset_target_properties(wincpp_test PROPERTIES OUTPUT_NAME \"test\")\ntarget_sources(wincpp_test PRIVATE \"test.cpp\")\ntarget_link_libraries(wincpp_test PRIVATE wincpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring wincpp_threads Executable in CMake\nDESCRIPTION: Creates and configures the wincpp_threads executable target. The target is renamed to 'threads', built from threads.cpp, and linked against the wincpp library.\nSOURCE: https://github.com/atrexus/wincpp/blob/main/examples/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(wincpp_threads)\nset_target_properties(wincpp_threads PROPERTIES OUTPUT_NAME \"threads\")\ntarget_sources(wincpp_threads PRIVATE \"threads.cpp\")\ntarget_link_libraries(wincpp_threads PRIVATE wincpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring wincpp_allocations Executable in CMake\nDESCRIPTION: Creates and configures the wincpp_allocations executable target. The target is renamed to 'allocations', built from allocations.cpp, and linked against the wincpp library.\nSOURCE: https://github.com/atrexus/wincpp/blob/main/examples/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(wincpp_allocations)\nset_target_properties(wincpp_allocations PROPERTIES OUTPUT_NAME \"allocations\")\ntarget_sources(wincpp_allocations PRIVATE \"allocations.cpp\")\ntarget_link_libraries(wincpp_allocations PRIVATE wincpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directory Path in CMake\nDESCRIPTION: This snippet sets the variable `include_dir` to the absolute path of the include directory. It calculates the path relative to the CMakeLists.txt file's location using `CMAKE_CURRENT_SOURCE_DIR`. This variable is then used to specify include directories for compilation.\nSOURCE: https://github.com/atrexus/wincpp/blob/main/src/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_path(SET include_dir \"${CMAKE_CURRENT_SOURCE_DIR}/../include\")\n```\n\n----------------------------------------\n\nTITLE: Adding Source Directory and Conditional Developer Targets\nDESCRIPTION: Adds the source directory to the build and conditionally defines additional targets for developers when building from the root directory. Includes options for building examples and creating source packages.\nSOURCE: https://github.com/atrexus/wincpp/blob/main/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the library targets\nadd_subdirectory (src)\n\nif (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n    # We're in the root, define additional targets for developers.\n    option(BUILD_EXAMPLES   \"whether or not examples should be built\" ON)\n    option(BUILD_PACKAGE    \"whether or not to build a package\" ON)\n\n    if(BUILD_PACKAGE)\n        set(package_files include/ src/ CMakeLists.txt LICENSE)\n        add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-src.zip\n            COMMAND ${CMAKE_COMMAND} -E tar c ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-src.zip --format=zip -- ${package_files}\n            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n            DEPENDS ${package_files})\n        add_custom_target(${PROJECT_NAME}_package DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-src.zip)\n    endif()\n\n    if (BUILD_EXAMPLES)\n\t\tadd_subdirectory(examples)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring MSVC Hot Reload Support\nDESCRIPTION: Enables Hot Reload functionality for MSVC compilers if the policy is supported. Sets the debug information format to allow for Edit and Continue in debug configurations.\nSOURCE: https://github.com/atrexus/wincpp/blob/main/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (POLICY CMP0141)\n  cmake_policy(SET CMP0141 NEW)\n  set(CMAKE_MSVC_DEBUG_INFORMATION_FORMAT \"$<IF:$<AND:$<C_COMPILER_ID:MSVC>,$<CXX_COMPILER_ID:MSVC>>,$<$<CONFIG:Debug,RelWithDebInfo>:EditAndContinue>,$<$<CONFIG:Debug,RelWithDebInfo>:ProgramDatabase>>\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for wincpp in CMake\nDESCRIPTION: This snippet defines a list of header files for the wincpp library and stores it in the variable `header_files`. These header files are located within the include directory specified earlier.  The list includes various modules such as process, memory, modules, patterns, windows, threads, and core components.\nSOURCE: https://github.com/atrexus/wincpp/blob/main/src/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(header_files \n\t\"${include_dir}/wincpp/process.hpp\"\n\t\"${include_dir}/wincpp/module_factory.hpp\"\n\t\"${include_dir}/wincpp/memory_factory.hpp\"\n\t\"${include_dir}/wincpp/window_factory.hpp\"\n\t\"${include_dir}/wincpp/thread_factory.hpp\"\n\n\t\"${include_dir}/wincpp/memory/memory.hpp\"\n\t\"${include_dir}/wincpp/memory/allocation.hpp\"\n\t\"${include_dir}/wincpp/memory/pointer.hpp\"\n\t\"${include_dir}/wincpp/memory/region.hpp\"\n\t\"${include_dir}/wincpp/memory/protection.hpp\"\n\t\"${include_dir}/wincpp/memory/protection_operation.hpp\"\n\n\t\"${include_dir}/wincpp/modules/module.hpp\"\n\t\"${include_dir}/wincpp/modules/export.hpp\"\n\t\"${include_dir}/wincpp/modules/section.hpp\"\n\t\"${include_dir}/wincpp/modules/object.hpp\"\n\n\t\"${include_dir}/wincpp/patterns/scanner.hpp\"\n\t\"${include_dir}/wincpp/patterns/pattern.hpp\"\n\n\t\"${include_dir}/wincpp/windows/window.hpp\"\n\n\t\"${include_dir}/wincpp/threads/thread.hpp\"\n\n\t\"${include_dir}/wincpp/core/win.hpp\"\n\t\"${include_dir}/wincpp/core/error.hpp\"\n\t\"${include_dir}/wincpp/core/snapshot.hpp\"\n\t\"${include_dir}/wincpp/core/errors/win32.hpp\"\n\t\"${include_dir}/wincpp/core/errors/user.hpp\"\n)\n```"
  }
]