[
  {
    "owner": "ansible",
    "repo": "awx",
    "content": "TITLE: Transaction-Safe Task Manager Scheduling in Python\nDESCRIPTION: Demonstrates how to schedule task manager execution within an atomic database transaction block. Uses a ScheduleTaskManager utility class to prevent redundant scheduling of manager tasks.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/task_manager_system.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith transaction.atomic()\n  for t in tasks:\n    if condition:\n      ScheduleTaskManager.schedule()\n```\n\n----------------------------------------\n\nTITLE: POST Job Template Launch Request\nDESCRIPTION: API endpoint for launching a job template. Requires passwords, inventory, and extra variables (as YAML/JSON) if specified by the template configuration. Returns 201 on success, with various error codes for different failure conditions.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/job_template_launch.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npasswords: object\ninventory: integer\nextra_vars: string # YAML or JSON format\n```\n\n----------------------------------------\n\nTITLE: Visualizing AWX Cluster Architecture with ASCII Diagram\nDESCRIPTION: This ASCII diagram illustrates a sample AWX cluster configuration with two control plane nodes, a load balancer, and a shared Postgres database. It shows the components within each control node, including awx-task, awx-ee, awx-web, and redis.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/clustering.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n       ┌───────────────────────────┐\n       │      Load-balancer        │\n       │   (configured separately) │\n       └───┬───────────────────┬───┘\n           │   round robin API │\n           ▼       requests    ▼\n\n  AWX Control               AWX Control\n    Node 1                    Node 2\n┌──────────────┐           ┌──────────────┐\n│              │           │              │\n│ ┌──────────┐ │           │ ┌──────────┐ │\n│ │ awx-task │ │           │ │ awx-task │ │\n│ ├──────────┤ │           │ ├──────────┤ │\n│ │ awx-ee   │ │           │ │ awx-ee   │ │\n│ ├──────────┤ │           │ ├──────────┤ │\n│ │ awx-web  │ │           │ │ awx-web  │ │\n│ ├──────────┤ │           │ ├──────────┤ │\n│ │ redis    │ │           │ │ redis    │ │\n│ └──────────┘ │           │ └──────────┘ │\n│              │           │              │\n└──────────────┴─────┬─────┴──────────────┘\n                     │\n                     │\n               ┌─────▼─────┐\n               │ Postgres  │\n               │ database  │\n               └───────────┘\n```\n\n----------------------------------------\n\nTITLE: Performing Session Login with CSRF Token\nDESCRIPTION: Demonstrates how to POST login credentials with a CSRF token to authenticate a session. Includes headers and cookie configuration.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/authentication.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncurl -X POST -H 'Content-Type: application/x-www-form-urlencoded' \\\n  --referer https://<awx-host>/api/login/ \\\n  -H 'X-CSRFToken: K580zVVm0rWX8pmNylz5ygTPamgUJxifrdJY0UDtMMoOis5Q1UOxRmV9918BUBIN' \\\n  --data 'username=root&password=reverse' \\\n  --cookie 'csrftoken=K580zVVm0rWX8pmNylz5ygTPamgUJxifrdJY0UDtMMoOis5Q1UOxRmV9918BUBIN' \\\n  https://<awx-host>/api/login/ -k -D - -o /dev/null\n```\n\n----------------------------------------\n\nTITLE: Installing AWX CLI via pip\nDESCRIPTION: Commands to install the AWX command-line client via pip and check its help documentation. This provides a consistent interface for managing AWX resources and jobs.\nSOURCE: https://github.com/ansible/awx/blob/devel/INSTALL.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install awxkit\nawx --help\n```\n\n----------------------------------------\n\nTITLE: Invoking Ansible Runner in Python\nDESCRIPTION: Demonstrates how AWX calls the ansible-runner Python module interface to execute Ansible tasks. It includes the main function call and describes the various callbacks used for job control and event handling.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/ansible_runner_integration.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nansible-runner.interface.run()\n```\n\n----------------------------------------\n\nTITLE: SQL Profile Command for AWX\nDESCRIPTION: Command to track slow SQL queries across AWX Python processes. Captures queries that exceed a specified threshold over a defined time period.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/debugging/debugging_misc.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ awx-manage profile_sql --threshold 2 --minutes 5\n```\n\n----------------------------------------\n\nTITLE: JSON Payload Example for Job Template Launch\nDESCRIPTION: Example JSON payload for a POST request to the job template launch endpoint, demonstrating how to provide override values for prompted fields including job_type, limit, credentials, and extra_vars.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/prompting.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"job_type\": \"check\",\n  \"limit\": \"\",\n  \"credentials\": [1, 2, 4, 5],\n  \"extra_vars\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Metrics in Python\nDESCRIPTION: Basic example showing how to initialize a Metrics object, increment a value, and save to Redis. This demonstrates the core functionality of the metrics system.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/subsystem_metrics.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nm = Metrics() # initialize the metrics object\nm.inc(\"foo\", 1) # increment a value\nm.pipe_execute() # save the values to Redis\n```\n\n----------------------------------------\n\nTITLE: Initiating Job Template Callback with curl\nDESCRIPTION: This example demonstrates how to use curl to trigger a job template callback by sending a POST request with the host_config_key parameter. Replace N with the job template ID and HOST_CONFIG_KEY with the actual host_config_key value.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/job_template_callback.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -d '{\"host_config_key\": \"HOST_CONFIG_KEY\"}'  http://server/api/v2/job_templates/N/callback/\n```\n\n----------------------------------------\n\nTITLE: Basic AWX Command Structure\nDESCRIPTION: Demonstrates the basic syntax for AWX CLI commands, showing the standard format of resource and action with optional global parameters.\nSOURCE: https://github.com/ansible/awx/blob/devel/awxkit/awxkit/cli/docs/source/usage.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nawx [<global-options>] <resource> <action> [<arguments>]\nawx --help\n```\n\n----------------------------------------\n\nTITLE: Decrypting Credential and Setting Fields using AWX Shell in Python\nDESCRIPTION: This snippet demonstrates how to use the AWX shell to decrypt secret fields from credentials and settings. It utilizes the decrypt_field function from awx.main.utils to retrieve the decrypted values.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/credentials/extract_credentials.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n$ awx-manage shell_plus\n>>> from awx.main.utils import decrypt_field\n>>> print(decrypt_field(Credential.objects.get(name=\"my private key\"), \"ssh_key_data\")) # Example for a credential\n>>> print(decrypt_field(Setting.objects.get(key='setting'), 'value')) # Example for a setting\n```\n\n----------------------------------------\n\nTITLE: Customizing Pod Specification for Container Group in AWX\nDESCRIPTION: This snippet demonstrates how to use a curl command to update an instance group with a custom Pod specification. It creates a JSON file with a YAML pod_spec_override and sends a PATCH request to the AWX API.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/container_groups.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat > api_request.json <<EOF\n{\n  \"pod_spec_override\": \"spec:\\n  containers:\\n    - image: my-custom-image\"\n}\nEOF\n\ncurl -Lk --user 'admin:password' \\\n     -X PATCH \\\n     -d @api_request.json \\\n     -H 'Content-Type: application/json' \\\n     https://localhost:8043/api/v2/instance_groups/2/\n```\n\n----------------------------------------\n\nTITLE: Generating Test ID in AWX Integration Tests\nDESCRIPTION: Creates a unique test identifier using 16 random ASCII letters for integration test isolation.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/TESTING.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Generate test id\n  set_fact:\n    test_id: \"{{ lookup('password', '/dev/null chars=ascii_letters length=16') }}\"\n```\n\n----------------------------------------\n\nTITLE: Using @timing Decorator for Code Performance Measurement\nDESCRIPTION: Shows how to use the @timing decorator to measure and record precise execution time of AWX functions, useful for performance analysis without the overhead of full profiling.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/debugging/debugging_misc.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@timing(name, dest='/var/log/tower/timing')\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom awx.main.utils.profiling import timing\n\n@timing(name=\"my_task_manager_timing\")\ndef task_manager():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Authenticating to AWX using environment variables and command-line options in Bash\nDESCRIPTION: This snippet shows two methods for authenticating to AWX: using environment variables and using command-line options. Both methods require providing a username and password for authentication when executing AWX commands.\nSOURCE: https://github.com/ansible/awx/blob/devel/awxkit/awxkit/cli/docs/source/authentication.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCONTROLLER_USERNAME=alice CONTROLLER_PASSWORD=secret awx jobs list\nawx --conf.username alice --conf.password secret jobs list\n```\n\n----------------------------------------\n\nTITLE: Query Active Postgres Sessions\nDESCRIPTION: SQL query to monitor long-running database sessions, showing duration, query state, and application name for sessions running longer than 5 minutes.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/debugging/debugging_misc.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  now() - pg_stat_activity.query_start AS duration,\n  query,\n  state,\n  application_name\nFROM pg_stat_activity\nWHERE (now() - pg_stat_activity.query_start) > interval '5 minutes' and state='active';\n```\n\n----------------------------------------\n\nTITLE: Building AWX Documentation Locally\nDESCRIPTION: Uses tox to build the AWX documentation on your local machine from your forked branch.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/contributor/setting_up.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntox -e docs\n```\n\n----------------------------------------\n\nTITLE: Using Top-Level Prompted Fields in Bulk Job Launch API\nDESCRIPTION: This JSON snippet demonstrates how to provide prompted field values at the top level when using the bulk job launch API. It shows an example of specifying inventory for multiple job templates.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/bulk_api.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Bulk Job Launch\",\n    \"jobs\": [\n        {\"unified_job_template\": 11, \"limit\": \"kansas\", \"credentials\": [1]},\n        {\"unified_job_template\": 12},\n        {\"unified_job_template\": 13}\n    ],\n    \"inventory\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Machine Credential to HashiCorp Vault in AWX API\nDESCRIPTION: API call to link a Machine credential to a HashiCorp Vault credential, enabling external secret lookup for the password field. This configures AWX to fetch the password from HashiCorp Vault.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/credentials/credential_plugins.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n~ curl -sik \"https://awx.example.org/api/v2/credentials/1/input_sources/\" \\\n    -H \"Authorization: Bearer <token>\" \\\n    -H \"Content-Type: application/json\" \\\n    -X POST \\\n    -d '{\"source_credential\": 2, \"input_field_name\": \"password\", \"metadata\": {\"secret_path\": \"/kv/my-secret\", \"secret_key\": \"password\"}}'\nHTTP/1.1 201 Created\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Survey Specification Example in JSON\nDESCRIPTION: A complete example showing all question types (text, multiplechoice, multiselect, integer, float) with various parameters including min/max constraints, required fields, and default values.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/job_template_survey_spec.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Simple\",\n    \"description\": \"Description\",\n    \"spec\": [\n        {\n    \t\"type\": \"text\",\n    \t\"question_name\": \"cantbeshort\",\n    \t\"question_description\": \"What is a long answer\",\n    \t\"variable\": \"long_answer\",\n    \t\"choices\": \"\",\n    \t\"min\": 5,\n    \t\"max\": \"\",\n    \t\"required\": false,\n    \t\"default\": \"Leeloo Minai Lekarariba-Laminai-Tchai Ekbat De Sebat\"\n        },\n        {\n    \t\"type\": \"text\",\n    \t\"question_name\": \"cantbelong\",\n    \t\"question_description\": \"What is a short answer\",\n    \t\"variable\": \"short_answer\",\n    \t\"choices\": \"\",\n    \t\"min\": \"\",\n    \t\"max\": 7,\n    \t\"required\": false,\n    \t\"default\": \"leeloo\"\n        },\n        {\n    \t\"type\": \"text\",\n    \t\"question_name\": \"reqd\",\n    \t\"question_description\": \"I should be required\",\n    \t\"variable\": \"reqd_answer\",\n    \t\"choices\": \"\",\n    \t\"min\": \"\",\n    \t\"max\": \"\",\n    \t\"required\": true,\n    \t\"default\": \"NOT OPTIONAL\"\n        },\n        {\n    \t\"type\": \"multiplechoice\",\n    \t\"question_name\": \"achoice\",\n    \t\"question_description\": \"Need one of these\",\n    \t\"variable\": \"single_choice\",\n    \t\"choices\": [\"one\", \"two\"],\n    \t\"min\": \"\",\n    \t\"max\": \"\",\n    \t\"required\": false,\n    \t\"default\": \"one\"\n        },\n        {\n    \t\"type\": \"multiselect\",\n    \t\"question_name\": \"mchoice\",\n    \t\"question_description\": \"Can have multiples of these\",\n    \t\"variable\": \"multi_choice\",\n    \t\"choices\": [\"one\", \"two\", \"three\"],\n    \t\"min\": \"\",\n    \t\"max\": \"\",\n    \t\"required\": false,\n    \t\"default\": \"one\\nthree\"\n        },\n        {\n            \"type\": \"integer\",\n            \"question_name\": \"integerchoice\",\n            \"question_description\": \"I need an int here\",\n            \"variable\": \"int_answer\",\n            \"choices\": \"\",\n            \"min\": 1,\n            \"max\": 5,\n            \"required\": false,\n            \"default\": \"\"\n        },\n        {\n            \"type\": \"float\",\n            \"question_name\": \"float\",\n            \"question_description\": \"I need a float here\",\n            \"variable\": \"float_answer\",\n            \"choices\": \"\",\n            \"min\": 2,\n            \"max\": 5,\n            \"required\": false,\n            \"default\": \"\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Python Code Linter in AWX\nDESCRIPTION: Command to run the Black code formatter in the AWX development container to ensure code meets style guidelines.\nSOURCE: https://github.com/ansible/awx/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n(container)/awx_devel$ make black\n```\n\n----------------------------------------\n\nTITLE: Launching Multiple Jobs with Bulk Job Launch API in AWX\nDESCRIPTION: This JSON snippet demonstrates how to use the bulk job launch API to create a workflow job with multiple nodes. It includes an example of launching three jobs in a single request.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/bulk_api.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Bulk Job Launch\",\n    \"jobs\": [\n        {\"unified_job_template\": 7},\n        {\"unified_job_template\": 8},\n        {\"unified_job_template\": 9}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the AWX Repository with Specific Version Tag\nDESCRIPTION: Command for cloning a specific stable release of the AWX repository using git. This ensures you're working with a stable version rather than potentially unstable code from HEAD.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone -b x.y.z https://github.com/ansible/awx.git\n```\n\n----------------------------------------\n\nTITLE: Installing awxkit Python Library\nDESCRIPTION: Command to install the awxkit library using pip package manager. This library is required for using the AWX command line interface.\nSOURCE: https://github.com/ansible/awx/blob/devel/awxkit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install awxkit\n```\n\n----------------------------------------\n\nTITLE: Running All Integration Tests with Ansible Playbook\nDESCRIPTION: Command to run all integration tests using an Ansible playbook. This method uses shell commands to generate a list of all test targets.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/tools/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nansible-playbook -i localhost, awx_collection/tools/integration_testing.yml -e test=$(ls -1Am awx_collection/tests/integration/targets/ | tr -d '[:space:]')\n```\n\n----------------------------------------\n\nTITLE: Building the AWX Development Docker Image\nDESCRIPTION: Command to build the development Docker image using make. This creates an image named ansible/awx_devel that contains the AWX development environment.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ make docker-compose-build\n```\n\n----------------------------------------\n\nTITLE: Passing Extra Variables to Job Template Callback\nDESCRIPTION: This example demonstrates how to include extra_vars when triggering a job template callback with curl. Extra variables allow passing additional parameters to the job. Replace N with the job template ID and HOST_CONFIG_KEY with the actual host_config_key value.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/job_template_callback.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -d '{\"host_config_key\": \"HOST_CONFIG_KEY\", \"extra_vars\": {\"key\": \"value\"}}'  http://server/api/v2/job_templates/N/callback/\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Groups via AWX API\nDESCRIPTION: This code snippet demonstrates how to associate an Instance with an Instance Group using the AWX API. It shows the HTTP POST request format for adding an instance to a group.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/clustering.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP POST /api/v2/instance_groups/x/instances/ {'id': y}\n```\n\n----------------------------------------\n\nTITLE: Creating AWX Admin User\nDESCRIPTION: Command to create a superuser admin account in AWX container\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -ti tools_awx_1 awx-manage createsuperuser\n```\n\n----------------------------------------\n\nTITLE: Launching Multiple Jobs with Custom Parameters in Ansible AWX API (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to structure a request to the bulk job launch endpoint. It includes a name for the bulk job and an array of jobs to launch, each with its own UnifiedJobTemplate ID and custom launch parameters like inventory or credentials.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/bulk_job_launch_view.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"my bulk job\",\n    \"jobs\": [\n        {\"unified_job_template\": 7, \"inventory\": 2},\n        {\"unified_job_template\": 7, \"credentials\": [3]}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: List Available AWX Resources\nDESCRIPTION: Command to display all available resources in AWX by accessing the help menu with a specified host.\nSOURCE: https://github.com/ansible/awx/blob/devel/awxkit/awxkit/cli/docs/source/usage.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nawx --conf.host https://awx.example.org --help\n```\n\n----------------------------------------\n\nTITLE: Filtering by Ansible Facts in AWX API\nDESCRIPTION: Examples of filtering hosts by ansible_facts data in Ansible AWX API. Shows how to traverse JSON dictionaries using double underscores and how to traverse JSON arrays using square brackets.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/host_list.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n?host_filter=ansible_facts__ansible_processor_vcpus=8\n?host_filter=ansible_facts__ansible_processor_vcpus=8 and name=\"my_host\" and ansible_facts__ansible_lo__ipv6[]__scope=host\n```\n\n----------------------------------------\n\nTITLE: GET Job Template Launch Check Response\nDESCRIPTION: API response fields when checking if a job template can be launched. Includes configuration flags, required inputs, and launch requirements.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/job_template_launch.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nask_variables_on_launch: boolean\nask_tags_on_launch: boolean\nask_skip_tags_on_launch: boolean\nask_job_type_on_launch: boolean\nask_limit_on_launch: boolean\nask_inventory_on_launch: boolean\nask_credential_on_launch: boolean\ncan_start_without_user_input: boolean\npasswords_needed_to_start: array\nvariables_needed_to_start: array\nsurvey_enabled: boolean\ninventory_needed_to_start: boolean\n```\n\n----------------------------------------\n\nTITLE: Websocket Subscription Payload Structure in JSON\nDESCRIPTION: This JSON structure shows how to subscribe to different event groups and types in the AWX websocket implementation. It includes various job types, schedules, and control events.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/websockets.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"groups\": {\n    \"jobs\": [\"status_changed\", \"summary\"],\n    \"schedules\": [\"changed\"],\n    \"ad_hoc_command_events\": [ids...],\n    \"job_events\": [ids...],\n    \"workflow_events\": [ids...],\n    \"project_update_events\": [ids...],\n    \"inventory_update_events\": [ids...],\n    \"system_job_events\": [ids...],\n    \"control\": [\"limit_reached_<user_id>\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Websocket Authentication Payload in Python\nDESCRIPTION: This snippet demonstrates how to construct the authentication payload for the websocket relay endpoint. It includes the shared secret and a nonce to mitigate replay attacks, using HMAC-SHA256 for encryption.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/websockets.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"secret\": settings.BROADCAST_WEBSOCKET_SECRET,\n    \"nonce\": time.now()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Launching Job Template\nDESCRIPTION: Series of commands to create a project from GitHub, create a job template, and launch it with monitoring\nSOURCE: https://github.com/ansible/awx/blob/devel/awxkit/awxkit/cli/docs/source/examples.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nawx projects create --wait \\\n    --organization 1 --name='Example Project' \\\n    --scm_type git --scm_url 'https://github.com/ansible/ansible-tower-samples' \\\n    -f human\nawx job_templates create \\\n    --name='Example Job Template' --project 'Example Project' \\\n    --playbook hello_world.yml --inventory 'Demo Inventory' \\\n    -f human\nawx job_templates launch 'Example Job Template' --monitor -f human\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Notification Template with Templated Messages in AWX API\nDESCRIPTION: This example demonstrates creating a notification template with custom messages using Jinja templates through the AWX API. The template includes customized started and error messages with templated fields referencing whitelisted job attributes, while using default content for success notifications.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/notification_system.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"E-mail notification\",\n    \"description\": \"Custom e-mail notification\",\n    \"organization\": 1,\n    \"notification_type\": \"email\",\n    \"notification_configuration\": {\n      ..\n    },\n    \"messages\": {\n        \"started\": {\n            \"message\": \"{{ job.name }} completed successfully in {{ job.elapsed }} seconds using instance group {{ job.summary_fields.instance_group.name }}\",\n            \"body\": null        # default body will be used\n        },\n        \"success\": {\n            \"message\": null,    # default message will be used\n            \"body\": null        # default body will be used\n        },\n        \"error\": {\n            \"message\": \"{{ job.name }} was unsuccessful ({{ job.status }})\",\n            \"body\": \"{{ job.job_explanation }}\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending PATCH Request to Update AWX Instance Group with Custom Pod Spec\nDESCRIPTION: This curl command sends a PATCH request to the AWX API to update an instance group with a custom Pod specification. It includes authentication, content type headers, and references the previously created JSON file.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/container_groups/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Lk --user 'admin:password' \\\n     -X PATCH \\\n     -d @api_request.json \\\n     -H 'Content-Type: application/json' \\\n     https://localhost:8043/api/v2/instance_groups/2/\n```\n\n----------------------------------------\n\nTITLE: Inspecting Redis Keys and Websocket Groups in AWX\nDESCRIPTION: This snippet demonstrates how to connect to Redis and inspect keys related to websocket groups in AWX. It shows commands to list all keys, examine the broadcast group, and check the depth of a websocket message queue.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/debugging/debugging_job_event_performance.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli -s /var/run/redis/redis.sock\n\nredis /var/run/redis/redis.sock> keys *\n1) \"awx_dispatcher_statistics\"\n2) \"callback_tasks\"\n3) \"broadcast_websocket_stats\"\n4) \"awx_callback_receiver_statistics_105217\"\n5) \"asgi:group:broadcast-group_send\"\n6) \"asgispecific.2061d193ea1c4dd487d8f455dfeabd6a!\"\n\nredis /var/run/redis/redis.sock> zrange asgi:group:broadcast-group_send 0 -1\n1) \"specific.2061d193ea1c4dd487d8f455dfeabd6a!20e9f507dd78489b89eb2aeb153d3834\"\n2) \"specific.2061d193ea1c4dd487d8f455dfeabd6a!ea4463175cbb4b04937b98941aae0731\"\n3) \"specific.2061d193ea1c4dd487d8f455dfeabd6a!8b5249bcb61c4026a9d4e341afe98a56\"\n4) \"specific.2061d193ea1c4dd487d8f455dfeabd6a!4854fb8c3d36442d95ff41a34fc5ee16\"\n\nredis /var/run/redis/redis.sock> zcount asgispecific.2061d193ea1c4dd487d8f455dfeabd6a! -inf +inf\n(integer) 58\nredis /var/run/redis/redis.sock> zcount asgispecific.2061d193ea1c4dd487d8f455dfeabd6a! -inf +inf\n(integer) 29\nredis /var/run/redis/redis.sock> zcount asgispecific.2061d193ea1c4dd487d8f455dfeabd6a! -inf +inf\n(integer) 18\nredis /var/run/redis/redis.sock> zcount asgispecific.2061d193ea1c4dd487d8f455dfeabd6a! -inf +inf\n(integer) 3\nredis /var/run/redis/redis.sock> zcount asgispecific.2061d193ea1c4dd487d8f455dfeabd6a! -inf +inf\n(integer) 14\nredis /var/run/redis/redis.sock> zcount asgispecific.2061d193ea1c4dd487d8f455dfeabd6a! -inf +inf\n(integer) 15\n```\n\n----------------------------------------\n\nTITLE: Terminating All User Sessions with awx-manage\nDESCRIPTION: Command to terminate all sessions in AWX. This logs out all users from the system.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/awx-manage.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ awx-manage expire_sessions\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group Tree Data in Ansible AWX API\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve a hierarchical view of groups associated with a specific model in Ansible AWX. The response includes a list of root groups, each containing a list of its children. Each group data structure contains common result fields.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/inventory_tree_view.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Group Tree for {{ model_verbose_name|title|anora }}:\n\nMake a GET request to this resource to retrieve a hierarchical view of groups\nassociated with the selected {{ model_verbose_name }}.\n\nThe resulting data structure contains a list of root groups, with each group\nalso containing a list of its children.\n\n## Results\n\nEach group data structure includes the following fields:\n\n{% include \"api/_result_fields_common.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Creating Schedule API Endpoints\nDESCRIPTION: Lists the available API endpoints for creating scheduled jobs in AWX. Each endpoint corresponds to different job types like templates, projects, inventory sources, system jobs, and workflow templates.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/schedules.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://tower-host.example.org/api/v2/job_templates/N/schedules/\nhttps://tower-host.example.org/api/v2/projects/N/schedules/\nhttps://tower-host.example.org/api/v2/inventory_sources/N/schedules/\nhttps://tower-host.example.org/api/v2/system_jobs/N/schedules/\nhttps://tower-host.example.org/api/v2/workflow_job_templates/N/schedules/\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Hosts with Bulk Host Create API in AWX\nDESCRIPTION: This JSON snippet demonstrates how to use the bulk host create API to add multiple hosts to an inventory in a single request. It includes an example of adding six hosts, with variables specified for one host.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/bulk_api.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"inventory\": 1,\n    \"hosts\": [{\"name\": \"host1\", \"variables\": \"ansible_connection: local\"}, {\"name\": \"host2\"}, {\"name\": \"host3\"}, {\"name\": \"host4\"}, {\"name\": \"host5\"}, {\"name\": \"host6\"}]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Ansible Playbook with Multiple Plays\nDESCRIPTION: An example playbook containing two plays: a 'preflight' play that runs checks on all hosts, and an 'install' play that conditionally installs different components based on host groups.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/job_events.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# main.yml\n---\n- hosts: all\n  name: preflight\n  tasks:\n    - name: check_space_requirements\n      ...\n    - name: check_ram\n      ...\n    - name: check_umask\n      ...\n\n- hosts: all\n  name: install\n  tasks:\n    - name: install_tower\n      ...\n      when: inventory_hostname in ['A', 'B']\n    - name: install_postgres\n      ...\n      when: inventory_hostname == 'C'\n```\n\n----------------------------------------\n\nTITLE: Starting AWX Container Shell\nDESCRIPTION: Command to start an interactive shell session in the AWX container\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n(host)$ docker exec -it tools_awx_1 bash\n```\n\n----------------------------------------\n\nTITLE: Registering Validation Methods for AWX Configuration Categories\nDESCRIPTION: Shows how to register custom validation methods to specific configuration categories at the end of a conf.py file. Each validation function gets associated with a particular category slug.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/tower_configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# conf.py\n...\nfrom awx.conf import register_validate\n...\ndef validate_a(serializer, attrs):\n...\ndef validate_b(serializer, attrs):\n...\n# At the end of conf.py\nregister_validate(\"category_a\", validate_a)\nregister_validate(\"category_b\", validate_b)\n...\n```\n\n----------------------------------------\n\nTITLE: Job Directory Structure for Collections and Roles\nDESCRIPTION: Example directory structure showing how collections and roles are organized in the job temporary directory, including the hierarchy of collection files and roles.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/collections.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n├── requirements_collections\n│   └── ansible_collections\n│       └── namespace\n│           └── collection_name\n│               ├── FILES.json\n│               ├── MANIFEST.json\n│               ├── README.md\n│               ├── roles\n│               │   ├── role_in_collection_name\n│               │   │   ├── defaults\n│               │   │   │   └── main.yml\n│               │   │   ├── tasks\n│               │   │   │   └── main.yml\n│               │   │   └── templates\n│               │   │       └── stuff.j2\n│               └── tests\n│                   └── main.yml\n└── requirements_roles\n    └── namespace.role_name\n        ├── defaults\n        │   └── main.yml\n        ├── meta\n        │   └── main.yml\n        ├── README.md\n        ├── tasks\n        │   ├── main.yml\n        │   └── some_role.yml\n        ├── templates\n        │   └── stuff.j2\n        └── vars\n            └── Archlinux.yml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Credential Type IDs in AWX API\nDESCRIPTION: Shell commands to retrieve the IDs of Machine and HashiCorp Vault Secret Lookup credential types using the AWX API. These IDs are used in subsequent API calls for credential configuration.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/credentials/credential_plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n~ curl -sik \"https://awx.example.org/api/v2/credential_types/?name=Machine\" \\\n    -H \"Authorization: Bearer <token>\"\nHTTP/1.1 200 OK\n{\n    \"results\": [\n        {\n            \"id\": 1,\n            \"url\": \"/api/v2/credential_types/1/\",\n            \"name\": \"Machine\",\n            ...\n\n```\n\nLANGUAGE: shell\nCODE:\n```\n~ curl -sik \"https://awx.example.org/api/v2/credential_types/?name__startswith=HashiCorp\" \\\n    -H \"Authorization: Bearer <token>\"\nHTTP/1.1 200 OK\n{\n    \"results\": [\n        {\n            \"id\": 15,\n            \"url\": \"/api/v2/credential_types/15/\",\n            \"name\": \"HashiCorp Vault Secret Lookup\",\n            ...\n```\n\n----------------------------------------\n\nTITLE: Configuring HashiCorp Vault SSH Secrets Engine in AWX API\nDESCRIPTION: Series of API calls to set up a Machine credential with public key signing using HashiCorp Vault's SSH Secrets Engine. This includes creating credentials and linking them for SSH key signing.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/credentials/credential_plugins.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n~ curl -sik \"https://awx.example.org/api/v2/credentials/\" \\\n    -H \"Authorization: Bearer <token>\" \\\n    -H \"Content-Type: application/json\" \\\n    -X POST \\\n    -d '{\"user\": N, \"credential_type\": 1, \"name\": \"My SSH\", \"inputs\": {\"username\": \"example\", \"ssh_key_data\": \"RSA KEY DATA\"}}'\n\nHTTP/1.1 201 Created\n{\n    \"credential_type\": 1,\n    \"description\": \"\",\n    \"id\": 1,\n    ...\n```\n\nLANGUAGE: shell\nCODE:\n```\n~ curl -sik \"https://awx.example.org/api/v2/credentials/\" \\\n    -H \"Authorization: Bearer <token>\" \\\n    -H \"Content-Type: application/json\" \\\n    -X POST \\\n    -d '{\"user\": N, \"credential_type\": 16, \"name\": \"My Hashi Credential\", \"inputs\": {\"url\": \"https://vault.example.org\", \"token\": \"vault-token\"}}'\n\nHTTP/1.1 201 Created\n{\n    \"credential_type\": 16,\n    \"description\": \"\",\n    \"id\": 2,\n    ...\n```\n\nLANGUAGE: shell\nCODE:\n```\n~ curl -sik \"https://awx.example.org/api/v2/credentials/1/input_sources/\" \\\n    -H \"Authorization: Bearer <token>\" \\\n    -H \"Content-Type: application/json\" \\\n    -X POST \\\n    -d '{\"source_credential\": 2, \"input_field_name\": \"password\", \"metadata\": {\"public_key\": \"UNSIGNED PUBLIC KEY\", \"secret_path\": \"/ssh/\", \"role\": \"example-role\"}}'\nHTTP/1.1 201 Created\n```\n\n----------------------------------------\n\nTITLE: Related Field Searching in AWX API\nDESCRIPTION: Shows how to perform a search across related fields in the AWX API by using the related__search parameter.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/searching.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttp://<server name>/api/v2/model_verbose_name?related__search=findme\n```\n\n----------------------------------------\n\nTITLE: Pushing Custom AWX Image to Container Registry\nDESCRIPTION: After building the custom AWX image, this command pushes it to a specified container registry. Replace 'registry.example.com' with your actual registry address, and 'test' with your desired tag.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/build_awx_image.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker push registry.example.com/awx:test\n```\n\n----------------------------------------\n\nTITLE: Building AWX CLI Documentation\nDESCRIPTION: Commands to build and serve the AWX CLI documentation. This process requires a running AWX server, Sphinx, and environment variables for authentication.\nSOURCE: https://github.com/ansible/awx/blob/devel/INSTALL.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n~ cd awxkit/awxkit/cli/docs\n~ TOWER_HOST=https://awx.example.org TOWER_USERNAME=example TOWER_PASSWORD=secret make clean html\n~ cd build/html/ && python -m http.server\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ..\n```\n\n----------------------------------------\n\nTITLE: Postgres Configuration for Slow Query Logging\nDESCRIPTION: Configuration settings for Postgres to enable slow query logging with application name tracking.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/debugging/debugging_misc.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nlog_min_duration_statement = 500 # in ms\nlog_line_prefix = '< %m %a >' # timestamp, application name\n```\n\n----------------------------------------\n\nTITLE: Configuring Kind Cluster for AWX Development in YAML\nDESCRIPTION: This YAML configuration defines a Kind cluster with a control-plane node, mounting the AWX source code and mapping ports for access.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/kind.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  extraMounts:\n  - hostPath: /path/to/awx\n    containerPath: /awx_devel\n  extraPortMappings:\n  - containerPort: 30080\n    hostPort: 30080\n```\n\n----------------------------------------\n\nTITLE: Launching Jobs with Prompt-on-Launch Fields in Bulk Job Launch API\nDESCRIPTION: This JSON snippet shows how to provide prompt-on-launch fields when using the bulk job launch API. It includes an example of specifying limit, credentials, and inventory for a job template.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/bulk_api.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Bulk Job Launch\",\n    \"jobs\": [\n        {\"unified_job_template\": 11, \"limit\": \"kansas\", \"credentials\": [1], \"inventory\": 1}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Job Template Callback with wget\nDESCRIPTION: This example shows how to use wget to trigger a job template callback by sending a POST request with the host_config_key parameter. Replace N with the job template ID and HOST_CONFIG_KEY with the actual host_config_key value.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/job_template_callback.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget -O /dev/null --post-data='{\"host_config_key\": \"HOST_CONFIG_KEY\"}' --header=Content-Type:application/json http://server/api/v2/job_templates/N/callback/\n```\n\n----------------------------------------\n\nTITLE: Configuring AWX Authentication in INI Format\nDESCRIPTION: This code snippet shows the syntax for configuring AWX authentication in an INI-style configuration file. It specifies the host URL, SSL verification, username, and password.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/README.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[general]\nhost = https://localhost:8043\nverify_ssl = true\nusername = foo\npassword = bar\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Control Plane and Execution Nodes\nDESCRIPTION: Command to configure an AWX development environment with multiple control plane and execution nodes for a more complex cluster setup.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nCONTROL_PLANE_NODE_COUNT=2 EXECUTION_NODE_COUNT=3 COMPOSE_TAG=devel make docker-compose\n```\n\n----------------------------------------\n\nTITLE: Accessing AWX Shell in Kubernetes Deployment using Bash\nDESCRIPTION: This snippet shows how to execute the awx-manage command to access the AWX shell in a Kubernetes-based deployment. It uses kubectl to exec into the appropriate container and run the shell_plus command.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/credentials/extract_credentials.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl exec --stdin --tty [instance name]-task-[...] -c [instance name]-task -- awx-manage shell_plus\n```\n\n----------------------------------------\n\nTITLE: Executing AWX Dispatcher Status Check\nDESCRIPTION: Shows the command to check the status of the AWX dispatcher, which outputs information about worker processes, including their PIDs, tasks sent and finished, queue size, and memory usage.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/tasks.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n[root@awx /]# awx-manage run_dispatcher --status\n2018-09-14 18:39:22,223 WARNING  awx.main.dispatch checking dispatcher status for awx\nawx[pid:9610] workers total=4 min=4 max=60\n.  worker[pid:9758] sent=12 finished=12 qsize=0 rss=106.730MB [IDLE]\n.  worker[pid:9769] sent=5 finished=5 qsize=0 rss=105.141MB [IDLE]\n.  worker[pid:9782] sent=5 finished=4 qsize=1 rss=110.430MB\n     - running 0c1deb4d-25ae-49a9-804f-a8afd05aff29 RunJob(*[9])\n.  worker[pid:9787] sent=3 finished=3 qsize=0 rss=101.824MB [IDLE]\n```\n\n----------------------------------------\n\nTITLE: Using @profile Decorator for Code Profiling\nDESCRIPTION: Shows how to use the @profile decorator to generate profiling data for AWX functions, including how to enable dot graph output for visualization with tools like xdot.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/debugging/debugging_misc.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n/var/lib/awx/venv/awx/bin/pip3 install gprof2dot\n```\n\nLANGUAGE: python\nCODE:\n```\n@profile(name, dest='/var/log/tower/profile', dot_enabled=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom awx.main.utils.profiling import profile\n\n@profile(name=\"task_manager_profile\")\ndef task_manager():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Job Event Hierarchy Visualization\nDESCRIPTION: A tree structure visualization showing the hierarchical relationship between job events as they are generated when running the example playbook with the default execution strategy.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/job_events.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n`-- playbook_on_start\n    |-- playbook_on_play_start-preflight\n    |   |-- playbook_on_task_start-check_space_requirements\n    |   |   |-- runner_on_ok_hostA\n    |   |   |-- runner_on_ok_hostB\n    |   |   `-- runner_on_ok_hostC\n    |   |-- playbook_on_task_start-check_ram\n    |   |   |-- runner_on_ok_hostA\n    |   |   |-- runner_on_ok_hostB\n    |   |   `-- runner_on_ok_hostC\n    |   `-- playbook_on_task_start-check_umask\n    |       |-- runner_on_ok_hostA\n    |       |-- runner_on_ok_hostB\n    |       `-- runner_on_ok_hostC\n    `-- playbook_on_play_start-install\n        |-- playbook_on_task_start-install_tower\n        |   |-- runner_on_ok_hostA\n        |   `-- runner_on_ok_hostB\n        `-- playbook_on_task_start-install_postgres\n            `-- runner_on_ok_hostC\n```\n\n----------------------------------------\n\nTITLE: Importing SSH Key Credentials\nDESCRIPTION: Command to create machine credentials with SSH key authentication\nSOURCE: https://github.com/ansible/awx/blob/devel/awxkit/awxkit/cli/docs/source/examples.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nawx credentials create --credential_type 'Machine' \\\n    --name 'My SSH Key' --user 'alice' \\\n    --inputs '{\"username\": \"server-login\", \"ssh_key_data\": \"@~/.ssh/id_rsa\"}'\n```\n\n----------------------------------------\n\nTITLE: Defining Credential Type Input Schema\nDESCRIPTION: Example schema showing how to define credential type inputs with various field types, validations, and options.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/credentials/custom_credential_types.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"inputs\": {\n        \"fields\": [{\n            \"id\": \"api_token\",\n            \"label\": \"API Token\",\n            \"help_text\": \"User-facing short text describing the field.\",\n            \"type\": \"string\",\n            \"format\": \"ssh_private_key\",\n            \"secret\": true,\n            \"multiline\": false,\n            \"default\": \"default value\"\n        }],\n        \"required\": [\"api_token\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Pinning Instances to Specific Groups in AWX\nDESCRIPTION: This snippet demonstrates how to exclusively assign an instance to specific instance groups by adding it to the policy_instance_list and setting managed_by_policy to False to prevent automatic assignment to other groups.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/clustering.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nHTTP PATCH /api/v2/instance_groups/N/\n{\n    \"policy_instance_list\": [\"special-instance\"]\n}\n\nHTTP PATCH /api/v2/instances/X/\n{\n    \"managed_by_policy\": False\n}\n```\n\n----------------------------------------\n\nTITLE: Using Basic Host Filtering in Ansible AWX API\nDESCRIPTION: Examples of basic host filtering using the host_filter parameter in Ansible AWX API endpoints. Demonstrates filtering by hostname, using boolean logic (and/or), and expression grouping with parentheses.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/host_list.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n?host_filter=name=my_host\n?host_filter=name=\"my host\" or name=my_host\n?host_filter=groups__name=\"my group\"\n?host_filter=name=my_host and groups__name=\"my group\"\n?host_filter=name=my_host and groups__name=\"my group\"\n?host_filter=(name=my_host and groups__name=\"my group\") or (name=my_host2 and groups__name=my_group2)\n```\n\n----------------------------------------\n\nTITLE: Starting AWX Development Environment\nDESCRIPTION: Commands to initialize and launch AWX development services\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n(host)$ make docker-compose-test\n(container)# /usr/bin/bootstrap_development.sh\n(container)# /usr/bin/launch_awx.sh\n```\n\n----------------------------------------\n\nTITLE: Example Paginated API Response in Ansible AWX\nDESCRIPTION: Shows the structure of a typical paginated response from the AWX API, including the count of total items, links to next/previous pages, and the results array.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/pagination.rst#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{'count': 25, 'next': 'http://testserver/api/v2/some_resource?page=2', 'previous': None, 'results': [ ... ] }\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Custom AWX Image\nDESCRIPTION: Commands for building a custom AWX development image and deploying it to Kubernetes.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/minikube.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ make awx-kube-dev-build\n$ docker push ghcr.io/ansible/awx_kube_devel:${COMPOSE_TAG}\n```\n\n----------------------------------------\n\nTITLE: Enabling Websocket Queue Capacity Logging in AWX\nDESCRIPTION: This code snippet shows how to enable logging for websocket queue capacity issues in AWX. It configures the logging settings and provides an example of how to view the logs using the tail command.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/debugging/debugging_job_event_performance.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nLOGGING['loggers']['channels_redis.core'] = {\n    'handlers': ['console', 'file', 'tower_warnings'],\n    'level': 'DEBUG'\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\ntail -f /var/log/tower/tower.log\n2021-04-28 20:53:51,230 INFO     channels_redis.core 1 of 4 channels over capacity in group broadcast-group_send\n2021-04-28 20:53:51,231 INFO     channels_redis.core 1 of 1 channels over capacity in group job_events-49\n```\n\n----------------------------------------\n\nTITLE: Configuring Logstash for AWX JSON Logs\nDESCRIPTION: Configuration snippet for Logstash that enables JSON parsing of incoming log messages from AWX. This filter configuration extracts structured data from the message field of logs.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/logging_integration.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfilter {\n\tjson {\n\t\tsource => \"message\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing AWX Service and Credentials\nDESCRIPTION: Commands to access the AWX service URL and retrieve admin credentials.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/minikube.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ minikube service awx-service --url\n$ kubectl get secrets awx-admin-password -o json | jq '.data.password' | xargs | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Bulk Delete Request Format in JSON\nDESCRIPTION: Example request payload showing the format for deleting multiple hosts. Requires an array of host IDs in the 'hosts' field.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/bulk_host_delete_view.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"hosts\": [1, 2, 3, 4, 5]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying SCM Inventory Source Fields in YAML\nDESCRIPTION: This snippet shows the required fields for creating an SCM inventory source in Ansible AWX. It includes the source project, source path, and source type.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/inventory/scm_inventory.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsource_project: <project_name>\nsource_path: <relative_path>\nsource: \"scm\"\n```\n\n----------------------------------------\n\nTITLE: Histogram Metrics Output Example\nDESCRIPTION: Example showing the format of histogram metrics output, demonstrating how bucket-based observations are stored and displayed.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/subsystem_metrics.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncallback_receiver_batch_events_insert_db_bucket{le=\"10\",node=\"awx_1\"} 1\ncallback_receiver_batch_events_insert_db_bucket{le=\"50\",node=\"awx_1\"} 5\ncallback_receiver_batch_events_insert_db_bucket{le=\"150\",node=\"awx_1\"} 5\ncallback_receiver_batch_events_insert_db_bucket{le=\"350\",node=\"awx_1\"} 5\ncallback_receiver_batch_events_insert_db_bucket{le=\"650\",node=\"awx_1\"} 5\ncallback_receiver_batch_events_insert_db_bucket{le=\"2000\",node=\"awx_1\"} 5\ncallback_receiver_batch_events_insert_db_bucket{le=\"+Inf\",node=\"awx_1\"} 5\ncallback_receiver_batch_events_insert_db_count{node=\"awx_1\"} 5\ncallback_receiver_batch_events_insert_db_sum{node=\"awx_1\"} 5\n```\n\n----------------------------------------\n\nTITLE: Implementing JobTemplateCopy View in Python for AWX\nDESCRIPTION: Example of creating a copy view class for JobTemplate resource. The view inherits from CopyAPIView and specifies the model and serializer class for the copy operation.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/resource_copy.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass JobTemplateCopy(CopyAPIView):\n\n    model = JobTemplate\n    copy_return_serializer_class = JobTemplateSerializer\n```\n\n----------------------------------------\n\nTITLE: Building AWX UI\nDESCRIPTION: Command to clean and build the AWX user interface from ansible-ui repository\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake clean/ui ui\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWX Admin Password from Kubernetes Secret\nDESCRIPTION: This Bash command retrieves and decodes the AWX admin password from a Kubernetes secret.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/kind.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secrets awx-admin-password -o json | jq '.data.password' | xargs | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Settings in Ansible Tower (GET)\nDESCRIPTION: This snippet outlines the GET request to retrieve configuration settings and general information for Ansible Tower. It lists the available fields in the response, including project paths, time zone, license info, version, and more.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/api_v2_config_view.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% ifmeth GET %}\n# Site configuration settings and general information\n\nMake a GET request to this resource to retrieve the configuration containing\nthe following fields (some fields may not be visible to all users):\n\n* `project_base_dir`: Path on the server where projects and playbooks are \\\n  stored.\n* `project_local_paths`: List of directories beneath `project_base_dir` to\n  use when creating/editing a manual project.\n* `time_zone`: The configured time zone for the server.\n* `license_info`: Information about the current license.\n* `version`: Version of Ansible Tower package installed.\n* `custom_virtualenvs`: Deprecated venv locations from before migration to\n  execution environments. Export tooling is in `awx-manage` commands.\n* `eula`: The current End-User License Agreement\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Checking AWX Operator Deployment Status in Bash\nDESCRIPTION: This Bash command retrieves the status of the AWX Operator deployment in the Kubernetes cluster.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/kind.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get deployments\n```\n\n----------------------------------------\n\nTITLE: Publishing Tasks Asynchronously in Python\nDESCRIPTION: Demonstrates how to publish tasks to run asynchronously using the apply_async() method. This is used to execute tasks in the background within AWX.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/tasks.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nadd.apply_async([1, 1])\nAdder.apply_async([1, 1])\n```\n\n----------------------------------------\n\nTITLE: Configuring AWX Logging Settings for Logstash\nDESCRIPTION: JSON configuration to be POSTed to the AWX API endpoint '/api/v2/settings/logging/' for setting up Logstash log aggregation. It includes host, port, authentication, and logger configurations.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/docs/logstash.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"LOG_AGGREGATOR_HOST\": \"http://logstash\",\n    \"LOG_AGGREGATOR_PORT\": 8085,\n    \"LOG_AGGREGATOR_TYPE\": \"logstash\",\n    \"LOG_AGGREGATOR_USERNAME\": \"awx_logger\",\n    \"LOG_AGGREGATOR_PASSWORD\": \"workflows\",\n    \"LOG_AGGREGATOR_LOGGERS\": [\n        \"awx\",\n        \"activity_stream\",\n        \"job_events\",\n        \"system_tracking\",\n        \"job_lifecycle\"\n    ],\n    \"LOG_AGGREGATOR_INDIVIDUAL_FACTS\": false,\n    \"LOG_AGGREGATOR_TOWER_UUID\": \"991ac7e9-6d68-48c8-bbde-7ca1096653c6\",\n    \"LOG_AGGREGATOR_ENABLED\": true\n}\n```\n\n----------------------------------------\n\nTITLE: AWX Import/Export Operations\nDESCRIPTION: Various commands for exporting and importing AWX resources, including specific types and individual resources\nSOURCE: https://github.com/ansible/awx/blob/devel/awxkit/awxkit/cli/docs/source/examples.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nawx export\nawx export --users\nawx export --users admin\nawx export --users 42\nawx import < resources.json\n```\n\n----------------------------------------\n\nTITLE: Retrieving Model Stdout with GET Request in Ansible Tower\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve stdout from running a model in Ansible Tower. It includes various format options and query string parameters for customizing the output.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/unified_job_stdout.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Retrieve {{ model_verbose_name|title }} Stdout:\n\nMake GET request to this resource to retrieve the stdout from running this\n{{ model_verbose_name }}.\n\n## Format\n\nUse the `format` query string parameter to specify the output format.\n\n* Browsable API: `?format=api`\n* HTML: `?format=html`\n* Plain Text: `?format=txt`\n* Plain Text with ANSI color codes: `?format=ansi`\n* JSON structure: `?format=json`\n* Downloaded Plain Text: `?format=txt_download`\n* Downloaded Plain Text with ANSI color codes: `?format=ansi_download`\n\n(_New in Ansible Tower 2.0.0_) When using the Browsable API, HTML and JSON\nformats, the `start_line` and `end_line` query string parameters can be used\nto specify a range of line numbers to retrieve.\n\nUse `dark=1` or `dark=0` as a query string parameter to force or disable a\ndark background.\n\nFiles over {{ settings.STDOUT_MAX_BYTES_DISPLAY|filesizeformat }} (configurable)\nwill not display in the browser. Use the `txt_download` or `ansi_download`\nformats to download the file directly to view it.\n```\n\n----------------------------------------\n\nTITLE: Creating Machine and HashiCorp Vault Credentials in AWX API\nDESCRIPTION: API calls to create a Machine credential with a static username and a HashiCorp Vault credential for secret lookup. These credentials are used to configure external secret management.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/credentials/credential_plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n~ curl -sik \"https://awx.example.org/api/v2/credentials/\" \\\n    -H \"Authorization: Bearer <token>\" \\\n    -H \"Content-Type: application/json\" \\\n    -X POST \\\n    -d '{\"user\": N, \"credential_type\": 1, \"name\": \"My SSH\", \"inputs\": {\"username\": \"example\"}}'\n\nHTTP/1.1 201 Created\n{\n    \"credential_type\": 1,\n    \"description\": \"\",\n    \"id\": 1,\n    ...\n```\n\nLANGUAGE: shell\nCODE:\n```\n~ curl -sik \"https://awx.example.org/api/v2/credentials/\" \\\n    -H \"Authorization: Bearer <token>\" \\\n    -H \"Content-Type: application/json\" \\\n    -X POST \\\n    -d '{\"user\": N, \"credential_type\": 15, \"name\": \"My Hashi Credential\", \"inputs\": {\"url\": \"https://vault.example.org\", \"token\": \"vault-token\", \"api_version\": \"v2\"}}'\n\nHTTP/1.1 201 Created\n{\n    \"credential_type\": 15,\n    \"description\": \"\",\n    \"id\": 2,\n    ...\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated Profile Data and Graphs\nDESCRIPTION: Demonstrates how to examine the profiling output files and view dot graphs using xdot to analyze AWX function performance.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/debugging/debugging_misc.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbash-4.4$ ls -aln /var/log/tower/profile/\ntotal 24\ndrwxr-xr-x 2 awx  root 4096 Oct 15 13:23 .\ndrwxrwxr-x 1 root root 4096 Oct 15 13:23 ..\n-rw-r--r-- 1 awx  root  635 Oct 15 13:23 2.001s-task_manager_profile-2303-272858af-3bda-45ec-af9e-7067aa86e4f3.dot\n-rw-r--r-- 1 awx  root  587 Oct 15 13:23 2.001s-task_manager_profile-2303-272858af-3bda-45ec-af9e-7067aa86e4f3.pstats\n-rw-r--r-- 1 awx  root  632 Oct 15 13:23 2.002s-task_manager_profile-2303-4cdf4660-3ef4-4238-8164-33611822d9e3.dot\n-rw-r--r-- 1 awx  root  587 Oct 15 13:23 2.002s-task_manager_profile-2303-4cdf4660-3ef4-4238-8164-33611822d9e3.pstats\n```\n\nLANGUAGE: bash\nCODE:\n```\nxdot /var/log/tower/profile/2.001s-task_manager_profile-2303-272858af-3bda-45ec-af9e-7067aa86e4f3.dot\n```\n\n----------------------------------------\n\nTITLE: Example RRULE Formats for AWX Scheduling\nDESCRIPTION: A collection of valid rrule examples demonstrating different scheduling patterns including minutely, daily, weekly, monthly, and yearly frequencies with various intervals, counts, and constraints.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/_schedule_detail.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"DTSTART:20500331T055000Z RRULE:FREQ=MINUTELY;INTERVAL=10;COUNT=5\"\n\"DTSTART:20240331T075000Z RRULE:FREQ=DAILY;INTERVAL=1;COUNT=1\"\n\"DTSTART:20140331T075000Z RRULE:FREQ=MINUTELY;INTERVAL=1;UNTIL=20230401T075000Z\"\n\"DTSTART:20140331T075000Z RRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=MO,WE,FR\"\n\"DTSTART:20140331T075000Z RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO\"\n\"DTSTART:20140331T075000Z RRULE:FREQ=MONTHLY;INTERVAL=1;BYMONTHDAY=6\"\n\"DTSTART:20140331T075000Z RRULE:FREQ=MONTHLY;INTERVAL=1;BYSETPOS=4;BYDAY=SU\"\n\"DTSTART:20140331T075000Z RRULE:FREQ=MONTHLY;INTERVAL=1;BYSETPOS=-1;BYDAY=MO,TU,WE,TH,FR\"\n\"DTSTART:20140331T075000Z RRULE:FREQ=MONTHLY;INTERVAL=1;BYSETPOS=-1;BYDAY=MO,TU,WE,TH,FR,SA,SU\"\n\"DTSTART:20140331T075000Z RRULE:FREQ=YEARLY;INTERVAL=1;BYMONTH=4;BYMONTHDAY=1\"\n\"DTSTART:20140331T075000Z RRULE:FREQ=YEARLY;INTERVAL=1;BYSETPOS=-1;BYMONTH=8;BYDAY=SU\"\n\"DTSTART:20140331T075000Z RRULE:FREQ=WEEKLY;INTERVAL=1;UNTIL=20230401T075000Z;BYDAY=MO,WE,FR\"\n\"DTSTART:20140331T075000Z RRULE:FREQ=HOURLY;INTERVAL=1;UNTIL=20230610T075000Z\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kind Cluster for AWX Development in Bash\nDESCRIPTION: This Bash command creates a Kind cluster using the specified configuration file.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/kind.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkind create cluster --config kind-cluster.yaml\n```\n\n----------------------------------------\n\nTITLE: Reloading AWX Dispatcher Workers\nDESCRIPTION: Shows the command to reload all worker processes in the AWX dispatcher pool. This action waits for running jobs to finish before recycling the workers.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/tasks.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nawx-manage run_dispatcher --reload\n```\n\n----------------------------------------\n\nTITLE: Displaying API Response Structure in JSON\nDESCRIPTION: This snippet shows the basic structure of an API response, including count, pagination links, and results array.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/_list_common.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"count\": 99,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building Custom AWX Image\nDESCRIPTION: This command builds a custom AWX image suitable for use with the AWX Operator. It's important to note that the development image built with 'make docker-compose-build' is not compatible with the AWX Operator.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/build_awx_image.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake awx-kube-build\n```\n\n----------------------------------------\n\nTITLE: Sorting API Results with order_by Parameter in HTTP\nDESCRIPTION: Demonstrates how to use the order_by query parameter to sort API results in ascending order by a specified field.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/sorting.rst#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttp://<server name>/api/v2/model_verbose_name_plural?order_by={{ order_field }}\n```\n\n----------------------------------------\n\nTITLE: Calculating Memory-Based Capacity in AWX\nDESCRIPTION: Formula for determining the number of forks a system can run based on available memory. It reserves 2GB for AWX services and allocates 100MB per fork.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/capacity.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n(mem - 2048) / mem_per_fork\n```\n\n----------------------------------------\n\nTITLE: Creating Organization with Projects in Python\nDESCRIPTION: Example of creating an organization with associated projects using the create_organization factory method. This snippet demonstrates how to create an organization with a specific name and optionally add projects to it.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/main/tests/factories/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nobjects = create_organization('test-org')\nassert objects.organization.name == 'test-org'\n\nobjects = create_organization('test-org', projects=['test-proj'])\nassert objects.projects.test-proj.organization == objects.organization\n\nobjects = create_organization('test-org', persisted=False)\nassert not objects.organization.pk\n```\n\n----------------------------------------\n\nTITLE: Template for Retrieving Model Records in AWX API\nDESCRIPTION: A markdown template used to generate API documentation for retrieving a single record from a specified model. The template uses Jinja2 syntax to customize the output based on the model being documented.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/retrieve_api_view.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Retrieve {{ model_verbose_name|title|anora }}:\n\nMake GET request to this resource to retrieve a single {{ model_verbose_name }}\nrecord containing the following fields:\n\n{% include \"api/_result_fields_common.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube with AWX Mount\nDESCRIPTION: Initializes Minikube with mounted AWX source code, configured with 4 CPUs, 8GB memory, and ingress addon enabled.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/minikube.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nminikube start \\\n    --mount \\\n    --mount-string=\"/path/to/awx:/awx_devel\" \\\n    --cpus=4 \\\n    --memory=8g \\\n    --addons=ingress\n```\n\n----------------------------------------\n\nTITLE: List Resources Template in Ansible AWX API Documentation\nDESCRIPTION: Template markdown documentation showing how to make GET requests to retrieve lists of model resources associated with a parent model. Uses Django-style template variables for model names and includes common list documentation.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/group_all_hosts_list.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# List All {{ model_verbose_name_plural|title }} for {{ parent_model_verbose_name|title|anora }}:\n\nMake a GET request to this resource to retrieve a list of all\n{{ model_verbose_name_plural }} directly or indirectly belonging to this\n{{ parent_model_verbose_name }}.\n\n{% include \"api/_list_common.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Checking Running Tasks in AWX Dispatcher\nDESCRIPTION: Demonstrates how to check the currently running tasks in the AWX dispatcher using the --running flag. This command outputs the UUIDs of active tasks.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/tasks.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n[root@awx /]# awx-manage run_dispatcher --running\n2018-09-14 18:39:22,223 WARNING  awx.main.dispatch checking dispatcher running for awx\n['eb3b0a83-86da-413d-902a-16d7530a6b25', 'f447266a-23da-42b4-8025-fe379d2db96f']\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Hosts Request Format\nDESCRIPTION: Example JSON request format for creating multiple hosts in an inventory. The request must specify the inventory ID and an array of host objects containing host names and optional variables.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/bulk_host_create_view.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"inventory\": 1,\n    \"hosts\": [\n        {\"name\": \"example1.com\", \"variables\": \"ansible_connection: local\"},\n        {\"name\": \"example2.com\"}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Debugging Tool for AWX Job Event Lag Monitoring\nDESCRIPTION: This JavaScript code provides a visual tool for monitoring job event lag in AWX. It connects to the AWX websocket, listens for job events, and displays real-time lag statistics in the browser. The tool calculates average, standard deviation, and maximum lag times.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/debugging/debugging_job_event_performance.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Copy paste the below script in the console to give a visual gauge of events per second that are received over the websocket\n\nvar s;\n\nfunction listenJob() {\n  var jobid = $('#jobid').val();\n  var xrftoken = readCookie('csrftoken');\n\n  s.send(JSON.stringify({\"groups\":{\"jobs\":[\"status_changed\",\"summary\"],\"job_events\": [jobid,],\"control\":[\"limit_reached_1\"]},\"xrftoken\": xrftoken}));\n}\n\nfunction appendHTML() {\n  $('body').append('<div id=\"wsdebug_wrapper\" style=\"position:fixed; bottom: 0; left: 0\"><div id=\"wsdebug\" width=\"100%\" style=\"background-color: #ABBAEA; font-size: 48px;\">Hello World</div><br><input id=\"jobid\" type=\"text\"><input id=\"dolisten\" type=\"button\" value=\"Submit\" onclick=\"listenJob()\"></div>')\n}\n\n$(document).ready(function()  {\n  appendHTML();\n  debugConnect();\n});\n\nfunction range_str(start, end) {\n  var res = [];\n  for (const x of Array(end-start).keys()) {\n    res.push((start+x).toString());\n  }\n  return res;\n}\n\nfunction readCookie(name) {\n    var nameEQ = name + \"=\";\n    var ca = document.cookie.split(';');\n    for (var i = 0; i < ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0) == ' ') c = c.substring(1, c.length);\n        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);\n    }\n    return null;\n}\n\nfunction debugConnect() {\n  var buff = [];\n  var buff_max = 1024;\n\n  var saved_max = [[0,0,0], [0,0,0], [0,0,0]];\n\n  var AVG_INDEX = 0;\n  var STDEV_INDEX = 1;\n  var MAX_INDEX = 2;\n\n  s = new WebSocket(\"wss://\" + window.location.hostname + \":\" + window.location.port +\"/websocket/\");\n  s.addEventListener('open', function (event) {\n    console.log(\"Connected to debug websocket\");\n  });\n\n  s.addEventListener('message', function (event) {\n    var e = JSON.parse(event.data);\n    if ('created' in e) {\n      var now_seconds = Math.round(+new Date()/1000);\n      var event_ts_seconds = Math.round(Date.parse(e['created'])/1000);\n      var diff = now_seconds - event_ts_seconds;\n\n      buff.push(diff)\n      if (buff.length > buff_max) {\n        buff.shift();\n      }\n\n      var res = buff_calc(buff);\n      var avg = res[0];\n      var stdev = res[1];\n      var max = res[2];\n\n      for (var i=0; i < 3; ++i) {\n        var entry = saved_max[i];\n        if (res[i] > entry[i]) {\n          saved_max[i] = res;\n        }\n      }\n\n      str = \"<pre>\\n\";\n      str += \"Lag \" + str_vals(res) + \"\\n\";\n      str += \"MAX AVERAGE \" + str_vals(saved_max[0]) + \"\\n\";\n      str += \"MAX STDEV \" + str_vals(saved_max[1]) + \"\\n\";\n      str += \"MAX MAX \" + str_vals(saved_max[2]) + \"\\n\";\n      str += \"</pre>\";\n\n      $('#wsdebug').html(str);\n    }\n  });\n}\n\n\n\nfunction buff_calc(buff) {\n  var total = 0;\n\n  var max = 0;\n  for (var i=0; i < buff.length; ++i) {\n    total += buff[i];\n    if (buff[i] > max) {\n      max = buff[i];\n    }\n  }\n  if (total == 0) {\n    total = 1;\n  }\n  var avg = total / buff.length;\n\n  total = 0;\n  for (var i=0; i < buff.length; ++i) {\n    var u = buff[i] - avg;\n    var sq = u*u;\n    total += sq;\n  }\n  if (total == 0) {\n    total = 1;\n  }\n\n  var stdev = Math.sqrt(total / buff.length);\n\n  return [avg, stdev, max];\n}\n\nfunction str_vals(c) {\n  return \"avg \" + c[0].toString() + \" stdev \" + c[1].toString() + \" max \" + c[2].toString();\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Host Creation Response Format\nDESCRIPTION: Example JSON response format showing the created hosts. The response includes the API URL for the inventory and detailed information about each created host, including their IDs, URLs, and configurations.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/bulk_host_create_view.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"url\": \"/api/v2/inventories/3/hosts/\",\n    \"hosts\": [\n        {\n            \"name\": \"example1.com\",\n            \"enabled\": true,\n            \"instance_id\": \"\",\n            \"description\": \"\",\n            \"variables\": \"ansible_connection: local\",\n            \"id\": 1255,\n            \"url\": \"/api/v2/hosts/1255/\",\n            \"inventory\": \"/api/v2/inventories/3/\"\n        },\n        {\n            \"name\": \"example2.com\",\n            \"enabled\": true,\n            \"instance_id\": \"\",\n            \"description\": \"\",\n            \"variables\": \"\",\n            \"id\": 1256,\n            \"url\": \"/api/v2/hosts/1256/\",\n            \"inventory\": \"/api/v2/inventories/3/\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AWX Secret Connected to HashiVault\nDESCRIPTION: This bash script sets environment variables for AWX credentials and runs an Ansible playbook to create various items in AWX related to HashiVault integration.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nexport CONTROLLER_USERNAME=<your username>\nexport CONTROLLER_PASSWORD=<your password>\nansible-playbook tools/docker-compose/ansible/plumb_vault.yml\n```\n\n----------------------------------------\n\nTITLE: Deploying AWX Using Operator\nDESCRIPTION: Ansible playbook execution to deploy AWX in development mode using the AWX operator.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/minikube.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ansible-playbook ansible/instantiate-awx-deployment.yml \\\n    -e development_mode=yes \\\n    -e image=ghcr.io/ansible/awx_kube_devel \\\n    -e image_version=devel \\\n    -e image_pull_policy=Always \\\n    -e service_type=nodeport \\\n    -e namespace=$NAMESPACE\n```\n\n----------------------------------------\n\nTITLE: Configuration Example of NAMED_URL_FORMATS in AWX\nDESCRIPTION: Shows the structure of the NAMED_URL_FORMATS setting that maps AWX resources to their named URL identifier formats. This configuration determines how human-readable identifiers are constructed for each resource type.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/named_url.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"NAMED_URL_FORMATS\": {\n    \"job_templates\": \"<name>++<organization.name>\",\n    \"workflow_job_templates\": \"<name>++<organization.name>\",\n    \"workflow_job_template_nodes\": \"<identifier>++<workflow_job_template.name>++<organization.name>\",\n    \"inventories\": \"<name>++<organization.name>\",\n    \"users\": \"<username>\",\n    \"applications\": \"<name>++<organization.name>\",\n    \"labels\": \"<name>++<organization.name>\",\n    \"credential_types\": \"<name>+<kind>\",\n    \"notification_templates\": \"<name>++<organization.name>\",\n    \"instances\": \"<hostname>\",\n    \"instance_groups\": \"<name>\",\n    \"hosts\": \"<name>++<inventory.name>++<organization.name>\",\n    \"groups\": \"<name>++<inventory.name>++<organization.name>\",\n    \"organizations\": \"<name>\",\n    \"credentials\": \"<name>++<credential_type.name>+<credential_type.kind>++<organization.name>\",\n    \"teams\": \"<name>++<organization.name>\",\n    \"inventory_sources\": \"<name>++<inventory.name>++<organization.name>\",\n    \"projects\": \"<name>++<organization.name>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CORS Allowed Origins in AWX Configuration\nDESCRIPTION: Configuration example showing how to specify allowed origins for CORS in AWX's configuration file. The settings are defined in /etc/tower/conf.d/cors.py and require service restart to take effect.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/cors.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nCORS_ALLOWED_ORIGINS = (\n    'hostname.example.com',\n    '127.0.0.1:9000'\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Task Function in Python\nDESCRIPTION: Demonstrates how to define a simple task function using the @task decorator in AWX. This example creates an 'add' function that takes two parameters and returns their sum.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/tasks.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom awx.main.dispatch.publish import task\n\n@task()\ndef add(a, b):\n    return a + b\n```\n\n----------------------------------------\n\nTITLE: Workflow Node Execution Logic Documentation\nDESCRIPTION: Describes the logic for how workflow nodes are executed based on success and failure conditions of previous jobs. Details how nodes are processed in success_nodes, failure_nodes, and always_nodes paths.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/workflow_job_template_workflow_nodes_list.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Workflow Job Template Workflow Node List\n\nWorkflow nodes reference templates to execute and define the ordering\nin which to execute them. After a job in this workflow finishes,\nthe subsequent actions are to:\n\n - run nodes contained in \"failure_nodes\" or \"always_nodes\" if job failed\n - run nodes contained in \"success_nodes\" or \"always_nodes\" if job succeeded\n\nThe workflow job is marked as `successful` if all of the jobs running as\na part of the workflow job have completed, and the workflow job has not\nbeen canceled. Even if a job within the workflow has failed, the workflow\njob will not be marked as failed.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Model Data with GET Request in Django Template\nDESCRIPTION: This snippet describes how to retrieve a single model record using a GET request. It includes a template for displaying common result fields.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/retrieve_update_destroy_api_view.md#2025-04-22_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% ifmeth GET %}\n# Retrieve {{ model_verbose_name|title|anora }}:\n\nMake GET request to this resource to retrieve a single {{ model_verbose_name }}\nrecord containing the following fields:\n\n{% include \"api/_result_fields_common.md\" %}\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Tailing Logs from AWX Web Containers in Kubernetes\nDESCRIPTION: This Bash command tails logs from the AWX web containers in the Kubernetes cluster.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/kind.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -f deployment/awx-web -n awx -c awx-web\n```\n\n----------------------------------------\n\nTITLE: Checking Python and pip Installation Versions\nDESCRIPTION: Verifies that Python 3 and pip3 are correctly installed on the system by checking their versions.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/contributor/setting_up.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 --version\npip3 --version\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nested Resources via GET Request in API Documentation\nDESCRIPTION: This snippet outlines the process for making a GET request to retrieve a list of child resources associated with a parent resource. It uses template variables to customize the resource names and includes common list parameters.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/host_all_groups_list.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# List All {{ model_verbose_name_plural|title }} for {{ parent_model_verbose_name|title|anora }}:\n\nMake a GET request to this resource to retrieve a list of all\n{{ model_verbose_name_plural }} of which the selected\n{{ parent_model_verbose_name }} is directly or indirectly a member.\n\n{% include \"api/_list_common.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Generating Field Documentation in Django Template\nDESCRIPTION: This Django template iterates through serializer fields to generate documentation. It handles read and write operations, displaying field details including type, required status, default values, and choices. The template uses conditional logic to format the output based on field properties.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/_result_fields_common.md#2025-04-22_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% for fn, fm in serializer_fields.items %}{% spaceless %}\n{% if write_only and fm.read_only or not write_only and fm.write_only or write_only and fn == parent_key %}\n{% else %}\n* `{{ fn }}`: {{ fm.help_text|capfirst }} ({{ fm.type }}{% if write_only and fm.required %}, required{% endif %}{% if write_only and fm.read_only %}, read-only{% endif %}{% if write_only and not fm.choices and not fm.required %}, default=`{% if fm.type == \"string\" or fm.type == \"email\" %}\"{% firstof fm.default \"\" %}\"{% else %}{% if fm.type == \"field\" and not fm.default %}None{% else %}{{ fm.default }}{% endif %}{% endif %}`{% endif %}){% if fm.choices %}{% for c in fm.choices %}\n    - `{% if c.0 == \"\" %}\"\"{% else %}{{ c.0 }}{% endif %}`{% if c.1 != c.0 %}: {{ c.1 }}{% endif %}{% if write_only and c.0 == fm.default %} (default){% endif %}{% endfor %}{% endif %}{% endif %}\n{% endspaceless %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Vault Secret in AWX Playbook\nDESCRIPTION: This YAML playbook demonstrates how to access and display a secret from HashiVault using a custom credential type in AWX. It uses the 'the_secret_from_vault' variable provided by the custom credential type.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Show a vault secret\n  hosts: localhost\n  connection: local\n  gather_facts: False\n  tasks:\n    - debug:\n        var: the_secret_from_vault\n```\n\n----------------------------------------\n\nTITLE: Schedule Preview API Response\nDESCRIPTION: Example response from the schedule preview endpoint showing the next ten occurrences in both local and UTC time for a given RRULE.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/schedules.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"local\": [\n        \"2030-01-15T12:00:00-05:00\",\n        \"2030-01-16T12:00:00-05:00\",\n        \"2030-01-17T12:00:00-05:00\",\n        \"2030-01-18T12:00:00-05:00\",\n        \"2030-01-19T12:00:00-05:00\",\n        \"2030-01-20T12:00:00-05:00\",\n        \"2030-01-21T12:00:00-05:00\"\n    ],\n    \"utc\": [\n        \"2030-01-15T17:00:00Z\",\n        \"2030-01-16T17:00:00Z\",\n        \"2030-01-17T17:00:00Z\",\n        \"2030-01-18T17:00:00Z\",\n        \"2030-01-19T17:00:00Z\",\n        \"2030-01-20T17:00:00Z\",\n        \"2030-01-21T17:00:00Z\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Hosts with Bulk Host Delete API in AWX\nDESCRIPTION: This JSON snippet shows how to use the bulk host delete API to remove multiple hosts from an inventory in a single request. It includes an example of deleting eight hosts by their IDs.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/bulk_api.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"hosts\": [3, 4, 5, 6, 7 ,8, 9, 10]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Model Variable Data with PUT/PATCH in Django Templates\nDESCRIPTION: Template snippet for generating documentation about updating variables for a model using PUT or PATCH requests. This template conditionally renders when the method is PUT or PATCH and explains how to update variables for a specific model.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/base_variable_data.md#2025-04-22_snippet_1\n\nLANGUAGE: django-template\nCODE:\n```\n{% ifmeth PUT PATCH %}\n# Update {{ model_verbose_name|title }} Variable Data:\n\nMake a PUT or PATCH request to this resource to update variables defined for a\n{{ model_verbose_name }}.\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Building UI with Make Command in Bash\nDESCRIPTION: This command builds the UI using the make utility.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/ui/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake ui\n```\n\n----------------------------------------\n\nTITLE: Retrieving Model Playbooks via GET Request in AWX\nDESCRIPTION: Template instructions for making a GET request to retrieve playbooks available for a specific model. The template uses Jinja2 variables to customize the model name in the documentation.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/project_playbooks.md#2025-04-22_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n# Retrieve {{ model_verbose_name|title }} Playbooks:\n\nMake GET request to this resource to retrieve a list of playbooks available\nfor {{ model_verbose_name|anora }}.\n```\n\n----------------------------------------\n\nTITLE: GET Response from Relaunch Endpoint with Failed Hosts\nDESCRIPTION: Example JSON response from a GET request to the relaunch endpoint, showing the count of hosts in each category. This response indicates 18 failed hosts out of 30 total hosts that could be targeted in a relaunch.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/retry_by_status.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"passwords_needed_to_start\": [],\n    \"retry_counts\": {\n        \"all\": 30,\n        \"failed\": 18\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the AWX Development Environment\nDESCRIPTION: Command to start the AWX development environment using Docker Compose. This launches all required containers using the previously built image.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ make docker-compose\n```\n\n----------------------------------------\n\nTITLE: Updating Model Data with PUT or PATCH Request in Django Template\nDESCRIPTION: This snippet outlines how to update a model record using PUT or PATCH requests. It specifies which fields can be modified and includes a template for displaying update fields.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/retrieve_update_destroy_api_view.md#2025-04-22_snippet_1\n\nLANGUAGE: django-template\nCODE:\n```\n{% ifmeth PUT PATCH %}\n# Update {{ model_verbose_name|title|anora }}:\n\nMake a PUT or PATCH request to this resource to update this\n{{ model_verbose_name }}.  The following fields may be modified:\n\n{% with write_only=1 %}\n{% include \"api/_result_fields_common.md\" with serializer_fields=serializer_update_fields %}\n{% endwith %}\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Loading AWX Demo Data\nDESCRIPTION: Command to populate AWX with demo project data, inventory and job template\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec tools_awx_1 awx-manage create_preload_data\n```\n\n----------------------------------------\n\nTITLE: Customizing Pagination Parameters in AWX API URL\nDESCRIPTION: Demonstrates how to use query string parameters to control pagination, specifying both the page size and the specific page number to retrieve.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/pagination.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttp://<server name>/api/v2/model_verbose_name?page_size=100&page=2\n```\n\n----------------------------------------\n\nTITLE: Describing Inventory Source Update API in Ansible AWX\nDESCRIPTION: This markdown snippet explains the API endpoints for checking and updating an inventory source. It details the 'can_update' field returned by GET requests and the expected status codes for successful and failed update attempts.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/inventory_source_update_view.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Update Inventory Source\n\nMake a GET request to this resource to determine if the group can be updated\nfrom its inventory source.  The response will include the following field:\n\n* `can_update`: Flag indicating if this inventory source can be updated\n  (boolean, read-only)\n\nMake a POST request to this resource to update the inventory source.  If\nsuccessful, the response status code will be 202.  If the inventory source is\nnot defined or cannot be updated, a 405 status code will be returned.\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Credential Type via API\nDESCRIPTION: Example of creating a new custom credential type through the API endpoint with field definitions and environment variable injection.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/credentials/custom_credential_types.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Third Party Cloud\",\n    \"description\": \"Integration with Third Party Cloud\",\n    \"kind\": \"cloud\",\n    \"inputs\": {\n        \"fields\": [{\n            \"id\": \"api_token\",\n            \"label\": \"API Token\",\n            \"type\": \"string\",\n            \"secret\": true\n        }]\n    },\n    \"injectors\": {\n        \"env\": {\n            \"THIRD_PARTY_CLOUD_API_TOKEN\": \"{{api_token}}\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure with reStructuredText in Ansible AWX\nDESCRIPTION: This code snippet demonstrates how to structure documentation using reStructuredText's toctree directives. It organizes the Ansible AWX documentation into three main sections with appropriate depth and captions.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Welcome\n\n   relnotes\n   \n\n.. toctree::\n   :maxdepth: 2\n   :caption: Community\n\n   contributor/index\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Developers\n\n   rest_api/index\n```\n\n----------------------------------------\n\nTITLE: Querying Insights API Endpoint in Tower\nDESCRIPTION: API endpoint for retrieving Insights data for a specific host in Tower. Returns plans, reports, and rules for the host.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/insights.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/api/v2/hosts/<id>/insights/\n```\n\n----------------------------------------\n\nTITLE: Launching Cleanup Job Template with Extra Variables\nDESCRIPTION: Example payload for launching cleanup jobs with a specified retention period of 30 days. This can be used for both cleanup_jobs and cleanup_activitystream tasks.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/system_job_template_launch.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"extra_vars\": {\"days\": 30}}\n```\n\n----------------------------------------\n\nTITLE: Deploying AWX into Kind Cluster using Ansible Playbook\nDESCRIPTION: This Bash command runs an Ansible playbook to deploy AWX into the Kind cluster using the AWX Operator.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/kind.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nansible-playbook ansible/instantiate-awx-deployment.yml \\\n   -e development_mode=yes \\\n   -e image=ghcr.io/ansible/awx_kube_devel \\\n   -e image_version=devel \\\n   -e image_pull_policy=Always \\\n   -e service_type=nodeport \\\n   -e namespace=awx \\\n   -e nodeport_port=30080\n```\n\n----------------------------------------\n\nTITLE: Basic Structure for AWX Configuration Registration in conf.py\nDESCRIPTION: Demonstrates the basic file structure for registering AWX configuration settings in a Django app's conf.py file. Shows the import statements and general pattern for registering settings.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/tower_configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Other dependencies\n# ...\n\n# Django\nfrom django.utils.translation import ugettext_lazy as _\n\n# AWX\nfrom awx.conf import fields, register\n\n# Other dependencies\n# ...\n\nregister(\n  '<setting name>',\n  ...\n)\n# Other setting registries\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Checks for Deep Copy in WorkflowJobTemplateCopy\nDESCRIPTION: Example of implementing a permission check function for deep copy operations. This static method handles permission issues with sub-objects during a workflow job template copy.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/resource_copy.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass WorkflowJobTemplateCopy(WorkflowsEnforcementMixin, CopyAPIView):\n\n    model = WorkflowJobTemplate\n    copy_return_serializer_class = WorkflowJobTemplateSerializer\n\n    # Other code\n\n    @staticmethod\n    def deep_copy_permission_check_func(user, new_objs):\n        # method body\n\n    # Other code\n```\n\n----------------------------------------\n\nTITLE: Modifying User Roles - POST Method Documentation\nDESCRIPTION: Documentation for the POST request to add or remove roles from a user. It specifies the required 'id' field for the Role ID and the optional 'disassociate' field for role removal.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/user_roles_list.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% ifmeth POST %}\n# Associate Roles with this User:\n\nMake a POST request to this resource to add or remove a role from this user. The following fields may be modified:\n\n   * `id`: The Role ID to add to the user. (int, required)\n   * `disassociate`: Provide if you want to remove the role. (any value, optional)\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Installing Collections from Requirements File in AWX\nDESCRIPTION: Command used by AWX to install collections from requirements.yml into the project cache location.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/collections.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nansible-galaxy collection install -r requirements.yml -p <project cache location>/_<project #>__<project name>/stage/requirements_collections\n```\n\n----------------------------------------\n\nTITLE: Including Job Events List API Documentation in Markdown\nDESCRIPTION: This snippet uses a Liquid template include directive to insert the content of the 'job_job_events_list.md' file from the 'api' directory. This is likely part of a larger documentation generation process for the Ansible AWX project.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/ad_hoc_command_ad_hoc_command_events_list.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include \"api/job_job_events_list.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Assigning Roles to Users and Objects in Python\nDESCRIPTION: Examples of assigning roles to users and objects using string notation. This snippet shows how to make a user a member of a parent role and how to make one object's role a child of another object's role.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/main/tests/factories/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nobj.parent_role:user  # This will make the user a member of parent_role\nobj1.role:obj2.role   # This will make obj2 a child role of obj1\n\nteam1.admin_role:joe\nteam1.admin_role:project1.admin_role\n```\n\n----------------------------------------\n\nTITLE: Verifying Host Matching with GET Request\nDESCRIPTION: This example shows how to make a GET request to verify which hosts would be selected for a job template callback. This request requires authentication with a user that has permission to edit the job template. Replace N with the job template ID.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/job_template_callback.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://user:password@server/api/v2/job_templates/N/callback/\n```\n\n----------------------------------------\n\nTITLE: Setting UI Git Repository Source in Bash\nDESCRIPTION: These commands set the Git repository source for the UI. You can use either HTTPS or SSH URLs.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport UI_GIT_REPO=https://<git repo>\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport UI_GIT_REPO=git@<git repo>\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for AWX Project\nDESCRIPTION: This snippet enumerates the Python packages required for the AWX project. It includes pytz for timezone handling, python-dateutil for date manipulation (specifically for the schedule_rrule functionality), and awxkit for import and export modules.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytz  # for schedule_rrule lookup plugin\npython-dateutil>=2.7.0  # schedule_rrule\nawxkit  # For import and export modules\n```\n\n----------------------------------------\n\nTITLE: Calculating Maximum Concurrent Jobs for Container Groups\nDESCRIPTION: Example calculation for determining the maximum number of concurrent jobs based on available memory in a Kubernetes worker node and memory requirements per job pod.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/capacity.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n(8GB memory on node * 1024 MB) // 100 MB memory/job pod\n```\n\n----------------------------------------\n\nTITLE: AWX Authentication Example\nDESCRIPTION: Shows how to configure and authenticate with an AWX server using username/password authentication with SSL verification disabled.\nSOURCE: https://github.com/ansible/awx/blob/devel/awxkit/awxkit/cli/docs/source/usage.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nawx --conf.host https://awx.example.org \\\n    --conf.username joe --conf.password secret \\\n    --conf.insecure \\\n    users list\n```\n\n----------------------------------------\n\nTITLE: Setting UI Git Branch in Bash\nDESCRIPTION: This command sets the Git branch for the UI repository. The default branch is 'main'.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/ui/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport UI_GIT_BRANCH=main\n```\n\n----------------------------------------\n\nTITLE: Starting OpenTelemetry, Grafana, Loki, and Prometheus with AWX\nDESCRIPTION: This command starts AWX with OpenTelemetry, Grafana, Loki, and Prometheus integration using Docker Compose. It sets various environment variables to true before running the make command.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nOTEL=true GRAFANA=true LOKI=true PROMETHEUS=true make docker-compose\n```\n\n----------------------------------------\n\nTITLE: Filtering Job Statistics by Type\nDESCRIPTION: Shows how to filter job statistics by job type using the job_type parameter. Valid values include all, inv_sync, playbook_run, or scm_update.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/dashboard_jobs_graph_view.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n?job_type=all\n```\n\n----------------------------------------\n\nTITLE: Basic Survey Specification Example in JSON\nDESCRIPTION: A simple example of a survey specification with a single text question. This shows the minimum required structure with name, description, and a single question in the spec array.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/job_template_survey_spec.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Simple Survey\",\n    \"description\": \"Description of the simple survey\",\n    \"spec\": [\n        {\n    \t\"type\": \"text\",\n    \t\"question_name\": \"example question\",\n    \t\"question_description\": \"What is your favorite color?\",\n    \t\"variable\": \"favorite_color\",\n    \t\"required\": false,\n    \t\"default\": \"blue\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Managing AWX Kubernetes Pods\nDESCRIPTION: Commands for viewing pod status, tailing logs, and executing into containers.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/minikube.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get pods\n$ kubectl logs -f awx-56fbfbb6c8-jkhzl -n awx  -c awx-task\n$ kubectl exec -it awx-56fbfbb6c8-k6p82 -c awx-task bash\n$ kubectl delete pod awx-56fbfbb6c8-k6p82\n```\n\n----------------------------------------\n\nTITLE: Upgrading AWX Development Environment\nDESCRIPTION: Command to rebuild AWX containers after updating source code\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ make docker-compose\n```\n\n----------------------------------------\n\nTITLE: Querying Inventory Statistics with Period Parameter in Ansible AWX\nDESCRIPTION: Demonstrates how to make a GET request to retrieve inventory statistics, with an optional 'period' parameter to adjust the time range of the data. The period can be set to 'month', 'week', or 'day', with 'month' being the default.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/dashboard_inventory_graph_view.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n?period=month\n```\n\n----------------------------------------\n\nTITLE: Displaying API Request Information in AWX Logs\nDESCRIPTION: This log output shows an example of how AWX logs API requests, including the client IP address, HTTP method, endpoint, and response code. This information is useful for identifying the source IP for configuring Django Debug Toolbar.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/debugging/debugging_slow_api.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nawx_1        | 14:42:08 uwsgi.1     | 172.18.0.1 GET /api/v2/tokens/ - HTTP/1.1 200\n```\n\n----------------------------------------\n\nTITLE: Configuring AWX Operator to Use Custom Image\nDESCRIPTION: This YAML snippet shows how to specify a custom AWX image in the 'my-awx.yml' file used by the AWX Operator. Replace 'registry.example.com/awx' with your image path and 'test' with your image tag.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/build_awx_image.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  image: registry.example.com/awx\n  image_version: test\n```\n\n----------------------------------------\n\nTITLE: Retrieving CSRF Token from AWX Login API\nDESCRIPTION: Shows how to make a GET request to obtain the CSRF token cookie required for session authentication.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/authentication.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncurl -k -c - https://<awx-host>/api/login/\n```\n\n----------------------------------------\n\nTITLE: Installing or Updating License in Ansible Tower (POST)\nDESCRIPTION: This snippet describes the POST request for installing or updating the existing license in Ansible Tower. It requires super user privileges and must include a 'eula_accepted' boolean element indicating acceptance of the End-User License Agreement.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/api_v2_config_view.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% ifmeth POST %}\n# Install or update an existing license\n\n(_New in Ansible Tower 2.0.0_) Make a POST request to this resource as a super\nuser to install or update the existing license.  The license data itself can\nbe POSTed as a normal json data structure.\n\n(_New in Ansible Tower 2.1.1_) The POST must include a `eula_accepted` boolean\nelement indicating acceptance of the End-User License Agreement.\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Starting AWX Containers After Migration in Bash\nDESCRIPTION: These commands build and start the AWX containers in the development environment after data migration. They include building Docker images, starting Docker Compose, and launching the UI.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/docs/data_migration.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ make docker-compose-build\n$ make docker-compose\n$ make ui\n```\n\n----------------------------------------\n\nTITLE: JSON Task Message Structure in AWX\nDESCRIPTION: Illustrates the structure of a JSON message published to the AMQP queue when a task is executed asynchronously in AWX. It includes a unique identifier, arguments, and the task path.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/tasks.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uuid\": \"<some_unique_string>\",\n    \"args\": [1, 1],\n    \"kwargs\": {},\n    \"task\": \"awx.main.tasks.system.add\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using sdb-listen Tool for Remote Debugging\nDESCRIPTION: Shows how to use the sdb-listen command on the host machine to automatically discover and connect to open remote debugging sessions in the AWX development container.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/debugging/debugging_misc.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsdb-listen\n```\n\n----------------------------------------\n\nTITLE: Filtering Good First Issues in GitHub\nDESCRIPTION: GitHub search filter for finding documentation issues labeled as good first issues in the AWX project.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/contributor/work_items.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nis:open label:\"good first issue\" label:component:docs\n```\n\n----------------------------------------\n\nTITLE: Running HashiVault Container with AWX using Docker Compose\nDESCRIPTION: This command starts a HashiVault container alongside AWX using Docker Compose. It sets the VAULT environment variable to true before running the make command.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nVAULT=true make docker-compose\n```\n\n----------------------------------------\n\nTITLE: Using list_fields.py Helper Script to Inspect Model Fields in AWX\nDESCRIPTION: Command to use the list_fields.py helper script in shell_plus to inspect all available fields of a model. This helps developers identify fields to preserve or discard during copy operations.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/resource_copy.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# In shell_plus\n>>> from list_fields import pretty_print_model_fields\n>>> pretty_print_model_fields(JobTemplate)\n```\n\n----------------------------------------\n\nTITLE: Viewing Recent Logs from Logstash Container in AWX\nDESCRIPTION: Docker command to view the most recent 50 lines of logs from the Logstash container. It uses 'docker exec' to run 'tail' on the logstash.log file inside the container.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/docs/logstash.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -i -t $(docker ps -aqf \"name=tools_logstash_1\") tail -n 50 /logstash.log\n```\n\n----------------------------------------\n\nTITLE: Generating Test Object Names in AWX Integration Tests\nDESCRIPTION: Creates unique names for test objects by combining base names with the test ID to ensure isolation between test runs.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/TESTING.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Generate names\n  set_fact:\n    group_name1: \"AWX-Collection-tests-instance_group-group1-{{ test_id }}\"\n    group_name2: \"AWX-Collection-tests-instance_group-group2-{{ test_id }}\"\n    cred_name1: \"AWX-Collection-tests-instance_group-cred1-{{ test_id }}\"\n```\n\n----------------------------------------\n\nTITLE: Using graph_jobs Command for Job Visualization\nDESCRIPTION: Demonstrates the usage of the awx-manage graph_jobs command which visualizes job progression through different states (pending, waiting, running) over time on the terminal.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/debugging/debugging_misc.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nawx-manage graph_jobs --help\nusage: awx-manage graph_jobs [-h] [--refresh REFRESH] [--width WIDTH]\n                             [--height HEIGHT] [--version] [-v {0,1,2,3}]\n                             [--settings SETTINGS] [--pythonpath PYTHONPATH]\n                             [--traceback] [--no-color] [--force-color]\n\nPlot pending, waiting, running jobs over time on the terminal\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --refresh REFRESH     Time between refreshes of the graph and data in\n                        seconds (defaults to 1.0)\n  --width WIDTH         Width of the graph (defaults to 100)\n  --height HEIGHT       Height of the graph (defaults to 30)\n```\n\n----------------------------------------\n\nTITLE: Creating API Request JSON for Pod Customization in AWX\nDESCRIPTION: This snippet demonstrates how to create a JSON file containing a custom Pod specification for AWX Container Groups. It includes setting the namespace, container image, and command arguments.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/container_groups/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat > api_request.json <<EOF\n{\n  \"apiVersion\": \"v1\",\n  \"kind\": \"Pod\",\n  \"metadata\": {\n    \"namespace\": \"my-namespace\"\n  },\n  \"spec\": {\n    \"containers\": [\n      {\n        \"args\": [\n          \"sleep\",\n          \"infinity\"\n        ],\n        \"image\": \"my-custom-image\",\n        \"stdin\": true,\n        \"tty\": true\n      }\n    ]\n  }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Running SOS Report for Controller Plugin Only\nDESCRIPTION: This snippet provides the command to run the SOS report focusing only on the controller plugin. This is useful for gathering specific information about the Ansible Automation Platform controller.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/sosreport/TESTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsosreport --only-plugins controller\n```\n\n----------------------------------------\n\nTITLE: Listing Job History\nDESCRIPTION: Command to display job history for a specific job template with filtered output fields\nSOURCE: https://github.com/ansible/awx/blob/devel/awxkit/awxkit/cli/docs/source/examples.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nawx jobs list --all --name 'Example Job Template' \\\n    -f human --filter 'name,created,status'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Administered Resources in Ansible AWX API\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve a list of resources administered by a selected parent resource in Ansible AWX. It uses template variables to dynamically display model names and includes common list parameters.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/user_admin_of_organizations_list.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# List {{ model_verbose_name_plural|title }} Administered by this {{ parent_model_verbose_name|title }}:\n\nMake a GET request to this resource to retrieve a list of\n{{ model_verbose_name_plural }} of which the selected\n{{ parent_model_verbose_name }} is an admin.\n\n{% include \"api/_list_common.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Executing Shell in AWX Task Container in Kubernetes\nDESCRIPTION: This Bash command opens an interactive shell in an AWX task container within the Kubernetes cluster.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/kind.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it deployment/awx -n awx -c awx-task bash\n```\n\n----------------------------------------\n\nTITLE: Job Event Creation Sequence with Free Strategy\nDESCRIPTION: A representation of the job event creation order when using Ansible's 'free' execution strategy, demonstrating how events can be interleaved differently than with the default strategy.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/job_events.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nplaybook_on_start\nplaybook_on_play_start-preflight\n  playbook_on_task_start-check_space_requirements\n    runner_on_ok_hostA (check_space_requirements)\n  playbook_on_task_start-check_ram\n    runner_on_ok_hostA (check_ram)\n    runner_on_ok_hostC (check_space_requirements)\n    runner_on_ok_hostC (check_ram)\n  playbook_on_task_start-check_umask\n    runner_on_ok_hostB (check_ram)\n    runner_on_ok_hostC (check_umask)\n    runner_on_ok_hostA (check_umask)\n    runner_on_ok_hostB (check_space_requirements)\n    runner_on_ok_hostB (check_umask)\nplaybook_on_play_start-install\n  playbook_on_task_start-install_tower\n    runner_on_ok_hostB (install_tower)\n  playbook_on_task_start-install_postgres\n    runner_on_ok_hostC (install_postgres)\n    runner_on_ok_hostA (install_tower)\n```\n\n----------------------------------------\n\nTITLE: Running an HTTPBin Docker Container for Webhook Testing\nDESCRIPTION: Docker command to set up an HTTPBin service container for testing webhooks. This creates a service reachable from the AWX container and externally on localhost that can be used to test webhook functionality.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/notification_system.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --network=\"tools_default\" --name httpbin -p 8204:80 kennethreitz/httpbin\n```\n\n----------------------------------------\n\nTITLE: Schedule Creation JSON Payload\nDESCRIPTION: Example JSON payload for creating a scheduled job, including schedule name, RRULE specification, and optional extra data.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/schedules.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    'name': 'My Schedule Name',\n    'rrule': 'DTSTART:20300115T120000Z RRULE:FREQ=DAILY;INTERVAL=1;COUNT=7'\n    'extra_data': {}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Workflow Job Cancellation Status in Markdown\nDESCRIPTION: This snippet describes the GET request to the Cancel Workflow Job endpoint. It explains that the response includes a 'can_cancel' field indicating whether the job can be canceled.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/workflow_job_cancel.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `can_cancel`: Indicates whether this workflow job is in a state that can\n  be canceled (boolean, read-only)\n```\n\n----------------------------------------\n\nTITLE: GET Response Fields for Workflow Job Template Copy Check\nDESCRIPTION: Documents the response fields returned when checking if a workflow job template can be copied. Includes permission flags and lists of resources that cannot be copied due to permission constraints.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/workflow_job_template_copy.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"can_copy\": true,\n  \"can_copy_without_user_input\": false,\n  \"templates_unable_to_copy\": [1, 2, 3],\n  \"inventories_unable_to_copy\": [4, 5],\n  \"credentials_unable_to_copy\": [6, 7]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Child Groups in Ansible AWX API\nDESCRIPTION: Template code that explains how to make a GET request to retrieve a list of potential child groups for a parent model in the Ansible AWX API. The snippet includes template variables that will be replaced with actual model names when rendered.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/group_potential_children_list.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# List Potential Child Groups for {{ parent_model_verbose_name|title|anora }}:\n\nMake a GET request to this resource to retrieve a list of\n{{ model_verbose_name_plural }} available to be added as children of the\ncurrent {{ parent_model_verbose_name }}.\n\n{% include \"api/_list_common.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Customizing Prometheus and Grafana Deployment for AWX\nDESCRIPTION: This command demonstrates how to pass additional Ansible variables when deploying AWX with Prometheus and Grafana. It allows customization of parameters like scrape interval and admin password.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/grafana/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGRAFANA=true PROMETHEUS=true EXTRA_SOURCES_ANSIBLE_OPTS=\"-e scrape_interval=1 admin_password=foobar\" make docker-compose\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Docker Resources for Troubleshooting\nDESCRIPTION: Commands to stop and remove all Docker containers, images, volumes, and networks to resolve database-related issues during initial startup.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop $(docker ps -a -q)\ndocker system prune -a\ndocker volume prune\ndocker network prune\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWX\nDESCRIPTION: This code snippet defines the required Python packages and their versions for the AWX project. It includes pip and setuptools, which are marked as unsafe. The file also specifies the source of these requirements and additional packages that depend on setuptools.\nSOURCE: https://github.com/ansible/awx/blob/devel/requirements/requirements.txt#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# The following packages are considered to be unsafe in a requirements file:\npip==21.2.4\n    # via -r /awx_devel/requirements/requirements.in\nsetuptools==70.3.0\n    # via\n    #   -r /awx_devel/requirements/requirements.in\n    #   asciichartpy\n    #   autobahn\n    #   incremental\n    #   setuptools-rust\n    #   setuptools-scm\n    #   zope-interface\n```\n\n----------------------------------------\n\nTITLE: Including API List View Documentation in Django Template\nDESCRIPTION: This snippet includes a template file that likely contains documentation for listing API views. It's part of generating comprehensive API documentation.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/list_create_api_view.md#2025-04-22_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% include \"api/list_api_view.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Execution Playbook for AWX Integration Tests in YAML\nDESCRIPTION: This YAML playbook sets up the environment variables for connecting to an AWX instance and includes the main test tasks. It should be placed in the /tasks directory of the specific test playbook you want to run.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/TESTING.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Run Integration Test\n  hosts: localhost\n  connection: local\n  gather_facts: False\n  environment:\n      TOWER_HOST: <URL>\n      TOWER_USERNAME: <username>\n      TOWER_PASSWORD: <password>\n      TOWER_VERIFY_SSL: False\n  collections:\n    - awx.awx\n\n  tasks:\n    - include_tasks: main.yml\n```\n\n----------------------------------------\n\nTITLE: Querying Metrics from Redis CLI\nDESCRIPTION: Example showing how to query metrics directly from Redis using the CLI client, demonstrating how metrics are stored in the Redis hash set.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/subsystem_metrics.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nredis /run/redis/redis.sock> hget awx_metrics callback_receiver_events_insert_db\n\"100\"\n```\n\n----------------------------------------\n\nTITLE: Path Note Formatting Directive\nDESCRIPTION: RST note directive explaining the preservation of extra_vars formatting in Job Template records.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/conventions.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n\n    Formatting of ``extra_vars`` attached to Job Template records is preserved. YAML is returned as YAML with formatting and comments preserved, and JSON is returned as JSON.\n```\n\n----------------------------------------\n\nTITLE: Parsing Inventory Source Data from Ansible AWX Statistics\nDESCRIPTION: Illustrates the structure of the returned data for failed and successful hosts by inventory. It includes details about each inventory source, such as the source type, name, and counts of successful and failed hosts.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/dashboard_inventory_graph_view.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"sources\": [\n            {\n                \"successful\": 21, \n                \"source\": \"ec2\", \n                \"name\": \"aws (Test Inventory)\", \n                \"failed\": 0\n            }\n        ], \n        \"id\": 2, \n        \"name\": \"Test Inventory\"\n }\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Grafana and Prometheus for AWX\nDESCRIPTION: This command enables Prometheus and Grafana when running the AWX development environment using Docker Compose. It sets environment variables to include these services.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/grafana/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ PROMETHEUS=yes GRAFANA=yes make docker-compose\n```\n\n----------------------------------------\n\nTITLE: Enabling Editable Dependencies During Make Command Execution in Bash\nDESCRIPTION: Runs the make docker-compose command with EDITABLE_DEPENDENCIES set to true, enabling editable dependencies for that specific command execution.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/editable_dependencies/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nEDITABLE_DEPENDENCIES=true make docker-compose\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Custom AWX Development Image in Bash\nDESCRIPTION: These Bash commands build and push a custom AWX development image to a specified Docker registry.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/kind.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake awx-kube-dev-build\ndocker push $DEV_DOCKER_TAG_BASE/awx_kube_devel:$COMPOSE_TAG\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice text for applying the Apache License 2.0 to a software project. This template should be included in source files with the brackets replaced with the appropriate information.\nSOURCE: https://github.com/ansible/awx/blob/devel/licenses/awx.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Defining Copy Field Preservation for JobTemplate Model in Python\nDESCRIPTION: Example showing how to configure which fields should be preserved or discarded when copying a JobTemplate. This defines special field handling during the copy operation.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/resource_copy.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass JobTemplate(UnifiedJobTemplate, JobOptions, SurveyJobTemplateMixin, ResourceMixin):\n    '''\n    A job template is a reusable job definition for applying a project (with\n    playbook) to an inventory source with a given credential.\n    '''\n    FIELDS_TO_PRESERVE_AT_COPY = [\n        'labels', 'instance_groups', 'credentials', 'survey_spec'\n    ]\n    FIELDS_TO_DISCARD_AT_COPY = ['vault_credential', 'credential']\n```\n\n----------------------------------------\n\nTITLE: Specifying Organization in Bulk Job Launch API\nDESCRIPTION: This JSON snippet shows how to specify an organization when using the bulk job launch API. This is required for users who are members of multiple organizations.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/bulk_api.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Bulk Job Launch with org specified\",\n    \"jobs\": [\n        {\"unified_job_template\": 12},\n        {\"unified_job_template\": 13}\n    ],\n    \"organization\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: The standard boilerplate text to include in files to apply the Apache License 2.0. It includes placeholders for copyright year and owner information, and informs users about license terms and conditions.\nSOURCE: https://github.com/ansible/awx/blob/devel/licenses/awx_plugins.interfaces.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Formatting AWX Output as YAML\nDESCRIPTION: Example command showing how to format AWX job list output in YAML format using the -f yaml flag.\nSOURCE: https://github.com/ansible/awx/blob/devel/awxkit/awxkit/cli/docs/source/output.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nawx jobs list -f yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Images after Build\nDESCRIPTION: Command to verify the AWX development image was created successfully after the build process.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n(host)$ docker images\n\nREPOSITORY                                   TAG                 IMAGE ID            CREATED             SIZE\nansible/awx_devel                            latest              ba9ec3e8df74        26 minutes ago      1.42GB\n```\n\n----------------------------------------\n\nTITLE: Running AWX Collection Unit Tests\nDESCRIPTION: Command line example showing the execution of unit tests using make and pytest.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/TESTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ make test_collection\n$ pytest awx_collection/test/awx/test_project.py\n```\n\n----------------------------------------\n\nTITLE: Interactive Program GPL Notice Example\nDESCRIPTION: Sample notice to be displayed when an interactive program starts, informing users of the program's copyright, warranty disclaimer, and license terms. It includes hypothetical commands to display full license details.\nSOURCE: https://github.com/ansible/awx/blob/devel/licenses/uWSGI.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nGnomovision version 69, Copyright (C) year name of author\nGnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Cleaning UI Build with Make Command in Bash\nDESCRIPTION: This command cleans the UI build using the make utility.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/ui/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake clean/ui\n```\n\n----------------------------------------\n\nTITLE: Calculating CPU-Based Capacity in AWX\nDESCRIPTION: Formula for determining the number of forks a system can run based on available CPU cores. It allocates 4 forks per CPU core by default.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/capacity.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ncpus * fork_per_cpu\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Template for Employers\nDESCRIPTION: Example of a copyright disclaimer that can be used when an employer needs to disclaim copyright interest in a program written by an employee. This template can be modified with appropriate names and program details.\nSOURCE: https://github.com/ansible/awx/blob/devel/licenses/uWSGI.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the program\n`Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n<signature of Ty Coon>, 1 April 1989\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Extending API Template Documentation for Job Creation\nDESCRIPTION: Template file that extends an existing API documentation template. It specifies that any fields not explicitly provided when creating a new job (except name and description) will use default values from the job template.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/job_template_jobs_list.md#2025-04-22_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends \"api/sub_list_create_api_view.md\" %}\n\n{% block post_create %}\nAny fields not explicitly provided for the new job (except `name` and\n`description`) will use the default values from the job template.\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Disabling Color Output in AWX Development Environment\nDESCRIPTION: Command to disable colored output in the AWX development environment, which can be useful in CI contexts or when color formatting causes issues.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nDJANGO_COLORS=nocolor COMPOSE_UP_OPTS=\"--no-color\" SUPERVISOR_ARGS=\"-n -t\" make docker-compose\n```\n\n----------------------------------------\n\nTITLE: Updating Resource Data with PUT or PATCH Request in Django Template\nDESCRIPTION: This snippet provides instructions for updating a record using either PUT or PATCH requests. It includes a placeholder for listing the fields that can be modified and specifies the use of a custom context variable for write-only fields.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/retrieve_update_api_view.md#2025-04-22_snippet_1\n\nLANGUAGE: django\nCODE:\n```\n{% ifmeth PUT PATCH %}\n# Update {{ model_verbose_name|title|anora }}:\n\nMake a PUT or PATCH request to this resource to update this\n{{ model_verbose_name }}.  The following fields may be modified:\n\n{% with write_only=1 %}\n{% include \"api/_result_fields_common.md\" with serializer_fields=serializer_update_fields %}\n{% endwith %}\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Extending Django Template for Schedule List Creation in Ansible AWX\nDESCRIPTION: This Django template extends a base API view template and incorporates schedule list common functionality within the post_create block. It's designed to provide consistent documentation for the schedule creation API.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/job_template_schedules_list.md#2025-04-22_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends \"api/sub_list_create_api_view.md\" %}\n\n{% block post_create %}\n{% include \"api/_schedule_list_common.md\" %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Functions for AWX Configuration Categories\nDESCRIPTION: Demonstrates how to create and register custom validation functions for different configuration categories. These functions validate user input when updating configuration settings.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/tower_configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef custom_validate(serializer, attrs):\n    '''\n    Method details\n    '''\n```\n\n----------------------------------------\n\nTITLE: Calculating Balanced Capacity in AWX\nDESCRIPTION: Formula for determining a balanced capacity between CPU and memory considerations using a capacity adjustment factor between 0.0 and 1.0.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/capacity.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n16 + (20 - 16) * 0.5 == 18\n```\n\n----------------------------------------\n\nTITLE: Building Custom AWX Operator Image\nDESCRIPTION: Commands for building and pushing a custom AWX operator image to a container registry.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/minikube.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# in awx-operator repo on the branch you want to use\n$ export IMAGE_TAG_BASE=quay.io/<username>/awx-operator\n$ export VERSION=<custom-tag>\n$ make docker-build\n$ docker push ${IMAGE_TAG_BASE}:${VERSION}\n```\n\n----------------------------------------\n\nTITLE: Deploying Custom AWX Image using Ansible Playbook\nDESCRIPTION: This Bash command runs an Ansible playbook to deploy a custom AWX image into the Kubernetes cluster.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/kind.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nansible-playbook ansible/instantiate-awx-deployment.yml \\\n   -e development_mode=yes \\\n   -e image=$DEV_DOCKER_TAG_BASE/awx_kube_devel \\\n   -e image_version=$COMPOSE_TAG \\\n   -e image_pull_policy=Always \\\n   -e service_type=nodeport \\\n   -e namespace=$NAMESPACE\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Custom AWX Operator Image in Bash\nDESCRIPTION: These Bash commands set the image tag base and build, push, and deploy a custom AWX Operator image.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/kind.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# in awx-operator repo on the branch you want to use\nexport IMAGE_TAG_BASE=quay.io/<username>/awx-operator\nmake docker-build docker-push deploy\n```\n\n----------------------------------------\n\nTITLE: Setting up a Basic Webhook Testing Server with Netcat in Bash\nDESCRIPTION: A simple command to create a basic webhook listener using netcat that will display incoming webhook data. This is useful for basic webhook testing, though it won't respond correctly to the notification and will yield an error.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/notification_system.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnetcat -l 8099\n```\n\n----------------------------------------\n\nTITLE: Setting Remote Breakpoints in AWX Tasks with sdb\nDESCRIPTION: Demonstrates how to use sdb to set breakpoints in AWX Python code that expose an interactive debugger on a random port that can be accessed via telnet. This allows for interactive debugging of AWX tasks.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/debugging/debugging_misc.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n    # awx/main/tasks.py\n\n    class SomeTask(awx.main.tasks.jobs.BaseTask):\n\n        def run(self, pk, **kwargs):\n            # This will set a breakpoint and open an interactive Python\n            # debugger exposed on a random port between 6899-6999.  The chosen\n            # port will be reported as a warning in the AWX logs, e.g.,\n            #\n            # [2017-01-30 22:26:04,366: WARNING/Worker-11] Remote Debugger:6900: Please telnet into 0.0.0.0 6900.\n            #\n            # You can access it from your host machine using telnet:\n            #\n            # $ telnet localhost <port>\n            import sdb\n            sdb.set_trace()\n```\n\n----------------------------------------\n\nTITLE: Job Template Callback Response Format\nDESCRIPTION: This JSON shows the response format when verifying host matching with a GET request. It includes the host_config_key and the list of matching hosts that would be selected for the job.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/job_template_callback.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"host_config_key\": \"HOST_CONFIG_KEY\",\n    \"matching_hosts\": [\"hostname\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWX CLI via pip from Git repository\nDESCRIPTION: Command to install the AWX CLI tool (awxkit) directly from the GitHub repository for a specific version. The $VERSION variable should be replaced with the target AWX version number.\nSOURCE: https://github.com/ansible/awx/blob/devel/awxkit/awxkit/cli/docs/source/install.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"git+https://github.com/ansible/awx.git@$VERSION#egg=awxkit&subdirectory=awxkit\"\n```\n\n----------------------------------------\n\nTITLE: AWX Resource Help Commands\nDESCRIPTION: Commands to get detailed help information about specific resources and their actions, including creation parameters.\nSOURCE: https://github.com/ansible/awx/blob/devel/awxkit/awxkit/cli/docs/source/usage.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nawx --conf.host https://awx.example.org users --help\nawx --conf.host https://awx.example.org users create --help\n```\n\n----------------------------------------\n\nTITLE: Installing OpenShift Python Package for AWX Operator Deployment\nDESCRIPTION: This Bash command installs the OpenShift Python package required for deploying the AWX Operator.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/kind.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install openshift\n```\n\n----------------------------------------\n\nTITLE: Tailing Logs from AWX Task Containers in Kubernetes\nDESCRIPTION: This Bash command tails logs from the AWX task containers in the Kubernetes cluster.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/kind.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -f deployment/awx-task -n awx -c awx-task\n```\n\n----------------------------------------\n\nTITLE: Job Statistics Response Format\nDESCRIPTION: Example response format showing the structure of job statistics data. Returns arrays of timestamp-count pairs for successful and failed jobs.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/dashboard_jobs_graph_view.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"jobs\": {\n        \"successful\": [\n            [\n                1402808400.0, \n                9\n            ], ... ],\n        \"failed\": [\n\t        [\n                1402808400.0, \n                3\n            ], ... ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose with ELK Stack for AWX Development\nDESCRIPTION: Commands for starting up log aggregation services in the AWX development environment. Uses Makefile targets to start Logstash, Elastic Search, and Kibana as separate containers, with appropriate links to tower_tools containers.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/logging_integration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Start a single server with links\nmake docker-compose-elk\n# Start the HA cluster with links\nmake docker-compose-cluster-elk\n```\n\n----------------------------------------\n\nTITLE: Starting AWX with Splunk Integration\nDESCRIPTION: Commands to start AWX with Splunk integration and configure logging\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nSPLUNK=true make docker-compose\nexport CONTROLLER_USERNAME=<your username>\nexport CONTROLLER_PASSWORD=<your password>\nansible-playbook tools/docker-compose/ansible/plumb_splunk.yml\n```\n\n----------------------------------------\n\nTITLE: Verifying AWX Source Mount in Kind Cluster using Bash\nDESCRIPTION: This Bash command checks if the AWX source tree is correctly mounted in the Kind control-plane container.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/kind.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it kind-control-plane ls /awx_devel\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Receptor Image with AWX\nDESCRIPTION: Commands to build and run AWX with a custom Receptor image by setting the RECEPTOR_IMAGE environment variable.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport RECEPTOR_IMAGE=quay.io/ansible/receptor:release_1.1\nmake docker-compose-build\nmake docker-compose\n```\n\n----------------------------------------\n\nTITLE: Running Specific Integration Test with Ansible Playbook\nDESCRIPTION: Command to run a specific integration test module using an Ansible playbook. The test name is specified using the -e parameter.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/tools/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nansible-playbook -i localhost, awx_collection/tools/integration_testing.yml -e test=host\n```\n\n----------------------------------------\n\nTITLE: Settings Change Endpoint\nDESCRIPTION: API endpoint for viewing settings that have been changed from factory defaults via the API browser.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/browseable.rst#2025-04-22_snippet_1\n\nLANGUAGE: rest\nCODE:\n```\n/api/v2/settings/changed/\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Compose Environment and Volume in Bash\nDESCRIPTION: Executes commands to tear down the Docker Compose environment and remove the tools_var_lib_awx volume, which is necessary when removing individual editable dependencies.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/editable_dependencies/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-compose-down\ndocker volume rm tools_var_lib_awx\n```\n\n----------------------------------------\n\nTITLE: Using Limit Parameter in Event List API Query (Markdown)\nDESCRIPTION: Demonstrates how to use the 'limit' query string parameter to opt out of pagination keys and improve response times for jobs with large output volumes.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/job_job_events_list.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n    ?limit=25\n```\n\n----------------------------------------\n\nTITLE: Displaying NAMED_URL_FORMATS Configuration Structure in Python\nDESCRIPTION: This code snippet shows the structure of the NAMED_URL_FORMATS configuration setting, which defines the naming format for different AWX resources. Each resource has a specific format for creating human-readable identifiers.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/access_resources.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"NAMED_URL_FORMATS\": {\n    \"organizations\": \"<name>\",\n    \"teams\": \"<name>++<organization.name>\",\n    \"credential_types\": \"<name>+<kind>\",\n    \"credentials\": \"<name>++<credential_type.name>+<credential_type.kind>++<organization.name>\",\n    \"notification_templates\": \"<name>++<organization.name>\",\n    \"job_templates\": \"<name>++<organization.name>\",\n    \"projects\": \"<name>++<organization.name>\",\n    \"inventories\": \"<name>++<organization.name>\",\n    \"hosts\": \"<name>++<inventory.name>++<organization.name>\",\n    \"groups\": \"<name>++<inventory.name>++<organization.name>\",\n    \"inventory_sources\": \"<name>++<inventory.name>++<organization.name>\",\n    \"inventory_scripts\": \"<name>++<organization.name>\",\n    \"instance_groups\": \"<name>\",\n    \"labels\": \"<name>++<organization.name>\",\n    \"workflow_job_templates\": \"<name>++<organization.name>\",\n    \"workflow_job_template_nodes\": \"<identifier>++<workflow_job_template.name>++<organization.name>\",\n    \"applications\": \"<name>++<organization.name>\",\n    \"users\": \"<username>\",\n    \"instances\": \"<hostname>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment for AWX Collection Testing\nDESCRIPTION: This code snippet demonstrates the commands to set up a dedicated virtual environment for running AWX Collection tests. It includes steps for creating the environment, installing dependencies, and running tests.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkvirtualenv my_new_venv\n# may need to replace psycopg3 with psycopg3-binary in requirements/requirements.txt\npip install -r requirements/requirements.txt -r requirements/requirements_dev.txt -r requirements/requirements_git.txt\nmake clean-api\npip install -e <path to your Ansible>\npip install -e .\npip install -e awxkit\npy.test awx_collection/test/awx/\n```\n\n----------------------------------------\n\nTITLE: Managing Credentials via API\nDESCRIPTION: Examples of creating and retrieving credentials using the API, showing how to specify credential type and handle encrypted inputs.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/credentials/custom_credential_types.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Joe's Third Party Cloud API Token\",\n    \"description\": \"\",\n    \"organization\": \"<pk>\",\n    \"user\": null,\n    \"team\": null,\n    \"credential_type\": \"<pk>\",\n    \"inputs\": {\n        \"api_token\": \"f239248b-97d0-431b-ae2f-091d80c3452e\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering AWX Metrics with Query Parameters\nDESCRIPTION: Example URL query parameters to filter AWX metric data. Filters by subsystem, specific metric name, and node. Parameters include subsystemonly=1 for subsystem-only data, metric to specify the metric name, and node to filter by specific AWX node.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/metrics_view.md#2025-04-22_snippet_0\n\nLANGUAGE: url-params\nCODE:\n```\n?subsystemonly=1&metric=callback_receiver_events_insert_db&node=awx-1\n```\n\n----------------------------------------\n\nTITLE: Starting AWX Cluster\nDESCRIPTION: Command to start a multi-node AWX cluster development environment\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n(host)$ CONTROL_PLANE_NODE_COUNT=3 make docker-compose\n```\n\n----------------------------------------\n\nTITLE: Building and Serving AWX Documentation with Sphinx\nDESCRIPTION: Two-step process to build AWX documentation using Sphinx and serve it locally. Requires a running AWX server, Sphinx and sphinxcontrib-autoprogram Python packages. Uses environment variables to configure AWX connection details.\nSOURCE: https://github.com/ansible/awx/blob/devel/awxkit/awxkit/cli/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nCONTROLLER_HOST=https://awx.example.org CONTROLLER_USERNAME=example CONTROLLER_PASSWORD=secret make clean html\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd build/html/ && python -m http.server\n```\n\n----------------------------------------\n\nTITLE: Verifying AWX CLI Configuration\nDESCRIPTION: Command to verify AWX CLI configuration and authentication settings\nSOURCE: https://github.com/ansible/awx/blob/devel/awxkit/awxkit/cli/docs/source/examples.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nawx config\n```\n\n----------------------------------------\n\nTITLE: Updating Job Template Extra Vars\nDESCRIPTION: Commands to modify job template by adding extra variables from YAML or JSON files\nSOURCE: https://github.com/ansible/awx/blob/devel/awxkit/awxkit/cli/docs/source/examples.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nawx job_templates modify 1 --extra_vars \"@vars.yml\"\nawx job_templates modify 1 --extra_vars \"@vars.json\"\n```\n\n----------------------------------------\n\nTITLE: Setting Local UI Source Path in Bash\nDESCRIPTION: This command sets a local path for the UI source. If set, it takes precedence over the UI_GIT_REPO setting.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/ui/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport UI_LOCAL = /path/to/your/ui\n```\n\n----------------------------------------\n\nTITLE: AWX Project Cache Staging Path\nDESCRIPTION: Example path showing where project updates are initially staged before being moved to their final cache location.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/collections.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/var/lib/awx/projects/.__awx_cache/_42__project_name/stage\n```\n\n----------------------------------------\n\nTITLE: Overwriting Inventory Data with awx-manage\nDESCRIPTION: Command for importing inventory data with the overwrite flag, which uses only the external data rather than blending with existing inventory data in AWX.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/awx-manage.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nawx-manage inventory_import --source=/ansible/inventory/ --inventory-id=1 --overwrite\n```\n\n----------------------------------------\n\nTITLE: Building Swagger API Documentation\nDESCRIPTION: Command to generate OpenAPI/Swagger documentation for the AWX API, producing a swagger.json file.\nSOURCE: https://github.com/ansible/awx/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n(container)/awx_devel$ make swagger\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Receptor Image\nDESCRIPTION: Commands for building a custom Receptor image to be used with AWX. Receptor is used for node communication in the AWX cluster.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCONTAINERCMD=docker TAG=quay.io/ansible/receptor:release_1.1 make container\n```\n\n----------------------------------------\n\nTITLE: Cleaning Docker Containers and Images\nDESCRIPTION: Command to remove all AWX-related Docker containers and images from the system.\nSOURCE: https://github.com/ansible/awx/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n(host)$ make docker-clean\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Event Hierarchy in Ansible AWX Jobs\nDESCRIPTION: This code snippet shows an example of event hierarchy in an Ansible AWX job, represented as tuples of event counter, UUID, and parent UUID. It demonstrates the nested structure of events in a job execution.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/job_job_events_children_summary.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n(1, '4598d19e-93b4-4e33-a0ae-b387a7348964', '')\n(2, 'aae0d189-e3cb-102a-9f00-000000000006', '4598d19e-93b4-4e33-a0ae-b387a7348964')\n(3, 'aae0d189-e3cb-102a-9f00-00000000000c', 'aae0d189-e3cb-102a-9f00-000000000006')\n(4, 'f4194f14-e406-4124-8519-0fdb08b18f4b', 'aae0d189-e3cb-102a-9f00-00000000000c')\n(5, '39f7ad99-dbf3-41e0-93f8-9999db4004f2', 'aae0d189-e3cb-102a-9f00-00000000000c')\n(6, 'aae0d189-e3cb-102a-9f00-000000000008', 'aae0d189-e3cb-102a-9f00-000000000006')\n(7, '39a49992-5ca4-4b6c-b178-e56d0b0333da', 'aae0d189-e3cb-102a-9f00-000000000008')\n(8, '504f3b28-3ea8-4f6f-bd82-60cf8e807cc0', 'aae0d189-e3cb-102a-9f00-000000000008')\n(9, 'a242be54-ebe6-4021-afab-f2878bff2e9f', '4598d19e-93b4-4e33-a0ae-b387a7348964')\n```\n\n----------------------------------------\n\nTITLE: Running AWX Collection Integration Tests\nDESCRIPTION: This code snippet shows the commands for running integration tests for the AWX Collection. It assumes the collection is installed and a configuration file is set up.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# ansible-test must be run from the directory in which the collection is installed\ncd ~/.ansible/collections/ansible_collections/awx/awx/\nansible-test integration\n```\n\n----------------------------------------\n\nTITLE: Creating Symlink for Editable Dependency Using Absolute Path in Bash\nDESCRIPTION: Creates a symlink to an editable dependency (ansible-runner) using an absolute path, allowing it to be mounted and installed in the Docker Compose environment.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/editable_dependencies/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nln -s ~/projects/src/github.com/TheRealHaoLiu/ansible-runner tools/docker-compose/editable_dependencies/\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Class in Python\nDESCRIPTION: Shows how to define a task as a class with a 'run' method using the @task decorator in AWX. This example creates an 'Adder' class that performs addition.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/tasks.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task()\nclass Adder:\n    def run(self, a, b):\n        return a + b\n```\n\n----------------------------------------\n\nTITLE: Implementing Efficient Metrics Collection Loop\nDESCRIPTION: Example showing best practices for collecting metrics in a loop while avoiding excessive Redis writes using should_pipe_execute().\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/subsystem_metrics.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nm = Metrics()\nwhile True:\n    m.inc(\"foo\", 1)\n    if m.should_pipe_execute():\n        m.pipe_execute()\n    if some_condition:\n        break\nm.pipe_execute()\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Compose with pip\nDESCRIPTION: Command to install the docker-compose Python module for environments not using Docker for Mac/Windows.\nSOURCE: https://github.com/ansible/awx/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n(host)$ pip3 install docker-compose\n```\n\n----------------------------------------\n\nTITLE: Managing Unified Credentials Interface\nDESCRIPTION: New unified API endpoints for managing all types of credentials for job templates.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/credentials/multi_credential_assignment.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/v2/job_templates/N/credentials/ {'associate': true, 'id': X'}\nPOST /api/v2/job_templates/N/credentials/ {'disassociate': true, 'id': Y'}\n```\n\n----------------------------------------\n\nTITLE: Listing User Roles - GET Method Documentation\nDESCRIPTION: Documentation for the GET request to retrieve a list of roles associated with a selected user. It includes a reference to common list parameters.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/user_roles_list.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% ifmeth GET %}\n# List Roles for a User:\n\nMake a GET request to this resource to retrieve a list of roles associated with the selected user.\n\n{% include \"api/_list_common.md\" %}\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Including Schedule Detail Documentation in Markdown\nDESCRIPTION: This snippet includes a separate Markdown file containing detailed information about the schedule API. It uses a Liquid template tag to insert the contents of the '_schedule_detail.md' file.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/_schedule_list_common.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include \"api/_schedule_detail.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Generating Resource List API Documentation Template in Django/Jinja\nDESCRIPTION: This template generates documentation for the GET method that lists resources of a specified model. It includes a title, description of the endpoint's purpose, and incorporates common list documentation through an include directive.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/list_api_view.md#2025-04-22_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% ifmeth GET %}\n# List {{ model_verbose_name_plural|title }}:\n\nMake a GET request to this resource to retrieve the list of\n{{ model_verbose_name_plural }}.\n\n{% include \"api/_list_common.md\" %}\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Asserting Test Results in AWX Integration Tests\nDESCRIPTION: Verifies that the test operation resulted in the expected changes.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/TESTING.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- assert:\n    that:\n      - \"result is changed\"\n```\n\n----------------------------------------\n\nTITLE: Job Template Summary Fields Response\nDESCRIPTION: Example API response showing detailed credential information in job template summary fields.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/credentials/multi_credential_assignment.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"summary_fields\": {\n        \"credentials\": [\n            {\n                \"description\": \"\",\n                \"credential_type_id\": 5,\n                \"id\": 2,\n                \"kind\": \"aws\",\n                \"name\": \"some-aws\"\n            },\n            {\n                \"description\": \"\",\n                \"credential_type_id\": 10,\n                \"id\": 4,\n                \"kind\": \"gce\",\n                \"name\": \"some-gce\"\n            }\n        ],\n        \"extra_credentials\": [\n            {\n                \"description\": \"\",\n                \"credential_type_id\": 5,\n                \"id\": 2,\n                \"kind\": \"aws\",\n                \"name\": \"some-aws\"\n            },\n            {\n                \"description\": \"\",\n                \"credential_type_id\": 10,\n                \"id\": 4,\n                \"kind\": \"gce\",\n                \"name\": \"some-gce\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Custom AWX Development Image\nDESCRIPTION: These Bash commands set environment variables for building and pushing a custom AWX development image.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/kind.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport DEV_DOCKER_TAG_BASE=quay.io/<USERNAME>\nexport COMPOSE_TAG=<IMAGE_TAG>\n```\n\n----------------------------------------\n\nTITLE: Generating API Resource Creation Fields Documentation in Django Template\nDESCRIPTION: This code block generates documentation for the fields required to create a new resource via a POST request. It uses a custom template to format the serializer fields, focusing on write-only fields.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/list_create_api_view.md#2025-04-22_snippet_1\n\nLANGUAGE: django\nCODE:\n```\n{% with write_only=1 %}\n{% include \"api/_result_fields_common.md\" with serializer_fields=serializer_create_fields %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Collecting Host Usage Metrics with awx-manage\nDESCRIPTION: Command for collecting usage information about unique hosts automated across a specified time period. Useful for disconnected environments.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/awx-manage.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nawx-manage host_metric --since YYYY-MM-DD --until YYYY-MM-DD --json\n```\n\n----------------------------------------\n\nTITLE: Creating Container Group in AWX Integration Tests\nDESCRIPTION: Example of creating a container group and registering the result for assertion testing.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/TESTING.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Create a container group\n  instance_group:\n    name: \"{{ group_name2 }}\"\n    credential: \"{{ cred_result.id }}\"\n  register: result\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resource Data with GET Request in Django Template\nDESCRIPTION: This snippet provides instructions for retrieving a single record of a model using a GET request. It includes a placeholder for listing the fields that will be returned in the response.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/retrieve_update_api_view.md#2025-04-22_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% ifmeth GET %}\n# Retrieve {{ model_verbose_name|title|anora }}:\n\nMake GET request to this resource to retrieve a single {{ model_verbose_name }}\nrecord containing the following fields:\n\n{% include \"api/_result_fields_common.md\" %}\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Generating Event Summary JSON for Ansible AWX UI\nDESCRIPTION: This JSON structure represents a summary of events with their row numbers and number of children. It's designed to help the UI collapse events and their children efficiently. Only events with children are included in the output.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/job_job_events_children_summary.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"1\": {\n    \"rowNumber\": 0,\n    \"numChildren\": 8\n},\n\"2\": {\n    \"rowNumber\": 1,\n    \"numChildren\": 6\n},\n\"3\": {\n    \"rowNumber\": 2,\n    \"numChildren\": 2\n},\n\"6\": {\n    \"rowNumber\": 5,\n    \"numChildren\": 2\n}\n}\n\"meta_event_nested_parent_uuid\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with Ansible Playbook\nDESCRIPTION: Command to run integration tests using an Ansible playbook. This assumes the collection is installed and the Tower CLI config is set up.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/tools/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nansible-playbook -i localhost, awx_collection/tools/integration_testing.yml\n```\n\n----------------------------------------\n\nTITLE: Templating API Documentation for GET and DELETE Methods in Jinja2\nDESCRIPTION: A Jinja2 template that conditionally renders documentation for GET and DELETE operations on API resources. The template uses ifmeth tags to specify method-specific documentation and includes common result fields for GET requests.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/retrieve_destroy_api_view.md#2025-04-22_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{% ifmeth GET %}\n# Retrieve {{ model_verbose_name|title|anora }}:\n\nMake GET request to this resource to retrieve a single {{ model_verbose_name }}\nrecord containing the following fields:\n\n{% include \"api/_result_fields_common.md\" %}\n{% endifmeth %}\n\n{% ifmeth DELETE %}\n# Delete {{ model_verbose_name|title|anora }}:\n\nMake a DELETE request to this resource to delete this {{ model_verbose_name }}.\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Deleting License in Ansible Tower (DELETE)\nDESCRIPTION: This snippet outlines the DELETE request for removing an existing license in Ansible Tower. It requires super user privileges to perform the deletion operation.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/api_v2_config_view.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{% ifmeth DELETE %}\n# Delete an existing license\n\n(_New in Ansible Tower 2.0.0_) Make a DELETE request to this resource as a super\nuser to delete the existing license\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Model Resource Template for GET Method in Django Template\nDESCRIPTION: Django template snippet that generates documentation for the GET method on a model resource. It explains how to retrieve a single record and includes common result fields from another template.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/host_metric_detail.md#2025-04-22_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% ifmeth GET %}\n# Retrieve {{ model_verbose_name|title|anora }}:\n\nMake GET request to this resource to retrieve a single {{ model_verbose_name }}\nrecord containing the following fields:\n\n{% include \"api/_result_fields_common.md\" %}\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Specifying PATCH Request Requirements in Django Template\nDESCRIPTION: This snippet provides additional information for PATCH requests, indicating that only fields being modified should be included in the request.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/retrieve_update_destroy_api_view.md#2025-04-22_snippet_3\n\nLANGUAGE: django-template\nCODE:\n```\n{% ifmeth PATCH %}\nFor a PATCH request, include only the fields that are being modified.\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Building AWX Collection with Make\nDESCRIPTION: Command to build the AWX collection using Make. This runs the template_galaxy.yml playbook as a prerequisite for building the collection.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/tools/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake awx_collection_build\n```\n\n----------------------------------------\n\nTITLE: Soft Deletion Documentation Template for DELETE Method in Django Template\nDESCRIPTION: Django template snippet that generates documentation for the DELETE method on a model resource. It explains the soft deletion process, its effects on licensing, and the possibility of undoing the deletion.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/host_metric_detail.md#2025-04-22_snippet_1\n\nLANGUAGE: django-template\nCODE:\n```\n{% ifmeth DELETE %}\n# Delete {{ model_verbose_name|title|anora }}:\n\nMake a DELETE request to this resource to soft-delete this {{ model_verbose_name }}.\n\nA soft deletion will mark the `deleted` field as true and exclude the host\nmetric from license calculations.\nThis may be undone later if the same hostname is automated again afterwards.\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Running the Operator Hub Release Script\nDESCRIPTION: Command example for running the release_operator_hub.sh script to prepare submissions to Operator Hub repositories. The script helps automate the process of creating the necessary PR files.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/release_process.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOPERATOR_PATH=<path to your operator repo> VERSION=1.1.2 PREV_VERSION=1.1.1 FORK=john-westcott-iv ./release_operator_hub.sh\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring SOS Report with Controller Plugin\nDESCRIPTION: This snippet shows the process of creating necessary directories, installing SOS, copying the controller plugin, setting appropriate permissions, creating a symlink, and verifying the installation. It requires root access and assumes a RHEL-based system.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/sosreport/TESTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /usr/share/sosreport/sos/plugins\nsudo yum install sos\ncp controller.py /usr/share/sosreport/sos/plugins\nsudo chmod 644 /usr/share/sosreport/sos/plugins/controller.py\nln -s /usr/share/sosreport/sos/plugins/controller.py `find `find /usr/lib -name sos` -name plugins`\nsosreport -l | grep controller\n```\n\n----------------------------------------\n\nTITLE: Configuring AWX Project Settings using Jinja2 Templates\nDESCRIPTION: This snippet defines various configuration settings for an Ansible AWX project using Jinja2 templating. It includes settings for project paths, virtual environments, and application-specific configurations like secret key, allowed hosts, and database connections.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/api_view.md#2025-04-22_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ docstring }}\n```\n\n----------------------------------------\n\nTITLE: Deleting Model Data with DELETE Request in Django Template\nDESCRIPTION: This snippet describes how to delete a model record using a DELETE request.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/retrieve_update_destroy_api_view.md#2025-04-22_snippet_4\n\nLANGUAGE: django-template\nCODE:\n```\n{% ifmeth DELETE %}\n# Delete {{ model_verbose_name|title|anora }}:\n\nMake a DELETE request to this resource to delete this {{ model_verbose_name }}.\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Model Variable Data with GET in Django Templates\nDESCRIPTION: Template snippet for generating documentation about retrieving variables for a model using a GET request. This template conditionally renders when the method is GET and explains how to retrieve all variables defined for a specific model.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/base_variable_data.md#2025-04-22_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% ifmeth GET %}\n# Retrieve {{ model_verbose_name|title }} Variable Data:\n\nMake a GET request to this resource to retrieve all variables defined for a\n{{ model_verbose_name }}.\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Basic API Endpoint Example in HTTP\nDESCRIPTION: An example HTTP endpoint for accessing groups in the AWX API v2. This serves as a base URL for the sorting examples that follow.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/sorting.rst#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttp://<server name>/api/v2/groups/\n```\n\n----------------------------------------\n\nTITLE: Adding AWX Operator Version in Release Notes\nDESCRIPTION: A markdown snippet to include in AWX release notes that indicates which version of AWX Operator is being released alongside this AWX version.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/release_process.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## AWX Operator\nReleased with AWX Operator v0.23.0\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies for AWX\nDESCRIPTION: Requirements file containing Python package dependencies with pinned versions. Includes Django frameworks, cloud provider SDKs, telemetry packages, and various utility libraries needed for the AWX project functionality.\nSOURCE: https://github.com/ansible/awx/blob/devel/requirements/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\ndjango-cors-headers==4.6.0\ndjango-crum==0.7.9\ndjango-extensions==3.2.3\ndjango-flags==5.0.13\ndjango-guid==3.5.0\ndjango-oauth-toolkit==1.7.1\ndjango-polymorphic==3.1.0\ndjango-solo==2.4.0\ndjangorestframework==3.15.2\ndjangorestframework-yaml==2.0.0\ndurationpy==0.9\ndynaconf==3.2.10\nenum-compat==0.0.3\nfilelock==3.16.1\nfrozenlist==1.5.0\ngitdb==4.0.12\ngitpython==3.1.44\ngoogle-auth==2.37.0\ngoogleapis-common-protos==1.66.0\ngrpcio==1.69.0\nhiredis==3.1.0\nhyperlink==21.0.0\n```\n\n----------------------------------------\n\nTITLE: Human-Readable AWX Output Formatting\nDESCRIPTION: Examples of formatting AWX job list output in human-readable tabular format with optional filtering of specific fields or all fields.\nSOURCE: https://github.com/ansible/awx/blob/devel/awxkit/awxkit/cli/docs/source/output.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nawx jobs list -f human\nawx jobs list -f human --filter name,created,status\nawx jobs list -f human --filter *\n```\n\n----------------------------------------\n\nTITLE: Generating Python Dependencies with pip-compile for Ansible AWX Docs\nDESCRIPTION: This code snippet shows the pip-compile command used to generate the requirements.txt file. It specifies the input file, output file, and additional options for compiling the dependencies.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#    pip-compile --allow-unsafe --output-file=docs/docsite/requirements.txt --strip-extras docs/docsite/requirements.in\n```\n\n----------------------------------------\n\nTITLE: Sample Server Response Headers\nDESCRIPTION: Example of server response headers after successful authentication, showing session cookies and security settings.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/authentication.rst#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nServer: nginx\nDate: <current date>\nContent-Type: text/html; charset=utf-8\nContent-Length: 0\nConnection: keep-alive\nLocation: /accounts/profile/\nX-API-Session-Cookie-Name: awx_sessionid\nExpires: <date>\nCache-Control: max-age=0, no-cache, no-store, must-revalidate, private\nVary: Cookie, Accept-Language, Origin\nSession-Timeout: 1800\nContent-Language: en\nX-API-Total-Time: 0.377s\nX-API-Request-Id: 700826696425433fb0c8807cd40c00a0\nAccess-Control-Expose-Headers: X-API-Request-Id\nSet-Cookie: userLoggedIn=true; Path=/\nSet-Cookie: current_user=<user cookie data>; Path=/\nSet-Cookie: csrftoken=<csrftoken>; Path=/; SameSite=Lax\nSet-Cookie: awx_sessionid=<your session id>; expires=<date>; HttpOnly; Max-Age=1800; Path=/; SameSite=Lax\nStrict-Transport-Security: max-age=15768000\n```\n\n----------------------------------------\n\nTITLE: Python Development Dependencies Requirements\nDESCRIPTION: Comprehensive list of Python packages required for development, testing, and debugging of the AWX project. Includes testing frameworks like pytest, code formatters like black, debugging tools, and other development utilities with specific version constraints for compatibility and security.\nSOURCE: https://github.com/ansible/awx/blob/devel/requirements/requirements_dev.txt#2025-04-22_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\ndjango-debug-toolbar==3.2.4\ndjango-test-migrations\ndrf-yasg<1.21.10\nipython>=7.31.1\nunittest2\nblack\npytest!=7.0.0\npytest-asyncio\npytest-cov\npytest-django\npytest-mock\npytest-timeout\npytest-xdist\ntox\nlogutils\njupyter\nbackports.tempfile\ngprof2dot\natomicwrites\nflake8\nyamllint\npip>=21.3,<=24.0\ndebugpy\nremote-pdb\nsdb\n```\n\n----------------------------------------\n\nTITLE: Gathering Analytics On-demand with awx-manage\nDESCRIPTION: Command to gather analytics outside of the predefined window (default is 4 hours) and ship the data.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/awx-manage.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ awx-manage gather_analytics --ship\n```\n\n----------------------------------------\n\nTITLE: Generating Resource List Documentation Template in Django\nDESCRIPTION: Template code that generates API documentation for listing model resources that are associated with a parent model. Uses Django template language with conditional logic and includes a common list template.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/sub_list_api_view.md#2025-04-22_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% ifmeth GET %}\n# List {{ model_verbose_name_plural|title }} for {{ parent_model_verbose_name|title|anora }}:\n\nMake a GET request to this resource to retrieve a list of\n{{ model_verbose_name_plural }} associated with the selected\n{{ parent_model_verbose_name }}.\n\n{% include \"api/_list_common.md\" %}\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Specifying PUT Request Requirements in Django Template\nDESCRIPTION: This snippet provides additional information for PUT requests, indicating that all fields should be included in the request.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/retrieve_update_destroy_api_view.md#2025-04-22_snippet_2\n\nLANGUAGE: django-template\nCODE:\n```\n{% ifmeth PUT %}\nFor a PUT request, include **all** fields in the request.\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Executing Role Check and Fix Scripts in Ansible AWX\nDESCRIPTION: Commands to run the role_check.py script to identify incorrect role linkages and generate a fix script, then execute the fix script. It also includes a command to re-run the check script to verify the fix.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/scripts/ig-hotfix/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nawx-manage shell < role_check.py 2> role_check.log > fix.py\n```\n\nLANGUAGE: bash\nCODE:\n```\nawx-manage shell < fix.py > fix.log 2>&1\n```\n\nLANGUAGE: bash\nCODE:\n```\nawx-manage shell < role_check.py 2> role_check2.log > fix2.py\n```\n\n----------------------------------------\n\nTITLE: Including Sub-List Create API View Template with Admin User Context in Django\nDESCRIPTION: This Django template snippet sets context variables for admin users and includes a reusable template for API documentation. It defines model_verbose_name and model_verbose_name_plural variables that will be used in the included template.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/organization_admins_list.md#2025-04-22_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% with model_verbose_name=\"admin user\" model_verbose_name_plural=\"admin users\" %}\n{% include \"api/sub_list_create_api_view.md\" %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Cleanup Operations in AWX Integration Tests\nDESCRIPTION: Example of cleaning up test resources by deleting a credential after test completion.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/TESTING.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Delete the credential\n  credential:\n    name: \"{{ cred_name1 }}\"\n    organization: \"Default\"\n    credential_type: \"OpenShift or Kubernetes API Bearer Token\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Dependencies for AWX Testing\nDESCRIPTION: Specifies required Python packages for AWX testing on CentOS 8 and RHEL 8 platforms. Includes core dependencies like pytz, requests, and pyyaml specifically for Python 3.8.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/bindep.txt#2025-04-22_snippet_0\n\nLANGUAGE: bindep\nCODE:\n```\npython38-pytz [platform:centos-8 platform:rhel-8]\n\n# awxkit\npython38-requests [platform:centos-8 platform:rhel-8]\npython38-pyyaml [platform:centos-8 platform:rhel-8]\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Release Reversion Process\nDESCRIPTION: Detailed steps for reverting AWX and AWX-Operator releases across different platforms including GitHub releases, tags, container images, collections, and PyPi packages.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/release_process.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Revert a Release\n\nDecide whether or not you can just fall-forward with a new AWX Release to fix a bad release. If you need to remove published artifacts from publicly facing repositories, follow the steps below.\n\nHere are the steps needed to revert an AWX and an AWX-Operator release. Depending on your use case, follow the steps for reverting just an AWX release, an Operator release or both.\n\n\n1. Navigate to the [AWX Release Page](https://github.com/ansible/awx/releases) and delete the AWX Release that needs to be removed.\n\n![Revert-1-Image](img/revert-1.png)\n\n2. Navigate to the [AWX Tags Page](https://github.com/ansible/awx/tags) and delete the AWX Tag that got created by the Github Actions Workflow from when you originally tried to release AWX. You need delete the release in step 1 before you can do this step. The tag must not be tied to a release if you want to delete a tag.\n\n![Tag-Revert-1-Image](img/tag-revert-1.png)\n[comment]: <> (Need an image here for actually deleting an orphaned tag, place here during next release)\n\n3. Navigate to the [AWX Operator Release Page]() and delete the AWX-Operator release that needs to be removed.\n\n![Revert-2-Image](img/revert-2.png)\n\n4. Navigate to [quay.io](https://quay.io/repository/ansible/awx?tag=latest&tab=tags) and delete the published AWX image(s) and tags.\n\n5. Navigate to [quay.io](https://github.com/ansible/awx-operator/releases) and delete the published AWX Operator image(s) and tags.\n\n6. Navigate to the [Ansible Galaxy Collections](https://galaxy.ansible.com/awx/awx) website and remove the published AWX collection with the bad tag.\n\n7. Navigate to the [PyPi](https://pypi.org/project/awxkit/#history) and delete the bad AWX tag and release that got published.\n\n8. [Restart the Release Process](#releasing-awx-and-awx-operator)\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Icons for AWX API Documentation\nDESCRIPTION: SVG symbol definitions for UI elements including locked/unlocked states, close buttons, arrows, and navigation controls. These icons are used throughout the API documentation interface.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/api_ref.rst#2025-04-22_snippet_0\n\nLANGUAGE: svg\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"position:absolute;width:0;height:0\">\n      <defs>\n        <symbol viewBox=\"0 0 20 20\" id=\"unlocked\">\n              <path d=\"M15.8 8H14V5.6C14 2.703 12.665 1 10 1 7.334 1 6 2.703 6 5.6V6h2v-.801C8 3.754 8.797 3 10 3c1.203 0 2 .754 2 2.199V8H4c-.553 0-1 .646-1 1.199V17c0 .549.428 1.139.951 1.307l1.197.387C5.672 18.861 6.55 19 7.1 19h5.8c.549 0 1.428-.139 1.951-.307l1.196-.387c.524-.167.953-.757.953-1.306V9.199C17 8.646 16.352 8 15.8 8z\"></path>\n        </symbol>\n        <symbol viewBox=\"0 0 20 20\" id=\"locked\">\n          <path d=\"M15.8 8H14V5.6C14 2.703 12.665 1 10 1 7.334 1 6 2.703 6 5.6V8H4c-.553 0-1 .646-1 1.199V17c0 .549.428 1.139.951 1.307l1.197.387C5.672 18.861 6.55 19 7.1 19h5.8c.549 0 1.428-.139 1.951-.307l1.196-.387c.524-.167.953-.757.953-1.306V9.199C17 8.646 16.352 8 15.8 8zM12 8H8V5.199C8 3.754 8.797 3 10 3c1.203 0 2 .754 2 2.199V8z\"/>\n        </symbol>\n        <symbol viewBox=\"0 0 20 20\" id=\"close\">\n          <path d=\"M14.348 14.849c-.469.469-1.229.469-1.697 0L10 11.819l-2.651 3.029c-.469.469-1.229.469-1.697 0-.469-.469-.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-.469-.469-.469-1.228 0-1.697.469-.469 1.228-.469 1.697 0L10 8.183l2.651-3.031c.469-.469 1.228-.469 1.697 0 .469.469.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c.469.469.469 1.229 0 1.698z\"/>\n        </symbol>\n        <symbol viewBox=\"0 0 20 20\" id=\"large-arrow\">\n          <path d=\"M13.25 10L6.109 2.58c-.268-.27-.268-.707 0-.979.268-.27.701-.27.969 0l7.83 7.908c.268.271.268.709 0 .979l-7.83 7.908c-.268.271-.701.27-.969 0-.268-.269-.268-.707 0-.979L13.25 10z\"/>\n        </symbol>\n        <symbol viewBox=\"0 0 20 20\" id=\"large-arrow-down\">\n          <path d=\"M17.418 6.109c.272-.268.709-.268.979 0s.271.701 0 .969l-7.908 7.83c-.27.268-.707.268-.979 0l-7.908-7.83c-.27-.268-.27-.701 0-.969.271-.268.709-.268.979 0L10 13.25l7.418-7.141z\"/>\n        </symbol>\n        <symbol viewBox=\"0 0 24 24\" id=\"jump-to\">\n          <path d=\"M19 7v4H5.83l3.58-3.59L8 6l-6 6 6 6 1.41-1.41L5.83 13H21V7z\"/>\n        </symbol>\n        <symbol viewBox=\"0 0 24 24\" id=\"expand\">\n          <path d=\"M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z\"/>\n        </symbol>\n      </defs>\n    </svg>\n```\n\n----------------------------------------\n\nTITLE: Include API Documentation Template\nDESCRIPTION: Template include directive that references the sub list create API view documentation.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/workflow_job_template_workflow_nodes_list.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include \"api/sub_list_create_api_view.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Testing Corruption Scenarios in Ansible AWX\nDESCRIPTION: Python scripts used to simulate corruption similar to that caused by faulty backup/restore processes. These scripts are for testing purposes only and should not be used in production environments.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/scripts/ig-hotfix/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Content of scenarios/test*.py not provided in the input\n```\n\n----------------------------------------\n\nTITLE: Including Job Events List API Documentation in Markdown\nDESCRIPTION: This snippet is a Liquid template include directive that references documentation for the job events list API. When rendered, it would pull in documentation about accessing job events through the Ansible AWX API.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/inventory_update_events_list.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include \"api/job_job_events_list.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Terminating Specific User Sessions with awx-manage\nDESCRIPTION: Command to terminate all sessions for a specific user using the --user flag. This is useful when a user changes role or needs to be logged out specifically.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/awx-manage.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ awx-manage expire_sessions --user example_user\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading for AWX Bulk Actions\nDESCRIPTION: Simple markdown header defining the bulk actions API section\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/bulk_view.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Bulk Actions\n```\n\n----------------------------------------\n\nTITLE: Bulk Delete Response Format in JSON\nDESCRIPTION: Example response showing the deletion confirmation for each host. Returns a map of host IDs to deletion confirmation messages.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/bulk_host_delete_view.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"hosts\": {\n        \"1\": \"The host a1 was deleted\",\n        \"2\": \"The host a2 was deleted\",\n        \"3\": \"The host a3 was deleted\",\n        \"4\": \"The host a4 was deleted\",\n        \"5\": \"The host a5 was deleted\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple File Injectors\nDESCRIPTION: Example showing how to configure credential type injectors to handle multiple file templates and environment variables.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/credentials/custom_credential_types.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"injectors\": {\n        \"file\": {\n            \"template.cert\": \"{{cert}}\",\n            \"template.key\": \"{{key}}\"\n        },\n        \"env\": {\n            \"MY_CERT\": \"{{tower.filename.cert}}\",\n            \"MY_KEY\": \"{{tower.filename.key}}\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite Query for Profile Analysis\nDESCRIPTION: SQLite commands to analyze recorded SQL query profiles, showing schema definition and example query to find slowest queries.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/debugging/debugging_misc.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n$ sqlite3 -column -header /var/log/tower/profile/uwsgi.sqlite\nsqlite> .schema queries\nCREATE TABLE queries (\n    id INTEGER PRIMARY KEY,\n    version TEXT,             # the AWX version\n    pid INTEGER,              # the pid of the process\n    stamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n    argv REAL,                # argv of the process\n    time REAL,                # time to run the query (in seconds)\n    sql TEXT,                 # the actual query\n    explain TEXT,             # EXPLAIN VERBOSE ... of the query\n    bt TEXT                   # python stack trace that led to the query running\n);\nsqlite> SELECT time, sql FROM queries ORDER BY time DESC LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides a template for the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the copyright year and owner, as well as the full text of the license notice.\nSOURCE: https://github.com/ansible/awx/blob/devel/licenses/opentelemetry-exporter-otlp-proto-http.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Extending Django Template for Schedules API Sub List Create View\nDESCRIPTION: This template extends the base sub_list_create_api_view.md template and includes schedule-specific functionality through the _schedule_list_common.md partial template in the post_create block.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/project_schedules_list.md#2025-04-22_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% extends \"api/sub_list_create_api_view.md\" %}\n\n{% block post_create %}\n{% include \"api/_schedule_list_common.md\" %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tower CLI for Integration Testing\nDESCRIPTION: Example configuration file (~/.tower_cli.cfg) for Tower CLI, used in integration testing. This file contains connection details for the AWX instance.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/tools/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n[general]\nhost = https://localhost:8043/\nverify_ssl = false\nusername = admin\npassword = password\n```\n\n----------------------------------------\n\nTITLE: Custom JQ Filtering in AWX\nDESCRIPTION: Example of using JQ to custom format AWX output. Requires the jq Python package to be installed. Shows how to extract and combine job name and status fields.\nSOURCE: https://github.com/ansible/awx/blob/devel/awxkit/awxkit/cli/docs/source/output.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nawx jobs list \\\n    -f jq --filter '.results[] | .name + \" is \" + .status'\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom AWX Node Cluster\nDESCRIPTION: Command to create a custom AWX node cluster with specific node types and counts. This allows for setting up a development environment with a specific configuration of control, hybrid, and execution nodes.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nMAIN_NODE_TYPE=control EXECUTION_NODE_COUNT=2 COMPOSE_TAG=devel make docker-compose\n```\n\n----------------------------------------\n\nTITLE: Displaying Script Usage Help (Bash/Python)\nDESCRIPTION: Executes the `generate-sheet.py` Python script with the `-h` flag using the Python interpreter. This command displays the script's help message, outlining available command-line arguments, options, and general usage instructions.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/community-bugscrub/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython generate-sheet.py -h\n```\n\n----------------------------------------\n\nTITLE: AWX Test Environment Structure\nDESCRIPTION: Directory structure showing the different test environments and their requirements in the AWX project's main tests folder\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/main/tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n - `functional/` - requires a test database and no other services running\n - `live/` - must run in `tools_awx_1` container launched by `make docker-compose`\n - `unit/` - does not require a test database or any active services\n```\n\n----------------------------------------\n\nTITLE: Job Template Related Fields Response\nDESCRIPTION: Example API response showing credential-related fields in job template details.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/credentials/multi_credential_assignment.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"related\": {\n        \"credentials\": \"/api/v2/job_templates/5/credentials/\",\n        \"extra_credentials\": \"/api/v2/job_templates/5/extra_credentials/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Team Role Association Template\nDESCRIPTION: Template code for POST endpoint documentation that describes how to add or remove roles from a team, including required and optional parameters.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/team_roles_list.md#2025-04-22_snippet_1\n\nLANGUAGE: django-template\nCODE:\n```\n{% ifmeth POST %}\n# Associate Roles with this Team:\n\nMake a POST request to this resource to add or remove a role from this team. The following fields may be modified:\n\n   * `id`: The Role ID to add to the team. (int, required)\n   * `disassociate`: Provide if you want to remove the role. (any value, optional)\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Running Migration Playbook for AWX Data in Bash\nDESCRIPTION: This command runs the migrate.yml playbook to migrate AWX data from a local Docker installation to the new postgresql container. It sets the necessary variables for migration, including the postgres data directory and old docker compose directory.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/docs/data_migration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ansible-playbook  -i tools/docker-compose/inventory tools/docker-compose/ansible/migrate.yml -e \"migrate_local_docker=true\" -e \"postgres_data_dir=~/.awx/pgdocker\" -e \"old_docker_compose_dir=~/.awx/awxcompose\"\n```\n\n----------------------------------------\n\nTITLE: Specifying PUT Request Requirements in Django Template\nDESCRIPTION: This snippet provides additional instructions specific to PUT requests, indicating that all fields should be included in the request.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/retrieve_update_api_view.md#2025-04-22_snippet_2\n\nLANGUAGE: django\nCODE:\n```\n{% ifmeth PUT %}\nFor a PUT request, include **all** fields in the request.\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: AWX Configuration Register Function Signature\nDESCRIPTION: Shows the full function signature for the register function used to register individual AWX configuration settings. This function is the main API endpoint for adding new configuration options.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/tower_configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nregister(\n    setting,\n    field_class=None,\n    **field_related_kwargs,\n    category_slug=None,\n    category=None,\n    depends_on=None,\n    placeholder=rest_framework.fields.empty,\n    encrypted=False,\n    defined_in_file=False,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in RST for AWX Contributor's Guide\nDESCRIPTION: This RST code snippet defines the table of contents for the AWX Contributor's Guide. It specifies the depth of the table, numbering, and the files to be included in the guide.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/contributor/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :numbered:\n\n   intro\n   communication\n   setting_up\n   work_items\n   report_issues\n```\n\n----------------------------------------\n\nTITLE: Installing Setuptools Package\nDESCRIPTION: Installs the setuptools Python package required for documentation development.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/contributor/setting_up.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip3 install setuptools\n```\n\n----------------------------------------\n\nTITLE: Creating Symlink for Editable Dependency Using Relative Path in Bash\nDESCRIPTION: Creates a symlink to an editable dependency (ansible-runner) using a relative path, allowing it to be mounted and installed in the Docker Compose environment.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/editable_dependencies/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nln -s ../ansible-runner tools/docker-compose/editable_dependencies/\n```\n\n----------------------------------------\n\nTITLE: Including API List View Documentation in Markdown\nDESCRIPTION: This snippet includes the content of the 'api/list_api_view.md' file, which likely contains documentation for the API list view.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/schedule_list.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include \"api/list_api_view.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Including Schedule Detail Documentation in Markdown\nDESCRIPTION: This snippet includes the content of the 'api/_schedule_detail.md' file, which contains detailed documentation for schedule-related API endpoints.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/schedule_list.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include \"api/_schedule_detail.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Installing Tox for Documentation Building\nDESCRIPTION: Installs the tox package which is used to build the documentation locally.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/contributor/setting_up.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip3 install tox\n```\n\n----------------------------------------\n\nTITLE: Verifying Controller Plugin Installation in SOS Report\nDESCRIPTION: This snippet demonstrates the expected output when verifying the installation of the controller plugin for SOS report. It shows that the Ansible Automation Platform controller information plugin is recognized by the system.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/sosreport/TESTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# sosreport -l | grep controller\n controller           Ansible Automation Platform controller information\n```\n\n----------------------------------------\n\nTITLE: Analyzing Foreign Keys in Postgres for Ansible AWX\nDESCRIPTION: A SQL script that examines Postgres internals to identify foreign keys that cross boundaries established by the old backup/restore logic. This script is not intended for user execution.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/scripts/ig-hotfix/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Content of foreignkeys.sql not provided in the input\n```\n\n----------------------------------------\n\nTITLE: Referencing AWS Inventory Plugin in YAML File\nDESCRIPTION: Example reference to the AWS EC2 inventory plugin from the amazon.aws collection. This is mentioned when explaining how to create a custom inventory file for SCM-based inventory sources with appropriate credentials.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/inventory/inventory_plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\namazon.aws.aws_ec2\n```\n\n----------------------------------------\n\nTITLE: Validating AWX Export Module Parameters in Python\nDESCRIPTION: Validation error message indicating that a parameter is documented but does not exist in the module. The module requires awxkit dependency for constructing argument specifications.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/tests/sanity/ignore-2.14.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nplugins/modules/export.py validate-modules:nonexistent-parameter-documented\n```\n\n----------------------------------------\n\nTITLE: Running Python Unit Tests in AWX\nDESCRIPTION: Command to run py.test unit tests in the AWX development container to verify code functionality.\nSOURCE: https://github.com/ansible/awx/blob/devel/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n(container)/awx_devel$ make test\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoProgram for AWX CLI\nDESCRIPTION: ReStructuredText directive that configures Sphinx's autoprogram extension to generate documentation from the AWX CLI parser. Sets the program name to 'awx' and maximum depth to 3 levels.\nSOURCE: https://github.com/ansible/awx/blob/devel/awxkit/awxkit/cli/docs/source/reference.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoprogram:: awxkit.cli.sphinx:parser\n    :prog: awx\n    :maxdepth: 3\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template (Plaintext)\nDESCRIPTION: This is the standard boilerplate text recommended by the Apache License 2.0 appendix for inclusion in source files. Users should replace the bracketed placeholders '[yyyy]' and '[name of copyright owner]' with the actual year and copyright holder's name. This notice asserts the work is licensed under Apache 2.0 and disclaims warranties. It should typically be enclosed in the appropriate comment syntax for the specific file format.\nSOURCE: https://github.com/ansible/awx/blob/devel/licenses/propcache.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for Root Resource Listing in Ansible AWX\nDESCRIPTION: A Django/Jinja template that conditionally renders documentation for GET requests to list root-level resources associated with a parent model. The template uses variables like model_verbose_name_plural and parent_model_verbose_name to customize the documentation based on the specific model relationships being documented.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/inventory_root_groups_list.md#2025-04-22_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% ifmeth GET %}\n# List Root {{ model_verbose_name_plural|title }} for {{ parent_model_verbose_name|title|anora }}:\n\nMake a GET request to this resource to retrieve a list of root (top-level)\n{{ model_verbose_name_plural }} associated with this\n{{ parent_model_verbose_name }}.\n\n{% include \"api/_list_common.md\" %}\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Inventory Configuration\nDESCRIPTION: A sample inventory file defining hosts organized into 'tower' and 'postgres' groups that will be used in the playbook examples.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/job_events.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# inventory\n[tower]\nhostA\nhostB\n\n[postgres]\nhostC\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText 404 Page Configuration\nDESCRIPTION: RST markup for a 404 error page that includes page title, image reference, and formatted links to alternative AWX documentation and community resources.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/404.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:orphan:\n\n******\nOh no!\n******\n\n.. image:: images/cow.png\n   :alt: Cowsay 404\n```\n\n----------------------------------------\n\nTITLE: Initializing Swagger UI for AWX API Documentation\nDESCRIPTION: JavaScript code that initializes and configures the Swagger UI interface for the AWX API documentation. Includes custom click handling, sorting of API operations, and UI customization.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/api_ref.rst#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n      $('head').append('<link rel=\"stylesheet\" href=\"../_static/swagger-ui.css\" type=\"text/css\"></link>');\n      $('head').append('<link rel=\"stylesheet\" href=\"../_static/awx-rest-api.css\" type=\"text/css\"></link>');\n      $('#swagger-ui').on('click', function(e) {\n        // By default, swagger-ui has a show/hide toggle for headers, and\n        // there's no way to turn it off; this code intercepts the click event\n        // higher in the DOM and disables it\n        var header = $(e.target).closest('.opblock-tag');\n            anchor = header.find('a[href]').attr('href');\n            if (anchor) {\n                window.location.hash = anchor.replace(' ', '_');\n                e.stopPropagation();\n                return false;\n            }\n        return true;\n      });\n\n      const ui = SwaggerUIBundle({\n        spec: {{SPEC}},\n        dom_id: '#swagger-ui',\n        deepLinking: true,\n        presets: [\n          SwaggerUIBundle.presets.apis,\n          SwaggerUIStandalonePreset\n        ],\n        operationsSorter: function(a, b){\n            // sort alphabetically by path name first, then sort by method name\n            var method_order = [\n                'get', 'post', 'put', 'patch', 'delete'\n            ];\n            var compared = a.get(\"path\").localeCompare(b.get(\"path\"));\n            if(compared == 0){\n                return (\n                    method_order.indexOf(a.get('method')) -\n                    method_order.indexOf(b.get('method'))\n                );\n            }\n            return compared;\n        },\n        layout: \"StandaloneLayout\"\n      });\n      window.ui = ui;\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample GPL License Header for Source Files\nDESCRIPTION: A template for the license header that should be included at the beginning of each source file of a GPL-licensed program. It includes placeholders for program information, copyright statement, and basic license terms.\nSOURCE: https://github.com/ansible/awx/blob/devel/licenses/uWSGI.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n```\n\n----------------------------------------\n\nTITLE: Deleting AWX Control Plane Pod in OpenShift\nDESCRIPTION: This Bash command deletes the AWX control plane pod in an OpenShift environment, triggering automatic respawn.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/development/kind.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\noc delete pod -l app.kubernetes.io/component=awx\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides a template for the boilerplate notice to be included when applying the Apache License 2.0 to a project. It includes placeholders for the year and copyright owner's name, as well as the standard license text and link to the full license.\nSOURCE: https://github.com/ansible/awx/blob/devel/licenses/importlib-resources.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin (DCO) Version 1.1 Text\nDESCRIPTION: The full text of the Developer Certificate of Origin version 1.1, which defines the terms contributors agree to when signing off on commits. It covers rights to submit code, modifications of existing work, and acknowledgment that contributions are public records.\nSOURCE: https://github.com/ansible/awx/blob/devel/DCO_1_1.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: GET Response from Relaunch Endpoint with No Failed Hosts\nDESCRIPTION: Example JSON response from a GET request to the relaunch endpoint when there are no failed hosts. A subsequent POST request specifying 'failed' hosts would be rejected with a 400-level status code.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/retry_by_status.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"passwords_needed_to_start\": [],\n    \"retry_counts\": {\n        \"all\": 30,\n        \"failed\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Workflow Job Notification Body in AWX\nDESCRIPTION: This snippet demonstrates the format of a notification body sent by a workflow job in AWX. It includes the status of the workflow job itself and the status of all its spawned jobs.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/workflow.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nWorkflow job summary:\n\n- node #141 spawns no job.\n- node #139 spawns job #212, \"foo\", which finished with status successful.\n- node #140 spawns job #213, \"bar\", which finished with status failed.\n...\n```\n\n----------------------------------------\n\nTITLE: Running Logstash Container with Docker Compose in AWX\nDESCRIPTION: Command to run the Logstash container by adding an override file to the docker-compose target. It uses the 'devel' tag for the compose file.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/docs/logstash.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCOMPOSE_OPTS=\"-f tools/docker-compose/logstash-override.yaml\" COMPOSE_TAG=devel make docker-compose\n```\n\n----------------------------------------\n\nTITLE: Enabling Editable Dependencies via Environment Variable in Bash\nDESCRIPTION: Sets the EDITABLE_DEPENDENCIES environment variable to true, enabling editable dependencies for AWX development.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/editable_dependencies/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport EDITABLE_DEPENDENCIES=true\n```\n\n----------------------------------------\n\nTITLE: Unsealing HashiVault using Ansible Playbook\nDESCRIPTION: This command runs an Ansible playbook to unseal the HashiVault container after it has been started. It also displays the root token for login.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nansible-playbook tools/docker-compose/ansible/unseal_vault.yml\n```\n\n----------------------------------------\n\nTITLE: Examining Timing Results and Using the AWXProfiler Class\nDESCRIPTION: Demonstrates how to examine timing output files and how to use the AWXProfiler class directly for more control over profiling code segments.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/debugging/debugging_misc.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbash-4.4# ls -aln\ntotal 16\ndrwxr-xr-x 2 0 0 4096 Oct 20 12:43 .\ndrwxrwxr-x 1 0 0 4096 Oct 20 12:43 ..\n-rw-r--r-- 1 0 0   61 Oct 20 12:43 2.002178-seconds-my_task_manager-ab720a2f-4624-47d0-b897-8549fe7e8c99.time\n-rw-r--r-- 1 0 0   60 Oct 20 12:43 2.00228-seconds-my_task_manager-e8a901be-9cdb-4ffc-a34a-a6bcb4266e7c.time\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom awx.main.utils.profiling import AWXProfiler\n\nprof = AWXProfiler(\"hello_world\")\nprof.start()\n'''\ncode to profile here\n'''\nprof.stop()\n\n\n# Note that start() and stop() can be reused. An new profile file will be output.\nprof.start()\n'''\nmore code to profile\n'''\nprof.stop()\n```\n\n----------------------------------------\n\nTITLE: Non-Test Folders Structure\nDESCRIPTION: List of folders in the project that should not contain tests, along with their intended purposes\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/main/tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n - `data/` - just files other tests use\n - `docs/` - utilities for schema generation\n - `factories/` - general utilities\n - `manual/` - python files to be ran directly\n```\n\n----------------------------------------\n\nTITLE: Retrieving Job Cancelation Status with GET Method in Ansible AWX\nDESCRIPTION: Documentation for the GET endpoint that determines if a job can be canceled. The response includes a boolean field 'can_cancel' indicating whether the job cancelation is possible.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/job_cancel.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% ifmeth GET %}\n# Determine if a Job can be canceled\n\nMake a GET request to this resource to determine if the job can be canceled.\nThe response will include the following field:\n\n* `can_cancel`: Indicates whether this job can be canceled (boolean, read-only)\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Event List API Response Structure with Limit (JSON)\nDESCRIPTION: Shows the simplified JSON response structure when using the 'limit' parameter, where the 'previous' and 'next' pagination keys are omitted.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/job_job_events_list.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"results\": [\n            ...\n        ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a New Sublist Item in JSON\nDESCRIPTION: This snippet shows the structure for creating a new sublist item associated with a parent model. It includes placeholders for fields that should be filled with actual data.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/sub_list_create_api_view.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 123,\n    \"disassociate\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides the standard boilerplate notice to apply the Apache License 2.0 to a project file. It includes placeholders for copyright year and owner, along with standard licensing text and reference to the Apache License 2.0 requirements.\nSOURCE: https://github.com/ansible/awx/blob/devel/licenses/awx-plugins.interfaces.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License Text for IRC Package\nDESCRIPTION: This snippet shows the full text of the MIT License as applied to the IRC package. It grants permission to use, modify, and distribute the software, while also providing a disclaimer of warranty.\nSOURCE: https://github.com/ansible/awx/blob/devel/licenses/jaraco-stream.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# As listed on https://pypi.python.org/pypi/irc\n\nThe MIT License (MIT)\nCopyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Listing Team Roles Template\nDESCRIPTION: Template code for GET endpoint documentation that describes how to retrieve roles associated with a team.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/team_roles_list.md#2025-04-22_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% ifmeth GET %}\n# List Roles for a Team:\n\nMake a GET request to this resource to retrieve a list of roles associated with the selected team.\n\n{% include \"api/_list_common.md\" %}\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License Text for IRC Package\nDESCRIPTION: This snippet shows the full text of the MIT License as applied to the IRC package. It outlines the permissions granted to users of the software, including rights to use, modify, and distribute, as well as the conditions and limitations of the license.\nSOURCE: https://github.com/ansible/awx/blob/devel/licenses/jaraco-text.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# As listed on https://pypi.python.org/pypi/irc\n\nThe MIT License (MIT)\nCopyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License Text for IRC Package\nDESCRIPTION: This snippet shows the full text of the MIT License as applied to the IRC package. It grants permission to use, modify, and distribute the software, while providing a disclaimer of warranty and limiting liability.\nSOURCE: https://github.com/ansible/awx/blob/devel/licenses/irc.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# As listed on https://pypi.org/project/irc/\n\nThe MIT License (MIT)\nCopyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Logging for Ansible AWX\nDESCRIPTION: This YAML configuration sets up the test logging parameters for Ansible AWX. It likely defines logging levels, formats, and handlers for use during testing of the AWX system.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/setting_logging_test.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Test Logging Configuration\n```\n\n----------------------------------------\n\nTITLE: Canceling a Job with POST Method in Ansible AWX\nDESCRIPTION: Documentation for the POST endpoint that cancels a pending or running job. The response status code will be 202 if successful, or 405 if the job cannot be canceled.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/job_cancel.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% ifmeth POST %}\n# Cancel a Job\nMake a POST request to this resource to cancel a pending or running job.  The\nresponse status code will be 202 if successful, or 405 if the job cannot be\ncanceled.\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Querying Job Statistics with Period Parameter\nDESCRIPTION: Demonstrates how to filter job statistics by time period using the period query parameter. Valid values include month, week, two_weeks, or day.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/dashboard_jobs_graph_view.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n?period=month\n```\n\n----------------------------------------\n\nTITLE: Fetching Secrets from HashiCorp Vault in Python\nDESCRIPTION: Example of programmatically fetching secrets from HashiCorp Vault using the hashivault_kv_plugin. This can be used to compose database connection strings or other sensitive configurations.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/credentials/credential_plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom awx.main.credential_plugins import hashivault\nhashivault.hashivault_kv_plugin.backend(\n    url='https://hcv.example.org',\n    token='some-valid-token',\n    api_version='v2',\n    secret_path='/path/to/secret',\n    secret_key='dbpass'\n)\n```\n\n----------------------------------------\n\nTITLE: Including API Sublist Create View Documentation in Markdown\nDESCRIPTION: This snippet includes external documentation for creating sublists in the API. It uses a Markdown include directive to pull in content from another file.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/sub_list_destroy_api_view.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include \"api/sub_list_create_api_view.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Multi-field Sorting in API Requests in HTTP\nDESCRIPTION: Demonstrates how to sort API results by multiple fields by separating field names with commas in the order_by parameter. This enables primary and secondary sort orders.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/sorting.rst#2025-04-22_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nhttp://<server name>/api/v2/model_verbose_name_plural?order_by={{ order_field }},some_other_field\n```\n\n----------------------------------------\n\nTITLE: Importing Inventory with awx-manage\nDESCRIPTION: Command for synchronizing an AWX inventory object with a text-based inventory file or dynamic inventory script. Requires specifying either inventory-id or inventory-name, and the path to the Ansible inventory source.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/awx-manage.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nawx-manage inventory_import --source=/ansible/inventory/ --inventory-id=1\n```\n\n----------------------------------------\n\nTITLE: Including Job Events Documentation Template in Jinja2\nDESCRIPTION: Template directive that includes the API documentation for listing job events from a separate Markdown file located at api/job_job_events_list.md\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/project_update_events_list.md#2025-04-22_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{% include \"api/job_job_events_list.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Directive on Cryptographic Libraries in Ansible AWX\nDESCRIPTION: A comment directive indicating that new cryptographic libraries should not be added to the project. This likely serves as a reminder or policy statement for developers working on the codebase.\nSOURCE: https://github.com/ansible/awx/blob/devel/requirements/requirements_tower_uninstall.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrsa\t# stop adding new crypto libs\n```\n\n----------------------------------------\n\nTITLE: Running Health Check Command for Execution Nodes in AWX\nDESCRIPTION: Command used to perform health checks on execution nodes through the receptor mesh. This ansible-runner command returns worker information used to update instance health data.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/instance_health_check.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nansible-runner worker --worker-info\n```\n\n----------------------------------------\n\nTITLE: Extending API Sub List Create View with Schedule List in Django Template\nDESCRIPTION: This snippet extends an existing API view template and includes a common schedule list template within a specific block. It demonstrates template inheritance and content inclusion in Django.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/inventory_source_schedules_list.md#2025-04-22_snippet_0\n\nLANGUAGE: Django Template\nCODE:\n```\n{% extends \"api/sub_list_create_api_view.md\" %}\n\n{% block post_create %}\n{% include \"api/_schedule_list_common.md\" %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Sorting API Results in Reverse Order in HTTP\nDESCRIPTION: Shows how to sort API results in reverse (descending) order by prefixing the field name with a dash (-) in the order_by parameter.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/sorting.rst#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nhttp://<server name>/api/v2/model_verbose_name_plural?order_by=-{{ order_field }}\n```\n\n----------------------------------------\n\nTITLE: Basic Searching in AWX API\nDESCRIPTION: Demonstrates how to use the search query string parameter to perform a non-case-sensitive search within all designated text fields of a model in the AWX API.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/searching.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttp://<server name>/api/v2/model_verbose_name?search=findme\n```\n\n----------------------------------------\n\nTITLE: Associating/Disassociating Extra Credentials (Legacy)\nDESCRIPTION: Legacy API endpoints for managing extra credentials in job templates. This method is now deprecated.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/credentials/multi_credential_assignment.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/v2/job_templates/N/extra_credentials {'associate': true, 'id': Z}\nPOST /api/v2/job_templates/N/extra_credentials {'disassociate': true, 'id': Z}\n```\n\n----------------------------------------\n\nTITLE: Parsing Host Count Data from Ansible AWX Inventory Statistics\nDESCRIPTION: Shows the format of the returned data for host counts over time. Each element in the 'hosts' array contains an epoch timestamp in seconds and the number of hosts at that moment.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/dashboard_inventory_graph_view.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"hosts\": [\n    [\n        1402808400.0, \n        86743\n    ], ...]\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Request Example\nDESCRIPTION: Shows how to make an API request using Basic Authentication with curl, including username and password credentials.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/authentication.rst#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncurl -X GET --user 'user:password' https://<awx-host>/api/v2/credentials -k -L\n```\n\n----------------------------------------\n\nTITLE: Specifying PATCH Request Requirements in Django Template\nDESCRIPTION: This snippet provides additional instructions specific to PATCH requests, indicating that only the fields being modified should be included in the request.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/api/templates/api/retrieve_update_api_view.md#2025-04-22_snippet_3\n\nLANGUAGE: django\nCODE:\n```\n{% ifmeth PATCH %}\nFor a PATCH request, include only the fields that are being modified.\n{% endifmeth %}\n```\n\n----------------------------------------\n\nTITLE: Starting AWX with Minikube\nDESCRIPTION: Commands to start AWX with Minikube for container group testing\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n(host)$minikube start --cpus=4  --memory=8g --addons=ingress\n(host)$ make docker-compose-container-group\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Index Directives\nDESCRIPTION: Sphinx/RST index directives defining documentation reference points for conventions and API-related terms.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/conventions.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. index::\n   single: conventions\n   pair: API; root directory\n   pair: content type; JSON\n```\n\n----------------------------------------\n\nTITLE: Rebuilding UI with Make Command in Bash\nDESCRIPTION: This command forces a rebuild of the UI using the make utility with the -B flag.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx/ui/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake -B ui\n```\n\n----------------------------------------\n\nTITLE: Upgrading pip to Latest Version\nDESCRIPTION: Updates pip3 to the latest version to prevent installation issues.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/contributor/setting_up.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip3 install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Base API Endpoint Format\nDESCRIPTION: The base URL format for accessing the AWX REST API interface through a web browser.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/rest_api/browseable.rst#2025-04-22_snippet_0\n\nLANGUAGE: rest\nCODE:\n```\nhttp://<server name>/api/\n```\n\n----------------------------------------\n\nTITLE: Verifying Setuptools Installation\nDESCRIPTION: Checks if setuptools has been properly installed by attempting to import it in Python.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/docsite/rst/contributor/setting_up.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython3 -c 'import setuptools'\n```\n\n----------------------------------------\n\nTITLE: AWX Project Cache Final Path\nDESCRIPTION: Example path showing the final location of cached project content after staging, including the cache ID.\nSOURCE: https://github.com/ansible/awx/blob/devel/docs/collections.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n/var/lib/awx/projects/.__awx_cache/_42__project_name/63\n```\n\n----------------------------------------\n\nTITLE: Installing Script Dependencies using Pip (Bash)\nDESCRIPTION: Installs the necessary Python packages listed in the `requirements.txt` file using the pip package manager. This command must be run in a terminal before executing the Python script to ensure all dependencies are met.\nSOURCE: https://github.com/ansible/awx/blob/devel/tools/community-bugscrub/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Validating Module Parameters with AWXkit Dependency\nDESCRIPTION: Module validation comment indicating that parameter documentation requires awxkit for generating argument specifications. This appears to be a comment in a validation system for Ansible AWX module parameters.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/tests/sanity/ignore-2.16.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nplugins/modules/export.py validate-modules:nonexistent-parameter-documented  # needs awxkit to construct argspec\n```\n\n----------------------------------------\n\nTITLE: Validating AWX Export Module Parameters with Python\nDESCRIPTION: Code location reference indicating that the export.py module in plugins/modules path requires awxkit to properly construct and validate the argument specification.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/tests/sanity/ignore-2.17.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nplugins/modules/export.py validate-modules:nonexistent-parameter-documented  # needs awxkit to construct argspec\n```\n\n----------------------------------------\n\nTITLE: Sample Output of AWX Integration Test Execution\nDESCRIPTION: This snippet shows the expected console output when running an integration test for the AWX collection. It demonstrates the various tasks being executed and their statuses.\nSOURCE: https://github.com/ansible/awx/blob/devel/awx_collection/TESTING.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n$ ansible-playbook run_it.yml\n\nPLAY [Run Integration Test] *******************************************************************************\n\nTASK [include_tasks] **************************************************************************************\nincluded: /home/student1/awx/awx_collection/tests/integration/targets/demo_data/tasks/main.yml for localhost\n\nTASK [Assure that default organization exists] *************************************************************\n[WARNING]: You are using the awx version of this collection but connecting to Red Hat Ansible Tower\nok: [localhost]\n\nTASK [HACK - delete orphaned projects from preload data where organization deleted] ************************\n\nTASK [Assure that demo project exists] *********************************************************************\nchanged: [localhost]\n\nTASK [Assure that demo inventory exists] *******************************************************************\nchanged: [localhost]\n\nTASK [Create a Host] ***************************************************************************************\nchanged: [localhost]\n\nTASK [Assure that demo job template exists] *****************************************************************\nchanged: [localhost]\n\nPLAY RECAP **************************************************************************************\nlocalhost: ok=6    changed=4    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: This template is the standard boilerplate text recommended by the Apache License 2.0 appendix. It should be included in source files, typically within comments, after replacing the placeholders `[yyyy]` with the copyright year and `[name of copyright owner]` with the actual owner's name. It declares the work is licensed under Apache 2.0 and disclaims warranties.\nSOURCE: https://github.com/ansible/awx/blob/devel/licenses/s3transfer.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Full MIT License Text for IRC Project\nDESCRIPTION: The complete MIT License text that applies to the IRC project. It grants users the rights to use, modify, and distribute the software freely, while protecting the copyright holders from liability.\nSOURCE: https://github.com/ansible/awx/blob/devel/licenses/jaraco-collections.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# As listed on https://pypi.python.org/pypi/irc\n\nThe MIT License (MIT)\nCopyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```"
  }
]