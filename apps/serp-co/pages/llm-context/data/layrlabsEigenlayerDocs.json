[
  {
    "owner": "layr-labs",
    "repo": "eigenlayer-docs",
    "content": "TITLE: Operator Registration and Task Handling in TypeScript\nDESCRIPTION: Off-chain operator code demonstrating the key functions for operator participation in the AVS, including registration with EigenLayer core contracts and the HelloWorld AVS, monitoring for new tasks, and responding to tasks with the required signatures.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/get-started/quickstart.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Register Operator to EigenLayer core contracts and Hello World AVS\nconst registerOperator = async () => {\n    \n    // Registers as an Operator in EigenLayer.\n    try {\n        const tx1 = await delegationManager.registerAsOperator({\n            __deprecated_earningsReceiver: await wallet.address,\n            delegationApprover: \"0x0000000000000000000000000000000000000000\",\n            stakerOptOutWindowBlocks: 0\n        }, \"\");\n        await tx1.wait();\n        console.log(\"Operator registered to Core EigenLayer contracts\");\n    }\n    \n    ...\n    \n    \n    const tx2 = await ecdsaRegistryContract.registerOperatorWithSignature(\n        operatorSignatureWithSaltAndExpiry,\n        wallet.address\n    );\n    await tx2.wait();\n    console.log(\"Operator registered on AVS successfully\");\n};\n\n// Listen for new task events on-chain\nconst monitorNewTasks = async () => {\n\n    helloWorldServiceManager.on(\"NewTaskCreated\", async (taskIndex: number, task: any) => {\n        console.log(`New task detected: Hello, ${task.name}`);\n        await signAndRespondToTask(taskIndex, task.taskCreatedBlock, task.name);\n    });\n    console.log(\"Monitoring for new tasks...\");\n};\n\n\n\n// Generate Hello, Name message string\nconst signAndRespondToTask = async (taskIndex: number, taskCreatedBlock: number, taskName: string) => {\n    const message = `Hello, ${taskName}`;\n    const messageHash = ethers.solidityPackedKeccak256([\"string\"], [message]);\n    const messageBytes = ethers.getBytes(messageHash);\n    const signature = await wallet.signMessage(messageBytes);\n\n    console.log(`Signing and responding to task ${taskIndex}`);\n\n    const operators = [await wallet.getAddress()];\n    const signatures = [signature];\n    const signedTask = ethers.AbiCoder.defaultAbiCoder().encode(\n        [\"address[]\", \"bytes[]\", \"uint32\"],\n        [operators, signatures, ethers.toBigInt(await provider.getBlockNumber()-1)]\n    );\n\n    const tx = await helloWorldServiceManager.respondToTask(\n        { name: taskName, taskCreatedBlock: taskCreatedBlock },\n        taskIndex,\n        signedTask\n    );\n    await tx.wait();\n    console.log(`Responded to task.`);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Management in AVS Contract\nDESCRIPTION: Core business logic of the HelloWorld AVS including the createNewTask and respondToTask functions. The first creates a new task with a name string, while the second validates and processes operator responses to tasks, verifying signatures and recording results.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/get-started/quickstart.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createNewTask(\n    string memory name\n) external returns (Task memory) {\n    // create a new task struct\n    Task memory newTask;\n    newTask.name = name;\n    newTask.taskCreatedBlock = uint32(block.number);\n\n    // store hash of task on-chain, emit event, and increase taskNum\n    allTaskHashes[latestTaskNum] = keccak256(abi.encode(newTask));\n    emit NewTaskCreated(latestTaskNum, newTask);\n    latestTaskNum = latestTaskNum + 1;\n\n    return newTask;\n}\n\nfunction respondToTask(\n    Task calldata task,\n    uint32 referenceTaskIndex,\n    bytes memory signature\n) external {\n    // check that the task is valid, hasn't been responded to yet, and is being responded in time\n    require(\n        keccak256(abi.encode(task)) == allTaskHashes[referenceTaskIndex],\n        \"supplied task does not match the one recorded in the contract\"\n    );\n    require(\n        allTaskResponses[msg.sender][referenceTaskIndex].length == 0,\n        \"Operator has already responded to the task\"\n    );\n\n    // The message that was signed\n    bytes32 messageHash = keccak256(abi.encodePacked(\"Hello, \", task.name));\n    bytes32 ethSignedMessageHash = messageHash.toEthSignedMessageHash();\n    bytes4 magicValue = IERC1271Upgradeable.isValidSignature.selector;\n    if (!(magicValue == ECDSAStakeRegistry(stakeRegistry).isValidSignature(ethSignedMessageHash,signature))){\n        revert();\n    }\n\n    // updating the storage with task responses\n    allTaskResponses[msg.sender][referenceTaskIndex] = signature;\n\n    // emitting event\n    emit TaskResponded(referenceTaskIndex, task, msg.sender);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Strategies in Contract Deployment Script\nDESCRIPTION: Deployment script that sets up the HelloWorld contracts with quorums and asset strategies. Creates a mock ERC20 token and associated strategy for the AVS, then configures the strategy parameters for the quorum.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/get-started/quickstart.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ntoken = new ERC20Mock();\nhelloWorldStrategy = IStrategy(StrategyFactory(coreDeployment.strategyFactory).deployNewStrategy(token));\n\nquorum.strategies.push(\n    StrategyParams({strategy: helloWorldStrategy, multiplier: 10_000})\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing AVS Contract in Solidity\nDESCRIPTION: The HelloWorldServiceManager contract definition that extends ECDSAServiceManagerBase to inherit core ServiceManager functionality. This implements the required interfaces for an AVS contract to operate within the EigenLayer ecosystem.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/get-started/quickstart.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ncontract HelloWorldServiceManager is ECDSAServiceManagerBase, IHelloWorldServiceManager {\n    using ECDSAUpgradeable for bytes32;\n\n```\n\n----------------------------------------\n\nTITLE: OperatorSlashed Event Structure\nDESCRIPTION: This snippet defines the event emitted when an operator is slashed. It includes information about the operator, operator set, affected strategies, proportions slashed, and a description of the slashing incident.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/build/slashing/implement-slashing.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n/// @notice Emitted when an operator is slashed by an operator set for a strategy\n/// `wadSlashed` is the proportion of the operator's total delegated stake that was slashed\nevent OperatorSlashed(\n    address operator, OperatorSet operatorSet, IStrategy[] strategies, uint256[] wadSlashed, string description\n);\n```\n\n----------------------------------------\n\nTITLE: Setting AVSRegistrar Contract Interface\nDESCRIPTION: The AVSRegistrar contract interface that must be implemented to handle operator registrations and deregistrations. The contract must implement supportsAVS(AVS) returning TRUE for successful registration.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/build/manage-registered-operators.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface IAVSRegistrar {\n    function registerOperator(address operator) external;\n    function deregisterOperator(address operator) external;\n    function supportsAVS(address avs) external view returns (bool);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getRestakeableStrategies for AVS\nDESCRIPTION: Solidity implementation of getRestakeableStrategies function that returns all supported restakeable strategies for the AVS. Used to display available strategies on the UI.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/publish/onboard-avs-dashboard.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getRestakeableStrategies() external view returns (address[] memory) {\n        uint256 quorumCount = registryCoordinator.quorumCount();\n\n        if (quorumCount == 0) {\n            return new address[](0);\n        }\n        \n        uint256 strategyCount;\n        for(uint256 i = 0; i < quorumCount; i++) {\n            strategyCount += stakeRegistry.strategyParamsLength(uint8(i));\n        }\n\n        address[] memory restakedStrategies = new address[](strategyCount);\n        uint256 index = 0;\n        for(uint256 i = 0; i < _registryCoordinator.quorumCount(); i++) {\n            uint256 strategyParamsLength = _stakeRegistry.strategyParamsLength(uint8(i));\n            for (uint256 j = 0; j < strategyParamsLength; j++) {\n                restakedStrategies[index] = address(_stakeRegistry.strategyParamsByIndex(uint8(i), j).strategy);\n                index++;\n            }\n        }\n        return restakedStrategies;\n    }\n```\n\n----------------------------------------\n\nTITLE: Referencing Vetoable Slasher Implementation in Solidity\nDESCRIPTION: This snippet provides a reference to the vetoable slasher example implementation in the EigenLayer middleware repository. It demonstrates how to implement a governance mechanism for reviewing and potentially vetoing slashing requests.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/build/slashing/slashing-veto-committee-design.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nhttps://github.com/Layr-Labs/eigenlayer-middleware/blob/dev/src/slashers/VetoableSlasher.sol\n```\n\n----------------------------------------\n\nTITLE: Defining AVS Metadata JSON Structure for EigenLayer Registration\nDESCRIPTION: This JSON structure defines the required metadata fields for registering an AVS in EigenLayer. It includes the AVS name, website, description, logo URL, and Twitter handle. This format is used when calling the updateAVSMetadataURI function but is not validated on-chain.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/build/register-avs-metadata.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"AVS\",\n    \"website\": \"https.avs.xyz/\",\n    \"description\": \"Some description about\",\n    \"logo\": \"http://github.com/logo.png\",\n    \"twitter\": \"https://twitter.com/avs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AVS Metadata with Operator Sets in JSON\nDESCRIPTION: A JSON template for updating AVS metadata that includes information about multiple Operator Sets. This metadata is used to provide information on the EigenLayer App for Stakers and Operators, and includes details such as AVS name, website, description, and operator set configurations.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/build/manage-operator-sets.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"AVS\",\n    \"website\": \"https.avs.xyz/\",\n    \"description\": \"Some description about\",\n    \"logo\": \"http://github.com/logo.png\",\n    \"twitter\": \"https://twitter.com/avs\",\n    \"operatorSets\": [\n        {\n            \"name\": \"ETH Set\",\n            \"id\": \"1\", \n            \"description\": \"The ETH operatorSet for AVS\",\n            \"software\": [\n                {\n                    \"name\": \"NetworkMonitor\",\n                    \"description\": \"\",\n                    \"url\": \"https://link-to-binary-or-github.com\"\n                },\n                {\n                    \"name\": \"ValidatorClient\",\n                    \"description\": \"\",\n                    \"url\": \"https://link-to-binary-or-github.com\"\n                }\n            ],\n            \"slashingConditions\": [\"Condition A\", \"Condition B\"]\n        },\n        {\n            \"name\": \"EIGEN Set\",\n            \"id\": \"2\", \n            \"description\": \"The EIGEN operatorSet for AVS\",\n            \"software\": [\n                {\n                    \"name\": \"NetworkMonitor\",\n                    \"description\": \"\",\n                    \"url\": \"https://link-to-binary-or-github.com\"\n                },\n                {\n                    \"name\": \"ValidatorClient\",\n                    \"description\": \"\",\n                    \"url\": \"https://link-to-binary-or-github.com\"\n                }\n            ],\n            \"slashingConditions\": [\"Condition A\", \"Condition B\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an Operator with EigenLayer\nDESCRIPTION: This command registers an operator using the previously created configuration file. The ECDSA key is required for registration and must be created or imported beforehand.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator register operator.yaml\n```\n\n----------------------------------------\n\nTITLE: AVS Metadata JSON Structure\nDESCRIPTION: JSON schema for AVS metadata that must be provided when calling updateAVSMetadataURI. Includes fields for name, website, description, logo URL and Twitter handle.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/publish/onboard-avs-dashboard.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"EigenLabs AVS 1\",\n    \"website\": \"https://www.eigenlayer.xyz/\",\n    \"description\": \"This is my 1st AVS\",\n    \"logo\": \"https://raw.githubusercontent.com/layr-labs/eigendata/master/avs/eigenlabs/logo.png\",\n    \"twitter\": \"https://twitter.com/eigenlayer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Operator Configuration Files with EigenLayer CLI\nDESCRIPTION: This command initializes the configuration files needed for operator registration. It creates operator.yaml and metadata.json files which will be used in the registration process.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator config create\n```\n\n----------------------------------------\n\nTITLE: Defining AllocationManager Interface in Solidity\nDESCRIPTION: This code snippet defines the IAllocationManager interface with structures and functions for managing allocations. It includes methods for setting allocation delays, modifying allocations, and clearing deallocation queues.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/eigenlayer/reference/allocation-manager-interface.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface IAllocationManager {\n\n   /**\n    * @notice struct used to modify the allocation of slashable magnitude to an operator set\n    * @param operatorSet the operator set to modify the allocation for\n    * @param strategies the strategies to modify allocations for\n    * @param newMagnitudes the new magnitude to allocate for each strategy to this operator set\n    */\n   struct AllocateParams {\n       OperatorSet operatorSet;\n       IStrategy[] strategies;\n       uint64[] newMagnitudes;\n   }\n\n   /**\n     * @notice Called by the delegation manager OR an operator to set an operator's allocation delay.\n     * This is set when the operator first registers, and is the number of blocks between an operator\n     * allocating magnitude to an operator set, and the magnitude becoming slashable.\n     * @param operator The operator to set the delay on behalf of.\n     * @param delay the allocation delay in blocks\n     */\n    function setAllocationDelay(\n\taddress operator, \n\tuint32 delay\n    ) external;\n\n    /**\n     * @notice Modifies the proportions of slashable stake allocated to an operator set  from a list of strategies\n     * Note that deallocations remain slashable for DEALLOCATION_DELAY blocks therefore when they are cleared they may\n     * free up less allocatable magnitude than initially deallocated.\n     * @param operator the operator to modify allocations for\n     * @param params array of magnitude adjustments for one or more operator sets\n     * @dev Updates encumberedMagnitude for the updated strategies\n     * @dev msg.sender is used as operator\n     */\n    function modifyAllocations(\n\taddress operator, \n\tAllocateParams[] calldata params\n    ) external;\n\n    /**\n     * @notice struct used to modify the allocation of slashable magnitude to an operator set\n     * @param operatorSet the operator set to modify the allocation for\n     * @param strategies the strategies to modify allocations for\n     * @param newMagnitudes the new magnitude to allocate for each strategy to this operator set\n     */\n    struct AllocateParams {\n        OperatorSet operatorSet;\n        IStrategy[] strategies;\n        uint64[] newMagnitudes;\n    }\n\n    /**\n     * @notice This function takes a list of strategies and for each strategy, removes from the deallocationQueue\n     * all clearable deallocations up to max `numToClear` number of deallocations, updating the encumberedMagnitude\n     * of the operator as needed.\n     *\n     * @param operator address to clear deallocations for\n     * @param strategies a list of strategies to clear deallocations for\n     * @param numToClear a list of number of pending deallocations to clear for each strategy\n     *\n     * @dev can be called permissionlessly by anyone\n     */\n    function clearDeallocationQueue(\n        address operator,\n        IStrategy[] calldata strategies,\n        uint16[] calldata numToClear\n    ) external;\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Allocations with EigenLayer CLI\nDESCRIPTION: Shows all current stake allocations for an operator across specified strategies. Helps operators monitor their stake distribution across different operator sets.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-sets.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator allocations show \n\t--network sepolia\n\t--operator-address <operator-address> \n\t--strategy-addresses <comma-separated-strategy-addresses>\n```\n\n----------------------------------------\n\nTITLE: Implementing RegistryCoordinator with AllocationManager hooks in Solidity\nDESCRIPTION: Reference to an example implementation of RegistryCoordinator with the new hooks required for integration with the AllocationManager. This implementation enables the contract to handle callbacks from the AllocationManager and support Operator Sets.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/build/slashing/migrate-to-operatorsets.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nhttps://github.com/Layr-Labs/eigenlayer-middleware/blob/dev/src/SlashingRegistryCoordinator.sol\n```\n\n----------------------------------------\n\nTITLE: Setting Allocation Delay in EigenLayer CLI\nDESCRIPTION: Sets the allocation delay for an operator in the AllocationManager. This delay determines how long it takes for allocation changes to take effect, allowing stakers time to react to changes.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-sets.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator allocations set-delay <flags> <allocation-delay>\n```\n\n----------------------------------------\n\nTITLE: AVS Consumer Task Creation in TypeScript\nDESCRIPTION: Off-chain task generator script that creates new tasks for the HelloWorld AVS by sending transactions to the createNewTask function. This simulates an AVS consumer requesting work to be done by operators.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/get-started/quickstart.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a New Task (a new name to be signed as \"hello, name\")\nasync function createNewTask(taskName: string) {\n  try {\n    // Send a transaction to the createNewTask function\n    const tx = await helloWorldServiceManager.createNewTask(taskName);\n    \n    // Wait for the transaction to be mined\n    const receipt = await tx.wait();\n    \n    console.log(`Transaction successful with hash: ${receipt.hash}`);\n  } catch (error) {\n    console.error('Error sending transaction:', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Claiming Rewards with EigenLayer CLI (Mainnet)\nDESCRIPTION: This command claims rewards for an earner on the Mainnet network using a local keystore file. It specifies the network, RPC URL, earner address, recipient address, keystore path, and token addresses.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/claimrewards/claim-rewards-cli.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bin/eigenlayer rewards claim \\\n  --network mainnet \\\n  --eth-rpc-url <mainnet-eth-rpc-url> \\\n  --earner-address <earner-address> \\\n  --recipient-address <address-to-send-rewards-to> \\\n  --path-to-key-store /path/to/key/store-json \\\n  --token-addresses <comma-separated-list-of-token-addresses> \\\n  --broadcast\n```\n\n----------------------------------------\n\nTITLE: Deploying a New Strategy in EigenLayer\nDESCRIPTION: This code snippet shows how to add a new Strategy to the EigenLayer protocol by invoking the deployNewStrategy function from the StrategyFactory contract.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/build/avs-permissionlesss.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Invoke `StrategyFactory.deployNewStrategy()`.\n* Your Strategy is now available to associate with your AVS.\n```\n\n----------------------------------------\n\nTITLE: Claiming Rewards with EigenLayer CLI (Sepolia)\nDESCRIPTION: This command claims rewards for an earner on the Sepolia network using a local keystore file. It specifies the network, RPC URL, earner address, recipient address, keystore path, and token addresses.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/claimrewards/claim-rewards-cli.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./bin/eigenlayer rewards claim \\\n  --network sepolia \\\n  --eth-rpc-url <sepolia-eth-rpc-url> \\\n  --earner-address <earner-address> \\\n  --recipient-address <address-to-send-rewards-to> \\\n  --path-to-key-store /path/to/key/store-json \\\n  --token-addresses <comma-separated-list-of-token-addresses> \\\n  --broadcast\n```\n\n----------------------------------------\n\nTITLE: Adding Admin Access with PermissionController Functions\nDESCRIPTION: Two-step process for adding an admin that requires first adding a pending admin and then having that pending admin accept the role. Uses the PermissionController.addPendingAdmin and PermissionController.acceptAdmin functions.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/build/uam/dev-add-remove-admins.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nPermissionController.addPendingAdmin()\n```\n\nLANGUAGE: solidity\nCODE:\n```\nPermissionController.acceptAdmin()\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Object for Claiming Rewards in EigenLayer (Bash)\nDESCRIPTION: This command generates a JSON object with arguments to call RewardsCoordinator.processClaim. It requires specifying the network, Ethereum RPC URL, earner address, recipient address, path to key store, and token addresses.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/claimrewards/claim-rewards-smart-contract.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bin/eigenlayer rewards claim \\\n      --network mainnet \\\n      --eth-rpc-url <mainnet-eth-rpc-url> \\\n      --earner-address <earner-address> \\\n      --recipient-address <address-to-send-rewards-to> \\\n      --path-to-key-store /path/to/key/store-json \\\n      --token-addresses <comma-separated-list-of-token-addresses> \\\n      --output-type json\n```\n\n----------------------------------------\n\nTITLE: Slashing Interface and Parameters in AllocationManager\nDESCRIPTION: This snippet shows the interface for the slashing function in the AllocationManager contract, including the SlashingParams struct which defines parameters needed for slashing operations. It specifies how an AVS can slash an operator in a given operator set.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/build/slashing/implement-slashing.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @notice Called by an AVS to slash an operator in a given operator set\n     */\n\n    function slashOperator(\n        address avs,\n        SlashingParams calldata params\n    ) external;\n\n    /**\n     * @notice Struct containing parameters to slashing\n     * @param operator the address to slash\n     * @param operatorSetId the ID of the operatorSet the operator is being slashed on behalf of\n     * @param strategies the set of strategies to slash\n     * @param wadsToSlash the parts in 1e18 to slash, this will be proportional to the operator's\n     * slashable stake allocation for the operatorSet\n     * @param description the description of the slashing provided by the AVS for legibility\n     */\n    struct SlashingParams {\n        address operator;\n        uint32 operatorSetId;\n        IStrategy[] strategies;\n        uint256[] wadsToSlash;\n        string description;\n    }\n```\n\n----------------------------------------\n\nTITLE: Generating Calldata for Claiming Rewards in EigenLayer (Bash)\nDESCRIPTION: This command generates calldata that can be signed and broadcast for claiming rewards. It requires the same parameters as the JSON object generation, but with the output type set to 'calldata'.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/claimrewards/claim-rewards-smart-contract.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/eigenlayer rewards claim \\\n      --network mainnet \\\n      --eth-rpc-url <mainnet-eth-rpc-url> \\\n      --earner-address <earner-address> \\\n      --recipient-address <address-to-send-rewards-to> \\\n      --path-to-key-store /path/to/key/store-json \\\n      --token-addresses <comma-separated-list-of-token-addresses> \\\n      --output-type calldata\n```\n\n----------------------------------------\n\nTITLE: Implementing getOperatorRestakedStrategies for AVS\nDESCRIPTION: Solidity implementation of getOperatorRestakedStrategies function that retrieves the list of strategies an operator has restaked with an AVS. Returns array of strategy addresses based on operator's quorum bitmap.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/publish/onboard-avs-dashboard.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getOperatorRestakedStrategies(address operator) external view returns (address[] memory) {\n        bytes32 operatorId = registryCoordinator.getOperatorId(operator);\n        uint192 operatorBitmap = registryCoordinator.getCurrentQuorumBitmap(operatorId);\n\n        if (operatorBitmap == 0 || registryCoordinator.quorumCount() == 0) {\n            return new address[](0);\n        }\n\n        // Get number of strategies for each quorum in operator bitmap\n        bytes memory operatorRestakedQuorums = BitmapUtils.bitmapToBytesArray(operatorBitmap);\n        uint256 strategyCount;\n        for(uint256 i = 0; i < operatorRestakedQuorums.length; i++) {\n            strategyCount += stakeRegistry.strategyParamsLength(uint8(operatorRestakedQuorums[i]));\n        }\n\n        // Get strategies for each quorum in operator bitmap\n        address[] memory restakedStrategies = new address[](strategyCount);\n        uint256 index = 0;\n        for(uint256 i = 0; i < operatorRestakedQuorums.length; i++) {\n            uint8 quorum = uint8(operatorRestakedQuorums[i]);\n            uint256 strategyParamsLength = stakeRegistry.strategyParamsLength(quorum);\n            for (uint256 j = 0; j < strategyParamsLength; j++) {\n                restakedStrategies[index] = address(stakeRegistry.strategyParamsByIndex(quorum, j).strategy);\n                index++;\n            }\n        }\n        return restakedStrategies;        \n    }\n```\n\n----------------------------------------\n\nTITLE: Setting AVS Rewards Split - EigenLayer CLI\nDESCRIPTION: Command to update the rewards split for an AVS-operator combination. Changes take effect after 7-day activation delay. Only one pending split change allowed at a time.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/confirgurerewards/set-rewards-split.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator set-rewards-split [options]\n```\n\n----------------------------------------\n\nTITLE: Removing Admin Access with PermissionController Functions\nDESCRIPTION: Functions for removing either pending or active admins from the system. Uses PermissionController.removePendingAdmin for pending admins and PermissionController.removeAdmin for active admins.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/build/uam/dev-add-remove-admins.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nPermissionController.removePendingAdmin()\n```\n\nLANGUAGE: solidity\nCODE:\n```\nPermissionController.removeAdmin()\n```\n\n----------------------------------------\n\nTITLE: Querying Operator Set Rewards Split - EigenLayer CLI\nDESCRIPTION: Command to get the current rewards split for a specific operator set. Returns split value in bips format.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/confirgurerewards/set-rewards-split.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator get-operatorset-split [options]\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for AVS Deployment\nDESCRIPTION: Structured markdown document detailing the steps for preparing and deploying an AVS to both testnet and mainnet environments. Includes requirements for packaging, documentation, security practices, and deployment procedures.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/deploy/deployment-testnet-mainnet.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 6\ntitle: Prepare for and Deploy to Testnet and Mainnet\n---\n\n\n## Preparing and Deploying to Testnet\n\n1. Package the Operator's long running executable in a way that is easy for Operators to launch  (via binary, docker container, or similar).\n\n2. Author Testnet user and Operator documentation, including:\n   - Trust Modeling: clarify any trust assumptions in your architecture to your users. Identify the components that are trusted (centralized) and untrusted (decentralized, trustless).\n   - Operator instructions to install, register, deregister.\n   - End user (aka \"Consumer\") instructions to utilize your AVS service.\n   - Communication channels that will be utilized for AVS upgrades.\n   - Describe Operator monitoring tooling available, such as GraFana dashboards, log files or similar.\n\n3. Follow the [AVS Developer Security Best Practices](../../Reference/avs-developer-best-practices.md) and [Key Manage Considerations for Developers](../../Reference/avs-developer-best-practices.md#key-management-recommendation-for-developers).\n\n4.  Follow the [Testnet Dashboard Onboarding instructions](https://docs.eigenlayer.xyz/eigenlayer/avs-guides/avs-dashboard-onboarding).\n\n5. Implement Rewards distributions per the instructions [here](../build/submit-rewards-submissions.md).\n\n\n## Preparing and Deploying to Mainnet\n\n1. Smart Contract Auditing: have your codebase audited with at least 2-3 reputable audit firms.\n2. Finalize User and Operator documentation.\n3. Follow the [Mainnet Dashboard Onboarding instructions](https://docs.eigenlayer.xyz/eigenlayer/avs-guides/avs-dashboard-onboarding).\n```\n\n----------------------------------------\n\nTITLE: Setting Operator Set Rewards Split - EigenLayer CLI\nDESCRIPTION: Command to update the rewards split for a specific operator set. Changes require 7-day activation period and only one pending change is allowed.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/confirgurerewards/set-rewards-split.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator set-operatorset-split [options]\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC and Contract Address in YAML for EigenLayer\nDESCRIPTION: Example YAML configuration for setting the RPC endpoint and smart contract address in the operator.yaml file for EigenLayer. This snippet demonstrates the correct format for these crucial configuration parameters.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/troubleshooting.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrpc: https://example-rpc-endpoint.com\ncontract_address: \"0x1234567890abcdef1234567890abcdef12345678\"\n```\n\n----------------------------------------\n\nTITLE: Getting Programmatic Incentives Split in EigenLayer CLI\nDESCRIPTION: Commands to retrieve the current Programmatic Incentives split for an operator or the protocol default. Returns the split in basis points (bips) where 1000 bips = 10%.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/confirgurerewards/set-pi-split.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator get-pi-split [options]\n```\n\n----------------------------------------\n\nTITLE: Updating Stake Allocations with EigenLayer CLI\nDESCRIPTION: Updates stake allocations for an operator across multiple operator sets and strategies using a CSV file. The bips value represents the percentage of total stake (in basis points) to allocate to each combination.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-sets.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator allocations update \n\t--network sepolia\n\t--operator-address <operator-address> \n\t--csv-file updates.csv \n\t--caller-address <address-of-caller>\n```\n\n----------------------------------------\n\nTITLE: Fetching Rewards Data by Root Index\nDESCRIPTION: Commands to retrieve rewards data for a specific distribution root using both gRPC and REST endpoints. Returns detailed rewards information including earners, tokens, and amounts.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/confirgurerewards/rewards-snapshot-data.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# grpcurl\ngrpcurl -plaintext --max-msg-sz 2147483647 -d '{ \"rootIndex\": 217 }' localhost:7100 eigenlayer.sidecar.v1.rewards.Rewards/GetRewardsForDistributionRoot > rewardsData.json\n\n# curl\ncurl -s http://localhost:7101/rewards/v1/distribution-roots/217/rewards > rewardsData.json\n```\n\n----------------------------------------\n\nTITLE: Registering to Operator Sets with EigenLayer CLI\nDESCRIPTION: Registers an operator to one or more operator sets within a specific AVS. Operators must register to participate in a service and have properly allocated stake.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-sets.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator register-operator-sets \n\t--operator-address <operator-address> \n\t--avs-address <avs-service-manager-address> \n\t--operator-set-ids <comma-separated-list-of-operator-set-ids>\n\t--caller-address <address-of-caller>\n```\n\n----------------------------------------\n\nTITLE: Querying Distribution Roots using gRPC and REST\nDESCRIPTION: Commands to list distribution roots from EigenLayer Sidecar using both gRPC (grpcurl) and REST (curl) interfaces. Returns root details including index, calculation timestamps, and transaction data.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/confirgurerewards/rewards-snapshot-data.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# grpcurl\ngrpcurl -plaintext -d '{ }' localhost:7100 eigenlayer.sidecar.v1.rewards.Rewards/ListDistributionRoots | jq '.distributionRoots[0]'\n\n# curl\ncurl -s http://localhost:7101/rewards/v1/distribution-roots\n```\n\n----------------------------------------\n\nTITLE: Adding a Pending Admin in EigenLayer CLI\nDESCRIPTION: This command adds a pending admin to an EigenLayer account. It requires the account address, admin address to be added, and optionally the caller address if not using --broadcast or if the CLI user is not the account address.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/uam/op-add-remove-admins.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer user admin add-pending-admin [options]\n```\n\n----------------------------------------\n\nTITLE: Rewards Data JSON Schema Definition\nDESCRIPTION: JSON schema defining the structure of rewards data, including earner address, token address, snapshot timestamp, and cumulative amount fields.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/confirgurerewards/rewards-snapshot-data.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"EigenLayer rewards cumulative earnings\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"earner\": {\n      \"type\": \"string\",\n      \"description\": \"Ethereum address\"\n    },\n    \"token\": {\n      \"type\": \"string\",\n      \"Ethereum address\"\n    },\n    \"snapshot\": {\n      \"type\": \"number\",\n      \"Unix timestamp of the snapshot date in UTC\"\n    },\n    \"cumulative_amount\": {\n      \"type\": \"string\",\n      \"Cumulative amount of tokens earned over time (includes both claimed and unclaimed rewards)\"\n    }\n  },\n  \"required\": [\n    \"earner\",\n    \"token\",\n    \"snapshot\",\n    \"cumulative_amount\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accepting Admin Role in EigenLayer CLI\nDESCRIPTION: This command allows a pending admin to accept their admin role for an EigenLayer account. It requires the account address and the address of the admin accepting the pending invite.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/uam/op-add-remove-admins.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer user admin accept-admin [command options]\n```\n\n----------------------------------------\n\nTITLE: Removing an Accepted Admin in EigenLayer CLI\nDESCRIPTION: This command removes an accepted admin from an EigenLayer account. It requires the account address, the admin address to be removed, and optionally the caller address under certain conditions.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/uam/op-add-remove-admins.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer user admin remove-admin [options]\n```\n\n----------------------------------------\n\nTITLE: Setting Programmatic Incentives Split in EigenLayer CLI\nDESCRIPTION: Command to update the Programmatic Incentives split for a specific operator. The split is specified in basis points (bips) where 1000 bips = 10%.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/confirgurerewards/set-pi-split.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator set-pi-split [options]\n```\n\n----------------------------------------\n\nTITLE: Removing a Pending Admin in EigenLayer CLI\nDESCRIPTION: This command removes a pending admin before they have accepted the role. It requires the account address, the pending admin address to be removed, and optionally the caller address under certain conditions.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/uam/op-add-remove-admins.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer user admin remove-pending-admin [options]\n```\n\n----------------------------------------\n\nTITLE: Setting Rewards Claimer Address in EigenLayer CLI\nDESCRIPTION: Command to set an address as the Claimer for an Earner in EigenLayer. Requires specifying both the earner's address and the claimer address as parameters.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/confirgurerewards/set-rewards-claimer.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer rewards set-claimer [options]\n```\n\n----------------------------------------\n\nTITLE: Removing Appointee via EigenLayer CLI\nDESCRIPTION: Command to remove an appointee's permissions using the same option parameters as the set command. Used to revoke previously granted function call permissions.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/uam/op-add-remove-appointees.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer user appointee remove [options]\n```\n\n----------------------------------------\n\nTITLE: Executing Batch Claim Rewards with EigenLayer CLI\nDESCRIPTION: Command to execute batch rewards claiming using the EigenLayer CLI. This command references a batch claim file and specifies the primary earner address, RPC URL, and network.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/claimrewards/batch-claim-rewards.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer rewards claim --earner-address 0x025246421e7247a729bbcff652c5cc1815ac6373 --eth-rpc-url http://rpc-url --network holesky --batch-claim-file samples/batch-claim.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding Appointee via EigenLayer CLI\nDESCRIPTION: Command to set an appointee with options for account address, appointee address, caller address, function selector, and target contract address. Used by admins to grant function call permissions to appointees.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/uam/op-add-remove-appointees.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer user appointee set [options]\n```\n\n----------------------------------------\n\nTITLE: Updating Operator Metadata URI\nDESCRIPTION: This command specifically updates the metadata URI for an operator. This functionality was introduced in v0.9.0 of the EigenLayer CLI.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator update-metadata-uri operator.yaml\n```\n\n----------------------------------------\n\nTITLE: Deregistering from Operator Sets with EigenLayer CLI\nDESCRIPTION: Removes an operator from one or more operator sets within a specific AVS. Operators need to explicitly deallocate their stake after deregistering to make it available again.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-sets.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator deregister-operator-sets \n\t--operator-address <operator-address> \n\t--avs-address <avs-address> \n\t--operator-set-ids <comma-separated-list-of-operator-set-ids>\n\t--caller-address <address-of-caller>\n```\n\n----------------------------------------\n\nTITLE: Generating Delegation Approval Signatures\nDESCRIPTION: This command generates approval signatures for stakers using the delegation approver address. It requires the private key of the delegation approval address and produces a signature with expiry and salt information.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator get-delegation-approval \\\n  --ecdsa-private-key <delegation-approval-address-private-key> \\\n  operator.yaml <staker-address>\n  --\n```\n\n----------------------------------------\n\nTITLE: Example ECDSA Key Creation Command and Output\nDESCRIPTION: Example of ECDSA key creation command with its output, showing the generated private key, file location, public key, and Ethereum address.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator keys create --key-type ecdsa test\n```\n\n----------------------------------------\n\nTITLE: Generating Unsigned Salt for Delegation Approval\nDESCRIPTION: This command generates an unsigned salt that can be manually signed with the delegation approval key. The resulting signature can then be provided to stakers for delegation approval.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator get-delegation-approval \\\n  operator.yaml <staker-address>\n```\n\n----------------------------------------\n\nTITLE: Example ECDSA Key Import Command and Output\nDESCRIPTION: Example of importing an existing ECDSA private key with its output, showing the imported key details and storage location.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator keys import --key-type ecdsa test 6842fb8f5fa574d0482818b8a825a15c4d68f542693197f2c2497e3562f335f6\n```\n\n----------------------------------------\n\nTITLE: Creating ECDSA and BLS Keys for Operators\nDESCRIPTION: Commands to generate encrypted ECDSA and BLS keypairs for operator authentication and attestation within the EigenLayer protocol.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator keys create --key-type ecdsa [keyname]\neighenlayer operator keys create --key-type bls [keyname]\n```\n\n----------------------------------------\n\nTITLE: Exporting Private Keys from Custom Location\nDESCRIPTION: Command to export and display the private key of an existing ECDSA key from a custom file path, requiring the encryption password.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator keys export --key-type ecdsa --key-path [path]\n```\n\n----------------------------------------\n\nTITLE: Importing Existing ECDSA and BLS Keys\nDESCRIPTION: Commands to import existing ECDSA and BLS private keys into the EigenLayer CLI, useful for operators who want to use their existing Ethereum addresses.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator keys import --key-type ecdsa [keyname] [privatekey]\neighenlayer operator keys import --key-type bls [keyname] [privatekey]\n```\n\n----------------------------------------\n\nTITLE: Checking Operator Registration Status\nDESCRIPTION: This command allows operators to check the status of their registration in the EigenLayer network using their configuration file.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator status operator.yaml\n```\n\n----------------------------------------\n\nTITLE: Importing Keys with Password Piping\nDESCRIPTION: Commands to import ECDSA keys with automated password input, useful for scripted key import without interactive prompts.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\necho \"password\" | eigenlayer operator keys import --key-type ecdsa [keyname] [privatekey]\n```\n\n----------------------------------------\n\nTITLE: Updating Operator Metadata\nDESCRIPTION: This command updates the general metadata of an operator. For versions v0.9.0 and later, this command does not update the metadata URI.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator update operator.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing All Created Operator Keys\nDESCRIPTION: Command to list all ECDSA and BLS keys created or imported using the EigenLayer CLI, displaying their public keys and addresses.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator keys list\n```\n\n----------------------------------------\n\nTITLE: Adding EigenLayer CLI Binary to PATH\nDESCRIPTION: Command to add the EigenLayer CLI binary location to the system PATH for easy access from any directory.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=$PATH:~/bin\n```\n\n----------------------------------------\n\nTITLE: Exporting Private Keys from Default Location\nDESCRIPTION: Command to export and display the private key of an existing ECDSA key from the default storage location, requiring the encryption password.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator keys export --key-type ecdsa [keyname]\n```\n\n----------------------------------------\n\nTITLE: Installing EigenLayer CLI Using Go\nDESCRIPTION: Command to install the EigenLayer CLI using Go, which downloads the executable, library, and dependencies to the system.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/Layr-Labs/eigenlayer-cli/cmd/eigenlayer@latest\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Rewards Claim Command\nDESCRIPTION: This command displays the help information for the rewards claim command, which can be useful for understanding all available options, including those for different key management methods.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/claimrewards/claim-rewards-cli.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./bin/eigenlayer rewards claim --help\n```\n\n----------------------------------------\n\nTITLE: Installing EigenLayer CLI Using Binary Download Script\nDESCRIPTION: Command to download and install the latest EigenLayer CLI binary using the official installation script. The binary will be installed in the ~/bin directory.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSfL https://raw.githubusercontent.com/layr-labs/eigenlayer-cli/master/scripts/install.sh | sh -s\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Unclaimed Rewards\nDESCRIPTION: This snippet shows the expected output format when checking unclaimed rewards, displaying token addresses and their associated unclaimed amounts in Wei.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/claimrewards/claim-rewards-cli.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n---------------------------------------------------------------------------------------\nToken Address                              | Wei Amount\n---------------------------------------------------------------------------------------\n0x554c393923c753d146aa34608523ad7946b61662 | 6324648267039518\n0xdf3b00151bf851e8c4036ceda284d38a2f1d09df | 132817613607829878\n---------------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Installing EigenLayer CLI from Source Code\nDESCRIPTION: Commands to clone the EigenLayer CLI repository, build the source code, and generate the executable binary manually.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Layr-Labs/eigenlayer-cli.git\ncd eigenlayer-cli\nmkdir -p build\ngo build -o build/eigenlayer cmd/eigenlayer/main.go\n```\n\n----------------------------------------\n\nTITLE: Querying AVS Rewards Split - EigenLayer CLI\nDESCRIPTION: Command to get the current rewards split for an AVS or operator. Returns split in bips (1000 bips = 10%). Can be used without parameters to get protocol-level default split.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/confirgurerewards/set-rewards-split.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neigenlayer operator get-rewards-split [options]\n```\n\n----------------------------------------\n\nTITLE: Building EigenLayer CLI Using Make\nDESCRIPTION: Alternative commands to clone and build the EigenLayer CLI using make, simplifying the build process if make is installed.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Layr-Labs/eigenlayer-cli.git\ncd eigenlayer-cli\nmake build\n```\n\n----------------------------------------\n\nTITLE: CSV Format for Stake Allocation Updates\nDESCRIPTION: CSV file format used for updating multiple allocations in a single transaction. Each row specifies an AVS address, operator set ID, strategy address, and allocation amount in basis points (bips).\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-sets.md#2025-04-22_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\navs_address,operator_set_id,strategy_address,bips\n0x2222AAC0C980Cc029624b7ff55B88Bc6F63C538f,2,0x4936BA8f0a04CcC2e49b8C9E42448c5cD04bF3f5,1200\n0x2222AAC0C980Cc029624b7ff55B88Bc6F63C538f,1,0x4936BA8f0a04CcC2e49b8C9E42448c5cD04bF3f5,165\n```\n\n----------------------------------------\n\nTITLE: Creating Keys with Password Piping\nDESCRIPTION: Commands to create ECDSA keys with automated password input, useful for scripted key generation without interactive prompts.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\necho \"password\" | eigenlayer operator keys create --key-type ecdsa [keyname]\n```\n\n----------------------------------------\n\nTITLE: Batch Claim Configuration File Format in YAML\nDESCRIPTION: Sample YAML configuration file structure for batch claiming rewards. The file specifies multiple earner addresses and their associated token addresses for which rewards should be claimed.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/claimrewards/batch-claim-rewards.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- earner_address: \"0x025246421e7247a729bbcff652c5cc1815ac6373\"\n  token_addresses:\n    - \"0x3B78576F7D6837500bA3De27A60c7f594934027E\"\n- earner_address: \"0x025246421e7247a729bbcff652c5cc1815ac6373\"\n  token_addresses:\n    - \"0x3B78576F7D6837500bA3De27A60c7f594934027E\"\n```\n\n----------------------------------------\n\nTITLE: Assigning a Proof Submitter for EigenPod in Bash\nDESCRIPTION: This command assigns a proof submitter wallet for an EigenPod, allowing the designated address to submit proofs on behalf of the EigenPod owner. This enables the EigenPod owner to keep their private key secure while delegating proof submission responsibilities.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/restakers/restaking-guides/1-restaking-developer-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/cli assign-submitter --execNode $NODE_ETH --podAddress $EIGENPOD_ADDRESS --sender $EIGENPOD_OWNER_PK\n```\n\n----------------------------------------\n\nTITLE: Displaying ECDSA Key Generation Output in Bash\nDESCRIPTION: This snippet shows the console output when generating or importing an ECDSA key for an EigenLayer operator. It includes the private key, key location, public key, and Ethereum address.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/reference/operator-faq.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n? Enter password to encrypt the ecdsa private key:\nECDSA Private Key (Hex):  b3eba201405d5b5f7aaa9adf6bb734dc6c0f448ef64dd39df80ca2d92fca6d7b\nPlease backup the above private key hex in safe place.\n\nKey location: /home/ubuntu/.eigenlayer/operator_keys/test.ecdsa.key.json\nPublic Key hex:  f87ee475109c2943038b3c006b8a004ee17bebf3357d10d8f63ef202c5c28723906533dccfda5d76c1da0a9f05cc6d32085ca1af8aaab5a28171474b1ad0aa68\nEthereum Address 0x6a8c0D554a694899041E52a91B4EC3Ff23d8aBD5\n```\n\n----------------------------------------\n\nTITLE: Generating Credentials for EigenPod Using CLI\nDESCRIPTION: Executes the credentials command via EigenPod Proofs Generation CLI to link a validator to an EigenPod. It requires the execution node, beacon node, EigenPod address, and the private key of the EigenPod owner.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/restakers/restaking-guides/1-restaking-developer-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./cli credentials --execNode $NODE_ETH --beaconNode $NODE_BEACON --podAddress $EIGENPOD_ADDRESS --sender $EIGENPOD_OWNER_PK\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Installation in Terminal\nDESCRIPTION: Command to verify Docker installation and version, which is a prerequisite for running EigenLayer in non-native Linux environments.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker --version\n```\n\n----------------------------------------\n\nTITLE: Converting Withdrawable Shares to Deposit Shares in Solidity\nDESCRIPTION: This code converts withdrawable shares to deposit shares, which is needed as input for the queueWithdrawals() function. It uses the convertToDepositShares() function.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/restakers/restaking-guides/testnet/1-restaking-developer-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nconvertToDepositShares()\n```\n\n----------------------------------------\n\nTITLE: Installing EigenLayer CLI to Custom Location\nDESCRIPTION: Command to download and install the EigenLayer CLI binary to a custom directory location specified by the user.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSfL https://raw.githubusercontent.com/layr-labs/eigenlayer-cli/master/scripts/install.sh | sh -s -- -b <custom_location>\n```\n\n----------------------------------------\n\nTITLE: Queuing Withdrawals in EigenLayer Solidity Contract\nDESCRIPTION: This snippet shows how to queue withdrawals using the DelegationManager contract. It triggers the escrow period for the withdrawal process.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/restakers/restaking-guides/testnet/1-restaking-developer-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nDelegationManager.queueWithdrawals()\n```\n\n----------------------------------------\n\nTITLE: Adding GOBIN to PATH in User Profile\nDESCRIPTION: Commands to add GOBIN to the system PATH by modifying the user profile file, making Go-installed binaries accessible from any directory.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/operator-installation.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport GOBIN=$GOPATH/bin\nexport PATH=$GOBIN:$PATH\n```\n\n----------------------------------------\n\nTITLE: Displaying EigenLayer Architecture Diagram in Markdown\nDESCRIPTION: This code snippet embeds an image of the EigenLayer architecture diagram into the Markdown document. It sets the width to 75% and applies custom styling for margin.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/eigenlayer/overview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<img src=\"/img/overview/eigenlayer-arch-v2.png\" width=\"75%\"\n    style={{ margin: '50px'}}>\n</img>\n```\n\n----------------------------------------\n\nTITLE: Querying Withdrawable Shares in Solidity\nDESCRIPTION: This snippet demonstrates how to query the withdrawable shares for a staker using the DelegationManager contract. Withdrawable shares represent deposited shares minus slashed shares.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/restakers/restaking-guides/testnet/1-restaking-developer-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nDelegationManager.getWithdrawableShares()\n```\n\n----------------------------------------\n\nTITLE: Operator Sets Documentation Note\nDESCRIPTION: A markdown note block indicating the introduction of Operator Sets through ELIP-002 and recommending AVS migration to Operator Sets on testnet.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/eigenlayer/concepts/operator-sets/operator-sets-concept.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::note\n\n[ELIP-002 Slashing via Unique Stake & Operator Sets](https://github.com/eigenfoundation/ELIPs/blob/main/ELIPs/ELIP-002.md) introduced Operator Sets.\n\n\nCurrently, Operators register to an AVS to earn rewards in the AVSDirectory. We recommend existing AVSs [migrate to Operator Sets on testnet](../../../developers/HowTo/build/slashing/migrate-to-operatorsets.md). \n:::\n```\n\n----------------------------------------\n\nTITLE: Completing Queued Withdrawal in EigenLayer Solidity Contract\nDESCRIPTION: This code completes the queued withdrawal process, returning assets to the withdrawer's wallet after the escrow period.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/restakers/restaking-guides/testnet/1-restaking-developer-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nDelegationManager.completeQueuedWithdrawal()\n```\n\n----------------------------------------\n\nTITLE: APR Calculation Formula in Markdown\nDESCRIPTION: Mathematical formula showing how Annual Percentage Rate (APR) is calculated in EigenLayer based on the ETH value of earned rewards divided by the ETH value of staked tokens over 7 days, multiplied by 365 days.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/eigenlayer/concepts/rewards/rewards-claiming-faq.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n$$\n\\frac{E_{\\text{earned}, s}}{\\sum_{7 \\ \\text{days}}E_{\\text staked, s}}*365\\ \\text{days}\n$$\n\nThat is, $$ E_{\\text{earned}, s} $$ is the ETH value of all reward tokens earned over the past 7 days from restaking strategy $$ s $$. \n$$ E_{\\text staked, s} $$ is the ETH value of tokens staked in restaked strategy $$ s $$ on a given day, excluding any days in which no reward is earned.\n```\n\n----------------------------------------\n\nTITLE: Querying Withdrawable Execution Layer ETH in Solidity\nDESCRIPTION: This snippet retrieves the amount of withdrawable execution layer ETH in gwei from the EigenPod contract.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/restakers/restaking-guides/testnet/1-restaking-developer-guide.md#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n[YourEigenPod].withdrawableRestakedExecutionLayerGwei()\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Support Trigger Link in HTML\nDESCRIPTION: This snippet creates a JavaScript-enabled HTML link that triggers the Intercom support feature when clicked. The link is styled as a standard inline anchor with a unique identifier 'intercom_trigger_eldocs'.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/developers/HowTo/get-started/support.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"javascript:void(0)\"  id=\"intercom_trigger_eldocs\" >clicking here</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Crawl Settings in Markdown\nDESCRIPTION: Crawler configuration settings for EigenLayer documentation website, specifying version, attribution, crawl delays, allowed/disallowed paths, and sitemap location.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/static/llms.txt#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ncrawl_delay: 1\nallow_paths:\n  - /\ndisallow_paths:\n  - /private/\n  - /drafts/\nsitemaps:\n  - https://docs.eigenlayer.xyz/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Generating Routes for Redirect Testing\nDESCRIPTION: A bash command that generates a list of routes to test by running the gen_routes.sh script and saving the output to a file. This command is part of the redirect testing workflow.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/ci-scripts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nci-scripts/gen_routes.sh > routes_to_test.txt\n```\n\n----------------------------------------\n\nTITLE: Displaying EIGEN Token Contract Address\nDESCRIPTION: The official Ethereum contract address for the EIGEN token used for verification purposes and to help users avoid fraudulent tokens.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/eigenlayer/overview/support.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0xec53bF9167f50cDEB3Ae105f56099aaaB9061F83\n```\n\n----------------------------------------\n\nTITLE: Building and Serving the Static Website\nDESCRIPTION: Commands to build the website into static files in the 'build' directory and to locally serve the built site for testing purposes.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n// to test out the fully built site\nyarn serve\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install all necessary dependencies for the Docusaurus website using Yarn package manager.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start a local development server that opens a browser window. Changes to the website are reflected live without needing to restart the server.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Deploying the Website with SSH\nDESCRIPTION: Command to deploy the website using SSH authentication for publishing to GitHub Pages or other hosting services.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nUSE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying the Website without SSH\nDESCRIPTION: Command to deploy the website without SSH, using GitHub username for authentication. Builds the website and pushes to the 'gh-pages' branch.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Running URL Redirect Tests with test_redirects.sh\nDESCRIPTION: A bash command showing how to execute the test_redirects.sh script with a file containing routes to test. The script verifies that old pages properly redirect to new locations, though it doesn't validate if the redirect target is semantically correct.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/ci-scripts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nci-scripts/test_redirects.sh routes_to_test.txt\n```\n\n----------------------------------------\n\nTITLE: Checking Unclaimed Rewards with EigenLayer CLI (Sepolia)\nDESCRIPTION: This command shows unclaimed rewards for a specific earner address on the Sepolia network using the EigenLayer CLI.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/claimrewards/claim-rewards-cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/eigenlayer rewards show \\\n  --network sepolia \\\n  --earner-address <earner-address> \\\n  --claim-type unclaimed\n```\n\n----------------------------------------\n\nTITLE: Checking Unclaimed Rewards with EigenLayer CLI (Mainnet)\nDESCRIPTION: This command shows unclaimed rewards for a specific earner address on the Mainnet network using the EigenLayer CLI.\nSOURCE: https://github.com/layr-labs/eigenlayer-docs/blob/main/docs/operators/howto/claimrewards/claim-rewards-cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bin/eigenlayer rewards show \\\n  --network mainnet \\\n  --earner-address <earner-address> \\\n  --claim-type unclaimed\n```"
  }
]