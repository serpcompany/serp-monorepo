[
  {
    "owner": "tower-rs",
    "repo": "tower",
    "content": "TITLE: Implementing Timeout Middleware Service in Rust using Tower\nDESCRIPTION: A complete implementation of the Timeout middleware for Tower in Rust. This middleware wraps an inner service and applies a timeout duration to its requests. It uses pin_project for handling async futures and implements the Tower Service trait to integrate with the middleware stack.\nSOURCE: https://github.com/tower-rs/tower/blob/master/guides/building-a-middleware-from-scratch.md#2025-04-20_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nuse pin_project::pin_project;\nuse std::time::Duration;\nuse std::\n    fmt,\n    future::Future,\n    pin::Pin,\n    task::{Context, Poll},\n};\nuse tokio::time::Sleep;\nuse tower::Service;\n\n#[derive(Debug, Clone)]\nstruct Timeout<S> {\n    inner: S,\n    timeout: Duration,\n}\n\nimpl<S> Timeout<S> {\n    fn new(inner: S, timeout: Duration) -> Self {\n        Timeout { inner, timeout }\n    }\n}\n\nimpl<S, Request> Service<Request> for Timeout<S>\nwhere\n    S: Service<Request>,\n    S::Error: Into<BoxError>,\n{\n    type Response = S::Response;\n    type Error = BoxError;\n    type Future = ResponseFuture<S::Future>;\n\n    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {\n        self.inner.poll_ready(cx).map_err(Into::into)\n    }\n\n    fn call(&mut self, request: Request) -> Self::Future {\n        let response_future = self.inner.call(request);\n        let sleep = tokio::time::sleep(self.timeout);\n\n        ResponseFuture {\n            response_future,\n            sleep,\n        }\n    }\n}\n\n#[pin_project]\nstruct ResponseFuture<F> {\n    #[pin]\n    response_future: F,\n    #[pin]\n    sleep: Sleep,\n}\n\nimpl<F, Response, Error> Future for ResponseFuture<F>\nwhere\n    F: Future<Output = Result<Response, Error>>,\n    Error: Into<BoxError>,\n{\n    type Output = Result<Response, BoxError>;\n\n    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n        let this = self.project();\n\n        match this.response_future.poll(cx) {\n            Poll::Ready(result) => {\n                let result = result.map_err(Into::into);\n                return Poll::Ready(result);\n            }\n            Poll::Pending => {}\n        }\n\n        match this.sleep.poll(cx) {\n            Poll::Ready(()) => {\n                let error = Box::new(TimeoutError(()));\n                return Poll::Ready(Err(error));\n            }\n            Poll::Pending => {}\n        }\n\n        Poll::Pending\n    }\n}\n\n#[derive(Debug, Default)]\nstruct TimeoutError(());\n\nimpl fmt::Display for TimeoutError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.pad(\"request timed out\")\n    }\n}\n\nimpl std::error::Error for TimeoutError {}\n\ntype BoxError = Box<dyn std::error::Error + Send + Sync>;\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Service Trait Function Signature in Rust\nDESCRIPTION: This snippet illustrates the basic structure of a `Service` trait implementation as an asynchronous function that takes a request and returns a result containing either a response or an error.\nSOURCE: https://github.com/tower-rs/tower/blob/master/tower-service/README.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nasync fn(Request) -> Result<Response, Error>\n```\n\n----------------------------------------\n\nTITLE: Complete Poll Method Implementation with Response and Timeout Handling in Rust\nDESCRIPTION: Final implementation of the poll method for ResponseFuture that properly polls both the inner service future and the timeout Sleep future, handling the case when the service responds or when the timeout is reached.\nSOURCE: https://github.com/tower-rs/tower/blob/master/guides/building-a-middleware-from-scratch.md#2025-04-20_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nimpl<F, Response, Error> Future for ResponseFuture<F>\nwhere\n    F: Future<Output = Result<Response, Error>>,\n{\n    type Output = Result<Response, Error>;\n\n    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n        let this = self.project();\n\n        // First check if the response future is ready.\n        match this.response_future.poll(cx) {\n            Poll::Ready(result) => {\n                // The inner service has a response ready for us or it has\n                // failed.\n                return Poll::Ready(result);\n            }\n            Poll::Pending => {\n                // Not quite ready yet...\n            }\n        }\n\n        // Then check if the sleep is ready. If so the response has taken too\n        // long and we have to return an error.\n        match this.sleep.poll(cx) {\n            Poll::Ready(()) => {\n                // Our time is up, but what error do we return?!\n                todo!()\n            }\n            Poll::Pending => {\n                // Still some time remaining...\n            }\n        }\n\n        // If neither future is ready then we are still pending.\n        Poll::Pending\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Trait with ResponseFuture for Timeout Middleware in Rust\nDESCRIPTION: Implements the Service trait for the Timeout middleware, using the ResponseFuture to wrap the inner service's future along with a timeout Sleep future.\nSOURCE: https://github.com/tower-rs/tower/blob/master/guides/building-a-middleware-from-scratch.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nimpl<S, Request> Service<Request> for Timeout<S>\nwhere\n    S: Service<Request>,\n{\n    type Response = S::Response;\n    type Error = S::Error;\n\n    // Use our new `ResponseFuture` type.\n    type Future = ResponseFuture<S::Future>;\n\n    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {\n        self.inner.poll_ready(cx)\n    }\n\n    fn call(&mut self, request: Request) -> Self::Future {\n        let response_future = self.inner.call(request);\n        let sleep = tokio::time::sleep(self.timeout);\n\n        // Create our response future by wrapping the future from the inner\n        // service.\n        ResponseFuture {\n            response_future,\n            sleep,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Service Trait for Timeout with BoxError\nDESCRIPTION: Implementation of the Service trait for the Timeout middleware, using BoxError as the error type and ensuring consistent error handling across the middleware.\nSOURCE: https://github.com/tower-rs/tower/blob/master/guides/building-a-middleware-from-scratch.md#2025-04-20_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nimpl<S, Request> Service<Request> for Timeout<S>\nwhere\n    S: Service<Request>,\n    // Same trait bound like we had on `impl Future for ResponseFuture`.\n    S::Error: Into<BoxError>,\n{\n    type Response = S::Response;\n    // The error type of `Timeout` is now `BoxError`.\n    type Error = BoxError;\n    type Future = ResponseFuture<S::Future>;\n\n    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {\n        // Have to map the error type here as well.\n        self.inner.poll_ready(cx).map_err(Into::into)\n    }\n\n    fn call(&mut self, request: Request) -> Self::Future {\n        let response_future = self.inner.call(request);\n        let sleep = tokio::time::sleep(self.timeout);\n\n        ResponseFuture {\n            response_future,\n            sleep,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Future Trait for ResponseFuture with BoxError\nDESCRIPTION: Implementation of the Future trait for the ResponseFuture type, using BoxError as the error type and handling both service errors and timeout errors.\nSOURCE: https://github.com/tower-rs/tower/blob/master/guides/building-a-middleware-from-scratch.md#2025-04-20_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nimpl<F, Response, Error> Future for ResponseFuture<F>\nwhere\n    F: Future<Output = Result<Response, Error>>,\n    // Require that the inner service's error can be converted into a `BoxError`.\n    Error: Into<BoxError>,\n{\n    type Output = Result<\n        Response,\n        // The error type of `ResponseFuture` is now `BoxError`.\n        BoxError,\n    >;\n\n    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n        let this = self.project();\n\n        match this.response_future.poll(cx) {\n            Poll::Ready(result) => {\n                // Use `map_err` to convert the error type.\n                let result = result.map_err(Into::into);\n                return Poll::Ready(result);\n            }\n            Poll::Pending => {}\n        }\n\n        match this.sleep.poll(cx) {\n            Poll::Ready(()) => {\n                // Construct and return a timeout error.\n                let error = Box::new(TimeoutError(()));\n                return Poll::Ready(Err(error));\n            }\n            Poll::Pending => {}\n        }\n\n        Poll::Pending\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tower with Full Features\nDESCRIPTION: Cargo dependency configuration to install Tower with all optional middleware features enabled.\nSOURCE: https://github.com/tower-rs/tower/blob/master/tower/README.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntower = { version = \"0.5.1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Trait for Timeout Middleware in Rust\nDESCRIPTION: Adds a basic implementation of the `Service` trait for the `Timeout` middleware that forwards all operations to the inner service. This serves as a foundation for the complete implementation.\nSOURCE: https://github.com/tower-rs/tower/blob/master/guides/building-a-middleware-from-scratch.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse tower::Service;\nuse std::task::{Context, Poll};\n\nimpl<S, Request> Service<Request> for Timeout<S>\nwhere\n    S: Service<Request>,\n{\n    type Response = S::Response;\n    type Error = S::Error;\n    type Future = S::Future;\n\n    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {\n        // Our middleware doesn't care about backpressure, so it's ready as long\n        // as the inner service is ready.\n        self.inner.poll_ready(cx)\n    }\n\n    fn call(&mut self, request: Request) -> Self::Future {\n        self.inner.call(request)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ResponseFuture Structure for Timeout Middleware in Rust\nDESCRIPTION: Creates a ResponseFuture struct that wraps both the inner service's response future and a Sleep future from tokio for implementing timeout functionality.\nSOURCE: https://github.com/tower-rs/tower/blob/master/guides/building-a-middleware-from-scratch.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse tokio::time::Sleep;\n\npub struct ResponseFuture<F> {\n    response_future: F,\n    sleep: Sleep,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor for Timeout Middleware in Rust\nDESCRIPTION: Creates a constructor for the `Timeout` middleware that accepts an inner service and a timeout duration. This follows the pattern of providing a clean API for creating middleware instances.\nSOURCE: https://github.com/tower-rs/tower/blob/master/guides/building-a-middleware-from-scratch.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nimpl<S> Timeout<S> {\n    pub fn new(inner: S, timeout: Duration) -> Self {\n        Timeout { inner, timeout }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Timeout Struct in Rust\nDESCRIPTION: Creates a basic `Timeout` struct that will wrap an inner service and store a timeout duration. This is the foundation for building the timeout middleware.\nSOURCE: https://github.com/tower-rs/tower/blob/master/guides/building-a-middleware-from-scratch.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse std::time::Duration;\n\nstruct Timeout<S> {\n    inner: S,\n    timeout: Duration,\n}\n```\n\n----------------------------------------\n\nTITLE: Using pin-project for ResponseFuture Pin Projection in Rust\nDESCRIPTION: Applies the pin-project crate to handle pin projection, annotating the ResponseFuture struct and its fields to safely access pinned fields when implementing the Future trait.\nSOURCE: https://github.com/tower-rs/tower/blob/master/guides/building-a-middleware-from-scratch.md#2025-04-20_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse pin_project::pin_project;\n\n#[pin_project]\npub struct ResponseFuture<F> {\n    #[pin]\n    response_future: F,\n    #[pin]\n    sleep: Sleep,\n}\n\nimpl<F, Response, Error> Future for ResponseFuture<F>\nwhere\n    F: Future<Output = Result<Response, Error>>,\n{\n    type Output = Result<Response, Error>;\n\n    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n        // Call the magical `project` method generated by `#[pin_project]`.\n        let this = self.project();\n\n        // `project` returns a `__ResponseFutureProjection` but we can ignore\n        // the exact type. It has fields that matches `ResponseFuture` but\n        // maintain pins for fields annotated with `#[pin]`.\n\n        // `this.response_future` is now a `Pin<&mut F>`.\n        let response_future: Pin<&mut F> = this.response_future;\n\n        // And `this.sleep` is a `Pin<&mut Sleep>`.\n        let sleep: Pin<&mut Sleep> = this.sleep;\n\n        // If we had another field that wasn't annotated with `#[pin]` that\n        // would have been a regular `&mut` without `Pin`.\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Timeout Implementation with Tokio in Rust\nDESCRIPTION: Begins implementing the timeout functionality by creating both the inner service's response future and a sleep future using Tokio. These will be used to implement the timeout behavior.\nSOURCE: https://github.com/tower-rs/tower/blob/master/guides/building-a-middleware-from-scratch.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse tokio::time::sleep;\n\nfn call(&mut self, request: Request) -> Self::Future {\n    let response_future = self.inner.call(request);\n\n    // This variable has type `tokio::time::Sleep`.\n    //\n    // We don't have to clone `self.timeout` as it implements the `Copy` trait.\n    let sleep = tokio::time::sleep(self.timeout);\n\n    // what to write here?\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tower with Selected Features\nDESCRIPTION: Cargo dependency configuration to install Tower with only specific middleware features (retry and timeout) enabled.\nSOURCE: https://github.com/tower-rs/tower/blob/master/tower/README.md#2025-04-20_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ntower = { version = \"0.5.1\", features = [\"retry\", \"timeout\"] }\n```\n\n----------------------------------------\n\nTITLE: Implementing the TimeoutError Type for Boxed Error Approach\nDESCRIPTION: Implementation of a TimeoutError struct that satisfies the std::error::Error trait, with private fields to prevent external construction and a descriptive Display implementation.\nSOURCE: https://github.com/tower-rs/tower/blob/master/guides/building-a-middleware-from-scratch.md#2025-04-20_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nuse std::fmt;\n\n#[derive(Debug, Default)]\npub struct TimeoutError(());\n\nimpl fmt::Display for TimeoutError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.pad(\"request timed out\")\n    }\n}\n\nimpl std::error::Error for TimeoutError {}\n```\n\n----------------------------------------\n\nTITLE: Defining a TimeoutError Enum Approach (Option 2)\nDESCRIPTION: A demonstration of the enum approach to error handling, which would allow preserving type information but has issues with middleware nesting and error composition.\nSOURCE: https://github.com/tower-rs/tower/blob/master/guides/building-a-middleware-from-scratch.md#2025-04-20_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nenum TimeoutError<Error> {\n    // Variant used if we hit the timeout\n    Timeout(InnerTimeoutError),\n    // Variant used if the inner service produced an error\n    Service(Error),\n}\n```\n\n----------------------------------------\n\nTITLE: Service Implementation Example (After API Change in v0.2.0)\nDESCRIPTION: Shows how to implement the Service trait after version 0.2.0, where Request became a generic parameter.\nSOURCE: https://github.com/tower-rs/tower/blob/master/tower-service/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nimpl Service<HttpRequest> for Client {\n    type Response = HttpResponse;\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Future Implementation for ResponseFuture in Rust\nDESCRIPTION: Initial attempt at implementing the Future trait for ResponseFuture, showing the structure and Output type but with incomplete poll method implementation.\nSOURCE: https://github.com/tower-rs/tower/blob/master/guides/building-a-middleware-from-scratch.md#2025-04-20_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse std::{pin::Pin, future::Future};\n\nimpl<F, Response, Error> Future for ResponseFuture<F>\nwhere\n    F: Future<Output = Result<Response, Error>>,\n{\n    type Output = Result<Response, Error>;\n\n    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n        // What to write here?\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Type Alias for Boxed Error\nDESCRIPTION: Creating a type alias for the boxed error trait object to improve readability and consistency across the codebase.\nSOURCE: https://github.com/tower-rs/tower/blob/master/guides/building-a-middleware-from-scratch.md#2025-04-20_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n// This also exists as `tower::BoxError`\npub type BoxError = Box<dyn std::error::Error + Send + Sync>;\n```\n\n----------------------------------------\n\nTITLE: Adding Derive Traits to Timeout Struct in Rust\nDESCRIPTION: Enhances the `Timeout` struct by deriving `Debug` and `Clone` traits. These traits are important for services in Tower to be properly cloned when moved into response futures.\nSOURCE: https://github.com/tower-rs/tower/blob/master/guides/building-a-middleware-from-scratch.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Clone)]\nstruct Timeout<S> {\n    inner: S,\n    timeout: Duration,\n}\n```\n\n----------------------------------------\n\nTITLE: Incomplete Poll Method Implementation with Pinning Issue in Rust\nDESCRIPTION: Attempted implementation of the poll method that encounters an issue with pinning as the response_future field cannot be directly accessed and polled.\nSOURCE: https://github.com/tower-rs/tower/blob/master/guides/building-a-middleware-from-scratch.md#2025-04-20_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nfn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n    match self.response_future.poll(cx) {\n        Poll::Ready(result) => return Poll::Ready(result),\n        Poll::Pending => {}\n    }\n\n    todo!()\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Format\nDESCRIPTION: Structured changelog following Keep a Changelog format, documenting version history with sections for Added, Fixed, Changed, and Breaking Changes.\nSOURCE: https://github.com/tower-rs/tower/blob/master/tower/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n# 0.5.2\n\n### Added\n\n- **util**: Add `BoxCloneSyncService` which is a `Clone + Send + Sync` boxed `Service` ([#777])\n- **util**: Add `BoxCloneSyncServiceLayer` which is a `Clone + Send + Sync` boxed `Layer` ([802])\n```\n\n----------------------------------------\n\nTITLE: Service Implementation Example (Before API Change in v0.2.0)\nDESCRIPTION: Shows how to implement the Service trait before version 0.2.0, where Request was an associated type.\nSOURCE: https://github.com/tower-rs/tower/blob/master/tower-service/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nimpl Service for Client {\n    type Request = HttpRequest;\n    type Response = HttpResponse;\n    // ...\n}\n```"
  }
]