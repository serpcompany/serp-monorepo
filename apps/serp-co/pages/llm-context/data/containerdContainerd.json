[
  {
    "owner": "containerd",
    "repo": "containerd",
    "content": "TITLE: Complete Redis Container Creation Example in Go\nDESCRIPTION: This code provides a complete example of pulling the Redis image, creating an OCI spec, and creating a container using containerd. It includes error handling and cleanup operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"context\"\n        \"log\"\n\n        containerd \"github.com/containerd/containerd/v2/client\"\n        \"github.com/containerd/containerd/v2/pkg/namespaces\"\n        \"github.com/containerd/containerd/v2/pkg/oci\"\n)\n\nfunc main() {\n        if err := redisExample(); err != nil {\n                log.Fatal(err)\n        }\n}\n\nfunc redisExample() error {\n        client, err := containerd.New(\"/run/containerd/containerd.sock\")\n        if err != nil {\n                return err\n        }\n        defer client.Close()\n\n        ctx := namespaces.WithNamespace(context.Background(), \"example\")\n        image, err := client.Pull(ctx, \"docker.io/library/redis:alpine\", containerd.WithPullUnpack)\n        if err != nil {\n                return err\n        }\n        log.Printf(\"Successfully pulled %s image\\n\", image.Name())\n\n        container, err := client.NewContainer(\n                ctx,\n                \"redis-server\",\n                containerd.WithNewSnapshot(\"redis-server-snapshot\", image),\n                containerd.WithNewSpec(oci.WithImageConfig(image)),\n        )\n        if err != nil {\n                return err\n        }\n        defer container.Delete(ctx, containerd.WithSnapshotCleanup)\n        log.Printf(\"Successfully created container with ID %s and snapshot with ID redis-server-snapshot\", container.ID())\n\n        return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Configuration Example for containerd in TOML\nDESCRIPTION: This snippet provides a comprehensive example of a default config.toml file for containerd. It includes all major sections and common configuration options, demonstrating the structure and syntax of the configuration file.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/man/containerd-config.toml.5.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n\nroot = \"/var/lib/containerd\"\nstate = \"/run/containerd\"\noom_score = 0\nimports = [\"/etc/containerd/runtime_*.toml\", \"./debug.toml\"]\n\n[grpc]\n  address = \"/run/containerd/containerd.sock\"\n  uid = 0\n  gid = 0\n\n[debug]\n  address = \"/run/containerd/debug.sock\"\n  uid = 0\n  gid = 0\n  level = \"info\"\n\n[metrics]\n  address = \"\"\n  grpc_histogram = false\n\n[cgroup]\n  path = \"\"\n\n[plugins]\n  [plugins.\"io.containerd.monitor.v1.cgroups\"]\n    no_prometheus = false\n  [plugins.\"io.containerd.service.v1.diff-service\"]\n    default = [\"walking\"]\n  [plugins.\"io.containerd.gc.v1.scheduler\"]\n    pause_threshold = 0.02\n    deletion_threshold = 0\n    mutation_threshold = 100\n    schedule_delay = 0\n    startup_delay = \"100ms\"\n  [plugins.\"io.containerd.runtime.v2.task\"]\n    platforms = [\"linux/amd64\"]\n    sched_core = true\n  [plugins.\"io.containerd.service.v1.tasks-service\"]\n    blockio_config_file = \"\"\n    rdt_config_file = \"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Containerd Client Operations in Go\nDESCRIPTION: This Go code demonstrates how to use the containerd client to pull an image, create a container, start a task, and manage its lifecycle. It includes error handling, context management, and cleanup operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_17\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/containerd/containerd/v2/pkg/cio\"\n\tcontainerd \"github.com/containerd/containerd/v2/client\"\n\t\"github.com/containerd/containerd/v2/pkg/oci\"\n\t\"github.com/containerd/containerd/v2/pkg/namespaces\"\n)\n\nfunc main() {\n\tif err := redisExample(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc redisExample() error {\n\t// create a new client connected to the default socket path for containerd\n\tclient, err := containerd.New(\"/run/containerd/containerd.sock\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer client.Close()\n\n\t// create a new context with an \"example\" namespace\n\tctx := namespaces.WithNamespace(context.Background(), \"example\")\n\n\t// pull the redis image from DockerHub\n\timage, err := client.Pull(ctx, \"docker.io/library/redis:alpine\", containerd.WithPullUnpack)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// create a container\n\tcontainer, err := client.NewContainer(\n\t\tctx,\n\t\t\"redis-server\",\n\t\tcontainerd.WithImage(image),\n\t\tcontainerd.WithNewSnapshot(\"redis-server-snapshot\", image),\n\t\tcontainerd.WithNewSpec(oci.WithImageConfig(image)),\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer container.Delete(ctx, containerd.WithSnapshotCleanup)\n\n\t// create a task from the container\n\ttask, err := container.NewTask(ctx, cio.NewCreator(cio.WithStdio))\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer task.Delete(ctx)\n\n\t// make sure we wait before calling start\n\texitStatusC, err := task.Wait(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// call start on the task to execute the redis server\n\tif err := task.Start(ctx); err != nil {\n\t\treturn err\n\t}\n\n\t// sleep for a lil bit to see the logs\n\ttime.Sleep(3 * time.Second)\n\n\t// kill the process and get the exit status\n\tif err := task.Kill(ctx, syscall.SIGTERM); err != nil {\n\t\treturn err\n\t}\n\n\t// wait for the process to fully exit and print out the exit status\n\n\tstatus := <-exitStatusC\n\tcode, _, err := status.Result()\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Printf(\"redis-server exited with status: %d\\n\", code)\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTelemetry Tracing in containerd Client\nDESCRIPTION: Go code example showing how to configure and implement OpenTelemetry tracing in a containerd client with gRPC integration.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/tracing.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc clientWithTrace() error {\n\texp, err := otlptracehttp.New(ctx,\n\t\totlptracehttp.WithEndpoint(\"localhost:4318\"),\n\t\totlptracehttp.WithInsecure(),\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tres, err := resource.New(ctx, resource.WithAttributes(\n\t\tsemconv.ServiceNameKey.String(\"CLIENT NAME\"),\n\t))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tprovider := trace.NewTracerProvider(\n\t\ttrace.WithSampler(trace.AlwaysSample()),\n\t\ttrace.WithSpanProcessor(trace.NewSimpleSpanProcessor(exp)),\n\t\ttrace.WithResource(res),\n\t)\n\totel.SetTracerProvider(provider)\n\totel.SetTextMapPropagator(propagation.TraceContext{})\n\n    ...\n\n    dialOpts := []grpc.DialOption{\n        grpc.WithTransportCredentials(insecure.NewCredentials()),\n        grpc.WithStreamInterceptor(otelgrpc.StreamClientInterceptor()),\n        grpc.WithUnaryInterceptor(otelgrpc.UnaryClientInterceptor()),\n    }\n    client, ctx, cancel, err := commands.NewClient(context, containerd.WithDialOpts(dialOpts))\n    if err != nil {\n        return err\n    }\n    defer cancel()\n\n    ctx, span := tracing.StartSpan(ctx, \"OPERATION NAME\")\n    defer span.End()\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Uncompressed Layer Hash\nDESCRIPTION: This command demonstrates how to verify the uncompressed hash of a layer stored in the content store.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/content-flow.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ cat /var/lib/containerd/io.containerd.content.v1.content/blobs/sha256/1ed3521a5dcbd05214eb7f35b952ecf018d5a6610c32ba4e315028c556f45e94 | gunzip - | sha256sum -\n832f21763c8e6b070314e619ebb9ba62f815580da6d0eaec8a1b080bd01575f7\n```\n\n----------------------------------------\n\nTITLE: Defining Transfer Interface in Go\nDESCRIPTION: Core interface definition for the Transfer service that handles transfers between sources and destinations with optional parameters.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/transfer.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Transferrer interface {\n\tTransfer(ctx context.Context, source interface{}, destination interface{}, opts ...Opt) error\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Runc Options in Containerd\nDESCRIPTION: Defines options specific to the 'io.containerd.runc.v1' and 'io.containerd.runc.v2' runtimes, including settings for pivot root, keyrings, cgroups, user/group IDs, and CRIU paths for container checkpointing.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_19\n\nLANGUAGE: toml\nCODE:\n```\n# 'plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options' is options specific to\n# \"io.containerd.runc.v1\" and \"io.containerd.runc.v2\". Its corresponding options type is:\n#   https://github.com/containerd/containerd/blob/v1.3.2/runtime/v2/runc/options/oci.pb.go#L26 .\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n  # NoPivotRoot disables pivot root when creating a container.\n  NoPivotRoot = false\n\n  # NoNewKeyring disables new keyring for the container.\n  NoNewKeyring = false\n\n  # ShimCgroup places the shim in a cgroup.\n  ShimCgroup = \"\"\n\n  # IoUid sets the I/O's pipes uid.\n  IoUid = 0\n\n  # IoGid sets the I/O's pipes gid.\n  IoGid = 0\n\n  # BinaryName is the binary name of the runc binary.\n  BinaryName = \"\"\n\n  # Root is the runc root directory.\n  Root = \"\"\n\n  # SystemdCgroup enables systemd cgroups.\n  SystemdCgroup = false\n\n  # CriuImagePath is the criu image path\n  CriuImagePath = \"\"\n\n  # CriuWorkPath is the criu work path.\n  CriuWorkPath = \"\"\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Containerd\nDESCRIPTION: Commands to build containerd binaries and install them to the system path.\nSOURCE: https://github.com/containerd/containerd/blob/main/BUILDING.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd containerd\nmake\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Initializing Containerd Client in Go\nDESCRIPTION: Shows how to import required packages and create a new containerd client connection with proper cleanup.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/features.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"context\"\n\n  containerd \"github.com/containerd/containerd/v2/client\"\n  \"github.com/containerd/containerd/v2/pkg/cio\"\n  \"github.com/containerd/containerd/v2/pkg/namespaces\"\n)\n\n\nfunc main() {\n\tclient, err := containerd.New(\"/run/containerd/containerd.sock\")\n\tdefer client.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Development Tools and Dependencies for containerd\nDESCRIPTION: This snippet shows the commands to install development tools and dependencies for contributing to containerd. It uses scripts from the project's setup directory and the make command.\nSOURCE: https://github.com/containerd/containerd/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ script/setup/install-dev-tools\n$ make install-deps\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Containerd Rootless - Easy Method\nDESCRIPTION: Simple setup and usage of rootless containerd using the automated setup tool and running an nginx container with nerdctl\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/rootless.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ containerd-rootless-setuptool.sh install\n$ nerdctl run -d --restart=always --name nginx -p 8080:80 nginx:alpine\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Snapshot Plugin in Go\nDESCRIPTION: Complete Go implementation of a custom snapshot plugin that implements containerd's Snapshotter interface. Shows how to create a gRPC server, configure a native snapshotter, and serve it over a unix socket.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/PLUGINS.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\n\t\"google.golang.org/grpc\"\n\n\tsnapshotsapi \"github.com/containerd/containerd/api/services/snapshots/v1\"\n\t\"github.com/containerd/containerd/v2/contrib/snapshotservice\"\n\t\"github.com/containerd/containerd/v2/plugins/snapshots/native\"\n)\n\nfunc main() {\n\tif len(os.Args) < 3 {\n\t\tfmt.Printf(\"invalid args: usage: %s <unix addr> <root>\\n\", os.Args[0])\n\t\tos.Exit(1)\n\t}\n\n\trpc := grpc.NewServer()\n\n\tsn, err := native.NewSnapshotter(os.Args[2])\n\tif err != nil {\n\t\tfmt.Printf(\"error: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tservice := snapshotservice.FromSnapshotter(sn)\n\n\tsnapshotsapi.RegisterSnapshotsServer(rpc, service)\n\n\tl, err := net.Listen(\"unix\", os.Args[1])\n\tif err != nil {\n\t\tfmt.Printf(\"error: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tif err := rpc.Serve(l); err != nil {\n\t\tfmt.Printf(\"error: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using nerdctl to interact with containerd\nDESCRIPTION: This example shows how to run a Redis container using the nerdctl command-line tool.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnerdctl run --name redis redis:alpine\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshots Service in Protobuf\nDESCRIPTION: Defines the Snapshots service with methods for managing container snapshots including Prepare, View, Mounts, Commit, Remove, Stat, Update, List, Usage, and Cleanup. Each method specifies input and output types.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_64\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Snapshots\"\n  method {\n    name: \"Prepare\"\n    input_type: \".containerd.services.snapshots.v1.PrepareSnapshotRequest\"\n    output_type: \".containerd.services.snapshots.v1.PrepareSnapshotResponse\"\n  }\n  method {\n    name: \"View\"\n    input_type: \".containerd.services.snapshots.v1.ViewSnapshotRequest\"\n    output_type: \".containerd.services.snapshots.v1.ViewSnapshotResponse\"\n  }\n  method {\n    name: \"Mounts\"\n    input_type: \".containerd.services.snapshots.v1.MountsRequest\"\n    output_type: \".containerd.services.snapshots.v1.MountsResponse\"\n  }\n  method {\n    name: \"Commit\"\n    input_type: \".containerd.services.snapshots.v1.CommitSnapshotRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"Remove\"\n    input_type: \".containerd.services.snapshots.v1.RemoveSnapshotRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"Stat\"\n    input_type: \".containerd.services.snapshots.v1.StatSnapshotRequest\"\n    output_type: \".containerd.services.snapshots.v1.StatSnapshotResponse\"\n  }\n  method {\n    name: \"Update\"\n    input_type: \".containerd.services.snapshots.v1.UpdateSnapshotRequest\"\n    output_type: \".containerd.services.snapshots.v1.UpdateSnapshotResponse\"\n  }\n  method {\n    name: \"List\"\n    input_type: \".containerd.services.snapshots.v1.ListSnapshotsRequest\"\n    output_type: \".containerd.services.snapshots.v1.ListSnapshotsResponse\"\n    server_streaming: true\n  }\n  method {\n    name: \"Usage\"\n    input_type: \".containerd.services.snapshots.v1.UsageRequest\"\n    output_type: \".containerd.services.snapshots.v1.UsageResponse\"\n  }\n  method {\n    name: \"Cleanup\"\n    input_type: \".containerd.services.snapshots.v1.CleanupRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing and Inspecting Images with crictl\nDESCRIPTION: Commands to list images and inspect specific images using crictl.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/crictl.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo crictl images\nIMAGE                       TAG                 IMAGE ID            SIZE\ndocker.io/library/busybox   latest              f6e427c148a76       728kB\nregistry.k8s.io/pause            3.10                 873ed75102791       311kB\n$ sudo crictl inspecti 873ed75102791\n  ... displays information about the pause image.\n$ sudo crictl inspecti registry.k8s.io/pause:3.10\n  ... displays information about the pause image.\n```\n\n----------------------------------------\n\nTITLE: Installing runc on Linux\nDESCRIPTION: This command installs the runc binary with the correct permissions in the /usr/local/sbin directory.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ install -m 755 runc.amd64 /usr/local/sbin/runc\n```\n\n----------------------------------------\n\nTITLE: Extracting containerd binaries on Linux\nDESCRIPTION: This command extracts the containerd binaries from a downloaded archive to the /usr/local directory.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ tar Cxzvf /usr/local containerd-1.6.2-linux-amd64.tar.gz\nbin/\nbin/containerd-shim-runc-v2\nbin/containerd-shim\nbin/ctr\nbin/containerd-shim-runc-v1\nbin/containerd\nbin/containerd-stress\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks Service in Protocol Buffers for containerd\nDESCRIPTION: This snippet defines the Tasks service for containerd, including various RPC methods for managing container tasks such as Create, Start, Delete, Get, List, Kill, Exec, and more. It specifies the input and output types for each method.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_30\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nservice {\n  name: \"Tasks\"\n  method {\n    name: \"Create\"\n    input_type: \".containerd.services.tasks.v1.CreateTaskRequest\"\n    output_type: \".containerd.services.tasks.v1.CreateTaskResponse\"\n  }\n  method {\n    name: \"Start\"\n    input_type: \".containerd.services.tasks.v1.StartRequest\"\n    output_type: \".containerd.services.tasks.v1.StartResponse\"\n  }\n  method {\n    name: \"Delete\"\n    input_type: \".containerd.services.tasks.v1.DeleteTaskRequest\"\n    output_type: \".containerd.services.tasks.v1.DeleteResponse\"\n  }\n  // ... (other methods)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a namespaced context for containerd client\nDESCRIPTION: This Go code snippet shows how to create a namespaced context for use with containerd client API calls.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n\tctx := namespaces.WithNamespace(context.Background(), \"example\")\n```\n\n----------------------------------------\n\nTITLE: Creating OCI Spec and Container with Containerd in Go\nDESCRIPTION: This snippet demonstrates how to create an OCI runtime specification and a new container based on the pulled Redis image. It allocates a new read-write snapshot and sets up container deletion with snapshot cleanup.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ncontainer, err := client.NewContainer(\n\tctx,\n\t\"redis-server\",\n\tcontainerd.WithNewSnapshot(\"redis-server-snapshot\", image),\n\tcontainerd.WithNewSpec(oci.WithImageConfig(image)),\n)\nif err != nil {\n\treturn err\n}\ndefer container.Delete(ctx, containerd.WithSnapshotCleanup)\n```\n\n----------------------------------------\n\nTITLE: Basic Containerd NewContainer Method Signature\nDESCRIPTION: Shows the basic method signature for creating new containers with options pattern support.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/client-opts.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *Client) NewContainer(ctx context.Context, id string, opts ...NewContainerOpts) (Container, error) {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Container Service in Protobuf for Containerd\nDESCRIPTION: This snippet defines the Containers service with methods for managing containers in Containerd. It includes operations like Get, List, Create, Update, and Delete containers.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Containers\"\n  method {\n    name: \"Get\"\n    input_type: \".containerd.services.containers.v1.GetContainerRequest\"\n    output_type: \".containerd.services.containers.v1.GetContainerResponse\"\n  }\n  method {\n    name: \"List\"\n    input_type: \".containerd.services.containers.v1.ListContainersRequest\"\n    output_type: \".containerd.services.containers.v1.ListContainersResponse\"\n  }\n  method {\n    name: \"ListStream\"\n    input_type: \".containerd.services.containers.v1.ListContainersRequest\"\n    output_type: \".containerd.services.containers.v1.ListContainerMessage\"\n    server_streaming: true\n  }\n  method {\n    name: \"Create\"\n    input_type: \".containerd.services.containers.v1.CreateContainerRequest\"\n    output_type: \".containerd.services.containers.v1.CreateContainerResponse\"\n  }\n  method {\n    name: \"Update\"\n    input_type: \".containerd.services.containers.v1.UpdateContainerRequest\"\n    output_type: \".containerd.services.containers.v1.UpdateContainerResponse\"\n  }\n  method {\n    name: \"Delete\"\n    input_type: \".containerd.services.containers.v1.DeleteContainerRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling and Inspecting Container Images with crictl\nDESCRIPTION: Commands to download a container image and display information about it using crictl.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/crictl.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ crictl pull busybox\n  ...\n$ crictl inspecti busybox\n  ... displays information about the image.\n```\n\n----------------------------------------\n\nTITLE: Configuring systemd Service for containerd\nDESCRIPTION: Provides a systemd service configuration for containerd. It includes important settings like Delegate and KillMode to ensure proper resource management and graceful shutdowns.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/ops.md#2025-04-21_snippet_1\n\nLANGUAGE: systemd\nCODE:\n```\n[Unit]\nDescription=containerd container runtime\nDocumentation=https://containerd.io\nAfter=network.target\n\n[Service]\nExecStartPre=-/sbin/modprobe overlay\nExecStart=/usr/local/bin/containerd\nDelegate=yes\nKillMode=process\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Building and Running Redis Pull Example in Bash\nDESCRIPTION: This bash snippet shows how to build and run the Go program that pulls the Redis image using containerd. It demonstrates the successful execution of the program.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n> go build main.go\n> sudo ./main\n\n2017/08/13 17:43:21 Successfully pulled docker.io/library/redis:alpine image\n```\n\n----------------------------------------\n\nTITLE: Configuring Devmapper Snapshotter in Containerd Config (TOML)\nDESCRIPTION: This snippet shows how to configure the devmapper snapshotter plugin in the containerd configuration file. It specifies the root path, pool name, and base image size for the snapshotter.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/snapshotters/devmapper.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n\n[plugins]\n  ...\n  [plugins.\"io.containerd.snapshotter.v1.devmapper\"]\n    root_path = \"/var/lib/containerd/devmapper\"\n    pool_name = \"containerd-pool\"\n    base_image_size = \"8192MB\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Complete Redis Image Pull Example in Go\nDESCRIPTION: This code provides a complete example of pulling the Redis Alpine image from DockerHub using containerd. It initializes a client, pulls the image, and prints the image name on success.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"context\"\n        \"log\"\n\n        containerd \"github.com/containerd/containerd/v2/client\"\n        \"github.com/containerd/containerd/v2/pkg/namespaces\"\n)\n\nfunc main() {\n        if err := redisExample(); err != nil {\n                log.Fatal(err)\n        }\n}\n\nfunc redisExample() error {\n        client, err := containerd.New(\"/run/containerd/containerd.sock\")\n        if err != nil {\n                return err\n        }\n        defer client.Close()\n\n        ctx := namespaces.WithNamespace(context.Background(), \"example\")\n        image, err := client.Pull(ctx, \"docker.io/library/redis:alpine\", containerd.WithPullUnpack)\n        if err != nil {\n                return err\n        }\n        log.Printf(\"Successfully pulled %s image\\n\", image.Name())\n\n        return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Image Distribution Operations in Containerd\nDESCRIPTION: Shows how to pull and push images using the containerd client.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/features.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// pull an image\nimage, err := client.Pull(context, \"docker.io/library/redis:latest\")\n\n// push an image\nerr := client.Push(context, \"docker.io/library/redis:latest\", image.Target())\n```\n\n----------------------------------------\n\nTITLE: Adding Context to Errors with errors.Wrap\nDESCRIPTION: Shows how to use errors.Wrap to add contextual information to an error while preserving the original error value.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n_, err := ioutil.ReadAll(r)\nif err != nil {\n        return errors.Wrap(err, \"read failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Classes Configuration for Containerd 2.x\nDESCRIPTION: Configuration for registering custom runtime classes (crun, gVisor, Kata Containers) in containerd 2.x.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\nversion = 3\n[plugins.\"io.containerd.cri.v1.runtime\".containerd]\n  default_runtime_name = \"crun\"\n  [plugins.\"io.containerd.cri.v1.runtime\".containerd.runtimes]\n    [plugins.\"io.containerd.cri.v1.runtime\".containerd.runtimes.crun]\n      runtime_type = \"io.containerd.runc.v2\"\n      [plugins.\"io.containerd.cri.v1.runtime\".containerd.runtimes.crun.options]\n        BinaryName = \"/usr/local/bin/crun\"\n    [plugins.\"io.containerd.cri.v1.runtime\".containerd.runtimes.gvisor]\n      runtime_type = \"io.containerd.runsc.v1\"\n    [plugins.\"io.containerd.cri.v1.runtime\".containerd.runtimes.kata]\n      runtime_type = \"io.containerd.kata.v2\"\n```\n\n----------------------------------------\n\nTITLE: Instrumenting HTTP Handlers with Metrics\nDESCRIPTION: Demonstrates how to create a metrics namespace for HTTP handlers and instrument an existing HTTP handler with performance tracking metrics\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/docker/go-metrics/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nnamespace := metrics.NewNamespace(\"docker_distribution\", \"http\", metrics.Labels{\"handler\": \"your_http_handler_name\"})\nhttpMetrics := namespace.NewDefaultHttpMetrics()\nmetrics.Register(namespace)\ninstrumentedHandler = metrics.InstrumentHandler(httpMetrics, unInstrumentedHandler)\n```\n\n----------------------------------------\n\nTITLE: Cloning Containerd Repository\nDESCRIPTION: Command to clone the containerd source code repository from GitHub.\nSOURCE: https://github.com/containerd/containerd/blob/main/BUILDING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/containerd/containerd\n```\n\n----------------------------------------\n\nTITLE: Pulling Images with Remote Snapshotter in Go\nDESCRIPTION: This snippet demonstrates how to use the containerd client's Pull API with a remote snapshotter. It shows the usage of WithPullUnpack and WithPullSnapshotter options to specify the snapshotter.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/remote-snapshotter.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tcontainerd \"github.com/containerd/containerd/v2/client\"\n)\n\nimage, err := client.Pull(ctx, ref,\n\tcontainerd.WithPullUnpack,\n\tcontainerd.WithPullSnapshotter(\"my-remote-snapshotter\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Using ctr to interact with containerd\nDESCRIPTION: This example demonstrates pulling and running a Redis container using the ctr command-line tool.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nctr images pull docker.io/library/redis:alpine\nctr run docker.io/library/redis:alpine redis\n```\n\n----------------------------------------\n\nTITLE: Installing CNI plugins on Linux\nDESCRIPTION: These commands create the CNI plugins directory and extract the plugins from a downloaded archive.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir -p /opt/cni/bin\n$ tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.1.1.tgz\n./\n./macvlan\n./static\n./vlan\n./portmap\n./host-local\n./vrf\n./bridge\n./tuning\n./firewall\n./host-device\n./sbr\n./loopback\n./dhcp\n./ptp\n./ipvlan\n./bandwidth\n```\n\n----------------------------------------\n\nTITLE: Defining Metrics for CGroup v2 in Protocol Buffers\nDESCRIPTION: This Protocol Buffers file defines various message types for capturing metrics and statistics in cgroups v2 within the Containerd project. Key message types include 'Metrics', 'PSIData', 'PSIStats', 'PidsStat', 'CPUStat', 'MemoryStat', and 'MemoryEvents', each mapping to respective statistics such as CPU usage, memory allocation, and PID statistics. Dependencies include the Protocol Buffers library. This file effectively organizes and aggregates system-level data for efficient management and monitoring of container resources.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup2/stats/metrics.pb.txt#2025-04-21_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nfile {\n  name: \"github.com/containerd/cgroups/cgroup2/stats/metrics.proto\"\n  package: \"io.containerd.cgroups.v2\"\n  message_type {\n    name: \"Metrics\"\n    field {\n      name: \"pids\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v2.PidsStat\"\n      json_name: \"pids\"\n    }\n    field {\n      name: \"cpu\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v2.CPUStat\"\n      json_name: \"cpu\"\n    }\n    field {\n      name: \"memory\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v2.MemoryStat\"\n      json_name: \"memory\"\n    }\n    field {\n      name: \"rdma\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v2.RdmaStat\"\n      json_name: \"rdma\"\n    }\n    field {\n      name: \"io\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v2.IOStat\"\n      json_name: \"io\"\n    }\n    field {\n      name: \"hugetlb\"\n      number: 7\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v2.HugeTlbStat\"\n      json_name: \"hugetlb\"\n    }\n    field {\n      name: \"memory_events\"\n      number: 8\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v2.MemoryEvents\"\n      json_name: \"memoryEvents\"\n    }\n  }\n  message_type {\n    name: \"PSIData\"\n    field {\n      name: \"avg10\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_DOUBLE\n      json_name: \"avg10\"\n    }\n    field {\n      name: \"avg60\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_DOUBLE\n      json_name: \"avg60\"\n    }\n    field {\n      name: \"avg300\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_DOUBLE\n      json_name: \"avg300\"\n    }\n    field {\n      name: \"total\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"total\"\n    }\n  }\n  message_type {\n    name: \"PSIStats\"\n    field {\n      name: \"some\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v2.PSIData\"\n      json_name: \"some\"\n    }\n    field {\n      name: \"full\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v2.PSIData\"\n      json_name: \"full\"\n    }\n  }\n  message_type {\n    name: \"PidsStat\"\n    field {\n      name: \"current\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"current\"\n    }\n    field {\n      name: \"limit\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"limit\"\n    }\n  }\n  message_type {\n    name: \"CPUStat\"\n    field {\n      name: \"usage_usec\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"usageUsec\"\n    }\n    field {\n      name: \"user_usec\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"userUsec\"\n    }\n    field {\n      name: \"system_usec\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"systemUsec\"\n    }\n    field {\n      name: \"nr_periods\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"nrPeriods\"\n    }\n    field {\n      name: \"nr_throttled\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"nrThrottled\"\n    }\n    field {\n      name: \"throttled_usec\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"throttledUsec\"\n    }\n    field {\n      name: \"psi\"\n      number: 7\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v2.PSIStats\"\n      json_name: \"psi\"\n    }\n  }\n  message_type {\n    name: \"MemoryStat\"\n    field {\n      name: \"anon\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"anon\"\n    }\n    field {\n      name: \"file\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"file\"\n    }\n    field {\n      name: \"kernel_stack\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"kernelStack\"\n    }\n    field {\n      name: \"slab\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"slab\"\n    }\n    field {\n      name: \"sock\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"sock\"\n    }\n    field {\n      name: \"shmem\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"shmem\"\n    }\n    field {\n      name: \"file_mapped\"\n      number: 7\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"fileMapped\"\n    }\n    field {\n      name: \"file_dirty\"\n      number: 8\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"fileDirty\"\n    }\n    field {\n      name: \"file_writeback\"\n      number: 9\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"fileWriteback\"\n    }\n    field {\n      name: \"anon_thp\"\n      number: 10\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"anonThp\"\n    }\n    field {\n      name: \"inactive_anon\"\n      number: 11\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"inactiveAnon\"\n    }\n    field {\n      name: \"active_anon\"\n      number: 12\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"activeAnon\"\n    }\n    field {\n      name: \"inactive_file\"\n      number: 13\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"inactiveFile\"\n    }\n    field {\n      name: \"active_file\"\n      number: 14\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"activeFile\"\n    }\n    field {\n      name: \"unevictable\"\n      number: 15\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"unevictable\"\n    }\n    field {\n      name: \"slab_reclaimable\"\n      number: 16\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"slabReclaimable\"\n    }\n    field {\n      name: \"slab_unreclaimable\"\n      number: 17\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"slabUnreclaimable\"\n    }\n    field {\n      name: \"pgfault\"\n      number: 18\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"pgfault\"\n    }\n    field {\n      name: \"pgmajfault\"\n      number: 19\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"pgmajfault\"\n    }\n    field {\n      name: \"workingset_refault\"\n      number: 20\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"workingsetRefault\"\n    }\n    field {\n      name: \"workingset_activate\"\n      number: 21\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"workingsetActivate\"\n    }\n    field {\n      name: \"workingset_nodereclaim\"\n      number: 22\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"workingsetNodereclaim\"\n    }\n    field {\n      name: \"pgrefill\"\n      number: 23\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"pgrefill\"\n    }\n    field {\n      name: \"pgscan\"\n      number: 24\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"pgscan\"\n    }\n    field {\n      name: \"pgsteal\"\n      number: 25\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"pgsteal\"\n    }\n    field {\n      name: \"pgactivate\"\n      number: 26\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"pgactivate\"\n    }\n    field {\n      name: \"pgdeactivate\"\n      number: 27\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"pgdeactivate\"\n    }\n    field {\n      name: \"pglazyfree\"\n      number: 28\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"pglazyfree\"\n    }\n    field {\n      name: \"pglazyfreed\"\n      number: 29\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"pglazyfreed\"\n    }\n    field {\n      name: \"thp_fault_alloc\"\n      number: 30\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"thpFaultAlloc\"\n    }\n    field {\n      name: \"thp_collapse_alloc\"\n      number: 31\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"thpCollapseAlloc\"\n    }\n    field {\n      name: \"usage\"\n      number: 32\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"usage\"\n    }\n    field {\n      name: \"usage_limit\"\n      number: 33\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"usageLimit\"\n    }\n    field {\n      name: \"swap_usage\"\n      number: 34\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"swapUsage\"\n    }\n    field {\n      name: \"swap_limit\"\n      number: 35\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"swapLimit\"\n    }\n    field {\n      name: \"max_usage\"\n      number: 36\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"maxUsage\"\n    }\n    field {\n      name: \"swap_max_usage\"\n      number: 37\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"swapMaxUsage\"\n    }\n    field {\n      name: \"psi\"\n      number: 38\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v2.PSIStats\"\n      json_name: \"psi\"\n    }\n  }\n  message_type {\n    name: \"MemoryEvents\"\n    field {\n      name: \"low\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"low\"\n    }\n    field {\n      name: \"high\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"high\"\n    }\n    field {\n      name: \"max\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"max\"\n    }\n    field {\n      name: \"oom\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"oom\"\n    }\n    field {\n      name: \"oom_kill\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Default Registry Configuration\nDESCRIPTION: Example hosts.toml configuration for Docker registry with basic pull and resolve capabilities.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/hosts.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nserver = \"https://docker.io\"\n\n[host.\"https://registry-1.docker.io\"]\n  capabilities = [\"pull\", \"resolve\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring SystemdCgroup Option for runc in TOML\nDESCRIPTION: This snippet demonstrates how to configure the SystemdCgroup option for runc in the containerd config.toml file. It shows the old deprecated method and the new recommended approach using the runc options.\nSOURCE: https://github.com/containerd/containerd/blob/main/RELEASES.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n\n# OLD\n# [plugins.\"io.containerd.grpc.v1.cri\"]\n#   systemd_cgroup = true\n\n# NEW\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n  SystemdCgroup = true\n```\n\n----------------------------------------\n\nTITLE: Task Wait and Start with Containerd in Go\nDESCRIPTION: This snippet demonstrates how to set up a wait on the task's exit status and start the task. It's crucial to wait before starting to avoid race conditions with short-lived tasks.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nexitStatusC, err := task.Wait(ctx)\nif err != nil {\n\treturn err\n}\n\nif err := task.Start(ctx); err != nil {\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Container Creation in Containerd\nDESCRIPTION: Demonstrates creating a new container with proper cleanup handling.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/features.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nredis, err := client.NewContainer(context, \"redis-master\")\ndefer redis.Delete(context)\n```\n\n----------------------------------------\n\nTITLE: Root Filesystem Management in Containerd\nDESCRIPTION: Demonstrates filesystem operations including image unpacking, snapshot creation, and readonly filesystem setup for multiple containers.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/features.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// pull an image and unpack it into the configured snapshotter\nimage, err := client.Pull(context, \"docker.io/library/redis:latest\", containerd.WithPullUnpack)\n\n// allocate a new RW root filesystem for a container based on the image\nredis, err := client.NewContainer(context, \"redis-master\",\n\tcontainerd.WithNewSnapshot(\"redis-rootfs\", image),\n\tcontainerd.WithNewSpec(oci.WithImageConfig(image)),\n)\n\n// use a readonly filesystem with multiple containers\nfor i := 0; i < 10; i++ {\n\tid := fmt.Sprintf(\"id-%s\", i)\n\tcontainer, err := client.NewContainer(ctx, id,\n\t\tcontainerd.WithNewSnapshotView(id, image),\n\t\tcontainerd.WithNewSpec(oci.WithImageConfig(image)),\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Namespace in Go Context\nDESCRIPTION: Demonstrates how to set and retrieve a namespace on a context object using the containerd/namespaces package.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/namespaces.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// set a namespace\nctx := namespaces.WithNamespace(context.Background(), \"my-namespace\")\n\n// get the namespace\nns, ok := namespaces.Namespace(ctx)\n```\n\n----------------------------------------\n\nTITLE: Executing Commands in a Container with crictl\nDESCRIPTION: Example of executing a command inside a running container using crictl.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/crictl.md#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ crictl exec -i -t 0a2c ls\nbin   dev   etc   home  proc  root  sys   tmp   usr   var\n```\n\n----------------------------------------\n\nTITLE: Implementing a containerd client in Go\nDESCRIPTION: This Go code snippet demonstrates how to create a new containerd client, connect to the daemon, and set up a namespaced context for API calls.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\n\tcontainerd \"github.com/containerd/containerd/v2/client\"\n)\n\nfunc main() {\n\tif err := redisExample(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc redisExample() error {\n\tclient, err := containerd.New(\"/run/containerd/containerd.sock\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer client.Close()\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Containerd Client Example\nDESCRIPTION: These bash commands demonstrate how to build the Go example and run it with sudo privileges. The output shows the Redis server starting, running, and then being gracefully terminated.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n> go build main.go\n> sudo ./main\n\n1:C 04 Aug 20:41:37.682 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\n1:C 04 Aug 20:41:37.682 # Redis version=4.0.1, bits=64, commit=00000000, modified=0, pid=1, just started\n1:C 04 Aug 20:41:37.682 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf\n1:M 04 Aug 20:41:37.682 # You requested maxclients of 10000 requiring at least 10032 max file descriptors.\n1:M 04 Aug 20:41:37.682 # Server can't set maximum open files to 10032 because of OS error: Operation not permitted.\n1:M 04 Aug 20:41:37.682 # Current maximum open files is 1024. maxclients has been reduced to 992 to compensate for low ulimit. If you need higher maxclients increase 'ulimit -n'.\n1:M 04 Aug 20:41:37.683 * Running mode=standalone, port=6379.\n1:M 04 Aug 20:41:37.683 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.\n1:M 04 Aug 20:41:37.684 # Server initialized\n1:M 04 Aug 20:41:37.684 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.\n1:M 04 Aug 20:41:37.684 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.\n1:M 04 Aug 20:41:37.684 * Ready to accept connections\n1:signal-handler (1501879300) Received SIGTERM scheduling shutdown...\n1:M 04 Aug 20:41:40.791 # User requested shutdown...\n1:M 04 Aug 20:41:40.791 * Saving the final RDB snapshot before exiting.\n1:M 04 Aug 20:41:40.794 * DB saved on disk\n1:M 04 Aug 20:41:40.794 # Redis is now ready to exit, bye bye...\nredis-server exited with status: 0\n```\n\n----------------------------------------\n\nTITLE: Systemd Cgroup Driver Configuration for Containerd 2.x\nDESCRIPTION: Configuration for enabling systemd cgroup driver in containerd 2.x to comply with systemd's single-writer rule for cgroups.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nversion = 3\n[plugins.'io.containerd.cri.v1.runtime'.containerd.runtimes.runc.options]\n  SystemdCgroup = true\n```\n\n----------------------------------------\n\nTITLE: Inspecting Namespaced Resources with ctr CLI\nDESCRIPTION: Shows how to use the ctr command-line tool to inspect resources in different namespaces by specifying the namespace flag or using an environment variable.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/namespaces.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> sudo ctr -n docker tasks\n> sudo ctr -n cri tasks\n```\n\n----------------------------------------\n\nTITLE: Configuring containerd for image decryption with node key model\nDESCRIPTION: This TOML configuration for containerd v1.4 enables image decryption using the 'node' key model. It sets up stream processors to handle encrypted OCI image layers and specifies the path for decryption keys and the ocicrypt keyprovider configuration.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/decryption.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n\n[plugins.\"io.containerd.grpc.v1.cri\".image_decryption]\n  key_model = \"node\"\n\n[stream_processors]\n  [stream_processors.\"io.containerd.ocicrypt.decoder.v1.tar.gzip\"]\n    accepts = [\"application/vnd.oci.image.layer.v1.tar+gzip+encrypted\"]\n    returns = \"application/vnd.oci.image.layer.v1.tar+gzip\"\n    path = \"ctd-decoder\"\n    args = [\"--decryption-keys-path\", \"/etc/containerd/ocicrypt/keys\"]\n    env= [\"OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf\"]\n  [stream_processors.\"io.containerd.ocicrypt.decoder.v1.tar\"]\n    accepts = [\"application/vnd.oci.image.layer.v1.tar+encrypted\"]\n    returns = \"application/vnd.oci.image.layer.v1.tar\"\n    path = \"ctd-decoder\"\n    args = [\"--decryption-keys-path\", \"/etc/containerd/ocicrypt/keys\"]\n    env= [\"OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf\"]\n```\n\n----------------------------------------\n\nTITLE: Running Redis Container with Containerd CLI\nDESCRIPTION: Commands to pull and run a Redis container from Docker Hub using containerd's ctr command line tool. Demonstrates the new image config to OCI spec conversion functionality.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-03-24.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo dist pull docker.io/library/redis:alpine\nsudo ctr run --id redis -t docker.io/library/redis:alpine\n```\n\n----------------------------------------\n\nTITLE: Running Container and Handling Lifecycle using containerd Client in Go\nDESCRIPTION: Example of running a container, managing its lifecycle, and handling its exit status using the containerd client. This demonstrates the full container execution flow in containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-05-26.md#2025-04-21_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n// use the current process's stdio\ntask, err := container.NewTask(ctx, containerd.Stdio)\nif err != nil {\n\treturn err\n}\ndefer task.Delete(ctx)\n\npid := task.Pid()\n\n// start the redis process\nif err := task.Start(ctx); err != nil {\n\treturn err\n}\n\ntask.Kill(ctx, syscall.SIGTERM)\n\nstatus, err := task.Wait(ctx)\n\nos.Exit(status)\n```\n\n----------------------------------------\n\nTITLE: Configuring CRI Plugin Settings in TOML\nDESCRIPTION: Main configuration block for containerd's CRI plugin, defining core settings like TCP service, streaming, security, and resource management options.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[plugins.\"io.containerd.grpc.v1.cri\"]\n  disable_tcp_service = true\n  stream_server_address = \"127.0.0.1\"\n  stream_server_port = \"0\"\n  stream_idle_timeout = \"4h\"\n  enable_selinux = false\n  selinux_category_range = 1024\n  sandbox_image = \"registry.k8s.io/pause:3.10\"\n  stats_collect_period = 10\n  enable_tls_streaming = false\n  tolerate_missing_hugetlb_controller = true\n  ignore_image_defined_volumes = false\n  netns_mounts_under_state_dir = false\n```\n\n----------------------------------------\n\nTITLE: Defining Containerd Descriptor Type\nDESCRIPTION: Protocol Buffer message definition for the Descriptor type in containerd, which represents content metadata. It includes fields for media type, content digest, and size used throughout the containerd ecosystem.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_12\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Descriptor\"\n  field {\n    name: \"media_type\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"mediaType\"\n  }\n  field {\n    name: \"digest\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65003: \"github.com/opencontainers/go-digest.Digest\"\n      65001: 0\n    }\n    json_name: \"digest\"\n  }\n  field {\n    name: \"size\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"size\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Container from Image using containerd Client in Go\nDESCRIPTION: Example of creating a new container based on a pulled image and generated specification using the containerd client. This showcases the container creation process in containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-05-26.md#2025-04-21_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n// create the container with a persistent ReadWrite layer based on the image and spec\ncontainer, err := client.NewContainer(ctx, \"redis\", spec, containerd.WithNewRootFS(\"redis-rootfs\", image))\nif err != nil {\n\treturn err\n}\ndefer container.Delete(ctx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Settings for containerd\nDESCRIPTION: Shows a basic TOML configuration for containerd, including settings for storage locations, OOM score, and various API endpoints for GRPC, debugging, and metrics.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/ops.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n\n# persistent data location\nroot = \"/var/lib/containerd\"\n# runtime state information\nstate = \"/run/containerd\"\n# set containerd's OOM score\noom_score = -999\n\n# grpc configuration\n[grpc]\n  address = \"/run/containerd/containerd.sock\"\n  # socket uid\n  uid = 0\n  # socket gid\n  gid = 0\n\n# debug configuration\n[debug]\n  address = \"/run/containerd/debug.sock\"\n  # socket uid\n  uid = 0\n  # socket gid\n  gid = 0\n  # debug level\n  level = \"info\"\n\n# metrics configuration\n[metrics]\n  # tcp address!\n  address = \"127.0.0.1:1234\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Running Task with Containerd in Go\nDESCRIPTION: This snippet shows how to create a running task from a container using containerd. It sets up IO streams and defers task deletion for cleanup.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ntask, err := container.NewTask(ctx, cio.NewCreator(cio.WithStdio))\nif err != nil {\n\treturn err\n}\ndefer task.Delete(ctx)\n```\n\n----------------------------------------\n\nTITLE: Checkpoint and Restore Operations in Containerd\nDESCRIPTION: Demonstrates container checkpointing and restoration, including registry operations for checkpoint storage and migration.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/features.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// checkpoint the task then push it to a registry\ncheckpoint, err := task.Checkpoint(context)\n\nerr := client.Push(context, \"myregistry/checkpoints/redis:master\", checkpoint)\n\n// on a new machine pull the checkpoint and restore the redis container\ncheckpoint, err := client.Pull(context, \"myregistry/checkpoints/redis:master\")\n\nredis, err = client.NewContainer(context, \"redis-master\", containerd.WithNewSnapshot(\"redis-rootfs\", checkpoint))\ndefer container.Delete(context)\n\ntask, err = redis.NewTask(context, cio.NewCreator(cio.WithStdio), containerd.WithTaskCheckpoint(checkpoint))\ndefer task.Delete(context)\n\nerr := task.Start(context)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Runtimes in containerd TOML Configuration\nDESCRIPTION: This TOML configuration snippet demonstrates how to set up two named runtime configurations ('runc' and 'other') for containerd. It specifies the default runtime, runtime types, and custom options for each runtime, including the binary paths for the OCI-compatible runtimes.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/man/containerd-config.toml.5.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[plugins]\n\n  [plugins.\"io.containerd.grpc.v1.cri\"]\n\n    [plugins.\"io.containerd.grpc.v1.cri\".containerd]\n      default_runtime_name = \"runc\"\n\n      [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes]\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n          privileged_without_host_devices = false\n          runtime_type = \"io.containerd.runc.v2\"\n\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n            BinaryName = \"/usr/bin/runc\"\n\n        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.other]\n          privileged_without_host_devices = false\n          runtime_type = \"io.containerd.runc.v2\"\n\n          [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.other.options]\n            BinaryName = \"/usr/bin/path-to-runtime\"\n```\n\n----------------------------------------\n\nTITLE: Docker Mirror Configuration\nDESCRIPTION: Configuration example for setting up local mirrors for Docker registry with different capabilities.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/hosts.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\nserver = \"https://registry-1.docker.io\"    # Exclude this to not use upstream\n\n[host.\"https://public-mirror.example.com\"]\n  capabilities = [\"pull\"]                  # Requires less trust, won't resolve tag to digest from this host\n[host.\"https://docker-mirror.internal\"]\n  capabilities = [\"pull\", \"resolve\"]\n  ca = \"docker-mirror.crt\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using xxHash in Go\nDESCRIPTION: This snippet demonstrates the basic API provided by the xxHash package, including functions for calculating hash values and a Digest type that implements hash.Hash64.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Sum64(b []byte) uint64\nfunc Sum64String(s string) uint64\ntype Digest struct{ ... }\n    func New() *Digest\n```\n\n----------------------------------------\n\nTITLE: Containerd Container Creation Steps in Go\nDESCRIPTION: Detailed Go code workflow for creating containers and managing snapshots using containerd client APIs, including content store population, image unpacking, and container creation.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/content-flow.md#2025-04-21_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// Step 1: Populate content store\nclient.Pull()\n// or content.Store API\n\n// Step 2: Unpack image layers\nimage.Unpack()\n// Alternative: Pull with unpacking option\nclient.Pull(WithPullUnpack())\n\n// Step 3: Create active snapshot\nSnapshotter.Prepare()\n\n// Step 4: Create container\nclient.NewContainer(WithNewSnapshot())\n```\n\n----------------------------------------\n\nTITLE: Displaying Containerd and CRI Plugin Status with crictl\nDESCRIPTION: This snippet shows the output of the 'crictl info' command, which provides comprehensive information about the Containerd runtime and CRI plugin configuration. The output includes status conditions, CNI configuration, runtime settings, registry information, and various other configuration parameters.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/crictl.md#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ crictl info\n{\n  \"status\": {\n    \"conditions\": [\n      {\n        \"type\": \"RuntimeReady\",\n        \"status\": true,\n        \"reason\": \"\",\n        \"message\": \"\"\n      },\n      {\n        \"type\": \"NetworkReady\",\n        \"status\": true,\n        \"reason\": \"\",\n        \"message\": \"\"\n      }\n    ]\n  },\n  \"cniconfig\": {\n    \"PluginDirs\": [\n      \"/opt/cni/bin\"\n    ],\n    \"PluginConfDir\": \"/etc/cni/net.d\",\n    \"PluginMaxConfNum\": 1,\n    \"Prefix\": \"eth\",\n    \"Networks\": []\n  },\n  \"config\": {\n    \"containerd\": {\n      \"snapshotter\": \"overlayfs\",\n      \"defaultRuntimeName\": \"runc\",\n      \"defaultRuntime\": {\n        \"runtimeType\": \"\",\n        \"runtimePath\": \"\",\n        \"runtimeEngine\": \"\",\n        \"PodAnnotations\": [],\n        \"ContainerAnnotations\": [],\n        \"runtimeRoot\": \"\",\n        \"options\": {},\n        \"privileged_without_host_devices\": false,\n        \"privileged_without_host_devices_all_devices_allowed\": false,\n        \"baseRuntimeSpec\": \"\",\n        \"cniConfDir\": \"\",\n        \"cniMaxConfNum\": 0,\n        \"snapshotter\": \"\",\n        \"sandboxMode\": \"\"\n      },\n      \"untrustedWorkloadRuntime\": {\n        \"runtimeType\": \"\",\n        \"runtimePath\": \"\",\n        \"runtimeEngine\": \"\",\n        \"PodAnnotations\": [],\n        \"ContainerAnnotations\": [],\n        \"runtimeRoot\": \"\",\n        \"options\": {},\n        \"privileged_without_host_devices\": false,\n        \"privileged_without_host_devices_all_devices_allowed\": false,\n        \"baseRuntimeSpec\": \"\",\n        \"cniConfDir\": \"\",\n        \"cniMaxConfNum\": 0,\n        \"snapshotter\": \"\",\n        \"sandboxMode\": \"\"\n      },\n      \"runtimes\": {\n        \"runc\": {\n          \"runtimeType\": \"io.containerd.runc.v2\",\n          \"runtimePath\": \"\",\n          \"runtimeEngine\": \"\",\n          \"PodAnnotations\": [],\n          \"ContainerAnnotations\": [],\n          \"runtimeRoot\": \"\",\n          \"options\": {\n            \"BinaryName\": \"\",\n            \"CriuImagePath\": \"\",\n            \"CriuPath\": \"\",\n            \"CriuWorkPath\": \"\",\n            \"IoGid\": 0,\n            \"IoUid\": 0,\n            \"NoNewKeyring\": false,\n            \"NoPivotRoot\": false,\n            \"Root\": \"\",\n            \"ShimCgroup\": \"\",\n            \"SystemdCgroup\": false\n          },\n          \"privileged_without_host_devices\": false,\n          \"privileged_without_host_devices_all_devices_allowed\": false,\n          \"baseRuntimeSpec\": \"\",\n          \"cniConfDir\": \"\",\n          \"cniMaxConfNum\": 0,\n          \"snapshotter\": \"\",\n          \"sandboxMode\": \"podsandbox\"\n        }\n      },\n      \"noPivot\": false,\n      \"disableSnapshotAnnotations\": true,\n      \"discardUnpackedLayers\": false,\n      \"ignoreBlockIONotEnabledErrors\": false,\n      \"ignoreRdtNotEnabledErrors\": false\n    },\n    \"cni\": {\n      \"binDir\": \"/opt/cni/bin\",\n      \"confDir\": \"/etc/cni/net.d\",\n      \"maxConfNum\": 1,\n      \"setupSerially\": false,\n      \"confTemplate\": \"\",\n      \"ipPref\": \"\"\n    },\n    \"registry\": {\n      \"configPath\": \"\",\n      \"mirrors\": {},\n      \"configs\": {},\n      \"auths\": {},\n      \"headers\": {}\n    },\n    \"imageDecryption\": {\n      \"keyModel\": \"node\"\n    },\n    \"disableTCPService\": true,\n    \"streamServerAddress\": \"127.0.0.1\",\n    \"streamServerPort\": \"0\",\n    \"streamIdleTimeout\": \"4h0m0s\",\n    \"enableSelinux\": false,\n    \"selinuxCategoryRange\": 1024,\n    \"sandboxImage\": \"registry.k8s.io/pause:3.10\",\n    \"statsCollectPeriod\": 10,\n    \"systemdCgroup\": false,\n    \"enableTLSStreaming\": false,\n    \"x509KeyPairStreaming\": {\n      \"tlsCertFile\": \"\",\n      \"tlsKeyFile\": \"\"\n    },\n    \"maxContainerLogSize\": 16384,\n    \"disableCgroup\": false,\n    \"disableApparmor\": false,\n    \"restrictOOMScoreAdj\": false,\n    \"maxConcurrentDownloads\": 3,\n    \"disableProcMount\": false,\n    \"unsetSeccompProfile\": \"\",\n    \"tolerateMissingHugetlbController\": true,\n    \"disableHugetlbController\": true,\n    \"device_ownership_from_security_context\": false,\n    \"ignoreImageDefinedVolumes\": false,\n    \"netnsMountsUnderStateDir\": false,\n    \"enableUnprivilegedPorts\": false,\n    \"enableUnprivilegedICMP\": false,\n    \"enableCDI\": false,\n    \"cdiSpecDirs\": [\n      \"/etc/cdi\",\n      \"/var/run/cdi\"\n    ],\n    \"imagePullProgressTimeout\": \"1m0s\",\n    \"drainExecSyncIOTimeout\": \"0s\",\n    \"containerdRootDir\": \"/var/lib/containerd\",\n    \"containerdEndpoint\": \"/run/containerd/containerd.sock\",\n    \"rootDir\": \"/var/lib/containerd/io.containerd.grpc.v1.cri\",\n    \"stateDir\": \"/run/containerd/io.containerd.grpc.v1.cri\"\n  },\n  \"golang\": \"go1.20.3\",\n  \"lastCNILoadStatus\": \"OK\",\n  \"lastCNILoadStatus.default\": \"OK\"\n}\n```\n\n----------------------------------------\n\nTITLE: ContainerD Tasks Service Definition in Protocol Buffers\nDESCRIPTION: Protocol buffer definition for the ContainerD Tasks service, which provides container lifecycle management capabilities including creation, starting, deletion, and monitoring of containers and their processes.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_67\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Tasks\"\n  method {\n    name: \"Create\"\n    input_type: \".containerd.services.tasks.v1.CreateTaskRequest\"\n    output_type: \".containerd.services.tasks.v1.CreateTaskResponse\"\n  }\n  method {\n    name: \"Start\"\n    input_type: \".containerd.services.tasks.v1.StartRequest\"\n    output_type: \".containerd.services.tasks.v1.StartResponse\"\n  }\n  method {\n    name: \"Delete\"\n    input_type: \".containerd.services.tasks.v1.DeleteTaskRequest\"\n    output_type: \".containerd.services.tasks.v1.DeleteResponse\"\n  }\n  method {\n    name: \"DeleteProcess\"\n    input_type: \".containerd.services.tasks.v1.DeleteProcessRequest\"\n    output_type: \".containerd.services.tasks.v1.DeleteResponse\"\n  }\n  method {\n    name: \"Get\"\n    input_type: \".containerd.services.tasks.v1.GetRequest\"\n    output_type: \".containerd.services.tasks.v1.GetResponse\"\n  }\n  method {\n    name: \"List\"\n    input_type: \".containerd.services.tasks.v1.ListTasksRequest\"\n    output_type: \".containerd.services.tasks.v1.ListTasksResponse\"\n  }\n  method {\n    name: \"Kill\"\n    input_type: \".containerd.services.tasks.v1.KillRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"Exec\"\n    input_type: \".containerd.services.tasks.v1.ExecProcessRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"ResizePty\"\n    input_type: \".containerd.services.tasks.v1.ResizePtyRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"CloseIO\"\n    input_type: \".containerd.services.tasks.v1.CloseIORequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"Pause\"\n    input_type: \".containerd.services.tasks.v1.PauseTaskRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"Resume\"\n    input_type: \".containerd.services.tasks.v1.ResumeTaskRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"ListPids\"\n    input_type: \".containerd.services.tasks.v1.ListPidsRequest\"\n    output_type: \".containerd.services.tasks.v1.ListPidsResponse\"\n  }\n  method {\n    name: \"Checkpoint\"\n    input_type: \".containerd.services.tasks.v1.CheckpointTaskRequest\"\n    output_type: \".containerd.services.tasks.v1.CheckpointTaskResponse\"\n  }\n  method {\n    name: \"Update\"\n    input_type: \".containerd.services.tasks.v1.UpdateTaskRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"Metrics\"\n    input_type: \".containerd.services.tasks.v1.MetricsRequest\"\n    output_type: \".containerd.services.tasks.v1.MetricsResponse\"\n  }\n  method {\n    name: \"Wait\"\n    input_type: \".containerd.services.tasks.v1.WaitRequest\"\n    output_type: \".containerd.services.tasks.v1.WaitResponse\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling YAML in Go with yaml.v3\nDESCRIPTION: This example demonstrates how to unmarshal YAML data into both a structured type and a generic map, and then marshal them back to YAML format. It showcases struct tag usage for field renaming and flow style control, as well as error handling for YAML operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/gopkg.in/yaml.v3/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Compressing Data Stream Using Encoder in Go\nDESCRIPTION: This function provides a simple way to compress data from an input stream to an output stream using the zstd encoder. It initializes the encoder, copies the data from the input to the encoder, and handles any errors while ensuring the encoder is properly closed.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Compress input to output.\nfunc Compress(in io.Reader, out io.Writer) error {\n    enc, err := zstd.NewWriter(out)\n    if err != nil {\n        return err\n    }\n    _, err = io.Copy(enc, in)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    return enc.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Committing a Container Snapshot in Go\nDESCRIPTION: Shows how to commit a container's filesystem changes to create a new image snapshot using the Snapshotter API in Go.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/design/snapshots.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nif err := snapshotter.Commit(newImageSnapshot, containerKey); err != nil { ... }\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Image using dist pull in containerd\nDESCRIPTION: This snippet demonstrates how to pull a Docker image (redis:latest) using the 'dist pull' command in containerd. It shows the progress of pulling different layers and the final status of the pulled image.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-03-17.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo ./bin/dist pull docker.io/library/redis:latest\ndocker.io/library/redis:latest:                                                   resolved       |++++++++++++++++++++++++++++++++++++++|\nmanifest-sha256:4c8fb09e8d634ab823b1c125e64f0e1ceaf216025aa38283ea1b42997f1e8059: done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:3b281f2bcae3b25c701d53a219924fffe79bdb74385340b73a539ed4020999c4:    done           |++++++++++++++++++++++++++++++++++++++|\nconfig-sha256:e4a35914679d05d25e2fccfd310fde1aa59ffbbf1b0b9d36f7b03db5ca0311b0:   done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:4b7726832aec75f0a742266c7190c4d2217492722dfd603406208eaa902648d8:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:338a7133395941c85087522582af182d2f6477dbf54ba769cb24ec4fd91d728f:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:83f12ff60ff1132d1e59845e26c41968406b4176c1a85a50506c954696b21570:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:693502eb7dfbc6b94964ae66ebc72d3e32facd981c72995b09794f1e87bac184:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:622732cddc347afc9360b4b04b46c6f758191a1dc73d007f95548658847ee67e:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:19a7e34366a6f558336c364693df538c38307484b729a36fede76432789f084f:    done           |++++++++++++++++++++++++++++++++++++++|\nelapsed: 1.6 s                                                                    total:   0.0 B (0.0 B/s)\nINFO[0001] unpacking rootfs\n```\n\n----------------------------------------\n\nTITLE: Pulling Redis Image with Containerd in Go\nDESCRIPTION: This snippet demonstrates how to use the containerd client to pull the Redis Alpine image from DockerHub. It uses the WithPullUnpack option to both fetch and unpack the image content.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimage, err := client.Pull(ctx, \"docker.io/library/redis:alpine\", containerd.WithPullUnpack)\nif err != nil {\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Logrus with Formatters, Outputs, and Levels in Go\nDESCRIPTION: A comprehensive example showing how to configure Logrus with JSON formatting, custom output destination, and log level. It also demonstrates creating structured logs with various severity levels and reusing log entry fields.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  // Log as JSON instead of the default ASCII formatter.\n  log.SetFormatter(&log.JSONFormatter{})\n\n  // Output to stdout instead of the default stderr\n  // Can be any io.Writer, see below for File example\n  log.SetOutput(os.Stdout)\n\n  // Only log the warning severity or above.\n  log.SetLevel(log.WarnLevel)\n}\n\nfunc main() {\n  log.WithFields(log.Fields{\n    \"animal\": \"walrus\",\n    \"size\":   10,\n  }).Info(\"A group of walrus emerges from the ocean\")\n\n  log.WithFields(log.Fields{\n    \"omg\":    true,\n    \"number\": 122,\n  }).Warn(\"The group's number increased tremendously!\")\n\n  log.WithFields(log.Fields{\n    \"omg\":    true,\n    \"number\": 100,\n  }).Fatal(\"The ice breaks!\")\n\n  // A common pattern is to re-use fields between logging statements by re-using\n  // the logrus.Entry returned from WithFields()\n  contextLogger := log.WithFields(log.Fields{\n    \"common\": \"this is a common field\",\n    \"other\": \"I also should be logged always\",\n  })\n\n  contextLogger.Info(\"I'll be logged with common and other field\")\n  contextLogger.Info(\"Me too\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Type and Path in Containerd\nDESCRIPTION: Defines the runtime type and optional path for containerd. The default runtime type is 'io.containerd.runc.v2' in containerd 1.4, which was different in earlier versions. The runtime_path can be used to override the path to a shim runtime binary.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\nruntime_type = \"io.containerd.runc.v2\"\n\n# runtime_path is an optional field that can be used to overwrite path to a shim runtime binary.\n# When specified, containerd will ignore runtime name field when resolving shim location.\n# Path must be abs.\nruntime_path = \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Process Message Type in Protobuf\nDESCRIPTION: This snippet defines the `Process` message type within a protobuf definition.  It represents a process running inside a container and includes fields for its ID, PID, status, I/O streams, terminal settings, and exit information.  It is used for representing processes within the containerd task management system.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_14\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"Process\"\n    field {\n      name: \"container_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"containerId\"\n    }\n    field {\n      name: \"id\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"pid\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"pid\"\n    }\n    field {\n      name: \"status\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_ENUM\n      type_name: \".containerd.v1.types.Status\"\n      json_name: \"status\"\n    }\n    field {\n      name: \"stdin\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"stdin\"\n    }\n    field {\n      name: \"stdout\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"stdout\"\n    }\n    field {\n      name: \"stderr\"\n      number: 7\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"stderr\"\n    }\n    field {\n      name: \"terminal\"\n      number: 8\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"terminal\"\n    }\n    field {\n      name: \"exit_status\"\n      number: 9\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"exitStatus\"\n    }\n    field {\n      name: \"exited_at\"\n      number: 10\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Timestamp\"\n      json_name: \"exitedAt\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating containerd Client for Docker in Go\nDESCRIPTION: Example of creating a containerd client instance for the Docker namespace. This demonstrates the initial client implementation in the containerd Go API.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-05-26.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nclient, err := containerd.New(address, containerd.WithNamespace(\"docker\"))\nif err != nil {\n\treturn err\n}\ndefer client.Close()\n```\n\n----------------------------------------\n\nTITLE: Killing a Task and Handling Exit Status with Containerd in Go\nDESCRIPTION: This snippet shows how to kill a running task, wait for its exit status, and handle the result. It demonstrates proper cleanup and error handling for a containerd task.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ntime.Sleep(3 * time.Second)\n\nif err := task.Kill(ctx, syscall.SIGTERM); err != nil {\n\treturn err\n}\n\nstatus := <-exitStatusC\ncode, exitedAt, err := status.Result()\nif err != nil {\n\treturn err\n}\nfmt.Printf(\"redis-server exited with status: %d\\n\", code)\n```\n\n----------------------------------------\n\nTITLE: Task Management in Containerd\nDESCRIPTION: Shows how to create, start, and manage container tasks including process management and exit status handling.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/features.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// create a new task\ntask, err := redis.NewTask(context, cio.NewCreator(cio.WithStdio))\ndefer task.Delete(context)\n\n// the task is now running and has a pid that can be used to setup networking\n// or other runtime settings outside of containerd\npid := task.Pid()\n\n// start the redis-server process inside the container\nerr := task.Start(context)\n\n// wait for the task to exit and get the exit status\nstatus, err := task.Wait(context)\n```\n\n----------------------------------------\n\nTITLE: Defining Container Service in Protocol Buffers\nDESCRIPTION: Defines the Containers service with methods for managing containers including Get, List, Create, Update, and Delete operations. It specifies request and response message types for each method.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_6\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nservice {\n  name: \"Containers\"\n  method {\n    name: \"Get\"\n    input_type: \".containerd.services.containers.v1.GetContainerRequest\"\n    output_type: \".containerd.services.containers.v1.GetContainerResponse\"\n  }\n  method {\n    name: \"List\"\n    input_type: \".containerd.services.containers.v1.ListContainersRequest\"\n    output_type: \".containerd.services.containers.v1.ListContainersResponse\"\n  }\n  method {\n    name: \"Create\"\n    input_type: \".containerd.services.containers.v1.CreateContainerRequest\"\n    output_type: \".containerd.services.containers.v1.CreateContainerResponse\"\n  }\n  method {\n    name: \"Update\"\n    input_type: \".containerd.services.containers.v1.UpdateContainerRequest\"\n    output_type: \".containerd.services.containers.v1.UpdateContainerResponse\"\n  }\n  method {\n    name: \"Delete\"\n    input_type: \".containerd.services.containers.v1.DeleteContainerRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Containerd Namespaces in Go\nDESCRIPTION: Demonstrates how to set namespaces for API requests and create containers within specific namespaces.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/features.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncontext = context.Background()\n// create a context for docker\ndocker = namespaces.WithNamespace(context, \"docker\")\n\ncontainerd, err := client.NewContainer(docker, \"id\")\n```\n\nLANGUAGE: go\nCODE:\n```\nclient, err := containerd.New(address, containerd.WithDefaultNamespace(\"docker\"))\n```\n\n----------------------------------------\n\nTITLE: Performing Range Scans in BoltDB with Go\nDESCRIPTION: Scans a time range using a cursor and comparison of RFC3339 encoded keys. The example iterates from the minimum date (1990) to the maximum date (2000), printing each record.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ndb.View(func(tx *bolt.Tx) error {\n\t// Assume our events bucket exists and has RFC3339 encoded time keys.\n\tc := tx.Bucket([]byte(\"Events\")).Cursor()\n\n\t// Our time range spans the 90's decade.\n\tmin := []byte(\"1990-01-01T00:00:00Z\")\n\tmax := []byte(\"2000-01-01T00:00:00Z\")\n\n\t// Iterate over the 90's.\n\tfor k, v := c.Seek(min); k != nil && bytes.Compare(k, max) <= 0; k, v = c.Next() {\n\t\tfmt.Printf(\"%s: %s\\n\", k, v)\n\t}\n\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Defining CreateTaskRequest Message Type in Protobuf\nDESCRIPTION: This snippet defines the `CreateTaskRequest` message for protobuf. It outlines the structure for requesting the creation of a task, including parameters such as ID, bundle path, root filesystem mounts, terminal flag, I/O streams, checkpoint information, and options. It enables specifying the necessary details for task creation within containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_17\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"CreateTaskRequest\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"bundle\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"bundle\"\n    }\n    field {\n      name: \"rootfs\"\n      number: 3\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.types.Mount\"\n      json_name: \"rootfs\"\n    }\n    field {\n      name: \"terminal\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"terminal\"\n    }\n    field {\n      name: \"stdin\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"stdin\"\n    }\n    field {\n      name: \"stdout\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"stdout\"\n    }\n    field {\n      name: \"stderr\"\n      number: 7\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"stderr\"\n    }\n    field {\n      name: \"checkpoint\"\n      number: 8\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"checkpoint\"\n    }\n    field {\n      name: \"parent_checkpoint\"\n      number: 9\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"parentCheckpoint\"\n    }\n    field {\n      name: \"options\"\n      number: 10\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Any\"\n      json_name: \"options\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Cloning the OpenTelemetry Go Repository\nDESCRIPTION: Command to clone the OpenTelemetry Go repository from GitHub to start development. This is the first step for contributors to get the source code locally.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go.git\n```\n\n----------------------------------------\n\nTITLE: Creating a New WebService and Defining Routes\nDESCRIPTION: This example shows how to create a new WebService instance and configure it with routes, request types, and response formats using the Go-Restful package.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/emicklei/go-restful/v3/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nws := new(restful.WebService)\nws.\n\tPath(\"/users\").\n\tConsumes(restful.MIME_XML, restful.MIME_JSON).\n\tProduces(restful.MIME_JSON, restful.MIME_XML)\n\nws.Route(ws.GET(\"/{user-id}\").To(u.findUser).\n\tDoc(\"get a user\").\n\tParam(ws.PathParameter(\"user-id\", \"identifier of the user\").DataType(\"string\")).\n\tWrites(User{}))\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshot Service Proto Messages in Containerd\nDESCRIPTION: Protocol Buffer definitions for Containerd's snapshots service API. This includes message types for operations like preparing, viewing, mounting, and managing filesystem snapshots, with fields for snapshotter identification, keys, parents, and labels.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_57\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"github.com/containerd/containerd/api/services/snapshots/v1/snapshots.proto\"\n  package: \"containerd.services.snapshots.v1\"\n  dependency: \"google/protobuf/empty.proto\"\n  dependency: \"google/protobuf/field_mask.proto\"\n  dependency: \"google/protobuf/timestamp.proto\"\n  dependency: \"github.com/containerd/containerd/api/types/mount.proto\"\n  message_type {\n    name: \"PrepareSnapshotRequest\"\n    field {\n      name: \"snapshotter\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"snapshotter\"\n    }\n    field {\n      name: \"key\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"parent\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"parent\"\n    }\n    field {\n      name: \"labels\"\n      number: 4\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.snapshots.v1.PrepareSnapshotRequest.LabelsEntry\"\n      json_name: \"labels\"\n    }\n    nested_type {\n      name: \"LabelsEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Listing Containerd Snapshots\nDESCRIPTION: List all current snapshots in the containerd snapshot store, showing snapshot keys, parents, and their current state (Active or Committed).\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/content-flow.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nctr snapshot ls\n```\n\n----------------------------------------\n\nTITLE: Fetching and Ingesting Image Layers Using dist Command in Bash\nDESCRIPTION: This complex Bash pipeline fetches a Docker image manifest, extracts layer information using jq, and then downloads and ingests each layer into the local content store. It demonstrates parallel processing of layers and handling of concurrent downloads.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-01-27.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./dist fetch docker.io/library/redis latest mediatype:application/vnd.docker.distribution.manifest.v2+json | \\\n\tjq -r '.layers[] | \"./dist fetch docker.io/library/redis \"+.digest + \"| ./dist ingest --expected-digest \"+.digest+\" --expected-size \"+(.size | tostring) +\" docker.io/library/redis@\"+.digest' | xargs -I{} -P10 -n1 sh -c \"{}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Credentials in Containerd 1.x\nDESCRIPTION: This TOML snippet shows how to configure registry credentials for a specific registry (gcr.io) in containerd 1.x.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/registry.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n\n[plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"gcr.io\".auth]\n  username = \"\"\n  password = \"\"\n  auth = \"\"\n  identitytoken = \"\"\n```\n\n----------------------------------------\n\nTITLE: Containerd 2.x CRI Registry Configuration\nDESCRIPTION: TOML configuration for registry config_path in containerd 2.x using CRI plugin.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/hosts.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nversion = 3\n\n[plugins.\"io.containerd.cri.v1.images\".registry]\n   config_path = \"/etc/containerd/certs.d\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using Go Client API\nDESCRIPTION: Go code snippet demonstrating how to pull and install an image using the containerd client API.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/managed-opt.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimage, err := client.Pull(ctx, \"docker.io/crosbymichael/runc:latest\")\nclient.Install(ctx, image)\n```\n\n----------------------------------------\n\nTITLE: OCI Specification Configuration in Containerd\nDESCRIPTION: Shows how to create a container with OCI runtime specifications based on image configuration.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/features.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nredis, err := client.NewContainer(context, \"redis-master\", containerd.WithNewSpec(oci.WithImageConfig(image)))\n```\n\n----------------------------------------\n\nTITLE: Defining Task Service RPC Methods in Protocol Buffers\nDESCRIPTION: Specifies the Task service with RPC methods for container task management, including State, Create, Start, Delete, and Pids operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_32\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nservice {\n    name: \"Task\"\n    method {\n      name: \"State\"\n      input_type: \".containerd.task.v3.StateRequest\"\n      output_type: \".containerd.task.v3.StateResponse\"\n    }\n    method {\n      name: \"Create\"\n      input_type: \".containerd.task.v3.CreateTaskRequest\"\n      output_type: \".containerd.task.v3.CreateTaskResponse\"\n    }\n    method {\n      name: \"Start\"\n      input_type: \".containerd.task.v3.StartRequest\"\n      output_type: \".containerd.task.v3.StartResponse\"\n    }\n    method {\n      name: \"Delete\"\n      input_type: \".containerd.task.v3.DeleteRequest\"\n      output_type: \".containerd.task.v3.DeleteResponse\"\n    }\n    method {\n      name: \"Pids\"\n      input_type: \".containerd.task.v3.PidsRequest\"\n      output_type: \".containerd.task.v3.PidsResponse\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: XXH64 Hashing: Sum64 Function in Go\nDESCRIPTION: The `Sum64` function computes the 64-bit xxHash of a byte slice. It provides a fast and efficient way to generate a hash value from the input byte array. This function is optimized with both pure Go and assembly implementations for better performance.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Sum64(b []byte) uint64\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Certificate for Registry in Containerd (TOML)\nDESCRIPTION: This example shows how to configure a custom certificate for a specific registry in containerd's hosts.toml file.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_24\n\nLANGUAGE: toml\nCODE:\n```\nserver = \"https://192.168.12.34:5000\"\n\n[host.\"https://192.168.12.34:5000\"]\n  ca = \"/path/to/ca.crt\"\n```\n\n----------------------------------------\n\nTITLE: YAML-JSON Conversion in Go\nDESCRIPTION: Shows how to convert between YAML and JSON formats using yaml.YAMLToJSON and yaml.JSONToYAML methods.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/sigs.k8s.io/yaml/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"sigs.k8s.io/yaml\"\n)\n\nfunc main() {\n\tj := []byte(`{\"name\": \"John\", \"age\": 30}`)\n\ty, err := yaml.JSONToYAML(j)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(y))\n\t/* Output:\n\tage: 30\n\tname: John\n\t*/\n\tj2, err := yaml.YAMLToJSON(y)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(j2))\n\t/* Output:\n\t{\"age\":30,\"name\":\"John\"}\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CNI Settings in Containerd CRI Plugin\nDESCRIPTION: Defines global CNI (Container Network Interface) settings for the CRI plugin, including binary directory, configuration directory, and IP preference strategy for pod networking.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_20\n\nLANGUAGE: toml\nCODE:\n```\n# 'plugins.\"io.containerd.grpc.v1.cri\".cni' contains config related to cni\n[plugins.\"io.containerd.grpc.v1.cri\".cni]\n  # bin_dir is the directory in which the binaries for the plugin is kept.\n  bin_dir = \"/opt/cni/bin\"\n\n  # conf_dir is the directory in which the admin places a CNI conf.\n  conf_dir = \"/etc/cni/net.d\"\n\n  # max_conf_num specifies the maximum number of CNI plugin config files to\n  # load from the CNI config directory. By default, only 1 CNI plugin config\n  # file will be loaded. If you want to load multiple CNI plugin config files\n  # set max_conf_num to the number desired. Setting max_config_num to 0 is\n  # interpreted as no limit is desired and will result in all CNI plugin\n  # config files being loaded from the CNI config directory.\n  max_conf_num = 1\n\n  # conf_template is the file path of golang template used to generate\n  # cni config.\n  # If this is set, containerd will generate a cni config file from the\n  # template. Otherwise, containerd will wait for the system admin or cni\n  # daemon to drop the config file into the conf_dir.\n  # See the \"CNI Config Template\" section for more details.\n  conf_template = \"\"\n  # ip_pref specifies the strategy to use when selecting the main IP address for a pod.\n  # options include:\n  # * ipv4, \"\" - (default) select the first ipv4 address\n  # * ipv6 - select the first ipv6 address\n  # * cni - use the order returned by the CNI plugins, returning the first IP address from the results\n  ip_pref = \"ipv4\"\n  # use_internal_loopback specifies if we use the CNI loopback plugin or internal mechanism to set lo to up\n  use_internal_loopback = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Containerd Runtime Settings\nDESCRIPTION: Configuration block for containerd-specific settings including snapshotter, runtime behavior, and feature flags.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[plugins.\"io.containerd.grpc.v1.cri\".containerd]\n  snapshotter = \"overlayfs\"\n  no_pivot = false\n  disable_snapshot_annotations = true\n  discard_unpacked_layers = false\n  default_runtime_name = \"runc\"\n  ignore_blockio_not_enabled_errors = false\n  ignore_rdt_not_enabled_errors = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Containerd Plugins with Version 3 in TOML\nDESCRIPTION: This snippet shows the configuration format for version 3, which is recommended for containerd 2.x. It illustrates the version header and the updated plugin ID format for the cgroups monitoring plugin.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/PLUGINS.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nversion = 3\n\n[plugins]\n  [plugins.'io.containerd.monitor.task.v1.cgroups']\n    no_prometheus = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Credentials in Containerd 2.x\nDESCRIPTION: This TOML snippet shows how to configure registry credentials for a specific registry (gcr.io) in containerd 2.x.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/registry.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nversion = 3\n\n[plugins.\"io.containerd.cri.v1.images\".registry.configs.\"gcr.io\".auth]\n  username = \"\"\n  password = \"\"\n  auth = \"\"\n  identitytoken = \"\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a Container in a Pod Sandbox\nDESCRIPTION: Example of creating and running a container within a pod sandbox using JSON configuration files with crictl.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/crictl.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ cat container-config.json\n{\n  \"metadata\": {\n      \"name\": \"busybox\"\n  },\n  \"image\":{\n      \"image\": \"busybox\"\n  },\n  \"command\": [\n      \"top\"\n  ],\n  \"linux\": {\n  }\n}\n\n$ crictl create e1c83 container-config.json sandbox-config.json\n0a2c761303163f2acaaeaee07d2ba143ee4cea7e3bde3d32190e2a36525c8a05\n$ crictl ps -a\nCONTAINER ID        IMAGE               CREATED             STATE               NAME                ATTEMPT\n0a2c761303163       docker.io/busybox   2 hours ago         CONTAINER_CREATED   busybox             0\n$ crictl start 0a2c\n0a2c761303163f2acaaeaee07d2ba143ee4cea7e3bde3d32190e2a36525c8a05\n$ crictl ps\nCONTAINER ID        IMAGE               CREATED             STATE               NAME                ATTEMPT\n0a2c761303163       docker.io/busybox   2 hours ago         CONTAINER_RUNNING   busybox             0\n$ crictl inspect 0a2c7\n  ... show detailed information about the container\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshotter, Sandboxer, and IO Type in Containerd\nDESCRIPTION: Specifies custom settings for snapshotter, sandbox controller, and IO type. The snapshotter can override the global default, the sandboxer controls sandbox behavior, and io_type defines how containerd gets stdin/stdout/stderr from containers.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_18\n\nLANGUAGE: toml\nCODE:\n```\n# snapshotter overrides the global default snapshotter to a runtime specific value.\n# Please be aware that overriding the default snapshotter on a runtime basis is currently an experimental feature.\n# See https://github.com/containerd/containerd/issues/6657 for context.\nsnapshotter = \"\"\n\n# sandboxer is the sandbox controller for the runtime.\n# The default sandbox controller is the podsandbox controller, which create a \"pause\" container as a sandbox.\n# We can create our own \"shim\" sandbox controller by implementing the sandbox api defined in runtime/sandbox/v1/sandbox.proto in our shim, and specifiy the sandboxer to \"shim\" here.\n# We can also run a grpc or ttrpc server to serve the sandbox controller API defined in services/sandbox/v1/sandbox.proto, and define a ProxyPlugin of \"sandbox\" type, and specify the name of the ProxyPlugin here.\nsandboxer = \"\"\n\n# io_type is the way containerd get stdin/stdout/stderr from container or the execed process.\n# The default value is \"fifo\", in which containerd will create a set of named pipes and transfer io by them.\n# Currently the value of \"streaming\" is supported, in this way, sandbox should serve streaming api defined in services/streaming/v1/streaming.proto, and containerd will connect to sandbox's endpoint and create a set of streams to it, as channels to transfer io of container or process.\nio_type = \"\"\n```\n\n----------------------------------------\n\nTITLE: Starting Containerd Daemon\nDESCRIPTION: Command to start the containerd daemon with a specific configuration file.\nSOURCE: https://github.com/containerd/containerd/blob/main/BUILDING.md#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncontainerd --config config.toml\n```\n\n----------------------------------------\n\nTITLE: Creating Redis Rootfs using Containerd\nDESCRIPTION: This code snippet shows how to fetch the Redis image manifest, extract layer information, and apply each layer sequentially to create a full Redis container root filesystem. It uses jq for JSON parsing and xargs for command execution.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-01-27.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmkdir redis-rootfs\n./dist fetch docker.io/library/redis latest mediatype:application/vnd.docker.distribution.manifest.v2+json | \\\n\tjq -r '.layers[] | \"sudo ./dist apply ./redis-rootfs < $(./dist path -q \"+.digest+\")\"' | xargs -I{} -n1 sh -c \"{}\"\n```\n\n----------------------------------------\n\nTITLE: Pulling and Unpacking Docker Image using containerd Client in Go\nDESCRIPTION: Example of pulling a Docker image from DockerHub and unpacking it to a snapshot using the containerd client. This showcases the image management capabilities of the containerd API.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-05-26.md#2025-04-21_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// pull && unpack the image to your snapshot ( overlayfs default ) of choice\nimage, err := client.Pull(ctx, \"docker.io/library/redis:alpine\", containerd.WithPullUnpack)\nif err != nil {\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Using ImageHandlerWrapper for Dynamic Labels in Go\nDESCRIPTION: This snippet illustrates how to use the WithImageHandlerWrapper option to pass dynamic user-defined labels to the snapshotter. It uses the AppendInfoHandlerWrapper from the snapshotters package to append annotations to layer descriptors.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/remote-snapshotter.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tcontainerd \"github.com/containerd/containerd/v2/client\"\n\t\"github.com/containerd/containerd/v2/pkg/snapshotters\"\n)\n\nif _, err := client.Pull(ctx, ref,\n\tcontainerd.WithPullUnpack,\n\tcontainerd.WithPullSnapshotter(\"my-remote-snapshotter\"),\n\tcontainerd.WithImageHandlerWrapper(snapshotters.AppendInfoHandlerWrapper(ref)),\n)\n```\n\n----------------------------------------\n\nTITLE: Encrypting an Image using ctr-enc\nDESCRIPTION: This command encrypts a container image using the `ctr-enc` tool. The `--recipient` flag specifies the JWE (JSON Web Encryption) recipient using a public key. The `--platform` flag is used to specify the target architecture of the image. Requires a public key and proper configuration of `ctr-enc`.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/imgcrypt/v2/README.md#2025-04-21_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n# $CTR images encrypt --recipient jwe:mypubkey.pem --platform linux/amd64 docker.io/library/bash:latest bash.enc:latest\nEncrypting docker.io/library/bash:latest to bash.enc:latest\n```\n\n----------------------------------------\n\nTITLE: Adding an IP Address to Loopback Interface in Go\nDESCRIPTION: This example shows how to add a new IP address (169.254.169.254/32) to the loopback interface using the netlink library. It retrieves the loopback interface with LinkByName, parses the IP address, and then adds it with AddrAdd.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/vishvananda/netlink/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"github.com/vishvananda/netlink\"\n)\n\nfunc main() {\n    lo, _ := netlink.LinkByName(\"lo\")\n    addr, _ := netlink.ParseAddr(\"169.254.169.254/32\")\n    netlink.AddrAdd(lo, addr)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Service Methods in Containerd - Protobuf\nDESCRIPTION: This snippet outlines the Content service methods which define the operations available for the containerd content API. Each method includes the name, input type, and output type, specifying how services interact with content requests. It includes methods like Info, Update, and List, and distinguishes between client and server streaming.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_17\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Content\"\n  method {\n    name: \"Info\"\n    input_type: \".containerd.services.content.v1.InfoRequest\"\n    output_type: \".containerd.services.content.v1.InfoResponse\"\n  }\n  method {\n    name: \"Update\"\n    input_type: \".containerd.services.content.v1.UpdateRequest\"\n    output_type: \".containerd.services.content.v1.UpdateResponse\"\n  }\n  method {\n    name: \"List\"\n    input_type: \".containerd.services.content.v1.ListContentRequest\"\n    output_type: \".containerd.services.content.v1.ListContentResponse\"\n    server_streaming: true\n  }\n  method {\n    name: \"Delete\"\n    input_type: \".containerd.services.content.v1.DeleteContentRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"Read\"\n    input_type: \".containerd.services.content.v1.ReadContentRequest\"\n    output_type: \".containerd.services.content.v1.ReadContentResponse\"\n    server_streaming: true\n  }\n  method {\n    name: \"Status\"\n    input_type: \".containerd.services.content.v1.StatusRequest\"\n    output_type: \".containerd.services.content.v1.StatusResponse\"\n  }\n  method {\n    name: \"ListStatuses\"\n    input_type: \".containerd.services.content.v1.ListStatusesRequest\"\n    output_type: \".containerd.services.content.v1.ListStatusesResponse\"\n  }\n  method {\n    name: \"Write\"\n    input_type: \".containerd.services.content.v1.WriteContentRequest\"\n    output_type: \".containerd.services.content.v1.WriteContentResponse\"\n    client_streaming: true\n    server_streaming: true\n  }\n  method {\n    name: \"Abort\"\n    input_type: \".containerd.services.content.v1.AbortRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Block Device Information in Go\nDESCRIPTION: Example showing how to initialize a filesystem object with both /proc and /sys paths to access block device information like disk statistics.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/prometheus/procfs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n    fs, err := blockdevice.NewFS(\"/proc\", \"/sys\")\n    stats, err := fs.ProcDiskstats()\n```\n\n----------------------------------------\n\nTITLE: Displaying containerd CLI Usage and Options\nDESCRIPTION: Shows the usage information, version, description, and available commands for the containerd CLI. It includes global options for configuration, logging, and runtime settings.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/ops.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNAME:\n   containerd -\n                    __        _                     __\n  _________  ____  / /_____ _(_)___  ___  _________/ /\n / ___/ __ \\/ __ \\/ __/ __ `/ / __ \\/ _ \\/ ___/ __  /\n/ /__/ /_/ / / / / /_/ /_/ / / / / /  __/ /  / /_/ /\n\\___/\\____/_/ /_/\\__/\\__,_/_/_/ /_/\\___/_/   \\__,_/\n\nhigh performance container runtime\n\n\nUSAGE:\n   containerd [global options] command [command options] [arguments...]\n\nVERSION:\n   v2.0.0-beta.0\n\nDESCRIPTION:\n\ncontainerd is a high performance container runtime whose daemon can be started\nby using this command. If none of the *config*, *publish*, *oci-hook*, or *help* commands\nare specified, the default action of the **containerd** command is to start the\ncontainerd daemon in the foreground.\n\n\nA default configuration is used if no TOML configuration is specified or located\nat the default file location. The *containerd config* command can be used to\ngenerate the default configuration for containerd. The output of that command\ncan be used and modified as necessary as a custom configuration.\n\nCOMMANDS:\n   config    Information on the containerd config\n   publish   Binary to publish events to containerd\n   oci-hook  Provides a base for OCI runtime hooks to allow arguments to be injected.\n   help, h   Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --config value, -c value     Path to the configuration file (default: \"/etc/containerd/config.toml\")\n   --log-level value, -l value  Set the logging level [trace, debug, info, warn, error, fatal, panic]\n   --address value, -a value    Address for containerd's GRPC server\n   --root value                 containerd root directory\n   --state value                containerd state directory\n   --help, -h                   Show help\n   --version, -v                Print the version\n```\n\n----------------------------------------\n\nTITLE: Listing Snapshotter Directories\nDESCRIPTION: Bash commands to explore containerd snapshotter directories and filesystem contents\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/content-flow.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# cd /var/lib/containerd\n# ls io.containerd.snapshotter.v1.overlayfs/snapshots/\n1  2  3  4  5  6\n\n# ls io.containerd.snapshotter.v1.overlayfs/snapshots/1/fs\nbin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n```\n\n----------------------------------------\n\nTITLE: Creating and Loading Container Image Tarball\nDESCRIPTION: Commands to create a container image tarball using Docker and load it into containerd using ctr.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/crictl.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull registry.k8s.io/pause:3.10\n  3.10: Pulling from pause\n  7582c2cc65ef: Pull complete\n  Digest: sha256:ee6521f290b2168b6e0935a181d4cff9be1ac3f505666ef0e3c98fae8199917a\n  Status: Downloaded newer image for registry.k8s.io/pause:3.10\n  registry.k8s.io/pause:3.10\n$ docker save registry.k8s.io/pause:3.10 -o pause.tar\n```\n\nLANGUAGE: console\nCODE:\n```\n$ sudo ctr -n=k8s.io images import pause.tar\n  Loaded image: registry.k8s.io/pause:3.10\n```\n\n----------------------------------------\n\nTITLE: Using concurrent.Map for Thread-Safe Key-Value Storage in Go\nDESCRIPTION: Demonstrates how to use concurrent.Map as a thread-safe alternative to sync.Map for Go versions below 1.9. The example shows basic operations like storing and loading values from the map.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/modern-go/concurrent/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nm := concurrent.NewMap()\nm.Store(\"hello\", \"world\")\nelem, found := m.Load(\"hello\")\n// elem will be \"world\"\n// found will be true\n```\n\n----------------------------------------\n\nTITLE: Using ns.Do() for Namespace Management in Go\nDESCRIPTION: The snippet demonstrates how to use the ns.Do() method to ensure that network operations are executed in the correct namespace context. This method wraps the code to maintain the required namespace for the duration of the operation, which is crucial for avoiding unexpected namespace switches.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containernetworking/plugins/pkg/ns/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nerr = targetNs.Do(func(hostNs ns.NetNS) error {\n\tlinkAttrs := netlink.NewLinkAttrs()\n\tlinkAttrs.Name = \"dummy0\"\n\tdummy := &netlink.Dummy{\n\t\tLinkAttrs: linkAttrs,\n\t}\n\treturn netlink.LinkAdd(dummy)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining ExecProcessRequest Message Type in Protobuf\nDESCRIPTION: This snippet defines the `ExecProcessRequest` message for protobuf. It is used to request the execution of a process inside a task, and contains information such as the task ID (`id`), execution ID (`exec_id`), terminal flag, I/O streams, and a specification (`spec`) represented as an `Any` type. The `spec` field provides flexibility for defining the process execution details.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_21\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"ExecProcessRequest\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"exec_id\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"execId\"\n    }\n    field {\n      name: \"terminal\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"terminal\"\n    }\n    field {\n      name: \"stdin\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"stdin\"\n    }\n    field {\n      name: \"stdout\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"stdout\"\n    }\n    field {\n      name: \"stderr\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"stderr\"\n    }\n    field {\n      name: \"spec\"\n      number: 7\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Any\"\n      json_name: \"spec\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Platform Specifier Format in Containerd\nDESCRIPTION: Defines the standard platform specifier format used for describing container platforms, supporting flexible input with OS, architecture, and optional variant\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/platforms/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n<os>|<arch>|<os>/<arch>[/<variant>]\n```\n\n----------------------------------------\n\nTITLE: Setting Namespace Labels with ctr CLI\nDESCRIPTION: Demonstrates how to set labels for a namespace using the ctr command-line tool, which can be used to configure default settings for containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/namespaces.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> sudo ctr namespaces label k8s.io containerd.io/defaults/snapshotter=btrfs\n> sudo ctr namespaces label k8s.io containerd.io/defaults/runtime=testRuntime\n```\n\n----------------------------------------\n\nTITLE: Invoking containerd with runc v2 runtime\nDESCRIPTION: Command to run an Alpine Linux container using the io.containerd.runc.v2 runtime with containerd's ctr CLI tool. This demonstrates how to explicitly specify a runtime when creating containers.\nSOURCE: https://github.com/containerd/containerd/blob/main/core/runtime/v2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nctr --runtime io.containerd.runc.v2 run --rm docker.io/library/alpine:latest alpine\n```\n\n----------------------------------------\n\nTITLE: Creating a new systemd cgroup v2\nDESCRIPTION: Creates a new systemd-managed cgroup v2 slice with a dummy PID of -1 used for creating a general parent slice.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/containerd/cgroups/v3/cgroup2\"\n    specs \"github.com/opencontainers/runtime-spec/specs-go\"\n)\n\nres := cgroup2.Resources{}\n// dummy PID of -1 is used for creating a \"general slice\" to be used as a parent cgroup.\n// see https://github.com/containerd/cgroups/blob/1df78138f1e1e6ee593db155c6b369466f577651/v2/manager.go#L732-L735\nm, err := cgroup2.NewSystemd(\"/\", \"my-cgroup-abc.slice\", -1, &res)\nif err != nil {\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Capabilities in TOML\nDESCRIPTION: This snippet defines a list of capabilities for a registry host in TOML format, indicating the operations like pull, resolve, and push that the host can perform. It requires no dependencies and accepts an array of string values.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/hosts.md#2025-04-21_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\ncapabilities =  [\"pull\", \"resolve\", \"push\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in go-zfs\nDESCRIPTION: This command creates a new feature branch for implementing changes or fixes, ensuring that the master branch remains clean and easy to merge later.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b <feature-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Modifying Console Settings in Go with containerd/console\nDESCRIPTION: This snippet demonstrates how to use the containerd/console package to access the current console, set it to raw mode, retrieve its size, and resize it. The code also shows proper cleanup by deferring the reset operation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/console/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncurrent := console.Current()\ndefer current.Reset()\n\nif err := current.SetRaw(); err != nil {\n}\nws, err := current.Size()\ncurrent.Resize(ws)\n```\n\n----------------------------------------\n\nTITLE: Implementing Fine-Grained Locking in Go using Locker\nDESCRIPTION: Example implementation of a thread-safe data structure using the locker package. Shows how to use named locks for concurrent access control along with a global mutex for data consistency. Demonstrates proper lock usage patterns for both read and write operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/moby/locker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage important\n\nimport (\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/moby/locker\"\n)\n\ntype important struct {\n\tlocks *locker.Locker\n\tdata  map[string]interface{}\n\tmu    sync.Mutex\n}\n\nfunc (i *important) Get(name string) interface{} {\n\ti.locks.Lock(name)\n\tdefer i.locks.Unlock(name)\n\treturn i.data[name]\n}\n\nfunc (i *important) Create(name string, data interface{}) {\n\ti.locks.Lock(name)\n\tdefer i.locks.Unlock(name)\n\n\ti.createImportant(data)\n\n\ti.mu.Lock()\n\ti.data[name] = data\n\ti.mu.Unlock()\n}\n\nfunc (i *important) createImportant(data interface{}) {\n\ttime.Sleep(10 * time.Second)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mount Targets in Containerd Snapshots\nDESCRIPTION: Example showing how to configure mount targets for container rootfs, demonstrating both overlay and bind mount configurations. This allows for submounts within the container's filesystem hierarchy.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/snapshotters/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"type\": \"overlay\",\n        \"source\": \"overlay\",\n        \"options\": [\n            \"workdir=...\",\n            \"upperdir=...\",\n            \"lowerdir=...\"\n        ]\n    },\n    {\n        \"type\": \"bind\",\n        \"source\": \"/path/on/host\",\n        \"target\": \"/path/inside/container\",\n        \"options\": [\n            \"ro\",\n            \"rbind\"\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Instrumentation for ttrpc Server in Go\nDESCRIPTION: This snippet illustrates how to set up a ttrpc server with OpenTelemetry instrumentation by using the `UnaryServerInterceptor` from the otelttrpc package. It ensures that trace spans are generated for unary server method calls.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/otelttrpc/README.md#2025-04-21_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\n\"// and on the server side\\n...\\nserver, err := ttrpc.NewServer(\\n    ttrpc.WithUnaryServerInterceptor(\\n        otelttrpc.UnaryServerInterceptor(),\\n    ),\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Credential Helper Interface Definition\nDESCRIPTION: Interface and structure definitions for handling registry authentication credentials.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/transfer.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype CredentialHelper interface {\n\tGetCredentials(ctx context.Context, ref, host string) (Credentials, error)\n}\n\ntype Credentials struct {\n\tHost     string\n\tUsername string\n\tSecret   string\n\tHeader   string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Container with Containerd\nDESCRIPTION: Console command demonstrating container creation using containerd with a Redis image\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/content-flow.md#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n# ctr container create docker.io/library/redis:5.0.6 redis1\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Windows Container Images (Bash)\nDESCRIPTION: Bash commands to clone the containerd repository, set up buildx, configure Docker, and build and push Windows container images to a registry.\nSOURCE: https://github.com/containerd/containerd/blob/main/integration/images/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/containerd/containerd\ncd containerd/integration/images/volume-copy-up\n\nmake setup-buildx\nmake configure-docker\n# 192.168.122.107 corresponds to the IP address of your windows build node.\n# This builds the images and pushes them to the registry specified by PROJ\n# The Windows images will be built on the Windows node and pushed from there.\n# You will need to make sure that docker is configured and able to push to the\n# project you want to push to.\nmake build-registry PROJ=docker.example.com REMOTE_DOCKER_URL=192.168.122.107:2376\n# Create a manifest and update it with all supported operating systems and architectures.\nmake push-manifest PROJ=docker.samfira.com REMOTE_DOCKER_URL=192.168.122.107:2376\n```\n\n----------------------------------------\n\nTITLE: Running Containerd Client Commands in Rootless Mode\nDESCRIPTION: Commands for entering daemon namespaces and running containerd client operations with proper environment configuration\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/rootless.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ nsenter -U --preserve-credentials -m -n -t $(cat /run/user/1001/rootlesskit-containerd/child_pid)\n$ export CONTAINERD_ADDRESS=/run/user/1001/containerd/containerd.sock\n$ export CONTAINERD_SNAPSHOTTER=native\n$ ctr images pull docker.io/library/ubuntu:latest\n$ ctr run -t --rm --fifo-dir /tmp/foo-fifo --cgroup \"\" docker.io/library/ubuntu:latest foo\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Processor in Containerd TOML Config\nDESCRIPTION: Example configuration for setting up a stream processor in Containerd's config file. Shows how to configure the pigz processor to handle compressed tar files, including accepted media types, return format, binary path, and processing arguments.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/stream_processors.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n\n[stream_processors]\n  [stream_processors.\"io.containerd.processor.v1.pigz\"]\n\taccepts = [\"application/vnd.docker.image.rootfs.diff.tar.gzip\"]\n\treturns = \"application/vnd.oci.image.layer.v1.tar\"\n\tpath = \"unpigz\"\n\targs = [\"-d\", \"-c\"]\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Spans in containerd\nDESCRIPTION: Example of creating and managing OpenTelemetry spans in containerd, including adding attributes and handling span lifecycle.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/tracing.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc CreateContainer(ctx context.Context, r *runtime.CreateContainerRequest) error {\n    ctx, span := tracing.StartSpan(ctx,\n        tracing.Name(criSpanPrefix, \"CreateContainer\") // name of the span\n        tracing.WithAttribute(\"sandbox.id\",r.GetPodSandboxId(), //attributes to be added to the span\n        )\n\tdefer span.End() // end the span once the function returns\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring crictl\nDESCRIPTION: Example configuration file for crictl to specify the runtime socket and other settings.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/crictl.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cat /etc/crictl.yaml\nruntime-endpoint: unix:///run/containerd/containerd.sock\nimage-endpoint: unix:///run/containerd/containerd.sock\ntimeout: 10\ndebug: true\n```\n\n----------------------------------------\n\nTITLE: Batch Transaction Example\nDESCRIPTION: Example of using batch transactions for better performance with multiple concurrent operations\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nvar id uint64\nerr := db.Batch(func(tx *bolt.Tx) error {\n\t// Find last key in bucket, decode as bigendian uint64, increment\n\t// by one, encode back to []byte, and add new key.\n\t...\n\tid = newValue\n\treturn nil\n})\nif err != nil {\n\treturn ...\n}\nfmt.Println(\"Allocated ID %d\", id)\n```\n\n----------------------------------------\n\nTITLE: Packaging Linux Guest Agent in a Rootfs\nDESCRIPTION: Shows how to package the Linux guest agent inside a rootfs for booting alongside other tools. It uses Docker to create a base image container, exports its rootfs, and then builds the package.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ndocker pull busybox\ndocker run --name base_image_container busybox\ndocker export base_image_container | gzip > base.tar.gz\nBASE=./base.tar.gz\nmake all\n```\n\n----------------------------------------\n\nTITLE: Read-Write Transaction Example\nDESCRIPTION: Demonstration of using a read-write transaction in bbolt with proper error handling\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nerr := db.Update(func(tx *bolt.Tx) error {\n\t...\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Remote Snapshots in Containerd Client in Go\nDESCRIPTION: This code snippet demonstrates the process of querying remote snapshots in the containerd client. It shows how the Prepare API is called with labels, including the ChainID, and how the client handles the ErrAlreadyExists error to check for existing snapshots.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/remote-snapshotter.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Gets annotations appended to the targeting layer which would contain\n// snapshotter-specific information passed by the user.\nlabels := snapshots.FilterInheritedLabels(desc.Annotations)\nif labels == nil {\n\tlabels = make(map[string]string)\n}\n\n// Specifies ChainID of the targeting committed snapshot.\nlabels[\"containerd.io/snapshot.ref\"] = chainID\n\n// Merges snapshotter options specified by the user which would contain\n// snapshotter-specific information passed by the user.\nopts := append(rCtx.SnapshotterOpts, snapshots.WithLabels(labels))\n\n// Calls `Prepare` API with target identifier and snapshotter-specific\n// information.\nmounts, err = sn.Prepare(ctx, key, parent.String(), opts...)\n\nmounts, err = sn.Prepare(ctx, key, parent.String(), opts...)\nif err != nil {\n\tif errdefs.IsAlreadyExists(err) {\n\t\t// Ensures the layer existence\n\t\tif _, err := sn.Stat(ctx, chainID); err != nil {\n\t\t\t// Handling error\n\t\t} else {\n\t\t\t// snapshot found with ChainID\n\t\t\t// pulling/unpacking will be skipped\n\t\t\tcontinue\n\t\t}\n\t} else {\n\t\treturn err\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Standard JSON Encoding in Go\nDESCRIPTION: This snippet demonstrates how to replace the standard JSON encoding using the json-iterator library for improved performance. You must import the library and set the configuration variable to ensure compatibility with the standard library.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport jsoniter \"github.com/json-iterator/go\"\n\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\njson.Marshal(&data)\n```\n\n----------------------------------------\n\nTITLE: Setting up and Teardown a Network Namespace with go-cni\nDESCRIPTION: This code snippet demonstrates how to initialize the go-cni library, load CNI configurations, set up a network namespace for a container, and then tear down the network when finished. It uses the `gocni` package to interact with CNI plugins and configure the network.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/go-cni/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\tgocni \"github.com/containerd/go-cni\"\n)\n\nfunc main() {\n\tid := \"example\"\n\tnetns := \"/var/run/netns/example-ns-1\"\n\n\t// CNI allows multiple CNI configurations and the network interface\n\t// will be named by eth0, eth1, ..., ethN.\n\tifPrefixName := \"eth\"\n\tdefaultIfName := \"eth0\"\n\n\t// Initializes library\n\tl, err := gocni.New(\n\t\t// one for loopback network interface\n\t\tgocni.WithMinNetworkCount(2),\n\t\tgocni.WithPluginConfDir(\"/etc/cni/net.d\"),\n\t\tgocni.WithPluginDir([]string{\"/opt/cni/bin\"}),\n\t\t// Sets the prefix for network interfaces, eth by default\n\t\tgocni.WithInterfacePrefix(ifPrefixName))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to initialize cni library: %v\", err)\n\t}\n\n\t// Load the cni configuration\n\tif err := l.Load(gocni.WithLoNetwork, gocni.WithDefaultConf); err != nil {\n\t\tlog.Fatalf(\"failed to load cni configuration: %v\", err)\n\t}\n\n\t// Setup network for namespace.\n\tlabels := map[string]string{\n\t\t\"K8S_POD_NAMESPACE\":          \"namespace1\",\n\t\t\"K8S_POD_NAME\":               \"pod1\",\n\t\t\"K8S_POD_INFRA_CONTAINER_ID\": id,\n\t\t// Plugin tolerates all Args embedded by unknown labels, like\n\t\t// K8S_POD_NAMESPACE/NAME/INFRA_CONTAINER_ID...\n\t\t\"IgnoreUnknown\": \"1\",\n\t}\n\n\tctx := context.Background()\n\n\t// Teardown network\n\tdefer func() {\n\t\tif err := l.Remove(ctx, id, netns, gocni.WithLabels(labels)); err != nil {\n\t\t\tlog.Fatalf(\"failed to teardown network: %v\", err)\n\t\t}\n\t}()\n\n\t// Setup network\n\tresult, err := l.Setup(ctx, id, netns, gocni.WithLabels(labels))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to setup network for namespace: %v\", err)\n\t}\n\n\t// Get IP of the default interface\n\tIP := result.Interfaces[defaultIfName].IPConfigs[0].IP.String()\n\tfmt.Printf(\"IP of the default interface %s:%s\", defaultIfName, IP)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Logrus Usage with Fields in Go\nDESCRIPTION: A simple example showing how to use the package-level exported logger from Logrus. It demonstrates creating structured logs with fields to provide context.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc main() {\n  log.WithFields(log.Fields{\n    \"animal\": \"walrus\",\n  }).Info(\"A walrus appears\")\n}\n```\n\n----------------------------------------\n\nTITLE: Registering gRPC Server Reflection in Go\nDESCRIPTION: This code snippet demonstrates how to register the reflection service on a gRPC server. It shows importing the reflection package, creating a new gRPC server, registering your own server implementation, and then registering the reflection service before serving the connection.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/google.golang.org/grpc/reflection/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"google.golang.org/grpc/reflection\"\n\ns := grpc.NewServer()\npb.RegisterYourOwnServer(s, &server{})\n\n// Register reflection service on gRPC server.\nreflection.Register(s)\n\ns.Serve(lis)\n```\n\n----------------------------------------\n\nTITLE: Installing containerd on Windows\nDESCRIPTION: This PowerShell script downloads, extracts, and installs containerd on Windows, including configuring and starting the service.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n# If containerd previously installed run:\nStop-Service containerd\n\n# Download and extract desired containerd Windows binaries\n$Version=\"1.7.13\"\t# update to your preferred version\n$Arch = \"amd64\"\t# arm64 also available\ncurl.exe -LO https://github.com/containerd/containerd/releases/download/v$Version/containerd-$Version-windows-$Arch.tar.gz\ntar.exe xvf .\\containerd-$Version-windows-$Arch.tar.gz\n\n# Copy\nCopy-Item -Path .\\bin -Destination $Env:ProgramFiles\\containerd -Recurse -Force\n\n# add the binaries (containerd.exe, ctr.exe) in $env:Path\n$Path = [Environment]::GetEnvironmentVariable(\"PATH\", \"Machine\") + [IO.Path]::PathSeparator + \"$Env:ProgramFiles\\containerd\"\n[Environment]::SetEnvironmentVariable( \"Path\", $Path, \"Machine\")\n# reload path, so you don't have to open a new PS terminal later if needed\n$Env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\")\n\n# configure\ncontainerd.exe config default | Out-File $Env:ProgramFiles\\containerd\\config.toml -Encoding ascii\n# Review the configuration. Depending on setup you may want to adjust:\n# - the sandbox_image (Kubernetes pause image)\n# - cni bin_dir and conf_dir locations\nGet-Content $Env:ProgramFiles\\containerd\\config.toml\n\n# Register and start service\ncontainerd.exe --register-service\nStart-Service containerd\n```\n\n----------------------------------------\n\nTITLE: Managing Network Namespaces with Go\nDESCRIPTION: Example demonstrates core network namespace operations including thread locking, creating new namespaces, and listing network interfaces. Uses vishvananda/netns package and requires root privileges. Shows proper cleanup with defer statements.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/vishvananda/netns/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"net\"\n    \"runtime\"\n\n    \"github.com/vishvananda/netns\"\n)\n\nfunc main() {\n    // Lock the OS Thread so we don't accidentally switch namespaces\n    runtime.LockOSThread()\n    defer runtime.UnlockOSThread()\n\n    // Save the current network namespace\n    origns, _ := netns.Get()\n    defer origns.Close()\n\n    // Create a new network namespace\n    newns, _ := netns.New()\n    defer newns.Close()\n\n    // Do something with the network namespace\n    ifaces, _ := net.Interfaces()\n    fmt.Printf(\"Interfaces: %v\\n\", ifaces)\n\n    // Switch back to the original namespace\n    netns.Set(origns)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Blockfile Snapshotter with Go Client API\nDESCRIPTION: Go code example showing how to use the blockfile snapshotter with the containerd client API.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/snapshotters/blockfile.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/containerd/containerd\"\n    \"github.com/containerd/containerd/snapshots\"\n)\n\n// create a new client\nclient, err := containerd.New(\"/run/containerd/containerd.sock\")\nsnapshotter := \"blockfile\"\ncOpts := []containerd.NewContainerOpts{\n\t\t\t\tcontainerd.WithImage(image),\n\t\t\t\tcontainerd.WithImageConfigLabels(image),\n\t\t\t\tcontainerd.WithAdditionalContainerLabels(labels),\n\t\t\t\tcontainerd.WithSnapshotter(snapshotter)\n}\ncontainer, err := client.NewContainer(ctx, containerID, cOpts...)\n```\n\n----------------------------------------\n\nTITLE: PKCS#11 URI Parsing and Cryptographic Operations in Go\nDESCRIPTION: This example demonstrates how to use the go-pkcs11uri library to parse a PKCS#11 URI and perform SHA-1 hashing using a hardware security module. It retrieves the module path, slot ID, and PIN from the URI, establishes a session with the HSM, and computes a SHA-1 digest.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/stefanberger/go-pkcs11uri/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\n\t\"github.com/miekg/pkcs11\"\n\tpkcs11uri \"github.com/stefanberger/go-pkcs11uri\"\n)\n\nfunc main() {\n\tif len(os.Args) < 2 {\n\t\tpanic(\"Missing pkcs11 URI argument\")\n\t}\n\turistr := os.Args[1]\n\n\turi, err := pkcs11uri.New()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = uri.Parse(uristr)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmodule, err := uri.GetModule()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tslot, ok := uri.GetPathAttribute(\"slot-id\", false)\n\tif !ok {\n\t\tpanic(\"No slot-id in pkcs11 URI\")\n\t}\n\tslotid, err := strconv.Atoi(slot)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tpin, err := uri.GetPIN()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tp := pkcs11.New(module)\n\terr = p.Initialize()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer p.Destroy()\n\tdefer p.Finalize()\n\n\tsession, err := p.OpenSession(uint(slotid), pkcs11.CKF_SERIAL_SESSION|pkcs11.CKF_RW_SESSION)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer p.CloseSession(session)\n\n\terr = p.Login(session, pkcs11.CKU_USER, pin)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer p.Logout(session)\n\n\tp.DigestInit(session, []*pkcs11.Mechanism{pkcs11.NewMechanism(pkcs11.CKM_SHA_1, nil)})\n\thash, err := p.Digest(session, []byte(\"this is a string\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor _, d := range hash {\n\t\tfmt.Printf(\"%x\", d)\n\t}\n\tfmt.Println()\n}\n```\n\n----------------------------------------\n\nTITLE: Content Events Definition\nDESCRIPTION: Defines events for content management operations including creation and deletion\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\npackage containerd.events;\nmessage ContentCreate {\n  string digest = 1;\n  int64 size = 2;\n}\nmessage ContentDelete {\n  string digest = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting Container with User Namespace\nDESCRIPTION: Commands to create and start a container with user namespaces using ctr, assuming a prepared config.json file.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/user-namespaces/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo ctr create --config <path>/config.json userns-test\nsudo ctr t start userns-test\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Registry Hosts in Containerd (TOML)\nDESCRIPTION: This snippet demonstrates how to set up a default registry hosts configuration for containerd. It specifies the config path and shows the structure of the hosts.toml file.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_23\n\nLANGUAGE: toml\nCODE:\n```\nserver = \"https://docker.io\"\n\n[host.\"https://registry-1.docker.io\"]\n  capabilities = [\"pull\", \"resolve\"]\n```\n\n----------------------------------------\n\nTITLE: Building Containerd in Docker Container\nDESCRIPTION: Command to build containerd using Docker container with official golang image.\nSOURCE: https://github.com/containerd/containerd/blob/main/BUILDING.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it \\\n    -v ${PWD}/containerd:/src/containerd \\\n    -w /src/containerd golang\n```\n\n----------------------------------------\n\nTITLE: Container and Task Management in Go\nDESCRIPTION: Demonstrates the new container and task API design where container metadata is separate from runtime state. Shows how to create and manage containers and their associated tasks.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-05-19.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncontainer, err := client.NewContainer(id, spec, rootfs)\n\ntask, err := container.CreateTask(containerd.Stdio())\ntask.Start()\ntask.Pid()\ntask.Kill(syscall.SIGKILL)\n\ncontainer.Delete()\n```\n\n----------------------------------------\n\nTITLE: Starting containerd with systemd-run\nDESCRIPTION: Demonstrates how to start containerd using systemd-run with the necessary options for proper delegation and process management.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/ops.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemd-run -p Delegate=yes -p KillMode=process /usr/local/bin/containerd\n```\n\n----------------------------------------\n\nTITLE: Running an Image with Key using ctr-enc\nDESCRIPTION: This command runs the encrypted image, providing the decryption key using the `--key` flag. It demonstrates that the image can be executed successfully with the correct key. Requires previously encrypted image and the corresponding key file.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/imgcrypt/v2/README.md#2025-04-21_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\n# sudo $CTR run --rm --key mykey.pem localhost:5000/bash.enc:latest test echo 'Hello World!'\nHello World!\n```\n\n----------------------------------------\n\nTITLE: Read-Only Transaction Example\nDESCRIPTION: Example of using a read-only transaction for querying data in bbolt\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nerr := db.View(func(tx *bolt.Tx) error {\n\t...\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Encrypted Layer Information using ctr-enc\nDESCRIPTION: This command retrieves layer information for the encrypted image using `ctr-enc`. The output shows the encryption type and recipients for each layer. Requires `ctr-enc` with containerd socket access and a previously encrypted image.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/imgcrypt/v2/README.md#2025-04-21_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n$ $CTR images layerinfo --platform linux/amd64 bash.enc:latest\n   #                                                                    DIGEST      PLATFORM      SIZE   ENCRYPTION   RECIPIENTS\n   0   sha256:360be141b01f69b25427a9085b36ba8ad7d7a335449013fa6b32c1ecb894ab5b   linux/amd64   2789669          jwe        [jwe]\n   1   sha256:ac601e66cdd275ee0e10afead03a2722e153a60982122d2d369880ea54fe82f8   linux/amd64   3174665          jwe        [jwe]\n   2   sha256:41e47064fd00424e328915ad2f7f716bd86ea2d0d8315edaf33ecaa6a2464530   linux/amd64       340          jwe        [jwe]\n```\n\n----------------------------------------\n\nTITLE: ContainerD Events Service Definition\nDESCRIPTION: Protocol Buffer service definition for ContainerD's Events service handling event publishing, forwarding and subscription.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_42\n\nLANGUAGE: protobuf\nCODE:\n```\nservice Events {\n  rpc Publish(PublishRequest) returns (google.protobuf.Empty);\n  rpc Forward(ForwardRequest) returns (google.protobuf.Empty);\n  rpc Subscribe(SubscribeRequest) returns (stream containerd.types.Envelope);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Namespaced Contexts in Go\nDESCRIPTION: Shows how to create multiple context objects with different namespaces for multi-tenancy in a Go application.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/namespaces.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nctx := context.Background()\n\nvar (\n\tdocker = namespaces.WithNamespace(ctx, \"docker\")\n\tvmware = namespaces.WithNamespace(ctx, \"vmware\")\n\tecs = namespaces.WithNamespace(ctx, \"aws-ecs\")\n\tcri = namespaces.WithNamespace(ctx, \"cri\")\n)\n```\n\n----------------------------------------\n\nTITLE: Running Rootless Containerd Daemon - Manual Method\nDESCRIPTION: Manual setup of rootless containerd daemon using RootlessKit with network namespace isolation and proper directory configuration\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/rootless.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ rootlesskit --net=slirp4netns --copy-up=/etc --copy-up=/run \\\n  --state-dir=/run/user/1001/rootlesskit-containerd \\\n  sh -c \"rm -f /run/containerd; exec containerd -c config.toml\"\n```\n\n----------------------------------------\n\nTITLE: Implementing SPDY Client in Go\nDESCRIPTION: Example of a Go client that connects to a SPDY server on localhost:8080, creates a stream, writes data to it, and reads the response. Uses the spdystream package to handle SPDY protocol implementation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/moby/spdystream/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/moby/spdystream\"\n\t\"net\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tconn, err := net.Dial(\"tcp\", \"localhost:8080\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tspdyConn, err := spdystream.NewConnection(conn, false)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tgo spdyConn.Serve(spdystream.NoOpStreamHandler)\n\tstream, err := spdyConn.CreateStream(http.Header{}, nil, false)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tstream.Wait()\n\n\tfmt.Fprint(stream, \"Writing to stream\")\n\n\tbuf := make([]byte, 25)\n\tstream.Read(buf)\n\tfmt.Println(string(buf))\n\n\tstream.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Events to HTTP Sink in Go\nDESCRIPTION: This snippet demonstrates how to implement the Write method for an httpSink type to send event notifications over HTTP. The implementation includes JSON marshaling of the event and handling of the HTTP response with error checking.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/docker/go-events/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (h *httpSink) Write(event Event) error {\n\tp, err := json.Marshal(event)\n\tif err != nil {\n\t\treturn err\n\t}\n\tbody := bytes.NewReader(p)\n\tresp, err := h.client.Post(h.url, \"application/json\", body)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\t\n\tif resp.Status != 200 {\n\t\treturn errors.New(\"unexpected status\")\n\t}\n\n\treturn nil\n}\n\n// implement (*httpSink).Close()\n```\n\n----------------------------------------\n\nTITLE: Defining Status Enumeration for Tasks in Protocol Buffers\nDESCRIPTION: Defines a Protocol Buffer enumeration for task status states: UNKNOWN, CREATED, RUNNING, STOPPED, PAUSED, and PAUSING. This represents the possible lifecycle states of a container task.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_28\n\nLANGUAGE: protobuf\nCODE:\n```\nenum_type {\n  name: \"Status\"\n  value {\n    name: \"UNKNOWN\"\n    number: 0\n    options {\n      66001: \"StatusUnknown\"\n    }\n  }\n  value {\n    name: \"CREATED\"\n    number: 1\n    options {\n      66001: \"StatusCreated\"\n    }\n  }\n  value {\n    name: \"RUNNING\"\n    number: 2\n    options {\n      66001: \"StatusRunning\"\n    }\n  }\n  value {\n    name: \"STOPPED\"\n    number: 3\n    options {\n      66001: \"StatusStopped\"\n    }\n  }\n  value {\n    name: \"PAUSED\"\n    number: 4\n    options {\n      66001: \"StatusPaused\"\n    }\n  }\n  value {\n    name: \"PAUSING\"\n    number: 5\n    options {\n      66001: \"StatusPausing\"\n    }\n  }\n  options {\n    62001: 0\n    62023: \"Status\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling an Image using ctr-enc\nDESCRIPTION: This command pulls a container image using the `ctr-enc` tool.  It assumes that `ctr-enc` is configured to communicate with the containerd socket and retrieve images.  `--all-platforms` flag ensures images from all supported platforms are pulled. Requires properly configured `ctr-enc` with access to the containerd socket.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/imgcrypt/v2/README.md#2025-04-21_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n# CTR=\"/usr/local/bin/ctr-enc -a /tmp/run/containerd/containerd.sock\"\n# $CTR images pull --all-platforms docker.io/library/bash:latest\n[...]\n```\n\n----------------------------------------\n\nTITLE: Using ForEach Method for Iteration in BoltDB with Go\nDESCRIPTION: Uses the ForEach() method to iterate through all key-value pairs in a bucket. This method is simpler than using a cursor when you need to process all entries.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_18\n\nLANGUAGE: go\nCODE:\n```\ndb.View(func(tx *bolt.Tx) error {\n\t// Assume bucket exists and has keys\n\tb := tx.Bucket([]byte(\"MyBucket\"))\n\n\tb.ForEach(func(k, v []byte) error {\n\t\tfmt.Printf(\"key=%s, value=%s\\n\", k, v)\n\t\treturn nil\n\t})\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: ContainerD Diff Service Definition\nDESCRIPTION: Protocol Buffer service definition for ContainerD's Diff service which handles applying and calculating differences between filesystem mounts.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_41\n\nLANGUAGE: protobuf\nCODE:\n```\nservice Diff {\n  rpc Apply(ApplyRequest) returns (ApplyResponse);\n  rpc Diff(DiffRequest) returns (DiffResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Containerd Configuration File Example\nDESCRIPTION: This is an example of a containerd configuration file (`config.toml`) that enables the `ctd-decoder` stream processors for handling encrypted container images.  It specifies the accepted MIME types and the path to the decoder executable. This TOML configuration is required for containerd to properly decrypt encrypted images.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/imgcrypt/v2/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# cat config.toml\nversion = 2\ndisabled_plugins = [\"io.containerd.grpc.v1.cri\"]\nroot = \"/tmp/var/lib/containerd\"\nstate = \"/tmp/run/containerd\"\n[grpc]\n  address = \"/tmp/run/containerd/containerd.sock\"\n  uid = 0\n  gid = 0\n[stream_processors]\n    [stream_processors.\"io.containerd.ocicrypt.decoder.v1.tar.gzip\"]\n        accepts = [\"application/vnd.oci.image.layer.v1.tar+gzip+encrypted\"]\n        returns = \"application/vnd.oci.image.layer.v1.tar+gzip\"\n        path = \"/usr/local/bin/ctd-decoder\"\n    [stream_processors.\"io.containerd.ocicrypt.decoder.v1.tar.zstd\"]\n        accepts = [\"application/vnd.oci.image.layer.v1.tar+zstd+encrypted\"]\n        returns = \"application/vnd.oci.image.layer.v1.tar+zstd\"\n        path = \"/usr/local/bin/ctd-decoder\"\n    [stream_processors.\"io.containerd.ocicrypt.decoder.v1.tar\"]\n        accepts = [\"application/vnd.oci.image.layer.v1.tar+encrypted\"]\n        returns = \"application/vnd.oci.image.layer.v1.tar\"\n        path = \"/usr/local/bin/ctd-decoder\"\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Events to Multiple Listeners in Go\nDESCRIPTION: This snippet illustrates the usage of a Broadcaster to send event notifications to multiple queues. By using the broadcaster, events can be managed and dispatched to all registered listeners simultaneously.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/docker/go-events/README.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar broadcast = NewBroadcaster() // make it available somewhere in your application.\nbroadcast.Add(queue) // add your queue!\nbroadcast.Add(queue2) // and another!\n```\n\n----------------------------------------\n\nTITLE: Configuring Containerd Image Verification Plugin\nDESCRIPTION: YAML configuration block for enabling the bindir image verification plugin in containerd. Specifies the binary directory path, maximum number of verifiers, and timeout settings.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/image-verification.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n[plugins]\n  [plugins.\"io.containerd.image-verifier.v1.bindir\"]\n    bin_dir = \"/opt/containerd/image-verifier/bin\"\n    max_verifiers = 10\n    per_verifier_timeout = \"10s\"\n```\n\n----------------------------------------\n\nTITLE: Basic Go Error Handling Pattern\nDESCRIPTION: Demonstrates the traditional error handling idiom in Go, showing the basic nil check pattern.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n        return err\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Transaction Management\nDESCRIPTION: Example of manually managing transactions using Begin() and Commit() with proper error handling and cleanup\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Start a writable transaction.\ntx, err := db.Begin(true)\nif err != nil {\n    return err\n}\ndefer tx.Rollback()\n\n// Use the transaction...\n_, err := tx.CreateBucket([]byte(\"MyBucket\"))\nif err != nil {\n    return err\n}\n\n// Commit the transaction and check for error.\nif err := tx.Commit(); err != nil {\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EROFS Snapshotter in containerd config.toml\nDESCRIPTION: This configuration snippet shows how to set up the EROFS snapshotter in the containerd config.toml file. It includes options for enabling fsverity support and specifying additional mount options for overlayfs.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/snapshotters/erofs.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[plugins.\"io.containerd.snapshotter.v1.erofs\"]\n    # Enable fsverity support for EROFS layers, default is false\n    enable_fsverity = true\n\n    # Optional: Additional mount options for overlayfs\n    ovl_mount_options = []\n\n[plugins.\"io.containerd.service.v1.diff-service\"]\n  default = [\"erofs\",\"walking\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Redis Container with containerd CLI\nDESCRIPTION: Command to create a container from a Docker Hub Redis image using ctr tool. Creates a new container named redis2 using the specified image.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/content-flow.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nctr container create docker.io/library/redis:5.0.6 redis2\n```\n\n----------------------------------------\n\nTITLE: Using Stateless Gzip Compression in Go\nDESCRIPTION: Example of how to use stateless compression with gzip in Go. This shows how to create a gzip writer with stateless compression and use it with a buffered writer to control memory usage.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-21_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\ngzw, err := gzip.NewWriterLevel(ioutil.Discard, gzip.StatelessCompression)\nif err != nil {\n    return err\n}\ndefer gzw.Close()\n\nw := bufio.NewWriterSize(gzw, 4096)\ndefer w.Flush()\n\n// Write to 'w'\n```\n\n----------------------------------------\n\nTITLE: Running TestContainerListStats CRI Integration Test in Bash\nDESCRIPTION: This example shows how to run a specific CRI integration test named TestContainerListStats using the FOCUS parameter.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/testing.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nFOCUS=TestContainerListStats make cri-integration\n```\n\n----------------------------------------\n\nTITLE: Parsing Docker Image Index JSON in containerd\nDESCRIPTION: This JSON represents an OCI image index (manifest list) for redis:5.0.9, listing available platform variants. It contains references to platform-specific manifests for different architectures and operating systems, with their corresponding digests.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/content-flow.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"manifests\": [\n        {\n            \"digest\": \"sha256:9bb13890319dc01e5f8a4d3d0c4c72685654d682d568350fd38a02b1d70aee6b\",\n            \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n            \"platform\": {\n                \"architecture\": \"amd64\",\n                \"os\": \"linux\"\n            },\n            \"size\": 1572\n        },\n        {\n            \"digest\": \"sha256:aeb53f8db8c94d2cd63ca860d635af4307967aa11a2fdead98ae0ab3a329f470\",\n            \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n            \"platform\": {\n                \"architecture\": \"arm\",\n                \"os\": \"linux\",\n                \"variant\": \"v5\"\n            },\n            \"size\": 1573\n        },\n        {\n            \"digest\": \"sha256:17dc42e40d4af0a9e84c738313109f3a95e598081beef6c18a05abb57337aa5d\",\n            \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n            \"platform\": {\n                \"architecture\": \"arm\",\n                \"os\": \"linux\",\n                \"variant\": \"v7\"\n            },\n            \"size\": 1573\n        },\n        {\n            \"digest\": \"sha256:613f4797d2b6653634291a990f3e32378c7cfe3cdd439567b26ca340b8946013\",\n            \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n            \"platform\": {\n                \"architecture\": \"arm64\",\n                \"os\": \"linux\",\n                \"variant\": \"v8\"\n            },\n            \"size\": 1573\n        },\n        {\n            \"digest\": \"sha256:ee0e1f8d8d338c9506b0e487ce6c2c41f931d1e130acd60dc7794c3a246eb59e\",\n            \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n            \"platform\": {\n                \"architecture\": \"386\",\n                \"os\": \"linux\"\n            },\n            \"size\": 1572\n        },\n        {\n            \"digest\": \"sha256:1072145f8eea186dcedb6b377b9969d121a00e65ae6c20e9cd631483178ea7ed\",\n            \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n            \"platform\": {\n                \"architecture\": \"mips64le\",\n                \"os\": \"linux\"\n            },\n            \"size\": 1572\n        },\n        {\n            \"digest\": \"sha256:4b7860fcaea5b9bbd6249c10a3dc02a5b9fb339e8aef17a542d6126a6af84d96\",\n            \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n            \"platform\": {\n                \"architecture\": \"ppc64le\",\n                \"os\": \"linux\"\n            },\n            \"size\": 1573\n        },\n        {\n            \"digest\": \"sha256:d66dfc869b619cd6da5b5ae9d7b1cbab44c134b31d458de07f7d580a84b63f69\",\n            \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n            \"platform\": {\n                \"architecture\": \"s390x\",\n                \"os\": \"linux\"\n            },\n            \"size\": 1573\n        }\n    ],\n    \"mediaType\": \"application/vnd.docker.distribution.manifest.list.v2+json\",\n    \"schemaVersion\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Loading an existing cgroup v2\nDESCRIPTION: Loads an existing systemd-managed cgroup v2 slice for inspection or manipulation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nm, err := cgroup2.LoadSystemd(\"/\", \"my-cgroup-abc.slice\")\nif err != nil {\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing a Snapshot in Go\nDESCRIPTION: Demonstrates how to prepare a new snapshot using the Snapshotter API in Go. This snippet shows the process of creating an active snapshot from a parent.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/design/snapshots.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmounts, err := snapshotter.Prepare(key, \"\")\nif err != nil { ... }\n```\n\n----------------------------------------\n\nTITLE: ContainerD Runc Options Definition in Protocol Buffers\nDESCRIPTION: Protocol buffer definition for ContainerD's runc runtime options, which configure how containers are created and managed by the runc OCI runtime implementation.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_71\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Options\"\n  field {\n    name: \"no_pivot_root\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"noPivotRoot\"\n  }\n  field {\n    name: \"no_new_keyring\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"noNewKeyring\"\n  }\n  field {\n    name: \"shim_cgroup\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"shimCgroup\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Sink Interface in Go\nDESCRIPTION: This snippet defines a Sink interface for creating custom event sinks. It outlines the necessary methods for writing and closing event handlers, allowing for flexible implementation based on application-specific requirements.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/docker/go-events/README.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Sink {\n\tWrite(Event) error\n\tClose() error\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Pod Sandbox with crictl\nDESCRIPTION: Example of creating and running a pod sandbox using a JSON configuration file with crictl.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/crictl.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ cat sandbox-config.json\n{\n    \"metadata\": {\n        \"name\": \"nginx-sandbox\",\n        \"namespace\": \"default\",\n        \"attempt\": 1,\n        \"uid\": \"hdishd83djaidwnduwk28bcsb\"\n    },\n    \"linux\": {\n    }\n}\n\n$ crictl runp sandbox-config.json\ne1c83b0b8d481d4af8ba98d5f7812577fc175a37b10dc824335951f52addbb4e\n$ crictl pods\nPODSANDBOX ID       CREATED             STATE               NAME               NAMESPACE          ATTEMPT\ne1c83b0b8d481       2 hours ago         SANDBOX_READY       nginx-sandbox      default            1\n$ crictl inspectp e1c8\n  ... displays information about the pod and the pod sandbox pause container.\n```\n\n----------------------------------------\n\nTITLE: Running Snapshotters Benchmark\nDESCRIPTION: This command runs the snapshotters benchmark using the go test framework. It specifies paths for different snapshotter implementations and the thin-pool device.\nSOURCE: https://github.com/containerd/containerd/blob/main/contrib/aws/snapshotter_bench_readme.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo su -\ncd snapshots/benchsuite/\ngo test -bench . \\\n    -dm.thinPoolDev=bench-docker--pool \\\n    -dm.rootPath=/mnt/disk1/data \\\n    -overlay.rootPath=/mnt/disk2/data \\\n    -native.rootPath=/mnt/disk3/data\n```\n\n----------------------------------------\n\nTITLE: Snapshot Info and Status Types in Containerd Proto\nDESCRIPTION: Protocol Buffer message definitions for snapshot information and status in Containerd. Includes the Info type containing metadata like creation time, kind, and labels, along with corresponding response messages for operations like Stat and Update.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_60\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"Info\"\n    field {\n      name: \"name\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"name\"\n    }\n    field {\n      name: \"parent\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"parent\"\n    }\n    field {\n      name: \"kind\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_ENUM\n      type_name: \".containerd.services.snapshots.v1.Kind\"\n      json_name: \"kind\"\n    }\n    field {\n      name: \"created_at\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Timestamp\"\n      json_name: \"createdAt\"\n    }\n    field {\n      name: \"updated_at\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Timestamp\"\n      json_name: \"updatedAt\"\n    }\n    field {\n      name: \"labels\"\n      number: 6\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.snapshots.v1.Info.LabelsEntry\"\n      json_name: \"labels\"\n    }\n    nested_type {\n      name: \"LabelsEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n  }\n  message_type {\n    name: \"StatSnapshotResponse\"\n    field {\n      name: \"info\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.snapshots.v1.Info\"\n      json_name: \"info\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Containerd with CRI Plugin in Bash\nDESCRIPTION: This snippet demonstrates how to run the built version of Containerd with the CRI plugin enabled, using debug logging level.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/testing.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncontainerd -l debug\n```\n\n----------------------------------------\n\nTITLE: Creating a subcgroup in v1\nDESCRIPTION: Creates a new child cgroup under the current cgroup with specified resource constraints.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nsubCgroup, err := control.New(\"child\", resources)\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshot Info Message Type in Containerd API\nDESCRIPTION: Protocol Buffer definition for the Info message type, which represents snapshot metadata in Containerd. This structure includes snapshot name, parent, kind, timestamps, and labels for identifying and managing snapshots.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_21\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"Info\"\n  field {\n    name: \"name\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"name\"\n  }\n  field {\n    name: \"parent\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"parent\"\n  }\n  field {\n    name: \"kind\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".containerd.services.snapshots.v1.Kind\"\n    json_name: \"kind\"\n  }\n  field {\n    name: \"created_at\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n      65001: 0\n      65010: 1\n    }\n    json_name: \"createdAt\"\n  }\n  field {\n    name: \"updated_at\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n      65001: 0\n      65010: 1\n    }\n    json_name: \"updatedAt\"\n  }\n  field {\n    name: \"labels\"\n    number: 6\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.snapshots.v1.Info.LabelsEntry\"\n    json_name: \"labels\"\n  }\n  nested_type {\n    name: \"LabelsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Backup Handler in Go\nDESCRIPTION: This snippet demonstrates how to create an HTTP handler function for backing up a Bolt database. It uses a read-only transaction to ensure consistency and sets appropriate headers for file download.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nfunc BackupHandleFunc(w http.ResponseWriter, req *http.Request) {\n\terr := db.View(func(tx *bolt.Tx) error {\n\t\tw.Header().Set(\"Content-Type\", \"application/octet-stream\")\n\t\tw.Header().Set(\"Content-Disposition\", `attachment; filename=\"my.db\"`)\n\t\tw.Header().Set(\"Content-Length\", strconv.Itoa(int(tx.Size())))\n\t\t_, err := tx.WriteTo(w)\n\t\treturn err\n\t})\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a bbolt Database\nDESCRIPTION: Complete example of opening a bbolt database with error handling and proper cleanup\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\n\tbolt \"go.etcd.io/bbolt\"\n)\n\nfunc main() {\n\t// Open the my.db data file in your current directory.\n\t// It will be created if it doesn't exist.\n\tdb, err := bolt.Open(\"my.db\", 0600, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer db.Close()\n\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: File System Watching with fsnotify in Go\nDESCRIPTION: This code snippet demonstrates the basic usage of the fsnotify library in Go to watch for file system events. It creates a new watcher, listens for events in a goroutine, and adds a path to be watched. The example also handles errors and logs events and modifications.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/fsnotify/fsnotify/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n```go\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/fsnotify/fsnotify\"\n)\n\nfunc main() {\n    // Create new watcher.\n    watcher, err := fsnotify.NewWatcher()\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer watcher.Close()\n\n    // Start listening for events.\n    go func() {\n        for {\n            select {\n            case event, ok := <-watcher.Events:\n                if !ok {\n                    return\n                }\n                log.Println(\"event:\", event)\n                if event.Has(fsnotify.Write) {\n                    log.Println(\"modified file:\", event.Name)\n                }\n            case err, ok := <-watcher.Errors:\n                if !ok {\n                    return\n                }\n                log.Println(\"error:\", err)\n            }\n        }\n    }()\n\n    // Add a path.\n    err = watcher.Add(\"/tmp\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Block main goroutine forever.\n    <-make(chan struct{}) // Fix: Block the main goroutine\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing SPDY Server in Go\nDESCRIPTION: Example of a Go server that listens for SPDY connections on localhost:8080 and uses a mirror stream handler to reflect data back to clients. Demonstrates basic SPDY server setup and connection handling.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/moby/spdystream/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/moby/spdystream\"\n\t\"net\"\n)\n\nfunc main() {\n\tlistener, err := net.Listen(\"tcp\", \"localhost:8080\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tspdyConn, err := spdystream.NewConnection(conn, true)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tgo spdyConn.Serve(spdystream.MirrorStreamHandler)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a cgroup v2\nDESCRIPTION: Loads and then deletes a systemd-managed cgroup v2 slice, cleaning up its resources.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nm, err := cgroup2.LoadSystemd(\"/\", \"my-cgroup-abc.slice\")\nif err != nil {\n\treturn err\n}\nerr = m.DeleteSystemd()\nif err != nil {\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Getting and setting cgroup v2 type\nDESCRIPTION: Retrieves and modifies the type of a cgroup v2 slice, demonstrating how to switch to threaded cgroup type.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nm, err := cgroup2.LoadSystemd(\"/\", \"my-cgroup-abc.slice\")\nif err != nil {\n    return err\n}\n\n// https://www.kernel.org/doc/html/v5.0/admin-guide/cgroup-v2.html#threads\ncgType, err := m.GetType()\nif err != nil {\n    return err\n}\nfmt.Println(cgType)\n\nerr = m.SetType(cgroup2.Threaded)\nif err != nil {\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Running Specific Go Tests\nDESCRIPTION: Examples of running specific Go tests for containerd, including root-requiring tests.\nSOURCE: https://github.com/containerd/containerd/blob/main/BUILDING.md#2025-04-21_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n# run the test <TEST_NAME>:\ngo test\t-v -run \"<TEST_NAME>\" ./path/to/package\n# enable the root-requiring tests:\ngo test -v -run ./path/to/package -test.root\n```\n\n----------------------------------------\n\nTITLE: Parsing Platform-Specific Manifest in containerd\nDESCRIPTION: This JSON represents the manifest for redis:5.0.9 on linux/amd64. It contains a reference to the image config file and six layers that make up the filesystem. Each component is identified by its digest hash and size.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/content-flow.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"schemaVersion\": 2,\n    \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n    \"config\": {\n        \"mediaType\": \"application/vnd.docker.container.image.v1+json\",\n        \"size\": 7648,\n        \"digest\": \"sha256:987b553c835f01f46eb1859bc32f564119d5833801a27b25a0ca5c6b8b6e111a\"\n    },\n    \"layers\": [\n        {\n            \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n            \"size\": 27092228,\n            \"digest\": \"sha256:bb79b6b2107fea8e8a47133a660b78e3a546998fcf0427be39ac9a0af4a97e90\"\n        },\n        {\n            \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n            \"size\": 1732,\n            \"digest\": \"sha256:1ed3521a5dcbd05214eb7f35b952ecf018d5a6610c32ba4e315028c556f45e94\"\n        },\n        {\n            \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n            \"size\": 1417672,\n            \"digest\": \"sha256:5999b99cee8f2875d391d64df20b6296b63f23951a7d41749f028375e887cd05\"\n        },\n        {\n            \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n            \"size\": 7348264,\n            \"digest\": \"sha256:bfee6cb5fdad6b60ec46297f44542ee9d8ac8f01c072313a51cd7822df3b576f\"\n        },\n        {\n            \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n            \"size\": 98,\n            \"digest\": \"sha256:fd36a1ebc6728807cbb1aa7ef24a1861343c6dc174657721c496613c7b53bd07\"\n        },\n        {\n            \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n            \"size\": 409,\n            \"digest\": \"sha256:97481c7992ebf6f22636f87e4d7b79e962f928cdbe6f2337670fa6c9a9636f04\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logger within Application Object in Go\nDESCRIPTION: This snippet shows how the logr.Logger instance is used within an application object to log informational messages. It captures the use of structured logging by including additional key-value pairs.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n\"type appObject struct {\n    // ... other fields ...\n    logger logr.Logger\n    // ... other fields ...\n}\n\nfunc (app *appObject) Run() {\n    app.logger.Info(\"starting up\", \"timestamp\", time.Now())\n\n    // ... app code ...\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Start Command Response JSON Schema\nDESCRIPTION: JSON structure that must be written to stdout by the start command, specifying the version, address and protocol used by the shim's API service.\nSOURCE: https://github.com/containerd/containerd/blob/main/core/runtime/v2/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 2,\n\t\"address\": \"/address/of/task/service\",\n\t\"protocol\": \"grpc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ansible Hosts File for Kubernetes Cluster Deployment\nDESCRIPTION: Creates a hosts file with IP addresses of machines to be provisioned as Kubernetes nodes. This file will be used by Ansible to target these machines for containerd and Kubernetes component installation.\nSOURCE: https://github.com/containerd/containerd/blob/main/contrib/ansible/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cat hosts\n172.31.7.230\n172.31.13.159\n172.31.1.227\n```\n\n----------------------------------------\n\nTITLE: Deleting Keys from BoltDB with Go\nDESCRIPTION: Deletes a key from a bucket using Bucket.Delete() within a transaction. This example removes the key \"answer\" from the \"MyBucket\" bucket.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ndb.Update(func (tx *bolt.Tx) error {\n    b := tx.Bucket([]byte(\"MyBucket\"))\n    err := b.Delete([]byte(\"answer\"))\n    return err\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Nil Pointer Chance with Gofuzz\nDESCRIPTION: This snippet shows how to customize the probability of a pointer being nil when fuzzing a struct. It sets the `NilChance` to 0.5, so about half of the string pointers within the struct should be set to nil.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/google/gofuzz/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\nf := fuzz.New().NilChance(.5)\nvar fancyStruct struct {\n  A, B, C, D *string\n}\nf.Fuzz(&fancyStruct) // About half the pointers should be set.\n```\n```\n\n----------------------------------------\n\nTITLE: Running CRI Integration Tests in Bash\nDESCRIPTION: This snippet shows how to run all CRI integration tests using the make command. It executes the cri-integration target.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake cri-integration\n```\n\n----------------------------------------\n\nTITLE: Namespaces Service Protocol Definition in Protobuf\nDESCRIPTION: Defines the Namespaces service for managing containerd namespaces. Includes message structures for creating, updating, getting, and listing namespaces, which provide isolation between different groups of containers and resources.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_23\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"github.com/containerd/containerd/api/services/namespaces/v1/namespace.proto\"\n  package: \"containerd.services.namespaces.v1\"\n  dependency: \"gogoproto/gogo.proto\"\n  dependency: \"google/protobuf/empty.proto\"\n  dependency: \"google/protobuf/field_mask.proto\"\n  message_type {\n    name: \"Namespace\"\n    field {\n      name: \"name\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"name\"\n    }\n    field {\n      name: \"labels\"\n      number: 2\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.namespaces.v1.Namespace.LabelsEntry\"\n      json_name: \"labels\"\n    }\n    nested_type {\n      name: \"LabelsEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n  }\n  message_type {\n    name: \"GetNamespaceRequest\"\n    field {\n      name: \"name\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"name\"\n    }\n  }\n  message_type {\n    name: \"GetNamespaceResponse\"\n    field {\n      name: \"namespace\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.namespaces.v1.Namespace\"\n      options {\n        65001: 0\n      }\n      json_name: \"namespace\"\n    }\n  }\n  message_type {\n    name: \"ListNamespacesRequest\"\n    field {\n      name: \"filter\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"filter\"\n    }\n  }\n  message_type {\n    name: \"ListNamespacesResponse\"\n    field {\n      name: \"namespaces\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.namespaces.v1.Namespace\"\n      options {\n        65001: 0\n      }\n      json_name: \"namespaces\"\n    }\n  }\n  message_type {\n    name: \"CreateNamespaceRequest\"\n    field {\n      name: \"namespace\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.namespaces.v1.Namespace\"\n      options {\n        65001: 0\n      }\n      json_name: \"namespace\"\n    }\n  }\n  message_type {\n    name: \"CreateNamespaceResponse\"\n    field {\n      name: \"namespace\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.namespaces.v1.Namespace\"\n      options {\n        65001: 0\n      }\n      json_name: \"namespace\"\n    }\n  }\n  message_type {\n    name: \"UpdateNamespaceRequest\"\n    field {\n      name: \"namespace\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.namespaces.v1.Namespace\"\n      options {\n        65001: 0\n      }\n      json_name: \"namespace\"\n    }\n    field {\n      name: \"update_mask\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.FieldMask\"\n      json_name: \"updateMask\"\n    }\n  }\n  message_type {\n    name: \"UpdateNamespaceResponse\"\n    field {\n      name: \"namespace\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.namespaces.v1.Namespace\"\n      options {\n        65001: 0\n      }\n      json_name: \"namespace\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Overriding Standard Library Logger with Logrus in Go\nDESCRIPTION: Example showing how to replace the standard library's log package with Logrus for consistent logging across an application.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-21_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nlogger := logrus.New()\nlogger.Formatter = &logrus.JSONFormatter{}\n\n// Use logrus for standard log output\n// Note that `log` here references stdlib's log\n// Not logrus imported under the name `log`.\nlog.SetOutput(logger.Writer())\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshot Response Types in Containerd Proto\nDESCRIPTION: Protocol Buffer message definitions for response types used in Containerd's snapshot service. Includes response messages for prepare, view, and mount operations which typically return mount points for filesystem access.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_58\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"PrepareSnapshotResponse\"\n    field {\n      name: \"mounts\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.types.Mount\"\n      json_name: \"mounts\"\n    }\n  }\n  message_type {\n    name: \"ViewSnapshotRequest\"\n    field {\n      name: \"snapshotter\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"snapshotter\"\n    }\n    field {\n      name: \"key\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"parent\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"parent\"\n    }\n    field {\n      name: \"labels\"\n      number: 4\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.snapshots.v1.ViewSnapshotRequest.LabelsEntry\"\n      json_name: \"labels\"\n    }\n    nested_type {\n      name: \"LabelsEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n  }\n  message_type {\n    name: \"ViewSnapshotResponse\"\n    field {\n      name: \"mounts\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.types.Mount\"\n      json_name: \"mounts\"\n    }\n  }\n  message_type {\n    name: \"MountsRequest\"\n    field {\n      name: \"snapshotter\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"snapshotter\"\n    }\n    field {\n      name: \"key\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n  }\n  message_type {\n    name: \"MountsResponse\"\n    field {\n      name: \"mounts\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.types.Mount\"\n      json_name: \"mounts\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Encoding Nested Struct to CBOR and JSON\nDESCRIPTION: This example showcases how struct tags (`omitempty`) can significantly reduce the encoded size of structs in CBOR using `fxamacker/cbor`.  It compares the output with `encoding/json`, demonstrating the space-saving advantages of CBOR with appropriate tags.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Example encoding nested struct (with omitempty tag)\n// - encoding/json:  18 byte JSON\n// - fxamacker/cbor:  1 byte CBOR\npackage main\n\nimport (\n\t\"encoding/hex\"\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/fxamacker/cbor/v2\"\n)\n\ntype GrandChild struct {\n\tQuux int `json:\",omitempty\"`\n}\n\ntype Child struct {\n\tBaz int        `json:\",omitempty\"`\n\tQux GrandChild `json:\",omitempty\"`\n}\n\ntype Parent struct {\n\tFoo Child `json:\",omitempty\"`\n\tBar int   `json:\",omitempty\"`\n}\n\nfunc cb() {\n\tresults, _ := cbor.Marshal(Parent{})\n\tfmt.Println(\"hex(CBOR): \" + hex.EncodeToString(results))\n\n\ttext, _ := cbor.Diagnose(results) // Diagnostic Notation\n\tfmt.Println(\"DN: \" + text)\n}\n\nfunc js() {\n\tresults, _ := json.Marshal(Parent{})\n\tfmt.Println(\"hex(JSON): \" + hex.EncodeToString(results))\n\n\ttext := string(results) // JSON\n\tfmt.Println(\"JSON: \" + text)\n}\n\nfunc main() {\n\tcb()\n\tfmt.Println(\"-------------\")\n\tjs()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Blockfile Snapshotter in Containerd\nDESCRIPTION: TOML configuration options for the blockfile snapshotter, including root path, scratch file location, filesystem type, and mount options.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/snapshotters/blockfile.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n  [plugins.'io.containerd.snapshotter.v1.blockfile']\n    scratch_file = \"/opt/containerd/blockfile\"\n    root_path = \"/somewhere/on/disk\"\n    fs_type = 'ext4'\n    mount_options = []\n    recreate_scratch = true\n```\n\n----------------------------------------\n\nTITLE: Kubernetes RuntimeClass Resource Configuration\nDESCRIPTION: YAML configuration for defining RuntimeClass resources in Kubernetes for custom runtimes.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: node.k8s.io/v1\nkind: RuntimeClass\nmetadata:\n  name: crun\nhandler: crun\n---\napiVersion: node.k8s.io/v1\nkind: RuntimeClass\nmetadata:\n  name: gvisor\nhandler: gvisor\n---\napiVersion: node.k8s.io/v1\nkind: RuntimeClass\nmetadata:\n  name: kata\nhandler: kata\n```\n\n----------------------------------------\n\nTITLE: Passing Logger to Application Object in Go\nDESCRIPTION: This snippet illustrates how to pass the initialized logr.Logger to the application's object. It integrates the logger into application flow, allowing for effective logging without exposing direct dependencies.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n\"app := createTheAppObject(logger)\napp.Run()\"\n```\n\n----------------------------------------\n\nTITLE: Defining Image Service in Protobuf\nDESCRIPTION: This snippet defines the Images service in protobuf, specifying methods for getting, listing, creating, updating, and deleting images in Containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_45\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Images\"\n  method {\n    name: \"Get\"\n    input_type: \".containerd.services.images.v1.GetImageRequest\"\n    output_type: \".containerd.services.images.v1.GetImageResponse\"\n  }\n  method {\n    name: \"List\"\n    input_type: \".containerd.services.images.v1.ListImagesRequest\"\n    output_type: \".containerd.services.images.v1.ListImagesResponse\"\n  }\n  method {\n    name: \"Create\"\n    input_type: \".containerd.services.images.v1.CreateImageRequest\"\n    output_type: \".containerd.services.images.v1.CreateImageResponse\"\n  }\n  method {\n    name: \"Update\"\n    input_type: \".containerd.services.images.v1.UpdateImageRequest\"\n    output_type: \".containerd.services.images.v1.UpdateImageResponse\"\n  }\n  method {\n    name: \"Delete\"\n    input_type: \".containerd.services.images.v1.DeleteImageRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Container with Containerd and the Custom Shim\nDESCRIPTION: Demonstrates how to use the ctr.exe command to run a Windows container using the custom runhcs shim runtime. It runs a simple 'Hello World' command in a Nanoserver container.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-21_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\> ctr.exe run --runtime io.containerd.runhcs.v1 --rm mcr.microsoft.com/windows/nanoserver:2004 windows-test cmd /c \"echo Hello World!\"\n```\n\n----------------------------------------\n\nTITLE: Moving processes across cgroups v1\nDESCRIPTION: Moves all processes from one cgroup to another destination cgroup.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nerr := control.MoveTo(destination)\n```\n\n----------------------------------------\n\nTITLE: Getting stats on a cgroup v1\nDESCRIPTION: Retrieves resource usage statistics from a cgroup. Can optionally ignore non-existent files with IgnoreNotExist flag.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nstats, err := control.Stat()\n```\n\nLANGUAGE: go\nCODE:\n```\nstats, err := control.Stat(cgroup1.IgnoreNotExist)\n```\n\n----------------------------------------\n\nTITLE: Verifying a Directory Against a Continuity Manifest\nDESCRIPTION: Command to verify that the current directory matches the metadata stored in a previously created manifest file. This checks that file attributes match what's stored in the manifest.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/continuity/README.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ./bin/continuity verify . /tmp/a.pb\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshots Service in Protocol Buffers\nDESCRIPTION: Defines a Protocol Buffer service for snapshot management with methods for preparing, viewing, mounting, committing, removing, and listing snapshots. Each method specifies its input and output types.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_24\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Snapshots\"\n  method {\n    name: \"Prepare\"\n    input_type: \".containerd.services.snapshots.v1.PrepareSnapshotRequest\"\n    output_type: \".containerd.services.snapshots.v1.PrepareSnapshotResponse\"\n  }\n  method {\n    name: \"View\"\n    input_type: \".containerd.services.snapshots.v1.ViewSnapshotRequest\"\n    output_type: \".containerd.services.snapshots.v1.ViewSnapshotResponse\"\n  }\n  method {\n    name: \"Mounts\"\n    input_type: \".containerd.services.snapshots.v1.MountsRequest\"\n    output_type: \".containerd.services.snapshots.v1.MountsResponse\"\n  }\n  method {\n    name: \"Commit\"\n    input_type: \".containerd.services.snapshots.v1.CommitSnapshotRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"Remove\"\n    input_type: \".containerd.services.snapshots.v1.RemoveSnapshotRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"Stat\"\n    input_type: \".containerd.services.snapshots.v1.StatSnapshotRequest\"\n    output_type: \".containerd.services.snapshots.v1.StatSnapshotResponse\"\n  }\n  method {\n    name: \"Update\"\n    input_type: \".containerd.services.snapshots.v1.UpdateSnapshotRequest\"\n    output_type: \".containerd.services.snapshots.v1.UpdateSnapshotResponse\"\n  }\n  method {\n    name: \"List\"\n    input_type: \".containerd.services.snapshots.v1.ListSnapshotsRequest\"\n    output_type: \".containerd.services.snapshots.v1.ListSnapshotsResponse\"\n    server_streaming: true\n  }\n  method {\n    name: \"Usage\"\n    input_type: \".containerd.services.snapshots.v1.UsageRequest\"\n    output_type: \".containerd.services.snapshots.v1.UsageResponse\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Logger Instances with Logrus in Go\nDESCRIPTION: Demonstrates how to create and configure a new instance of the Logrus logger. This allows for different logging configurations in the same application, such as logging to different destinations or with different formats.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  \"github.com/sirupsen/logrus\"\n)\n\n// Create a new instance of the logger. You can have any number of instances.\nvar log = logrus.New()\n\nfunc main() {\n  // The API for setting attributes is a little different than the package level\n  // exported logger. See Godoc.\n  log.Out = os.Stdout\n\n  // You could set this to any `io.Writer` such as a file\n  // file, err := os.OpenFile(\"logrus.log\", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)\n  // if err == nil {\n  //  log.Out = file\n  // } else {\n  //  log.Info(\"Failed to log to file, using default stderr\")\n  // }\n\n  log.WithFields(logrus.Fields{\n    \"animal\": \"walrus\",\n    \"size\":   10,\n  }).Info(\"A group of walrus emerges from the ocean\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Headers in TOML\nDESCRIPTION: This snippet showcases the configuration of custom HTTP headers within the TOML table format. Headers can be set as a string or an array of strings, where each represents a key-value pair in the HTTP header.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/hosts.md#2025-04-21_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[header]\n  x-custom-1 = \"custom header\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[header]\n  x-custom-1 = [\"custom header part a\",\"part b\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\n[header]\n  x-custom-1 = \"custom header\"\n  x-custom-1-2 = \"another custom header\"\n```\n\n----------------------------------------\n\nTITLE: Streaming Decompression in Go using Zstandard\nDESCRIPTION: Example of how to decompress a Zstandard-compressed stream in Go. It creates a Reader, defers closing it, and copies the decompressed content to the output.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\nfunc Decompress(in io.Reader, out io.Writer) error {\n    d, err := zstd.NewReader(in)\n    if err != nil {\n        return err\n    }\n    defer d.Close()\n    \n    // Copy content...\n    _, err = io.Copy(out, d)\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Keys with Cursor in BoltDB with Go\nDESCRIPTION: Uses a cursor to iterate through all keys in a bucket sequentially. The cursor is initialized with First() and then moved forward with Next() until reaching the end.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ndb.View(func(tx *bolt.Tx) error {\n\t// Assume bucket exists and has keys\n\tb := tx.Bucket([]byte(\"MyBucket\"))\n\n\tc := b.Cursor()\n\n\tfor k, v := c.First(); k != nil; k, v = c.Next() {\n\t\tfmt.Printf(\"key=%s, value=%s\\n\", k, v)\n\t}\n\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Registering for OOM events in v1\nDESCRIPTION: Sets up notification for Out-Of-Memory events in cgroups v1, with two alternative approaches.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nefd, err := control.OOMEventFD()\n// or by using RegisterMemoryEvent\nevent := cgroup1.OOMEvent()\nefd, err := control.RegisterMemoryEvent(event)\n```\n\n----------------------------------------\n\nTITLE: Storing Key-Value Pairs in BoltDB with Go\nDESCRIPTION: Saves a key-value pair to a bucket using Bucket.Put() within a transaction. This example sets the value \"42\" for key \"answer\" in the \"MyBucket\" bucket.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ndb.Update(func(tx *bolt.Tx) error {\n\tb := tx.Bucket([]byte(\"MyBucket\"))\n\terr := b.Put([]byte(\"answer\"), []byte(\"42\"))\n\treturn err\n})\n```\n\n----------------------------------------\n\nTITLE: Transfer Service Protocol Definition\nDESCRIPTION: Protocol buffer definition for the Transfer service including request structure and transfer options.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/transfer.md#2025-04-21_snippet_1\n\nLANGUAGE: proto\nCODE:\n```\nservice Transfer {\n\trpc Transfer(TransferRequest) returns (google.protobuf.Empty);\n}\n\nmessage TransferRequest {\n\tgoogle.protobuf.Any source = 1;\n\tgoogle.protobuf.Any destination = 2;\n\tTransferOptions options = 3;\n}\n\nmessage TransferOptions {\n string progress_stream = 1;\n // Progress min interval\n}\n```\n\n----------------------------------------\n\nTITLE: Registering for memory pressure events in v1\nDESCRIPTION: Sets up notification for memory pressure events with medium pressure level in default mode.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nevent := cgroup1.MemoryPressureEvent(cgroup1.MediumPressure, cgroup1.DefaultMode)\nefd, err := control.RegisterMemoryEvent(event)\n```\n\n----------------------------------------\n\nTITLE: Running a Container with EROFS Snapshotter in Bash\nDESCRIPTION: These commands demonstrate how to pull an image and run a container using the EROFS snapshotter. It explicitly specifies the snapshotter when running the container.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/snapshotters/erofs.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ # ensure that the image we are using exists; it is a regular OCI image\n$ ctr image pull docker.io/library/busybox:latest\n$ # run the container with the provides snapshotter\n$ ctr run -rm -t --snapshotter erofs docker.io/library/busybox:latest hello sh\n```\n\n----------------------------------------\n\nTITLE: Task Message Type Definitions\nDESCRIPTION: Protocol Buffer message type definitions for various task operations including requests and responses for operations like kill, exec, checkpoint, metrics and wait.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_32\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"KillRequest\"\n  field {\n    name: \"container_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n  field {\n    name: \"exec_id\"\n    number: 2\n    label: LABEL_OPTIONAL \n    type: TYPE_STRING\n    json_name: \"execId\"\n  }\n  field {\n    name: \"signal\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"signal\"\n  }\n  field {\n    name: \"all\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"all\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing processes in a cgroup v1\nDESCRIPTION: Lists all processes in a cgroup, optionally including processes in child cgroups through the recursive parameter.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nprocesses, err := control.Processes(cgroup1.Devices, recursive)\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks Service Methods in Protobuf\nDESCRIPTION: This snippet defines the methods available in the Tasks service, including operations like Checkpoint, Update, Metrics, and Wait. Each method specifies its input and output types.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_27\n\nLANGUAGE: protobuf\nCODE:\n```\nmethod {\n  name: \"Checkpoint\"\n  input_type: \".containerd.services.tasks.v1.CheckpointTaskRequest\"\n  output_type: \".containerd.services.tasks.v1.CheckpointTaskResponse\"\n}\nmethod {\n  name: \"Update\"\n  input_type: \".containerd.services.tasks.v1.UpdateTaskRequest\"\n  output_type: \".google.protobuf.Empty\"\n}\nmethod {\n  name: \"Metrics\"\n  input_type: \".containerd.services.tasks.v1.MetricsRequest\"\n  output_type: \".containerd.services.tasks.v1.MetricsResponse\"\n}\nmethod {\n  name: \"Wait\"\n  input_type: \".containerd.services.tasks.v1.WaitRequest\"\n  output_type: \".containerd.services.tasks.v1.WaitResponse\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GCR with Service Account Key in Containerd 1.x\nDESCRIPTION: This TOML configuration sets up Google Container Registry authentication using a service account key in containerd 1.x.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/registry.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n\n[plugins.\"io.containerd.grpc.v1.cri\".registry]\n  [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors]\n    [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"docker.io\"]\n      endpoint = [\"https://registry-1.docker.io\"]\n    [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"gcr.io\"]\n      endpoint = [\"https://gcr.io\"]\n  [plugins.\"io.containerd.grpc.v1.cri\".registry.configs]\n    [plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"gcr.io\".auth]\n      username = \"_json_key\"\n      password = 'paste output from jq'\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks Service in Protobuf\nDESCRIPTION: Defines message types and fields for the Tasks service, including CreateTaskRequest, CreateTaskResponse, StartRequest, StartResponse, and others. These messages are used for managing container tasks.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_66\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"CreateTaskRequest\"\n  field {\n    name: \"container_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n  field {\n    name: \"rootfs\"\n    number: 3\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Mount\"\n    json_name: \"rootfs\"\n  }\n  // ... other fields\n}\n\nmessage_type {\n  name: \"CreateTaskResponse\"\n  field {\n    name: \"container_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n  field {\n    name: \"pid\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"pid\"\n  }\n}\n\n// ... other message types\n```\n\n----------------------------------------\n\nTITLE: ContainerD Images Service Definition\nDESCRIPTION: Protobuf definition for the Images service that provides CRUD operations for container images\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_20\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Images\"\n  method {\n    name: \"Get\"\n    input_type: \".containerd.services.images.v1.GetImageRequest\"\n    output_type: \".containerd.services.images.v1.GetImageResponse\"\n  }\n  method {\n    name: \"List\"\n    input_type: \".containerd.services.images.v1.ListImagesRequest\"\n    output_type: \".containerd.services.images.v1.ListImagesResponse\"\n  }\n  method {\n    name: \"Create\"\n    input_type: \".containerd.services.images.v1.CreateImageRequest\"\n    output_type: \".containerd.services.images.v1.CreateImageResponse\"\n  }\n  method {\n    name: \"Update\"\n    input_type: \".containerd.services.images.v1.UpdateImageRequest\"\n    output_type: \".containerd.services.images.v1.UpdateImageResponse\"\n  }\n  method {\n    name: \"Delete\"\n    input_type: \".containerd.services.images.v1.DeleteImageRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling TOML to Go Struct\nDESCRIPTION: Demonstrates how to unmarshal a TOML document into a Go struct using the Unmarshal function.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ndoc := `\nversion = 2\nname = \"go-toml\"\ntags = [\"go\", \"toml\"]\n`\n\nvar cfg MyConfig\nerr := toml.Unmarshal([]byte(doc), &cfg)\nif err != nil {\n\tpanic(err)\n}\nfmt.Println(\"version:\", cfg.Version)\nfmt.Println(\"name:\", cfg.Name)\nfmt.Println(\"tags:\", cfg.Tags)\n```\n\n----------------------------------------\n\nTITLE: Creating a Continuity Manifest\nDESCRIPTION: Command to create a continuity manifest of the current directory, saving the output to a temporary file. The build command generates a Protocol Buffer encoded manifest of filesystem metadata.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/continuity/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ./bin/continuity build . > /tmp/a.pb\n```\n\n----------------------------------------\n\nTITLE: Sequencing Containerd Runtime Actions with Mermaid\nDESCRIPTION: A sequence diagram illustrating the flow of actions between ctr, containerd, and shim when executing the 'ctr run' command. It covers container creation, task creation, shim startup, task scheduling, and various task operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/core/runtime/v2/README.md#2025-04-21_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant ctr\n    participant containerd\n    participant shim\n\n    autonumber\n\n    ctr->>containerd: Create container\n    Note right of containerd: Save container metadata\n    containerd-->>ctr: Container ID\n\n    ctr->>containerd: Create task\n\n    %% Start shim\n    containerd-->shim: Prepare bundle\n    containerd->>shim: Execute binary: containerd-shim-runc-v2 start\n    shim->shim: Start TTRPC server\n    shim-->>containerd: Respond with address: unix://containerd/container.sock\n\n    containerd-->>shim: Create TTRPC client\n\n    %% Schedule task\n\n    Note right of containerd: Schedule new task\n\n    containerd->>shim: TaskService.CreateTaskRequest\n    shim-->>containerd: Task PID\n\n    containerd-->>ctr: Task ID\n\n    %% Start task\n\n    ctr->>containerd: Start task\n\n    containerd->>shim: TaskService.StartRequest\n    shim-->>containerd: OK\n\n    %% Wait task\n\n    ctr->>containerd: Wait task\n\n    containerd->>shim: TaskService.WaitRequest\n    Note right of shim: Block until task exits\n    shim-->>containerd: Exit status\n\n    containerd-->>ctr: OK\n\n    Note over ctr,shim: Other task requests (Kill, Pause, Resume, CloseIO, Exec, etc)\n\n    %% Kill signal\n\n    opt Kill task\n\n    ctr->>containerd: Kill task\n\n    containerd->>shim: TaskService.KillRequest\n    shim-->>containerd: OK\n\n    containerd-->>ctr: OK\n\n    end\n\n    %% Delete task\n\n    ctr->>containerd: Task Delete\n\n    containerd->>shim: TaskService.DeleteRequest\n    shim-->>containerd: Exit information\n\n    containerd->>shim: TaskService.ShutdownRequest\n    shim-->>containerd: OK\n\n    containerd-->shim: Close client\n    containerd->>shim: Execute binary: containerd-shim-runc-v2 delete\n    containerd-->shim: Delete bundle\n\n    containerd-->>ctr: Exit code\n```\n\n----------------------------------------\n\nTITLE: Using Default Fields in Logrus with Go\nDESCRIPTION: Demonstrates how to create logger entries with default fields that will be included in all subsequent log messages from that entry. This is useful for request context logging or including consistent metadata.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nrequestLogger := log.WithFields(log.Fields{\"request_id\": request_id, \"user_ip\": user_ip})\nrequestLogger.Info(\"something happened on that request\") # will log request_id and user_ip\nrequestLogger.Warn(\"something not great happened\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Digest from Bytes in Go\nDESCRIPTION: Creates a content identifier (digest) from a byte slice. This is the fundamental operation for content-addressable storage, allowing unique identification of content based on its value.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nid := digest.FromBytes([]byte(\"my content\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Streaming Certificate Settings\nDESCRIPTION: Configuration section for TLS streaming certificates, specifying paths for the certificate and private key files.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[plugins.\"io.containerd.grpc.v1.cri\".x509_key_pair_streaming]\n  tls_cert_file = \"\"\n  tls_key_file = \"\"\n```\n\n----------------------------------------\n\nTITLE: Converting float32 to Float16 and Back in Go\nDESCRIPTION: Example demonstrating basic Float16 operations including conversion from float32 to Float16, conversion from Float16 to float32, and conditional conversion based on precision check.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/x448/float16/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Convert float32 to float16\npi := float32(math.Pi)\npi16 := float16.Fromfloat32(pi)\n\n// Convert float16 to float32\npi32 := pi16.Float32()\n\n// PrecisionFromfloat32() is faster than the overhead of calling a function.\n// This example only converts if there's no data loss and input is not a subnormal.\nif float16.PrecisionFromfloat32(pi) == float16.PrecisionExact {\n    pi16 := float16.Fromfloat32(pi)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating resources for a cgroup v1\nDESCRIPTION: Updates the resource constraints applied to a cgroup, changing the CPU shares allocation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nshares = uint64(200)\nif err := control.Update(&specs.LinuxResources{\n    CPU: &specs.LinuxCPU{\n        Shares: &shares,\n    },\n}); err != nil {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CRI runtime handlers in containerd config.toml\nDESCRIPTION: Example TOML configuration section for defining runtime handlers in containerd's configuration file. This allows setting up named runtimes for use with the Kubernetes CRI interface.\nSOURCE: https://github.com/containerd/containerd/blob/main/core/runtime/v2/README.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes]\n```\n\n----------------------------------------\n\nTITLE: Custom SpecOpt Implementation for Htop Monitoring\nDESCRIPTION: Demonstrates how to create a custom SpecOpt to configure a container for system monitoring using htop.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/client-opts.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage monitor\n\nimport (\n\t\"github.com/containerd/containerd/v2/pkg/oci\"\n\tspecs \"github.com/opencontainers/runtime-spec/specs-go\"\n)\n\n// WithHtop configures a container to monitor the host system via `htop`\nfunc WithHtop(s *specs.Spec) error {\n\t// make sure we are in the host pid namespace\n\tif err := oci.WithHostNamespace(specs.PIDNamespace)(s); err != nil {\n\t\treturn err\n\t}\n\t// make sure we set htop as our arg\n\ts.Process.Args = []string{\"htop\"}\n\t// make sure we have a tty set for htop\n\tif err := oci.WithTTY(s); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Small Files in /sys Filesystem (Go)\nDESCRIPTION: This code snippet shows how to read small files in the /sys filesystem that contain only a single value. It uses a specialized utility function for efficient reading.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ndata, err := util.SysReadFile(\"/sys/class/power_supply/BAT0/capacity\")\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer for ImageStore in ContainerD Transfer API\nDESCRIPTION: Protobuf message definition for ImageStore which configures how images are stored in containerd, including name, labels, platform support, metadata handling, and unpacking configurations.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_75\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"github.com/containerd/containerd/api/types/transfer/imagestore.proto\"\n  package: \"containerd.types.transfer\"\n  dependency: \"github.com/containerd/containerd/api/types/platform.proto\"\n  message_type {\n    name: \"ImageStore\"\n    field {\n      name: \"name\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"name\"\n    }\n    field {\n      name: \"labels\"\n      number: 2\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.types.transfer.ImageStore.LabelsEntry\"\n      json_name: \"labels\"\n    }\n    field {\n      name: \"platforms\"\n      number: 3\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.types.Platform\"\n      json_name: \"platforms\"\n    }\n    field {\n      name: \"all_metadata\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"allMetadata\"\n    }\n    field {\n      name: \"manifest_limit\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"manifestLimit\"\n    }\n    field {\n      name: \"extra_references\"\n      number: 6\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.types.transfer.ImageReference\"\n      json_name: \"extraReferences\"\n    }\n    field {\n      name: \"unpacks\"\n      number: 10\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.types.transfer.UnpackConfiguration\"\n      json_name: \"unpacks\"\n    }\n    nested_type {\n      name: \"LabelsEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: CNI Config Template for Containerd (Go Template)\nDESCRIPTION: This snippet demonstrates a CNI config template using Go template syntax. It shows how to configure IPAM with support for multiple CIDRs and routes, useful for dualstack networking.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_25\n\nLANGUAGE: go\nCODE:\n```\n\"ipam\": {\n  \"type\": \"host-local\",\n  \"ranges\": [{{range $i, $range := .PodCIDRRanges}}{{if $i}}, {{end}}[{\"subnet\": \"{{$range}}\"}]{{end}}],\n  \"routes\": [{{range $i, $route := .Routes}}{{if $i}}, {{end}}{\"dst\": \"{{$route}}\"}{{end}}]\n}\n```\n\n----------------------------------------\n\nTITLE: Namespaces Service Proto Definition\nDESCRIPTION: Protocol Buffer definition for the Namespaces service in containerd. Defines message types for namespace objects and request/response structures for getting, listing, creating, and updating namespaces that isolate resources.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_18\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"github.com/containerd/containerd/api/services/namespaces/v1/namespace.proto\"\n  package: \"containerd.services.namespaces.v1\"\n  dependency: \"gogoproto/gogo.proto\"\n  dependency: \"google/protobuf/empty.proto\"\n  dependency: \"google/protobuf/field_mask.proto\"\n  message_type {\n    name: \"Namespace\"\n    field {\n      name: \"name\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"name\"\n    }\n    field {\n      name: \"labels\"\n      number: 2\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.namespaces.v1.Namespace.LabelsEntry\"\n      json_name: \"labels\"\n    }\n    nested_type {\n      name: \"LabelsEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n  }\n  message_type {\n    name: \"GetNamespaceRequest\"\n    field {\n      name: \"name\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"name\"\n    }\n  }\n  message_type {\n    name: \"GetNamespaceResponse\"\n    field {\n      name: \"namespace\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.namespaces.v1.Namespace\"\n      options {\n        65001: 0\n      }\n      json_name: \"namespace\"\n    }\n  }\n  message_type {\n    name: \"ListNamespacesRequest\"\n    field {\n      name: \"filter\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"filter\"\n    }\n  }\n  message_type {\n    name: \"ListNamespacesResponse\"\n    field {\n      name: \"namespaces\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.namespaces.v1.Namespace\"\n      options {\n        65001: 0\n      }\n      json_name: \"namespaces\"\n    }\n  }\n  message_type {\n    name: \"CreateNamespaceRequest\"\n    field {\n      name: \"namespace\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.namespaces.v1.Namespace\"\n      options {\n        65001: 0\n      }\n      json_name: \"namespace\"\n    }\n  }\n  message_type {\n    name: \"CreateNamespaceResponse\"\n    field {\n      name: \"namespace\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.namespaces.v1.Namespace\"\n      options {\n        65001: 0\n      }\n      json_name: \"namespace\"\n    }\n  }\n  message_type {\n    name: \"UpdateNamespaceRequest\"\n    field {\n      name: \"namespace\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.namespaces.v1.Namespace\"\n      options {\n        65001: 0\n      }\n      json_name: \"namespace\"\n    }\n    field {\n```\n\n----------------------------------------\n\nTITLE: Good Container Extension Example\nDESCRIPTION: Shows the recommended way to extend container functionality using custom options from separate packages.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/client-opts.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// example code\nimport \"github.com/docker/docker\"\nimport \"github.com/docker/libnetwork\"\n\ncontainer, err := client.NewContainer(ctx, id,\n\tdocker.WithVolume(\"volume-name\"),\n\tlibnetwork.WithOverlayNetwork(\"cluster-network\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Method Name Reporting in Logrus with Go\nDESCRIPTION: Shows how to add the calling method name as a field in log entries by enabling the ReportCaller option in Logrus. This adds some performance overhead but provides additional context in logs.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlog.SetReportCaller(true)\n```\n\n----------------------------------------\n\nTITLE: Encrypting/Decrypting Layers with OCIcrypt in Go\nDESCRIPTION: These Go functions provide the main interface for runtime/build tools to encrypt or decrypt container image layers using the OCIcrypt library. The encryption and decryption processes utilize configurations defined via the `github.com/containers/ocicrypt/config` package. The caller is responsible for ensuring the layer descriptor follows the OCI specification, including encoding and setting annotations.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containers/ocicrypt/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage \"github.com/containers/ocicrypt\"\nfunc EncryptLayer(ec *config.EncryptConfig, encOrPlainLayerReader io.Reader, desc ocispec.Descriptor) (io.Reader, EncryptLayerFinalizer, error)\nfunc DecryptLayer(dc *config.DecryptConfig, encLayerReader io.Reader, desc ocispec.Descriptor, unwrapOnly bool) (io.Reader, digest.Digest, error)\n```\n\n----------------------------------------\n\nTITLE: Restoring Directory Metadata Using a Continuity Manifest\nDESCRIPTION: Example workflow showing how continuity can detect and fix discrepancies between current filesystem state and the metadata in a manifest. This demonstrates breaking and restoring file permissions.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/continuity/README.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ chmod 777 Makefile\n$ ./bin/continuity verify . /tmp/a.pb\n2017/06/23 08:00:34 error verifying manifest: resource \"/Makefile\" has incorrect mode: -rwxrwxrwx != -rw-rw-r--\n$ ./bin/continuity apply . /tmp/a.pb\n$ stat -c %a Makefile\n664\n$ ./bin/continuity verify . /tmp/a.pb\n```\n\n----------------------------------------\n\nTITLE: Container Events Definition\nDESCRIPTION: Defines events related to container lifecycle including create, update and delete operations\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\npackage containerd.events;\nmessage ContainerCreate {\n  string id = 1;\n  string image = 2;\n  Runtime runtime = 3;\n  message Runtime {\n    string name = 1;\n    google.protobuf.Any options = 2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous Event Queue in Go\nDESCRIPTION: This snippet shows how to create an unbounded queue for handling events asynchronously. The queue will allow events to be sent without blocking the main execution path, making it suitable for handling HTTP requests.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/docker/go-events/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nqueue := NewQueue(retry)\n```\n\n----------------------------------------\n\nTITLE: Adding a process to a cgroup v1\nDESCRIPTION: Adds a process with a specified PID to the controlled cgroup.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif err := control.Add(cgroup1.Process{Pid:1234}); err != nil {\n}\n```\n\n----------------------------------------\n\nTITLE: Killing all processes in a cgroup v2\nDESCRIPTION: Terminates all processes in a systemd-managed cgroup v2 slice.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nm, err := cgroup2.LoadSystemd(\"/\", \"my-cgroup-abc.slice\")\nif err != nil {\n\treturn err\n}\nerr = m.Kill()\nif err != nil {\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Hash Implementations in Go\nDESCRIPTION: Demonstrates how to import the necessary hash implementations for the go-digest package. These imports are required to avoid panics when using the package.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    _ \"crypto/sha256\"\n    _ \"crypto/sha512\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Buckets in BoltDB with Go\nDESCRIPTION: Creates a new bucket in a BoltDB database using Tx.CreateBucket() within a transaction. The function returns an error if the bucket creation fails.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ndb.Update(func(tx *bolt.Tx) error {\n\tb, err := tx.CreateBucket([]byte(\"MyBucket\"))\n\tif err != nil {\n\t\treturn fmt.Errorf(\"create bucket: %s\", err)\n\t}\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: String Metrics Usage Examples in Go\nDESCRIPTION: Demonstrates usage of various string metric algorithms including Wagner-Fischer (Levenshtein), Ukkonen, Jaro, Jaro-Winkler, Soundex, and Hamming distance calculations.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/xrash/smetrics/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/xrash/smetrics\"\n)\n\nfunc main() {\n\tsmetrics.WagnerFischer(\"POTATO\", \"POTATTO\", 1, 1, 2)\n\tsmetrics.WagnerFischer(\"MOUSE\", \"HOUSE\", 2, 2, 4)\n\n\tsmetrics.Ukkonen(\"POTATO\", \"POTATTO\", 1, 1, 2)\n\tsmetrics.Ukkonen(\"MOUSE\", \"HOUSE\", 2, 2, 4)\n\n\tsmetrics.Jaro(\"AL\", \"AL\")\n\tsmetrics.Jaro(\"MARTHA\", \"MARHTA\")\n\n\tsmetrics.JaroWinkler(\"AL\", \"AL\", 0.7, 4)\n\tsmetrics.JaroWinkler(\"MARTHA\", \"MARHTA\", 0.7, 4)\n\n\tsmetrics.Soundex(\"Euler\")\n\tsmetrics.Soundex(\"Ellery\")\n\n\tsmetrics.Hamming(\"aaa\", \"aaa\")\n\tsmetrics.Hamming(\"aaa\", \"aab\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Labeled Timer Metric for Container Actions\nDESCRIPTION: Shows how to create a labeled timer metric to track the duration of different container actions like create, start, and delete using a single metric with a dynamic action label\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/docker/go-metrics/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncontainerActions = ns.NewLabeledTimer(\"container_actions\", \"The number of milliseconds it takes to process each container action\", \"action\")\ncontainerActions.WithValues(\"create\").UpdateSince(start)\n```\n\n----------------------------------------\n\nTITLE: Configuring Containerd Plugins with Version 2 in TOML\nDESCRIPTION: This snippet demonstrates how to configure a containerd plugin using version 2 of the configuration format. It shows the version header and the structure for configuring the cgroups monitoring plugin.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/PLUGINS.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n\n[plugins]\n  [plugins.\"io.containerd.monitor.v1.cgroups\"]\n    no_prometheus = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Decryption in Containerd CRI Plugin\nDESCRIPTION: Defines settings for handling encrypted container images, including the key model used for decryption. The 'node' model enables image decryption using keys obtained from the node.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_21\n\nLANGUAGE: toml\nCODE:\n```\n# 'plugins.\"io.containerd.grpc.v1.cri\".image_decryption' contains config related\n# to handling decryption of encrypted container images.\n[plugins.\"io.containerd.grpc.v1.cri\".image_decryption]\n  # key_model defines the name of the key model used for how the cri obtains\n  # keys used for decryption of encrypted container images.\n  # The [decryption document](https://github.com/containerd/containerd/blob/main/docs/cri/decryption.md)\n  # contains additional information about the key models available.\n  #\n  # Set of available string options: {\"\", \"node\"}\n  # Omission of this field defaults to the empty string \"\", which indicates no key model,\n  # disabling image decryption.\n  #\n  # In order to use the decryption feature, additional configurations must be made.\n  # The [decryption document](https://github.com/containerd/containerd/blob/main/docs/cri/decryption.md)\n  # provides information of how to set up stream processors and the containerd imgcrypt decoder\n  # with the appropriate key models.\n  #\n  # Additional information:\n  # * Stream processors: https://github.com/containerd/containerd/blob/main/docs/stream_processors.md\n  # * Containerd imgcrypt: https://github.com/containerd/imgcrypt\n  key_model = \"node\"\n```\n\n----------------------------------------\n\nTITLE: Defining ResizePtyRequest Message Type in Protobuf\nDESCRIPTION: This snippet defines the `ResizePtyRequest` message type for protobuf. It represents a request to resize a pseudo-terminal (PTY) associated with a task or an executed process, identified by their respective IDs (`id` and `exec_id`). The request includes the desired width and height of the PTY.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_23\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"ResizePtyRequest\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"exec_id\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"execId\"\n    }\n    field {\n      name: \"width\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"width\"\n    }\n    field {\n      name: \"height\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"height\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer Runtime Options in ContainerD\nDESCRIPTION: Protobuf message definition for runtime options that specifies type URL, configuration path and binary configuration body. This allows flexible runtime configuration for different containerd runtimes.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_74\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"github.com/containerd/containerd/api/types/runtimeoptions/v1/api.proto\"\n  package: \"runtimeoptions.v1\"\n  message_type {\n    name: \"Options\"\n    field {\n      name: \"type_url\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"typeUrl\"\n    }\n    field {\n      name: \"config_path\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"configPath\"\n    }\n    field {\n      name: \"config_body\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_BYTES\n      json_name: \"configBody\"\n    }\n  }\n  options {\n    go_package: \"github.com/containerd/containerd/api/types/runtimeoptions/v1;runtimeoptions\"\n  }\n  syntax: \"proto3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Pointers with Mergo in Go\nDESCRIPTION: Example of using Mergo to merge structs with pointer fields, demonstrating the use of WithoutDereference option.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/dario.cat/mergo/README.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"dario.cat/mergo\"\n)\n\ntype Foo struct {\n\tA *string\n\tB int64\n}\n\nfunc main() {\n\tfirst := \"first\"\n\tsecond := \"second\"\n\tsrc := Foo{\n\t\tA: &first,\n\t\tB: 2,\n\t}\n\n\tdest := Foo{\n\t\tA: &second,\n\t\tB: 1,\n\t}\n\n\tmergo.Merge(&dest, src, mergo.WithOverride, mergo.WithoutDereference)\n}\n```\n\n----------------------------------------\n\nTITLE: ContainerD Version Service Definition in Protocol Buffers\nDESCRIPTION: Protocol buffer definition for the ContainerD Version service, which provides version information about the running ContainerD instance, including version string and source code revision.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_70\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"VersionResponse\"\n  field {\n    name: \"version\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"version\"\n  }\n  field {\n    name: \"revision\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"revision\"\n  }\n}\nservice {\n  name: \"Version\"\n  method {\n    name: \"Version\"\n    input_type: \".google.protobuf.Empty\"\n    output_type: \".containerd.services.version.v1.VersionResponse\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NRI Plugin Settings in Containerd\nDESCRIPTION: TOML configuration block for disabling NRI support and configuring various NRI plugin parameters in Containerd's config file. Includes settings for socket paths, timeouts, and plugin directories.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/NRI.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n  [plugins.\"io.containerd.nri.v1.nri\"]\n    # Disable NRI support in containerd.\n    disable = true\n    # Allow connections from externally launched NRI plugins.\n    disable_connections = false\n    # plugin_config_path is the directory to search for plugin-specific configuration.\n    plugin_config_path = \"/etc/nri/conf.d\"\n    # plugin_path is the directory to search for plugins to launch on startup.\n    plugin_path = \"/opt/nri/plugins\"\n    # plugin_registration_timeout is the timeout for a plugin to register after connection.\n    plugin_registration_timeout = \"5s\"\n    # plugin_request_timeout is the timeout for a plugin to handle an event/request.\n    plugin_request_timeout = \"2s\"\n    # socket_path is the path of the NRI socket to create for plugins to connect to.\n    socket_path = \"/var/run/nri/nri.sock\"\n```\n\n----------------------------------------\n\nTITLE: Define Diff Service in Protobuf\nDESCRIPTION: This protobuf snippet defines the `Diff` service, including methods for `Apply` and `Diff` operations.  It specifies the input and output message types for these methods, essential for managing content diffs in containerd.  The go_package option indicates where the generated Go code will reside.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_11\n\nLANGUAGE: protobuf\nCODE:\n```\n  service {\n    name: \"Diff\"\n    method {\n      name: \"Apply\"\n      input_type: \".containerd.services.diff.v1.ApplyRequest\"\n      output_type: \".containerd.services.diff.v1.ApplyResponse\"\n    }\n    method {\n      name: \"Diff\"\n      input_type: \".containerd.services.diff.v1.DiffRequest\"\n      output_type: \".containerd.services.diff.v1.DiffResponse\"\n    }\n  }\n  options {\n    go_package: \"github.com/containerd/containerd/api/services/diff/v1;diff\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Find User Function Implementation\nDESCRIPTION: This function retrieves a user based on the provided user ID, demonstrating how to access path parameters from a RESTful request using the Go-Restful framework.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/emicklei/go-restful/v3/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc (u UserResource) findUser(request *restful.Request, response *restful.Response) {\n\tid := request.PathParameter(\"user-id\")\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Verifier with io.Reader in Go\nDESCRIPTION: Shows how to verify content from an io.Reader against a digest using the Verifier type. This is useful when dealing with streams of data rather than byte slices.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nrd := getContent()\nverifier := id.Verifier()\nio.Copy(verifier, rd)\n\nif !verifier.Verified() {\n  return errors.New(\"the content has changed!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Default Containerd Configuration File\nDESCRIPTION: Shows how to generate a default Containerd configuration file using the containerd.exe command and save it to a specific location on Windows.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-21_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\containerd.exe config default | Out-File \"C:\\Program Files\\containerd\\config.toml\" -Encoding ascii\n```\n\n----------------------------------------\n\nTITLE: Defining Image Service Request/Response Messages in Protobuf\nDESCRIPTION: Protobuf definitions for image-related service operations including get, list, create, update, and delete methods with corresponding request and response message structures\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_14\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Image {\n  string name = 1;\n  repeated LabelsEntry labels = 2;\n  Descriptor target = 3;\n  Timestamp created_at = 7;\n  Timestamp updated_at = 8;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Content Against a Digest in Go\nDESCRIPTION: Demonstrates how to verify if content matches a previously generated digest. This is essential for ensuring content integrity in distributed systems.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif id != digest.FromBytes([]byte(\"my content\")) {\n  return errors.New(\"the content has changed!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Network Bridge with Netlink in Go\nDESCRIPTION: This example demonstrates how to create a new bridge interface named \"foo\" and add an existing eth1 interface to it using the netlink library. It uses LinkAdd to create the bridge and LinkSetMaster to associate the interface with it.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/vishvananda/netlink/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/vishvananda/netlink\"\n)\n\nfunc main() {\n    la := netlink.NewLinkAttrs()\n    la.Name = \"foo\"\n    mybridge := &netlink.Bridge{LinkAttrs: la}\n    err := netlink.LinkAdd(mybridge)\n    if err != nil  {\n        fmt.Printf(\"could not add %s: %v\\n\", la.Name, err)\n    }\n    eth1, _ := netlink.LinkByName(\"eth1\")\n    netlink.LinkSetMaster(eth1, mybridge)\n}\n```\n\n----------------------------------------\n\nTITLE: Snapshot Update and List Operations in Containerd Proto\nDESCRIPTION: Protocol Buffer message definitions for updating and listing snapshots in Containerd. Includes message types for update requests with field masks, list operations with filtering capabilities, and their corresponding response types.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_61\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"UpdateSnapshotRequest\"\n    field {\n      name: \"snapshotter\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"snapshotter\"\n    }\n    field {\n      name: \"info\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.snapshots.v1.Info\"\n      json_name: \"info\"\n    }\n    field {\n      name: \"update_mask\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.FieldMask\"\n      json_name: \"updateMask\"\n    }\n  }\n  message_type {\n    name: \"UpdateSnapshotResponse\"\n    field {\n      name: \"info\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.snapshots.v1.Info\"\n      json_name: \"info\"\n    }\n  }\n  message_type {\n    name: \"ListSnapshotsRequest\"\n    field {\n      name: \"snapshotter\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"snapshotter\"\n    }\n    field {\n      name: \"filters\"\n      number: 2\n      label: LABEL_REPEATED\n      type: TYPE_STRING\n      json_name: \"filters\"\n    }\n  }\n  message_type {\n    name: \"ListSnapshotsResponse\"\n    field {\n      name: \"info\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.snapshots.v1.Info\"\n      json_name: \"info\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Structured Logging with Fields in Logrus with Go\nDESCRIPTION: Shows the recommended approach of using structured logging with fields in Logrus. Instead of using formatting strings, specific fields provide more context and make logs more searchable and analyzable.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nlog.WithFields(log.Fields{\n  \"event\": event,\n  \"topic\": topic,\n  \"key\": key,\n}).Fatal(\"Failed to send event\")\n```\n\n----------------------------------------\n\nTITLE: Reading and Parsing Files in Prometheus Project (Go)\nDESCRIPTION: This code snippet demonstrates the recommended approach for reading and parsing files in the Prometheus project, particularly for /proc and /sys filesystems. It uses utility functions to read the entire file content efficiently.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ndata, err := util.ReadFileNoStat(\"/proc/cpuinfo\")\nif err != nil {\n    return err\n}\nreader := bytes.NewReader(data)\nscanner := bufio.NewScanner(reader)\n```\n\n----------------------------------------\n\nTITLE: Registering Containerd Builtins in Go\nDESCRIPTION: Code demonstrates dynamic registration of containerd built-in components including Linux runtime, content services, execution services, and snapshot drivers (BTRFS and overlay). This implementation allows users to compile containerd with additional snapshotters beyond the built-in ones.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-03-10.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\n// register containerd builtins here\nimport (\n\t_ \"github.com/containerd/containerd/linux\"\n\t_ \"github.com/containerd/containerd/services/content\"\n\t_ \"github.com/containerd/containerd/services/execution\"\n\t_ \"github.com/containerd/containerd/snapshot/btrfs\"\n\t_ \"github.com/containerd/containerd/snapshot/overlay\"\n)\n```\n\n----------------------------------------\n\nTITLE: Snapshotter Configuration for Containerd 1.x\nDESCRIPTION: Configuration for setting overlayfs as the default snapshotter in containerd 1.x.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n[plugins.\"io.containerd.grpc.v1.cri\".containerd]\n  snapshotter = \"overlayfs\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Module Dependencies\nDESCRIPTION: This snippet lists the explicit dependencies for the containerd project, including the package import paths and version constraints. It's typically found in a go.mod file to manage Go module dependencies.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/modules.txt#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n# github.com/docker/go-metrics v0.0.1\n## explicit; go 1.11\ngithub.com/docker/go-metrics\n# github.com/docker/go-units v0.5.0\n## explicit\ngithub.com/docker/go-units\n# github.com/emicklei/go-restful/v3 v3.11.0\n## explicit; go 1.13\ngithub.com/emicklei/go-restful/v3\ngithub.com/emicklei/go-restful/v3/log\n# github.com/felixge/httpsnoop v1.0.4\n## explicit; go 1.13\ngithub.com/felixge/httpsnoop\n# github.com/fsnotify/fsnotify v1.9.0\n## explicit; go 1.17\ngithub.com/fsnotify/fsnotify\ngithub.com/fsnotify/fsnotify/internal\n# github.com/fxamacker/cbor/v2 v2.7.0\n## explicit; go 1.17\ngithub.com/fxamacker/cbor/v2\n# github.com/go-jose/go-jose/v4 v4.0.5\n## explicit; go 1.21\ngithub.com/go-jose/go-jose/v4\ngithub.com/go-jose/go-jose/v4/cipher\ngithub.com/go-jose/go-jose/v4/json\n# github.com/go-logr/logr v1.4.2\n## explicit; go 1.18\ngithub.com/go-logr/logr\ngithub.com/go-logr/logr/funcr\n# github.com/go-logr/stdr v1.2.2\n## explicit; go 1.16\ngithub.com/go-logr/stdr\n# github.com/godbus/dbus/v5 v5.1.0\n## explicit; go 1.12\ngithub.com/godbus/dbus/v5\n# github.com/gogo/protobuf v1.3.2\n## explicit; go 1.15\ngithub.com/gogo/protobuf/gogoproto\ngithub.com/gogo/protobuf/proto\ngithub.com/gogo/protobuf/protoc-gen-gogo/descriptor\ngithub.com/gogo/protobuf/sortkeys\n# github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da\n## explicit\ngithub.com/golang/groupcache/lru\n# github.com/golang/protobuf v1.5.4\n## explicit; go 1.17\ngithub.com/golang/protobuf/proto\n# github.com/google/go-cmp v0.7.0\n## explicit; go 1.21\ngithub.com/google/go-cmp/cmp\ngithub.com/google/go-cmp/cmp/internal/diff\ngithub.com/google/go-cmp/cmp/internal/flags\ngithub.com/google/go-cmp/cmp/internal/function\ngithub.com/google/go-cmp/cmp/internal/value\n# github.com/google/gofuzz v1.2.0\n## explicit; go 1.12\ngithub.com/google/gofuzz\ngithub.com/google/gofuzz/bytesource\n# github.com/google/uuid v1.6.0\n## explicit\ngithub.com/google/uuid\n# github.com/gorilla/websocket v1.5.0\n## explicit; go 1.12\ngithub.com/gorilla/websocket\n# github.com/grpc-ecosystem/go-grpc-middleware/providers/prometheus v1.0.1\n## explicit; go 1.19\ngithub.com/grpc-ecosystem/go-grpc-middleware/providers/prometheus\n# github.com/grpc-ecosystem/go-grpc-middleware/v2 v2.1.0\n## explicit; go 1.19\ngithub.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors\n# github.com/grpc-ecosystem/grpc-gateway/v2 v2.26.1\n## explicit; go 1.22\ngithub.com/grpc-ecosystem/grpc-gateway/v2/internal/httprule\ngithub.com/grpc-ecosystem/grpc-gateway/v2/runtime\ngithub.com/grpc-ecosystem/grpc-gateway/v2/utilities\n# github.com/intel/goresctrl v0.8.0\n## explicit; go 1.20\ngithub.com/intel/goresctrl/pkg/blockio\ngithub.com/intel/goresctrl/pkg/kubernetes\ngithub.com/intel/goresctrl/pkg/log\ngithub.com/intel/goresctrl/pkg/path\ngithub.com/intel/goresctrl/pkg/rdt\ngithub.com/intel/goresctrl/pkg/utils\n# github.com/json-iterator/go v1.1.12\n## explicit; go 1.12\ngithub.com/json-iterator/go\n# github.com/klauspost/compress v1.18.0\n## explicit; go 1.22\ngithub.com/klauspost/compress\ngithub.com/klauspost/compress/fse\ngithub.com/klauspost/compress/huff0\ngithub.com/klauspost/compress/internal/cpuinfo\ngithub.com/klauspost/compress/internal/le\ngithub.com/klauspost/compress/internal/snapref\ngithub.com/klauspost/compress/zstd\ngithub.com/klauspost/compress/zstd/internal/xxhash\n# github.com/mdlayher/socket v0.5.1\n## explicit; go 1.20\ngithub.com/mdlayher/socket\n# github.com/mdlayher/vsock v1.2.1\n## explicit; go 1.20\ngithub.com/mdlayher/vsock\n# github.com/miekg/pkcs11 v1.1.1\n## explicit; go 1.12\ngithub.com/miekg/pkcs11\n# github.com/mistifyio/go-zfs/v3 v3.0.1\n## explicit; go 1.14\ngithub.com/mistifyio/go-zfs/v3\n# github.com/moby/locker v1.0.1\n## explicit; go 1.13\ngithub.com/moby/locker\n# github.com/moby/spdystream v0.5.0\n## explicit; go 1.13\ngithub.com/moby/spdystream\ngithub.com/moby/spdystream/spdy\n# github.com/moby/sys/mountinfo v0.7.2\n## explicit; go 1.17\ngithub.com/moby/sys/mountinfo\n# github.com/moby/sys/sequential v0.6.0\n## explicit; go 1.17\ngithub.com/moby/sys/sequential\n# github.com/moby/sys/signal v0.7.1\n## explicit; go 1.17\ngithub.com/moby/sys/signal\n# github.com/moby/sys/symlink v0.3.0\n## explicit; go 1.17\ngithub.com/moby/sys/symlink\n# github.com/moby/sys/user v0.4.0\n## explicit; go 1.17\ngithub.com/moby/sys/user\n# github.com/moby/sys/userns v0.1.0\n## explicit; go 1.21\ngithub.com/moby/sys/userns\n# github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd\n## explicit\ngithub.com/modern-go/concurrent\n# github.com/modern-go/reflect2 v1.0.2\n## explicit; go 1.12\ngithub.com/modern-go/reflect2\n# github.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822\n## explicit\ngithub.com/munnerz/goautoneg\n# github.com/mxk/go-flowrate v0.0.0-20140419014527-cca7078d478f\n## explicit\ngithub.com/mxk/go-flowrate/flowrate\n# github.com/opencontainers/go-digest v1.0.0\n## explicit; go 1.13\ngithub.com/opencontainers/go-digest\ngithub.com/opencontainers/go-digest/digestset\n# github.com/opencontainers/image-spec v1.1.1\n## explicit; go 1.18\ngithub.com/opencontainers/image-spec/identity\ngithub.com/opencontainers/image-spec/specs-go\ngithub.com/opencontainers/image-spec/specs-go/v1\n# github.com/opencontainers/runtime-spec v1.2.1\n## explicit\ngithub.com/opencontainers/runtime-spec/specs-go\ngithub.com/opencontainers/runtime-spec/specs-go/features\n# github.com/opencontainers/runtime-tools v0.9.1-0.20221107090550-2e043c6bd626\n## explicit; go 1.16\ngithub.com/opencontainers/runtime-tools/generate\ngithub.com/opencontainers/runtime-tools/generate/seccomp\ngithub.com/opencontainers/runtime-tools/validate/capabilities\n# github.com/opencontainers/selinux v1.12.0\n## explicit; go 1.19\ngithub.com/opencontainers/selinux/go-selinux\ngithub.com/opencontainers/selinux/go-selinux/label\ngithub.com/opencontainers/selinux/pkg/pwalkdir\n# github.com/pelletier/go-toml/v2 v2.2.4\n## explicit; go 1.21.0\ngithub.com/pelletier/go-toml/v2\ngithub.com/pelletier/go-toml/v2/internal/characters\ngithub.com/pelletier/go-toml/v2/internal/danger\ngithub.com/pelletier/go-toml/v2/internal/tracker\ngithub.com/pelletier/go-toml/v2/unstable\n# github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7\n## explicit; go 1.17\ngithub.com/petermattis/goid\n# github.com/pkg/errors v0.9.1\n## explicit\ngithub.com/pkg/errors\n# github.com/pmezard/go-difflib v1.0.0\n## explicit\ngithub.com/pmezard/go-difflib/difflib\n# github.com/prometheus/client_golang v1.22.0\n## explicit; go 1.22\ngithub.com/prometheus/client_golang/internal/github.com/golang/gddo/httputil\ngithub.com/prometheus/client_golang/internal/github.com/golang/gddo/httputil/header\ngithub.com/prometheus/client_golang/prometheus\ngithub.com/prometheus/client_golang/prometheus/internal\ngithub.com/prometheus/client_golang/prometheus/promhttp\ngithub.com/prometheus/client_golang/prometheus/promhttp/internal\n# github.com/prometheus/client_model v0.6.1\n## explicit; go 1.19\ngithub.com/prometheus/client_model/go\n# github.com/prometheus/common v0.62.0\n## explicit; go 1.21\ngithub.com/prometheus/common/expfmt\ngithub.com/prometheus/common/model\n# github.com/prometheus/procfs v0.15.1\n## explicit; go 1.20\ngithub.com/prometheus/procfs\ngithub.com/prometheus/procfs/internal/fs\ngithub.com/prometheus/procfs/internal/util\n# github.com/russross/blackfriday/v2 v2.1.0\n## explicit\ngithub.com/russross/blackfriday/v2\n# github.com/sasha-s/go-deadlock v0.3.5\n## explicit\ngithub.com/sasha-s/go-deadlock\n# github.com/sirupsen/logrus v1.9.3\n## explicit; go 1.13\ngithub.com/sirupsen/logrus\n# github.com/smallstep/pkcs7 v0.1.1\n## explicit; go 1.14\ngithub.com/smallstep/pkcs7\ngithub.com/smallstep/pkcs7/internal/legacy/x509\n# github.com/stefanberger/go-pkcs11uri v0.0.0-20230803200340-78284954bff6\n## explicit; go 1.19\ngithub.com/stefanberger/go-pkcs11uri\n# github.com/stretchr/testify v1.10.0\n## explicit; go 1.17\ngithub.com/stretchr/testify/assert\ngithub.com/stretchr/testify/assert/yaml\ngithub.com/stretchr/testify/require\n# github.com/syndtr/gocapability v0.0.0-20200815063812-42c35b437635\n## explicit\ngithub.com/syndtr/gocapability/capability\n# github.com/tchap/go-patricia/v2 v2.3.2\n## explicit; go 1.16\ngithub.com/tchap/go-patricia/v2/patricia\n# github.com/urfave/cli/v2 v2.27.6\n## explicit; go 1.18\ngithub.com/urfave/cli/v2\n# github.com/vishvananda/netlink v1.3.0\n## explicit; go 1.12\ngithub.com/vishvananda/netlink\ngithub.com/vishvananda/netlink/nl\n# github.com/vishvananda/netns v0.0.5\n## explicit; go 1.17\ngithub.com/vishvananda/netns\n# github.com/x448/float16 v0.8.4\n## explicit; go 1.11\ngithub.com/x448/float16\n# github.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1\n## explicit; go 1.15\ngithub.com/xrash/smetrics\n# go.etcd.io/bbolt v1.4.0\n## explicit; go 1.23\ngo.etcd.io/bbolt\ngo.etcd.io/bbolt/errors\ngo.etcd.io/bbolt/internal/common\ngo.etcd.io/bbolt/internal/freelist\n# go.opencensus.io v0.24.0\n## explicit; go 1.13\ngo.opencensus.io\ngo.opencensus.io/internal\ngo.opencensus.io/trace\ngo.opencensus.io/trace/internal\ngo.opencensus.io/trace/tracestate\n# go.opentelemetry.io/auto/sdk v1.1.0\n## explicit; go 1.22.0\ngo.opentelemetry.io/auto/sdk\ngo.opentelemetry.io/auto/sdk/internal/telemetry\n# go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.60.0\n## explicit; go 1.22.0\ngo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\ngo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc/internal\n# go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.60.0\n## explicit; go 1.22.0\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp/internal/request\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp/internal/semconv\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp/internal/semconvutil\n# go.opentelemetry.io/otel v1.35.0\n## explicit; go 1.20\ngo.opentelemetry.io/otel\n```\n\n----------------------------------------\n\nTITLE: Listing Containerd Content with CLI\nDESCRIPTION: This command uses the containerd CLI to list the content in the store, showing digests, sizes, ages, and labels for each blob.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/content-flow.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ctr content ls\nDIGEST                                                                  SIZE    AGE             LABELS\nsha256:2a9865e55c37293b71df051922022898d8e4ec0f579c9b53a0caee1b170bc81c 1.862kB 20 minutes      containerd.io/distribution.source.docker.io=library/redis,containerd.io/gc.ref.content.m.0=sha256:9bb13890319dc01e5f8a4d3d0c4c72685654d682d568350fd38a02b1d70aee6b,containerd.io/gc.ref.content.m.1=sha256:aeb53f8db8c94d2cd63ca860d635af4307967aa11a2fdead98ae0ab3a329f470,containerd.io/gc.ref.content.m.2=sha256:17dc42e40d4af0a9e84c738313109f3a95e598081beef6c18a05abb57337aa5d,containerd.io/gc.ref.content.m.3=sha256:613f4797d2b6653634291a990f3e32378c7cfe3cdd439567b26ca340b8946013,containerd.io/gc.ref.content.m.4=sha256:ee0e1f8d8d338c9506b0e487ce6c2c41f931d1e130acd60dc7794c3a246eb59e,containerd.io/gc.ref.content.m.5=sha256:1072145f8eea186dcedb6b377b9969d121a00e65ae6c20e9cd631483178ea7ed,containerd.io/gc.ref.content.m.6=sha256:4b7860fcaea5b9bbd6249c10a3dc02a5b9fb339e8aef17a542d6126a6af84d96,containerd.io/gc.ref.content.m.7=sha256:d66dfc869b619cd6da5b5ae9d7b1cbab44c134b31d458de07f7d580a84b63f69\nsha256:9bb13890319dc01e5f8a4d3d0c4c72685654d682d568350fd38a02b1d70aee6b 1.572kB 20 minutes      containerd.io/distribution.source.docker.io=library/redis,containerd.io/gc.ref.content.config=sha256:987b553c835f01f46eb1859bc32f564119d5833801a27b25a0ca5c6b8b6e111a,containerd.io/gc.ref.content.l.0=sha256:bb79b6b2107fea8e8a47133a660b78e3a546998fcf0427be39ac9a0af4a97e90,containerd.io/gc.ref.content.l.1=sha256:1ed3521a5dcbd05214eb7f35b952ecf018d5a6610c32ba4e315028c556f45e94,containerd.io/gc.ref.content.l.2=sha256:5999b99cee8f2875d391d64df20b6296b63f23951a7d41749f028375e887cd05,containerd.io/gc.ref.content.l.3=sha256:bfee6cb5fdad6b60ec46297f44542ee9d8ac8f01c072313a51cd7822df3b576f,containerd.io/gc.ref.content.l.4=sha256:fd36a1ebc6728807cbb1aa7ef24a1861343c6dc174657721c496613c7b53bd07,containerd.io/gc.ref.content.l.5=sha256:97481c7992ebf6f22636f87e4d7b79e962f928cdbe6f2337670fa6c9a9636f04\nsha256:987b553c835f01f46eb1859bc32f564119d5833801a27b25a0ca5c6b8b6e111a 7.648kB 20 minutes      containerd.io/distribution.source.docker.io=library/redis,containerd.io/gc.ref.snapshot.overlayfs=sha256:33bd296ab7f37bdacff0cb4a5eb671bcb3a141887553ec4157b1e64d6641c1cd\nsha256:97481c7992ebf6f22636f87e4d7b79e962f928cdbe6f2337670fa6c9a9636f04 409B    20 minutes      containerd.io/distribution.source.docker.io=library/redis,containerd.io/uncompressed=sha256:d442ae63d423b4b1922875c14c3fa4e801c66c689b69bfd853758fde996feffb\nsha256:5999b99cee8f2875d391d64df20b6296b63f23951a7d41749f028375e887cd05 1.418MB 20 minutes      containerd.io/distribution.source.docker.io=library/redis,containerd.io/uncompressed=sha256:223b15010c47044b6bab9611c7a322e8da7660a8268949e18edde9c6e3ea3700\nsha256:bfee6cb5fdad6b60ec46297f44542ee9d8ac8f01c072313a51cd7822df3b576f 7.348MB 20 minutes      containerd.io/distribution.source.docker.io=library/redis,containerd.io/uncompressed=sha256:b96fedf8ee00e59bf69cf5bc8ed19e92e66ee8cf83f0174e33127402b650331d\nsha256:fd36a1ebc6728807cbb1aa7ef24a1861343c6dc174657721c496613c7b53bd07 98B     20 minutes      containerd.io/distribution.source.docker.io=library/redis,containerd.io/uncompressed=sha256:aff00695be0cebb8a114f8c5187fd6dd3d806273004797a00ad934ec9cd98212\nsha256:bb79b6b2107fea8e8a47133a660b78e3a546998fcf0427be39ac9a0af4a97e90 27.09MB 19 minutes      containerd.io/distribution.source.docker.io=library/redis,containerd.io/uncompressed=sha256:d0fe97fa8b8cefdffcef1d62b65aba51a6c87b6679628a2b50fc6a7a579f764c\nsha256:1ed3521a5dcbd05214eb7f35b952ecf018d5a6610c32ba4e315028c556f45e94 1.732kB 20 minutes      containerd.io/distribution.source.docker.io=library/redis,containerd.io/uncompressed=sha256:832f21763c8e6b070314e619ebb9ba62f815580da6d0eaec8a1b080bd01575f7\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Mirrors in TOML\nDESCRIPTION: This set of snippets details the configuration of host or mirror namespaces in Containerd's TOML format. Each host is set with specific capabilities and authentication, supporting various client and CA settings.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/hosts.md#2025-04-21_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n[host.\"https://mirror.registry\"]\n  capabilities = [\"pull\"]\n  ca = \"/etc/certs/mirror.pem\"\n  skip_verify = false\n  [host.\"https://mirror.registry\".header]\n    x-custom-2 = [\"value1\", \"value2\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\n[host.\"https://mirror-bak.registry/us\"]\n  capabilities = [\"pull\"]\n  skip_verify = true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[host.\"http://mirror.registry\"]\n  capabilities = [\"pull\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\n[host.\"https://test-1.registry\"]\n  capabilities = [\"pull\", \"resolve\", \"push\"]\n  ca = [\"/etc/certs/test-1-ca.pem\", \"/etc/certs/special.pem\"]\n  client = [[\"/etc/certs/client.cert\", \"/etc/certs/client.key\"],[\"/etc/certs/client.pem\", \"\"]]\n```\n\nLANGUAGE: toml\nCODE:\n```\n[host.\"https://test-2.registry\"]\n  client = \"/etc/certs/client.pem\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[host.\"https://test-3.registry\"]\n  client = [\"/etc/certs/client-1.pem\", \"/etc/certs/client-2.pem\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\n[host.\"https://non-compliant-mirror.registry/v2/upstream\"]\n  capabilities = [\"pull\"]\n  override_path = true\n```\n\n----------------------------------------\n\nTITLE: Marshaling Go Struct to TOML\nDESCRIPTION: Shows how to marshal a Go struct into a TOML document using the Marshal function.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ncfg := MyConfig{\n\tVersion: 2,\n\tName:    \"go-toml\",\n\tTags:    []string{\"go\", \"toml\"},\n}\n\nb, err := toml.Marshal(cfg)\nif err != nil {\n\tpanic(err)\n}\nfmt.Println(string(b))\n```\n\n----------------------------------------\n\nTITLE: Building Containerd\nDESCRIPTION: Commands to build and install containerd within the Docker container.\nSOURCE: https://github.com/containerd/containerd/blob/main/BUILDING.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nmake && make install\n```\n\n----------------------------------------\n\nTITLE: Define Images Service in Protobuf\nDESCRIPTION: This protobuf snippet defines the `Images` service, including methods for `Get`, `List`, `Create`, `Update`, and `Delete` operations. It defines the input and output types for each method.  This configuration specifies the main operations for managing container images within containerd. The go_package option dictates the Go code's destination.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_13\n\nLANGUAGE: protobuf\nCODE:\n```\n  service {\n    name: \"Images\"\n    method {\n      name: \"Get\"\n      input_type: \".containerd.services.images.v1.GetImageRequest\"\n      output_type: \".containerd.services.images.v1.GetImageResponse\"\n    }\n    method {\n      name: \"List\"\n      input_type: \".containerd.services.images.v1.ListImagesRequest\"\n      output_type: \".containerd.services.images.v1.ListImagesResponse\"\n    }\n    method {\n      name: \"Create\"\n      input_type: \".containerd.services.images.v1.CreateImageRequest\"\n      output_type: \".containerd.services.images.v1.CreateImageResponse\"\n    }\n    method {\n      name: \"Update\"\n      input_type: \".containerd.services.images.v1.UpdateImageRequest\"\n      output_type: \".containerd.services.images.v1.UpdateImageResponse\"\n    }\n    method {\n      name: \"Delete\"\n      input_type: \".containerd.services.images.v1.DeleteImageRequest\"\n      output_type: \".google.protobuf.Empty\"\n    }\n  }\n  options {\n    go_package: \"github.com/containerd/containerd/api/services/images/v1;images\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Preparing a Child Snapshot in Go\nDESCRIPTION: Illustrates how to prepare a new snapshot with a parent, creating a layer dependency in the Snapshotter.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/design/snapshots.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmounts, err := snapshotter.Prepare(tmpLocation, parentDigest)\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling YAML Data in Go\nDESCRIPTION: This example demonstrates how to use the yaml.v2 package to marshal and unmarshal YAML data in Go. It shows both struct-based and map-based approaches, including custom struct tags for renaming fields and controlling formatting.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/sigs.k8s.io/yaml/goyaml.v2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v2\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Error Cause Type Switch Pattern\nDESCRIPTION: Demonstrates how to use errors.Cause with type switching to handle specific error types while maintaining access to the original error.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nswitch err := errors.Cause(err).(type) {\ncase *MyError:\n        // handle specifically\ndefault:\n        // unknown error\n}\n```\n\n----------------------------------------\n\nTITLE: Fuzzing Nested Structs in Go\nDESCRIPTION: Shows how to fuzz nested structs with GenerateStruct method\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype PersonI struct {\n    Name       string\n    Age        int\n    BestFriend PersonII\n}\ntype PersonII struct {\n    Name string\n    Age  int\n}\np := PersonI{}\nerr := f.GenerateStruct(&p)\n```\n\n----------------------------------------\n\nTITLE: Restarting Docker Service on Windows (PowerShell)\nDESCRIPTION: PowerShell commands to restart the Docker service on Windows after configuring TLS authentication.\nSOURCE: https://github.com/containerd/containerd/blob/main/integration/images/README.md#2025-04-21_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nStop-Service docker\nStart-Service docker\n```\n\n----------------------------------------\n\nTITLE: Leases Service Proto Definition\nDESCRIPTION: Protocol Buffer definition for the Leases service in containerd. Defines message types for lease objects and request/response structures for creating, deleting and listing leases that manage resource lifetimes.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_17\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"github.com/containerd/containerd/api/services/leases/v1/leases.proto\"\n  package: \"containerd.services.leases.v1\"\n  dependency: \"gogoproto/gogo.proto\"\n  dependency: \"google/protobuf/empty.proto\"\n  dependency: \"google/protobuf/timestamp.proto\"\n  message_type {\n    name: \"Lease\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"created_at\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Timestamp\"\n      options {\n        65001: 0\n        65010: 1\n      }\n      json_name: \"createdAt\"\n    }\n    field {\n      name: \"labels\"\n      number: 3\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.leases.v1.Lease.LabelsEntry\"\n      json_name: \"labels\"\n    }\n    nested_type {\n      name: \"LabelsEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n  }\n  message_type {\n    name: \"CreateRequest\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"labels\"\n      number: 3\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.leases.v1.CreateRequest.LabelsEntry\"\n      json_name: \"labels\"\n    }\n    nested_type {\n      name: \"LabelsEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n  }\n  message_type {\n    name: \"CreateResponse\"\n    field {\n      name: \"lease\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.leases.v1.Lease\"\n      json_name: \"lease\"\n    }\n  }\n  message_type {\n    name: \"DeleteRequest\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"sync\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"sync\"\n    }\n  }\n  message_type {\n    name: \"ListRequest\"\n    field {\n      name: \"filters\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_STRING\n      json_name: \"filters\"\n    }\n  }\n  message_type {\n    name: \"ListResponse\"\n    field {\n      name: \"leases\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.leases.v1.Lease\"\n      json_name: \"leases\"\n    }\n  }\n  service {\n    name: \"Leases\"\n    method {\n      name: \"Create\"\n      input_type: \".containerd.services.leases.v1.CreateRequest\"\n      output_type: \".containerd.services.leases.v1.CreateResponse\"\n    }\n    method {\n      name: \"Delete\"\n      input_type: \".containerd.services.leases.v1.DeleteRequest\"\n      output_type: \".google.protobuf.Empty\"\n    }\n    method {\n      name: \"List\"\n      input_type: \".containerd.services.leases.v1.ListRequest\"\n      output_type: \".containerd.services.leases.v1.ListResponse\"\n    }\n  }\n  options {\n    go_package: \"github.com/containerd/containerd/api/services/leases/v1;leases\"\n  }\n  weak_dependency: 0\n  syntax: \"proto3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Image Manifest Using dist Command in Bash\nDESCRIPTION: This Bash command demonstrates how to fetch a Docker image manifest using the 'dist' tool. It specifies the image locator, tag, and media type to retrieve the manifest for the 'redis' image from Docker Hub.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-01-27.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./dist fetch docker.io/library/redis latest mediatype:application/vnd.docker.distribution.manifest.v2+json\n```\n\n----------------------------------------\n\nTITLE: Snapshot Usage and Cleanup Operations in Containerd Proto\nDESCRIPTION: Protocol Buffer message definitions for snapshot usage tracking and cleanup operations in Containerd. Includes message types for querying snapshot disk usage with size and inode information, and cleanup request types.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_62\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"UsageRequest\"\n    field {\n      name: \"snapshotter\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"snapshotter\"\n    }\n    field {\n      name: \"key\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n  }\n  message_type {\n    name: \"UsageResponse\"\n    field {\n      name: \"size\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_INT64\n      json_name: \"size\"\n    }\n    field {\n      name: \"inodes\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_INT64\n      json_name: \"inodes\"\n    }\n  }\n  message_type {\n    name: \"CleanupRequest\"\n    field {\n      name: \"snapshotter\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"snapshotter\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Install Options in Go\nDESCRIPTION: Go functions for configuring installation options, including installing libraries and replacing existing files.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/managed-opt.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// WithInstallLibs installs libs from the image\nfunc WithInstallLibs(c *InstallConfig) {\n}\n\n// WithInstallReplace will replace existing files\nfunc WithInstallReplace(c *InstallConfig) {\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Transformer for time.Time in Mergo\nDESCRIPTION: Example of creating and using a custom transformer for merging time.Time values with Mergo, demonstrating advanced usage with reflection.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/dario.cat/mergo/README.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"dario.cat/mergo\"\n    \"reflect\"\n    \"time\"\n)\n\ntype timeTransformer struct {\n}\n\nfunc (t timeTransformer) Transformer(typ reflect.Type) func(dst, src reflect.Value) error {\n\tif typ == reflect.TypeOf(time.Time{}) {\n\t\treturn func(dst, src reflect.Value) error {\n\t\t\tif dst.CanSet() {\n\t\t\t\tisZero := dst.MethodByName(\"IsZero\")\n\t\t\t\tresult := isZero.Call([]reflect.Value{})\n\t\t\t\tif result[0].Bool() {\n\t\t\t\t\tdst.Set(src)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\ntype Snapshot struct {\n\tTime time.Time\n\t// ...\n}\n\nfunc main() {\n\tsrc := Snapshot{time.Now()}\n\tdest := Snapshot{}\n\tmergo.Merge(&dest, src, mergo.WithTransformers(timeTransformer{}))\n\tfmt.Println(dest)\n\t// Will print\n\t// { 2018-01-12 01:15:00 +0000 UTC m=+0.000000001 }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to Local Registry using dist CLI\nDESCRIPTION: Example of using the new 'dist push' command to push a Docker image from the local content store to a registry. This demonstrates the newly added push functionality in containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-05-26.md#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ dist image list\nREF                               TYPE                                                 DIGEST                                                                  SIZE\ndocker.io/library/ubuntu:latest   application/vnd.docker.distribution.manifest.v2+json sha256:382452f82a8bbd34443b2c727650af46aced0f94a44463c62a9848133ecb1aa8 44.7 MiB\n$ dist push localhost:5000/ubuntu docker.io/library/ubuntu:latest\nmanifest-sha256:382452f82a8bbd34443b2c727650af46aced0f94a44463c62a9848133ecb1aa8: done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:cf9722e506aada1109f5c00a9ba542a81c9e109606c01c81f5991b1f93de7b66:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:b6f892c0043b37bd1834a4a1b7d68fe6421c6acbc7e7e63a4527e1d379f92c1b:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:55010f332b047687e081a9639fac04918552c144bc2da4edb3422ce8efcc1fb1:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:3deef3fcbd3072b45771bd0d192d4e5ff2b7310b99ea92bce062e01097953505:    done           |++++++++++++++++++++++++++++++++++++++|\nconfig-sha256:ebcd9d4fca80e9e8afc525d8a38e7c56825dfb4a220ed77156f9fb13b14d4ab7:   done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:2955fb827c947b782af190a759805d229cfebc75978dba2d01b4a59e6a333845:    done           |++++++++++++++++++++++++++++++++++++++|\nelapsed: 6.5 s                                                                    total:  44.7 M (6.9 MiB/s)\n```\n\n----------------------------------------\n\nTITLE: Containerd Rootless Configuration\nDESCRIPTION: TOML configuration file for rootless containerd specifying custom paths for root directory, state directory, and GRPC socket\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/rootless.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\nroot = \"/home/penguin/.local/share/containerd\"\nstate = \"/run/user/1001/containerd\"\n\n[grpc]\n  address = \"/run/user/1001/containerd/containerd.sock\"\n```\n\n----------------------------------------\n\nTITLE: Defining Kind Enumeration for Snapshots in Protocol Buffers\nDESCRIPTION: Defines a Protocol Buffer enumeration that specifies the possible states of a snapshot: UNKNOWN, VIEW, ACTIVE, and COMMITTED. Each state represents a different stage in the snapshot lifecycle.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_23\n\nLANGUAGE: protobuf\nCODE:\n```\nenum_type {\n  name: \"Kind\"\n  value {\n    name: \"UNKNOWN\"\n    number: 0\n    options {\n      66001: \"KindUnknown\"\n    }\n  }\n  value {\n    name: \"VIEW\"\n    number: 1\n    options {\n      66001: \"KindView\"\n    }\n  }\n  value {\n    name: \"ACTIVE\"\n    number: 2\n    options {\n      66001: \"KindActive\"\n    }\n  }\n  value {\n    name: \"COMMITTED\"\n    number: 3\n    options {\n      66001: \"KindCommitted\"\n    }\n  }\n  options {\n    62001: 0\n    62023: \"Kind\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Events Service Output in Containerd\nDESCRIPTION: Shows the output format and structure of the new events service using 'ctr events' command. Events include container lifecycle, snapshots, runtime and task operations with timestamps and detailed metadata.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-06-23.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ctr events\n2017-06-23 23:21:30.271802153 +0000 UTC   /snapshot/prepare   key=registry parent=sha256:dc22a13eb565d14bfe2b16f6fa731a05da0eeff02a52059c7b59cdc2c232a2b2\n2017-06-23 23:21:30.28045193 +0000 UTC   /containers/create   id=registry image=docker.io/library/registry:latest runtime=&ContainerCreate_Runtime{Name:io.containerd.runtime.v1.linux,Options:map[string]string{},}\n2017-06-23 23:21:30.347842352 +0000 UTC   /runtime/task-create   id=registry type=CREATE pid=30411 status=0 exited=0001-01-01 00:00:00 +0000 UTC\n2017-06-23 23:21:30.355290368 +0000 UTC   /runtime/create   id=registry bundle=/var/lib/containerd/io.containerd.runtime.v1.linux/default/registry rootfs=type=overlay:src=overlay checkpoint=\n2017-06-23 23:21:30.362012776 +0000 UTC   /tasks/create   id=registry\n2017-06-23 23:21:30.369742117 +0000 UTC   /runtime/task-start   id=registry type=START pid=30411 status=0 exited=0001-01-01 00:00:00 +0000 UTC\n2017-06-23 23:21:30.369793151 +0000 UTC   /tasks/start   id=registry\n2017-06-23 23:21:40.169884207 +0000 UTC   /runtime/task-exit   id=registry type=EXIT pid=30411 status=130 exited=2017-06-23 23:21:40.16962998 +0000 UTC\n2017-06-23 23:21:40.185850194 +0000 UTC   /runtime/delete   id=registry runtime=io.containerd.runtime.v1.linux status=130 exited=2017-06-23 23:21:40.16962998 +0000 UTC\n2017-06-23 23:21:40.225633455 +0000 UTC   /tasks/delete   id=registry pid=30411 status=130\n2017-06-23 23:21:42.053154149 +0000 UTC   /snapshot/remove   key=registry\n2017-06-23 23:21:42.061579495 +0000 UTC   /containers/delete   id=registry\n```\n\n----------------------------------------\n\nTITLE: Installing EROFS Utils on Debian/Ubuntu and Fedora in Bash\nDESCRIPTION: These commands demonstrate how to install erofs-utils on Debian/Ubuntu systems using apt and on Fedora systems using dnf. Erofs-utils version 1.7 or higher is required.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/snapshotters/erofs.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Debian/Ubuntu\n$ apt install erofs-utils\n# Fedora\n$ dnf install erofs-utils\n```\n\n----------------------------------------\n\nTITLE: Configuring GCR with Service Account Key in Containerd 2.x\nDESCRIPTION: This TOML configuration sets up Google Container Registry authentication using a service account key in containerd 2.x.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/registry.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nversion = 3\n\n[plugins.\"io.containerd.cri.v1.images\".registry]\n  [plugins.\"io.containerd.cri.v1.images\".registry.mirrors]\n    [plugins.\"io.containerd.cri.v1.images\".registry.mirrors.\"docker.io\"]\n      endpoint = [\"https://registry-1.docker.io\"]\n    [plugins.\"io.containerd.cri.v1.images\".registry.mirrors.\"gcr.io\"]\n      endpoint = [\"https://gcr.io\"]\n  [plugins.\"io.containerd.cri.v1.images\".registry.configs]\n    [plugins.\"io.containerd.cri.v1.images\".registry.configs.\"gcr.io\".auth]\n      username = \"_json_key\"\n      password = 'paste output from jq'\n```\n\n----------------------------------------\n\nTITLE: ContainerD Transfer Service Definition in Protocol Buffers\nDESCRIPTION: Protocol buffer definition for the ContainerD Transfer service, which provides capabilities for transferring content between different locations with progress tracking options.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_68\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"TransferRequest\"\n  field {\n    name: \"source\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Any\"\n    json_name: \"source\"\n  }\n  field {\n    name: \"destination\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Any\"\n    json_name: \"destination\"\n  }\n  field {\n    name: \"options\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.transfer.v1.TransferOptions\"\n    json_name: \"options\"\n  }\n}\nmessage_type {\n  name: \"TransferOptions\"\n  field {\n    name: \"progress_stream\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"progressStream\"\n  }\n}\nservice {\n  name: \"Transfer\"\n  method {\n    name: \"Transfer\"\n    input_type: \".containerd.services.transfer.v1.TransferRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lease Service Proto Definition\nDESCRIPTION: Defines the protobuf messages and service for containerd's lease management, including creation, deletion and resource management.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_49\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Lease {\n  string id = 1;\n  google.protobuf.Timestamp created_at = 2;\n  map<string, string> labels = 3;\n}\n\nservice Leases {\n  rpc Create(CreateRequest) returns (CreateResponse);\n  rpc Delete(DeleteRequest) returns (google.protobuf.Empty);\n  rpc List(ListRequest) returns (ListResponse);\n  rpc AddResource(AddResourceRequest) returns (google.protobuf.Empty);\n  rpc DeleteResource(DeleteResourceRequest) returns (google.protobuf.Empty);\n  rpc ListResources(ListResourcesRequest) returns (ListResourcesResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Goroutines with concurrent.Executor in Go\nDESCRIPTION: Shows how to use concurrent.Executor to launch and manage goroutines with explicit ownership. The example demonstrates creating a goroutine that can be gracefully cancelled, with proper cleanup handling and panic recovery.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/modern-go/concurrent/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nexecutor := concurrent.NewUnboundedExecutor()\nexecutor.Go(func(ctx context.Context) {\n    everyMillisecond := time.NewTicker(time.Millisecond)\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Println(\"goroutine exited\")\n            return\n        case <-everyMillisecond.C:\n            // do something\n        }\n    }\n})\ntime.Sleep(time.Second)\nexecutor.StopAndWaitForever()\nfmt.Println(\"executor stopped\")\n```\n\n----------------------------------------\n\nTITLE: Installing Gorilla WebSocket Package in Go\nDESCRIPTION: Command to install the Gorilla WebSocket package using Go's package management tool. Fetches the latest version of the package from the GitHub repository.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/gorilla/websocket/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com\\/gorilla\\/websocket\n```\n\n----------------------------------------\n\nTITLE: Opening FIFO\nDESCRIPTION: The OpenFifo function opens a FIFO for reading and/or writing based on provided flags. It accepts a context for cancellation, a file name, flags for specific open behaviors, and file permissions. This function returns an io.ReadWriteCloser interface that can be used for further operations on the FIFO.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/fifo/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc OpenFifo(ctx context.Context, fn string, flag int, perm os.FileMode) (io.ReadWriteCloser, error)\n```\n\n----------------------------------------\n\nTITLE: Creating a new cgroup v1 with static path\nDESCRIPTION: Creates a new cgroup using a static path for all subsystems under '/test' with CPU shares as a resource constraint. Uses the v1 implementation of cgroups with a single hierarchy.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nshares := uint64(100)\ncontrol, err := cgroup1.New(cgroup1.StaticPath(\"/test\"), &specs.LinuxResources{\n    CPU: &specs.LinuxCPU{\n        Shares: &shares,\n    },\n})\ndefer control.Delete()\n```\n\n----------------------------------------\n\nTITLE: Creating and Modifying Tags in OpenCensus\nDESCRIPTION: Example showing how to create a new context with custom tags. It demonstrates inserting a new tag and upserting (insert or update) an existing tag with key-value pairs.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opencensus.io/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nctx, err := tag.New(ctx,\n\ttag.Insert(osKey, \"macOS-10.12.5\"),\n\ttag.Upsert(userIDKey, \"cde36753ed\"),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Instrumentation for ttrpc Client in Go\nDESCRIPTION: This code snippet demonstrates how to create a ttrpc client with OpenTelemetry instrumentation enabled. It utilizes the `UnaryClientInterceptor` from the otelttrpc package to automatically generate trace spans for unary method calls.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/otelttrpc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\n\"import (\\n    \\\"github.com/containerd/ttrpc\\\"\\n    \\\"github.com/containerd/otelttrpc\\\"\\n)\\n\\n// on the client side\\n...\\nclient := ttrpc.NewClient(\\n    conn,\\n    ttrpc.UnaryClientInterceptor(\\n        otelttrpc.UnaryClientInterceptor(),\\n    ),\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Scratch File for Blockfile Snapshotter\nDESCRIPTION: Commands to create and format a 500MB scratch file for use with the blockfile snapshotter using ext4 filesystem.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/snapshotters/blockfile.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ # make a 500M file\n$ dd if=/dev/zero of=/opt/containerd/blockfile bs=1M count=500\n500+0 records in\n500+0 records out\n524288000 bytes (524 MB, 500 MiB) copied, 1.76253 s, 297 MB/s\n\n$ # format the file with ext4\n$ sudo mkfs.ext4 /opt/containerd/blockfile\nmke2fs 1.47.0 (5-Feb-2023)\nDiscarding device blocks: done\nCreating filesystem with 512000 1k blocks and 128016 inodes\nFilesystem UUID: d9947ecc-722d-4627-9cf9-fa2a3b622106\nSuperblock backups stored on blocks:\n        8193, 24577, 40961, 57345, 73729, 204801, 221185, 401409\n\nAllocating group tables: done\nWriting inode tables: done\nCreating journal (8192 blocks): done\nWriting superblocks and filesystem accounting information: done\n```\n\n----------------------------------------\n\nTITLE: Checking EROFS Snapshotter and Differ Availability in Bash\nDESCRIPTION: This command checks if the EROFS snapshotter and differ are available in the containerd plugins list. It uses the 'ctr plugins ls' command and filters the output for 'erofs'.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/snapshotters/erofs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ctr plugins ls | grep erofs\n```\n\n----------------------------------------\n\nTITLE: Configuring Failpoints for CNI Operations in JSON\nDESCRIPTION: JSON configuration for defining failpoints that can be injected during CNI operations. The configuration specifies different failure behaviors for ADD, DEL, and CHECK commands, allowing controlled testing of error handling.\nSOURCE: https://github.com/containerd/containerd/blob/main/integration/failpoint/cmd/cni-bridge-fp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"cmdAdd\":   \"1*error(you-shall-not-pass!)->1*panic(again)\",\n\t\"cmdDel\":   \"1*error(try-again)\",\n\t\"cmdCheck\": \"10*off\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Reading Basic Proc Stats in Go\nDESCRIPTION: Example showing how to initialize the procfs filesystem object with a path to /proc and then read basic system statistics from /proc/stat.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/prometheus/procfs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfs, err := procfs.NewFS(\"/proc\")\nstats, err := fs.Stat()\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to OpenTelemetry Spans\nDESCRIPTION: Example showing how to add attributes to existing OpenTelemetry spans in containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/tracing.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc CreateContainer(ctx context.Context, r *runtime.CreateContainerRequest) error {\n    ctx, span := tracing.StartSpan(ctx,\n        tracing.Name(criSpanPrefix, \"CreateContainer\")\n        tracing.WithAttribute(\"sandbox.id\",r.GetPodSandboxId(),\n        )\n\tdefer span.End()\n    ...\n    containerId := util.GenerateID()\n    containerName := makeContainerName(metadata, sandboxConfig.GetMetadata())\n\n    //Add new attributes to the existing span\n    span.SetAttributes(\n\t\ttracing.Attribute(\"container.id\", containerId),\n\t\ttracing.Attribute(\"container.name\", containerName),\n\t)\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Global MeterProvider Usage in Go\nDESCRIPTION: Example showing how to use the global MeterProvider including getting meters and setting providers\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n// Get a meter from global provider\nmeter := otel.Meter(\"name\")\n\n// Get the global MeterProvider\nmp := otel.GetMeterProvider()\n\n// Set the global MeterProvider\notel.SetMeterProvider(provider)\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshot Service Messages in Protobuf for Containerd\nDESCRIPTION: Defines various message types for snapshot operations such as PrepareSnapshot, ViewSnapshot, Mounts, RemoveSnapshot, CommitSnapshot, StatSnapshot, and ListSnapshots. Each message type includes fields for the required parameters.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_25\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"PrepareSnapshotRequest\"\n  field {\n    name: \"snapshotter\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"snapshotter\"\n  }\n  field {\n    name: \"key\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"key\"\n  }\n  field {\n    name: \"parent\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"parent\"\n  }\n  field {\n    name: \"labels\"\n    number: 4\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.snapshots.v1.PrepareSnapshotRequest.LabelsEntry\"\n    json_name: \"labels\"\n  }\n  nested_type {\n    name: \"LabelsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Privileged Container Behavior in Containerd\nDESCRIPTION: Controls how privileged containers handle host devices. By default, host devices are passed through to privileged containers, but these settings allow overriding that behavior and controlling device allowlisting.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n# privileged_without_host_devices allows overloading the default behaviour of passing host\n# devices through to privileged containers. This is useful when using a runtime where it does\n# not make sense to pass host devices to the container when privileged. Defaults to false -\n# i.e pass host devices through to privileged containers.\nprivileged_without_host_devices = false\n\n# privileged_without_host_devices_all_devices_allowed allows the allowlisting of all devices when\n# privileged_without_host_devices is enabled.\n# In plain privileged mode all host device nodes are added to the container's spec and all devices\n# are put in the container's device allowlist. This flags is for the modification of the privileged_without_host_devices\n# option so that even when no host devices are implicitly added to the container, all devices allowlisting is still enabled.\n# Requires privileged_without_host_devices to be enabled. Defaults to false.\nprivileged_without_host_devices_all_devices_allowed = false\n```\n\n----------------------------------------\n\nTITLE: Content Service Message Type Definitions in Protocol Buffers\nDESCRIPTION: Defines message types for the Content service API including Info, InfoRequest/Response, UpdateRequest/Response, and ListContentRequest/Response. These types provide the structure for content blob management operations in containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_13\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Info\"\n  field {\n    name: \"digest\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65003: \"github.com/opencontainers/go-digest.Digest\"\n      65001: 0\n    }\n    json_name: \"digest\"\n  }\n  field {\n    name: \"size\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"size\"\n  }\n  field {\n    name: \"created_at\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n      65010: 1\n      65001: 0\n    }\n    json_name: \"createdAt\"\n  }\n  field {\n    name: \"updated_at\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n      65010: 1\n      65001: 0\n    }\n    json_name: \"updatedAt\"\n  }\n  field {\n    name: \"labels\"\n    number: 5\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.content.v1.Info.LabelsEntry\"\n    json_name: \"labels\"\n  }\n  nested_type {\n    name: \"LabelsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n}\nmessage_type {\n  name: \"InfoRequest\"\n  field {\n    name: \"digest\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65003: \"github.com/opencontainers/go-digest.Digest\"\n      65001: 0\n    }\n    json_name: \"digest\"\n  }\n}\nmessage_type {\n  name: \"InfoResponse\"\n  field {\n    name: \"info\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.content.v1.Info\"\n    options {\n      65001: 0\n    }\n    json_name: \"info\"\n  }\n}\nmessage_type {\n  name: \"UpdateRequest\"\n  field {\n    name: \"info\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.content.v1.Info\"\n    options {\n      65001: 0\n    }\n    json_name: \"info\"\n  }\n  field {\n    name: \"update_mask\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.FieldMask\"\n    json_name: \"updateMask\"\n  }\n}\nmessage_type {\n  name: \"UpdateResponse\"\n  field {\n    name: \"info\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.content.v1.Info\"\n    options {\n      65001: 0\n    }\n    json_name: \"info\"\n  }\n}\nmessage_type {\n  name: \"ListContentRequest\"\n  field {\n    name: \"filters\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"filters\"\n  }\n}\nmessage_type {\n  name: \"ListContentResponse\"\n  field {\n    name: \"info\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.content.v1.Info\"\n    options {\n      65001: 0\n    }\n    json_name: \"info\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Direct-LVM Thin-Pool for Devmapper (Bash)\nDESCRIPTION: This bash script sets up a direct-lvm thin-pool for devmapper using the container-storage-setup tool. It creates a configuration file, runs the setup script, and provides a configuration snippet for containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/snapshotters/devmapper.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nset -ex\n\n# Block device to use for devmapper thin-pool\nBLOCK_DEV=/dev/sdf\nPOOL_NAME=devpool\nVG_NAME=containerd\n\n# Install container-storage-setup tool\ngit clone https://github.com/projectatomic/container-storage-setup.git\ncd container-storage-setup/\nsudo make install-core\necho \"Using version $(container-storage-setup -v)\"\n\n# Create configuration file\n# Refer to `man container-storage-setup` to see available options\nsudo tee /etc/sysconfig/docker-storage-setup <<EOF\nDEVS=${BLOCK_DEV}\nVG=${VG_NAME}\nCONTAINER_THINPOOL=${POOL_NAME}\nEOF\n\n# Run the script\nsudo container-storage-setup\n\ncat << EOF\n#\n# Add this to your config.toml configuration file and restart containerd daemon\n#\n[plugins]\n  [plugins.devmapper]\n    root_path = \"/var/lib/containerd/devmapper\"\n    pool_name = \"${VG_NAME}-${POOL_NAME}\"\n    base_image_size = \"10GB\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Snapshot Service Message Definitions in Protocol Buffers\nDESCRIPTION: Defines the message types for snapshot operations including PrepareSnapshot, ViewSnapshot, MountsRequest, and other related structures. Includes field definitions with types, labels and JSON mappings.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_21\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"PrepareSnapshotRequest\"\n    field {\n      name: \"snapshotter\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"snapshotter\"\n    }\n    field {\n      name: \"key\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"parent\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"parent\"\n    }\n    field {\n      name: \"labels\"\n      number: 4\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.snapshots.v1.PrepareSnapshotRequest.LabelsEntry\"\n      json_name: \"labels\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Journald Logging Driver in Go\nDESCRIPTION: A sample Go implementation of a logging driver that forwards a container's STDOUT and STDERR to journald. This demonstrates how to create a pluggable logging system for shims using STDIO URIs.\nSOURCE: https://github.com/containerd/containerd/blob/main/core/runtime/v2/README.md#2025-04-21_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"sync\"\n\n\t\"github.com/containerd/containerd/v2/core/runtime/v2/logging\"\n\t\"github.com/coreos/go-systemd/journal\"\n)\n\nfunc main() {\n\tlogging.Run(log)\n}\n\nfunc log(ctx context.Context, config *logging.Config, ready func() error) error {\n\t// construct any log metadata for the container\n\tvars := map[string]string{\n\t\t\"SYSLOG_IDENTIFIER\": fmt.Sprintf(\"%s:%s\", config.Namespace, config.ID),\n\t}\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\t// forward both stdout and stderr to the journal\n\tgo copy(&wg, config.Stdout, journal.PriInfo, vars)\n\tgo copy(&wg, config.Stderr, journal.PriErr, vars)\n\n\t// signal that we are ready and setup for the container to be started\n\tif err := ready(); err != nil {\n\t\treturn err\n\t}\n\twg.Wait()\n\treturn nil\n}\n\nfunc copy(wg *sync.WaitGroup, r io.Reader, pri journal.Priority, vars map[string]string) {\n\tdefer wg.Done()\n\ts := bufio.NewScanner(r)\n\tfor s.Scan() {\n\t\tjournal.Send(s.Text(), pri, vars)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Measurements in OpenCensus Stats\nDESCRIPTION: Shows how to record a measurement for a defined metric (videoSize). The measurement is automatically tagged with the tags from the provided context.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opencensus.io/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nstats.Record(ctx, videoSize.M(102478))\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Settings in Containerd CRI Plugin\nDESCRIPTION: Specifies registry configuration for the CRI plugin, including the path to look for registry hosts configuration. The plugin can use host-specific configurations or fall back to Docker/Moby-style certificate layouts.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_22\n\nLANGUAGE: toml\nCODE:\n```\n# 'plugins.\"io.containerd.grpc.v1.cri\".registry' contains config related to\n# the registry\n[plugins.\"io.containerd.grpc.v1.cri\".registry]\n  # config_path specifies a directory to look for the registry hosts configuration.\n  #\n  # The cri plugin will look for and use config_path/host-namespace/hosts.toml\n  #   configs if present OR load certificate files as laid out in the Docker/Moby\n  #   specific layout https://docs.docker.com/engine/security/certificates/\n  #\n  # If config_path is not provided defaults are used.\n  #\n  # *** registry.configs and registry.mirrors that were a part of containerd 1.4\n```\n\n----------------------------------------\n\nTITLE: Basic Struct Merging Example with Mergo in Go\nDESCRIPTION: A complete example demonstrating basic struct merging with Mergo, including struct definition and output.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/dario.cat/mergo/README.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"dario.cat/mergo\"\n)\n\ntype Foo struct {\n\tA string\n\tB int64\n}\n\nfunc main() {\n\tsrc := Foo{\n\t\tA: \"one\",\n\t\tB: 2,\n\t}\n\tdest := Foo{\n\t\tA: \"two\",\n\t}\n\tmergo.Merge(&dest, src)\n\tfmt.Println(dest)\n\t// Will print\n\t// {two 2}\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Nested Struct with CBOR in Go\nDESCRIPTION: Demonstrates encoding a nested Go struct to CBOR using the fxamacker/cbor library. This example showcases the compact encoding achieved with struct tags.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Example encoding nested struct (with omitempty tag)\n// - encoding/json:  18 byte JSON\n// - fxamacker/cbor:  1 byte CBOR\npackage main\n\nimport (\n\t\"encoding/hex\"\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/fxamacker/cbor/v2\"\n)\n\ntype GrandChild struct {\n\tQuux int `json:\",omitempty\"`\n}\n\ntype Child struct {\n\tBaz int        `json:\",omitempty\"`\n\tQux GrandChild `json:\",omitempty\"`\n}\n\ntype Parent struct {\n\tFoo Child `json:\",omitempty\"`\n\tBar int   `json:\",omitempty\"`\n}\n\nfunc cb() {\n\tresults, _ := cbor.Marshal(Parent{})\n\tfmt.Println(\"hex(CBOR): \" + hex.EncodeToString(results))\n\n\ttext, _ := cbor.Diagnose(results) // Diagnostic Notation\n\tfmt.Println(\"DN: \" + text)\n}\n\nfunc js() {\n\tresults, _ := json.Marshal(Parent{})\n\tfmt.Println(\"hex(JSON): \" + hex.EncodeToString(results))\n\n\ttext := string(results) // JSON\n\tfmt.Println(\"JSON: \" + text)\n}\n\nfunc main() {\n\tcb()\n\tfmt.Println(\"-------------\")\n\tjs()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a cgroup v1 with systemd slice support\nDESCRIPTION: Demonstrates how to create a new cgroup with systemd slice support, using the system.slice and specifying a resource constraint for CPU shares.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncontrol, err := cgroup1.New(cgroup1.Systemd, cgroup1.Slice(\"system.slice\", \"runc-test\"), &specs.LinuxResources{\n    CPU: &specs.CPU{\n        Shares: &shares,\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Text Formatter Options in Logrus with Go\nDESCRIPTION: This snippet demonstrates how to configure Logrus's TextFormatter by disabling colors and enabling full timestamps, which ensures consistent output even when a TTY is attached.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlog.SetFormatter(&log.TextFormatter{\n\tDisableColors: true,\n\tFullTimestamp: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Metrics Namespace in Go\nDESCRIPTION: Demonstrates how to create a metrics namespace with constant labels for tracking Docker engine daemon metrics, including version and git commit information\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/docker/go-metrics/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nns := metrics.NewNamespace(\"engine\", \"daemon\", metrics.Labels{\n        \"version\": dockerversion.Version,\n        \"commit\":  dockerversion.GitCommit,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Message Types for Task Management in Protocol Buffers\nDESCRIPTION: This snippet defines various message types used in the Tasks service, including requests and responses for operations like deleting processes, getting task information, listing tasks, killing processes, and executing processes within containers.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_31\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"DeleteProcessRequest\"\n  field {\n    name: \"container_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n  field {\n    name: \"exec_id\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"execId\"\n  }\n}\n\nmessage_type {\n  name: \"GetRequest\"\n  field {\n    name: \"container_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n  field {\n    name: \"exec_id\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"execId\"\n  }\n}\n\n// ... (other message types)\n```\n\n----------------------------------------\n\nTITLE: Systemd Cgroup Driver Configuration for Containerd 1.x\nDESCRIPTION: Configuration for enabling systemd cgroup driver in containerd 1.x to comply with systemd's single-writer rule for cgroups.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n  SystemdCgroup = true\n```\n\n----------------------------------------\n\nTITLE: Setting Logrus Log Level in Go\nDESCRIPTION: Example showing how to set the minimum log level for a Logrus logger. Only logs at or above the set level will be processed.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Will log anything that is info or above (warn, error, fatal, panic). Default.\nlog.SetLevel(log.InfoLevel)\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Containerd Build Environment\nDESCRIPTION: Dockerfile to create a custom build environment for containerd and runc, including libseccomp-dev dependency.\nSOURCE: https://github.com/containerd/containerd/blob/main/BUILDING.md#2025-04-21_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM golang\n\nRUN apt-get update && \\\n    apt-get install -y libseccomp-dev\n```\n\n----------------------------------------\n\nTITLE: Registry Pull Request Format\nDESCRIPTION: Format specification for pulling images from a registry.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/hosts.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npull [registry_host_name|IP address][:port][/v2][/org_path]<image_name>[:tag|@DIGEST]\n```\n\n----------------------------------------\n\nTITLE: Containerd 1.x CRI Registry Configuration\nDESCRIPTION: TOML configuration for registry config_path in containerd 1.x using CRI plugin.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/hosts.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n\n[plugins.\"io.containerd.grpc.v1.cri\".registry]\n   config_path = \"/etc/containerd/certs.d\"\n```\n\n----------------------------------------\n\nTITLE: Leases Service Protocol Definition in Protobuf\nDESCRIPTION: Defines the Leases service for resource management in containerd. Includes message structures for creating, deleting, and listing leases, which are used to track and manage references to resources, preventing garbage collection while resources are in use.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_22\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"github.com/containerd/containerd/api/services/leases/v1/leases.proto\"\n  package: \"containerd.services.leases.v1\"\n  dependency: \"gogoproto/gogo.proto\"\n  dependency: \"google/protobuf/empty.proto\"\n  dependency: \"google/protobuf/timestamp.proto\"\n  message_type {\n    name: \"Lease\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"created_at\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Timestamp\"\n      options {\n        65010: 1\n        65001: 0\n      }\n      json_name: \"createdAt\"\n    }\n    field {\n      name: \"labels\"\n      number: 3\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.leases.v1.Lease.LabelsEntry\"\n      json_name: \"labels\"\n    }\n    nested_type {\n      name: \"LabelsEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n  }\n  message_type {\n    name: \"CreateRequest\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"labels\"\n      number: 3\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.leases.v1.CreateRequest.LabelsEntry\"\n      json_name: \"labels\"\n    }\n    nested_type {\n      name: \"LabelsEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n  }\n  message_type {\n    name: \"CreateResponse\"\n    field {\n      name: \"lease\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.leases.v1.Lease\"\n      json_name: \"lease\"\n    }\n  }\n  message_type {\n    name: \"DeleteRequest\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n  }\n  message_type {\n    name: \"ListRequest\"\n    field {\n      name: \"filters\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_STRING\n      json_name: \"filters\"\n    }\n  }\n  message_type {\n    name: \"ListResponse\"\n    field {\n      name: \"leases\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.leases.v1.Lease\"\n      json_name: \"leases\"\n    }\n  }\n  service {\n    name: \"Leases\"\n    method {\n      name: \"Create\"\n      input_type: \".containerd.services.leases.v1.CreateRequest\"\n      output_type: \".containerd.services.leases.v1.CreateResponse\"\n    }\n    method {\n      name: \"Delete\"\n      input_type: \".containerd.services.leases.v1.DeleteRequest\"\n      output_type: \".google.protobuf.Empty\"\n    }\n    method {\n      name: \"List\"\n      input_type: \".containerd.services.leases.v1.ListRequest\"\n      output_type: \".containerd.services.leases.v1.ListResponse\"\n    }\n  }\n  options {\n    go_package: \"github.com/containerd/containerd/api/services/leases/v1;leases\"\n  }\n  weak_dependency: 0\n  syntax: \"proto3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using OpenCensus Tags with Go Profiler\nDESCRIPTION: Demonstrates applying OpenCensus tags as profiler labels for Go 1.9 and above. This allows profiles to be labeled with the key-value pairs from the tag map when profiling is enabled.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opencensus.io/README.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx, err = tag.New(ctx,\n\ttag.Insert(osKey, \"macOS-10.12.5\"),\n\ttag.Insert(userIDKey, \"fff0989878\"),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\ntag.Do(ctx, func(ctx context.Context) {\n\t// Do work.\n\t// When profiling is on, samples will be\n\t// recorded with the key/values from the tag map.\n})\n```\n\n----------------------------------------\n\nTITLE: ContainerD Events Service Definition\nDESCRIPTION: Protobuf definition for the Events service that handles event publishing, forwarding and subscription\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_19\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Events\"\n  method {\n    name: \"Publish\"\n    input_type: \".containerd.services.events.v1.PublishRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"Forward\"\n    input_type: \".containerd.services.events.v1.ForwardRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"Subscribe\"\n    input_type: \".containerd.services.events.v1.SubscribeRequest\"\n    output_type: \".containerd.services.events.v1.Envelope\"\n    server_streaming: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Snapshot Management Request Types in Containerd Proto\nDESCRIPTION: Protocol Buffer message definitions for snapshot management operations in Containerd. Includes message types for removing, committing, and retrieving information about snapshots with their corresponding fields.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_59\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"RemoveSnapshotRequest\"\n    field {\n      name: \"snapshotter\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"snapshotter\"\n    }\n    field {\n      name: \"key\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n  }\n  message_type {\n    name: \"CommitSnapshotRequest\"\n    field {\n      name: \"snapshotter\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"snapshotter\"\n    }\n    field {\n      name: \"name\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"name\"\n    }\n    field {\n      name: \"key\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"labels\"\n      number: 4\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.snapshots.v1.CommitSnapshotRequest.LabelsEntry\"\n      json_name: \"labels\"\n    }\n    nested_type {\n      name: \"LabelsEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n  }\n  message_type {\n    name: \"StatSnapshotRequest\"\n    field {\n      name: \"snapshotter\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"snapshotter\"\n    }\n    field {\n      name: \"key\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Leases Service in Protobuf for Containerd\nDESCRIPTION: Defines the Leases service with message types for Lease, CreateRequest, DeleteRequest, and ListRequest. It includes RPC methods for creating, deleting, and listing leases.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_18\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Lease {\n  string id = 1;\n  google.protobuf.Timestamp created_at = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];\n  map<string, string> labels = 3;\n}\n\nservice Leases {\n  rpc Create(CreateRequest) returns (CreateResponse);\n  rpc Delete(DeleteRequest) returns (google.protobuf.Empty);\n  rpc List(ListRequest) returns (ListResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Key Pair\nDESCRIPTION: These commands generate an RSA key pair using OpenSSL. The first command creates a private key (`mykey.pem`), and the second extracts the corresponding public key (`mypubkey.pem`). Requires OpenSSL to be installed.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/imgcrypt/v2/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n# openssl genrsa -out mykey.pem\nGenerating RSA private key, 2048 bit long modulus (2 primes)\n...............................................+++++\n............................+++++\ne is 65537 (0x010001)\n# openssl rsa -in mykey.pem -pubout -out mypubkey.pem\nwriting RSA key\n```\n\n----------------------------------------\n\nTITLE: Getting and setting unsafe.Pointer values without type checking in Go\nDESCRIPTION: Demonstrates how to use reflect2 to get and set unsafe.Pointer values without type checking. When working with a type, always use its pointer (*type).\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/modern-go/reflect2/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvalType := reflect2.TypeOf(1)\ni := 1\nj := 10\nvalType.UnsafeSet(unsafe.Pointer(&i), unsafe.Pointer(&j))\n// i will be 10\n```\n\n----------------------------------------\n\nTITLE: Replacing Standard JSON Decoding in Go\nDESCRIPTION: This snippet shows how to replace the standard JSON decoding with json-iterator, an efficient alternative. Similar to encoding, ensure the library is imported and compatible configuration is set up.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport jsoniter \"github.com/json-iterator/go\"\n\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\njson.Unmarshal(input, &data)\n```\n\n----------------------------------------\n\nTITLE: Loading an existing cgroup v1\nDESCRIPTION: Loads an existing cgroup from a static path '/test' using the default cgroup manager.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncontrol, err = cgroup1.Load(cgroup1.Default, cgroups.StaticPath(\"/test\"))\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Logrus Formatter in Go\nDESCRIPTION: Shows how to implement a custom JSON formatter by implementing the Formatter interface, which requires a Format method that takes an Entry parameter.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-21_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype MyJSONFormatter struct {\n}\n\nlog.SetFormatter(new(MyJSONFormatter))\n\nfunc (f *MyJSONFormatter) Format(entry *Entry) ([]byte, error) {\n  // Note this doesn't include Time, Level and Message which are available on\n  // the Entry. Consult `godoc` on information about those fields or read the\n  // source of the official loggers.\n  serialized, err := json.Marshal(entry.Data)\n    if err != nil {\n      return nil, fmt.Errorf(\"Failed to marshal fields to JSON, %w\", err)\n    }\n  return append(serialized, '\\n'), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Gofuzz\nDESCRIPTION: This snippet demonstrates how to create a new gofuzz instance and use it to populate an integer variable with a random value.  It initializes a `fuzz.New()` object, and then uses the `Fuzz` method to assign a random value to an integer variable.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/google/gofuzz/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nf := fuzz.New()\nvar myInt int\nf.Fuzz(&myInt) // myInt gets a random value.\n```\n```\n\n----------------------------------------\n\nTITLE: Viewing Containerd Content Store File Structure\nDESCRIPTION: This command shows the file structure of the containerd content store, displaying the blobs stored as SHA256 hashes.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/content-flow.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ tree /var/lib/containerd/io.containerd.content.v1.content/blobs\n/var/lib/containerd/io.containerd.content.v1.content/blobs\n└── sha256\n    ├── 2a9865e55c37293b71df051922022898d8e4ec0f579c9b53a0caee1b170bc81c\n    ├── 9bb13890319dc01e5f8a4d3d0c4c72685654d682d568350fd38a02b1d70aee6b\n    ├── 987b553c835f01f46eb1859bc32f564119d5833801a27b25a0ca5c6b8b6e111a\n    ├── 97481c7992ebf6f22636f87e4d7b79e962f928cdbe6f2337670fa6c9a9636f04\n    ├── 5999b99cee8f2875d391d64df20b6296b63f23951a7d41749f028375e887cd05\n    ├── bfee6cb5fdad6b60ec46297f44542ee9d8ac8f01c072313a51cd7822df3b576f\n    ├── fd36a1ebc6728807cbb1aa7ef24a1861343c6dc174657721c496613c7b53bd07\n    ├── bb79b6b2107fea8e8a47133a660b78e3a546998fcf0427be39ac9a0af4a97e90\n    └── 1ed3521a5dcbd05214eb7f35b952ecf018d5a6610c32ba4e315028c556f45e94\n```\n\n----------------------------------------\n\nTITLE: Runtime Classes Configuration for Containerd 1.x\nDESCRIPTION: Configuration for registering custom runtime classes (crun, gVisor, Kata Containers) in containerd 1.x.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n[plugins.\"io.containerd.grpc.v1.cri\".containerd]\n  default_runtime_name = \"crun\"\n  [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes]\n    [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.crun]\n      runtime_type = \"io.containerd.runc.v2\"\n      [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.crun.options]\n        BinaryName = \"/usr/local/bin/crun\"\n    [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.gvisor]\n      runtime_type = \"io.containerd.runsc.v1\"\n    [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.kata]\n      runtime_type = \"io.containerd.kata.v2\"\n```\n\n----------------------------------------\n\nTITLE: Snapshotter Configuration for Containerd 2.x\nDESCRIPTION: Configuration for setting overlayfs as the default snapshotter in containerd 2.x.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nversion = 3\n[plugins.'io.containerd.cri.v1.images']\n  snapshotter = \"overlayfs\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Fuzz Consumer\nDESCRIPTION: Shows how to create a new consumer with input bytes for fuzzing\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tfuzz \"github.com/AdaLogics/go-fuzz-headers\"\n)\ndata := []byte{'R', 'a', 'n', 'd', 'o', 'm'}\nf := fuzz.NewConsumer(data)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Introspection Service in Protobuf for Containerd\nDESCRIPTION: Defines the Introspection service with a Plugin message type and a Plugins RPC method. It includes fields for plugin details like type, ID, requirements, platforms, exports, capabilities, and initialization errors.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_17\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Plugin {\n  string type = 1;\n  string id = 2;\n  repeated string requires = 3;\n  repeated .containerd.types.Platform platforms = 4 [(gogoproto.nullable) = false];\n  map<string, string> exports = 5;\n  repeated string capabilities = 6;\n  google.rpc.Status init_err = 7;\n}\n\nservice Introspection {\n  rpc Plugins(PluginsRequest) returns (PluginsResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Bolt Database for Mobile Use in Go\nDESCRIPTION: This Go code defines a struct and constructor for using Bolt database in mobile applications. It includes methods for getting the database path and closing the connection.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nfunc NewBoltDB(filepath string) *BoltDB {\n\tdb, err := bolt.Open(filepath+\"/demo.db\", 0600, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\treturn &BoltDB{db}\n}\n\ntype BoltDB struct {\n\tdb *bolt.DB\n\t...\n}\n\nfunc (b *BoltDB) Path() string {\n\treturn b.db.Path()\n}\n\nfunc (b *BoltDB) Close() {\n\tb.db.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Namespaces Service in Containerd API with Protocol Buffers\nDESCRIPTION: Protocol Buffer definition for Containerd's Namespaces service, specifying the gRPC service methods for namespace management operations like Get, List, Create, Update, and Delete.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_19\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nservice {\n  name: \"Namespaces\"\n  method {\n    name: \"Get\"\n    input_type: \".containerd.services.namespaces.v1.GetNamespaceRequest\"\n    output_type: \".containerd.services.namespaces.v1.GetNamespaceResponse\"\n  }\n  method {\n    name: \"List\"\n    input_type: \".containerd.services.namespaces.v1.ListNamespacesRequest\"\n    output_type: \".containerd.services.namespaces.v1.ListNamespacesResponse\"\n  }\n  method {\n    name: \"Create\"\n    input_type: \".containerd.services.namespaces.v1.CreateNamespaceRequest\"\n    output_type: \".containerd.services.namespaces.v1.CreateNamespaceResponse\"\n  }\n  method {\n    name: \"Update\"\n    input_type: \".containerd.services.namespaces.v1.UpdateNamespaceRequest\"\n    output_type: \".containerd.services.namespaces.v1.UpdateNamespaceResponse\"\n  }\n  method {\n    name: \"Delete\"\n    input_type: \".containerd.services.namespaces.v1.DeleteNamespaceRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Container Metrics in Prometheus Format\nDESCRIPTION: Example output of container metrics exported through Prometheus. Includes detailed metrics for block I/O, CPU usage, memory statistics, and process information. Each metric is labeled with container ID for filtering.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-03-17.md#2025-04-21_snippet_0\n\nLANGUAGE: prometheus\nCODE:\n```\ncontainerd_container_blkio_io_service_bytes_recursive_bytes{id=\"test\",major=\"8\",minor=\"0\",op=\"Async\"} 958464\ncontainerd_container_blkio_io_service_bytes_recursive_bytes{id=\"test\",major=\"8\",minor=\"0\",op=\"Read\"} 958464\ncontainerd_container_blkio_io_service_bytes_recursive_bytes{id=\"test\",major=\"8\",minor=\"0\",op=\"Sync\"} 0\ncontainerd_container_blkio_io_service_bytes_recursive_bytes{id=\"test\",major=\"8\",minor=\"0\",op=\"Total\"} 958464\ncontainerd_container_blkio_io_service_bytes_recursive_bytes{id=\"test\",major=\"8\",minor=\"0\",op=\"Write\"} 0\ncontainerd_container_blkio_io_serviced_recursive_total{id=\"test\",major=\"8\",minor=\"0\",op=\"Async\"} 17\ncontainerd_container_blkio_io_serviced_recursive_total{id=\"test\",major=\"8\",minor=\"0\",op=\"Read\"} 17\ncontainerd_container_blkio_io_serviced_recursive_total{id=\"test\",major=\"8\",minor=\"0\",op=\"Sync\"} 0\ncontainerd_container_blkio_io_serviced_recursive_total{id=\"test\",major=\"8\",minor=\"0\",op=\"Total\"} 17\ncontainerd_container_blkio_io_serviced_recursive_total{id=\"test\",major=\"8\",minor=\"0\",op=\"Write\"} 0\ncontainerd_container_cpu_kernel_nanoseconds{id=\"test\"} 1e+07\ncontainerd_container_cpu_throttle_periods_total{id=\"test\"} 0\ncontainerd_container_cpu_throttled_periods_total{id=\"test\"} 0\ncontainerd_container_cpu_throttled_time_nanoseconds{id=\"test\"} 0\ncontainerd_container_cpu_total_nanoseconds{id=\"test\"} 2.1428791e+07\ncontainerd_container_cpu_user_nanoseconds{id=\"test\"} 0\ncontainerd_container_hugetlb_failcnt_total{id=\"test\",page=\"1GB\"} 0\ncontainerd_container_hugetlb_failcnt_total{id=\"test\",page=\"2MB\"} 0\ncontainerd_container_hugetlb_max_bytes{id=\"test\",page=\"1GB\"} 0\ncontainerd_container_hugetlb_max_bytes{id=\"test\",page=\"2MB\"} 0\ncontainerd_container_hugetlb_usage_bytes{id=\"test\",page=\"1GB\"} 0\ncontainerd_container_hugetlb_usage_bytes{id=\"test\",page=\"2MB\"} 0\ncontainerd_container_memory_active_anon_bytes{id=\"test\"} 0\ncontainerd_container_memory_active_file_bytes{id=\"test\"} 659456\ncontainerd_container_memory_cache_bytes{id=\"test\"} 925696\ncontainerd_container_memory_dirty_bytes{id=\"test\"} 0\ncontainerd_container_memory_hierarchical_memory_limit_bytes{id=\"test\"} 9.223372036854772e+18\ncontainerd_container_memory_hierarchical_memsw_limit_bytes{id=\"test\"} 9.223372036854772e+18\ncontainerd_container_memory_inactive_anon_bytes{id=\"test\"} 73728\ncontainerd_container_memory_inactive_file_bytes{id=\"test\"} 266240\ncontainerd_container_memory_kernel_failcnt_total{id=\"test\"} 0\ncontainerd_container_memory_kernel_limit_bytes{id=\"test\"} 9.223372036854772e+18\ncontainerd_container_memory_kernel_max_bytes{id=\"test\"} 0\ncontainerd_container_memory_kernel_usage_bytes{id=\"test\"} 0\ncontainerd_container_memory_kerneltcp_failcnt_total{id=\"test\"} 0\ncontainerd_container_memory_kerneltcp_limit_bytes{id=\"test\"} 9.223372036854772e+18\ncontainerd_container_memory_kerneltcp_max_bytes{id=\"test\"} 0\ncontainerd_container_memory_kerneltcp_usage_bytes{id=\"test\"} 0\ncontainerd_container_memory_mapped_file_bytes{id=\"test\"} 577536\ncontainerd_container_memory_oom_total{id=\"test\"} 0I\ncontainerd_container_memory_pgfault_bytes{id=\"test\"} 770\ncontainerd_container_memory_pgmajfault_bytes{id=\"test\"} 6\ncontainerd_container_memory_pgpgin_bytes{id=\"test\"} 651\ncontainerd_container_memory_pgpgout_bytes{id=\"test\"} 407\ncontainerd_container_memory_rss_bytes{id=\"test\"} 73728\ncontainerd_container_memory_rss_huge_bytes{id=\"test\"} 0\ncontainerd_container_memory_swap_failcnt_total{id=\"test\"} 0\ncontainerd_container_memory_swap_limit_bytes{id=\"test\"} 9.223372036854772e+18\ncontainerd_container_memory_swap_max_bytes{id=\"test\"} 1.527808e+06\ncontainerd_container_memory_swap_usage_bytes{id=\"test\"} 999424\ncontainerd_container_memory_total_active_anon_bytes{id=\"test\"} 0\ncontainerd_container_memory_total_active_file_bytes{id=\"test\"} 659456\ncontainerd_container_memory_total_cache_bytes{id=\"test\"} 925696\ncontainerd_container_memory_total_dirty_bytes{id=\"test\"} 0\ncontainerd_container_memory_total_inactive_anon_bytes{id=\"test\"} 73728\ncontainerd_container_memory_total_inactive_file_bytes{id=\"test\"} 266240\ncontainerd_container_memory_total_mapped_file_bytes{id=\"test\"} 577536\ncontainerd_container_memory_total_pgfault_bytes{id=\"test\"} 770\ncontainerd_container_memory_total_pgmajfault_bytes{id=\"test\"} 6\ncontainerd_container_memory_total_pgpgin_bytes{id=\"test\"} 651\ncontainerd_container_memory_total_pgpgout_bytes{id=\"test\"} 407\ncontainerd_container_memory_total_rss_bytes{id=\"test\"} 73728\ncontainerd_container_memory_total_rss_huge_bytes{id=\"test\"} 0\ncontainerd_container_memory_total_unevictable_bytes{id=\"test\"} 0\ncontainerd_container_memory_total_writeback_bytes{id=\"test\"} 0\ncontainerd_container_memory_unevictable_bytes{id=\"test\"} 0\ncontainerd_container_memory_usage_failcnt_total{id=\"test\"} 0\ncontainerd_container_memory_usage_limit_bytes{id=\"test\"} 9.223372036854772e+18\ncontainerd_container_memory_usage_max_bytes{id=\"test\"} 1.527808e+06\ncontainerd_container_memory_usage_usage_bytes{id=\"test\"} 999424\ncontainerd_container_memory_writeback_bytes{id=\"test\"} 0\ncontainerd_container_per_cpu_nanoseconds{cpu=\"0\",id=\"test\"} 7.530139e+06\ncontainerd_container_per_cpu_nanoseconds{cpu=\"1\",id=\"test\"} 4.586408e+06\ncontainerd_container_per_cpu_nanoseconds{cpu=\"2\",id=\"test\"} 5.076059e+06\ncontainerd_container_per_cpu_nanoseconds{cpu=\"3\",id=\"test\"} 4.236185e+06\ncontainerd_container_pids_current{id=\"test\"} 1\ncontainerd_container_pids_limit{id=\"test\"} 0\n```\n\n----------------------------------------\n\nTITLE: Using Mutex in Go with go-deadlock\nDESCRIPTION: Example of using the deadlock.Mutex as a drop-in replacement for sync.Mutex, showing basic lock/unlock operations with the deadlock detection capability.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sasha-s/go-deadlock/Readme.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/sasha-s/go-deadlock\"\nvar mu deadlock.Mutex\n// Use normally, it works exactly like sync.Mutex does.\nmu.Lock()\n\ndefer mu.Unlock()\n// Or\nvar rw deadlock.RWMutex\nrw.RLock()\ndefer rw.RUnlock()\n```\n\n----------------------------------------\n\nTITLE: Opening Bolt Database in Read-Only Mode\nDESCRIPTION: This Go code snippet demonstrates how to open a Bolt database in read-only mode, which allows multiple processes to read from the database simultaneously but prevents write access.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_23\n\nLANGUAGE: go\nCODE:\n```\ndb, err := bolt.Open(\"my.db\", 0600, &bolt.Options{ReadOnly: true})\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Containerd Managed Opt Directory in TOML\nDESCRIPTION: TOML configuration for specifying the path of the managed opt directory in containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/managed-opt.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n\n[plugins.\"io.containerd.internal.v1.opt\"]\n\tpath = \"/opt/mypath\"\n\n```\n\n----------------------------------------\n\nTITLE: Performing Prefix Scans in BoltDB with Go\nDESCRIPTION: Demonstrates how to search for keys with a specific prefix using a cursor and bytes.HasPrefix(). The cursor seeks to the first key with the prefix and iterates until finding a key without the prefix.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ndb.View(func(tx *bolt.Tx) error {\n\t// Assume bucket exists and has keys\n\tc := tx.Bucket([]byte(\"MyBucket\")).Cursor()\n\n\tprefix := []byte(\"1234\")\n\tfor k, v := c.Seek(prefix); k != nil && bytes.HasPrefix(k, prefix); k, v = c.Next() {\n\t\tfmt.Printf(\"key=%s, value=%s\\n\", k, v)\n\t}\n\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Bucket.Put Method Description in Bolt Database\nDESCRIPTION: The Bucket.Put() method writes key/value pairs into a bucket by traversing the B+tree to find the position, materializing the page and parent pages as nodes for modification during transactions.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n- `Bucket.Put()` - Writes a key/value pair into a bucket. After validating the\n  arguments, a cursor is used to traverse the B+tree to the page and position\n  where the key & value will be written. Once the position is found, the bucket\n  materializes the underlying page and the page's parent pages into memory as\n  \"nodes\". These nodes are where mutations occur during read-write transactions.\n  These changes get flushed to disk during commit.\n```\n\n----------------------------------------\n\nTITLE: Filter Syntax Examples in Containerd\nDESCRIPTION: Demonstrates the filter syntax used for filtering items across the containerd API. Shows examples of basic field matching, label matching, complex label paths, and combined filters.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-06-23.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<fieldpath>[<operator><value>]\nname==foo\nlabels.foo\nlabels.\"very complex label\"==something\nname==foo,labels.bar\n```\n\n----------------------------------------\n\nTITLE: TOML Encoding with Indentation (v1 vs v2)\nDESCRIPTION: Illustrates the difference in default indentation behavior and how to achieve v1-like indentation in v2 using Encoder.SetIndentTables.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ndata := map[string]interface{}{\n\t\"table\": map[string]string{\n\t\t\"key\": \"value\",\n\t},\n}\n\nb, _ := tomlv1.Marshal(data)\nfmt.Println(\"v1:\\n\" + string(b))\n\nb, _ = tomlv2.Marshal(data)\nfmt.Println(\"v2:\\n\" + string(b))\n\nbuf := bytes.Buffer{}\nenc := tomlv2.NewEncoder(&buf)\nenc.SetIndentTables(true)\nenc.Encode(data)\nfmt.Println(\"v2 Encoder:\\n\" + string(buf.Bytes()))\n\n// Output:\n// v1:\n//\n// [table]\n//   key = \"value\"\n//\n// v2:\n// [table]\n// key = 'value'\n//\n//\n// v2 Encoder:\n// [table]\n//   key = 'value'\n```\n\n----------------------------------------\n\nTITLE: Disabling Logger Mutex Locking in containerd\nDESCRIPTION: Shows how to disable the default mutex locking for Logger when concurrent write protection is not needed. This should only be used when hooks are thread-safe or when the output destination already provides thread safety.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-21_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nlogger.SetNoLock()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from BoltDB with Go\nDESCRIPTION: Retrieves a value for a specific key using Bucket.Get() within a read-only transaction. If the key exists, its value is returned; otherwise, nil is returned.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ndb.View(func(tx *bolt.Tx) error {\n\tb := tx.Bucket([]byte(\"MyBucket\"))\n\tv := b.Get([]byte(\"answer\"))\n\tfmt.Printf(\"The answer is: %s\\n\", v)\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Functional Option in Go\nDESCRIPTION: Shows how to create a functional option using a closure, including the optionFunc type and WithMyType function.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-21_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype optionFunc func(config) config\n\nfunc (fn optionFunc) apply(c config) config {\n\treturn fn(c)\n}\n\n// WithMyType sets t as MyType.\nfunc WithMyType(t MyType) Option {\n\treturn optionFunc(func(c config) config {\n\t\tc.MyType = t\n        return c\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Fuzzing Maps with Gofuzz\nDESCRIPTION: This snippet demonstrates how to use gofuzz to populate a map with a specific number of elements. It creates a new gofuzz instance with customizations to the nil chance and number of elements, then uses the `Fuzz` method to populate the map.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/google/gofuzz/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\nf := fuzz.New().NilChance(0).NumElements(1, 1)\nvar myMap map[ComplexKeyType]string\nf.Fuzz(&myMap) // myMap will have exactly one element.\n```\n```\n\n----------------------------------------\n\nTITLE: User-Specified Buffer for CBOR Encoding in Go\nDESCRIPTION: Shows how to use a user-specified buffer for CBOR encoding in the fxamacker/cbor library. This feature was introduced in v2.7.0 and allows for more control over memory allocation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nem, err := myEncOptions.UserBufferEncMode() // create UserBufferEncMode mode\n\nvar buf bytes.Buffer\nerr = em.MarshalToBuffer(v, &buf) // encode v to provided buf\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod and Container Annotations in Containerd\nDESCRIPTION: Defines pod_annotations and container_annotations which are passed to pod sandboxes and container OCI configurations. Pod annotations support golang path match patterns and follow Kubernetes and OCI naming conventions.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n# pod_annotations is a list of pod annotations passed to both pod\n# sandbox as well as container OCI annotations. Pod_annotations also\n# supports golang path match pattern - https://golang.org/pkg/path/#Match.\n# e.g. [\"runc.com.*\"], [\"*.runc.com\"], [\"runc.com/*\"].\n#\n# For the naming convention of annotation keys, please reference:\n# * Kubernetes: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set\n# * OCI: https://github.com/opencontainers/image-spec/blob/main/annotations.md\npod_annotations = []\n\n# container_annotations is a list of container annotations passed through to the OCI config of the containers.\n# Container annotations in CRI are usually generated by other Kubernetes node components (i.e., not users).\n# Currently, only device plugins populate the annotations.\ncontainer_annotations = []\n```\n\n----------------------------------------\n\nTITLE: Tx.Commit Method Description in Bolt Database\nDESCRIPTION: The Tx.Commit() method handles transaction commits using a two-phase write process to ensure data integrity. It converts in-memory dirty nodes to disk pages, writes them, and then updates the meta page with a new transaction ID.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n- `Tx.Commit()` - Converts the in-memory dirty nodes and the list of free pages\n  into pages to be written to disk. Writing to disk then occurs in two phases.\n  First, the dirty pages are written to disk and an `fsync()` occurs. Second, a\n  new meta page with an incremented transaction ID is written and another\n  `fsync()` occurs. This two phase write ensures that partially written data\n  pages are ignored in the event of a crash since the meta page pointing to them\n  is never written. Partially written meta pages are invalidated because they\n  are written with a checksum.\n```\n\n----------------------------------------\n\nTITLE: Using Logrus as an IO Writer in Go\nDESCRIPTION: Demonstrates how to transform Logrus into an io.Writer, which can be used with standard library components that expect a writer interface.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-21_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nw := logger.Writer()\ndefer w.Close()\n\nsrv := http.Server{\n    // create a stdlib log.Logger that writes to\n    // logrus.Logger.\n    ErrorLog: log.New(w, \"\", 0),\n}\n```\n\n----------------------------------------\n\nTITLE: Version Service Message Definition in Protocol Buffers\nDESCRIPTION: Message definition for VersionResponse that contains version and revision fields. This structure is returned by the Version service to provide containerd version information.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_34\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"VersionResponse\"\n  field {\n    name: \"version\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"version\"\n  }\n  field {\n    name: \"revision\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"revision\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Git Diff Command for Release Verification\nDESCRIPTION: Command to verify changes between current branch and pre-release branch.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit diff ...prerelease_<module set>_<new tag>\n```\n\n----------------------------------------\n\nTITLE: Controller Service Definition in Protobuf\nDESCRIPTION: Defines the Controller service interface for sandbox runtime operations. Includes methods for lifecycle management like create, start, stop, and status monitoring.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_56\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Controller\"\n  method {\n    name: \"Create\"\n    input_type: \".containerd.services.sandbox.v1.ControllerCreateRequest\"\n    output_type: \".containerd.services.sandbox.v1.ControllerCreateResponse\"\n  }\n  method {\n    name: \"Start\"\n    input_type: \".containerd.services.sandbox.v1.ControllerStartRequest\"\n    output_type: \".containerd.services.sandbox.v1.ControllerStartResponse\"\n  }\n  method {\n    name: \"Platform\"\n    input_type: \".containerd.services.sandbox.v1.ControllerPlatformRequest\"\n    output_type: \".containerd.services.sandbox.v1.ControllerPlatformResponse\"\n  }\n  method {\n    name: \"Stop\"\n    input_type: \".containerd.services.sandbox.v1.ControllerStopRequest\"\n    output_type: \".containerd.services.sandbox.v1.ControllerStopResponse\"\n  }\n  method {\n    name: \"Wait\"\n    input_type: \".containerd.services.sandbox.v1.ControllerWaitRequest\"\n    output_type: \".containerd.services.sandbox.v1.ControllerWaitResponse\"\n  }\n  method {\n    name: \"Status\"\n    input_type: \".containerd.services.sandbox.v1.ControllerStatusRequest\"\n    output_type: \".containerd.services.sandbox.v1.ControllerStatusResponse\"\n  }\n  method {\n    name: \"Shutdown\"\n    input_type: \".containerd.services.sandbox.v1.ControllerShutdownRequest\"\n    output_type: \".containerd.services.sandbox.v1.ControllerShutdownResponse\"\n  }\n  method {\n    name: \"Metrics\"\n    input_type: \".containerd.services.sandbox.v1.ControllerMetricsRequest\"\n    output_type: \".containerd.services.sandbox.v1.ControllerMetricsResponse\"\n  }\n  method {\n    name: \"Update\"\n    input_type: \".containerd.services.sandbox.v1.ControllerUpdateRequest\"\n    output_type: \".containerd.services.sandbox.v1.ControllerUpdateResponse\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Retrying Logic to HTTP Sink in Go\nDESCRIPTION: This snippet demonstrates creating a new RetryingSink that wraps around an existing httpSink instance. It introduces retry logic that attempts to resend failed events with a backoff strategy after consecutive failures.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/docker/go-events/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nhs := newHTTPSink(/*...*/)\nretry := NewRetryingSink(hs, NewBreaker(5, time.Second))\n```\n\n----------------------------------------\n\nTITLE: Working with Nested Buckets in BoltDB with Go\nDESCRIPTION: Demonstrates a multi-tenant application pattern using nested buckets. Creates a user in an account by navigating through a hierarchy of buckets and generating a sequential ID.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n// createUser creates a new user in the given account.\nfunc createUser(accountID int, u *User) error {\n    // Start the transaction.\n    tx, err := db.Begin(true)\n    if err != nil {\n        return err\n    }\n    defer tx.Rollback()\n\n    // Retrieve the root bucket for the account.\n    // Assume this has already been created when the account was set up.\n    root := tx.Bucket([]byte(strconv.FormatUint(accountID, 10)))\n\n    // Setup the users bucket.\n    bkt, err := root.CreateBucketIfNotExists([]byte(\"USERS\"))\n    if err != nil {\n        return err\n    }\n\n    // Generate an ID for the new user.\n    userID, err := bkt.NextSequence()\n    if err != nil {\n        return err\n    }\n    u.ID = userID\n\n    // Marshal and save the encoded user.\n    if buf, err := json.Marshal(u); err != nil {\n        return err\n    } else if err := bkt.Put([]byte(strconv.FormatUint(u.ID, 10)), buf); err != nil {\n        return err\n    }\n\n    // Commit the transaction.\n    if err := tx.Commit(); err != nil {\n        return err\n    }\n\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom CBOR Encoding Modes in Go\nDESCRIPTION: Demonstrates how to create and use custom encoding modes in the fxamacker/cbor library. Custom modes allow for specific encoding settings and are safe for concurrent use.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Create encoding mode.\nopts := cbor.CoreDetEncOptions()   // use preset options as a starting point\nopts.Time = cbor.TimeUnix          // change any settings if needed\nem, err := opts.EncMode()          // create an immutable encoding mode\n\n// Reuse the encoding mode. It is safe for concurrent use.\n\n// API matches encoding/json.\nb, err := em.Marshal(v)            // encode v to []byte b\nencoder := em.NewEncoder(w)        // create encoder with io.Writer w\nerr := encoder.Encode(v)           // encode v to io.Writer w\n```\n\n----------------------------------------\n\nTITLE: Introspection Service Proto Definition\nDESCRIPTION: Defines the protobuf messages and service for containerd's introspection functionality, including plugin information and server details.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_48\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage DeprecationWarning {\n  string id = 1;\n  string message = 2;\n  google.protobuf.Timestamp last_occurrence = 3;\n}\n\nmessage PluginInfoRequest {\n  string type = 1;\n  string id = 2;\n  google.protobuf.Any options = 3;\n}\n\nservice Introspection {\n  rpc Plugins(PluginsRequest) returns (PluginsResponse);\n  rpc Server(google.protobuf.Empty) returns (ServerResponse);\n  rpc PluginInfo(PluginInfoRequest) returns (PluginInfoResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Config Path in Containerd 2.x\nDESCRIPTION: This TOML configuration sets the registry config path for containerd 2.x using the CRI plugin.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/registry.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[plugins.\"io.containerd.cri.v1.images\".registry]\n   config_path = \"/etc/containerd/certs.d\"\n```\n\n----------------------------------------\n\nTITLE: RWMutex Recursive Read Locking Deadlock Example in Go\nDESCRIPTION: Complete example demonstrating how recursive read locking with RWMutex can lead to a deadlock when another goroutine attempts to acquire a write lock, which is prohibited by Go's RWMutex implementation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sasha-s/go-deadlock/Readme.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\nfunc main() {\n\tvar mu sync.RWMutex\n\n\tchrlockTwice := make(chan struct{}) // Used to control rlockTwice\n\trlockTwice := func() {\n\t\tmu.RLock()\n\t\tfmt.Println(\"first Rlock succeeded\")\n\t\t<-chrlockTwice\n\t\t<-chrlockTwice\n\t\tfmt.Println(\"trying to Rlock again\")\n\t\tmu.RLock()\n\t\tfmt.Println(\"second Rlock succeeded\")\n\t\tmu.RUnlock()\n\t\tmu.RUnlock()\n\t}\n\n\tchLock := make(chan struct{}) // Used to contol lock\n\tlock := func() {\n\t\t<-chLock\n\t\tfmt.Println(\"about to Lock\")\n\t\tmu.Lock()\n\t\tfmt.Println(\"Lock succeeded\")\n\t\tmu.Unlock()\n\t\t<-chLock\n\t}\n\n\tcontrol := func() {\n\t\tchrlockTwice <- struct{}{}\n\t\tchLock <- struct{}{}\n\n\t\tclose(chrlockTwice)\n\t\tclose(chLock)\n\t}\n\n\tgo control()\n\tgo lock()\n\trlockTwice()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logrus for Different Environments in Go\nDESCRIPTION: Example showing how to configure Logrus differently based on the application environment, using JSON formatting for production and text formatting for other environments.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-21_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  // do something here to set environment depending on an environment variable\n  // or command-line flag\n  if Environment == \"production\" {\n    log.SetFormatter(&log.JSONFormatter{})\n  } else {\n    // The TextFormatter is default, you don't actually have to do this.\n    log.SetFormatter(&log.TextFormatter{})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Auto-Incrementing IDs in BoltDB with Go\nDESCRIPTION: Demonstrates using NextSequence() to generate a unique ID for creating a user record. The example includes marshaling the user data to JSON and storing it with the generated ID.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// CreateUser saves u to the store. The new user ID is set on u once the data is persisted.\nfunc (s *Store) CreateUser(u *User) error {\n    return s.db.Update(func(tx *bolt.Tx) error {\n        // Retrieve the users bucket.\n        // This should be created when the DB is first opened.\n        b := tx.Bucket([]byte(\"users\"))\n\n        // Generate ID for the user.\n        // This returns an error only if the Tx is closed or not writeable.\n        // That can't happen in an Update() call so I ignore the error check.\n        id, _ := b.NextSequence()\n        u.ID = int(id)\n\n        // Marshal user data into bytes.\n        buf, err := json.Marshal(u)\n        if err != nil {\n            return err\n        }\n\n        // Persist bytes to users bucket.\n        return b.Put(itob(u.ID), buf)\n    })\n}\n\n// itob returns an 8-byte big endian representation of v.\nfunc itob(v int) []byte {\n    b := make([]byte, 8)\n    binary.BigEndian.PutUint64(b, uint64(v))\n    return b\n}\n\ntype User struct {\n    ID int\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Container Service Interface in Protocol Buffers\nDESCRIPTION: This snippet defines the Containers service interface with methods for container lifecycle management (Get, List, Create, Update, Delete). It includes request and response message types and uses Protocol Buffers to specify the service's API contract.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_10\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Containers\"\n  method {\n    name: \"Get\"\n    input_type: \".containerd.services.containers.v1.GetContainerRequest\"\n    output_type: \".containerd.services.containers.v1.GetContainerResponse\"\n  }\n  method {\n    name: \"List\"\n    input_type: \".containerd.services.containers.v1.ListContainersRequest\"\n    output_type: \".containerd.services.containers.v1.ListContainersResponse\"\n  }\n  method {\n    name: \"Create\"\n    input_type: \".containerd.services.containers.v1.CreateContainerRequest\"\n    output_type: \".containerd.services.containers.v1.CreateContainerResponse\"\n  }\n  method {\n    name: \"Update\"\n    input_type: \".containerd.services.containers.v1.UpdateContainerRequest\"\n    output_type: \".containerd.services.containers.v1.UpdateContainerResponse\"\n  }\n  method {\n    name: \"Delete\"\n    input_type: \".containerd.services.containers.v1.DeleteContainerRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of runtime resolution failure in containerd\nDESCRIPTION: Command demonstrating how containerd attempts to resolve a runtime name to an executable binary, showing the error when the binary isn't found. This illustrates how containerd converts runtime URIs to binary names.\nSOURCE: https://github.com/containerd/containerd/blob/main/core/runtime/v2/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nctr run --runtime=io.foo.bar.runc2.v2.baz --rm docker.io/library/hello-world:latest hello-world /hello\n```\n\n----------------------------------------\n\nTITLE: Skipping Certificate Verification in TOML\nDESCRIPTION: This snippet configures the skipping of certificate chain and host name verifications for a registry's connection in TOML format. It accepts a boolean value, where 'true' disables verifications.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/hosts.md#2025-04-21_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\nskip_verify = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Runtime Spec in Containerd\nDESCRIPTION: Defines the base OCI runtime specification file path that will be used for all containers. This allows setting a common base specification that all containers will inherit from.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n# base_runtime_spec is a file path to a JSON file with the OCI spec that will be used as the base spec that all\n# container's are created from.\n# Use containerd's `ctr oci spec > /etc/containerd/cri-base.json` to output initial spec file.\n# Spec files are loaded at launch, so containerd daemon must be restarted on any changes to refresh default specs.\n# Still running containers and restarted containers will still be using the original spec from which that container was created.\nbase_runtime_spec = \"\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Minimum CRIU Version\nDESCRIPTION: Code snippet showing how to check if the installed CRIU version meets a minimum version requirement. Uses IsCriuAtLeast method to compare versions.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/checkpoint-restore/go-criu/v7/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\tc := criu.MakeCriu()\n\tresult, err := c.IsCriuAtLeast(31100)\n```\n\n----------------------------------------\n\nTITLE: XXH64 Hashing: Digest Write Method in Go\nDESCRIPTION: The `Write` method of the `Digest` type writes a byte slice to the hash. It updates the internal state of the `Digest` based on the input data. It returns the number of bytes written and a potential error.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (*Digest) Write([]byte) (int, error)\n```\n\n----------------------------------------\n\nTITLE: Defining Content Service WriteAction Enum\nDESCRIPTION: Protocol Buffer enum definition for the WriteAction type in the containerd content service. This enum defines the possible actions during content writing operations: STAT for querying, WRITE for data transmission, and COMMIT for finalizing.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_10\n\nLANGUAGE: protobuf\nCODE:\n```\nenum_type {\n  name: \"WriteAction\"\n  value {\n    name: \"STAT\"\n    number: 0\n    options {\n      66001: \"WriteActionStat\"\n    }\n  }\n  value {\n    name: \"WRITE\"\n    number: 1\n    options {\n      66001: \"WriteActionWrite\"\n    }\n  }\n  value {\n    name: \"COMMIT\"\n    number: 2\n    options {\n      66001: \"WriteActionCommit\"\n    }\n  }\n  options {\n    62001: 0\n    62023: \"WriteAction\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Blockfile Snapshotter Availability in Containerd\nDESCRIPTION: Command to verify if the blockfile snapshotter plugin is available in the containerd installation.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/snapshotters/blockfile.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ctr plugins ls | grep blockfile\n```\n\n----------------------------------------\n\nTITLE: TLS Verification Bypass Configuration\nDESCRIPTION: Configuration example showing how to bypass TLS verification for a private registry.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/hosts.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\nserver = \"https://registry-1.docker.io\"\n\n[host.\"http://192.168.31.250:5000\"]\n  capabilities = [\"pull\", \"resolve\", \"push\"]\n  skip_verify = true\n```\n\n----------------------------------------\n\nTITLE: Defining StateResponse Message Type in Protobuf\nDESCRIPTION: This snippet defines the `StateResponse` message type in protobuf. It represents the state information of a task or process, including its ID, bundle path, PID, status (using the `containerd.v1.types.Status` enum), I/O streams, terminal flag, exit status, exit time, and the execution ID. It allows retrieval of comprehensive information about a task's current state.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_25\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"StateResponse\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"bundle\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"bundle\"\n    }\n    field {\n      name: \"pid\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"pid\"\n    }\n    field {\n      name: \"status\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_ENUM\n      type_name: \".containerd.v1.types.Status\"\n      json_name: \"status\"\n    }\n    field {\n      name: \"stdin\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"stdin\"\n    }\n    field {\n      name: \"stdout\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"stdout\"\n    }\n    field {\n      name: \"stderr\"\n      number: 7\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"stderr\"\n    }\n    field {\n      name: \"terminal\"\n      number: 8\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"terminal\"\n    }\n    field {\n      name: \"exit_status\"\n      number: 9\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"exitStatus\"\n    }\n    field {\n      name: \"exited_at\"\n      number: 10\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Timestamp\"\n      json_name: \"exitedAt\"\n    }\n    field {\n      name: \"exec_id\"\n      number: 11\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"execId\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Custom SpecOpt with Container Creation\nDESCRIPTION: Shows how to use the custom htop monitoring SpecOpt when creating a new container.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/client-opts.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/crosbymichael/monitor\"\n\ncontainer, err := client.NewContainer(ctx, id,\n\tcontainerd.WithNewSpec(oci.WithImageConfig(image), monitor.WithHtop),\n)\n```\n\n----------------------------------------\n\nTITLE: Monitoring Bolt Database Statistics in Go\nDESCRIPTION: This Go snippet shows how to periodically collect and log statistics about the Bolt database operations. It uses a goroutine to capture stats every 10 seconds and outputs the difference as JSON.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_22\n\nLANGUAGE: go\nCODE:\n```\ngo func() {\n\t// Grab the initial stats.\n\tprev := db.Stats()\n\n\tfor {\n\t\t// Wait for 10s.\n\t\ttime.Sleep(10 * time.Second)\n\n\t\t// Grab the current stats and diff them.\n\t\tstats := db.Stats()\n\t\tdiff := stats.Sub(&prev)\n\n\t\t// Encode stats to JSON and print to STDERR.\n\t\tjson.NewEncoder(os.Stderr).Encode(diff)\n\n\t\t// Save stats for the next loop.\n\t\tprev = stats\n\t}\n}()\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteResponse Message Type in Protobuf\nDESCRIPTION: This snippet defines the `DeleteResponse` message for protobuf. It represents the response structure for a task deletion operation, including the process ID (`pid`), exit status (`exit_status`), and the time when the process exited (`exited_at`). The `exited_at` field utilizes the `google.protobuf.Timestamp` type for accurate timestamp representation.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_20\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"DeleteResponse\"\n    field {\n      name: \"pid\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"pid\"\n    }\n    field {\n      name: \"exit_status\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"exitStatus\"\n    }\n    field {\n      name: \"exited_at\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Timestamp\"\n      json_name: \"exitedAt\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Displaying Container Stats with crictl\nDESCRIPTION: Command to display resource usage statistics for running containers using crictl.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/crictl.md#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ crictl stats\nCONTAINER           CPU %               MEM                 DISK              INODES\n0a2c761303163f      0.00                983kB             16.38kB             6\n```\n\n----------------------------------------\n\nTITLE: Defining Streaming Service in Protobuf\nDESCRIPTION: Defines the Streaming service with a Stream method for bidirectional streaming of Any messages. It also includes a StreamInit message type with an ID field.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_65\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"StreamInit\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n}\nservice {\n  name: \"Streaming\"\n  method {\n    name: \"Stream\"\n    input_type: \".google.protobuf.Any\"\n    output_type: \".google.protobuf.Any\"\n    client_streaming: true\n    server_streaming: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CBOR Tag Handling in Go\nDESCRIPTION: Illustrates how to handle CBOR tags using TagSet in the fxamacker/cbor library. This example shows creating custom modes with tag support for both encoding and decoding.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Use signedCWT struct defined in \"Decoding CWT\" example.\n\n// Create TagSet (safe for concurrency).\ntags := cbor.NewTagSet()\n// Register tag COSE_Sign1 18 with signedCWT type.\ntags.Add(\t\n\tcbor.TagOptions{EncTag: cbor.EncTagRequired, DecTag: cbor.DecTagRequired}, \n\treflect.TypeOf(signedCWT{}), \n\t18)\n\n// Create DecMode with immutable tags.\ndm, _ := cbor.DecOptions{}.DecModeWithTags(tags)\n\n// Unmarshal to signedCWT with tag support.\nvar v signedCWT\nif err := dm.Unmarshal(data, &v); err != nil {\n\treturn err\n}\n\n// Create EncMode with immutable tags.\nem, _ := cbor.EncOptions{}.EncModeWithTags(tags)\n\n// Marshal signedCWT with tag number.\nif data, err := cbor.Marshal(v); err != nil {\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a View in OpenCensus Stats\nDESCRIPTION: Example of registering a view with a distribution aggregation. The view defines how measurements are aggregated and exported, including the name, description, measure, and aggregation type.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opencensus.io/README.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif err := view.Register(&view.View{\n\tName:        \"example.com/video_size_distribution\",\n\tDescription: \"distribution of processed video size over time\",\n\tMeasure:     videoSize,\n\tAggregation: view.Distribution(1<<32, 2<<32, 3<<32),\n}); err != nil {\n\tlog.Fatalf(\"Failed to register view: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Bundle Directory Structure for containerd\nDESCRIPTION: Shows the basic directory structure of a bundle in containerd, which includes a config.json file and a rootfs directory. This is the on-disk container layout needed to run a container.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/design/data-flow.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconfig.json\nrootfs/\n```\n\n----------------------------------------\n\nTITLE: Listing Images in containerd\nDESCRIPTION: This snippet shows how to list images pulled into containerd using the 'dist images' command. It displays the reference, type, digest, and size of the pulled image.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-03-17.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo ./bin/dist images\nREF                            TYPE                                                 DIGEST                                                                  SIZE\ndocker.io/library/redis:latest application/vnd.docker.distribution.manifest.v2+json sha256:4c8fb09e8d634ab823b1c125e64f0e1ceaf216025aa38283ea1b42997f1e8059 1.8 kB\n```\n\n----------------------------------------\n\nTITLE: Opening Database with Timeout\nDESCRIPTION: Example showing how to open a bbolt database with a timeout option to prevent indefinite waiting\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ndb, err := bolt.Open(\"my.db\", 0600, &bolt.Options{Timeout: 1 * time.Second})\n```\n\n----------------------------------------\n\nTITLE: Enabling Failpoints via Pod Annotations in Kubernetes YAML\nDESCRIPTION: Kubernetes Pod YAML configuration that demonstrates how to enable CNI failpoints for a specific pod using annotations. The annotation points to a JSON file containing the failpoint configuration.\nSOURCE: https://github.com/containerd/containerd/blob/main/integration/failpoint/cmd/cni-bridge-fp/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\n  annotations:\n    failpoint.cni.containerd.io/confpath: \"/tmp/pod-failpoints.json\"\nspec:\n  containers:\n  - name: nginx\n    image: nginx:1.14.2\n    ports:\n    - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Create Task Request Protobuf Definition\nDESCRIPTION: Protobuf message structure for creating a new task, including container ID, I/O configuration, and rootfs mount information.\nSOURCE: https://github.com/containerd/containerd/blob/main/core/runtime/v2/README.md#2025-04-21_snippet_6\n\nLANGUAGE: proto\nCODE:\n```\nmessage CreateTaskRequest {\n\tstring id = 1;\n\tbool terminal = 4;\n\tstring stdin = 5;\n\tstring stdout = 6;\n\tstring stderr = 7;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal Dependency Image for Linux\nDESCRIPTION: Dockerfile for creating a minimal image containing only the required binary (runc) for Linux environments.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/managed-opt.md#2025-04-21_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM scratch\nAdd runc /bin/runc\n```\n\n----------------------------------------\n\nTITLE: Creating a New Configuration Function in Go\nDESCRIPTION: Shows how to implement a function that creates a new configuration with default values and applies provided options.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// newConfig returns an appropriately configured config.\nfunc newConfig(options ...Option) config {\n\t// Set default values for config.\n\tconfig := config{/* […] */}\n\tfor _, option := range options {\n\t\tconfig = option.apply(config)\n\t}\n\t// Perform any validation here.\n\treturn config\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shim GRPC Service in Protocol Buffers\nDESCRIPTION: This Protocol Buffers definition outlines the GRPC service for the containerd shim. It specifies methods for container lifecycle management, including creation, starting, deletion, execution, PTY handling, event streaming, and state retrieval.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-01-27.md#2025-04-21_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nservice Shim {\n\trpc Create(CreateRequest) returns (CreateResponse);\n\trpc Start(StartRequest) returns (google.protobuf.Empty);\n\trpc Delete(DeleteRequest) returns (DeleteResponse);\n\trpc Exec(ExecRequest) returns (ExecResponse);\n\trpc Pty(PtyRequest) returns (google.protobuf.Empty);\n\trpc Events(EventsRequest) returns (stream Event);\n\trpc State(StateRequest) returns (StateResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteResponse Message in Protocol Buffers\nDESCRIPTION: Defines the DeleteResponse message type with fields for id, pid, exit status, and exited time of a deleted task or process.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_25\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"DeleteResponse\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  field {\n    name: \"pid\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"pid\"\n  }\n  field {\n    name: \"exit_status\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"exitStatus\"\n  }\n  field {\n    name: \"exited_at\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n      65001: 0\n      65010: 1\n    }\n    json_name: \"exitedAt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Dial Timeout in TOML\nDESCRIPTION: This snippet sets the maximum time allowed for a connection attempt to complete in a TOML configuration, with the timeout value specified as a string in seconds. It is used to manage connection delays effectively.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/hosts.md#2025-04-21_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\ndial_timeout = \"1s\"\n```\n\n----------------------------------------\n\nTITLE: Defining Containers Service Methods in Protocol Buffers\nDESCRIPTION: This snippet defines the service methods for the Containers service in containerd. It includes methods for retrieving, listing, creating, updating, and deleting containers, with their respective request and response types.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_37\n\nLANGUAGE: protobuf\nCODE:\n```\n  service {\n    name: \"Containers\"\n    method {\n      name: \"Get\"\n      input_type: \".containerd.services.containers.v1.GetContainerRequest\"\n      output_type: \".containerd.services.containers.v1.GetContainerResponse\"\n    }\n    method {\n      name: \"List\"\n      input_type: \".containerd.services.containers.v1.ListContainersRequest\"\n      output_type: \".containerd.services.containers.v1.ListContainersResponse\"\n    }\n    method {\n      name: \"ListStream\"\n      input_type: \".containerd.services.containers.v1.ListContainersRequest\"\n      output_type: \".containerd.services.containers.v1.ListContainerMessage\"\n      server_streaming: true\n    }\n    method {\n      name: \"Create\"\n      input_type: \".containerd.services.containers.v1.CreateContainerRequest\"\n      output_type: \".containerd.services.containers.v1.CreateContainerResponse\"\n    }\n    method {\n      name: \"Update\"\n      input_type: \".containerd.services.containers.v1.UpdateContainerRequest\"\n      output_type: \".containerd.services.containers.v1.UpdateContainerResponse\"\n    }\n    method {\n      name: \"Delete\"\n      input_type: \".containerd.services.containers.v1.DeleteContainerRequest\"\n      output_type: \".google.protobuf.Empty\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Sandbox Type in Protocol Buffers\nDESCRIPTION: Protocol Buffer definition for the Sandbox message type which represents a container sandbox. Includes fields for sandbox identification, runtime configuration, specifications, labels, timestamps, and extensions.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_52\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Sandbox\"\n  field {\n    name: \"sandbox_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"sandboxId\"\n  }\n  field {\n    name: \"runtime\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Sandbox.Runtime\"\n    json_name: \"runtime\"\n  }\n  field {\n    name: \"spec\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Any\"\n    json_name: \"spec\"\n  }\n  field {\n    name: \"labels\"\n    number: 4\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Sandbox.LabelsEntry\"\n    json_name: \"labels\"\n  }\n  field {\n    name: \"created_at\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    json_name: \"createdAt\"\n  }\n  field {\n    name: \"updated_at\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    json_name: \"updatedAt\"\n  }\n  field {\n    name: \"extensions\"\n    number: 7\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Sandbox.ExtensionsEntry\"\n    json_name: \"extensions\"\n  }\n  field {\n    name: \"sandboxer\"\n    number: 10\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"sandboxer\"\n  }\n  nested_type {\n    name: \"Runtime\"\n    field {\n      name: \"name\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"name\"\n    }\n    field {\n      name: \"options\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Any\"\n      json_name: \"options\"\n    }\n  }\n  nested_type {\n    name: \"LabelsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n  nested_type {\n    name: \"ExtensionsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Any\"\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Index Labels for Garbage Collection Reference\nDESCRIPTION: Example of containerd index labels showing garbage collection references for multi-platform image manifests\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/content-flow.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ncontainerd.io/gc.ref.content.m.0=sha256:9bb13890319dc01e5f8a4d3d0c4c72685654d682d568350fd38a02b1d70aee6b\ncontainerd.io/gc.ref.content.m.1=sha256:aeb53f8db8c94d2cd63ca860d635af4307967aa11a2fdead98ae0ab3a329f470\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Introspection Service Messages in Protobuf\nDESCRIPTION: This snippet defines protobuf messages for the introspection service in Containerd, including plugin information and server responses.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_47\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Plugin\"\n  field {\n    name: \"type\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"type\"\n  }\n  field {\n    name: \"id\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  // Additional fields omitted for brevity\n}\n\nmessage_type {\n  name: \"PluginsRequest\"\n  field {\n    name: \"filters\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"filters\"\n  }\n}\n\nmessage_type {\n  name: \"PluginsResponse\"\n  field {\n    name: \"plugins\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.introspection.v1.Plugin\"\n    json_name: \"plugins\"\n  }\n}\n\n// Additional message types omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Registering for memory threshold events in v1\nDESCRIPTION: Sets up notification via eventfd for memory usage threshold events in v1 cgroups.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nevent := cgroup1.MemoryThresholdEvent(50 * 1024 * 1024, false)\nefd, err := control.RegisterMemoryEvent(event)\n```\n\n----------------------------------------\n\nTITLE: Watching Content Directory Using tree Command in Bash\nDESCRIPTION: This Bash command uses the 'watch' and 'tree' utilities to monitor the contents of the .content directory where downloaded content is stored. It provides a visual representation of the content store's structure and updates.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-01-27.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ watch -n0.2 tree .content\n```\n\n----------------------------------------\n\nTITLE: Basic Klog Usage Example\nDESCRIPTION: Demonstrates basic logging with klog package.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/k8s.io/klog/v2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nglog.Info(\"Prepare to repel boarders\")\n\nglog.Fatalf(\"Initialization failed: %s\", err)\n```\n\n----------------------------------------\n\nTITLE: Importing bbolt in Go\nDESCRIPTION: Example showing how to import and initialize a bbolt database connection\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport bolt \"go.etcd.io/bbolt\"\n\ndb, err := bolt.Open(path, 0600, nil)\nif err != nil {\n  return err\n}\ndefer db.Close()\n```\n\n----------------------------------------\n\nTITLE: Content Service Message and Service Definitions in Protocol Buffers\nDESCRIPTION: Comprehensive Protocol Buffer definitions for the Containerd Content service. Includes message types for content info, status tracking, read/write operations, and service method definitions. The service provides capabilities for content management including streaming reads and writes.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_39\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Info\"\n  field {\n    name: \"digest\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"digest\"\n  }\n  field {\n    name: \"size\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"size\"\n  }\n  field {\n    name: \"created_at\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    json_name: \"createdAt\"\n  }\n  # ... additional message definitions ...\n  service {\n    name: \"Content\"\n    method {\n      name: \"Info\"\n      input_type: \".containerd.services.content.v1.InfoRequest\"\n      output_type: \".containerd.services.content.v1.InfoResponse\"\n    }\n    method {\n      name: \"Write\"\n      input_type: \".containerd.services.content.v1.WriteContentRequest\"\n      output_type: \".containerd.services.content.v1.WriteContentResponse\"\n      client_streaming: true\n      server_streaming: true\n    }\n    # ... additional methods ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing ZFS Filesystems, Snapshots, and Clones in Go\nDESCRIPTION: This code snippet demonstrates how to create a ZFS filesystem, create a snapshot, clone the snapshot, and then destroy the created objects. It assumes a zpool named 'test' and omits error handling for brevity.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/mistifyio/go-zfs/v3/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n//assuming a zpool named test\n//error handling omitted\n\n\nf, err := zfs.CreateFilesystem(\"test/snapshot-test\", nil)\nok(t, err)\n\ns, err := f.Snapshot(\"test\", nil)\nok(t, err)\n\n// snapshot is named \"test/snapshot-test@test\"\n\nc, err := s.Clone(\"test/clone-test\", nil)\n\nerr := c.Destroy()\nerr := s.Destroy()\nerr := f.Destroy()\n```\n\n----------------------------------------\n\nTITLE: Converting Format String Logging to Structured Logging in Go\nDESCRIPTION: Examples of converting traditional format string logging to structured logging using logr. This demonstrates how to transform log messages into key-value pairs.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nklog.V(4).Infof(\"Client is returning errors: code %v, error %v\", responseCode, err)\n// becomes\nlogger.Error(err, \"client returned an error\", \"code\", responseCode)\n```\n\nLANGUAGE: go\nCODE:\n```\nklog.V(4).Infof(\"Got a Retry-After %ds response for attempt %d to %v\", seconds, retries, url)\n// becomes\nlogger.V(4).Info(\"got a retry-after response when requesting url\", \"attempt\", retries, \"after seconds\", seconds, \"url\", url)\n```\n\nLANGUAGE: go\nCODE:\n```\nlog.Printf(\"unable to reflect over type %T\")\n// becomes\nlogger.Info(\"unable to reflect over type\", \"type\", fmt.Sprintf(\"%T\"))\n```\n\n----------------------------------------\n\nTITLE: Exec Process Request Protobuf Definition\nDESCRIPTION: Protobuf message structure for executing additional processes within a container, specifying process ID and I/O configuration.\nSOURCE: https://github.com/containerd/containerd/blob/main/core/runtime/v2/README.md#2025-04-21_snippet_7\n\nLANGUAGE: proto\nCODE:\n```\nmessage ExecProcessRequest {\n\tstring id = 1;\n\tstring exec_id = 2;\n\tbool terminal = 3;\n\tstring stdin = 4;\n\tstring stdout = 5;\n\tstring stderr = 6;\n}\n```\n\n----------------------------------------\n\nTITLE: Snapshot Plugin Configuration in Containerd\nDESCRIPTION: Shows the configuration format for external snapshot plugins in containerd's config file.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/features.md#2025-04-21_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[proxy_plugins]\n  [proxy_plugins.customsnapshot]\n    type = \"snapshot\"\n    address =  \"/var/run/mysnapshotter.sock\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Unexported Fields Access\nDESCRIPTION: Examples of enabling and disabling access to unexported fields during fuzzing\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nf.AllowUnexportedFields()\n```\n\nLANGUAGE: go\nCODE:\n```\nf.DisallowUnexportedFields()\n```\n\n----------------------------------------\n\nTITLE: Containerd Client Initialization with Namespace\nDESCRIPTION: Shows how to initialize a containerd client with namespace support, allowing multiple consumers to use the same containerd daemon without conflicts.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-05-19.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient, err := containerd.NewClient(address, namespace)\n```\n\n----------------------------------------\n\nTITLE: Instrument Kind Renaming in SDK Metric\nDESCRIPTION: Updates to instrument kind names in go.opentelemetry.io/otel/sdk/metric to match the API naming conventions.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nInstrumentKindCounter // renamed from InstrumentKindSyncCounter\nInstrumentKindUpDownCounter // renamed from InstrumentKindSyncUpDownCounter\nInstrumentKindHistogram // renamed from InstrumentKindSyncHistogram\nInstrumentKindObservableCounter // renamed from InstrumentKindAsyncCounter\nInstrumentKindObservableUpDownCounter // renamed from InstrumentKindAsyncUpDownCounter\nInstrumentKindObservableGauge // renamed from InstrumentKindAsyncGauge\n```\n\n----------------------------------------\n\nTITLE: Running Ansible Playbook for containerd Installation\nDESCRIPTION: Clone the containerd repository and run the Ansible playbook to install containerd and required dependencies on all hosts specified in the hosts file. This prepares the machines for Kubernetes deployment.\nSOURCE: https://github.com/containerd/containerd/blob/main/contrib/ansible/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/containerd/containerd\ncd ./contrib/ansible\nansible-playbook -i hosts cri-containerd.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Task Events Proto Messages\nDESCRIPTION: Protocol buffer definitions for task lifecycle events including creation, start, deletion, I/O configuration, exit status and exec operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage TaskCreate {\n  string container_id = 1;\n  string bundle = 2;\n  repeated Mount rootfs = 3;\n  TaskIO io = 4;\n  string checkpoint = 5;\n  uint32 pid = 6;\n}\n\nmessage TaskIO {\n  string stdin = 1;\n  string stdout = 2;\n  string stderr = 3;\n  bool terminal = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task Event Messages in Protobuf for Containerd\nDESCRIPTION: Defines various task-related event message types in the containerd.events package, including TaskCreate, TaskStart, TaskDelete, TaskIO, TaskExit, TaskOOM, TaskExecAdded, TaskExecStarted, TaskPaused, TaskResumed, and TaskCheckpointed. These structures represent different events in the container lifecycle.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"TaskCreate\"\n  field {\n    name: \"container_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n  // ... other fields\n}\n\nmessage_type {\n  name: \"TaskStart\"\n  field {\n    name: \"container_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n  // ... other fields\n}\n\n// ... other message types\n```\n\n----------------------------------------\n\nTITLE: Checking for cgroups v2 support\nDESCRIPTION: Detects if the current system is running cgroups v2 unified hierarchy by checking the cgroups mode.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nvar cgroupV2 bool\nif cgroups.Mode() == cgroups.Unified {\n\tcgroupV2 = true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Info Structure in Protocol Buffers\nDESCRIPTION: Defines the Info message type for content metadata, including fields for digest, size, creation and update timestamps, and labels. It uses custom options for specifying Go types and timestamp handling.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_7\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"Info\"\n  field {\n    name: \"digest\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65003: \"github.com/opencontainers/go-digest.Digest\"\n      65001: 0\n    }\n    json_name: \"digest\"\n  }\n  field {\n    name: \"size\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"size\"\n  }\n  field {\n    name: \"created_at\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n      65010: 1\n      65001: 0\n    }\n    json_name: \"createdAt\"\n  }\n  field {\n    name: \"updated_at\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n      65010: 1\n      65001: 0\n    }\n    json_name: \"updatedAt\"\n  }\n  field {\n    name: \"labels\"\n    number: 5\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.content.v1.Info.LabelsEntry\"\n    json_name: \"labels\"\n  }\n  nested_type {\n    name: \"LabelsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer for Import/Export in ContainerD Transfer API\nDESCRIPTION: Protobuf message definitions for ImageImportStream and ImageExportStream which configure image import and export operations including stream references, media types, and platform filters.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_78\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"github.com/containerd/containerd/api/types/transfer/importexport.proto\"\n  package: \"containerd.types.transfer\"\n  dependency: \"github.com/containerd/containerd/api/types/platform.proto\"\n  message_type {\n    name: \"ImageImportStream\"\n    field {\n      name: \"stream\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"stream\"\n    }\n    field {\n      name: \"media_type\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"mediaType\"\n    }\n    field {\n      name: \"force_compress\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"forceCompress\"\n    }\n  }\n  message_type {\n    name: \"ImageExportStream\"\n    field {\n      name: \"stream\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"stream\"\n    }\n    field {\n      name: \"media_type\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"mediaType\"\n    }\n    field {\n      name: \"platforms\"\n      number: 3\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.types.Platform\"\n      json_name: \"platforms\"\n    }\n    field {\n      name: \"all_platforms\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"allPlatforms\"\n    }\n    field {\n      name: \"skip_compatibility_manifest\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"skipCompatibilityManifest\"\n    }\n    field {\n      name: \"skip_non_distributable\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"skipNonDistributable\"\n    }\n  }\n  options {\n    go_package: \"github.com/containerd/containerd/api/types/transfer\"\n  }\n  syntax: \"proto3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateTaskResponse Message Type in Protobuf\nDESCRIPTION: This snippet defines the `CreateTaskResponse` protobuf message. It specifies the response structure for creating a task, only containing the process ID (`pid`) of the created task. This message is used to return the result of a task creation operation.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_18\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"CreateTaskResponse\"\n    field {\n      name: \"pid\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"pid\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Enums for Write Actions in Containerd - Protobuf\nDESCRIPTION: This snippet defines the WriteAction enum, which describes the various actions that can be performed when writing content in containerd. It includes three actions: STAT, WRITE, and COMMIT, each associated with a specific integer value. These options are utilized in WriteContentRequest messages to specify the intended operation.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_16\n\nLANGUAGE: protobuf\nCODE:\n```\nenum_type {\n  name: \"WriteAction\"\n  value {\n    name: \"STAT\"\n    number: 0\n    options {\n      66001: \"WriteActionStat\"\n    }\n  }\n  value {\n    name: \"WRITE\"\n    number: 1\n    options {\n      66001: \"WriteActionWrite\"\n    }\n  }\n  value {\n    name: \"COMMIT\"\n    number: 2\n    options {\n      66001: \"WriteActionCommit\"\n    }\n  }\n  options {\n    62001: 0\n    62023: \"WriteAction\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Layer Path in Containerd\nDESCRIPTION: This snippet demonstrates how to use the 'dist path' command to get the direct path to a content blob in Containerd. This facilitates fast access to the layer data.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-01-27.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./dist path sha256:010c454d55e53059beaba4044116ea4636f8dd8181e975d893931c7e7204fffa\n```\n\n----------------------------------------\n\nTITLE: Defining Option Interface in Go\nDESCRIPTION: Illustrates the creation of an Option interface for setting configuration values, with an unexported apply method to prevent external implementation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype Option interface {\n\tapply(config) config\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Status Enum in Protobuf\nDESCRIPTION: This snippet defines the `Status` enum type for protobuf. It represents the possible states of a process, such as `UNKNOWN`, `CREATED`, `RUNNING`, `STOPPED`, `PAUSED`, and `PAUSING`. It is used to define the `status` field in the `Process` message, allowing for clear representation of the process state.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_16\n\nLANGUAGE: protobuf\nCODE:\n```\n  enum_type {\n    name: \"Status\"\n    value {\n      name: \"UNKNOWN\"\n      number: 0\n    }\n    value {\n      name: \"CREATED\"\n      number: 1\n    }\n    value {\n      name: \"RUNNING\"\n      number: 2\n    }\n    value {\n      name: \"STOPPED\"\n      number: 3\n    }\n    value {\n      name: \"PAUSED\"\n      number: 4\n    }\n    value {\n      name: \"PAUSING\"\n      number: 5\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Task Service Proto Definition\nDESCRIPTION: Defines messages and enums for container task management including process information, task status, and task lifecycle operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_24\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"Process\"\n    field {\n      name: \"container_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"containerId\"\n    }\n    field {\n      name: \"id\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    // Additional fields omitted for brevity\n  }\n```\n\n----------------------------------------\n\nTITLE: Pulling an Image using ctr-enc\nDESCRIPTION: This command pulls an image from the specified location.  In this example, pulls from the local docker registry.  Requires `ctr-enc` with configured containerd socket and a running docker registry with pushed image.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/imgcrypt/v2/README.md#2025-04-21_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n# $CTR images pull localhost:5000/bash.enc:latest\n```\n\n----------------------------------------\n\nTITLE: Pushing an Image using ctr-enc\nDESCRIPTION: This command pushes the tagged encrypted image to the local Docker registry.  Requires the registry to be running. Requires `ctr-enc` with configured containerd socket.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/imgcrypt/v2/README.md#2025-04-21_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\n# $CTR images push localhost:5000/bash.enc:latest\n```\n\n----------------------------------------\n\nTITLE: Default Mirror Configuration\nDESCRIPTION: Configuration for setting up a default mirror for all registries using the _default namespace.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/hosts.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[host.\"https://registry.example.com\"]\n  capabilities = [\"pull\", \"resolve\"]\n```\n\n----------------------------------------\n\nTITLE: XXH64 Hashing: Sum64String Function in Go\nDESCRIPTION: The `Sum64String` function computes the 64-bit xxHash of a string. Similar to `Sum64`, it offers a fast method for creating a hash value from a string. It leverages optimized pure Go and assembly implementations for improved performance.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc Sum64String(s string) uint64\n```\n\n----------------------------------------\n\nTITLE: Setting Up Loopback Devices for Devmapper Thin-Pool (Bash)\nDESCRIPTION: This bash script sets up loopback devices for a devmapper thin-pool. It creates data and metadata files, allocates loop devices, and creates a thin-pool device using dmsetup. It also provides a configuration snippet for containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/snapshotters/devmapper.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nset -ex\n\nDATA_DIR=/var/lib/containerd/devmapper\nPOOL_NAME=devpool\n\nsudo mkdir -p ${DATA_DIR}\n\n# Create data file\nsudo touch \"${DATA_DIR}/data\"\nsudo truncate -s 100G \"${DATA_DIR}/data\"\n\n# Create metadata file\nsudo touch \"${DATA_DIR}/meta\"\nsudo truncate -s 10G \"${DATA_DIR}/meta\"\n\n# Allocate loop devices\nDATA_DEV=$(sudo losetup --find --show \"${DATA_DIR}/data\")\nMETA_DEV=$(sudo losetup --find --show \"${DATA_DIR}/meta\")\n\n# Define thin-pool parameters.\n# See https://www.kernel.org/doc/Documentation/device-mapper/thin-provisioning.txt for details.\nSECTOR_SIZE=512\nDATA_SIZE=\"$(sudo blockdev --getsize64 -q ${DATA_DEV})\"\nLENGTH_IN_SECTORS=$(bc <<< \"${DATA_SIZE}/${SECTOR_SIZE}\")\nDATA_BLOCK_SIZE=128\nLOW_WATER_MARK=32768\n\n# Create a thin-pool device\nsudo dmsetup create \"${POOL_NAME}\" \\\n    --table \"0 ${LENGTH_IN_SECTORS} thin-pool ${META_DEV} ${DATA_DEV} ${DATA_BLOCK_SIZE} ${LOW_WATER_MARK}\"\n\ncat << EOF\n#\n# Add this to your config.toml configuration file and restart the containerd daemon\n#\n[plugins]\n  [plugins.\"io.containerd.snapshotter.v1.devmapper\"]\n    pool_name = \"${POOL_NAME}\"\n    root_path = \"${DATA_DIR}\"\n    base_image_size = \"10GB\"\n    discard_blocks = true\nEOF\n```\n\n----------------------------------------\n\nTITLE: Verifying User Namespace in Container\nDESCRIPTION: Command to verify that the container is running inside a user namespace by checking the UID mapping.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/user-namespaces/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat /proc/self/uid_map\n```\n\n----------------------------------------\n\nTITLE: Generating Protocol Buffers Code\nDESCRIPTION: Command to regenerate API code packages after making changes to gRPC API.\nSOURCE: https://github.com/containerd/containerd/blob/main/BUILDING.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmake generate\n```\n\n----------------------------------------\n\nTITLE: Defining AuthResponse Message in Protocol Buffers\nDESCRIPTION: Defines the AuthResponse message type with fields for authentication type, secret, username, and expiration timestamp.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_83\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage AuthResponse {\n  AuthType authType = 1;\n  string secret = 2;\n  string username = 3;\n  google.protobuf.Timestamp expire_at = 4 [json_name = \"expireAt\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Digest Methods in xxHash Go Implementation\nDESCRIPTION: This snippet shows the key methods of the Digest type, which allow writing data and calculating the hash value.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (*Digest) Write([]byte) (int, error)\nfunc (*Digest) WriteString(string) (int, error)\nfunc (*Digest) Sum64() uint64\n```\n\n----------------------------------------\n\nTITLE: Decoding with encoding/gob resulting in out of memory error\nDESCRIPTION: This example demonstrates how `encoding/gob` can result in a \"fatal error: runtime: out of memory\" when decoding malicious data. It showcases a vulnerability that fxamacker/cbor addresses with configurable limits.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Example of encoding/gob having \"fatal error: runtime: out of memory\"\n// while decoding 181 bytes.\npackage main\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"encoding/hex\"\n\t\"fmt\"\n)\n\n// Example data is from https://github.com/golang/go/issues/24446\n// (shortened to 181 bytes).\nconst data = \"4dffb503010102303001ff30000109010130010800010130010800010130\" +\n\t\"01ffb80001014a01ffb60001014b01ff860001013001ff860001013001ff\" +\n\t\"860001013001ff860001013001ffb80000001eff850401010e3030303030\" +\n\t\"30303030303030303001ff3000010c0104000016ffb70201010830303030\" +\n\t\"3030303001ff3000010c000030ffb6040405fcff00303030303030303030\" +\n\t\"303030303030303030303030303030303030303030303030303030303030\" +\n\t\"30\"\n\ntype X struct {\n\tJ *X\n\tK map[string]int\n}\n\nfunc main() {\n\traw, _ := hex.DecodeString(data)\n\tdecoder := gob.NewDecoder(bytes.NewReader(raw))\n\n\tvar x X\n\tdecoder.Decode(&x) // fatal error: runtime: out of memory\n\tfmt.Println(\"Decoding finished.\")\n}\n\n```\n\n----------------------------------------\n\nTITLE: Referencing MaxEncodedSize in zstd Encoder\nDESCRIPTION: An example of how to reference the MaxEncodedSize method in the zstd encoder from the v1.15.13 release. This method allows determining the maximum size a payload could be after encoding.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nhttps://pkg.go.dev/github.com/klauspost/compress@v1.15.13/zstd#Encoder.MaxEncodedSize\n```\n\n----------------------------------------\n\nTITLE: Defining ExecProcessResponse Message Type in Protobuf\nDESCRIPTION: This snippet defines the `ExecProcessResponse` message type using protobuf. This message serves as a response to an `ExecProcessRequest`, indicating the completion of the process execution. Currently, it does not contain any fields, implying that only the successful execution (or lack thereof, through errors) is signaled.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_22\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"ExecProcessResponse\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing NRI v0.1.0 Compatibility Adapter\nDESCRIPTION: Bash commands for installing and configuring the v0.1.0 adapter plugin to enable backward compatibility with older NRI plugins.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/NRI.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/containerd/nri\ncd nri\nmake\nsudo cp build/bin/v010-adapter /usr/local/bin\nsudo mkdir -p /opt/nri/plugins\nsudo ln -s /usr/local/bin/v010-adapter /opt/nri/plugins/00-v010-adapter\n```\n\n----------------------------------------\n\nTITLE: Handling Overlapping Configurations in Go\nDESCRIPTION: Demonstrates how to handle shared configuration between multiple structs using a common config and separate option interfaces.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-21_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// config holds options for all animals.\ntype config struct {\n\tWeight      float64\n\tColor       string\n\tMaxAltitude float64\n}\n\n// DogOption apply Dog specific options.\ntype DogOption interface {\n\tapplyDog(config) config\n}\n\n// BirdOption apply Bird specific options.\ntype BirdOption interface {\n\tapplyBird(config) config\n}\n\n// Option apply options for all animals.\ntype Option interface {\n\tBirdOption\n\tDogOption\n}\n\ntype weightOption float64\n\nfunc (o weightOption) applyDog(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc (o weightOption) applyBird(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc WithWeight(w float64) Option { return weightOption(w) }\n\ntype furColorOption string\n\nfunc (o furColorOption) applyDog(c config) config {\n\tc.Color = string(o)\n\treturn c\n}\n\nfunc WithFurColor(c string) DogOption { return furColorOption(c) }\n\ntype maxAltitudeOption float64\n\nfunc (o maxAltitudeOption) applyBird(c config) config {\n\tc.MaxAltitude = float64(o)\n\treturn c\n}\n\nfunc WithMaxAltitude(a float64) BirdOption { return maxAltitudeOption(a) }\n\nfunc NewDog(name string, o ...DogOption) Dog    {…}\nfunc NewBird(name string, o ...BirdOption) Bird {…}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bolt Metadata Plugin for Content Sharing\nDESCRIPTION: Demonstrates how to configure the Bolt metadata plugin to control content sharing policy between namespaces. It shows the configuration for 'isolated' mode.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/ops.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n\n[plugins.\"io.containerd.metadata.v1.bolt\"]\n\tcontent_sharing_policy = \"isolated\"\n```\n\n----------------------------------------\n\nTITLE: Snapshot Service Proto Definition\nDESCRIPTION: Defines the Snapshots service interface with methods for preparing, viewing, mounting and managing container snapshots. Includes message types for requests/responses and snapshot status kinds.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_22\n\nLANGUAGE: protobuf\nCODE:\n```\n  service {\n    name: \"Snapshots\"\n    method {\n      name: \"Prepare\"\n      input_type: \".containerd.services.snapshots.v1.PrepareSnapshotRequest\"\n      output_type: \".containerd.services.snapshots.v1.PrepareSnapshotResponse\"\n    }\n    method {\n      name: \"View\"\n      input_type: \".containerd.services.snapshots.v1.ViewSnapshotRequest\" \n      output_type: \".containerd.services.snapshots.v1.ViewSnapshotResponse\"\n    }\n    method {\n      name: \"Mounts\"\n      input_type: \".containerd.services.snapshots.v1.MountsRequest\"\n      output_type: \".containerd.services.snapshots.v1.MountsResponse\"\n    }\n    // Additional methods omitted for brevity\n  }\n```\n\n----------------------------------------\n\nTITLE: Deadlock Example in Go - Duplicate Lock Acquisition\nDESCRIPTION: Example showing another common cause of deadlocks: acquiring the same lock twice in the same goroutine, which can lead to a self-deadlock situation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sasha-s/go-deadlock/Readme.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nA.Rlock() or lock()\n\nA.lock() or A.RLock()\n```\n\n----------------------------------------\n\nTITLE: Defining CloseIORequest Message Type in Protobuf\nDESCRIPTION: This snippet defines the `CloseIORequest` message type using protobuf. It's used to request closing the input/output streams of a task or process. The message includes the task ID (`id`), the execution ID (`exec_id`), and a flag indicating whether to close the standard input stream (`stdin`).\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_27\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"CloseIORequest\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"exec_id\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"execId\"\n    }\n    field {\n      name: \"stdin\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"stdin\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Certificates in TOML\nDESCRIPTION: These snippets show how to configure client certificates using a single file path, an array of paths, or pairs of paths in TOML format. The configuration requires valid file paths for certificate and key.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/hosts.md#2025-04-21_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\nclient = \"/etc/certs/client.pem\"\n```\n\nLANGUAGE: toml\nCODE:\n```\nclient = [\"/etc/certs/client-1.pem\", \"/etc/certs/client-2.pem\"]\n```\n\nLANGUAGE: toml\nCODE:\n```\nclient = [[\"/etc/certs/client.cert\", \"/etc/certs/client.key\"],[\"/etc/certs/client.pem\", \"\"]]\n```\n\n----------------------------------------\n\nTITLE: Persisting inotify limits on Linux\nDESCRIPTION: This snippet demonstrates how to persist changes to inotify limits on Linux across reboots. It involves modifying configuration files such as `/etc/sysctl.conf` or `/usr/lib/sysctl.d/50-default.conf` to set the desired values.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/fsnotify/fsnotify/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n```\n    fs.inotify.max_user_watches=124983\n    fs.inotify.max_user_instances=128\n```\n```\n\n----------------------------------------\n\nTITLE: CBOR Encoding Presets in Go\nDESCRIPTION: Shows the available preset encoding options for CBOR in the fxamacker/cbor library. These presets provide different serialization strategies conforming to various specifications.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// EncOptions is a struct of encoder settings.\nfunc CoreDetEncOptions() EncOptions              // RFC 8949 Core Deterministic Encoding\nfunc PreferredUnsortedEncOptions() EncOptions    // RFC 8949 Preferred Serialization\nfunc CanonicalEncOptions() EncOptions            // RFC 7049 Canonical CBOR\nfunc CTAP2EncOptions() EncOptions                // FIDO2 CTAP2 Canonical CBOR\n```\n\n----------------------------------------\n\nTITLE: Creating ZFS Filesystem for Containerd\nDESCRIPTION: This snippet demonstrates how to create a ZFS filesystem for use with the containerd ZFS snapshotter. The filesystem is mounted at `/var/lib/containerd/io.containerd.snapshotter.v1.zfs` when the containerd root is set to `/var/lib/containerd`. The `your-zpool/containerd` part refers to the ZFS pool and dataset names, adjust it according to your ZFS setup.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/zfs/v2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"$ zfs create -o mountpoint=/var/lib/containerd/io.containerd.snapshotter.v1.zfs your-zpool/containerd\"\n```\n\n----------------------------------------\n\nTITLE: Creating AWS CloudFormation Stack for Benchmark Instance\nDESCRIPTION: This command creates an AWS CloudFormation stack to launch an EC2 instance suitable for benchmarking. It sets up the necessary dependencies, EBS volumes, and a thin-pool device.\nSOURCE: https://github.com/containerd/containerd/blob/main/contrib/aws/snapshotter_bench_readme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation create-stack \\\n    --stack-name benchmark-instance \\\n    --template-body file://benchmark_aws.yml \\\n    --parameters \\\n        ParameterKey=Key,ParameterValue=SSH_KEY \\\n        ParameterKey=SecurityGroups,ParameterValue=sg-XXXXXXXX \\\n        ParameterKey=VolumesSize,ParameterValue=20 \\\n        ParameterKey=VolumesIOPS,ParameterValue=1000\n```\n\n----------------------------------------\n\nTITLE: Building Static Binaries\nDESCRIPTION: Command to build static binaries of containerd using make with STATIC flag.\nSOURCE: https://github.com/containerd/containerd/blob/main/BUILDING.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmake STATIC=1\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteRequest Message Type in Protobuf\nDESCRIPTION: This snippet defines the `DeleteRequest` message type using protobuf. It's used to request the deletion of a task or an executed process, identified by their respective IDs (`id` and `exec_id`). These IDs are strings that uniquely identify the task and the executed process to be deleted.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_19\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"DeleteRequest\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"exec_id\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"execId\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Version Service and Message in Protobuf\nDESCRIPTION: This snippet defines the Version service, including its method and the VersionResponse message type. It specifies the structure of the version information returned by the service.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_29\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"VersionResponse\"\n  field {\n    name: \"version\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"version\"\n  }\n  field {\n    name: \"revision\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"revision\"\n  }\n}\nservice {\n  name: \"Version\"\n  method {\n    name: \"Version\"\n    input_type: \".google.protobuf.Empty\"\n    output_type: \".containerd.services.version.v1.VersionResponse\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Freezing and thawing a cgroup v1\nDESCRIPTION: Demonstrates how to freeze (suspend) and thaw (resume) all processes in a cgroup.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/README.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nif err := control.Freeze(); err != nil {\n}\nif err := control.Thaw(); err != nil {\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Batch Span Processor\nDESCRIPTION: Environment variables used to configure the batch span processor settings including delay, timeout, queue size and batch size.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\nOTEL_BSP_SCHEDULE_DELAY\nOTEL_BSP_EXPORT_TIMEOUT\nOTEL_BSP_MAX_QUEUE_SIZE\nOTEL_BSP_MAX_EXPORT_BATCH_SIZE\n```\n\n----------------------------------------\n\nTITLE: Defining Container Service Protocol Buffer Message Types\nDESCRIPTION: This snippet defines the core container-related message types for the containerd service API, including Container, GetContainerRequest, ListContainersRequest, and other container operation messages. It specifies the fields and structure for container management.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_36\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"github.com/containerd/containerd/api/services/containers/v1/containers.proto\"\n  package: \"containerd.services.containers.v1\"\n  dependency: \"google/protobuf/any.proto\"\n  dependency: \"google/protobuf/empty.proto\"\n  dependency: \"google/protobuf/field_mask.proto\"\n  dependency: \"google/protobuf/timestamp.proto\"\n  message_type {\n    name: \"Container\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"labels\"\n      number: 2\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.containers.v1.Container.LabelsEntry\"\n      json_name: \"labels\"\n    }\n    field {\n      name: \"image\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"image\"\n    }\n    field {\n      name: \"runtime\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.containers.v1.Container.Runtime\"\n      json_name: \"runtime\"\n    }\n    field {\n      name: \"spec\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Any\"\n      json_name: \"spec\"\n    }\n    field {\n      name: \"snapshotter\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"snapshotter\"\n    }\n    field {\n      name: \"snapshot_key\"\n      number: 7\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"snapshotKey\"\n    }\n    field {\n      name: \"created_at\"\n      number: 8\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Timestamp\"\n      json_name: \"createdAt\"\n    }\n    field {\n      name: \"updated_at\"\n      number: 9\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Timestamp\"\n      json_name: \"updatedAt\"\n    }\n    field {\n      name: \"extensions\"\n      number: 10\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.containers.v1.Container.ExtensionsEntry\"\n      json_name: \"extensions\"\n    }\n    field {\n      name: \"sandbox\"\n      number: 11\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"sandbox\"\n    }\n    nested_type {\n      name: \"LabelsEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n    nested_type {\n      name: \"Runtime\"\n      field {\n        name: \"name\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"name\"\n      }\n      field {\n        name: \"options\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_MESSAGE\n        type_name: \".google.protobuf.Any\"\n        json_name: \"options\"\n      }\n    }\n    nested_type {\n      name: \"ExtensionsEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_MESSAGE\n        type_name: \".google.protobuf.Any\"\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n  }\n  message_type {\n    name: \"GetContainerRequest\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n  }\n  message_type {\n    name: \"GetContainerResponse\"\n    field {\n      name: \"container\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.containers.v1.Container\"\n      json_name: \"container\"\n    }\n  }\n  message_type {\n    name: \"ListContainersRequest\"\n    field {\n      name: \"filters\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_STRING\n      json_name: \"filters\"\n    }\n  }\n  message_type {\n    name: \"ListContainersResponse\"\n    field {\n      name: \"containers\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.containers.v1.Container\"\n      json_name: \"containers\"\n    }\n  }\n  message_type {\n    name: \"CreateContainerRequest\"\n    field {\n      name: \"container\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.containers.v1.Container\"\n      json_name: \"container\"\n    }\n  }\n  message_type {\n    name: \"CreateContainerResponse\"\n    field {\n      name: \"container\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.containers.v1.Container\"\n      json_name: \"container\"\n    }\n  }\n  message_type {\n    name: \"UpdateContainerRequest\"\n    field {\n      name: \"container\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.containers.v1.Container\"\n      json_name: \"container\"\n    }\n    field {\n      name: \"update_mask\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.FieldMask\"\n      json_name: \"updateMask\"\n    }\n  }\n  message_type {\n    name: \"UpdateContainerResponse\"\n    field {\n      name: \"container\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.containers.v1.Container\"\n      json_name: \"container\"\n    }\n  }\n  message_type {\n    name: \"DeleteContainerRequest\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n  }\n  message_type {\n    name: \"ListContainerMessage\"\n    field {\n      name: \"container\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.containers.v1.Container\"\n      json_name: \"container\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Documentation Template for CLI Applications in Go\nDESCRIPTION: This variable defines the template for generating Markdown documentation for CLI applications. It includes sections for name, synopsis, description, usage, global options, and commands.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar MarkdownDocTemplate = `{{if gt .SectionNum 0}}% {{ .App.Name }} {{ .SectionNum }}\n\n{{end}}# NAME\n\n{{ .App.Name }}{{ if .App.Usage }} - {{ .App.Usage }}{{ end }}\n\n# SYNOPSIS\n\n{{ .App.Name }}\n{{ if .SynopsisArgs }}\n` + \"`\" + `\n{{ range $v := .SynopsisArgs }}{{ $v }}{{ end }}` + \"`\" + `\n{{ end }}{{ if .App.Description }}\n# DESCRIPTION\n\n{{ .App.Description }}\n{{ end }}\n**Usage**:\n\n` + \"`\" + `{{ if .App.UsageText }}\n{{ .App.UsageText }}\n{{ else }}\n{{ .App.Name }} [GLOBAL OPTIONS] command [COMMAND OPTIONS] [ARGUMENTS...]\n{{ end }}` + \"`\" + `\n{{ if .GlobalArgs }}\n# GLOBAL OPTIONS\n{{ range $v := .GlobalArgs }}\n{{ $v }}{{ end }}\n{{ end }}{{ if .Commands }}\n`\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Zstandard Decoder Performance in Go\nDESCRIPTION: This code snippet shows benchmark results for the Zstandard decoder, including streaming decodes and smaller inputs. It demonstrates the decoder's performance on various file types and sizes, measuring speed in MB/s and memory allocations.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nBenchmarkDecoderSilesia-32    \t                   5\t 206878840 ns/op\t1024.50 MB/s\t   49808 B/op\t      43 allocs/op\nBenchmarkDecoderEnwik9-32                          1\t1271809000 ns/op\t 786.28 MB/s\t   72048 B/op\t      52 allocs/op\n\nConcurrent blocks, performance:\n\nBenchmarkDecoder_DecodeAllParallel/kppkn.gtb.zst-32         \t   67356\t     17857 ns/op\t10321.96 MB/s\t        22.48 pct\t     102 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/geo.protodata.zst-32     \t  266656\t      4421 ns/op\t26823.21 MB/s\t        11.89 pct\t      19 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/plrabn12.txt.zst-32      \t   20992\t     56842 ns/op\t8477.17 MB/s\t        39.90 pct\t     754 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/lcet10.txt.zst-32        \t   27456\t     43932 ns/op\t9714.01 MB/s\t        33.27 pct\t     524 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/asyoulik.txt.zst-32      \t   78432\t     15047 ns/op\t8319.15 MB/s\t        40.34 pct\t      66 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/alice29.txt.zst-32       \t   65800\t     18436 ns/op\t8249.63 MB/s\t        37.75 pct\t      88 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/html_x_4.zst-32          \t  102993\t     11523 ns/op\t35546.09 MB/s\t         3.637 pct\t     143 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/paper-100k.pdf.zst-32    \t 1000000\t      1070 ns/op\t95720.98 MB/s\t        80.53 pct\t       3 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/fireworks.jpeg.zst-32    \t  749802\t      1752 ns/op\t70272.35 MB/s\t       100.0 pct\t       5 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/urls.10K.zst-32          \t   22640\t     52934 ns/op\t13263.37 MB/s\t        26.25 pct\t    1014 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/html.zst-32              \t  226412\t      5232 ns/op\t19572.27 MB/s\t        14.49 pct\t      20 B/op\t       0 allocs/op\nBenchmarkDecoder_DecodeAllParallel/comp-data.bin.zst-32     \t  923041\t      1276 ns/op\t3194.71 MB/s\t        31.26 pct\t       0 B/op\t       0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Building Runc\nDESCRIPTION: Commands to build and install runc within the Docker container.\nSOURCE: https://github.com/containerd/containerd/blob/main/BUILDING.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncd /src/runc\nmake && make install\n```\n\n----------------------------------------\n\nTITLE: Rendering Package Documentation Badge in Markdown\nDESCRIPTION: Markdown code for displaying the Go package documentation badge that links to pkg.go.dev documentation for the OpenTelemetry SDK.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/sdk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk)\n```\n\n----------------------------------------\n\nTITLE: Content Service Operation Messages in Protocol Buffers\nDESCRIPTION: Defines message types for content blob operations including DeleteContentRequest, ReadContentRequest/Response, and Status. These structures enable content addressable storage operations in the containerd Content service.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_14\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"DeleteContentRequest\"\n  field {\n    name: \"digest\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65003: \"github.com/opencontainers/go-digest.Digest\"\n      65001: 0\n    }\n    json_name: \"digest\"\n  }\n}\nmessage_type {\n  name: \"ReadContentRequest\"\n  field {\n    name: \"digest\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65003: \"github.com/opencontainers/go-digest.Digest\"\n      65001: 0\n    }\n    json_name: \"digest\"\n  }\n  field {\n    name: \"offset\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"offset\"\n  }\n  field {\n    name: \"size\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"size\"\n  }\n}\nmessage_type {\n  name: \"ReadContentResponse\"\n  field {\n    name: \"offset\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"offset\"\n  }\n  field {\n    name: \"data\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_BYTES\n    json_name: \"data\"\n  }\n}\nmessage_type {\n  name: \"Status\"\n  field {\n    name: \"started_at\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n      65010: 1\n      65001: 0\n    }\n    json_name: \"startedAt\"\n  }\n  field {\n    name: \"updated_at\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n```\n\n----------------------------------------\n\nTITLE: Introspection Service Proto Definition\nDESCRIPTION: Protocol Buffer definition for the Introspection service used to query information about plugins in containerd. Includes message types for plugins, requests, responses, and service method definitions.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_16\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"github.com/containerd/containerd/api/services/introspection/v1/introspection.proto\"\n  package: \"containerd.services.introspection.v1\"\n  dependency: \"github.com/containerd/containerd/api/types/platform.proto\"\n  dependency: \"google/rpc/status.proto\"\n  dependency: \"gogoproto/gogo.proto\"\n  message_type {\n    name: \"Plugin\"\n    field {\n      name: \"type\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"type\"\n    }\n    field {\n      name: \"id\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"requires\"\n      number: 3\n      label: LABEL_REPEATED\n      type: TYPE_STRING\n      json_name: \"requires\"\n    }\n    field {\n      name: \"platforms\"\n      number: 4\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.types.Platform\"\n      options {\n        65001: 0\n      }\n      json_name: \"platforms\"\n    }\n    field {\n      name: \"exports\"\n      number: 5\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.introspection.v1.Plugin.ExportsEntry\"\n      json_name: \"exports\"\n    }\n    field {\n      name: \"capabilities\"\n      number: 6\n      label: LABEL_REPEATED\n      type: TYPE_STRING\n      json_name: \"capabilities\"\n    }\n    field {\n      name: \"init_err\"\n      number: 7\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.rpc.Status\"\n      json_name: \"initErr\"\n    }\n    nested_type {\n      name: \"ExportsEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n  }\n  message_type {\n    name: \"PluginsRequest\"\n    field {\n      name: \"filters\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_STRING\n      json_name: \"filters\"\n    }\n  }\n  message_type {\n    name: \"PluginsResponse\"\n    field {\n      name: \"plugins\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.introspection.v1.Plugin\"\n      options {\n        65001: 0\n      }\n      json_name: \"plugins\"\n    }\n  }\n  service {\n    name: \"Introspection\"\n    method {\n      name: \"Plugins\"\n      input_type: \".containerd.services.introspection.v1.PluginsRequest\"\n      output_type: \".containerd.services.introspection.v1.PluginsResponse\"\n    }\n  }\n  options {\n    go_package: \"github.com/containerd/containerd/api/services/introspection/v1;introspection\"\n  }\n  weak_dependency: 2\n  syntax: \"proto3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Blackfriday Output with Bluemonday in Go\nDESCRIPTION: This code example shows how to use Blackfriday in combination with Bluemonday to process Markdown and sanitize the resulting HTML for safe user-generated content handling.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/microcosm-cc/bluemonday\"\n    \"github.com/russross/blackfriday/v2\"\n)\n\n// ...\nunsafe := blackfriday.Run(input)\nhtml := bluemonday.UGCPolicy().SanitizeBytes(unsafe)\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer for ImageReference in ContainerD\nDESCRIPTION: Protobuf message definition for ImageReference which configures how image references are handled, including name, prefix behavior, overwrite permissions, and digest handling options.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_77\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"ImageReference\"\n  field {\n    name: \"name\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"name\"\n  }\n  field {\n    name: \"is_prefix\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"isPrefix\"\n  }\n  field {\n    name: \"allow_overwrite\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"allowOverwrite\"\n  }\n  field {\n    name: \"add_digest\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"addDigest\"\n  }\n  field {\n    name: \"skip_named_digest\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"skipNamedDigest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Override Path in TOML\nDESCRIPTION: This snippet configures whether the host's API root endpoint is defined in the URL path for a registry in a TOML configuration. The setting is a boolean value defaulting to 'false', used for non-compliant OCI registries.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/hosts.md#2025-04-21_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\noverride_path = true\n```\n\n----------------------------------------\n\nTITLE: Cloning Runc Repository\nDESCRIPTION: Command to clone the runc repository with a specific release tag.\nSOURCE: https://github.com/containerd/containerd/blob/main/BUILDING.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngit clone --branch <RELEASE_TAG> https://github.com/opencontainers/runc\n```\n\n----------------------------------------\n\nTITLE: Displaying containerd-shim CLI Usage in Go\nDESCRIPTION: This code snippet shows the CLI usage output for the containerd-shim tool, including available commands and global options. It demonstrates how the shim is used for container lifecycle management and reconnection.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-01-27.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nNAME:\n   containerd-shim - \n                    __        _                     __           __    _         \n  _________  ____  / /_____ _(_)___  ___  _________/ /     _____/ /_  (_)___ ___ \n / ___/ __ \\/ __ \\/ __/ __ `/ / __ \\/ _ \\/ ___/ __  /_____/ ___/ __ \\/ / __ `__ \\\n/ /__/ /_/ / / / / /_/ /_/ / / / / /  __/ /  / /_/ /_____(__  ) / / / / / / / / /\n\\___/\\____/_/ /_/\\__/\\__,_/_/_/ /_/\\___/_/   \\__,_/     /____/_/ /_/_/_/ /_/ /_/ \n                                                                                 \nshim for container lifecycle and reconnection\n\n\nUSAGE:\n   containerd-shim [global options] command [command options] [arguments...]\n\nVERSION:\n   1.0.0\n\nCOMMANDS:\n     help, h  Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --debug        enable debug output in logs\n   --help, -h     show help\n   --version, -v  print the version\n```\n\n----------------------------------------\n\nTITLE: Initializing PKCS#11 with SoftHSM in Go\nDESCRIPTION: This snippet demonstrates how to initialize a PKCS#11 module using SoftHSM in Go. It creates a new PKCS#11 instance and specifies the path to the SoftHSM library.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/miekg/pkcs11/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\np := pkcs11.New(\"/usr/lib/softhsm/libsofthsm2.so\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving EC2 Instance Public IP Address\nDESCRIPTION: This command retrieves the public IP address of the newly created EC2 instance using AWS CLI. It uses the CloudFormation stack name to identify the instance.\nSOURCE: https://github.com/containerd/containerd/blob/main/contrib/aws/snapshotter_bench_readme.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 describe-instances \\\n    --instance-ids $(aws cloudformation describe-stack-resources --stack-name benchmark-instance --query 'StackResources[*].PhysicalResourceId' --output text) \\\n    --query 'Reservations[*].Instances[*].PublicIpAddress' \\\n    --output text\n```\n\n----------------------------------------\n\nTITLE: Committing a Snapshot in Go\nDESCRIPTION: Demonstrates how to commit an active snapshot to a named, committed snapshot using the Snapshotter API in Go.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/design/snapshots.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif err := snapshotter.Commit(digest.String(), key); err != nil { ... }\n```\n\n----------------------------------------\n\nTITLE: ContainerD Descriptor Type Definition\nDESCRIPTION: Protocol Buffer definition for ContainerD's Descriptor type which includes media type, digest, size and annotations fields.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_40\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Descriptor {\n  string media_type = 1;\n  string digest = 2;\n  int64 size = 3;\n  map<string, string> annotations = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: DB.Begin Method Description in Bolt Database\nDESCRIPTION: The DB.Begin() method starts a transaction that can be read-only or read-write based on the writable argument. It requires obtaining a meta lock and only allows one read-write transaction at a time.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n- `DB.Begin()` - Starts a read-only or read-write transaction depending on the\n  value of the `writable` argument. This requires briefly obtaining the \"meta\"\n  lock to keep track of open transactions. Only one read-write transaction can\n  exist at a time so the \"rwlock\" is acquired during the life of a read-write\n  transaction.\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Span Limits\nDESCRIPTION: Environment variables supported for configuring span limits including attribute count, event count, link count and their respective limits.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\nOTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT\nOTEL_SPAN_ATTRIBUTE_COUNT_LIMIT\nOTEL_SPAN_EVENT_COUNT_LIMIT\nOTEL_EVENT_ATTRIBUTE_COUNT_LIMIT\nOTEL_SPAN_LINK_COUNT_LIMIT\nOTEL_LINK_ATTRIBUTE_COUNT_LIMIT\n```\n\n----------------------------------------\n\nTITLE: Defining UintSlice Structure in Go\nDESCRIPTION: Implementation of UintSlice type that wraps []uint to satisfy flag.Value interface. Includes methods for serialization and value manipulation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_37\n\nLANGUAGE: go\nCODE:\n```\ntype UintSlice struct {\n    // Has unexported fields.\n}\n\nfunc NewUintSlice(defaults ...uint) *UintSlice\n\nfunc (i *UintSlice) Get() interface{}\n\nfunc (i *UintSlice) Serialize() string\n\nfunc (i *UintSlice) Set(value string) error\n\nfunc (i *UintSlice) String() string\n```\n\n----------------------------------------\n\nTITLE: Closing FIFO\nDESCRIPTION: The Close method terminates the FIFO connection, making any further reads or writes result in an error. It can also be called before the FIFO has been opened.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/fifo/readme.md#2025-04-21_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc (f *fifo) Close() error\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for xxHash Go Implementation\nDESCRIPTION: This snippet demonstrates the commands used to run benchmarks comparing the pure Go and assembly implementations of Sum64 on Ubuntu 20.04 with an Intel Xeon Platinum 8252C CPU.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\n----------------------------------------\n\nTITLE: Pushing Tags to Upstream\nDESCRIPTION: Git commands to push new release tags to the upstream repository for main module and submodules.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit push upstream <new tag>\ngit push upstream <submodules-path/new tag>\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Namespaces Service in Protobuf for Containerd\nDESCRIPTION: Defines the Namespaces service with message types for Namespace, GetNamespaceRequest, ListNamespacesRequest, CreateNamespaceRequest, and UpdateNamespaceRequest. It includes RPC methods for managing namespaces.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_19\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Namespace {\n  string name = 1;\n  map<string, string> labels = 2;\n}\n\nservice Namespaces {\n  rpc Get(GetNamespaceRequest) returns (GetNamespaceResponse);\n  rpc List(ListNamespacesRequest) returns (ListNamespacesResponse);\n  rpc Create(CreateNamespaceRequest) returns (CreateNamespaceResponse);\n  rpc Update(UpdateNamespaceRequest) returns (UpdateNamespaceResponse);\n  rpc Delete(DeleteNamespaceRequest) returns (google.protobuf.Empty);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshot Message Types in Containerd API\nDESCRIPTION: Protocol Buffer definitions for Containerd's snapshot operations, including messages for preparing, viewing, committing, removing and updating snapshots. These message types define the request and response structures for snapshot operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_20\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"PrepareSnapshotRequest\"\n  field {\n    name: \"snapshotter\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"snapshotter\"\n  }\n  field {\n    name: \"key\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"key\"\n  }\n  field {\n    name: \"parent\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"parent\"\n  }\n  field {\n    name: \"labels\"\n    number: 4\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.snapshots.v1.PrepareSnapshotRequest.LabelsEntry\"\n    json_name: \"labels\"\n  }\n  nested_type {\n    name: \"LabelsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fuzzing Simple Struct in Go\nDESCRIPTION: Demonstrates how to fill a basic struct with fuzzed values using GenerateStruct\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Person struct {\n    Name string\n    Age  int\n}\np := Person{}\n// Fill p with values based on the data provided by the fuzzing engine:\nerr := f.GenerateStruct(&p)\n```\n\n----------------------------------------\n\nTITLE: Defining AuthRequest Message in Protocol Buffers\nDESCRIPTION: Specifies the AuthRequest message type with fields for host, reference, and WWW-Authenticate headers.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_82\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage AuthRequest {\n  string host = 1;\n  string reference = 2;\n  repeated string wwwauthenticate = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Generate for Auto-generated Code\nDESCRIPTION: Demonstrates how to run 'go generate' to update auto-generated code in both the root and test Go modules of the project.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-21_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n> go generate ./...\n> cd test && go generate ./...\n```\n\n----------------------------------------\n\nTITLE: Checking Test Coverage for go-toml in Go\nDESCRIPTION: Commands to generate and view test coverage for go-toml using Go's coverage tools.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test -covermode=atomic -coverprofile=coverage.out\ngo tool cover -func=coverage.out\n```\n\n----------------------------------------\n\nTITLE: Removing Images using ctr-enc\nDESCRIPTION: This command removes the specified images from the local containerd storage.  Cleans up local images. Requires `ctr-enc` with configured containerd socket.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/imgcrypt/v2/README.md#2025-04-21_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\n# $CTR images rm localhost:5000/bash.enc:latest bash.enc:latest\n```\n\n----------------------------------------\n\nTITLE: Getting Layer Information using ctr-enc\nDESCRIPTION: This command retrieves information about the layers of a container image using the `ctr-enc` tool. The `--platform` flag specifies the target platform. Requires `ctr-enc` with proper containerd socket access.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/imgcrypt/v2/README.md#2025-04-21_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n# $CTR images layerinfo --platform linux/amd64 docker.io/library/bash:latest\n   #                                                                    DIGEST      PLATFORM      SIZE   ENCRYPTION   RECIPIENTS\n   0   sha256:9d48c3bd43c520dc2784e868a780e976b207cbf493eaff8c6596eb871cbd9609   linux/amd64   2789669                          \n   1   sha256:7dd01fd971d4ec7058c5636a505327b24e5fc8bd7f62816a9d518472bd9b15c0   linux/amd64   3174665                          \n   2   sha256:691cfbca522787898c8b37f063dd20e5524e7d103e1a3b298bd2e2b8da54faf5   linux/amd64       340                          \n```\n\n----------------------------------------\n\nTITLE: Backing Up Bolt Database Using cURL\nDESCRIPTION: This shell command demonstrates how to use cURL to backup a Bolt database by downloading it from an HTTP endpoint.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n$ curl http://localhost/backup > my.db\n```\n\n----------------------------------------\n\nTITLE: Mounting Snapshots in Go\nDESCRIPTION: Shows how to mount the prepared snapshot to a temporary location using the mount.All function in Go.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/design/snapshots.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif err := mount.All(mounts, tmpDir); err != nil { ... }\n```\n\n----------------------------------------\n\nTITLE: Content Event Messages\nDESCRIPTION: Defines message structures for content-related events in ContainerD, focusing on content deletion operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ContentDelete {\n  string digest = 1 [(gogoproto.customtype) = \"github.com/opencontainers/go-digest.Digest\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Open Method Description in Bolt Database\nDESCRIPTION: The Open() method initializes the database reference. It creates the database if it doesn't exist, obtains an exclusive lock on the file, reads meta pages, and memory-maps the file.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n- `Open()` - Initializes the reference to the database. It's responsible for\n  creating the database if it doesn't exist, obtaining an exclusive lock on the\n  file, reading the meta pages, & memory-mapping the file.\n```\n\n----------------------------------------\n\nTITLE: Checking CRIU Version in Go\nDESCRIPTION: Example code demonstrating how to get the installed CRIU version using the go-criu bindings. Shows basic initialization and version checking functionality.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/checkpoint-restore/go-criu/v7/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"log\"\n\n\t\"github.com/checkpoint-restore/go-criu/v7\"\n)\n\nfunc main() {\n\tc := criu.MakeCriu()\n\tversion, err := c.GetCriuVersion()\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tlog.Println(version)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RegistryResolver Message in Protocol Buffers\nDESCRIPTION: Defines the RegistryResolver message type with fields for authentication, headers, host directory, and default scheme. Includes a nested HeadersEntry type for key-value pairs.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_81\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage RegistryResolver {\n  string auth_stream = 1 [json_name = \"authStream\"];\n  repeated HeadersEntry headers = 2;\n  string host_dir = 3 [json_name = \"hostDir\"];\n  string default_scheme = 4 [json_name = \"defaultScheme\"];\n\n  message HeadersEntry {\n    string key = 1;\n    string value = 2;\n    option (map_entry) = true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Namespace Service Definition in Protocol Buffers\nDESCRIPTION: Defines the Namespace service with CRUD operations for container namespaces. Includes methods for Get, List, Create, Update and Delete operations with their corresponding request/response message types.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_20\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n    name: \"Namespaces\"\n    method {\n      name: \"Get\"\n      input_type: \".containerd.services.namespaces.v1.GetNamespaceRequest\"\n      output_type: \".containerd.services.namespaces.v1.GetNamespaceResponse\"\n    }\n    method {\n      name: \"List\"\n      input_type: \".containerd.services.namespaces.v1.ListNamespacesRequest\"\n      output_type: \".containerd.services.namespaces.v1.ListNamespacesResponse\"\n    }\n    method {\n      name: \"Create\"\n      input_type: \".containerd.services.namespaces.v1.CreateNamespaceRequest\"\n      output_type: \".containerd.services.namespaces.v1.CreateNamespaceResponse\"\n    }\n    method {\n      name: \"Update\"\n      input_type: \".containerd.services.namespaces.v1.UpdateNamespaceRequest\"\n      output_type: \".containerd.services.namespaces.v1.UpdateNamespaceResponse\"\n    }\n    method {\n      name: \"Delete\"\n      input_type: \".containerd.services.namespaces.v1.DeleteNamespaceRequest\"\n      output_type: \".google.protobuf.Empty\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: XXH64 Hashing: Digest WriteString Method in Go\nDESCRIPTION: The `WriteString` method of the `Digest` type writes a string to the hash. It is similar to `Write` but accepts a string as input. It updates the internal hash state and returns the number of bytes written and a potential error.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (*Digest) WriteString(string) (int, error)\n```\n\n----------------------------------------\n\nTITLE: VSCode Configuration for golangci-lint Integration\nDESCRIPTION: JSON configuration for Visual Studio Code that enables golangci-lint as the linting tool and runs it automatically when saving a Go package. This helps enforce the code quality standards required by the project.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/Microsoft/go-winio/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"go.lintTool\": \"golangci-lint\",\n    \"go.lintOnSave\": \"package\",\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Message Types for Containerd Sandbox API\nDESCRIPTION: This snippet defines the Protocol Buffer message types for the Containerd sandbox API including requests and responses for sandbox operations. The messages include fields for sandbox identification, configuration, and status information.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_10\n\nLANGUAGE: protobuf\nCODE:\n```\n  dependency: \"google/protobuf/timestamp.proto\"\n  dependency: \"github.com/containerd/containerd/api/types/mount.proto\"\n  dependency: \"github.com/containerd/containerd/api/types/platform.proto\"\n  dependency: \"github.com/containerd/containerd/api/types/metrics.proto\"\n  message_type {\n    name: \"CreateSandboxRequest\"\n    field {\n      name: \"sandbox_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"sandboxId\"\n    }\n    field {\n      name: \"bundle_path\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"bundlePath\"\n    }\n    field {\n      name: \"rootfs\"\n      number: 3\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.types.Mount\"\n      json_name: \"rootfs\"\n    }\n    field {\n      name: \"options\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Any\"\n      json_name: \"options\"\n    }\n    field {\n      name: \"netns_path\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"netnsPath\"\n    }\n    field {\n      name: \"annotations\"\n      number: 6\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.runtime.sandbox.v1.CreateSandboxRequest.AnnotationsEntry\"\n      json_name: \"annotations\"\n    }\n    nested_type {\n      name: \"AnnotationsEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n  }\n  message_type {\n    name: \"CreateSandboxResponse\"\n  }\n  message_type {\n    name: \"StartSandboxRequest\"\n    field {\n      name: \"sandbox_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"sandboxId\"\n    }\n  }\n  message_type {\n    name: \"StartSandboxResponse\"\n    field {\n      name: \"pid\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"pid\"\n    }\n    field {\n      name: \"created_at\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Timestamp\"\n      json_name: \"createdAt\"\n    }\n  }\n  message_type {\n    name: \"PlatformRequest\"\n    field {\n      name: \"sandbox_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"sandboxId\"\n    }\n  }\n  message_type {\n    name: \"PlatformResponse\"\n    field {\n      name: \"platform\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.types.Platform\"\n      json_name: \"platform\"\n    }\n  }\n  message_type {\n    name: \"StopSandboxRequest\"\n    field {\n      name: \"sandbox_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"sandboxId\"\n    }\n    field {\n      name: \"timeout_secs\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"timeoutSecs\"\n    }\n  }\n  message_type {\n    name: \"StopSandboxResponse\"\n  }\n  message_type {\n    name: \"UpdateSandboxRequest\"\n    field {\n      name: \"sandbox_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"sandboxId\"\n    }\n    field {\n      name: \"resources\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Any\"\n      json_name: \"resources\"\n    }\n    field {\n      name: \"annotations\"\n      number: 3\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.runtime.sandbox.v1.UpdateSandboxRequest.AnnotationsEntry\"\n      json_name: \"annotations\"\n    }\n    nested_type {\n      name: \"AnnotationsEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n  }\n  message_type {\n    name: \"WaitSandboxRequest\"\n    field {\n      name: \"sandbox_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"sandboxId\"\n    }\n  }\n  message_type {\n    name: \"WaitSandboxResponse\"\n    field {\n      name: \"exit_status\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"exitStatus\"\n    }\n    field {\n      name: \"exited_at\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Timestamp\"\n      json_name: \"exitedAt\"\n    }\n  }\n  message_type {\n    name: \"UpdateSandboxResponse\"\n  }\n  message_type {\n    name: \"SandboxStatusRequest\"\n    field {\n      name: \"sandbox_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"sandboxId\"\n    }\n    field {\n      name: \"verbose\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"verbose\"\n    }\n  }\n  message_type {\n    name: \"SandboxStatusResponse\"\n    field {\n      name: \"sandbox_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"sandboxId\"\n    }\n    field {\n      name: \"pid\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"pid\"\n    }\n    field {\n      name: \"state\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"state\"\n    }\n    field {\n      name: \"info\"\n      number: 4\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.runtime.sandbox.v1.SandboxStatusResponse.InfoEntry\"\n      json_name: \"info\"\n    }\n    field {\n      name: \"created_at\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Timestamp\"\n      json_name: \"createdAt\"\n    }\n    field {\n      name: \"exited_at\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Timestamp\"\n      json_name: \"exitedAt\"\n    }\n    field {\n      name: \"extra\"\n      number: 7\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Any\"\n      json_name: \"extra\"\n    }\n    nested_type {\n      name: \"InfoEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n  }\n  message_type {\n    name: \"PingRequest\"\n    field {\n      name: \"sandbox_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"sandboxId\"\n    }\n  }\n  message_type {\n    name: \"PingResponse\"\n  }\n  message_type {\n    name: \"ShutdownSandboxRequest\"\n    field {\n      name: \"sandbox_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"sandboxId\"\n    }\n  }\n  message_type {\n    name: \"ShutdownSandboxResponse\"\n  }\n  message_type {\n    name: \"SandboxMetricsRequest\"\n    field {\n      name: \"sandbox_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"sandboxId\"\n    }\n  }\n  message_type {\n    name: \"SandboxMetricsResponse\"\n    field {\n      name: \"metrics\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.types.Metric\"\n      json_name: \"metrics\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Importing gRPC in Go\nDESCRIPTION: The basic import statement needed to add gRPC functionality to a Go project. After adding this import, Go's build tools will automatically fetch the necessary dependencies.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"google.golang.org/grpc\"\n```\n\n----------------------------------------\n\nTITLE: Unpacking a Layer in Go\nDESCRIPTION: Illustrates the process of opening a layer file and unpacking its contents to a target location while calculating the DiffID.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/design/snapshots.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nlayer, err := os.Open(layerPath)\nif err != nil { ... }\ndigest, err := unpackLayer(tmpLocation, layer) // unpack into layer location\nif err != nil { ... }\n```\n\n----------------------------------------\n\nTITLE: Define Events Service in Protobuf\nDESCRIPTION: This protobuf snippet defines the `Events` service, including methods for `Publish`, `Forward`, and `Subscribe` operations. It outlines input and output message types for interacting with the event system. The go_package option determines the location of the generated Go code.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_12\n\nLANGUAGE: protobuf\nCODE:\n```\n  service {\n    name: \"Events\"\n    method {\n      name: \"Publish\"\n      input_type: \".containerd.services.events.v1.PublishRequest\"\n      output_type: \".google.protobuf.Empty\"\n    }\n    method {\n      name: \"Forward\"\n      input_type: \".containerd.services.events.v1.ForwardRequest\"\n      output_type: \".google.protobuf.Empty\"\n    }\n    method {\n      name: \"Subscribe\"\n      input_type: \".containerd.services.events.v1.SubscribeRequest\"\n      output_type: \".containerd.services.events.v1.Envelope\"\n      server_streaming: true\n    }\n  }\n  options {\n    go_package: \"github.com/containerd/containerd/api/services/events/v1;events\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Using TypeByName to retrieve types by name in Go\nDESCRIPTION: Demonstrates how to use reflect2.TypeByName to retrieve a type by its name, similar to Java's Class.forName. Note that unused types may be eliminated by the compiler and thus unavailable at runtime.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/modern-go/reflect2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// given package is github.com/your/awesome-package\ntype MyStruct struct {\n\t// ...\n}\n\n// will return the type\nreflect2.TypeByName(\"awesome-package.MyStruct\")\n// however, if the type has not been used\n// it will be eliminated by compiler, so we can not get it in runtime\n```\n\n----------------------------------------\n\nTITLE: Customizing Randomization with Gofuzz Funcs\nDESCRIPTION: This snippet demonstrates how to completely customize the randomization process using custom functions within gofuzz.  It defines a custom type `MyEnum` and a struct `MyInfo`, and then provides a function to `Funcs` to define the randomization logic for `MyInfo` objects. The logic determines which fields are populated based on a random choice.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/google/gofuzz/README.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n```go\ntype MyEnum string\nconst (\n        A MyEnum = \"A\"\n        B MyEnum = \"B\"\n)\ntype MyInfo struct {\n        Type MyEnum\n        AInfo *string\n        BInfo *string\n}\n\nf := fuzz.New().NilChance(0).Funcs(\n        func(e *MyInfo, c fuzz.Continue) {\n                switch c.Intn(2) {\n                case 0:\n                        e.Type = A\n                        c.Fuzz(&e.AInfo)\n                case 1:\n                        e.Type = B\n                        c.Fuzz(&e.BInfo)\n                }\n        },\n)\n\nvar myObject MyInfo\nf.Fuzz(&myObject) // Type will correspond to whether A or B info is set.\n```\n```\n\n----------------------------------------\n\nTITLE: Defining CLI App Structure in Go\nDESCRIPTION: Defines the App struct, which is the main structure for a CLI application. It includes fields for app metadata, commands, flags, and various callback functions for handling different aspects of the CLI lifecycle.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\ntype App struct {\n\tName string\n\tHelpName string\n\tUsage string\n\tUsageText string\n\tArgs bool\n\tArgsUsage string\n\tVersion string\n\tDescription string\n\tDefaultCommand string\n\tCommands []*Command\n\tFlags []Flag\n\tEnableBashCompletion bool\n\tHideHelp bool\n\tHideHelpCommand bool\n\tHideVersion bool\n\tBashComplete BashCompleteFunc\n\tBefore BeforeFunc\n\tAfter AfterFunc\n\tAction ActionFunc\n\tCommandNotFound CommandNotFoundFunc\n\tOnUsageError OnUsageErrorFunc\n\tInvalidFlagAccessHandler InvalidFlagAccessFunc\n\tCompiled time.Time\n\tAuthors []*Author\n\tCopyright string\n\tReader io.Reader\n\tWriter io.Writer\n\tErrWriter io.Writer\n\tExitErrHandler ExitErrHandlerFunc\n\tMetadata map[string]interface{}\n\tExtraInfo func() map[string]string\n\tCustomAppHelpTemplate string\n\tSliceFlagSeparator string\n\tDisableSliceFlagSeparator bool\n\tUseShortOptionHandling bool\n\tSuggest bool\n\tAllowExtFlags bool\n\tSkipFlagParsing bool\n\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Bolt Database in Android\nDESCRIPTION: This Java code snippet shows how to initialize a Bolt database in an Android application, ensuring the database file is stored in a location that isn't automatically backed up to the cloud.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nString path;\nif (android.os.Build.VERSION.SDK_INT >=android.os.Build.VERSION_CODES.LOLLIPOP){\n    path = getNoBackupFilesDir().getAbsolutePath();\n} else{\n    path = getFilesDir().getAbsolutePath();\n}\nBoltmobiledemo.BoltDB boltDB = Boltmobiledemo.NewBoltDB(path)\n```\n\n----------------------------------------\n\nTITLE: Verbose Logging with Klog\nDESCRIPTION: Shows how to use verbose logging levels with conditional statements.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/k8s.io/klog/v2/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif glog.V(2) {\n    glog.Info(\"Starting transaction...\")\n}\n\nglog.V(2).Infoln(\"Processed\", nItems, \"elements\")\n```\n\n----------------------------------------\n\nTITLE: Testing with Logrus in Go\nDESCRIPTION: Shows how to use Logrus's built-in testing facilities to assert the presence of log messages in tests using the test hook.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-21_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nimport(\n  \"github.com/sirupsen/logrus\"\n  \"github.com/sirupsen/logrus/hooks/test\"\n  \"github.com/stretchr/testify/assert\"\n  \"testing\"\n)\n\nfunc TestSomething(t*testing.T){\n  logger, hook := test.NewNullLogger()\n  logger.Error(\"Helloerror\")\n\n  assert.Equal(t, 1, len(hook.Entries))\n  assert.Equal(t, logrus.ErrorLevel, hook.LastEntry().Level)\n  assert.Equal(t, \"Helloerror\", hook.LastEntry().Message)\n\n  hook.Reset()\n  assert.Nil(t, hook.LastEntry())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Bolt Database in iOS\nDESCRIPTION: This Objective-C code demonstrates how to initialize a Bolt database in an iOS application, including setting up the database path and adding an attribute to exclude the database file from iCloud backups.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_26\n\nLANGUAGE: objc\nCODE:\n```\n- (void)demo {\n    NSString* path = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory,\n                                                          NSUserDomainMask,\n                                                          YES) objectAtIndex:0];\n\tGoBoltmobiledemoBoltDB * demo = GoBoltmobiledemoNewBoltDB(path);\n\t[self addSkipBackupAttributeToItemAtPath:demo.path];\n\t//Some DB Logic would go here\n\t[demo close];\n}\n\n- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString\n{\n    NSURL* URL= [NSURL fileURLWithPath: filePathString];\n    assert([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]);\n\n    NSError *error = nil;\n    BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]\n                                  forKey: NSURLIsExcludedFromBackupKey error: &error];\n    if(!success){\n        NSLog(@\"Error excluding %@ from backup %@\", [URL lastPathComponent], error);\n    }\n    return success;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Runc Installation\nDESCRIPTION: Commands to verify the installation of runc and check its version.\nSOURCE: https://github.com/containerd/containerd/blob/main/BUILDING.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n$ which runc\n/usr/local/sbin/runc\n\n$ runc --version\nrunc version 1.1.13\ncommit: v1.1.13-0-g58aa9203\nspec: 1.0.2-dev\ngo: go1.23.0\nlibseccomp: 2.5.4\n```\n\n----------------------------------------\n\nTITLE: ContainerD Diff Service Definition\nDESCRIPTION: Protobuf definition for the Diff service that provides Apply and Diff methods for handling container filesystem differences\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_18\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Diff\"\n  method {\n    name: \"Apply\"\n    input_type: \".containerd.services.diff.v1.ApplyRequest\"\n    output_type: \".containerd.services.diff.v1.ApplyResponse\"\n  }\n  method {\n    name: \"Diff\"\n    input_type: \".containerd.services.diff.v1.DiffRequest\"\n    output_type: \".containerd.services.diff.v1.DiffResponse\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Container Nested Type Definitions in Protocol Buffers\nDESCRIPTION: Defines nested types used by the Container service, including LabelsEntry (for storing container metadata), Runtime (for specifying container runtime), and ExtensionsEntry. These provide structured container attributes for the containerd API.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_12\n\nLANGUAGE: protobuf\nCODE:\n```\nnested_type {\n  name: \"LabelsEntry\"\n  field {\n    name: \"key\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"key\"\n  }\n  field {\n    name: \"value\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"value\"\n  }\n  options {\n    map_entry: true\n  }\n}\nnested_type {\n  name: \"Runtime\"\n  field {\n    name: \"name\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"name\"\n  }\n  field {\n    name: \"options\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Any\"\n    json_name: \"options\"\n  }\n}\nnested_type {\n  name: \"ExtensionsEntry\"\n  field {\n    name: \"key\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"key\"\n  }\n  field {\n    name: \"value\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Any\"\n    json_name: \"value\"\n  }\n  options {\n    map_entry: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Info Protobuf Message Structure\nDESCRIPTION: Protobuf message definition for the shim info response, containing runtime name, version, options, features and annotations.\nSOURCE: https://github.com/containerd/containerd/blob/main/core/runtime/v2/README.md#2025-04-21_snippet_5\n\nLANGUAGE: proto\nCODE:\n```\nmessage RuntimeInfo {\n       string name = 1;\n       RuntimeVersion version = 2;\n       // Options from stdin\n       google.protobuf.Any options = 3;\n       // OCI-compatible runtimes should use https://github.com/opencontainers/runtime-spec/blob/main/features.md\n       google.protobuf.Any features = 4;\n       // Annotations of the shim. Irrelevant to features.Annotations.\n       map<string, string> annotations = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Tables\nDESCRIPTION: Example showing how to create simple tables in markdown syntax using the Blackfriday parser\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nName    | Age\n--------|------\nBob     | 27\nAlice   | 23\n```\n\n----------------------------------------\n\nTITLE: Building and Running Redis Container Creation Example in Bash\nDESCRIPTION: This bash snippet shows how to build and run the Go program that creates a Redis container using containerd. It demonstrates the successful execution of the program.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/getting-started.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n> go build main.go\n> sudo ./main\n\n2017/08/13 18:01:35 Successfully pulled docker.io/library/redis:alpine image\n2017/08/13 18:01:35 Successfully created container with ID redis-server and snapshot with ID redis-server-snapshot\n```\n\n----------------------------------------\n\nTITLE: Store Service Definition in Protobuf\nDESCRIPTION: Defines the Store service interface with CRUD operations for sandbox management. Includes methods for creating, updating, deleting, listing and getting sandbox information.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_55\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Store\"\n  method {\n    name: \"Create\"\n    input_type: \".containerd.services.sandbox.v1.StoreCreateRequest\"\n    output_type: \".containerd.services.sandbox.v1.StoreCreateResponse\"\n  }\n  method {\n    name: \"Update\"\n    input_type: \".containerd.services.sandbox.v1.StoreUpdateRequest\"\n    output_type: \".containerd.services.sandbox.v1.StoreUpdateResponse\"\n  }\n  method {\n    name: \"Delete\"\n    input_type: \".containerd.services.sandbox.v1.StoreDeleteRequest\"\n    output_type: \".containerd.services.sandbox.v1.StoreDeleteResponse\"\n  }\n  method {\n    name: \"List\"\n    input_type: \".containerd.services.sandbox.v1.StoreListRequest\"\n    output_type: \".containerd.services.sandbox.v1.StoreListResponse\"\n  }\n  method {\n    name: \"Get\"\n    input_type: \".containerd.services.sandbox.v1.StoreGetRequest\"\n    output_type: \".containerd.services.sandbox.v1.StoreGetResponse\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a Git Tag Command for YAML Project Release\nDESCRIPTION: Commands used by project owners to create a signed Git tag with the version number and push it to the repository. The tag is created with the -s flag to make a GPG-signed tag.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/sigs.k8s.io/yaml/RELEASE.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -s $VERSION\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push $VERSION\n```\n\n----------------------------------------\n\nTITLE: CTR Pull Command with Hosts Directory\nDESCRIPTION: Example command showing how to pull an image using ctr with a custom hosts directory configuration.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/hosts.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nctr images pull --hosts-dir \"/etc/containerd/certs.d\" myregistry.io:5000/image_name:tag\n```\n\n----------------------------------------\n\nTITLE: Defining Task Service Message Types in Protocol Buffers\nDESCRIPTION: Defines Protocol Buffer message types for task service operations including CreateTaskRequest/Response, StartRequest/Response, DeleteTaskRequest, and DeleteResponse. These types represent the parameters and return values for task management operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_29\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"CreateTaskRequest\"\n  field {\n    name: \"container_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n  field {\n    name: \"rootfs\"\n    number: 3\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Mount\"\n    json_name: \"rootfs\"\n  }\n  field {\n    name: \"stdin\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"stdin\"\n  }\n  field {\n    name: \"stdout\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"stdout\"\n  }\n  field {\n    name: \"stderr\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"stderr\"\n  }\n  field {\n    name: \"terminal\"\n    number: 7\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"terminal\"\n  }\n  field {\n    name: \"checkpoint\"\n    number: 8\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Descriptor\"\n    json_name: \"checkpoint\"\n  }\n  field {\n    name: \"options\"\n    number: 9\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Any\"\n    json_name: \"options\"\n  }\n}\n\nmessage_type {\n  name: \"CreateTaskResponse\"\n  field {\n    name: \"container_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n  field {\n    name: \"pid\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"pid\"\n  }\n}\n\nmessage_type {\n  name: \"StartRequest\"\n  field {\n    name: \"container_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n  field {\n    name: \"exec_id\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"execId\"\n  }\n}\n\nmessage_type {\n  name: \"StartResponse\"\n  field {\n    name: \"pid\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"pid\"\n  }\n}\n\nmessage_type {\n  name: \"DeleteTaskRequest\"\n  field {\n    name: \"container_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n}\n\nmessage_type {\n  name: \"DeleteResponse\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  field {\n    name: \"pid\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"pid\"\n  }\n  field {\n    name: \"exit_status\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"exitStatus\"\n  }\n  field {\n    name: \"exited_at\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n\n```\n\n----------------------------------------\n\nTITLE: Creating Aggregations in OpenCensus Stats\nDESCRIPTION: Demonstrates creating three types of aggregations for statistics: Distribution (histogram), Count, and Sum. These determine how the collected measurements will be processed.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opencensus.io/README.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ndistAgg := view.Distribution(1<<32, 2<<32, 3<<32)\ncountAgg := view.Count()\nsumAgg := view.Sum()\n```\n\n----------------------------------------\n\nTITLE: Reading from FIFO\nDESCRIPTION: The Read method reads data from a FIFO into a byte array. It returns the number of bytes read and any potential error encountered during the read operation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/fifo/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc (f *fifo) Read(b []byte) (int, error)\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Arguments Interface in Go\nDESCRIPTION: Interface definition for handling command-line arguments with methods for accessing individual args, first arg, remaining args, length checking and array operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype Args interface {\n\t// Get returns the nth argument, or else a blank string\n\tGet(n int) string\n\t// First returns the first argument, or else a blank string\n\tFirst() string\n\t// Tail returns the rest of the arguments (not the first one)\n\t// or else an empty string slice\n\tTail() []string\n\t// Len returns the length of the wrapped slice\n\tLen() int\n\t// Present checks if there are any arguments present\n\tPresent() bool\n\t// Slice returns a copy of the internal slice\n\tSlice() []string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Service Interface\nDESCRIPTION: Protocol Buffer service definition for the containerd Content service. This service provides methods for managing content blobs including Info, Update, List, Delete, Read, Status, ListStatuses, Write, and Abort operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_11\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Content\"\n  method {\n    name: \"Info\"\n    input_type: \".containerd.services.content.v1.InfoRequest\"\n    output_type: \".containerd.services.content.v1.InfoResponse\"\n  }\n  method {\n    name: \"Update\"\n    input_type: \".containerd.services.content.v1.UpdateRequest\"\n    output_type: \".containerd.services.content.v1.UpdateResponse\"\n  }\n  method {\n    name: \"List\"\n    input_type: \".containerd.services.content.v1.ListContentRequest\"\n    output_type: \".containerd.services.content.v1.ListContentResponse\"\n    server_streaming: true\n  }\n  method {\n    name: \"Delete\"\n    input_type: \".containerd.services.content.v1.DeleteContentRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"Read\"\n    input_type: \".containerd.services.content.v1.ReadContentRequest\"\n    output_type: \".containerd.services.content.v1.ReadContentResponse\"\n    server_streaming: true\n  }\n  method {\n    name: \"Status\"\n    input_type: \".containerd.services.content.v1.StatusRequest\"\n    output_type: \".containerd.services.content.v1.StatusResponse\"\n  }\n  method {\n    name: \"ListStatuses\"\n    input_type: \".containerd.services.content.v1.ListStatusesRequest\"\n    output_type: \".containerd.services.content.v1.ListStatusesResponse\"\n  }\n  method {\n    name: \"Write\"\n    input_type: \".containerd.services.content.v1.WriteContentRequest\"\n    output_type: \".containerd.services.content.v1.WriteContentResponse\"\n    client_streaming: true\n    server_streaming: true\n  }\n  method {\n    name: \"Abort\"\n    input_type: \".containerd.services.content.v1.AbortRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Processing with No Extensions in Go\nDESCRIPTION: This snippet demonstrates how to process Markdown using Blackfriday with no extensions enabled, adhering to the bare Markdown specification.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\noutput := blackfriday.Run(input, blackfriday.WithNoExtensions())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Existing Buckets in BoltDB with Go\nDESCRIPTION: Retrieves an existing bucket using Tx.Bucket() and checks if it exists. Returns an error if the bucket doesn't exist.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ndb.Update(func(tx *bolt.Tx) error {\n\tb := tx.Bucket([]byte(\"MyBucket\"))\n\tif b == nil {\n\t\treturn errors.New(\"bucket does not exist\")\n\t}\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Google Protobuf Empty Message Definition\nDESCRIPTION: This snippet defines the Google Protobuf Empty message type which is commonly used for RPC methods that don't require request/response data. It includes language-specific package options for code generation in various languages.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_13\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"google/protobuf/empty.proto\"\n  package: \"google.protobuf\"\n  message_type {\n    name: \"Empty\"\n  }\n  options {\n    java_package: \"com.google.protobuf\"\n    java_outer_classname: \"EmptyProto\"\n    java_multiple_files: true\n    go_package: \"google.golang.org/protobuf/types/known/emptypb\"\n    cc_enable_arenas: true\n    objc_class_prefix: \"GPB\"\n    csharp_namespace: \"Google.Protobuf.WellKnownTypes\"\n  }\n  syntax: \"proto3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Containerd-stress Tool\nDESCRIPTION: Example command for running the containerd-stress tool to stress test the containerd daemon.\nSOURCE: https://github.com/containerd/containerd/blob/main/BUILDING.md#2025-04-21_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncontainerd-stress -c 5 -d 120m\n```\n\n----------------------------------------\n\nTITLE: Google Protobuf Any Type Definition\nDESCRIPTION: Defines the Google Protocol Buffer Any type that can hold arbitrary protocol message types. Used for type-safe message embedding.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Any {\n  string type_url = 1;\n  bytes value = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CA Certificates in TOML\nDESCRIPTION: This snippet specifies a certificate authority file path or an array of paths for authentication with the registry namespace in a TOML configuration file. The input should be valid file paths.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/hosts.md#2025-04-21_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\nca = \"/etc/certs/mirror.pem\"\n```\n\nLANGUAGE: toml\nCODE:\n```\nca = [\"/etc/certs/test-1-ca.pem\", \"/etc/certs/special.pem\"]\n```\n\n----------------------------------------\n\nTITLE: Compressing a Byte Buffer Using EncodeAll in Go\nDESCRIPTION: This function demonstrates how to compress a byte slice using the EncodeAll method of the zstd encoder. It initializes an encoder and compresses the provided buffer into a destination buffer without creating new allocations afterward, improving efficiency.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a writer that caches compressors.\n// For this operation type we supply a nil Reader.\nvar encoder, _ = zstd.NewWriter(nil)\n\n// Compress a buffer. \n// If you have a destination buffer, the allocation in the call can also be eliminated.\nfunc Compress(src []byte) []byte {\n    return encoder.EncodeAll(src, make([]byte, 0, len(src)))\n}\n```\n\n----------------------------------------\n\nTITLE: Binary Stream Protocol Messages\nDESCRIPTION: Protocol buffer definitions for binary data transfer and window updates in streaming operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/transfer.md#2025-04-21_snippet_5\n\nLANGUAGE: proto\nCODE:\n```\nmessage Data {\n\tbytes data = 1;\n}\n\nmessage WindowUpdate {\n\tint32 update = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Define Image Message with Labels Entry in Protobuf\nDESCRIPTION: This protobuf snippet defines the `Image` message, which contains fields like `name`, `labels`, and `target`, representing a container image. The `LabelsEntry` is a nested message that defines a key-value pair for image labels.  The fields `created_at` and `updated_at` store the timestamp information for the creation and update of an image.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_14\n\nLANGUAGE: protobuf\nCODE:\n```\n    message_type {\n    name: \"Image\"\n    field {\n      name: \"name\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"name\"\n    }\n    field {\n      name: \"labels\"\n      number: 2\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.images.v1.Image.LabelsEntry\"\n      json_name: \"labels\"\n    }\n    field {\n      name: \"target\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.types.Descriptor\"\n      options {\n        65001: 0\n      }\n      json_name: \"target\"\n    }\n    field {\n      name: \"created_at\"\n      number: 7\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Timestamp\"\n      options {\n        65001: 0\n        65010: 1\n      }\n      json_name: \"createdAt\"\n    }\n    field {\n      name: \"updated_at\"\n      number: 8\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Timestamp\"\n      options {\n        65001: 0\n        65010: 1\n      }\n      json_name: \"updatedAt\"\n    }\n    nested_type {\n      name: \"LabelsEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Decompressing Data Blocks with FSE in Go\nDESCRIPTION: This snippet illustrates how to utilize the `Decompress` function from the FSE package in Go. It takes compressed data and attempts to restore it to its original form, with the possibility of encountering an error if the input data is corrupted. Dependencies include pre-compressed data using the `Compress` function from the FSE package.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/fse/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n\"Decompress\"\n```\n\n----------------------------------------\n\nTITLE: Benchmarking CBOR Encoder Performance Comparison in Go\nDESCRIPTION: A code snippet showing the benchmark comparison between v2.4.0 and v2.5.0-beta2 of the fxamacker/cbor library. The benchmark specifically compares the performance of the NewEncoder().Encode() method between versions, showing significant improvements in execution time and memory usage.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ benchstat bench-v2.4.0.log bench-f9e6291.log \ngoos: linux\ngoarch: amd64\npkg: github.com/fxamacker/cbor/v2\ncpu: 12th Gen Intel(R) Core(TM) i7-12700H\n                                                     │ bench-v2.4.0.log │  bench-f9e6291.log                  │\n                                                     │      sec/op      │   sec/op     vs base                │\nNewEncoderEncode/Go_bool_to_CBOR_bool-20                   236.70n ± 2%   58.04n ± 1%  -75.48% (p=0.000 n=10)\nNewEncoderEncode/Go_uint64_to_CBOR_positive_int-20         238.00n ± 2%   63.93n ± 1%  -73.14% (p=0.000 n=10)\nNewEncoderEncode/Go_int64_to_CBOR_negative_int-20          238.65n ± 2%   64.88n ± 1%  -72.81% (p=0.000 n=10)\nNewEncoderEncode/Go_float64_to_CBOR_float-20               242.00n ± 2%   63.00n ± 1%  -73.97% (p=0.000 n=10)\nNewEncoderEncode/Go_[]uint8_to_CBOR_bytes-20               245.60n ± 1%   68.55n ± 1%  -72.09% (p=0.000 n=10)\nNewEncoderEncode/Go_string_to_CBOR_text-20                 243.20n ± 3%   68.39n ± 1%  -71.88% (p=0.000 n=10)\nNewEncoderEncode/Go_[]int_to_CBOR_array-20                 563.0n ± 2%    378.3n ± 0%  -32.81% (p=0.000 n=10)\nNewEncoderEncode/Go_map[string]string_to_CBOR_map-20       2.043µ ± 2%    1.906µ ± 2%   -6.75% (p=0.000 n=10)\ngeomean                                                    349.7n         122.7n       -64.92%\n\n                                                     │ bench-v2.4.0.log │    bench-f9e6291.log                │\n                                                     │       B/op       │    B/op     vs base                 │\nNewEncoderEncode/Go_bool_to_CBOR_bool-20                     128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_uint64_to_CBOR_positive_int-20           128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_int64_to_CBOR_negative_int-20            128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_float64_to_CBOR_float-20                 128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_[]uint8_to_CBOR_bytes-20                 128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_string_to_CBOR_text-20                   128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_[]int_to_CBOR_array-20                   128.0 ± 0%     0.0 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_map[string]string_to_CBOR_map-20         544.0 ± 0%   416.0 ± 0%   -23.53% (p=0.000 n=10)\ngeomean                                                      153.4                    ?                       ¹ ²\n¹ summaries must be >0 to compute geomean\n² ratios must be >0 to compute geomean\n\n                                                     │ bench-v2.4.0.log │    bench-f9e6291.log                │\n                                                     │    allocs/op     │ allocs/op   vs base                 │\nNewEncoderEncode/Go_bool_to_CBOR_bool-20                     2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_uint64_to_CBOR_positive_int-20           2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_int64_to_CBOR_negative_int-20            2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_float64_to_CBOR_float-20                 2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_[]uint8_to_CBOR_bytes-20                 2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_string_to_CBOR_text-20                   2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_[]int_to_CBOR_array-20                   2.000 ± 0%   0.000 ± 0%  -100.00% (p=0.000 n=10)\nNewEncoderEncode/Go_map[string]string_to_CBOR_map-20         28.00 ± 0%   26.00 ± 0%    -7.14% (p=0.000 n=10)\ngeomean                                                      2.782                    ?                       ¹ ²\n¹ summaries must be >0 to compute geomean\n² ratios must be >0 to compute geomean\n```\n\n----------------------------------------\n\nTITLE: Defining Sandbox Controller Service Messages in Protocol Buffers\nDESCRIPTION: Protocol Buffer definitions for the Sandbox Controller service messages. These messages define request and response types for controlling sandboxes including creation and start operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_54\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"ControllerCreateRequest\"\n  field {\n    name: \"sandbox_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"sandboxId\"\n  }\n  field {\n    name: \"rootfs\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Mount\"\n    json_name: \"rootfs\"\n  }\n  field {\n    name: \"options\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Any\"\n    json_name: \"options\"\n  }\n  field {\n    name: \"netns_path\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"netnsPath\"\n  }\n  field {\n    name: \"annotations\"\n    number: 5\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.sandbox.v1.ControllerCreateRequest.AnnotationsEntry\"\n    json_name: \"annotations\"\n  }\n  field {\n    name: \"sandbox\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Sandbox\"\n    json_name: \"sandbox\"\n  }\n  field {\n    name: \"sandboxer\"\n    number: 10\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"sandboxer\"\n  }\n  nested_type {\n    name: \"AnnotationsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n}\nmessage_type {\n  name: \"ControllerCreateResponse\"\n  field {\n    name: \"sandbox_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"sandboxId\"\n  }\n}\nmessage_type {\n  name: \"ControllerStartRequest\"\n  field {\n    name: \"sandbox_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"sandboxId\"\n  }\n  field {\n    name: \"sandboxer\"\n    number: 10\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"sandboxer\"\n  }\n}\nmessage_type {\n  name: \"ControllerStartResponse\"\n```\n\n----------------------------------------\n\nTITLE: Checking Events with Has() Method\nDESCRIPTION: Example of using the new Event.Has() method to simplify event checking in fsnotify\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/fsnotify/fsnotify/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif event.Op&Write == Write && !(event.Op&Remove == Remove) {\n}\n\n// Becomes:\n\nif event.Has(Write) && !event.Has(Remove) {\n}\n```\n\n----------------------------------------\n\nTITLE: Testing NRI Logger Plugin Installation\nDESCRIPTION: Bash commands for cloning the NRI repository, building the logger plugin, and running it to test NRI functionality in Containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/NRI.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/containerd/nri\ncd nri\nmake\n./build/bin/logger -idx 00\n```\n\n----------------------------------------\n\nTITLE: Task Events Message Definitions in Proto3\nDESCRIPTION: Defines various task-related event messages including TaskCreate, TaskStart, TaskDelete and TaskIO for container lifecycle management.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage TaskCreate {\n  string container_id = 1;\n  string bundle = 2;\n  repeated containerd.types.Mount rootfs = 3;\n  TaskIO io = 4 [(fieldpath.field_info) = \"IO\"];\n  string checkpoint = 5;\n  uint32 pid = 6;\n}\n\nmessage TaskIO {\n  string stdin = 1;\n  string stdout = 2;\n  string stderr = 3;\n  bool terminal = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Container Service Message Definitions in Proto3\nDESCRIPTION: Defines the Container message type with fields for container metadata, runtime info, and specifications used by the containers service.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Container {\n  string id = 1;\n  map<string, string> labels = 2;\n  string image = 3;\n  Runtime runtime = 4;\n  google.protobuf.Any spec = 5;\n  string snapshotter = 6;\n  string snapshot_key = 7;\n  google.protobuf.Timestamp created_at = 8;\n  google.protobuf.Timestamp updated_at = 9;\n  map<string, google.protobuf.Any> extensions = 10;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logrus Log Levels in Go\nDESCRIPTION: Shows the different logging levels available in Logrus (Trace, Debug, Info, Warning, Error, Fatal, and Panic) and demonstrates their usage in code.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nlog.Trace(\"Something very low level.\")\nlog.Debug(\"Useful debugging information.\")\nlog.Info(\"Something noteworthy happened!\")\nlog.Warn(\"You should probably take a look at this.\")\nlog.Error(\"Something failed but I'm not quitting.\")\n// Calls os.Exit(1) after logging\nlog.Fatal(\"Bye.\")\n// Calls panic() after logging\nlog.Panic(\"I'm bailing.\")\n```\n\n----------------------------------------\n\nTITLE: IntFlag Structure Definition\nDESCRIPTION: Defines the IntFlag type which represents a CLI flag with an integer value. Includes fields for name, category, usage, default values, and action handlers.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_25\n\nLANGUAGE: go\nCODE:\n```\ntype IntFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       int\n\tDestination *int\n\n\tAliases []string\n\tEnvVars []string\n\n\tBase int\n\n\tAction func(*Context, int) error\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Service Write Response and Abort Request\nDESCRIPTION: Protocol Buffer message definitions for WriteContentResponse and AbortRequest. WriteContentResponse provides status updates during content writing operations, while AbortRequest allows cancellation of in-progress write operations by reference.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"WriteContentResponse\"\n  field {\n    name: \"action\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".containerd.services.content.v1.WriteAction\"\n    json_name: \"action\"\n  }\n  field {\n    name: \"started_at\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n      65010: 1\n      65001: 0\n    }\n    json_name: \"startedAt\"\n  }\n  field {\n    name: \"updated_at\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n      65010: 1\n      65001: 0\n    }\n    json_name: \"updatedAt\"\n  }\n  field {\n    name: \"offset\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"offset\"\n  }\n  field {\n    name: \"total\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"total\"\n  }\n  field {\n    name: \"digest\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65003: \"github.com/opencontainers/go-digest.Digest\"\n      65001: 0\n    }\n    json_name: \"digest\"\n  }\n}\n\nmessage_type {\n  name: \"AbortRequest\"\n  field {\n    name: \"ref\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"ref\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Linux Guest Agent in Go\nDESCRIPTION: Demonstrates how to build the Linux guest agent for Hyper-V containers using Go. It sets the GOOS environment variable to 'linux' and builds the agent from the ./cmd/gcs directory.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\> $env:GOOS=\"linux\"\nC:\\> go build .\\cmd\\gcs\\\n```\n\nLANGUAGE: Bash\nCODE:\n```\n> go build ./cmd/gcs\n```\n\n----------------------------------------\n\nTITLE: Compressing Data with Huff0\nDESCRIPTION: Demonstrates using Compress1X and Compress4X functions for block-level compression with error handling and optional scratch object reuse\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/huff0/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Example compression using Huff0\nvar scratch huff0.Scratch\nerr := huff0.Compress1X(input, output, &scratch)\n```\n\n----------------------------------------\n\nTITLE: Installing Blackfriday v2 using Go Modules\nDESCRIPTION: This snippet demonstrates how to install Blackfriday v2 using Go modules. It shows the command to add the package to the current development module.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/russross/blackfriday/v2\n```\n\n----------------------------------------\n\nTITLE: Configuring Containerd Plugins with Version 1 in TOML\nDESCRIPTION: This snippet illustrates the configuration format for version 1, which was introduced in containerd 1.0 and removed in 2.0. It lacks a version header and uses simplified plugin IDs without full qualification.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/PLUGINS.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[plugins]\n  [plugins.cgroups]\n    no_prometheus = false\n```\n\n----------------------------------------\n\nTITLE: Containerd Fieldpath Extensions\nDESCRIPTION: Defines protobuf extensions for fieldpath functionality in containerd\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\npackage containerd.types;\nextend google.protobuf.FileOptions {\n  optional bool fieldpath_all = 63300;\n}\nextend google.protobuf.MessageOptions {\n  optional bool fieldpath = 64400;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mount Type Proto Message\nDESCRIPTION: Protocol buffer definition for mount configurations including type, source, target and options. Used to specify container filesystem mounts.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Mount {\n  string type = 1;\n  string source = 2;\n  string target = 3;\n  repeated string options = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Progress Protocol Message Definition\nDESCRIPTION: Protocol buffer message definition for progress updates during transfer operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/transfer.md#2025-04-21_snippet_4\n\nLANGUAGE: proto\nCODE:\n```\nmessage Progress {\n\tstring event = 1;\n\tstring name = 2;\n\trepeated string parents = 3;\n\tint64 progress = 4;\n\tint64 total = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Package for OCI Protocol Buffer in containerd\nDESCRIPTION: Protocol Buffer option configuration specifying the Go package path for the generated code. This ensures the generated Go code will be correctly placed in the containerd project structure.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/types/runc/options/next.pb.txt#2025-04-21_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\noptions {\n  go_package: \"github.com/containerd/containerd/v2/core/runtime/v2/runc/options;options\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal Dependency Image for Windows\nDESCRIPTION: Dockerfile for creating a minimal image containing only the required binary (runhcs) for Windows environments.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/managed-opt.md#2025-04-21_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM mcr.microsoft.com/windows/nanoserver:1809\nADD runhcs.exe /bin/runhcs.exe\n```\n\n----------------------------------------\n\nTITLE: Defining Sandbox Store Service Messages in Protocol Buffers\nDESCRIPTION: Protocol Buffer definitions for the Sandbox Store service messages. These messages define the request and response types for CRUD operations on sandbox objects including Create, Update, Delete, List, and Get.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_53\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"StoreCreateRequest\"\n  field {\n    name: \"sandbox\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Sandbox\"\n    json_name: \"sandbox\"\n  }\n}\nmessage_type {\n  name: \"StoreCreateResponse\"\n  field {\n    name: \"sandbox\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Sandbox\"\n    json_name: \"sandbox\"\n  }\n}\nmessage_type {\n  name: \"StoreUpdateRequest\"\n  field {\n    name: \"sandbox\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Sandbox\"\n    json_name: \"sandbox\"\n  }\n  field {\n    name: \"fields\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"fields\"\n  }\n}\nmessage_type {\n  name: \"StoreUpdateResponse\"\n  field {\n    name: \"sandbox\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Sandbox\"\n    json_name: \"sandbox\"\n  }\n}\nmessage_type {\n  name: \"StoreDeleteRequest\"\n  field {\n    name: \"sandbox_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"sandboxId\"\n  }\n}\nmessage_type {\n  name: \"StoreDeleteResponse\"\n}\nmessage_type {\n  name: \"StoreListRequest\"\n  field {\n    name: \"filters\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"filters\"\n  }\n}\nmessage_type {\n  name: \"StoreListResponse\"\n  field {\n    name: \"list\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Sandbox\"\n    json_name: \"list\"\n  }\n}\nmessage_type {\n  name: \"StoreGetRequest\"\n  field {\n    name: \"sandbox_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"sandboxId\"\n  }\n}\nmessage_type {\n  name: \"StoreGetResponse\"\n  field {\n    name: \"sandbox\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Sandbox\"\n    json_name: \"sandbox\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Version Comparison Links in Markdown\nDESCRIPTION: This snippet defines hyperlinks for comparing different versions of the go-zfs project on GitHub. It uses Markdown syntax to create clickable links that show the changes between specific versions.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/mistifyio/go-zfs/v3/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[3.0.0]: https://github.com/mistifyio/go-zfs/compare/v2.1.1...v3.0.0\n[2.1.1]: https://github.com/mistifyio/go-zfs/compare/v2.1.0...v2.1.1\n[2.1.0]: https://github.com/mistifyio/go-zfs/compare/v2.0.0...v2.1.0\n[2.0.0]: https://github.com/mistifyio/go-zfs/compare/v1.0.0...v2.0.0\n[1.0.0]: https://github.com/mistifyio/go-zfs/compare/v0.0.0...v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Changing UID/GID for OCI Bundle\nDESCRIPTION: Command to change the UID/GID to 65536 for the rootfs of an OCI bundle when creating a container with user namespaces using ctr.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/user-namespaces/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown -R 65536:65536 rootfs/\n```\n\n----------------------------------------\n\nTITLE: Defining KillRequest Message Type in Protobuf\nDESCRIPTION: This snippet defines the `KillRequest` message using protobuf, which is used to send a signal to a task or process. The message includes the ID of the task (`id`), the ID of the executed process (`exec_id`), the signal number to send (`signal`), and a flag indicating whether to send the signal to all processes within the task (`all`).\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_26\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"KillRequest\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"exec_id\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"execId\"\n    }\n    field {\n      name: \"signal\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"signal\"\n    }\n    field {\n      name: \"all\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"all\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Containerd Content Service Protocol Buffer Messages\nDESCRIPTION: Protocol Buffer message definitions for containerd's Content service, including status tracking, content writing, listing, and reading operations. These messages facilitate the management of content blobs within containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"StatusRequest\"\n  field {\n    name: \"ref\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"ref\"\n  }\n}\n\nmessage_type {\n  name: \"StatusResponse\"\n  field {\n    name: \"status\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.content.v1.Status\"\n    json_name: \"status\"\n  }\n}\n\nmessage_type {\n  name: \"ListStatusesRequest\"\n  field {\n    name: \"filters\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"filters\"\n  }\n}\n\nmessage_type {\n  name: \"ListStatusesResponse\"\n  field {\n    name: \"statuses\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.content.v1.Status\"\n    options {\n      65001: 0\n    }\n    json_name: \"statuses\"\n  }\n}\n\nmessage_type {\n  name: \"WriteContentRequest\"\n  field {\n    name: \"action\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".containerd.services.content.v1.WriteAction\"\n    json_name: \"action\"\n  }\n  field {\n    name: \"ref\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"ref\"\n  }\n  field {\n    name: \"total\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"total\"\n  }\n  field {\n    name: \"expected\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65003: \"github.com/opencontainers/go-digest.Digest\"\n      65001: 0\n    }\n    json_name: \"expected\"\n  }\n  field {\n    name: \"offset\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"offset\"\n  }\n  field {\n    name: \"data\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_BYTES\n    json_name: \"data\"\n  }\n  field {\n    name: \"labels\"\n    number: 7\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.content.v1.WriteContentRequest.LabelsEntry\"\n    json_name: \"labels\"\n  }\n  nested_type {\n    name: \"LabelsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OCIRegistry Protocol Buffer in ContainerD\nDESCRIPTION: Partial protobuf message definition for OCIRegistry which begins to define OCI Registry interactions in containerd. This snippet only shows the beginning of the message definition with a reference field.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_80\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"github.com/containerd/containerd/api/types/transfer/registry.proto\"\n  package: \"containerd.types.transfer\"\n  dependency: \"google/protobuf/timestamp.proto\"\n  message_type {\n    name: \"OCIRegistry\"\n    field {\n      name: \"reference\"\n      number: 1\n      label: LABEL_OPTIONAL\n```\n\n----------------------------------------\n\nTITLE: IntSlice Structure Definition\nDESCRIPTION: Defines the IntSlice type that wraps []int to satisfy flag.Value interface for handling slice of integers as flag values.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_26\n\nLANGUAGE: go\nCODE:\n```\ntype IntSlice struct {\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Greeting CLI Application in Go\nDESCRIPTION: This example demonstrates how to create a more functional CLI application that prints a greeting. It sets up an App with a name, usage description, and an action function.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tapp := &cli.App{\n\t\tName: \"greet\",\n\t\tUsage: \"say a greeting\",\n\t\tAction: func(c *cli.Context) error {\n\t\t\tfmt.Println(\"Greetings\")\n\t\t\treturn nil\n\t\t},\n\t}\n\n\tapp.Run(os.Args)\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Server in TOML\nDESCRIPTION: This snippet sets a default server URL for the registry host namespace in a TOML configuration file. If no other hosts are available, this server is used. No additional dependencies are required, and the input must be a valid URL string.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/hosts.md#2025-04-21_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\nserver = \"https://docker.io\"\n```\n\n----------------------------------------\n\nTITLE: Running Golangci-lint Across Multiple GOOS and Directories\nDESCRIPTION: Shows how to run the golangci-lint tool across the entire repository for both Windows and Linux GOOS settings, and in both the root and test directories.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-21_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n> foreach ( $goos in ('windows', 'linux') ) {\n    foreach ( $repo in ('.', 'test') ) {\n        pwsh -Command \"cd $repo && go env -w GOOS=$goos && golangci-lint.exe run --verbose\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Path Reference in Markdown\nDESCRIPTION: Shows the directory path reference for contrib packages that are supplementary to containerd core functionality.\nSOURCE: https://github.com/containerd/containerd/blob/main/contrib/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# contrib\n```\n\n----------------------------------------\n\nTITLE: Configuring Systemd Service Environment for containerd Tracing\nDESCRIPTION: Example configuration for setting up OpenTelemetry tracing environment variables in a systemd service file for containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/tracing.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[Service]\nEnvironment=\"OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318\"\nEnvironment=\"OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf\"\nEnvironment=\"OTEL_SERVICE_NAME=containerd\"\nEnvironment=\"OTEL_TRACES_SAMPLER=traceidratio\"\nEnvironment=\"OTEL_TRACES_SAMPLER_ARG=1.0\"\n```\n\n----------------------------------------\n\nTITLE: Mermaid Flow Diagram for Pull Components\nDESCRIPTION: Visualization of the pull operation components and their interactions within containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/transfer.md#2025-04-21_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\nsubgraph containerd Client\n  Client(Client)\nend\nsubgraph containerd\n  subgraph Service\n    Streaming(Streaming Service)\n    Transfer(Transfer Service)\n  end\n  subgraph Transfer objects\n    RS(Registry Source)\n    ISD(Image Store Destination)\n  end\n  subgraph Backend\n    R(Resolver)\n    CS(ContentStore)\n    IS(Image Store)\n    S(Snapshotter)\n  end\nend\nReg(((Remote Registry)))\n\nClient-- Create Stream --> Streaming\nClient-- Pull via Transfer --> Transfer\nTransfer-- Get Stream --> Streaming\nTransfer-- Progress via Stream--> Client\nTransfer-->RS\nTransfer-->ISD\nTransfer-->CS\nRS-->R\nISD-->IS\nR-->Reg\nISD-->CS\nISD-->S\n```\n\n----------------------------------------\n\nTITLE: Installing with Custom Destination\nDESCRIPTION: Command to install containerd with a custom destination prefix using DESTDIR variable.\nSOURCE: https://github.com/containerd/containerd/blob/main/BUILDING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo make install DESTDIR=/tmp/install-x973234/\n```\n\n----------------------------------------\n\nTITLE: Compressing Data Blocks with FSE in Go\nDESCRIPTION: This snippet demonstrates the use of the `Compress` function in the FSE package in Go. It requires input data to be compressed and produces output data, possibly returning an error indicating compression issues. Since errors can occur during normal operation, they must be handled cautiously. Dependencies include having the FSE package properly installed.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/fse/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n\"Compress\"\n```\n\n----------------------------------------\n\nTITLE: StringFlag Wrapper Implementation in Go\nDESCRIPTION: A wrapper for the cli.StringFlag type that adds functionality for applying values from input sources. It preserves the original StringFlag behavior while extending it with input source awareness.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_45\n\nLANGUAGE: go\nCODE:\n```\ntype StringFlag struct {\n\t*cli.StringFlag\n\t// Has unexported fields.\n}\n    StringFlag is the flag type that wraps cli.StringFlag to allow for other\n    values to be specified\n\nfunc NewStringFlag(fl *cli.StringFlag) *StringFlag\n    NewStringFlag creates a new StringFlag\n\nfunc (f *StringFlag) Apply(set *flag.FlagSet) error\n    Apply saves the flagSet for later usage calls, then calls the wrapped\n    StringFlag.Apply\n\nfunc (f *StringFlag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n    ApplyInputSourceValue applies a String value to the flagSet if required\n```\n\n----------------------------------------\n\nTITLE: Creating and Ending Spans in OpenCensus Tracing\nDESCRIPTION: Shows how to create a span for a trace and end it when the operation is complete. This is used to track the time spent in a specific operation, such as a cache retrieval.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opencensus.io/README.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx, span := trace.StartSpan(ctx, \"cache.Get\")\ndefer span.End()\n\n// Do work to get from cache.\n```\n\n----------------------------------------\n\nTITLE: Defining Google FieldMask Protocol Buffer Message\nDESCRIPTION: This snippet defines the Google FieldMask protocol buffer message used for specifying partial updates to resources. It includes a repeated paths field to list the field paths that should be included in an update operation.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_35\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"google/protobuf/field_mask.proto\"\n  package: \"google.protobuf\"\n  message_type {\n    name: \"FieldMask\"\n    field {\n      name: \"paths\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_STRING\n      json_name: \"paths\"\n    }\n  }\n  options {\n    java_package: \"com.google.protobuf\"\n    java_outer_classname: \"FieldMaskProto\"\n    java_multiple_files: true\n    go_package: \"google.golang.org/protobuf/types/known/fieldmaskpb\"\n    cc_enable_arenas: true\n    objc_class_prefix: \"GPB\"\n    csharp_namespace: \"Google.Protobuf.WellKnownTypes\"\n  }\n  syntax: \"proto3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CNI for Runtime in Containerd\nDESCRIPTION: Defines CNI (Container Network Interface) configuration settings for the runtime, including the configuration directory and maximum number of CNI configurations to load.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n# conf_dir is the directory in which the admin places a CNI conf.\n# this allows a different CNI conf for the network stack when a different runtime is being used.\ncni_conf_dir = \"/etc/cni/net.d\"\n\n# cni_max_conf_num specifies the maximum number of CNI plugin config files to\n# load from the CNI config directory. By default, only 1 CNI plugin config\n# file will be loaded. If you want to load multiple CNI plugin config files\n# set max_conf_num to the number desired. Setting cni_max_config_num to 0 is\n# interpreted as no limit is desired and will result in all CNI plugin\n# config files being loaded from the CNI config directory.\ncni_max_conf_num = 1\n```\n\n----------------------------------------\n\nTITLE: Defining Image Service Messages in Protobuf\nDESCRIPTION: This snippet defines protobuf messages for image-related operations in Containerd, including requests and responses for getting, creating, updating, listing, and deleting images.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_44\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"GetImageResponse\"\n  field {\n    name: \"image\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.images.v1.Image\"\n    json_name: \"image\"\n  }\n}\n\nmessage_type {\n  name: \"CreateImageRequest\"\n  field {\n    name: \"image\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.images.v1.Image\"\n    json_name: \"image\"\n  }\n  field {\n    name: \"source_date_epoch\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    json_name: \"sourceDateEpoch\"\n  }\n}\n\n// Additional message types omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Git Commit Sign-off Example\nDESCRIPTION: Example of how to add a sign-off line to a git commit message, which is required for all contributions to certify agreement with the Developer Certificate of Origin.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/opencontainers/go-digest/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Setting runc Root Option in TOML Configuration\nDESCRIPTION: This code snippet illustrates how to set the Root option for runc in the containerd config.toml file. It compares the old deprecated method with the new recommended approach using the runc options.\nSOURCE: https://github.com/containerd/containerd/blob/main/RELEASES.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n\n# OLD\n# [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n#   runtime_root = \"/path/to/runc/root\"\n\n# NEW\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n  Root = \"/path/to/runc/root\"\n```\n\n----------------------------------------\n\nTITLE: Introspection Service Protocol Definition in Protobuf\nDESCRIPTION: Defines the Introspection service for container runtime introspection, including Plugin message structure and the Plugins RPC method. The service allows clients to query information about registered plugins in the containerd runtime.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_21\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"github.com/containerd/containerd/api/services/introspection/v1/introspection.proto\"\n  package: \"containerd.services.introspection.v1\"\n  dependency: \"github.com/containerd/containerd/api/types/platform.proto\"\n  dependency: \"google/rpc/status.proto\"\n  dependency: \"gogoproto/gogo.proto\"\n  message_type {\n    name: \"Plugin\"\n    field {\n      name: \"type\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"type\"\n    }\n    field {\n      name: \"id\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"requires\"\n      number: 3\n      label: LABEL_REPEATED\n      type: TYPE_STRING\n      json_name: \"requires\"\n    }\n    field {\n      name: \"platforms\"\n      number: 4\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.types.Platform\"\n      options {\n        65001: 0\n      }\n      json_name: \"platforms\"\n    }\n    field {\n      name: \"exports\"\n      number: 5\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.introspection.v1.Plugin.ExportsEntry\"\n      json_name: \"exports\"\n    }\n    field {\n      name: \"capabilities\"\n      number: 6\n      label: LABEL_REPEATED\n      type: TYPE_STRING\n      json_name: \"capabilities\"\n    }\n    field {\n      name: \"init_err\"\n      number: 7\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.rpc.Status\"\n      json_name: \"initErr\"\n    }\n    nested_type {\n      name: \"ExportsEntry\"\n      field {\n        name: \"key\"\n        number: 1\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"key\"\n      }\n      field {\n        name: \"value\"\n        number: 2\n        label: LABEL_OPTIONAL\n        type: TYPE_STRING\n        json_name: \"value\"\n      }\n      options {\n        map_entry: true\n      }\n    }\n  }\n  message_type {\n    name: \"PluginsRequest\"\n    field {\n      name: \"filters\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_STRING\n      json_name: \"filters\"\n    }\n  }\n  message_type {\n    name: \"PluginsResponse\"\n    field {\n      name: \"plugins\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".containerd.services.introspection.v1.Plugin\"\n      options {\n        65001: 0\n      }\n      json_name: \"plugins\"\n    }\n  }\n  service {\n    name: \"Introspection\"\n    method {\n      name: \"Plugins\"\n      input_type: \".containerd.services.introspection.v1.PluginsRequest\"\n      output_type: \".containerd.services.introspection.v1.PluginsResponse\"\n    }\n  }\n  options {\n    go_package: \"github.com/containerd/containerd/api/services/introspection/v1;introspection\"\n  }\n  weak_dependency: 2\n  syntax: \"proto3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Container Message Type in Protobuf for Containerd\nDESCRIPTION: Defines a Container message type in the containerd.services.containers.v1 package, including fields for id, labels, image, runtime, spec, snapshotter, and various timestamps. This structure represents a container entity in Containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Container\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  field {\n    name: \"labels\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.containers.v1.Container.LabelsEntry\"\n    json_name: \"labels\"\n  }\n  // ... other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Installing compress package in Go\nDESCRIPTION: This snippet demonstrates how to add the klauspost/compress package to your Go project using the `go get` command.  This command fetches the latest version of the library and adds it to your project's dependencies. Ensure Go is installed and configured correctly before running this command.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n\"go get github.com/klauspost/compress@latest\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Uint64Flag Struct in Go\nDESCRIPTION: This snippet defines the Uint64Flag struct, which represents a flag with a uint64 type. It includes various properties and methods for handling uint64 flags in command-line arguments.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_35\n\nLANGUAGE: go\nCODE:\n```\ntype Uint64Flag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       uint64\n\tDestination *uint64\n\n\tAliases []string\n\tEnvVars []string\n\n\tBase int\n\n\tAction func(*Context, uint64) error\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluemonday HTML Sanitizer\nDESCRIPTION: Code snippet showing how to configure the bluemonday HTML sanitizer to preserve classes of fenced code blocks\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\np := bluemonday.UGCPolicy()\np.AllowAttrs(\"class\").Matching(regexp.MustCompile(\"^language-[a-zA-Z0-9]+$\")).OnElements(\"code\")\nhtml := p.SanitizeBytes(unsafe)\n```\n\n----------------------------------------\n\nTITLE: Basic Container Run Command in containerd\nDESCRIPTION: Demonstrates the basic command to run an Ubuntu container using containerd's command-line tool. This command takes a name and creates a bundle without explicitly pulling images.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/design/data-flow.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nctr run ubuntu\n```\n\n----------------------------------------\n\nTITLE: Running Ansible Playbook with Custom SSH Parameters\nDESCRIPTION: Execute the Ansible playbook with additional parameters for cloud environments, specifying a username and private key file for SSH authentication to target hosts.\nSOURCE: https://github.com/containerd/containerd/blob/main/contrib/ansible/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nansible-playbook -i hosts -u <username> --private-key <example.pem> cri-containerd.yaml\n```\n\n----------------------------------------\n\nTITLE: Referencing FakeExec Implementation Path in Markdown\nDESCRIPTION: Reference to the FakeExec implementation path that can be used for mocking exec functionality in tests.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/k8s.io/utils/exec/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[FakeExec](testing/fake_exec.go)\n```\n\n----------------------------------------\n\nTITLE: Adding Events to OpenTelemetry Spans\nDESCRIPTION: Example demonstrating how to add events to OpenTelemetry spans in containerd, including event attributes.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/tracing.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc CreateContainer(ctx context.Context, r *runtime.CreateContainerRequest) error {\n    span := tracing.SpanFromContext(ctx) // get the current span from context\n    ...\n    ...\n    if c.nri.isEnabled() {\n        // Add an event to mark start of an NRI api call\n        span.AddEvent(\"start NRI postCreateContainer request\")\n\n        err = c.nri.postCreateContainer(ctx, &sandbox, &container)\n        if err != nil {\n\t\t\tlog.G(ctx).WithError(err).Errorf(\"NRI post-create notification failed\")\n\t\t}\n\n        // Add an event to mark completion of the request\n        span.AddEvent(\"finished NRI postCreateContainer request\")\n\t}\n    ...\n    // You can also add additional attributes to an event\n    span.AddEvent(\"container created\",\n\t\ttracing.Attribute(\"container.create.duration\", time.Since(start).String()),\n\t)\n\n\treturn &runtime.CreateContainerResponse{ContainerId: id}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CPU for nested Hyper-V in Libvirt (XML)\nDESCRIPTION: XML configuration to add to the Windows VM configuration in Libvirt to enable nested Hyper-V support.\nSOURCE: https://github.com/containerd/containerd/blob/main/integration/images/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<cpu mode='custom' match='exact' check='partial'>\n    <model fallback='allow'>Broadwell</model>\n    <feature policy='require' name='vmx'/>\n</cpu>\n```\n\n----------------------------------------\n\nTITLE: Checking User Namespace Mount in Container\nDESCRIPTION: Command to verify if the container is using idmap mounts for the container image. This should be run inside a pod with user namespaces enabled.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/user-namespaces/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmount | grep overlay\n```\n\n----------------------------------------\n\nTITLE: Creating TOML Source from Flag in Go\nDESCRIPTION: Function that creates a closure for generating a TOML InputSourceContext from a specified flag name.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_41\n\nLANGUAGE: go\nCODE:\n```\nfunc NewTomlSourceFromFlagFunc(flagFileName string) func(cCtx *cli.Context) (InputSourceContext, error)\n```\n\n----------------------------------------\n\nTITLE: Installing json-iterator Library\nDESCRIPTION: This command installs the json-iterator library via Go's package manager. Make sure to run this in your terminal to add the library to your project dependencies.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo get github.com/json-iterator/go\n```\n\n----------------------------------------\n\nTITLE: Installing UUID Package with go get\nDESCRIPTION: This command is used to install the github.com/google/uuid package in a Go project. It fetches the package and its dependencies, making it available for use in Go programs.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/google/uuid/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"go get github.com/google/uuid\"\n```\n\n----------------------------------------\n\nTITLE: Snapshot Kind Enumeration and Service Definition in Containerd Proto\nDESCRIPTION: Protocol Buffer definitions for snapshot kinds (states) and service methods in Containerd. Includes enum for different snapshot states (view, active, committed) and service method declarations for the Snapshots service.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_63\n\nLANGUAGE: protobuf\nCODE:\n```\n  enum_type {\n    name: \"Kind\"\n    value {\n      name: \"UNKNOWN\"\n      number: 0\n    }\n    value {\n      name: \"VIEW\"\n      number: 1\n    }\n    value {\n      name: \"ACTIVE\"\n      number: 2\n    }\n    value {\n      name: \"COMMITTED\"\n      number: 3\n    }\n  }\n  service {\n    name: \"Snapshots\"\n    method {\n      name: \"Prepare\"\n      input_type: \".containerd.services.snapshots.v1.PrepareSnapshotRequest\"\n      output_type: \".containerd.services.snapshots.v1.PrepareSnapshotResponse\"\n    }\n    method {\n      name: \"View\"\n      input_type: \".containerd.services.snapshots.v1.ViewSnapshotRequest\"\n      output_type: \".containerd.services.snapshots.v1.ViewSnapshotResponse\"\n    }\n    method {\n      name: \"Mounts\"\n      input_type: \".containerd.services.snapshots.v1.MountsRequest\"\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Text\nDESCRIPTION: The full text of the Developer Certificate of Origin (DCO) version 1.1 that contributors must agree to when making contributions to the project. This document outlines the legal responsibilities and rights of contributors.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/opencontainers/go-digest/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for containerd Tracing\nDESCRIPTION: Command-line example for setting OpenTelemetry tracing environment variables before starting the containerd daemon.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/tracing.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OTEL_EXPORTER_OTLP_ENDPOINT=\"http://localhost:4318\"\nexport OTEL_EXPORTER_OTLP_PROTOCOL=\"http/protobuf\"\nexport OTEL_SERVICE_NAME=\"containerd\"\nexport OTEL_TRACES_SAMPLER=\"traceidratio\"\nexport OTEL_TRACES_SAMPLER_ARG=1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Events Service Messages in Protobuf\nDESCRIPTION: Protobuf definitions for event-related service operations including publish, forward, and subscribe methods with envelope and request message structures\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_15\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Envelope {\n  Timestamp timestamp = 1;\n  string namespace = 2;\n  string topic = 3;\n  Any event = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Metrics Proto Definition\nDESCRIPTION: Defines the Metric message type for container metrics collection, including timestamp, ID and arbitrary data payload.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_23\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"Metric\"\n    field {\n      name: \"timestamp\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Timestamp\"\n      options {\n        65001: 0\n        65010: 1\n      }\n      json_name: \"timestamp\"\n    }\n    field {\n      name: \"id\"\n      number: 2\n      label: LABEL_OPTIONAL \n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"data\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Any\"\n      json_name: \"data\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: XXH64 Hashing: Digest Type in Go\nDESCRIPTION: The `Digest` type implements the `hash.Hash64` interface, providing methods for incrementally updating the hash. It is used for calculating the hash of data in chunks. `New()` returns a new `Digest` instance, allowing for stateful hash computation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Digest struct{ ... }\n    func New() *Digest\n```\n\n----------------------------------------\n\nTITLE: Defining Mount Message in Protobuf for Containerd API\nDESCRIPTION: This snippet defines the Mount message type for the Containerd API. It includes fields for type, source, target, and options of a mount.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Mount {\n  string type = 1;\n  string source = 2;\n  string target = 3;\n  repeated string options = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Temporality and Aggregation Methods for Metric Exporters\nDESCRIPTION: The Exporter interface in the metric SDK now requires implementing Temporality and Aggregation methods to determine how metrics are exported based on instrument kinds.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_26\n\nLANGUAGE: go\nCODE:\n```\n// Required methods for the Exporter interface\nTemporality(view.InstrumentKind) metricdata.Temporality\nAggregation(view.InstrumentKind) aggregation.Aggregation\n```\n\n----------------------------------------\n\nTITLE: Task Service Proto Definition - Services and Messages\nDESCRIPTION: Protobuf definition for the containerd Task service including message types for various container operations and service method definitions. Defines the API contract for container lifecycle management.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_29\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n    name: \"Task\"\n    method {\n      name: \"State\"\n      input_type: \".containerd.task.v2.StateRequest\"\n      output_type: \".containerd.task.v2.StateResponse\"\n    }\n    method {\n      name: \"Create\"\n      input_type: \".containerd.task.v2.CreateTaskRequest\"\n      output_type: \".containerd.task.v2.CreateTaskResponse\"\n    }\n    // ... other methods ...\n    options {\n      go_package: \"github.com/containerd/containerd/api/runtime/task/v2;task\"\n    }\n    syntax: \"proto3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for Building\nDESCRIPTION: Command to run a Docker container with mounted volumes for containerd and runc repositories.\nSOURCE: https://github.com/containerd/containerd/blob/main/BUILDING.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it \\\n    -v ${PWD}/containerd:/src/containerd \\\n    -v ${PWD}/runc:/src/runc \\\n    -w /src/containerd \\\n    containerd/build\n```\n\n----------------------------------------\n\nTITLE: ContainerD TTRPC Events Service Definition in Protocol Buffers\nDESCRIPTION: Protocol buffer definition for the ContainerD TTRPC Events service, which provides a mechanism for forwarding event messages across the system. TTRPC is a lightweight alternative to gRPC for localized communication.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_69\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"ForwardRequest\"\n  field {\n    name: \"envelope\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Envelope\"\n    json_name: \"envelope\"\n  }\n}\nservice {\n  name: \"Events\"\n  method {\n    name: \"Forward\"\n    input_type: \".containerd.services.events.ttrpc.v1.ForwardRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Registry\nDESCRIPTION: This command runs the Docker Registry in a detached mode, mapping port 5000 on the host to port 5000 in the container. The `--restart=always` flag ensures that the registry restarts automatically if it crashes. Requires Docker to be installed and running.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/imgcrypt/v2/README.md#2025-04-21_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n# docker run -d -p 5000:5000 --restart=always --name registry registry\n```\n\n----------------------------------------\n\nTITLE: Running an Image without Key using ctr-enc\nDESCRIPTION: This command attempts to run the encrypted image without providing the decryption key. It demonstrates that the image cannot be executed without the appropriate key. Expects an error message related to missing key.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/imgcrypt/v2/README.md#2025-04-21_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\n# sudo $CTR run --rm localhost:5000/bash.enc:latest test echo 'Hello World!'\nctr: you are not authorized to use this image: missing private key needed for decryption\n```\n\n----------------------------------------\n\nTITLE: Decompressing Data with Huff0\nDESCRIPTION: Shows how to decompress data using ReadTable, Decompress1X, and Decompress4X functions with error checking\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/huff0/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Example decompression using Huff0\nvar scratch huff0.Scratch\nreadData := scratch.ReadTable(compressedBlock)\nerr := scratch.Decompress1X(readData, decompressedOutput)\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Source from Flag in Go\nDESCRIPTION: Function that returns a closure for creating an InputSourceContext from JSON data specified by a flag.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_40\n\nLANGUAGE: go\nCODE:\n```\nfunc NewJSONSourceFromFlagFunc(flag string) func(c *cli.Context) (InputSourceContext, error)\n```\n\n----------------------------------------\n\nTITLE: Progress Type Definitions in Go\nDESCRIPTION: Type definitions for progress tracking including callback function and progress structure.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/transfer.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype ProgressFunc func(Progress)\n\ntype Progress struct {\n\tEvent    string\n\tName     string\n\tParents  []string\n\tProgress int64\n\tTotal    int64\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Protocol Messages\nDESCRIPTION: Protocol buffer definitions for authentication requests and responses in the credential system.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/transfer.md#2025-04-21_snippet_7\n\nLANGUAGE: proto\nCODE:\n```\nmessage AuthRequest {\n\tstring host = 1;\n\tstring reference = 2;\n\trepeated string wwwauthenticate = 3;\n}\n\nenum AuthType {\n\tNONE = 0;\n\tCREDENTIALS = 1;\n\tREFRESH = 2;\n\tHEADER = 3;\n}\n\nmessage AuthResponse {\n\tAuthType authType = 1;\n\tstring secret = 2;\n\tstring username = 3;\n\tgoogle.protobuf.Timestamp expire_at = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: NRI Plugin Output Format\nDESCRIPTION: This JSON snippet depicts the expected output format from an NRI plugin. It returns the version, state, IDs, and updated cgroups path post-execution. The typical output provides a pathway for resource cgroups, adjusted per the provided configurations and input parameters. It represents a standardized response to be consumed by other components in the container environment.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/nri/README-v0.1.0.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.1\",\n  \"state\": \"create\",\n  \"id\": \"redis\",\n  \"pid\": 1234,\n  \"cgroupsPath\": \"qos-ls/default/redis\"\n}\n```\n\n----------------------------------------\n\nTITLE: Image Events Definition\nDESCRIPTION: Defines events for image management including create, update and delete operations\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\npackage containerd.services.images.v1;\nmessage ImageCreate {\n  string name = 1;\n  map<string, string> labels = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Windows using PowerShell\nDESCRIPTION: PowerShell commands for fetching and installing dependencies using the containerd CLI (ctr) on Windows.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/managed-opt.md#2025-04-21_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n> ctr content fetch docker.io/ameyagawde/runhcs:1809 #An example image, not supported by containerd\n> ctr install docker.io/ameyagawde/runhcs:1809\n```\n\n----------------------------------------\n\nTITLE: Adding Logrus Hooks in Go\nDESCRIPTION: This example demonstrates how to add hooks to Logrus for sending errors to different services. It shows adding an Airbrake hook for exception tracking and a syslog hook for local logging.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n  \"gopkg.in/gemnasium/logrus-airbrake-hook.v2\" // the package is named \"airbrake\"\n  logrus_syslog \"github.com/sirupsen/logrus/hooks/syslog\"\n  \"log/syslog\"\n)\n\nfunc init() {\n\n  // Use the Airbrake hook to report errors that have Error severity or above to\n  // an exception tracker. You can create custom hooks, see the Hooks section.\n  log.AddHook(airbrake.NewHook(123, \"xyz\", \"production\"))\n\n  hook, err := logrus_syslog.NewSyslogHook(\"udp\", \"localhost:514\", syslog.LOG_INFO, \"\")\n  if err != nil {\n    log.Error(\"Unable to connect to local syslog daemon\")\n  } else {\n    log.AddHook(hook)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Version Service Definition in Protocol Buffers\nDESCRIPTION: Service definition for the Version service with a single 'Version' method. This RPC method takes an Empty request and returns version information about the containerd instance.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_35\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Version\"\n  method {\n    name: \"Version\"\n    input_type: \".google.protobuf.Empty\"\n    output_type: \".containerd.services.version.v1.VersionResponse\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: ContainerD Image Type Definition\nDESCRIPTION: Protocol Buffer message definition for ContainerD's Image type containing image metadata like name, labels, target descriptor and timestamps.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_43\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Image {\n  string name = 1;\n  map<string, string> labels = 2;\n  containerd.types.Descriptor target = 3;\n  google.protobuf.Timestamp created_at = 7;\n  google.protobuf.Timestamp updated_at = 8;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Go-TOML Library\nDESCRIPTION: Shows how to import the go-toml v2 library in a Go project.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/pelletier/go-toml/v2\"\n```\n\n----------------------------------------\n\nTITLE: Defining Metric Message Type in Protocol Buffers\nDESCRIPTION: Defines a Protocol Buffer message type for metrics with timestamp, ID, and data fields. This structure is used for collecting and reporting metrics data within containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_25\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Metric\"\n  field {\n    name: \"timestamp\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n      65010: 1\n      65001: 0\n    }\n    json_name: \"timestamp\"\n  }\n  field {\n    name: \"id\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  field {\n    name: \"data\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Any\"\n    json_name: \"data\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Float64Flag Structure and Methods in Go\nDESCRIPTION: Implementation of a float64 flag type with methods for flag manipulation and value access.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ntype Float64Flag struct {\n\tName string\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\tValue       float64\n\tDestination *float64\n\tAliases []string\n\tEnvVars []string\n\tAction func(*Context, float64) error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task Management Service Methods in Protocol Buffers\nDESCRIPTION: This snippet defines the method signatures for the containerd task management service using Protocol Buffers. It includes operations like Pause, Resume, Checkpoint, Kill, and other task-related operations with their respective input and output types.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_33\n\nLANGUAGE: protobuf\nCODE:\n```\n    method {\n      name: \"Pause\"\n      input_type: \".containerd.task.v3.PauseRequest\"\n      output_type: \".google.protobuf.Empty\"\n    }\n    method {\n      name: \"Resume\"\n      input_type: \".containerd.task.v3.ResumeRequest\"\n      output_type: \".google.protobuf.Empty\"\n    }\n    method {\n      name: \"Checkpoint\"\n      input_type: \".containerd.task.v3.CheckpointTaskRequest\"\n      output_type: \".google.protobuf.Empty\"\n    }\n    method {\n      name: \"Kill\"\n      input_type: \".containerd.task.v3.KillRequest\"\n      output_type: \".google.protobuf.Empty\"\n    }\n    method {\n      name: \"Exec\"\n      input_type: \".containerd.task.v3.ExecProcessRequest\"\n      output_type: \".google.protobuf.Empty\"\n    }\n    method {\n      name: \"ResizePty\"\n      input_type: \".containerd.task.v3.ResizePtyRequest\"\n      output_type: \".google.protobuf.Empty\"\n    }\n    method {\n      name: \"CloseIO\"\n      input_type: \".containerd.task.v3.CloseIORequest\"\n      output_type: \".google.protobuf.Empty\"\n    }\n    method {\n      name: \"Update\"\n      input_type: \".containerd.task.v3.UpdateTaskRequest\"\n      output_type: \".google.protobuf.Empty\"\n    }\n    method {\n      name: \"Wait\"\n      input_type: \".containerd.task.v3.WaitRequest\"\n      output_type: \".containerd.task.v3.WaitResponse\"\n    }\n    method {\n      name: \"Stats\"\n      input_type: \".containerd.task.v3.StatsRequest\"\n      output_type: \".containerd.task.v3.StatsResponse\"\n    }\n    method {\n      name: \"Connect\"\n      input_type: \".containerd.task.v3.ConnectRequest\"\n      output_type: \".containerd.task.v3.ConnectResponse\"\n    }\n    method {\n      name: \"Shutdown\"\n      input_type: \".containerd.task.v3.ShutdownRequest\"\n      output_type: \".google.protobuf.Empty\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Regenerating Protocol Buffer Code\nDESCRIPTION: Command to regenerate Go code from Protocol Buffer definitions after changing the proto file. Uses go generate to rebuild the Go bindings based on the manifest.proto definition.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/continuity/README.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ go generate ./proto\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer for UnpackConfiguration in ContainerD\nDESCRIPTION: Protobuf message definition for UnpackConfiguration which specifies platform-specific image unpacking settings including target snapshotter.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_76\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"UnpackConfiguration\"\n  field {\n    name: \"platform\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Platform\"\n    json_name: \"platform\"\n  }\n  field {\n    name: \"snapshotter\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"snapshotter\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions on containerd Socket\nDESCRIPTION: This command sets the permissions on the containerd socket file to allow all users to read and write to it. This might be necessary for the `ctr-enc` tool to communicate with containerd. The specific need and implications of these permissions should be carefully considered for security.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/imgcrypt/v2/README.md#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n# sudo chmod 0666 /tmp/run/containerd/containerd.sock\n```\n\n----------------------------------------\n\nTITLE: Container Events Protocol Definition\nDESCRIPTION: Defines message structures for container lifecycle events including creation, updates and deletion.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ContainerCreate {\n  string id = 1;\n  string image = 2;\n  Runtime runtime = 3;\n  \n  message Runtime {\n    string name = 1;\n    google.protobuf.Any options = 2;\n  }\n}\n\nmessage ContainerUpdate {\n  string id = 1;\n  string image = 2;\n  map<string, string> labels = 3;\n  string snapshot_key = 4;\n}\n\nmessage ContainerDelete {\n  string id = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Int64Flag Structure in Go\nDESCRIPTION: Defines the Int64Flag structure which represents a flag with an int64 value. It includes various fields for flag properties and methods for flag operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_22\n\nLANGUAGE: go\nCODE:\n```\ntype Int64Flag struct {\n\t// Fields omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: ContainerD Field Path Extensions\nDESCRIPTION: Defines extensions for field path functionality in ContainerD's protobuf implementations.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nextension fieldpath_all {\n  optional bool extendee = \".google.protobuf.FileOptions\" = 63300;\n}\n\nextension fieldpath {\n  optional bool extendee = \".google.protobuf.MessageOptions\" = 64400;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Image Events in Protocol Buffers\nDESCRIPTION: Defines message types for image events including ImageCreate, ImageUpdate, and ImageDelete. These messages include fields for image name and labels.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_3\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"ImageCreate\"\n  field {\n    name: \"name\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"name\"\n  }\n  field {\n    name: \"labels\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.images.v1.ImageCreate.LabelsEntry\"\n    json_name: \"labels\"\n  }\n  nested_type {\n    name: \"LabelsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks Service Package and Options in Protobuf\nDESCRIPTION: This snippet specifies the Go package for the Tasks service and sets the syntax to proto3. It also includes a weak dependency declaration.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_28\n\nLANGUAGE: protobuf\nCODE:\n```\noptions {\n  go_package: \"github.com/containerd/containerd/api/services/tasks/v1;tasks\"\n}\nweak_dependency: 2\nsyntax: \"proto3\"\n```\n\n----------------------------------------\n\nTITLE: Providing Input to NRI Plugin\nDESCRIPTION: This JSON snippet serves as a typical input payload provided to an NRI plugin via STDIN. It includes the version, state of the operation, the container ID, process ID, and specification details such as resources, cgroups path, namespaces, and annotations. Varying states such as 'create', 'setup', etc., can alter the input parameters expected by the plugins.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/nri/README-v0.1.0.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.1\",\n  \"state\": \"create\",\n  \"id\": \"redis\",\n  \"pid\": 1234,\n  \"spec\": {\n    \"resources\": {},\n    \"cgroupsPath\": \"default/redis\",\n    \"namespaces\": {\n      \"pid\": \"/proc/44/ns/pid\",\n      \"mount\": \"/proc/44/ns/mnt\",\n      \"net\": \"/proc/44/ns/net\"\n    },\n    \"annotations\": {\n      \"qos.class\": \"ls\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Container from Pulled Image in containerd\nDESCRIPTION: This snippet demonstrates how to run a container from a pulled image using the 'ctr run' command in containerd. It shows the execution of a Redis server container and its output.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-03-17.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sudo ./bin/ctr run --id foo docker.io/library/redis:latest /usr/local/bin/redis-server\n1:C 17 Mar 17:20:25.316 # Warning: no config file specified, using the default config. In order to specify a config file use /usr/local/bin/redis-server /path/to/redis.conf\n1:M 17 Mar 17:20:25.317 * Increased maximum number of open files to 10032 (it was originally set to 1024).\n\t\t\t\t_._\n\t\t   _.-``__ ''-._\n\t  _.-``    `.  `_.  ''-._           Redis 3.2.8 (00000000/0) 64 bit\n  .-`` .-```.  ```\\/    _.,_ ''-._\n (    '      ,       .-`  | `,    )     Running in standalone mode\n |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379\n |    `-._   `._    /     _.-'    |     PID: 1\n  `-._    `-._  `-./  _.-'    _.-'\n |`-._`-._    `-.__.-'    _.-'_.-'|\n |    `-._`-._        _.-'_.-'    |           http://redis.io\n  `-._    `-._`-.__.-'_.-'    _.-'\n |`-._`-._    `-.__.-'    _.-'_.-'|\n |    `-._`-._        _.-'_.-'    |\n  `-._    `-._`-.__.-'_.-'    _.-'\n\t  `-._    `-.__.-'    _.-'\n\t\t  `-._        _.-'\n\t\t\t  `-.__.-'\n\n1:M 17 Mar 17:20:25.326 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.\n1:M 17 Mar 17:20:25.326 # Server started, Redis version 3.2.8\n1:M 17 Mar 17:20:25.326 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.\n1:M 17 Mar 17:20:25.326 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.\n1:M 17 Mar 17:20:25.326 * The server is now ready to accept connections on port 6379\n```\n\n----------------------------------------\n\nTITLE: Defining Platform Info Proto Message\nDESCRIPTION: Protocol buffer definition for platform-specific information including OS, architecture, variant and version details.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Platform {\n  string os = 1;\n  string architecture = 2;\n  string variant = 3;\n  string os_version = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metrics Proto Message\nDESCRIPTION: Protocol buffer definition for metrics data including timestamp, ID and extensible data payload using Any type.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Metric {\n  Timestamp timestamp = 1;\n  string id = 2;\n  Any data = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Context Methods Implementation in Go\nDESCRIPTION: Collection of methods for Context type handling flag values, arguments counting, and context hierarchy.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc (cCtx *Context) IsSet(name string) bool\nfunc (cCtx *Context) Lineage() []*Context\nfunc (cCtx *Context) LocalFlagNames() []string\nfunc (cCtx *Context) NArg() int\nfunc (cCtx *Context) NumFlags() int\nfunc (cCtx *Context) Path(name string) string\nfunc (cCtx *Context) Set(name, value string) error\nfunc (cCtx *Context) String(name string) string\nfunc (cCtx *Context) StringSlice(name string) []string\nfunc (cCtx *Context) Timestamp(name string) *time.Time\nfunc (cCtx *Context) Uint(name string) uint\nfunc (cCtx *Context) Uint64(name string) uint64\nfunc (cCtx *Context) Uint64Slice(name string) []uint64\nfunc (cCtx *Context) UintSlice(name string) []uint\nfunc (cCtx *Context) Value(name string) interface{}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Info Message in Protobuf for Containerd\nDESCRIPTION: This snippet defines the Info message type for content in Containerd. It includes fields for digest, size, creation and update timestamps, and labels.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Info\"\n  field {\n    name: \"digest\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65001: 0\n      65003: \"github.com/opencontainers/go-digest.Digest\"\n    }\n    json_name: \"digest\"\n  }\n  field {\n    name: \"size\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"size\"\n  }\n  field {\n    name: \"created_at\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n      65001: 0\n      65010: 1\n    }\n    json_name: \"createdAt\"\n  }\n  field {\n    name: \"updated_at\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n      65001: 0\n      65010: 1\n    }\n    json_name: \"updatedAt\"\n  }\n  field {\n    name: \"labels\"\n    number: 5\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.content.v1.Info.LabelsEntry\"\n    json_name: \"labels\"\n  }\n  nested_type {\n    name: \"LabelsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Containerd Scope Definition Table in Markdown\nDESCRIPTION: A markdown table defining which features and components are in-scope or out-of-scope for the containerd project, along with descriptions and reasoning for each decision.\nSOURCE: https://github.com/containerd/containerd/blob/main/SCOPE.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Description | In/Out | Reason |\n|------------------------------|--------------------------------------------------------------------------------------------------------|--------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| execution | Provide an extensible execution layer for executing a container | in | Create,start, stop pause, resume exec, signal, delete |\n| cow filesystem | Built in functionality for overlay and other copy on write filesystems for containers | in |  |\n| distribution | Having the ability to push and pull images as well as operations on images as a first class API object | in | containerd will fully support the management and retrieval of images |\n| metrics | container-level metrics, cgroup stats, and OOM events | in |\n| networking | creation and management of network interfaces | out | Networking will be handled and provided to containerd via higher level systems. |\n| build | Building images as a first class API | out | Build is a higher level tooling feature and can be implemented in many different ways on top of containerd |\n| volumes | Volume management for external data | out | The API supports mounts, binds, etc where all volumes type systems can be built on top of containerd. |\n| logging | Persisting container logs | out | Logging can be build on top of containerd because the container's STDIO will be provided to the clients and they can persist any way they see fit. There is no io copying of container STDIO in containerd. |\n```\n\n----------------------------------------\n\nTITLE: Defining Namespaces Service in Protocol Buffers\nDESCRIPTION: Protocol Buffer definition for the Namespaces service in containerd. This service provides methods for namespace management including Get, List, Create, Update, and Delete operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_51\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Namespaces\"\n  method {\n    name: \"Get\"\n    input_type: \".containerd.services.namespaces.v1.GetNamespaceRequest\"\n    output_type: \".containerd.services.namespaces.v1.GetNamespaceResponse\"\n  }\n  method {\n    name: \"List\"\n    input_type: \".containerd.services.namespaces.v1.ListNamespacesRequest\"\n    output_type: \".containerd.services.namespaces.v1.ListNamespacesResponse\"\n  }\n  method {\n    name: \"Create\"\n    input_type: \".containerd.services.namespaces.v1.CreateNamespaceRequest\"\n    output_type: \".containerd.services.namespaces.v1.CreateNamespaceResponse\"\n  }\n  method {\n    name: \"Update\"\n    input_type: \".containerd.services.namespaces.v1.UpdateNamespaceRequest\"\n    output_type: \".containerd.services.namespaces.v1.UpdateNamespaceResponse\"\n  }\n  method {\n    name: \"Delete\"\n    input_type: \".containerd.services.namespaces.v1.DeleteNamespaceRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Writer for CLI Applications in Go\nDESCRIPTION: This variable sets the writer used for outputting errors in CLI applications. It defaults to os.Stderr but can be customized to any io.Writer implementation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar ErrWriter io.Writer = os.Stderr\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshot Events Proto Messages\nDESCRIPTION: Protocol buffer definitions for snapshot-related events including preparation, commit and removal operations. Each message type contains fields for key identifiers and snapshotter names.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage SnapshotPrepare {\n  string key = 1;\n  string parent = 2;\n  string snapshotter = 5;\n}\n\nmessage SnapshotCommit {\n  string key = 1;\n  string name = 2;\n  string snapshotter = 5;\n}\n\nmessage SnapshotRemove {\n  string key = 1;\n  string snapshotter = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Content from Local Store Using dist Command in Bash\nDESCRIPTION: This Bash command combination lists all content in the local store and then deletes it. It demonstrates how to use the 'dist list' and 'dist delete' commands together to manage local content.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-01-27.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ./dist list -q | xargs ./dist delete\n```\n\n----------------------------------------\n\nTITLE: Implementing StringFlag Struct in Go\nDESCRIPTION: This snippet defines the StringFlag struct, which represents a flag with a string type. It includes various properties such as name, category, usage, and methods for applying and retrieving flag values.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_30\n\nLANGUAGE: go\nCODE:\n```\ntype StringFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       string\n\tDestination *string\n\n\tAliases []string\n\tEnvVars []string\n\n\tTakesFile bool\n\n\tAction func(*Context, string) error\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Optimized Compression Packages in Go\nDESCRIPTION: Example of how to replace standard library imports with optimized versions from the klauspost/compress package. This demonstrates the drop-in replacement nature of the library for gzip, zlib, zip, and flate packages.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-21_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n    \"github.com/klauspost/compress/gzip\"\n    \"github.com/klauspost/compress/zlib\"\n    \"github.com/klauspost/compress/zip\"\n    \"github.com/klauspost/compress/flate\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Interface in Go\nDESCRIPTION: Defines the Generic interface which represents a generic parseable type identified by a specific flag. It requires Set and String methods.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_20\n\nLANGUAGE: go\nCODE:\n```\ntype Generic interface {\n\tSet(value string) error\n\tString() string\n}\n```\n\n----------------------------------------\n\nTITLE: Task Service Definition in Protocol Buffers\nDESCRIPTION: A snippet showing a 'Wait' method definition for the containerd tasks service. This method takes a WaitRequest as input and returns a WaitResponse, allowing clients to wait for task state changes.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_32\n\nLANGUAGE: protobuf\nCODE:\n```\nmethod {\n  name: \"Wait\"\n  input_type: \".containerd.services.tasks.v1.WaitRequest\"\n  output_type: \".containerd.services.tasks.v1.WaitResponse\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Contents of a Continuity Manifest\nDESCRIPTION: Command to display the contents of a previously created continuity manifest. The ls command shows file permissions, sizes, and paths stored in the manifest.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/continuity/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ./bin/continuity ls /tmp/a.pb\n...\n-rw-rw-r--      270 B   /.gitignore\n-rw-rw-r--      88 B    /.mailmap\n-rw-rw-r--      187 B   /.travis.yml\n-rw-rw-r--      359 B   /AUTHORS\n-rw-rw-r--      11 kB   /LICENSE\n-rw-rw-r--      1.5 kB  /Makefile\n...\n-rw-rw-r--      986 B   /testutil_test.go\ndrwxrwxr-x      0 B     /version\n-rw-rw-r--      478 B   /version/version.go\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Registry Image\nDESCRIPTION: This command pulls the latest version of the Docker Registry image from Docker Hub.  The registry is used for storing and distributing container images. Requires Docker to be installed and running.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/imgcrypt/v2/README.md#2025-04-21_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n# docker pull registry:latest\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshot Service in Protobuf for Containerd\nDESCRIPTION: This snippet defines the Snapshots service for Containerd, including methods for preparing, viewing, mounting, committing, removing, and listing snapshots. It also defines related message types and enums.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_27\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Snapshots\"\n  method {\n    name: \"Prepare\"\n    input_type: \".containerd.services.snapshots.v1.PrepareSnapshotRequest\"\n    output_type: \".containerd.services.snapshots.v1.PrepareSnapshotResponse\"\n  }\n  method {\n    name: \"View\"\n    input_type: \".containerd.services.snapshots.v1.ViewSnapshotRequest\"\n    output_type: \".containerd.services.snapshots.v1.ViewSnapshotResponse\"\n  }\n  method {\n    name: \"Mounts\"\n    input_type: \".containerd.services.snapshots.v1.MountsRequest\"\n    output_type: \".containerd.services.snapshots.v1.MountsResponse\"\n  }\n  method {\n    name: \"Commit\"\n    input_type: \".containerd.services.snapshots.v1.CommitSnapshotRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"Remove\"\n    input_type: \".containerd.services.snapshots.v1.RemoveSnapshotRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"Stat\"\n    input_type: \".containerd.services.snapshots.v1.StatSnapshotRequest\"\n    output_type: \".containerd.services.snapshots.v1.StatSnapshotResponse\"\n  }\n  method {\n    name: \"Update\"\n    input_type: \".containerd.services.snapshots.v1.UpdateSnapshotRequest\"\n    output_type: \".containerd.services.snapshots.v1.UpdateSnapshotResponse\"\n  }\n  method {\n    name: \"List\"\n    input_type: \".containerd.services.snapshots.v1.ListSnapshotsRequest\"\n    output_type: \".containerd.services.snapshots.v1.ListSnapshotsResponse\"\n    server_streaming: true\n  }\n  method {\n    name: \"Usage\"\n    input_type: \".containerd.services.snapshots.v1.UsageRequest\"\n    output_type: \".containerd.services.snapshots.v1.UsageResponse\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Level NRI Plugin\nDESCRIPTION: This JSON snippet illustrates how to configure a host-level NRI plugin with specific plugin types and their associated configuration. The snippet specifies the version, plugins, and their configurations necessary for managing resources. The applicable plugins include 'konfine' with system resources reserved and 'clearcfs' without additional configuration. This configuration is expected to reside under '/etc/nri/resource.d/*.conf'.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/nri/README-v0.1.0.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.1\",\n  \"plugins\": [\n    {\n      \"type\": \"konfine\",\n      \"conf\": {\n        \"systemReserved\": [0, 1]\n      }\n    },\n    {\n      \"type\": \"clearcfs\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Snapshot List Command Output in Containerd\nDESCRIPTION: Shows the output of the new 'ctr snapshot list' command which displays all snapshots including their ID, parent, state and readonly status.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-06-23.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ctr snapshot list\nID                                                                      Parent                                                                  State     Readonly\nregistry2                                                               sha256:dc22a13eb565d14bfe2b16f6fa731a05da0eeff02a52059c7b59cdc2c232a2b2 active    false\nregistry3                                                               sha256:dc22a13eb565d14bfe2b16f6fa731a05da0eeff02a52059c7b59cdc2c232a2b2 active    false\nsha256:4ac69ce655ab8aa97362915793348d31361fb3c047e223c2b58be706e89c48fc sha256:ba2cc2690e31f63847e4bc0d266b354f8f11dc04474d45d44312ff70edae9c98 committed true\nsha256:ba2cc2690e31f63847e4bc0d266b354f8f11dc04474d45d44312ff70edae9c98                                                                         committed true\nsha256:bfe0b04fc169b94099b29dbf5a527f6a11db627cd0a6126803edf8f42bd7b4b3 sha256:4ac69ce655ab8aa97362915793348d31361fb3c047e223c2b58be706e89c48fc committed true\nsha256:d959def87dadbb9ba85070c09e99b46d994967b12f5748f617c377073b8d1e39 sha256:bfe0b04fc169b94099b29dbf5a527f6a11db627cd0a6126803edf8f42bd7b4b3 committed true\nsha256:dc22a13eb565d14bfe2b16f6fa731a05da0eeff02a52059c7b59cdc2c232a2b2 sha256:d959def87dadbb9ba85070c09e99b46d994967b12f5748f617c377073b8d1e39 committed true\n```\n\n----------------------------------------\n\nTITLE: Defining HugeTlbStat Message Type in Protocol Buffers\nDESCRIPTION: Defines the HugeTlbStat message type with fields for current usage, maximum usage, and page size of huge pages. This message represents statistics for huge page allocations.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup2/stats/metrics.pb.txt#2025-04-21_snippet_5\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"HugeTlbStat\"\n  field {\n    name: \"current\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"current\"\n  }\n  field {\n    name: \"max\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"max\"\n  }\n  field {\n    name: \"pagesize\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"pagesize\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaskCreate Message in Protobuf for Containerd API\nDESCRIPTION: This snippet defines the TaskCreate message type for the Containerd API. It includes fields for container_id, bundle, rootfs, io, checkpoint, and pid.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage TaskCreate {\n  string container_id = 1;\n  string bundle = 2;\n  repeated containerd.types.Mount rootfs = 3;\n  TaskIO io = 4 [(gogoproto.customname) = \"IO\"];\n  string checkpoint = 5;\n  uint32 pid = 6;\n}\n```\n\n----------------------------------------\n\nTITLE: Shell-like Script for Testing\nDESCRIPTION: This code snippet demonstrates how to write shell-like scripts for testing in the fsnotify project. It highlights supported shell commands and their usage such as watch, touch, and mkdir. Scripts are executed in a temporary directory and include support for comments and platform-specific tests. No end-of-line escapes are supported.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/fsnotify/fsnotify/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Create a new empty file with some data.\\nwatch /\\necho data >/file\\n\\nOutput:\\n    create  /file\\n    write   /file\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime and Introspection Types in Protobuf\nDESCRIPTION: This snippet defines protobuf messages for runtime requests, versions, and information, as well as plugin details for introspection in Containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_46\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"RuntimeRequest\"\n  field {\n    name: \"runtime_path\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"runtimePath\"\n  }\n  field {\n    name: \"options\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Any\"\n    json_name: \"options\"\n  }\n}\n\nmessage_type {\n  name: \"RuntimeVersion\"\n  field {\n    name: \"version\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"version\"\n  }\n  field {\n    name: \"revision\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"revision\"\n  }\n}\n\n// Additional message types omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer Message for ProcessDetails in ContainerD\nDESCRIPTION: Protobuf message definition for ProcessDetails which holds information about a container process, currently containing only the exec ID field.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_73\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"ProcessDetails\"\n  field {\n    name: \"exec_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"execId\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Types and Services in Protocol Buffers\nDESCRIPTION: This snippet provides Protocol Buffer definitions of various message types and service interfaces used in containerd for handling content operations. The defined messages include types like 'Status', 'WriteContentRequest', and 'ListStatusesRequest', while service methods cover actions such as 'Info', 'Update', 'Write', and 'Abort'. Dependencies include Google's protobuf and github.com/opencontainers/go-digest for certain field types.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_10\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n    name: \"Status\"\n    field {\n      name: \"started_at\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Timestamp\"\n      options {\n        65001: 0\n        65010: 1\n      }\n      json_name: \"startedAt\"\n    }\n    ...\n  }\n  enum_type {\n    name: \"WriteAction\"\n    value {\n      name: \"STAT\"\n      number: 0\n      options {\n        66001: \"WriteActionStat\"\n      }\n    }\n    ...\n  }\n  service {\n    name: \"Content\"\n    method {\n      name: \"Info\"\n      input_type: \".containerd.services.content.v1.InfoRequest\"\n      output_type: \".containerd.services.content.v1.InfoResponse\"\n    }\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Preparing Containerd Environment on EC2 Instance\nDESCRIPTION: These commands connect to the EC2 instance, create necessary directories, and set up the containerd project for benchmarking.\nSOURCE: https://github.com/containerd/containerd/blob/main/contrib/aws/snapshotter_bench_readme.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nssh -i SSH_KEY ec2-user@IP\nmkdir /mnt/disk1/data /mnt/disk2/data /mnt/disk3/data\ngo get github.com/containerd/containerd\ncd $(go env GOPATH)/src/github.com/containerd/containerd\nmake\n```\n\n----------------------------------------\n\nTITLE: Defining Process and Status Types in Protobuf for Containerd\nDESCRIPTION: This snippet defines the Process message type and Status enum for Containerd. The Process type includes fields for container and process information, while the Status enum defines various process states.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_29\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Process\"\n  field {\n    name: \"container_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n  field {\n    name: \"id\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  field {\n    name: \"pid\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"pid\"\n  }\n  field {\n    name: \"status\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".containerd.v1.types.Status\"\n    json_name: \"status\"\n  }\n  field {\n    name: \"stdin\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"stdin\"\n  }\n  field {\n    name: \"stdout\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"stdout\"\n  }\n  field {\n    name: \"stderr\"\n    number: 7\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"stderr\"\n  }\n  field {\n    name: \"terminal\"\n    number: 8\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"terminal\"\n  }\n  field {\n    name: \"exit_status\"\n    number: 9\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"exitStatus\"\n  }\n  field {\n    name: \"exited_at\"\n    number: 10\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n      65010: 1\n      65001: 0\n    }\n    json_name: \"exitedAt\"\n  }\n}\n\nenum_type {\n  name: \"Status\"\n  value {\n    name: \"UNKNOWN\"\n    number: 0\n    options {\n      66001: \"StatusUnknown\"\n    }\n  }\n  value {\n    name: \"CREATED\"\n    number: 1\n    options {\n      66001: \"StatusCreated\"\n    }\n  }\n  value {\n    name: \"RUNNING\"\n    number: 2\n    options {\n      66001: \"StatusRunning\"\n    }\n  }\n  value {\n    name: \"STOPPED\"\n    number: 3\n    options {\n      66001: \"StatusStopped\"\n    }\n  }\n  value {\n    name: \"PAUSED\"\n    number: 4\n    options {\n      66001: \"StatusPaused\"\n    }\n  }\n  value {\n    name: \"PAUSING\"\n    number: 5\n    options {\n      66001: \"StatusPausing\"\n    }\n  }\n  options {\n    62001: 0\n    62023: \"Status\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing crictl Dependencies\nDESCRIPTION: Command to install the required dependencies for crictl at the correct version.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/crictl.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ make install-deps\n```\n\n----------------------------------------\n\nTITLE: Defining Uint64Flag Structure in Go\nDESCRIPTION: Definition of the Uint64Flag type that implements flag functionality for uint64 values. Includes fields for flag name, category, usage, and action handlers.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_36\n\nLANGUAGE: go\nCODE:\n```\ntype Uint64Flag struct {\n    Name string\n\n    Category    string\n    DefaultText string\n    FilePath    string\n    Usage       string\n\n    Required   bool\n    Hidden     bool\n    HasBeenSet bool\n\n    Value       uint64\n    Destination *uint64\n\n    Aliases []string\n    EnvVars []string\n\n    Action func(*Context, uint64) error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining App Help Template for CLI Applications in Go\nDESCRIPTION: This variable defines the text template for the default help topic in CLI applications. It includes sections for name, usage, version, description, author, commands, and global options.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar AppHelpTemplate = `NAME:\n   {{template \"helpNameTemplate\" .}}\n\nUSAGE:\n   {{if .UsageText}}{{wrap .UsageText 3}}{{else}}{{.HelpName}} {{if .VisibleFlags}}[global options]{{end}}{{if .Commands}} command [command options]{{end}}{{if .ArgsUsage}} {{.ArgsUsage}}{{else}}{{if .Args}} [arguments...]{{end}}{{end}}{{end}}{{if .Version}}{{if not .HideVersion}}\n\nVERSION:\n   {{.Version}}{{end}}{{end}}{{if .Description}}\n\nDESCRIPTION:\n   {{template \"descriptionTemplate\" .}}{{end}}\n{{- if len .Authors}}\n\nAUTHOR{{template \"authorsTemplate\" .}}{{end}}{{if .VisibleCommands}}\n\nCOMMANDS:{{template \"visibleCommandCategoryTemplate\" .}}{{end}}{{if .VisibleFlagCategories}}\n\nGLOBAL OPTIONS:{{template \"visibleFlagCategoryTemplate\" .}}{{else if .VisibleFlags}}\n\nGLOBAL OPTIONS:{{template \"visibleFlagTemplate\" .}}{{end}}{{if .Copyright}}\n\nCOPYRIGHT:\n   {{template \"copyrightTemplate\" .}}{{end}}\n`\n```\n\n----------------------------------------\n\nTITLE: Installing ltag for License Headers\nDESCRIPTION: Command to install and use the ltag tool for automatically adding license headers to new files in the project.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/btrfs/v2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/kunalkushwaha/ltag\n$ ltag -t ./license-templates\n```\n\n----------------------------------------\n\nTITLE: Using WithDecodeAllCapLimit in zstd Decoder\nDESCRIPTION: An example of referencing the WithDecodeAllCapLimit option for the zstd decoder from the v1.15.10 release. This option allows setting a capacity limit for decoded data to prevent memory allocation attacks.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nhttps://pkg.go.dev/github.com/klauspost/compress@v1.15.10/zstd#WithDecodeAllCapLimit\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshot Info Message in Protobuf for Containerd\nDESCRIPTION: Defines the Info message type which represents detailed information about a snapshot. It includes fields for name, parent, kind, creation time, update time, and labels.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_26\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Info\"\n  field {\n    name: \"name\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"name\"\n  }\n  field {\n    name: \"parent\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"parent\"\n  }\n  field {\n    name: \"kind\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".containerd.services.snapshots.v1.Kind\"\n    json_name: \"kind\"\n  }\n  field {\n    name: \"created_at\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n      65010: 1\n      65001: 0\n    }\n    json_name: \"createdAt\"\n  }\n  field {\n    name: \"updated_at\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n      65010: 1\n      65001: 0\n    }\n    json_name: \"updatedAt\"\n  }\n  field {\n    name: \"labels\"\n    number: 6\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.snapshots.v1.Info.LabelsEntry\"\n    json_name: \"labels\"\n  }\n  nested_type {\n    name: \"LabelsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Namespace Service Proto Definition\nDESCRIPTION: Defines the protobuf messages and service for containerd's namespace management functionality.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_50\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Namespace {\n  string name = 1;\n  map<string, string> labels = 2;\n}\n\nservice Namespaces {\n  rpc Get(GetNamespaceRequest) returns (GetNamespaceResponse);\n  rpc List(ListNamespacesRequest) returns (ListNamespacesResponse);\n  rpc Create(CreateNamespaceRequest) returns (CreateNamespaceResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Command Structure Definition in Go\nDESCRIPTION: Core structure for defining CLI commands with properties for name, aliases, usage, flags, subcommands and various handler functions.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype Command struct {\n\t// The name of the command\n\tName string\n\t// A list of aliases for the command\n\tAliases []string\n\t// A short description of the usage of this command\n\tUsage string\n\t// Custom text to show on USAGE section of help\n\tUsageText string\n\t// A longer explanation of how the command works\n\tDescription string\n\t// Whether this command supports arguments\n\tArgs bool\n\t// A short description of the arguments of this command\n\tArgsUsage string\n\t// The category the command is part of\n\tCategory string\n\t// The function to call when checking for bash command completions\n\tBashComplete BashCompleteFunc\n\t// An action to execute before any sub-subcommands are run, but after the context is ready\n\t// If a non-nil error is returned, no sub-subcommands are run\n\tBefore BeforeFunc\n\t// An action to execute after any subcommands are run, but after the subcommand has finished\n\t// It is run even if Action() panics\n\tAfter AfterFunc\n\t// The function to call when this command is invoked\n\tAction ActionFunc\n\t// Execute this function if a usage error occurs.\n\tOnUsageError OnUsageErrorFunc\n\t// List of child commands\n\tSubcommands []*Command\n\t// List of flags to parse\n\tFlags []Flag\n\n\t// Treat all flags as normal arguments if true\n\tSkipFlagParsing bool\n\t// Boolean to hide built-in help command and help flag\n\tHideHelp bool\n\t// Boolean to hide built-in help command but keep help flag\n\t// Ignored if HideHelp is true.\n\tHideHelpCommand bool\n\t// Boolean to hide this command from help or completion\n\tHidden bool\n\t// Boolean to enable short-option handling so user can combine several\n\t// single-character bool arguments into one\n\t// i.e. foobar -o -v -> foobar -ov\n\tUseShortOptionHandling bool\n\n\t// Full name of command for help, defaults to full command name, including parent commands.\n\tHelpName string\n\n\t// CustomHelpTemplate the text template for the command help topic.\n\t// cli.go uses text/template to render templates. You can\n\t// render custom help text by setting this variable.\n\tCustomHelpTemplate string\n\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IOEntry Message Type in Protocol Buffers\nDESCRIPTION: Defines the IOEntry message type with fields for major and minor device numbers, read and write bytes, and read and write I/O operations. This message represents detailed I/O statistics for a specific device.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup2/stats/metrics.pb.txt#2025-04-21_snippet_4\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"IOEntry\"\n  field {\n    name: \"major\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"major\"\n  }\n  field {\n    name: \"minor\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"minor\"\n  }\n  field {\n    name: \"rbytes\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"rbytes\"\n  }\n  field {\n    name: \"wbytes\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"wbytes\"\n  }\n  field {\n    name: \"rios\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"rios\"\n  }\n  field {\n    name: \"wios\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT64\n    json_name: \"wios\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Minimal CLI Application in Go\nDESCRIPTION: This snippet shows the most basic implementation of a CLI application using the cli package. It creates and runs an empty App instance.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t(&cli.App{}).Run(os.Args)\n}\n```\n\n----------------------------------------\n\nTITLE: Timestamp Message Definition\nDESCRIPTION: Defines the Google Protocol Buffer Timestamp message type for representing time values.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Timestamp {\n  int64 seconds = 1;\n  int32 nanos = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer Message for CheckpointOptions in ContainerD\nDESCRIPTION: Protobuf message definition for CheckpointOptions which specifies container checkpoint configuration options including exit behavior, socket handling, and storage paths.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_72\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"CheckpointOptions\"\n  field {\n    name: \"exit\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"exit\"\n  }\n  field {\n    name: \"open_tcp\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"openTcp\"\n  }\n  field {\n    name: \"external_unix_sockets\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"externalUnixSockets\"\n  }\n  field {\n    name: \"terminal\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"terminal\"\n  }\n  field {\n    name: \"file_locks\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"fileLocks\"\n  }\n  field {\n    name: \"empty_namespaces\"\n    number: 6\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"emptyNamespaces\"\n  }\n  field {\n    name: \"cgroups_mode\"\n    number: 7\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"cgroupsMode\"\n  }\n  field {\n    name: \"image_path\"\n    number: 8\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"imagePath\"\n  }\n  field {\n    name: \"work_path\"\n    number: 9\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"workPath\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin for Contributions\nDESCRIPTION: This snippet contains the Developer Certificate of Origin (DCO) text, which contributors must adhere to when submitting contributions. It outlines the rights and responsibilities of the contributor regarding the originality and licensing of the contributions made to the project.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/docker/go-events/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Adding AddLink Method to Span Interface in Go\nDESCRIPTION: Adds AddLink method to the Span interface in the trace package to allow adding links to spans.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n- Add `AddLink` method to the `Span` interface in `go.opentelemetry.io/otel/trace`. (#5032)\n```\n\n----------------------------------------\n\nTITLE: Deleting AWS CloudFormation Stack\nDESCRIPTION: This command deletes the AWS CloudFormation stack to clean up resources and prevent further charges.\nSOURCE: https://github.com/containerd/containerd/blob/main/contrib/aws/snapshotter_bench_readme.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation delete-stack --stack-name benchmark-instance\n```\n\n----------------------------------------\n\nTITLE: Defining Metric Message Type in Protobuf for Containerd\nDESCRIPTION: This snippet defines the Metric message type for Containerd, which includes fields for timestamp, id, and data. It uses Google's protobuf types for Timestamp and Any.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_28\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Metric\"\n  field {\n    name: \"timestamp\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n      65010: 1\n      65001: 0\n    }\n    json_name: \"timestamp\"\n  }\n  field {\n    name: \"id\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  field {\n    name: \"data\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Any\"\n    json_name: \"data\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from MapInputSource in Go\nDESCRIPTION: A collection of methods for the MapInputSource type that retrieve values of different types from a map-based input source. These methods handle type conversion and provide default values when the requested key is not found.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_43\n\nLANGUAGE: go\nCODE:\n```\nfunc (fsm *MapInputSource) Int64(name string) (int64, error)\n    Int64 returns an int64 from the map if it exists otherwise returns 0\n\nfunc (fsm *MapInputSource) Int64Slice(name string) ([]int64, error)\n    Int64Slice returns an []int64 from the map if it exists otherwise returns\n    nil\n\nfunc (fsm *MapInputSource) IntSlice(name string) ([]int, error)\n    IntSlice returns an []int from the map if it exists otherwise returns nil\n\nfunc (fsm *MapInputSource) Source() string\n    Source returns the path of the source file\n\nfunc (fsm *MapInputSource) String(name string) (string, error)\n    String returns a string from the map if it exists otherwise returns an empty\n    string\n\nfunc (fsm *MapInputSource) StringSlice(name string) ([]string, error)\n    StringSlice returns an []string from the map if it exists otherwise returns\n    nil\n\nfunc (fsm *MapInputSource) Uint(name string) (uint, error)\n    Int64 returns an int64 from the map if it exists otherwise returns 0\n\nfunc (fsm *MapInputSource) Uint64(name string) (uint64, error)\n    UInt64 returns an uint64 from the map if it exists otherwise returns 0\n```\n\n----------------------------------------\n\nTITLE: PathFlag Structure Definition\nDESCRIPTION: Defines the PathFlag type for handling filesystem path values in CLI flags. Includes fields for validation and file handling.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_27\n\nLANGUAGE: go\nCODE:\n```\ntype PathFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       Path\n\tDestination *Path\n\n\tAliases []string\n\tEnvVars []string\n\n\tTakesFile bool\n\n\tAction func(*Context, Path) error\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Structs with Mergo in Go\nDESCRIPTION: Example of using Mergo to merge two structs, demonstrating basic usage and error handling.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/dario.cat/mergo/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif err := mergo.Merge(&dst, src); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Platform Specification Message in Protobuf\nDESCRIPTION: Protobuf definition for platform specification with fields for operating system, architecture, and variant\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_16\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Platform {\n  string os = 1;\n  string architecture = 2;\n  string variant = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExecProcessRequest Message in Protocol Buffers\nDESCRIPTION: Defines the ExecProcessRequest message type with fields for executing a process within a container, including id, exec_id, terminal settings, and I/O streams.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_31\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n    name: \"ExecProcessRequest\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"exec_id\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"execId\"\n    }\n    field {\n      name: \"terminal\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"terminal\"\n    }\n    field {\n      name: \"stdin\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"stdin\"\n    }\n    field {\n      name: \"stdout\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"stdout\"\n    }\n    field {\n      name: \"stderr\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"stderr\"\n    }\n    field {\n      name: \"spec\"\n      number: 7\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Any\"\n      json_name: \"spec\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Protocol Buffer Options for cgroups v2 Stats\nDESCRIPTION: Defines the Go package option for the Protocol Buffer file and specifies the syntax version as proto3. This ensures proper code generation and compatibility.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup2/stats/metrics.pb.txt#2025-04-21_snippet_6\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\noptions {\n  go_package: \"github.com/containerd/cgroups/cgroup2/stats\"\n}\nsyntax: \"proto3\"\n```\n\n----------------------------------------\n\nTITLE: Defining Content Events in Protocol Buffers\nDESCRIPTION: Defines the ContentDelete message type for content events. It includes a field for the content digest with specific options for handling the digest type.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_2\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"ContentDelete\"\n  field {\n    name: \"digest\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    options {\n      65003: \"github.com/opencontainers/go-digest.Digest\"\n      65001: 0\n    }\n    json_name: \"digest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task Service Messages in Protobuf for Containerd\nDESCRIPTION: This snippet defines message types for the Tasks service in Containerd, including CreateTaskRequest, CreateTaskResponse, StartRequest, StartResponse, DeleteTaskRequest, and DeleteResponse. These messages are used for task management operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_30\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"CreateTaskRequest\"\n  field {\n    name: \"container_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n  field {\n    name: \"rootfs\"\n    number: 3\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Mount\"\n    json_name: \"rootfs\"\n  }\n  field {\n    name: \"stdin\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"stdin\"\n  }\n  field {\n    name: \"stdout\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"stdout\"\n  }\n  field {\n    name: \"stderr\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"stderr\"\n  }\n  field {\n    name: \"terminal\"\n    number: 7\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"terminal\"\n  }\n  field {\n    name: \"checkpoint\"\n    number: 8\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Descriptor\"\n    json_name: \"checkpoint\"\n  }\n  field {\n    name: \"options\"\n    number: 9\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Any\"\n    json_name: \"options\"\n  }\n}\n\nmessage_type {\n  name: \"CreateTaskResponse\"\n  field {\n    name: \"container_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n  field {\n    name: \"pid\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"pid\"\n  }\n}\n\nmessage_type {\n  name: \"StartRequest\"\n  field {\n    name: \"container_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n  field {\n    name: \"exec_id\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"execId\"\n  }\n}\n\nmessage_type {\n  name: \"StartResponse\"\n  field {\n    name: \"pid\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"pid\"\n  }\n}\n\nmessage_type {\n  name: \"DeleteTaskRequest\"\n  field {\n    name: \"container_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n}\n\nmessage_type {\n  name: \"DeleteResponse\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  field {\n    name: \"pid\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"pid\"\n  }\n  field {\n    name: \"exit_status\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"exitStatus\"\n  }\n  field {\n    name: \"exited_at\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    json_name: \"exitedAt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AuthType Enum in Protocol Buffers\nDESCRIPTION: Specifies the AuthType enum with values for different authentication methods: NONE, CREDENTIALS, REFRESH, and HEADER.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_84\n\nLANGUAGE: protobuf\nCODE:\n```\nenum AuthType {\n  NONE = 0;\n  CREDENTIALS = 1;\n  REFRESH = 2;\n  HEADER = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Error Causer Interface Definition\nDESCRIPTION: Defines the causer interface that allows errors to be unwrapped to find their original cause.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype causer interface {\n        Cause() error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CGroups v1 Protobuf Messages\nDESCRIPTION: Comprehensive protocol buffer schema defining message types for various cgroup metrics and statistics. Includes definitions for memory controls, block I/O stats, RDMA metrics, network statistics and general cgroup process states.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#2025-04-21_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"MemoryOomControl\"\n    field {\n      name: \"oom_kill_disable\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"oomKillDisable\"\n    }\n    field {\n      name: \"under_oom\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"underOom\"\n    }\n    field {\n      name: \"oom_kill\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"oomKill\"\n    }\n  }\n  message_type {\n    name: \"BlkIOStat\"\n    field {\n      name: \"io_service_bytes_recursive\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n      json_name: \"ioServiceBytesRecursive\"\n    }\n    field {\n      name: \"io_serviced_recursive\"\n      number: 2\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n      json_name: \"ioServicedRecursive\"\n    }\n    field {\n      name: \"io_queued_recursive\"\n      number: 3\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n      json_name: \"ioQueuedRecursive\"\n    }\n    field {\n      name: \"io_service_time_recursive\"\n      number: 4\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n      json_name: \"ioServiceTimeRecursive\"\n    }\n    field {\n      name: \"io_wait_time_recursive\"\n      number: 5\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n      json_name: \"ioWaitTimeRecursive\"\n    }\n    field {\n      name: \"io_merged_recursive\"\n      number: 6\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n      json_name: \"ioMergedRecursive\"\n    }\n    field {\n      name: \"io_time_recursive\"\n      number: 7\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n      json_name: \"ioTimeRecursive\"\n    }\n    field {\n      name: \"sectors_recursive\"\n      number: 8\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n      json_name: \"sectorsRecursive\"\n    }\n  }\n  message_type {\n    name: \"BlkIOEntry\"\n    field {\n      name: \"op\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"op\"\n    }\n    field {\n      name: \"device\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"device\"\n    }\n    field {\n      name: \"major\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"major\"\n    }\n    field {\n      name: \"minor\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"minor\"\n    }\n    field {\n      name: \"value\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"value\"\n    }\n  }\n  options {\n    go_package: \"github.com/containerd/cgroups/cgroup1/stats\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Command Template in Go\nDESCRIPTION: Defines a template for generating help text for CLI commands. It includes sections for name, usage, category, description, subcommands, and options.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nvar SubcommandHelpTemplate = `NAME:\n   {{template \"helpNameTemplate\" .}}\n\nUSAGE:\n   {{template \"usageTemplate\" .}}{{if .Category}}\n\nCATEGORY:\n   {{.Category}}{{end}}{{if .Description}}\n\nDESCRIPTION:\n   {{template \"descriptionTemplate\" .}}{{end}}{{if .VisibleCommands}}\n\nCOMMANDS:{{template \"visibleCommandCategoryTemplate\" .}}{{end}}{{if .VisibleFlagCategories}}\n\nOPTIONS:{{template \"visibleFlagCategoryTemplate\" .}}{{else if .VisibleFlags}}\n\nOPTIONS:{{template \"visibleFlagTemplate\" .}}{{end}}\n`\n```\n\n----------------------------------------\n\nTITLE: Implementing StringSlice Struct in Go\nDESCRIPTION: This snippet defines the StringSlice struct, which wraps a []string to satisfy the flag.Value interface. It includes methods for getting, setting, and serializing string slice values.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_31\n\nLANGUAGE: go\nCODE:\n```\ntype StringSlice struct {\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer for Progress Tracking in ContainerD\nDESCRIPTION: Protobuf message definition for Progress which tracks operation progress in containerd, including event type, name, hierarchy, progress metrics, and content descriptor information.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_79\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"github.com/containerd/containerd/api/types/transfer/progress.proto\"\n  package: \"containerd.types.transfer\"\n  dependency: \"github.com/containerd/containerd/api/types/descriptor.proto\"\n  message_type {\n    name: \"Progress\"\n    field {\n      name: \"event\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"event\"\n    }\n    field {\n      name: \"name\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"name\"\n    }\n    field {\n      name: \"parents\"\n      number: 3\n      label: LABEL_REPEATED\n      type: TYPE_STRING\n      json_name: \"parents\"\n    }\n    field {\n      name: \"progress\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_INT64\n      json_name: \"progress\"\n    }\n    field {\n      name: \"total\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_INT64\n      json_name: \"total\"\n    }\n    field {\n      name: \"desc\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".containerd.types.Descriptor\"\n      json_name: \"desc\"\n    }\n  }\n  options {\n    go_package: \"github.com/containerd/containerd/api/types/transfer\"\n  }\n  syntax: \"proto3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Int64Slice in Go\nDESCRIPTION: Defines the Int64Slice structure which wraps []int64 to satisfy the flag.Value interface. It includes methods for creating, getting, setting, and serializing int64 slices.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_23\n\nLANGUAGE: go\nCODE:\n```\ntype Int64Slice struct {\n\t// Has unexported fields.\n}\n\nfunc NewInt64Slice(defaults ...int64) *Int64Slice\n\nfunc (i *Int64Slice) Get() interface{}\n\nfunc (i *Int64Slice) Serialize() string\n\nfunc (i *Int64Slice) Set(value string) error\n\nfunc (i *Int64Slice) String() string\n\nfunc (i *Int64Slice) Value() []int64\n\nfunc (i *Int64Slice) WithSeparatorSpec(spec separatorSpec)\n```\n\n----------------------------------------\n\nTITLE: Adding Scope Tags to Zipkin Exporter in Go\nDESCRIPTION: Adds otel.scope.name and otel.scope.version tags to spans exported by the Zipkin exporter.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\n- Add `otel.scope.name` and `otel.scope.version` tags to spans exported by `go.opentelemetry.io/otel/exporters/zipkin`. (#5108)\n```\n\n----------------------------------------\n\nTITLE: Installing go-deadlock package with Go Get\nDESCRIPTION: Command to install the go-deadlock package using the Go package manager.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sasha-s/go-deadlock/Readme.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/sasha-s/go-deadlock/...\n```\n\n----------------------------------------\n\nTITLE: Defining Namespace Events in Protocol Buffers\nDESCRIPTION: Defines message types for namespace events including NamespaceCreate, NamespaceUpdate, and NamespaceDelete. These messages include fields for namespace name and labels.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_4\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"NamespaceCreate\"\n  field {\n    name: \"name\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"name\"\n  }\n  field {\n    name: \"labels\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.events.NamespaceCreate.LabelsEntry\"\n    json_name: \"labels\"\n  }\n  nested_type {\n    name: \"LabelsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SliceFlagTarget Interface in Go\nDESCRIPTION: This snippet defines the SliceFlagTarget interface, which models a target implementation for use with SliceFlag. It includes methods for setting values, setting destinations, and getting destinations for slice flags.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_29\n\nLANGUAGE: go\nCODE:\n```\ntype SliceFlagTarget[E any] interface {\n\tFlag\n\tRequiredFlag\n\tDocGenerationFlag\n\tVisibleFlag\n\tCategorizableFlag\n\n\t// SetValue should propagate the given slice to the target, ideally as a new value.\n\t// Note that a nil slice should nil/clear any existing value (modelled as ~[]E).\n\tSetValue(slice []E)\n\t// SetDestination should propagate the given slice to the target, ideally as a new value.\n\t// Note that a nil slice should nil/clear any existing value (modelled as ~*[]E).\n\tSetDestination(slice []E)\n\t// GetDestination should return the current value referenced by any destination, or nil if nil/unset.\n\tGetDestination() []E\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Kubernetes Dependencies for Containerd in Go\nDESCRIPTION: This code snippet lists the required Kubernetes packages and their versions for the Containerd project. It includes various components from the Kubernetes ecosystem, specifying the Go version and package paths.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/modules.txt#2025-04-21_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n## explicit; go 1.23.0\nk8s.io/apimachinery/pkg/api/errors\nk8s.io/apimachinery/pkg/api/meta\nk8s.io/apimachinery/pkg/api/resource\nk8s.io/apimachinery/pkg/apis/meta/v1\nk8s.io/apimachinery/pkg/apis/meta/v1/unstructured\nk8s.io/apimachinery/pkg/conversion\nk8s.io/apimachinery/pkg/conversion/queryparams\nk8s.io/apimachinery/pkg/fields\nk8s.io/apimachinery/pkg/labels\nk8s.io/apimachinery/pkg/runtime\nk8s.io/apimachinery/pkg/runtime/schema\nk8s.io/apimachinery/pkg/runtime/serializer\nk8s.io/apimachinery/pkg/runtime/serializer/cbor\nk8s.io/apimachinery/pkg/runtime/serializer/cbor/direct\nk8s.io/apimachinery/pkg/runtime/serializer/cbor/internal/modes\nk8s.io/apimachinery/pkg/runtime/serializer/json\nk8s.io/apimachinery/pkg/runtime/serializer/protobuf\nk8s.io/apimachinery/pkg/runtime/serializer/recognizer\nk8s.io/apimachinery/pkg/runtime/serializer/streaming\nk8s.io/apimachinery/pkg/runtime/serializer/versioning\nk8s.io/apimachinery/pkg/selection\nk8s.io/apimachinery/pkg/types\nk8s.io/apimachinery/pkg/util/dump\nk8s.io/apimachinery/pkg/util/errors\nk8s.io/apimachinery/pkg/util/framer\nk8s.io/apimachinery/pkg/util/httpstream\nk8s.io/apimachinery/pkg/util/httpstream/spdy\nk8s.io/apimachinery/pkg/util/httpstream/wsstream\nk8s.io/apimachinery/pkg/util/intstr\nk8s.io/apimachinery/pkg/util/json\nk8s.io/apimachinery/pkg/util/naming\nk8s.io/apimachinery/pkg/util/net\nk8s.io/apimachinery/pkg/util/portforward\nk8s.io/apimachinery/pkg/util/proxy\nk8s.io/apimachinery/pkg/util/remotecommand\nk8s.io/apimachinery/pkg/util/runtime\nk8s.io/apimachinery/pkg/util/sets\nk8s.io/apimachinery/pkg/util/validation\nk8s.io/apimachinery/pkg/util/validation/field\nk8s.io/apimachinery/pkg/util/wait\nk8s.io/apimachinery/pkg/util/yaml\nk8s.io/apimachinery/pkg/version\nk8s.io/apimachinery/pkg/watch\nk8s.io/apimachinery/third_party/forked/golang/netutil\nk8s.io/apimachinery/third_party/forked/golang/reflect\n# k8s.io/apiserver v0.32.3\n## explicit; go 1.23.0\nk8s.io/apiserver/pkg/endpoints/responsewriter\n# k8s.io/client-go v0.32.3\n## explicit; go 1.23.0\nk8s.io/client-go/features\nk8s.io/client-go/pkg/apis/clientauthentication\nk8s.io/client-go/pkg/apis/clientauthentication/install\nk8s.io/client-go/pkg/apis/clientauthentication/v1\nk8s.io/client-go/pkg/apis/clientauthentication/v1beta1\nk8s.io/client-go/pkg/version\nk8s.io/client-go/plugin/pkg/client/auth/exec\nk8s.io/client-go/rest\nk8s.io/client-go/rest/watch\nk8s.io/client-go/tools/clientcmd/api\nk8s.io/client-go/tools/metrics\nk8s.io/client-go/tools/remotecommand\nk8s.io/client-go/transport\nk8s.io/client-go/transport/spdy\nk8s.io/client-go/transport/websocket\nk8s.io/client-go/util/cert\nk8s.io/client-go/util/connrotation\nk8s.io/client-go/util/exec\nk8s.io/client-go/util/flowcontrol\nk8s.io/client-go/util/keyutil\nk8s.io/client-go/util/workqueue\n# k8s.io/component-base v0.32.3\n## explicit; go 1.23.0\nk8s.io/component-base/logs/logreduction\n# k8s.io/cri-api v0.32.3\n## explicit; go 1.23.0\nk8s.io/cri-api/pkg/apis/runtime/v1\nk8s.io/cri-api/pkg/errors\n# k8s.io/klog/v2 v2.130.1\n## explicit; go 1.18\nk8s.io/klog/v2\nk8s.io/klog/v2/internal/buffer\nk8s.io/klog/v2/internal/clock\nk8s.io/klog/v2/internal/dbg\nk8s.io/klog/v2/internal/serialize\nk8s.io/klog/v2/internal/severity\nk8s.io/klog/v2/internal/sloghandler\n# k8s.io/kubelet v0.32.3\n## explicit; go 1.23.0\nk8s.io/kubelet/pkg/cri/streaming\nk8s.io/kubelet/pkg/cri/streaming/portforward\nk8s.io/kubelet/pkg/cri/streaming/remotecommand\nk8s.io/kubelet/pkg/types\n# k8s.io/utils v0.0.0-20241104100929-3ea5e8cea738\n## explicit; go 1.18\nk8s.io/utils/clock\nk8s.io/utils/clock/testing\nk8s.io/utils/exec\nk8s.io/utils/internal/third_party/forked/golang/net\nk8s.io/utils/net\nk8s.io/utils/ptr\n# sigs.k8s.io/json v0.0.0-20241010143419-9aa6b5e7a4b3\n## explicit; go 1.21\nsigs.k8s.io/json\nsigs.k8s.io/json/internal/golang/encoding/json\n# sigs.k8s.io/structured-merge-diff/v4 v4.4.2\n## explicit; go 1.13\nsigs.k8s.io/structured-merge-diff/v4/value\n# sigs.k8s.io/yaml v1.4.0\n## explicit; go 1.12\nsigs.k8s.io/yaml\nsigs.k8s.io/yaml/goyaml.v2\n# tags.cncf.io/container-device-interface v1.0.1\n## explicit; go 1.20\ntags.cncf.io/container-device-interface/internal/validation\ntags.cncf.io/container-device-interface/internal/validation/k8s\ntags.cncf.io/container-device-interface/pkg/cdi\ntags.cncf.io/container-device-interface/pkg/parser\n# tags.cncf.io/container-device-interface/specs-go v1.0.0\n## explicit; go 1.19\ntags.cncf.io/container-device-interface/specs-go\n# github.com/containerd/containerd/api => ./api\n```\n\n----------------------------------------\n\nTITLE: Installing bbolt via Go Modules\nDESCRIPTION: Commands to install bbolt library and command line utility using go get and go install\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ go get go.etcd.io/bbolt@latest\n$ go run go.etcd.io/bbolt/cmd/bbolt@latest\n$ go install go.etcd.io/bbolt/cmd/bbolt@latest\n```\n\n----------------------------------------\n\nTITLE: Cherry-picking a Commit for Backporting in Git\nDESCRIPTION: This snippet demonstrates the process of cherry-picking a commit from the main branch to a release branch for backporting in containerd. It includes creating a new branch, applying the cherry-picked commit, and pushing the changes.\nSOURCE: https://github.com/containerd/containerd/blob/main/RELEASES.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout -b my-backport-branch release/<major>.<minor>.\n$ git cherry-pick -xsS <commit>\n$ git push -u stevvooe my-backport-branch\n```\n\n----------------------------------------\n\nTITLE: Mapping Between Structs and Maps with Mergo in Go\nDESCRIPTION: Example of using Mergo to map between a struct and a map[string]interface{}, following the same restrictions as Merge().\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/dario.cat/mergo/README.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif err := mergo.Map(&dst, srcMap); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Namespace Service in Protobuf for Containerd\nDESCRIPTION: Defines the Namespaces service with methods for Get, List, Create, Update, and Delete operations on namespaces. It includes request and response message types for each operation.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_24\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Namespaces\"\n  method {\n    name: \"Get\"\n    input_type: \".containerd.services.namespaces.v1.GetNamespaceRequest\"\n    output_type: \".containerd.services.namespaces.v1.GetNamespaceResponse\"\n  }\n  method {\n    name: \"List\"\n    input_type: \".containerd.services.namespaces.v1.ListNamespacesRequest\"\n    output_type: \".containerd.services.namespaces.v1.ListNamespacesResponse\"\n  }\n  method {\n    name: \"Create\"\n    input_type: \".containerd.services.namespaces.v1.CreateNamespaceRequest\"\n    output_type: \".containerd.services.namespaces.v1.CreateNamespaceResponse\"\n  }\n  method {\n    name: \"Update\"\n    input_type: \".containerd.services.namespaces.v1.UpdateNamespaceRequest\"\n    output_type: \".containerd.services.namespaces.v1.UpdateNamespaceResponse\"\n  }\n  method {\n    name: \"Delete\"\n    input_type: \".containerd.services.namespaces.v1.DeleteNamespaceRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WindowUpdate Message for Streaming in Protocol Buffers\nDESCRIPTION: Specifies the WindowUpdate message type with a single field for update value, used in streaming protocols.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_86\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage WindowUpdate {\n  int32 update = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Merging with Override in Mergo\nDESCRIPTION: Example of using Mergo to merge structs while overwriting values using the WithOverride transformer.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/dario.cat/mergo/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := mergo.Merge(&dst, src, mergo.WithOverride); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Kubernetes Master Node with kubeadm\nDESCRIPTION: Execute kubeadm init on the designated master node to initialize the Kubernetes control plane. This command sets up the API server, controller manager, and other core components with the containerd runtime.\nSOURCE: https://github.com/containerd/containerd/blob/main/contrib/ansible/README.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$sudo kubeadm init --skip-preflight-checks\n[kubeadm] WARNING: kubeadm is in beta, please do not use it for production clusters.\n[init] Using Kubernetes version: v1.7.6\n[init] Using Authorization modes: [Node RBAC]\n[preflight] Skipping pre-flight checks\n[kubeadm] WARNING: starting in 1.8, tokens expire after 24 hours by default (if you require a non-expiring token use --token-ttl 0)\n[certificates] Generated CA certificate and key.\n[certificates] Generated API server certificate and key.\n[certificates] API Server serving cert is signed for DNS names [abhi-k8-ubuntu-1 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 172.31.7.230]\n[certificates] Generated API server kubelet client certificate and key.\n[certificates] Generated service account token signing key and public key.\n[certificates] Generated front-proxy CA certificate and key.\n[certificates] Generated front-proxy client certificate and key.\n[certificates] Valid certificates and keys now exist in \"/etc/kubernetes/pki\"\n[kubeconfig] Wrote KubeConfig file to disk: \"/etc/kubernetes/admin.conf\"\n[kubeconfig] Wrote KubeConfig file to disk: \"/etc/kubernetes/kubelet.conf\"\n[kubeconfig] Wrote KubeConfig file to disk: \"/etc/kubernetes/controller-manager.conf\"\n[kubeconfig] Wrote KubeConfig file to disk: \"/etc/kubernetes/scheduler.conf\"\n[apiclient] Created API client, waiting for the control plane to become ready\n[apiclient] All control plane components are healthy after 42.002391 seconds\n[token] Using token: 43a25d.420ff2e06336e4c1\n[apiconfig] Created RBAC rules\n[addons] Applied essential addon: kube-proxy\n[addons] Applied essential addon: kube-dns\n\nYour Kubernetes master has initialized successfully!\n\nTo start using your cluster, you need to run (as a regular user):\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of machines by running the following on each node\nas root:\n\n  kubeadm join --token 43a25d.420ff2e06336e4c1 172.31.7.230:6443\n```\n\n----------------------------------------\n\nTITLE: SliceFlag Generic Type Definition\nDESCRIPTION: Defines a generic SliceFlag type that can be used to create slice-based flags for different types with built-in destination and value handling.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_28\n\nLANGUAGE: go\nCODE:\n```\ntype SliceFlag[T SliceFlagTarget[E], S ~[]E, E any] struct {\n\tTarget      T\n\tValue       S\n\tDestination *S\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Upstream Changes in go-zfs\nDESCRIPTION: This snippet shows how to fetch and merge the latest changes from the upstream master branch into your local master branch, keeping your fork up-to-date.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout master\n$ git fetch upstream\n$ git merge upstream/master\n```\n\n----------------------------------------\n\nTITLE: Using NewContextWithSlogLogger and FromContextAsSlogLogger in Go\nDESCRIPTION: These functions are used to store and retrieve a slog.Logger pointer in a context.Context. They provide interoperability between slog and logr logger implementations.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nNewContextWithSlogLogger(ctx, logger)\nFromContextAsSlogLogger(ctx)\n```\n\n----------------------------------------\n\nTITLE: Defining Int64SliceFlag Structure in Go\nDESCRIPTION: Defines the Int64SliceFlag structure which represents a flag with a *Int64Slice value. It includes various fields for flag properties and methods for flag operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_24\n\nLANGUAGE: go\nCODE:\n```\ntype Int64SliceFlag struct {\n\t// Fields omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated Resource Functions in Go\nDESCRIPTION: The snippet shows the removal of deprecated resource functions and types in the OpenTelemetry Go SDK. It affects the resource package and how resources are created and managed.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_32\n\nLANGUAGE: Go\nCODE:\n```\n- Removed `resource.WithoutBuiltin()`. Use `resource.New()`. (#1810)\n- Unexported types `resource.FromEnv`, `resource.Host`, and `resource.TelemetrySDK`, Use the corresponding `With*()` to use individually. (#1810)\n```\n\n----------------------------------------\n\nTITLE: Automatically Signing Commits\nDESCRIPTION: This snippet explains how to configure git to automatically sign off commits with the user's configured name and email, simplifying the contribution process.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/docker/go-metrics/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngit commit -s\n```\n\n----------------------------------------\n\nTITLE: Mount Configuration Protobuf Definition\nDESCRIPTION: Protobuf message structure defining filesystem mount configurations for containers, including type, source, target, and options.\nSOURCE: https://github.com/containerd/containerd/blob/main/core/runtime/v2/README.md#2025-04-21_snippet_8\n\nLANGUAGE: proto\nCODE:\n```\nmessage Mount {\n\t// Type defines the nature of the mount.\n\tstring type = 1;\n\t// Source specifies the name of the mount. Depending on mount type, this\n\t// may be a volume name or a host path, or even ignored.\n\tstring source = 2;\n\t// Target path in container\n\tstring target = 3;\n\t// Options specifies zero or more fstab style mount options.\n\trepeated string options = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: PathFlag Wrapper Implementation in Go\nDESCRIPTION: A wrapper for the cli.PathFlag type that adds functionality for applying values from input sources. It preserves the original PathFlag behavior while extending it with input source awareness.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_44\n\nLANGUAGE: go\nCODE:\n```\ntype PathFlag struct {\n\t*cli.PathFlag\n\t// Has unexported fields.\n}\n    PathFlag is the flag type that wraps cli.PathFlag to allow for other values\n    to be specified\n\nfunc NewPathFlag(fl *cli.PathFlag) *PathFlag\n    NewPathFlag creates a new PathFlag\n\nfunc (f *PathFlag) Apply(set *flag.FlagSet) error\n    Apply saves the flagSet for later usage calls, then calls the wrapped\n    PathFlag.Apply\n\nfunc (f *PathFlag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n    ApplyInputSourceValue applies a Path value to the flagSet if required\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Config Path in Containerd 1.x\nDESCRIPTION: This TOML configuration sets the registry config path for containerd 1.x using the CRI plugin.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/registry.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[plugins.\"io.containerd.grpc.v1.cri\".registry]\n   config_path = \"/etc/containerd/certs.d\"\n```\n\n----------------------------------------\n\nTITLE: Encoding Go Struct to TOML (v1 vs v2)\nDESCRIPTION: Shows the difference in default struct field ordering when encoding to TOML. V1 emits fields alphabetically, while v2 preserves the order defined in the struct.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype S struct {\n\tB string\n\tA string\n}\n\ndata := S{\n\tB: \"B\",\n\tA: \"A\",\n}\n\nb, _ := tomlv1.Marshal(data)\nfmt.Println(\"v1:\\n\" + string(b))\n\nb, _ = tomlv2.Marshal(data)\nfmt.Println(\"v2:\\n\" + string(b))\n\n// Output:\n// v1:\n// A = \"A\"\n// B = \"B\"\n\n// v2:\n// B = 'B'\n// A = 'A'\n```\n\n----------------------------------------\n\nTITLE: Installing D-Bus Library using go get\nDESCRIPTION: This command is used to install the dbus library. It retrieves the package from the specified GitHub repository and installs it in the Go workspace.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/godbus/dbus/v5/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n```\ngo get github.com/godbus/dbus/v5\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Process Message Type in Protocol Buffers\nDESCRIPTION: Defines a Protocol Buffer message type for process information including container ID, process ID, status, IO streams, terminal flag, and exit information. This is used to track and manage container processes.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_26\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Process\"\n  field {\n    name: \"container_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"containerId\"\n  }\n  field {\n    name: \"id\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  field {\n    name: \"pid\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"pid\"\n  }\n  field {\n    name: \"status\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".containerd.v1.types.Status\"\n    json_name: \"status\"\n  }\n  field {\n    name: \"stdin\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"stdin\"\n  }\n  field {\n    name: \"stdout\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"stdout\"\n  }\n  field {\n    name: \"stderr\"\n    number: 7\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"stderr\"\n  }\n  field {\n    name: \"terminal\"\n    number: 8\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"terminal\"\n  }\n  field {\n    name: \"exit_status\"\n    number: 9\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"exitStatus\"\n  }\n  field {\n    name: \"exited_at\"\n    number: 10\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    options {\n      65010: 1\n      65001: 0\n    }\n    json_name: \"exitedAt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fish Shell Completion Template for CLI Applications in Go\nDESCRIPTION: This variable defines the template for generating Fish shell completions for CLI applications. It includes functions for testing subcommands and generating completions.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nvar FishCompletionTemplate = `# {{ .App.Name }} fish shell completion\n\nfunction __fish_{{ .App.Name }}_no_subcommand --description 'Test if there has been any subcommand yet'\n    for i in (commandline -opc)\n        if contains -- $i{{ range $v := .AllCommands }} {{ $v }}{{ end }}\n            return 1\n        end\n    end\n    return 0\nend\n\n{{ range $v := .Completions }}{{ $v }}\n{{ end }}`\n```\n\n----------------------------------------\n\nTITLE: Version Declaration for Containerd Config\nDESCRIPTION: Basic version header required at the start of the containerd configuration file.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nversion = 3\n```\n\n----------------------------------------\n\nTITLE: Mount Message Type Definition in Proto3\nDESCRIPTION: Defines the Mount message type with fields for type, source, target and options used for container filesystem mounts.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Mount {\n  string type = 1;\n  string source = 2;\n  string target = 3;\n  repeated string options = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PidsRequest Message Type in Protobuf\nDESCRIPTION: This snippet defines the `PidsRequest` message using protobuf. This message is used to request the list of process IDs (PIDs) associated with a task, identified by its ID (`id`). This allows querying for all PIDs within the specified task.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_28\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"PidsRequest\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing Logger with logimpl in Go\nDESCRIPTION: This snippet demonstrates how to initialize a root logger using the logimpl implementation. Required parameters are specified, and the logger can then be used throughout the application.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n\"func main() {\n    // ... other setup code ...\n\n    // Create the \\\"root\\\" logger.  We have chosen the \\\"logimpl\\\" implementation,\n    // which takes some initial parameters and returns a logr.Logger.\n    logger := logimpl.New(param1, param2)\n\n    // ... other setup code ...\n}\"\n```\n\n----------------------------------------\n\nTITLE: Pod RuntimeClass Specification\nDESCRIPTION: Example of specifying a runtime class in a Kubernetes pod specification.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nspec:\n  runtimeClassName: crun\n```\n\n----------------------------------------\n\nTITLE: Formatting Commit Messages in Git\nDESCRIPTION: The snippet provides a template for writing commit messages in a structured format following a specific guideline. The format includes a subject line indicating what changed, followed by an explanation of why the change was made. The format ensures commit messages remain informative and easy to read across various tools. This snippet does not require additional dependencies and inputs are the commit message text itself.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/godbus/dbus/v5/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n<subsystem>: <what changed>\\n<BLANK LINE>\\n<why this change was made>\\n<BLANK LINE>\\n<footer>\n```\n\n----------------------------------------\n\nTITLE: Generating Semantic Conventions using Make\nDESCRIPTION: Command to generate new semantic conventions package using a specified version tag. Requires setting the TAG environment variable before running the make command.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport TAG=\"v1.30.0\" # Change to the release version you are generating.\nmake semconv-generate # Uses the exported TAG.\n```\n\n----------------------------------------\n\nTITLE: Defining RdmaEntry Message Type in Protocol Buffers\nDESCRIPTION: Defines the RdmaEntry message type with fields for device, HCA handles, and HCA objects. This message represents a single RDMA entry with its associated metrics.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup2/stats/metrics.pb.txt#2025-04-21_snippet_2\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"RdmaEntry\"\n  field {\n    name: \"device\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"device\"\n  }\n  field {\n    name: \"hca_handles\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"hcaHandles\"\n  }\n  field {\n    name: \"hca_objects\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"hcaObjects\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests for go-toml in Go\nDESCRIPTION: Command to run tests for go-toml using Go's test tool with race detection enabled.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -race ./...\n```\n\n----------------------------------------\n\nTITLE: Compatibility Test Matrix\nDESCRIPTION: Table showing the compatibility testing suite configurations across different operating systems, Go versions, and architectures used in the CI system.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_37\n\nLANGUAGE: markdown\nCODE:\n```\n| OS      | Go Version | Architecture |\n| ------- | ---------- | ------------ |\n| Ubuntu  | 1.15       | amd64        |\n| Ubuntu  | 1.14       | amd64        |\n| Ubuntu  | 1.15       | 386          |\n| Ubuntu  | 1.14       | 386          |\n| MacOS   | 1.15       | amd64        |\n| MacOS   | 1.14       | amd64        |\n| Windows | 1.15       | amd64        |\n| Windows | 1.14       | amd64        |\n| Windows | 1.15       | 386          |\n| Windows | 1.14       | 386          |\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch and Submitting a Pull Request\nDESCRIPTION: Series of Git commands for creating a new branch, making changes, running tests, committing, and pushing changes to prepare a pull request to the OpenTelemetry Go repository.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b <YOUR_BRANCH_NAME>\n# edit files\n# update changelog\nmake precommit\ngit add -p\ngit commit\ngit push <YOUR_FORK> <YOUR_BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Defining CheckpointOptions Message Type in Protocol Buffer\nDESCRIPTION: Protocol Buffer message definition for checkpoint options in container runtime. It specifies configuration for checkpoint operations including exit behavior, network socket handling, terminal state, file locks, namespace management, cgroups mode, and checkpoint file paths.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/types/runc/options/next.pb.txt#2025-04-21_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"CheckpointOptions\"\n  field {\n    name: \"exit\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"exit\"\n  }\n  field {\n    name: \"open_tcp\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"openTcp\"\n  }\n  field {\n    name: \"external_unix_sockets\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"externalUnixSockets\"\n  }\n  field {\n    name: \"terminal\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"terminal\"\n  }\n  field {\n    name: \"file_locks\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"fileLocks\"\n  }\n  field {\n    name: \"empty_namespaces\"\n    number: 6\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"emptyNamespaces\"\n  }\n  field {\n    name: \"cgroups_mode\"\n    number: 7\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"cgroupsMode\"\n  }\n  field {\n    name: \"image_path\"\n    number: 8\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"imagePath\"\n  }\n  field {\n    name: \"work_path\"\n    number: 9\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"workPath\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GenericFlag Structure in Go\nDESCRIPTION: Defines the GenericFlag structure which represents a flag with a Generic type. It includes various fields for flag properties and methods for flag operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_21\n\nLANGUAGE: go\nCODE:\n```\ntype GenericFlag struct {\n\t// Fields omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Using WithView Option for MeterProvider Configuration\nDESCRIPTION: The WithView Option is used to configure views a MeterProvider will use for all Readers registered with it. This replaces the previous approach of configuring views per Reader.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_25\n\nLANGUAGE: go\nCODE:\n```\n// Configure views for a MeterProvider\nmeterProvider := metric.NewMeterProvider(\n    metric.WithView(customView),\n)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry Format\nDESCRIPTION: Shows the format used for documenting version changes with bullet points, dates, PR references and descriptions\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* Feb 22, 2022 (v1.14.4)\n\t* flate: Fix rare huffman only (-2) corruption. [#503]\n\t* zip: Update deprecated CreateHeaderRaw to correctly call CreateRaw\n\t* zip: don't read data descriptor early\n\t* huff0: Use static decompression buffer up to 30% faster\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Option in Go\nDESCRIPTION: Shows how to create boolean options with default false and true implementations, including WithOption and WithoutOption functions.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype defaultFalseOption bool\n\nfunc (o defaultFalseOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithOption sets a T to have an option included.\nfunc WithOption() Option {\n\treturn defaultFalseOption(true)\n}\n```\n\nLANGUAGE: go\nCODE:\n```\ntype defaultTrueOption bool\n\nfunc (o defaultTrueOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithoutOption sets a T to have Bool option excluded.\nfunc WithoutOption() Option {\n\treturn defaultTrueOption(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Go-Restful Package Using Go Modules\nDESCRIPTION: This snippet illustrates the correct way to import the go-restful package starting from version v3, which supports Go modules.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/emicklei/go-restful/v3/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\trestful \"github.com/emicklei/go-restful/v3\"\n)\n```\n\n----------------------------------------\n\nTITLE: Flag Interface Definitions in Go\nDESCRIPTION: Core interface definitions for flag handling including Flag, DocGenerationFlag, and DocGenerationSliceFlag interfaces.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ntype Flag interface {\n\tfmt.Stringer\n\tApply(*flag.FlagSet) error\n\tNames() []string\n\tIsSet() bool\n}\n\ntype DocGenerationFlag interface {\n\tFlag\n\tTakesValue() bool\n\tGetUsage() string\n\tGetValue() string\n\tGetDefaultText() string\n\tGetEnvVars() []string\n}\n\ntype DocGenerationSliceFlag interface {\n\tDocGenerationFlag\n\tIsSliceFlag() bool\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks Service in Protocol Buffers\nDESCRIPTION: Defines the Tasks service with methods for creating, starting, deleting, and managing container tasks. Each method specifies its input and output message types.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_26\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nservice {\n  name: \"Tasks\"\n  method {\n    name: \"Create\"\n    input_type: \".containerd.services.tasks.v1.CreateTaskRequest\"\n    output_type: \".containerd.services.tasks.v1.CreateTaskResponse\"\n  }\n  method {\n    name: \"Start\"\n    input_type: \".containerd.services.tasks.v1.StartRequest\"\n    output_type: \".containerd.services.tasks.v1.StartResponse\"\n  }\n  method {\n    name: \"Delete\"\n    input_type: \".containerd.services.tasks.v1.DeleteTaskRequest\"\n    output_type: \".containerd.services.tasks.v1.DeleteResponse\"\n  }\n  method {\n    name: \"DeleteProcess\"\n    input_type: \".containerd.services.tasks.v1.DeleteProcessRequest\"\n    output_type: \".containerd.services.tasks.v1.DeleteResponse\"\n  }\n  method {\n    name: \"Get\"\n    input_type: \".containerd.services.tasks.v1.GetRequest\"\n    output_type: \".containerd.services.tasks.v1.GetResponse\"\n  }\n  method {\n    name: \"List\"\n    input_type: \".containerd.services.tasks.v1.ListTasksRequest\"\n    output_type: \".containerd.services.tasks.v1.ListTasksResponse\"\n  }\n  method {\n    name: \"Kill\"\n    input_type: \".containerd.services.tasks.v1.KillRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"Exec\"\n    input_type: \".containerd.services.tasks.v1.ExecProcessRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"ResizePty\"\n    input_type: \".containerd.services.tasks.v1.ResizePtyRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"CloseIO\"\n    input_type: \".containerd.services.tasks.v1.CloseIORequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"Pause\"\n    input_type: \".containerd.services.tasks.v1.PauseTaskRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"Resume\"\n    input_type: \".containerd.services.tasks.v1.ResumeTaskRequest\"\n    output_type: \".google.protobuf.Empty\"\n  }\n  method {\n    name: \"ListPids\"\n    input_type: \".containerd.services.tasks.v1.ListPidsRequest\"\n    output_type: \".containerd.services.tasks.v1.ListPidsResponse\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing to FIFO\nDESCRIPTION: The Write method sends data from a byte array to a FIFO. This method returns the number of bytes written and any error that occurs during the write operation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/fifo/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc (f *fifo) Write(b []byte) (int, error)\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Plugin in Containerd\nDESCRIPTION: TOML configuration example for setting up a custom snapshot proxy plugin in containerd's config file. Demonstrates how to define plugin type and unix socket address.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/PLUGINS.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n\n[proxy_plugins]\n  [proxy_plugins.customsnapshot]\n    type = \"snapshot\"\n    address = \"/var/run/mysnapshotter.sock\"\n```\n\n----------------------------------------\n\nTITLE: XXH64 Hashing: Digest Sum64 Method in Go\nDESCRIPTION: The `Sum64` method of the `Digest` type returns the 64-bit hash value of the data written to the `Digest`. It finalizes the hashing process and produces the final hash value. This method can be called after writing all data to the `Digest`.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (*Digest) Sum64() uint64\n```\n\n----------------------------------------\n\nTITLE: Defining Command Help Template for CLI Applications in Go\nDESCRIPTION: This variable defines the text template for the command help topic in CLI applications. It includes sections for name, usage, category, description, and options.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar CommandHelpTemplate = `NAME:\n   {{template \"helpNameTemplate\" .}}\n\nUSAGE:\n   {{template \"usageTemplate\" .}}{{if .Category}}\n\nCATEGORY:\n   {{.Category}}{{end}}{{if .Description}}\n\nDESCRIPTION:\n   {{template \"descriptionTemplate\" .}}{{end}}{{if .VisibleFlagCategories}}\n\nOPTIONS:{{template \"visibleFlagCategoryTemplate\" .}}{{else if .VisibleFlags}}\n\nOPTIONS:{{template \"visibleFlagTemplate\" .}}{{end}}\n`\n```\n\n----------------------------------------\n\nTITLE: Creating YAML Source from Flag in Go\nDESCRIPTION: Function that creates a closure for generating a YAML InputSourceContext from a specified flag name.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_42\n\nLANGUAGE: go\nCODE:\n```\nfunc NewYamlSourceFromFlagFunc(flagFileName string) func(cCtx *cli.Context) (InputSourceContext, error)\n```\n\n----------------------------------------\n\nTITLE: Defining IOStat Message Type in Protocol Buffers\nDESCRIPTION: Defines the IOStat message type with fields for I/O usage entries and PSI (Pressure Stall Information) stats. The usage field is a repeated list of IOEntry messages.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup2/stats/metrics.pb.txt#2025-04-21_snippet_3\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"IOStat\"\n  field {\n    name: \"usage\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v2.IOEntry\"\n    json_name: \"usage\"\n  }\n  field {\n    name: \"psi\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v2.PSIStats\"\n    json_name: \"psi\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: B3 Header Configuration in Go\nDESCRIPTION: Updates to B3 propagator configuration including header name changes and sampling behavior modifications.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_39\n\nLANGUAGE: go\nCODE:\n```\nb3: 0  // sampling disabled\nb3: 1  // sampling enabled\nb3: d  // debug flag\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for Trace API in Markdown\nDESCRIPTION: This snippet shows how to embed a PkgGoDev badge in Markdown, linking to the Go package documentation for the OpenTelemetry trace package. It provides a visual indicator and quick access to the API documentation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/trace/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace)](https://pkg.go.dev/go.opentelemetry.io/otel/trace)\n```\n\n----------------------------------------\n\nTITLE: Kubelet Configuration for Cgroup Driver\nDESCRIPTION: Configuration for the kubelet to use systemd cgroup driver, typically placed in /var/lib/kubelet/config.yaml.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/config.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: KubeletConfiguration\napiVersion: kubelet.config.k8s.io/v1beta1\ncgroupDriver: \"systemd\"\n```\n\n----------------------------------------\n\nTITLE: Implementing TimestampFlag Struct in Go\nDESCRIPTION: This snippet defines the TimestampFlag struct, which represents a flag with a *Timestamp type. It includes various properties and methods for handling timestamp flags in command-line arguments.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_34\n\nLANGUAGE: go\nCODE:\n```\ntype TimestampFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       *Timestamp\n\tDestination *Timestamp\n\n\tAliases []string\n\tEnvVars []string\n\n\tLayout string\n\n\tTimezone *time.Location\n\n\tAction func(*Context, *time.Time) error\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Metric Semantic Conventions in Go\nDESCRIPTION: Adds metric semantic conventions to the semconv package, with plans to include them in future versions.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\n- Add metric semantic conventions to `go.opentelemetry.io/otel/semconv/v1.24.0`. Future `semconv` packages will include metric semantic conventions as well. (#4528)\n```\n\n----------------------------------------\n\nTITLE: Decoding TOML Array into Go Struct (v1 vs v2)\nDESCRIPTION: Demonstrates the difference in behavior when decoding a TOML array that exceeds the capacity of the destination Go array. V1 returns an error, while v2 ignores the excess values.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype doc struct {\n\tA [2]string\n}\nd := doc{}\nerr := toml.Unmarshal([]byte(`A = [\"one\", \"two\", \"many\"]`), &d)\nfmt.Println(err)\n\n// (1, 1): unmarshal: TOML array length (3) exceeds destination array length (2)\n```\n\nLANGUAGE: go\nCODE:\n```\nerr := toml.Unmarshal([]byte(`A = [\"one\", \"two\", \"many\"]`), &d)\nfmt.Println(\"err:\", err, \"d:\", d)\n// err: <nil> d: {[one two]}\n```\n\n----------------------------------------\n\nTITLE: Setting inotify limits on Linux using sysctl\nDESCRIPTION: This snippet shows how to configure the maximum number of inotify watches and instances per user on Linux. It uses the `sysctl` command to modify these values. These settings influence the capacity of file system monitoring using inotify.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/fsnotify/fsnotify/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n```\n    # The default values on Linux 5.18\n    sysctl fs.inotify.max_user_watches=124983\n    sysctl fs.inotify.max_user_instances=128\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Containerd Diff Service Protocol Buffer Messages\nDESCRIPTION: Protocol Buffer message definitions for containerd's Diff service, which handles filesystem difference operations. Includes ApplyRequest/Response and DiffRequest for applying and calculating filesystem differences.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_13\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"ApplyRequest\"\n  field {\n    name: \"diff\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Descriptor\"\n    json_name: \"diff\"\n  }\n  field {\n    name: \"mounts\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Mount\"\n    json_name: \"mounts\"\n  }\n}\n\nmessage_type {\n  name: \"ApplyResponse\"\n  field {\n    name: \"applied\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Descriptor\"\n    json_name: \"applied\"\n  }\n}\n\nmessage_type {\n  name: \"DiffRequest\"\n  field {\n    name: \"left\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Mount\"\n    json_name: \"left\"\n  }\n  field {\n    name: \"right\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.types.Mount\"\n    json_name: \"right\"\n  }\n  field {\n    name: \"media_type\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"mediaType\"\n  }\n  field {\n    name: \"ref\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"ref\"\n  }\n  field {\n    name: \"labels\"\n    number: 5\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.diff.v1.DiffRequest.LabelsEntry\"\n    json_name: \"labels\"\n  }\n  nested_type {\n    name: \"LabelsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: WithoutCounterSuffixes Option Example\nDESCRIPTION: Shows usage of the WithoutCounterSuffixes option in the Prometheus exporter to disable _total suffix addition to counter metrics.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.io/otel/exporters/prometheus.WithoutCounterSuffixes()\n```\n\n----------------------------------------\n\nTITLE: Git Tag Command Example\nDESCRIPTION: Example command for creating a git tag with release notes for containerd versioning\nSOURCE: https://github.com/containerd/containerd/blob/main/releases/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag --cleanup=whitespace -s v1.0.0 -F /tmp/v1.0.0-notes\n```\n\n----------------------------------------\n\nTITLE: Bad Container Extension Example\nDESCRIPTION: Demonstrates an anti-pattern for extending container functionality by directly modifying container properties.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/client-opts.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// example code\ncontainer, err := client.NewContainer(ctx, id)\n\n// add volumes with their config and bind mounts\ncontainer.Labels[\"volumes\"] = VolumeConfig{}\ncontainer.Spec.Binds  = append({\"/var/lib/docker/volumes...\"})\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Package for Version Service in Protobuf\nDESCRIPTION: This snippet sets the Go package option for the Version service, specifying the import path for the generated Go code.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_37\n\nLANGUAGE: protobuf\nCODE:\n```\noptions {\n  go_package: \"github.com/containerd/containerd/api/services/version/v1;version\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Bucket.Get Method Description in Bolt Database\nDESCRIPTION: The Bucket.Get() method retrieves key/value pairs from a bucket using a cursor. In read-only transactions, it directly references mmap files, while in read-write transactions it may reference mmap files or in-memory nodes.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n- `Bucket.Get()` - Retrieves a key/value pair from a bucket. This uses a cursor\n  to move to the page & position of a key/value pair. During a read-only\n  transaction, the key and value data is returned as a direct reference to the\n  underlying mmap file so there's no allocation overhead. For read-write\n  transactions, this data may reference the mmap file or one of the in-memory\n  node values.\n```\n\n----------------------------------------\n\nTITLE: Configuring Containerd Plugins with Version 2 in TOML\nDESCRIPTION: This snippet demonstrates the configuration format for version 2, which is recommended for containerd 1.x but still supported in 2.x. It shows the version header and the plugin ID format for the cgroups monitoring plugin.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/PLUGINS.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nversion = 2\n\n[plugins]\n  [plugins.\"io.containerd.monitor.v1.cgroups\"]\n    no_prometheus = false\n```\n\n----------------------------------------\n\nTITLE: Implementing Fenced Code Blocks in Go\nDESCRIPTION: Example of a Go function wrapped in fenced code block syntax\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc getTrue() bool {\n    return true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Exemplar Support to Prometheus Exporter in Go\nDESCRIPTION: Adds support for Exemplars in the Prometheus exporter.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\n- Add Exemplar support to `go.opentelemetry.io/otel/exporters/prometheus`. (#5111)\n```\n\n----------------------------------------\n\nTITLE: Adding String Method to Value and KeyValue in Go\nDESCRIPTION: Adds String method to Value and KeyValue types in the log package for string representation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\n- Add `String` method to `Value` and `KeyValue` in `go.opentelemetry.io/otel/log`. (#5117)\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp in Protocol Buffers\nDESCRIPTION: Defines the Timestamp message type in the google.protobuf package. It includes fields for seconds and nanos to represent a point in time with nanosecond precision.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_6\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"Timestamp\"\n  field {\n    name: \"seconds\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"seconds\"\n  }\n  field {\n    name: \"nanos\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_INT32\n    json_name: \"nanos\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VisibleFlag Interface in Go\nDESCRIPTION: Interface definition for flags that can be checked for visibility status. Extends the base Flag interface with visibility checking capability.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_38\n\nLANGUAGE: go\nCODE:\n```\ntype VisibleFlag interface {\n    Flag\n\n    // IsVisible returns true if the flag is not hidden, otherwise false\n    IsVisible() bool\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS Authentication for Docker on Windows (PowerShell)\nDESCRIPTION: PowerShell command to enable TLS authentication for Docker and allow remote access on Windows.\nSOURCE: https://github.com/containerd/containerd/blob/main/integration/images/README.md#2025-04-21_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n# Replace YOUR_SERVER_IP_GOES_HERE with the IP addresses you'll use to access\n# this node. This will be the private IP and VIP/Floating IP of the server.\ndocker run --isolation=hyperv --user=ContainerAdministrator --rm `\n   -e SERVER_NAME=$(hostname) `\n   -e IP_ADDRESSES=127.0.0.1,YOUR_SERVER_IP_GOES_HERE `\n   -v \"c:\\programdata\\docker:c:\\programdata\\docker\" `\n   -v \"$env:USERPROFILE\\.docker:c:\\users\\containeradministrator\\.docker\" stefanscherer/dockertls-windows:2.5.5\n```\n\n----------------------------------------\n\nTITLE: Running TestContainerList\nDESCRIPTION: Example of running the TestContainerList test with root privileges.\nSOURCE: https://github.com/containerd/containerd/blob/main/BUILDING.md#2025-04-21_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nsudo go test -v -run \"TestContainerList\" ./integration/client -test.root\n```\n\n----------------------------------------\n\nTITLE: Implementing Timestamp Struct in Go\nDESCRIPTION: This snippet defines the Timestamp struct, which wraps a time.Time value to satisfy Go's flag interface. It includes methods for setting, getting, and parsing timestamp values.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_33\n\nLANGUAGE: go\nCODE:\n```\ntype Timestamp struct {\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mount Message Type in Protobuf for Containerd\nDESCRIPTION: Defines a Mount message type in the containerd.types package, including fields for type, source, target, and options. This structure is used to represent mount configurations in Containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Mount\"\n  field {\n    name: \"type\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"type\"\n  }\n  field {\n    name: \"source\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"source\"\n  }\n  field {\n    name: \"target\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"target\"\n  }\n  field {\n    name: \"options\"\n    number: 4\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"options\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tmux for Test Cluster Setup\nDESCRIPTION: This commit message example suggests using Tmux to set up a test cluster environment, making it easier to manage and debug by allowing simple start and stop operations. This is a reference example of how commit changes to scripts can be documented and includes information on resolving an associated issue, identified as #38. This example snippet illustrates a commit message rather than executable code.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/godbus/dbus/v5/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nscripts: add the test-cluster command\\n\\nthis uses tmux to setup a test cluster that you can easily kill and\\nstart for debugging.\\n\\nFixes #38\n```\n\n----------------------------------------\n\nTITLE: Adding SeverityUndefined Constant in Go\nDESCRIPTION: Adds SeverityUndefined constant to represent an unset severity level in the log package.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n- Add `SeverityUndefined` `const` to `go.opentelemetry.io/otel/log`.\n  This value represents an unset severity level. (#5072)\n```\n\n----------------------------------------\n\nTITLE: Signing Commits in Git for Docker Contributions\nDESCRIPTION: This snippet explains how to sign off on commits for contributions to Docker projects, ensuring that the contributor certifies their right to submit the patch under the specified open source license. It highlights the importance of using real names in commit messages and provides an example of the sign-off line.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/docker/go-events/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n    Signed-off-by: Joe Smith <joe.smith@email.com>\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIf you set your `user.name` and `user.email` git configs, you can sign your commit automatically with `git commit -s`.\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Versioning Example\nDESCRIPTION: Version number format used in the OpenTelemetry Go SDK releases\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_30\n\nLANGUAGE: text\nCODE:\n```\n[1.2.0] - 2021-11-12\n[1.1.0] - 2021-10-27\n[1.0.1] - 2021-10-01\n[1.0.0] - 2021-09-20\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshot Events in Protocol Buffers\nDESCRIPTION: Defines message types for snapshot events including SnapshotPrepare, SnapshotCommit, and SnapshotRemove. These messages include fields for snapshot key, parent, and name.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_5\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"SnapshotPrepare\"\n  field {\n    name: \"key\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"key\"\n  }\n  field {\n    name: \"parent\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"parent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NewAllowKeysFilter Implementation\nDESCRIPTION: Example of creating an attribute filter that only allows specified keys using the NewAllowKeysFilter function.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.io/otel/attribute.NewAllowKeysFilter()\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using Containerd CLI\nDESCRIPTION: Bash commands for fetching and installing dependencies using the containerd CLI (ctr).\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/managed-opt.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nctr content fetch docker.io/crosbymichael/runc:latest\nctr install docker.io/crosbymichael/runc:latest\n```\n\n----------------------------------------\n\nTITLE: Defining RdmaStat Message Type in Protocol Buffers\nDESCRIPTION: Defines the RdmaStat message type with fields for current and limit RDMA entries. Each entry is represented by the RdmaEntry message type.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup2/stats/metrics.pb.txt#2025-04-21_snippet_1\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"RdmaStat\"\n  field {\n    name: \"current\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v2.RdmaEntry\"\n    json_name: \"current\"\n  }\n  field {\n    name: \"limit\"\n    number: 2\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".io.containerd.cgroups.v2.RdmaEntry\"\n    json_name: \"limit\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Pre-release Make Command\nDESCRIPTION: Make command to create a pre-release branch containing version updates for specified module sets.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake prerelease MODSET=<module set>\n```\n\n----------------------------------------\n\nTITLE: Opening Firewall Port for Docker on Windows (PowerShell)\nDESCRIPTION: PowerShell command to open the firewall port for Docker TLS connections on Windows.\nSOURCE: https://github.com/containerd/containerd/blob/main/integration/images/README.md#2025-04-21_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-NetFirewallRule -Name 'Docker-TLS-In-TCP' -DisplayName 'Docker (TLS)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 2376\n```\n\n----------------------------------------\n\nTITLE: Defining UsageResponse Message Type in Protocol Buffers\nDESCRIPTION: Defines a Protocol Buffer message type for snapshot usage response containing size and inodes fields. This is used to report resource usage metrics for snapshots.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_22\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"UsageResponse\"\n  field {\n    name: \"size\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"size\"\n  }\n  field {\n    name: \"inodes\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"inodes\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: StringSliceFlag Wrapper Implementation in Go\nDESCRIPTION: A wrapper for the cli.StringSliceFlag type that adds functionality for applying values from input sources. It preserves the original StringSliceFlag behavior while extending it with input source awareness.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_46\n\nLANGUAGE: go\nCODE:\n```\ntype StringSliceFlag struct {\n\t*cli.StringSliceFlag\n\t// Has unexported fields.\n}\n    StringSliceFlag is the flag type that wraps cli.StringSliceFlag to allow for\n    other values to be specified\n\nfunc NewStringSliceFlag(fl *cli.StringSliceFlag) *StringSliceFlag\n    NewStringSliceFlag creates a new StringSliceFlag\n\nfunc (f *StringSliceFlag) Apply(set *flag.FlagSet) error\n    Apply saves the flagSet for later usage calls, then calls the wrapped\n    StringSliceFlag.Apply\n\nfunc (f *StringSliceFlag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n    ApplyInputSourceValue applies a StringSlice value to the flagSet if required\n```\n\n----------------------------------------\n\nTITLE: Defining Message Types for Containerd Content API - Protobuf\nDESCRIPTION: This snippet defines various message types, including StatusRequest, WriteContentRequest, and others, necessary for managing content within the containerd services API. Each message type includes fields that specify their structure, data types, and JSON representations. Dependencies include the protobuf definitions for necessary data types.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_15\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"StatusRequest\"\n  field {\n    name: \"ref\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"ref\"\n  }\n}\nmessage_type {\n  name: \"StatusResponse\"\n  field {\n    name: \"status\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.content.v1.Status\"\n    json_name: \"status\"\n  }\n}\nmessage_type {\n  name: \"ListStatusesRequest\"\n  field {\n    name: \"filters\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"filters\"\n  }\n}\nmessage_type {\n  name: \"ListStatusesResponse\"\n  field {\n    name: \"statuses\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.content.v1.Status\"\n    json_name: \"statuses\"\n  }\n}\nmessage_type {\n  name: \"WriteContentRequest\"\n  field {\n    name: \"action\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".containerd.services.content.v1.WriteAction\"\n    json_name: \"action\"\n  }\n  field {\n    name: \"ref\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"ref\"\n  }\n  field {\n    name: \"total\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"total\"\n  }\n  field {\n    name: \"expected\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"expected\"\n  }\n  field {\n    name: \"offset\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"offset\"\n  }\n  field {\n    name: \"data\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_BYTES\n    json_name: \"data\"\n  }\n  field {\n    name: \"labels\"\n    number: 7\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.content.v1.WriteContentRequest.LabelsEntry\"\n    json_name: \"labels\"\n  }\n  nested_type {\n    name: \"LabelsEntry\"\n    field {\n      name: \"key\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"key\"\n    }\n    field {\n      name: \"value\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"value\"\n    }\n    options {\n      map_entry: true\n    }\n  }\n}\nmessage_type {\n  name: \"WriteContentResponse\"\n  field {\n    name: \"action\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_ENUM\n    type_name: \".containerd.services.content.v1.WriteAction\"\n    json_name: \"action\"\n  }\n  field {\n    name: \"started_at\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    json_name: \"startedAt\"\n  }\n  field {\n    name: \"updated_at\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Timestamp\"\n    json_name: \"updatedAt\"\n  }\n  field {\n    name: \"offset\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"offset\"\n  }\n  field {\n    name: \"total\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_INT64\n    json_name: \"total\"\n  }\n  field {\n    name: \"digest\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"digest\"\n  }\n}\nmessage_type {\n  name: \"AbortRequest\"\n  field {\n    name: \"ref\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"ref\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Images with Size Information\nDESCRIPTION: Example output of the dist images command showing image reference, type, digest and total size information for a Redis image.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-03-24.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dist images\nREF                                    TYPE                                                 DIGEST                                                                  SIZE     \ndocker.io/library/redis:latest         application/vnd.docker.distribution.manifest.v2+json sha256:1b358a2b0dc2629af3ed75737e2f07e5b3408eabf76a8fa99606ec0c276a93f8 71.0 MiB\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Prometheus Go Documentation\nDESCRIPTION: Markdown syntax for creating a linked badge to the Prometheus Go client documentation on pkg.go.dev.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/prometheus/client_golang/prometheus/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Go Reference](https://pkg.go.dev/badge/github.com/prometheus/client_golang/prometheus.svg)](https://pkg.go.dev/github.com/prometheus/client_golang/prometheus)\n```\n\n----------------------------------------\n\nTITLE: Testing CNI ADD Command with Failpoint\nDESCRIPTION: Example of executing the CNI ADD command with the failpoint helper script. This demonstrates how the failpoint is triggered and decremented after use, showing the error message from the configured failpoint.\nSOURCE: https://github.com/containerd/containerd/blob/main/integration/failpoint/cmd/cni-bridge-fp/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo CNI_COMMAND=ADD bash /tmp/cni-failpoint-demo-helper.sh\n{\n    \"code\": 999,\n    \"msg\": \"try-again\"\n}\n\n# there is no failpoint for ADD command.\n$ cat /tmp/cni-failpoint.json | jq .\n{\n  \"cmdAdd\": \"0*error(try-again)\",\n  \"cmdDel\": \"2*error(oops)\",\n  \"cmdCheck\": \"1*off->1*panic(sorry)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Verifying Detached PKCS7 Signatures in Go\nDESCRIPTION: Implementation of a function that creates a detached PKCS7 signature for given content using a certificate and private key, then verifies the signature. The function demonstrates the complete workflow of signing data, detaching the signature, and verification process.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/smallstep/pkcs7/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"crypto/rsa\"\n\t\"crypto/x509\"\n\t\"encoding/pem\"\n\t\"fmt\"\n\t\"os\"\n\n    \"github.com/smallstep/pkcs7\"\n)\n\nfunc SignAndDetach(content []byte, cert *x509.Certificate, privkey *rsa.PrivateKey) (signed []byte, err error) {\n\ttoBeSigned, err := NewSignedData(content)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Cannot initialize signed data: %w\", err)\n\t}\n\tif err = toBeSigned.AddSigner(cert, privkey, SignerInfoConfig{}); err != nil {\n\t\treturn fmt.Errorf(\"Cannot add signer: %w\", err)\n\t}\n\n\t// Detach signature, omit if you want an embedded signature\n\ttoBeSigned.Detach()\n\n\tsigned, err = toBeSigned.Finish()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Cannot finish signing data: %w\", err)\n\t}\n\n\t// Verify the signature\n\tpem.Encode(os.Stdout, &pem.Block{Type: \"PKCS7\", Bytes: signed})\n\tp7, err := pkcs7.Parse(signed)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Cannot parse our signed data: %w\", err)\n\t}\n\n\t// since the signature was detached, reattach the content here\n\tp7.Content = content\n\n\tif bytes.Compare(content, p7.Content) != 0 {\n\t\treturn fmt.Errorf(\"Our content was not in the parsed data:\\n\\tExpected: %s\\n\\tActual: %s\", content, p7.Content)\n\t}\n\tif err = p7.Verify(); err != nil {\n\t\treturn fmt.Errorf(\"Cannot verify our signed data: %w\", err)\n\t}\n\n\treturn signed, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging a New Release for go-toml in Git\nDESCRIPTION: Git commands to checkout the v2 branch, create a new tag for version 2.2.0, and push the tag to the remote repository.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout v2\ngit pull\ngit tag v2.2.0\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Buffer Decompression in Go using Zstandard\nDESCRIPTION: Example of how to decompress a Zstandard-compressed buffer in Go. It creates a reusable decoder and provides a function to decompress byte slices.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a reader that caches decompressors.\n// For this operation type we supply a nil Reader.\nvar decoder, _ = zstd.NewReader(nil, zstd.WithDecoderConcurrency(0))\n\n// Decompress a buffer. We don't supply a destination buffer,\n// so it will be allocated by the decoder.\nfunc Decompress(src []byte) ([]byte, error) {\n    return decoder.DecodeAll(src, nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Git Log Command for Changelog Review\nDESCRIPTION: Command to view all commits since the last release tag for changelog verification.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit --no-pager log --pretty=oneline \"<last tag>..HEAD\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch to Fork\nDESCRIPTION: This command pushes the feature branch to your forked repository, preparing it for a pull request submission.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git push origin <feature-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Preventing Interface Implementation Example in Go\nDESCRIPTION: Code example showing interfaces that end-users are prevented from implementing, including options for various OpenTelemetry components like exporters, tracers, and SDK resources.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_36\n\nLANGUAGE: go\nCODE:\n```\n\"otel/exporters/otlp/otlphttp\".Option\n\"otel/exporters/stdout\".Option\n\"otel/oteltest\".Option\n\"otel/trace\".TracerOption\n\"otel/trace\".SpanOption\n\"otel/trace\".EventOption\n\"otel/trace\".LifeCycleOption\n\"otel/trace\".InstrumentationOption\n\"otel/sdk/resource\".Option\n\"otel/sdk/trace\".ParentBasedSamplerOption\n\"otel/sdk/trace\".ReadOnlySpan\n\"otel/sdk/trace\".ReadWriteSpan\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks Service Methods in Protobuf\nDESCRIPTION: This snippet defines the methods for the Tasks service, including Wait and Metrics. It specifies input and output types for each method.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_33\n\nLANGUAGE: protobuf\nCODE:\n```\nmethod {\n  name: \"Wait\"\n  input_type: \".containerd.services.tasks.v1.WaitRequest\"\n  output_type: \".containerd.services.tasks.v1.WaitResponse\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Structure in Go\nDESCRIPTION: Demonstrates how to create a configuration struct for holding options, typically unexported unless user extension is expected.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// config contains configuration options for a thing.\ntype config struct {\n\t// options ...\n}\n```\n\n----------------------------------------\n\nTITLE: Loading containerd CLI Autocompletion in Bash\nDESCRIPTION: Shell command to enable autocompletion features for the containerd CLI tool (ctr) in bash environments. This needs to be sourced into the shell environment to enable command completion functionality.\nSOURCE: https://github.com/containerd/containerd/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsource ./contrib/autocomplete/ctr\n```\n\n----------------------------------------\n\nTITLE: Any Type Definition in Protocol Buffers\nDESCRIPTION: Defines the Any message type that can hold arbitrary protocol messages with type information and binary data.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\npackage google.protobuf;\n\nmessage Any {\n  string type_url = 1;\n  bytes value = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Global LoggerProvider Management in Go\nDESCRIPTION: Adds a new package to manage the global LoggerProvider, with plans to migrate functionality in the future.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n- Add `go.opentelemetry.io/otel/log/global` to manage the global `LoggerProvider`.\n  This package is provided with the anticipation that all functionality will be migrate to `go.opentelemetry.io/otel` when `go.opentelemetry.io/otel/log` stabilizes.\n  At which point, users will be required to migrage their code, and this package will be deprecated then removed. (#5085)\n```\n\n----------------------------------------\n\nTITLE: Testing CNI DEL Command with Multiple Failpoints\nDESCRIPTION: Example of executing the CNI DEL command with multiple configured failpoints. This demonstrates how the plugin handles sequential failures and updates the failpoint state after each execution.\nSOURCE: https://github.com/containerd/containerd/blob/main/integration/failpoint/cmd/cni-bridge-fp/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo CNI_COMMAND=ADD bash /tmp/cni-failpoint-demo-helper.sh\n...\n\n$ sudo CNI_COMMAND=DEL bash /tmp/cni-failpoint-demo-helper.sh\n{\n    \"code\": 999,\n    \"msg\": \"oops\"\n}\n\n$ sudo CNI_COMMAND=DEL bash /tmp/cni-failpoint-demo-helper.sh\n{\n    \"code\": 999,\n    \"msg\": \"oops\"\n}\n\n$ cat /tmp/cni-failpoint.json | jq .\n{\n  \"cmdAdd\": \"0*error(try-again)\",\n  \"cmdDel\": \"0*error(oops)\",\n  \"cmdCheck\": \"1*off->1*panic(sorry)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Package Variables in Go\nDESCRIPTION: This snippet defines package-level variables used for suggestion functionality and templates. It includes flags for suggestions and a template for 'Did you mean' suggestions.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar (\n\tSuggestFlag               SuggestFlagFunc    = nil // initialized in suggestions.go unless built with urfave_cli_no_suggest\n\tSuggestCommand            SuggestCommandFunc = nil // initialized in suggestions.go unless built with urfave_cli_no_suggest\n\tSuggestDidYouMeanTemplate string             = suggestDidYouMeanTemplate\n)\n```\n\n----------------------------------------\n\nTITLE: UintFlag Wrapper Implementation in Go\nDESCRIPTION: A wrapper for the cli.UintFlag type that adds functionality for applying values from input sources. It preserves the original UintFlag behavior while extending it with input source awareness.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_48\n\nLANGUAGE: go\nCODE:\n```\ntype UintFlag struct {\n\t*cli.UintFlag\n\t// Has unexported fields.\n}\n    UintFlag is the flag type that wraps cli.UintFlag to allow for other values\n    to be specified\n\nfunc NewUintFlag(fl *cli.UintFlag) *UintFlag\n    NewUintFlag creates a new UintFlag\n\nfunc (f *UintFlag) Apply(set *flag.FlagSet) error\n    Apply saves the flagSet for later usage calls, then calls the wrapped\n    UintFlag.Apply\n\nfunc (f *UintFlag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Package for Tasks Service in Protobuf\nDESCRIPTION: This snippet sets the Go package option for the Tasks service, specifying the import path for the generated Go code.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_34\n\nLANGUAGE: protobuf\nCODE:\n```\noptions {\n  go_package: \"github.com/containerd/containerd/api/services/tasks/v1;tasks\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Any Message Type in Protocol Buffers\nDESCRIPTION: Defines the 'Any' message type in the google.protobuf package. It includes fields for type_url and value, along with various language-specific options.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_0\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"Any\"\n  field {\n    name: \"type_url\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"typeUrl\"\n  }\n  field {\n    name: \"value\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_BYTES\n    json_name: \"value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Version History in Markdown\nDESCRIPTION: Comprehensive changelog entries detailing the evolution of the Logrus logging library, including version numbers, bug fixes, features, and code quality improvements.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sirupsen/logrus/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 1.8.1\nCode quality:\n  * move magefile in its own subdir/submodule to remove magefile dependency on logrus consumer\n  * improve timestamp format documentation\n\nFixes:\n  * fix race condition on logger hooks\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH and Firewall on Windows (PowerShell)\nDESCRIPTION: PowerShell commands to start and configure SSH service, and open the firewall port for SSH on Windows.\nSOURCE: https://github.com/containerd/containerd/blob/main/integration/images/README.md#2025-04-21_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nStart-Service sshd\nSet-Service -Name sshd -StartupType 'Automatic'\n\nNew-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for go-toml in Go\nDESCRIPTION: Command to execute benchmarks for go-toml using Go's benchmark system, running each benchmark 10 times.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./... -bench=. -count=10\n```\n\n----------------------------------------\n\nTITLE: Package Path Imports for OpenTelemetry Go\nDESCRIPTION: Package import paths referenced in the changes showing key components of the OpenTelemetry Go SDK\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_29\n\nLANGUAGE: go\nCODE:\n```\n\"go.opentelemetry.io/otel/exporter/otel/otlpmetric/otlpmetrichttp\"\n\"go.opentelemetry.io/otel/exporter/otel/otlptrace/otlptracegrpc\"\n\"go.opentelemetry.io/otel/exporter/otel/otlpmetric/otlpmetricgrpc\"\n\"go.opentelemetry.io/otel/propagation\"\n\"go.opentelemetry.io/otel/semconv/v1.7.0\"\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Issue Reference\nDESCRIPTION: This command shows how to commit changes with a message that includes the issue number, improving traceability between issues and code changes.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -m \"Issue #<issue-number> - <commit-message>\"\n```\n\n----------------------------------------\n\nTITLE: Adding WithProxy Option for OTLP Exporters in Go\nDESCRIPTION: Adds WithProxy option to OTLP metric and trace HTTP exporters to support proxying.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n- Add `WithProxy` option in `go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp`. (#4906)\n- Add `WithProxy` option in `go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlptracehttp`. (#4906)\n```\n\n----------------------------------------\n\nTITLE: DurationFlag Structure and Methods in Go\nDESCRIPTION: Implementation of a duration flag type with associated methods for flag manipulation and value access.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype DurationFlag struct {\n\tName string\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\tValue       time.Duration\n\tDestination *time.Duration\n\tAliases []string\n\tEnvVars []string\n\tAction func(*Context, time.Duration) error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Core System Call Function Interfaces in Assembly\nDESCRIPTION: The three main entry points for system calls implemented in hand-written assembly. These functions handle system call dispatching with varying numbers of arguments and different scheduler behaviors.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/golang.org/x/sys/unix/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\nfunc Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)\nfunc RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n```\n\n----------------------------------------\n\nTITLE: Updating containerd Configuration\nDESCRIPTION: Commands to update the containerd configuration if encountering errors with crictl.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/crictl.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ mv /etc/containerd/config.toml /etc/containerd/config.bak\n$ containerd config default > /etc/containerd/config.toml\n```\n\n----------------------------------------\n\nTITLE: Containerd Go Package Option Definition in Protocol Buffers\nDESCRIPTION: Configuration option specifying the Go package path for the tasks service. This defines where the generated Go code will be placed in the containerd codebase.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_33\n\nLANGUAGE: protobuf\nCODE:\n```\noptions {\n  go_package: \"github.com/containerd/containerd/api/services/tasks/v1;tasks\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Image Manifest by Digest Using dist Command in Bash\nDESCRIPTION: This Bash command chain fetches a Docker image manifest by its computed digest. It first retrieves the manifest, calculates its SHA256 hash, and then uses that hash to fetch the same content, demonstrating equivalence between tag-based and digest-based fetching.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-01-27.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./dist fetch docker.io/library/redis sha256:$(./dist fetch docker.io/library/redis latest mediatype:application/vnd.docker.distribution.manifest.v2+json | shasum -a256)\n```\n\n----------------------------------------\n\nTITLE: Tagging an Image using ctr-enc\nDESCRIPTION: This command tags the encrypted image with a new name and location, pointing to the local Docker registry.  Allows pushing to a local registry. Requires `ctr-enc` with configured containerd socket.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/imgcrypt/v2/README.md#2025-04-21_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\n# $CTR images tag bash.enc:latest localhost:5000/bash.enc:latest\n```\n\n----------------------------------------\n\nTITLE: Adding Enabled Method to Logger Interface in Go\nDESCRIPTION: Adds Enabled method to the Logger interface to allow checking if a log record will be emitted.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n- The `Enabled` method is added to the `Logger` interface in `go.opentelemetry.io/otel/log`.\n  This method is used to notify users if a log record will be emitted or not. (#5071)\n```\n\n----------------------------------------\n\nTITLE: Status Message Definition in Protocol Buffers\nDESCRIPTION: Defines a Status message type with code, message, and details fields. This is used for error reporting in the API and includes options for various programming language implementations.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_15\n\nLANGUAGE: protobuf\nCODE:\n```\n  dependency: \"google/protobuf/any.proto\"\n  message_type {\n    name: \"Status\"\n    field {\n      name: \"code\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_INT32\n      json_name: \"code\"\n    }\n    field {\n      name: \"message\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"message\"\n    }\n    field {\n      name: \"details\"\n      number: 3\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Any\"\n      json_name: \"details\"\n    }\n  }\n  options {\n    java_package: \"com.google.rpc\"\n    java_outer_classname: \"StatusProto\"\n    java_multiple_files: true\n    go_package: \"rpc\"\n    objc_class_prefix: \"RPC\"\n  }\n  syntax: \"proto3\"\n```\n\n----------------------------------------\n\nTITLE: Task Message Types - Request/Response Definitions\nDESCRIPTION: Message type definitions for various task operations including CreateTask, Delete, Stats, Connect and other container management operations. Each message type defines the structure of request and response data.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_30\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"CreateTaskRequest\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"bundle\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"bundle\"\n    }\n    // ... other fields ...\n}\n```\n\n----------------------------------------\n\nTITLE: Milestones URL Example in Markdown\nDESCRIPTION: Markdown link to view all project milestones in the containerd repository\nSOURCE: https://github.com/containerd/containerd/blob/main/ROADMAP.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[View Milestones](https://github.com/containerd/containerd/milestones)\n```\n\n----------------------------------------\n\nTITLE: Defining Cgroups Metrics Protocol Buffer Messages in Containerd\nDESCRIPTION: Defines the Protocol Buffer schema for containerd's cgroups metrics. This includes message types for various resource statistics including hugetlb, pids, CPU, memory, block I/O, RDMA, and network resources. Each message contains fields representing resource usage and limits for container resource monitoring.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"github.com/containerd/cgroups/cgroup1/stats/metrics.proto\"\n  package: \"io.containerd.cgroups.v1\"\n  message_type {\n    name: \"Metrics\"\n    field {\n      name: \"hugetlb\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.HugetlbStat\"\n      json_name: \"hugetlb\"\n    }\n    field {\n      name: \"pids\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.PidsStat\"\n      json_name: \"pids\"\n    }\n    field {\n      name: \"cpu\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.CPUStat\"\n      json_name: \"cpu\"\n    }\n    field {\n      name: \"memory\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.MemoryStat\"\n      json_name: \"memory\"\n    }\n    field {\n      name: \"blkio\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOStat\"\n      json_name: \"blkio\"\n    }\n    field {\n      name: \"rdma\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.RdmaStat\"\n      json_name: \"rdma\"\n    }\n    field {\n      name: \"network\"\n      number: 7\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.NetworkStat\"\n      json_name: \"network\"\n    }\n    field {\n      name: \"cgroup_stats\"\n      number: 8\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.CgroupStats\"\n      json_name: \"cgroupStats\"\n    }\n    field {\n      name: \"memory_oom_control\"\n      number: 9\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.MemoryOomControl\"\n      json_name: \"memoryOomControl\"\n    }\n  }\n  message_type {\n    name: \"HugetlbStat\"\n    field {\n      name: \"usage\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"usage\"\n    }\n    field {\n      name: \"max\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"max\"\n    }\n    field {\n      name: \"failcnt\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"failcnt\"\n    }\n    field {\n      name: \"pagesize\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"pagesize\"\n    }\n  }\n  message_type {\n    name: \"PidsStat\"\n    field {\n      name: \"current\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"current\"\n    }\n    field {\n      name: \"limit\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"limit\"\n    }\n  }\n  message_type {\n    name: \"CPUStat\"\n    field {\n      name: \"usage\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.CPUUsage\"\n      json_name: \"usage\"\n    }\n    field {\n      name: \"throttling\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.Throttle\"\n      json_name: \"throttling\"\n    }\n  }\n  message_type {\n    name: \"CPUUsage\"\n    field {\n      name: \"total\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"total\"\n    }\n    field {\n      name: \"kernel\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"kernel\"\n    }\n    field {\n      name: \"user\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"user\"\n    }\n    field {\n      name: \"per_cpu\"\n      number: 4\n      label: LABEL_REPEATED\n      type: TYPE_UINT64\n      json_name: \"perCpu\"\n    }\n  }\n  message_type {\n    name: \"Throttle\"\n    field {\n      name: \"periods\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"periods\"\n    }\n    field {\n      name: \"throttled_periods\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"throttledPeriods\"\n    }\n    field {\n      name: \"throttled_time\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"throttledTime\"\n    }\n  }\n  message_type {\n    name: \"MemoryStat\"\n    field {\n      name: \"cache\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"cache\"\n    }\n    field {\n      name: \"rss\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"rss\"\n    }\n    field {\n      name: \"rss_huge\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"rssHuge\"\n    }\n    field {\n      name: \"mapped_file\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"mappedFile\"\n    }\n    field {\n      name: \"dirty\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"dirty\"\n    }\n    field {\n      name: \"writeback\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"writeback\"\n    }\n    field {\n      name: \"pg_pg_in\"\n      number: 7\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"pgPgIn\"\n    }\n    field {\n      name: \"pg_pg_out\"\n      number: 8\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"pgPgOut\"\n    }\n    field {\n      name: \"pg_fault\"\n      number: 9\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"pgFault\"\n    }\n    field {\n      name: \"pg_maj_fault\"\n      number: 10\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"pgMajFault\"\n    }\n    field {\n      name: \"inactive_anon\"\n      number: 11\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"inactiveAnon\"\n    }\n    field {\n      name: \"active_anon\"\n      number: 12\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"activeAnon\"\n    }\n    field {\n      name: \"inactive_file\"\n      number: 13\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"inactiveFile\"\n    }\n    field {\n      name: \"active_file\"\n      number: 14\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"activeFile\"\n    }\n    field {\n      name: \"unevictable\"\n      number: 15\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"unevictable\"\n    }\n    field {\n      name: \"hierarchical_memory_limit\"\n      number: 16\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"hierarchicalMemoryLimit\"\n    }\n    field {\n      name: \"hierarchical_swap_limit\"\n      number: 17\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"hierarchicalSwapLimit\"\n    }\n    field {\n      name: \"total_cache\"\n      number: 18\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalCache\"\n    }\n    field {\n      name: \"total_rss\"\n      number: 19\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalRss\"\n    }\n    field {\n      name: \"total_rss_huge\"\n      number: 20\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalRssHuge\"\n    }\n    field {\n      name: \"total_mapped_file\"\n      number: 21\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalMappedFile\"\n    }\n    field {\n      name: \"total_dirty\"\n      number: 22\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalDirty\"\n    }\n    field {\n      name: \"total_writeback\"\n      number: 23\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalWriteback\"\n    }\n    field {\n      name: \"total_pg_pg_in\"\n      number: 24\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalPgPgIn\"\n    }\n    field {\n      name: \"total_pg_pg_out\"\n      number: 25\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalPgPgOut\"\n    }\n    field {\n      name: \"total_pg_fault\"\n      number: 26\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalPgFault\"\n    }\n    field {\n      name: \"total_pg_maj_fault\"\n      number: 27\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalPgMajFault\"\n    }\n    field {\n      name: \"total_inactive_anon\"\n      number: 28\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalInactiveAnon\"\n    }\n    field {\n      name: \"total_active_anon\"\n      number: 29\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalActiveAnon\"\n    }\n    field {\n      name: \"total_inactive_file\"\n      number: 30\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalInactiveFile\"\n    }\n    field {\n      name: \"total_active_file\"\n      number: 31\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalActiveFile\"\n    }\n    field {\n      name: \"total_unevictable\"\n      number: 32\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalUnevictable\"\n    }\n    field {\n      name: \"usage\"\n      number: 33\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.MemoryEntry\"\n      json_name: \"usage\"\n    }\n    field {\n      name: \"swap\"\n      number: 34\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.MemoryEntry\"\n      json_name: \"swap\"\n    }\n    field {\n      name: \"kernel\"\n      number: 35\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.MemoryEntry\"\n      json_name: \"kernel\"\n    }\n    field {\n      name: \"kernel_tcp\"\n      number: 36\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.MemoryEntry\"\n      json_name: \"kernelTcp\"\n    }\n  }\n  message_type {\n    name: \"MemoryEntry\"\n    field {\n      name: \"limit\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"limit\"\n    }\n    field {\n      name: \"usage\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n```\n\n----------------------------------------\n\nTITLE: Defining Version Service Message in Protobuf\nDESCRIPTION: This snippet defines the VersionResponse message type for the Version service, including fields for version and revision information.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_35\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"VersionResponse\"\n  field {\n    name: \"version\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"version\"\n  }\n  field {\n    name: \"revision\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"revision\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Prometheus Project (Bash)\nDESCRIPTION: This command runs all the tests in the Prometheus project. It's recommended to run this before committing and pushing changes.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake test         # Make sure all the tests pass before you commit and push :)\n```\n\n----------------------------------------\n\nTITLE: PKCS#11 Basic Usage Example in Go\nDESCRIPTION: This code snippet provides a skeleton program demonstrating basic PKCS#11 operations in Go. It includes initialization, session management, login, and a simple SHA-1 hash operation. The example uses SoftHSM as the PKCS#11 module.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/miekg/pkcs11/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\np := pkcs11.New(\"/usr/lib/softhsm/libsofthsm2.so\")\nerr := p.Initialize()\nif err != nil {\n    panic(err)\n}\n\ndefer p.Destroy()\ndefer p.Finalize()\n\nslots, err := p.GetSlotList(true)\nif err != nil {\n    panic(err)\n}\n\nsession, err := p.OpenSession(slots[0], pkcs11.CKF_SERIAL_SESSION|pkcs11.CKF_RW_SESSION)\nif err != nil {\n    panic(err)\n}\ndefer p.CloseSession(session)\n\nerr = p.Login(session, pkcs11.CKU_USER, \"1234\")\nif err != nil {\n    panic(err)\n}\ndefer p.Logout(session)\n\np.DigestInit(session, []*pkcs11.Mechanism{pkcs11.NewMechanism(pkcs11.CKM_SHA_1, nil)})\nhash, err := p.Digest(session, []byte(\"this is a string\"))\nif err != nil {\n    panic(err)\n}\n\nfor _, d := range hash {\n        fmt.Printf(\"%x\", d)\n}\nfmt.Println()\n```\n\n----------------------------------------\n\nTITLE: Creating and pushing a feature branch\nDESCRIPTION: Git commands to create a new feature branch, make and commit changes, and push the branch to your fork. This prepares your contributions for a pull request.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b feature\n# edit files\n$ git commit\n$ git push fork feature\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up go-zfs Repository\nDESCRIPTION: These commands demonstrate how to clone the forked go-zfs repository, navigate to the project directory, and add the upstream remote for synchronization with the original repository.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:<your-username>/go-zfs.git\n$ cd go-zfs\n$ git remote add upstream https://github.com/mistifyio/go-zfs.git\n```\n\n----------------------------------------\n\nTITLE: Implementing Float64Slice in Go\nDESCRIPTION: Defines the Float64Slice structure which wraps []float64 to satisfy the flag.Value interface. It includes methods for creating, getting, setting, and serializing float64 slices.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_18\n\nLANGUAGE: go\nCODE:\n```\ntype Float64Slice struct {\n\t// Has unexported fields.\n}\n\nfunc NewFloat64Slice(defaults ...float64) *Float64Slice\n\nfunc (f *Float64Slice) Get() interface{}\n\nfunc (f *Float64Slice) Serialize() string\n\nfunc (f *Float64Slice) Set(value string) error\n\nfunc (f *Float64Slice) String() string\n\nfunc (f *Float64Slice) Value() []float64\n\nfunc (f *Float64Slice) WithSeparatorSpec(spec separatorSpec)\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenTelemetry Go with Go Modules\nDESCRIPTION: Command to fetch the OpenTelemetry Go module using Go's module system. This places the project in the standard GOPATH location.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo get -d go.opentelemetry.io/otel\n```\n\n----------------------------------------\n\nTITLE: SoftHSM2 Token Initialization and PKCS#11 Example Execution\nDESCRIPTION: This bash example shows how to initialize a SoftHSM2 token and execute the Go PKCS#11 example program. It demonstrates creating a token with a specific PIN and then using that token via a PKCS#11 URI to perform cryptographic operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/stefanberger/go-pkcs11uri/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo softhsm2-util --init-token --slot 1 --label test --pin 1234 --so-pin 1234\nThe token has been initialized and is reassigned to slot 2053753261\n$ go build ./...\n$ sudo ./pkcs11-example 'pkcs11:slot-id=2053753261?module-path=/usr/lib64/pkcs11/libsofthsm2.so&pin-value=1234'\n517592df8fec3ad146a79a9af153db2a4d784ec5\n```\n\n----------------------------------------\n\nTITLE: Version Service Go Package Option in Protocol Buffers\nDESCRIPTION: Configuration option defining the Go package path for the version service. This specifies where the generated Go code will be placed in the containerd codebase.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_36\n\nLANGUAGE: protobuf\nCODE:\n```\noptions {\n  go_package: \"github.com/containerd/containerd/api/services/version/v1;version\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies in Prometheus Project (Bash)\nDESCRIPTION: These commands demonstrate how to add new dependencies to the Prometheus project using Go modules. It shows how to get the latest tagged release or a specific version of a module.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Pick the latest tagged release.\ngo get example.com/some/module/pkg\n\n# Pick a specific version.\ngo get example.com/some/module/pkg@vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: CRI Integration Design Document Structure\nDESCRIPTION: Document structure showing the organization of containerd CRI integration design including core sections like container lifecycle, logging, streaming, networking and metrics.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/cri/proposal.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nContainerd CRI Integration\n=============\nAuthor: Lantao Liu (@random-liu)\n## Abstract\nThis proposal aims to integrate [containerd](https://github.com/containerd/containerd) with Kubelet against the [container runtime interface (CRI)](https://github.com/kubernetes/kubernetes/blob/v1.6.0/pkg/kubelet/api/v1alpha1/runtime/api.proto).\n```\n\n----------------------------------------\n\nTITLE: Package Import Updates in Go\nDESCRIPTION: Multiple package dependency version updates, including gojq, opentracing-go, golangci-lint and other core dependencies.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_38\n\nLANGUAGE: go\nCODE:\n```\ngithub.com/itchyny/gojq v0.10.3 -> v0.10.4\ngithub.com/opentracing/opentracing-go v1.1.1 -> v1.2.0\ngithub.com/golangci/golangci-lint v1.27.0 -> v1.28.1\n```\n\n----------------------------------------\n\nTITLE: Defining Version Service Package and Options in Protobuf\nDESCRIPTION: This snippet specifies the Go package for the Version service, sets the syntax to proto3, and includes dependencies and a weak dependency declaration.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_30\n\nLANGUAGE: protobuf\nCODE:\n```\npackage: \"containerd.services.version.v1\"\ndependency: \"google/protobuf/empty.proto\"\ndependency: \"gogoproto/gogo.proto\"\noptions {\n  go_package: \"github.com/containerd/containerd/api/services/version/v1;version\"\n}\nweak_dependency: 1\nsyntax: \"proto3\"\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Summary Metrics in OTLP Exporters\nDESCRIPTION: Adds support for Summary metrics in the OTLP metric exporters for both HTTP and gRPC.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n- Add support for `Summary` metrics in the `go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp` and `go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc` exporters. (#5100)\n```\n\n----------------------------------------\n\nTITLE: Roadmap Search URL Example in Markdown\nDESCRIPTION: Markdown link to search for open issues labeled as roadmap items in the containerd repository\nSOURCE: https://github.com/containerd/containerd/blob/main/ROADMAP.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Search Roadmap Items](https://github.com/containerd/containerd/issues?q=is%3Aopen+is%3Aissue+label%3Aroadmap)\n```\n\n----------------------------------------\n\nTITLE: Installing a Local Go Documentation Server\nDESCRIPTION: Commands to install and run the pkgsite tool, which provides a local server for viewing Go documentation for the project, useful for previewing documentation changes.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngo install golang.org/x/pkgsite/cmd/pkgsite@latest\npkgsite\n```\n\n----------------------------------------\n\nTITLE: Installing OpenCensus Go Library\nDESCRIPTION: Command to install the OpenCensus Go library using go get. This downloads the latest version of the library from the repository.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opencensus.io/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get -u go.opencensus.io\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenTelemetry Go with Git\nDESCRIPTION: Alternative command to clone the repository directly using Git, which places the project in the current working directory rather than GOPATH.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Contributing Generator Attribution Link\nDESCRIPTION: Reference link to the contributing-gen project used as a base for this guide\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/dario.cat/mergo/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Make your own](https://github.com/bttger/contributing-gen)\n```\n\n----------------------------------------\n\nTITLE: Implementing StringSliceFlag Struct in Go\nDESCRIPTION: This snippet defines the StringSliceFlag struct, which represents a flag with a *StringSlice type. It includes various properties and methods for handling string slice flags in command-line arguments.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_32\n\nLANGUAGE: go\nCODE:\n```\ntype StringSliceFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       *StringSlice\n\tDestination *StringSlice\n\n\tAliases []string\n\tEnvVars []string\n\n\tTakesFile bool\n\n\tAction func(*Context, []string) error\n\n\tKeepSpace bool\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Fork Remote to OpenTelemetry Go\nDESCRIPTION: Command to add your personal GitHub fork as a remote to the local repository, enabling you to push changes to your fork for pull requests.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add <YOUR_FORK> git@github.com:<YOUR_GITHUB_USERNAME>/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Boolean Flag Structure Definition in Go\nDESCRIPTION: Structure definition for boolean command-line flags with properties for name, category, usage, default values, and related metadata.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype BoolFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       bool\n\tDestination *bool\n\n\tAliases []string\n\tEnvVars []string\n\n\tCount *int\n\n\tDisableDefaultText bool\n\n\tAction func(*Context, bool) error\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Project Milestones Link - Markdown\nDESCRIPTION: Link to project milestones page\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-01-13.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* https://github.com/containerd/containerd/milestones\n```\n\n----------------------------------------\n\nTITLE: Signing Your Git Commit Messages\nDESCRIPTION: This snippet provides the command to sign off contributions in the git commit message, which certifies authorship and rights to submit code under an open-source license.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/docker/go-metrics/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Release Tool Command Example\nDESCRIPTION: Command example for generating release notes using the containerd release tool\nSOURCE: https://github.com/containerd/containerd/blob/main/releases/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrelease-tool -r -g -d -n -t v1.0.0 ./releases/v1.0.0.toml > /tmp/v1.0.0-notes\n```\n\n----------------------------------------\n\nTITLE: Issue Search Link in Markdown\nDESCRIPTION: URL reference for searching bug-labeled issues in the project repository\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/dario.cat/mergo/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[bug tracker](https://github.com/imdario/mergoissues?q=label%3Abug)\n```\n\n----------------------------------------\n\nTITLE: Defining Task Service Package and Syntax in Protocol Buffers\nDESCRIPTION: This snippet defines the go package path for the Task service API and specifies the Protocol Buffers syntax version as proto3. This information is used by code generators when creating language-specific implementations.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_34\n\nLANGUAGE: protobuf\nCODE:\n```\n  options {\n    go_package: \"github.com/containerd/containerd/api/runtime/task/v3;task\"\n  }\n  syntax: \"proto3\"\n```\n\n----------------------------------------\n\nTITLE: Updating HTTP Attribute Generation in OpenTelemetry Go SDK\nDESCRIPTION: This change modifies how the http.url attribute is generated by HTTPClientAttributesFromHTTPRequest. It removes sensitive information from the URL.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_34\n\nLANGUAGE: Go\nCODE:\n```\n- The `http.url` attribute generated by `HTTPClientAttributesFromHTTPRequest` will no longer include username or password information. (#1919)\n```\n\n----------------------------------------\n\nTITLE: Verifying Code Style for containerd\nDESCRIPTION: This command uses the project's makefile to check if the code matches the expected style guidelines for the containerd project.\nSOURCE: https://github.com/containerd/containerd/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake check\n```\n\n----------------------------------------\n\nTITLE: Defining ProcessDetails Message Type in Protocol Buffer\nDESCRIPTION: Protocol Buffer message definition for process details within the containerd runtime. It currently only contains an exec_id field which identifies an execution instance within a container.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/types/runc/options/next.pb.txt#2025-04-21_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"ProcessDetails\"\n  field {\n    name: \"exec_id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"execId\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Containerd Tasks Service Definition\nDESCRIPTION: Protocol Buffer service definition for Containerd Tasks API that provides methods for container lifecycle management including creation, execution, deletion and monitoring of container tasks.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_31\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Tasks\"\n  method {\n    name: \"Create\"\n    input_type: \".containerd.services.tasks.v1.CreateTaskRequest\"\n    output_type: \".containerd.services.tasks.v1.CreateTaskResponse\"\n  }\n  method {\n    name: \"Start\"\n    input_type: \".containerd.services.tasks.v1.StartRequest\"\n    output_type: \".containerd.services.tasks.v1.StartResponse\"\n  }\n  method {\n    name: \"Delete\"\n    input_type: \".containerd.services.tasks.v1.DeleteTaskRequest\"\n    output_type: \".containerd.services.tasks.v1.DeleteResponse\"\n  }\n  // Additional methods...\n}\n```\n\n----------------------------------------\n\nTITLE: Running tests for opencensus-go\nDESCRIPTION: Commands to install required tools and run tests for the project. The first command only needs to be run once to set up your environment.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ make install-tools  # Only first time.\n$ make\n```\n\n----------------------------------------\n\nTITLE: Deadlock Example in Go - Inconsistent Lock Ordering\nDESCRIPTION: Example showing a common cause of deadlocks: inconsistent lock ordering where two locks A and B are acquired in different orders in different goroutines.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sasha-s/go-deadlock/Readme.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nA.Lock() // defer A.Unlock() or similar.\n...\nB.Lock() // defer B.Unlock() or similar.\n```\n\nLANGUAGE: go\nCODE:\n```\nB.Lock() // defer B.Unlock() or similar.\n...\nA.Lock() // defer A.Unlock() or similar.\n```\n\n----------------------------------------\n\nTITLE: Markdown Code of Conduct Document\nDESCRIPTION: The complete markdown formatted code of conduct document including sections for pledge, standards, responsibilities, scope, enforcement, and attribution.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/dario.cat/mergo/CODE_OF_CONDUCT.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at i@dario.im. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n```\n\n----------------------------------------\n\nTITLE: Containerd GitHub PR Reference\nDESCRIPTION: GitHub pull request reference link for the distribution tool work.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-01-20.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/containerd/containerd/pull/452\n```\n\n----------------------------------------\n\nTITLE: Protobuf File Configuration and Options\nDESCRIPTION: This snippet defines the protobuf file options including the Go package path for the generated code and the syntax version specification. These settings control how the protobuf compiler generates language-specific implementations.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_12\n\nLANGUAGE: protobuf\nCODE:\n```\n  options {\n    go_package: \"github.com/containerd/containerd/api/runtime/sandbox/v1;sandbox\"\n  }\n  syntax: \"proto3\"\n```\n\n----------------------------------------\n\nTITLE: Using Go Modules to Bypass Google Domain Restrictions\nDESCRIPTION: A shell script showing how to use Go modules' replace feature to create aliases for golang.org packages when direct access is blocked. This helps users in regions where google.golang.org might be inaccessible.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest\ngo mod tidy\ngo mod vendor\ngo build -mod=vendor\n```\n\n----------------------------------------\n\nTITLE: Displaying Q2 Roadmap for CRI-containerd Project in Markdown\nDESCRIPTION: This markdown table shows the Q2 roadmap for the CRI-containerd project, outlining various tasks and their completion timeline across different months.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/cri/proposal.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|               Item               | 1/2 Mar. | 2/2 Mar. | 1/2 Apr. | 2/2 Apr. | 1/2 May. | 2/2 May. |\n|:--------------------------------:|:--------:|:--------:|:--------:|:--------:|:--------:|:--------:|\n|              Survey              |     ✓    |          |          |          |          |          |\n|                POC               |          |     ✓    |          |          |          |          |\n|             Proposal             |          |          |     ✓    |          |          |          |\n|    Containerd Feature Complete   |     ✓    |     ✓    |     ✓    |          |          |          |\n|  Runtime Management Integration  |          |          |     ✓    |     ✓    |     ✓    |     ✓    |\n|   Image Management Integration   |          |          |          |     ✓    |     ✓    |     ✓    |\n| Container Networking Integration |          |          |          |          |     ✓    |     ✓    |\n```\n\n----------------------------------------\n\nTITLE: Using Meter APIs instead of InstrumentProvider for Float64 Sync Instruments\nDESCRIPTION: The InstrumentProvider from syncfloat64 package has been removed. Use the new creation methods of the Meter in go.opentelemetry.io/otel/sdk/metric instead.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: go\nCODE:\n```\n// Old API (removed)\n// InstrumentProvider.Counter\n// InstrumentProvider.UpDownCounter\n// InstrumentProvider.Histogram\n\n// New API\nMeter.Float64Counter\nMeter.Float64UpDownCounter\nMeter.Float64Histogram\n```\n\n----------------------------------------\n\nTITLE: Ansible Playbook Execution Results\nDESCRIPTION: Sample output showing the successful execution of the Ansible playbook across all target hosts. The results confirm that all required software has been installed without errors.\nSOURCE: https://github.com/containerd/containerd/blob/main/contrib/ansible/README.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nPLAY RECAP ***************************************************************************************************************************************************************\n172.31.1.227               : ok=21   changed=7    unreachable=0    failed=0\n172.31.13.159              : ok=21   changed=7    unreachable=0    failed=0\n172.31.7.230               : ok=21   changed=7    unreachable=0    failed=0\n```\n\n----------------------------------------\n\nTITLE: Status Update Links - Markdown\nDESCRIPTION: Links to key pull requests for quick start guide and vendoring implementation\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-01-13.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* https://github.com/containerd/containerd/pull/400\n* https://github.com/containerd/containerd/pull/390\n```\n\n----------------------------------------\n\nTITLE: Using strings.Cut vs SplitN in Go\nDESCRIPTION: Code change highlighting use of strings.Cut() instead of strings.SplitN() for better readability and memory efficiency\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n// Old code\nstrings.SplitN(str, sep, 2)\n\n// New code using strings.Cut()\nstrings.Cut(str, sep)\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Processing with Blackfriday in Go\nDESCRIPTION: This code snippet shows the simplest way to process Markdown input using Blackfriday. It uses the Run function with default options to parse and render the input.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\noutput := blackfriday.Run(input)\n```\n\n----------------------------------------\n\nTITLE: Importing goautoneg Package in Go\nDESCRIPTION: Import statement for the goautoneg package, which provides HTTP Content-Type negotiation functionality based on RFC 2616.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"bitbucket.org/ww/goautoneg\"\n```\n\n----------------------------------------\n\nTITLE: Installing CodeSpell Package Dependency\nDESCRIPTION: Specifies the exact version of codespell package required for spell checking functionality. Uses version 2.4.1.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncodespell==2.4.1\n```\n\n----------------------------------------\n\nTITLE: Enabling nested VMX on Libvirt for Windows VM (Bash)\nDESCRIPTION: Commands to edit the configuration of a Windows VM in Libvirt to enable nested Hyper-V support.\nSOURCE: https://github.com/containerd/containerd/blob/main/integration/images/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# replace win2k22 with the name of your Windows VM\nvirsh edit win2k22\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent Network Namespace for Testing\nDESCRIPTION: Bash command to create a persistent network namespace named 'failpoint' for testing CNI operations. This allows the test to simulate container network setup.\nSOURCE: https://github.com/containerd/containerd/blob/main/integration/failpoint/cmd/cni-bridge-fp/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo ip netns add failpoint\n```\n\n----------------------------------------\n\nTITLE: Adding Release Tags\nDESCRIPTION: Make command to add release tags for specified module sets and commit hash.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmake add-tags MODSET=<module set> COMMIT=<commit hash>\n```\n\n----------------------------------------\n\nTITLE: Cursor Description in Bolt Database\nDESCRIPTION: The Cursor object traverses the B+tree of on-disk pages or in-memory nodes, providing functionality to seek specific keys, move to first/last values, and traverse forward or backward.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n- `Cursor` - This object is simply for traversing the B+tree of on-disk pages\n  or in-memory nodes. It can seek to a specific key, move to the first or last\n  value, or it can move forward or backward. The cursor handles the movement up\n  and down the B+tree transparently to the end user.\n```\n\n----------------------------------------\n\nTITLE: Adding Support for AddLink in OpenCensus Bridge\nDESCRIPTION: Adds support for the AddLink method in the OpenCensus bridge package.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\n- Add support for `AddLink` to `go.opentelemetry.io/otel/bridge/opencensus`. (#5116)\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for Semconv v1.21.0 in Markdown\nDESCRIPTION: This code snippet shows how to embed a PkgGoDev badge in a Markdown file. The badge links to the documentation for the Semconv v1.21.0 package on pkg.go.dev.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/semconv/v1.21.0/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.21.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.21.0)\n```\n\n----------------------------------------\n\nTITLE: Accept Type Definition in HTTP Content Negotiation\nDESCRIPTION: Definition of the Accept struct type that represents a clause in an HTTP Accept header. It contains fields for MIME type, subtype, quality value, and additional parameters.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/munnerz/goautoneg/README.txt#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Accept struct {\n    Type, SubType string\n    Q             float32\n    Params        map[string]string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Container Message in Protobuf for Containerd API\nDESCRIPTION: This snippet defines the Container message type for the Containerd API. It includes fields for id, labels, image, runtime, spec, snapshotter, snapshot_key, created_at, updated_at, and extensions.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Container {\n  string id = 1;\n  repeated LabelsEntry labels = 2;\n  string image = 3;\n  Runtime runtime = 4;\n  google.protobuf.Any spec = 5;\n  string snapshotter = 6;\n  string snapshot_key = 7;\n  google.protobuf.Timestamp created_at = 8 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];\n  google.protobuf.Timestamp updated_at = 9 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];\n  repeated ExtensionsEntry extensions = 10 [(gogoproto.nullable) = false];\n}\n```\n\n----------------------------------------\n\nTITLE: Google Protobuf Any Type Definition\nDESCRIPTION: Defines the Google protobuf Any type that can hold arbitrary protocol buffer messages\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\npackage google.protobuf;\nmessage Any {\n  string type_url = 1;\n  bytes value = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Path Reference in Markdown\nDESCRIPTION: Reference link to the project's Code of Conduct document location on GitHub\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/dario.cat/mergo/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[mergo Code of Conduct](https://github.com/imdario/mergoblob/master/CODE_OF_CONDUCT.md)\n```\n\n----------------------------------------\n\nTITLE: Container Message Types Definition in Protocol Buffers\nDESCRIPTION: This snippet includes various message type definitions for the Container service, including GetContainerRequest/Response, ListContainersRequest/Response, CreateContainerRequest/Response, UpdateContainerRequest/Response, and DeleteContainerRequest for container operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_11\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"GetContainerRequest\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n}\nmessage_type {\n  name: \"GetContainerResponse\"\n  field {\n    name: \"container\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.containers.v1.Container\"\n    options {\n      65001: 0\n    }\n    json_name: \"container\"\n  }\n}\nmessage_type {\n  name: \"ListContainersRequest\"\n  field {\n    name: \"filters\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_STRING\n    json_name: \"filters\"\n  }\n}\nmessage_type {\n  name: \"ListContainersResponse\"\n  field {\n    name: \"containers\"\n    number: 1\n    label: LABEL_REPEATED\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.containers.v1.Container\"\n    options {\n      65001: 0\n    }\n    json_name: \"containers\"\n  }\n}\nmessage_type {\n  name: \"CreateContainerRequest\"\n  field {\n    name: \"container\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.containers.v1.Container\"\n    options {\n      65001: 0\n    }\n    json_name: \"container\"\n  }\n}\nmessage_type {\n  name: \"CreateContainerResponse\"\n  field {\n    name: \"container\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.containers.v1.Container\"\n    options {\n      65001: 0\n    }\n    json_name: \"container\"\n  }\n}\nmessage_type {\n  name: \"UpdateContainerRequest\"\n  field {\n    name: \"container\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.containers.v1.Container\"\n    options {\n      65001: 0\n    }\n    json_name: \"container\"\n  }\n  field {\n    name: \"update_mask\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.FieldMask\"\n    json_name: \"updateMask\"\n  }\n}\nmessage_type {\n  name: \"UpdateContainerResponse\"\n  field {\n    name: \"container\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.services.containers.v1.Container\"\n    options {\n      65001: 0\n    }\n    json_name: \"container\"\n  }\n}\nmessage_type {\n  name: \"DeleteContainerRequest\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling gRPC Logging in Go\nDESCRIPTION: Shell commands to turn on detailed logging for gRPC-Go by setting environment variables. This demonstrates how to configure the verbosity and severity levels for debugging purposes.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ export GRPC_GO_LOG_VERBOSITY_LEVEL=99\n$ export GRPC_GO_LOG_SEVERITY_LEVEL=info\n```\n\n----------------------------------------\n\nTITLE: Registering Fatal Handlers with Logrus in Go\nDESCRIPTION: Demonstrates how to register handlers that will be called when a fatal level message is logged, allowing for graceful shutdown before program termination.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-21_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nhandler := func() {\n  // gracefully shutdown something...\n}\nlogrus.RegisterExitHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies for MkDocs Documentation in plaintext\nDESCRIPTION: This requirements file lists the Python packages needed to build and render MkDocs documentation for the containerd project. It includes the core MkDocs package, Material theme and extensions, a Git revision date plugin, and Pygments for syntax highlighting, with specific version constraints.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/mkdocs-reqs.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmkdocs-git-revision-date-localized-plugin~=1.0\nmkdocs-material-extensions~=1.0\nmkdocs-material~=8.2\nmkdocs~=1.3\npygments~=2.12\n```\n\n----------------------------------------\n\nTITLE: Defining Float64SliceFlag Structure in Go\nDESCRIPTION: Defines the Float64SliceFlag structure which represents a flag with a *Float64Slice value. It includes various fields for flag properties and methods for flag operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_19\n\nLANGUAGE: go\nCODE:\n```\ntype Float64SliceFlag struct {\n\t// Fields omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up the opencensus-go repository\nDESCRIPTION: Commands to clone the upstream opencensus-go repository to your GOPATH. This is the first step in the contribution process to get the codebase locally.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get -d go.opencensus.io\n```\n\n----------------------------------------\n\nTITLE: NewDenyKeysFilter Implementation\nDESCRIPTION: Example of creating an attribute filter that denies specified keys using the NewDenyKeysFilter function.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.io/otel/attribute.NewDenyKeysFilter()\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for Metric Noop Package in Markdown\nDESCRIPTION: This snippet shows how to embed a PkgGoDev badge in a Markdown file, linking to the documentation for the OpenTelemetry Metric Noop package. It uses an image link with alt text and a URL to the package documentation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/metric/noop/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/metric/noop)](https://pkg.go.dev/go.opentelemetry.io/otel/metric/noop)\n```\n\n----------------------------------------\n\nTITLE: Rebooting Windows Server (PowerShell)\nDESCRIPTION: PowerShell command to reboot the Windows server after making changes.\nSOURCE: https://github.com/containerd/containerd/blob/main/integration/images/README.md#2025-04-21_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nRestart-Computer -Force\n```\n\n----------------------------------------\n\nTITLE: Removing an Active Snapshot in Go\nDESCRIPTION: Shows how to remove an active snapshot after it has been committed using the Snapshotter API in Go.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/design/snapshots.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nsnapshotter.Remove(key)\n```\n\n----------------------------------------\n\nTITLE: Mailmap Entry Format Example\nDESCRIPTION: Example format for mailmap entries to manage contributor email addresses\nSOURCE: https://github.com/containerd/containerd/blob/main/releases/README.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nReal Name <preferred@email.com> Other Name <other@email.com>\n```\n\n----------------------------------------\n\nTITLE: Passing Snapshotter Labels with WithLabels Option in Go\nDESCRIPTION: This code snippet shows how to pass user-defined labels to the underlying snapshotter using the WithLabels option. It demonstrates passing a reference label to a remote snapshotter during image pull.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/remote-snapshotter.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tcontainerd \"github.com/containerd/containerd/v2/client\"\n\t\"github.com/containerd/containerd/v2/core/snapshots\"\n)\n\nimage, err := client.Pull(ctx, ref,\n\tcontainerd.WithPullUnpack,\n\tcontainerd.WithPullSnapshotter(\n\t\t\"my-remote-snapshotter\",\n\t\tsnapshots.WithLabels(map[string]string{\n\t\t\t\"containerd.io/snapshot/reference\": ref,\n\t\t}),\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Input Source with Context in Go\nDESCRIPTION: Function that sets up an InputSourceContext on a CLI command's Before method. Creates and applies a new input source based on provided function.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_39\n\nLANGUAGE: go\nCODE:\n```\nfunc InitInputSourceWithContext(flags []cli.Flag, createInputSource func(cCtx *cli.Context) (InputSourceContext, error)) cli.BeforeFunc\n```\n\n----------------------------------------\n\nTITLE: Defining Data Message for Streaming in Protocol Buffers\nDESCRIPTION: Defines the Data message type for streaming with a single field for byte data.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_85\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Data {\n  bytes data = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Shim PR Link - Markdown\nDESCRIPTION: Link to pull request for runtime shim implementation\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-01-13.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* https://github.com/containerd/containerd/pull/417\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Resource Semantic Conventions in Console\nDESCRIPTION: Sets the OTEL_GO_X_RESOURCE environment variable to 'true' to enable experimental resource semantic conventions in the OpenTelemetry Go SDK.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/sdk/internal/x/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_GO_X_RESOURCE=true\n```\n\n----------------------------------------\n\nTITLE: Creating CNI Failpoint Testing Helper Script\nDESCRIPTION: Bash script that sets up environment variables and creates a CNI configuration to test the cni-bridge-fp plugin. The script includes the CNI network configuration JSON with the failpoint annotation.\nSOURCE: https://github.com/containerd/containerd/blob/main/integration/failpoint/cmd/cni-bridge-fp/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cat <<EOFDEMO | tee /tmp/cni-failpoint-demo-helper.sh\n#!/usr/bin/env bash\n\nexport CNI_CONTAINERID=failpoint-testing\nexport CNI_NETNS=/run/netns/failpoint\nexport CNI_IFNAME=fpeni0\nexport CNI_PATH=/opt/cni/bin/\n\ncat <<EOF | /opt/cni/bin/cni-bridge-fp\n{\n  \"cniVersion\": \"0.3.0\",\n  \"name\": \"containerd-net-fp\",\n  \"type\": \"cni-bridge-fp\",\n  \"bridge\": \"fp-cni0\",\n  \"isGateway\": true,\n  \"ipMasq\": true,\n  \"promiscMode\": true,\n  \"ipam\": {\n    \"type\": \"host-local\",\n    \"ranges\": [\n      [{\n        \"subnet\": \"10.88.0.0/16\"\n      }],\n      [{\n        \"subnet\": \"2001:4860:4860::/64\"\n      }]\n    ],\n    \"routes\": [\n      { \"dst\": \"0.0.0.0/0\" },\n      { \"dst\": \"::/0\" }\n    ]\n  },\n  \"runtimeConfig\": {\n    \"io.kubernetes.cri.pod-annotations\": {\n      \"failpoint.cni.containerd.io/confpath\": \"/tmp/cni-failpoint.json\"\n    }\n  }\n}\nEOF\n\nEOFDEMO\n```\n\n----------------------------------------\n\nTITLE: Defining Container Events in Protocol Buffers\nDESCRIPTION: Defines message types for container events including ContainerCreate, ContainerUpdate, and ContainerDelete. These messages include fields for container ID, image, runtime, and labels.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_1\n\nLANGUAGE: Protocol Buffers\nCODE:\n```\nmessage_type {\n  name: \"ContainerCreate\"\n  field {\n    name: \"id\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"id\"\n  }\n  field {\n    name: \"image\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"image\"\n  }\n  field {\n    name: \"runtime\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".containerd.events.ContainerCreate.Runtime\"\n    json_name: \"runtime\"\n  }\n  nested_type {\n    name: \"Runtime\"\n    field {\n      name: \"name\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"name\"\n    }\n    field {\n      name: \"options\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Any\"\n      json_name: \"options\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating OCI Runtime Specification using containerd Client in Go\nDESCRIPTION: Example of generating an OCI runtime specification based on a pulled image using the containerd client. This demonstrates the integration between containerd and OCI standards.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-05-26.md#2025-04-21_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// generate the spec based on the image that we pulled\nspec, err := containerd.GenerateSpec(containerd.WithImageConfig(ctx, image))\nif err != nil {\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over All Buckets in BoltDB with Go\nDESCRIPTION: Iterates through all top-level buckets in a BoltDB database using Tx.ForEach(). For each bucket, it prints the bucket name.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-21_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ndb.View(func(tx *bolt.Tx) error {\n\ttx.ForEach(func(name []byte, b *bolt.Bucket) error {\n\t\tfmt.Println(string(name))\n\t\treturn nil\n\t})\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Module Dependencies for containerd\nDESCRIPTION: This snippet lists Go module dependencies with their versions and import paths. It includes essential libraries for containerd's functionality.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/modules.txt#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n# dario.cat/mergo v1.0.1\n## explicit; go 1.13\ndario.cat/mergo\n# github.com/AdaLogics/go-fuzz-headers v0.0.0-20240806141605-e8a1dd7889d6\n## explicit; go 1.20\ngithub.com/AdaLogics/go-fuzz-headers\n# github.com/Microsoft/go-winio v0.6.2\n## explicit; go 1.21\ngithub.com/Microsoft/go-winio\ngithub.com/Microsoft/go-winio/backuptar\ngithub.com/Microsoft/go-winio/internal/fs\ngithub.com/Microsoft/go-winio/internal/socket\ngithub.com/Microsoft/go-winio/internal/stringbuffer\ngithub.com/Microsoft/go-winio/pkg/bindfilter\ngithub.com/Microsoft/go-winio/pkg/etw\ngithub.com/Microsoft/go-winio/pkg/etwlogrus\ngithub.com/Microsoft/go-winio/pkg/fs\ngithub.com/Microsoft/go-winio/pkg/guid\ngithub.com/Microsoft/go-winio/pkg/security\ngithub.com/Microsoft/go-winio/vhd\n# github.com/Microsoft/hcsshim v0.13.0-rc.3\n## explicit; go 1.22.0\ngithub.com/Microsoft/hcsshim\ngithub.com/Microsoft/hcsshim/cmd/containerd-shim-runhcs-v1/options\ngithub.com/Microsoft/hcsshim/cmd/containerd-shim-runhcs-v1/stats\ngithub.com/Microsoft/hcsshim/computestorage\ngithub.com/Microsoft/hcsshim/ext4/dmverity\ngithub.com/Microsoft/hcsshim/ext4/internal/compactext4\ngithub.com/Microsoft/hcsshim/ext4/internal/format\ngithub.com/Microsoft/hcsshim/ext4/tar2ext4\ngithub.com/Microsoft/hcsshim/hcn\ngithub.com/Microsoft/hcsshim/internal/cni\ngithub.com/Microsoft/hcsshim/internal/cow\ngithub.com/Microsoft/hcsshim/internal/hcs\ngithub.com/Microsoft/hcsshim/internal/hcs/schema1\ngithub.com/Microsoft/hcsshim/internal/hcs/schema2\ngithub.com/Microsoft/hcsshim/internal/hcserror\ngithub.com/Microsoft/hcsshim/internal/hns\ngithub.com/Microsoft/hcsshim/internal/interop\ngithub.com/Microsoft/hcsshim/internal/jobobject\ngithub.com/Microsoft/hcsshim/internal/log\ngithub.com/Microsoft/hcsshim/internal/logfields\ngithub.com/Microsoft/hcsshim/internal/longpath\ngithub.com/Microsoft/hcsshim/internal/memory\ngithub.com/Microsoft/hcsshim/internal/mergemaps\ngithub.com/Microsoft/hcsshim/internal/oc\ngithub.com/Microsoft/hcsshim/internal/protocol/guestrequest\ngithub.com/Microsoft/hcsshim/internal/queue\ngithub.com/Microsoft/hcsshim/internal/regstate\ngithub.com/Microsoft/hcsshim/internal/runhcs\ngithub.com/Microsoft/hcsshim/internal/safefile\ngithub.com/Microsoft/hcsshim/internal/security\ngithub.com/Microsoft/hcsshim/internal/timeout\ngithub.com/Microsoft/hcsshim/internal/vmcompute\ngithub.com/Microsoft/hcsshim/internal/wclayer\ngithub.com/Microsoft/hcsshim/internal/wclayer/cim\ngithub.com/Microsoft/hcsshim/internal/winapi\ngithub.com/Microsoft/hcsshim/osversion\ngithub.com/Microsoft/hcsshim/pkg/cimfs\ngithub.com/Microsoft/hcsshim/pkg/cimfs/format\ngithub.com/Microsoft/hcsshim/pkg/go-runhcs\ngithub.com/Microsoft/hcsshim/pkg/ociwclayer\ngithub.com/Microsoft/hcsshim/pkg/ociwclayer/cim\n# github.com/beorn7/perks v1.0.1\n## explicit; go 1.11\ngithub.com/beorn7/perks/quantile\n# github.com/cenkalti/backoff/v4 v4.3.0\n## explicit; go 1.18\ngithub.com/cenkalti/backoff/v4\n# github.com/cespare/xxhash/v2 v2.3.0\n## explicit; go 1.11\ngithub.com/cespare/xxhash/v2\n# github.com/checkpoint-restore/checkpointctl v1.3.0\n## explicit; go 1.21\ngithub.com/checkpoint-restore/checkpointctl/lib\n# github.com/checkpoint-restore/go-criu/v7 v7.2.0\n## explicit; go 1.20\ngithub.com/checkpoint-restore/go-criu/v7\ngithub.com/checkpoint-restore/go-criu/v7/rpc\ngithub.com/checkpoint-restore/go-criu/v7/stats\ngithub.com/checkpoint-restore/go-criu/v7/utils\n# github.com/cilium/ebpf v0.16.0\n## explicit; go 1.21\ngithub.com/cilium/ebpf\ngithub.com/cilium/ebpf/asm\ngithub.com/cilium/ebpf/btf\ngithub.com/cilium/ebpf/internal\ngithub.com/cilium/ebpf/internal/kallsyms\ngithub.com/cilium/ebpf/internal/kconfig\ngithub.com/cilium/ebpf/internal/sys\ngithub.com/cilium/ebpf/internal/sysenc\ngithub.com/cilium/ebpf/internal/tracefs\ngithub.com/cilium/ebpf/internal/unix\ngithub.com/cilium/ebpf/link\n# github.com/containerd/btrfs/v2 v2.0.0\n## explicit; go 1.19\ngithub.com/containerd/btrfs/v2\n# github.com/containerd/cgroups/v3 v3.0.5\n## explicit; go 1.22.0\ngithub.com/containerd/cgroups/v3\ngithub.com/containerd/cgroups/v3/cgroup1\ngithub.com/containerd/cgroups/v3/cgroup1/stats\ngithub.com/containerd/cgroups/v3/cgroup2\ngithub.com/containerd/cgroups/v3/cgroup2/stats\n# github.com/containerd/console v1.0.4\n## explicit; go 1.13\ngithub.com/containerd/console\n# github.com/containerd/containerd/api v1.8.0 => ./api\n## explicit; go 1.23.0\ngithub.com/containerd/containerd/api/events\ngithub.com/containerd/containerd/api/runtime/sandbox/v1\ngithub.com/containerd/containerd/api/runtime/task/v2\ngithub.com/containerd/containerd/api/runtime/task/v3\ngithub.com/containerd/containerd/api/services/containers/v1\ngithub.com/containerd/containerd/api/services/content/v1\ngithub.com/containerd/containerd/api/services/diff/v1\ngithub.com/containerd/containerd/api/services/events/v1\ngithub.com/containerd/containerd/api/services/images/v1\ngithub.com/containerd/containerd/api/services/introspection/v1\ngithub.com/containerd/containerd/api/services/leases/v1\ngithub.com/containerd/containerd/api/services/namespaces/v1\ngithub.com/containerd/containerd/api/services/sandbox/v1\ngithub.com/containerd/containerd/api/services/snapshots/v1\ngithub.com/containerd/containerd/api/services/streaming/v1\ngithub.com/containerd/containerd/api/services/tasks/v1\ngithub.com/containerd/containerd/api/services/transfer/v1\ngithub.com/containerd/containerd/api/services/ttrpc/events/v1\ngithub.com/containerd/containerd/api/services/version/v1\ngithub.com/containerd/containerd/api/types\ngithub.com/containerd/containerd/api/types/runc/options\ngithub.com/containerd/containerd/api/types/runtimeoptions/v1\ngithub.com/containerd/containerd/api/types/task\ngithub.com/containerd/containerd/api/types/transfer\n# github.com/containerd/continuity v0.4.5\n## explicit; go 1.21\ngithub.com/containerd/continuity\ngithub.com/containerd/continuity/devices\ngithub.com/containerd/continuity/driver\ngithub.com/containerd/continuity/fs\ngithub.com/containerd/continuity/fs/fstest\ngithub.com/containerd/continuity/pathdriver\ngithub.com/containerd/continuity/proto\ngithub.com/containerd/continuity/sysx\ngithub.com/containerd/continuity/testutil\ngithub.com/containerd/continuity/testutil/loopback\n# github.com/containerd/errdefs v1.0.0\n## explicit; go 1.20\ngithub.com/containerd/errdefs\n# github.com/containerd/errdefs/pkg v0.3.0\n## explicit; go 1.22\ngithub.com/containerd/errdefs/pkg/errgrpc\ngithub.com/containerd/errdefs/pkg/internal/cause\ngithub.com/containerd/errdefs/pkg/internal/types\n# github.com/containerd/fifo v1.1.0\n## explicit; go 1.18\ngithub.com/containerd/fifo\n# github.com/containerd/go-cni v1.1.12\n## explicit; go 1.21\ngithub.com/containerd/go-cni\n# github.com/containerd/go-runc v1.1.0\n## explicit; go 1.18\ngithub.com/containerd/go-runc\n# github.com/containerd/imgcrypt/v2 v2.0.1\n## explicit; go 1.23.0\ngithub.com/containerd/imgcrypt/v2\ngithub.com/containerd/imgcrypt/v2/images/encryption\n# github.com/containerd/log v0.1.0\n## explicit; go 1.20\ngithub.com/containerd/log\ngithub.com/containerd/log/logtest\n# github.com/containerd/nri v0.8.0\n## explicit; go 1.21\ngithub.com/containerd/nri\ngithub.com/containerd/nri/pkg/adaptation\ngithub.com/containerd/nri/pkg/api\ngithub.com/containerd/nri/pkg/log\ngithub.com/containerd/nri/pkg/net\ngithub.com/containerd/nri/pkg/net/multiplex\ngithub.com/containerd/nri/pkg/runtime-tools/generate\ngithub.com/containerd/nri/pkg/stub\ngithub.com/containerd/nri/types/v1\n# github.com/containerd/otelttrpc v0.1.0\n## explicit; go 1.21\ngithub.com/containerd/otelttrpc\ngithub.com/containerd/otelttrpc/internal\n# github.com/containerd/platforms v1.0.0-rc.1\n## explicit; go 1.20\ngithub.com/containerd/platforms\n# github.com/containerd/plugin v1.0.0\n## explicit; go 1.20\ngithub.com/containerd/plugin\ngithub.com/containerd/plugin/registry\n# github.com/containerd/ttrpc v1.2.7\n## explicit; go 1.19\ngithub.com/containerd/ttrpc\n# github.com/containerd/typeurl/v2 v2.2.3\n## explicit; go 1.21\ngithub.com/containerd/typeurl/v2\n# github.com/containerd/zfs/v2 v2.0.0-rc.0\n## explicit; go 1.22.0\ngithub.com/containerd/zfs/v2\ngithub.com/containerd/zfs/v2/plugin\n# github.com/containernetworking/cni v1.3.0\n## explicit; go 1.21\ngithub.com/containernetworking/cni/libcni\ngithub.com/containernetworking/cni/pkg/invoke\ngithub.com/containernetworking/cni/pkg/ns\ngithub.com/containernetworking/cni/pkg/skel\ngithub.com/containernetworking/cni/pkg/types\ngithub.com/containernetworking/cni/pkg/types/020\ngithub.com/containernetworking/cni/pkg/types/040\ngithub.com/containernetworking/cni/pkg/types/100\ngithub.com/containernetworking/cni/pkg/types/create\ngithub.com/containernetworking/cni/pkg/types/internal\ngithub.com/containernetworking/cni/pkg/utils\ngithub.com/containernetworking/cni/pkg/version\n# github.com/containernetworking/plugins v1.6.2\n## explicit; go 1.23\ngithub.com/containernetworking/plugins/pkg/ns\n# github.com/containers/ocicrypt v1.2.1\n## explicit; go 1.22\ngithub.com/containers/ocicrypt\ngithub.com/containers/ocicrypt/blockcipher\ngithub.com/containers/ocicrypt/config\ngithub.com/containers/ocicrypt/config/keyprovider-config\ngithub.com/containers/ocicrypt/crypto/pkcs11\ngithub.com/containers/ocicrypt/keywrap\ngithub.com/containers/ocicrypt/keywrap/jwe\ngithub.com/containers/ocicrypt/keywrap/keyprovider\ngithub.com/containers/ocicrypt/keywrap/pgp\ngithub.com/containers/ocicrypt/keywrap/pkcs11\ngithub.com/containers/ocicrypt/keywrap/pkcs7\ngithub.com/containers/ocicrypt/spec\ngithub.com/containers/ocicrypt/utils\ngithub.com/containers/ocicrypt/utils/keyprovider\n# github.com/coreos/go-systemd/v22 v22.5.0\n## explicit; go 1.12\ngithub.com/coreos/go-systemd/v22/daemon\ngithub.com/coreos/go-systemd/v22/dbus\n# github.com/cpuguy83/go-md2man/v2 v2.0.5\n## explicit; go 1.11\ngithub.com/cpuguy83/go-md2man/v2/md2man\n# github.com/davecgh/go-spew v1.1.1\n## explicit\ngithub.com/davecgh/go-spew/spew\n# github.com/distribution/reference v0.6.0\n## explicit; go 1.20\ngithub.com/distribution/reference\n# github.com/docker/go-events v0.0.0-20190806004212-e31b211e4f1c\n## explicit\ngithub.com/docker/go-events\n# github.com/docker/go-metrics v0.0.1\n```\n\n----------------------------------------\n\nTITLE: Using Meter APIs instead of InstrumentProvider for Int64 Observables\nDESCRIPTION: The InstrumentProvider from asyncint64 package has been removed. Use the new creation methods of the Meter in go.opentelemetry.io/otel/sdk/metric instead.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n// Old API (removed)\n// InstrumentProvider.Counter\n// InstrumentProvider.UpDownCounter\n// InstrumentProvider.Gauge\n\n// New API\nMeter.Int64ObservableCounter\nMeter.Int64ObservableUpDownCounter\nMeter.Int64ObservableGauge\n```\n\n----------------------------------------\n\nTITLE: Running vet script for code analysis in gRPC-Go\nDESCRIPTION: Command to run the vet script to catch static analysis errors in the codebase before submitting a PR.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/google.golang.org/grpc/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/vet.sh\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OTLP Trace gRPC Exporter in Markdown\nDESCRIPTION: This snippet shows how to include a PkgGoDev badge in a Markdown file. The badge links to the package documentation for the OTLP Trace gRPC Exporter on pkg.go.dev.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc)](https://pkg.go.dev/go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc)\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for Metric Embedded Module in Markdown\nDESCRIPTION: This code snippet shows how to embed a PkgGoDev badge in a Markdown file. The badge links to the package documentation for the Metric Embedded module on pkg.go.dev.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/metric/embedded/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/metric/embedded)](https://pkg.go.dev/go.opentelemetry.io/otel/metric/embedded)\n```\n\n----------------------------------------\n\nTITLE: Updating Baggage Handling in OpenTelemetry Go SDK\nDESCRIPTION: This change removes several functions from the baggage package and introduces a new Baggage type with related context functions for handling baggage.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_35\n\nLANGUAGE: Go\nCODE:\n```\n- Removed `Set`, `Value`, `ContextWithValue`, `ContextWithoutValue`, and `ContextWithEmpty` functions in the `go.opentelemetry.io/otel/baggage` package.\n  Handling of baggage is now done using the added `Baggage` type and related context functions (`ContextWithBaggage`, `ContextWithoutBaggage`, and `FromContext`) in that package. (#1967)\n```\n\n----------------------------------------\n\nTITLE: Defining Containers Service Package and Content Service in Protocol Buffers\nDESCRIPTION: This snippet defines the Go package path for the Containers service and starts the definition of the Content service protocol buffer file. The content service handles blob storage operations within containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_38\n\nLANGUAGE: protobuf\nCODE:\n```\n  options {\n    go_package: \"github.com/containerd/containerd/api/services/containers/v1;containers\"\n  }\n  syntax: \"proto3\"\n}\nfile {\n  name: \"github.com/containerd/containerd/api/services/content/v1/content.proto\"\n  package: \"containerd.services.content.v1\"\n  dependency: \"google/protobuf/field_mask.proto\"\n  dependency: \"google/protobuf/timestamp.proto\"\n  dependency: \"google/protobuf/empty.proto\"\n```\n\n----------------------------------------\n\nTITLE: Default Mode CBOR Operations in Go\nDESCRIPTION: Demonstrates basic CBOR encoding and decoding operations using the default mode of the fxamacker/cbor library. Includes marshaling, unmarshaling, and creating decoders.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/fxamacker/cbor/v2/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// API matches encoding/json for Marshal, Unmarshal, Encode, Decode, etc.\nb, err = cbor.Marshal(v)        // encode v to []byte b\nerr = cbor.Unmarshal(b, &v)     // decode []byte b to v\ndecoder = cbor.NewDecoder(r)    // create decoder with io.Reader r\nerr = decoder.Decode(&v)        // decode a CBOR data item to v\n\n// v2.7.0 added MarshalToBuffer() and UserBufferEncMode interface.\nerr = cbor.MarshalToBuffer(v, b) // encode v to b instead of using built-in buf pool.\n\n// v2.5.0 added new functions that return remaining bytes.\n\n// UnmarshalFirst decodes first CBOR data item and returns remaining bytes.\nrest, err = cbor.UnmarshalFirst(b, &v)   // decode []byte b to v\n\n// DiagnoseFirst translates first CBOR data item to text and returns remaining bytes.\ntext, rest, err = cbor.DiagnoseFirst(b)  // decode []byte b to Diagnostic Notation text\n\n// NOTE: Unmarshal returns ExtraneousDataError if there are remaining bytes,\n// but new funcs UnmarshalFirst and DiagnoseFirst do not.\n```\n\n----------------------------------------\n\nTITLE: Enabling Hyper-V and Installing Docker on Windows (PowerShell)\nDESCRIPTION: PowerShell commands to enable Hyper-V, install OpenSSH Server, and install Docker on a Windows server.\nSOURCE: https://github.com/containerd/containerd/blob/main/integration/images/README.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# Enable Hyper-V and management tools\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V,Microsoft-Hyper-V-Management-Clients,Microsoft-Hyper-V-Management-PowerShell -All -NoRestart\n\n# Enable SSH (this can be skipped if you don't need it)\nAdd-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0\n\n# Install Docker\nInstall-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -Confirm:$false\nInstall-Module -Name DockerMsftProvider -Repository PSGallery -Force -Confirm:$false\nInstall-Package -Name docker -ProviderName DockerMsftProvider -Force -Confirm:$false\n```\n\n----------------------------------------\n\nTITLE: Adding Empty Function for KeyValue in Go\nDESCRIPTION: Adds Empty function to return a KeyValue for an empty value in the log package.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n- Add `Empty` function in `go.opentelemetry.io/otel/log` to return a `KeyValue` for an empty value. (#5076)\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog Entries in Markdown\nDESCRIPTION: This snippet shows the structure of changelog entries using Markdown format. It includes version numbers, descriptions of changes, and links to specific commits.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/mdlayher/vsock/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\n# v1.2.1\n\n- [Improvement]: updated dependencies, test with Go 1.20.\n\n# v1.2.0\n\n**This is the first release of package vsock that only supports Go 1.18+. Users\non older versions of Go must use v1.1.1.**\n\n- [Improvement]: drop support for older versions of Go so we can begin using\n  modern versions of `x/sys` and other dependencies.\n\n## v1.1.1\n\n**This is the last release of package vsock that supports Go 1.17 and below.**\n\n- [Bug Fix] [commit](https://github.com/mdlayher/vsock/commit/ead86435c244d5d6baad549a6df0557ada3f4401):\n  fix build on non-UNIX platforms such as Windows. This is a no-op change on\n  Linux but provides a friendlier experience for non-Linux users.\n\n## v1.1.0\n\n- [New API] [commit](https://github.com/mdlayher/vsock/commit/44cd82dc5f7de644436f22236b111ab97fa9a14f):\n  `vsock.FileListener` can be used to create a `vsock.Listener` from an existing\n  `os.File`, which may be provided by systemd socket activation or another\n  external mechanism.\n\n## v1.0.1\n\n- [Bug Fix] [commit](https://github.com/mdlayher/vsock/commit/99a6dccdebad21d1fa5f757d228d677ccb1412dc):\n  upgrade `github.com/mdlayher/socket` to handle non-blocking `connect(2)`\n  errors (called in `vsock.Dial`) properly by checking the `SO_ERROR` socket\n  option. Lock in this behavior with a new test.\n- [Improvement] [commit](https://github.com/mdlayher/vsock/commit/375f3bbcc363500daf367ec511638a4655471719):\n  downgrade the version of `golang.org/x/net` in use to support Go 1.12. We\n  don't need the latest version for this package.\n\n## v1.0.0\n\n**This is the first release of package vsock that only supports Go 1.12+.\nUsers on older versions of Go must use an unstable release.**\n\n- Initial stable commit!\n- [API change]: the `vsock.Dial` and `vsock.Listen` constructors now accept an\n  optional `*vsock.Config` parameter to enable future expansion in v1.x.x\n  without prompting further breaking API changes. Because `vsock.Config` has no\n  options as of this release, `nil` may be passed in all call sites to fix\n  existing code upon upgrading to v1.0.0.\n- [New API]: the `vsock.ListenContextID` function can be used to create a\n  `*vsock.Listener` which is bound to an explicit context ID address, rather\n  than inferring one automatically as `vsock.Listen` does.\n```\n\n----------------------------------------\n\nTITLE: Defining StateRequest Message Type in Protobuf\nDESCRIPTION: This snippet defines the `StateRequest` message type using protobuf. This message is used to request the state of a task or executed process, identified by their respective IDs: `id` for the task and `exec_id` for the executed process. The state information is retrieved based on these IDs.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_24\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"StateRequest\"\n    field {\n      name: \"id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"id\"\n    }\n    field {\n      name: \"exec_id\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"execId\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Struct Marshaling in Go\nDESCRIPTION: Demonstrates basic usage of yaml.Marshal and yaml.Unmarshal with a Person struct, showing how JSON tags affect YAML field names.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/sigs.k8s.io/yaml/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"sigs.k8s.io/yaml\"\n)\n\ntype Person struct {\n\tName string `json:\"name\"` // Affects YAML field names too.\n\tAge  int    `json:\"age\"`\n}\n\nfunc main() {\n\t// Marshal a Person struct to YAML.\n\tp := Person{\"John\", 30}\n\ty, err := yaml.Marshal(p)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(y))\n\t/* Output:\n\tage: 30\n\tname: John\n\t*/\n\n\t// Unmarshal the YAML back into a Person struct.\n\tvar p2 Person\n\terr = yaml.Unmarshal(y, &p2)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(p2)\n\t/* Output:\n\t{John 30}\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sandbox Service Interface in Protobuf\nDESCRIPTION: This snippet defines the Sandbox service interface with its available RPC methods for interaction with the containerd sandbox runtime. It includes methods for lifecycle management, status querying, and metrics collection.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_11\n\nLANGUAGE: protobuf\nCODE:\n```\n  service {\n    name: \"Sandbox\"\n    method {\n      name: \"CreateSandbox\"\n      input_type: \".containerd.runtime.sandbox.v1.CreateSandboxRequest\"\n      output_type: \".containerd.runtime.sandbox.v1.CreateSandboxResponse\"\n    }\n    method {\n      name: \"StartSandbox\"\n      input_type: \".containerd.runtime.sandbox.v1.StartSandboxRequest\"\n      output_type: \".containerd.runtime.sandbox.v1.StartSandboxResponse\"\n    }\n    method {\n      name: \"Platform\"\n      input_type: \".containerd.runtime.sandbox.v1.PlatformRequest\"\n      output_type: \".containerd.runtime.sandbox.v1.PlatformResponse\"\n    }\n    method {\n      name: \"StopSandbox\"\n      input_type: \".containerd.runtime.sandbox.v1.StopSandboxRequest\"\n      output_type: \".containerd.runtime.sandbox.v1.StopSandboxResponse\"\n    }\n    method {\n      name: \"WaitSandbox\"\n      input_type: \".containerd.runtime.sandbox.v1.WaitSandboxRequest\"\n      output_type: \".containerd.runtime.sandbox.v1.WaitSandboxResponse\"\n    }\n    method {\n      name: \"SandboxStatus\"\n      input_type: \".containerd.runtime.sandbox.v1.SandboxStatusRequest\"\n      output_type: \".containerd.runtime.sandbox.v1.SandboxStatusResponse\"\n    }\n    method {\n      name: \"PingSandbox\"\n      input_type: \".containerd.runtime.sandbox.v1.PingRequest\"\n      output_type: \".containerd.runtime.sandbox.v1.PingResponse\"\n    }\n    method {\n      name: \"ShutdownSandbox\"\n      input_type: \".containerd.runtime.sandbox.v1.ShutdownSandboxRequest\"\n      output_type: \".containerd.runtime.sandbox.v1.ShutdownSandboxResponse\"\n    }\n    method {\n      name: \"SandboxMetrics\"\n      input_type: \".containerd.runtime.sandbox.v1.SandboxMetricsRequest\"\n      output_type: \".containerd.runtime.sandbox.v1.SandboxMetricsResponse\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating Span Interface in OpenTelemetry Go SDK\nDESCRIPTION: This change removes the Tracer method from the Span interface in the trace package. It affects how tracers are obtained and used with spans.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_33\n\nLANGUAGE: Go\nCODE:\n```\n- Removed the `Tracer` method from the `Span` interface in the `go.opentelemetry.io/otel/trace` package.\n  Using the same tracer that created a span introduces the error where an instrumentation library's `Tracer` is used by other code instead of their own.\n  The `\"go.opentelemetry.io/otel\".Tracer` function or a `TracerProvider` should be used to acquire a library specific `Tracer` instead. (#1900)\n  - The `TracerProvider()` method on the `Span` interface may also be used to obtain a `TracerProvider` using the same trace processing pipeline. (#2009)\n```\n\n----------------------------------------\n\nTITLE: Defining Options Message Type for runc Runtime in Protocol Buffer\nDESCRIPTION: Protocol Buffer message definition for runc runtime options. It includes configuration fields for container runtime behavior such as pivot root settings, keyring management, cgroup configuration, user/group IDs for I/O, binary paths, and CRIU checkpoint settings.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/types/runc/options/next.pb.txt#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"Options\"\n  field {\n    name: \"no_pivot_root\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"noPivotRoot\"\n  }\n  field {\n    name: \"no_new_keyring\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"noNewKeyring\"\n  }\n  field {\n    name: \"shim_cgroup\"\n    number: 3\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"shimCgroup\"\n  }\n  field {\n    name: \"io_uid\"\n    number: 4\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"ioUid\"\n  }\n  field {\n    name: \"io_gid\"\n    number: 5\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"ioGid\"\n  }\n  field {\n    name: \"binary_name\"\n    number: 6\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"binaryName\"\n  }\n  field {\n    name: \"root\"\n    number: 7\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"root\"\n  }\n  field {\n    name: \"systemd_cgroup\"\n    number: 9\n    label: LABEL_OPTIONAL\n    type: TYPE_BOOL\n    json_name: \"systemdCgroup\"\n  }\n  field {\n    name: \"criu_image_path\"\n    number: 10\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"criuImagePath\"\n  }\n  field {\n    name: \"criu_work_path\"\n    number: 11\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"criuWorkPath\"\n  }\n  field {\n    name: \"task_api_address\"\n    number: 12\n    label: LABEL_OPTIONAL\n    type: TYPE_STRING\n    json_name: \"taskApiAddress\"\n  }\n  field {\n    name: \"task_api_version\"\n    number: 13\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"taskApiVersion\"\n  }\n  reserved_range {\n    start: 8\n    end: 9\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Meter APIs instead of InstrumentProvider for Float64 Observables\nDESCRIPTION: The InstrumentProvider from asyncfloat64 package has been removed. Use the new creation methods of the Meter in go.opentelemetry.io/otel/sdk/metric instead.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: go\nCODE:\n```\n// Old API (removed)\n// InstrumentProvider.Counter\n// InstrumentProvider.UpDownCounter\n// InstrumentProvider.Gauge\n\n// New API\nMeter.Float64ObservableCounter\nMeter.Float64ObservableUpDownCounter\nMeter.Float64ObservableGauge\n```\n\n----------------------------------------\n\nTITLE: Integrating Gofuzz with go-fuzz\nDESCRIPTION: This snippet showcases how to use gofuzz to convert a byte slice provided by go-fuzz into a specific type for testing. It creates a `Fuzz` function that takes a byte slice, uses `fuzz.NewFromGoFuzz` to create a gofuzz instance, and then fuzzes an integer with the data. This integer is then passed to a function `MyFunc` for testing.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/google/gofuzz/README.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n```go\n// +build gofuzz\npackage mypackage\n\nimport fuzz \"github.com/google/gofuzz\"\n\nfunc Fuzz(data []byte) int {\n        var i int\n        fuzz.NewFromGoFuzz(data).Fuzz(&i)\n        MyFunc(i)\n        return 0\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Container Event Messages\nDESCRIPTION: Defines message structures for container lifecycle events including creation, updates, and deletion.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.2.pb.txt#2025-04-21_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ContainerCreate {\n  string id = 1;\n  string image = 2;\n  Runtime runtime = 3;\n  \n  message Runtime {\n    string name = 1;\n    google.protobuf.Any options = 2;\n  }\n}\n\nmessage ContainerUpdate {\n  string id = 1;\n  string image = 2;\n  repeated LabelsEntry labels = 3;\n  string snapshot_key = 4;\n}\n\nmessage ContainerDelete {\n  string id = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Meter APIs instead of InstrumentProvider for Int64 Sync Instruments\nDESCRIPTION: The InstrumentProvider from syncint64 package has been removed. Use the new creation methods of the Meter in go.opentelemetry.io/otel/sdk/metric instead.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: go\nCODE:\n```\n// Old API (removed)\n// InstrumentProvider.Counter\n// InstrumentProvider.UpDownCounter\n// InstrumentProvider.Histogram\n\n// New API\nMeter.Int64Counter\nMeter.Int64UpDownCounter\nMeter.Int64Histogram\n```\n\n----------------------------------------\n\nTITLE: Go Dependencies List\nDESCRIPTION: Explicit module dependencies list showing package paths and their required Go versions. Includes core functionality packages for OpenTelemetry, cryptography, networking, gRPC, protobuf, and Kubernetes integration.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/modules.txt#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n## explicit; go 1.22.0\ngo.opentelemetry.io/otel\ngo.opentelemetry.io/otel/attribute\ngo.opentelemetry.io/otel/baggage\ngo.opentelemetry.io/otel/codes\ngo.opentelemetry.io/otel/internal\ngo.opentelemetry.io/otel/internal/attribute\ngo.opentelemetry.io/otel/internal/baggage\ngo.opentelemetry.io/otel/internal/global\ngo.opentelemetry.io/otel/propagation\ngo.opentelemetry.io/otel/semconv/v1.17.0\ngo.opentelemetry.io/otel/semconv/v1.20.0\ngo.opentelemetry.io/otel/semconv/v1.21.0\ngo.opentelemetry.io/otel/semconv/v1.26.0\n```\n\n----------------------------------------\n\nTITLE: Listing Containerd Snapshots\nDESCRIPTION: Console command to list containerd snapshots with their keys, parents, and committed status\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/content-flow.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ctr snapshot ls\nKEY                                                                     PARENT                                                                  KIND\nsha256:33bd296ab7f37bdacff0cb4a5eb671bcb3a141887553ec4157b1e64d6641c1cd sha256:bc8b010e53c5f20023bd549d082c74ef8bfc237dc9bbccea2e0552e52bc5fcb1 Committed\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Declared Type Option in Go\nDESCRIPTION: Demonstrates how to create an option for a declared type, including the option struct and WithMyType function.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-21_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype myTypeOption struct {\n\tMyType MyType\n}\n\nfunc (o myTypeOption) apply(c config) config {\n\tc.MyType = o.MyType\n    return c\n}\n\n// WithMyType sets T to have include MyType.\nfunc WithMyType(t MyType) Option {\n\treturn myTypeOption{t}\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Containerd Installation\nDESCRIPTION: Commands to verify the installation of containerd and check its version.\nSOURCE: https://github.com/containerd/containerd/blob/main/BUILDING.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ which containerd\n/usr/local/bin/containerd\n\n$ containerd --version\ncontainerd github.com/containerd/containerd/v2 v2.0.0-rc.3-195-gf5d5407c2 f5d5407c2ff12865653a9a132d5783196be82763\n```\n\n----------------------------------------\n\nTITLE: Defining Version Service Method in Protobuf\nDESCRIPTION: This snippet defines the Version method for the Version service, specifying its input and output types.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.0.pb.txt#2025-04-21_snippet_36\n\nLANGUAGE: protobuf\nCODE:\n```\nservice {\n  name: \"Version\"\n  method {\n    name: \"Version\"\n    input_type: \".google.protobuf.Empty\"\n    output_type: \".containerd.services.version.v1.VersionResponse\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Metric Instrument Updates\nDESCRIPTION: New metric instruments added to replace deprecated packages in go.opentelemetry.io/otel/metric/instrument, including observable counters, gauges, and histograms for both float64 and int64 types.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nFloat64ObservableCounter // replaces asyncfloat64.Counter\nFloat64ObservableUpDownCounter // replaces asyncfloat64.UpDownCounter\nFloat64ObservableGauge // replaces asyncfloat64.Gauge\nInt64ObservableCounter // replaces asyncint64.Counter\nInt64ObservableUpDownCounter // replaces asyncint64.UpDownCounter\nInt64ObservableGauge // replaces asyncint64.Gauge\nFloat64Counter // replaces syncfloat64.Counter\nFloat64UpDownCounter // replaces syncfloat64.UpDownCounter\nFloat64Histogram // replaces syncfloat64.Histogram\nInt64Counter // replaces syncint64.Counter\nInt64UpDownCounter // replaces syncint64.UpDownCounter\nInt64Histogram // replaces syncint64.Histogram\n```\n\n----------------------------------------\n\nTITLE: Creating CNI Failpoint Configuration File with Bash\nDESCRIPTION: Bash command to create a JSON file that defines failpoint behaviors for CNI operations. This example configures one error for ADD, two errors for DEL, and a pattern for CHECK commands.\nSOURCE: https://github.com/containerd/containerd/blob/main/integration/failpoint/cmd/cni-bridge-fp/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cat <<EOF | tee /tmp/cni-failpoint.json\n{\n\t\"cmdAdd\":   \"1*error(try-again)\",\n\t\"cmdDel\":   \"2*error(oops)\",\n\t\"cmdCheck\": \"1*off->1*panic(sorry)\"\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Example Config Struct Definition\nDESCRIPTION: Defines a basic configuration struct with version, name and tags fields.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype MyConfig struct {\n\tVersion int\n\tName    string\n\tTags    []string\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Worker Nodes to Kubernetes Cluster\nDESCRIPTION: Use the kubeadm join command with the token from the master initialization to add worker nodes to the Kubernetes cluster. This establishes secure communication between the node's kubelet and the API server.\nSOURCE: https://github.com/containerd/containerd/blob/main/contrib/ansible/README.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$sudo kubeadm join --token 43a25d.420ff2e06336e4c1 172.31.7.230:6443 --skip-preflight-checks\n[kubeadm] WARNING: kubeadm is in beta, please do not use it for production clusters.\n[preflight] Skipping pre-flight checks\n[discovery] Trying to connect to API Server \"172.31.7.230:6443\"\n[discovery] Created cluster-info discovery client, requesting info from \"https://172.31.7.230:6443\"\n[discovery] Cluster info signature and contents are valid, will use API Server \"https://172.31.7.230:6443\"\n[discovery] Successfully established connection with API Server \"172.31.7.230:6443\"\n[bootstrap] Detected server version: v1.7.6\n[bootstrap] The server supports the Certificates API (certificates.k8s.io/v1beta1)\n[csr] Created API client to obtain unique certificate for this node, generating keys and certificate signing request\n[csr] Received signed certificate from the API server, generating KubeConfig...\n[kubeconfig] Wrote KubeConfig file to disk: \"/etc/kubernetes/kubelet.conf\"\n\nNode join complete:\n* Certificate signing request sent to master and response\n  received.\n* Kubelet informed of new secure connection details.\n\nRun 'kubectl get nodes' on the master to see this machine join.\n```\n\n----------------------------------------\n\nTITLE: Importing Go-Restful Package Without Go Modules\nDESCRIPTION: This snippet demonstrates how to import the go-restful package in Go applications that do not utilize Go modules, applicable for versions prior to v3.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/emicklei/go-restful/v3/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\trestful \"github.com/emicklei/go-restful\"\n)\n```\n\n----------------------------------------\n\nTITLE: Float16 Package API Reference in Go\nDESCRIPTION: Complete API reference for the float16 package showing all exported types, constants, functions, and methods for working with half-precision floating-point values in Go.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/x448/float16/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage float16 // import \"github.com/x448/float16\"\n\n// Exported types and consts\ntype Float16 uint16\nconst ErrInvalidNaNValue = float16Error(\"float16: invalid NaN value, expected IEEE 754 NaN\")\n\n// Exported functions\nFromfloat32(f32 float32) Float16   // Float16 number converted from f32 using IEEE 754 default rounding\n                                      with identical results to AMD and Intel F16C hardware. NaN inputs \n                                      are converted with quiet bit always set on, to be like F16C.\n\nFromNaN32ps(nan float32) (Float16, error)   // Float16 NaN without modifying quiet bit.\n                                            // The \"ps\" suffix means \"preserve signaling\".\n                                            // Returns sNaN and ErrInvalidNaNValue if nan isn't a NaN.\n                                 \nFrombits(b16 uint16) Float16       // Float16 number corresponding to b16 (IEEE 754 binary16 rep.)\nNaN() Float16                      // Float16 of IEEE 754 binary16 not-a-number\nInf(sign int) Float16              // Float16 of IEEE 754 binary16 infinity according to sign\n\nPrecisionFromfloat32(f32 float32) Precision  // quickly indicates exact, ..., overflow, underflow\n                                             // (inline and < 1 ns/op)\n// Exported methods\n(f Float16) Float32() float32      // float32 number converted from f16 using lossless conversion\n(f Float16) Bits() uint16          // the IEEE 754 binary16 representation of f\n(f Float16) IsNaN() bool           // true if f is not-a-number (NaN)\n(f Float16) IsQuietNaN() bool      // true if f is a quiet not-a-number (NaN)\n(f Float16) IsInf(sign int) bool   // true if f is infinite based on sign (-1=NegInf, 0=any, 1=PosInf)\n(f Float16) IsFinite() bool        // true if f is not infinite or NaN\n(f Float16) IsNormal() bool        // true if f is not zero, infinite, subnormal, or NaN.\n(f Float16) Signbit() bool         // true if f is negative or negative zero\n(f Float16) String() string        // string representation of f to satisfy fmt.Stringer interface\n```\n\n----------------------------------------\n\nTITLE: Importing Go JOSE Library\nDESCRIPTION: Demonstrates how to import the latest version of the Go JOSE library into a Go project, including version specification\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/go-jose/go-jose/v4/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/go-jose/go-jose/v4\"\n```\n\n----------------------------------------\n\nTITLE: Various Fuzzing API Examples\nDESCRIPTION: Collection of different API calls for fuzzing various data types and structures\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/AdaLogics/go-fuzz-headers/README.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ncreatedString, err := f.GetString() // Gets a string\ncreatedInt, err := f.GetInt() // Gets an integer\ncreatedByte, err := f.GetByte() // Gets a byte\ncreatedBytes, err := f.GetBytes() // Gets a byte slice\ncreatedBool, err := f.GetBool() // Gets a boolean\nerr := f.FuzzMap(target_map) // Fills a map\ncreatedTarBytes, err := f.TarBytes() // Gets bytes of a valid tar archive\nerr := f.CreateFiles(inThisDir) // Fills inThisDir with files\ncreatedString, err := f.GetStringFrom(\"anyCharInThisString\", ofThisLength) // Gets a string that consists of chars from \"anyCharInThisString\" and has the exact length \"ofThisLength\"\n```\n\n----------------------------------------\n\nTITLE: Building Containerd Shim for Windows in Go\nDESCRIPTION: Illustrates how to build the Containerd shim for Windows using Go. It sets the GOOS environment variable to 'windows' and builds the shim from the ./cmd/containerd-shim-runhcs-v1 directory.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-21_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\> $env:GOOS=\"windows\"\nC:\\> go build .\\cmd\\containerd-shim-runhcs-v1\n```\n\n----------------------------------------\n\nTITLE: Defining ProcessInfo Message Type in Protobuf\nDESCRIPTION: This snippet defines the `ProcessInfo` message type using protobuf. It contains information about a process, including its PID and additional information stored in an `Any` type. This structure allows for extensibility in representing process-specific information.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/next.pb.txt#2025-04-21_snippet_15\n\nLANGUAGE: protobuf\nCODE:\n```\n  message_type {\n    name: \"ProcessInfo\"\n    field {\n      name: \"pid\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"pid\"\n    }\n    field {\n      name: \"info\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".google.protobuf.Any\"\n      json_name: \"info\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Starting containerd with Configuration\nDESCRIPTION: This command starts the containerd daemon using the specified configuration file. The `-c` flag indicates the path to the `config.toml` file. Requires a working containerd installation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/imgcrypt/v2/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n# sudo ~/src/github.com/containerd/containerd/bin/containerd -c config.toml\n```\n\n----------------------------------------\n\nTITLE: Benchmarking XXH64 Hashing in Go\nDESCRIPTION: These commands are used to benchmark the pure-Go and assembly implementations of the Sum64 function. The `benchstat` command analyzes the benchmark results to compare the performance of different implementations. The `-tags purego` flag specifies the usage of the pure-Go implementation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\n----------------------------------------\n\nTITLE: Linking to gRPC CVE Process in Markdown\nDESCRIPTION: This code snippet creates a hyperlink in Markdown format, directing users to the gRPC CVE Process document for information on security policies and reporting issues.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/google.golang.org/grpc/SECURITY.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[gRPC CVE Process](https://github.com/grpc/proposal/blob/master/P4-grpc-cve-process.md)\n```\n\n----------------------------------------\n\nTITLE: Running Go tests with race detection for gRPC-Go\nDESCRIPTION: Command to run all tests with the race detector enabled, using multiple CPU configurations and a timeout limit of 7 minutes.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/google.golang.org/grpc/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo test -race -cpu 1,4 -timeout 7m ./...\n```\n\n----------------------------------------\n\nTITLE: Building and Installing imgcrypt\nDESCRIPTION: These commands build and install the imgcrypt project. `make` compiles the project and `sudo make install` installs the compiled binaries to the system.  Requires a working Go environment and make.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/imgcrypt/v2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# make\n# sudo make install\n```\n\n----------------------------------------\n\nTITLE: Uint64Flag Wrapper Implementation in Go\nDESCRIPTION: A wrapper for the cli.Uint64Flag type that adds functionality for applying values from input sources. It preserves the original Uint64Flag behavior while extending it with input source awareness.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_47\n\nLANGUAGE: go\nCODE:\n```\ntype Uint64Flag struct {\n\t*cli.Uint64Flag\n\t// Has unexported fields.\n}\n    Uint64Flag is the flag type that wraps cli.Uint64Flag to allow for other\n    values to be specified\n\nfunc NewUint64Flag(fl *cli.Uint64Flag) *Uint64Flag\n    NewUint64Flag creates a new Uint64Flag\n\nfunc (f *Uint64Flag) Apply(set *flag.FlagSet) error\n    Apply saves the flagSet for later usage calls, then calls the wrapped\n    Uint64Flag.Apply\n\nfunc (f *Uint64Flag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Go Attribute Package\nDESCRIPTION: This code snippet shows how to embed a PkgGoDev badge in a markdown file, linking to the documentation for the OpenTelemetry Go attribute package.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/attribute/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/attribute)](https://pkg.go.dev/go.opentelemetry.io/otel/attribute)\n```\n\n----------------------------------------\n\nTITLE: Defining Transient Error Status Codes for OTLP gRPC Exporter in Go\nDESCRIPTION: A table that defines which gRPC status codes are considered transient errors when using the otlp/gRPC exporter with retry functionality. These status codes include Cancelled, Deadline Exceeded, Resource Exhausted, and others.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n| gRPC Status Code | Description |\n| ---------------- | ----------- |\n| 1  | Cancelled |\n| 4  | Deadline Exceeded |\n| 8  | Resource Exhausted |\n| 10 | Aborted |\n| 10 | Out of Range |\n| 14 | Unavailable |\n| 15 | Data Loss |\n```\n\n----------------------------------------\n\nTITLE: Monitoring Active Downloads Using dist Command in Bash\nDESCRIPTION: This Bash command uses the 'watch' utility to continuously monitor active downloads using the 'dist active' command. It helps in observing the progress of ongoing content downloads.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-01-27.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ watch -n0.2 ./dist active\n```\n\n----------------------------------------\n\nTITLE: Running Container with Blockfile Snapshotter\nDESCRIPTION: Command to run a container using the blockfile snapshotter with a busybox image.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/snapshotters/blockfile.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ # ensure that the image we are using exists; it is a regular OCI image\n$ ctr image pull docker.io/library/busybox:latest\n$ # run the container with the provides snapshotter\n$ ctr run -rm -t --snapshotter blockfile docker.io/library/busybox:latest hello sh\n```\n\n----------------------------------------\n\nTITLE: Prometheus Namespace Configuration\nDESCRIPTION: Configuration example showing how to prefix metrics with a namespace using WithNamespace option\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nexporter, err := prometheus.New(\n    prometheus.WithNamespace(\"namespace\")\n)\n```\n\n----------------------------------------\n\nTITLE: Importing smetrics Package in Go\nDESCRIPTION: Shows how to import the smetrics package into a Go project.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/xrash/smetrics/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/xrash/smetrics\"\n```\n\n----------------------------------------\n\nTITLE: Preparing a Container Snapshot in Go\nDESCRIPTION: Demonstrates how to prepare a snapshot for running a container, using the committed image snapshot as the parent.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/design/snapshots.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmounts, err := snapshotter.Prepare(containerKey, imageRootFSChainID)\n```\n\n----------------------------------------\n\nTITLE: Exponential Histogram Configuration\nDESCRIPTION: Shows how to configure a histogram as an exponential histogram using a view with ExponentialHistogram aggregation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n\"go.opentelemetry.io/otel/sdk/metric\".ExponentialHistogram\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry SDK Trace Package in Markdown\nDESCRIPTION: This snippet shows how to embed a PkgGoDev badge in a Markdown file, linking to the Go documentation for the OpenTelemetry SDK Trace package.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/sdk/trace/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/trace)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/trace)\n```\n\n----------------------------------------\n\nTITLE: Containerd Field Path Extensions\nDESCRIPTION: Defines custom protocol buffer extensions for field path functionality in Containerd.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\npackage containerd.plugin;\n\nextend google.protobuf.FileOptions {\n  optional bool fieldpath_all = 63300;\n}\n\nextend google.protobuf.MessageOptions {\n  optional bool fieldpath = 64400;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Continuity from Source using Make\nDESCRIPTION: Instructions for building the continuity tool from source code using the make command.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/continuity/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ make\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge Link for OpenTelemetry Trace Noop Package\nDESCRIPTION: Markdown snippet showing the PkgGoDev badge and link for the OpenTelemetry trace noop package documentation.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/trace/noop/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace/noop)](https://pkg.go.dev/go.opentelemetry.io/otel/trace/noop)\n```\n\n----------------------------------------\n\nTITLE: Installing Mergo in Go\nDESCRIPTION: Instructions for installing the Mergo library using Go's package manager and importing it in Go code.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/dario.cat/mergo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get dario.cat/mergo\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"dario.cat/mergo\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running Go tests for gRPC-Go\nDESCRIPTION: Command to run all tests in the repository with multiple CPU configurations and a timeout limit of 7 minutes.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/google.golang.org/grpc/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test -cpu 1,4 -timeout 7m ./...\n```\n\n----------------------------------------\n\nTITLE: Running Specific CRI Integration Tests in Bash\nDESCRIPTION: This snippet demonstrates how to run specific CRI integration tests by using the FOCUS parameter. It allows targeting individual test cases by name.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/testing.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# run CRI integration tests that match the test string <TEST_NAME>\nFOCUS=<TEST_NAME> make cri-integration\n```\n\n----------------------------------------\n\nTITLE: Defining Float64Flag Structure in Go\nDESCRIPTION: Defines the Float64Flag structure which represents a flag with a float64 value. It includes various fields for flag properties and methods for flag operations.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-21_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ntype Float64Flag struct {\n\t// Fields omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Go Module Files in Prometheus Project (Bash)\nDESCRIPTION: These commands update the go.mod and go.sum files, and copy new or updated dependencies to the vendor directory. This should be done after adding or updating dependencies.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# The GO111MODULE variable can be omitted when the code isn't located in GOPATH.\nGO111MODULE=on go mod tidy\n\nGO111MODULE=on go mod vendor\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Information with crictl\nDESCRIPTION: Command to display version information for crictl and the container runtime.\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/cri/crictl.md#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ crictl version\nVersion:  0.1.0\nRuntimeName:  containerd\nRuntimeVersion:  v1.7.0\nRuntimeApiVersion:  v1\n```\n\n----------------------------------------\n\nTITLE: Package Badge Integration for OpenTelemetry Semconv\nDESCRIPTION: Markdown code showing the pkg.go.dev badge integration for the OpenTelemetry Semantic Conventions package v1.17.0. Links to the package documentation on pkg.go.dev.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/semconv/v1.17.0/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.17.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.17.0)\n```\n\n----------------------------------------\n\nTITLE: Networking Discussion Link - Markdown\nDESCRIPTION: Link to the networking discussion issue\nSOURCE: https://github.com/containerd/containerd/blob/main/docs/historical/reports/2017-01-13.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* https://github.com/containerd/containerd/issues/362\n```\n\n----------------------------------------\n\nTITLE: Defining OCI Runtime Options in Protobuf for Containerd\nDESCRIPTION: Protocol Buffer definition for the Containerd runc runtime options. It defines configuration fields for container execution including pivot root settings, cgroup configuration, user permissions, and CRIU checkpoint paths.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/containerd/containerd/api/types/runc/options/next.pb.txt#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"github.com/containerd/containerd/core/runtime/v2/runc/options/oci.proto\"\n  package: \"containerd.runc.v1\"\n  message_type {\n    name: \"Options\"\n    field {\n      name: \"no_pivot_root\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"noPivotRoot\"\n    }\n    field {\n      name: \"no_new_keyring\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"noNewKeyring\"\n    }\n    field {\n      name: \"shim_cgroup\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"shimCgroup\"\n    }\n    field {\n      name: \"io_uid\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"ioUid\"\n    }\n    field {\n      name: \"io_gid\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"ioGid\"\n    }\n    field {\n      name: \"binary_name\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"binaryName\"\n    }\n    field {\n      name: \"root\"\n      number: 7\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"root\"\n    }\n    field {\n      name: \"systemd_cgroup\"\n      number: 9\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"systemdCgroup\"\n    }\n    field {\n      name: \"criu_image_path\"\n      number: 10\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"criuImagePath\"\n    }\n    field {\n      name: \"criu_work_path\"\n      number: 11\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"criuWorkPath\"\n    }\n    field {\n      name: \"task_api_address\"\n      number: 12\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"taskApiAddress\"\n    }\n    field {\n      name: \"task_api_version\"\n      number: 13\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"taskApiVersion\"\n    }\n    reserved_range {\n      start: 8\n      end: 9\n    }\n  }\n  message_type {\n    name: \"CheckpointOptions\"\n    field {\n      name: \"exit\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"exit\"\n    }\n    field {\n      name: \"open_tcp\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"openTcp\"\n    }\n    field {\n      name: \"external_unix_sockets\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"externalUnixSockets\"\n    }\n    field {\n      name: \"terminal\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"terminal\"\n    }\n    field {\n      name: \"file_locks\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_BOOL\n      json_name: \"fileLocks\"\n    }\n    field {\n      name: \"empty_namespaces\"\n      number: 6\n      label: LABEL_REPEATED\n      type: TYPE_STRING\n      json_name: \"emptyNamespaces\"\n    }\n    field {\n      name: \"cgroups_mode\"\n      number: 7\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"cgroupsMode\"\n    }\n    field {\n      name: \"image_path\"\n      number: 8\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"imagePath\"\n    }\n    field {\n      name: \"work_path\"\n      number: 9\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"workPath\"\n    }\n  }\n  message_type {\n    name: \"ProcessDetails\"\n    field {\n      name: \"exec_id\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"execId\"\n    }\n  }\n  options {\n    go_package: \"github.com/containerd/containerd/v2/core/runtime/v2/runc/options;options\"\n  }\n  syntax: \"proto3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding your fork as a remote repository\nDESCRIPTION: Commands to navigate to the opencensus-go directory and add your GitHub fork as a remote repository. This allows you to push changes to your fork.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $(go env GOPATH)/src/go.opencensus.io\ngit remote add fork git@github.com:YOUR_GITHUB_USERNAME/opencensus-go.git\n```\n\n----------------------------------------\n\nTITLE: Disabling Experimental Resource Semantic Conventions in Console\nDESCRIPTION: Unsets the OTEL_GO_X_RESOURCE environment variable to disable experimental resource semantic conventions in the OpenTelemetry Go SDK.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/go.opentelemetry.io/otel/sdk/internal/x/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nunset OTEL_GO_X_RESOURCE\n```\n\n----------------------------------------\n\nTITLE: Markdown Code of Conduct Document\nDESCRIPTION: Complete markdown document containing the code of conduct guidelines, standards, responsibilities, scope, enforcement procedures and attribution information.\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/cilium/ebpf/CODE_OF_CONDUCT.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at nathanjsweet at gmail dot com or i at lmb dot io. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n```\n\n----------------------------------------\n\nTITLE: Overriding default runtime binary in containerd\nDESCRIPTION: Command showing how to specify a custom runtime binary path when using the io.containerd.runc.v2 shim. This allows using alternative runtime engine implementations with the same shim.\nSOURCE: https://github.com/containerd/containerd/blob/main/core/runtime/v2/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nctr --runtime io.containerd.runc.v2 --runc-binary /usr/local/bin/runc-custom run --rm docker.io/library/alpine:latest alpine\n```\n\n----------------------------------------\n\nTITLE: Defining ProcessInfo Message Type in Protocol Buffers\nDESCRIPTION: Defines a Protocol Buffer message type for process information that includes a process ID and additional platform-specific information stored in an Any type. This provides extensibility for different platforms.\nSOURCE: https://github.com/containerd/containerd/blob/main/api/1.1.pb.txt#2025-04-21_snippet_27\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n  name: \"ProcessInfo\"\n  field {\n    name: \"pid\"\n    number: 1\n    label: LABEL_OPTIONAL\n    type: TYPE_UINT32\n    json_name: \"pid\"\n  }\n  field {\n    name: \"info\"\n    number: 2\n    label: LABEL_OPTIONAL\n    type: TYPE_MESSAGE\n    type_name: \".google.protobuf.Any\"\n    json_name: \"info\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting and setting interface{} values with type checking in Go\nDESCRIPTION: Shows how to use reflect2 to get and set interface{} values with type checking. Note that when working with a type, you need to use its pointer (*type).\nSOURCE: https://github.com/containerd/containerd/blob/main/vendor/github.com/modern-go/reflect2/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvalType := reflect2.TypeOf(1)\ni := 1\nj := 10\nvalType.Set(&i, &j)\n// i will be 10\n```"
  }
]