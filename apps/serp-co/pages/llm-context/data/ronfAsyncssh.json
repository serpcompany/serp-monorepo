[
  {
    "owner": "ronf",
    "repo": "asyncssh",
    "content": "TITLE: Basic AsyncSSH Client Connection Example\nDESCRIPTION: Simple example demonstrating how to establish an SSH connection to localhost and run a command using AsyncSSH. The code handles connection errors and prints command output.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio, asyncssh, sys\n\nasync def run_client():\n    async with asyncssh.connect('localhost') as conn:\n        result = await conn.run('echo \"Hello!\"', check=True)\n        print(result.stdout, end='')\n\ntry:\n    asyncio.get_event_loop().run_until_complete(run_client())\nexcept (OSError, asyncssh.Error) as exc:\n    sys.exit('SSH connection failed: ' + str(exc))\n```\n\n----------------------------------------\n\nTITLE: Simple SSH Client Connection in Python using AsyncSSH\nDESCRIPTION: This code snippet demonstrates a simple SSH client that connects to localhost, lists files in a directory, and handles the connection as a context manager. It uses default authentication and host key checking.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio, asyncssh, sys\n\nasync def run_client():\n    async with asyncssh.connect('localhost') as conn:\n        result = await conn.run('ls -l abc', check=True)\n        print(result.stdout, end='')\n\ntry:\n    asyncio.get_event_loop().run_until_complete(run_client())\nexcept (OSError, asyncssh.Error) as exc:\n    sys.exit('SSH connection failed: ' + str(exc))\n```\n\n----------------------------------------\n\nTITLE: Multiple SSH Clients in Parallel using AsyncSSH and Python\nDESCRIPTION: This code snippet shows how to run multiple SSH clients in parallel and gather their results using AsyncSSH and asyncio.gather().\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio, asyncssh, sys\n\nasync def run_client(host):\n    async with asyncssh.connect(host) as conn:\n        return await conn.run('echo', host)\n\nasync def run_multiple_clients():\n    tasks = (run_client(host) for host in ('localhost', 'localhost'))\n    results = await asyncio.gather(*tasks, return_exceptions=True)\n\n    for result in results:\n        if isinstance(result, Exception):\n            print('SSH connection failed: ' + str(result))\n        elif result.exit_status != 0:\n            print('Error:', result.stderr, end='')\n        else:\n            print(result.stdout, end='')\n\ntry:\n    asyncio.get_event_loop().run_until_complete(run_multiple_clients())\nexcept (OSError, asyncssh.Error) as exc:\n    sys.exit('SSH connection failed: ' + str(exc))\n```\n\n----------------------------------------\n\nTITLE: Performing SFTP Operations in AsyncSSH\nDESCRIPTION: Examples demonstrating SFTP operations including recursive directory downloads and wildcard pattern matching.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nawait sftp.get('example_dir', preserve=True, recurse=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nawait sftp.mget('*.txt')\n```\n\n----------------------------------------\n\nTITLE: Executing SCP File Transfer in AsyncSSH\nDESCRIPTION: Example showing how to perform SCP file transfer operations with AsyncSSH including remote file download.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nawait asyncssh.scp('*.txt', 'localhost:')\n```\n\nLANGUAGE: python\nCODE:\n```\nawait asyncssh.scp('example.txt', 'localhost:example2.txt')\n```\n\nLANGUAGE: python\nCODE:\n```\nawait asyncssh.scp('example_dir', 'localhost:', preserve=True, recurse=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nawait asyncssh.scp((('localhost', 8022), 'example.txt'), '.')\n```\n\nLANGUAGE: python\nCODE:\n```\nasync with asyncssh.connect('localhost') as conn:\n    await asyncssh.scp((conn, 'example.txt'), '.')\n```\n\n----------------------------------------\n\nTITLE: SSHClientConnection Class Documentation\nDESCRIPTION: Documentation for SSHClientConnection class covering connection attributes, methods for session management, forwarding, and connection lifecycle.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/api.rst#2025-04-20_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: SSHClientConnection()\n\n   .. autoattribute:: logger\n   .. automethod:: get_extra_info\n   .. automethod:: set_extra_info\n```\n\n----------------------------------------\n\nTITLE: SSH Client with Password Authentication in Python using AsyncSSH\nDESCRIPTION: This code snippet shows how to use password authentication when establishing an SSH connection using AsyncSSH.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync with asyncssh.connect('localhost', password='secretpw') as conn:\n```\n\n----------------------------------------\n\nTITLE: SSH Client with Remote Port Forwarding in Python using AsyncSSH\nDESCRIPTION: This code snippet demonstrates how to set up remote port forwarding from a server to a client using AsyncSSH.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio, asyncssh, sys\n\nasync def run_client():\n    async with asyncssh.connect('localhost') as conn:\n        listener = await conn.forward_remote_port('', 8080, 'localhost', 80)\n        await listener.wait_closed()\n\ntry:\n    asyncio.get_event_loop().run_until_complete(run_client())\nexcept (OSError, asyncssh.Error) as exc:\n    sys.exit('SSH connection failed: ' + str(exc))\n```\n\n----------------------------------------\n\nTITLE: SSH Client with Dynamic Local Port Forwarding in Python using AsyncSSH\nDESCRIPTION: This code snippet shows how to set up local port forwarding with a dynamically assigned port using AsyncSSH.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio, asyncssh, sys\n\nasync def run_client():\n    async with asyncssh.connect('localhost') as conn:\n        listener = await conn.forward_local_port('', 0, 'www.google.com', 80)\n        print('Listening on port', listener.get_port())\n        await listener.wait_closed()\n\ntry:\n    asyncio.get_event_loop().run_until_complete(run_client())\nexcept (OSError, asyncssh.Error) as exc:\n    sys.exit('SSH connection failed: ' + str(exc))\n```\n\n----------------------------------------\n\nTITLE: SSH Client with Local Port Forwarding in Python using AsyncSSH\nDESCRIPTION: This code snippet demonstrates how to set up local port forwarding from a client to a remote server using AsyncSSH.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio, asyncssh, sys\n\nasync def run_client():\n    async with asyncssh.connect('localhost') as conn:\n        listener = await conn.forward_local_port('', 8080, 'www.google.com', 80)\n        await listener.wait_closed()\n\ntry:\n    asyncio.get_event_loop().run_until_complete(run_client())\nexcept (OSError, asyncssh.Error) as exc:\n    sys.exit('SSH connection failed: ' + str(exc))\n```\n\n----------------------------------------\n\nTITLE: SSH Client Checking Exit Status in Python using AsyncSSH\nDESCRIPTION: This code snippet demonstrates how to check the exit status of a remote process executed via SSH using AsyncSSH.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio, asyncssh, sys\n\nasync def run_client():\n    async with asyncssh.connect('localhost') as conn:\n        result = await conn.run('true')\n        print('true exit status:', result.exit_status)\n\n        result = await conn.run('false')\n        print('false exit status:', result.exit_status)\n\ntry:\n    asyncio.get_event_loop().run_until_complete(run_client())\nexcept (OSError, asyncssh.Error) as exc:\n    sys.exit('SSH connection failed: ' + str(exc))\n```\n\n----------------------------------------\n\nTITLE: SSHServer Class Documentation\nDESCRIPTION: Sphinx documentation for SSHServer class including authentication handlers, connection handlers, and channel session handlers.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/api.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: SSHServer\n\n   .. automethod:: connection_made\n   .. automethod:: connection_lost\n   .. automethod:: debug_msg_received\n```\n\n----------------------------------------\n\nTITLE: SSHServerConnection Class Documentation\nDESCRIPTION: Documentation for SSHServerConnection class including connection methods, authentication, and channel creation functionality.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/api.rst#2025-04-20_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: SSHServerConnection()\n\n   .. autoattribute:: logger\n   .. automethod:: get_extra_info\n   .. automethod:: set_extra_info\n```\n\n----------------------------------------\n\nTITLE: SSH Client with Custom Client Keys in Python using AsyncSSH\nDESCRIPTION: This code snippet demonstrates how to use custom client keys for authentication when establishing an SSH connection using AsyncSSH.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync with asyncssh.connect('localhost', client_keys=['my_ssh_key']) as conn:\n```\n\n----------------------------------------\n\nTITLE: SSH Client with Custom Username in Python using AsyncSSH\nDESCRIPTION: This code snippet shows how to specify a custom username when establishing an SSH connection using AsyncSSH.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync with asyncssh.connect('localhost', username='user123') as conn:\n```\n\n----------------------------------------\n\nTITLE: SSH Client with Custom Known Hosts File in Python using AsyncSSH\nDESCRIPTION: This code snippet demonstrates how to use a custom known_hosts file for server host key verification when establishing an SSH connection.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync with asyncssh.connect('localhost', known_hosts='my_known_hosts') as conn:\n```\n\n----------------------------------------\n\nTITLE: SSH Client Setting Environment Variables in Python using AsyncSSH\nDESCRIPTION: This code snippet demonstrates how to set environment variables for a remote SSH session using AsyncSSH.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio, asyncssh, sys\n\nasync def run_client():\n    async with asyncssh.connect('localhost') as conn:\n        env = {'LANG': 'en_US.UTF-8', 'TEST': 'Testing123'}\n        async with conn.create_session(term_type='xterm', env=env) as session:\n            await session.run('env')\n\ntry:\n    asyncio.get_event_loop().run_until_complete(run_client())\nexcept (OSError, asyncssh.Error) as exc:\n    sys.exit('SSH connection failed: ' + str(exc))\n```\n\n----------------------------------------\n\nTITLE: SSH Client Setting Terminal Information in Python using AsyncSSH\nDESCRIPTION: This code snippet shows how to set terminal type and size for a remote SSH session using AsyncSSH.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio, asyncssh, sys\n\nasync def run_client():\n    async with asyncssh.connect('localhost') as conn:\n        async with conn.create_session(term_type='xterm',\n                                       term_size=(80, 24)) as session:\n            await session.run('env')\n\ntry:\n    asyncio.get_event_loop().run_until_complete(run_client())\nexcept (OSError, asyncssh.Error) as exc:\n    sys.exit('SSH connection failed: ' + str(exc))\n```\n\n----------------------------------------\n\nTITLE: Alternative SSH Client Connection without Context Manager in Python\nDESCRIPTION: This code snippet shows how to connect to an SSH server without using a context manager, requiring manual connection closure. It demonstrates connection setup and teardown.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconn = await asyncssh.connect('localhost')\n```\n\nLANGUAGE: python\nCODE:\n```\nconn.close()\nawait conn.wait_closed()\n```\n\n----------------------------------------\n\nTITLE: SSH Client with Callback Classes in Python using AsyncSSH\nDESCRIPTION: This code snippet demonstrates how to use custom SSHClient and SSHClientSession subclasses with callbacks for SSH connections and session handling.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio, asyncssh, sys\n\nclass MySSHClient(asyncssh.SSHClient):\n    def connection_made(self, conn):\n        print('Connection made to', conn.get_extra_info('peername')[0])\n\n    def auth_completed(self):\n        print('Authentication successful')\n\nclass MySSHClientSession(asyncssh.SSHClientSession):\n    def data_received(self, data, datatype):\n        print(data, end='')\n\n    def session_started(self):\n        print('Session started')\n\n    def session_ended(self):\n        print('Session ended')\n\nasync def run_client():\n    async with asyncssh.connect('localhost', client_factory=MySSHClient) as conn:\n        await conn.create_session(MySSHClientSession, 'ls -l abc')\n\ntry:\n    asyncio.get_event_loop().run_until_complete(run_client())\nexcept (OSError, asyncssh.Error) as exc:\n    sys.exit('SSH connection failed: ' + str(exc))\n```\n\n----------------------------------------\n\nTITLE: SSH Client with Stdout and Stderr Distinction in Python using AsyncSSH\nDESCRIPTION: This code snippet demonstrates how to distinguish between stdout and stderr output in the SSH client session callback.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio, asyncssh, sys\n\nclass MySSHClientSession(asyncssh.SSHClientSession):\n    def data_received(self, data, datatype):\n        if datatype == asyncssh.EXTENDED_DATA_STDERR:\n            print(data, end='', file=sys.stderr)\n        else:\n            print(data, end='')\n\n    def session_started(self):\n        print('Session started')\n\n    def session_ended(self):\n        print('Session ended')\n\nasync def run_client():\n    async with asyncssh.connect('localhost') as conn:\n        await conn.create_session(MySSHClientSession, 'ls -l abc')\n\ntry:\n    asyncio.get_event_loop().run_until_complete(run_client())\nexcept (OSError, asyncssh.Error) as exc:\n    sys.exit('SSH connection failed: ' + str(exc))\n```\n\n----------------------------------------\n\nTITLE: SSH Client with Local to Remote Process Piping in Python using AsyncSSH\nDESCRIPTION: This code snippet demonstrates how to pipe the output of a local process to a remote process using AsyncSSH.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio, asyncssh, sys\n\nasync def run_client():\n    async with asyncssh.connect('localhost') as conn:\n        proc1 = await asyncio.create_subprocess_exec(\n            'echo', 'Hello,', 'world!', stdout=asyncio.subprocess.PIPE)\n\n        async with conn.create_process('cat') as proc2:\n            stdout, _ = await proc1.communicate()\n            proc2.stdin.write(stdout)\n            proc2.stdin.write_eof()\n\n            output = await proc2.stdout.read()\n            print(output.rstrip())\n\ntry:\n    asyncio.get_event_loop().run_until_complete(run_client())\nexcept (OSError, asyncssh.Error) as exc:\n    sys.exit('SSH connection failed: ' + str(exc))\n```\n\n----------------------------------------\n\nTITLE: SSH Client with Remote Process Piping in Python using AsyncSSH\nDESCRIPTION: This code snippet shows how to pipe the output of one remote process to another remote process using AsyncSSH.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio, asyncssh, sys\n\nasync def run_client():\n    async with asyncssh.connect('localhost') as conn:\n        async with conn.create_process('echo Hello, world!') as proc1:\n            async with conn.create_process('cat', stdin=proc1.stdout) as proc2:\n                output = await proc2.stdout.read()\n                print(output.rstrip())\n\ntry:\n    asyncio.get_event_loop().run_until_complete(run_client())\nexcept (OSError, asyncssh.Error) as exc:\n    sys.exit('SSH connection failed: ' + str(exc))\n```\n\n----------------------------------------\n\nTITLE: SSH Client with Simplified Callback in Python using AsyncSSH\nDESCRIPTION: This code snippet shows a simplified version of the callback example, without customizing the SSHClient class callbacks.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio, asyncssh, sys\n\nclass MySSHClientSession(asyncssh.SSHClientSession):\n    def data_received(self, data, datatype):\n        print(data, end='')\n\n    def session_started(self):\n        print('Session started')\n\n    def session_ended(self):\n        print('Session ended')\n\nasync def run_client():\n    async with asyncssh.connect('localhost') as conn:\n        await conn.create_session(MySSHClientSession, 'ls -l abc')\n\ntry:\n    asyncio.get_event_loop().run_until_complete(run_client())\nexcept (OSError, asyncssh.Error) as exc:\n    sys.exit('SSH connection failed: ' + str(exc))\n```\n\n----------------------------------------\n\nTITLE: SSH Client with Input Redirection in Python using AsyncSSH\nDESCRIPTION: This code snippet shows how to redirect input to a remote process and capture its output to a local file using AsyncSSH.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio, asyncssh, sys\n\nasync def run_client():\n    async with asyncssh.connect('localhost') as conn:\n        infile = '1\\n2\\n3\\n'\n        async with conn.run('tail -r', stdin=infile, stdout='/tmp/stdout') as process:\n            await process.wait()\n\ntry:\n    asyncio.get_event_loop().run_until_complete(run_client())\nexcept (OSError, asyncssh.Error) as exc:\n    sys.exit('SSH connection failed: ' + str(exc))\n```\n\n----------------------------------------\n\nTITLE: Interactive SSH Client for Math Calculations in Python using AsyncSSH\nDESCRIPTION: This code snippet demonstrates an interactive SSH client that connects to a remote 'bc' calculator, sends commands, and processes the output.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio, asyncssh, sys\n\nasync def run_client():\n    async with asyncssh.connect('localhost') as conn:\n        async with conn.create_process('bc') as process:\n            for expr in ['2+2', '1*2*3*4', '2^32']:\n                process.stdin.write(expr + '\\n')\n                result = await process.stdout.readline()\n                print(expr, '=', result.strip())\n\n            process.stdin.write('quit\\n')\n\ntry:\n    asyncio.get_event_loop().run_until_complete(run_client())\nexcept (OSError, asyncssh.Error) as exc:\n    sys.exit('SSH connection failed: ' + str(exc))\n```\n\n----------------------------------------\n\nTITLE: Simple SFTP Server Implementation in AsyncSSH\nDESCRIPTION: Basic implementation of an SFTP server using AsyncSSH with default behavior. Shows the minimal setup required to start an SFTP service.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nsimple_sftp_server.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct TCP Server in AsyncSSH with Stream API\nDESCRIPTION: Example demonstrates implementation of a direct TCP server using AsyncSSH's stream API. The server accepts connections to port 7 (echo port) and echoes data back using AsyncSSH stream objects for I/O operations.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nstream_direct_server.py\n```\n\n----------------------------------------\n\nTITLE: SSH Client with Custom Remote Port Forwarding in Python using AsyncSSH\nDESCRIPTION: This code snippet shows how to implement a custom session factory for remote port forwarding, allowing selective connection forwarding or rejection.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio, asyncssh, sys\n\nclass MyPortForwarder(asyncssh.SSHForwarder):\n    def forward_connection(self, dest_host, dest_port, orig_host, orig_port):\n        if orig_host == '127.0.0.1':\n            return asyncssh.SSHForwarder.forward_connection(self, dest_host,\n                                              dest_port, orig_host, orig_port)\n        else:\n            raise asyncssh.ChannelOpenError(asyncssh.OPEN_ADMINISTRATIVELY_PROHIBITED,\n                                            'Forwarder not permitted')\n\nasync def run_client():\n    async with asyncssh.connect('localhost') as conn:\n        listener = await conn.forward_remote_port('', 8080, 'localhost', 80,\n                                                 session_factory=MyPortForwarder)\n        await listener.wait_closed()\n\ntry:\n    asyncio.get_event_loop().run_until_complete(run_client())\nexcept (OSError, asyncssh.Error) as exc:\n    sys.exit('SSH connection failed: ' + str(exc))\n```\n\n----------------------------------------\n\nTITLE: Chroot SFTP Server with Path Remapping\nDESCRIPTION: Implementation of an SFTP server that remaps user paths to individual directories under /tmp/sftp, providing isolated access for each user.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nchroot_sftp_server.py\n```\n\n----------------------------------------\n\nTITLE: Simple SCP Server Implementation in AsyncSSH\nDESCRIPTION: Example showing how to implement an SCP server by extending SFTP functionality with allow_scp flag. Uses the same SFTPServer instance for both SFTP and SCP requests.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nsimple_scp_server.py\n```\n\n----------------------------------------\n\nTITLE: AsyncSSH Channel Classes Documentation\nDESCRIPTION: Documentation for SSH channel classes like SSHClientChannel with methods for channel information, I/O operations, and process control.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/api.rst#2025-04-20_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: SSHClientChannel()\n\n   ========================= =\n   Channel attributes\n   ========================= =\n   .. autoattribute:: logger\n```\n\n----------------------------------------\n\nTITLE: AsyncSSH Session Classes Documentation\nDESCRIPTION: Documentation for various session classes including SSHClientSession, SSHServerSession, SSHTCPSession, SSHUNIXSession and SSHTunTapSession with their handlers for connection management, I/O and other operations.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/api.rst#2025-04-20_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: SSHClientSession\n.. autoclass:: SSHServerSession\n.. autoclass:: SSHTCPSession\n.. autoclass:: SSHUNIXSession\n.. autoclass:: SSHTunTapSession\n```\n\n----------------------------------------\n\nTITLE: AsyncSSH Process Classes Documentation\nDESCRIPTION: Documentation for process-related classes including SSHCompletedProcess, SSHSubprocessReadPipe, SSHSubprocessWritePipe and associated methods for process control and I/O operations.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/api.rst#2025-04-20_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: SSHCompletedProcess()\n\n.. autoclass:: SSHSubprocessReadPipe()\n.. autoclass:: SSHSubprocessWritePipe()\n.. autoclass:: SSHSubprocessProtocol\n.. autoclass:: SSHSubprocessTransport\n```\n\n----------------------------------------\n\nTITLE: SSH Process Classes Documentation\nDESCRIPTION: Documentation for SSHClientProcess and SSHServerProcess classes covering process attributes and control methods.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/api.rst#2025-04-20_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: SSHClientProcess\n\n   .. autoattribute:: channel\n   .. autoattribute:: logger\n   .. automethod:: get_extra_info\n```\n\n----------------------------------------\n\nTITLE: Reverse Direction SSH Server Implementation\nDESCRIPTION: Implementation of a reverse-direction SSH server that sends commands to be executed by the client. Demonstrates the server side of reverse SSH connection handling.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nreverse_server.py\n```\n\n----------------------------------------\n\nTITLE: Reverse Direction SSH Client Implementation\nDESCRIPTION: Implementation of a reverse-direction SSH client that executes shell commands received from the server. Requires specific key files for authentication.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/index.rst#2025-04-20_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nreverse_client.py\n```\n\n----------------------------------------\n\nTITLE: Listing Supported AsyncSSH Server Config Options in Python\nDESCRIPTION: This code snippet enumerates the OpenSSH server config options currently supported by AsyncSSH. It includes various authentication, encryption, and connection-related options.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/api.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n| AddressFamily\n| AuthorizedKeysFile\n| AllowAgentForwarding\n| BindAddress\n| CanonicalDomains\n| CanonicalizeFallbackLocal\n| CanonicalizeHostname\n| CanonicalizeMaxDots\n| CanonicalizePermittedCNAMEs\n| CASignatureAlgorithms\n| ChallengeResponseAuthentication\n| Ciphers\n| ClientAliveCountMax\n| ClientAliveInterval\n| Compression\n| GSSAPIAuthentication\n| GSSAPIKeyExchange\n| HostbasedAuthentication\n| HostCertificate\n| HostKey\n| KbdInteractiveAuthentication\n| KexAlgorithms\n| LoginGraceTime\n| MACs\n| PasswordAuthentication\n| PermitTTY\n| Port\n| ProxyCommand\n| PubkeyAuthentication\n| RekeyLimit\n| TCPKeepAlive\n| UseDNS\n```\n\n----------------------------------------\n\nTITLE: AsyncSSH Key Exchange Algorithms List\nDESCRIPTION: Lists default and disabled key exchange algorithms supported by AsyncSSH, including quantum-safe algorithms and GSS authentication options. Dependencies include gssapi/pywin32 for GSS support, OpenSSL 1.1.1+ or libnacl/libsodium for curve support, and Open Quantum Safe for SNTRUP.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/api.rst#2025-04-20_snippet_11\n\nLANGUAGE: text\nCODE:\n```\ngss-curve25519-sha256\ngss-curve448-sha512\ngss-nistp521-sha512\ngss-nistp384-sha384\ngss-nistp256-sha256\ngss-1.3.132.0.10-sha256\ngss-gex-sha256\ngss-group14-sha256\ngss-group15-sha512\ngss-group16-sha512\ngss-group17-sha512\ngss-group18-sha512\ngss-group14-sha1\nmlkem768x25519-sha256\nmlkem768nistp256-sha256\nmlkem1024nistp384-sha384\nsntrup761x25519-sha512\nsntrup761x25519-sha512@openssh.com\ncurve25519-sha256\ncurve25519-sha256@libssh.org\ncurve448-sha512\necdh-sha2-nistp521\necdh-sha2-nistp384\necdh-sha2-nistp256\necdh-sha2-1.3.132.0.10\ndiffie-hellman-group-exchange-sha256\ndiffie-hellman-group14-sha256\ndiffie-hellman-group15-sha512\ndiffie-hellman-group16-sha512\ndiffie-hellman-group17-sha512\ndiffie-hellman-group18-sha512\ndiffie-hellman-group14-sha256@ssh.com\ndiffie-hellman-group14-sha1\nrsa2048-sha256\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Match Criteria for AsyncSSH Server Config in Python\nDESCRIPTION: This code snippet shows the supported criteria for the 'Match' conditional in AsyncSSH server configuration. It includes various matching conditions like address, host, and user.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/api.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n| All\n| Canonical\n| Exec\n| Final\n| Address\n| Host\n| LocalAddress\n| LocalPort\n| User\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for AsyncSSH\nDESCRIPTION: Lists required Python package dependencies with minimum version requirements. Requires cryptography package version 39.0 or higher and typing_extensions package version 3.6 or higher.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncryptography >= 39.0\ntyping_extensions >= 3.6\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SSH Config Token Expansions in Python\nDESCRIPTION: This code snippet shows a table of SSH config token expansions supported by AsyncSSH. It includes tokens for various connection details and user information.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/api.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n===== ============================================================\n%%    Literal '%'\n%C    SHA-1 Hash of connection info (local host, host, port, user)\n%d    Local user's home directory\n%h    Remote host\n%i    Local uid (UNIX-only)\n%L    Short local hostname (without the domain)\n%l    Local hostname (including the domain)\n%n    Original remote host\n%p    Remote port\n%r    Remote username\n%u    Local username\n===== ============================================================\n```\n\n----------------------------------------\n\nTITLE: Demonstrating AsyncSSH Server Config Token Expansions in Python\nDESCRIPTION: This code snippet shows a table of server config token expansions supported by AsyncSSH. It includes tokens for username and literal percent sign.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/api.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n===== ===========\nToken Expansion\n===== ===========\n%%    Literal '%'\n%u    Username\n===== ===========\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies\nDESCRIPTION: Defines the exact versions of required Python packages. Cryptography 2.8 is used for encryption and secure communication, while Sphinx 4.2.0 is used for generating project documentation.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/rtd-req.txt#2025-04-20_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\ncryptography==2.8\nsphinx==4.2.0\n```\n\n----------------------------------------\n\nTITLE: Including External reStructuredText File in Documentation\nDESCRIPTION: This directive includes the content of the CONTRIBUTING.rst file from the parent directory into the current document. This is a common pattern in documentation to avoid duplication of content across multiple files.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/contributing.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../CONTRIBUTING.rst\n```\n\n----------------------------------------\n\nTITLE: Referencing AsyncSSH Module\nDESCRIPTION: Module reference declaration for AsyncSSH documentation using reStructuredText syntax.\nSOURCE: https://github.com/ronf/asyncssh/blob/develop/docs/changes.rst#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: asyncssh\n```"
  }
]