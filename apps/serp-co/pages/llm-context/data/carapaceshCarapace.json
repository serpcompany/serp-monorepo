[
  {
    "owner": "carapace-sh",
    "repo": "carapace",
    "content": "TITLE: Implementing Custom Actions with Conditional Logic in Go\nDESCRIPTION: An example of creating a custom action function in Carapace that accepts options and uses conditional logic based on input. The function demonstrates handling static values, file paths with prefixes, and empty values. It shows proper usage of ActionCallback for deferred execution.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/customActions.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype ExampleOpts struct {\n\tStatic bool\n}\n\n//  ActionExample(ExampleOpts{Static: true})\nfunc ActionExample(opts ExampleOpts) carapace.Action {\n\treturn carapace.ActionCallback(func(c carapace.Context) carapace.Action {\n\t\tif opts.Static {\n\t\t\treturn carapace.ActionValues(\"a\", \"b\")\n\t\t}\n\t\tif strings.HasPrefix(c.Value, \"file://\") {\n\t\t\treturn carapace.ActionFiles().Invoke(c).Prefix(\"file://\").ToA()\n\t\t}\n\t\treturn carapace.ActionValues()\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Completing Directories using ActionDirectories in Go\nDESCRIPTION: This snippet demonstrates how to use the ActionDirectories function from the Carapace library to provide directory completion in shell commands. It returns an Action that completes directory names.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionDirectories.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionDirectories()\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Completion with ActionCallback in Go\nDESCRIPTION: Demonstrates how to create a dynamic completion callback that responds to flag state. The callback checks if a 'values' flag is set and returns different completion messages based on the flag's state. Includes context handling and conditional logic for completions.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionCallback.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionCallback(func(c carapace.Context) carapace.Action {\n\tif flag := actionCmd.Flag(\"values\"); flag.Changed {\n\t\treturn carapace.ActionMessage(\"values flag is set to: '%v'\", flag.Value.String())\n\t}\n\treturn carapace.ActionMessage(\"values flag is not set\")\n})\n```\n\n----------------------------------------\n\nTITLE: Completing Executables with Carapace\nDESCRIPTION: Demonstrates how to use ActionExecutables to provide shell completion for executable files. Can be used without arguments to search PATH, or with specific directory paths for custom locations.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionExecutables.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionExecutables()\ncarapace.ActionExecutables(\"~/.local/bin\")\n```\n\n----------------------------------------\n\nTITLE: Using Batch to Concurrently Invoke Multiple Actions in Carapace\nDESCRIPTION: Demonstrates how to use the Batch function to bundle multiple ActionValues calls that will be executed concurrently with goroutines. The Invoke method executes the actions, Merge combines the results, and ToA converts the result to an Action.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/batch.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionCallback(func(c carapace.Context) carapace.Action {\n\treturn carapace.Batch(\n\t\tcarapace.ActionValues(\"A\", \"B\"),\n\t\tcarapace.ActionValues(\"C\", \"D\"),\n\t\tcarapace.ActionValues(\"E\", \"F\"),\n\t).Invoke(c).Merge().ToA()\n})\n```\n\n----------------------------------------\n\nTITLE: Using ActionFiles with Suffix Filtering in Carapace\nDESCRIPTION: This snippet demonstrates how to use the ActionFiles function to provide file completion with specific file suffix filtering. It filters for Markdown files and Go module files (go.mod, go.sum).\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionFiles.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionFiles(\".md\", \"go.mod\", \"go.sum\"),\n```\n\n----------------------------------------\n\nTITLE: Setting Up Shell Completions with Direct Installation\nDESCRIPTION: This snippet shows how to install and configure Carapace completions for the 'example' command across multiple shells including bash, elvish, fish, nushell, oil, powershell, tcsh, xonsh, and zsh.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/example/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo install .\n\n# bash\nsource <(example _carapace bash)\n\n# elvish\neval (example _carapace elvish | slurp)\n\n# fish\nexample _carapace fish | source\n\n# nushell\nexample _carapace nushell # update config.nu according to output\n\n# oil\nsource <(example _carapace oil)\n\n# powershell\nSet-PSReadLineOption -Colors @{ \"Selection\" = \"`e[7m\" }\nSet-PSReadlineKeyHandler -Key Tab -Function MenuComplete\nexample _carapace powershell | out-string | Invoke-Expression\n\n# tcsh\nset autolist\neval `example _carapace tcsh`\n\n# xonsh\n$COMPLETION_QUERY_LIMIT = 500 # increase limit\nexec($(example _carapace xonsh))\n\n# zsh\nsource <(example _carapace zsh)\n\nexample <TAB>\n```\n\n----------------------------------------\n\nTITLE: Completing Values with Descriptions using ActionValuesDescribed in Go\nDESCRIPTION: This snippet demonstrates how to use the ActionValuesDescribed function from the Carapace library to create completions with associated descriptions. It provides three values ('first', 'second', 'third') along with their respective descriptions.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionValuesDescribed.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValuesDescribed(\n\t\"first\", \"description of first\",\n\t\"second\", \"description of second\",\n\t\"third\", \"description of third\",\n)\n```\n\n----------------------------------------\n\nTITLE: Basic ActionMultiParts Implementation in Go\nDESCRIPTION: Demonstrates basic usage of ActionMultiParts for completing user:group style arguments. The code handles different completion stages based on the number of parts already entered, with support for suffixes and part separation.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionMultiParts.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionMultiParts(\":\", func(c carapace.Context) carapace.Action {\n\tswitch len(c.Parts) {\n\tcase 0:\n\t\treturn carapace.ActionValues(\"userA\", \"UserB\").Invoke(c).Suffix(\":\").ToA()\n\tcase 1:\n\t\treturn carapace.ActionValues(\"groupA\", \"groupB\")\n\tdefault:\n\t\treturn carapace.ActionValues()\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Positional Argument Completion in Go using Carapace\nDESCRIPTION: Demonstrates how to use ActionPositional with DashAnyCompletion to handle positional arguments in command completion. This allows completion to continue even when dash arguments are present by resetting Context.Args to contain all arguments.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionPositional.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.Gen(cmd).DashAnyCompletion(\n\tcarapace.ActionPositional(cmd),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Styled Command Completion Values in Go\nDESCRIPTION: Demonstrates how to create styled command completion values using ActionStyledValues. The function accepts pairs of values and styles, where styles can be predefined or custom combinations of background, foreground, and text attributes.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionStyledValues.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionStyledValues(\n\t\"first\", style.Default,\n\t\"second\", style.Blue,\n\t\"third\", style.Of(style.BgBrightBlack, style.Magenta, style.Bold),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Positional Completion in Go using Carapace\nDESCRIPTION: Example showing how to define completion values for two positional arguments using Carapace's PositionalCompletion function. The first position suggests 'pos1' and 'positional1' while the second position suggests 'pos2' and 'positional2'.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/gen/positionalCompletion.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.Gen(rootCmd).PositionalCompletion(\n    carapace.ActionValues(\"pos1\", \"positional1\"),\n    carapace.ActionValues(\"pos2\", \"positional2\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Nested ActionMultiParts Implementation in Go\nDESCRIPTION: Shows how to implement nested ActionMultiParts for completing complex patterns like KEY=VALUE pairs separated by commas. Includes file, directory, and value completion with filtering of already used keys.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionMultiParts.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionMultiParts(\",\", func(cEntries carapace.Context) carapace.Action {\n\treturn carapace.ActionMultiParts(\"=\", func(c carapace.Context) carapace.Action {\n\t\tswitch len(c.Parts) {\n\t\tcase 0:\n\t\t\tkeys := make([]string, len(cEntries.Parts))\n\t\t\tfor index, entry := range cEntries.Parts {\n\t\t\t\tkeys[index] = strings.Split(entry, \"=\")[0]\n\t\t\t}\n\t\t\treturn carapace.ActionValues(\"FILE\", \"DIRECTORY\", \"VALUE\").Filter(keys...).Suffix(\"=\")\n\t\tcase 1:\n\t\t\tswitch c.Parts[0] {\n\t\t\tcase \"FILE\":\n\t\t\t\treturn carapace.ActionFiles(\"\").NoSpace()\n\t\t\tcase \"DIRECTORY\":\n\t\t\t\treturn carapace.ActionDirectories().NoSpace()\n\t\t\tcase \"VALUE\":\n\t\t\t\treturn carapace.ActionValues(\"one\", \"two\", \"three\").NoSpace()\n\t\t\tdefault:\n\t\t\t\treturn carapace.ActionValues()\n\n\t\t\t}\n\t\tdefault:\n\t\t\treturn carapace.ActionValues()\n\t\t}\n\t})\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Split Action in Carapace Go\nDESCRIPTION: Example showing how to use the Split method with ActionCallback to handle command completion. Creates a cobra Command with boolean and string flags, configures flag completion with predefined values, and sets up positional completion with custom values and file actions.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/split.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionCallback(func(c carapace.Context) carapace.Action {\n\tcmd := &cobra.Command{}\n\tcarapace.Gen(cmd).Standalone()\n\tcmd.Flags().BoolP(\"bool\", \"b\", false, \"bool flag\")\n\tcmd.Flags().StringP(\"string\", \"s\", \"\", \"string flag\")\n\n\tcarapace.Gen(cmd).FlagCompletion(carapace.ActionMap{\n\t\t\"string\": carapace.ActionValues(\"one\", \"two\", \"three\"),\n\t})\n\n\tcarapace.Gen(cmd).PositionalCompletion(\n\t\tcarapace.ActionValues(\"pos1\", \"positional1\"),\n\t\tcarapace.ActionFiles(),\n\t)\n\n\treturn carapace.ActionExecute(cmd)\n}).Split()\n```\n\n----------------------------------------\n\nTITLE: Implementing Flag Completion with Carapace in Go\nDESCRIPTION: This snippet demonstrates how to use the FlagCompletion method from the Carapace library to define completion options for a specific flag. It uses ActionMap to associate the 'flagName' with a set of possible values.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/gen/flagCompletion.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.Gen(myCmd).FlagCompletion(carapace.ActionMap{\n    \"flagName\": carapace.ActionValues(\"a\", \"b\", \"c\"),\n})\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Data as Action in Go\nDESCRIPTION: Demonstrates using carapace.ActionImport to parse a JSON string containing values and their display representations. The JSON structure includes version info, messages array, nospace flag, usage string, and an array of value-display pairs.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionImport.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionImport([]byte(`\n{\n  \"version\": \"unknown\",\n  \"messages\": [],\n  \"nospace\": \"\",\n  \"usage\": \"\",\n  \"values\": [\n    {\n      \"value\": \"first\",\n      \"display\": \"first\"\n    },\n    {\n      \"value\": \"second\",\n      \"display\": \"second\"\n    },\n    {\n      \"value\": \"third\",\n      \"display\": \"third\"\n    }\n  ]\n}\n`))\n```\n\n----------------------------------------\n\nTITLE: Using ActionValues for Simple Value Completions in Carapace (Go)\nDESCRIPTION: ActionValues completes predefined static values for command-line arguments. This example shows how to create a completion that offers three options: \"first\", \"second\", and \"third\" when a user is typing a command.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionValues.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValues(\n\t\"first\",\n\t\"second\",\n\t\"third\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Default Completions for Any Undefined Positional Arguments in Go\nDESCRIPTION: This snippet demonstrates how to use PositionalAnyCompletion to define completion for any positional argument that hasn't been explicitly defined elsewhere. It uses ActionValues to specify the possible values that should be suggested when completing these arguments.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/gen/positionalAnyCompletion.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.Gen(rootCmd).PositionalAnyCompletion(\n    carapace.ActionValues(\"posAny\", \"positionalAny\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Caching an Action with a Duration in Go\nDESCRIPTION: Demonstrates how to cache an ActionCallback that returns the current time for 5 seconds. The cache is implicitly assigned a unique key using runtime.Caller.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/cache.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionCallback(func(c carapace.Context) carapace.Action {\n\treturn carapace.ActionValues(\n\t\ttime.Now().Format(\"15:04:05\"),\n\t)\n}).Cache(5 * time.Second)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Cache Keys with MultiParts Actions in Go\nDESCRIPTION: Shows how to use custom cache keys with the key.String function to cache values in a multi-part completion scenario. Different parts of the input path trigger different completion behaviors.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/cache.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionMultiParts(\"/\", func(c carapace.Context) carapace.Action {\n\tswitch len(c.Parts) {\n\tcase 0:\n\t\treturn carapace.ActionValues(\"one\", \"two\").Suffix(\"/\")\n\tcase 1:\n\t\treturn carapace.ActionCallback(func(c carapace.Context) carapace.Action {\n\t\t\treturn carapace.ActionValues(\n\t\t\t\ttime.Now().Format(\"15:04:05\"),\n\t\t\t)\n\t\t}).Cache(10*time.Second, key.String(c.Parts[0]))\n\tdefault:\n\t\treturn carapace.ActionValues()\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Command Completion with ActionExecute in Go\nDESCRIPTION: Demonstrates how to use ActionExecute to handle shell completion for an embedded Cobra command. Shows setup of command flags, positional arguments completion, and proper command execution. Important note that Cobra commands can only be executed once so each invocation needs a new instance.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionExecute.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionCallback(func(c carapace.Context) carapace.Action {\n\tcmd := &cobra.Command{\n\t\tUse: \"embedded\",\n\t\tCompletionOptions: cobra.CompletionOptions{\n\t\t\tDisableDefaultCmd: true,\n\t\t},\n\t\tRun: func(cmd *cobra.Command, args []string) {},\n\t}\n\n\tcmd.Flags().Bool(\"embedded-flag\", false, \"embedded flag\")\n\n\tcarapace.Gen(cmd).PositionalCompletion(\n\t\tcarapace.ActionValues(\"embeddedPositional1\", \"embeddedP1\"),\n\t\tcarapace.ActionValues(\"embeddedPositional2\", \"embeddedP2\"),\n\t)\n\n\treturn carapace.ActionExecute(cmd)\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Git Command with ActionExecCommand in Go\nDESCRIPTION: This snippet demonstrates how to use ActionExecCommand to execute the 'git remote' command and process its output. It splits the output into lines and creates an ActionValues with the results, excluding the last empty line.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionExecCommand.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionExecCommand(\"git\", \"remote\")(func(output []byte) carapace.Action {\n\tlines := strings.Split(string(output), \"\\n\")\n\treturn carapace.ActionValues(lines[:len(lines)-1]...)\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Green Style to Action Values\nDESCRIPTION: Demonstrates how to apply a green color style to values in a Carapace action. Uses the Style method with style.Green to modify the appearance of the listed values 'one' and 'two'.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/style.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValues(\n    \"one\",\n    \"two\",\n).Style(style.Green)\n```\n\n----------------------------------------\n\nTITLE: Filtering Arguments with FilterArgs in Go\nDESCRIPTION: This snippet demonstrates how to use the FilterArgs method in combination with ActionValues to filter a list of predefined values. It creates an Action with three values and applies the FilterArgs method to filter the context arguments.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/filterArgs.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValues(\n\t\"one\",\n\t\"two\",\n\t\"three\",\n).FilterArgs()\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Styles with StyleF in Go\nDESCRIPTION: Example showing how to use StyleF to apply different color styles to completion values based on the value content. The function applies green style to 'one', red style to 'two', and default style to other values.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/styleF.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValues(\n\t\"one\",\n\t\"two\",\n\t\"three\",\n).StyleF(func(s string, sc style.Context) string {\n\tswitch s {\n\tcase \"one\":\n\t\treturn style.Green\n\tcase \"two\":\n\t\treturn style.Red\n\tdefault:\n\t\treturn style.Default\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Using ActionMultiPartsN with Nested ActionMultiParts in Go\nDESCRIPTION: This snippet demonstrates how to use ActionMultiPartsN to limit the number of parts to 2 when implementing complex shell completions. It handles different completion suggestions based on the number of parts already parsed, and leverages nested ActionMultiParts for additional flexibility.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionMultiPartsN.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionMultiPartsN(\"=\", 2, func(c carapace.Context) carapace.Action {\n\tswitch len(c.Parts) {\n\tcase 0:\n\t\treturn carapace.ActionValues(\"one\", \"two\").Suffix(\"=\")\n\tcase 1:\n\t\treturn carapace.ActionMultiParts(\"=\", func(c carapace.Context) carapace.Action {\n\t\t\tswitch len(c.Parts) {\n\t\t\tcase 0:\n\t\t\t\treturn carapace.ActionValues(\"three\", \"four\").Suffix(\"=\")\n\t\t\tcase 1:\n\t\t\t\treturn carapace.ActionValues(\"five\", \"six\")\n\t\t\tdefault:\n\t\t\t\treturn carapace.ActionValues()\n\t\t\t}\n\t\t})\n\tdefault:\n\t\treturn carapace.ActionMessage(\"should never happen\")\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing SplitP Action for Command Completion in Go\nDESCRIPTION: This snippet demonstrates how to use the SplitP action from the carapace library to create a custom completion action for a cobra Command. It sets up flag and positional completions, and executes the command with pipeline support.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/splitP.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionCallback(func(c carapace.Context) carapace.Action {\n\tcmd := &cobra.Command{}\n\tcarapace.Gen(cmd).Standalone()\n\tcmd.Flags().BoolP(\"bool\", \"b\", false, \"bool flag\")\n\tcmd.Flags().StringP(\"string\", \"s\", \"\", \"string flag\")\n\n\tcarapace.Gen(cmd).FlagCompletion(carapace.ActionMap{\n\t\t\"string\": carapace.ActionValues(\"one\", \"two\", \"three\"),\n\t})\n\n\tcarapace.Gen(cmd).PositionalCompletion(\n\t\tcarapace.ActionValues(\"pos1\", \"positional1\"),\n\t\tcarapace.ActionFiles(),\n\t)\n\n\treturn carapace.ActionExecute(cmd)\n}).SplitP()\n```\n\n----------------------------------------\n\nTITLE: Setting Tag for ActionValues in Carapace (Go)\nDESCRIPTION: This snippet demonstrates how to use the Tag function to set a tag for all values in an ActionValues slice. It creates an ActionValues with IP addresses and tags them with 'interfaces'.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/tag.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValues(\n    \"192.168.1.1\",\n    \"127.0.0.1\",\n).Tag(\"interfaces\")\n```\n\n----------------------------------------\n\nTITLE: Defining Dash Completion in Go using Carapace\nDESCRIPTION: This snippet demonstrates how to use the DashCompletion function from the Carapace library to define completion for positional arguments after '--'. It sets up two sets of completion values for different positions.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/gen/dashCompletion.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.Gen(rootCmd).DashCompletion(\n    carapace.ActionValues(\"d1\", \"dash1\"),\n    carapace.ActionValues(\"d2\", \"dash2\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Tags with TagF Function in Carapace Go Library\nDESCRIPTION: This snippet demonstrates using the TagF function to dynamically categorize file types. It creates action values for different file types, applies styling based on file extensions, and then tags them as either 'images' or 'documents' based on their extension.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/tagF.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValues(\n\t\"one.png\",\n\t\"two.gif\",\n\t\"three.txt\",\n\t\"four.md\",\n).StyleF(style.ForPathExt).TagF(func(s string) string {\n\tswitch filepath.Ext(s) {\n\tcase \".png\", \".gif\":\n\t\treturn \"images\"\n\tcase \".txt\", \".md\":\n\t\treturn \"documents\"\n\tdefault:\n\t\treturn \"\"\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Using PreInvoke to Modify Action Behavior in Carapace (Go)\nDESCRIPTION: This code snippet demonstrates how to use the PreInvoke function in Carapace to modify an Action before it is invoked. In this example, it changes the working directory of the action based on the value of the 'chdir' flag of the root command.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/gen/preInvoke.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.Gen(rootCmd).PreInvoke(func(cmd *cobra.Command, flag *pflag.Flag, action carapace.Action) carapace.Action {\n\treturn action.Chdir(rootCmd.Flag(\"chdir\").Value.String())\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Carapace Integration in Nushell Config\nDESCRIPTION: This snippet shows how to configure Carapace integration in the Nushell config file. It sets up an environment variable for Carapace and defines custom commands for command completion.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/development/shells/nushell.md#2025-04-23_snippet_0\n\nLANGUAGE: nushell\nCODE:\n```\n# put this in your config.nu\n$env.CARAPACE_BRIDGES = 'zsh,fish,bash,inshellisense'\n\ndef carapace_complete [...input] {\n    carapace $input.0 nushell $input | from json\n}\n\ndef external_completer [...input] {\n    let expanded_alias = (scope aliases | where name == $input.0 | get --ignore-errors expansion.0)\n    let input = if $expanded_alias != null { $expanded_alias } else { $input.0 }\n    carapace_complete $input ...(slice 1 9999 $input)\n}\n\n$env.config = {\n    ...$env.config\n    completions: {\n        external: {\n            enable: true\n            completer: $external_completer\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Working Directory for File Actions in Go using Carapace\nDESCRIPTION: This code snippet demonstrates how to use the Chdir function from the Carapace library to change the working directory for file actions. It sets the working directory to '/tmp' for subsequent file operations.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/chdir.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionFiles().Chdir(\"/tmp\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Oil Shell Command Completion in Go for Carapace\nDESCRIPTION: This function defines the command structure and completion options for the Oil shell. It includes various flags and subcommands such as 'help', 'version', and others. The function uses Carapace's completion framework to provide contextual suggestions.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/development/shells/oil.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage cmd\n\nimport (\n\t\"github.com/carapace-sh/carapace\"\n\t\"github.com/spf13/cobra\"\n)\n\nfunc initOil(cmd *cobra.Command) {\n\tcmd.Flags().BoolP(\"help\", \"h\", false, \"Show this help message and exit\")\n\tcmd.Flags().Bool(\"version\", false, \"Show version information and exit\")\n\tcmd.Flags().BoolP(\"ast-format\", \"a\", false, \"Format with color.ast.ASTFormatter\")\n\tcmd.Flags().BoolP(\"combine-errexit\", \"e\", false, \"Simulate bash errexit in Oil only\")\n\tcmd.Flags().StringP(\"docformat\", \"d\", \"\", \"\")\n\tcmd.Flags().BoolP(\"one-pass-parse\", \"n\", false, \"\")\n\tcmd.Flags().BoolP(\"trace\", \"t\", false, \"\")\n\tcmd.Flags().StringP(\"command\", \"c\", \"\", \"\")\n\tcmd.Flags().StringSliceP(\"rcfile\", \"i\", []string{}, \"\")\n\tcmd.Flags().StringP(\"rcdir\", \"r\", \"\", \"\")\n\tcmd.Flags().StringP(\"simple-word-eval\", \"W\", \"\", \"\")\n\t\n\tcalib := &cobra.Command{\n\t\tUse:   \"calib\",\n\t\tShort: \"Make osh compatible shells\",\n\t}\n\tcmd.AddCommand(calib)\n\n\tcompile := &cobra.Command{\n\t\tUse:   \"compile\",\n\t\tShort: \"Compile your working directory into an Oil program\",\n\t}\n\tcmd.AddCommand(compile)\n\n\tcpp := &cobra.Command{\n\t\tUse:   \"cpp\",\n\t\tShort: \"Run the C preprocessor on stdin\",\n\t}\n\tcmd.AddCommand(cpp)\n\n\tfix := &cobra.Command{\n\t\tUse:   \"fix\",\n\t\tShort: \"Fix files to be Oil-compatible\",\n\t}\n\tcmd.AddCommand(fix)\n\n\tformat := &cobra.Command{\n\t\tUse:   \"format\",\n\t\tShort: \"Format Oil code\",\n\t}\n\tcmd.AddCommand(format)\n\n\ttest := &cobra.Command{\n\t\tUse:   \"test\",\n\t\tShort: \"Run unit tests\",\n\t}\n\tcmd.AddCommand(test)\n\n\ttranslate := &cobra.Command{\n\t\tUse:   \"translate\",\n\t\tShort: \"Translate shell to Oil\",\n\t}\n\tcmd.AddCommand(translate)\n\n\tcarapace.Gen(cmd).FlagCompletion(carapace.ActionMap{\n\t\t\"docformat\": carapace.ActionValues(\"osh\", \"oil\"),\n\t\t\"rcfile\":   carapace.ActionFiles(),\n\t\t\"rcdir\":    carapace.ActionDirectories(),\n\t})\n\n\tcarapace.Gen(cmd).PositionalAnyCompletion(\n\t\tcarapace.ActionFiles(),\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Using ChdirF with GitWorkTree in Carapace\nDESCRIPTION: Example showing how to use ChdirF with ActionFiles to traverse Git working tree directories. The function combines file action with directory traversal using a custom function.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/chdirF.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionFiles().ChdirF(traverse.GitWorkTree)\n```\n\n----------------------------------------\n\nTITLE: Using PreRun to Add Dynamic Commands in Carapace (Go)\nDESCRIPTION: This example demonstrates how to use the PreRun function to dynamically add a plugin command to the root command before arguments are parsed. The plugin command includes positional completion for its arguments.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/gen/preRun.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.Gen(rootCmd).PreRun(func(cmd *cobra.Command, args []string) {\n\tpluginCmd := &cobra.Command{\n\t\tUse:     \"plugin\",\n\t\tShort:   \"dynamic plugin command\",\n\t\tGroupID: \"plugin\",\n\t\tRun:     func(cmd *cobra.Command, args []string) {},\n\t}\n\n\tcarapace.Gen(pluginCmd).PositionalCompletion(\n\t\tcarapace.ActionValues(\"pl1\", \"pluginArg1\"),\n\t)\n\n\tcmd.AddCommand(pluginCmd)\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Variables with Default Values in Go\nDESCRIPTION: The GetEnv function takes a key and a default value as parameters. It attempts to retrieve the environment variable for the given key. If the variable is not set, it returns the provided default value.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/context/getEnv.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc GetEnv(key, fallback string) string {\n\tif value, ok := os.LookupEnv(key); ok {\n\t\treturn value\n\t}\n\treturn fallback\n}\n```\n\n----------------------------------------\n\nTITLE: Using UniqueListF with ActionMultiPartsN in Go\nDESCRIPTION: This snippet demonstrates how to use UniqueListF to create a unique list of values based on a transformation function. It first uses ActionMultiPartsN to create a multi-part action that returns different values based on the number of parts, then applies UniqueListF to ensure uniqueness based on the first part of the colon-separated string.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/uniqueListF.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionMultiPartsN(\":\", 2, func(c carapace.Context) carapace.Action {\n\tswitch len(c.Parts) {\n\tcase 0:\n\t\treturn carapace.ActionValues(\"one\", \"two\", \"three\")\n\tdefault:\n\t\treturn carapace.ActionValues(\"1\", \"2\", \"3\")\n\t}\n}).UniqueListF(\",\", func(s string) string {\n\treturn strings.SplitN(s, \":\", 2)[0]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining ActionStyleConfig Structure in Go\nDESCRIPTION: Defines the ActionStyleConfig struct which contains configuration options for controlling action styles. This includes settings for prefixes, styles, and how to display different types of actions.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionStyleConfig.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n# ActionStyleConfig\n```\n\n----------------------------------------\n\nTITLE: Setting Action Timeout with Fallback Message\nDESCRIPTION: Demonstrates how to set a timeout duration for a Carapace Action with a fallback message. The example creates an action that sleeps for 3 seconds but has a 2-second timeout, triggering the fallback message when the timeout is exceeded.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionCallback(func(c carapace.Context) carapace.Action {\n\ttime.Sleep(3*time.Second)\n\treturn carapace.ActionValues(\"within timeout\")\n}).Timeout(2*time.Second, carapace.ActionMessage(\"timeout exceeded\"))\n```\n\n----------------------------------------\n\nTITLE: Using ActionStyledValuesDescribed with Various Styles in Go\nDESCRIPTION: This snippet demonstrates how to use the ActionStyledValuesDescribed function from the carapace package. It creates styled value-description pairs with different visual styles applied to each pair. The function accepts triplets of value, description, and style for each item.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionStyledValuesDescribed.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionStyledValuesDescribed(\n\t\"first\", \"description of first\", style.Blink,\n\t\"second\", \"description of second\", style.Of(\"color210\", style.Underlined),\n\t\"third\", \"description of third\", style.Of(\"#112233\", style.Italic),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Carapace Completion Function for Xonsh\nDESCRIPTION: This snippet defines a function 'carapace_completer' that generates completions for Carapace commands in Xonsh. It uses subprocess to run the carapace command and parse its output.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/development/shells/xonsh.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport subprocess\n\ndef carapace_completer(prefix, line, begidx, endidx, ctx):\n    \"\"\" Generate completions using carapace \"\"\"\n    if line.strip() == '':\n        return\n\n    # split the line into words\n    words = line.split()\n\n    # run carapace\n    try:\n        output = subprocess.check_output(['carapace', 'xonsh', *words], stderr=subprocess.DEVNULL)\n        completions = json.loads(output)\n    except:\n        return\n\n    # return the completions\n    return completions\n```\n\n----------------------------------------\n\nTITLE: Applying NoSpace Modifier to ActionValues in Go\nDESCRIPTION: This snippet demonstrates how to use the NoSpace modifier with ActionValues in Carapace. It disables the automatic space suffix for completions ending with ',' or '/'.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/noSpace.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValues(\n\t\"one,\",\n\t\"two/\",\n\t\"three\",\n).NoSpace(',', '/')\n```\n\n----------------------------------------\n\nTITLE: Using Docker Compose for Shell Completion Testing\nDESCRIPTION: This snippet demonstrates how to use Docker Compose to test Carapace completions in various shell environments without installing them locally. It pulls pre-configured containers and allows running different shells with completions already set up.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/example/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker-compose pull\ndocker-compose run --rm build\ndocker-compose run --rm [bash|elvish|fish|ion|nushell|oil|powershell|tcsh|xonsh|zsh]\n\nexample <TAB>\n```\n\n----------------------------------------\n\nTITLE: Using Unless for Conditional Action Execution in Carapace (Go)\nDESCRIPTION: This code snippet demonstrates how to use the Unless function to conditionally show or hide completion options based on user input. The ActionMultiPartsN function splits user input by colon and provides different completions depending on whether the first part is 'true' or 'false'.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/unless.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionMultiPartsN(\":\", 2, func(c carapace.Context) carapace.Action {\n\tswitch len(c.Parts) {\n\tcase 0:\n\t\treturn carapace.ActionValues(\"true\", \"false\").Suffix(\":\")\n\tdefault:\n\t\treturn carapace.Batch(\n\t\t\tcarapace.ActionValues(\n\t\t\t\t\"yes\",\n\t\t\t\t\"positive\",\n\t\t\t).Unless(c.Parts[0] != \"true\"),\n\t\t\tcarapace.ActionValues(\n\t\t\t\t\"no\",\n\t\t\t\t\"negative\",\n\t\t\t).Unless(c.Parts[0] != \"false\"),\n\t\t).ToA()\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Completing Subcommands with ActionCommands in Go\nDESCRIPTION: This code snippet demonstrates how to use the ActionCommands function to provide completion for subcommands of a given command. It uses the carapace.Gen function to generate completions for a helpCmd, applying ActionCommands to the rootCmd for positional completion of any argument.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionCommands.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.Gen(helpCmd).PositionalAnyCompletion(\n\tcarapace.ActionCommands(rootCmd),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating List with Divider in Carapace Go\nDESCRIPTION: Creates a list of values separated by a comma using Carapace's ActionValues and List methods. The example shows how to define multiple values and join them with a specified delimiter.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/list.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValues(\n    \"one\",\n    \"two\", \n    \"three\"\n).List(\",\")\n```\n\n----------------------------------------\n\nTITLE: Applying UnlessF Condition to ActionValues in Go\nDESCRIPTION: Demonstrates using UnlessF to conditionally skip completion values based on a path completion condition. The action will only provide the specified values unless the CompletingPath condition is true.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/unlessF.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValues(\n\t\"./local\",\n\t\"~/home\",\n\t\"/abs\",\n\t\"one\",\n\t\"two\",\n\t\"three\",\n).UnlessF(condition.CompletingPath)\n```\n\n----------------------------------------\n\nTITLE: Defining With Function for Command Options in Go\nDESCRIPTION: The With function takes a variable number of Option functions and returns a new function that applies these options to a Command. It's used for composing and applying multiple options to a command in a flexible manner.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/reply/with.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc With(opts ...Option) Option {\n\treturn func(cmd *Command) {\n\t\tfor _, opt := range opts {\n\t\t\topt(cmd)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Values in Carapace ActionValuesDescribed in Go\nDESCRIPTION: Demonstrates how to create a set of key-value pairs using ActionValuesDescribed and filter specific values out (in this case \"2\" and \"4\"). The Filter function removes these values from the completion options presented to the user.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/filter.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValuesDescribed(\n\t\"1\", \"one\",\n\t\"2\", \"two\",\n\t\"3\", \"three\",\n\t\"4\", \"four\",\n).Filter(\"2\", \"4\")\n```\n\n----------------------------------------\n\nTITLE: Creating ActionMultiParts for Zip File Contents in Go\nDESCRIPTION: This function creates an ActionMultiParts to complete the contents of a zip file by each path segment separately. It opens the zip file, reads its contents, and uses ToMultiPartsA to split the file paths by '/' separator.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/invokedAction/toMultiPartsA.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc ActionZipFileContents(file string) carapace.Action {\n\treturn carapace.ActionCallback(func(c carapace.Context) carapace.Action {\n\t\tif reader, err := zip.OpenReader(file); err != nil {\n\t\t\treturn carapace.ActionMessage(err.Error())\n\t\t} else {\n\t\t\tdefer reader.Close()\n\t\t\tvals := make([]string, len(reader.File))\n\t\t\tfor index, f := range reader.File {\n\t\t\t\tvals[index] = f.Name\n\t\t\t}\n\t\t\treturn carapace.ActionValues(vals...).Invoke(c).ToMultiPartsA(\"/\")\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Export Structure in Go\nDESCRIPTION: Definition of the Export struct that provides a JSON representation of an InvokedAction, containing version information, messages, nospace settings, usage information, and completion values.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/export.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Export struct {\n\tversion  string   `json:\"version\"`\n\tmessages []string `json:\"messages\"`\n\tnospace  string   `json:\"nospace\"`\n\tusage    string   `json:\"usage\"`\n\tvalues   []struct {\n\t\tvalue       string `json:\"value\"`\n\t\tdisplay     string `json:\"display\"`\n\t\tdescription string `json:\"description,omitempty\"`\n\t\tstyle       string `json:\"style,omitempty\"`\n\t\ttag         string `json:\"tag,omitempty\"`\n\t} `json:\"values\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Using FilterParts with ActionMultiParts in Go\nDESCRIPTION: Example showing how to use the FilterParts function with ActionMultiParts to filter values. This creates a comma-separated action that filters the values 'one', 'two', and 'three' based on the current context parts.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/filterParts.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionMultiParts(\",\", func(c carapace.Context) carapace.Action {\n\treturn carapace.ActionValues(\n\t\t\"one\",\n\t\t\"two\",\n\t\t\"three\",\n\t).FilterParts()\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Carapace in Nushell\nDESCRIPTION: This snippet demonstrates how to install Carapace in Nushell using the 'carapace' command. It sets up Carapace for Nushell and registers it as a completion script.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/development/shells/nushell.md#2025-04-23_snippet_1\n\nLANGUAGE: nushell\nCODE:\n```\ncarapace _carapace nushell | save -f ~/.cache/carapace/init.nu\n```\n\n----------------------------------------\n\nTITLE: Filtering Values Using Retain in Go\nDESCRIPTION: Demonstrates how to use the Retain action to filter a set of value-description pairs, keeping only specified values ('2' and '4'). The action starts with four key-value pairs and retains only selected ones based on their keys.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/retain.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValuesDescribed(\n\t\"1\", \"one\",\n\t\"2\", \"two\",\n\t\"3\", \"three\",\n\t\"4\", \"four\",\n).Retain(\"2\", \"4\")\n```\n\n----------------------------------------\n\nTITLE: Using ActionCobra for Cobra Command Completion in Go\nDESCRIPTION: This snippet demonstrates how to use the ActionCobra function to provide custom completion for a Cobra command. It returns two completion options ('one' and 'two') with the NoSpace directive.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionCobra.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionCobra(func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {\n\treturn []string{\"one\", \"two\"}, cobra.ShellCompDirectiveNoSpace\n})\n```\n\n----------------------------------------\n\nTITLE: Using expect.Wait for Controlling Pattern Wait Behavior\nDESCRIPTION: This example demonstrates how to use expect.Wait to control how long to wait for a pattern to match. It allows specifying whether to wait until the pattern matches or until timeout.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/expect.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nexpect.Wait(expect.String(\"hello\"), true)\n```\n\n----------------------------------------\n\nTITLE: Shifting Arguments in Carapace Action\nDESCRIPTION: Example showing how to use the Shift method to move positional arguments left once within a carapace ActionCallback. The callback returns a message containing the argument array after shifting.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/shift.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionCallback(func(c carapace.Context) carapace.Action {\n\treturn carapace.ActionMessage(\"%#v\", c.Args)\n}).Shift(1)\n```\n\n----------------------------------------\n\nTITLE: Using expect.Or for Combining Multiple Patterns with OR Logic\nDESCRIPTION: This example demonstrates how to use expect.Or to combine multiple patterns with OR logic. The pattern will match when any of the included patterns match.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/expect.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nexpect.Or(\n  expect.String(\"hello\"),\n  expect.String(\"world\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Suppressing Specific Error Messages with Regex in Carapace (Go)\nDESCRIPTION: This code snippet demonstrates how to use the Suppress method to filter out specific error messages from a batch of actions. It creates a batch of two action messages where any message containing 'ignored' will be suppressed from the final output.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/suppress.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.Batch(\n\tcarapace.ActionMessage(\"unexpected error\"),\n\tcarapace.ActionMessage(\"ignored error\"),\n).ToA().Suppress(\"ignored\")\n```\n\n----------------------------------------\n\nTITLE: Implementing DashAnyCompletion in Go with Carapace\nDESCRIPTION: This code snippet demonstrates how to use carapace.Gen().DashAnyCompletion() to define completion suggestions for any positional arguments that appear after a '--' (dash) delimiter in a command. The ActionValues function provides specific completion suggestions.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/gen/dashAnyCompletion.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.Gen(rootCmd).DashAnyCompletion(\n    carapace.ActionValues(\"dAny\", \"dashAny\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Converting InvokedAction to Action using ToA Method in Go\nDESCRIPTION: Demonstrates how to convert an InvokedAction back to Action type using the ToA() method. The code shows chaining of ActionValues().Invoke(c) with ToA() to perform the conversion.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/invokedAction/toA.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nActionValues().Invoke(c).ToA()\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Usage Message in Carapace\nDESCRIPTION: This snippet demonstrates how to set an explicit usage message for a Carapace action using the Usage method. The code creates an action with ActionValues() and chains the Usage() method to set a custom usage message.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/usage.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValues().Usage(\"explicit usage\")\n```\n\n----------------------------------------\n\nTITLE: Referencing InvokedAction in Go\nDESCRIPTION: Shows how to reference the InvokedAction type from the carapace package. It is a logical alias for an Action whose nested callback has been invoked.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/invokedAction.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`InvokedAction`](https://pkg.go.dev/github.com/carapace-sh/carapace#InvokedAction)\n```\n\n----------------------------------------\n\nTITLE: Defining UsageF function for command usage formatting in Go\nDESCRIPTION: The UsageF function takes a command name and usage description to format a standardized usage string. It combines these parameters in the format 'name - description', providing a consistent way to represent command usage information.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/usageF.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage carapace\n\n// UsageF creates a usage with the given name and description.\nfunc UsageF(name string, description string) string {\n\treturn name + \" - \" + description\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Unique Values in ActionMultiParts using Carapace in Go\nDESCRIPTION: This code snippet demonstrates how to use the Filter method to create a unique list of values in an ActionMultiParts. It invokes an ActionValues with predefined options, filters them based on the current parts, and converts the result back to an Action.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/invokedAction/filter.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionMultiParts(\",\", func(c carapace.Context) carapace.Action {\n \treturn carapace.ActionValues(\"one\", \"two\", \"three\").Invoke(c).Filter(c.Parts...).ToA()\n})\n```\n\n----------------------------------------\n\nTITLE: Referencing Action.Invoke in Go\nDESCRIPTION: Shows how to reference the Invoke method of the Action type, which is used to create an InvokedAction by invoking the nested callback.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/invokedAction.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[invoked](https://pkg.go.dev/github.com/carapace-sh/carapace#Action.Invoke)\n```\n\n----------------------------------------\n\nTITLE: Using LookupEnv Function in Go\nDESCRIPTION: The LookupEnv function searches for a given key in environment variables and returns the corresponding value. It handles various prefixes and modifiers including '~' expansion. It returns the value and a boolean indicating whether the key was found.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/context/lookupEnv.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nLookupEnv(key string) (string, bool)\n```\n\n----------------------------------------\n\nTITLE: Referencing ActionValuesDescribed in Go\nDESCRIPTION: Shows how to reference the ActionValuesDescribed type, which is essentially equivalent to an InvokedAction as it contains static values.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/invokedAction.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[ActionValuesDescribed](./defaultActions/actionValuesDescribed.md)\n```\n\n----------------------------------------\n\nTITLE: Merging Values from Multiple InvokedActions in Go\nDESCRIPTION: Example showing how to combine values from two different ActionValues calls using the Merge function and convert the result to an action with ToA().\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/invokedAction/merge.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValues(\"one\", \"two\").Invoke(c).Merge(carapace.ActionValues(\"three\", \"four\").Invoke(c)).ToA()\n```\n\n----------------------------------------\n\nTITLE: Using MultiParts Action for Path Completion in Go with Carapace\nDESCRIPTION: This snippet demonstrates how to use the MultiParts action in Carapace to provide completion for file paths. It splits the paths by '/' delimiter, allowing for separate completion of each path segment.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/multiParts.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValues(\n\t\"dir/subdir1/fileA.txt\",\n\t\"dir/subdir1/fileB.txt\",\n\t\"dir/subdir2/fileC.txt\",\n).MultiParts(\"/\")\n```\n\n----------------------------------------\n\nTITLE: Brace Expansion in Bash\nDESCRIPTION: Brace expansion syntax used to generate multiple text strings from a pattern containing braces.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/development/shells/bash.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix to Action Values in Go using Carapace\nDESCRIPTION: Demonstrates how to add a 'water' prefix to a set of action values ('melon', 'drop', 'fall') using the Prefix function. The function chains ActionValues with Invoke and Prefix methods to generate prefixed completions.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/invokedAction/prefix.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValues(\"melon\", \"drop\", \"fall\").Invoke(c).Prefix(\"water\").ToA()\n```\n\n----------------------------------------\n\nTITLE: Redirection Operators in Bash\nDESCRIPTION: Input and output redirection operators used to control where input comes from and where output goes.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/development/shells/bash.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n<\n```\n\nLANGUAGE: bash\nCODE:\n```\n>\n```\n\n----------------------------------------\n\nTITLE: Using expect.And for Combining Multiple Patterns with AND Logic\nDESCRIPTION: This example shows how to use expect.And to combine multiple patterns with AND logic. The pattern will match only when all included patterns match.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/expect.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nexpect.And(\n  expect.String(\"hello\"),\n  expect.String(\"world\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Substitution Function in Go\nDESCRIPTION: This helper function performs the actual substitution of environment variables in the input string. It uses a regular expression to find variable placeholders and replaces them with their corresponding values from the environment. If specific variables are provided, only those are substituted.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/context/envSubst.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc substituteEnvVars(input string, vars []string) string {\n\tpattern := regexp.MustCompile(`\\$\\{([^}]+)\\}|\\$([A-Za-z_][A-Za-z0-9_]*)`)\n\treturn pattern.ReplaceAllStringFunc(input, func(match string) string {\n\t\tvar varName string\n\t\tif strings.HasPrefix(match, \"${) {\n\t\t\tvarName = match[2 : len(match)-1]\n\t\t} else {\n\t\t\tvarName = match[1:]\n\t\t}\n\n\t\tif len(vars) > 0 && !contains(vars, varName) {\n\t\t\treturn match\n\t\t}\n\n\t\tif value, exists := os.LookupEnv(varName); exists {\n\t\t\treturn value\n\t\t}\n\t\treturn \"\"\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Output Capture Methods in Bash\nDESCRIPTION: Syntax for capturing command output in Bash using command substitution and process substitution.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/development/shells/bash.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$()\n```\n\nLANGUAGE: bash\nCODE:\n```\n``\n```\n\nLANGUAGE: bash\nCODE:\n```\n<()\n```\n\n----------------------------------------\n\nTITLE: Using expect.RegExp for Regular Expression Matching in Output\nDESCRIPTION: This example shows how to use expect.RegExp to match output using a regular expression pattern. This allows for more flexible pattern matching with wildcards and other regex features.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/expect.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nexpect.RegExp(\"hello.*\")\n```\n\n----------------------------------------\n\nTITLE: Escape Character in Bash\nDESCRIPTION: The backslash character used as an escape symbol in Bash to escape special characters or continue commands on the next line.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/development/shells/bash.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\\\n```\n\n----------------------------------------\n\nTITLE: Using expect.WithTimeout for Setting Custom Timeout\nDESCRIPTION: This example shows how to use expect.WithTimeout to set a custom timeout for pattern matching. It specifies how long to wait before considering a pattern match attempt failed.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/expect.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nexpect.WithTimeout(expect.String(\"hello\"), time.Second)\n```\n\n----------------------------------------\n\nTITLE: Using MultiPartsP with Placeholders in Carapace (Go)\nDESCRIPTION: This code demonstrates how to use the MultiPartsP function to handle multi-part paths with placeholders. It shows how to define different actions based on placeholder values and how to use the matches map to access captured placeholder values for conditional logic.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/multiPartsP.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionStyledValuesDescribed(\n\t\"keys/<key>\", \"key example\", style.Default,\n\t\"keys/<key>/<value>\", \"key/value example\", style.Default,\n\t\"styles/custom\", \"custom style\", style.Of(style.Blue, style.Blink),\n\t\"styles\", \"list\", style.Yellow,\n\t\"styles/<style>\", \"details\", style.Default,\n).MultiPartsP(\"/\", \"<.*>\", func(placeholder string, matches map[string]string) carapace.Action {\n\tswitch placeholder {\n\tcase \"<key>\":\n\t\treturn carapace.ActionValues(\"key1\", \"key2\")\n\tcase \"<style>\":\n\t\treturn carapace.ActionStyles()\n\tcase \"<value>\":\n\t\tswitch matches[\"<key>\"] {\n\t\tcase \"key1\":\n\t\t\treturn carapace.ActionValues(\"val1\", \"val2\")\n\t\tcase \"key2\":\n\t\t\treturn carapace.ActionValues(\"val3\", \"val4\")\n\t\tdefault:\n\t\t\treturn carapace.ActionValues()\n\t\t}\n\tdefault:\n\t\treturn carapace.ActionValues()\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Line Continuation in Bash\nDESCRIPTION: Using backslash for line continuation in Bash scripts to split long commands across multiple lines.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/development/shells/bash.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\\\n```\n\n----------------------------------------\n\nTITLE: Adding Command Groups and Assigning Commands in Cobra (Go)\nDESCRIPTION: This code snippet demonstrates how to create and add Command Groups to a Cobra command, and then assign subcommands to these groups. It creates 'main' and 'setup' groups, and assigns various subcommands to these groups or leaves them ungrouped.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/command/group.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngroupCmd.AddGroup(\n\t&cobra.Group{ID: \"main\", Title: \"Main Commands\"},\n\t&cobra.Group{ID: \"setup\", Title: \"Setup Commands\"},\n)\n\nrun := func(cmd *cobra.Command, args []string) {}\ngroupCmd.AddCommand(\n\t&cobra.Command{Use: \"sub1\", GroupID: \"main\", Run: run},\n\t&cobra.Command{Use: \"sub2\", GroupID: \"main\", Run: run},\n\t&cobra.Command{Use: \"sub3\", GroupID: \"setup\", Run: run},\n\t&cobra.Command{Use: \"sub4\", GroupID: \"setup\", Run: run},\n\t&cobra.Command{Use: \"sub5\", Run: run},\n)\n```\n\n----------------------------------------\n\nTITLE: String Delimiters in Bash\nDESCRIPTION: Examples of single and double quote usage in Bash. The examples show how to include quotes within quoted strings.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/development/shells/bash.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n''\\''\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Message using ActionMessage in Go\nDESCRIPTION: Demonstrates how to display an error message using carapace.ActionMessage(). In Elvish and Zsh shells, this shows as a direct message, while in other shells it appears as ERR{n} integrated into the values.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionMessage.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionMessage(\"example message\")\n```\n\n----------------------------------------\n\nTITLE: Executing Command with Custom Error Handling in Go using Carapace\nDESCRIPTION: This snippet demonstrates how to use ActionExecCommandE to execute a command and handle errors custom. It shows error handling for both exit errors and general errors, returning appropriate ActionMessage responses.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionExecCommandE.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionExecCommandE(\"false\")(func(output []byte, err error) carapace.Action {\n\tif err != nil {\n\t\tif exitErr, ok := err.(*exec.ExitError); ok {\n\t\t\treturn carapace.ActionMessage(\"failed with %v\", exitErr.ExitCode())\n\t\t}\n\t\treturn carapace.ActionMessage(err.Error())\n\t}\n\treturn carapace.ActionValues()\n})\n```\n\n----------------------------------------\n\nTITLE: macOS Carapace Installation via Homebrew\nDESCRIPTION: Command for installing Carapace on macOS using Homebrew package manager.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/run.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install carapace-sh/tap/carapace\n```\n\n----------------------------------------\n\nTITLE: Initializing Carapace Completion Generator in Go\nDESCRIPTION: Basic setup to enable completion script generation for a command. This code imports the carapace package and calls the Gen function on the root command.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/gen.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/carapace-sh/carapace\"\n)\n\ncarapace.Gen(rootCmd)\n```\n\n----------------------------------------\n\nTITLE: Running Carapace with npm in Development Mode\nDESCRIPTION: Command for running Carapace using npm in development mode which enables debugging and hot reloading.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/run.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Testing Carapace Completion in Go\nDESCRIPTION: Test function to verify completion configuration during build time. This should be added to a test file to ensure completion works correctly.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/gen.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc TestCarapace(t *testing.T) {\n    carapace.Test(t)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Invoke to Execute an Action Callback with Custom Prefixing in Go\nDESCRIPTION: This code snippet demonstrates how to use the Invoke method to explicitly execute an Action callback in Carapace. It handles file paths with 'file://' prefixes by trimming the prefix when completing paths and adding it back before returning results.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/invoke.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionCallback(func(c carapace.Context) carapace.Action {\n\tswitch {\n\tcase strings.HasPrefix(c.Value, \"file://\"):\n\t\tc.Value = strings.TrimPrefix(c.Value, \"file://\")\n\tcase strings.HasPrefix(\"file://\", c.Value):\n\t\tc.Value = \"\"\n\tdefault:\n\t\treturn carapace.ActionValues()\n\t}\n\treturn carapace.ActionFiles().Invoke(c).Prefix(\"file://\").ToA()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring tmux for Asciinema Recording\nDESCRIPTION: Commands to set up a tmux session with specific dimensions for consistent Asciinema recordings. The window is resized to 108x24 characters to ensure uniformity across all recordings.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/development/asciinema.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntmux\ntmux resize-window -x 108 -y 24\n```\n\n----------------------------------------\n\nTITLE: Defining Context Structure in Go\nDESCRIPTION: Defines the Context structure used to provide information during command completion. It includes fields for the current value, arguments, parts, environment variables, and working directory.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/context.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Context struct {\n\tValue string\n\tArgs []string\n\tParts []string\n\tEnv []string\n\tDir string\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Asciicasts in Markdown\nDESCRIPTION: Markdown syntax for embedding Asciinema recordings in documentation. Uses the standard Markdown image syntax to reference a .cast file.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/development/asciinema.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![](./recording.cast)\n```\n\n----------------------------------------\n\nTITLE: Example: Completion with Disabled Flag Parsing\nDESCRIPTION: Shows how the Context is populated when Command.DisableFlagParsing is set to true, treating all arguments as positional.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/context.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncommand pos1 --flag1 pos2 -- dash1 d<TAB>\n# Value: d\n# Args: [pos1, --flag1, pos2, --, dash1]\n```\n\n----------------------------------------\n\nTITLE: Setting Optional Flag Argument in Go using Cobra\nDESCRIPTION: This code snippet shows how to mark a flag argument as optional in a Cobra command. It sets the NoOptDefVal of the flag to a space character, allowing the flag to be used without a value (--name=value format).\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/gen/flagCompletion.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nrootCmd.Flag(\"optarg\").NoOptDefVal = \" \"\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Carapace Development\nDESCRIPTION: Command to build a Docker image for development purposes using the provided Dockerfile. The image is tagged as 'carapace'.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/sandbox.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t carapace -f Dockerfile.dev .\n```\n\n----------------------------------------\n\nTITLE: Example: Completion with SetInterspersed False\nDESCRIPTION: Demonstrates how the Context changes when SetInterspersed is set to false, disabling flag parsing after the first positional argument is encountered.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/context.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncommand --flag1 flagArg1 pos1 -- dash1 --flag2 d<TAB>\n# Value: d\n# Args: [pos1, --, dash1, --flag2]\n```\n\n----------------------------------------\n\nTITLE: Running Interactive Docker Container for Carapace\nDESCRIPTION: Command to run a Docker container interactively with the previously built 'carapace' image. It mounts the current directory to /app in the container.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/sandbox.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it -v ${PWD}:/app carapace\n```\n\n----------------------------------------\n\nTITLE: Defining ActionMultiParts in Go\nDESCRIPTION: Shows the definition of ActionMultiParts, which is used to create a unique list of values for completion.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/context.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nActionValues(\"part1\", \"part2\", \"part3\").UniqueList(\",\")\n```\n\n----------------------------------------\n\nTITLE: Using expect.Exit for Matching Command Exit Codes\nDESCRIPTION: This example demonstrates how to use expect.Exit to match a specific exit code from a command. The pattern will match when the command exits with the specified code.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/expect.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nexpect.Exit(0)\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Output Documentation\nDESCRIPTION: Simple markdown header indicating a section for output documentation\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/output.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Output\n```\n\n----------------------------------------\n\nTITLE: Installing Carapace using Go\nDESCRIPTION: Command to install Carapace CLI tool using Go's package manager.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/batch/invoke.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/carapace-sh/carapace-bin/cmd/carapace\n```\n\n----------------------------------------\n\nTITLE: Invoking Carapace as a plugin\nDESCRIPTION: Example showing how to use Carapace as a plugin by adding it to the path and executing it directly.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/batch/invoke.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncarapace docker\n```\n\n----------------------------------------\n\nTITLE: Example: Completion After Double Dash\nDESCRIPTION: Illustrates how the Context changes when a double dash (--) is encountered, disabling further flag parsing and resetting the Args field to contain only dash arguments.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/context.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncommand pos1 --flag1 pos2 -- dash1 <TAB>\n# Value:\n# Args: [dash1]\n```\n\n----------------------------------------\n\nTITLE: Using Carapace Docker image\nDESCRIPTION: Docker command to pull and run the Carapace container image to generate completions.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/batch/invoke.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/carapace-sh/carapace:latest\n```\n\n----------------------------------------\n\nTITLE: Running Carapace via Docker\nDESCRIPTION: Example of running Carapace in a Docker container to get completions for a specific command.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/batch/invoke.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm ghcr.io/carapace-sh/carapace:latest docker\n```\n\n----------------------------------------\n\nTITLE: Example: Default Completion with Flag Parsing\nDESCRIPTION: Demonstrates how the Context is populated during default completion with flag parsing enabled. Shows the Value and Args fields for a command with positional arguments and flags.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/context.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncommand pos1 --flag1 pos2 --f<TAB>\n# Value: --f\n# Args: [pos1, pos2]\n```\n\n----------------------------------------\n\nTITLE: Linking to Action Package Documentation\nDESCRIPTION: Markdown link to the Go package documentation for the Action type in the carapace shell completion framework.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`Action`](https://pkg.go.dev/github.com/carapace-sh/carapace#Action)\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for ActionStyles\nDESCRIPTION: Markdown documentation explaining the ActionStyles feature with links to API documentation and demo animation\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/defaultActions/actionStyles.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ActionStyles\n\n[`ActionStyles`] completes styles.\n\n![](./actionStyles.cast)\n\n\n[`ActionStyles`]:https://pkg.go.dev/github.com/carapace-sh/carapace#ActionStyles\n```\n\n----------------------------------------\n\nTITLE: Example: Completion with ActionMultiParts\nDESCRIPTION: Illustrates how the Context is populated when using ActionMultiParts, filling the Parts field with the split Value.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/context.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncommand pos1 part1,part2,p<TAB>\n# Value: p\n# Args: [pos1]\n# Parts: [part1, part2]\n```\n\n----------------------------------------\n\nTITLE: Retain Markdown Header\nDESCRIPTION: A simple markdown header indicating retain functionality.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/invokedAction/retain.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Retain\n```\n\n----------------------------------------\n\nTITLE: Documentation Index - Markdown Structure\nDESCRIPTION: A hierarchical markdown table of contents showing the complete documentation structure with links to individual sections and components.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/SUMMARY.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Summary\n\n- [carapace](./carapace.md)\n  - [Gen](./carapace/gen.md)\n    - [DashAnyCompletion](./carapace/gen/dashAnyCompletion.md)\n    - [DashCompletion](./carapace/gen/dashCompletion.md)\n    - [FlagCompletion](./carapace/gen/flagCompletion.md)\n    [...]\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix to File Completions in Carapace\nDESCRIPTION: This code snippet demonstrates how to use the Prefix method to add a 'file://' prefix to file completions generated by ActionFiles(). When a user selects a file from the completion list, the inserted value will contain the specified prefix.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/prefix.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionFiles().Prefix(\"file://\")\n```\n\n----------------------------------------\n\nTITLE: Adding Suffix to User Action Values in Go with Carapace\nDESCRIPTION: This snippet demonstrates how to add a colon suffix to all values returned by the ActionUsers() function. The Suffix method is applied to the invoked action and then converted back to an Action via ToA().\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/invokedAction/suffix.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nActionUsers().Invoke(c).Suffix(\":\").ToA()\n```\n\n----------------------------------------\n\nTITLE: Setting Style References with StyleR in Carapace\nDESCRIPTION: This snippet demonstrates how to use the StyleR method to apply a style reference to values in a completion action. It references the KeywordAmbiguous style from the Carapace style package, allowing the style to be applied even if styles aren't loaded at registration time.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/styleR.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValues(\n\t\"one\",\n\t\"two\",\n).StyleR(&style.Carapace.KeywordAmbiguous)\n```\n\n----------------------------------------\n\nTITLE: Creating a Unique List with Comma Separator in Carapace Go\nDESCRIPTION: This snippet demonstrates how to create a unique list of values using the UniqueList method with a comma as the divider. The ActionValues function first creates a list of string values, then UniqueList is applied to ensure uniqueness with the specified separator.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/uniqueList.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValues(\n    \"one\",\n    \"two\",\n    \"three\"\n).UniqueList(\",\")\n```\n\n----------------------------------------\n\nTITLE: Using expect.String for Exact String Matching in Output\nDESCRIPTION: This example demonstrates how to use expect.String to match an exact string in command output. The pattern will match regardless of where the specified text appears in the output.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/expect.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nexpect.String(\"hello world\")\n```\n\n----------------------------------------\n\nTITLE: Using expect.InOrder for Sequential Pattern Matching\nDESCRIPTION: This example shows how to use expect.InOrder to match multiple patterns in a specific sequence. The pattern will match when all included patterns are found in the specified order.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/expect.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nexpect.InOrder(\n  expect.String(\"hello\"),\n  expect.String(\"world\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Shell Completion for 'abs' Command in Go\nDESCRIPTION: This code defines a shell completion specification for the 'abs' command. It includes top-level flags like help, man, and version, as well as a 'sync' subcommand with its own flags.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/context/abs.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage cmd\n\nimport (\n\t\"github.com/carapace-sh/carapace\"\n\t\"github.com/spf13/cobra\"\n)\n\nfunc init() {\n\tcompletion := carapace.Gen.Spec(\"abs\", func(cmd *cobra.Command) {\n\t\tcmd.Flags().Bool(\"help\", false, \"Display help information\")\n\t\tcmd.Flags().Bool(\"man\", false, \"Display complete help information\")\n\t\tcmd.Flags().BoolP(\"version\", \"v\", false, \"Output version\")\n\n\t\tcmd.AddCommand(&cobra.Command{\n\t\t\tUse:   \"sync\",\n\t\t\tShort: \"Sync the current directory with remote\",\n\t\t\tFlags: func() *pflag.FlagSet {\n\t\t\t\tflags := pflag.NewFlagSet(\"\", pflag.ContinueOnError)\n\t\t\t\tflags.Bool(\"all\", false, \"Sync all repos in the directory\")\n\t\t\t\tflags.BoolP(\"fetch\", \"f\", false, \"Fetch only\")\n\t\t\t\tflags.BoolP(\"pull\", \"p\", false, \"Pull only\")\n\t\t\t\treturn flags\n\t\t\t}(),\n\t\t})\n\t})\n\tcarapace.Gen.Register(\"abs\").Standalone()\n\tcompletion.Register()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Shell Completion Callbacks Across Different Shells\nDESCRIPTION: Shows how to test completion callbacks for different shells using the example command with _carapace. Each shell formats the completion results differently - from simple lists to structured JSON output.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/development/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexample _carapace bash example condition --required ''\nvalid\ninvalid\n\nexample _carapace elvish example condition --required ''\n[{\"Value\":\"valid\",\"Display\":\"valid\"},{\"Value\":\"invalid\",\"Display\":\"invalid\"}]\n\nexample _carapace fish example condition --required ''\nvalid\ninvalid\n\nexample _carapace powershell example condition --required ''\n[{\"CompletionText\":\"valid\",\"ListItemText\":\"valid\",\"ToolTip\":\" \"},{\"CompletionText\":\"invalid\",\"ListItemText\":\"invalid\",\"ToolTip\":\" \"}]\n\nexample _carapace xonsh example condition --required ''\n[{\"Value\":\"valid\",\"Display\":\"valid\",\"Description\":\"\"},{\"Value\":\"invalid\",\"Display\":\"invalid\",\"Description\":\"\"}]\n\nexample _carapace zsh example condition --required ''\nvalid   valid\ninvalid invalid\n```\n\n----------------------------------------\n\nTITLE: Adding Suffix to Action Values in Carapace (Go)\nDESCRIPTION: This snippet demonstrates how to use the Suffix method to append 'juice' to a list of fruit names in Carapace. It creates an ActionValues with fruits and then applies the Suffix method to add 'juice' to each value.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/suffix.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncarapace.ActionValues(\n\t\"apple\",\n\t\"melon\",\n\t\"orange\",\n).Suffix(\"juice\")\n```\n\n----------------------------------------\n\nTITLE: Registering Carapace Completer with Xonsh\nDESCRIPTION: This snippet registers the 'carapace_completer' function with Xonsh's completion system. It uses the 'completer' decorator to add the function to Xonsh's list of completers.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/development/shells/xonsh.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n__xonsh__.completers['carapace'] = carapace_completer\n__xonsh__.completers.move_to_end('carapace', last=False)\n```\n\n----------------------------------------\n\nTITLE: Quick Setup Commands for Carapace\nDESCRIPTION: A series of shell commands for quickly setting up Carapace, including downloading the repo, installing dependencies with npm, building the application, and running it.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/run.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/carapace-sh/carapace\ncd carapace\nnpm install\nnpm run build\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Shell Integration Examples for Carapace\nDESCRIPTION: Examples of how to integrate Carapace completion scripts with various shells including bash, cmd, elvish, fish, nushell, oil, powershell, tcsh, xonsh, and zsh.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/gen.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# bash\nsource <(command _carapace)\n\n# cmd (~/AppData/Local/clink/{command}.lua\nload(io.popen('command _carapace cmd-clink'):read(\"*a\"))()\n\n# elvish\neval (command _carapace | slurp)\n\n# fish\ncommand _carapace | source\n\n# nushell (update config.nu according to output)\ncommand _carapace nushell\n\n# oil\nsource <(command _carapace)\n\n# powershell\nSet-PSReadLineOption -Colors @{ \"Selection\" = \"`e[7m\" }\nSet-PSReadlineKeyHandler -Key Tab -Function MenuComplete\ncommand _carapace | Out-String | Invoke-Expression\n\n# tcsh\nset autolist\neval `command _carapace tcsh`\n\n# xonsh\nCOMPLETIONS_CONFIRM=True\nexec($(command _carapace))\n\n# zsh\nsource <(command _carapace)\n```\n\n----------------------------------------\n\nTITLE: Elvish Core Syntax Reference Table\nDESCRIPTION: A markdown table showing the fundamental syntax elements of the Elvish shell language. It displays how to format strings, handle escaping, capture command output, continue lines, perform brace expansion, and redirect input/output.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/development/shells/elvish.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                   |               |\n| -                 | -             |\n| strings           | `''''` `\"\\\"\"` |\n| escape characer   | none          |\n| output capture    | `()`          |\n| line continuation | `^`           |\n| brace expansion   | `{}`          |\n| redirection       | `<` `>`       |\n```\n\n----------------------------------------\n\nTITLE: Fish Shell Special Characters Reference\nDESCRIPTION: Overview of special characters and syntax elements in Fish shell including quotes, escape character, output capture parentheses, line continuation backslash, brace expansion and redirection operators.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/development/shells/fish.md#2025-04-23_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n'' \"\"  # string delimiters\n\\    # escape character\n()    # output capture\n\\    # line continuation\n{}    # brace expansion\n< >   # redirection operators\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Carapace Export\nDESCRIPTION: Sample JSON output from the _carapace export command, showing the structure with version, messages, and completion values including display text, descriptions, styles, and tags.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/export.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"unknown\",\n  \"messages\": [],\n  \"nospace\": \"\",\n  \"usage\": \"\",\n  \"values\": [\n    {\n      \"value\": \"modifier\",\n      \"display\": \"modifier\",\n      \"description\": \"modifier example\",\n      \"style\": \"yellow\",\n      \"tag\": \"modifier commands\"\n    },\n    {\n      \"value\": \"multiparts\",\n      \"display\": \"multiparts\",\n      \"description\": \"multiparts example\",\n      \"tag\": \"other commands\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Carapace Hidden Subcommand Usage\nDESCRIPTION: Command syntax for using the hidden _carapace subcommand to generate completion scripts. SHELL is optional as it can be detected from the parent process.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/gen.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncommand _carapace [SHELL]\n```\n\n----------------------------------------\n\nTITLE: Executing Carapace Export Command in Shell\nDESCRIPTION: Example of how to use the _carapace export command in a shell to generate JSON completion data for the 'example' command with 'm' as the prefix.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/export.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexample _carapace export example m<TAB>\n```\n\n----------------------------------------\n\nTITLE: Configuring Zsh for Carapace Completions\nDESCRIPTION: This snippet demonstrates how to set up Zsh to use Carapace for command-line completions. It sources the Carapace Zsh script, enables the completion system, and configures Zsh to use Carapace for generating completions.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/development/shells/zsh.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsource <(carapace _carapace zsh)\n\nautoload -Uz compinit\nzstyle ':completion:*' menu select\nzmodload zsh/complist\ncompinit\n_comp_options+=(globdots)\n\nzstyle ':completion:*' format $'%{\u001b[90m%}completing %B%d%b%{\u001b[0m%}'\nsetopt COMPLETE_ALIASES\nsetopt COMPLETE_IN_WORD    # Complete from both ends of a word.\nsetopt ALWAYS_TO_END       # Move cursor to the end of a completed word.\nsetopt PATH_DIRS           # Perform path search even on command names with slashes.\nsetopt AUTO_MENU           # Show completion menu on a successive tab press.\nsetopt AUTO_LIST           # Automatically list choices on ambiguous completion.\nsetopt AUTO_PARAM_SLASH    # If completed parameter is a directory, add a trailing slash.\nunsetopt MENU_COMPLETE     # Do not autoselect the first completion entry.\nunsetopt FLOW_CONTROL      # Disable start/stop characters in shell editor.\n\nzstyle ':completion:*:*:*:*:*' menu select\n\nfpath=($(carapace --fpath) $fpath)\n\n```\n\n----------------------------------------\n\nTITLE: Carapace Dockerfile definition\nDESCRIPTION: Dockerfile that defines how the Carapace container image is built, including the base image, build environment, and runtime configuration.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/batch/invoke.md#2025-04-23_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM golang:alpine AS builder\nWORKDIR /app\nRUN apk add git\nRUN go install github.com/carapace-sh/carapace-bin/cmd/carapace@latest\n\nFROM alpine:latest\nWORKDIR /app\nCOPY --from=builder /go/bin/carapace /app/carapace\nENTRYPOINT [\"/app/carapace\"]\n```\n\n----------------------------------------\n\nTITLE: Defining InvokedBatch Struct in Go\nDESCRIPTION: Defines the InvokedBatch struct with fields for invocations, results, and errors. It's used to handle multiple command invocations in a batch, storing the outcomes and any associated errors.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/invokedBatch.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype InvokedBatch struct {\n\tInvocations []Invocation\n\tResults     []string\n\tErrors      []error\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Action in Go\nDESCRIPTION: Shows how to reference the Action type, which is the base type for InvokedAction. The link points to the documentation for Action in the project.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/invokedAction.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Action](./action.md)\n```\n\n----------------------------------------\n\nTITLE: NewContext Function Header\nDESCRIPTION: Markdown header indicating the NewContext function documentation section\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/newContext.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# NewContext\n```\n\n----------------------------------------\n\nTITLE: Using carapace-parse to Parse Docker Node Help Output\nDESCRIPTION: Example of piping the help output from 'docker node update --help' to carapace-parse with specific parameters for name, parent command, and short description.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/standalone/carapace-parse.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker node update --help | carapace-parse -n update -p node -s \"Update a node\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Envsubst Command in Go\nDESCRIPTION: This snippet defines the main function for the 'envsubst' command. It reads input from stdin or files, performs environment variable substitution, and writes the result to stdout. The command supports optional arguments for specifying variable names to substitute.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/context/envSubst.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage cmd\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"regexp\"\n\t\"strings\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nvar envsubstCmd = &cobra.Command{\n\tUse:   \"envsubst [variable ...]\",\n\tShort: \"Substitute environment variables in input\",\n\tArgs:  cobra.ArbitraryArgs,\n\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\tvar input io.Reader\n\t\tif len(cmd.Flags().Args()) > 0 {\n\t\t\tfile, err := os.Open(cmd.Flags().Args()[0])\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tdefer file.Close()\n\t\t\tinput = file\n\t\t} else {\n\t\t\tinput = os.Stdin\n\t\t}\n\n\t\tscanner := bufio.NewScanner(input)\n\t\tfor scanner.Scan() {\n\t\t\tline := scanner.Text()\n\t\t\tsubstituted := substituteEnvVars(line, args)\n\t\t\tfmt.Println(substituted)\n\t\t}\n\n\t\treturn scanner.Err()\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Storage Location Format in Handlebars\nDESCRIPTION: Explains the template format for where cache files are stored. Cache is written as JSON to the user's cache directory using the Export format with a path constructed from various components.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/action/cache.md#2025-04-23_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n{{cacheDir}}/carapace/{{binary}}/{{callerChecksum}}/{{cacheChecksum}}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExpectNot Assertion Function in Go\nDESCRIPTION: This function provides a negative assertion utility for testing. It takes a testing.TB interface, a condition, and a message, then fails the test with the provided message if the condition is true. It's useful for verifying that certain conditions do not occur during tests.\nSOURCE: https://github.com/carapace-sh/carapace/blob/master/docs/src/carapace/expectNot.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// ExpectNot fails the test with the given message if the condition is true.\nfunc ExpectNot(t testing.TB, condition bool, msg string, args ...interface{}) {\n\tt.Helper()\n\tif condition {\n\t\tt.Errorf(msg, args...)\n\t}\n}\n```"
  }
]