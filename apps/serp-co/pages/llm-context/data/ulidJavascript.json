[
  {
    "owner": "ulid",
    "repo": "javascript",
    "content": "TITLE: Generating a basic ULID in TypeScript\nDESCRIPTION: Example of importing and using the basic ULID generator function to create a unique identifier.\nSOURCE: https://github.com/ulid/javascript/blob/master/README.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ulid } from \"ulid\";\n\nulid(); // \"01ARZ3NDEKTSV4RRFFQ69G5FAV\"\n```\n\n----------------------------------------\n\nTITLE: Creating monotonically increasing ULIDs in TypeScript\nDESCRIPTION: Using the monotonicFactory to generate ULIDs that are guaranteed to increase monotonically even within the same millisecond by incrementing the random component.\nSOURCE: https://github.com/ulid/javascript/blob/master/README.md#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { monotonicFactory } from \"ulid\";\n\nconst ulid = monotonicFactory();\n\n// Strict ordering for the same timestamp, by incrementing the least-significant random bit by 1\nulid(150000); // \"000XAL6S41ACTAV9WEVGEMMVR8\"\nulid(150000); // \"000XAL6S41ACTAV9WEVGEMMVR9\"\nulid(150000); // \"000XAL6S41ACTAV9WEVGEMMVRA\"\nulid(150000); // \"000XAL6S41ACTAV9WEVGEMMVRB\"\nulid(150000); // \"000XAL6S41ACTAV9WEVGEMMVRC\"\n\n// Even if a lower timestamp is passed (or generated), it will preserve sort order\nulid(100000); // \"000XAL6S41ACTAV9WEVGEMMVRD\"\n```\n\n----------------------------------------\n\nTITLE: Generating ULID with a seed time in TypeScript\nDESCRIPTION: Using a specific timestamp as a seed to consistently generate the same ULID for the time component, useful for migration purposes.\nSOURCE: https://github.com/ulid/javascript/blob/master/README.md#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nulid(1469918176385) // \"01ARYZ6S41TSV4RRFFQ69G5FAV\"\n```\n\n----------------------------------------\n\nTITLE: Validating ULID strings in TypeScript\nDESCRIPTION: Using the isValid function to check if a string is a properly formatted ULID.\nSOURCE: https://github.com/ulid/javascript/blob/master/README.md#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isValid } from \"ulid\";\n\nisValid(\"01ARYZ6S41TSV4RRFFQ69G5FAV\"); // true\nisValid(\"01ARYZ6S41TSV4RRFFQ69G5FA\"); // false\n```\n\n----------------------------------------\n\nTITLE: Decoding ULID timestamp in TypeScript\nDESCRIPTION: Using the decodeTime function to extract the timestamp from a ULID string, returning the original millisecond timestamp used during creation.\nSOURCE: https://github.com/ulid/javascript/blob/master/README.md#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeTime } from \"ulid\";\n\ndecodeTime(\"01ARYZ6S41TSV4RRFFQ69G5FAV\"); // 1469918176385\n```\n\n----------------------------------------\n\nTITLE: Encoding timestamp to ULID time component in TypeScript\nDESCRIPTION: Using the encodeTime function to convert a millisecond timestamp to the time portion of a ULID.\nSOURCE: https://github.com/ulid/javascript/blob/master/README.md#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeTime } from \"ulid\";\n\nencodeTime(1469918176385); // \"01ARYZ6S41\"\n```\n\n----------------------------------------\n\nTITLE: Installing ULID package with NPM\nDESCRIPTION: Command to install the ULID package from npm using the command line.\nSOURCE: https://github.com/ulid/javascript/blob/master/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install ulid --save\n```\n\n----------------------------------------\n\nTITLE: Using custom PRNG with Math.random in TypeScript\nDESCRIPTION: Overriding the default cryptographically-secure PRNG with Math.random, which is less secure but may be necessary in some environments.\nSOURCE: https://github.com/ulid/javascript/blob/master/README.md#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst ulid = monotonicFactory(() => Math.random());\n\nulid(); // \"01BXAVRG61YJ5YSBRM51702F6M\"\n```\n\n----------------------------------------\n\nTITLE: Using ULID CLI with npx\nDESCRIPTION: Using npx to run the ULID CLI without installing it globally.\nSOURCE: https://github.com/ulid/javascript/blob/master/README.md#2025-04-12_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpx ulid\n```\n\n----------------------------------------\n\nTITLE: Using ULID CLI globally\nDESCRIPTION: Installing and using the ULID package globally from the command line to generate ULIDs.\nSOURCE: https://github.com/ulid/javascript/blob/master/README.md#2025-04-12_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g ulid\nulid\n```\n\n----------------------------------------\n\nTITLE: Generating multiple ULIDs with CLI\nDESCRIPTION: Using the count option with the ULID CLI to generate multiple ULIDs at once.\nSOURCE: https://github.com/ulid/javascript/blob/master/README.md#2025-04-12_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nulid --count 15\n```"
  }
]