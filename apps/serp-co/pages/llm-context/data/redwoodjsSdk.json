[
  {
    "owner": "redwoodjs",
    "repo": "sdk",
    "content": "TITLE: Initializing a RedwoodSDK Application with Routes and Middleware\nDESCRIPTION: Demonstrates how to use defineApp to set up a new RedwoodSDK application with middleware functions and route handlers. The example shows two middleware functions and two route handlers that respond to requests at the root path and /ping path.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/routing.mdx#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineApp } from \"@redwoodjs/sdk/worker\";\nimport { route } from \"@redwoodjs/sdk/router\";\nimport { env } from \"cloudflare:workers\";\n\nexport default defineApp([\n  // Middleware\n  function middleware({ request, ctx }) { /* Modify context */ },\n  function middleware({ request, ctx }) { /* Modify context */ },\n  // Request Handlers\n  route(\"/\", function handler({ request, ctx }) {\n    return new Response(\"Hello, world!\")\n  }),\n  route(\"/ping\", function handler({ request, ctx }) {\n    return new Response(\"Pong!\")\n  }),\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Route Patterns in RedwoodSDK\nDESCRIPTION: Shows how to define a basic route handler using the route function, which matches a specific path and returns a response. The example highlights the two main parameters of the route function: the matching pattern string and the request handler function.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/routing.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { route } from \"@redwoodjs/sdk/router\";\n\ndefineApp([\n  route(\"/match-this\", () => new Response(\"Hello, world!\"))\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Handlers in RedwoodSDK\nDESCRIPTION: Demonstrates two types of request handlers: one that returns a standard Response object and another that returns JSX content which is rendered on the server. The handler function receives request information including the request object, parameters, and context.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/routing.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { route } from \"@redwoodjs/sdk/router\";\n\ndefineApp([\n  route(\"/a-standard-response\", ({ request, params, ctx }) => {\n    return new Response(\"Hello, world!\")\n  }),\n  route('/a-jsx-response', () => {\n    return <div>Hello, JSX world!</div>\n  }),\n])\n```\n\n----------------------------------------\n\nTITLE: Login Flow Implementation in React Component\nDESCRIPTION: Implementation of the login flow in a React component, which initiates a WebAuthn authentication process. It fetches a challenge from the server, passes it to the authenticator, and then sends the response back for verification.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/authentication.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\nconst LoginForm = () => {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [username, setUsername] = useState(\"\");\n  \n  // Action to handle user login\n  const handleLogin = async () => {\n    try {\n      setIsSubmitting(true);\n      setError(null);\n  \n      // 1. Get authentication options from the server\n      const options = await getAuthenticationOptions(username);\n  \n      // 2. Use the browser's credential API to get the authenticator's response\n      const credential = await startAuthentication(options);\n  \n      // 3. Verify the credential with the server\n      await verifyAuthentication(credential);\n  \n      // Redirect to the home page on success\n      window.location.href = \"/\";\n    } catch (e) {\n      setError(e.message || \"An error occurred during login\");\n      setIsSubmitting(false);\n    }\n  };\n\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Route in RedwoodSDK Router\nDESCRIPTION: Demonstrates how to use the 'route' function to define a simple route that responds with 'Hello, World!'.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/reference/sdk-router.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { route } from \"@redwoodjs/sdk/router\";\n\nroute(\"/\", () => new Response(\"Hello, World!\"));\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to R2 in RedwoodJS Worker\nDESCRIPTION: This snippet demonstrates how to handle file uploads to R2 storage in a RedwoodJS worker. It uses the defineApp and route functions from @redwoodjs/sdk, processes form data, and streams the file directly to R2 storage.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/storage.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineApp } from \"@redwoodjs/sdk/worker\";\nimport { route } from \"@redwoodjs/sdk/router\";\n\ndefineApp([\n  route(\"/upload/\", async ({ request, env }) => {\n    const formData = await request.formData();\n    const file = formData.get(\"file\") as File;\n\n    // Stream the file directly to R2\n    const r2ObjectKey = `/storage/${file.name}`;\n    await env.R2.put(r2ObjectKey, file.stream(), {\n      httpMetadata: {\n        contentType: file.type,\n      },\n    });\n\n    return new Response(JSON.stringify({ key: r2ObjectKey }), {\n      status: 200,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n  }),\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Interruptors for Authentication in RedwoodSDK\nDESCRIPTION: Shows how to implement authentication checks using interruptors, which are functions that run in sequence before the main handler. If an interruptor returns a response, the chain is broken and that response is returned immediately, providing a way to guard protected routes.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/routing.mdx#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineApp } from \"@redwoodjs/sdk/worker\";\nimport { route } from \"@redwoodjs/sdk/router\";\nimport { EditBlogPage } from \"src/pages/blog/EditBlogPage\";\n\nfunction isAuthenticated({ request, ctx }) {\n  // Ensure that this user is authenticated\n  if (!ctx.user) {\n    return new Response(\"Unauthorized\", { status: 401 })\n  }\n}\n\ndefineApp([\n  route(\"/blog/:slug/edit\", [isAuthenticated, EditBlogPage])\n])\n```\n\n----------------------------------------\n\nTITLE: Rendering Static Content with JSX in RedwoodSDK Router\nDESCRIPTION: Illustrates how to use the 'render' function to statically render the contents of JSX elements, controlling the output of HTML for different route groups.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/reference/sdk-router.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from \"@redwoodjs/sdk/router\";\n\nimport { ReactDocument } from \"@/app/Document\";\nimport { StaticDocument } from \"@/app/Document\";\n\nimport { routes as appRoutes } from \"@/app/pages/app/routes\";\nimport { routes as docsRoutes } from \"@/app/pages/docs/routes\";\n\nexport default defineApp([\n  render(ReactDocument, [prefix(\"/app\", appRoutes)]),\n  render(StaticDocument, [prefix(\"/docs\", docsRoutes)]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Session Handling in Worker\nDESCRIPTION: Core implementation of session handling in the worker file. It checks for a session cookie, verifies its signature, loads session data from a Durable Object, and retrieves the user from the database if a session is active.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/authentication.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\n// Session and User Authentication\nlet user = null;\nconst sessionCookie = request.cookies.get(\"session_id\");\n\nif (sessionCookie) {\n  // 1. Verify the session ID signature\n  const isValid = await verifySessionId(sessionCookie, env);\n  \n  if (isValid) {\n    // 2. Load session data from the Durable Object\n    const session = sessions.get(sessionCookie);\n    const sessionData = await session.get();\n\n    // 3. If there's an active user in the session, load them\n    if (sessionData.userId) {\n      // Create Prisma client\n      const prisma = new PrismaClient({\n        datasources: {\n          db: {\n            url: env.DB,\n          },\n        },\n      });\n\n      // 4. Load the user from the database\n      user = await prisma.user.findUnique({\n        where: { id: sessionData.userId },\n      });\n    }\n  }\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Middleware and Context in RedwoodSDK\nDESCRIPTION: Demonstrates how to use middleware functions to populate the context object with session and user data before route matching occurs. This pattern allows sharing data between different parts of the application and implementing authentication checks at the route level.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/routing.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineApp } from \"@redwoodjs/sdk/worker\";\nimport { route } from \"@redwoodjs/sdk/router\";\nimport { env } from \"cloudflare:workers\";\n\ndefineApp([\n  sessionMiddleware,\n  async function getUserMiddleware({ request, ctx }) {\n    if (ctx.session.userId) {\n      ctx.user = await db.user.find({ where: { id: ctx.session.userId } });\n    }\n  },\n  route(\"/hello\", [\n    function ({ ctx }) {\n      if (!ctx.user) {\n        return new Response(\"Unauthorized\", { status: 401 });\n      }\n    },\n    function ({ ctx }) {\n      return new Response(`Hello ${ctx.user.username}!`);\n    },\n  ]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Layout in RedwoodSDK\nDESCRIPTION: Shows how to define the HTML document structure for your application using the render function. The Document component provides the HTML shell including head metadata, scripts, stylesheets, and a mount point for React components, which is crucial for client-side hydration.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/routing.mdx#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineApp } from \"@redwoodjs/sdk/worker\";\nimport { route, render } from \"@redwoodjs/sdk/router\";\n\nimport { Document } from \"@/pages/Document\";\nimport { HomePage } from \"@/pages/HomePage\";\n\nexport default defineApp([\n  render(Document, [route(\"/\", HomePage)])\n]);\n```\n\n----------------------------------------\n\nTITLE: Downloading Files from R2 in RedwoodJS Worker\nDESCRIPTION: This snippet shows how to handle file downloads from R2 storage in a RedwoodJS worker. It uses the defineApp and route functions, retrieves the file from R2 based on the URL parameter, and streams it directly to the client.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/storage.mdx#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineApp } from \"@redwoodjs/sdk/worker\";\nimport { route } from \"@redwoodjs/sdk/router\";\n\ndefineApp([\n  route(\"/download/*\", async ({ request, params, env }) => {\n    const object = await env.R2.get(\"/storage/\" + params.$0);\n    if (object === null) {\n      return new Response(\"Object Not Found\", { status: 404 });\n    }\n    return new Response(object.body, {\n      headers: {\n        \"Content-Type\": object.httpMetadata?.contentType as string,\n      },\n    });\n  }),\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Client-Side Form Component with Server Action\nDESCRIPTION: Implements a client-side form component that uses a server action for form submission, demonstrating the integration between client and server components.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/react-server-components.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { addTodo } from \"./functions\";\n\nexport default function AddTodo() {\n  return (\n    <form action={addTodo}>\n      <input type=\"text\" name=\"title\" />\n      <button type=\"submit\">Add</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Async Data Fetching with Suspense Integration\nDESCRIPTION: Implements async data fetching in server components using Suspense for loading states, demonstrating todo list retrieval and rendering with proper context handling.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/react-server-components.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function Todos({ ctx }) {\n  const todos = await db.todo.findMany({ where: { userId: ctx.user.id } });\n  return (\n    <ol>\n      {todos.map((todo) => (\n        <li key={todo.id}>{todo.title}</li>\n      ))}\n    </ol>\n  );\n}\n\nexport async function TodoPage({ ctx }) {\n  return (\n    <div>\n      <h1>Todos</h1>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Todos ctx={ctx} />\n      </Suspense>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: DefineApp with Middleware and Routes\nDESCRIPTION: Shows how to use defineApp with middleware functions and route handlers for request processing.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/reference/sdk-worker.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineApp } from '@redwoodjs/sdk/worker'\nimport { route } from '@redwoodjs/sdk/router'\n\ndefineApp([\n  // Middleware\n  function  middleware1({ request, ctx }) {\n    ctx.var1 = 'we break'\n  },\n  function  middleware1({ request, ctx }) {\n    ctx.var1 = ctx.var1 + ' abstractions'\n  },\n  // Route handlers\n  route('/', ({ ctx }) => new Response(ctx.var1)), // we break abstractions\n  route('/ping', () => new Response('pong!')),\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Document Component for RedwoodSDK Applications\nDESCRIPTION: Defines the document structure used as the shell for rendering content in a RedwoodSDK application. This component includes the HTML structure, head metadata, client-side hydration script, and a root element where the dynamic React content will be mounted.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/routing.mdx#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Document = ({ children }) => (\n  <html lang=\"en\">\n    <head>\n      <meta charSet=\"utf-8\" />\n      <script type=\"module\" src=\"/src/client.tsx\"></script>\n    </head>\n    <body>\n      <div id=\"root\">{children}</div>\n    </body>\n  </html>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Server Component in React\nDESCRIPTION: Demonstrates the creation of a basic server component that renders static content on the server side and streams to the client without client-side interactivity.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/react-server-components.mdx#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function MyServerComponent() {\n  return <div>Hello, from the server!</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Functions for Data Mutation\nDESCRIPTION: Defines a server function for adding todos that executes on the server side, handling form data and database operations with proper context access.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/react-server-components.mdx#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"use server\";\n\nimport { requestInfo } from \"@redwoodjs/sdk/worker\";\n\nexport async function addTodo(formData: FormData) {\n  const { ctx } = requestInfo;\n  const title = formData.get(\"title\");\n  await db.todo.create({ data: { title, userId: ctx.user.id } });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Client-Side Interactive Component\nDESCRIPTION: Shows how to create a client component using the 'use client' directive for handling user interactions and state management in the browser.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/react-server-components.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nexport default function MyClientComponent() {\n  return <button>Click me</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Streaming Server Function in RedwoodJS\nDESCRIPTION: This server function sends a prompt to Cloudflare's AI model and returns the response as a ReadableStream. It uses the 'use server' directive and exports an async function that takes a prompt string as input.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/guides/rsc-streams.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"use server\";\n\nexport async function sendMessage(prompt: string) {\n  console.log(\"Running AI with Prompt:\", prompt);\n  const response = await env.AI.run(\"@cf/meta/llama-4-scout-17b-16e-instruct\", {\n    prompt,\n    stream: true,\n  });\n  return response as unknown as ReadableStream;\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Functions Implementation\nDESCRIPTION: Server-side authentication functions for handling WebAuthn operations. This code includes the implementation of `verifyAuthentication`, which validates the authenticator response against the stored challenge.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/authentication.mdx#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\n// Verify authentication response from WebAuthn\nexport async function verifyAuthentication(\n  credential: PublicKeyCredential\n): Promise<{ success: boolean }> {\n  \"use server\";\n\n  try {\n    // 1. Get the authentication response\n    const authenticatorData = credential.response as AuthenticatorAssertionResponse;\n    const rawId = arrayBufferToBase64Url(credential.rawId);\n    \n    // 2. Convert the response data to the format required by WebAuthn\n    const authData = {\n      id: credential.id,\n      rawId,\n      response: {\n        authenticatorData: arrayBufferToBase64Url(\n          authenticatorData.authenticatorData\n        ),\n        clientDataJSON: arrayBufferToBase64Url(authenticatorData.clientDataJSON),\n        signature: arrayBufferToBase64Url(authenticatorData.signature),\n      },\n      type: credential.type,\n    };\n    \n    // 3. Get session store to access the challenge\n    const session = sessions.get();\n    const sessionData = await session.get();\n    \n    if (!sessionData.challenge) {\n      throw new Error(\"No authentication challenge found\");\n    }\n    \n    // 4. Create PrismaClient to access the database\n    const prisma = new PrismaClient();\n    \n    // 5. Verify the credential against the stored challenge\n    const verification = await verifyAuthenticationResponse({\n      response: authData,\n      expectedChallenge: sessionData.challenge,\n      requireUserVerification: false,\n    });\n    \n    // 6. Find the credential in the database\n    const userCredential = await prisma.credential.findUnique({\n      where: { credentialID: verification.credentialID },\n      include: { user: true },\n    });\n    \n    if (!userCredential) {\n      throw new Error(\"No matching credential found\");\n    }\n    \n    // 7. Update the counter for the credential to prevent replay attacks\n    await prisma.credential.update({\n      where: { id: userCredential.id },\n      data: { counter: verification.counter },\n    });\n    \n    // 8. Update the session with the user ID to complete login\n    await session.save({ userId: userCredential.userId });\n    \n    return { success: true };\n  } catch (error) {\n    console.error(\"Authentication verification failed:\", error);\n    throw new Error(\"Authentication failed\");\n  }\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Consuming Server Function Stream in RedwoodJS Client Component\nDESCRIPTION: This React component demonstrates how to use the `consumeEventStream` function from RedwoodJS SDK to parse chunks from the server function stream. It updates the UI in real-time as chunks are received and handles the completion of the stream.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/guides/rsc-streams.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { sendMessage } from \"./functions\";\nimport { useState } from \"react\";\nimport { consumeEventStream } from \"@redwoodjs/sdk/client\";\n\nexport function Chat() {\n  const [message, setMessage] = useState(\"\");\n  const [reply, setReply] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    setIsLoading(true);\n\n    setReply(\"\");\n    (await sendMessage(message)).pipeTo(\n      consumeEventStream({\n        onChunk: (event) => {\n          setReply((prev) => {\n            if (event.data === \"[DONE]\") {\n              setIsLoading(false);\n              return prev;\n            }\n            return (prev += JSON.parse(event.data).response);\n          });\n        },\n      })\n    );\n  };\n\n  return (\n    <div>\n      <div>{reply}</div>\n\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          value={message}\n          placeholder=\"Type a message...\"\n          onChange={(e) => setMessage(e.target.value)}\n        />\n        <button type=\"submit\" disabled={message.length === 0 || isLoading}>\n          {isLoading ? \"Sending...\" : \"Send\"}\n        </button>\n      </form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Registration Form Implementation with Turnstile Integration\nDESCRIPTION: React component for user registration that integrates Cloudflare Turnstile for bot protection. It shows how the Turnstile token is generated and included with the registration request.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/authentication.mdx#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\nconst RegisterForm = () => {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [username, setUsername] = useState(\"\");\n  const turnstileRef = useRef<HTMLDivElement>(null);\n\n  // Initialize Turnstile for bot protection\n  const { token } = useTurnstile({\n    sitekey: TURNSTILE_SITE_KEY,\n    ref: turnstileRef,\n  });\n\n  // Action to handle user registration\n  const handleRegister = async () => {\n    try {\n      setIsSubmitting(true);\n      setError(null);\n\n      // 1. Get registration options from the server\n      const options = await getRegistrationOptions(username);\n\n      // 2. Use the browser's credential API to create a new credential\n      const credential = await startRegistration(options);\n\n      // 3. Verify the credential with the server, including the Turnstile token\n      await verifyRegistration(username, credential, token);\n\n      // Redirect to the home page on success\n      window.location.href = \"/\";\n    } catch (e) {\n      setError(e.message || \"An error occurred during registration\");\n      setIsSubmitting(false);\n    }\n  };\n\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Processing Queue Messages in a Worker\nDESCRIPTION: Implementation of a queue consumer that processes messages from a Cloudflare queue. The queue function receives batches of messages and processes them one by one.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/queues.mdx#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst app = defineApp([ /* routes... */])\n\nexport default {\n  fetch: app.fetch,\n  async queue(batch) {\n    for (const message of batch) {\n      console.log('handling message' + JSON.stringify(message))\n    }\n  }\n} satisfies ExportedHandler<Env>;\n```\n\n----------------------------------------\n\nTITLE: Registration Verification with Turnstile\nDESCRIPTION: Server function that verifies a registration request, including Turnstile token validation. It creates a new user and credential record in the database and updates the session.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/authentication.mdx#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\n// Verify registration and create user\nexport async function verifyRegistration(\n  username: string,\n  credential: RegistrationCredentialJSON,\n  turnstileToken: string\n): Promise<{ success: boolean }> {\n  \"use server\";\n\n  try {\n    // 1. Verify Turnstile token to prevent bots\n    const turnstileVerification = await verifyTurnstileToken(turnstileToken);\n    if (!turnstileVerification.success) {\n      throw new Error(\"Bot protection verification failed\");\n    }\n\n    // 2. Get session to access the stored challenge\n    const session = sessions.get();\n    const sessionData = await session.get();\n\n    if (!sessionData.challenge) {\n      throw new Error(\"No registration challenge found\");\n    }\n\n    // 3. Create PrismaClient to access the database\n    const prisma = new PrismaClient();\n\n    // 4. Check if username is already taken\n    const existingUser = await prisma.user.findUnique({\n      where: { username },\n    });\n\n    if (existingUser) {\n      throw new Error(\"Username is already taken\");\n    }\n\n    // 5. Verify the credential against the stored challenge\n    const verification = await verifyRegistrationResponse({\n      response: credential,\n      expectedChallenge: sessionData.challenge,\n      requireUserVerification: false,\n    });\n\n    // 6. Create a new user\n    const user = await prisma.user.create({\n      data: {\n        username,\n        createdAt: new Date(),\n      },\n    });\n\n    // 7. Store the credential for the new user\n    await prisma.credential.create({\n      data: {\n        userId: user.id,\n        credentialID: verification.registrationInfo?.credentialID,\n        credentialPublicKey: verification.registrationInfo?.credentialPublicKey,\n        counter: verification.registrationInfo?.counter,\n        credentialDeviceType: verification.registrationInfo?.credentialDeviceType,\n        credentialBackedUp: verification.registrationInfo?.credentialBackedUp,\n        transports: credential.response.transports,\n      },\n    });\n\n    // 8. Update the session with the new user ID to complete login\n    await session.save({ userId: user.id });\n\n    return { success: true };\n  } catch (error) {\n    console.error(\"Registration verification failed:\", error);\n    throw new Error(\"Registration failed: \" + error.message);\n  }\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Initializing Realtime Client in TypeScript\nDESCRIPTION: Sets up the realtime client connection with a key parameter to determine which group of clients should share updates. The key is typically based on the current page path.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/realtime.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initRealtimeClient } from \"@redwoodjs/sdk/realtime/client\";\n\ninitRealtimeClient({\n  key: window.location.pathname, // Used to group related clients\n});\n```\n\n----------------------------------------\n\nTITLE: Triggering Server-Side Client Updates in TypeScript\nDESCRIPTION: Demonstrates how to trigger realtime updates from the server side using renderRealtimeClients function.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/realtime.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { renderRealtimeClients } from \"@redwoodjs/sdk/realtime/worker\";\nimport { env } from \"cloudflare:workers\";\n\nawait renderRealtimeClients({\n  durableObjectNamespace: env.REALTIME_DURABLE_OBJECT,\n  key: \"/note/some-id\",\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Information in Server Functions\nDESCRIPTION: Demonstrates how to use the requestInfo object to access the current request's context in server functions. This object provides access to the request, headers, context, and platform-specific information which can be used in server-side logic.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/routing.mdx#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { requestInfo } from \"@redwoodjs/sdk/worker\";\n\nexport async function myServerFunction() {\n  const { request, headers, ctx } = requestInfo;\n  // Use request, headers, or ctx as needed\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Realtime Note Component in TypeScript\nDESCRIPTION: Example React Server Component that renders an editor with realtime content updates.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/realtime.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst Note = async ({ ctx }: RequestInfo) => {\n  return <Editor content={ctx.content} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Schema for D1\nDESCRIPTION: Prisma schema configuration that enables driver adapters feature for D1 compatibility and sets up the SQLite provider.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/database.mdx#2025-04-19_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"]\n  output          = \"../node_modules/.prisma/client\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue in Wrangler Configuration\nDESCRIPTION: Configuration for both producers and consumers of the queue in the wrangler.jsonc file. This binds the queue to the env.QUEUE object in the worker and configures batch processing parameters.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/queues.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"queues\": {\n    \"producers\": [\n      {\n        \"binding\": \"QUEUE\",\n        \"queue\": \"MY_QUEUE_NAME\",\n      }\n    ],\n    \"consumers\": [\n      {\n        \"queue\": \"MY_QUEUE_NAME\",\n        \"max_batch_size\": 10,\n        \"max_batch_timeout\": 5\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Routes in Redwood SDK Worker\nDESCRIPTION: Demonstrates how to add additional routes to the Redwood SDK application by importing new components and using the route function.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/getting-started/first-project.mdx#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { About } from \"src/pages/About\";\nimport { env } from \"cloudflare:workers\";\n\nexport default defineApp([\n  ({ ctx }) => {\n    // setup context here\n    ctx;\n  },\n  render(Document, [index([Home]), route(\"/about\", About)]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to a Cloudflare Queue\nDESCRIPTION: Example of sending a message to a Cloudflare queue from a route handler. This demonstrates how to enqueue a task that will be processed in the background.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/queues.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default defineApp([\n  route('/pay-with-ai', ({ env }) => {\n    // Post a message to the queue\n    env.QUEUE.send({\n      userId: 1,\n      amount: 100,\n      currency: 'USD',\n    })\n\n    return new Response('Done!')\n  })\n])\n```\n\n----------------------------------------\n\nTITLE: Defining Routes in Redwood SDK Worker\nDESCRIPTION: Demonstrates how to define routes in the worker.tsx file, including setting up the Document component and rendering the Home page.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/getting-started/first-project.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Document } from 'src/Document';\nimport { Home } from 'src/pages/Home';\nimport { env } from 'cloudflare:workers';\n\n...\n\nexport default defineApp([\n  ({ ctx }) => {\n    // setup context here\n    ctx;\n  },\n  render(Document, [\n    index([\n      Home,\n    ]),\n  ]),\n])\n```\n\n----------------------------------------\n\nTITLE: Integrating Turnstile for Bot Protection in Registration\nDESCRIPTION: Code snippet showing how to verify a Turnstile token during user registration to protect against automated bot registrations. This verification happens on the server side.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/authentication.mdx#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { verifyTurnstileToken } from \"@redwoodsdk/auth\";\n\n// In your registration handler:\nconst turnstileResponse = await verifyTurnstileToken(token, env);\nif (!turnstileResponse.success) {\n  throw new Error(\"Bot protection verification failed\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nonce for Inline Scripts in React Components\nDESCRIPTION: Code example showing how to use the automatically generated cryptographic nonce in a Document component for trusted inline scripts in RedwoodJS applications.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/security.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Document = ({ rw, children }) => (\n  <html lang=\"en\">\n    <head><!-- ... --></head>\n    <body>\n      <div id=\"root\">{children}</div>\n\n      <!-- Set the nonce the inline script -->\n      <script nonce={row.nonce}>/* ... */</script>\n    </body>\n  </html>\n);\n\nexport default defineApp([\n  // ...\n  render(Document, [\n    // ...\n  ]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating R2 Bucket using Wrangler CLI\nDESCRIPTION: This snippet demonstrates how to create a Cloudflare R2 bucket using the Wrangler CLI. It shows the command to create a bucket and the output, including the configuration to be added to wrangler.jsonc.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/storage.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> npx wrangler r2 bucket create my-bucket\n\nCreating bucket 'my-bucket'...\n✅ Created bucket 'my-bucket' with default storage class of Standard.\n\nConfigure your Worker to write objects to this bucket:\n\n{\n  \"r2_buckets\": [\n    {\n      \"bucket_name\": \"my-bucket\",\n      \"binding\": \"R2\",\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Durable Object in TypeScript\nDESCRIPTION: Exports the RealtimeDurableObject from the SDK for handling realtime connections and state management.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/realtime.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport { RealtimeDurableObject } from \"@redwoodjs/sdk/realtime/durableObject\";\n```\n\n----------------------------------------\n\nTITLE: Grouping Related Routes with Prefix in RedwoodSDK\nDESCRIPTION: Shows how to define a group of related routes in a separate file and use the 'prefix' function to add a common prefix to these routes.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/reference/sdk-router.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { route } from \"@redwoodjs/sdk/router\";\n\nimport { LoginPage } from \"./LoginPage\";\n\nexport const routes = [\n  route(\"/login\", LoginPage),\n  route(\"/logout\", () => {\n    /* handle logout*/\n  }),\n];\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prefix } from \"@redwoodjs/sdk/router\";\n\nimport { routes as userRoutes } from \"@/app/pages/user/routes\";\n\ndefineApp([prefix(\"/user\", userRoutes)]);\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for Local Development in TypeScript\nDESCRIPTION: Creates a .dev.vars file in the project root to store environment variables for local development. This file contains key-value pairs for secrets and API tokens.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/env-vars.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nSECRET_KEY = \"value\";\nAPI_TOKEN = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n```\n\n----------------------------------------\n\nTITLE: Configuring R2 Bucket in wrangler.jsonc\nDESCRIPTION: This snippet shows the configuration to be added to the wrangler.jsonc file to bind the created R2 bucket to the worker. This makes the bucket available via the env.R2 binding in the worker.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/storage.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"r2_buckets\": [\n    {\n      \"bucket_name\": \"my-bucket\",\n      \"binding\": \"R2\",\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Route in TypeScript\nDESCRIPTION: Sets up the worker route configuration for handling realtime connections using Cloudflare Workers environment.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/realtime.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { realtimeRoute } from \"@redwoodjs/sdk/realtime/worker\";\nimport { env } from \"cloudflare:workers\";\n\nexport default defineApp([\n  realtimeRoute(() => env.REALTIME_DURABLE_OBJECT),\n  // ... your routes\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Queue with Cloudflare Wrangler CLI\nDESCRIPTION: Command to create a new queue in Cloudflare using the Wrangler CLI tool. Replace 'MY_QUEUE_NAME' with your desired queue name.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/queues.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler queues create MY_QUEUE_NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring D1 Database in Wrangler Config\nDESCRIPTION: JSON configuration for connecting your application to the Cloudflare D1 database. This snippet shows how to add the database binding to your wrangler.jsonc file.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/authentication.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"d1_databases\": [\n    {\n      \"binding\": \"DB\",\n      \"database_name\": \"my-project-db\",\n      \"database_id\": \"your-database-id\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: ErrorResponse Implementation\nDESCRIPTION: Demonstrates error handling using the ErrorResponse class with session management and route handling.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/reference/sdk-worker.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ErrorResponse } from \"@redwoodjs/sdk/worker\";\n\nexport default defineApp([\n  function middleware({ request, ctx }) {\n    try {\n      ctx.session = await sessions.load(request);\n    } catch (error) {\n      if (error instanceof ErrorResponse && error.code === 401) {\n        await sessions.remove(request, headers);\n        headers.set(\"Location\", \"/user/login\");\n        return new Response(null, {\n          status: 302,\n          headers,\n        });\n      }\n    }\n  },\n  route(\"/\", () => new ErrorResponse(404, \"Not Found\")),\n]);\n```\n\n----------------------------------------\n\nTITLE: RequestInfo Usage\nDESCRIPTION: Shows how to access request information using the requestInfo singleton object.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/reference/sdk-worker.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { requestInfo } from \"@redwoodjs/sdk/worker\";\n\nrequestInfo.request.url;\nrequestInfo.request.method;\nrequestInfo.request.body;\nrequestInfo.ctx;\nrequestInfo.headers;\n```\n\n----------------------------------------\n\nTITLE: RedwoodSDK Worker Implementation\nDESCRIPTION: Demonstrates the basic implementation of a RedwoodSDK Worker using the defineApp function.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/reference/sdk-worker.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineApp } from \"@redwoodjs/sdk/worker\";\n\nconst app = defineApp();\nexport default {\n  fetch: app.fetch,\n};\n```\n\n----------------------------------------\n\nTITLE: Generating and Setting Authentication Secret Key\nDESCRIPTION: Commands to generate a strong random authentication secret key and set it as a Cloudflare secret. This key is used for signing session tokens in production environments.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/authentication.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Generate a 32-byte random key and encode it as base64\nopenssl rand -base64 32\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler secret put AUTH_SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Security Headers in RedwoodJS\nDESCRIPTION: The standard security headers configuration included in the RedwoodJS starter application. These headers protect against common attacks like XSS, clickjacking, and data injection.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/security.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// This file automatically imported into App.tsx to add security headers\nimport helmet from 'helmet'\n\nexport const headers = new Headers()\nheaders.set('X-Frame-Options', 'SAMEORIGIN')\nheaders.set('X-XSS-Protection', '1; mode=block')\nheaders.set('X-Content-Type-Options', 'nosniff')\nheaders.set(\n  'Content-Security-Policy',\n  `default-src 'self'; script-src 'self' 'nonce-${nonce}' https://challenges.cloudflare.com; style-src 'self' 'unsafe-inline'; frame-src https://challenges.cloudflare.com; object-src 'none';`,\n)\nheaders.set('Strict-Transport-Security', 'max-age=15552000; includeSubDomains')\nheaders.set('Referrer-Policy', 'strict-origin-when-cross-origin')\nheaders.set(\n  'Permissions-Policy',\n  'geolocation=(), microphone=(), camera=()',\n)\n\n```\n\n----------------------------------------\n\nTITLE: Adding Database Migration Scripts\nDESCRIPTION: Package.json scripts for managing database migrations with D1, including creating new migrations and applying them in development and production environments.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/database.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"migrate:dev\": \"npx prisma generate && wrangler d1 migrations apply DB --local\",\n    \"migrate:prd\": \"wrangler d1 migrations apply DB --remote\",\n    \"migrate:new\": \"rw-scripts migrate-new\",\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Client-Side Component in Redwood SDK\nDESCRIPTION: Shows how to create a client-side React component in Redwood SDK using the 'use client' directive.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/getting-started/first-project.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nexport const HelloWorld = () => {\n  return <div>Hello World</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Ping Route\nDESCRIPTION: Extended route configuration adding a new /ping route that demonstrates React Server Components usage by returning JSX directly.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/getting-started/quick-start.mdx#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineApp } from \"@redwoodjs/sdk/worker\";\nimport { route } from \"@redwoodjs/sdk/router\";\n\nexport default defineApp([\n  render(Document, [\n    route(\"/\", () => new Response(\"Hello, World!\")),\n    route(\"/ping\", function () {\n      return <h1>Pong!</h1>;\n    }),\n  ]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic Cloudflare Worker Structure\nDESCRIPTION: Shows the basic structure of a Cloudflare Worker implementation with a simple response handler.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/reference/sdk-worker.mdx#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  fetch: (request: Request) => {\n    return new Response(\"Hello, World!\");\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating New RedwoodJS Project\nDESCRIPTION: Command to create a new RedwoodJS project using degit to clone the standard starter template.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/getting-started/quick-start.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit redwoodjs/sdk/starters/standard <project-name>\n```\n\n----------------------------------------\n\nTITLE: Modifying Content Security Policy (CSP) Headers\nDESCRIPTION: Example diff showing how to extend Content Security Policy headers to allow additional trusted domains for scripts, images, and other resources while maintaining security.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/security.mdx#2025-04-19_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n// In app/headers.ts\nheaders.set(\n  \"Content-Security-Policy\",\n- `default-src 'self'; script-src 'self' 'nonce-${nonce}' https://challenges.cloudflare.com; style-src 'self' 'unsafe-inline'; frame-src https://challenges.cloudflare.com; object-src 'none';`,\n+ `default-src 'self'; script-src 'self' 'nonce-${nonce}' https://challenges.cloudflare.com https://trusted-scripts.example.com; style-src 'self' 'unsafe-inline'; frame-src https://challenges.cloudflare.com; img-src 'self' https://images.example.com; object-src 'none';`,\n);\n```\n\n----------------------------------------\n\nTITLE: Initial RedwoodJS Route Configuration\nDESCRIPTION: Basic route configuration showing the default Hello World route implementation using defineApp and route functions.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/getting-started/quick-start.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineApp } from \"@redwoodjs/sdk/worker\";\nimport { route, render } from \"@redwoodjs/sdk/router\";\n\nimport { Document } from \"@/app/Document\";\nimport { Home } from \"@/app/pages/Home\";\n\nexport default defineApp([\n  render(Document, [route(\"/\", () => new Response(\"Hello, World!\"))]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing RedwoodSDK Project Using Degit\nDESCRIPTION: Command to create a new RedwoodSDK project by copying the standard starter template. This creates a new project directory with the specified name containing the basic project structure.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit redwoodjs/sdk/starters/standard <project-name>\n```\n\n----------------------------------------\n\nTITLE: Creating a D1 Database with Wrangler\nDESCRIPTION: Command to create a new D1 database using Wrangler CLI and the expected output showing the database configuration that should be added to wrangler.jsonc.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/database.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> npx wrangler d1 create my-database\n\n✅ Successfully created DB 'my-database' in region WEUR\nCreated your new D1 database.\n\n[[d1_databases]]\nbinding = \"DB\"\ndatabase_name = \"my-database\"\ndatabase_id = \"62x40823-4750-4973-b994-fb8fd55xxxx6\"\n```\n\n----------------------------------------\n\nTITLE: Setting Turnstile Secret Key for Bot Protection\nDESCRIPTION: Command to set the Cloudflare Turnstile secret key as a Cloudflare secret using Wrangler CLI. This is needed if you're enabling bot protection for user registration.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/authentication.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler secret put TURNSTILE_SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Enabling Device Permissions in Security Headers\nDESCRIPTION: Example diff showing how to modify the Permissions-Policy header to allow access to device features like geolocation, microphone, and camera for the application's own domain.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/security.mdx#2025-04-19_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n// In app/headers.ts\nheaders.set(\n  \"Permissions-Policy\",\n-  \"geolocation=(), microphone=(), camera=()\",\n+  \"geolocation=self, microphone=self, camera=self\"\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Secrets for Deployed Cloudflare Workers using Wrangler CLI\nDESCRIPTION: Uses the Wrangler CLI to set secrets for deployed Cloudflare Workers. This command allows you to securely add environment variables to your production environment.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/env-vars.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler secret put <KEY>\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma with D1 Adapter\nDESCRIPTION: Commands to install Prisma packages including the D1 adapter, create a prisma directory, and initialize the schema file.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/database.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @prisma/adapter-d1 @prisma/client prisma\nmkdir prisma\ntouch prisma/schema.prisma\n```\n\n----------------------------------------\n\nTITLE: Creating Document Component in Redwood SDK\nDESCRIPTION: Shows the structure of the Document component that wraps the entire application, including basic HTML structure and client-side script inclusion.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/getting-started/first-project.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Document: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => (\n  <html lang=\"en\">\n    <head>\n      <meta charSet=\"utf-8\" />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n      <title>@redwoodjs/starter-minimal</title>\n      <script type=\"module\" src=\"/src/client.tsx\"></script>\n    </head>\n    <body>\n      <div id=\"root\">{children}</div>\n    </body>\n  </html>\n);\n```\n\n----------------------------------------\n\nTITLE: Deploying Redwood SDK Project to Cloudflare\nDESCRIPTION: Provides commands for deploying the Redwood SDK project to Cloudflare Workers using different package managers.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/getting-started/first-project.mdx#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm release\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run release\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn release\n```\n\n----------------------------------------\n\nTITLE: Deploying RedwoodJS App to Cloudflare using Package Managers\nDESCRIPTION: Commands for deploying a RedwoodJS application to Cloudflare's production environment using different package managers. The 'release' command is used to ship the webapp to Cloudflare.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/hosting.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm release\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run release\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn release\n```\n\n----------------------------------------\n\nTITLE: Setting WebAuthn Relying Party ID in Wrangler\nDESCRIPTION: Command to set the WebAuthn Relying Party ID as a Cloudflare secret using Wrangler CLI. This is required for WebAuthn authentication to work correctly in production environments.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/authentication.mdx#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx wrangler secret put WEBAUTHN_RP_ID\n```\n\n----------------------------------------\n\nTITLE: Package Installation Commands\nDESCRIPTION: Commands for installing project dependencies using different package managers (pnpm, npm, yarn).\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/getting-started/quick-start.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd <project-name>\npnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd <project-name>\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd <project-name>\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Configuring Durable Object in Wrangler\nDESCRIPTION: Adds the Durable Object configuration to wrangler.jsonc for Cloudflare Workers setup.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/realtime.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"durable_objects\": {\n  \"bindings\": [\n    // ...\n    {\n      \"name\": \"REALTIME_DURABLE_OBJECT\",\n      \"class_name\": \"RealtimeDurableObject\",\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing RedwoodSDK Standard Starter\nDESCRIPTION: Commands to create a new RedwoodSDK project using the standard starter template and install dependencies using pnpm.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/starters/standard/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx degit redwoodjs/sdk/starters/standard my-project-name\ncd my-project-name\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring D1 Database in Wrangler\nDESCRIPTION: JSON configuration for setting up D1 database binding in wrangler.jsonc file. Requires replacing the database_id with the actual ID from database creation.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/starters/standard/README.md#2025-04-19_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"d1_databases\": [\n    {\n      \"binding\": \"DB\",\n      \"database_name\": \"my-project-db\",\n      \"database_id\": \"your-database-id\",\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating D1 Database for RedwoodSDK\nDESCRIPTION: Command to create a new D1 database using Wrangler CLI.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/starters/standard/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx wrangler d1 create my-project-db\n```\n\n----------------------------------------\n\nTITLE: Creating a D1 Database with Wrangler CLI\nDESCRIPTION: Command to create a new Cloudflare D1 database for your application using Wrangler CLI. The database will be used to store user information and authentication data.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/authentication.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler d1 create my-project-db\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Worker Name in Redwood SDK\nDESCRIPTION: Shows how to set the name property in the wrangler.jsonc file for Cloudflare deployment.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/getting-started/first-project.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{ \"name\" = \"__change_me__' }\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure in Redwood SDK\nDESCRIPTION: Shows the directory structure of a newly created Redwood SDK project, including key files and directories.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/getting-started/first-project.mdx#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── package.json\n├── src\n│   ├── app\n│   │   ├── Document.tsx\n│   │   ├── pages\n│   │   │   └── Home.tsx\n│   │   └── shared\n│   │       └── links.ts\n│   ├── client.tsx\n│   └── worker.tsx\n├── tsconfig.json\n├── types\n├── vite.config.mts\n├── worker-configuration.d.ts\n└── wrangler.jsonc\n```\n\n----------------------------------------\n\nTITLE: Installing and Running RedwoodSDK Documentation\nDESCRIPTION: Commands to install dependencies and start the development server for RedwoodSDK documentation.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running Development Server in Redwood SDK\nDESCRIPTION: Provides commands for running the local development server using different package managers.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/getting-started/first-project.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating New RedwoodSDK Project\nDESCRIPTION: Command to create a new RedwoodSDK project using degit from the standard starter template.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit redwoodjs/sdk/starters/standard <project-name>\n```\n\n----------------------------------------\n\nTITLE: Development Server Commands\nDESCRIPTION: Commands for starting the development server using different package managers.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/getting-started/quick-start.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating D1 Database with Wrangler\nDESCRIPTION: Example showing how to create a new D1 database using Wrangler CLI, including the expected output with database details.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> npx wrangler d1 create my-database\n\n✅ Successfully created DB 'my-database' in region WEUR\nCreated your new D1 database.\n\n[[d1_databases]]\nbinding = \"DB\"\ndatabase_name = \"my-database\"\ndatabase_id = \"62x40823-4750-4973-b994-fb8fd55xxxx6\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New RedwoodSDK Minimal Project with degit in Shell\nDESCRIPTION: Commands to create a new RedwoodSDK project using the minimal starter template, navigate to the project directory, and install dependencies with pnpm.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/starters/minimal/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx degit redwoodjs/sdk/starters/minimal my-project-name\ncd my-project-name\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running RedwoodSDK Development Server\nDESCRIPTION: Command to start the development server using pnpm.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/starters/standard/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running the RedwoodSDK Development Server in Shell\nDESCRIPTION: Command to start the RedwoodSDK development server using pnpm.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/starters/minimal/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Creating a New Prisma Project\nDESCRIPTION: Command to quickly scaffold a new project using the RedwoodSDK Prisma starter template.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/core/database.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit redwoodjs/sdk/starters/prisma#main <project-name>\n```\n\n----------------------------------------\n\nTITLE: Vite Server Output\nDESCRIPTION: Example output showing Vite development server startup information including local address and help options.\nSOURCE: https://github.com/redwoodjs/sdk/blob/main/docs/src/content/docs/getting-started/quick-start.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nVITE v6.2.0  ready in 500 ms\n\n➜  Local:   http://localhost:5173/\n➜  Network: use --host to expose\n➜  press h + enter to show help\n```"
  }
]