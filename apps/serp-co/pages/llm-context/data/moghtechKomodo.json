[
  {
    "owner": "moghtech",
    "repo": "komodo",
    "content": "TITLE: Configuring Resource-Specific Permissions in TOML\nDESCRIPTION: This snippet shows how to assign specific permission levels to particular resources or resource patterns. It demonstrates assigning Execute permission to a specific Stack, and using regex patterns to match multiple resources with a naming convention.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/permissioning.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\npermissions = [\n  { target.type = \"Stack\", target.id = \"my-stack\", level = \"Execute\" },\n  # Use regex to match multiple resources, for example give john execute on all of their Stacks\n  { target.type = \"Stack\", target.id = \"\\\\^john-(.+)$\\\\\", level = \"Execute\" },\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Variables and Deployments in TOML\nDESCRIPTION: Shows how to declare variables for reuse and create deployments with dependencies. Each deployment specifies server, image source, volumes, environment variables, and labels. The 'after' parameter creates deployment ordering dependencies.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/sync-resources.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# Declare variables\n[[variable]]\nname = \"OTLP_ENDPOINT\"\nvalue = \"http://localhost:4317\"\n\n##\n\n[[deployment]] # Declare a deployment\nname = \"test-logger-01\"\ndescription = \"test logger deployment 1\"\ntags = [\"test\"]\n# sync will deploy the container: \n#  - if it is not running.\n#  - has relevant config updates.\n#  - the attached build has new version.\ndeploy = true\n[deployment.config]\nserver_id = \"server-01\"\nimage.type = \"Build\"\nimage.params.build = \"test_logger\"\n# set the volumes / bind mounts\nvolumes = \"\"\"\n# Supports comments\n/data/logs = /etc/logs\n# And other formats (eg yaml list)\n- \"/data/config:/etc/config\"\n\"\"\"\n# Set the environment variables\nenvironment = \"\"\"\n# Comments supported\nOTLP_ENDPOINT = [[OTLP_ENDPOINT]] # interpolate variables into the envs.\nVARIABLE_1 = value_1\nVARIABLE_2 = value_2\n\"\"\"\n# Set Docker labels\nlabels = \"deployment.type = logger\"\n\n##\n\n[[deployment]]\nname = \"test-logger-02\"\ndescription = \"test logger deployment 2\"\ntags = [\"test\"]\ndeploy = true\n# Create a dependency on test-logger-01. This deployment will only be deployed after test-logger-01 is deployed.\n# Additionally, any sync deploy of test-logger-01 will also trigger sync deploy of this deployment.\nafter = [\"test-logger-01\"]\n[deployment.config]\nserver_id = \"server-01\"\nimage.type = \"Build\"\nimage.params.build = \"test_logger\"\nvolumes = \"\"\"\n/data/logs = /etc/logs\n/data/config = /etc/config\"\"\"\nenvironment = \"\"\"\nVARIABLE_1 = value_1\nVARIABLE_2 = value_2\n\"\"\"\n# Set Docker labels\nlabels = \"deployment.type = logger\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Multi-Stage Procedure in TOML\nDESCRIPTION: A TOML configuration example for a Procedure named 'pull-deploy' that pulls a repository and deploys stacks. The procedure contains two sequential stages: the first pulls a repository, and the second deploys any stacks with matching patterns that have changed.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/procedures.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[procedure]]\nname = \"pull-deploy\"\ndescription = \"Pulls stack-repo, deploys stacks\"\n\n[[procedure.config.stage]]\nname = \"Pull Repo\"\nexecutions = [\n  { execution.type = \"PullRepo\", execution.params.pattern = \"stack-repo\" },\n]\n\n[[procedure.config.stage]]\nname = \"Deploy if changed\"\nexecutions = [\n  # Uses the Batch version, witch matches many stacks by pattern\n  # This one matches all stacks prefixed with `foo-` (wildcard) and `bar-` (regex).\n  { execution.type = \"BatchDeployStackIfChanged\", execution.params.pattern = \"foo-* , \\\\^bar-.*$\\\\\" },\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Komodo Client and Performing Operations in TypeScript\nDESCRIPTION: Example demonstrating how to create a Komodo client in TypeScript with API key authentication, read a list of stacks with type inference, and execute a stack deployment operation.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KomodoClient, Types } from \"komodo_client\";\n\nconst komodo = KomodoClient(\"https://demo.komo.do\", {\n  type: \"api-key\",\n  params: {\n    api_key: \"your_key\",\n    secret: \"your secret\",\n  },\n});\n\n// Inferred as Types.StackListItem[]\nconst stacks = await komodo.read(\"ListStacks\", {});\n\n// Inferred as Types.Update\nconst update = await komodo.execute(\"DeployStack\", {\n  stack: stacks[0].name,\n});\n```\n\n----------------------------------------\n\nTITLE: Managing User Groups and Permissions in TOML\nDESCRIPTION: Defines a user group with specific permission levels for different resource types. Permissions can be set for all resources of a type, specific named resources, or resources matching a regular expression pattern.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/sync-resources.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[[user_group]]\nname = \"groupo\"\nusers = [\"mbecker20\", \"karamvirsingh98\"]\n# Attach base level of Execute on all builds\nall.Build = \"Execute\"\nall.Alerter = \"Write\"\npermissions = [\n  # Attach permissions to specific resources by name\n  { target.type = \"Repo\", target.id = \"komodo-periphery\", level = \"Execute\" },\n  # Attach permissions to many resources with name matching regex (this uses '^(.+)-(.+)$' as regex expression)\n  { target.type = \"Server\", target.id = \"\\\\^(.+)-(.+)$\\\\\", level = \"Read\" },\n  { target.type = \"Deployment\", target.id = \"\\\\^immich\\\\\", level = \"Execute\" },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Resources in TOML\nDESCRIPTION: Defines a stack resource that references multiple Docker Compose files from a Git repository. Stacks can depend on deployments using the 'after' parameter, and specify server, files, and repository details.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/sync-resources.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[[stack]]\nname = \"test-stack\"\ndescription = \"stack test\"\ndeploy = true\nafter = [\"test-logger-01\"] # Stacks can depend on deployments, and vice versa.\ntags = [\"test\"]\n[stack.config]\nserver_id = \"server-prod\"\nfile_paths = [\"mongo.yaml\", \"redis.yaml\"]\ngit_provider = \"git.mogh.tech\"\ngit_account = \"mbecker20\" # clone private repo by specifying account\nrepo = \"mbecker20/stack_test\"\n```\n\n----------------------------------------\n\nTITLE: Creating Procedures with Multiple Stages in TOML\nDESCRIPTION: Defines a procedure with multiple stages of executions. Each stage contains different execution types like RunBuild, BatchRunBuild, PullRepo, and Deploy. Stages and individual executions can be enabled or disabled as needed.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/sync-resources.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[[procedure]]\nname = \"test-procedure\"\ndescription = \"Do some things in a specific order\"\ntags = [\"test\"]\n\n[[procedure.config.stage]]\nname = \"Build stuff\"\nexecutions = [\n  { execution.type = \"RunBuild\", execution.params.build = \"test_logger\" },\n  # Uses the Batch version, witch matches many builds by pattern\n  # This one matches all builds prefixed with `foo-` (wildcard) and `bar-` (regex).\n  { execution.type = \"BatchRunBuild\", execution.params.pattern = \"foo-* , \\\\^bar-.*$\\\\\" },\n  { execution.type = \"PullRepo\", execution.params.repo = \"komodo-periphery\" },\n]\n\n[[procedure.config.stage]]\nname = \"Deploy test logger 1\"\nexecutions = [\n  { execution.type = \"Deploy\", execution.params.deployment = \"test-logger-01\" },\n  { execution.type = \"Deploy\", execution.params.deployment = \"test-logger-03\", enabled = false },\n]\n\n[[procedure.config.stage]]\nname = \"Deploy test logger 2\"\nenabled = false\nexecutions = [\n  { execution.type = \"Deploy\", execution.params.deployment = \"test-logger-02\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Komodo Client and Performing Operations in Rust\nDESCRIPTION: Example showing how to create a Komodo client in Rust with API key authentication, perform a healthcheck, read a list of stacks, and execute a stack deployment operation.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/api.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet komodo = KomodoClient::new(\"https://demo.komo.do\", \"your_key\", \"your_secret\")\n  .with_healthcheck()\n  .await?;\n\nlet stacks = komodo.read(ListStacks::default()).await?;\n\nlet update = komodo\n  .execute(DeployStack {\n    stack: stacks[0].name.clone(),\n    stop_time: None\n  })\n  .await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using the KomodoClient in Rust\nDESCRIPTION: This example demonstrates how to create a KomodoClient instance from environment variables, fetch a list of deployments, and run a build. The client uses environment variables (KOMODO_ADDRESS, KOMODO_API_KEY, KOMODO_API_SECRET) which can be loaded from a .env file using dotenvy.\nSOURCE: https://github.com/moghtech/komodo/blob/main/client/core/rs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ndotenvy::dotenv().ok();\n\nlet client = KomodoClient::new_from_env()?;\n\n// Get all the deployments\nlet deployments = client.read(ListDeployments::default()).await?;\n\nprintln!(\"{deployments:#?}\");\n\nlet update = client.execute(RunBuild { build: \"test-build\".to_string() }).await?:\n```\n\n----------------------------------------\n\nTITLE: Installing Docker and Periphery on Ubuntu/Debian for Komodo Builders\nDESCRIPTION: This script installs Docker and Komodo Periphery on a Ubuntu/Debian instance, enabling it to function as a Komodo builder. It updates the system, installs Docker, configures services to start automatically, and sets up the Periphery agent.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/build-images/builders.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/bash\napt update\napt upgrade -y\ncurl -fsSL https://get.docker.com | sh\nsystemctl enable docker.service\nsystemctl enable containerd.service\ncurl -sSL https://raw.githubusercontent.com/moghtech/komodo/main/scripts/setup-periphery.py | HOME=/root python3\nsystemctl enable periphery.service\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript Action for Resource Management\nDESCRIPTION: A TypeScript Action script that updates build configurations and repository branches across multiple applications and architectures. It first updates a variable value, then iterates through combinations of applications and architectures to update build versions and branches.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/procedures.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst VERSION = \"1.16.5\";\nconst BRANCH = \"dev/\" + VERSION;\nconst APPS = [\"core\", \"periphery\"];\nconst ARCHS = [\"x86\", \"aarch64\"];\n\nawait komodo.write(\"UpdateVariableValue\", {\n  name: \"KOMODO_DEV_VERSION\",\n  value: VERSION,\n});\nconsole.log(\"Updated KOMODO_DEV_VERSION to \" + VERSION);\n\nfor (const app of APPS) {\n  for (const arch of ARCHS) {\n    const name = `komodo-${app}-${arch}-dev`;\n    await komodo.write(\"UpdateBuild\", {\n      id: name,\n      config: {\n        version: VERSION as any,\n        branch: BRANCH,\n      },\n    });\n    console.log(\n      `Updated Build ${name} to version ${VERSION} and branch ${BRANCH}`,\n    );\n  }\n}\n\nfor (const arch of ARCHS) {\n  const name = `periphery-bin-${arch}-dev`;\n  await komodo.write(\"UpdateRepo\", {\n    id: name,\n    config: {\n      branch: BRANCH,\n    },\n  });\n  console.log(`Updated Repo ${name} to branch ${BRANCH}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Server Configuration in TOML\nDESCRIPTION: Defines a server resource with name, description, tags, and configuration details including address, region, and enabled status. Server configurations are used to specify the target environments for deployments.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/sync-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[server]] # Declare a new server\nname = \"server-prod\"\ndescription = \"the prod server\"\ntags = [\"prod\"]\n[server.config]\naddress = \"http://localhost:8120\"\nregion = \"AshburnDc1\"\nenabled = true # default: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Builder and Build Resources in TOML\nDESCRIPTION: Creates a builder resource for AWS with region and instance configuration parameters, followed by a build definition that uses this builder. The build specifies source repo, branch, registry, and Docker labels.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/sync-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[builder]] # Declare a builder\nname = \"builder-01\"\ntags = []\nconfig.type = \"Aws\"\n[builder.config.params]\nregion = \"us-east-2\"\nami_id = \"ami-0e9bd154667944680\"\n# These things come from your specific setup\nsubnet_id = \"subnet-xxxxxxxxxxxxxxxxxx\"\nkey_pair_name = \"xxxxxxxx\"\nassign_public_ip = true\nuse_public_ip = true\nsecurity_group_ids = [\n  \"sg-xxxxxxxxxxxxxxxxxx\",\n  \"sg-xxxxxxxxxxxxxxxxxx\"\n]\n\n##\n\n[[build]]\nname = \"test_logger\"\ndescription = \"Logs randomly at INFO, WARN, ERROR levels to test logging setups\"\ntags = [\"test\"]\n[build.config]\nbuilder_id = \"builder-01\"\nrepo = \"mbecker20/test_logger\"\nbranch = \"master\"\ngit_account = \"mbecker20\"\nimage_registry.type = \"Standard\"\nimage_registry.params.domain = \"github.com\" # or your custom domain\nimage_registry.params.account = \"your_username\"\nimage_registry.params.organization = \"your_organization\" # optinoal\n# Set docker labels\nlabels = \"\"\"\norg.opencontainers.image.source = https://github.com/mbecker20/test_logger\norg.opencontainers.image.description = Logs randomly at INFO, WARN, ERROR levels to test logging setups\norg.opencontainers.image.licenses = GPL-3.0\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Example Periphery Configuration using TOML\nDESCRIPTION: Sample TOML configuration for Periphery when running under the ubuntu user. It defines repository and stack directories, and enables SSL with paths to key and certificate files in the user's home directory.\nSOURCE: https://github.com/moghtech/komodo/blob/main/scripts/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nrepo_dir = \"/home/ubuntu/.komodo/repos\"\nstack_dir = \"/home/ubuntu/.komodo/stacks\"\n\nssl_enabled = true\nssl_key_file = \"/home/ubuntu/.komodo/ssl/key.pem\"\nssl_cert_file = \"/home/ubuntu/.komodo/ssl/cert.pem\"\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Sync Configuration in TOML\nDESCRIPTION: Sets up a resource sync that monitors specific TOML files in a Git repository. This configuration determines how Komodo will watch for changes to resource declarations and process them accordingly.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/sync-resources.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[[resource_sync]]\nname = \"resource-sync\"\n[resource_sync.config]\ngit_provider = \"git.mogh.tech\" # use an alternate git provider (default is github.com)\ngit_account = \"mbecker20\"\nrepo = \"moghtech/komodo\"\nresource_path = [\"stacks.toml\", \"repos.toml\"]\n```\n\n----------------------------------------\n\nTITLE: Secrets Configuration in Komodo Core Config\nDESCRIPTION: Example of defining secrets in the Komodo Core configuration file using TOML format.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/variables.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# in core.config.toml\n[secrets]\nKEY_1 = \"value_1\"\nKEY_2 = \"value_2\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Repository Configuration in TOML\nDESCRIPTION: Configures a repository with Git provider, account, and post-pull actions. This example sets up a repo that builds a Rust project after pulling, with commands to compile and copy the resulting binary.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/sync-resources.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[[repo]]\nname = \"komodo-periphery\"\ndescription = \"Builds new versions of the periphery binary. Requires Rust installed on the host.\"\ntags = [\"komodo\"]\n[repo.config]\nserver_id = \"server-01\"\ngit_provider = \"git.mogh.tech\" # use an alternate git provider (default is github.com)\ngit_account = \"mbecker20\"\nrepo = \"moghtech/komodo\"\n# Run an action after the repo is pulled\non_pull.path = \".\"\non_pull.command = \"\"\"\n# Supports comments\n/root/.cargo/bin/cargo build -p komodo_periphery --release\n# Multiple lines will be combined together using '&&'\ncp ./target/release/periphery /root/periphery\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining User Groups with Global Permissions in TOML\nDESCRIPTION: This snippet demonstrates how to create a user group named 'groupo' in TOML configuration, adding users to it and assigning global permission levels for different resource types. The group is given Execute permissions on all Builds and Read permissions on all Stacks.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/permissioning.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[user_group]]\nname = \"groupo\"\nusers = [\"mbecker20\", \"karamvirsingh98\"]\nall.Build = \"Execute\" # <- Group members can run all builds (but not update config),\nall.Stack = \"Read\"    # <- And see all Stacks / logs (not deploy / update).\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Komodo Client\nDESCRIPTION: Example showing how to initialize the Komodo client with API credentials and perform basic stack operations. Demonstrates type inference for stack listing and retrieval.\nSOURCE: https://github.com/moghtech/komodo/blob/main/client/core/ts/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KomodoClient, Types } from \"komodo_client\";\n\nconst komodo = KomodoClient(\"https://demo.komo.do\", {\n  type: \"api-key\",\n  params: {\n    key: \"your_key\",\n    secret: \"your secret\",\n  },\n});\n\n// Inferred as Types.StackListItem[]\nconst stacks = await komodo.read(\"ListStacks\", {});\n\n// Inferred as Types.Stack\nconst stack = await komodo.read(\"GetStack\", {\n  stack: stacks[0].name,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Build Secrets in Dockerfile\nDESCRIPTION: Example demonstrating how to use build secrets in a Dockerfile RUN command. The secret is mounted during build time and accessed securely without being stored in the image layers.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/build-images/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\nRUN --mount=type=secret,id=SECRET_KEY \\\n  SECRET_KEY=$(cat /run/secrets/SECRET_KEY) ...\n```\n\n----------------------------------------\n\nTITLE: Variable Interpolation Example in Komodo\nDESCRIPTION: Demonstrates how to interpolate variables using double bracket syntax and shows the before and after states of interpolation.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/variables.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# Before interpolation\nSOME_ENV_VAR = [[KEY_1]] # <- wrap the key in double brackets '[[]]'\n\n# After iterpolation:\nSOME_ENV_VAR = value_1\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Komodo Deployment\nDESCRIPTION: This code snippet shows how to set environment variables for a Docker container in Komodo's deployment configuration. It demonstrates the format similar to a .env file.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/deploy-containers/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nENV_VAR_1=some_value\nENV_VAR_2=some_other_value\n```\n\n----------------------------------------\n\nTITLE: Deploying MongoDB with Docker Compose\nDESCRIPTION: Launches MongoDB containers using Docker Compose with the specified configuration and environment files.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/setup/mongo.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -p komodo -f komodo/mongo.compose.yaml --env-file komodo/compose.env up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Komodo Credentials in TOML Format\nDESCRIPTION: Example configuration for a Komodo credentials file (creds.toml) containing the server URL, API key, and secret. This file should be placed in the user's config directory.\nSOURCE: https://github.com/moghtech/komodo/blob/main/bin/cli/README.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nurl = \"https://your.komodo.address\"\nkey = \"YOUR-API-KEY\"\nsecret = \"YOUR-API-SECRET\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Mapping for Docker Network in Komodo\nDESCRIPTION: This snippet demonstrates how to specify port bindings when using a Docker network other than 'host' in Komodo. It maps the container's internal port 27017 to the host's port 27018.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/deploy-containers/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n27018 : 27017\n```\n\n----------------------------------------\n\nTITLE: Building and Running Komodo Backend\nDESCRIPTION: Commands to build and run the Core and Periphery APIs of Komodo's backend.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/development.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrun -r dev-core\nrun -r dev-periphery\n```\n\n----------------------------------------\n\nTITLE: Installing Komodo Periphery at System Level using curl and Python\nDESCRIPTION: This command downloads and executes the Periphery setup script with system-level installation (requiring root privileges). The script installs periphery binary to /usr/local/bin, creates a systemd service file, and sets up the configuration in /etc/komodo/.\nSOURCE: https://github.com/moghtech/komodo/blob/main/scripts/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -sSL https://raw.githubusercontent.com/moghtech/komodo/main/scripts/setup-periphery.py | python3\n```\n\n----------------------------------------\n\nTITLE: Setting Build Arguments in Komodo\nDESCRIPTION: Example showing how to specify build arguments in Komodo's GUI using .env file format. These values are passed to the Docker build process but remain visible in the image history.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/build-images/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBUILD_ARG1=some_value\nBUILD_ARG2=some_other_value\n```\n\n----------------------------------------\n\nTITLE: Komodo CLI Main Help Output\nDESCRIPTION: The help output from running 'komodo --help', showing the main commands and options available in the Komodo CLI tool.\nSOURCE: https://github.com/moghtech/komodo/blob/main/bin/cli/README.md#2025-04-21_snippet_4\n\nLANGUAGE: md\nCODE:\n```\nCommand line tool to execute Komodo actions\n\nUsage: komodo [OPTIONS] <COMMAND>\n\nCommands:\n  execute  Runs an execution\n  help     Print this message or the help of the given subcommand(s)\n\nOptions:\n      --creds <CREDS>    The path to a creds file [default: /Users/max/.config/komodo/creds.toml]\n      --url <URL>        Pass url in args instead of creds file\n      --key <KEY>        Pass api key in args instead of creds file\n      --secret <SECRET>  Pass api secret in args instead of creds file\n  -y, --yes              Always continue on user confirmation prompts\n  -h, --help             Print help (see more with '--help')\n  -V, --version          Print version\n```\n\n----------------------------------------\n\nTITLE: Building and Running Komodo with Docker\nDESCRIPTION: Commands to rebuild and run Komodo using Docker, making the UI accessible at localhost:9120.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/development.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrun -r dev-compose-build\nrun -r dev-compose-exposed\n```\n\n----------------------------------------\n\nTITLE: Komodo Execute Command Help Output\nDESCRIPTION: The help output from running 'komodo execute --help', showing all available execution commands for managing builds, deployments, containers, and other resources.\nSOURCE: https://github.com/moghtech/komodo/blob/main/bin/cli/README.md#2025-04-21_snippet_5\n\nLANGUAGE: md\nCODE:\n```\nRuns an execution\n\nUsage: komodo execute <COMMAND>\n\nCommands:\n  none                    The \"null\" execution. Does nothing\n  run-procedure           Runs the target procedure. Response: [Update]\n  run-build               Runs the target build. Response: [Update]\n  cancel-build            Cancels the target build. Only does anything if the build is `building` when called. Response: [Update]\n  deploy                  Deploys the container for the target deployment. Response: [Update]\n  start-deployment        Starts the container for the target deployment. Response: [Update]\n  restart-deployment      Restarts the container for the target deployment. Response: [Update]\n  pause-deployment        Pauses the container for the target deployment. Response: [Update]\n  unpause-deployment      Unpauses the container for the target deployment. Response: [Update]\n  stop-deployment         Stops the container for the target deployment. Response: [Update]\n  destroy-deployment      Stops and destroys the container for the target deployment. Reponse: [Update]\n  clone-repo              Clones the target repo. Response: [Update]\n  pull-repo               Pulls the target repo. Response: [Update]\n  build-repo              Builds the target repo, using the attached builder. Response: [Update]\n  cancel-repo-build       Cancels the target repo build. Only does anything if the repo build is `building` when called. Response: [Update]\n  start-container         Starts the container on the target server. Response: [Update]\n  restart-container       Restarts the container on the target server. Response: [Update]\n  pause-container         Pauses the container on the target server. Response: [Update]\n  unpause-container       Unpauses the container on the target server. Response: [Update]\n  stop-container          Stops the container on the target server. Response: [Update]\n  destroy-container       Stops and destroys the container on the target server. Reponse: [Update]\n  start-all-containers    Starts all containers on the target server. Response: [Update]\n  restart-all-containers  Restarts all containers on the target server. Response: [Update]\n  pause-all-containers    Pauses all containers on the target server. Response: [Update]\n  unpause-all-containers  Unpauses all containers on the target server. Response: [Update]\n  stop-all-containers     Stops all containers on the target server. Response: [Update]\n  prune-containers        Prunes the docker containers on the target server. Response: [Update]\n  delete-network          Delete a docker network. Response: [Update]\n  prune-networks          Prunes the docker networks on the target server. Response: [Update]\n  delete-image            Delete a docker image. Response: [Update]\n  prune-images            Prunes the docker images on the target server. Response: [Update]\n  delete-volume           Delete a docker volume. Response: [Update]\n  prune-volumes           Prunes the docker volumes on the target server. Response: [Update]\n  prune-system            Prunes the docker system on the target server, including volumes. Response: [Update]\n  run-sync                Runs the target resource sync. Response: [Update]\n  deploy-stack            Deploys the target stack. `docker compose up`. Response: [Update]\n  start-stack             Starts the target stack. `docker compose start`. Response: [Update]\n  restart-stack           Restarts the target stack. `docker compose restart`. Response: [Update]\n  pause-stack             Pauses the target stack. `docker compose pause`. Response: [Update]\n  unpause-stack           Unpauses the target stack. `docker compose unpause`. Response: [Update]\n  stop-stack              Starts the target stack. `docker compose stop`. Response: [Update]\n  destroy-stack           Destoys the target stack. `docker compose down`. Response: [Update]\n  sleep                   \n  help                    Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help  Print help\n```\n\n----------------------------------------\n\nTITLE: Docker Container Command Configuration\nDESCRIPTION: Example of configuring Periphery command in a Docker container.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/connect-servers.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncommand: periphery --config-path /path/in/container/to/periphery.config.base.toml\n```\n\n----------------------------------------\n\nTITLE: Deploying FerretDB with SQLite Using Docker Compose\nDESCRIPTION: Deploys the FerretDB with SQLite configuration using Docker Compose with the downloaded configuration files and environment variables.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/setup/sqlite.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -p komodo -f komodo/sqlite.compose.yaml --env-file komodo/compose.env up -d\n```\n\n----------------------------------------\n\nTITLE: Constructing Webhook URL for Komodo Resources\nDESCRIPTION: This snippet shows the structure of a webhook URL for Komodo resources. It includes placeholders for host, authentication type, resource type, resource identifier, and execution action. The URL is used to receive incoming webhooks from git providers.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/webhooks.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhttps://${HOST}/listener/${AUTH_TYPE}/${RESOURCE_TYPE}/${ID_OR_NAME}/${EXECUTION}\n```\n\n----------------------------------------\n\nTITLE: Downloading Komodo Core Configuration Template\nDESCRIPTION: Command to download the default Komodo core configuration file template from the GitHub repository to a local directory.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/setup/advanced.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -P komodo https://raw.githubusercontent.com/moghtech/komodo/main/config/core.config.toml\n```\n\n----------------------------------------\n\nTITLE: Installing Periphery Agent via SystemD\nDESCRIPTION: Command to install Periphery agent as root using the setup script.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/connect-servers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://raw.githubusercontent.com/moghtech/komodo/main/scripts/setup-periphery.py | python3\n```\n\n----------------------------------------\n\nTITLE: Configuring Bind Mount for Docker Volumes in Komodo\nDESCRIPTION: This snippet illustrates how to set up a bind mount in Komodo to allow a Docker container to access a file on the host system. It maps a host file to a path inside the container.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/deploy-containers/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n/home/ubuntu/config.toml : /config/config.toml\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Path Types in Komodo\nDESCRIPTION: Shows the three types of paths that can be used in Komodo: specifying the repo root, specifying a folder in the repo, and using absolute paths on the server filesystem.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/file-paths.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n 1. to specify the root of the repo, use `.` as the path\n 2. to specify a folder in the repo, pass it with **no** preceding `/`. For example, `example_folder` or `folder1/folder2`\n 3. to specify an absolute path on the servers filesystem, use a preceding slash, eg. `/home/ubuntu/example`. This way should only be used if absolutely necessary, like when passing host paths when configuring docker volumes.\n```\n\n----------------------------------------\n\nTITLE: Specifying Extra Docker Arguments for Log Rotation in Komodo\nDESCRIPTION: These code snippets demonstrate how to add extra Docker arguments in Komodo to enable log rotation for a container. They set the maximum log file size and number of log files to keep.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/deploy-containers/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n--log-opt max-size=10M\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--log-opt max-file=3\n```\n\n----------------------------------------\n\nTITLE: Configuring Komodo Development Environment\nDESCRIPTION: This snippet shows the contents of the '.env.development' file, which is used to configure the Komodo host for development. The file is gitignored and can be customized.\nSOURCE: https://github.com/moghtech/komodo/blob/main/frontend/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nVITE_KOMODO_HOST=https://demo.komo.do\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Docker Command in Komodo Deployment\nDESCRIPTION: This snippet shows an example of overriding the default Docker command in Komodo by passing the '--quiet' flag to a MongoDB container. It demonstrates how to specify additional command-line arguments.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/deploy-containers/configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ndocker run -d --name mongo-db mongo:6.0.3 --quiet\n```\n\n----------------------------------------\n\nTITLE: Using Komodo CLI with Command-line Credentials\nDESCRIPTION: Example showing how to use Komodo CLI by providing credentials directly as command-line arguments instead of using a configuration file.\nSOURCE: https://github.com/moghtech/komodo/blob/main/bin/cli/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkomodo --url \"https://your.komodo.address\" --key \"YOUR-API-KEY\" --secret \"YOUR-API-SECRET\" ...\n```\n\n----------------------------------------\n\nTITLE: Installing Komodo CLI using Cargo\nDESCRIPTION: Instructions for installing the Komodo CLI tool using Cargo, the Rust package manager, with a note about additional dependencies needed on Ubuntu systems.\nSOURCE: https://github.com/moghtech/komodo/blob/main/bin/cli/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo install komodo_cli\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Definition in Komodo\nDESCRIPTION: Shows the basic syntax for defining a key-value pair variable in Komodo.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/variables.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nKEY_1 = \"value_1\"\n```\n\n----------------------------------------\n\nTITLE: Running a shell script from scripts directory\nDESCRIPTION: Example of running a shell script located in a scripts folder by changing to that directory first.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/build-images/pre-build.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsh on-clone.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Komodo Periphery at User Level using curl and Python\nDESCRIPTION: This command downloads and executes the Periphery setup script with user-level installation. It installs the periphery binary to the user's local bin directory and configures systemd service under the user's account.\nSOURCE: https://github.com/moghtech/komodo/blob/main/scripts/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -sSL https://raw.githubusercontent.com/moghtech/komodo/main/scripts/setup-periphery.py | python3 - --user\n```\n\n----------------------------------------\n\nTITLE: Running a shell script from project root\nDESCRIPTION: Alternative example of running the same shell script by using its relative path from the project root.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/build-images/pre-build.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsh scripts/on-clone.sh\n```\n\n----------------------------------------\n\nTITLE: Checking Periphery Service Status on Komodo Builder\nDESCRIPTION: A command to verify that the Periphery service is running properly on the AWS instance. This helps confirm that the installation has completed successfully before proceeding to create an AMI.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/build-images/builders.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl status periphery.service\n```\n\n----------------------------------------\n\nTITLE: Setting Up Komodo Frontend\nDESCRIPTION: Series of commands to set up, build, and run the Komodo frontend, including generating the TypeScript client.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/development.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo install typeshare-cli\nrun -r link-client\nrun -r gen-client\nrun -r dev-frontend\nrun -r build-frontend\n```\n\n----------------------------------------\n\nTITLE: Installing Periphery Agent as User\nDESCRIPTION: Command to install Periphery agent as current user with additional configuration requirements.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/connect-servers.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://raw.githubusercontent.com/moghtech/komodo/main/scripts/setup-periphery.py | python3 - --user\n```\n\n----------------------------------------\n\nTITLE: Forcing Systemd Service File Recreation for Komodo Periphery\nDESCRIPTION: Command to reinstall the Periphery setup with the --force-service-file flag, which recreates the systemd service file with default settings even if one already exists. Useful when needing to reset customized service configurations.\nSOURCE: https://github.com/moghtech/komodo/blob/main/scripts/readme.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -sSL https://raw.githubusercontent.com/moghtech/komodo/main/scripts/setup-periphery.py | python3 - --force-service-file\n```\n\n----------------------------------------\n\nTITLE: Downloading Configuration Files for Postgres Setup in Komodo\nDESCRIPTION: Downloads the required Docker Compose and environment configuration files for Postgres setup from the moghtech/komodo GitHub repository to a local 'komodo' directory.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/setup/postgres.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -P komodo https://raw.githubusercontent.com/moghtech/komodo/main/compose/postgres.compose.yaml && \\\n  wget -P komodo https://raw.githubusercontent.com/moghtech/komodo/main/compose/compose.env\n```\n\n----------------------------------------\n\nTITLE: Starting Periphery with Configuration\nDESCRIPTION: Example command for starting the Periphery agent with multiple configuration paths and options.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/connect-servers.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nperiphery \\\n\t--config-path /path/to/periphery.config.base.toml \\\n\t--config-path /other_path/to/override-periphery-config-directory \\\n\t--config-keyword periphery \\\n\t--config-keyword config \\\n\t--merge-nested-config true\n```\n\n----------------------------------------\n\nTITLE: Updating Rust Toolchain\nDESCRIPTION: Command to ensure the Rust toolchain is up to date before building the backend.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/development.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrustup update\n```\n\n----------------------------------------\n\nTITLE: Installing Backend Dependencies on Debian/Ubuntu\nDESCRIPTION: Command to install necessary packages for building the Rust backend on Debian/Ubuntu systems.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/development.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt install build-essential pkg-config libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Setting up Komodo Frontend Dependencies\nDESCRIPTION: This command sequence sets up the local 'komodo_client' package and links it to the frontend project. It also installs the frontend dependencies.\nSOURCE: https://github.com/moghtech/komodo/blob/main/frontend/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd ../client/core/ts && yarn && yarn build && yarn link && \\\ncd ../../../frontend && yarn link komodo_client && yarn\n```\n\n----------------------------------------\n\nTITLE: Enabling Yarn with Corepack\nDESCRIPTION: Command to enable Yarn package manager using Corepack after installing Node.js.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/development.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncorepack enable\n```\n\n----------------------------------------\n\nTITLE: Installing Komodo Client with Yarn\nDESCRIPTION: Command to install the Komodo client library using Yarn package manager\nSOURCE: https://github.com/moghtech/komodo/blob/main/client/core/ts/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add komodo_client\n```\n\n----------------------------------------\n\nTITLE: Downloading Komodo Configuration Files for SQLite Setup\nDESCRIPTION: Downloads the required configuration files (sqlite.compose.yaml and compose.env) from the Komodo GitHub repository to set up FerretDB with SQLite.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/setup/sqlite.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -P komodo https://raw.githubusercontent.com/moghtech/komodo/main/compose/sqlite.compose.yaml && \\\n  wget -P komodo https://raw.githubusercontent.com/moghtech/komodo/main/compose/compose.env\n```\n\n----------------------------------------\n\nTITLE: Installing Komodo Client with NPM\nDESCRIPTION: Command to install the Komodo client library using NPM package manager\nSOURCE: https://github.com/moghtech/komodo/blob/main/client/core/ts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install komodo_client\n```\n\n----------------------------------------\n\nTITLE: Deploying Komodo Website Without SSH\nDESCRIPTION: Command to build and deploy the website using GitHub username for authentication, pushing to the 'gh-pages' branch for hosting on GitHub Pages.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Postgres with Docker Compose for Komodo\nDESCRIPTION: Deploys Postgres using Docker Compose with the specified project name, compose file, and environment variables file. The -d flag runs containers in the background.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/setup/postgres.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -p komodo -f komodo/postgres.compose.yaml --env-file komodo/compose.env up -d\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for Komodo Website\nDESCRIPTION: Command to generate optimized static content in the 'build' directory that can be deployed to any static hosting service.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Starting Komodo Frontend Development Server\nDESCRIPTION: This command starts the development server for the Komodo frontend after all dependencies and configurations are set up.\nSOURCE: https://github.com/moghtech/komodo/blob/main/frontend/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Downloading MongoDB Configuration Files\nDESCRIPTION: Downloads the required Docker Compose and environment configuration files from the moghtech/komodo repository.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/setup/mongo.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -P komodo https://raw.githubusercontent.com/moghtech/komodo/main/compose/mongo.compose.yaml && \\\n  wget -P komodo https://raw.githubusercontent.com/moghtech/komodo/main/compose/compose.env\n```\n\n----------------------------------------\n\nTITLE: Importing React Component for Compose and Environment Variables\nDESCRIPTION: MDX code block that imports and renders a React component named ComposeAndEnv to display the contents of the postgres.compose.yaml file.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/setup/postgres.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport ComposeAndEnv from \"@site/src/components/ComposeAndEnv\";\n\n<ComposeAndEnv file_name=\"postgres.compose.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Remote Code File Component in MDX\nDESCRIPTION: React component import statement for displaying remote code files in documentation.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/connect-servers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport RemoteCodeFile from \"@site/src/components/RemoteCodeFile\";\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in MDX for Documentation Navigation\nDESCRIPTION: This MDX code block imports and renders the DocCardList component from the Docusaurus theme, which displays a list of doc cards for navigation within the documentation site.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/build-images/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Running a Build Execution with Komodo CLI\nDESCRIPTION: Example command for triggering a build named 'test_build' using the Komodo CLI execute command.\nSOURCE: https://github.com/moghtech/komodo/blob/main/bin/cli/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Triggers an example build\nkomodo execute run-build test_build\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card List in JSX\nDESCRIPTION: React/JSX code block for importing and rendering a DocCardList component for documentation navigation.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/setup/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Setting Default Robot Access Rules\nDESCRIPTION: Basic robots.txt configuration that allows unrestricted access to all web crawlers and bots. Includes reference to the robots.txt standard specification.\nSOURCE: https://github.com/moghtech/komodo/blob/main/frontend/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Docker Volume Path Configuration in Komodo\nDESCRIPTION: Explains how Docker volume paths are implemented in Komodo, showing the format for volume mapping and best practices for path specification.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/file-paths.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThese are passed directly to the Docker CLI using `--volume /path/on/system:/path/in/container`. So for these, the same rules apply as when using Docker on the command line. Paths here should usually be given as absolute. It's also probably best to avoid usage of `~` or environment variables like `$HOME`, as this may lead to unexpected behavior.\n```\n\n----------------------------------------\n\nTITLE: Git Module Documentation\nDESCRIPTION: Documentation in markdown format describing the Git helper module's purpose and capabilities for cloning, pulling and committing to git repositories.\nSOURCE: https://github.com/moghtech/komodo/blob/main/lib/git/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Git module\\n\\nHelpers for cloning, pulling, and committing to git repos.\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Compose Project Name\nDESCRIPTION: This command is used to list Docker Compose projects on the host, which helps in identifying the project name required for Komodo to pick up a running project.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/docker-compose.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose ls\n```\n\n----------------------------------------\n\nTITLE: Downloading Periphery Configuration\nDESCRIPTION: Command to download the default Periphery configuration file.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/connect-servers.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwget -P komodo https://raw.githubusercontent.com/moghtech/komodo/main/config/periphery.config.toml\n```\n\n----------------------------------------\n\nTITLE: Installing Komodo Website Dependencies with Yarn\nDESCRIPTION: Command to install all required dependencies for the Docusaurus-based website using Yarn package manager.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Komodo Website\nDESCRIPTION: Command to start a local development server that provides live preview of changes to the website without requiring server restarts.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Running Komodo Docsite in Development Mode\nDESCRIPTION: Command to start the Docusaurus-based documentation site for Komodo in development mode, allowing for automatic reloading of changes.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/development.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrun -r dev-docsite\n```\n\n----------------------------------------\n\nTITLE: Deploying Komodo Website Using SSH\nDESCRIPTION: Command to build and deploy the website using SSH authentication, typically for GitHub Pages or similar hosting services.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Basic Docker build command reference\nDESCRIPTION: Reference to the docker build command that runs after pre-build commands.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/build-images/pre-build.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```docker build```\n```\n\n----------------------------------------\n\nTITLE: React Component Import\nDESCRIPTION: MDX code block importing a React component for displaying compose and environment configurations.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/setup/mongo.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport ComposeAndEnv from \"@site/src/components/ComposeAndEnv\";\n\n<ComposeAndEnv file_name=\"mongo.compose.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in MDX\nDESCRIPTION: MDX code block that imports and renders a DocCardList component for documentation navigation.\nSOURCE: https://github.com/moghtech/komodo/blob/main/docsite/docs/deploy-containers/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```"
  }
]