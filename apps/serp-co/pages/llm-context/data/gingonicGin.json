[
  {
    "owner": "gin-gonic",
    "repo": "gin",
    "content": "TITLE: Basic Gin Web Server Implementation\nDESCRIPTION: A minimal example showing how to create a Gin web server with a single route that returns a JSON response. The example demonstrates route creation and JSON response handling.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"net/http\"\n\n  \"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n  r := gin.Default()\n  r.GET(\"/ping\", func(c *gin.Context) {\n    c.JSON(http.StatusOK, gin.H{\n      \"message\": \"pong\",\n    })\n  })\n  r.Run() // listen and serve on 0.0.0.0:8080 (for windows \"localhost:8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Methods in Gin\nDESCRIPTION: Example of setting up a Gin router with various HTTP methods (GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS) and running the server on a default or specified port.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  // Creates a gin router with default middleware:\n  // logger and recovery (crash-free) middleware\n  router := gin.Default()\n\n  router.GET(\"/someGet\", getting)\n  router.POST(\"/somePost\", posting)\n  router.PUT(\"/somePut\", putting)\n  router.DELETE(\"/someDelete\", deleting)\n  router.PATCH(\"/somePatch\", patching)\n  router.HEAD(\"/someHead\", head)\n  router.OPTIONS(\"/someOptions\", options)\n\n  // By default, it serves on :8080 unless a\n  // PORT environment variable was defined.\n  router.Run()\n  // router.Run(\":3000\") for a hard coded port\n}\n```\n\n----------------------------------------\n\nTITLE: Using Middleware in Gin\nDESCRIPTION: A comprehensive example showing how to use middleware in Gin, including global middleware, per-route middleware, and group-specific middleware. The code demonstrates authorization groups, nested groups, and custom middleware implementations.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  // Creates a router without any middleware by default\n  r := gin.New()\n\n  // Global middleware\n  // Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN_MODE=release.\n  // By default gin.DefaultWriter = os.Stdout\n  r.Use(gin.Logger())\n\n  // Recovery middleware recovers from any panics and writes a 500 if there was one.\n  r.Use(gin.Recovery())\n\n  // Per route middleware, you can add as many as you desire.\n  r.GET(\"/benchmark\", MyBenchLogger(), benchEndpoint)\n\n  // Authorization group\n  // authorized := r.Group(\"/\", AuthRequired())\n  // exactly the same as:\n  authorized := r.Group(\"/\")\n  // per group middleware! in this case we use the custom created\n  // AuthRequired() middleware just in the \"authorized\" group.\n  authorized.Use(AuthRequired())\n  {\n    authorized.POST(\"/login\", loginEndpoint)\n    authorized.POST(\"/submit\", submitEndpoint)\n    authorized.POST(\"/read\", readEndpoint)\n\n    // nested group\n    testing := authorized.Group(\"testing\")\n    // visit 0.0.0.0:8080/testing/analytics\n    testing.GET(\"/analytics\", analyticsEndpoint)\n  }\n\n  // Listen and serve on 0.0.0.0:8080\n  r.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing in Gin\nDESCRIPTION: Shows how to write unit tests for Gin handlers using the net/http/httptest package with examples of route testing.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_55\n\nLANGUAGE: go\nCODE:\n```\nfunc TestPingRoute(t *testing.T) {\n  router := setupRouter()\n\n  w := httptest.NewRecorder()\n  req, _ := http.NewRequest(http.MethodGet, \"/ping\", nil)\n  router.ServeHTTP(w, req)\n\n  assert.Equal(t, http.StatusOK, w.Code)\n  assert.Equal(t, \"pong\", w.Body.String())\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Routes in Gin\nDESCRIPTION: Shows how to organize API endpoints by grouping routes in Gin. This example creates two API versions (v1 and v2) with identical endpoints, demonstrating how to structure and version a REST API.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  router := gin.Default()\n\n  // Simple group: v1\n  {\n    v1 := router.Group(\"/v1\")\n    v1.POST(\"/login\", loginEndpoint)\n    v1.POST(\"/submit\", submitEndpoint)\n    v1.POST(\"/read\", readEndpoint)\n  }\n\n  // Simple group: v2\n  {\n    v2 := router.Group(\"/v2\")\n    v2.POST(\"/login\", loginEndpoint)\n    v2.POST(\"/submit\", submitEndpoint)\n    v2.POST(\"/read\", readEndpoint)\n  }\n\n  router.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Handling URL Path Parameters in Gin\nDESCRIPTION: Example demonstrating how to define and use route parameters in Gin, including route matching priorities and parameter extraction from the URL path.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  router := gin.Default()\n\n  // This handler will match /user/john but will not match /user/ or /user\n  router.GET(\"/user/:name\", func(c *gin.Context) {\n    name := c.Param(\"name\")\n    c.String(http.StatusOK, \"Hello %s\", name)\n  })\n\n  // However, this one will match /user/john/ and also /user/john/send\n  // If no other routers match /user/john, it will redirect to /user/john/\n  router.GET(\"/user/:name/*action\", func(c *gin.Context) {\n    name := c.Param(\"name\")\n    action := c.Param(\"action\")\n    message := name + \" is \" + action\n    c.String(http.StatusOK, message)\n  })\n\n  // For each matched request Context will hold the route definition\n  router.POST(\"/user/:name/*action\", func(c *gin.Context) {\n    b := c.FullPath() == \"/user/:name/*action\" // true\n    c.String(http.StatusOK, \"%t\", b)\n  })\n\n  // This handler will add a new router for /user/groups.\n  // Exact routes are resolved before param routes, regardless of the order they were defined.\n  // Routes starting with /user/groups are never interpreted as /user/:name/... routes\n  router.GET(\"/user/groups\", func(c *gin.Context) {\n    c.String(http.StatusOK, \"The available groups are [...]\")\n  })\n\n  router.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Graceful Shutdown in Gin with Go's Built-in Features\nDESCRIPTION: This example shows how to implement graceful shutdown in a Gin server using Go's built-in http.Server.Shutdown() method. It handles OS signals to initiate shutdown, gives active connections time to complete, and ensures proper cleanup before program termination.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_47\n\nLANGUAGE: go\nCODE:\n```\n// +build go1.8\n\npackage main\n\nimport (\n  \"context\"\n  \"log\"\n  \"net/http\"\n  \"os\"\n  \"os/signal\"\n  \"syscall\"\n  \"time\"\n\n  \"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n  router := gin.Default()\n  router.GET(\"/\", func(c *gin.Context) {\n    time.Sleep(5 * time.Second)\n    c.String(http.StatusOK, \"Welcome Gin Server\")\n  })\n\n  srv := &http.Server{\n    Addr:    \":8080\",\n    Handler: router,\n  }\n\n  // Initializing the server in a goroutine so that\n  // it won't block the graceful shutdown handling below\n  go func() {\n    if err := srv.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {\n      log.Printf(\"listen: %s\\n\", err)\n    }\n  }()\n\n  // Wait for interrupt signal to gracefully shutdown the server with\n  // a timeout of 5 seconds.\n  quit := make(chan os.Signal)\n  // kill (no param) default send syscall.SIGTERM\n  // kill -2 is syscall.SIGINT\n  // kill -9 is syscall.SIGKILL but can't be caught, so don't need to add it\n  signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)\n  <-quit\n  log.Println(\"Shutting down server...\")\n\n  // The context is used to inform the server it has 5 seconds to finish\n  // the request it is currently handling\n  ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n  defer cancel()\n\n  if err := srv.Shutdown(ctx); err != nil {\n    log.Fatal(\"Server forced to shutdown:\", err)\n  }\n\n  log.Println(\"Server exiting\")\n}\n```\n\n----------------------------------------\n\nTITLE: Building Single Binaries with Embedded Templates in Gin using Go Embed\nDESCRIPTION: This example demonstrates how to use the Go embed package to bundle templates and static assets into a single binary with Gin. It loads HTML templates and static files directly from the binary, allowing for simplified deployment without external template or asset files.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_48\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"embed\"\n  \"html/template\"\n  \"net/http\"\n\n  \"github.com/gin-gonic/gin\"\n)\n\n//go:embed assets/* templates/*\nvar f embed.FS\n\nfunc main() {\n  router := gin.Default()\n  templ := template.Must(template.New(\"\").ParseFS(f, \"templates/*.tmpl\", \"templates/foo/*.tmpl\"))\n  router.SetHTMLTemplate(templ)\n\n  // example: /public/assets/images/example.png\n  router.StaticFS(\"/public\", http.FS(f))\n\n  router.GET(\"/\", func(c *gin.Context) {\n    c.HTML(http.StatusOK, \"index.tmpl\", gin.H{\n      \"title\": \"Main website\",\n    })\n  })\n\n  router.GET(\"/foo\", func(c *gin.Context) {\n    c.HTML(http.StatusOK, \"bar.tmpl\", gin.H{\n      \"title\": \"Foo website\",\n    })\n  })\n\n  router.GET(\"favicon.ico\", func(c *gin.Context) {\n    file, _ := f.ReadFile(\"assets/favicon.ico\")\n    c.Data(\n      http.StatusOK,\n      \"image/x-icon\",\n      file,\n    )\n  })\n\n  router.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Multiple Files with Gin\nDESCRIPTION: Demonstrates how to handle multiple file uploads using Gin's multipart form functionality. The code sets a memory limit for uploads, processes multiple files from a form, and saves them to a destination. The example shows both the server-side implementation and how to upload files using curl.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  router := gin.Default()\n  // Set a lower memory limit for multipart forms (default is 32 MiB)\n  router.MaxMultipartMemory = 8 << 20  // 8 MiB\n  router.POST(\"/upload\", func(c *gin.Context) {\n    // Multipart form\n    form, _ := c.MultipartForm()\n    files := form.File[\"upload[]\"]\n\n    for _, file := range files {\n      log.Println(file.Filename)\n\n      // Upload the file to specific dst.\n      c.SaveUploadedFile(file, dst)\n    }\n    c.String(http.StatusOK, fmt.Sprintf(\"%d files uploaded!\", len(files)))\n  })\n  router.Run(\":8080\")\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8080/upload \\\n  -F \"upload[]=@/Users/appleboy/test1.zip\" \\\n  -F \"upload[]=@/Users/appleboy/test2.zip\" \\\n  -H \"Content-Type: multipart/form-data\"\n```\n\n----------------------------------------\n\nTITLE: Handling Query String Parameters in Gin\nDESCRIPTION: Example showing how to access and use query string parameters in a Gin handler, including setting default values for optional parameters.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  router := gin.Default()\n\n  // Query string parameters are parsed using the existing underlying request object.\n  // The request responds to a URL matching: /welcome?firstname=Jane&lastname=Doe\n  router.GET(\"/welcome\", func(c *gin.Context) {\n    firstname := c.DefaultQuery(\"firstname\", \"Guest\")\n    lastname := c.Query(\"lastname\") // shortcut for c.Request.URL.Query().Get(\"lastname\")\n\n    c.String(http.StatusOK, \"Hello %s %s\", firstname, lastname)\n  })\n  router.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Let's Encrypt HTTPS with Gin using autotls\nDESCRIPTION: This example demonstrates how to set up a basic HTTPS server with Let's Encrypt certificates using the Gin web framework's autotls package. It creates a simple web server with a ping endpoint secured with automatic TLS certificates for the specified domains.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_44\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"log\"\n  \"net/http\"\n\n  \"github.com/gin-gonic/autotls\"\n  \"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n  r := gin.Default()\n\n  // Ping handler\n  r.GET(\"/ping\", func(c *gin.Context) {\n    c.String(http.StatusOK, \"pong\")\n  })\n\n  log.Fatal(autotls.Run(r, \"example1.com\", \"example2.com\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Query String or Post Data Based on Request Type\nDESCRIPTION: Example showing how to use Gin's ShouldBind method to automatically bind data from the appropriate source based on request method and content-type. This example also demonstrates time format binding.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_29\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"log\"\n  \"net/http\"\n  \"time\"\n\n  \"github.com/gin-gonic/gin\"\n)\n\ntype Person struct {\n  Name       string    `form:\"name\"`\n  Address    string    `form:\"address\"`\n  Birthday   time.Time `form:\"birthday\" time_format:\"2006-01-02\" time_utc:\"1\"`\n  CreateTime time.Time `form:\"createTime\" time_format:\"unixNano\"`\n  UnixTime   time.Time `form:\"unixTime\" time_format:\"unix\"`\n  UnixMilliTime   time.Time `form:\"unixMilliTime\" time_format:\"unixmilli\"`\n  UnixMicroTime   time.Time `form:\"unixMicroTime\" time_format:\"uNiXmIcRo\"` // case does not matter for \"unix*\" time formats\n}\n\nfunc main() {\n  route := gin.Default()\n  route.GET(\"/testing\", startPage)\n  route.Run(\":8085\")\n}\n\nfunc startPage(c *gin.Context) {\n  var person Person\n  // If `GET`, only `Form` binding engine (`query`) used.\n  // If `POST`, first checks the `content-type` for `JSON` or `XML`, then uses `Form` (`form-data`).\n  // See more at https://github.com/gin-gonic/gin/blob/master/binding/binding.go#L88\n  if c.ShouldBind(&person) == nil {\n    log.Println(person.Name)\n    log.Println(person.Address)\n    log.Println(person.Birthday)\n    log.Println(person.CreateTime)\n    log.Println(person.UnixTime)\n    log.Println(person.UnixMilliTime)\n    log.Println(person.UnixMicroTime)\n  }\n\n  c.String(http.StatusOK, \"Success\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a minimal web server with Gin's simplified API\nDESCRIPTION: This snippet demonstrates how to create a minimal web server using Gin's simplified API through the ginS package. It defines a single GET route handler for the root path that returns 'Hello World' and starts the server with default configuration.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/ginS/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/gin/ginS\"\n)\n\nfunc main() {\n\tginS.GET(\"/\", func(c *gin.Context) { c.String(200, \"Hello World\") })\n\tginS.Run()\n}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Gin Services Concurrently with errgroup\nDESCRIPTION: This example demonstrates how to run multiple Gin HTTP servers concurrently using Go's errgroup package. It creates two independent HTTP servers on different ports with separate router configurations, showing how to manage multiple services in a single application.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_46\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"log\"\n  \"net/http\"\n  \"time\"\n\n  \"github.com/gin-gonic/gin\"\n  \"golang.org/x/sync/errgroup\"\n)\n\nvar (\n  g errgroup.Group\n)\n\nfunc router01() http.Handler {\n  e := gin.New()\n  e.Use(gin.Recovery())\n  e.GET(\"/\", func(c *gin.Context) {\n    c.JSON(\n      http.StatusOK,\n      gin.H{\n        \"code\":  http.StatusOK,\n        \"error\": \"Welcome server 01\",\n      },\n    )\n  })\n\n  return e\n}\n\nfunc router02() http.Handler {\n  e := gin.New()\n  e.Use(gin.Recovery())\n  e.GET(\"/\", func(c *gin.Context) {\n    c.JSON(\n      http.StatusOK,\n      gin.H{\n        \"code\":  http.StatusOK,\n        \"error\": \"Welcome server 02\",\n      },\n    )\n  })\n\n  return e\n}\n\nfunc main() {\n  server01 := &http.Server{\n    Addr:         \":8080\",\n    Handler:      router01(),\n    ReadTimeout:  5 * time.Second,\n    WriteTimeout: 10 * time.Second,\n  }\n\n  server02 := &http.Server{\n    Addr:         \":8081\",\n    Handler:      router02(),\n    ReadTimeout:  5 * time.Second,\n    WriteTimeout: 10 * time.Second,\n  }\n\n  g.Go(func() error {\n    err := server01.ListenAndServe()\n    if err != nil && err != http.ErrServerClosed {\n      log.Fatal(err)\n    }\n    return err\n  })\n\n  g.Go(func() error {\n    err := server02.ListenAndServe()\n    if err != nil && err != http.ErrServerClosed {\n      log.Fatal(err)\n    }\n    return err\n  })\n\n  if err := g.Wait(); err != nil {\n    log.Fatal(err)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Single File Upload in Gin\nDESCRIPTION: Example of handling single file upload in Gin, including setting memory limits, accessing file metadata, and saving the uploaded file to a destination path.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  router := gin.Default()\n  // Set a lower memory limit for multipart forms (default is 32 MiB)\n  router.MaxMultipartMemory = 8 << 20  // 8 MiB\n  router.POST(\"/upload\", func(c *gin.Context) {\n    // Single file\n    file, _ := c.FormFile(\"file\")\n    log.Println(file.Filename)\n\n    // Upload the file to specific dst.\n    c.SaveUploadedFile(file, dst)\n\n    c.String(http.StatusOK, fmt.Sprintf(\"'%s' uploaded!\", file.Filename))\n  })\n  router.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Response Format Rendering\nDESCRIPTION: Shows how to render responses in various formats including JSON, XML, YAML, TOML, and ProtoBuf.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_38\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  r := gin.Default()\n\n  r.GET(\"/someJSON\", func(c *gin.Context) {\n    c.JSON(http.StatusOK, gin.H{\"message\": \"hey\", \"status\": http.StatusOK})\n  })\n\n  r.GET(\"/moreJSON\", func(c *gin.Context) {\n    var msg struct {\n      Name    string `json:\"user\"`\n      Message string\n      Number  int\n    }\n    msg.Name = \"Lena\"\n    msg.Message = \"hey\"\n    msg.Number = 123\n    c.JSON(http.StatusOK, msg)\n  })\n\n  r.GET(\"/someXML\", func(c *gin.Context) {\n    c.XML(http.StatusOK, gin.H{\"message\": \"hey\", \"status\": http.StatusOK})\n  })\n\n  r.GET(\"/someYAML\", func(c *gin.Context) {\n    c.YAML(http.StatusOK, gin.H{\"message\": \"hey\", \"status\": http.StatusOK})\n  })\n\n  r.GET(\"/someTOML\", func(c *gin.Context) {\n    c.TOML(http.StatusOK, gin.H{\"message\": \"hey\", \"status\": http.StatusOK})\n  })\n\n  r.GET(\"/someProtoBuf\", func(c *gin.Context) {\n    reps := []int64{int64(1), int64(2)}\n    label := \"test\"\n    data := &protoexample.Test{\n      Label: &label,\n      Reps:  reps,\n    }\n    c.ProtoBuf(http.StatusOK, data)\n  })\n\n  r.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Binding for JSON, XML and Form Data in Gin\nDESCRIPTION: Example showing how to bind JSON, XML, and form data to a struct using Gin's binding methods. The code demonstrates authentication logic that validates user credentials against expected values after binding the request data.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_24\n\nLANGUAGE: go\nCODE:\n```\n// Binding from JSON\ntype Login struct {\n  User     string `form:\"user\" json:\"user\" xml:\"user\" binding:\"required\"`\n  Password string `form:\"password\" json:\"password\" xml:\"password\" binding:\"required\"`\n}\n\nfunc main() {\n  router := gin.Default()\n\n  // Example for binding JSON ({\"user\": \"manu\", \"password\": \"123\"})\n  router.POST(\"/loginJSON\", func(c *gin.Context) {\n    var json Login\n    if err := c.ShouldBindJSON(&json); err != nil {\n      c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n      return\n    }\n\n    if json.User != \"manu\" || json.Password != \"123\" {\n      c.JSON(http.StatusUnauthorized, gin.H{\"status\": \"unauthorized\"})\n      return\n    }\n\n    c.JSON(http.StatusOK, gin.H{\"status\": \"you are logged in\"})\n  })\n\n  // Example for binding XML (\n  //  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  //  <root>\n  //    <user>manu</user>\n  //    <password>123</password>\n  //  </root>)\n  router.POST(\"/loginXML\", func(c *gin.Context) {\n    var xml Login\n    if err := c.ShouldBindXML(&xml); err != nil {\n      c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n      return\n    }\n\n    if xml.User != \"manu\" || xml.Password != \"123\" {\n      c.JSON(http.StatusUnauthorized, gin.H{\"status\": \"unauthorized\"})\n      return\n    }\n\n    c.JSON(http.StatusOK, gin.H{\"status\": \"you are logged in\"})\n  })\n\n  // Example for binding a HTML form (user=manu&password=123)\n  router.POST(\"/loginForm\", func(c *gin.Context) {\n    var form Login\n    // This will infer what binder to use depending on the content-type header.\n    if err := c.ShouldBind(&form); err != nil {\n      c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n      return\n    }\n\n    if form.User != \"manu\" || form.Password != \"123\" {\n      c.JSON(http.StatusUnauthorized, gin.H{\"status\": \"unauthorized\"})\n      return\n    }\n\n    c.JSON(http.StatusOK, gin.H{\"status\": \"you are logged in\"})\n  })\n\n  // Listen and serve on 0.0.0.0:8080\n  router.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Form Data to Custom Nested Structs in Gin\nDESCRIPTION: This example illustrates how to bind form data to custom nested structs in Gin. It demonstrates various struct configurations including regular nested structs, pointer-based nested structs, and anonymous nested structs, showing how form field values are mapped to struct fields.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_49\n\nLANGUAGE: go\nCODE:\n```\ntype StructA struct {\n    FieldA string `form:\"field_a\"`\n}\n\ntype StructB struct {\n    NestedStruct StructA\n    FieldB string `form:\"field_b\"`\n}\n\ntype StructC struct {\n    NestedStructPointer *StructA\n    FieldC string `form:\"field_c\"`\n}\n\ntype StructD struct {\n    NestedAnonyStruct struct {\n        FieldX string `form:\"field_x\"`\n    }\n    FieldD string `form:\"field_d\"`\n}\n\nfunc GetDataB(c *gin.Context) {\n    var b StructB\n    c.Bind(&b)\n    c.JSON(http.StatusOK, gin.H{\n        \"a\": b.NestedStruct,\n        \"b\": b.FieldB,\n    })\n}\n\nfunc GetDataC(c *gin.Context) {\n    var b StructC\n    c.Bind(&b)\n    c.JSON(http.StatusOK, gin.H{\n        \"a\": b.NestedStructPointer,\n        \"c\": b.FieldC,\n    })\n}\n\nfunc GetDataD(c *gin.Context) {\n    var b StructD\n    c.Bind(&b)\n    c.JSON(http.StatusOK, gin.H{\n        \"x\": b.NestedAnonyStruct,\n        \"d\": b.FieldD,\n    })\n}\n\nfunc main() {\n    r := gin.Default()\n    r.GET(\"/getb\", GetDataB)\n    r.GET(\"/getc\", GetDataC)\n    r.GET(\"/getd\", GetDataD)\n\n    r.Run()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validators in Gin\nDESCRIPTION: Example showing how to create and register custom validators in Gin. This code creates a custom 'bookabledate' validator that ensures a date is in the future, then registers it with Gin's validator engine.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_26\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"net/http\"\n  \"time\"\n\n  \"github.com/gin-gonic/gin\"\n  \"github.com/gin-gonic/gin/binding\"\n  \"github.com/go-playground/validator/v10\"\n)\n\n// Booking contains binded and validated data.\ntype Booking struct {\n  CheckIn  time.Time `form:\"check_in\" binding:\"required,bookabledate\" time_format:\"2006-01-02\"`\n  CheckOut time.Time `form:\"check_out\" binding:\"required,gtfield=CheckIn\" time_format:\"2006-01-02\"`\n}\n\nvar bookableDate validator.Func = func(fl validator.FieldLevel) bool {\n  date, ok := fl.Field().Interface().(time.Time)\n  if ok {\n    today := time.Now()\n    if today.After(date) {\n      return false\n    }\n  }\n  return true\n}\n\nfunc main() {\n  route := gin.Default()\n\n  if v, ok := binding.Validator.Engine().(*validator.Validate); ok {\n    v.RegisterValidation(\"bookabledate\", bookableDate)\n  }\n\n  route.GET(\"/bookable\", getBookable)\n  route.Run(\":8085\")\n}\n\nfunc getBookable(c *gin.Context) {\n  var b Booking\n  if err := c.ShouldBindWith(&b, binding.Query); err == nil {\n    c.JSON(http.StatusOK, gin.H{\"message\": \"Booking dates are valid!\"})\n  } else {\n    c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Static File Serving in Gin\nDESCRIPTION: Shows different methods for serving static files and directories using Gin's built-in static file handlers.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_43\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  router := gin.Default()\n  router.Static(\"/assets\", \"./assets\")\n  router.StaticFS(\"/more_static\", http.Dir(\"my_file_system\"))\n  router.StaticFile(\"/favicon.ico\", \"./resources/favicon.ico\")\n  router.StaticFileFS(\"/more_favicon.ico\", \"more_favicon.ico\", http.Dir(\"my_file_system\"))\n\n  // Listen and serve on 0.0.0.0:8080\n  router.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management in Gin\nDESCRIPTION: Shows how to set and get cookies in a Gin application with various cookie parameters like expiration time and security flags.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_53\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  router := gin.Default()\n\n  router.GET(\"/cookie\", func(c *gin.Context) {\n      cookie, err := c.Cookie(\"gin_cookie\")\n\n      if err != nil {\n          cookie = \"NotSet\"\n          c.SetCookie(\"gin_cookie\", \"test\", 3600, \"/\", \"localhost\", false, true)\n      }\n\n      fmt.Printf(\"Cookie value: %s \\n\", cookie)\n  })\n\n  router.Run()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Recovery Behavior in Gin\nDESCRIPTION: Shows how to implement custom recovery middleware in Gin to handle panics gracefully. This example defines a custom recovery function that differentiates between string errors and other panic types, providing appropriate responses based on the error type.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  // Creates a router without any middleware by default\n  r := gin.New()\n\n  // Global middleware\n  // Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN_MODE=release.\n  // By default gin.DefaultWriter = os.Stdout\n  r.Use(gin.Logger())\n\n  // Recovery middleware recovers from any panics and writes a 500 if there was one.\n  r.Use(gin.CustomRecovery(func(c *gin.Context, recovered any) {\n    if err, ok := recovered.(string); ok {\n      c.String(http.StatusInternalServerError, fmt.Sprintf(\"error: %s\", err))\n    }\n    c.AbortWithStatus(http.StatusInternalServerError)\n  }))\n\n  r.GET(\"/panic\", func(c *gin.Context) {\n    // panic with a string -- the custom middleware could save this to a database or report it to the user\n    panic(\"foo\")\n  })\n\n  r.GET(\"/\", func(c *gin.Context) {\n    c.String(http.StatusOK, \"ohai\")\n  })\n\n  // Listen and serve on 0.0.0.0:8080\n  r.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Multipart Form Binding\nDESCRIPTION: Demonstrates how to handle file uploads with multipart form binding in Gin.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_37\n\nLANGUAGE: go\nCODE:\n```\ntype ProfileForm struct {\n  Name   string                `form:\"name\" binding:\"required\"`\n  Avatar *multipart.FileHeader `form:\"avatar\" binding:\"required\"`\n}\n\nfunc main() {\n  router := gin.Default()\n  router.POST(\"/profile\", func(c *gin.Context) {\n    var form ProfileForm\n    if err := c.ShouldBind(&form); err != nil {\n      c.String(http.StatusBadRequest, \"bad request\")\n      return\n    }\n\n    err := c.SaveUploadedFile(form.Avatar, form.Avatar.Filename)\n    if err != nil {\n      c.String(http.StatusInternalServerError, \"unknown error\")\n      return\n    }\n    c.String(http.StatusOK, \"ok\")\n  })\n  router.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Trusted Proxies Configuration in Gin\nDESCRIPTION: Demonstrates how to configure trusted proxies and CDN platforms for proper client IP resolution in Gin applications.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_54\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  router := gin.Default()\n  router.SetTrustedProxies([]string{\"192.168.1.2\"})\n\n  router.GET(\"/\", func(c *gin.Context) {\n    fmt.Printf(\"ClientIP: %s\\n\", c.ClientIP())\n  })\n  router.Run()\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP/2 Server Push Implementation in Gin\nDESCRIPTION: Demonstrates how to implement HTTP/2 server push functionality in a Gin application. Includes template rendering and static file serving.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_52\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  r := gin.Default()\n  r.Static(\"/assets\", \"./assets\")\n  r.SetHTMLTemplate(html)\n\n  r.GET(\"/\", func(c *gin.Context) {\n    if pusher := c.Writer.Pusher(); pusher != nil {\n      // use pusher.Push() to do server push\n      if err := pusher.Push(\"/assets/app.js\", nil); err != nil {\n        log.Printf(\"Failed to push: %v\", err)\n      }\n    }\n    c.HTML(http.StatusOK, \"https\", gin.H{\n      \"status\": \"success\",\n    })\n  })\n\n  r.RunTLS(\":8080\", \"./testdata/server.pem\", \"./testdata/server.key\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Let's Encrypt HTTPS with Custom Autocert Manager in Gin\nDESCRIPTION: This example shows how to implement HTTPS with Let's Encrypt using a custom autocert manager in Gin. It configures specific options like domain whitelist and cache directory for TLS certificates, providing more control over the certificate management process.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_45\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"log\"\n  \"net/http\"\n\n  \"github.com/gin-gonic/autotls\"\n  \"github.com/gin-gonic/gin\"\n  \"golang.org/x/crypto/acme/autocert\"\n)\n\nfunc main() {\n  r := gin.Default()\n\n  // Ping handler\n  r.GET(\"/ping\", func(c *gin.Context) {\n    c.String(http.StatusOK, \"pong\")\n  })\n\n  m := autocert.Manager{\n    Prompt:     autocert.AcceptTOS,\n    HostPolicy: autocert.HostWhitelist(\"example1.com\", \"example2.com\"),\n    Cache:      autocert.DirCache(\"/var/www/.cache\"),\n  }\n\n  log.Fatal(autotls.RunWithManager(r, &m))\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Gin in Go\nDESCRIPTION: Shows how to import the Gin framework in a Go application using Go's module support.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nimport \"github.com/gin-gonic/gin\"\n```\n\n----------------------------------------\n\nTITLE: Writing Logs to File in Gin\nDESCRIPTION: Demonstrates how to configure Gin to write logs to a file instead of the console. The example disables console colors for file logging and shows how to write logs to both a file and the console simultaneously using io.MultiWriter.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  // Disable Console Color, you don't need console color when writing the logs to file.\n  gin.DisableConsoleColor()\n\n  // Logging to a file.\n  f, _ := os.Create(\"gin.log\")\n  gin.DefaultWriter = io.MultiWriter(f)\n\n  // Use the following code if you need to write the logs to file and console at the same time.\n  // gin.DefaultWriter = io.MultiWriter(f, os.Stdout)\n\n  router := gin.Default()\n  router.GET(\"/ping\", func(c *gin.Context) {\n      c.String(http.StatusOK, \"pong\")\n  })\n\n   router.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Data in Gin\nDESCRIPTION: Example of processing form data submitted via POST request in Gin, including accessing form values and providing default values for missing fields.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  router := gin.Default()\n\n  router.POST(\"/form_post\", func(c *gin.Context) {\n    message := c.PostForm(\"message\")\n    nick := c.DefaultPostForm(\"nick\", \"anonymous\")\n\n    c.JSON(http.StatusOK, gin.H{\n      \"status\":  \"posted\",\n      \"message\": message,\n      \"nick\":    nick,\n    })\n  })\n  router.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Secure JSON Response\nDESCRIPTION: Demonstrates how to use SecureJSON to prevent JSON hijacking by prepending response with a security prefix.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_39\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  r := gin.Default()\n\n  r.GET(\"/someJSON\", func(c *gin.Context) {\n    names := []string{\"lena\", \"austin\", \"foo\"}\n    c.SecureJSON(http.StatusOK, names)\n  })\n\n  r.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Only Query String Parameters in Gin\nDESCRIPTION: Example showing how to bind only query string parameters to a struct using Gin's ShouldBindQuery method. This ignores post data and binds only query parameters.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_28\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"log\"\n  \"net/http\"\n\n  \"github.com/gin-gonic/gin\"\n)\n\ntype Person struct {\n  Name    string `form:\"name\"`\n  Address string `form:\"address\"`\n}\n\nfunc main() {\n  route := gin.Default()\n  route.Any(\"/testing\", startPage)\n  route.Run(\":8085\")\n}\n\nfunc startPage(c *gin.Context) {\n  var person Person\n  if c.ShouldBindQuery(&person) == nil {\n    log.Println(\"====== Only Bind By Query String ======\")\n    log.Println(person.Name)\n    log.Println(person.Address)\n  }\n  c.String(http.StatusOK, \"Success\")\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Request Body to Multiple Structs in Gin\nDESCRIPTION: Demonstrates how to bind request body to different structs using ShouldBind and ShouldBindBodyWith methods. Shows the limitation of basic binding and solution using context storage.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_50\n\nLANGUAGE: go\nCODE:\n```\ntype formA struct {\n  Foo string `json:\"foo\" xml:\"foo\" binding:\"required\"`\n}\n\ntype formB struct {\n  Bar string `json:\"bar\" xml:\"bar\" binding:\"required\"`\n}\n\nfunc SomeHandler(c *gin.Context) {\n  objA := formA{}\n  objB := formB{}\n  // Calling c.ShouldBind consumes c.Request.Body and it cannot be reused.\n  if errA := c.ShouldBind(&objA); errA == nil {\n    c.String(http.StatusOK, `the body should be formA`)\n  // Always an error is occurred by this because c.Request.Body is EOF now.\n  } else if errB := c.ShouldBind(&objB); errB == nil {\n    c.String(http.StatusOK, `the body should be formB`)\n  } else {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Combined Query and Form Parameters in Gin\nDESCRIPTION: Example showing how to handle both query string parameters and POST form data in a single Gin handler.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nPOST /post?id=1234&page=1 HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\n\nname=manu&message=this_is_great\n```\n\n----------------------------------------\n\nTITLE: Pure JSON Response in Gin\nDESCRIPTION: Demonstrates how to send literal JSON responses without HTML character encoding using PureJSON.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_42\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  r := gin.Default()\n\n  // Serves unicode entities\n  r.GET(\"/json\", func(c *gin.Context) {\n    c.JSON(http.StatusOK, gin.H{\n      \"html\": \"<b>Hello, world!</b>\",\n    })\n  })\n\n  // Serves literal characters\n  r.GET(\"/purejson\", func(c *gin.Context) {\n    c.PureJSON(http.StatusOK, gin.H{\n      \"html\": \"<b>Hello, world!</b>\",\n    })\n  })\n\n  // listen and serve on 0.0.0.0:8080\n  r.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Combined Query and Form Parameters in Gin\nDESCRIPTION: Go implementation for handling combined query string and form parameters in a single request, with output formatting.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  router := gin.Default()\n\n  router.POST(\"/post\", func(c *gin.Context) {\n\n    id := c.Query(\"id\")\n    page := c.DefaultQuery(\"page\", \"0\")\n    name := c.PostForm(\"name\")\n    message := c.PostForm(\"message\")\n\n    fmt.Printf(\"id: %s; page: %s; name: %s; message: %s\", id, page, name, message)\n  })\n  router.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: JSONP Response Handling in Gin\nDESCRIPTION: Demonstrates how to handle JSONP requests by automatically wrapping JSON response in a callback function when the callback parameter is present in the query string.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_40\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  r := gin.Default()\n\n  r.GET(\"/JSONP\", func(c *gin.Context) {\n    data := gin.H{\n      \"foo\": \"bar\",\n    }\n\n    //callback is x\n    // Will output  :   x({\\\"foo\\\":\\\"bar\\\"})\n    c.JSONP(http.StatusOK, data)\n  })\n\n  // Listen and serve on 0.0.0.0:8080\n  r.Run(\":8080\")\n\n        // client\n        // curl http://127.0.0.1:8080/JSONP?callback=x\n}\n```\n\n----------------------------------------\n\nTITLE: Header Binding in Gin\nDESCRIPTION: Demonstrates how to bind HTTP header values to struct fields using header tags.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_35\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n\n  \"github.com/gin-gonic/gin\"\n)\n\ntype testHeader struct {\n  Rate   int    `header:\"Rate\"`\n  Domain string `header:\"Domain\"`\n}\n\nfunc main() {\n  r := gin.Default()\n  r.GET(\"/\", func(c *gin.Context) {\n    h := testHeader{}\n\n    if err := c.ShouldBindHeader(&h); err != nil {\n      c.JSON(http.StatusOK, err)\n    }\n\n    fmt.Printf(\"%#v\\n\", h)\n    c.JSON(http.StatusOK, gin.H{\"Rate\": h.Rate, \"Domain\": h.Domain})\n  })\n\n  r.Run()\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Map Parameters in Gin\nDESCRIPTION: Go implementation for processing map-like parameters from both query string and form data using QueryMap and PostFormMap methods.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  router := gin.Default()\n\n  router.POST(\"/post\", func(c *gin.Context) {\n\n    ids := c.QueryMap(\"ids\")\n    names := c.PostFormMap(\"names\")\n\n    fmt.Printf(\"ids: %v; names: %v\", ids, names)\n  })\n  router.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Log Format in Gin\nDESCRIPTION: Shows how to create a custom log format for Gin's logger middleware. The example defines a custom format function that formats log entries with client IP, timestamp, HTTP method, path, protocol, status code, latency, user agent, and error message.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  router := gin.New()\n\n  // LoggerWithFormatter middleware will write the logs to gin.DefaultWriter\n  // By default gin.DefaultWriter = os.Stdout\n  router.Use(gin.LoggerWithFormatter(func(param gin.LogFormatterParams) string {\n\n    // your custom format\n    return fmt.Sprintf(\"%s - [%s] \\\"%s %s %s %d %s \\\"%s\\\" %s\\\"\\\n\",\n        param.ClientIP,\n        param.TimeStamp.Format(time.RFC1123),\n        param.Method,\n        param.Path,\n        param.Request.Proto,\n        param.StatusCode,\n        param.Latency,\n        param.Request.UserAgent(),\n        param.ErrorMessage,\n    )\n  }))\n  router.Use(gin.Recovery())\n\n  router.GET(\"/ping\", func(c *gin.Context) {\n    c.String(http.StatusOK, \"pong\")\n  })\n\n  router.Run(\":8080\")\n}\n```\n\nLANGUAGE: sh\nCODE:\n```\n::1 - [Fri, 07 Dec 2018 17:04:38 JST] \"GET /ping HTTP/1.1 200 122.767µs \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36\" \"\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Skipping in Gin\nDESCRIPTION: Demonstrates how to configure Gin to skip logging for specific paths or based on custom logic. The example configures skipping for the '/metrics' path and for responses with status codes less than 500, showing how to reduce log verbosity for certain endpoints.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  router := gin.New()\n\n  // skip logging for desired paths by setting SkipPaths in LoggerConfig\n  loggerConfig := gin.LoggerConfig{SkipPaths: []string{\"/metrics\"}}\n\n  // skip logging based on your logic by setting Skip func in LoggerConfig\n  loggerConfig.Skip = func(c *gin.Context) bool {\n      // as an example skip non server side errors\n      return c.Writer.Status() < http.StatusInternalServerError\n  }\n\n  router.Use(gin.LoggerWithConfig(loggerConfig))\n  router.Use(gin.Recovery())\n\n  // skipped\n  router.GET(\"/metrics\", func(c *gin.Context) {\n      c.Status(http.StatusNotImplemented)\n  })\n\n  // skipped\n  router.GET(\"/ping\", func(c *gin.Context) {\n      c.String(http.StatusOK, \"pong\")\n  })\n\n  // not skipped\n  router.GET(\"/data\", func(c *gin.Context) {\n    c.Status(http.StatusNotImplemented)\n  })\n\n  router.Run(\":8080\")\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Blank Gin Instance Without Default Middleware\nDESCRIPTION: Demonstrates how to create a new Gin router instance without the default Logger and Recovery middleware. This gives developers more control over which middleware to include in their application.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nr := gin.New()\n```\n\nLANGUAGE: go\nCODE:\n```\n// Default With the Logger and Recovery middleware already attached\nr := gin.Default()\n```\n\n----------------------------------------\n\nTITLE: Custom Form Binding with Custom Tags in Gin\nDESCRIPTION: Shows how to implement custom form binding with custom struct tags. Includes complete implementation of a custom binder that uses a custom tag name.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_51\n\nLANGUAGE: go\nCODE:\n```\nconst (\n  customerTag = \"url\"\n  defaultMemory = 32 << 20\n)\n\ntype customerBinding struct {}\n\nfunc (customerBinding) Name() string {\n  return \"form\"\n}\n\nfunc (customerBinding) Bind(req *http.Request, obj any) error {\n  if err := req.ParseForm(); err != nil {\n    return err\n  }\n  if err := req.ParseMultipartForm(defaultMemory); err != nil {\n    if err != http.ErrNotMultipart {\n      return err\n    }\n  }\n  if err := binding.MapFormWithTag(obj, req.Form, customerTag); err != nil {\n    return err\n  }\n  return validate(obj)\n}\n```\n\n----------------------------------------\n\nTITLE: URI Binding with Required Validation\nDESCRIPTION: Demonstrates URI parameter binding with required field validation and UUID format checking.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_33\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"net/http\"\n\n  \"github.com/gin-gonic/gin\"\n)\n\ntype Person struct {\n  ID string `uri:\"id\" binding:\"required,uuid\"`\n  Name string `uri:\"name\" binding:\"required\"`\n}\n\nfunc main() {\n  route := gin.Default()\n  route.GET(\"/:name/:id\", func(c *gin.Context) {\n    var person Person\n    if err := c.ShouldBindUri(&person); err != nil {\n      c.JSON(http.StatusBadRequest, gin.H{\"msg\": err.Error()})\n      return\n    }\n    c.JSON(http.StatusOK, gin.H{\"name\": person.Name, \"uuid\": person.ID})\n  })\n  route.Run(\":8088\")\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Unmarshaler Implementation\nDESCRIPTION: Shows how to implement a custom unmarshaler for type conversion during binding.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_34\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"github.com/gin-gonic/gin\"\n  \"strings\"\n)\n\ntype Birthday string\n\nfunc (b *Birthday) UnmarshalParam(param string) error {\n  *b = Birthday(strings.Replace(param, \"-\", \"/\", -1))\n  return nil\n}\n\nfunc main() {\n  route := gin.Default()\n  var request struct {\n    Birthday Birthday `form:\"birthday\"`\n  }\n  route.GET(\"/test\", func(ctx *gin.Context) {\n    _ = ctx.BindQuery(&request)\n    ctx.JSON(200, request.Birthday)\n  })\n  route.Run(\":8088\")\n}\n```\n\n----------------------------------------\n\nTITLE: Default Value Binding in Gin Structs\nDESCRIPTION: Demonstrates how to bind default values to struct fields when client doesn't provide values using form tags. Includes support for different collection formats for arrays.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_31\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\ntype Person struct {\n\tName      string    `form:\"name,default=William\"`\n\tAge       int       `form:\"age,default=10\"`\n\tFriends   []string  `form:\"friends,default=Will;Bill\"`\n\tAddresses [2]string `form:\"addresses,default=foo bar\" collection_format:\"ssv\"`\n\tLapTimes  []int     `form:\"lap_times,default=1;2;3\" collection_format:\"csv\"`\n}\n\nfunc main() {\n\tg := gin.Default()\n\tg.POST(\"/person\", func(c *gin.Context) {\n\t\tvar req Person\n\t\tif err := c.ShouldBindQuery(&req); err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, err)\n\t\t\treturn\n\t\t}\n\t\tc.JSON(http.StatusOK, req)\n\t})\n\t_ = g.Run(\"localhost:8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Gin Application\nDESCRIPTION: Command to run a Go application that uses the Gin framework.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngo run example.go\n```\n\n----------------------------------------\n\nTITLE: Parameter Handling Benchmarks in Go Web Frameworks\nDESCRIPTION: Benchmark results comparing parameter handling performance across popular Go web frameworks. Tests measure operations per second, memory allocations (B/op), and allocations count (allocs/op) for different parameter scenarios including single param, 5 params, and 20 params.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/BENCHMARKS.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nBenchmarkGin_Param                    18785022          63.9 ns/op           0 B/op           0 allocs/op\n\nBenchmarkAce_Param                    14689765          81.5 ns/op           0 B/op           0 allocs/op\nBenchmarkAero_Param                   23094770          51.2 ns/op           0 B/op           0 allocs/op\nBenchmarkBear_Param                    1417045           845 ns/op         456 B/op           5 allocs/op\nBenchmarkBeego_Param                   1000000          1080 ns/op         352 B/op           3 allocs/op\nBenchmarkBone_Param                    1000000          1463 ns/op         816 B/op           6 allocs/op\nBenchmarkChi_Param                     1378756           885 ns/op         432 B/op           3 allocs/op\nBenchmarkDenco_Param                   8557899           143 ns/op          32 B/op           1 allocs/op\nBenchmarkEcho_Param                   16433347          75.5 ns/op           0 B/op           0 allocs/op\nBenchmarkGocraftWeb_Param              1000000          1218 ns/op         648 B/op           8 allocs/op\nBenchmarkGoji_Param                    1921248           617 ns/op         336 B/op           2 allocs/op\nBenchmarkGojiv2_Param                   561848          2156 ns/op        1328 B/op          11 allocs/op\nBenchmarkGoJsonRest_Param              1000000          1358 ns/op         649 B/op          13 allocs/op\nBenchmarkGoRestful_Param                224857          5307 ns/op        4192 B/op          14 allocs/op\nBenchmarkGorillaMux_Param               498313          2459 ns/op        1280 B/op          10 allocs/op\nBenchmarkGowwwRouter_Param             1864354           654 ns/op         432 B/op           3 allocs/op\nBenchmarkHttpRouter_Param             26269074          47.7 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpTreeMux_Param             2109829           557 ns/op         352 B/op           3 allocs/op\nBenchmarkKocha_Param                   5050216           243 ns/op          56 B/op           3 allocs/op\nBenchmarkLARS_Param                   19811712          59.9 ns/op           0 B/op           0 allocs/op\nBenchmarkMacaron_Param                  662746          2329 ns/op        1072 B/op          10 allocs/op\nBenchmarkMartini_Param                  279902          4260 ns/op        1072 B/op          10 allocs/op\nBenchmarkPat_Param                     1000000          1382 ns/op         536 B/op          11 allocs/op\nBenchmarkPossum_Param                  1000000          1014 ns/op         496 B/op           5 allocs/op\nBenchmarkR2router_Param                1712559           707 ns/op         432 B/op           5 allocs/op\nBenchmarkRivet_Param                   6648086           182 ns/op          48 B/op           1 allocs/op\nBenchmarkTango_Param                   1221504           994 ns/op         248 B/op           8 allocs/op\nBenchmarkTigerTonic_Param               891661          2261 ns/op         776 B/op          16 allocs/op\nBenchmarkTraffic_Param                  350059          3598 ns/op        1856 B/op          21 allocs/op\nBenchmarkVulcan_Param                  2517823           472 ns/op          98 B/op           3 allocs/op\nBenchmarkAce_Param5                    9214365           130 ns/op           0 B/op           0 allocs/op\nBenchmarkAero_Param5                  15369013          77.9 ns/op           0 B/op           0 allocs/op\nBenchmarkBear_Param5                   1000000          1113 ns/op         501 B/op           5 allocs/op\nBenchmarkBeego_Param5                  1000000          1269 ns/op         352 B/op           3 allocs/op\nBenchmarkBone_Param5                    986820          1873 ns/op         864 B/op           6 allocs/op\nBenchmarkChi_Param5                    1000000          1156 ns/op         432 B/op           3 allocs/op\nBenchmarkDenco_Param5                  3036331           400 ns/op         160 B/op           1 allocs/op\nBenchmarkEcho_Param5                   6447133           186 ns/op           0 B/op           0 allocs/op\nBenchmarkGin_Param5                   10786068           110 ns/op           0 B/op           0 allocs/op\nBenchmarkGocraftWeb_Param5              844820          1944 ns/op         920 B/op          11 allocs/op\nBenchmarkGoji_Param5                   1474965           827 ns/op         336 B/op           2 allocs/op\nBenchmarkGojiv2_Param5                  442820          2516 ns/op        1392 B/op          11 allocs/op\nBenchmarkGoJsonRest_Param5              507555          2711 ns/op        1097 B/op          16 allocs/op\nBenchmarkGoRestful_Param5               216481          6093 ns/op        4288 B/op          14 allocs/op\nBenchmarkGorillaMux_Param5              314402          3628 ns/op        1344 B/op          10 allocs/op\nBenchmarkGowwwRouter_Param5            1624660           733 ns/op         432 B/op           3 allocs/op\nBenchmarkHttpRouter_Param5            13167324          92.0 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpTreeMux_Param5            1000000          1295 ns/op         576 B/op           6 allocs/op\nBenchmarkKocha_Param5                  1000000          1138 ns/op         440 B/op          10 allocs/op\nBenchmarkLARS_Param5                  11580613           105 ns/op           0 B/op           0 allocs/op\nBenchmarkMacaron_Param5                 473596          2755 ns/op        1072 B/op          10 allocs/op\nBenchmarkMartini_Param5                 230756          5111 ns/op        1232 B/op          11 allocs/op\nBenchmarkPat_Param5                     469190          3370 ns/op         888 B/op          29 allocs/op\nBenchmarkPossum_Param5                 1000000          1002 ns/op         496 B/op           5 allocs/op\nBenchmarkR2router_Param5               1422129           844 ns/op         432 B/op           5 allocs/op\nBenchmarkRivet_Param5                  2263789           539 ns/op         240 B/op           1 allocs/op\nBenchmarkTango_Param5                  1000000          1256 ns/op         360 B/op           8 allocs/op\nBenchmarkTigerTonic_Param5              175500          7492 ns/op        2279 B/op          39 allocs/op\nBenchmarkTraffic_Param5                 233631          5816 ns/op        2208 B/op          27 allocs/op\nBenchmarkVulcan_Param5                 1923416           629 ns/op          98 B/op           3 allocs/op\nBenchmarkAce_Param20                   4321266           281 ns/op           0 B/op           0 allocs/op\nBenchmarkAero_Param20                 31501641          35.2 ns/op           0 B/op           0 allocs/op\nBenchmarkBear_Param20                   335204          3489 ns/op        1665 B/op           5 allocs/op\nBenchmarkBeego_Param20                  503674          2860 ns/op         352 B/op           3 allocs/op\nBenchmarkBone_Param20                   298922          4741 ns/op        2031 B/op           6 allocs/op\nBenchmarkChi_Param20                    878181          1957 ns/op         432 B/op           3 allocs/op\nBenchmarkDenco_Param20                 1000000          1360 ns/op         640 B/op           1 allocs/op\nBenchmarkEcho_Param20                  2104946           580 ns/op           0 B/op           0 allocs/op\nBenchmarkGin_Param20                   4167204           290 ns/op           0 B/op           0 allocs/op\nBenchmarkGocraftWeb_Param20             173064          7514 ns/op        3796 B/op          15 allocs/op\nBenchmarkGoji_Param20                   458778          2651 ns/op        1247 B/op           2 allocs/op\nBenchmarkGojiv2_Param20                 364862          3178 ns/op        1632 B/op          11 allocs/op\nBenchmarkGoJsonRest_Param20             125514          9760 ns/op        4485 B/op          20 allocs/op\nBenchmarkGoRestful_Param20              101217         11964 ns/op        6715 B/op          18 allocs/op\nBenchmarkGorillaMux_Param20             147654          8132 ns/op        3452 B/op          12 allocs/op\nBenchmarkGowwwRouter_Param20           1000000          1225 ns/op         432 B/op           3 allocs/op\nBenchmarkHttpRouter_Param20            4920895           247 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpTreeMux_Param20            173202          6605 ns/op        3196 B/op          10 allocs/op\nBenchmarkKocha_Param20                  345988          3620 ns/op        1808 B/op          27 allocs/op\nBenchmarkLARS_Param20                  4592326           262 ns/op           0 B/op           0 allocs/op\nBenchmarkMacaron_Param20                166492          7286 ns/op        2924 B/op          12 allocs/op\nBenchmarkMartini_Param20                122162         10653 ns/op        3595 B/op          13 allocs/op\nBenchmarkPat_Param20                     78630         15239 ns/op        4424 B/op          93 allocs/op\nBenchmarkPossum_Param20                1000000          1008 ns/op         496 B/op           5 allocs/op\nBenchmarkR2router_Param20               294981          4587 ns/op        2284 B/op           7 allocs/op\nBenchmarkRivet_Param20                  691798          2090 ns/op        1024 B/op           1 allocs/op\nBenchmarkTango_Param20                  842440          2505 ns/op         856 B/op           8 allocs/op\nBenchmarkTigerTonic_Param20              38614         31509 ns/op        9870 B/op         119 allocs/op\nBenchmarkTraffic_Param20                 57633         21107 ns/op        7853 B/op          47 allocs/op\nBenchmarkVulcan_Param20                1000000          1178 ns/op          98 B/op           3 allocs/op\nBenchmarkAce_ParamWrite                7330743           180 ns/op           8 B/op           1 allocs/op\nBenchmarkAero_ParamWrite              13833598          86.7 ns/op           0 B/op           0 allocs/op\nBenchmarkBear_ParamWrite               1363321           867 ns/op         456 B/op           5 allocs/op\nBenchmarkBeego_ParamWrite              1000000          1104 ns/op         360 B/op           4 allocs/op\n```\n\n----------------------------------------\n\nTITLE: HTML Checkbox Binding\nDESCRIPTION: Shows how to bind HTML form checkbox values to a slice in Go struct.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_36\n\nLANGUAGE: go\nCODE:\n```\ntype myForm struct {\n    Colors []string `form:\"colors[]\"`\n}\n\nfunc formHandler(c *gin.Context) {\n    var fakeForm myForm\n    c.ShouldBind(&fakeForm)\n    c.JSON(http.StatusOK, gin.H{\"color\": fakeForm.Colors})\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Format Binding with Time Types\nDESCRIPTION: Shows how to bind different collection formats and time types using custom form tags for formatting configuration.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_32\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"time\"\n\t\"github.com/gin-gonic/gin\"\n)\n\ntype Person struct {\n\tName       string    `form:\"name\"`\n\tAddresses  []string  `form:\"addresses\" collection_format:\"csv\"`\n\tBirthday   time.Time `form:\"birthday\" time_format:\"2006-01-02\" time_utc:\"1\"`\n\tCreateTime time.Time `form:\"createTime\" time_format:\"unixNano\"`\n\tUnixTime   time.Time `form:\"unixTime\" time_format:\"unix\"`\n}\n\nfunc main() {\n\troute := gin.Default()\n\troute.GET(\"/testing\", startPage)\n\troute.Run(\":8085\")\n}\nfunc startPage(c *gin.Context) {\n\tvar person Person\n\tif c.ShouldBind(&person) == nil {\n\t\tlog.Println(person.Name)\n\t\tlog.Println(person.Addresses)\n\t\tlog.Println(person.Birthday)\n\t\tlog.Println(person.CreateTime)\n\t\tlog.Println(person.UnixTime)\n\t}\n\tc.String(200, \"Success\")\n}\n```\n\n----------------------------------------\n\nTITLE: ASCII JSON Response in Gin\nDESCRIPTION: Shows how to generate ASCII-only JSON responses with escaped non-ASCII characters using the AsciiJSON function.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_41\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  r := gin.Default()\n\n  r.GET(\"/someJSON\", func(c *gin.Context) {\n    data := gin.H{\n      \"lang\": \"GO语言\",\n      \"tag\":  \"<br>\",\n    }\n\n    // will output : {\"lang\":\"GO\\u8bed\\u8a00\",\"tag\":\"\\u003cbr\\u003e\"}\n    c.AsciiJSON(http.StatusOK, data)\n  })\n\n  // Listen and serve on 0.0.0.0:8080\n  r.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Map Parameters in HTTP Requests with Gin\nDESCRIPTION: Example request showing how to send map-like parameters in both query string and form data formats.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nPOST /post?ids[a]=1234&ids[b]=hello HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\n\nnames[first]=thinkerou&names[second]=tianou\n```\n\n----------------------------------------\n\nTITLE: Performance Benchmarks for Static Routes in Go HTTP Routers\nDESCRIPTION: Benchmark results showing performance metrics (operations per second, nanoseconds per operation, bytes allocated per operation, and allocations per operation) for various Go HTTP routers handling static routes.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/BENCHMARKS.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nBenchmarkGin_StaticAll                   62169         19319 ns/op           0 B/op           0 allocs/op\n\nBenchmarkAce_StaticAll                   65428         18313 ns/op           0 B/op           0 allocs/op\nBenchmarkAero_StaticAll                 121132          9632 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpServeMux_StaticAll          52626         22758 ns/op           0 B/op           0 allocs/op\nBenchmarkBeego_StaticAll                  9962        179058 ns/op       55264 B/op         471 allocs/op\nBenchmarkBear_StaticAll                  14894         80966 ns/op       20272 B/op         469 allocs/op\nBenchmarkBone_StaticAll                  18718         64065 ns/op           0 B/op           0 allocs/op\nBenchmarkChi_StaticAll                   10000        149827 ns/op       67824 B/op         471 allocs/op\nBenchmarkDenco_StaticAll                211393          5680 ns/op           0 B/op           0 allocs/op\nBenchmarkEcho_StaticAll                  49341         24343 ns/op           0 B/op           0 allocs/op\nBenchmarkGocraftWeb_StaticAll            10000        126209 ns/op       46312 B/op         785 allocs/op\nBenchmarkGoji_StaticAll                  27956         43174 ns/op           0 B/op           0 allocs/op\nBenchmarkGojiv2_StaticAll                 3430        370718 ns/op      205984 B/op        1570 allocs/op\nBenchmarkGoJsonRest_StaticAll             9134        188888 ns/op       51653 B/op        1727 allocs/op\nBenchmarkGoRestful_StaticAll               706       1703330 ns/op      613280 B/op        2053 allocs/op\nBenchmarkGorillaMux_StaticAll             1268        924083 ns/op      153233 B/op        1413 allocs/op\nBenchmarkGowwwRouter_StaticAll           63374         18935 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpRouter_StaticAll           109938         10902 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpTreeMux_StaticAll          109166         10861 ns/op           0 B/op           0 allocs/op\nBenchmarkKocha_StaticAll                 92258         12992 ns/op           0 B/op           0 allocs/op\nBenchmarkLARS_StaticAll                  65200         18387 ns/op           0 B/op           0 allocs/op\nBenchmarkMacaron_StaticAll                5671        291501 ns/op      115553 B/op        1256 allocs/op\nBenchmarkMartini_StaticAll                 807       1460498 ns/op      125444 B/op        1717 allocs/op\nBenchmarkPat_StaticAll                     513       2342396 ns/op      602832 B/op       12559 allocs/op\nBenchmarkPossum_StaticAll                10000        128270 ns/op       65312 B/op         471 allocs/op\nBenchmarkR2router_StaticAll              16726         71760 ns/op       22608 B/op         628 allocs/op\nBenchmarkRivet_StaticAll                 41722         28723 ns/op           0 B/op           0 allocs/op\nBenchmarkTango_StaticAll                  7606        205082 ns/op       39209 B/op        1256 allocs/op\nBenchmarkTigerTonic_StaticAll            26247         45806 ns/op        7376 B/op         157 allocs/op\nBenchmarkTraffic_StaticAll                 550       2284518 ns/op      754864 B/op       14601 allocs/op\nBenchmarkVulcan_StaticAll                10000        131343 ns/op       15386 B/op         471 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Disabling Log Output Coloring in Gin\nDESCRIPTION: Shows how to disable color in Gin's log output. This is particularly useful when writing logs to files or when using terminals that don't support colors. The example demonstrates how to create a Gin router with colored logs disabled.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  // Disable log's color\n  gin.DisableConsoleColor()\n\n  // Creates a gin router with default middleware:\n  // logger and recovery (crash-free) middleware\n  router := gin.Default()\n\n  router.GET(\"/ping\", func(c *gin.Context) {\n      c.String(http.StatusOK, \"pong\")\n  })\n\n  router.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Log Output Coloring in Gin\nDESCRIPTION: Demonstrates how to force color in Gin's log output regardless of terminal capabilities. This example shows how to ensure logs are always colorized even when not outputting to a TTY terminal.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  // Force log's color\n  gin.ForceConsoleColor()\n\n  // Creates a gin router with default middleware:\n  // logger and recovery (crash-free) middleware\n  router := gin.Default()\n\n  router.GET(\"/ping\", func(c *gin.Context) {\n      c.String(http.StatusOK, \"pong\")\n  })\n\n  router.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Validators with curl\nDESCRIPTION: Console output demonstrating how to test custom validators in Gin using curl. It shows both successful validation and error cases for the custom bookabledate validator.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n$ curl \"localhost:8085/bookable?check_in=2030-04-16&check_out=2030-04-17\"\n{\"message\":\"Booking dates are valid!\"}\n\n$ curl \"localhost:8085/bookable?check_in=2030-03-10&check_out=2030-03-09\"\n{\"error\":\"Key: 'Booking.CheckOut' Error:Field validation for 'CheckOut' failed on the 'gtfield' tag\"}\n\n$ curl \"localhost:8085/bookable?check_in=2000-03-09&check_out=2000-03-10\"\n{\"error\":\"Key: 'Booking.CheckIn' Error:Field validation for 'CheckIn' failed on the 'bookabledate' tag\"}%\n```\n\n----------------------------------------\n\nTITLE: Building Gin with Alternative JSON Packages\nDESCRIPTION: Command-line examples for building Gin with alternative JSON packages like jsoniter, go-json, or sonic instead of the default encoding/json package.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo build -tags=jsoniter .\n```\n\nLANGUAGE: sh\nCODE:\n```\ngo build -tags=go_json .\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ go build -tags=\"sonic avx\" .\n```\n\n----------------------------------------\n\nTITLE: Parameter Write Operation Benchmarks for Multiple Go Web Frameworks\nDESCRIPTION: Benchmark results comparing various Go web frameworks' performance for parameter write operations. Metrics include operations per second, nanoseconds per operation, bytes allocated per operation, and allocations per operation. Gin shows excellent performance with 118 ns/op and 0 memory allocations.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/BENCHMARKS.md#2025-04-22_snippet_6\n\nLANGUAGE: plain text\nCODE:\n```\nBenchmarkBone_ParamWrite               1000000          1475 ns/op         816 B/op           6 allocs/op\nBenchmarkChi_ParamWrite                1320590           892 ns/op         432 B/op           3 allocs/op\nBenchmarkDenco_ParamWrite              7093605           172 ns/op          32 B/op           1 allocs/op\nBenchmarkEcho_ParamWrite               8434424           161 ns/op           8 B/op           1 allocs/op\nBenchmarkGin_ParamWrite               10377034           118 ns/op           0 B/op           0 allocs/op\nBenchmarkGocraftWeb_ParamWrite         1000000          1266 ns/op         656 B/op           9 allocs/op\nBenchmarkGoji_ParamWrite               1874168           654 ns/op         336 B/op           2 allocs/op\nBenchmarkGojiv2_ParamWrite              459032          2352 ns/op        1360 B/op          13 allocs/op\nBenchmarkGoJsonRest_ParamWrite          499434          2145 ns/op        1128 B/op          18 allocs/op\nBenchmarkGoRestful_ParamWrite           241087          5470 ns/op        4200 B/op          15 allocs/op\nBenchmarkGorillaMux_ParamWrite          425686          2522 ns/op        1280 B/op          10 allocs/op\nBenchmarkGowwwRouter_ParamWrite         922172          1778 ns/op         976 B/op           8 allocs/op\nBenchmarkHttpRouter_ParamWrite        15392049          77.7 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpTreeMux_ParamWrite        1973385           597 ns/op         352 B/op           3 allocs/op\nBenchmarkKocha_ParamWrite              4262500           281 ns/op          56 B/op           3 allocs/op\nBenchmarkLARS_ParamWrite              10764410           113 ns/op           0 B/op           0 allocs/op\nBenchmarkMacaron_ParamWrite             486769          2726 ns/op        1176 B/op          14 allocs/op\nBenchmarkMartini_ParamWrite             264804          4842 ns/op        1176 B/op          14 allocs/op\nBenchmarkPat_ParamWrite                 735116          2047 ns/op         960 B/op          15 allocs/op\nBenchmarkPossum_ParamWrite             1000000          1004 ns/op         496 B/op           5 allocs/op\nBenchmarkR2router_ParamWrite           1592136           768 ns/op         432 B/op           5 allocs/op\nBenchmarkRivet_ParamWrite              3582051           339 ns/op         112 B/op           2 allocs/op\nBenchmarkTango_ParamWrite              2237337           534 ns/op         136 B/op           4 allocs/op\nBenchmarkTigerTonic_ParamWrite          439608          3136 ns/op        1216 B/op          21 allocs/op\nBenchmarkTraffic_ParamWrite             306979          4328 ns/op        2280 B/op          25 allocs/op\nBenchmarkVulcan_ParamWrite             2529973           472 ns/op          98 B/op           3 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Testing Binding with Various Time Formats Using curl\nDESCRIPTION: A shell command showing how to test a Gin endpoint with query parameters including various time formats (ISO date, Unix timestamp, Unix milliseconds, Unix microseconds).\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X GET \"localhost:8085/testing?name=appleboy&address=xyz&birthday=1992-03-15&createTime=1562400033000000123&unixTime=1562400033&unixMilliTime=1562400033001&unixMicroTime=1562400033000012\"\n```\n\n----------------------------------------\n\nTITLE: Testing a Binding Required Field with curl\nDESCRIPTION: A shell command example demonstrating how to test a Gin endpoint with a required field, showing the error response when a required field is missing.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\n$ curl -v -X POST \\\n  http://localhost:8080/loginJSON \\\n  -H 'content-type: application/json' \\\n  -d '{ \"user\": \"manu\" }'\n> POST /loginJSON HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.51.0\n> Accept: */*\n> content-type: application/json\n> Content-Length: 18\n>\n* upload completely sent off: 18 out of 18 bytes\n< HTTP/1.1 400 Bad Request\n< Content-Type: application/json; charset=utf-8\n< Date: Fri, 04 Aug 2017 03:51:31 GMT\n< Content-Length: 100\n<\n{\"error\":\"Key: 'Login.Password' Error:Field validation for 'Password' failed on the 'required' tag\"}\n```\n\n----------------------------------------\n\nTITLE: Building Gin without MsgPack Support\nDESCRIPTION: Command-line example for building Gin without MsgPack rendering feature to reduce binary size.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo build -tags=nomsgpack .\n```\n\n----------------------------------------\n\nTITLE: Comparing Performance Benchmarks of Go Web Frameworks\nDESCRIPTION: Benchmark results comparing performance metrics across multiple Go web frameworks. Tests include static routes, parameterized routes, and combined GitHub API routes measuring nanoseconds per operation, bytes allocated per operation, and number of allocations per operation.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/BENCHMARKS.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nBenchmarkGin_GithubStatic             15629472          76.7 ns/op           0 B/op           0 allocs/op\n\nBenchmarkAce_GithubStatic             15542612          75.9 ns/op           0 B/op           0 allocs/op\nBenchmarkAero_GithubStatic            24777151          48.5 ns/op           0 B/op           0 allocs/op\nBenchmarkBear_GithubStatic             2788894           435 ns/op         120 B/op           3 allocs/op\nBenchmarkBeego_GithubStatic            1000000          1064 ns/op         352 B/op           3 allocs/op\nBenchmarkBone_GithubStatic               93507         12838 ns/op        2880 B/op          60 allocs/op\nBenchmarkChi_GithubStatic              1387743           860 ns/op         432 B/op           3 allocs/op\nBenchmarkDenco_GithubStatic           39384996          30.4 ns/op           0 B/op           0 allocs/op\nBenchmarkEcho_GithubStatic            12076382          99.1 ns/op           0 B/op           0 allocs/op\nBenchmarkGocraftWeb_GithubStatic       1596495           756 ns/op         296 B/op           5 allocs/op\nBenchmarkGoji_GithubStatic             6364876           189 ns/op           0 B/op           0 allocs/op\nBenchmarkGojiv2_GithubStatic            550202          2098 ns/op        1312 B/op          10 allocs/op\nBenchmarkGoRestful_GithubStatic         102183         12552 ns/op        4256 B/op          13 allocs/op\nBenchmarkGoJsonRest_GithubStatic       1000000          1029 ns/op         329 B/op          11 allocs/op\nBenchmarkGorillaMux_GithubStatic        255552          5190 ns/op         976 B/op           9 allocs/op\nBenchmarkGowwwRouter_GithubStatic     15531916          77.1 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpRouter_GithubStatic      27920724          43.1 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpTreeMux_GithubStatic     21448953          55.8 ns/op           0 B/op           0 allocs/op\nBenchmarkKocha_GithubStatic           21405310          56.0 ns/op           0 B/op           0 allocs/op\nBenchmarkLARS_GithubStatic            13625156          89.0 ns/op           0 B/op           0 allocs/op\nBenchmarkMacaron_GithubStatic          1000000          1747 ns/op         736 B/op           8 allocs/op\nBenchmarkMartini_GithubStatic           187186          7326 ns/op         768 B/op           9 allocs/op\nBenchmarkPat_GithubStatic               109143         11563 ns/op        3648 B/op          76 allocs/op\nBenchmarkPossum_GithubStatic           1575898           770 ns/op         416 B/op           3 allocs/op\nBenchmarkR2router_GithubStatic         3046231           404 ns/op         144 B/op           4 allocs/op\nBenchmarkRivet_GithubStatic           11484826           105 ns/op           0 B/op           0 allocs/op\nBenchmarkTango_GithubStatic            1000000          1153 ns/op         248 B/op           8 allocs/op\nBenchmarkTigerTonic_GithubStatic       4929780           249 ns/op          48 B/op           1 allocs/op\nBenchmarkTraffic_GithubStatic           106351         11819 ns/op        4664 B/op          90 allocs/op\nBenchmarkVulcan_GithubStatic           1613271           722 ns/op          98 B/op           3 allocs/op\nBenchmarkAce_GithubParam               8386032           143 ns/op           0 B/op           0 allocs/op\nBenchmarkAero_GithubParam             11816200           102 ns/op           0 B/op           0 allocs/op\nBenchmarkBear_GithubParam              1000000          1012 ns/op         496 B/op           5 allocs/op\nBenchmarkBeego_GithubParam             1000000          1157 ns/op         352 B/op           3 allocs/op\nBenchmarkBone_GithubParam               184653          6912 ns/op        1888 B/op          19 allocs/op\nBenchmarkChi_GithubParam               1000000          1102 ns/op         432 B/op           3 allocs/op\nBenchmarkDenco_GithubParam             3484798           352 ns/op         128 B/op           1 allocs/op\nBenchmarkEcho_GithubParam              6337380           189 ns/op           0 B/op           0 allocs/op\nBenchmarkGin_GithubParam               9132032           131 ns/op           0 B/op           0 allocs/op\nBenchmarkGocraftWeb_GithubParam        1000000          1446 ns/op         712 B/op           9 allocs/op\nBenchmarkGoji_GithubParam              1248640           977 ns/op         336 B/op           2 allocs/op\nBenchmarkGojiv2_GithubParam             383233          2784 ns/op        1408 B/op          13 allocs/op\nBenchmarkGoJsonRest_GithubParam        1000000          1991 ns/op         713 B/op          14 allocs/op\nBenchmarkGoRestful_GithubParam           76414         16015 ns/op        4352 B/op          16 allocs/op\nBenchmarkGorillaMux_GithubParam         150026          7663 ns/op        1296 B/op          10 allocs/op\nBenchmarkGowwwRouter_GithubParam       1592044           751 ns/op         432 B/op           3 allocs/op\nBenchmarkHttpRouter_GithubParam       10420628           115 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpTreeMux_GithubParam       1403755           835 ns/op         384 B/op           4 allocs/op\nBenchmarkKocha_GithubParam             2286170           533 ns/op         128 B/op           5 allocs/op\nBenchmarkLARS_GithubParam              9540374           129 ns/op           0 B/op           0 allocs/op\nBenchmarkMacaron_GithubParam            533154          2742 ns/op        1072 B/op          10 allocs/op\nBenchmarkMartini_GithubParam            119397          9638 ns/op        1152 B/op          11 allocs/op\nBenchmarkPat_GithubParam                150675          8858 ns/op        2408 B/op          48 allocs/op\nBenchmarkPossum_GithubParam            1000000          1001 ns/op         496 B/op           5 allocs/op\nBenchmarkR2router_GithubParam          1602886           761 ns/op         432 B/op           5 allocs/op\nBenchmarkRivet_GithubParam             2986579           409 ns/op          96 B/op           1 allocs/op\nBenchmarkTango_GithubParam             1000000          1356 ns/op         344 B/op           8 allocs/op\nBenchmarkTigerTonic_GithubParam         388899          3429 ns/op        1176 B/op          22 allocs/op\nBenchmarkTraffic_GithubParam            123160          9734 ns/op        2816 B/op          40 allocs/op\nBenchmarkVulcan_GithubParam            1000000          1138 ns/op          98 B/op           3 allocs/op\nBenchmarkAce_GithubAll                   40543         29670 ns/op           0 B/op           0 allocs/op\nBenchmarkAero_GithubAll                  57632         20648 ns/op           0 B/op           0 allocs/op\nBenchmarkBear_GithubAll                   9234        216179 ns/op       86448 B/op         943 allocs/op\nBenchmarkBeego_GithubAll                  7407        243496 ns/op       71456 B/op         609 allocs/op\nBenchmarkBone_GithubAll                    420       2922835 ns/op      720160 B/op        8620 allocs/op\nBenchmarkChi_GithubAll                    7620        238331 ns/op       87696 B/op         609 allocs/op\nBenchmarkDenco_GithubAll                 18355         64494 ns/op       20224 B/op         167 allocs/op\nBenchmarkEcho_GithubAll                  31251         38479 ns/op           0 B/op           0 allocs/op\nBenchmarkGin_GithubAll                   43550         27364 ns/op           0 B/op           0 allocs/op\nBenchmarkGocraftWeb_GithubAll             4117        300062 ns/op      131656 B/op        1686 allocs/op\nBenchmarkGoji_GithubAll                   3274        416158 ns/op       56112 B/op         334 allocs/op\nBenchmarkGojiv2_GithubAll                 1402        870518 ns/op      352720 B/op        4321 allocs/op\nBenchmarkGoJsonRest_GithubAll             2976        401507 ns/op      134371 B/op        2737 allocs/op\nBenchmarkGoRestful_GithubAll               410       2913158 ns/op      910144 B/op        2938 allocs/op\nBenchmarkGorillaMux_GithubAll              346       3384987 ns/op      251650 B/op        1994 allocs/op\nBenchmarkGowwwRouter_GithubAll           10000        143025 ns/op       72144 B/op         501 allocs/op\nBenchmarkHttpRouter_GithubAll            55938         21360 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpTreeMux_GithubAll           10000        153944 ns/op       65856 B/op         671 allocs/op\nBenchmarkKocha_GithubAll                 10000        106315 ns/op       23304 B/op         843 allocs/op\nBenchmarkLARS_GithubAll                  47779         25084 ns/op           0 B/op           0 allocs/op\nBenchmarkMacaron_GithubAll                3266        371907 ns/op      149409 B/op        1624 allocs/op\nBenchmarkMartini_GithubAll                 331       3444706 ns/op      226551 B/op        2325 allocs/op\nBenchmarkPat_GithubAll                     273       4381818 ns/op     1483152 B/op       26963 allocs/op\nBenchmarkPossum_GithubAll                10000        164367 ns/op       84448 B/op         609 allocs/op\nBenchmarkR2router_GithubAll              10000        160220 ns/op       77328 B/op         979 allocs/op\nBenchmarkRivet_GithubAll                 14625         82453 ns/op       16272 B/op         167 allocs/op\nBenchmarkTango_GithubAll                  6255        279611 ns/op       63826 B/op        1618 allocs/op\nBenchmarkTigerTonic_GithubAll             2008        687874 ns/op      193856 B/op        4474 allocs/op\nBenchmarkTraffic_GithubAll                 355       3478508 ns/op      820744 B/op       14114 allocs/op\nBenchmarkVulcan_GithubAll                 6885        193333 ns/op       19894 B/op         609 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Parse Operations in Go Web Frameworks\nDESCRIPTION: This code snippet contains benchmark results for various Go web frameworks, including Gin, Ace, Aero, Bear, and many others. The benchmarks measure performance in parsing static routes, single parameters, two parameters, and all routes.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/BENCHMARKS.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nBenchmarkGin_ParseStatic              18877833          63.5 ns/op           0 B/op           0 allocs/op\n\nBenchmarkAce_ParseStatic              19663731          60.8 ns/op           0 B/op           0 allocs/op\nBenchmarkAero_ParseStatic             28967341          41.5 ns/op           0 B/op           0 allocs/op\nBenchmarkBear_ParseStatic              3006984           402 ns/op         120 B/op           3 allocs/op\nBenchmarkBeego_ParseStatic             1000000          1031 ns/op         352 B/op           3 allocs/op\nBenchmarkBone_ParseStatic              1782482           675 ns/op         144 B/op           3 allocs/op\nBenchmarkChi_ParseStatic               1453261           819 ns/op         432 B/op           3 allocs/op\nBenchmarkDenco_ParseStatic            45023595          26.5 ns/op           0 B/op           0 allocs/op\nBenchmarkEcho_ParseStatic             17330470          69.3 ns/op           0 B/op           0 allocs/op\nBenchmarkGocraftWeb_ParseStatic        1644006           731 ns/op         296 B/op           5 allocs/op\nBenchmarkGoji_ParseStatic              7026930           170 ns/op           0 B/op           0 allocs/op\nBenchmarkGojiv2_ParseStatic             517618          2037 ns/op        1312 B/op          10 allocs/op\nBenchmarkGoJsonRest_ParseStatic        1227080           975 ns/op         329 B/op          11 allocs/op\nBenchmarkGoRestful_ParseStatic          192458          6659 ns/op        4256 B/op          13 allocs/op\nBenchmarkGorillaMux_ParseStatic         744062          2109 ns/op         976 B/op           9 allocs/op\nBenchmarkGowwwRouter_ParseStatic      37781062          31.8 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpRouter_ParseStatic       45311223          26.5 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpTreeMux_ParseStatic      21383475          56.1 ns/op           0 B/op           0 allocs/op\nBenchmarkKocha_ParseStatic            29953290          40.1 ns/op           0 B/op           0 allocs/op\nBenchmarkLARS_ParseStatic             20036196          62.7 ns/op           0 B/op           0 allocs/op\nBenchmarkMacaron_ParseStatic           1000000          1740 ns/op         736 B/op           8 allocs/op\nBenchmarkMartini_ParseStatic            404156          3801 ns/op         768 B/op           9 allocs/op\nBenchmarkPat_ParseStatic               1547180           772 ns/op         240 B/op           5 allocs/op\nBenchmarkPossum_ParseStatic            1608991           757 ns/op         416 B/op           3 allocs/op\nBenchmarkR2router_ParseStatic          3177936           385 ns/op         144 B/op           4 allocs/op\nBenchmarkRivet_ParseStatic            17783205          67.4 ns/op           0 B/op           0 allocs/op\nBenchmarkTango_ParseStatic             1210777           990 ns/op         248 B/op           8 allocs/op\nBenchmarkTigerTonic_ParseStatic        5316440           231 ns/op          48 B/op           1 allocs/op\nBenchmarkTraffic_ParseStatic            496050          2539 ns/op        1256 B/op          19 allocs/op\nBenchmarkVulcan_ParseStatic            2462798           488 ns/op          98 B/op           3 allocs/op\nBenchmarkAce_ParseParam               13393669          89.6 ns/op           0 B/op           0 allocs/op\nBenchmarkAero_ParseParam              19836619          60.4 ns/op           0 B/op           0 allocs/op\nBenchmarkBear_ParseParam               1405954           864 ns/op         467 B/op           5 allocs/op\nBenchmarkBeego_ParseParam              1000000          1065 ns/op         352 B/op           3 allocs/op\nBenchmarkBone_ParseParam               1000000          1698 ns/op         896 B/op           7 allocs/op\nBenchmarkChi_ParseParam                1356037           873 ns/op         432 B/op           3 allocs/op\nBenchmarkDenco_ParseParam              6241392           204 ns/op          64 B/op           1 allocs/op\nBenchmarkEcho_ParseParam              14088100          85.1 ns/op           0 B/op           0 allocs/op\nBenchmarkGin_ParseParam               17426064          68.9 ns/op           0 B/op           0 allocs/op\nBenchmarkGocraftWeb_ParseParam         1000000          1254 ns/op         664 B/op           8 allocs/op\nBenchmarkGoji_ParseParam               1682574           713 ns/op         336 B/op           2 allocs/op\nBenchmarkGojiv2_ParseParam              502224          2333 ns/op        1360 B/op          12 allocs/op\nBenchmarkGoJsonRest_ParseParam         1000000          1401 ns/op         649 B/op          13 allocs/op\nBenchmarkGoRestful_ParseParam           182623          7097 ns/op        4576 B/op          14 allocs/op\nBenchmarkGorillaMux_ParseParam          482332          2477 ns/op        1280 B/op          10 allocs/op\nBenchmarkGowwwRouter_ParseParam        1834873           657 ns/op         432 B/op           3 allocs/op\nBenchmarkHttpRouter_ParseParam        23593393          51.0 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpTreeMux_ParseParam        2100160           574 ns/op         352 B/op           3 allocs/op\nBenchmarkKocha_ParseParam              4837220           252 ns/op          56 B/op           3 allocs/op\nBenchmarkLARS_ParseParam              18411192          66.2 ns/op           0 B/op           0 allocs/op\nBenchmarkMacaron_ParseParam             571870          2398 ns/op        1072 B/op          10 allocs/op\nBenchmarkMartini_ParseParam             286262          4268 ns/op        1072 B/op          10 allocs/op\nBenchmarkPat_ParseParam                 692906          2157 ns/op         992 B/op          15 allocs/op\nBenchmarkPossum_ParseParam             1000000          1011 ns/op         496 B/op           5 allocs/op\nBenchmarkR2router_ParseParam           1722735           697 ns/op         432 B/op           5 allocs/op\nBenchmarkRivet_ParseParam              6058054           203 ns/op          48 B/op           1 allocs/op\nBenchmarkTango_ParseParam              1000000          1061 ns/op         280 B/op           8 allocs/op\nBenchmarkTigerTonic_ParseParam          890275          2277 ns/op         784 B/op          15 allocs/op\nBenchmarkTraffic_ParseParam             351322          3543 ns/op        1896 B/op          21 allocs/op\nBenchmarkVulcan_ParseParam             2076544           572 ns/op          98 B/op           3 allocs/op\nBenchmarkAce_Parse2Params             11718074           101 ns/op           0 B/op           0 allocs/op\nBenchmarkAero_Parse2Params            16264988          73.4 ns/op           0 B/op           0 allocs/op\nBenchmarkBear_Parse2Params             1238322           973 ns/op         496 B/op           5 allocs/op\nBenchmarkBeego_Parse2Params            1000000          1120 ns/op         352 B/op           3 allocs/op\nBenchmarkBone_Parse2Params             1000000          1632 ns/op         848 B/op           6 allocs/op\nBenchmarkChi_Parse2Params              1239477           955 ns/op         432 B/op           3 allocs/op\nBenchmarkDenco_Parse2Params            4944133           245 ns/op          64 B/op           1 allocs/op\nBenchmarkEcho_Parse2Params            10518286           114 ns/op           0 B/op           0 allocs/op\nBenchmarkGin_Parse2Params             14505195          82.7 ns/op           0 B/op           0 allocs/op\nBenchmarkGocraftWeb_Parse2Params       1000000          1437 ns/op         712 B/op           9 allocs/op\nBenchmarkGoji_Parse2Params             1689883           707 ns/op         336 B/op           2 allocs/op\nBenchmarkGojiv2_Parse2Params            502334          2308 ns/op        1344 B/op          11 allocs/op\nBenchmarkGoJsonRest_Parse2Params       1000000          1771 ns/op         713 B/op          14 allocs/op\nBenchmarkGoRestful_Parse2Params         159092          7583 ns/op        4928 B/op          14 allocs/op\nBenchmarkGorillaMux_Parse2Params        417548          2980 ns/op        1296 B/op          10 allocs/op\nBenchmarkGowwwRouter_Parse2Params      1751737           686 ns/op         432 B/op           3 allocs/op\nBenchmarkHttpRouter_Parse2Params      18089204          66.3 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpTreeMux_Parse2Params      1556986           777 ns/op         384 B/op           4 allocs/op\nBenchmarkKocha_Parse2Params            2493082           485 ns/op         128 B/op           5 allocs/op\nBenchmarkLARS_Parse2Params            15350108          78.5 ns/op           0 B/op           0 allocs/op\nBenchmarkMacaron_Parse2Params           530974          2605 ns/op        1072 B/op          10 allocs/op\nBenchmarkMartini_Parse2Params           247069          4673 ns/op        1152 B/op          11 allocs/op\nBenchmarkPat_Parse2Params               816295          2126 ns/op         752 B/op          16 allocs/op\nBenchmarkPossum_Parse2Params           1000000          1002 ns/op         496 B/op           5 allocs/op\nBenchmarkR2router_Parse2Params         1569771           733 ns/op         432 B/op           5 allocs/op\nBenchmarkRivet_Parse2Params            4080546           295 ns/op          96 B/op           1 allocs/op\nBenchmarkTango_Parse2Params            1000000          1121 ns/op         312 B/op           8 allocs/op\nBenchmarkTigerTonic_Parse2Params        399556          3470 ns/op        1168 B/op          22 allocs/op\nBenchmarkTraffic_Parse2Params           314194          4159 ns/op        1944 B/op          22 allocs/op\nBenchmarkVulcan_Parse2Params           1827559           664 ns/op          98 B/op           3 allocs/op\nBenchmarkAce_ParseAll                   478395          2503 ns/op           0 B/op           0 allocs/op\nBenchmarkAero_ParseAll                  715392          1658 ns/op           0 B/op           0 allocs/op\nBenchmarkBear_ParseAll                   59191         20124 ns/op        8928 B/op         110 allocs/op\nBenchmarkBeego_ParseAll                  45507         27266 ns/op        9152 B/op          78 allocs/op\n```\n\n----------------------------------------\n\nTITLE: File Upload cURL Example for Gin\nDESCRIPTION: Example cURL command to test file upload functionality in a Gin application, specifying the file path and content type.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8080/upload \\\n  -F \"file=@/Users/appleboy/test.zip\" \\\n  -H \"Content-Type: multipart/form-data\"\n```\n\n----------------------------------------\n\nTITLE: Output from Combined Query and Form Parameters Example\nDESCRIPTION: Example output from the combined query and form parameters handler showing how the parameters are processed.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nid: 1234; page: 1; name: manu; message: this_is_great\n```\n\n----------------------------------------\n\nTITLE: Output from Map Parameters Example\nDESCRIPTION: Example output from the map parameters handler showing how the map-like parameters are processed and formatted.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/docs/doc.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nids: map[b:hello a:1234]; names: map[second:tianou first:thinkerou]\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Parsing Performance for Web Frameworks in Go\nDESCRIPTION: This code snippet shows benchmark results for parsing operations across multiple web frameworks. It includes metrics for operations per second, time per operation, and memory allocation. The results highlight performance differences between frameworks like Gin, Echo, HttpRouter, and others.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/BENCHMARKS.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nBenchmarkBone_ParseAll                   29328         41459 ns/op       16208 B/op         147 allocs/op\nBenchmarkChi_ParseAll                    48531         25053 ns/op       11232 B/op          78 allocs/op\nBenchmarkDenco_ParseAll                 325532          4284 ns/op         928 B/op          16 allocs/op\nBenchmarkEcho_ParseAll                  433771          2759 ns/op           0 B/op           0 allocs/op\nBenchmarkGin_ParseAll                   576316          2082 ns/op           0 B/op           0 allocs/op\nBenchmarkGocraftWeb_ParseAll             41500         29692 ns/op       13728 B/op         181 allocs/op\nBenchmarkGoji_ParseAll                   80833         15563 ns/op        5376 B/op          32 allocs/op\nBenchmarkGojiv2_ParseAll                 19836         60335 ns/op       34448 B/op         277 allocs/op\nBenchmarkGoJsonRest_ParseAll             32210         38027 ns/op       13866 B/op         321 allocs/op\nBenchmarkGoRestful_ParseAll               6644        190842 ns/op      117600 B/op         354 allocs/op\nBenchmarkGorillaMux_ParseAll             12634         95894 ns/op       30288 B/op         250 allocs/op\nBenchmarkGowwwRouter_ParseAll            98152         12159 ns/op        6912 B/op          48 allocs/op\nBenchmarkHttpRouter_ParseAll            933208          1273 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpTreeMux_ParseAll           107191         11554 ns/op        5728 B/op          51 allocs/op\nBenchmarkKocha_ParseAll                 184862          6225 ns/op        1112 B/op          54 allocs/op\nBenchmarkLARS_ParseAll                  644546          1858 ns/op           0 B/op           0 allocs/op\nBenchmarkMacaron_ParseAll                26145         46484 ns/op       19136 B/op         208 allocs/op\nBenchmarkMartini_ParseAll                10000        121838 ns/op       25072 B/op         253 allocs/op\nBenchmarkPat_ParseAll                    25417         47196 ns/op       15216 B/op         308 allocs/op\nBenchmarkPossum_ParseAll                 58550         20735 ns/op       10816 B/op          78 allocs/op\nBenchmarkR2router_ParseAll               72732         16584 ns/op        8352 B/op         120 allocs/op\nBenchmarkRivet_ParseAll                 281365          4968 ns/op         912 B/op          16 allocs/op\nBenchmarkTango_ParseAll                  42831         28668 ns/op        7168 B/op         208 allocs/op\nBenchmarkTigerTonic_ParseAll             23774         49972 ns/op       16048 B/op         332 allocs/op\nBenchmarkTraffic_ParseAll                10000        104679 ns/op       45520 B/op         605 allocs/op\nBenchmarkVulcan_ParseAll                 64810         18108 ns/op        2548 B/op          78 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Memory Usage Comparison for GithubAPI Routes in Go HTTP Routers\nDESCRIPTION: Displays memory usage in bytes for various Go HTTP routers when handling 203 GithubAPI routes. The comparison shows how different routers allocate memory for a realistic API scenario.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/BENCHMARKS.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nGin: 58512 Bytes\n\nAce: 48688 Bytes\nAero: 318568 Bytes\nBear: 84248 Bytes\nBeego: 150936 Bytes\nBone: 100976 Bytes\nChi: 95112 Bytes\nDenco: 36736 Bytes\nEcho: 100296 Bytes\nGocraftWeb: 95432 Bytes\nGoji: 49680 Bytes\nGojiv2: 104704 Bytes\nGoJsonRest: 141976 Bytes\nGoRestful: 1241656 Bytes\nGorillaMux: 1322784 Bytes\nGowwwRouter: 80008 Bytes\nHttpRouter: 37144 Bytes\nHttpTreeMux: 78800 Bytes\nKocha: 785120 Bytes\nLARS: 48600 Bytes\nMacaron: 92784 Bytes\nMartini: 485264 Bytes\nPat: 21200 Bytes\nPossum: 85312 Bytes\nR2router: 47104 Bytes\nRivet: 42840 Bytes\nTango: 54840 Bytes\nTigerTonic: 95264 Bytes\nTraffic: 921744 Bytes\nVulcan: 425992 Bytes\n```\n\n----------------------------------------\n\nTITLE: Memory Usage Comparison for Static Routes in Go HTTP Routers\nDESCRIPTION: Displays memory usage in bytes for various Go HTTP routers when handling 157 static routes. The comparison includes Gin and 30 other routers.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/BENCHMARKS.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nGin: 34936 Bytes\n\nHttpServeMux: 14512 Bytes\nAce: 30680 Bytes\nAero: 34536 Bytes\nBear: 30456 Bytes\nBeego: 98456 Bytes\nBone: 40224 Bytes\nChi: 83608 Bytes\nDenco: 10216 Bytes\nEcho: 80328 Bytes\nGocraftWeb: 55288 Bytes\nGoji: 29744 Bytes\nGojiv2: 105840 Bytes\nGoJsonRest: 137496 Bytes\nGoRestful: 816936 Bytes\nGorillaMux: 585632 Bytes\nGowwwRouter: 24968 Bytes\nHttpRouter: 21712 Bytes\nHttpTreeMux: 73448 Bytes\nKocha: 115472 Bytes\nLARS: 30640 Bytes\nMacaron: 38592 Bytes\nMartini: 310864 Bytes\nPat: 19696 Bytes\nPossum: 89920 Bytes\nR2router: 23712 Bytes\nRivet: 24608 Bytes\nTango: 28264 Bytes\nTigerTonic: 78768 Bytes\nTraffic: 538976 Bytes\nVulcan: 369960 Bytes\n```\n\n----------------------------------------\n\nTITLE: Memory Usage Comparison for ParseAPI Routes in Go HTTP Routers\nDESCRIPTION: Displays memory usage in bytes for various Go HTTP routers when handling 26 ParseAPI routes. This comparison shows how different routers handle an intermediate number of routes.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/BENCHMARKS.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nGin: 7776 Bytes\n\nAce: 6704 Bytes\nAero: 28488 Bytes\nBear: 12320 Bytes\nBeego: 19280 Bytes\nBone: 11440 Bytes\nChi: 9744 Bytes\nDenco: 4192 Bytes\nEcho: 11664 Bytes\nGocraftWeb: 12800 Bytes\nGoji: 5680 Bytes\nGojiv2: 14464 Bytes\nGoJsonRest: 14072 Bytes\nGoRestful: 116264 Bytes\nGorillaMux: 105880 Bytes\nGowwwRouter: 9344 Bytes\nHttpRouter: 5072 Bytes\nHttpTreeMux: 7848 Bytes\nKocha: 181712 Bytes\nLARS: 6632 Bytes\nMacaron: 13648 Bytes\nMartini: 45888 Bytes\nPat: 2560 Bytes\nPossum: 9200 Bytes\nR2router: 7056 Bytes\nRivet: 5680 Bytes\nTango: 8920 Bytes\nTigerTonic: 9840 Bytes\nTraffic: 79096 Bytes\nVulcan: 44504 Bytes\n```\n\n----------------------------------------\n\nTITLE: Installing Gin with go get\nDESCRIPTION: Command to install the Gin framework using Go's package manager.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/gin-gonic/gin\n```\n\n----------------------------------------\n\nTITLE: Memory Usage Comparison for GPlusAPI Routes in Go HTTP Routers\nDESCRIPTION: Displays memory usage in bytes for various Go HTTP routers when handling 13 GPlusAPI routes. This benchmark shows memory requirements for smaller API implementations.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/BENCHMARKS.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nGin: 4384 Bytes\n\nAce: 3712 Bytes\nAero: 26056 Bytes\nBear: 7112 Bytes\nBeego: 10272 Bytes\nBone: 6688 Bytes\nChi: 8024 Bytes\nDenco: 3264 Bytes\nEcho: 9688 Bytes\nGocraftWeb: 7496 Bytes\nGoji: 3152 Bytes\nGojiv2: 7376 Bytes\nGoJsonRest: 11400 Bytes\nGoRestful: 74328 Bytes\nGorillaMux: 66208 Bytes\nGowwwRouter: 5744 Bytes\nHttpRouter: 2808 Bytes\nHttpTreeMux: 7440 Bytes\nKocha: 128880 Bytes\nLARS: 3656 Bytes\nMacaron: 8656 Bytes\nMartini: 23920 Bytes\nPat: 1856 Bytes\nPossum: 7248 Bytes\nR2router: 3928 Bytes\nRivet: 3064 Bytes\nTango: 5168 Bytes\nTigerTonic: 9408 Bytes\nTraffic: 46400 Bytes\nVulcan: 25544 Bytes\n```\n\n----------------------------------------\n\nTITLE: Running Go Benchmarks for Web Framework Routing Performance\nDESCRIPTION: This code snippet shows the output of running Go benchmarks to compare the performance of various Go web frameworks for different routing scenarios. It includes metrics like operations per second, bytes allocated, and number of allocations.\nSOURCE: https://github.com/gin-gonic/gin/blob/master/BENCHMARKS.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nBenchmarkGin_GPlusStatic              19247326          62.2 ns/op           0 B/op           0 allocs/op\n\nBenchmarkAce_GPlusStatic              20235060          59.2 ns/op           0 B/op           0 allocs/op\nBenchmarkAero_GPlusStatic             31978935          37.6 ns/op           0 B/op           0 allocs/op\nBenchmarkBear_GPlusStatic              3516523           341 ns/op         104 B/op           3 allocs/op\nBenchmarkBeego_GPlusStatic             1212036           991 ns/op         352 B/op           3 allocs/op\nBenchmarkBone_GPlusStatic              6736242           183 ns/op          32 B/op           1 allocs/op\nBenchmarkChi_GPlusStatic               1490640           814 ns/op         432 B/op           3 allocs/op\nBenchmarkDenco_GPlusStatic            55006856          21.8 ns/op           0 B/op           0 allocs/op\nBenchmarkEcho_GPlusStatic             17688258          67.9 ns/op           0 B/op           0 allocs/op\nBenchmarkGocraftWeb_GPlusStatic        1829181           666 ns/op         280 B/op           5 allocs/op\nBenchmarkGoji_GPlusStatic              9147451           130 ns/op           0 B/op           0 allocs/op\nBenchmarkGojiv2_GPlusStatic             594015          2063 ns/op        1312 B/op          10 allocs/op\nBenchmarkGoJsonRest_GPlusStatic        1264906           950 ns/op         329 B/op          11 allocs/op\nBenchmarkGoRestful_GPlusStatic          231558          5341 ns/op        3872 B/op          13 allocs/op\nBenchmarkGorillaMux_GPlusStatic         908418          1809 ns/op         976 B/op           9 allocs/op\nBenchmarkGowwwRouter_GPlusStatic      40684604          29.5 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpRouter_GPlusStatic       46742804          25.7 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpTreeMux_GPlusStatic      32567161          36.9 ns/op           0 B/op           0 allocs/op\nBenchmarkKocha_GPlusStatic            33800060          35.3 ns/op           0 B/op           0 allocs/op\nBenchmarkLARS_GPlusStatic             20431858          60.0 ns/op           0 B/op           0 allocs/op\nBenchmarkMacaron_GPlusStatic           1000000          1745 ns/op         736 B/op           8 allocs/op\nBenchmarkMartini_GPlusStatic            442248          3619 ns/op         768 B/op           9 allocs/op\nBenchmarkPat_GPlusStatic               4328004           292 ns/op          96 B/op           2 allocs/op\nBenchmarkPossum_GPlusStatic            1570753           763 ns/op         416 B/op           3 allocs/op\nBenchmarkR2router_GPlusStatic          3339474           355 ns/op         144 B/op           4 allocs/op\nBenchmarkRivet_GPlusStatic            18570961          64.7 ns/op           0 B/op           0 allocs/op\nBenchmarkTango_GPlusStatic             1388702           860 ns/op         200 B/op           8 allocs/op\nBenchmarkTigerTonic_GPlusStatic        7803543           159 ns/op          32 B/op           1 allocs/op\nBenchmarkTraffic_GPlusStatic            878605          2171 ns/op        1112 B/op          16 allocs/op\nBenchmarkVulcan_GPlusStatic            2742446           437 ns/op          98 B/op           3 allocs/op\nBenchmarkAce_GPlusParam               11626975           105 ns/op           0 B/op           0 allocs/op\nBenchmarkAero_GPlusParam              16914322          71.6 ns/op           0 B/op           0 allocs/op\nBenchmarkBear_GPlusParam               1405173           832 ns/op         480 B/op           5 allocs/op\nBenchmarkBeego_GPlusParam              1000000          1075 ns/op         352 B/op           3 allocs/op\nBenchmarkBone_GPlusParam               1000000          1557 ns/op         816 B/op           6 allocs/op\nBenchmarkChi_GPlusParam                1347926           894 ns/op         432 B/op           3 allocs/op\nBenchmarkDenco_GPlusParam              5513000           212 ns/op          64 B/op           1 allocs/op\nBenchmarkEcho_GPlusParam              11884383           101 ns/op           0 B/op           0 allocs/op\nBenchmarkGin_GPlusParam               12898952          93.1 ns/op           0 B/op           0 allocs/op\nBenchmarkGocraftWeb_GPlusParam         1000000          1194 ns/op         648 B/op           8 allocs/op\nBenchmarkGoji_GPlusParam               1857229           645 ns/op         336 B/op           2 allocs/op\nBenchmarkGojiv2_GPlusParam              520939          2322 ns/op        1328 B/op          11 allocs/op\nBenchmarkGoJsonRest_GPlusParam         1000000          1536 ns/op         649 B/op          13 allocs/op\nBenchmarkGoRestful_GPlusParam           205449          5800 ns/op        4192 B/op          14 allocs/op\nBenchmarkGorillaMux_GPlusParam          395310          3188 ns/op        1280 B/op          10 allocs/op\nBenchmarkGowwwRouter_GPlusParam        1851798           667 ns/op         432 B/op           3 allocs/op\nBenchmarkHttpRouter_GPlusParam        18420789          65.2 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpTreeMux_GPlusParam        1878463           629 ns/op         352 B/op           3 allocs/op\nBenchmarkKocha_GPlusParam              4495610           273 ns/op          56 B/op           3 allocs/op\nBenchmarkLARS_GPlusParam              14615976          83.2 ns/op           0 B/op           0 allocs/op\nBenchmarkMacaron_GPlusParam             584145          2549 ns/op        1072 B/op          10 allocs/op\nBenchmarkMartini_GPlusParam             250501          4583 ns/op        1072 B/op          10 allocs/op\nBenchmarkPat_GPlusParam                1000000          1645 ns/op         576 B/op          11 allocs/op\nBenchmarkPossum_GPlusParam             1000000          1008 ns/op         496 B/op           5 allocs/op\nBenchmarkR2router_GPlusParam           1708191           688 ns/op         432 B/op           5 allocs/op\nBenchmarkRivet_GPlusParam              5795014           211 ns/op          48 B/op           1 allocs/op\nBenchmarkTango_GPlusParam              1000000          1091 ns/op         264 B/op           8 allocs/op\nBenchmarkTigerTonic_GPlusParam          760221          2489 ns/op         856 B/op          16 allocs/op\nBenchmarkTraffic_GPlusParam             309774          4039 ns/op        1872 B/op          21 allocs/op\nBenchmarkVulcan_GPlusParam             1935730           623 ns/op          98 B/op           3 allocs/op\nBenchmarkAce_GPlus2Params              9158314           134 ns/op           0 B/op           0 allocs/op\nBenchmarkAero_GPlus2Params            11300517           107 ns/op           0 B/op           0 allocs/op\nBenchmarkBear_GPlus2Params             1239238           961 ns/op         496 B/op           5 allocs/op\nBenchmarkBeego_GPlus2Params            1000000          1202 ns/op         352 B/op           3 allocs/op\nBenchmarkBone_GPlus2Params              335576          3725 ns/op        1168 B/op          10 allocs/op\nBenchmarkChi_GPlus2Params              1000000          1014 ns/op         432 B/op           3 allocs/op\nBenchmarkDenco_GPlus2Params            4394598           280 ns/op          64 B/op           1 allocs/op\nBenchmarkEcho_GPlus2Params             7851861           154 ns/op           0 B/op           0 allocs/op\nBenchmarkGin_GPlus2Params              9958588           120 ns/op           0 B/op           0 allocs/op\nBenchmarkGocraftWeb_GPlus2Params       1000000          1433 ns/op         712 B/op           9 allocs/op\nBenchmarkGoji_GPlus2Params             1325134           909 ns/op         336 B/op           2 allocs/op\nBenchmarkGojiv2_GPlus2Params            405955          2870 ns/op        1408 B/op          14 allocs/op\nBenchmarkGoJsonRest_GPlus2Params        977038          1987 ns/op         713 B/op          14 allocs/op\nBenchmarkGoRestful_GPlus2Params         205018          6142 ns/op        4384 B/op          16 allocs/op\nBenchmarkGorillaMux_GPlus2Params        205641          6015 ns/op        1296 B/op          10 allocs/op\nBenchmarkGowwwRouter_GPlus2Params      1748542           684 ns/op         432 B/op           3 allocs/op\nBenchmarkHttpRouter_GPlus2Params      14047102          87.7 ns/op           0 B/op           0 allocs/op\nBenchmarkHttpTreeMux_GPlus2Params      1418673           828 ns/op         384 B/op           4 allocs/op\nBenchmarkKocha_GPlus2Params            2334562           520 ns/op         128 B/op           5 allocs/op\nBenchmarkLARS_GPlus2Params            11954094           101 ns/op           0 B/op           0 allocs/op\nBenchmarkMacaron_GPlus2Params           491552          2890 ns/op        1072 B/op          10 allocs/op\nBenchmarkMartini_GPlus2Params           120532          9545 ns/op        1200 B/op          13 allocs/op\nBenchmarkPat_GPlus2Params               194739          6766 ns/op        2168 B/op          33 allocs/op\nBenchmarkPossum_GPlus2Params           1201224          1009 ns/op         496 B/op           5 allocs/op\nBenchmarkR2router_GPlus2Params         1575535           756 ns/op         432 B/op           5 allocs/op\nBenchmarkRivet_GPlus2Params            3698930           325 ns/op          96 B/op           1 allocs/op\nBenchmarkTango_GPlus2Params            1000000          1212 ns/op         344 B/op           8 allocs/op\nBenchmarkTigerTonic_GPlus2Params        349350          3660 ns/op        1200 B/op          22 allocs/op\nBenchmarkTraffic_GPlus2Params           169714          7862 ns/op        2248 B/op          28 allocs/op\nBenchmarkVulcan_GPlus2Params           1222288           974 ns/op          98 B/op           3 allocs/op\nBenchmarkAce_GPlusAll                   845606          1398 ns/op           0 B/op           0 allocs/op\nBenchmarkAero_GPlusAll                 1000000          1009 ns/op           0 B/op           0 allocs/op\nBenchmarkBear_GPlusAll                  103830         11386 ns/op        5488 B/op          61 allocs/op\nBenchmarkBeego_GPlusAll                  82653         14784 ns/op        4576 B/op          39 allocs/op\n```"
  }
]