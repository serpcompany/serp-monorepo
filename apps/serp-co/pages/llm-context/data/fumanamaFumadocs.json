[
  {
    "owner": "fuma-nama",
    "repo": "fumadocs",
    "content": "TITLE: Composing Fumadocs Documentation Page Components in React (TSX)\nDESCRIPTION: Demonstrates how to compose a documentation page using the core Fumadocs UI React components: DocsPage, DocsTitle, DocsDescription, and DocsBody. Imports are made from 'fumadocs-ui/page'. Each component is responsible for a specific aspect of the documentation layout. Inputs include the page title, description, and body content. This snippet assumes 'fumadocs-ui' is installed as a dependency and used in a TSX environment.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/page.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  DocsPage,\n  DocsDescription,\n  DocsTitle,\n  DocsBody,\n} from 'fumadocs-ui/page';\n\n<DocsPage>\n  <DocsTitle>title</DocsTitle>\n  <DocsDescription>description</DocsDescription>\n  <DocsBody>...</DocsBody>\n</DocsPage>;\n\n```\n\n----------------------------------------\n\nTITLE: Migrating Declarative Collections with Fumadocs MDX in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the new declarative collection API with Fumadocs MDX after a breaking change. It shows basic usage of the defineDocs and defineConfig functions imported from 'fumadocs-mdx/config', highlighting the omission of the previously required 'exports' object. The migration requires a 'source.config.ts' file and no longer uses an 'mdx-components.tsx', instead passing MDX components directly. This configuration outputs two main exports, 'docs' and 'meta', and sets up the docs configuration via a default export. Key prerequisite: fumadocs-mdx version 10.0.0+.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/mdx/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineDocs, defineConfig } from 'fumadocs-mdx/config';\\n\\nexport const { docs, meta } = defineDocs();\\n\\nexport default defineConfig();\n```\n\n----------------------------------------\n\nTITLE: Configuring RootProvider Usage in Fumadocs UI - React (JSX)\nDESCRIPTION: This code demonstrates the integration of the RootProvider component from the 'fumadocs-ui/provider' package at the root layout of a React (Next.js) application. Dependencies include React, Next.js, and the Fumadocs UI library. The Layout function takes a 'children' prop, wraps the HTML and body tags, and includes RootProvider to supply context for themes and search features to all child components. Inputs: children components. Outputs: the full HTML structure with context applied. It should be placed in the app's main layout file to ensure all descendants have appropriate context.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/root-provider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RootProvider } from 'fumadocs-ui/provider';\n\nexport default function Layout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <RootProvider>{children}</RootProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Search Route Handler with Orama - TypeScript\nDESCRIPTION: Imports source data and constructs a Next.js API handler using Fumadocs's createFromSource utility for server-side search integration via Orama. Requires project-local 'source' export and 'fumadocs-core/search/server'. Exposes a GET handler for search queries, supporting i18n out-of-the-box.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v14.mdx#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { source } from '@/lib/source';\nimport { createFromSource } from 'fumadocs-core/search/server';\n\nexport const { GET } = createFromSource(source);\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Search Dialog Component (React/TSX)\nDESCRIPTION: This code snippet demonstrates how to create a custom Search Dialog component that can replace the default one in Fumadocs UI. It uses the SearchDialog component from fumadocs-ui.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/search.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport SearchDialog from 'fumadocs-ui/components/dialog/search-default';\nimport type { SharedProps } from 'fumadocs-ui/components/dialog/search';\n\nexport default function CustomDialog(props: SharedProps) {\n  // your own logic here\n  return <SearchDialog {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Syntax Example\nDESCRIPTION: Demonstrates basic Markdown syntax including headings, formatting, code blocks, lists, quotes, tables and images.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/markdown.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Heading\n\n## Heading\n\n### Heading\n\n#### Heading\n\nHello World, **Bold**, _Italic_, ~~Hidden~~\n\n```js\nconsole.log('Hello World');\n```\n\n1. First\n2. Second\n3. Third\n\n- Item 1\n- Item 2\n\n> Quote here\n\n![alt](/image.png)\n\n| Table | Description |\n| ----- | ----------- |\n| Hello | World       |\n```\n\n----------------------------------------\n\nTITLE: Customizing MDX Processor Options with Plugins in Fumadocs MDX (TypeScript)\nDESCRIPTION: This snippet demonstrates how to extend Fumadocs MDX configuration by adding custom MDX processing options, specifically integrating the 'remark-math' and 'rehype-katex' plugins. Dependencies required include 'fumadocs-mdx/config', 'remark-math', and 'rehype-katex'. The mdxOptions property accepts arrays and functions to inject plugins, and parameters include the sequence of MDX plugins. Inputs are not required from the user beyond plugin installation, and outputs are applied automatically during the build process. The 'rehypePlugins' key is shown as a function to guarantee plugin order.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/global.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineConfig } from 'fumadocs-mdx/config';\\nimport rehypeKatex from 'rehype-katex';\\nimport remarkMath from 'remark-math';\\n\\nexport default defineConfig({\\n  mdxOptions: {\\n    remarkPlugins: [remarkMath],\\n    // When order matters\\n    rehypePlugins: (v) => [rehypeKatex, ...v],\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating TOC Component Usage - TSX\nDESCRIPTION: This snippet demonstrates how to migrate the usage of the TOC component in Fumadocs. It shows the old and new ways of implementing the component, highlighting the updated structure with AnchorProvider and ScrollProvider. The update improves the flexibility of headless components.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nimport * as Base from 'fumadocs-core/toc';\n\nreturn (\n  <Base.TOCProvider>\n    <Base.TOCItem />\n  </Base.TOCProvider>\n);\n```\n\nLANGUAGE: TSX\nCODE:\n```\nimport * as Base from 'fumadocs-core/toc';\n\nreturn (\n  <Base.AnchorProvider>\n    <Base.ScrollProvider>\n      <Base.TOCItem />\n      <Base.TOCItem />\n    </Base.ScrollProvider>\n  </Base.AnchorProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Linked Tabs Implementation\nDESCRIPTION: Demonstrates how to implement tabs with URL hash linking functionality.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/tabs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n<Tabs items={['Javascript', 'Rust', 'C++']}>\n  <Tab value=\"Javascript\">Javascript is weird</Tab>\n  <Tab value=\"Rust\">Rust is fast</Tab>\n  <Tab id=\"tab-cpp\" value=\"C++\">\n    `Hello World`\n  </Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Defining a combined docs collection in Fumadocs MDX\nDESCRIPTION: TypeScript configuration for defining a combined docs collection that processes both document and meta files. This setup is necessary for the full functionality of Fumadocs.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineDocs } from 'fumadocs-mdx/config';\n\nexport const docs = defineDocs({\n  dir: 'content/docs',\n  docs: {\n    // options for `doc` collection\n  },\n  meta: {\n    // options for `meta` collection\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX content with custom components in React\nDESCRIPTION: TypeScript and JSX example showing how to render MDX content using the page body component. This demonstrates how to apply custom MDX components to your rendered content.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/index.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getMDXComponents } from '@/mdx-components';\n\nconst MDX = page.data.body;\n\n// set your MDX components with `components` prop\nreturn <MDX components={getMDXComponents()} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring remarkDocGen with Fumadocs MDX (TypeScript)\nDESCRIPTION: Demonstrates integrating the `remarkDocGen` plugin into a Fumadocs MDX project. It imports `remarkDocGen` and `fileGenerator` and adds them to the `remarkPlugins` array in the `mdxOptions` of the `defineConfig` function, enabling the file generation feature.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-docgen.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"source.config.ts\" tab=\"Fumadocs MDX\"\nimport { remarkDocGen, fileGenerator } from 'fumadocs-docgen';\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  mdxOptions: {\n    remarkPlugins: [[remarkDocGen, { generators: [fileGenerator()] }]],\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Generate MDX Files from OpenAPI Schema\nDESCRIPTION: Generates MDX files directly from an OpenAPI schema using the `generateFiles` function from `fumadocs-openapi`. The script takes the input OpenAPI schema file(s) and the output directory. Enabling `includeDescription` is recommended.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/index.mdx#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  input: ['./unkey.json'], // the OpenAPI schemas\n  output: './content/docs',\n  // we recommend to enable it\n  // make sure your endpoint description doesn't break MDX syntax.\n  includeDescription: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing File Generation with Basic Input\nDESCRIPTION: Basic configuration for generating documentation files from OpenAPI schema files using the generateFiles function.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/configurations.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  input: ['./unkey.json'],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Navigation Menu - TSX\nDESCRIPTION: This code snippet shows how to define a navigation menu within the `links` array using the `type: 'menu'` option in Fumadocs' `baseOptions`. It imports `BaseLayoutProps` from `fumadocs-ui/layouts/shared`. Menu items can include text, descriptions, and URLs. Menu items support a menu property which can add a banner or custom classNames in the home layout. This code resides in `app/layout.config.tsx`.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/navigation/links.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport const baseOptions: BaseLayoutProps = {\n  links: [\n    {\n      type: 'menu',\n      text: 'Guide',\n      items: [\n        {\n          text: 'Getting Started',\n          description: 'Learn to use Fumadocs',\n          url: '/docs',\n\n          // (optional) Props for Radix UI Navigation Menu item in Home Layout\n          menu: {\n            className: 'row-span-2',\n            // add banner to navigation menu card\n            // can be an image or other elements\n            banner: <div>Banner</div>,\n          },\n        },\n      ],\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining INTERNAL_SERVER_ERROR Response with TypeScript Interfaces\nDESCRIPTION: This TypeScript interface details the structure of an \"INTERNAL_SERVER_ERROR\" error, which provides fields for a code, documentation link, detailed message, and associated request ID to aid in debugging server errors. The shape enforces consistent error information and is designed for seamless use in TypeScript projects without external dependencies.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Response {\n  error: {\n    /**\n     * A machine readable error code.\n     */\n    code: \"INTERNAL_SERVER_ERROR\";\n    /**\n     * A link to our documentation with more details about this error code\n     */\n    docs: string;\n    /**\n     * A human readable explanation of what went wrong\n     */\n    message: string;\n    /**\n     * Please always include the requestId in your error report\n     */\n    requestId: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Algolia Search Dependencies via NPM (package-install)\nDESCRIPTION: This snippet demonstrates the installation of the Algolia Search package using the NPM package, ensuring that all Algolia-related functionality can be integrated with Fumadocs. The 'algoliasearch' dependency is required for both server-side synchronizing and client-side searching within the documentation workflow.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/algolia.mdx#2025-04-23_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nalgoliasearch\n```\n\n----------------------------------------\n\nTITLE: URL-Updating Tabs Implementation\nDESCRIPTION: Shows how to implement tabs that automatically update the URL hash on tab selection.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/tabs.mdx#2025-04-23_snippet_6\n\nLANGUAGE: mdx\nCODE:\n```\n<Tabs items={['Javascript', 'Rust', 'C++']} updateAnchor>\n  <Tab id=\"tab-js\" value=\"Javascript\">\n    Javascript is weird\n  </Tab>\n  <Tab id=\"tab-rs\" value=\"Rust\">\n    Rust is fast\n  </Tab>\n  <Tab id=\"tab-cpp\" value=\"C++\">\n    `Hello World`\n  </Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body Schema for API Key Creation in React/JSX\nDESCRIPTION: This snippet implements the structure of a request body schema for an API key creation endpoint using React/JSX props and nested components. It defines all expected fields—such as apiId, prefix, key hashing, meta data, rate limiting parameters—and includes type, required status, example values, constraints, and detailed documentation. Dependencies include React and custom Property/ObjectCollapsible components. The input is an array of key definition objects; output is a rendered form or documentation for API consumers. Some nested objects (e.g., hash, meta, refill, ratelimit) utilize further property decomposition for clarity. Limitations: it is a structural definition for UI/docs, not for execution.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Property name={\"body\"} type={\"array<object>\"} required={true} deprecated={undefined}>\n\n<ObjectCollapsible name={\"Object 1\"}>\n\n<Property name={\"apiId\"} type={\"string\"} required={true} deprecated={undefined}>\n\nChoose an `API` where this key should be created.\n\n<span>Example: `\"api_123\"`</span>\n\n</Property>\n\n<Property name={\"prefix\"} type={\"string\"} required={false} deprecated={undefined}>\n\nTo make it easier for your users to understand which product an api key belongs to, you can add prefix them.\n\nFor example Stripe famously prefixes their customer ids with cus_ or their api keys with sk_live_.\n\nThe underscore is automatically added if you are defining a prefix, for example: \"prefix\": \"abc\" will result in a key like abc_xxxxxxxxx\n\n<span>Maximum length: `8`</span>\n\n</Property>\n\n<Property name={\"name\"} type={\"string\"} required={false} deprecated={undefined}>\n\nThe name for your Key. This is not customer facing.\n\n<span>Example: `\"my key\"`</span>\n\n</Property>\n\n<Property name={\"plaintext\"} type={\"string\"} required={false} deprecated={undefined}>\n\nThe raw key in plaintext. If provided, unkey encrypts this value and stores it securely. Provide either `hash` or `plaintext`\n\n</Property>\n\n<Property name={\"hash\"} type={\"object\"} required={false} deprecated={undefined}>\n\nProvide either `hash` or `plaintext`\n\n<ObjectCollapsible name={\"hash\"}>\n\n<Property name={\"value\"} type={\"string\"} required={true} deprecated={undefined}>\n\nThe hashed and encoded key\n\n</Property>\n\n<Property name={\"variant\"} type={\"string\"} required={true} deprecated={undefined}>\n\nThe algorithm for hashing and encoding, currently only sha256 and base64 are supported\n\n<span>Value in: `\"sha256_base64\"`</span>\n\n</Property>\n\n</ObjectCollapsible>\n\n</Property>\n\n<Property name={\"start\"} type={\"string\"} required={false} deprecated={undefined}>\n\nThe first 4 characters of the key. If a prefix is used, it should be the prefix plus 4 characters.\n\n<span>Example: `\"unkey_32kq\"`</span>\n\n</Property>\n\n<Property name={\"ownerId\"} type={\"string\"} required={false} deprecated={undefined}>\n\nYour user’s Id. This will provide a link between Unkey and your customer record.\nWhen validating a key, we will return this back to you, so you can clearly identify your user from their api key.\n\n<span>Example: `\"team_123\"`</span>\n\n</Property>\n\n<Property name={\"meta\"} type={\"object\"} required={false} deprecated={undefined}>\n\nThis is a place for dynamic meta data, anything that feels useful for you should go here\n\n<span>Example: `{\\\"billingTier\\\":\\\"PRO\\\",\\\"trialEnds\\\":\\\"2023-06-16T17:16:37.161Z\\\"}`</span>\n\n<ObjectCollapsible name={\"meta\"}>\n\n<Property name={\"[key: string]\"} type={\"null\"} required={false} deprecated={undefined}>\n\n</Property>\n\n</ObjectCollapsible>\n\n</Property>\n\n<Property name={\"roles\"} type={\"array<string>\"} required={false} deprecated={undefined}>\n\nA list of roles that this key should have. If the role does not exist, an error is thrown\n\n<span>Example: `[\"admin\",\"finance\"]`</span>\n\n</Property>\n\n<Property name={\"permissions\"} type={\"array<string>\"} required={false} deprecated={undefined}>\n\nA list of permissions that this key should have. If the permission does not exist, an error is thrown\n\n<span>Example: `[\"domains.create_record\",\"say_hello\"]`</span>\n\n</Property>\n\n<Property name={\"expires\"} type={\"integer\"} required={false} deprecated={undefined}>\n\nYou can auto expire keys by providing a unix timestamp in milliseconds. Once Keys expire they will automatically be disabled and are no longer valid unless you enable them again.\n\n<span>Example: `1623869797161`</span>\n\n</Property>\n\n<Property name={\"remaining\"} type={\"integer\"} required={false} deprecated={undefined}>\n\nYou can limit the number of requests a key can make. Once a key reaches 0 remaining requests, it will automatically be disabled and is no longer valid unless you update it.\n\n<span>Example: `1000`</span>\n\n<span>Minimum: `1`</span>\n\n</Property>\n\n<Property name={\"refill\"} type={\"object\"} required={false} deprecated={undefined}>\n\nUnkey enables you to refill verifications for each key at regular intervals.\n\n<span>Example: `{\\\"interval\\\":\\\"daily\\\",\\\"amount\\\":100}`</span>\n\n<ObjectCollapsible name={\"refill\"}>\n\n<Property name={\"interval\"} type={\"string\"} required={true} deprecated={undefined}>\n\nUnkey will automatically refill verifications at the set interval.\n\n<span>Value in: `\"daily\" | \"monthly\"`</span>\n\n</Property>\n\n<Property name={\"amount\"} type={\"integer\"} required={true} deprecated={undefined}>\n\nThe number of verifications to refill for each occurrence is determined individually for each key.\n\n<span>Minimum: `0`</span>\n\n</Property>\n\n</ObjectCollapsible>\n\n</Property>\n\n<Property name={\"ratelimit\"} type={\"object\"} required={false} deprecated={undefined}>\n\nUnkey comes with per-key ratelimiting out of the box.\n\n<span>Example: `{\\\"type\\\":\\\"fast\\\",\\\"limit\\\":10,\\\"refillRate\\\":1,\\\"refillInterval\\\":60}`</span>\n\n<ObjectCollapsible name={\"ratelimit\"}>\n\n<Property name={\"async\"} type={\"boolean\"} required={false} deprecated={undefined}>\n\nAsync will return a response immediately, lowering latency at the cost of accuracy.\n\n<span>Default: `false`</span>\n\n</Property>\n\n<Property name={\"type\"} type={\"string\"} required={false} deprecated={true}>\n\nFast ratelimiting doesn't add latency, while consistent ratelimiting is more accurate.\n\n<span>Default: `\"fast\"`</span>\n\n<span>Value in: `\"fast\" | \"consistent\"`</span>\n\n</Property>\n\n<Property name={\"limit\"} type={\"integer\"} required={true} deprecated={undefined}>\n\nThe total amount of burstable requests.\n\n<span>Minimum: `1`</span>\n\n</Property>\n\n<Property name={\"refillRate\"} type={\"integer\"} required={true} deprecated={true}>\n\nHow many tokens to refill during each refillInterval.\n\n<span>Minimum: `1`</span>\n\n</Property>\n\n<Property name={\"refillInterval\"} type={\"integer\"} required={true} deprecated={true}>\n\nDetermines the speed at which tokens are refilled, in milliseconds.\n\n<span>Minimum: `1`</span>\n\n</Property>\n\n</ObjectCollapsible>\n\n</Property>\n\n<Property name={\"enabled\"} type={\"boolean\"} required={false} deprecated={undefined}>\n\nSets if key is enabled or disabled. Disabled keys are not valid.\n\n<span>Example: `false`</span>\n\n<span>Default: `true`</span>\n\n</Property>\n\n<Property name={\"environment\"} type={\"string\"} required={false} deprecated={undefined}>\n\nEnvironments allow you to divide your keyspace.\n\nSome applications like Stripe, Clerk, WorkOS and others have a concept of \"live\" and \"test\" keys to\ngive the developer a way to develop their own application without the risk of modifying real world\nresources.\n\nWhen you set an environment, we will return it back to you when validating the key, so you can\nhandle it correctly.\n              \n\n<span>Maximum length: `256`</span>\n\n</Property>\n\n</ObjectCollapsible>\n\n</Property>\n```\n\n----------------------------------------\n\nTITLE: Using useBreadcrumb Hook in TypeScript\nDESCRIPTION: Demonstrates how to use the useBreadcrumb hook from fumadocs-core/breadcrumb to generate breadcrumb items based on the current pathname and page tree.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/components/breadcrumb.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePathname } from 'next/navigation';\nimport { useBreadcrumb } from 'fumadocs-core/breadcrumb';\n\nconst pathname = usePathname();\nconst items = useBreadcrumb(pathname, tree);\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Handler for OG Image Generation\nDESCRIPTION: Creates a dynamic route handler for generating Open Graph images for documentation pages. The handler appends 'image.png' to slugs for proper URL access.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/open-graph.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"file\": \"../../examples/next-mdx/app/docs-og/[...slug]/route.tsx\",\n  \"codeblock\": {\n    \"meta\": \"title=\\\"app/docs-og/[...slug]/route.tsx\\\"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Collection - TypeScript\nDESCRIPTION: Shows how to define a basic collection using defineCollections with type, directory and schema configuration.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/collections.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollections } from 'fumadocs-mdx/config';\nimport { z } from 'zod';\n\nexport const blog = defineCollections({\n  type: 'doc',\n  dir: './content/blog',\n  schema: z.object({\n    // schema\n  }),\n  // other options\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Typing a PageTree Structure (TypeScript)\nDESCRIPTION: Demonstrates how to import the PageTree type from the 'fumadocs-core/server' module in TypeScript, and type a page tree object as 'PageTree.Root'. Ensures static typing and IDE support for the tree structure. Inputs and outputs are TypeScript types and objects, reducing runtime errors and enforcing conventions.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/page-tree.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PageTree } from 'fumadocs-core/server';\\n\\nconst tree: PageTree.Root = {\\n  // props\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Global Configuration for Fumadocs MDX (TypeScript)\nDESCRIPTION: This snippet shows how to create a global configuration file for a Fumadocs MDX project by importing and using the defineConfig function from 'fumadocs-mdx/config'. The configuration object can be customized with shared global options as required. This configuration will be merged by Fumadocs at build time and should be exported as the default export. There are no mandatory parameters in this minimal example, and the configuration applies project-wide.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/global.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineConfig } from 'fumadocs-mdx/config';\\n\\nexport default defineConfig({\\n  // global options\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Client for Tag Filter Querying (TypeScript)\nDESCRIPTION: This TypeScript snippet sets up the Fumadocs search client to filter results by a specified tag when using the Algolia index. The tag filter is passed as a third argument to the 'useDocsSearch' hook, refining the query for downstream components. It requires the 'algoliasearch' and 'fumadocs-core/search/client' dependencies.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/algolia.mdx#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport algosearch from 'algoliasearch';\\nimport { useDocsSearch } from 'fumadocs-core/search/client';\\n\\nconst index = algosearch('id', 'key').initIndex('document');\\n\\nconst { search, setSearch, query } = useDocsSearch(\\n  {\\n    type: 'algolia',\\n    index,\\n  },\\n  undefined,\\n  '<your tag value>',\\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Algolia Search UI with Fumadocs Client Hook (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates integrating the Algolia search client with the Fumadocs 'useDocsSearch' hook to build a custom search interface. It initializes the Algolia index using the provided application ID and key, passes it to the Fumadocs hook along with options such as results per page, and provides search state and query management for UI components. Dependencies include 'algoliasearch' and 'fumadocs-core/search/client'.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/algolia.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport algosearch from 'algoliasearch';\\nimport { useDocsSearch } from 'fumadocs-core/search/client';\\n\\nconst index = algosearch('id', 'key').initIndex('document');\\n\\nconst { search, setSearch, query } = useDocsSearch({\\n  type: 'algolia',\\n  index,\\n  distinct: 5,\\n  hitsPerPage: 10,\\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Table of Contents with Options in Fumadocs UI (TSX)\nDESCRIPTION: Shows how to customize or disable the Table of Contents by setting the 'tableOfContent' prop with an options object when using the DocsPage component. This enables advanced configuration of TOC appearance and behavior. Requires DocsPage from 'fumadocs-ui/page'. Options structure follows Fumadocs UI documentation. For React/TypeScript projects.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/page.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsPage } from 'fumadocs-ui/page';\n\n<DocsPage tableOfContent={options}>...</DocsPage>;\n\n```\n\n----------------------------------------\n\nTITLE: Adding \\'Edit on GitHub\\' Button to DocsPage in Fumadocs UI (TSX)\nDESCRIPTION: Passes an editOnGithub object to DocsPage for rendering an \\\"Edit on GitHub\\\" button, linking to the relevant file on GitHub. The object must specify owner, repo, branch (sha), and file path. Requires DocsPage from 'fumadocs-ui/page'. The path must be valid and formatted for the content's location. This setup is for React/TSX environments using Fumadocs UI.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/page.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsPage } from 'fumadocs-ui/page';\n\n<DocsPage\n  editOnGithub={{\n    owner: 'fuma-nama',\n    repo: 'fumadocs',\n    sha: 'main',\n    // file path, make sure it's valid\n    path: `content/docs/${page.file.path}`,\n  }}\n/>;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Remark Plugins in Global Config\nDESCRIPTION: Shows how to add custom remark plugins to the global MDX configuration. Demonstrates both direct array addition and function-based plugin ordering.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/mdx.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'fumadocs-mdx/config';\nimport { myPlugin } from './remark-plugin';\n\nexport default defineConfig({\n  mdxOptions: {\n    remarkPlugins: [myPlugin],\n    // You can also pass a function to control the order of remark plugins.\n    remarkPlugins: (v) => [myPlugin, ...v],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: I18n Middleware Implementation\nDESCRIPTION: Shows how to implement middleware for handling internationalization routing and locale detection. Handles user redirection based on locale preferences and includes locale prefix management.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/internationalization.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"file\": \"../../examples/i18n/middleware.ts\",\n  \"codeblock\": {\n    \"lang\": \"ts\",\n    \"meta\": \"title=\\\"middleware.ts\\\"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Attributes to Search Index Records (JavaScript)\nDESCRIPTION: This snippet shows how to add custom data fields ('extra_data') to each search record when syncing with Algolia via Fumadocs. By spreading each document's fields and appending an 'extra_data' object, the search schema can be extended to support advanced queries or UIs. The approach uses the 'sync' function and assumes prior initialization of the Algolia client and search records.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/algolia.mdx#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { sync } from 'fumadocs-core/search/algolia';\\n\\nsync(client, {\\n  documents: indexes.map((docs) => ({\\n    ...docs,\\n    extra_data: {\\n      value: 'hello world',\\n    },\\n  })),\\n});\n```\n\n----------------------------------------\n\nTITLE: Code Block with Syntax Highlighting\nDESCRIPTION: Examples of code blocks with various features including titles, line highlighting, and word highlighting.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/markdown.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<div>Hello World</div>  // [!code highlight]\n<div>Hello World</div>\n<div>Goodbye</div>\n<div>Hello World</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Loader with I18n\nDESCRIPTION: Sets up the Fumadocs source loader with internationalization support.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/internationalization.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from '@/lib/i18n';\nimport { loader } from 'fumadocs-core/source';\n\nexport const source = loader({\n  i18n,\n  // other options\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Tabs with meta.json\nDESCRIPTION: This JSON snippet shows how to create a meta.json file to define sidebar tabs. It specifies the title, description, and sets the folder as a root folder for the sidebar structure.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/navigation/sidebar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Name of Folder\",\n  \"description\": \"The description of root folder (optional)\",\n  \"root\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Script to Sync Trieve Indexes After Build (package.json)\nDESCRIPTION: Modifies the build script in package.json so that after the Next.js build, the custom update-index script is executed to synchronize Trieve's search index. Ensures search data stays in sync with each production build. Must replace the filename and path as relevant to the user's project; requires Node.js.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/trieve.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"next build && node ./update-index.mjs\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Content Collections Plugin in next.config.mjs\nDESCRIPTION: Applies the `withContentCollections` plugin to the Next.js configuration file (`next.config.mjs`) to enable Content Collections integration.  This plugin is responsible for processing and transforming the content collections during the build process.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/content-collections/index.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { withContentCollections } from '@content-collections/next';\n\n/** @type {import('next').NextConfig} */\nconst config = {\n  reactStrictMode: true,\n};\n\nexport default withContentCollections(config);\n```\n\n----------------------------------------\n\nTITLE: Syncing Search Indexes with Algolia (JavaScript)\nDESCRIPTION: This script imports the Algolia client and Fumadocs sync utility to update and synchronize Algolia search indexes with those generated during the Next.js build. It reads the index data from a local JSON artifact, parses it into an array, connects to Algolia using provided credentials, and calls the 'sync' function to update the remote index. Dependencies required are 'algoliasearch', 'fumadocs-core/search/algolia', and Node.js 'fs'. The script is intended for use post-build in CI/CD processes, and expects unique 'url' fields for each document.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/algolia.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport algosearch from 'algoliasearch';\\nimport { sync } from 'fumadocs-core/search/algolia';\\nimport * as fs from 'node:fs';\\n\\nconst content = fs.readFileSync('.next/server/app/static.json.body');\\n\\n/** @type {import('fumadocs-core/search/algolia').DocumentRecord[]} **/\\nconst indexes = JSON.parse(content.toString());\\n\\nconst client = algosearch('id', 'key');\\n\\nsync(client, {\\n  documents: indexes, // search indexes, can be provided by your content source too [!code highlight]\\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DocsLayout with Page Tree in React\nDESCRIPTION: This snippet demonstrates how to set up the DocsLayout component with a page tree generated from the file structure. It uses the 'source.pageTree' to automatically generate the sidebar structure.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/navigation/sidebar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\nimport { source } from '@/lib/source';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <DocsLayout\n      tree={source.pageTree}\n      // other props\n    >\n      {children}\n    </DocsLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Folder Node with Children and Index (JSON)\nDESCRIPTION: Shows how to declare a folder node in the page tree using JSON, with fields for 'type', 'name', an 'index' (which is itself a page node), and a 'children' array of nested nodes. This structure enables organizing grouped navigation elements. Key parameters include nested nodes and index references, and the output is a hierarchical JSON object.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/page-tree.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"type\\\": \\\"folder\\\",\\n    \\\"name\\\": \\\"Guide\\\",\\n    \\\"index\\\": {\\n        \\\"type\\\": \\\"page\\\",\\n        ...\\n    }\\n    \\\"children\\\": [\\n        ...\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Import Components into MDXContent (TypeScript)\nDESCRIPTION: Illustrates how to import components, such as those from Fumadocs UI, and pass them to the `<MDXContent />` component. This allows you to render custom components within your MDX content, enhancing the user interface and experience.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/content-collections/index.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { MDXContent } from '@content-collections/mdx/react';\nimport { getMDXComponents } from '@/mdx-components';\n\n<MDXContent code=\"...\" components={getMDXComponents()} />;\n```\n\n----------------------------------------\n\nTITLE: Migrate Algolia Search - TypeScript\nDESCRIPTION: This code snippet illustrates the migration from the old Algolia Search Client to the new search client. It shows how to configure `useDocsSearch` with the `algolia` type, index, and search options. It depends on `fumadocs-core/search/client`.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDocsSearch } from 'fumadocs-core/search/client';\n\nconst { search, setSearch, query } = useDocsSearch({\n  type: 'algolia',\n  index,\n  ...searchOptions,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Docs Collection - TypeScript\nDESCRIPTION: Shows how to define a Fumadocs collection with both docs and meta configurations.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/collections.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineDocs } from 'fumadocs-mdx/config';\n\nexport const docs = defineDocs({\n  dir: '/my/content/dir',\n  docs: {\n    // optional, options of `doc` collection\n  },\n  meta: {\n    // optional, options of `meta` collection\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Path Aliases in tsconfig.json\nDESCRIPTION: Configures path aliases in `tsconfig.json` for the generated Content Collections, allowing for cleaner imports and better code organization.  This step is crucial for accessing the generated content collections in a type-safe manner.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/content-collections/index.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@/*\": [\"./*\"],\n      \"content-collections\": [\"./.content-collections/generated\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add APIPage to MDX Components\nDESCRIPTION: Adds the `APIPage` component to the MDX components to enable its usage in MDX files.  The component uses the `getAPIPageProps` method of the created openapi instance to get props for the APIPage. It's a React Server Component.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/index.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport defaultComponents from 'fumadocs-ui/mdx';\nimport { APIPage } from 'fumadocs-openapi/ui';\nimport { openapi } from '@/lib/source';\nimport type { MDXComponents } from 'mdx/types';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultComponents,\n    APIPage: (props) => <APIPage {...openapi.getAPIPageProps(props)} />,\n    ...components,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DocsLayout Component in Next.js\nDESCRIPTION: Demonstrates how to set up the DocsLayout component in a Next.js layout file. It shows passing the page tree and base options to the component.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\nimport { baseOptions } from '@/app/layout.config';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <DocsLayout {...baseOptions} tree={tree}>\n      {children}\n    </DocsLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Fumadocs UI Presets in Tailwind CSS v4 - CSS\nDESCRIPTION: Demonstrates importing Tailwind CSS and Fumadocs UI preset styles using the new CSS-first approach in Tailwind CSS v4. The snippet also shows how to use the @source directive to include JS source files from the Fumadocs UI package. Dependencies include Tailwind CSS v4 and the 'fumadocs-ui' package. File location or usage context must ensure correct relative paths.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v15.mdx#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\\n@import 'fumadocs-ui/css/neutral.css';\\n@import 'fumadocs-ui/css/preset.css';\\n\\n/* relative to the CSS file, make sure it's correct for your app */\\n@source '../node_modules/fumadocs-ui/dist/**/*.js';\n```\n\n----------------------------------------\n\nTITLE: Implementing Home Layout in Next.js (TSX)\nDESCRIPTION: This TypeScript React snippet defines a layout component for the home section of a Next.js application (`/app/(home)/layout.tsx`). It imports the `HomeLayout` component from `fumadocs-ui/layouts/home` and configuration options (`baseOptions`) from a local file. The component receives `children` (React nodes) as props and renders them within the `HomeLayout`, applying the shared configurations defined in `baseOptions`. This setup is intended to be used with Next.js Route Groups to provide a consistent layout (like a navbar and search) across multiple pages.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/home-layout.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"/app/(home)/layout.tsx\"\nimport { HomeLayout } from 'fumadocs-ui/layouts/home';\nimport { baseOptions } from '@/app/layout.config';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return <HomeLayout {...baseOptions}>{children}</HomeLayout>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Search Provider Wrapper (React/TSX)\nDESCRIPTION: This snippet shows how to create a wrapper component with the 'use client' directive to pass a custom Search Dialog to the Root Provider in Fumadocs UI.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/search.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { RootProvider } from 'fumadocs-ui/provider';\nimport dynamic from 'next/dynamic';\nimport type { ReactNode } from 'react';\n\nconst SearchDialog = dynamic(() => import('@/components/search')); // lazy load\n\nexport function Provider({ children }: { children: ReactNode }) {\n  return (\n    <RootProvider\n      search={{\n        SearchDialog,\n      }}\n    >\n      {children}\n    </RootProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with Fumadocs MDX plugin\nDESCRIPTION: JavaScript configuration for integrating Fumadocs MDX with Next.js. This code should be added to your next.config.mjs file to enable the MDX processing capabilities.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMDX } from 'fumadocs-mdx/next';\n\nconst withMDX = createMDX();\n\n/** @type {import('next').NextConfig} */\nconst config = {\n  reactStrictMode: true,\n};\n\nexport default withMDX(config);\n```\n\n----------------------------------------\n\nTITLE: Integrating Fumadocs MDX with Fumadocs Core\nDESCRIPTION: TypeScript code showing how to convert the docs collection output to a Fumadocs source and set up the loader. This integration enables full Fumadocs functionality with the MDX content.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/index.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { docs } from '@/.source';\nimport { loader } from 'fumadocs-core/source';\n\nexport const source = loader({\n  baseUrl: '/docs',\n  source: docs.toFumadocsSource(),\n});\n```\n\n----------------------------------------\n\nTITLE: Docker Configuration\nDESCRIPTION: Dockerfile configuration for Fumadocs MDX deployment\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/manual-installation.mdx#2025-04-23_snippet_9\n\nLANGUAGE: zsh\nCODE:\n```\nWORKDIR /app\n\n# Install dependencies based on the preferred package manager\nCOPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* .npmrc* source.config.ts ./\n```\n\n----------------------------------------\n\nTITLE: Integrating Trieve SearchDialog into Fumadocs UI (React, TypeScript/TSX)\nDESCRIPTION: Creates a custom SearchDialog component for the Fumadocs UI, instantiating a Trieve SDK client with read-only access and injecting it as a prop. Uses TypeScript for strong typing of props. Replace apiKey and datasetId with appropriate values. Requires trieve-ts-sdk, trieve-fumadocs-adapter, fumadocs-ui, and React.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/trieve.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport type { SharedProps } from 'fumadocs-ui/components/dialog/search';\nimport SearchDialog from 'trieve-fumadocs-adapter/components/dialog/search';\nimport { TrieveSDK } from 'trieve-ts-sdk';\n\nconst trieveClient = new TrieveSDK({\n  apiKey: 'readOnlyApiKey',\n  datasetId: 'datasetId',\n});\n\nexport default function CustomSearchDialog(props: SharedProps) {\n  return <SearchDialog trieveClient={trieveClient} {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remark Plugins in Collection Config\nDESCRIPTION: Demonstrates how to add remark plugins at the collection level using getDefaultMDXOptions.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/mdx.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollections, getDefaultMDXOptions } from 'fumadocs-mdx/config';\nimport { myPlugin } from './remark-plugin';\n\nexport const blog = defineCollections({\n  type: 'doc',\n  mdxOptions: getDefaultMDXOptions({\n    remarkPlugins: [myPlugin],\n    // You can also pass a function to control the order of remark plugins.\n    remarkPlugins: (v) => [myPlugin, ...v],\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Feedback Component in Docs Page\nDESCRIPTION: Example of how to integrate the Rate component into a documentation page with PostHog analytics integration. Uses server actions for handling feedback submission.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/feedback.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsPage } from 'fumadocs-ui/page';\nimport { Rate } from '@/components/rate';\nimport posthog from 'posthog-js';\n\nexport default async function Page() {\n  return (\n    <DocsPage toc={toc} full={page.data.full}>\n      {/* at the bottom of page */}\n      <Rate\n        onRateAction={async (url, feedback) => {\n          'use server';\n\n          await posthog.capture('on_rate_docs', feedback);\n        }}\n      />\n    </DocsPage>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Table of Contents Headings to DocsPage in React (TSX)\nDESCRIPTION: Demonstrates passing a dynamic list of headings to the DocsPage component via the 'toc' prop for rendering a Table of Contents in Fumadocs UI. Requires an array of heading objects (e.g., generated from Markdown/MDX using a TOC utility). The toc prop customizes TOC content for each page. Works in a TSX/React environment with Fumadocs UI.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/page.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsPage } from 'fumadocs-ui/page';\n\n<DocsPage toc={headings}>...</DocsPage>;\n\n```\n\n----------------------------------------\n\nTITLE: Collection Definition in source.config.ts\nDESCRIPTION: New collection-based configuration approach using Zod schema and MDX options for better type safety and flexibility.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/mdx-v10.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from 'zod';\n\nexport const blog = defineCollections({\n  dir: './blog',\n  schema: z.object({\n    // the schema\n  }),\n  mdxOptions: {\n    // remark plugins?\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Link Item - TSX\nDESCRIPTION: This code snippet demonstrates how to define a link item with an icon, text, URL, and a secondary flag within the `links` array in Fumadocs' `baseOptions`. It imports `BookIcon` from `lucide-react` and `BaseLayoutProps` from `fumadocs-ui/layouts/shared`. The `secondary` flag determines how the link is displayed in the navbar. This configuration resides in `app/layout.config.tsx`.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/navigation/links.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BookIcon } from 'lucide-react';\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport const baseOptions: BaseLayoutProps = {\n  links: [\n    {\n      icon: <BookIcon />,\n      text: 'Blog',\n      url: '/blog',\n      // secondary items will be displayed differently on navbar\n      secondary: false,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Schema Configuration - TypeScript\nDESCRIPTION: Shows how to configure schema validation for file data using Zod with defineCollections.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/collections.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollections } from 'fumadocs-mdx/config';\nimport { z } from 'zod';\n\nexport const blog = defineCollections({\n  type: 'doc',\n  dir: './content/blog',\n  schema: z.object({\n    name: z.string(),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Postinstall Script for Fumadocs MDX\nDESCRIPTION: Adds a postinstall script to package.json for generating types using the fumadocs-mdx command.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/mdx-v10-summary.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"postinstall\": \"fumadocs-mdx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DocsCategory with Forced Locale and Tree - TSX (i18n)\nDESCRIPTION: Demonstrates category component usage with locale enforced via params and explicit tree selection. Enables documentation navigation in multi-language (i18n) setups. Requires project source, DocsCategory component, and page tree structure.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v14.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { source } from '@/lib/source';\nimport { DocsCategory } from 'fumadocs-ui/page';\n\nconst page = source.getPage(params.slug, params.lang);\n\n<DocsCategory page={page} from={source} tree={source.pageTree['en']} />;\n\n```\n\n----------------------------------------\n\nTITLE: Exporting Fumadocs Pages as Trieve Search Indexes (Next.js Route, TypeScript)\nDESCRIPTION: Defines a Next.js route handler using TypeScript to export Fumadocs pages into Trieve Document format for indexing. Pulls data from the app's page source, maps relevant metadata such as URL, title, description, and structured data, and returns the resulting array as a JSON response. Requires Next.js and trieve-fumadocs-adapter; relies on the source's getPages() method to retrieve site data. Output is used as a static search index export.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/trieve.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server';\nimport { source } from '@/lib/source';\nimport { type TrieveDocument } from 'trieve-fumadocs-adapter/search/sync';\n\nexport const revalidate = false;\n\nexport function GET() {\n  const results: TrieveDocument[] = [];\n\n  for (const page of source.getPages()) {\n    results.push({\n      _id: page.url,\n      structured: page.data.structuredData,\n      url: page.url,\n      title: page.data.title,\n      description: page.data.description,\n    });\n  }\n\n  return NextResponse.json(results);\n}\n```\n\n----------------------------------------\n\nTITLE: Customize MDX Options (TypeScript)\nDESCRIPTION: Shows how to customize MDX options within the `transformMDX` function when defining a collection. This allows you to configure how MDX files are processed and transformed, providing flexibility for different content requirements.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/content-collections/index.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineCollection } from '@content-collections/core';\nimport { transformMDX } from '@fumadocs/content-collections/configuration';\n\nconst docs = defineCollection({\n  transform: (document, context) =>\n    transformMDX(document, context, {\n      // options here\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for API Error Response\nDESCRIPTION: This TypeScript interface defines the structure of an error response object for an API. It includes fields for the error code, a link to documentation, an error message, and a request ID for tracking purposes.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Response {\n  error: {\n    /**\n     * A machine readable error code.\n     */\n    code: string;\n    /**\n     * A link to our documentation with more details about this error code\n     */\n    docs: string;\n    /**\n     * A human readable explanation of what went wrong\n     */\n    message: string;\n    /**\n     * Please always include the requestId in your error report\n     */\n    requestId: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Built-in Plugin Options in Global Config\nDESCRIPTION: Shows how to customize options for built-in rehype and remark plugins in the global configuration.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/mdx.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  mdxOptions: {\n    rehypeCodeOptions: {\n      // options\n    },\n    remarkImageOptions: {\n      // options\n    },\n    remarkHeadingOptions: {\n      // options\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Contentlayer to Source API in Typescript\nDESCRIPTION: This snippet demonstrates how to migrate from `createContentlayer` to `createContentlayerSource`. It configures the base URL and root directory in the loader instead of the Contentlayer configuration, and uses `getPages` instead of directly accessing `allDocs` to include the `url` property.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { allDocs, allMeta } from 'contentlayer/generated';\nimport { createContentlayerSource } from 'next-docs-zeta/contentlayer';\nimport { loader } from 'next-docs-zeta/source';\n\nexport const { getPage, pageTree, getPages } = loader({\n  baseUrl: '/docs',\n  rootDir: 'docs',\n  source: createContentlayerSource(allMeta, allDocs),\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Search Dialog Hot Keys in Fumadocs UI (React/TSX)\nDESCRIPTION: This snippet illustrates how to customize the hot keys used to trigger the search dialog in Fumadocs UI. It allows specifying the key code and display text for the hot key.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/search.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RootProvider } from 'fumadocs-ui/root-provider';\n\n<RootProvider\n  search={{\n    hotKey: [\n      {\n        display: 'K',\n        key: 'k', // key code, or a function determining whether the key is pressed\n      },\n    ],\n  }}\n>\n  {children}\n</RootProvider>;\n```\n\n----------------------------------------\n\nTITLE: Migrating Layout Imports (TS)\nDESCRIPTION: This code snippet demonstrates how to update import paths for layout components in Fumadocs UI. The old import paths from 'fumadocs-ui/layout' and 'fumadocs-ui/home-layout' are replaced with the new paths under 'fumadocs-ui/layouts'. It also updates the props imports to reflect the new location.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\n\nimport { HomeLayout } from 'fumadocs-ui/layouts/home';\n\nimport { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocsLayout } from 'fumadocs-ui/layout';\n\nimport { HomeLayout } from 'fumadocs-ui/home-layout';\n\nimport { HomeLayoutProps } from 'fumadocs-ui/home-layout';\n```\n\n----------------------------------------\n\nTITLE: Customizing Config Path for Fumadocs MDX in Next.js\nDESCRIPTION: This snippet demonstrates how to customize the path of the config file when using Fumadocs MDX with Next.js. It uses the createMDX function to set a custom config path.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/plugin.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMDX } from 'fumadocs-mdx/next';\n\nconst withMDX = createMDX({\n  configPath: './my-config.ts',\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing and using page data from Fumadocs source\nDESCRIPTION: TypeScript example showing how to fetch a page by its slug and access its data. This demonstrates the pattern for retrieving content from the Fumadocs source in your components.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/index.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { source } from '@/lib/source';\n\nconst page = source.getPage(['slugs']);\n\nif (page) {\n  // access page data \n  console.log(page.data);\n\n  // frontmatter properties are also inside \n  console.log(page.data.title);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeBlock Usage in React\nDESCRIPTION: Shows the updated usage of CodeBlock component where all props are passed directly to CodeBlock. This change simplifies the component usage and allows for better control over styling.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v13.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pre, CodeBlock } from 'fumadocs-ui/components/codeblock';\n\n<MDX\n  components={{\n    // HTML `ref` attribute conflicts with `forwardRef`\n    pre: ({ ref: _ref, ...props }) => (\n      <CodeBlock {...props}>\n        <Pre>{props.children}</Pre>\n      </CodeBlock>\n    ),\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using InlineTOC Component in MDX\nDESCRIPTION: This snippet demonstrates how to import the InlineTOC component from fumadocs-ui and use it by passing TOC items as a prop.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/inline-toc.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { InlineTOC } from 'fumadocs-ui/components/inline-toc';\n\n<InlineTOC items={toc} />\n```\n\n----------------------------------------\n\nTITLE: Configure Tailwind CSS with Global Colors\nDESCRIPTION: This snippet demonstrates how to configure Tailwind CSS using the `createPreset` function from `fumadocs-ui/tailwind-plugin` and enabling the `addGlobalColors` option. This adds the `fd-` prefix to all Fumadocs UI colors, animations and utilities.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { createPreset } from 'fumadocs-ui/tailwind-plugin';\n\n/** @type {import('tailwindcss').Config} */\nexport default {\n  presets: [\n    createPreset({\n      addGlobalColors: true,\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Footer Navigation with Footer Option in DocsPage (TSX)\nDESCRIPTION: Shows how to provide custom footer navigation controls for DocsPage by passing a 'footer' options object. Footer normally displays next/previous page links, but can be customized via the 'footer' prop. Also includes embedding body content with DocsBody. Requires DocsPage and DocsBody from 'fumadocs-ui/page'. For use in TSX-based React projects with Fumadocs UI.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/page.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsPage, DocsBody } from 'fumadocs-ui/page';\n\n<DocsPage footer={options}>\n  <DocsBody>...</DocsBody>\n</DocsPage>;\n\n```\n\n----------------------------------------\n\nTITLE: Migrate useDocsSearch - TypeScript\nDESCRIPTION: This code snippet demonstrates the migration of `useDocsSearch` to include the `client` option, enabling static search. It shows how to pass the type and API endpoint for fetch-based search. It depends on `fumadocs-core/search/client`.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDocsSearch } from 'fumadocs-core/search/client';\n\nconst { search, setSearch, query } = useDocsSearch({\n  type: 'fetch',\n  api: '/api/search', // optional\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing OG Image in Docs Page Metadata\nDESCRIPTION: Configures the metadata for documentation pages to include the generated Open Graph images.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/open-graph.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"file\": \"../../examples/next-mdx/app/docs/[[...slug]]/page.with-og-image.tsx\",\n  \"codeblock\": {\n    \"meta\": \"title=\\\"app/docs/[[...slug]]/page.tsx\\\"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tag Attribute to Search Indexes for Filtering (JavaScript)\nDESCRIPTION: This JavaScript snippet enhances the search indexes by adding a 'tag' field to each document, allowing for faceted or filtered search in Algolia. It modifies each index record before calling the 'sync' function, enabling tag-based search capabilities. Required dependencies are 'algoliasearch' and 'fumadocs-core/search/algolia'.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/algolia.mdx#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport algosearch from 'algoliasearch';\\nimport { sync } from 'fumadocs-core/search/algolia';\\n\\nconst client = algosearch('id', 'key');\\n\\nsync(client, {\\n  documents: indexes.map((index) => ({\\n    ...index,\\n    tag: 'value', // [!code highlight]\\n  })),\\n});\n```\n\n----------------------------------------\n\nTITLE: Using getTableOfContents with Markdown in TypeScript\nDESCRIPTION: Demonstrates how to import and use the getTableOfContents function from fumadocs-core/server to parse TOC from markdown content. Returns an array of TOCItemType objects representing the heading structure.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/utils/get-toc.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getTableOfContents } from 'fumadocs-core/server';\n\nconst toc = getTableOfContents('## markdown content');\n```\n\n----------------------------------------\n\nTITLE: Language Management in Fumadocs\nDESCRIPTION: Example of retrieving available languages and their associated pages.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/source-api.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { source } from '@/lib/source';\n\n// language -> pages\nconst entries = source.getLanguages();\n```\n\n----------------------------------------\n\nTITLE: Install Content Collections Packages\nDESCRIPTION: Installs the necessary Content Collections packages for Fumadocs, including core, MDX, and Next.js integrations.  These packages provide the foundation for transforming content into type-safe data collections within a Next.js environment.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/content-collections/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n@fumadocs/content-collections @content-collections/core @content-collections/mdx @content-collections/next\n```\n\n----------------------------------------\n\nTITLE: Running the create-fumadocs-app CLI Tool (Bash)\nDESCRIPTION: Demonstrates how to execute the `create-fumadocs-app` scaffolding tool using various Node.js package managers (`npx`, `pnpm create`, `yarn create`). This command interactively sets up a new Next.js project configured with Fumadocs. Requires Node.js and the respective package manager to be installed.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/create-app/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-fumadocs-app\n#or\npnpm create fumadocs-app\n#or\nyarn create fumadocs-app\n```\n\n----------------------------------------\n\nTITLE: Adding remark-ts2js Plugin in Fumadocs MDX (TypeScript)\nDESCRIPTION: Configures Fumadocs MDX by importing `remarkTypeScriptToJavaScript` from `fumadocs-docgen/remark-ts2js` and adding it to the `remarkPlugins` array within the `mdxOptions`. This enables the plugin for MDX files processed by Fumadocs.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-ts2js.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { remarkTypeScriptToJavaScript } from 'fumadocs-docgen/remark-ts2js';\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  mdxOptions: {\n    remarkPlugins: [remarkTypeScriptToJavaScript],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Post Collection in Fumadocs (TypeScript)\nDESCRIPTION: Defines a 'blogPosts' collection using Fumadocs MDX, specifying the content directory and extending the frontmatter schema with author and date fields.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/make-a-blog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollections, frontmatterSchema } from 'fumadocs-mdx/config';\n\nexport const blogPosts = defineCollections({\n  type: 'doc',\n  dir: 'content/blog',\n  // add required frontmatter properties\n  schema: frontmatterSchema.extend({\n    author: z.string(),\n    date: z.string().date().or(z.date()),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Provider with RootProvider Option - Fumadocs UI - React (JSX)\nDESCRIPTION: This snippet demonstrates how to disable the theme provider functionality (such as light/dark mode switching using next-themes) by passing a 'theme' prop to RootProvider in Fumadocs UI. The 'theme' prop is an object where 'enabled' can be set to false. Dependencies are Fumadocs UI, React, and optionally next-themes for default theme support. Input: children nodes. Output: children wrapped in RootProvider, with the theming system disabled. This approach is used when theming is not needed or should be handled outside Fumadocs UI.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/root-provider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<RootProvider\n  theme={{\n    enabled: false,\n  }}\n>\n  {children}\n</RootProvider>\n```\n\n----------------------------------------\n\nTITLE: Defining Docs Directory in defineDocs Config - TypeScript\nDESCRIPTION: Shows moving the 'dir' property to the root config object passed to defineDocs for Fumadocs MDX. Allows a single point of configuration for documentation content directory. Requires 'fumadocs-mdx/config'.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v14.mdx#2025-04-23_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineDocs } from 'fumadocs-mdx/config';\n\nexport const { docs, meta } = defineDocs({\n  dir: 'my/content/dir', // define once\n});\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Navbar in Fumadocs UI\nDESCRIPTION: Illustrates how to customize the mobile-only navbar by configuring the baseOptions object. It includes setting the title and GitHub URL for the navbar.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/docs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport const baseOptions: BaseLayoutProps = {\n  githubUrl: 'https://github.com/fuma-nama/fumadocs',\n  nav: {\n    title: 'My App',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Steps with React Components in MDX\nDESCRIPTION: Shows how to use the Steps and Step components from fumadocs-ui to create a structured step-by-step guide. This approach requires importing the components explicitly.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/steps.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Step, Steps } from 'fumadocs-ui/components/steps';\n\n<Steps>\n<Step>\n\n### Hello World\n\n</Step>\n\n<Step>\n\n### Hello World\n\n</Step>\n</Steps>\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Crawler Search Client\nDESCRIPTION: TypeScript implementation for using Orama Cloud Web Crawler with custom endpoint configuration.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/orama-cloud.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDocsSearch } from 'fumadocs-core/search/client';\nimport { OramaClient } from '@oramacloud/client';\n\nconst client = new OramaClient({\n  endpoint: '<endpoint_url>',\n  api_key: '<api_key>',\n});\n\nconst { search, setSearch, query } = useDocsSearch({\n  type: 'orama-cloud',\n  index: 'crawler',\n  client,\n  params: {\n    // optional search params\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Update CodeBlock Component Usage\nDESCRIPTION: This snippet demonstrates how to update the usage of the `CodeBlock` component from `fumadocs-ui/components/codeblock`.  It involves passing all props to the `CodeBlock` component and rendering the children within the `CodeBlock`.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pre, CodeBlock } from 'fumadocs-ui/components/codeblock';\n\n<MDX\n  components={{\n    // HTML `ref` attribute conflicts with `forwardRef`\n    pre: ({ ref: _ref, ...props }) => (\n      <CodeBlock {...props}>\n        <Pre>{props.children}</Pre>\n      </CodeBlock>\n    ),\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Importing Twoslash UI and Styles - TypeScript\nDESCRIPTION: Demonstrates importing CSS styles and Popup component from 'fumadocs-twoslash'. Required for syntax-enriched code blocks (Twoslash) in Fumadocs v14. Prerequisite: Tailwind CSS configured.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v14.mdx#2025-04-23_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nimport 'fumadocs-twoslash/twoslash.css';\n\nimport { Popup } from 'fumadocs-twoslash/ui';\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Renderer Components\nDESCRIPTION: Shows how to customize page rendering components.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/configurations.mdx#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOpenAPI } from 'fumadocs-openapi/server';\n\nexport const openapi = createOpenAPI({\n  renderer: {\n    Root(props) {\n      // your own (server) component\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Code Block Component Usage Update - TSX\nDESCRIPTION: Demonstrates the change in how to use the `CodeBlock` component.  The `pre` element is now separated from the code block container, allowing easier customization.  It involves importing `CodeBlock` and `Pre` from `fumadocs-ui/components/codeblock` and nesting the `Pre` component within the `CodeBlock`.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CodeBlock, Pre } from 'fumadocs-ui/components/codeblock';\n\n<CodeBlock title={title} allowCopy>\n  <Pre {...props} />\n</CodeBlock>;\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS Utilities for Steps\nDESCRIPTION: Demonstrates how to create steps using Tailwind CSS utility classes without importing components. This approach uses the fd-steps and fd-step classes directly.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/steps.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<div className=\"fd-steps\">\n  <div className=\"fd-step\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Migrate Code Block Tabs in MDX - TypeScript\nDESCRIPTION: This code snippet illustrates the migration from hardcoding `<Tabs />` items to using the `remarkCodeTab` plugin for code block tabs in MDX.  The 'before' example shows the old way, while the 'after' example shows the new way using `tab=\"Tab Name\"` on the code block. Dependencies include `fumadocs-ui/components/tabs`.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Tab, Tabs } from 'fumadocs-ui/components/tabs';\n\n<Tabs items={[\"Tab 1\", \"Tab 2\"]}>\n\n```ts tab\nconsole.log('A');\n```\n\n```ts tab\nconsole.log('B');\n```\n\n</Tabs>\n```\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Tab, Tabs } from 'fumadocs-ui/components/tabs';\n\n```ts tab=\"Tab 1\"\nconsole.log('A');\n```\n\n```ts tab=\"Tab 2\"\nconsole.log('B');\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing File Structure Display with fumadocs-ui Components\nDESCRIPTION: Demonstrates how to create a nested file structure display using Files, File, and Folder components from fumadocs-ui. Shows organization of app files with nested folders and various file types.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/files.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { File, Folder, Files } from 'fumadocs-ui/components/files';\n\n<Files>\n  <Folder name=\"app\" defaultOpen>\n    <File name=\"layout.tsx\" />\n    <File name=\"page.tsx\" />\n    <File name=\"global.css\" />\n  </Folder>\n  <Folder name=\"components\">\n    <File name=\"button.tsx\" />\n    <File name=\"tabs.tsx\" />\n    <File name=\"dialog.tsx\" />\n  </Folder>\n  <File name=\"package.json\" />\n</Files>\n```\n\n----------------------------------------\n\nTITLE: Installing Trieve SDK and Fumadocs Adapter (package installation)\nDESCRIPTION: Installs the core dependencies required for integrating Trieve Search with Fumadocs. This snippet ensures both the Trieve TypeScript SDK and the adapter plugin are available as packages before progressing to code implementation. Must be executed in the project root; package managers such as npm or yarn are required.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/trieve.mdx#2025-04-23_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\ntrieve-ts-sdk trieve-fumadocs-adapter\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Item - TSX\nDESCRIPTION: This code snippet demonstrates how to define a custom item within the `links` array using the `type: 'custom'` option in Fumadocs' `baseOptions`. It imports `BaseLayoutProps` from `fumadocs-ui/layouts/shared`.  Custom items can render any React component as a link.  The `secondary` flag controls placement. This configuration is in `app/layout.config.tsx`.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/navigation/links.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport const baseOptions: BaseLayoutProps = {\n  links: [\n    {\n      type: 'custom',\n      children: <Button variant=\"primary\">Login</Button>,\n      secondary: true,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Notebook DocsLayout Component with Fumadocs-UI in TypeScript/React\nDESCRIPTION: This snippet defines and exports a Layout component that wraps its children with the DocsLayout from 'fumadocs-ui/layouts/notebook', applying custom navigation options, sidebar tab placement, and a page tree for menu rendering. It requires the fumadocs-ui library, a local baseOptions configuration, a source object for navigation structure, and assumes usage in a TypeScript React project. The component expects children as ReactNode and outputs a fully structured notebook-style documentation layout optimized for compactness.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/notebook.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsLayout } from 'fumadocs-ui/layouts/notebook';\nimport { baseOptions } from '@/app/layout.config';\nimport { source } from '@/lib/source';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <DocsLayout\n      {...baseOptions}\n      // the position of navbar\n      nav={{ ...baseOptions.nav, mode: 'top' }}\n      // the position of Sidebar Tabs\n      tabMode=\"navbar\"\n      tree={source.pageTree}\n    >\n      {children}\n    </DocsLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reversed Order in meta.json pages Property - JSON\nDESCRIPTION: Updates meta.json configuration to allow reversed order for documentation pages using a string pattern in the 'pages' property. Demonstrates how to use 'z...a' notation to reverse page order automatically. This change depends on Fumadocs v15's support for reversed array expansion in configuration files. Key parameter: 'pages' array.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v15.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"pages\\\": [\\\"z...a\\\"]\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS Base Styles\nDESCRIPTION: Basic CSS imports required for setting up Fumadocs UI with Tailwind CSS, including neutral theme and preset styles.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/theme.mdx#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n@import 'fumadocs-ui/css/neutral.css';\n@import 'fumadocs-ui/css/preset.css';\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Code Blocks with Annotated Triple Backticks - TypeScript\nDESCRIPTION: Demonstrates the modern approach to rendering code block tabs in Fumadocs by using consecutive annotated fenced code blocks with language and tab label metadata. No longer requires manually writing the <Tabs /> component. Needs MDX or documentation system that supports this code block format. Key parameters: language identifier, tab label.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v15.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts tab=\\\"Tab 1\\\"\\nconsole.log('Hello World');\\n```\\n\\n```ts tab=\\\"Tab 2\\\"\\nconsole.log('Hello World');\\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Page Tree Node with Type 'page' (JSON)\nDESCRIPTION: Demonstrates the structure of a page node using JSON, including required fields like 'type', 'name', and 'url'. Useful for constructing individual page navigation items in the Fumadocs page tree. Inputs are navigation metadata; outputs are JSON objects structured according to the page node definition.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/page-tree.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"type\\\": \\\"page\\\",\\n  \\\"name\\\": \\\"Quick Start\\\",\\n  \\\"url\\\": \\\"/docs\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Search Dialog with RootProvider Option - Fumadocs UI - React (JSX)\nDESCRIPTION: This code shows how to disable or customize the search dialog in Fumadocs UI by passing the 'search' prop to RootProvider. The 'search' prop is an object where the 'enabled' key can be set to false. Dependencies include Fumadocs UI and React. The component wraps children with RootProvider, disabling the search dialog as part of the provided context. Input: children components. Output: children wrapped in a context without the search dialog enabled. Should be used to control the search dialog visibility in the app's context.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/root-provider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RootProvider\n  search={{\n    enabled: false,\n  }}\n>\n  {children}\n</RootProvider>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Provider in Layout (React/TSX)\nDESCRIPTION: This code demonstrates how to use a custom Provider component instead of the default Root Provider in the layout of a Fumadocs UI application.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/search.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Provider } from './provider';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <Provider>{children}</Provider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing File Naming\nDESCRIPTION: Implements custom file naming logic using a callback function.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/configurations.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  name: (type, file) => {\n    return; // filename\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Extended Schema Configuration - TypeScript\nDESCRIPTION: Demonstrates how to extend default schemas for both docs and meta collections.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/collections.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { frontmatterSchema, metaSchema, defineDocs } from 'fumadocs-mdx/config';\nimport { z } from 'zod';\n\nexport const docs = defineDocs({\n  docs: {\n    schema: frontmatterSchema.extend({\n      index: z.boolean().default(false),\n    }),\n  },\n  meta: {\n    schema: metaSchema.extend({\n      // other props\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Content Loading in Page Component\nDESCRIPTION: Example of how to load and render async content in a Next.js page component, including frontmatter and MDX content handling.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/async.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { source } from '@/lib/source';\nimport { getMDXComponents } from '@/mdx-components';\n\nconst page = source.getPage(['...']);\n\nif (page) {\n  // frontmatter properties are available\n  console.log(page.data);\n\n  // Markdown content requires await\n  const { body: MdxContent, toc } = await page.data.load();\n\n  console.log(toc);\n\n  return <MdxContent components={getMDXComponents()} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an MDX Page with Fumadocs UI in MDX\nDESCRIPTION: This example demonstrates how to create a simple MDX page using Fumadocs UI. It exports the 'withArticle' component as the default export to enable Fumadocs UI Typography styles, and includes a basic Markdown heading.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/page.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n{/* this will enable Typography styles of Fumadocs UI */}\nexport { withArticle as default } from 'fumadocs-ui/page';\n\n## Hello World\n```\n\n----------------------------------------\n\nTITLE: Implementing FrameworkProvider with NextProvider in TSX\nDESCRIPTION: This snippet demonstrates how to wrap components with the NextProvider from fumadocs-core to provide the necessary framework context for Fumadocs Core.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v15-2.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextProvider } from 'fumadocs-core/framework/next';\n\nexport function Provider({ children }) {\n  return <NextProvider>{children}</NextProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding InlineTOC to DocsPage Component in TSX\nDESCRIPTION: This example shows how to incorporate the InlineTOC component within a DocsPage component, allowing for inline table of contents on every page.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/inline-toc.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DocsPage>\n  ...\n  <InlineTOC items={toc} />\n  ...\n</DocsPage>\n```\n\n----------------------------------------\n\nTITLE: Remark Dynamic Content Migration - MDX/JSON\nDESCRIPTION: This snippet demonstrates the migration for `remarkDynamicContent` plugin. It shows how to change the syntax in mdx to enable `fileGenerator`. No specific dependencies or prerequisites beyond fumadocs-docgen.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_6\n\nLANGUAGE: MDX\nCODE:\n```\n```json doc-gen:file\n{\n  \"file\": \"./path/to/my-file.txt\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: AutoTypeTable with Inline TypeScript Type - MDX\nDESCRIPTION: Configures AutoTypeTable in MDX, supplying a type prop containing TypeScript code as a string. Generates a type documentation table from the supplied 'B' type and includes syntax highlighting. Relies on TypeScript support and highlight provider (e.g., Shiki), and the 'createTypeTable' function for best performance.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v14.mdx#2025-04-23_snippet_13\n\nLANGUAGE: mdx\nCODE:\n```\n<AutoTypeTable\n  path=\"file.ts\"\n  name=\"B\"\n  type={`\nimport { ReactNode } from \\\"react\\\"\nexport type B = ReactNode | { world: string }\n`}\n/>\n\n```\n\n----------------------------------------\n\nTITLE: DocsLayout i18n Usage - TSX\nDESCRIPTION: This code snippet demonstrates how to enable the new language toggle feature in `fumadocs-ui` by integrating the `i18n` prop within the `DocsLayout` component.  It involves removing the old `<LanguageSelect />` component and using the provided structure to enable language switching.  This requires importing `DocsLayout` from `fumadocs-ui/layout`.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsLayout } from 'fumadocs-ui/layout';\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return <DocsLayout i18n>{children}</DocsLayout>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Route Handler from Source\nDESCRIPTION: Creates a search route handler using the source object in Next.js API route.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/orama.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { source } from '@/lib/source';\nimport { createFromSource } from 'fumadocs-core/search/server';\n\nexport const { GET } = createFromSource(source);\n```\n\n----------------------------------------\n\nTITLE: Exporting Metadata Image API and Static Params - TypeScript\nDESCRIPTION: Defines a Next.js route handler using metadataImage.createAPI to generate OG images, passing page metadata to a generator. Also exports generateStaticParams for SSG or i18n. Depends on 'fumadocs-ui/og', and the metadata image setup. Ensures tight integration with Next.js routing and SSR.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v14.mdx#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { generateOGImage } from 'fumadocs-ui/og';\nimport { metadataImage } from '@/lib/metadata';\n\nexport const GET = metadataImage.createAPI((page) => {\n  return generateOGImage({\n    title: page.data.title,\n    description: page.data.description,\n    site: 'My App',\n  });\n});\n\nexport function generateStaticParams() {\n  return metadataImage.generateParams();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring File Grouping\nDESCRIPTION: Sets up file grouping structure for operation mode documentation generation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/configurations.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  per: 'operation',\n  groupBy: 'tag',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring I18n Options in TypeScript\nDESCRIPTION: Demonstrates how to configure internationalization settings including language options and locale prefix visibility. Defines the default language, available languages, and prefix hiding behavior.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/internationalization.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { I18nConfig } from 'fumadocs-core/i18n';\n\nexport const i18n: I18nConfig = {\n  defaultLanguage: 'en',\n  languages: ['en', 'cn'],\n  hideLocale: 'default-locale',\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Algolia Search in Fumadocs UI (React/TSX)\nDESCRIPTION: This snippet illustrates how to integrate Algolia search into Fumadocs UI by creating a custom search dialog component using Algolia's client-side SDK.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/search.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport algo from 'algoliasearch/lite';\nimport type { SharedProps } from 'fumadocs-ui/components/dialog/search';\nimport SearchDialog from 'fumadocs-ui/components/dialog/search-algolia';\n\nconst client = algo('appId', 'apiKey');\nconst index = client.initIndex('indexName');\n\nexport default function CustomSearchDialog(props: SharedProps) {\n  return <SearchDialog index={index} {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up MDX Components\nDESCRIPTION: Configuration for MDX components including Twoslash popups\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/twoslash.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Popup, PopupContent, PopupTrigger } from 'fumadocs-twoslash/ui';\nimport defaultComponents from 'fumadocs-ui/mdx';\nimport type { MDXComponents } from 'mdx/types';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultComponents,\n    Popup,\n    PopupContent,\n    PopupTrigger,\n    ...components,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tag Value to Synced Documents for Tag Filtering (JavaScript)\nDESCRIPTION: Augments the Trieve index records with a tag field to enable tag-based filtering in search results. The tag property is injected via a mapping step prior to synchronizing documents. Requires that tag values match those used in UI and queries. This supports advanced filtering in both the API and the UI.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/trieve.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sync } from 'trieve-fumadocs-adapter/search/sync';\nimport { TrieveSDK } from 'trieve-ts-sdk';\n\nconst client = new TrieveSDK({\n  apiKey: 'adminApiKey',\n  datasetId: 'datasetId',\n});\n\nconst documents = records.map((index) => ({\n  ...index,\n  tag: 'value', // [!code highlight]\n}));\n\nsync(client, documents);\n```\n\n----------------------------------------\n\nTITLE: Basic GithubInfo Component Implementation in TSX\nDESCRIPTION: Shows the basic usage of the GithubInfo component with required props for owner and repository name, plus optional GitHub access token configuration.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/github-info.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GithubInfo } from 'fumadocs-ui/components/github-info';\n\n<GithubInfo\n  owner=\"fuma-nama\"\n  repo=\"fumadocs\"\n  // your own GitHub access token (optional)\n  token={process.env.GITHUB_TOKEN}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Adding Remark Structure Plugin to MDX Compiler in TypeScript\nDESCRIPTION: This snippet demonstrates how to add the remarkStructure plugin to the MDX compiler. It imports necessary modules and compiles MDX content with the plugin.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/structure.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compile } from '@mdx-js/mdx';\nimport { remarkStructure } from 'fumadocs-core/mdx-plugins';\n\nconst vfile = await compile('...', {\n  remarkPlugins: [remarkStructure],\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation Page with Fumadocs\nDESCRIPTION: This code snippet uses the APIPage component from Fumadocs to render the API documentation for the GET /api/game-link/achieve endpoint. It specifies the API documentation source and the operation details.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/openapi/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage\n  document={'https://waktaverse.games/api-docs-json'}\n  operations={[{ path: '/api/game-link/achieve', method: 'get' }]}\n  webhooks={[]}\n  hasHead={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Documenting API Migrations Endpoint with fumadocs-ui Components - TypeScript/JSX\nDESCRIPTION: This code imports several fumadocs-ui components and utilizes them within a React-compatible JSX context to describe the POST /v1/migrations.createKeys endpoint. It defines the API route, method, and required authorization header using high-level presentation components. The authorization property block details that a Bearer token must be present in the request header. Dependencies include the fumadocs-ui package and a React-like JSX processing environment. Inputs are structured as JSX component props; output is a rendered API documentation interface. Intended for documentation sites built with fumadocs-ui and supporting TypeScript-React toolchains.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Root, API, APIInfo, APIExample, Responses, Response, ResponseTypes, ExampleResponse, TypeScriptResponse, Property, ObjectCollapsible, Requests, Request, APIPlayground } from \"fumadocs-ui/components/api\";\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Root baseUrl={\"https://api.unkey.dev\"}>\n\n<API>\n\n<APIInfo method={\"POST\"} route={\"/v1/migrations.createKeys\"}>\n\n## v1.migrations.createKeys\n\n### Authorization\n\n<Property name={\"Authorization\"} type={\"Bearer <token>\"} required={true}>\n\nIn: `header`\n\n</Property>\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Static Export\nDESCRIPTION: Basic Next.js configuration to enable static HTML export without requiring a Node.js server.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/static-export.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n  output: 'export',\n};\n```\n\n----------------------------------------\n\nTITLE: Page Management API Usage\nDESCRIPTION: Examples of using the source object to get pages and handle page trees with and without i18n support.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/source-api.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { source } from '@/lib/source';\n\nsource.getPage(['slug', 'of', 'page']);\n\n// with i18n\nsource.getPage(['slug', 'of', 'page'], 'locale');\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { source } from '@/lib/source';\n\n// from default locale\nsource.getPages();\n\n// for a specific locale\nsource.getPages('locale');\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { source } from '@/lib/source';\n\n// without i18n\nsource.pageTree;\n\n// with i18n\nsource.pageTree['locale'];\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI with Proxy Support\nDESCRIPTION: Sets up the OpenAPI configuration with proxy support by specifying the proxy URL endpoint. This enables the proxy functionality for all API requests.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/proxy.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOpenAPI } from 'fumadocs-openapi/server';\n\nexport const openapi = createOpenAPI({\n  proxyUrl: '/api/proxy',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Docs Page in Next.js with Fumadocs\nDESCRIPTION: This code snippet shows how to create a custom docs page using Fumadocs components in a Next.js page file. It includes handling the page content, table of contents, and rendering the page body.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/custom-source.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsPage, DocsBody } from 'fumadocs-ui/page';\nimport { getPage } from './my-content-source';\nimport { notFound } from 'next/navigation';\n\nexport default function Page({ params }: { params: { slug?: string[] } }) {\n  const page = getPage(params.slug);\n  if (!page) notFound();\n\n  return (\n    <DocsPage toc={page.tableOfContents}>\n      <DocsBody>{page.render()}</DocsBody>\n    </DocsPage>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Run the MDX Generation Script\nDESCRIPTION: Executes the JavaScript script to generate MDX files from the OpenAPI schema. The command uses Node.js to run the script.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/index.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scripts/generate-docs.mjs\n```\n\n----------------------------------------\n\nTITLE: Applying Typography Styles with DocsBody Component in React (TSX)\nDESCRIPTION: Shows usage of the DocsBody component to wrap documentation content in Fumadocs UI, applying built-in typography styles. Requires importing DocsBody from 'fumadocs-ui/page'. Input content (e.g., headings, text) is rendered as children and styled for documentation. This is intended for React projects using TypeScript with Fumadocs UI.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/page.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsBody } from 'fumadocs-ui/page';\n\n<DocsBody>\n  <h1>This heading looks good!</h1>\n</DocsBody>;\n\n```\n\n----------------------------------------\n\nTITLE: Root Layout Configuration with I18n\nDESCRIPTION: Sets up the root layout with internationalization support, including UI translations and locale configuration.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/internationalization.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RootProvider } from 'fumadocs-ui/provider';\nimport type { Translations } from 'fumadocs-ui/i18n';\n\nconst cn: Partial<Translations> = {\n  search: 'Translated Content',\n  // other translations\n};\n\nconst locales = [\n  {\n    name: 'English',\n    locale: 'en',\n  },\n  {\n    name: 'Chinese',\n    locale: 'cn',\n  },\n];\n\nexport default async function RootLayout({\n  params,\n  children,\n}: {\n  params: Promise<{ lang: string }>;\n  children: React.ReactNode;\n}) {\n  const lang = (await params).lang;\n\n  return (\n    <html lang={lang}>\n      <body>\n        <RootProvider\n          i18n={{\n            locale: lang,\n            locales,\n            translations: { cn }[lang],\n          }}\n        >\n          {children}\n        </RootProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Forwarding Color Variables with @theme - CSS\nDESCRIPTION: Sets up color variables by forwarding them within an @theme block, ensuring color consistency between Fumadocs and Tailwind CSS v4. This snippet is used for maintaining color variables after upgrading to v15. No external dependencies are needed beyond a compatible CSS preprocessor, and variable names must match expected conventions. Key parameter: --color-primary.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v15.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@theme {\\n  --color-primary: var(--color-fd-primary);\\n  /* same for other colors */\\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Configuration in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates the configuration of the `@fuma-docs/openapi` module for generating documentation from OpenAPI schemas. It specifies the input file, output directory, grouping strategy (`per: 'tag'`), and a render function to customize the frontmatter of the generated documentation files. The `input` parameter defines the path to the OpenAPI schema, and the `output` parameter determines the destination directory for the generated documentation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n   * @type {import(\"@fuma-docs/openapi\").Config}\n   */\n  module.exports = {\n    input: ['./petstore.yaml'],\n    output: './content/docs',\n    per: 'tag',\n    render: (title, description) => {\n      return {\n        frontmatter: [\n          '---',\n          `title: ${title}`,\n          `description: ${description}`,\n          'toc: false',\n          '---',\n        ].join('\\n'),\n      };\n    },\n  };\n```\n\n----------------------------------------\n\nTITLE: Updating toc and body Properties in Fumadocs Collection Exports (Diff)\nDESCRIPTION: This diff snippet guides users through the migration from the old 'exports' object structure to the new unified collection structure in Fumadocs MDX. It specifies replacing 'page.data.exports.toc' with 'page.data.toc' and 'page.data.exports.default' with 'page.data.body'. This change simplifies file structure and is required when upgrading to the declarative collection feature introduced in version 10.0.0.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/mdx/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- page.data.exports.toc\\n+ page.data.toc\\n\\n- page.data.exports.default\\n+ page.data.body\n```\n\n----------------------------------------\n\nTITLE: Explicitly Defining Sidebar Tabs in DocsLayout\nDESCRIPTION: This code demonstrates how to explicitly define sidebar tabs in the DocsLayout component. It allows for specifying tab titles, descriptions, and URLs for activation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/navigation/sidebar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\n\n<DocsLayout\n  sidebar={{\n    tabs: [\n      {\n        title: 'Components',\n        description: 'Hello World!',\n        // active for `/docs/components` and sub routes like `/docs/components/button`\n        url: '/docs/components',\n\n        // optionally, you can specify a set of urls which activates the item\n        // urls: new Set(['/docs/test', '/docs/components']),\n      },\n    ],\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Configuration with createPreset - JS\nDESCRIPTION: Illustrates how to configure Tailwind CSS with the `createPreset` function from `fumadocs-ui/tailwind-plugin`. This replaces the deprecated `docsUiPlugins` method for extending the Tailwind CSS configuration.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst { createPreset } = require('fumadocs-ui/tailwind-plugin');\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './content/**/*.mdx',\n    './node_modules/fumadocs-ui/dist/**/*.js',\n  ],\n  presets: [createPreset()],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Last Modified Time in Fumadocs TypeScript Config\nDESCRIPTION: This snippet shows how to enable the last modified time feature in the Fumadocs configuration file. It requires Git as version control and a non-shallow cloned repository.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/last-modified.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  lastModifiedTime: 'git', // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing RootProvider without Next.js in TSX\nDESCRIPTION: This code shows how to use the RootProvider from fumadocs-ui without automatically including the Next.js provider, allowing for custom framework integration.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v15-2.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RootProvider } from 'fumadocs-ui/provider/base';\n\nexport function Provider({ children }) {\n  // now it doesn't add the Next.js provider\n  return <RootProvider>{children}</RootProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useTrieveSearch Hook for Client-Side Querying (TypeScript)\nDESCRIPTION: Demonstrates how to initialize a TrieveSDK client and connect it to the useTrieveSearch hook for searching Trieve indexes directly from client-side TypeScript code. Key parameters include the read-only API key and dataset ID for secure public querying. Outputs a search interface where setSearch and query manage retrievals based on user input.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/trieve.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TrieveSDK } from 'trieve-ts-sdk';\nimport { useTrieveSearch } from 'trieve-fumadocs-adapter/search/trieve';\n\nconst client = new TrieveSDK({\n  apiKey: 'readOnlyApiKey',\n  datasetId: 'datasetId',\n});\n\nconst { search, setSearch, query } = useTrieveSearch(client);\n```\n\n----------------------------------------\n\nTITLE: Persistent Tabs Implementation\nDESCRIPTION: Demonstrates how to implement tabs with persistent values stored in localStorage.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/tabs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<Tabs groupId=\"language\" items={['Javascript', 'Rust']} persist>\n  <Tab value=\"Javascript\">Javascript is weird</Tab>\n  <Tab value=\"Rust\">Rust is fast</Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Home Layout with Locale Support\nDESCRIPTION: Implements the home layout component with internationalization support.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/internationalization.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ReactNode } from 'react';\nimport { HomeLayout } from 'fumadocs-ui/layouts/home';\nimport { baseOptions } from '@/app/layout.config';\n\nexport default async function Layout({\n  params,\n  children,\n}: {\n  params: Promise<{ lang: string }>;\n  children: ReactNode;\n}) {\n  const { lang } = await params;\n\n  return <HomeLayout {...baseOptions(lang)}>{children}</HomeLayout>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Source Implementation\nDESCRIPTION: Demonstrates how to create a custom Source object with type definitions for meta and page data.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/source-api.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Source } from 'fumadocs-core/source';\n\nexport function createMySource(): Source<{\n  metaData: { title: string; pages: string[] }; // Your custom type\n  pageData: { title: string; description: string }; // Your custom type\n}> {\n  return {\n    files: [],\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Relative Links in MDX Content\nDESCRIPTION: Shows the syntax for creating relative links within MDX content files.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/mdx/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n[My Link](./file.mdx)\n```\n\n----------------------------------------\n\nTITLE: Refactored Import Paths for Layouts - TypeScript\nDESCRIPTION: Modernizes import statements to reach new sub-paths, splitting DocsLayout, HomeLayout, and BaseLayoutProps across dedicated layout sources. These imports work with Fumadocs UI v14 and beyond. Prevents bloated entrypoints and improves tree-shaking.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v14.mdx#2025-04-23_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\nimport { HomeLayout } from 'fumadocs-ui/layouts/home';\nimport { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\n```\n\n----------------------------------------\n\nTITLE: Adding Rehype Plugins in Global Config\nDESCRIPTION: Shows how to incorporate custom rehype plugins into the global MDX configuration using a function-based approach.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/mdx.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'fumadocs-mdx/config';\nimport { myPlugin } from './rehype-plugin';\n\nexport default defineConfig({\n  mdxOptions: {\n    rehypePlugins: (v) => [myPlugin, ...v],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Example TypeScript/TSX Code Block for Transformation\nDESCRIPTION: Provides an example of a React functional component written in TSX. When this code block includes the `ts2js` meta string in an MDX file configured with the plugin, it will be rendered with two tabs: one for the original TSX code and one for the compiled JavaScript code.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-ts2js.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return <div>{children}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Callout Component Examples\nDESCRIPTION: Shows usage of Callout components for adding tips and warnings.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/markdown.mdx#2025-04-23_snippet_6\n\nLANGUAGE: mdx\nCODE:\n```\n<Callout>Hello World</Callout>\n\n<Callout title=\"Title\">Hello World</Callout>\n```\n\n----------------------------------------\n\nTITLE: Initializing Home Layout Links - TSX\nDESCRIPTION: This code snippet shows how to pass the `baseOptions` and an empty `links` array to the `HomeLayout` component in Fumadocs. It imports `HomeLayout` from `fumadocs-ui/layouts/home` and `baseOptions` from `@/app/layout.config`. The empty `links` array is highlighted, enabling custom links for the home layout. The component uses `ReactNode` for the children.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/navigation/links.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HomeLayout } from 'fumadocs-ui/layouts/home';\nimport { baseOptions } from '@/app/layout.config';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <HomeLayout\n      {...baseOptions}\n      links={[]} // [!code highlight]\n    >\n      {children}\n    </HomeLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic CodeBlock with Advanced Options\nDESCRIPTION: Shows how to implement DynamicCodeBlock with custom themes and component overrides. Includes configuration for light/dark themes and custom component rendering.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/dynamic-codeblock.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DynamicCodeBlock } from 'fumadocs-ui/components/dynamic-codeblock';\n\n<DynamicCodeBlock\n  lang=\"ts\"\n  code='console.log(\"Hello World\")'\n  options={{\n    themes: {\n      light: 'github-light',\n      dark: 'github-dark',\n    },\n    components: {\n      // override components (e.g. `pre` and `code`)\n    },\n    // other Shiki options\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Filters in Search UI (React/TSX)\nDESCRIPTION: This code demonstrates how to add UI for changing filters in the search functionality. It requires configuring the Tag Filter on the search server first.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/search.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RootProvider } from 'fumadocs-ui/root-provider';\n\n<RootProvider\n  search={{\n    options: {\n      defaultTag: 'value',\n      tags: [\n        {\n          name: 'Tag Name',\n          value: 'value',\n        },\n      ],\n    },\n  }}\n>\n  {children}\n</RootProvider>;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Link Implementation in MDX\nDESCRIPTION: Shows how to use dynamic links in MDX content with internationalization support.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/internationalization.mdx#2025-04-23_snippet_6\n\nLANGUAGE: mdx\nCODE:\n```\nimport { DynamicLink } from 'fumadocs-core/dynamic-link';\n\n<DynamicLink href=\"/[lang]/another-page\">This is a link</DynamicLink>\n```\n\n----------------------------------------\n\nTITLE: Configure Fumadocs OpenAPI Source\nDESCRIPTION: Configures the Fumadocs source by creating an OpenAPI instance using `createOpenAPI` from `fumadocs-openapi/server`. The `attachFile` function is used to add a badge to each page item in the page tree. The pages are rendered on server-side.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/index.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { createOpenAPI, attachFile } from 'fumadocs-openapi/server';\nimport { loader } from 'fumadocs-core/source';\n\nexport const source = loader({\n  pageTree: {\n    // [!code ++] adds a badge to each page item in page tree\n    attachFile,\n  },\n});\n\nexport const openapi = createOpenAPI({\n  // options\n});\n```\n\n----------------------------------------\n\nTITLE: Using Search Client Hook\nDESCRIPTION: Implementation of the search client hook for client-side search functionality.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/orama.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDocsSearch } from 'fumadocs-core/search/client';\n\nconst client = useDocsSearch({\n  type: 'fetch',\n});\n```\n\n----------------------------------------\n\nTITLE: Upgrading Existing Next.js Docs with pnpm\nDESCRIPTION: This bash command updates all dependencies interactively and recursively using pnpm, which is the recommended way to upgrade an existing Next.js documentation setup to Fumadocs v15.2.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v15-2.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm update -i -r\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS with ESM Syntax for Fumadocs UI\nDESCRIPTION: Shows how to use ESM syntax in Tailwind CSS configuration for Fumadocs UI. This is required due to the migration of the Tailwind CSS plugin to ESM-only.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v13.mdx#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { createPreset } from 'fumadocs-ui/tailwind-plugin';\n\n/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    './app/**/*.{ts,tsx}',\n    // others\n  ],\n  presets: [createPreset()],\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of getGithubLastEdit Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getGithubLastEdit function from fumadocs-core/server to retrieve the last edit time of a file in a GitHub repository. It requires the repository owner, name, and file path as parameters.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/utils/git-last-edit.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getGithubLastEdit } from 'fumadocs-core/server';\n\nconst time = await getGithubLastEdit({\n  owner: 'fuma-nama',\n  repo: 'fumadocs',\n  // example: \"content/docs/index.mdx\"\n  path: `content/docs/${page.file.path}`,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Index Page (React/TypeScript)\nDESCRIPTION: Creates a React component for the blog index page, displaying a grid of blog post previews with links to individual posts.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/make-a-blog.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link';\nimport { blog } from '@/lib/source';\n\nexport default function Home() {\n  const posts = blog.getPages();\n\n  return (\n    <main className=\"grow container mx-auto px-4 py-8\">\n      <h1 className=\"text-4xl font-bold mb-8\">Latest Blog Posts</h1>\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        {posts.map((post) => (\n          <Link\n            key={post.url}\n            href={post.url}\n            className=\"block bg-fd-secondary rounded-lg shadow-md overflow-hidden p-6\"\n          >\n            <h2 className=\"text-xl font-semibold mb-2\">{post.data.title}</h2>\n            <p className=\"mb-4\">{post.data.description}</p>\n          </Link>\n        ))}\n      </div>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Code Blocks with Tabs Component - MDX/TypeScript\nDESCRIPTION: Shows the previous method of rendering tabbed code blocks in MDX documentation using the <Tabs /> component. Includes TypeScript code blocks assigned to different tabs and placed within a <Tabs> wrapper. This relies on correct MDX parsing, the Tabs component (likely from Fumadocs UI or similar), and properly formatted tab items. Required dependencies: MDX support and Fumadocs UI Tabs.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v15.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<Tabs items={[\\\"Tab 1\\\", \\\"Tab 2\\\"]}>\\n\\n```ts tab=\\\"Tab 1\\\"\\nconsole.log('Hello World');\\n```\\n\\n```ts tab=\\\"Tab 2\\\"\\nconsole.log('Hello World');\\n```\\n\\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Installing Required Fumadocs Packages\nDESCRIPTION: Initial package installation command for Fumadocs core dependencies\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/manual-installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfumadocs-ui fumadocs-core\n```\n\n----------------------------------------\n\nTITLE: Customizing Table of Contents Popover in Fumadocs UI (TSX)\nDESCRIPTION: Demonstrates customization of the Table of Contents popover behavior on small devices by setting 'tableOfContentPopover' prop on DocsPage. This allows passing configuration options to control how the TOC popover is rendered. Requires DocsPage (imported from 'fumadocs-ui/page') and an options object defined as per Fumadocs documentation. Used in React TSX projects.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/page.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsPage } from 'fumadocs-ui/page';\n\n<DocsPage tableOfContentPopover={options}>...</DocsPage>;\n\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation with APIPage Component in JSX\nDESCRIPTION: This JSX snippet utilizes the `APIPage` component to render API documentation for special event management. It specifies the source OpenAPI document (`./fixtures/museum.yaml`) and lists the specific API operations (paths and methods for GET, POST, PATCH, DELETE) to be included on the page. The `hasHead={true}` prop likely indicates that a header section should be included.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/museum/events.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{/* This file was generated by Fumadocs. Do not edit this file directly. Any changes should be made by running the generation command again. */}\n\n<APIPage document={\"./fixtures/museum.yaml\"} operations={[{\"path\":\"/special-events\",\"method\":\"get\"},{\"path\":\"/special-events\",\"method\":\"post\"},{\"path\":\"/special-events/{eventId}\",\"method\":\"get\"},{\"path\":\"/special-events/{eventId}\",\"method\":\"patch\"},{\"path\":\"/special-events/{eventId}\",\"method\":\"delete\"}]} webhooks={[]} hasHead={true} />\n```\n\n----------------------------------------\n\nTITLE: Defining Collections in Fumadocs MDX v10\nDESCRIPTION: Shows how to define collections in the new source.config.ts file. This introduces the concept of collections for organizing content files.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/mdx-v10-summary.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineDocs } from 'fumadocs-mdx/config';\n\nexport const { docs, meta } = defineDocs({\n  dir: 'content/docs',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an Icon Item - TSX\nDESCRIPTION: This code snippet demonstrates how to define an icon item within the `links` array in Fumadocs' `baseOptions`. It imports `BookIcon` from `lucide-react` and `BaseLayoutProps` from `fumadocs-ui/layouts/shared`.  Icon items are secondary by default.  The `label` property is used for `aria-label`. The code is from `app/layout.config.tsx`.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/navigation/links.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BookIcon } from 'lucide-react';\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport const baseOptions: BaseLayoutProps = {\n  links: [\n    {\n      type: 'icon',\n      label: 'Visit Blog', // `aria-label`\n      icon: <BookIcon />,\n      text: 'Blog',\n      url: '/blog',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Required Styles\nDESCRIPTION: CSS imports for Tailwind and Fumadocs UI\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/manual-installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n@import 'fumadocs-ui/css/neutral.css';\n@import 'fumadocs-ui/css/preset.css';\n```\n\n----------------------------------------\n\nTITLE: Auto Type Table Usage in MDX\nDESCRIPTION: Example of using auto-type-table component in MDX files\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/typescript.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<auto-type-table path=\"./path/to/file.ts\" name=\"MyInterface\" />\n```\n\n----------------------------------------\n\nTITLE: Integrating GithubInfo in Documentation Layout\nDESCRIPTION: Demonstrates how to integrate the GithubInfo component into a documentation layout using the DocsLayout component with custom link configuration.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/github-info.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsLayout, type DocsLayoutProps } from 'fumadocs-ui/layouts/notebook';\nimport type { ReactNode } from 'react';\nimport { baseOptions } from '@/app/layout.config';\nimport { source } from '@/lib/source';\nimport { GithubInfo } from 'fumadocs-ui/components/github-info';\n\nconst docsOptions: DocsLayoutProps = {\n  ...baseOptions,\n  tree: source.pageTree,\n  links: [\n    {\n      type: 'custom',\n      children: (\n        <GithubInfo owner=\"fuma-nama\" repo=\"fumadocs\" className=\"lg:-mx-2\" />\n      ),\n    },\n  ],\n};\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return <DocsLayout {...docsOptions}>{children}</DocsLayout>;\n}\n```\n\n----------------------------------------\n\nTITLE: Changing remarkToc to remarkHeading in Typescript\nDESCRIPTION: This snippet showcases the change from `remarkToc` to `remarkHeading` in MDX plugins. The `remarkHeading` plugin now extracts table of contents and adds the `id` property to all heading elements.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n- import { remarkToc } from \"next-docs-zeta/mdx-plugins\"\n+ import { remarkHeading } from \"next-docs-zeta/mdx-plugins\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata for Blog Posts (React/TypeScript)\nDESCRIPTION: Sets up metadata for individual blog post pages, including title and description.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/make-a-blog.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { notFound } from 'next/navigation';\nimport { blog } from '@/lib/source';\n\nexport async function generateMetadata(props: {\n  params: Promise<{ slug: string }>;\n}) {\n  const params = await props.params;\n  const page = blog.getPage([params.slug]);\n\n  if (!page) notFound();\n\n  return {\n    title: page.data.title,\n    description: page.data.description,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: DocsPage URL Property Addition - Diff\nDESCRIPTION: Highlights the addition of the required `url` property to the `<DocsPage />` component. You must pass the URL of current page to `<DocsPage />` component.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\nexport default function Page({ params }) {\n  return (\n    <DocsPage\n+      url={page.url}\n      toc={page.data.toc}\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Params Generation for Next.js\nDESCRIPTION: Shows how to generate static parameters for Next.js pages using the Fumadocs source.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/source-api.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { source } from '@/lib/source';\n\nexport function generateStaticParams() {\n  return source.generateParams();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TS2JS Transformation in Markdown\nDESCRIPTION: Illustrates how to enable the TypeScript-to-JavaScript transformation for a specific code block within a Markdown or MDX file. Add the `ts2js` meta tag after the language identifier (`tsx` in this case).\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-ts2js.mdx#2025-04-23_snippet_5\n\nLANGUAGE: md\nCODE:\n```\n```tsx ts2js\nimport { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return <div>{children}</div>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting up MDX Components with Code Block Support\nDESCRIPTION: Implementation of MDX components configuration with CodeBlock and Pre components for syntax highlighting support.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/mdx/codeblock.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport defaultComponents from 'fumadocs-ui/mdx';\nimport type { MDXComponents } from 'mdx/types';\nimport { CodeBlock, Pre } from 'fumadocs-ui/components/codeblock';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultComponents,\n    // HTML `ref` attribute conflicts with `forwardRef`\n    pre: ({ ref: _ref, ...props }) => (\n      <CodeBlock {...props}>\n        <Pre>{props.children}</Pre>\n      </CodeBlock>\n    ),\n    ...components,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a doc collection in Fumadocs MDX\nDESCRIPTION: TypeScript configuration for defining a document collection that processes Markdown and MDX files. This specifies how Fumadocs will handle documents in a specific directory.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollections } from 'fumadocs-mdx/config';\n\nexport const test = defineCollections({\n  type: 'doc',\n  dir: 'content/docs',\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing MDX Components with Auto Type Table - TypeScript/React\nDESCRIPTION: Configuration for setting up Auto Type Table in MDX components with TypeScript compiler integration\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/auto-type-table.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport defaultComponents from 'fumadocs-ui/mdx';\nimport type { MDXComponents } from 'mdx/types';\nimport { createGenerator } from 'fumadocs-typescript';\nimport { AutoTypeTable } from 'fumadocs-typescript/ui';\n\nconst generator = createGenerator();\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultComponents,\n    AutoTypeTable: (props) => (\n      <AutoTypeTable {...props} generator={generator} />\n    ),\n    ...components,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Remark TS2JS\nDESCRIPTION: Installs the necessary packages `fumadocs-docgen` (which contains the plugin) and `oxc-transform` (the underlying transformer) using a package manager like npm, yarn, or pnpm. These packages are required for the remark plugin to function.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-ts2js.mdx#2025-04-23_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nfumadocs-docgen oxc-transform\n```\n\n----------------------------------------\n\nTITLE: Initializing Base Layout Links (Shared Options) - TSX\nDESCRIPTION: This code snippet initializes the `links` array within the `baseOptions` object, which is used to configure the shared layout properties in Fumadocs. The `links` array is highlighted, indicating where custom links can be added. This configuration is located in `app/layout.config.tsx` and uses `BaseLayoutProps` type from `fumadocs-ui/layouts/shared`.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/navigation/links.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport const baseOptions: BaseLayoutProps = {\n  links: [], // [!code highlight]\n  // other options\n};\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Search Dialog UI in Fumadocs (React/TSX)\nDESCRIPTION: This code snippet shows how to use the built-in SearchDialog component from Fumadocs UI to create a custom search dialog. This is useful when you want to use the pre-built UI instead of creating your own from scratch.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/search.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  SearchDialog,\n  type SharedProps,\n} from 'fumadocs-ui/components/dialog/search';\n\nexport default function CustomSearchDialog(props: SharedProps) {\n  return <SearchDialog {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using APIPage Component to Render Multiple API Endpoints (JSX)\nDESCRIPTION: This JSX snippet demonstrates the usage of the `APIPage` component, likely within an MDX or React environment (common in Fumadocs). It renders API documentation by referencing an external OpenAPI specification file (`document`) and specifying an array of operations (`operations`) to include. Each operation object defines the HTTP method and path for an endpoint (e.g., GET /v1/apis.getApi, POST /v1/apis.createApi). The `hasHead={true}` prop might influence whether the component manages the page's head metadata.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/apis.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"./fixtures/unkey.json\"} operations={[{\"method\":\"get\",\"path\":\"/v1/apis.getApi\"},{\"method\":\"post\",\"path\":\"/v1/apis.createApi\"},{\"method\":\"get\",\"path\":\"/v1/apis.listKeys\"},{\"method\":\"post\",\"path\":\"/v1/apis.deleteApi\"}]} hasHead={true} />\n```\n\n----------------------------------------\n\nTITLE: Using GitHub Token with getGithubLastEdit Function in TypeScript\nDESCRIPTION: This example shows how to pass a GitHub token to the getGithubLastEdit function for a higher rate limit. It's recommended to use a token to avoid reaching rate limits, especially in development mode.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/utils/git-last-edit.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getGithubLastEdit } from 'fumadocs-core/server'\n\n const time = await getGithubLastEdit({\n    ...,\n    token: `Bearer ${process.env.GIT_TOKEN}`\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Generation in Fumadocs Loader\nDESCRIPTION: Demonstrates how to customize URL generation for pages, including support for internationalization and custom base URLs.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/source-api.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loader } from 'fumadocs-core/source';\n\nloader({\n  baseUrl: '/docs',\n  // or you can customise it with function\n  url(slugs, locale) {\n    if (locale) return '/' + [locale, 'docs', ...slugs].join('/');\n    return '/' + ['docs', ...slugs].join('/');\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Built-in Plugin Options in Collection Config\nDESCRIPTION: Demonstrates how to customize built-in plugin options at the collection level.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/mdx.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollections, getDefaultMDXOptions } from 'fumadocs-mdx/config';\n\nexport const blog = defineCollections({\n  type: 'doc',\n  mdxOptions: getDefaultMDXOptions({\n    rehypeCodeOptions: {\n      // options\n    },\n    remarkImageOptions: {\n      // options\n    },\n    remarkHeadingOptions: {\n      // options\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: MDX API Page Example\nDESCRIPTION: This MDX snippet demonstrates the usage of the <APIPage> component within a Fumadocs project. It defines the title, specifies that it's a full page, sets the HTTP method and route, and then renders the <APIPage> component with configurations for operations and the absence of a head. It is rendered server-side with React Server Components.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/CHANGELOG.md#_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: Delete Api\nfull: true\nmethod: POST\nroute: /v1/apis.deleteApi\n---\n\n<APIPage\n  operations={[{ path: '/v1/apis.deleteApi', method: 'post' }]}\n  hasHead={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Combined Blog and Docs Map Structure\nDESCRIPTION: Demonstrates how multiple content types were previously combined into a single map object, highlighting the lack of collection separation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/mdx-v10.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const map = {\n  'blog/post.mdx': import('./blog/post.mdx'),\n  'docs/index.mdx': import('./docs/index.mdx'),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Compiler with Typescript Generator\nDESCRIPTION: Setup for using remarkAutoTypeTable plugin with MDX compiler\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/typescript.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remarkAutoTypeTable, createGenerator } from 'fumadocs-typescript';\nimport { compile } from '@mdx-js/mdx';\n\nconst generator = createGenerator();\n\nawait compile('...', {\n  remarkPlugins: [[remarkAutoTypeTable, { generator }]],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Dynamic CodeBlock in React\nDESCRIPTION: Demonstrates basic usage of the DynamicCodeBlock component for client-side code highlighting.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/dynamic-codeblock.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DynamicCodeBlock } from 'fumadocs-ui/components/dynamic-codeblock';\n\n<DynamicCodeBlock lang=\"ts\" code='console.log(\"Hello World\")' />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Navigation with Fumadocs\nDESCRIPTION: Shows how to create a navigation section using Cards component with multiple Card elements linking to external documentation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/content-collections/content/docs/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards>\n  <Card title=\"Learn more about Next.js\" href=\"https://nextjs.org/docs\" />\n  <Card title=\"Learn more about Fumadocs\" href=\"https://fumadocs.vercel.app\" />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Fumadocs Loader\nDESCRIPTION: Basic setup of the Fumadocs loader with a content source. Creates a source object that provides unified interface for content management.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/source-api.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loader } from 'fumadocs-core/source';\nimport { docs } from '@/.source';\n\nexport const source = loader({\n  source: docs.toFumadocsSource(),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding remark-ts2js Plugin with MDX Compiler (TypeScript)\nDESCRIPTION: Demonstrates how to add the `remarkTypeScriptToJavaScript` plugin when using the `@mdx-js/mdx` compiler directly. The plugin is imported and included in the `remarkPlugins` array passed to the `compile` function.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-ts2js.mdx#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { remarkTypeScriptToJavaScript } from 'fumadocs-docgen/remark-ts2js';\nimport { compile } from '@mdx-js/mdx';\n\nawait compile('...', {\n  remarkPlugins: [remarkTypeScriptToJavaScript],\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Type Names\nDESCRIPTION: Example of using @remarks tsdoc tag to specify custom type names\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/typescript.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyInterface {\n  /**\n   * @remarks `timestamp` Returned by API.\n   */\n  time: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using remarkDocGen - TypeScript\nDESCRIPTION: This snippet shows how to use the remarkDocGen plugin with a fileGenerator to generate documentation. It assumes you have remark configured and are adding the plugin to the remark pipeline.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/typescript/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remarkDocGen, fileGenerator } from 'fumadocs-docgen';\n\nremark().use(remarkDocGen, { generators: [fileGenerator()] });\n```\n\n----------------------------------------\n\nTITLE: Creating a Metadata Image API Wrapper - TypeScript\nDESCRIPTION: Defines a metadata image generator using Fumadocs's createMetadataImage function. Wraps configuration for Next.js Metadata API to generate OG images for documentation. Dependencies: 'fumadocs-core/server', project source. The config object specifies image route and source context.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v14.mdx#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { createMetadataImage } from 'fumadocs-core/server';\nimport { source } from '@/lib/source';\n\nexport const metadataImage = createMetadataImage({\n  imageRoute: '/docs-og',\n  source,\n});\n\n```\n\n----------------------------------------\n\nTITLE: I18nProvider Usage Update - TSX\nDESCRIPTION: Demonstrates the updated usage of the `I18nProvider` component. The `locale` and `onChange` props are no longer required as routing is now handled internally. The `LanguageSelect` component automatically detects available options.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<I18nProvider\n  translations={{\n    cn: {\n      name: 'Chinese', // required\n      search: 'Translated Content',\n    },\n  }}\n></I18nProvider>\n```\n\n----------------------------------------\n\nTITLE: Access Pages and Page Tree with Source API (TypeScript)\nDESCRIPTION: Demonstrates how to access pages and the generated page tree using the Source API in a TypeScript environment. It shows how to retrieve a page by its slugs and then access its MDX output, table of contents, and structured data.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/content-collections/index.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getPage } from '@/lib/source';\n\nconst page = getPage(slugs);\n\n// MDX output\npage?.data.body;\n\n// Table of contents\npage?.data.toc;\n\n// Structured Data, for Search API\npage?.data.structuredData;\n```\n\n----------------------------------------\n\nTITLE: Update Tailwind CSS Configuration\nDESCRIPTION: This snippet demonstrates how to update your Tailwind CSS configuration to use the `cssPrefix` option in the `createPreset` function from `fumadocs-ui/tailwind-plugin`. It sets the CSS prefix to `fd` to avoid conflicts with existing styles.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { createPreset } from 'fumadocs-ui/tailwind-plugin';\n\n/** @type {import('tailwindcss').Config} */\nexport default {\n  presets: [\n    createPreset({\n      cssPrefix: 'fd',\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n Support in Fumadocs UI Layout\nDESCRIPTION: Shows how to enable internationalization support in the Fumadocs UI layout. This code snippet adds a language switch to the Docs Layout component.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v12.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return <DocsLayout i18n>{children}</DocsLayout>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fumadocs MDX with Typescript Generator\nDESCRIPTION: Configuration setup for using remarkAutoTypeTable plugin with Fumadocs MDX\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/typescript.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remarkAutoTypeTable, createGenerator } from 'fumadocs-typescript';\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nconst generator = createGenerator();\n\nexport default defineConfig({\n  mdxOptions: {\n    remarkPlugins: [[remarkAutoTypeTable, { generator }]],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Remark Admonition in Fumadocs MDX\nDESCRIPTION: Configuration setup for using remarkAdmonition plugin in Fumadocs MDX source configuration file. Shows how to include the plugin in mdxOptions.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-admonition.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remarkAdmonition } from 'fumadocs-core/mdx-plugins';\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  mdxOptions: {\n    remarkPlugins: [remarkAdmonition],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using APIPage Component\nDESCRIPTION: Demonstrates how to use the APIPage component in MDX files for custom API documentation pages.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/configurations.mdx#2025-04-23_snippet_13\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: Delete Api\nfull: true\n---\n\n<APIPage\n  document=\"./unkey.json\"\n  operations={[{ path: '/v1/apis.deleteApi', method: 'post' }]}\n  hasHead={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Integrating Rehype Code Plugin with MDX Compiler\nDESCRIPTION: Shows how to add the Rehype Code plugin to the MDX compilation process using @mdx-js/mdx.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/rehype-code.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compile } from '@mdx-js/mdx';\nimport { rehypeCode } from 'fumadocs-core/mdx-plugins';\n\nawait compile('...', {\n  rehypePlugins: [rehypeCode],\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating DocsCategory Component Usage (TSX)\nDESCRIPTION: This code snippet illustrates how to use the new `from` prop in the `DocsCategory` component instead of the `pages` prop.  The `from` prop now expects the Source API object, which is typically obtained using `source.getPage` function.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { source } from '@/lib/source';\nimport { DocsCategory } from 'fumadocs-ui/page';\n\nconst page = source.getPage(params.slug);\n\n<DocsCategory page={page} from={source} />;\n```\n\n----------------------------------------\n\nTITLE: DocsPage URL and Tree Properties Removal - Diff\nDESCRIPTION: Highlights the removal of `url` and `tree` properties from the `DocsPage` component. These properties are now passed via React Context API for more flexible access within the component tree. The footer property structure has been updated to allow specifying or replacing the default footer component.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\nexport default async function Page({ params }) {\n  return (\n    <DocsPage\n-      url={page.url}\n-      tree={pageTree}\n    >\n      ...\n    </DocsPage>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing fumadocs-docgen Package (Bash)\nDESCRIPTION: Shows the command to install the `fumadocs-docgen` package using a package manager (like npm, yarn, or pnpm). This package provides remark plugins for automatic documentation generation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-docgen.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```package-install\nfumadocs-docgen\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Key Management API Documentation with APIPage Component (JavaScript)\nDESCRIPTION: This JavaScript/JSX snippet renders the API documentation for key management operations using a React-like APIPage component. It links the documentation structure to an OpenAPI JSON fixture and specifies available endpoints for managing keys (get, delete, create, verify, update, and get verifications). Dependencies include a compatible React environment and APIPage component capable of consuming OpenAPI fixtures. The key parameters include the OpenAPI document, a list of operation objects with HTTP methods and paths, and a flag for document heading rendering. The expected output is a structured, navigable API documentation UI. This code assumes the presence of required API specification files and related frontend components.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/keys.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<APIPage document={\"./fixtures/unkey.json\"} operations={[{\"method\":\"get\",\"path\":\"/v1/keys.getKey\"},{\"method\":\"post\",\"path\":\"/v1/keys.deleteKey\"},{\"method\":\"post\",\"path\":\"/v1/keys.createKey\"},{\"method\":\"post\",\"path\":\"/v1/keys.verifyKey\"},{\"method\":\"post\",\"path\":\"/v1/keys.updateKey\"},{\"method\":\"post\",\"path\":\"/v1/keys.updateRemaining\"},{\"method\":\"get\",\"path\":\"/v1/keys.getVerifications\"}]} hasHead={true} />\n```\n\n----------------------------------------\n\nTITLE: Adding a GitHub URL - TSX\nDESCRIPTION: This code snippet shows how to add a GitHub repository link using the `githubUrl` property in Fumadocs' `baseOptions`.  It imports `BaseLayoutProps` from `fumadocs-ui/layouts/shared`. Setting `githubUrl` automatically adds a link to the specified repository. This snippet is from `app/layout.config.tsx`.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/navigation/links.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport const baseOptions: BaseLayoutProps = {\n  githubUrl: 'https://github.com',\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Banner Component in React Layout\nDESCRIPTION: Shows how to add a Banner component at the top of a root layout for displaying announcements. This basic implementation places the Banner before the main content within the body of an HTML document.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/banner.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Banner } from 'fumadocs-ui/components/banner';\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}): React.ReactElement {\n  return (\n    <html lang=\"en\">\n      <body>\n        <Banner>Hello World</Banner>\n        {children}\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Update I18nProvider Usage\nDESCRIPTION: This snippet demonstrates how to update the usage of the `I18nProvider` component from `fumadocs-ui/i18n`. It involves providing the `locale` prop and configuring the component with translations and locale information for internationalization support.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RootProvider } from 'fumadocs-ui/provider';\nimport type { ReactNode } from 'react';\nimport { I18nProvider } from 'fumadocs-ui/i18n';\n\nexport default function Layout({\n  params: { lang },\n  children,\n}: {\n  params: { lang: string };\n  children: ReactNode;\n}) {\n  return (\n    <html lang={lang}>\n      <body>\n        <I18nProvider\n          locale={lang}\n          // options\n          locales={\n            [\n              {\n                name: 'English',\n                locale: 'en',\n              },\n              {\n                name: 'Chinese',\n                locale: 'cn',\n              },\n            ]\n          }\n          // translations\n          translations={\n            {\n              cn: {\n                toc: '目錄',\n                search: '搜尋文檔',\n                lastUpdate: '最後更新於',\n                searchNoResult: '沒有結果',\n                previousPage: '上一頁',\n                nextPage: '下一頁',\n              },\n            }[lang]\n          }\n        >\n          <RootProvider>{children}</RootProvider>\n        </I18nProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RootProvider with I18n Support\nDESCRIPTION: Shows how to use the new RootProvider component with i18n configuration, replacing the deprecated I18nProvider.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/new-conventions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<RootProvider\n  i18n={\n    // i18n provider props\n  }\n>\n  {children}\n</RootProvider>\n```\n\n----------------------------------------\n\nTITLE: Migrating APIPage Component\nDESCRIPTION: This code snippet demonstrates how to migrate the `APIPage` component from `fumadocs-openapi` to `fumadocs-openapi/ui`. This change was introduced to prevent Next.js from compiling React components twice.  It involves updating the import path and passing props using `openapi.getAPIPageProps`.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/CHANGELOG.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport defaultComponents from 'fumadocs-ui/mdx';\nimport { APIPage } from 'fumadocs-openapi/ui';\nimport { openapi } from '@/lib/source';\nimport type { MDXComponents } from 'mdx/types';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultComponents,\n    // use this instead\n    APIPage: (props) => <APIPage {...openapi.getAPIPageProps(props)} />,\n    ...components,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Twoslash Components (After v2.0.0) in TypeScript\nDESCRIPTION: This snippet demonstrates the updated import paths required for Twoslash CSS and the `Popup` component following the changes in `fumadocs-twoslash` version 2.0.0. It shows importing CSS from `fumadocs-twoslash/twoslash.css` and UI components from `fumadocs-twoslash/ui` as part of the migration process.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/twoslash/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport 'fumadocs-twoslash/twoslash.css';\n\nimport { Popup } from 'fumadocs-twoslash/ui';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Bad Request Error Response (400)\nDESCRIPTION: This TypeScript interface defines the structure for a 400 Bad Request error response. It includes an `error` object containing the `code` ('BAD_REQUEST'), `docs` URL, `message` string, and `requestId` string, each with descriptive comments.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n```ts\nexport interface Response {\n  error: {\n    /**\n     * A machine readable error code.\n     */\n    code: \"BAD_REQUEST\";\n    /**\n     * A link to our documentation with more details about this error code\n     */\n    docs: string;\n    /**\n     * A human readable explanation of what went wrong\n     */\n    message: string;\n    /**\n     * Please always include the requestId in your error report\n     */\n    requestId: string;\n  };\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Fumadocs Components\nDESCRIPTION: Command to install specific named components directly without interactive selection.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/cli/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: package-install\nCODE:\n```\nnpx @fumadocs/cli add banner files\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Components with Mermaid\nDESCRIPTION: Extends default Fumadocs MDX components by adding the custom Mermaid component. This configuration allows the use of the Mermaid component in MDX files.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/mermaid.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport defaultMdxComponents from 'fumadocs-ui/mdx';\nimport { Mermaid } from '@/components/mdx/mermaid';\nimport type { MDXComponents } from 'mdx/types';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultMdxComponents,\n    Mermaid,\n    ...components,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with MDX\nDESCRIPTION: Next.js configuration setup with Fumadocs MDX integration\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/manual-installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMDX } from 'fumadocs-mdx/next';\n\nconst withMDX = createMDX();\n\n/** @type {import('next').NextConfig} */\nconst config = {\n  reactStrictMode: true,\n};\n\nexport default withMDX(config);\n```\n\n----------------------------------------\n\nTITLE: Extracting Items from a Folder in Fumadocs meta.json\nDESCRIPTION: This JSON snippet demonstrates how to extract items from a specific folder in the 'pages' property of meta.json for Fumadocs using the '...folder_name' syntax.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/page-conventions.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pages\": [\"guide\", \"...nested\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Authorization Header using fumadocs-ui Property Component (JSX)\nDESCRIPTION: This JSX snippet uses the `<Property>` component from the `fumadocs-ui` library to define the specification for an HTTP Authorization header. It indicates that the header name is 'Authorization', the expected format is 'Bearer <token>', it is required (`required={true}`), and it should be included in the request header (`In: header`).\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Property name={\"Authorization\"} type={\"Bearer <token>\"} required={true}>\n\nIn: `header`\n\n</Property>\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic MDX Map Export\nDESCRIPTION: Example of the basic MDX file mapping structure that exports file paths to their dynamic imports.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/mdx-v10.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const map = {\n  'docs/index.mdx': import('./docs/index.mdx'),\n  'docs/guide.mdx': import('./docs/guide.mdx'),\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Last Modified Time Property in Fumadocs TypeScript\nDESCRIPTION: This snippet demonstrates how to access the lastModified property for a document in Fumadocs. It shows both synchronous and asynchronous methods to retrieve and convert the timestamp to a JavaScript Date object.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/last-modified.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { source } from '@/lib/source';\n\nconst page = source.getPage(['...']);\n\nconsole.log(new Date(page.data.lastModified));\n// or with async mode:\nconst { lastModified } = await page.data.load();\nconsole.log(new Date(lastModified));\n```\n\n----------------------------------------\n\nTITLE: Installing Fumadocs CLI\nDESCRIPTION: Command to initialize and setup the Fumadocs CLI configuration.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/cli/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpx @fumadocs/cli\n```\n\n----------------------------------------\n\nTITLE: Fumadocs OpenAPI Generation Script\nDESCRIPTION: This JavaScript snippet demonstrates how to generate documentation files using the fumadocs-openapi package.  It imports the generateFiles function, specifies the input OpenAPI specification file(s) and the output directory, and then calls generateFiles to perform the documentation generation. It requires Node.js runtime environment.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/CHANGELOG.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  input: ['./petstore.yaml'],\n  output: './content/docs',\n});\n```\n\n----------------------------------------\n\nTITLE: Headless Search Server Implementation\nDESCRIPTION: Example of implementing search server without Next.js using Express or Elysia.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/orama.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initAdvancedSearch } from 'fumadocs-core/search/server';\n\nconst server = initAdvancedSearch({\n  // options\n});\n\nserver.search('query', {\n  // you can specify `locale` and `tag` here\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Search Dialog Component\nDESCRIPTION: React component implementation for custom search dialog using Orama Cloud client and Fumadocs UI components.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/orama-cloud.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n'use client';\n\nimport { OramaClient } from '@oramacloud/client';\nimport type { SharedProps } from 'fumadocs-ui/components/dialog/search';\nimport SearchDialog from 'fumadocs-ui/components/dialog/search-orama';\n\nconst client = new OramaClient({\n  endpoint: '<endpoint_url>',\n  api_key: '<api_key>',\n});\n\nexport default function CustomSearchDialog(props: SharedProps) {\n  return <SearchDialog {...props} index=\"crawler\" client={client} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fumadocs CLI\nDESCRIPTION: Command to install the Fumadocs CLI tool which enables component installation and customization similar to Shadcn UI.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/customisation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @fumadocs/cli\n```\n\n----------------------------------------\n\nTITLE: Cards Component Implementation\nDESCRIPTION: Shows how to use the Cards component for creating linked card elements in documentation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/markdown.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<Cards>\n  <Card\n    href=\"https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating\"\n    title=\"Fetching, Caching, and Revalidating\"\n  >\n    Learn more about caching in Next.js\n  </Card>\n  <Card title=\"href is optional\">Learn more about `fetch` in Next.js.</Card>\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Replacing buildPageTree with createPageTreeBuilder\nDESCRIPTION: This snippet shows the change from `buildPageTree` to `createPageTreeBuilder` API.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n- import { buildPageTree } from 'next-docs-zeta/contentlayer'\n+ import { createPageTreeBuilder } from 'next-docs-zeta/server'\n```\n\n----------------------------------------\n\nTITLE: Implementing Tanstack Provider\nDESCRIPTION: Implementation of TanstackProvider component for Tanstack Start/Router framework integration with Fumadocs Core.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ReactNode } from 'react';\nimport { TanstackProvider } from 'fumadocs-core/framework/tanstack';\n\nexport function Root({ children }: { children: ReactNode }) {\n  return <TanstackProvider>{children}</TanstackProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Individual Blog Post Page (React/TypeScript)\nDESCRIPTION: Creates a React component for rendering individual blog posts, including the post content, author information, and publication date.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/make-a-blog.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { notFound } from 'next/navigation';\nimport Link from 'next/link';\nimport { InlineTOC } from 'fumadocs-ui/components/inline-toc';\nimport defaultMdxComponents from 'fumadocs-ui/mdx';\nimport { blog } from '@/lib/source';\n\nexport default async function Page(props: {\n  params: Promise<{ slug: string }>;\n}) {\n  const params = await props.params;\n  const page = blog.getPage([params.slug]);\n\n  if (!page) notFound();\n  const Mdx = page.data.body;\n\n  return (\n    <>\n      <div className=\"container rounded-xl border py-12 md:px-8\">\n        <h1 className=\"mb-2 text-3xl font-bold\">{page.data.title}</h1>\n        <p className=\"mb-4 text-fd-muted-foreground\">{page.data.description}</p>\n        <Link href=\"/blog\">Back</Link>\n      </div>\n      <article className=\"container flex flex-col px-4 py-8\">\n        <div className=\"prose min-w-0\">\n          <InlineTOC items={page.data.toc} />\n          <Mdx components={defaultMdxComponents} />\n        </div>\n        <div className=\"flex flex-col gap-4 text-sm\">\n          <div>\n            <p className=\"mb-1 text-fd-muted-foreground\">Written by</p>\n            <p className=\"font-medium\">{page.data.author}</p>\n          </div>\n          <div>\n            <p className=\"mb-1 text-sm text-fd-muted-foreground\">At</p>\n            <p className=\"font-medium\">\n              {new Date(page.data.date).toDateString()}\n            </p>\n          </div>\n        </div>\n      </article>\n    </>\n  );\n}\n\nexport function generateStaticParams(): { slug: string }[] {\n  return blog.getPages().map((page) => ({\n    slug: page.slugs[0],\n  }));\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Unkey API GET Request using cURL\nDESCRIPTION: Demonstrates how to make a GET request to the Unkey API using cURL. This example retrieves a specific key using the `keys.getKey` method, passing the `keyId` as a query parameter and including the necessary `Authorization` header with a bearer token.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/openapi/content/docs/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl \"https://api.unkey.dev/v1/keys.getKey?keyId=key_123\" \\\n  -H \"Authorization: Bearer <ROOT_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar in DocsLayout\nDESCRIPTION: Shows how to enable and customize the sidebar in the DocsLayout component. It includes options for enabling the sidebar and potentially replacing the default component.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\n\n<DocsLayout\n  sidebar={{\n    enabled: true,\n    // replace the default sidebar\n    // component:\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Transparent Mode for Navbar\nDESCRIPTION: Demonstrates how to set up transparent mode for the navbar background. It shows the configuration options for different transparency modes.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/docs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport const baseOptions: BaseLayoutProps = {\n  nav: {\n    transparentMode: 'top',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing MDX Dependencies\nDESCRIPTION: Package installation command for Fumadocs MDX support\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/manual-installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfumadocs-mdx @types/mdx\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Successful Rate Limit Response (200 OK)\nDESCRIPTION: This TypeScript interface defines the structure and types for a successful (200 OK) response object. It specifies the `success` (boolean), `limit` (number), `remaining` (number), and `reset` (number - Unix millisecond timestamp) properties along with documentation comments explaining each field.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n```ts\nexport interface Response {\n  /**\n   * Returns true if the request should be processed, false if it was rejected.\n   */\n  success: boolean;\n  /**\n   * How many requests are allowed within a window.\n   */\n  limit: number;\n  /**\n   * How many requests can still be made in the current window.\n   */\n  remaining: number;\n  /**\n   * A unix millisecond timestamp when the limits reset.\n   */\n  reset: number;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Migrate Typescript Integrations - DIFF\nDESCRIPTION: This diff shows how to migrate Typescript integrations from `fumadocs-ui` to `fumadocs-typescript`. It involves changing the import path for components like `AutoTypeTable` to be from `fumadocs-typescript/ui` instead of `fumadocs-ui/components/auto-type-table`.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n- import { AutoTypeTable } from \"fumadocs-ui/components/auto-type-table\"\n+ import { AutoTypeTable } from \"fumadocs-typescript/ui\"\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Theme Presets - JS\nDESCRIPTION: Shows how to use theme presets in the Tailwind CSS configuration. The `docsUi` plugin is configured with a `preset` option, demonstrating the usage of 'ocean' preset for theming.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nconst { docsUi, docsUiPlugins } = require('next-docs-ui/tailwind-plugin');\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  plugins: [\n    ...docsUiPlugins,\n    docsUi({\n      preset: 'ocean',\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for 400 Error Response\nDESCRIPTION: This TypeScript interface defines the structure of the error response for a 400 Bad Request. It includes detailed type information for each field in the error object.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Response {\n  error: {\n    /**\n     * A machine readable error code.\n     */\n    code: \"BAD_REQUEST\";\n    /**\n     * A link to our documentation with more details about this error code\n     */\n    docs: string;\n    /**\n     * A human readable explanation of what went wrong\n     */\n    message: string;\n    /**\n     * Please always include the requestId in your error report\n     */\n    requestId: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring remarkDocGen with MDX Compiler (TypeScript)\nDESCRIPTION: Illustrates how to use the `remarkDocGen` plugin with the core `@mdx-js/mdx` compiler. The plugin, along with the `fileGenerator`, is passed in the `remarkPlugins` array within the options object of the `compile` function.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-docgen.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts tab=\"MDX Compiler\"\nimport { remarkDocGen, fileGenerator } from 'fumadocs-docgen';\nimport { compile } from '@mdx-js/mdx';\n\nawait compile('...', {\n  remarkPlugins: [[remarkDocGen, { generators: [fileGenerator()] }]],\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX for Fumadocs\nDESCRIPTION: Basic configuration setup for integrating Fumadocs MDX with Next.js, including strict mode configuration.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/mdx/codeblock.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport createMDX from 'fumadocs-mdx/config';\n\nconst withMDX = createMDX();\n\n/** @type {import('next').NextConfig} */\nconst config = {\n  reactStrictMode: true,\n};\n\nexport default withMDX(config);\n```\n\n----------------------------------------\n\nTITLE: Migrate Files to Folder Component - DIFF\nDESCRIPTION: This diff illustrates the migration from the deprecated `Files` component with nested `File` components using the `title` prop to using the `Folder` component with the `name` prop.  It involves replacing the `Files` and nested `File` components with the `Folder` component and renaming the `title` prop to `name`. This assumes you are using the `fumadocs-ui/components/files` components.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- <Files>\n- <File title=\"folder\">\n- <File title=\"file.txt\" />\n- </File>\n- </Files>\n\n+ <Files>\n+ <Folder name=\"folder\">\n+ <File name=\"file.txt\" />\n+ </Folder>\n+ </Files>\n```\n\n----------------------------------------\n\nTITLE: Importing remarkTypeScriptToJavaScript using TypeScript\nDESCRIPTION: This TypeScript code snippet shows the updated import path for the `remarkTypeScriptToJavaScript` plugin after it was moved to `fumadocs-docgen/remark-ts2js` in version 2.0.0. This change was made to address issues with the previous implementation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/doc-gen/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { remarkTypeScriptToJavaScript } from 'fumadocs-docgen/remark-ts2js';\n```\n\n----------------------------------------\n\nTITLE: Content-Based Search Implementation\nDESCRIPTION: Example of implementing search using raw document content.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/orama.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { allDocs } from 'content-collections';\nimport { createSearchAPI } from 'fumadocs-core/search/server';\n\nexport const { GET } = createSearchAPI('simple', {\n  indexes: allDocs.map((docs) => ({\n    title: docs.title,\n    content: docs.content, // Raw Content\n    url: docs.url,\n  })),\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Blog Data with Runtime JS .map() - TypeScript\nDESCRIPTION: Provides an example of using the runtime .map() method in TypeScript to modify or transform imported blog data. Illustrates the future direction of Fumadocs by recommending JavaScript runtime transformations over legacy APIs. Required context: an importable 'blog' object or array.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v15.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { blog } from \\\"@/.source\\\"\\n\\nexport const updatedBlog = blog.map(...)\n```\n\n----------------------------------------\n\nTITLE: Example Blog Post in MDX Format\nDESCRIPTION: Demonstrates the structure of a blog post using MDX, including frontmatter with title, author, and date.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/make-a-blog.mdx#2025-04-23_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: Hello World\nauthor: Fuma Nama\ndate: 2024-12-15\n---\n\n## Hello World\n\nThis is an example!\n```\n\n----------------------------------------\n\nTITLE: Source API Virtual Storage Migration - Diff\nDESCRIPTION: This snippet illustrates the migration of the Source API virtual storage in Fumadocs. It shows the changes required to update how data is written and read to the storage, which improves performance. This involves changes to the arguments and methods used.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Diff\nCODE:\n```\n- storage.write('path.mdx', { type: 'page', ... })\n- storage.readPage('page')\n+ storage.write('path.mdx', 'page', { ... })\n+ storage.read('page', 'page')\n```\n\n----------------------------------------\n\nTITLE: Writing Math Equation Block in MDX\nDESCRIPTION: Example of how to write a math equation block in MDX documents using the math code fence, which will be processed by remark-math and rendered by KaTeX.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/math.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n```math\nc = \\pm\\sqrt{a^2 + b^2}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Type Table (New Syntax) using MDX\nDESCRIPTION: This MDX snippet demonstrates the new syntax introduced in fumadocs-docgen v2.0.0 for automatically generating a type table using the `remarkAutoTypeTable` plugin from `fumadocs-typescript`. It specifies the source file path and the interface name.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/doc-gen/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<auto-type-table path=\"./my-file.ts\" name=\"MyInterface\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tag Filters for Algolia Search (React/TSX)\nDESCRIPTION: This code shows how to configure tag filters for Algolia search in the Fumadocs UI search dialog component.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/search.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport SearchDialog from 'fumadocs-ui/components/dialog/search-algolia';\n\n<SearchDialog\n  defaultTag=\"value\"\n  tags={[\n    {\n      name: 'Tag Name',\n      value: 'value',\n    },\n  ]}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Custom Transformer Implementation\nDESCRIPTION: Shows how to implement custom transformers for virtual file-system operations.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/source-api.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loader } from 'fumadocs-core/source';\n\nloader({\n  transformers: [\n    ({ storage }) => {\n      storage.makeDir();\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing REST API Search Client\nDESCRIPTION: TypeScript implementation for client-side search using Orama Cloud REST API with Fumadocs core search functionality.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/orama-cloud.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDocsSearch } from 'fumadocs-core/search/client';\nimport { OramaClient } from '@oramacloud/client';\n\nconst client = new OramaClient();\n\nconst { search, setSearch, query } = useDocsSearch({\n  type: 'orama-cloud',\n  client,\n  params: {\n    // search params\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Nav Component Removal - Diff\nDESCRIPTION: Indicates the removal of the `Nav` component export and its replacement by the `Layout` component. This change suggests the navbar functionality is now integrated into the `Layout` component for improved consistency.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n- import { Nav } from \"fumadocs-ui/nav\"\n+ import { Layout } from \"fumadocs-ui/layout\"\n```\n\n----------------------------------------\n\nTITLE: Docs Layout with Locale Support\nDESCRIPTION: Implements the documentation layout component with internationalization support.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/internationalization.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ReactNode } from 'react';\nimport { source } from '@/lib/source';\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\nimport { baseOptions } from '@/app/layout.config';\n\nexport default async function Layout({\n  params,\n  children,\n}: {\n  params: Promise<{ lang: string }>;\n  children: ReactNode;\n}) {\n  const { lang } = await params;\n\n  return (\n    <DocsLayout {...baseOptions(lang)} tree={source.pageTree[lang]}>\n      {children}\n    </DocsLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example API Error Response for INTERNAL_SERVER_ERROR (JSON)\nDESCRIPTION: This JSON snippet shows a sample response for server-side errors, featuring all standard fields—error code, documentation URL, human message, and requestId—so clients can properly report and react to internal exceptions. It pairs with the \"INTERNAL_SERVER_ERROR\" TypeScript interface for comprehensive error handling.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_18\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"error\": {\n    \"code\": \"INTERNAL_SERVER_ERROR\",\n    \"docs\": \"https://unkey.dev/docs/api-reference/errors/code/INTERNAL_SERVER_ERROR\",\n    \"message\": \"string\",\n    \"requestId\": \"req_1234\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Remaining Pages in Fumadocs meta.json\nDESCRIPTION: This JSON snippet shows how to include remaining pages in the 'pages' property of meta.json for Fumadocs. It demonstrates the use of '...' to include remaining pages and '!name' to exclude specific pages.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/page-conventions.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pages\": [\"guide\", \"...\", \"!components\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding File as Configured Code Block with doc-gen:file (JSON)\nDESCRIPTION: This JSON configuration embeds file content as a code block with specific settings. It uses the `file` key for the source (`./fixtures/sample.txt`) and a `codeblock` object to define attributes: `lang` explicitly sets the language to `md` (Markdown), and `meta` adds metadata (`title=\\\"Hello World\\\"`) to the code block fence.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/doc-gen/test/fixtures/file-gen.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"file\": \"./fixtures/sample.txt\",\n  \"codeblock\": {\n    \"lang\": \"md\",\n    \"meta\": \"title=\\\"Hello World\\\"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Remark Image Plugin with MDX Compiler\nDESCRIPTION: Basic setup for using the remark-image plugin with MDX compiler.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compile } from '@mdx-js/mdx';\nimport { remarkImage } from 'fumadocs-core/mdx-plugins';\n\nawait compile('...', {\n  remarkPlugins: [remarkImage],\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Layout Modifications in Banner Component\nDESCRIPTION: Shows how to prevent the Banner component from automatically modifying Fumadocs layouts. By default, Banner uses a style tag to adjust layouts (like reducing sidebar height), but this can be disabled by setting the changeLayout prop to false.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/banner.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Banner } from 'fumadocs-ui/components/banner';\n\n<Banner changeLayout={false}>Hello World</Banner>;\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Navbar in DocsLayout\nDESCRIPTION: Shows how to replace the default navbar in the DocsLayout with a custom component. It includes setting the nav.component property and adjusting the CSS variable for navbar height.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/docs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { baseOptions } from '@/app/layout.config';\nimport { DocsLayout } from 'fumadocs-ui/layouts/notebook';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <DocsLayout\n      {...baseOptions}\n      nav={{\n        component: <CustomNavbar />,\n      }}\n    >\n      {children}\n    </DocsLayout>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --fd-nav-height: 80px !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Display Names\nDESCRIPTION: Shows how to configure custom display names for tags in OpenAPI schema.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/configurations.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n  - name: test\n    description: this is a tag.\n    x-displayName: My Test Name\n```\n\n----------------------------------------\n\nTITLE: Custom Heading ID Syntax\nDESCRIPTION: Example of using custom heading ID syntax in Markdown with the [#slug] notation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/headings.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# heading [#slug]\n```\n\n----------------------------------------\n\nTITLE: Bad Request Error Response Structure (JSON)\nDESCRIPTION: This JSON snippet shows the typical structure of an error response (HTTP 400 Bad Request) from the Unkey API when processing a `/v1/migrations.createKeys` request. It includes an `error` object containing a machine-readable `code` (\"BAD_REQUEST\"), a link to documentation (`docs`), a human-readable `message` explaining the issue, and a unique `requestId` for troubleshooting.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": {\n    \"code\": \"BAD_REQUEST\",\n    \"docs\": \"https://unkey.dev/docs/api-reference/errors/code/BAD_REQUEST\",\n    \"message\": \"string\",\n    \"requestId\": \"req_1234\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging 'Hello World' using TypeScript console\nDESCRIPTION: This TypeScript snippet, embedded within the document's frontmatter description, demonstrates the standard `console.log` function to output the string 'Hello World' to the console. It serves as a basic introductory code example.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/next-mdx/content/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconsole.log(\"Hello World\")\n```\n```\n\n----------------------------------------\n\nTITLE: Code Block Tab Example - MDX/JS\nDESCRIPTION: This snippet demonstrates how to create code blocks within tabs using MDX and JavaScript.  It involves importing the Tabs component and then including JavaScript code blocks inside of it, allowing the user to switch between different code samples. No specific dependencies or prerequisites beyond fumadocs-ui/components/tabs.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_4\n\nLANGUAGE: MDX\nCODE:\n```\nimport { Tabs } from 'fumadocs-ui/components/tabs';\n\n<Tabs items={[\"Tab 1\", \"Tab 2\"]}>\n\n```js tab=\"Tab 1\"\nconsole.log('Hello');\n```\n\n```js tab=\"Tab 2\"\nconsole.log('Hello');\n```\n\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Search in Root Provider\nDESCRIPTION: Setup for enabling static mode in the search client through RootProvider configuration. This allows search functionality to work in static exports by computing search on the browser side.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/static-export.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RootProvider } from 'fumadocs-ui/provider';\nimport type { ReactNode } from 'react';\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body>\n        <RootProvider\n          search={{\n            options: {\n              type: 'static', // [!code highlight]\n            },\n          }}\n        >\n          {children}\n        </RootProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Directory\nDESCRIPTION: Specifies the output directory for generated documentation files.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/configurations.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  output: '/content/docs',\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Typescript Interface Definition\nDESCRIPTION: Example of a simple Typescript interface definition\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/typescript.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MyInterface {\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Active Mode for Links - TSX\nDESCRIPTION: This code snippet shows how to configure the active state of a link using the `active` property in Fumadocs. It imports `BaseLayoutProps` from `fumadocs-ui/layouts/shared`. The `active` property can be set to `url`, `nested-url`, or `none` to control when the link is marked as active. This example is in `app/layout.config.tsx`.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/navigation/links.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport const baseOptions: BaseLayoutProps = {\n  links: [\n    {\n      text: 'Blog',\n      url: '/blog',\n      active: 'nested-url',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Layout\nDESCRIPTION: Root layout configuration with RootProvider setup\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/manual-installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RootProvider } from 'fumadocs-ui/provider';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          minHeight: '100vh',\n        }}\n      >\n        <RootProvider>{children}</RootProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Error Response Structure (JSON)\nDESCRIPTION: This JSON snippet illustrates the structure of an Unauthorized error response (HTTP 401) from the Unkey API, such as when calling `/v1/migrations.createKeys` without proper authentication. It includes an `error` object with a specific `code` (\"UNAUTHORIZED\"), a link to documentation (`docs`), a descriptive `message`, and a unique `requestId` for support.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": {\n    \"code\": \"UNAUTHORIZED\",\n    \"docs\": \"https://unkey.dev/docs/api-reference/errors/code/UNAUTHORIZED\",\n    \"message\": \"string\",\n    \"requestId\": \"req_1234\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tabs Implementation Without Values\nDESCRIPTION: Demonstrates tabs implementation without explicit values, using index-based detection. Not recommended for dynamic tabs.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/tabs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Tab, Tabs } from 'fumadocs-ui/components/tabs';\n\n<Tabs items={['Javascript', 'Rust']}>\n  <Tab>Javascript is weird</Tab>\n  <Tab>Rust is fast</Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Implementing MDX Components Configuration in TypeScript/React\nDESCRIPTION: Creates a getMDXComponents function that merges default MDX components with custom components. This provides a standard way to configure MDX components while maintaining default functionality.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/new-conventions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport defaultMdxComponents from 'fumadocs-ui/mdx';\nimport type { MDXComponents } from 'mdx/types';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultMdxComponents,\n    ...components,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating OpenAPI Playground with Scalar API Client - TypeScript\nDESCRIPTION: Shows how to set up the Fumadocs OpenAPI playground by importing createOpenAPI and APIPlayground and passing the Scalar renderer. Provides a factory for the OpenAPI object with Scalar support. Requires fumadocs-openapi/server and fumadocs-openapi/scalar as dependencies. Key parameter: renderer property with APIPlayground.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v15.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOpenAPI } from 'fumadocs-openapi/server';\\nimport { APIPlayground } from 'fumadocs-openapi/scalar';\\n\\nexport const openapi = createOpenAPI({\\n  renderer: {\\n    APIPlayground,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Using Internal Tag for Field Hiding\nDESCRIPTION: Example of using @internal tsdoc tag to hide interface fields\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/typescript.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyInterface {\n  /**\n   * @internal\n   */\n  cache: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended JSX Syntax Example\nDESCRIPTION: The recommended way to use Callouts directly in MDX using JSX syntax for better editor support and flexibility.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-admonition.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<Callout type='warn'>\n\nHello World\n\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Setting Layout Width\nDESCRIPTION: CSS variable definition for customizing the maximum width of the docs layout.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/theme.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --fd-layout-width: 1400px;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind CSS Preset Support\nDESCRIPTION: This code snippet demonstrates how to import the `fumadocs-openapi/css/preset.css` file into your project to enable Tailwind CSS support. It's highly recommended over the previous method and should be included in your CSS file. It imports the preset along with tailwind and other fumadocs styles.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/CHANGELOG.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n@import 'fumadocs-ui/css/neutral.css';\n@import 'fumadocs-ui/css/preset.css';\n/* do this */\n@import 'fumadocs-openapi/css/preset.css';\n```\n\n----------------------------------------\n\nTITLE: Disabling Sidebar Tabs in DocsLayout\nDESCRIPTION: This snippet shows how to disable sidebar tabs in the DocsLayout component by setting the tabs property to false.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/navigation/sidebar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\n\n<DocsLayout sidebar={{ tabs: false }} />;\n```\n\n----------------------------------------\n\nTITLE: Using Cards and Card Components in Fumadocs (JSX)\nDESCRIPTION: This snippet demonstrates how to use the `<Cards>` container component and nested `<Card>` components provided by Fumadocs to create a grid of visually distinct links. Each `<Card>` component typically accepts props like `title` for the card's heading and `href` for the link destination.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/create-app/template/+next/content/docs/test.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards>\n  <Card title=\"Learn more about Next.js\" href=\"https://nextjs.org/docs\" />\n  <Card title=\"Learn more about Fumadocs\" href=\"https://fumadocs.vercel.app\" />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Configuring serverExternalPackages in Next.js (JavaScript)\nDESCRIPTION: Updates the Next.js configuration file (`next.config.mjs`) to include `oxc-transform` in the `serverExternalPackages` array. This step is necessary because the transformation happens server-side, and Next.js needs to know about this external dependency.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-ts2js.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createMDX } from 'fumadocs-mdx/next';\n\n/** @type {import('next').NextConfig} */\nconst config = {\n  reactStrictMode: true,\n  serverExternalPackages: ['oxc-transform'],\n};\n\nconst withMDX = createMDX();\n\nexport default withMDX(config);\n```\n\n----------------------------------------\n\nTITLE: Example Files Tree Component Output\nDESCRIPTION: Sample TSX output showing the structure of a generated files tree component including folders and files.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/cli/index.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { File, Folder, Files } from 'fumadocs-ui/components/files';\n\nexport default (\n  <Files>\n    <Folder name=\"app\">\n      <File name=\"layout.tsx\" />\n      <File name=\"page.tsx\" />\n      <File name=\"global.css\" />\n    </Folder>\n    <Folder name=\"components\">\n      <File name=\"button.tsx\" />\n      <File name=\"tabs.tsx\" />\n      <File name=\"dialog.tsx\" />\n    </Folder>\n    <File name=\"package.json\" />\n  </Files>\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Page Metadata Including OG Image - TSX\nDESCRIPTION: A Next.js page-level function to generate metadata, including OG image, for dynamic routes. Implements fallback for not-found routes. Requires Next.js's navigation package, project source, and metadataImage. Takes route parameters and returns configuration for metadata, including title and description.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v14.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { source } from '@/lib/source';\nimport { metadataImage } from '@/lib/metadata';\nimport { notFound } from 'next/navigation';\n\nexport function generateMetadata({ params }: { params: { slug?: string[] } }) {\n  const page = source.getPage(params.slug);\n  if (!page) notFound();\n\n  return metadataImage.withImage(page.slugs, {\n    title: page.data.title,\n    description: page.data.description,\n  });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Successful Rate Limit (200 OK)\nDESCRIPTION: This JSON snippet illustrates the structure of a successful response (HTTP status 200) from the rate limiting endpoint. It includes a boolean `success` flag, the configured `limit`, the `remaining` requests allowed in the current window, and the `reset` timestamp (Unix milliseconds) when the limit resets.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"success\": true,\n  \"limit\": 10,\n  \"remaining\": 9,\n  \"reset\": 1709804263654\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Content in MDX\nDESCRIPTION: Shows how to include content from another Markdown file using the include tag with a relative path.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/include.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<include>./another.mdx</include>\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Configuration\nDESCRIPTION: This JavaScript snippet configures Tailwind CSS to include Fumadocs UI and OpenAPI components.  It imports necessary modules, defines the content array specifying the paths to Fumadocs UI and OpenAPI components, and uses the createPreset() function to apply Fumadocs-specific Tailwind presets. Required for TailwindCSS only fumadocs versions.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPreset, presets } from 'fumadocs-ui/tailwind-plugin';\n\n/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    './node_modules/fumadocs-ui/dist/**/*.js',\n    './node_modules/fumadocs-openapi/dist/**/*.js',\n  ],\n  presets: [createPreset()],\n};\n```\n\n----------------------------------------\n\nTITLE: Including Files with Custom Working Directory\nDESCRIPTION: Shows how to include files using a custom working directory (cwd) for path resolution instead of relative to the Markdown file.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/include.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<include cwd lang=\"tsx\" meta='title=\"lib.ts\"'>\n  ./script.ts\n</include>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Public Directory Path\nDESCRIPTION: Configuration examples for customizing the public directory path using both filesystem paths and URLs.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-image.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remarkImage } from 'fumadocs-core/mdx-plugins';\nimport path from 'node:path';\n\nexport default {\n  remarkPlugins: [\n    remarkImage,\n    {\n      publicDir: path.join(process.cwd(), 'dir'),\n    },\n  ],\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remarkImage } from 'fumadocs-core/mdx-plugins';\n\nexport default {\n  remarkPlugins: [\n    remarkImage,\n    {\n      publicDir: 'http://localhost:3000/images',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Options for Orama Search Server (React/TSX)\nDESCRIPTION: This snippet shows how to pass options to the search client, specifically changing the API endpoint for the Orama search server in Fumadocs UI.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/search.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RootProvider } from 'fumadocs-ui/root-provider';\n\n<RootProvider\n  search={{\n    options: {\n      api: '/api/search/docs',\n    },\n  }}\n>\n  {children}\n</RootProvider>;\n```\n\n----------------------------------------\n\nTITLE: Adding Postinstall Script\nDESCRIPTION: Package.json configuration for type generation\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/manual-installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"postinstall\": \"fumadocs-mdx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Generator with createGenerator API - TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a generator instance using the createGenerator API in fumadocs-typescript. It imports the createGenerator function and creates a generator object, which can then be used for generating documentation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/typescript/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createGenerator } from 'fumadocs-typescript';\n\nconst generator = createGenerator(tsconfig);\n```\n\n----------------------------------------\n\nTITLE: Filtering Search Indexes by Tag in Trieve API (JSON)\nDESCRIPTION: Provides a JSON query object instructing Trieve search APIs to filter search indexes by tag_set, ensuring only indexes with matching values are returned. Intended for direct use in API requests or as documentation reference for query construction. The must array allows for extension to more advanced query criteria.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/trieve.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"must\": [\n    {\n      \"field\": \"tag_set\",\n      \"match\": [\"value\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Order and Custom Items in Fumadocs meta.json\nDESCRIPTION: This JSON snippet demonstrates advanced configuration of the 'pages' property in meta.json for Fumadocs. It shows how to order pages, add separators, and include nested pages.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/page-conventions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Name of Folder\",\n  \"pages\": [\"guide\", \"components\", \"---My Separator---\", \"./nested/page\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request for Key Migration (cURL)\nDESCRIPTION: This cURL command sends a POST request to enqueue keys for migration. It includes a JSON payload with migration details, API ID, and an array of key configurations.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"https://api.unkey.dev/v1/migrations.enqueueKeys\" \\\n  -d '{\n  \"migrationId\": \"string\",\n  \"apiId\": \"string\",\n  \"keys\": [\n    {\n      \"prefix\": \"string\",\n      \"name\": \"my key\",\n      \"plaintext\": \"string\",\n      \"hash\": {\n        \"value\": \"string\",\n        \"variant\": \"sha256_base64\"\n      },\n      \"start\": \"unkey_32kq\",\n      \"ownerId\": \"team_123\",\n      \"meta\": {\n        \"billingTier\": \"PRO\",\n        \"trialEnds\": \"2023-06-16T17:16:37.161Z\"\n      },\n      \"roles\": [\n        \"admin\",\n        \"finance\"\n      ],\n      \"permissions\": [\n        \"domains.create_record\",\n        \"say_hello\"\n      ],\n      \"expires\": 1623869797161,\n      \"remaining\": 1000,\n      \"refill\": {\n        \"interval\": \"daily\",\n        \"amount\": 100\n      },\n      \"ratelimit\": {\n        \"type\": \"fast\",\n        \"limit\": 10,\n        \"duration\": 60000\n      },\n      \"enabled\": false,\n      \"environment\": \"string\"\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing Fumadocs Typescript Package\nDESCRIPTION: Command to install the fumadocs-typescript package\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/typescript.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfumadocs-typescript\n```\n\n----------------------------------------\n\nTITLE: Configuring VFile Data Exports in Global Config\nDESCRIPTION: Shows how to configure additional vfile.data properties to be exported from MDX files globally.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/mdx.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  mdxOptions: {\n    valueToExport: ['dataName'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Refactoring Map File Imports for Next-Docs-Zeta - diff\nDESCRIPTION: Shows the preferred structural change for importing map files in Next-Docs-Zeta v7. Instead of using '_map.ts', developers should use '.map.ts'. This migration is necessary for consistent integration with the latest loaders and source APIs. Ensure map files follow the recommended naming convention.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/mdx/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- import map from \"@/_map\"\n+ import map from \"@/.map\"\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Package installation command for required dependencies class-variance-authority and lucide-react.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/feedback.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nclass-variance-authority lucide-react\n```\n\n----------------------------------------\n\nTITLE: Importing Default MDX Components in TypeScript\nDESCRIPTION: Shows how to import the default MDX components package which includes Cards, Callouts, Code Blocks and Headings.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/mdx/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport defaultMdxComponents from 'fumadocs-ui/mdx';\n```\n\n----------------------------------------\n\nTITLE: Using Remark Admonition with MDX Compiler\nDESCRIPTION: Example of integrating remarkAdmonition plugin directly with the MDX compiler for processing content.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-admonition.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compile } from '@mdx-js/mdx';\nimport { remarkAdmonition } from 'fumadocs-core/mdx-plugins';\n\nawait compile('...', {\n  remarkPlugins: [remarkAdmonition],\n});\n```\n\n----------------------------------------\n\nTITLE: DocsPage Footer Property Update - TSX\nDESCRIPTION: Illustrates the new way to define footer items using the `footer` property in the `DocsPage` component. It allows customization of the items displayed in the page footer.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n<DocsPage footer={{ items: {} }}>...</DocsPage>\n```\n\n----------------------------------------\n\nTITLE: Node Operations in Fumadocs\nDESCRIPTION: Demonstrates how to work with page tree nodes and retrieve original page or meta file information.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/source-api.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { source } from '@/lib/source';\n\nsource.getNodePage(pageNode);\nsource.getNodeMeta(folderNode);\n```\n\n----------------------------------------\n\nTITLE: Initializing Page Source Loading with Next-Docs-MDX and Zeta - ts\nDESCRIPTION: Provides a TypeScript example of initializing documentation page loaders by integrating '.map' exports with 'createMDXSource' and Zeta's 'loader'. Required dependencies include 'next-docs-mdx', 'next-docs-zeta/source', and a corresponding map file. Key parameters: baseUrl (documentation base URI), rootDir (root content folder), and source (MDX content source). The output gives access to utility functions for fetching pages and building a page tree.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/mdx/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { map } from '@/.map';\nimport { createMDXSource } from 'next-docs-mdx';\nimport { loader } from 'next-docs-zeta/source';\n\nexport const { getPage, getPages, pageTree } = loader({\n  baseUrl: '/docs',\n  rootDir: 'docs',\n  source: createMDXSource(map),\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Implementation with Values in MDX\nDESCRIPTION: Shows how to implement basic tabs with explicit values using the Fumadocs UI Tabs component.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/tabs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Tab, Tabs } from 'fumadocs-ui/components/tabs';\n\n<Tabs items={['Javascript', 'Rust']}>\n  <Tab value=\"Javascript\">Javascript is weird</Tab>\n  <Tab value=\"Rust\">Rust is fast</Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Migrating from slugs to getSlugs in Typescript\nDESCRIPTION: This snippet highlights the change from using `slugs` to `getSlugs` when pre-bundling page URLs into raw pages.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromMap } from 'next-docs-mdx/map'\n\nfromMap({\n-  slugs: ...\n+  getSlugs: ...\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Page Frontmatter in MDX for Fumadocs\nDESCRIPTION: This snippet demonstrates how to define frontmatter in an MDX file for Fumadocs. It shows various properties like title, description, icon, and layout options.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/page-conventions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: My Page\ndescription: Best document ever\nicon: HomeIcon\nfull: true\n---\n\n## Learn More\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Banner to DocsLayout\nDESCRIPTION: This example demonstrates how to add a custom banner to the DocsLayout component. It combines base options with a custom sidebar banner.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/navigation/sidebar.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsLayout, type DocsLayoutProps } from 'fumadocs-ui/layouts/docs';\nimport type { ReactNode } from 'react';\nimport { baseOptions } from '@/app/layout.config';\nimport { source } from '@/lib/source';\n\nconst docsOptions: DocsLayoutProps = {\n  ...baseOptions,\n  tree: source.pageTree,\n  sidebar: {\n    banner: <div>Hello World</div>,\n  },\n};\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return <DocsLayout {...docsOptions}>{children}</DocsLayout>;\n}\n```\n\n----------------------------------------\n\nTITLE: Code Highlighting Migration - MD\nDESCRIPTION: This snippet shows the migration from meta string based highlighting to notation-based word/line highlighting. The primary goal of this change is to adopt the `rehype-shikiji` library. Read the docs of Shikiji for more information.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_8\n\nLANGUAGE: MD\nCODE:\n```\n```ts\n// [!code word:config]\nconst config = 'Hello'; // [!code highlight]\n\nsomething.call(config);\n```\n```\n\n----------------------------------------\n\nTITLE: MDX Compiler Configuration\nDESCRIPTION: Setup for using remark-install plugin with the MDX compiler directly\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/install.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compile } from '@mdx-js/mdx';\nimport { remarkInstall } from 'fumadocs-docgen';\n\nawait compile('...', {\n  remarkPlugins: [remarkInstall],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Accordions with Custom IDs for Navigation\nDESCRIPTION: Shows how to add an ID to an Accordion component to enable direct linking. When users navigate to a URL with this ID in the hash parameter, the accordion will automatically open.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/accordion.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Accordions>\n<Accordion title=\"My Title\" id=\"my-title\">\n\nMy Content\n\n</Accordion>\n</Accordions>\n```\n\n----------------------------------------\n\nTITLE: Install Fumadocs OpenAPI and Shiki\nDESCRIPTION: Installs the necessary packages for Fumadocs OpenAPI integration and Shiki for syntax highlighting.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/index.mdx#_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nfumadocs-openapi shiki\n```\n\n----------------------------------------\n\nTITLE: Disabling Search Functionality in Fumadocs UI (React/TSX)\nDESCRIPTION: This code snippet shows how to disable the document search functionality in Fumadocs UI by configuring the RootProvider component.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/search.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RootProvider } from 'fumadocs-ui/root-provider';\n\n<RootProvider\n  search={{\n    enabled: false,\n  }}\n>\n  {children}\n</RootProvider>;\n```\n\n----------------------------------------\n\nTITLE: Configuring VFile Data Exports in Collection Config\nDESCRIPTION: Demonstrates how to configure vfile.data exports at the collection level.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/mdx.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollections, getDefaultMDXOptions } from 'fumadocs-mdx/config';\n\nexport const blog = defineCollections({\n  type: 'doc',\n  mdxOptions: getDefaultMDXOptions({\n    valueToExport: ['dataName'],\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Code Samples\nDESCRIPTION: Implements custom code sample generation for API endpoints.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/configurations.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOpenAPI } from 'fumadocs-openapi/server';\n\nexport const openapi = createOpenAPI({\n  generateCodeSamples(endpoint) {\n    return [\n      {\n        lang: 'js',\n        label: 'JavaScript SDK',\n        source: \"console.log('hello')\",\n      },\n    ];\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Remark Heading Plugin in MDX\nDESCRIPTION: Demonstrates how to set up the remark heading plugin with MDX compiler for automatic heading ID generation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/headings.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compile } from '@mdx-js/mdx';\nimport { remarkHeading } from 'fumadocs-core/mdx-plugins';\n\nawait compile('...', {\n  remarkPlugins: [remarkHeading],\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Radix UI Primitive Usage\nDESCRIPTION: Demonstrates direct usage of Radix UI primitive components for custom tab implementations.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/tabs.mdx#2025-04-23_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Primitive } from 'fumadocs-ui/components/tabs';\n\n<Primitive.Tabs>\n  <Primitive.TabsList>\n    <Primitive.TabsTrigger />\n  </Primitive.TabsList>\n  <Primitive.TabsContent />\n</Primitive.Tabs>\n```\n\n----------------------------------------\n\nTITLE: Generating Docs with Code Blocks - MDX\nDESCRIPTION: This snippet shows how to use a doc-gen block within an MDX file to trigger documentation generation.  The generator specified in `doc-gen:<generator>` will be used to process the options object.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/typescript/CHANGELOG.md#_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n````mdx\n```json doc-gen:<generator>\n{\n  // options\n}\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Installing Fumadocs MDX and its dependencies\nDESCRIPTION: Command to install fumadocs-mdx and its TypeScript types using a package manager. This is the first step in setting up Fumadocs MDX for your Next.js application.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfumadocs-mdx @types/mdx\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for Fumadocs UI\nDESCRIPTION: Shows how to disable the default container styles added by Fumadocs UI in Tailwind CSS configuration. This allows for more control over the container styling.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v13.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { createPreset } from 'fumadocs-ui/tailwind-plugin';\n\n/** @type {import('tailwindcss').Config} */\nexport default {\n  presets: [\n    createPreset({\n      modifyContainer: false,\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: MDX Component Import Path Update - Diff\nDESCRIPTION: Shows the updated import paths for MDX components within the `fumadocs-ui` package. The components are now located in the `/components/*` directory instead of `/mdx/*`, which provides better consistency.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n- import { Card, Cards } from \"fumadocs-ui/mdx/card\"\n+ import { Card, Cards } from \"fumadocs-ui/components/card\"\n\n- import { Heading } from \"fumadocs-ui/mdx/heading\"\n+ import { Heading } from \"fumadocs-ui/components/heading\"\n\n- import { Codeblock, Pre } from \"fumadocs-ui/mdx/pre\"\n+ import { Codeblock, Pre } from \"fumadocs-ui/components/codeblock\"\n```\n\n----------------------------------------\n\nTITLE: Icon Card Implementation\nDESCRIPTION: Demonstrates how to add icons to cards using Lucide icons.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/markdown.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\nimport { HomeIcon } from 'lucide-react';\n\n<Cards>\n  <Card icon={<HomeIcon />} href=\"/\" title=\"Home\">\n    Go back to home\n  </Card>\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Implementing Headless TOC in React\nDESCRIPTION: Demonstrates the usage of the new headless Table of Contents (TOC) components, including separate AnchorProvider and ScrollProvider. This allows for more flexible placement of TOC elements.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v13.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Base from 'fumadocs-core/toc';\n\nreturn (\n  <Base.AnchorProvider>\n    <Base.ScrollProvider>\n      <Base.TOCItem />\n      <Base.TOCItem />\n    </Base.ScrollProvider>\n  </Base.AnchorProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Scalar API Client Stylesheet in Global CSS - CSS\nDESCRIPTION: Demonstrates importing the base stylesheet for Scalar API Client React into a global CSS file and assigning it to a base layer. This is crucial for correct styling of the OpenAPI playground. Dependency: @scalar/api-client-react must be installed. Key import file: '@scalar/api-client-react/style.css'.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v15.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n@import '@scalar/api-client-react/style.css' layer(base);\n```\n\n----------------------------------------\n\nTITLE: Configuring Shiki Transformers\nDESCRIPTION: Setup for Shiki code highlighting with Twoslash transformer integration\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/twoslash.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'fumadocs-mdx/config';\nimport { transformerTwoslash } from 'fumadocs-twoslash';\nimport { rehypeCodeDefaultOptions } from 'fumadocs-core/mdx-plugins';\n\nexport default defineConfig({\n  mdxOptions: {\n    rehypeCodeOptions: {\n      themes: {\n        light: 'github-light',\n        dark: 'github-dark',\n      },\n      transformers: [\n        ...(rehypeCodeDefaultOptions.transformers ?? []),\n        transformerTwoslash(),\n      ],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying a root property in meta.json\nDESCRIPTION: This snippet shows how to specify a `root` property in `meta.json` to use the nearest root folder as the root of the page tree.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Hello World\",\n  \"root\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering APIPage Component with OpenAPI Operations in React\nDESCRIPTION: Renders the APIPage React component, loading definitions from a specified OpenAPI YAML file and passing a list of HTTP operation objects as props. Required dependencies include React, the APIPage component from the local library, and the referenced YAML file with the API definition. The component expects an operations array with each object specifying the path and HTTP method; webhooks and hasHead are also provided as props. This code should be used within a React context where the APIPage and YAML resources are available.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/petstore.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"./fixtures/petstore.yaml\"} operations={[{\"path\":\"/pets\",\"method\":\"get\"},{\"path\":\"/pets\",\"method\":\"post\"},{\"path\":\"/pets/{petId}\",\"method\":\"get\"}]} webhooks={[]} hasHead={true} />\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation Utils with Validated Frontmatter Schema - ts\nDESCRIPTION: Shows a TypeScript example for using 'fromMap' with a validated 'frontmatter' schema extension via Zod in Next-Docs-MDX. Integrates custom frontmatter properties (e.g., 'preview') for MDX files, allowing for schema-validated content. Dependencies: 'next-docs-mdx/map', Zod for schema definition, and a '.map' file. Key parameters include 'rootDir', 'baseUrl', and a schema extended from defaultSchemas.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/mdx/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { defaultSchemas, fromMap } from 'next-docs-mdx/map';\n\nconst utils = fromMap(map, {\n  rootDir: 'docs/ui',\n  baseUrl: '/docs/ui',\n  schema: {\n    frontmatter: defaultSchemas.frontmatter.extend({\n      preview: z.string().optional(),\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Request Body Structure for Enqueuing Keys in JSON\nDESCRIPTION: Defines the structure of the request body for enqueuing keys. It includes an array of key objects, each containing an id and optional ownerId and meta fields.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keys\": [\n    {\n      \"id\": \"string\",\n      \"ownerId\": \"string\",\n      \"meta\": {}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Logging a Message in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to print a simple string message ('I love React!') to the console using `console.log`. It serves as a basic code example within the Fumadocs documentation page, illustrating how code blocks are rendered. No external dependencies are required beyond a standard TypeScript/JavaScript runtime.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/create-app/template/react-router/content/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconsole.log('I love React!');\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Source\nDESCRIPTION: Configuration for documentation source directory\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/manual-installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineDocs } from 'fumadocs-mdx/config';\n\nexport const docs = defineDocs({\n  dir: 'content/docs',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Cards Component in JSX for External Links\nDESCRIPTION: Uses the Cards and Card components to create a set of clickable cards linking to external resources. This component is likely part of the Fumadocs UI library for creating interactive documentation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/i18n/content/docs/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards>\n  <Card title=\"Learn more about Next.js\" href=\"https://nextjs.org/docs\" />\n  <Card title=\"Learn more about Fumadocs\" href=\"https://fumadocs.vercel.app\" />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Adding KaTeX Stylesheet to Next.js Layout\nDESCRIPTION: Code snippet showing how to import the KaTeX CSS stylesheet in the root layout file of a Next.js application to ensure proper rendering of mathematical equations on the client side.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/math.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport 'katex/dist/katex.css';\n```\n\n----------------------------------------\n\nTITLE: Declaring Scalar API Client React Dependency for Installation - Package Install\nDESCRIPTION: Specifies @scalar/api-client-react as a required npm/Yarn package to enable integration with Scalar API Client and OpenAPI playground. This step is necessary for projects that use the APIPlayground renderer. Must be executed by the developer in their package manager.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v15.mdx#2025-04-23_snippet_7\n\nLANGUAGE: package-install\nCODE:\n```\n@scalar/api-client-react\n```\n\n----------------------------------------\n\nTITLE: Migrating remarkDynamicContent - MDX\nDESCRIPTION: This snippet shows how to migrate from remarkDynamicContent to the new syntax using fileGenerator.  It demonstrates specifying the file to be included in the documentation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/typescript/CHANGELOG.md#_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n````mdx\n```json doc-gen:file\n{\n  \"file\": \"./path/to/my-file.txt\"\n}\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Admonition MDX Output Example\nDESCRIPTION: The resulting MDX output after processing the Admonition syntax, showing the transformed Callout component.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-admonition.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<Callout type='warn'>\n\nHello World\n\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Content Path for Next-Docs in Next.js - js\nDESCRIPTION: Demonstrates explicit configuration of the documentation root content path in 'createNextDocs' to revert to legacy directory structures. By setting 'rootContentPath', content can be stored under './content/docs' instead of the new default. This is essential for projects needing backward compatibility after upgrading next-docs integrations.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/mdx/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst withNextDocs = createNextDocs({\n  rootContentPath: './content/docs',\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Banner Variant in Fumadocs UI\nDESCRIPTION: Demonstrates how to change the default visual style of the Banner component by setting the variant prop. In this example, the 'rainbow' variant is applied to modify the Banner's appearance.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/banner.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Banner } from 'fumadocs-ui/components/banner';\n\n<Banner variant=\"rainbow\">Hello World</Banner>;\n```\n\n----------------------------------------\n\nTITLE: Specifying Last Updated Time for a DocsPage in Fumadocs UI (TSX)\nDESCRIPTION: Passes a Date object to the 'lastUpdate' prop of DocsPage to display the last updated time for a documentation page. The value is typically a JavaScript Date constructed from source metadata (e.g., Git or database). Requires DocsPage from 'fumadocs-ui/page'. This feature is opt-in and does not display by default. Used in TSX-based React with Fumadocs UI.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/page.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsPage } from 'fumadocs-ui/page';\n\n<DocsPage lastUpdate={new Date(lastModifiedTime)} />;\n\n```\n\n----------------------------------------\n\nTITLE: Installing Fumadocs MDX Remote Package\nDESCRIPTION: This command installs the @fumadocs/mdx-remote package, which is a helper for integrating Markdown-based content sources with Fumadocs.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/custom-source.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n@fumadocs/mdx-remote\n```\n\n----------------------------------------\n\nTITLE: Dynamic Card Generation\nDESCRIPTION: Example of dynamically generating cards based on page tree peers in Next.js.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/markdown.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getPageTreePeers } from 'fumadocs-core/server';\nimport { source } from '@/lib/source';\n\n<Cards>\n  {getPageTreePeers(source.pageTree, '/docs/my-page').map((peer) => (\n    <Card key={peer.url} title={peer.name} href={peer.url}>\n      {peer.description}\n    </Card>\n  ))}\n</Cards>;\n```\n\n----------------------------------------\n\nTITLE: Defining CONFLICT Error Response with TypeScript Interfaces\nDESCRIPTION: This TypeScript interface outlines the format for a \"CONFLICT\" error response from the API. It provides properties including the error code, reference documentation URL, explanatory message, and the request's unique identifier, ensuring clarity in reporting conflict situations such as resource version conflicts. The interface is suitable for robust compile-time checks in TypeScript projects.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Response {\n  error: {\n    /**\n     * A machine readable error code.\n     */\n    code: \"CONFLICT\";\n    /**\n     * A link to our documentation with more details about this error code\n     */\n    docs: string;\n    /**\n     * A human readable explanation of what went wrong\n     */\n    message: string;\n    /**\n     * Please always include the requestId in your error report\n     */\n    requestId: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NOT_FOUND Error Response with TypeScript Interfaces\nDESCRIPTION: This TypeScript interface specifies the structure for a \"NOT_FOUND\" error code in API responses. Key fields include a documentation link, error message, and unique request ID, making it easy to enforce consistent error handling for resources that cannot be located. It operates independently of external libraries and supports robust TypeScript error management.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Response {\n  error: {\n    /**\n     * A machine readable error code.\n     */\n    code: \"NOT_FOUND\";\n    /**\n     * A link to our documentation with more details about this error code\n     */\n    docs: string;\n    /**\n     * A human readable explanation of what went wrong\n     */\n    message: string;\n    /**\n     * Please always include the requestId in your error report\n     */\n    requestId: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Rate Limit Request using cURL\nDESCRIPTION: This snippet demonstrates how to make a POST request to the `/v1/ratelimits.limit` endpoint using cURL. It sends a JSON payload containing various rate limiting parameters like namespace, identifier, limit, duration, cost, async, metadata, and resources.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncurl -X POST \"https://api.unkey.dev/v1/ratelimits.limit\" \\\n  -d '{\n  \"namespace\": \"email.outbound\",\n  \"identifier\": \"user_123\",\n  \"limit\": 10,\n  \"duration\": 60000,\n  \"cost\": 2,\n  \"async\": false,\n  \"meta\": {\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  },\n  \"resources\": [\n    {\n      \"type\": \"project\",\n      \"id\": \"p_123\",\n      \"name\": \"dub\"\n    }\n  ]\n}'\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying an Informational Callout (JSX/MDX)\nDESCRIPTION: This snippet demonstrates how to create a simple informational callout using the `<Callout>` component. The `type` attribute is set to \"info\", indicating the callout's purpose. The text \"Hello World\" is the content displayed within the callout.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/test/fixtures/remark-admonition.output.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"info\">\n  Hello World\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Tree Generation\nDESCRIPTION: Example of customizing the page tree generation process with custom node properties and JSX support.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/source-api.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { loader } from 'fumadocs-core/source';\n\nloader({\n  pageTree: {\n    attachFile(node, file) {\n      // you can access its file information\n      console.log(file?.data);\n      // JSX nodes are allowed\n      node.name = <>Some JSX Nodes here</>;\n\n      return node;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Static Params with Source Helper - TypeScript\nDESCRIPTION: Implements generateStaticParams using the built-in source.generateParams() to streamline creation of SSG route parameters, including i18n support. Requires a valid source export containing documentation page data.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v14.mdx#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { source } from '@/lib/source';\n\nexport function generateStaticParams() {\n  return source.generateParams();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js as a Dev Dependency using npm\nDESCRIPTION: This command utilizes the Node Package Manager (npm) install command (`i` is shorthand for `install`) to download and add the 'next' package to the project. The '-D' flag ensures that the package is listed under 'devDependencies' in the `package.json` file, signifying it's required for development rather than runtime. This command requires Node.js and npm to be installed.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/doc-gen/test/fixtures/remark-install-persist.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next -D\n```\n\n----------------------------------------\n\nTITLE: Rendering Link Cards using Fumadocs Components in MDX\nDESCRIPTION: This MDX snippet utilizes custom `Cards` and `Card` components, presumably provided by the Fumadocs framework, to display a collection of clickable cards. The `Cards` component acts as a container, and each `Card` component renders a link with a specified `title` and target `href`. This demonstrates embedding interactive UI elements within Markdown content.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/create-app/template/+next/content/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<Cards>\n  <Card title=\"Learn more about Next.js\" href=\"https://nextjs.org/docs\" />\n  <Card title=\"Learn more about Fumadocs\" href=\"https://fumadocs.vercel.app\" />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Disabling TOC Generation in Remark Heading\nDESCRIPTION: Shows how to disable the automatic table of contents generation in the remark heading plugin configuration.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/headings.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remarkHeading } from 'fumadocs-core/mdx-plugins';\n\nexport default {\n  remarkPlugins: [[remarkHeading, { generateToc: false }]],\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Frontmatter\nDESCRIPTION: Adds custom frontmatter properties to generated MDX files.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/configurations.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  input: ['./petstore.yaml'],\n  output: './content/docs',\n  frontmatter: (title, description) => ({\n    myProperty: 'hello',\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Unauthorized Error Response (TypeScript)\nDESCRIPTION: This TypeScript interface defines the data structure for an Unauthorized error response (HTTP 401) from the Unkey API, relevant for endpoints like `/v1/migrations.createKeys`. The `Response` interface contains an `error` object detailing the `code` (\"UNAUTHORIZED\"), documentation link (`docs`), error `message`, and `requestId`, complete with JSDoc comments explaining each field.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nexport interface Response {\n  error: {\n    /**\n     * A machine readable error code.\n     */\n    code: \"UNAUTHORIZED\";\n    /**\n     * A link to our documentation with more details about this error code\n     */\n    docs: string;\n    /**\n     * A human readable explanation of what went wrong\n     */\n    message: string;\n    /**\n     * Please always include the requestId in your error report\n     */\n    requestId: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Icon Support in Fumadocs\nDESCRIPTION: Shows how to load and handle icons in the Fumadocs loader, including support for Lucide React icons and custom icon implementations.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/source-api.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loader } from 'fumadocs-core/source';\nimport { icons } from 'lucide-react';\nimport { createElement } from 'react';\n\nloader({\n  icon(icon) {\n    if (!icon) {\n      // You may set a default icon\n      return;\n    }\n\n    if (icon in icons) return createElement(icons[icon as keyof typeof icons]);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Generated Comments\nDESCRIPTION: Sets up auto-generated comments for documentation files with different options.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/configurations.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  input: ['./petstore.yaml'],\n  output: './content/docs',\n  // Add default comment\n  addGeneratedComment: true,\n\n  // Or provide a custom comment\n  addGeneratedComment: 'Custom auto-generated comment',\n\n  // Or disable comments\n  addGeneratedComment: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Update CodeBlock Usage in MDX\nDESCRIPTION: This snippet demonstrates how to update the usage of the `CodeBlock` component from `fumadocs-ui/components/codeblock`.  It involves passing all props, including class names, directly to the `CodeBlock` component and enabling `keepBackground` to retain code block background styling.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pre, CodeBlock } from 'fumadocs-ui/components/codeblock';\n\n<MDX\n  components={{\n    pre: ({ ref: _ref, ...props }) => (\n      <CodeBlock keepBackground {...props}>\n        <Pre>{props.children}</Pre>\n      </CodeBlock>\n    ),\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Defining Orama Cloud REST API Schema\nDESCRIPTION: JSON schema definition for structuring documentation content in Orama Cloud REST API index.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/orama-cloud.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"string\",\n  \"title\": \"string\",\n  \"url\": \"string\",\n  \"tag\": \"string\",\n  \"page_id\": \"string\",\n  \"section\": \"string\",\n  \"section_id\": \"string\",\n  \"content\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Last Modified Information - js\nDESCRIPTION: Documents how to retrieve the last modified timestamp for a documentation page after enabling the Git integration in 'createNextDocs'. The value can be found in 'page.data.exports.lastModified'. Relies on the configuration provided in the Next.js config for lastModifiedTime. Requires prior integration and build configuration.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/mdx/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\npage.data.exports.lastModified\n```\n\n----------------------------------------\n\nTITLE: Using Source API with MDX in Typescript\nDESCRIPTION: This snippet shows how to use the Source API to handle file-system based files with MDX. It demonstrates the unified interface by plugging in a content source using `createMDXSource` and using `loader` for configuring the base URL and root directory.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { map } from '@/.map';\nimport { createMDXSource } from 'next-docs-mdx';\nimport { loader } from 'next-docs-zeta/source';\n\nexport const { getPage, getPages, pageTree } = loader({\n  baseUrl: '/docs',\n  rootDir: 'docs',\n  source: createMDXSource(map),\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation Page with APIPage Component in React/JSX\nDESCRIPTION: This snippet renders the APIPage component, passing in relevant OpenAPI documentation and the specific API operation to document (GET /museum-hours). It depends on React and the APIPage component from the Fumadocs ecosystem. The main props include the path to a YAML OpenAPI file, the operations array specifying the HTTP method and path, and options such as webhooks and header status. The output is a rendered page that informs consumers about the GET /museum-hours endpoint. The component expects props like 'document', 'operations', 'webhooks', and 'hasHead'.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/museum/operations.mdx#2025-04-23_snippet_0\n\nLANGUAGE: React\nCODE:\n```\n<APIPage document={\"./fixtures/museum.yaml\"} operations={[{\"path\":\"/museum-hours\",\"method\":\"get\"}]} webhooks={[]} hasHead={true} />\n```\n\n----------------------------------------\n\nTITLE: Defining Bad Request Error Response (TypeScript)\nDESCRIPTION: This TypeScript interface defines the data structure for a Bad Request error response (HTTP 400) from the Unkey API, typically returned by the `/v1/migrations.createKeys` endpoint on invalid input. The `Response` interface contains an `error` object with properties for the error `code` ('BAD_REQUEST'), documentation link (`docs`), error `message`, and `requestId`, including descriptive JSDoc comments.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nexport interface Response {\n  error: {\n    /**\n     * A machine readable error code.\n     */\n    code: \"BAD_REQUEST\";\n    /**\n     * A link to our documentation with more details about this error code\n     */\n    docs: string;\n    /**\n     * A human readable explanation of what went wrong\n     */\n    message: string;\n    /**\n     * Please always include the requestId in your error report\n     */\n    requestId: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Base URL in Fumadocs\nDESCRIPTION: TypeScript code snippet showing how to configure a custom base URL for Fumadocs documentation in the source file.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/index.mdx#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { loader } from 'fumadocs-core/source';\n\nexport const source = loader({\n  baseUrl: '/info',\n  // other options\n});\n```\n\n----------------------------------------\n\nTITLE: Default Value Tabs Implementation\nDESCRIPTION: Shows how to set a default selected tab using defaultIndex property.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/tabs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<Tabs items={['Javascript', 'Rust']} defaultIndex={1}>\n  <Tab value=\"Javascript\">Javascript is weird</Tab>\n  <Tab value=\"Rust\">Rust is fast</Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Contentlayer Source Migration - Diff\nDESCRIPTION: This code demonstrates the migration of Contentlayer integration into a separate package.  It shows how to update import statements. This migration makes Contentlayer optional and Fumadocs MDX the default source.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Diff\nCODE:\n```\n- import { createContentlayerSource } from \"fumadocs-core/contentlayer\"\n+ import { createContentlayerSource } from \"fumadocs-contentlayer\"\n\n- import { createConfig } from \"fumadocs-core/contentlayer/configuration\"\n+ import { createConfig } from \"fumadocs-contentlayer/configuration\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Project Changelog - Markdown\nDESCRIPTION: This snippet uses Markdown to present a project's changelog. It lists versioned releases, categorizes updates as patch or minor changes, and references specific commits for traceability. No dependencies are required; contents are suitable for display on platforms like GitHub. Inputs follow Markdown conventions, and outputs are formatted for human-readable project update logs. The design is straightforward and supports manual editing.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/cli/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# fumadocs\n\n## 0.1.1\n\n### Patch Changes\n\n- 482f728: add home layout to customise option\n\n## 0.1.0\n\n### Minor Changes\n\n- 72a3e8c: Add customise command\n\n## 0.0.8\n\n### Patch Changes\n\n- 4be74f6: Improve CLI\n\n## 0.0.7\n\n### Patch Changes\n\n- a16bb23: Improve instructions in i18n plugin\n\n## 0.0.6\n\n### Patch Changes\n\n- 969da26: Improve i18n api\n\n## 0.0.5\n\n### Patch Changes\n\n- c8d9b08: support Next.js 15 i18n auto-config\n\n## 0.0.4\n\n### Patch Changes\n\n- b254ec2: Fix Windows path problems\n\n## 0.0.3\n\n### Patch Changes\n\n- 821e4a0: Fix src folder compatibility of plugins\n\n## 0.0.2\n\n### Patch Changes\n\n- 9d37020: Change name of the package to avoid npm errors\n\n## 0.0.1\n\n### Patch Changes\n\n- 75af7bc: Fix bin directive on index file\n```\n\n----------------------------------------\n\nTITLE: Conditional Execution of getGithubLastEdit in Development Mode\nDESCRIPTION: This snippet demonstrates how to conditionally skip the getGithubLastEdit function in development mode. This can be useful if the functionality is not needed during development.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/utils/git-last-edit.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nprocess.env.NODE_ENV === 'development'? null : getGithubLastEdit(...)\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample MDX File in Fumadocs\nDESCRIPTION: Example of creating a simple MDX file for Fumadocs documentation, demonstrating basic frontmatter and Markdown syntax.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: Hello World\n---\n\n## Yo what's up\n```\n\n----------------------------------------\n\nTITLE: Rendering Liveness Check API Documentation with APIPage Component in React (JSX)\nDESCRIPTION: This snippet demonstrates how to use the <APIPage> component to render documentation for a liveness endpoint. It references a local JSON OpenAPI fixture for endpoint metadata and specifies operations for the GET method on '/v1/liveness'. Used in the context of documentation platforms, it requires React and access to the fixtures/unkey.json file. Inputs are the document path and an operations array; outputs are rendered documentation for the endpoint.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/liveness.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"./fixtures/unkey.json\"} operations={[{\"method\":\"get\",\"path\":\"/v1/liveness\"}]} hasHead={true} />\n```\n\n----------------------------------------\n\nTITLE: Structuring Multilingual Content in Fumadocs\nDESCRIPTION: Demonstrates the file structure for multilingual documentation in Fumadocs. It shows how to name files for different locales, including content (MDX) and metadata (JSON) files. The default locale file is created without a specific locale code, while other languages use the '.{locale}' suffix.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/shared/page-conventions.i18n.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Files>\n  <Folder name=\"content/docs\" defaultOpen>\n    <File name=\"meta.json\" />\n    <File name=\"meta.cn.json\" />\n    <File name=\"get-started.mdx\" />\n    <File name=\"get-started.cn.mdx\" />\n  </Folder>\n</Files>\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Unauthorized Error (401)\nDESCRIPTION: This JSON snippet displays an example error response for an Unauthorized request (HTTP status 401), typically indicating missing or invalid authentication. The structure includes an `error` object with `code`, `docs`, `message`, and `requestId`.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"error\": {\n    \"code\": \"UNAUTHORIZED\",\n    \"docs\": \"https://unkey.dev/docs/api-reference/errors/code/UNAUTHORIZED\",\n    \"message\": \"string\",\n    \"requestId\": \"req_1234\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Auto Type Table Interface Example - TypeScript\nDESCRIPTION: Example TypeScript interface demonstrating the structure and JSDoc documentation for Auto Type Table usage\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/auto-type-table.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AutoTypeTableExample {\n    /**\n     * Markdown syntax like links, `code` are supported.\n     *\n     * See https://fumadocs.vercel.app/docs/ui/components/type-table\n     */\n    name: string;\n\n    /**\n    * We love Shiki.\n    *\n    * ```ts\n    * console.log(\"Hello World, powered by Shiki\");\n    * ```\n    */\n    options: Partial<{ a: unknown }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding an External Image using HTML `<img>` Tag\nDESCRIPTION: This HTML snippet uses the `<img>` tag to display an external image fetched from the specified URL (`https://picsum.photos/...`). It provides \"External\" as alternative text and sets the display width to 200 pixels and height to 300 pixels. The `src` attribute points to an absolute URL.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/test/fixtures/remark-image-without-import.output.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img alt=\"External\" src=\"https://picsum.photos/id/237/200/300\" width=\"200\" height=\"300\" />\n```\n\n----------------------------------------\n\nTITLE: Package Install Code Block Examples\nDESCRIPTION: Examples of different ways to use the package-install code blocks\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/install.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n```package-install\nmy-package\n```\n\n```package-install\nnpm i my-package -D\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Remark Image Without Imports\nDESCRIPTION: Configuration to disable static imports for local images.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-image.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remarkImage } from 'fumadocs-core/mdx-plugins';\n\nexport default {\n  remarkPlugins: [[remarkImage, { useImport: false }]],\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind CSS Imports\nDESCRIPTION: This CSS code snippet shows how to import Tailwind CSS and Fumadocs UI styles in a Fumadocs project. It includes the base Tailwind CSS import, Fumadocs UI neutral and preset styles, and optional imports for Twoslash and OpenAPI if they are enabled.  The `@source` directives are important for PurgeCSS to work correctly, file paths are relative to the CSS file itself.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n@import 'fumadocs-ui/css/neutral.css';\n@import 'fumadocs-ui/css/preset.css';\n/* if you have Twoslash enabled */\n@import 'fumadocs-twoslash/twoslash.css';\n\n@source '../node_modules/fumadocs-ui/dist/**/*.js';\n/* if you have OpenAPI enabled */\n@source '../node_modules/fumadocs-openapi/dist/**/*.js';\n```\n\n----------------------------------------\n\nTITLE: Feature Comparison Table - Additional Features\nDESCRIPTION: Markdown table comparing advanced features between Fumadocs and Nextra, focusing on OpenAPI integration, TypeScript documentation generation, and TypeScript Twoslash support.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/comparisons.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Feature                    | Fumadocs | Nextra |\n| -------------------------- | -------- | ------ |\n| OpenAPI Integration        | Yes      | No     |\n| TypeScript Docs Generation | Yes      | No     |\n| TypeScript Twoslash        | Yes      | Yes    |\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Content with Title\nDESCRIPTION: This snippet demonstrates a Markdown code block containing simple text ('Hello World' and 'This is some text'). It includes a title attribute ('Hello World') which might be used by a rendering engine or documentation tool for display purposes.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/doc-gen/test/fixtures/file-gen.output.md#2025-04-23_snippet_1\n\nLANGUAGE: md\nCODE:\n```\nHello World\n\nThis is some text\n```\n\n----------------------------------------\n\nTITLE: Defining Unkey API Endpoint Structure\nDESCRIPTION: Describes the general URL schema used for Unkey API endpoints, following an RPC style: `https://api.unkey.dev/{version}/{service}.{method}`. An example GET request endpoint to list keys (`/v1/apis.listKeys`) is provided.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/openapi/content/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.unkey.dev/{version}/{service}.{method}\n```\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.unkey.dev/v1/apis.listKeys\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js development server\nDESCRIPTION: Command to start the Next.js development server after configuring Fumadocs MDX. This will generate the .source folder and compile your MDX content.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/index.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnext dev\n```\n\n----------------------------------------\n\nTITLE: Exporting create function for Contentlayer configuration in Typescript\nDESCRIPTION: This snippet shows how to use the `create` function for Contentlayer configuration to include other document types or override the output configuration. It returns the fields and document types needed.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { create } from 'next-docs-zeta/contentlayer/configuration';\n\nconst config = create(options);\n\nexport default {\n  contentDirPath: config.contentDirPath,\n  documentTypes: [config.Docs, config.Meta],\n  mdx: config.mdx,\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Fumadocs UI Page in Full Mode in React (TSX)\nDESCRIPTION: Illustrates how to render a documentation page in full-width mode using Fumadocs UI's DocsPage component with the 'full' prop. Setting 'full' to true expands the page to occupy the entire available area. Requires importing DocsPage from 'fumadocs-ui/page'. This is ideal for layouts requiring maximum space, with responsive Table of Contents shown as a popover. Works in TSX/React with Fumadocs UI.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/page.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsPage } from 'fumadocs-ui/page';\n\n<DocsPage full>...</DocsPage>;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Mode in Docs Collection\nDESCRIPTION: Configuration setup for enabling Async Mode in a Fumadocs docs collection using defineDocs.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/async.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineDocs } from 'fumadocs-mdx/config';\n\nexport const docs = defineDocs({\n  dir: 'content/docs',\n  docs: {\n    async: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Feature Comparison Table - Basic Features\nDESCRIPTION: Markdown table comparing basic features between Fumadocs and Nextra, including static generation, caching, theming, and core documentation capabilities.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/comparisons.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Feature             | Fumadocs     | Nextra                    |\n| ------------------- | ------------ | ------------------------- |\n| Static Generation   | Yes          | Yes                       |\n| Cached              | Yes          | Yes                       |\n| Light/Dark Mode     | Yes          | Yes                       |\n| Syntax Highlighting | Yes          | Yes                       |\n| Table of Contents   | Yes          | Yes                       |\n| Full-text Search    | Yes          | Yes                       |\n| i18n                | Yes          | Yes                       |\n| Last Git Edit Time  | Yes          | Yes                       |\n| Page Icons          | Yes          | Yes, via `_meta.js` files |\n| RSC                 | Yes          | Yes                       |\n| Remote Source       | Yes          | Yes                       |\n| SEO                 | Via Metadata | Yes                       |\n| Built-in Components | Yes          | Yes                       |\n| RTL Layout          | Yes          | Yes                       |\n```\n\n----------------------------------------\n\nTITLE: Image Usage Syntax in MDX Files\nDESCRIPTION: Demonstrates how to include images in MDX files using both relative and public folder paths. This shows the syntax for embedding images that will be automatically optimized.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/performance.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n![Hello](./hello.png)\n\nor in public folder\n\n![Hello](/hello.png)\n```\n\n----------------------------------------\n\nTITLE: Example API Error Response for TOO_MANY_REQUESTS (JSON)\nDESCRIPTION: This sample JSON object illustrates the error payload for exceeding API rate limits. It includes a machine-readable error code, a documentation URL, human-readable message, and the unique request ID, providing clear feedback to clients about throttling events. The format is consistent with the associated TypeScript shape.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"error\": {\n    \"code\": \"TOO_MANY_REQUESTS\",\n    \"docs\": \"https://unkey.dev/docs/api-reference/errors/code/TOO_MANY_REQUESTS\",\n    \"message\": \"string\",\n    \"requestId\": \"req_1234\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example MDX Content\nDESCRIPTION: Sample MDX file structure with frontmatter\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/manual-installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: Hello World\n---\n\n## Introduction\n\nI love Anime.\n```\n\n----------------------------------------\n\nTITLE: Displaying Plain Hello World Text - txt\nDESCRIPTION: This snippet simply outputs a Hello World message along with an additional line of descriptive text. No dependencies or prerequisites are required, and there are no parameters or constraints. The input is static, and the output is intended to be read as plain text.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/doc-gen/test/fixtures/file-gen.relative.output.md#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nHello World\n\nThis is some text\n```\n\n----------------------------------------\n\nTITLE: MDX Component Separation - Diff\nDESCRIPTION: Illustrates the separation of MDX components into multiple files. You can import these components regardless it is either a client or a server component.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n- import { MDXContent } from \"next-docs-ui/mdx\"\n- import { MDXContent } from \"next-docs-ui/mdx-server\"\n\n+ import { DocsBody } from \"next-docs-ui/page\"\n```\n\nLANGUAGE: diff\nCODE:\n```\n- import { Card, Cards } from \"next-docs-ui/mdx\"\n+ import { Card, Cards } from \"next-docs-ui/mdx/card\"\n\n- import { Pre } from \"next-docs-ui/mdx\"\n+ import { Pre } from \"next-docs-ui/mdx/pre\"\n\n- import { Heading } from \"next-docs-ui/mdx\"\n+ import { Heading } from \"next-docs-ui/mdx/heading\"\n\n- import defaultComponents from \"next-docs-ui/mdx\"\n+ import defaultComponents from \"next-docs-ui/mdx/default-client\"\n\n- import defaultComponents from \"next-docs-ui/mdx-server\"\n+ import defaultComponents from \"next-docs-ui/mdx/default\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline Code in Markdown - Markdown\nDESCRIPTION: This snippet demonstrates the inclusion of inline code within a Markdown heading using backticks. No dependencies are needed; this is standard Markdown syntax for formatting code inline within text. The expected outcome is that the text 'code' will be rendered in a monospace font style within the heading, and is used for highlighting code elements or commands in technical documentation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/test/fixtures/remark-heading.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `code` here\n```\n\n----------------------------------------\n\nTITLE: Installing Fumadocs CLI for UI Customization\nDESCRIPTION: This command installs the Fumadocs CLI, which allows developers to customize the default styles or create a layout from scratch. It's designed to meet different customization needs while maintaining upgradeability.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/customise-ui.mdx#2025-04-23_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpx @fumadocs/cli customise\n```\n\n----------------------------------------\n\nTITLE: Including Code Files with Language Specification\nDESCRIPTION: Demonstrates two ways to include code files: basic inclusion and with language and metadata specifications.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/include.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<include>./script.ts</include>\n\n<include lang=\"tsx\" meta='title=\"lib.ts\"'>\n  ./script.ts\n</include>\n```\n\n----------------------------------------\n\nTITLE: Initiating Unkey Key Creation Request (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates initiating a POST request to the Unkey `/v1/migrations.createKeys` endpoint using the `fetch` API. This is a basic example; a complete implementation would require adding authorization headers (e.g., 'Bearer token') and the JSON request body payload containing the key details, similar to the cURL example. Requires a JavaScript environment supporting the fetch API.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfetch(\"https://api.unkey.dev/v1/migrations.createKeys\", {\n  method: \"POST\"\n});\n```\n\n----------------------------------------\n\nTITLE: Migrate DocsLayout links to secondary - DIFF\nDESCRIPTION: This diff shows how to migrate from the deprecated `nav.links` option to using `links` with `type: 'secondary'` in `DocsLayout`.  It involves adding the `links` prop with the desired link information and removing the `nav` prop.  The `GithubIcon` component is assumed to be imported elsewhere.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n<DocsLayout\n+  links={[\n+    {\n+      type: 'secondary',\n+      text: 'Github',\n+      url: 'https://github.com',\n+      icon: <GithubIcon />,\n+      external: true,\n+    },\n+  ]}\n-  nav={{\n-    links: [\n-      {\n-        icon: <GithubIcon />,\n-        href: 'https://github.com',\n-        label: 'Github',\n-        external: true,\n-      },\n-    ],\n-  }}\n>\n  {children}\n</DocsLayout>\n```\n\n----------------------------------------\n\nTITLE: Logging Output with JavaScript Console\nDESCRIPTION: This snippet demonstrates the use of the console.log function in JavaScript to output the string 'Hello World' to the browser or Node.js console. No external dependencies or prerequisites are needed. The main input is a string, and the output is the message printed to standard output. This is a basic usage example, suitable for verifying code block rendering or basic JavaScript functionality.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/react-router/content/docs/test.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconsole.log('Hello World');\n```\n\n----------------------------------------\n\nTITLE: Configuring I18nProvider with New Props in React\nDESCRIPTION: Demonstrates the updated usage of I18nProvider component with new props for better i18n support. It shows how to pass the locale, available locales, and translations directly.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v13.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RootProvider } from 'fumadocs-ui/provider';\nimport type { ReactNode } from 'react';\nimport { I18nProvider } from 'fumadocs-ui/i18n';\n\nexport default function Layout({\n  params: { lang },\n  children,\n}: {\n  params: { lang: string };\n  children: ReactNode;\n}) {\n  return (\n    <html lang={lang}>\n      <body>\n        <I18nProvider\n          locale={lang}\n          // options\n          locales={[\n            {\n              name: 'English',\n              locale: 'en',\n            },\n            {\n              name: 'Chinese',\n              locale: 'cn',\n            },\n          ]}\n          // translations\n          translations={\n            {\n              cn: {\n                toc: '目錄',\n              },\n            }[lang]\n          }\n        >\n          <RootProvider>{children}</RootProvider>\n        </I18nProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Logging a Message to the Console in JavaScript\nDESCRIPTION: This JavaScript snippet prints a \\\"Hello World\\\" message to the browser's console. It serves as a basic example for beginners to verify console output functionality in a web environment. No external dependencies are required; the code can be run in any JavaScript runtime such as Node.js or in a browser developer console.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/i18n/content/docs/test.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconsole.log('Hello World');\n```\n\n----------------------------------------\n\nTITLE: Generating Files Tree (MDX)\nDESCRIPTION: Command to generate a files tree in MDX format from a directory structure.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/cli/index.mdx#2025-04-23_snippet_5\n\nLANGUAGE: package-install\nCODE:\n```\nnpx @fumadocs/cli tree ./my-dir ./output.mdx\n```\n\n----------------------------------------\n\nTITLE: Syncing Trieve Search Indexes from Static Export (JavaScript ES Modules)\nDESCRIPTION: Uses a Node.js script in ESM format to read the exported static search data, parse it, instantiate the Trieve SDK client (with admin credentials), and invoke the sync function to update Trieve's search index. Requires fs module, trieve-fumadocs-adapter, and trieve-ts-sdk. The script should be run after building the website to ensure the indexes include new or updated content.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/trieve.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as fs from 'node:fs';\nimport { sync } from 'trieve-fumadocs-adapter/search/sync';\nimport { TrieveSDK } from 'trieve-ts-sdk';\n\nconst content = fs.readFileSync('.next/server/app/static.json.body');\n\n// now you can pass it to `sync`\n/** @type {import('trieve-fumadocs-adapter/search/sync').TrieveDocument[]} **/\nconst records = JSON.parse(content.toString());\n\nconst client = new TrieveSDK({\n  apiKey: 'adminApiKey',\n  datasetId: 'datasetId',\n});\n\nsync(client, records);\n```\n\n----------------------------------------\n\nTITLE: Escaping Link Styles in JSX with data-card - JSX\nDESCRIPTION: Demonstrates how to render an <a> element with the data-card attribute to override Tailwind CSS typography styles for links. Useful for preventing inherited styles on composed components.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v14.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<a data-card=\"\">\n  No styles applied <code>But it does</code>\n</a>\n\n```\n\n----------------------------------------\n\nTITLE: Refactoring fromMap Migration Steps for Next-Docs-MDX - diff\nDESCRIPTION: Illustrates the updated migration path due to next-docs-mdx changes, showing the replacement of the 'slugs' option with 'getSlugs' in the mapping configuration. This new configuration pattern is necessary for compatibility with recent API changes and may affect adapter integrations for obtaining URLs. Developers should update configuration accordingly.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/mdx/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\nimport { fromMap } from 'next-docs-mdx/map'\n\nfromMap({\n-  slugs: ...\n+  getSlugs: ...\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Fumadocs Components with CLI - Bash\nDESCRIPTION: Runs the Fumadocs CLI command using pnpm to add UI components to the workspace. Requires the CLI to be installed and pnpm as the package manager. Used for scaffolding or updating documentation UI parts.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v14.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm fumadocs add\n\n```\n\n----------------------------------------\n\nTITLE: Example API Error Response for FORBIDDEN (JSON)\nDESCRIPTION: This JSON sample demonstrates the structure of a forbidden error response from the API. It highlights all required fields—error code, link to further documentation, message, and requestId—so that API consumers can anticipate the payload received on permission errors. The structure matches the corresponding TypeScript interface.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"error\": {\n    \"code\": \"FORBIDDEN\",\n    \"docs\": \"https://unkey.dev/docs/api-reference/errors/code/FORBIDDEN\",\n    \"message\": \"string\",\n    \"requestId\": \"req_1234\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Table of Contents in Fumadocs UI Using the 'clerk' Style (TSX)\nDESCRIPTION: Configures the Table of Contents to use a 'clerk' inspired style by setting the 'style' option inside 'tableOfContent' prop for DocsPage. Customizes visual appearance to resemble Clerk.com. Requires DocsPage from 'fumadocs-ui/page'. Intended for React/TSX with Fumadocs UI and an options object supporting the 'style' property.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/page.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsPage } from 'fumadocs-ui/page';\n\n<DocsPage\n  tableOfContent={{\n    style: 'clerk',\n  }}\n>\n  ...\n</DocsPage>;\n\n```\n\n----------------------------------------\n\nTITLE: Filtering Search Indexes by Tag via useTrieveSearch Hook (TypeScript)\nDESCRIPTION: Initializes the useTrieveSearch hook with an optional tag value to filter search results on the client side. Like earlier usage, this requires instantiation of a TrieveSDK client and passing the tag value as a parameter. Enables real-time tag-based filtering in a TypeScript React environment.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/trieve.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TrieveSDK } from 'trieve-ts-sdk';\nimport { useTrieveSearch } from 'trieve-fumadocs-adapter/search/trieve';\n\nconst client = new TrieveSDK({\n  apiKey: 'readOnlyApiKey',\n  datasetId: 'datasetId',\n});\n\nconst { search, setSearch, query } = useTrieveSearch(\n  client,\n  undefined,\n  '<your tag value>',\n);\n```\n\n----------------------------------------\n\nTITLE: Meta.json Root Property - JSON\nDESCRIPTION: Illustrates the usage of `root` property in `meta.json`. You can specify a `root` property in `meta.json`, the nearest root folder will be used as the root of page tree instead.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Hello World\",\n  \"root\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Persistent Tabs Configuration\nDESCRIPTION: Configuration for enabling persistent tab selection with Fumadocs UI\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/install.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remarkInstall } from 'fumadocs-docgen';\n\nconst config = {\n  remarkPlugins: [\n    [\n      remarkInstall,\n      {\n        persist: {\n          id: 'some-id',\n        },\n      },\n    ],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Rehype TOC Output Structure\nDESCRIPTION: Shows the JSX output structure generated by the Rehype TOC plugin, including nested code elements.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/headings.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport const toc = [\n  {\n    title: (\n      <>\n        Hello <code>code</code>\n      </>\n    ),\n    depth: 2,\n    url: '#hello-code',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Example API Error Response for CONFLICT (JSON)\nDESCRIPTION: This JSON snippet provides a typical conflict error payload for API consumers, outlining all standard fields—code, docs, message, and requestId—needed for handling conflicting resource states or update errors in clients. The structure aligns with the TypeScript interface for conflict errors.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"error\": {\n    \"code\": \"CONFLICT\",\n    \"docs\": \"https://unkey.dev/docs/api-reference/errors/code/CONFLICT\",\n    \"message\": \"string\",\n    \"requestId\": \"req_1234\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using MDX Remote Compiler in Next.js with Fumadocs\nDESCRIPTION: This code demonstrates how to use the MDX Remote compiler in a Next.js page to compile and render MDX content. It includes setting up the page, compiling the MDX, and rendering it with the appropriate components.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/custom-source.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { compileMDX } from '@fumadocs/mdx-remote';\nimport { getPage } from './my-content-source';\nimport { DocsBody, DocsPage } from 'fumadocs-ui/page';\nimport { getMDXComponents } from '@/mdx-components';\n\nexport default async function Page({\n  params,\n}: {\n  params: { slug?: string[] };\n}) {\n  const page = getPage(params.slug);\n  const compiled = await compileMDX({\n    source: page.content,\n  });\n\n  const MdxContent = compiled.body;\n\n  return (\n    <DocsPage toc={compiled.toc}>\n      <DocsBody>\n        <MdxContent components={getMDXComponents()} />\n      </DocsBody>\n    </DocsPage>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Last Modified Timestamp via Git in Next.js Config - js\nDESCRIPTION: Demonstrates how to configure the 'createNextDocs' integration in a 'next.config.mjs' file to support last modified timestamps sourced from Git history. The 'lastModifiedTime' option must be set to 'git' inside 'mdxOptions'. The resulting last modified timestamp will be accessible on each page's data exports under 'lastModified'. Requires a Git repository and integration with Fumadocs or Next-Docs packages.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/mdx/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst withNextDocs = createNextDocs({\n  mdxOptions: {\n    lastModifiedTime: 'git',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating useScalar Interface\nDESCRIPTION: This code snippet demonstrates the updated interface for the `useScalar` option. Previously it was a boolean, now it's part of the `renderer` object specifying the `APIPlayground` component.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/CHANGELOG.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createOpenAPI } from 'fumadocs-openapi/server';\nimport { APIPlayground } from 'fumadocs-openapi/scalar';\n\nexport const openapi = createOpenAPI({\n  renderer: {\n    APIPlayground,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Filesystem Cache\nDESCRIPTION: Setup for enabling filesystem cache in Twoslash transformer\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/twoslash.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { transformerTwoslash } from 'fumadocs-twoslash';\nimport { createFileSystemTypesCache } from 'fumadocs-twoslash/cache-fs';\n\ntransformerTwoslash({\n  typesCache: createFileSystemTypesCache(),\n});\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Console Example\nDESCRIPTION: Simple JavaScript code example demonstrating basic console output.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/mdx/codeblock.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('js');\n```\n\n----------------------------------------\n\nTITLE: Embedding Images in Remark with MDX - mdx\nDESCRIPTION: Demonstrates how to embed static images using markdown syntax in MDX files after enabling the 'remark-image' plugin by default. No extra dependencies are required, but images must exist at the specified path relative to the MDX file. The snippet shows a simple image embed that will be transformed into an import statement during build.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/mdx/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n![banner](/image.png)\n```\n\n----------------------------------------\n\nTITLE: Logging Message to Console with TypeScript (TSX)\nDESCRIPTION: This snippet demonstrates how to output a simple 'Hello World' message to the browser console using TypeScript with TSX syntax. No external dependencies are required, and it runs in any TS/JS-capable environment that supports console.log statements. The snippet is intended for demonstration or initial setup, and does not take any inputs or produce any outputs beyond the log message.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/mdx-remote/test/fixtures/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconsole.log('Hello World');\n```\n\n----------------------------------------\n\nTITLE: Refactoring to use createGenerator - TypeScript\nDESCRIPTION: This snippet demonstrates how to refactor code to utilize the generator instance created by createGenerator.  It shows how to replace direct calls to generateDocumentation, generateMDX, and generateFiles with methods that accept the generator instance. It also shows how to use the generator with the remarkAutoTypeTable plugin.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/typescript/CHANGELOG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AutoTypeTable, remarkAutoTypeTable } from \"fumadocs-typescript\";\n\ngenerator.generateDocumentation({path: './file.ts'}, 'MyClass')\ngenerateMDX(generator, 'content', { ... })\ngenerateFiles(generator, { ... })\nconst processor = createProcessor({\n    remarkPlugins: [\n        [remarkAutoTypeTable, { generator }],\n    ],\n});\n\nreturn <AutoTypeTable generator={generator} {...props} />\n```\n\n----------------------------------------\n\nTITLE: Defining MDX Tab Components for Fumadocs UI (TSX)\nDESCRIPTION: Shows how to provide the required `Tab` and `Tabs` components needed to render the output of the `remark-ts2js` plugin. This example uses components from `fumadocs-ui` and integrates them into the standard MDX component mapping.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-ts2js.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tab, Tabs } from 'fumadocs-ui/components/tabs';\nimport defaultComponents from 'fumadocs-ui/mdx';\nimport type { MDXComponents } from 'mdx/types';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultComponents,\n    Tab,\n    Tabs,\n    ...components,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using remarkInstall - TypeScript\nDESCRIPTION: This snippet shows how to use the remarkInstall plugin. It's a simple import statement as the usage remains the same.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/typescript/CHANGELOG.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remarkInstall } from 'fumadocs-docgen';\n```\n\n----------------------------------------\n\nTITLE: Using fromMap with Relative Root Dir and Schema - ts\nDESCRIPTION: Provides a TypeScript example of using 'fromMap' to create utility functions with a custom root directory and schema. The output gives a utils object for slug generation and page utilities where file paths are resolved relative to 'rootDir'. Dependencies include 'next-docs-mdx/map' and a valid map and schema.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/mdx/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nconst utils = fromMap(map, {\n  rootDir: 'ui',\n  schema: {\n    frontmatter: frontmatterSchema,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Import Fumadocs UI and OpenAPI CSS\nDESCRIPTION: Imports the required CSS files for Fumadocs UI and OpenAPI, including Tailwind CSS configuration, neutral styles, preset styles and OpenAPI preset styles. It requires Tailwind CSS v4 to be configured.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/index.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n@import 'fumadocs-ui/css/neutral.css';\n@import 'fumadocs-ui/css/preset.css';\n/* [!code ++] */\n@import 'fumadocs-openapi/css/preset.css';\n```\n\n----------------------------------------\n\nTITLE: Logging to Console with TypeScript\nDESCRIPTION: This TypeScript snippet prints the string 'I love React!' to the console, serving as a simple introductory example for outputting messages in a browser or Node.js environment. No external dependencies are required. The sole parameter is the string passed to console.log, and the output is visible in the JavaScript console. This snippet is suitable for verifying JavaScript/TypeScript execution.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/react-router/content/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log('I love React!');\n```\n\n----------------------------------------\n\nTITLE: Using File Generator with Language and Meta Specification (MDX)\nDESCRIPTION: Demonstrates advanced usage of the `doc-gen:file` directive in MDX. It configures the file generator to insert the content of `./my/file.txt` into a code block, explicitly setting the programming language to `ts` (TypeScript) and adding metadata (`title=\"Hello\"`) using the `codeblock` object configuration.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-docgen.mdx#2025-04-23_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n````mdx\n```json doc-gen:file\n{\n  \"file\": \"./my/file.txt\",\n  \"codeblock\": {\n    \"lang\": \"ts\",\n    \"meta\": \"title=\\\"Hello\\\"\"\n  }\n}\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Options in Fumadocs MDX v10\nDESCRIPTION: Shows how to define global MDX options in the source.config.ts file instead of the next.config file.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/mdx-v10-summary.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  mdxOptions: {\n    // here!\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing CodeBlock with Background Preservation\nDESCRIPTION: Example of using CodeBlock component with the keepBackground prop to maintain Shiki-generated background colors.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/mdx/codeblock.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pre, CodeBlock } from 'fumadocs-ui/components/codeblock';\n\n<CodeBlock keepBackground {...props}>\n  <Pre>{props.children}</Pre>\n</CodeBlock>;\n```\n\n----------------------------------------\n\nTITLE: Using Structure Function for MDX/Markdown Content in TypeScript\nDESCRIPTION: This snippet shows how to use the structure function to process MDX/markdown content. It imports the function and applies it to raw page content.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/structure.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { structure } from 'fumadocs-core/mdx-plugins';\n\nstructure(page.body.raw);\n```\n\n----------------------------------------\n\nTITLE: Adding Links and Icons in Fumadocs meta.json\nDESCRIPTION: This JSON snippet shows how to add links and icons to the 'pages' property in meta.json for Fumadocs. It demonstrates the syntax for simple links and links with icons.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/page-conventions.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pages\": [\n    \"[Vercel](https://vercel.com)\",\n    \"[Triangle][Vercel](https://vercel.com)\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rehype TOC Plugin\nDESCRIPTION: Shows how to set up the rehype TOC plugin for JSX-enabled table of contents generation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/headings.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rehypeToc } from 'fumadocs-core/mdx-plugins';\n\nexport default {\n  rehypePlugins: [rehypeToc],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Closable Banner with State Persistence\nDESCRIPTION: Illustrates how to implement a closable Banner component by assigning it a unique ID. When an ID is provided, users can close the banner, and this state is automatically persisted between sessions.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/banner.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Banner } from 'fumadocs-ui/components/banner';\n\n<Banner id=\"hello-world\">Hello World</Banner>;\n```\n\n----------------------------------------\n\nTITLE: Using Orama Search Client on the Web - TypeScript\nDESCRIPTION: Demonstrates client-side integration with Orama-based docs search by importing the useDocsSearch React hook. The configuration sets the client type to 'static', indicating it will use a prebuilt search index. Requires 'fumadocs-core/search/client'. Returns a client object for querying documentation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v14.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { useDocsSearch } from 'fumadocs-core/search/client';\n\nconst client = useDocsSearch({\n  type: 'static',\n});\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Colors\nDESCRIPTION: CSS variables for customizing light and dark mode background colors in the theme.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/theme.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --color-fd-background: hsl(0, 0%, 100%);\n}\n\n.dark {\n  --color-fd-background: hsl(0, 0%, 0%);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fumadocs with pnpm\nDESCRIPTION: Command to create a new Fumadocs app using pnpm package manager.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm create fumadocs-app\n```\n\n----------------------------------------\n\nTITLE: Creating Unkey API Keys via cURL Request (bash)\nDESCRIPTION: This snippet shows how to make a POST request using cURL to the Unkey `/v1/migrations.createKeys` endpoint. It includes an example JSON payload demonstrating various parameters for creating new API keys, such as `apiId`, `prefix`, `name`, `meta`, `roles`, `permissions`, `expires`, `ratelimit`, etc. Requires cURL to be installed and assumes a valid authorization token is provided via headers (not shown in snippet but indicated by surrounding context).\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"https://api.unkey.dev/v1/migrations.createKeys\" \\\n  -d '[\n  {\n    \"apiId\": \"api_123\",\n    \"prefix\": \"string\",\n    \"name\": \"my key\",\n    \"plaintext\": \"string\",\n    \"hash\": {\n      \"value\": \"string\",\n      \"variant\": \"sha256_base64\"\n    },\n    \"start\": \"unkey_32kq\",\n    \"ownerId\": \"team_123\",\n    \"meta\": {\n      \"billingTier\": \"PRO\",\n      \"trialEnds\": \"2023-06-16T17:16:37.161Z\"\n    },\n    \"roles\": [\n      \"admin\",\n      \"finance\"\n    ],\n    \"permissions\": [\n      \"domains.create_record\",\n      \"say_hello\"\n    ],\n    \"expires\": 1623869797161,\n    \"remaining\": 1000,\n    \"refill\": {\n      \"interval\": \"daily\",\n      \"amount\": 100\n    },\n    \"ratelimit\": {\n      \"type\": \"fast\",\n      \"limit\": 10,\n      \"refillRate\": 1,\n      \"refillInterval\": 60\n    },\n    \"enabled\": false,\n    \"environment\": \"string\"\n  }\n]'\n```\n\n----------------------------------------\n\nTITLE: Example API Error Response for NOT_FOUND (JSON)\nDESCRIPTION: This JSON object presents a sample error response when a requested resource cannot be located. It contains all necessary fields—error code, documentation reference, message, and request ID—to provide clients with clear guidance for handling not found errors. The sample output matches the defined TypeScript type.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"error\": {\n    \"code\": \"NOT_FOUND\",\n    \"docs\": \"https://unkey.dev/docs/api-reference/errors/code/NOT_FOUND\",\n    \"message\": \"string\",\n    \"requestId\": \"req_1234\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Provider Hierarchy Example\nDESCRIPTION: Illustrates the previous complex provider hierarchy that is now handled internally by RootProvider.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/new-conventions.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<FrameworkProvider>\n  <ThemesProvider>\n    <I18nProvider>\n      <SidebarProvider>\n        <SearchProvider>{children}</SearchProvider>\n      </SidebarProvider>\n    </I18nProvider>\n  </ThemesProvider>\n</FrameworkProvider>\n```\n\n----------------------------------------\n\nTITLE: Adding Fumadocs MDX type generation as a post-install script\nDESCRIPTION: JSON configuration in package.json to run the fumadocs-mdx command after npm install. This ensures that TypeScript types are always generated when initializing the project.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/index.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"postinstall\": \"fumadocs-mdx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Components for Fumadocs UI in TypeScript\nDESCRIPTION: This code snippet sets up MDX components for use with Fumadocs UI. It imports default components from 'fumadocs-ui/mdx' and exports a function to get MDX components, as well as a 'useMDXComponents' function.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/page.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport defaultMdxComponents from 'fumadocs-ui/mdx';\nimport type { MDXComponents } from 'mdx/types';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultMdxComponents, // for Fumadocs UI\n    ...components,\n  };\n}\n\n// export a `useMDXComponents()` that returns MDX components\nexport const useMDXComponents = getMDXComponents; // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Setting up Source Loader\nDESCRIPTION: Implementation of the source loader configuration for handling async content.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/async.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loader } from 'fumadocs-core/source';\nimport { docs } from '@/.source';\n\nexport const source = loader({\n  baseUrl: '/docs',\n  source: docs.toFumadocsSource(),\n});\n```\n\n----------------------------------------\n\nTITLE: Improving createI18nMiddleware function in Typescript\nDESCRIPTION: This snippet demonstrates the simplification of exporting the `createI18nMiddleware` function.  Instead of wrapping it in a middleware function, it can now be exported directly with configuration options.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function middleware(request: NextRequest) {\n  return createI18nMiddleware(...);\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default createI18nMiddleware({\n  defaultLanguage,\n  languages,\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Twoslash Imports (TS)\nDESCRIPTION: This code snippet shows how to migrate Twoslash UI components to the 'fumadocs-twoslash' package. The old import paths from 'fumadocs-ui/twoslash.css' and 'fumadocs-ui/twoslash/popup' are replaced with the new paths under 'fumadocs-twoslash/twoslash.css' and 'fumadocs-twoslash/ui'.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'fumadocs-ui/twoslash.css';\n\nimport { Popup } from 'fumadocs-ui/twoslash/popup';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'fumadocs-twoslash/twoslash.css';\n\nimport { Popup } from 'fumadocs-twoslash/ui';\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Tag with Custom Display Name - YAML\nDESCRIPTION: Adds an x-displayName field to an OpenAPI tag object, customizing how the tag appears in UIs. Follows YAML 1.2 syntax and OpenAPI specification extensions. Inputs: list of tags, each with name, description, and x-displayName.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v14.mdx#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n  - name: test\n    description: this is a tag.\n    x-displayName: My Test Name\n\n```\n\n----------------------------------------\n\nTITLE: Adding Twoslash CSS Styles\nDESCRIPTION: CSS import statement for Twoslash styling\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/twoslash.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import 'fumadocs-twoslash/twoslash.css';\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeScript Interface `Test1`\nDESCRIPTION: This snippet defines a TypeScript interface named `Test1` with three properties: `name` (string), `description` (string), and `isGood` (boolean). Interfaces in TypeScript are used to define contracts for object shapes.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/doc-gen/test/fixtures/file-gen.output.md#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport interface Test1 {\n  name: string;\n  description: string;\n  isGood: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Hardcoding Sidebar Structure in DocsLayout\nDESCRIPTION: This example shows how to manually define the sidebar structure by passing a hardcoded tree object to the DocsLayout component. This approach allows for more control over the sidebar structure.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/navigation/sidebar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <DocsLayout\n      tree={{\n        name: 'docs',\n        children: [],\n      }}\n      // other props\n    >\n      {children}\n    </DocsLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Callout Component in MDX\nDESCRIPTION: Shows how to use the Callout component directly in MDX files without importing it. This feature allows for easier integration of callouts in documentation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v13.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Callout type=\"warn\">Hello World</Callout>\n```\n\n----------------------------------------\n\nTITLE: Installing Mermaid and Next-themes Dependencies\nDESCRIPTION: Command to install the required dependencies for Mermaid integration with Fumadocs. Next-themes is used for managing light/dark mode compatibility.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/mermaid.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmermaid next-themes\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Tabs - JSON\nDESCRIPTION: Defines a root tab for the sidebar by creating a meta.json file with root, title, description, and icon fields. This enables sidebar tab generation in Fumadocs. Each key controls tab presentation in the UI.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v14.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"root\": true,\n  \"title\": \"Tab Name\",\n  \"description\": \"Some text about the tab\",\n  \"icon\": \"IconName\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Twoslash Components (Before v2.0.0) in TypeScript\nDESCRIPTION: This snippet shows the previous method for importing Twoslash CSS and the `Popup` component directly from `fumadocs-ui` before version 2.0.0 of `fumadocs-twoslash`. This code is presented as the 'Before' state in a migration guide.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/twoslash/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport 'fumadocs-ui/twoslash.css';\n\nimport { Popup } from 'fumadocs-ui/twoslash/popup';\n```\n\n----------------------------------------\n\nTITLE: Configuring DocsLayout with Custom Page Tree in Next.js\nDESCRIPTION: This snippet demonstrates how to set up the DocsLayout component with a custom page tree in a Next.js layout file. It includes the necessary imports and the basic structure for the layout component.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/custom-source.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <DocsLayout\n      nav={{ title: 'Example Docs' }}\n      tree={\n        {\n          /// your own tree\n        }\n      }\n    >\n      {children}\n    </DocsLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Last Edit Time from GitHub and Rendering in Fumadocs UI (TSX)\nDESCRIPTION: Shows how to fetch the last edit time for a documentation file from GitHub using the getGithubLastEdit utility from 'fumadocs-core/server', then use that value for the DocsPage lastUpdate prop. Requires both 'fumadocs-ui/page' and 'fumadocs-core/server'. The path, owner, repo, and branch SHA must be specified. Suits setups using React TSX with Fumadocs UI and remote VCS integration.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/page.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsPage } from 'fumadocs-ui/page';\nimport { getGithubLastEdit } from 'fumadocs-core/server';\n\nconst time = await getGithubLastEdit({\n  owner: 'fuma-nama',\n  repo: 'fumadocs',\n  path: `content/docs/${page.file.path}`,\n});\n\n<DocsPage lastUpdate={new Date(time)} />;\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Fumadocs Layouts\nDESCRIPTION: Command to customize Fumadocs layouts and appearance.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/cli/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: package-install\nCODE:\n```\nnpx @fumadocs/cli customise\n```\n\n----------------------------------------\n\nTITLE: Using DocsCategory with Source Context - TSX\nDESCRIPTION: Illustrates rendering the DocsCategory component with a page object and data source. The page is fetched using source.getPage. Essential for category navigation UI in docs; relies on 'fumadocs-ui/page' and source exports.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v14.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { source } from '@/lib/source';\nimport { DocsCategory } from 'fumadocs-ui/page';\n\nconst page = source.getPage(params.slug);\n\n<DocsCategory page={page} from={source} />;\n\n```\n\n----------------------------------------\n\nTITLE: Generated MDX Output with Image Imports\nDESCRIPTION: The transformed MDX output showing how images are converted to Next.js Image components with imports.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-image.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\nimport HelloImage from './public/hello.png';\n\n<img alt=\"Hello\" src={HelloImage} />\n<img\n  alt=\"Test\"\n  src=\"https://example.com/image.png\"\n  width=\"1980\"\n  height=\"1080\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag-Based Search\nDESCRIPTION: Example of using search client with tag filtering support.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/orama.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDocsSearch } from 'fumadocs-core/search/client';\n\n// Pass `tag` in your custom search dialog\nconst client = useDocsSearch(\n  {\n    type: 'fetch',\n  },\n  undefined, // locale code, can be `undefined`\n  'tag',\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Styled Breadcrumb Component in React\nDESCRIPTION: A complete example of a styled Breadcrumb component using the useBreadcrumb hook. It includes imports, component definition, and rendering logic for breadcrumb items with links and separators.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/components/breadcrumb.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport { usePathname } from 'next/navigation';\nimport { useBreadcrumb } from 'fumadocs-core/breadcrumb';\nimport type { PageTree } from 'fumadocs-core/server';\nimport { Fragment } from 'react';\nimport { ChevronRight } from 'lucide-react';\nimport Link from 'next/link';\n\nexport function Breadcrumb({ tree }: { tree: PageTree.Root }) {\n  const pathname = usePathname();\n  const items = useBreadcrumb(pathname, tree);\n\n  if (items.length === 0) return null;\n\n  return (\n    <div className=\"-mb-3 flex flex-row items-center gap-1 text-sm font-medium text-fd-muted-foreground\">\n      {items.map((item, i) => (\n        <Fragment key={i}>\n          {i !== 0 && (\n            <ChevronRight className=\"size-4 shrink-0 rtl:rotate-180\" />\n          )}\n          {item.url ? (\n            <Link\n              href={item.url}\n              className=\"truncate hover:text-fd-accent-foreground\"\n            >\n              {item.name}\n            </Link>\n          ) : (\n            <span className=\"truncate\">{item.name}</span>\n          )}\n        </Fragment>\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Link Component Usage in MDX\nDESCRIPTION: Demonstrates how to import and use the basic Link component from fumadocs-core for static routes.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/components/link.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Link from 'fumadocs-core/link';\n\n<Link href=\"/docs/components\">Click Me</Link>\n```\n\n----------------------------------------\n\nTITLE: Using File Generator to Insert Content as Paragraph (MDX)\nDESCRIPTION: Provides the MDX code block syntax (` ```json doc-gen:file `) to use the file generator. This specific example configures the generator to copy the content of `./my/file.txt` and insert it directly as a paragraph into the MDX document.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-docgen.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n````mdx\n```json doc-gen:file\n{\n  \"file\": \"./my/file.txt\"\n}\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Accordion Component in MDX\nDESCRIPTION: Demonstrates how to import and use the Accordion components from fumadocs-ui to create a single accordion with title and content.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Accordion, Accordions } from 'fumadocs-ui/components/accordion';\n\n<Accordions type=\"single\">\n  <Accordion title=\"My Title\">My Content</Accordion>\n</Accordions>\n```\n\n----------------------------------------\n\nTITLE: Initializing Docs Layout Links - TSX\nDESCRIPTION: This code snippet demonstrates how to pass the `baseOptions` and an empty `links` array to the `DocsLayout` component in Fumadocs. It imports `DocsLayout` from `fumadocs-ui/layouts/docs` and `baseOptions` from `@/app/layout.config`.  The empty `links` array is highlighted, allowing specific links for the docs layout. The component uses `ReactNode` for the children.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/navigation/links.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\nimport { baseOptions } from '@/app/layout.config';\nimport { source } from '@/lib/source';\nimport type { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  return (\n    <DocsLayout\n      {...baseOptions}\n      tree={source.pageTree}\n      links={[]} // [!code highlight]\n    >\n      {children}\n    </DocsLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Links in MDX Components\nDESCRIPTION: Demonstrates how to override the default anchor tag component to support relative file paths in href attributes. This setup is specifically for server-side components.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/mdx/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRelativeLink } from 'fumadocs-ui/mdx';\nimport { source } from '@/lib/source';\nimport { getMDXComponents } from '@/mdx-components';\n\nconst page = source.getPage(['...']);\n\nreturn (\n  <MdxContent\n    components={getMDXComponents({\n      // override the `a` tag\n      a: createRelativeLink(source, page),\n    })}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Collections in Fumadocs MDX v10\nDESCRIPTION: Shows how to define multiple collections (docs and blog) with custom schemas in the source.config.ts file for Fumadocs MDX v10.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/mdx-v10-summary.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  defineDocs,\n  defineCollections,\n  frontmatterSchema,\n} from 'fumadocs-mdx/config';\nimport { z } from 'zod';\n\nexport const { docs, meta } = defineDocs({\n  dir: 'content/docs',\n});\n\nexport const blog = defineCollections({\n  type: 'doc',\n  dir: 'content/blog',\n  schema: frontmatterSchema.extend({\n    author: z.string(),\n    date: z.string().date().or(z.date()).optional(),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Fumadocs CLI with npm - Bash\nDESCRIPTION: Installs the Fumadocs CLI as a development dependency using npm. Required before using the CLI commands for UI component cloning or code generation. Outputs no files; runs in any Node.js/npm project.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v14.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @fumadocs/cli --save-dev\n\n```\n\n----------------------------------------\n\nTITLE: Using File Generator to Insert Content as Code Block (MDX)\nDESCRIPTION: Shows how to use the `doc-gen:file` directive within an MDX file to embed the content of `./my/file.txt` as a code block by setting the `codeblock` option to `true` in the JSON configuration.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-docgen.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n````mdx\n```json doc-gen:file\n{\n  \"file\": \"./my/file.txt\",\n  \"codeblock\": true\n}\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Content Types in Fumadocs MDX v10\nDESCRIPTION: Demonstrates how to configure multiple content types (docs and blog) using the loader function and createMDXSource in Fumadocs MDX v10.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/mdx-v10-summary.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMDXSource } from 'fumadocs-mdx';\nimport type { InferMetaType, InferPageType } from 'fumadocs-core/source';\nimport { loader } from 'fumadocs-core/source';\nimport { meta, docs, blog as blogPosts } from '@/.source';\n\nexport const source = loader({\n  baseUrl: '/docs',\n  source: createMDXSource(docs, meta),\n});\n\nexport const blog = loader({\n  baseUrl: '/blog',\n  // as mentioned before, you can leave `meta` an empty array\n  source: createMDXSource(blogPosts, []),\n});\n\nexport type DocsPage = InferPageType<typeof source>;\nexport type DocsMeta = InferMetaType<typeof source>;\n```\n\n----------------------------------------\n\nTITLE: Forbidden Error Response Structure (JSON - Partial)\nDESCRIPTION: This JSON snippet shows the initial part of a Forbidden error response (HTTP 403) from the Unkey API, possibly returned by `/v1/migrations.createKeys` if permissions are insufficient. It includes an `error` object starting with the `code` (\"FORBIDDEN\") and a link to the relevant documentation (`docs`). The full response would typically also include a `message` and `requestId`.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": {\n    \"code\": \"FORBIDDEN\",\n    \"docs\": \"https://unkey.dev/docs/api-reference/errors/code/FORBIDDEN\",\n```\n\n----------------------------------------\n\nTITLE: Generating Files Tree (TSX)\nDESCRIPTION: Command to generate a files tree component in TSX format from a directory structure.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/cli/index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: package-install\nCODE:\n```\nnpx @fumadocs/cli tree ./my-dir ./output.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Provider\nDESCRIPTION: Implementation of NextProvider component for Next.js framework integration with Fumadocs Core.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ReactNode } from 'react';\nimport { NextProvider } from 'fumadocs-core/framework/next';\n\nexport function RootLayout({ children }: { children: ReactNode }) {\n  // or if you're using Fumadocs UI, use `<RootProvider />`\n  return <NextProvider>{children}</NextProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation with Operations - React/JSX\nDESCRIPTION: This snippet renders the API documentation page for museum ticket operations by invoking the APIPage component and supplying it with the path to the OpenAPI YAML and a list of defined HTTP operations (buying a ticket via POST and obtaining a ticket QR code via GET). It requires the Fumadocs documentation system and expects the './fixtures/museum.yaml' file containing OpenAPI definitions. Parameters include the OpenAPI document path, operations to display, webhooks (empty), and a flag to indicate document head rendering. Inputs are the API specification and list of documented operations; output is the component rendering in the generated docs. This file should not be directly edited—regeneration should occur through the command-line utility.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/museum/tickets.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"./fixtures/museum.yaml\"} operations={[{\"path\":\"/tickets\",\"method\":\"post\"},{\"path\":\"/tickets/{ticketId}/qr\",\"method\":\"get\"}]} webhooks={[]} hasHead={true} />\n```\n\n----------------------------------------\n\nTITLE: Configuring doc-gen File Processing (JSON)\nDESCRIPTION: This JSON configuration specifies parameters for the `doc-gen` tool. It targets the file `./sample.txt` and instructs the tool to treat the content of this file as a code block (`\"codeblock\": true`) when generating documentation. It assumes the presence of the `doc-gen` tool and the specified input file.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/doc-gen/test/fixtures/file-gen.relative.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"file\": \"./sample.txt\",\n  \"codeblock\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fumadocs Source Options in TypeScript\nDESCRIPTION: This snippet defines the configuration for Fumadocs MDX options. It specifies the import source for MDX components, which is crucial for enabling custom MDX components in the project.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/page.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  mdxOptions: {\n    // Path to import your `mdx-components.tsx` above. [!code ++]\n    providerImportSource: '@/mdx-components',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Orama Cloud Search in Fumadocs UI (React/TSX)\nDESCRIPTION: This snippet demonstrates how to integrate Orama Cloud search into Fumadocs UI by creating a custom search dialog component using the Orama Cloud client.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/search.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { OramaClient } from '@oramacloud/client';\nimport type { SharedProps } from 'fumadocs-ui/components/dialog/search';\nimport SearchDialog from 'fumadocs-ui/components/dialog/search-orama';\n\nconst client = new OramaClient({\n  endpoint: 'endpoint',\n  api_key: 'apiKey',\n});\n\nexport default function CustomSearchDialog(props: SharedProps) {\n  return <SearchDialog {...props} client={client} showOrama />;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Fumadocs Article Layout in JSX\nDESCRIPTION: Exports the withArticle higher-order component from fumadocs-ui/page to apply typography styles to an MDX page. This component should be used as the default export in page.mdx files that need article formatting.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/app/(home)/blog/test/page.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport { withArticle as default } from 'fumadocs-ui/page';\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Components for Image Zoom in TypeScript\nDESCRIPTION: Implementation of MDX components configuration to enable image zoom functionality by replacing the default img component with ImageZoom from fumadocs-ui.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/image-zoom.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ImageZoom } from 'fumadocs-ui/components/image-zoom';\nimport defaultComponents from 'fumadocs-ui/mdx';\nimport type { MDXComponents } from 'mdx/types';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultComponents,\n    img: (props) => <ImageZoom {...(props as any)} />,\n    ...components,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Console Log Example\nDESCRIPTION: This TypeScript code snippet shows a fundamental example of logging the string 'Hello World' to the console using `console.log`. It's used here as a simple illustration of code embedding within Fumadocs.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/create-app/template/tanstack-start/content/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconsole.log('Hello World');\n```\n\n----------------------------------------\n\nTITLE: Including File Content with doc-gen:file (JSON)\nDESCRIPTION: This JSON configuration specifies the inclusion of content from an external file. The `file` key indicates the path to the source file (`./fixtures/sample.txt`) whose content should be directly embedded into the document.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/doc-gen/test/fixtures/file-gen.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"file\": \"./fixtures/sample.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: MDX Page Configuration with Include Directive\nDESCRIPTION: A markdown page configuration that defines the title and description metadata, and includes content from another MDX file using the include directive.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/page-conventions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: Routing\ndescription: A shared convention for organizing your documents\n---\n\n<include>../headless/page-conventions.mdx</include>\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Tree Post-Processors in Fumadocs Core\nDESCRIPTION: Demonstrates how to use the Source API to attach properties to page trees using a post-processor function. This allows for easy modification of page tree nodes.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v12.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loader } from 'fumadocs-core/source';\n\nexport const utils = loader({\n  pageTree: {\n    attachFile(node) {\n      // modify the node\n      return node;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Math Equation Example with KaTeX\nDESCRIPTION: A simple mathematical equation example showing the Pythagorean theorem formula rendered using KaTeX in a math block.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/math.mdx#2025-04-23_snippet_4\n\nLANGUAGE: math\nCODE:\n```\nc = \\pm\\sqrt{a^2 + b^2}\n```\n\n----------------------------------------\n\nTITLE: Making a Rate Limit Request using JavaScript Fetch API\nDESCRIPTION: This snippet shows a basic JavaScript example using the Fetch API to send a POST request to the `/v1/ratelimits.limit` endpoint. Note that this example only specifies the URL and method; a complete request would also include headers (like Authorization) and a request body.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n```js\nfetch(\"https://api.unkey.dev/v1/ratelimits.limit\", {\n  method: \"POST\"\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Source Configuration for Fumadocs MDX v10\nDESCRIPTION: Demonstrates how to update the source.ts file to use the new collections approach and createMDXSource function in Fumadocs MDX v10.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/mdx-v10-summary.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { docs, meta } from '@/.source';\nimport { createMDXSource } from 'fumadocs-mdx';\nimport { loader } from 'fumadocs-core/source';\n\nexport const source = loader({\n  baseUrl: '/docs',\n  source: createMDXSource(docs, meta),\n});\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request for Key Migration (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to send a POST request to the key migration endpoint using the fetch API. It doesn't include the request body in this example.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfetch(\"https://api.unkey.dev/v1/migrations.enqueueKeys\", {\n  method: \"POST\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Links in Search Dialog (React/TSX)\nDESCRIPTION: This snippet demonstrates how to add custom link items to the search dialog in Fumadocs UI. These links are shown as fallbacks when the search query is empty.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/search.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RootProvider } from 'fumadocs-ui/root-provider';\n\n<RootProvider\n  search={{\n    links: [\n      ['Home', '/'],\n      ['Docs', '/docs'],\n    ],\n  }}\n>\n  {children}\n</RootProvider>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Folder Meta Properties in JSON for Fumadocs\nDESCRIPTION: This JSON snippet shows how to create a meta.json file to customize folder properties in Fumadocs. It includes options for title, icon, pages, and default open state.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/page-conventions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Display Name\",\n  \"icon\": \"MyIcon\",\n  \"pages\": [\"index\", \"getting-started\"],\n  \"defaultOpen\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Colors in Tailwind CSS for Fumadocs UI\nDESCRIPTION: Demonstrates how to enable global colors without the 'fd-' prefix in Tailwind CSS configuration for Fumadocs UI. This allows using Fumadocs UI colors in the primary app.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v13.mdx#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { createPreset } from 'fumadocs-ui/tailwind-plugin';\n\n/** @type {import('tailwindcss').Config} */\nexport default {\n  presets: [\n    createPreset({\n      addGlobalColors: true,\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining multiple collections in Fumadocs MDX\nDESCRIPTION: TypeScript configuration showing how to define multiple document collections for different content types. This example defines separate collections for documentation and blog posts.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/index.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineDocs } from 'fumadocs-mdx/config';\n\nexport const docs = defineDocs({\n  dir: 'content/docs',\n});\n\nexport const blogPosts = defineDocs({\n  dir: 'content/blog',\n});\n```\n\n----------------------------------------\n\nTITLE: Logging 'Hello World' using JavaScript Console\nDESCRIPTION: This JavaScript snippet demonstrates logging the string 'Hello World' to the console using the `console.log` function. It's presented within a markdown file under the 'CodeBlock' heading as a basic example.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/next-mdx/content/docs/test.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconsole.log('Hello World');\n```\n\n----------------------------------------\n\nTITLE: Exporting Algolia Search Indexes for Next.js Route Handler (json)\nDESCRIPTION: This snippet provides a sample JSON export configuration, referencing a file that contains static search indexes required for Algolia synchronization. It is intended to allow access to generated indexes after a Next.js production build, facilitating subsequent syncing with Algolia's API. The configuration expects the JSON output file path and meta title to match your setup.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/algolia.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"file\\\": \\\"../../examples/next-mdx/app/static.json/algolia.ts\\\",\\n  \\\"codeblock\\\": {\\n    \\\"meta\\\": \\\"title=\\\\\\\"app/static.json/route.ts\\\\\\\"\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeBlock with Background in React\nDESCRIPTION: Demonstrates how to use the CodeBlock component with the keepBackground prop to preserve the original Shiki-generated background. This snippet shows the setup within an MDX component configuration.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v13.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pre, CodeBlock } from 'fumadocs-ui/components/codeblock';\n\n<MDX\n  components={{\n    pre: ({ ref: _ref, ...props }) => (\n      <CodeBlock keepBackground {...props}>\n        <Pre>{props.children}</Pre>\n      </CodeBlock>\n    ),\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Defining a meta collection in Fumadocs MDX\nDESCRIPTION: TypeScript configuration for defining a meta collection that processes JSON files. This enables Fumadocs to transform JSON data into a structured format for your application.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollections } from 'fumadocs-mdx/config';\n\nexport const test = defineCollections({\n  type: 'meta',\n  dir: 'content/docs',\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Required Math Packages for Fumadocs\nDESCRIPTION: Commands for installing the necessary packages to enable math equation support in Fumadocs, including remark-math for parsing math in Markdown, rehype-katex for rendering, and katex itself.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/math.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nremark-math rehype-katex katex\n```\n\n----------------------------------------\n\nTITLE: Defining Code Samples in OpenAPI Schema\nDESCRIPTION: Shows how to specify code samples directly in the OpenAPI schema YAML.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/configurations.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /plants:\n    get:\n      x-codeSamples:\n        - lang: js\n          label: JavaScript SDK\n          source: |\n            const planter = require('planter');\n            planter.list({ unwatered: true });\n```\n\n----------------------------------------\n\nTITLE: Customizing OG Image Font Configuration\nDESCRIPTION: Demonstrates how to customize fonts for Open Graph image generation using Satori, including loading custom font files and configuring font properties.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/open-graph.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateOGImage } from 'fumadocs-ui/og';\n\ngenerateOGImage({\n  fonts: [\n    {\n      name: 'Roboto',\n      // Use `fs` (Node.js only) or `fetch` to read the font as Buffer/ArrayBuffer and provide `data` here.\n      data: robotoArrayBuffer,\n      weight: 400,\n      style: 'normal',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding File as Code Block with doc-gen:file (JSON)\nDESCRIPTION: This JSON configuration embeds the content of a specified file as a Markdown code block. The `file` key points to the source file (`./fixtures/sample.ts`), and the `codeblock: true` setting triggers the embedding within a fenced code block, likely inferring the language from the file extension.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/doc-gen/test/fixtures/file-gen.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"file\": \"./fixtures/sample.ts\",\n  \"codeblock\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Build Script for Index Sync in Package.json (json)\nDESCRIPTION: This snippet illustrates how to update the build script in 'package.json' to chain the Next.js build process with the execution of the Algolia index synchronization script. It ensures that search indexes are synced immediately after building the documentation for production. No extra dependencies required beyond Node.js for script execution.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/algolia.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"scripts\\\": {\\n    \\\"build\\\": \\\"next build && node ./update-index.mjs\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting MDX Files in Fumadocs Webpack Configuration\nDESCRIPTION: Demonstrates how Fumadocs transforms .map.ts files to handle static imports of MDX files. This webpack hack enables the framework to process MDX files through a custom loader.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/2024-5-15.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default [import(\"./my/file.mdx\"), ...];\n```\n\n----------------------------------------\n\nTITLE: Configuring File Inclusion for LLM Documentation Route\nDESCRIPTION: This JSON configuration specifies the file to be included and sets metadata for the code block. It's used to generate a route handler for LLM documentation output.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/llms.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"file\": \"./content/shared/llms.ts\",\n  \"codeblock\": {\n    \"meta\": \"title=\\\"app/llms.txt/route.ts\\\"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiled Image Output with Next.js Image Optimization\nDESCRIPTION: Shows how Fumadocs MDX converts standard Markdown image syntax into static imports and React components using Next.js Image API for optimization.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/performance.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport HelloImage from './hello.png';\n\n<img alt=\"Hello\" src={HelloImage} />\n```\n\n----------------------------------------\n\nTITLE: Creating a New Fumadocs App with React Router\nDESCRIPTION: This bash command initializes a new Fumadocs application using the create-fumadocs-app tool, which now includes options for React Router setup in addition to Next.js.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v15-2.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm create fumadocs-app\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with pnpm Script - Shell\nDESCRIPTION: This snippet runs the 'pnpm build:docs' command to invoke the documentation build process. Prerequisites include pnpm installation and a 'build:docs' script configured in the project's package.json. The script typically reads source files and outputs static documentation files. Input sources, output location, and dependencies are determined by project conventions.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/python/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm build:docs\n```\n\n----------------------------------------\n\nTITLE: Using MDX Components in Fumadocs MDX v10\nDESCRIPTION: Demonstrates how to set MDX components using the 'components' prop in the MDX body. This replaces the previous mdx-components.tsx file approach.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/mdx-v10-summary.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport defaultMdxComponents from 'fumadocs-ui/mdx';\n\nconst MDX = page.data.body;\n\n// set your MDX components with `components` prop\n<MDX components={{ ...defaultMdxComponents }} />;\n```\n\n----------------------------------------\n\nTITLE: Creating MDX Source for Blog Posts (TypeScript)\nDESCRIPTION: Sets up the blog content source using Fumadocs MDX and defines the base URL for blog posts.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/make-a-blog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMDXSource } from 'fumadocs-mdx';\nimport { loader } from 'fumadocs-core/source';\nimport { blogPosts } from '@/.source';\n\nexport const blog = loader({\n  baseUrl: '/blog',\n  source: createMDXSource(blogPosts),\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Schema Configuration - TypeScript\nDESCRIPTION: Demonstrates how to create a dynamic schema using a function that receives transform context.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/collections.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollections } from 'fumadocs-mdx/config';\nimport { z } from 'zod';\n\nexport const blog = defineCollections({\n  type: 'doc',\n  dir: './content/blog',\n  schema: (ctx) => {\n    return z.object({\n      name: z.string(),\n      testPath: z.string().default(\n        // original file path\n        ctx.path,\n      ),\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Demo: Fumadocs UI Card Component with Child Content - MDX\nDESCRIPTION: Shows how to use the <Card> component with an icon, title, and typed content as children. Demonstrates child content flexibility and type-safe usage. Requires React context, Fumadocs UI Card, and proper icon import.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v14.mdx#2025-04-23_snippet_9\n\nLANGUAGE: mdx\nCODE:\n```\n<Card icon={<Database />} title='Content Source'>\n\nThe input/source of your content, it can be a CMS, or local data layers like [Content Collections](https://www.content-collections.dev) and [Fumadocs MDX](/docs/mdx).\n\n</Card>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Chat Component with ai/react useChat Hook (TypeScript)\nDESCRIPTION: This snippet defines a Next.js functional component named Chat utilizing the useChat hook from the ai/react library to manage chat state, message input, and form submission. It includes a maxSteps option set to 5 to restrict the chat process, requiring ai/react as a dependency and the Next.js app running in client mode. Key parameters include messages (the message array), input (current user input), and handler functions for processing input and submissions. The snippet expects proper integration within a Next.js project and provides the foundation for an interactive chat UI, though UI logic and rendering are not detailed in the sample.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/remote-mdx/content/docs/test.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx\\n'use client';\\n\\nimport { useChat } from 'ai/react';\\n\\nexport default function Chat() {\\n  const { messages, input, handleInputChange, handleSubmit } = useChat({\\n    maxSteps: 5, // [!code highlight]\\n  });\\n\\n  // ... rest of your component code\\n}\\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Fumadocs MDX with Remark Install Plugin\nDESCRIPTION: Configuration setup for using the remark-install plugin with Fumadocs MDX\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/install.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remarkInstall } from 'fumadocs-docgen';\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  mdxOptions: {\n    remarkPlugins: [remarkInstall],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: MDX Components Configuration for Fumadocs UI\nDESCRIPTION: Component setup for Fumadocs UI including Tab and Tabs components\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/install.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tab, Tabs } from 'fumadocs-ui/components/tabs';\nimport defaultComponents from 'fumadocs-ui/mdx';\nimport type { MDXComponents } from 'mdx/types';\n\nexport function getMDXComponents(components?: MDXComponents): MDXComponents {\n  return {\n    ...defaultComponents,\n    Tab,\n    Tabs,\n    ...components,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Internationalized Navigation Component\nDESCRIPTION: Demonstrates how to implement navigation with locale support using Next.js hooks and components.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/internationalization.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link';\nimport { useParams } from 'next/navigation';\n\nconst { lang } = useParams();\n\nreturn <Link href={`/${lang}/another-page`}>This is a link</Link>;\n```\n\n----------------------------------------\n\nTITLE: Updating Base Layout Options\nDESCRIPTION: Configures the base layout properties with i18n support for Fumadocs UI.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/internationalization.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { i18n } from '@/lib/i18n';\nimport type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';\n\nexport function baseOptions(locale: string): BaseLayoutProps {\n  return {\n    i18n,\n    // different props based on `locale`\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Example Type Definitions with Twoslash\nDESCRIPTION: Demonstration of Twoslash features including type hints and error handling\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/twoslash.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype Player = {\n  /**\n   * The player name\n   * @default 'user'\n   */\n  name: string;\n};\n\n// ---cut---\n// @noErrors\nconsole.g;\n//       ^|\n\n// ---cut-start---\n// ---cut-end---\n\n// ---cut-start---\n// ---cut-end---\n\n// ---cut-start---\n// ---cut-end---\n\n// ---cut-start---\n// ---cut-end---\n\nconst player: Player = { name: 'Hello World' };\n//    ^?\n```\n\n----------------------------------------\n\nTITLE: Admonition Markdown Input Example\nDESCRIPTION: Example of using the Admonition syntax in Markdown format with warning type.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-admonition.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n:::warning\nHello World\n:::\n```\n\n----------------------------------------\n\nTITLE: Displaying a Basic Code Block in JavaScript\nDESCRIPTION: This snippet shows a simple JavaScript example using `console.log` rendered within a Fumadocs code block component. It demonstrates the basic functionality of displaying code on the documentation page.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/create-app/template/+next/content/docs/test.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconsole.log('Hello World');\n```\n\n----------------------------------------\n\nTITLE: Using MDX Components in Page Component\nDESCRIPTION: Demonstrates how to implement the getMDXComponents function within a page component to extend MDX functionality.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/new-conventions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getMDXComponents } from '@/mdx-components';\n\n<MDXContent\n  components={getMDXComponents({\n    // extend it\n  })}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Proxy Route Handler in TypeScript\nDESCRIPTION: Creates route handlers for various HTTP methods using the OpenAPI proxy functionality. This enables proxying of HTTP requests to avoid CORS issues.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/proxy.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { openapi } from '@/lib/source';\n\nexport const { GET, HEAD, PUT, POST, PATCH, DELETE } = openapi.createProxy();\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with Common Node Package Managers - Bash\nDESCRIPTION: This Bash snippet provides usage examples to start the development server for a Tanstack Start application generated by Create Fumadocs. Supported package managers include npm, pnpm, and yarn. It assumes that dependencies have already been installed and that either 'npm', 'pnpm', or 'yarn' is available globally. Commands will launch a hot-reloading development environment at the project's root. No additional parameters are required, but the correct package manager must match how the project was initially installed.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/create-app/template/tanstack-start/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\npnpm dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Defining Successful Key Creation Response (TypeScript)\nDESCRIPTION: This TypeScript interface defines the data structure for a successful response (HTTP 200 OK) from the `/v1/migrations.createKeys` endpoint. The `Response` interface includes a `keyIds` property (an array of strings) which holds the identifiers for the newly created keys, along with descriptive JSDoc comments explaining its purpose.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport interface Response {\n  /**\n   * The ids of the keys. This is not a secret and can be stored as a reference if you wish. You need the keyId to update or delete a key later.\n   */\n  keyIds: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Structure (400 Bad Request)\nDESCRIPTION: This JSON snippet demonstrates the structure of an error response with a 400 status code. It includes an error object with code, documentation link, message, and request ID.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": {\n    \"code\": \"BAD_REQUEST\",\n    \"docs\": \"https://unkey.dev/docs/api-reference/errors/code/BAD_REQUEST\",\n    \"message\": \"string\",\n    \"requestId\": \"req_1234\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Rehype Plugins in Collection Config\nDESCRIPTION: Demonstrates adding rehype plugins at the collection level configuration.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/mdx.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollections, getDefaultMDXOptions } from 'fumadocs-mdx/config';\nimport { myPlugin } from './rehype-plugin';\n\nexport const blog = defineCollections({\n  type: 'doc',\n  mdxOptions: getDefaultMDXOptions({\n    rehypePlugins: (v) => [myPlugin, ...v],\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Shared Value Tabs Implementation\nDESCRIPTION: Shows how to implement tabs with shared values across components using groupId property.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/tabs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<Tabs groupId=\"language\" items={['Javascript', 'Rust']}>\n  <Tab value=\"Javascript\">Javascript is weird</Tab>\n  <Tab value=\"Rust\">Rust is fast</Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Successful Response Structure (202 Accepted)\nDESCRIPTION: This JSON snippet shows the structure of a successful response with a 202 status code. The response body is empty in this case.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Disabling Code Samples\nDESCRIPTION: Demonstrates how to disable code sample generation for specific languages.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/configurations.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOpenAPI } from 'fumadocs-openapi/server';\n\nexport const openapi = createOpenAPI({\n  generateCodeSamples(endpoint) {\n    return [\n      {\n        lang: 'curl',\n        label: 'cURL',\n        source: false,\n      },\n    ];\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining API Table of Contents and Structured Data (YAML)\nDESCRIPTION: This YAML fragment outlines the documentation metadata, including a table of contents and structured section headings for various key management operations. It defines how the documentation sidebar and navigation should appear, mapping each operation (get, delete, create, verify, update, etc.) to a display title and corresponding anchor link. This data drives the layout and content structure for the API documentation page and expects an environment capable of parsing YAML front matter. Inputs include list items for sidebar navigation and headings for content sections; the outputs are organized navigation structures in the generated documentation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/keys.mdx#2025-04-23_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ntitle: Keys\nfull: true\n_openapi:\n  toc:\n    - depth: 2\n      title: Get Key\n      url: '#get-key'\n    - depth: 2\n      title: Delete Key\n      url: '#delete-key'\n    - depth: 2\n      title: Create Key\n      url: '#create-key'\n    - depth: 2\n      title: Verify Key\n      url: '#verify-key'\n    - depth: 2\n      title: Update Key\n      url: '#update-key'\n    - depth: 2\n      title: Update Remaining\n      url: '#update-remaining'\n    - depth: 2\n      title: Get Verifications\n      url: '#get-verifications'\n  structuredData:\n    headings:\n      - content: Get Key\n        id: get-key\n      - content: Delete Key\n        id: delete-key\n      - content: Create Key\n        id: create-key\n      - content: Verify Key\n        id: verify-key\n      - content: Update Key\n        id: update-key\n      - content: Update Remaining\n        id: update-remaining\n      - content: Get Verifications\n        id: get-verifications\n    contents: []\n```\n\n----------------------------------------\n\nTITLE: Generating JSON File with Python via pnpm Script - Shell\nDESCRIPTION: This snippet demonstrates how to execute a pnpm script named 'python:generate', which uses Python to generate a local JSON file. It requires pnpm to be installed and the requisite script defined in package.json. Input and output files, as well as script logic, depend on project configuration. After execution, a new or updated JSON file is expected in the local directory.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/python/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm python:generate\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Collection - TypeScript\nDESCRIPTION: Demonstrates how to create a meta collection for JSON/YAML files using defineCollections.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/collections.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollections } from 'fumadocs-mdx/config';\n\n// only scan for json/yaml files\nexport const metaFiles = defineCollections({\n  type: 'meta',\n  // options\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Output Structure for Code Blocks\nDESCRIPTION: Demonstrates the HTML structure output by the Rehype Code plugin, showing the pre and code element wrapping.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/rehype-code.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<pre>\n<code>...</code>\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Code Block with Icon Output Example\nDESCRIPTION: Shows the HTML output structure when using the icon feature of Rehype Code.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/rehype-code.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<pre icon=\"<svg />\">...</pre>\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Mode in Doc Collection\nDESCRIPTION: Configuration setup for enabling Async Mode in a single doc collection using defineCollections.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/async.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollections } from 'fumadocs-mdx/config';\n\nexport const doc = defineCollections({\n  type: 'doc',\n  dir: 'content/docs',\n  async: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Removing SafeLink and using Link Component\nDESCRIPTION: This snippet shows how to migrate from using `SafeLink` to `Link` component.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n- import { SafeLink } from \"next-docs-zeta/link\"\n+ import Link from \"next-docs-zeta/link\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Fumadocs Layouts\nDESCRIPTION: Command to customize Fumadocs layouts using the CLI tool.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/customisation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @fumadocs/cli customise\n```\n\n----------------------------------------\n\nTITLE: Displaying a Warning Callout with Title (JSX/MDX)\nDESCRIPTION: This example shows how to render a warning callout by setting the `type` attribute to \"warn\". It also includes an optional `title` attribute to provide a heading for the callout. The content includes Markdown formatting (**this**) which will be rendered accordingly within the callout.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/test/fixtures/remark-admonition.output.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"warn\" title=\"This is Title\">\n  Warning **this**\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: MDX Image and Link Examples\nDESCRIPTION: Shows how to implement images and links in MDX with Next.js optimization and auto-linking features.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/markdown.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n![Image](/image.png)\n\n[My Link](https://github.github.com/gfm)\n\nThis also works: https://github.github.com/gfm.\n```\n\n----------------------------------------\n\nTITLE: Configuring Base URL after Content Directory Change - diff\nDESCRIPTION: Shows the required configuration changes for the 'baseUrl' parameter in 'createNextDocs' to match the previous behavior after the default root content path change. Developers must manually specify 'baseUrl' as '/docs' for routing consistency.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/mdx/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\nconst withNextDocs = createNextDocs({\n+  baseUrl: \"/docs\"\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Fumadocs Component Metadata in Markdown\nDESCRIPTION: Frontmatter metadata block defining properties for a components documentation page, including title, description and index flag.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Components\ndescription: Additional components to improve your docs\nindex: true\n---\n```\n\n----------------------------------------\n\nTITLE: Using Typography Classes\nDESCRIPTION: Example of implementing typography styles using the built-in prose class for content formatting.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/theme.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"prose\">\n  <h1>Good Heading</h1>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Layout Component Usage - JSX\nDESCRIPTION: Demonstrates how to use the `Layout` component for non-docs pages. The Layout component can be used to provide consistent styling and structure across different pages within an application, but without sidebar.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/ui/CHANGELOG.md#_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Layout } from 'next-docs-ui/layout';\n\nexport default function HomeLayout({ children }) {\n  return <Layout>{children}</Layout>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Content Source Loader\nDESCRIPTION: Configuration for accessing documentation content\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/manual-installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { docs } from '@/.source';\nimport { loader } from 'fumadocs-core/source';\n\nexport const source = loader({\n  baseUrl: '/docs',\n  source: docs.toFumadocsSource(),\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Image Embedding\nDESCRIPTION: Image embed syntax for displaying UI previews within a centered container div.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v12-after.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<div className='mx-auto max-w-[400px]'>\n\n![Preview](/blog/toc-popover.png)\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Imports\nDESCRIPTION: Configures additional component imports for MDX files.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/configurations.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  imports: [\n    {\n      names: ['Component1', 'Component2'],\n      from: '@/components/ui/api',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Static Export Configuration\nDESCRIPTION: Configuration for Next.js static export support with search functionality.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/orama.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { source } from '@/lib/source';\nimport { createFromSource } from 'fumadocs-core/search/server';\n\n// it should be cached forever\nexport const revalidate = false;\n\nexport const { staticGET: GET } = createFromSource(source);\n```\n\n----------------------------------------\n\nTITLE: Implementing Frontmatter in MDX Documentation\nDESCRIPTION: Defines the page metadata using YAML frontmatter with title and description fields.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/content-collections/content/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Hello World\ndescription: Your first document\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Fumadocs with bun\nDESCRIPTION: Command to create a new Fumadocs app using bun package manager.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun create fumadocs-app\n```\n\n----------------------------------------\n\nTITLE: Source API Loader Configuration\nDESCRIPTION: Example of how the source loader was previously configured with schema validation after the MDX transformation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/mdx-v10.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loader } from 'fumadocs-core/source';\nimport { createMDXSource } from 'fumadocs-mdx';\n\nexport const source = loader({\n  source: createMDXSource(map, {\n    // schema\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Inline Code in Markdown (Markdown)\nDESCRIPTION: Demonstrates how to display a word or phrase as inline code within Markdown text using backticks. This is useful for highlighting commands, variable names, or short code fragments in documentation. No dependencies are required, and the input is a string enclosed in backticks. The output is the text rendered as inline code, typically displayed in a monospace font.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/test/fixtures/rehype-toc.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`code`\n```\n\n----------------------------------------\n\nTITLE: Logging 'Test' in TypeScript (Conditionally Shown)\nDESCRIPTION: This TypeScript snippet logs the string \"Test\" to the console. It is contained within a `<show>` component whose visibility is controlled by the result of the `test()` function passed to the `on` prop. The code block and its associated heading ('Test') will only be rendered if `test()` evaluates to a truthy value.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/doc-gen/test/fixtures/remark-show.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconsole.log(\"Test\")\n```\n\n----------------------------------------\n\nTITLE: Adding Fumadocs UI Components\nDESCRIPTION: Command to install and add Fumadocs UI components to your project using the CLI.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/customisation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @fumadocs/cli add\n```\n\n----------------------------------------\n\nTITLE: Using Zoomable Images in MDX\nDESCRIPTION: Example of how to use the configured image zoom functionality in MDX content using standard markdown image syntax.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/image-zoom.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n![Test](/banner.png)\n```\n\n----------------------------------------\n\nTITLE: Function Interface Example - TypeScript\nDESCRIPTION: Example of how to define function types within an interface for Auto Type Table\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/auto-type-table.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MyInterface {\n  myFn: (input: string) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js External Packages\nDESCRIPTION: Configuration for Next.js to include required external packages for Twoslash\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/twoslash.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMDX } from 'fumadocs-mdx/next';\n\nconst config = {\n  reactStrictMode: true,\n  serverExternalPackages: ['typescript', 'twoslash'],\n};\n\nconst withMDX = createMDX();\n\nexport default withMDX(config);\n```\n\n----------------------------------------\n\nTITLE: Embedding a Local Image using HTML `<img>` Tag\nDESCRIPTION: This HTML snippet uses the `<img>` tag to display a local image file named `test.png` located in the same directory (relative path `./`). It includes alternative text \"Test\" for accessibility and specifies the display width as 1299 pixels and height as 731 pixels.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/test/fixtures/remark-image-without-import.output.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img alt=\"Test\" src=\"./test.png\" width=\"1299\" height=\"731\" />\n```\n\n----------------------------------------\n\nTITLE: Running Fumadocs App in Development Mode\nDESCRIPTION: Command to start the Fumadocs app in development mode using npm.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/index.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting up I18n in Fumadocs Loader\nDESCRIPTION: Configuration for internationalization support in the Fumadocs loader.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/source-api.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from '@/lib/i18n';\nimport { loader } from 'fumadocs-core/source';\n\nexport const source = loader({\n  i18n,\n});\n```\n\n----------------------------------------\n\nTITLE: Rehype TOC Input Example\nDESCRIPTION: Sample Markdown input demonstrating heading with inline code for Rehype TOC processing.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/headings.mdx#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## Hello `code`\n```\n\n----------------------------------------\n\nTITLE: I18n Source Configuration\nDESCRIPTION: Configuration of internationalization in the source loader.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/orama.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from '@/lib/i18n';\nimport { loader } from 'fumadocs-core/source';\n\nexport const source = loader({\n  i18n,\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Blog Post Structure\nDESCRIPTION: Front matter and content structure for the Fumadocs 12.0.5 release notes blog post, including metadata like title, description, date, and author.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v12-after.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Fumadocs 12.0.5\ndescription: After the release of Fumadocs 12\ndate: 2024-06-13\nauthor: Fuma Nama\n---\n```\n\n----------------------------------------\n\nTITLE: Basic Package Install Block Example\nDESCRIPTION: Simple example of using the package-install code block syntax\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/install.mdx#2025-04-23_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nfumadocs-docgen\n```\n\n----------------------------------------\n\nTITLE: Successful Response Structure for Enqueuing Keys in JSON\nDESCRIPTION: Defines the structure of a successful response when enqueuing keys. It includes a success boolean and a count of the number of keys enqueued.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"count\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Import with Hash and Collection Name\nDESCRIPTION: Optimized collection import structure that includes config file hash and collection name for efficient recompilation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/mdx-v10.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const collection1 = [import('./docs/index.mdx?hash=hashOfConfigFile&collection=collection1')];\n```\n\n----------------------------------------\n\nTITLE: Displaying Tree Command Help\nDESCRIPTION: Command to show help information for the tree command functionality.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/cli/index.mdx#2025-04-23_snippet_6\n\nLANGUAGE: package-install\nCODE:\n```\nnpx @fumadocs/cli tree -h\n```\n\n----------------------------------------\n\nTITLE: Executing Unkey API POST Request using cURL\nDESCRIPTION: Shows how to send a POST request with a JSON payload using cURL to the Unkey API. This example uses the `keys.createKey` method to create a new key, specifying the `apiId` and `name` in the JSON body. It includes the required `Authorization` and `Content-Type: application/json` headers.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/openapi/content/docs/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\ncurl -XPOST \"https://api.unkey.dev/v1/keys.createKey\" \\\n  -H \"Authorization: Bearer <ROOT_KEY>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"apiId\": \"api_123\", \"name\": \"My Key\"}'\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages\nDESCRIPTION: Package installation command for Fumadocs Twoslash integration\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/twoslash.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfumadocs-twoslash twoslash\n```\n\n----------------------------------------\n\nTITLE: Configuring Fumadocs MDX with Math Plugins\nDESCRIPTION: Configuration setup for Fumadocs MDX to enable math equation support by adding remark-math and rehype-katex plugins to the processing pipeline. The rehype-katex plugin is placed first to prevent interference from syntax highlighters.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/math.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport rehypeKatex from 'rehype-katex';\nimport remarkMath from 'remark-math';\nimport { defineConfig } from 'fumadocs-mdx/config';\n\nexport default defineConfig({\n  mdxOptions: {\n    remarkPlugins: [remarkMath],\n    // Place it at first so that it won't be changed by syntax highlighter\n    rehypePlugins: (v) => [rehypeKatex, ...v],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Type Table (Old Syntax) using JSON\nDESCRIPTION: This snippet shows the deprecated method for generating a type table using a JSON configuration block within an MDX file, processed by the `typescriptGenerator` which was removed in fumadocs-docgen v2.0.0. It specified the source file and the target type name.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/doc-gen/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n```json doc-gen:typescript\n{\n  \"file\": \"./my-file.ts\",\n  \"name\": \"MyInterface\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generated Tabs Structure Example\nDESCRIPTION: Example of the MDX structure generated by the plugin\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/install.mdx#2025-04-23_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n<Tabs items={['npm', 'pnpm', 'yarn', 'bun']}>\n  <Tab value=\"npm\">...</Tab>\n  <Tab value=\"pnpm\">...</Tab>\n  <Tab value=\"yarn\">...</Tab>\n  <Tab value=\"bun\">...</Tab>\n<Tabs>\n```\n\n----------------------------------------\n\nTITLE: Authenticating API Requests with Bearer Token using cURL in Bash\nDESCRIPTION: This Bash snippet demonstrates how to include a root key as a Bearer token in the Authorization header of a cURL request when accessing the Unkey API. To use it, obtain your root key from the Unkey Dashboard and replace 'unkey_xxx' with your actual key value. The request is made to the specified API endpoint, and the expected output will be the HTTP response for that endpoint, provided the key is valid. Ensure you never expose or share your root key publicly, and reset it if necessary.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/openapi/content/docs/auth.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.unkey.dev/v1/... \\\n  -H \"Authorization: Bearer unkey_xxx\"\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Bad Request Error (400)\nDESCRIPTION: This JSON snippet shows an example error response for a Bad Request (HTTP status 400). The response contains an `error` object with a machine-readable `code`, a link to the `docs` for more details, a human-readable `message`, and a unique `requestId` for tracking.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"error\": {\n    \"code\": \"BAD_REQUEST\",\n    \"docs\": \"https://unkey.dev/docs/api-reference/errors/code/BAD_REQUEST\",\n    \"message\": \"string\",\n    \"requestId\": \"req_1234\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting up multiple Fumadocs sources with loader\nDESCRIPTION: TypeScript example showing how to set up multiple loaders for different collections. This allows you to manage separate content collections with their own base URLs and configurations.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/index.mdx#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { docs, blogPosts } from '@/.source';\nimport { loader } from 'fumadocs-core/source';\n\nexport const source = loader({\n  baseUrl: '/docs',\n  source: docs.toFumadocsSource(),\n});\n\nexport const blog = loader({\n  baseUrl: '/blog',\n  source: blogPosts.toFumadocsSource(),\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Math Equation Example with KaTeX\nDESCRIPTION: A more complex mathematical equation example showing Taylor series expansion with multiple lines and advanced LaTeX notation rendered using KaTeX.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/math.mdx#2025-04-23_snippet_5\n\nLANGUAGE: math\nCODE:\n```\n\\displaystyle {\\begin{aligned}T_{f}(z)&=\\sum _{k=0}^{\\infty }{\\frac {(z-c)^{k}}{2\\pi i}}\\int _{\\gamma }{\\frac {f(w)}{(w-c)^{k+1}}}\\,dw\\\\&={\\frac {1}{2\\pi i}}\\int _{\\gamma }{\\frac {f(w)}{w-c}}\\sum _{k=0}^{\\infty }\\left({\\frac {z-c}{w-c}}\\right)^{k}\\,dw\\\\&={\\frac {1}{2\\pi i}}\\int _{\\gamma }{\\frac {f(w)}{w-c}}\\left({\\frac {1}{1-{\\frac {z-c}{w-c}}}}\\right)\\,dw\\\\&={\\frac {1}{2\\pi i}}\\int _{\\gamma }{\\frac {f(w)}{w-z}}\\,dw=f(z),\\end{aligned}}\n```\n\n----------------------------------------\n\nTITLE: Applying Step Styles to Headings with Arbitrary Variants\nDESCRIPTION: Shows how to apply step styling to heading elements using Tailwind CSS arbitrary variants, eliminating the need for explicit step components.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/steps.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<div className='fd-steps [&_h3]:fd-step'>\n\n### Hello World\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: MDX API Component Example\nDESCRIPTION: This MDX snippet illustrates the structure of a generated API documentation page using Fumadocs components. It demonstrates the usage of <API>, <APIInfo>, <Property>, <APIExample>, <Responses>, <Response>, <ResponseTypes>, <ExampleResponse>, and <TypeScriptResponse> to define the API details, parameters, examples, and responses. Key components are used to define the method, route, parameters, and response types.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/CHANGELOG.md#_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n<API>\n\n<APIInfo method={\"GET\"} route={\"/pets/{petId}\"}>\n\n## Info for a specific pet\n\n### Path Parameters\n\n<Property name={\"petId\"} type={\"string\"} required={true} deprecated={false}>\n\nThe id of the pet to retrieve\n\n</Property>\n\n| Status code | Description                          |\n| ----------- | ------------------------------------ |\n| `200`       | Expected response to a valid request |\n| `default`   | unexpected error                     |\n\n</APIInfo>\n\n<APIExample>\n\n```bash title=\"curl\"\ncurl -X GET \"http://petstore.swagger.io/pets/string\"\n```\n\n<Responses items={[\"200\",\"default\"]}>\n\n<Response value={\"200\"}>\n\n<ResponseTypes>\n\n<ExampleResponse>\n\n```json\n{\n  \"id\": 0,\n  \"name\": \"string\",\n  \"tag\": \"string\"\n}\n```\n\n</ExampleResponse>\n\n<TypeScriptResponse>\n\n```ts\nexport interface Response {\n  id: number;\n  name: string;\n  tag?: string;\n}\n```\n\n</TypeScriptResponse>\n\n</ResponseTypes>\n\n</Responses>\n\n</APIExample>\n\n</API>\n```\n\n----------------------------------------\n\nTITLE: Error Response Structure for Unkey API in JSON\nDESCRIPTION: Defines the structure of an error response from the Unkey API. It includes an error object with a code, documentation link, message, and requestId.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": {\n    \"code\": \"FORBIDDEN\",\n    \"docs\": \"https://unkey.dev/docs/api-reference/errors/code/FORBIDDEN\",\n    \"message\": \"string\",\n    \"requestId\": \"req_1234\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Adjacent Pages using findNeighbour in TypeScript\nDESCRIPTION: Demonstrates how to use the findNeighbour function to locate neighboring pages in a page tree structure. The function takes a PageTree object and a URL string as parameters and returns the next and previous pages relative to the given URL.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/utils/find-neighbour.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { findNeighbour } from 'fumadocs-core/server';\nimport { pageTree } from '@/lib/source';\n\nconst neighbours = findNeighbour(pageTree, '/url/to/page');\n```\n\n----------------------------------------\n\nTITLE: Creating Step Groups with Div Containers and Class Names in React JSX\nDESCRIPTION: This snippet shows how to structure step-based UI sections using nested <div> elements with the class names 'fd-steps' for the group container and 'fd-step' for individual steps. The use of Markdown-style headings within each step demonstrates a hybrid Markdown/JSX syntax, facilitating a visually organized multi-step layout. Dependencies include a React environment that supports JSX and the corresponding CSS for the 'fd-steps' and 'fd-step' classes. Inputs are the sequential step content; outputs are rendered, structured steps in the UI; limitations include a requirement for JSX parsing and proper CSS availability.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/test/fixtures/remark-steps.output.md#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\\\"fd-steps\\\">\n  <div className=\\\"fd-step\\\">\n    ## First\n\n    content\n\n    ### Little Tip\n\n    content\n  </div>\n\n  <div className=\\\"fd-step\\\">\n    ## Second\n\n    content\n  </div>\n\n  <div className=\\\"fd-step\\\">\n    ## Third\n\n    content\n  </div>\n</div>\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\\\"fd-steps\\\">\n  <div className=\\\"fd-step\\\">\n    # Big: First\n\n    content\n  </div>\n\n  <div className=\\\"fd-step\\\">\n    # Big: Second\n\n    content\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Fumadocs Callout Component\nDESCRIPTION: Demonstrates the usage of the Callout component to highlight content.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/content-collections/content/docs/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout>Hello World</Callout>\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Dependency - Shell\nDESCRIPTION: This snippet demonstrates how to install the Next.js framework using the project's package manager (such as npm, yarn, or pnpm). Ensure you are in your project's root directory before executing this command. No parameters are required, and the output will be the addition of Next.js to your project's dependencies, which is necessary for building Next.js applications.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/doc-gen/test/fixtures/remark-install.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnext\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Async Mode\nDESCRIPTION: Command to install necessary packages for enabling Async Mode functionality.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/async.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n@fumadocs/mdx-remote shiki\n```\n\n----------------------------------------\n\nTITLE: Defining FORBIDDEN Error Response with TypeScript Interfaces\nDESCRIPTION: This TypeScript interface defines the error response for a \"FORBIDDEN\" error code. It specifies the required fields including the machine-readable code, documentation URL, human-readable message, and request ID, ensuring that any API client using this type will provide consistent error information. No external package dependencies are required; the interface is self-contained and typifies a standard error contract for forbidden operations.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Response {\n  error: {\n    /**\n     * A machine readable error code.\n     */\n    code: \"FORBIDDEN\";\n    /**\n     * A link to our documentation with more details about this error code\n     */\n    docs: string;\n    /**\n     * A human readable explanation of what went wrong\n     */\n    message: string;\n    /**\n     * Please always include the requestId in your error report\n     */\n    requestId: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TOO_MANY_REQUESTS Error Response with TypeScript Interfaces\nDESCRIPTION: This TypeScript interface defines the response structure for a \"TOO_MANY_REQUESTS\" error, indicating rate limiting. It contains fields for the error code, supporting documentation link, error message, and request ID, facilitating straightforward integration of rate-limit handling logic into TypeScript-enabled clients. There are no external dependencies required.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Response {\n  error: {\n    /**\n     * A machine readable error code.\n     */\n    code: \"TOO_MANY_REQUESTS\";\n    /**\n     * A link to our documentation with more details about this error code\n     */\n    docs: string;\n    /**\n     * A human readable explanation of what went wrong\n     */\n    message: string;\n    /**\n     * Please always include the requestId in your error report\n     */\n    requestId: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Example Interface Definition - TypeScript\nDESCRIPTION: Sample TypeScript interface definition for use with Auto Type Table\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/auto-type-table.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MyInterface {\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Logging 'Hello World' using JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates logging the string 'Hello World' to the console. It is presented within the document under the 'CodeBlock' heading, likely to test the code block rendering and syntax highlighting functionality of the Fumadocs system.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/tanstack-start/content/docs/test.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('Hello World');\n```\n\n----------------------------------------\n\nTITLE: Relative Path Image Example\nDESCRIPTION: Example of using relative paths for local images.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-image.mdx#2025-04-23_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n![Hello](./hello.png)\n```\n\n----------------------------------------\n\nTITLE: Defining Direct HSL Color Variables in @theme - CSS\nDESCRIPTION: Defines CSS variables for Fumadocs color using the hsl() CSS function directly in the @theme block, replacing the previous fd-* variable format. Facilitates seamless interoperation with Tailwind CSS v4's new color handling. Requires no external libraries but must be included in a CSS context where @theme is supported. Key parameter is --color-fd-primary, with hsl() as value.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/v15.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@theme {\\n  --color-fd-primary: hsl(0, 0%, 100%);\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Sidebar Tab Decoration\nDESCRIPTION: This snippet shows how to customize the appearance of sidebar tabs by transforming their options. It allows for adding custom icons or modifying styles of individual tabs.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/navigation/sidebar.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\n\n<DocsLayout\n  sidebar={{\n    tabs: {\n      transform: (option, node) => ({\n        ...option,\n        icon: 'my icon',\n      }),\n    },\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Enabling Tag Filter in Trieve SearchDialog Component (React, TSX)\nDESCRIPTION: Configures the SearchDialog component to filter search results by tag. Specifies defaultTag and a tags array, which provides display name and value pairs for UI filtering. Intended for use within a TypeScript React application utilizing the Fumadocs Trieve integration components.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/search/trieve.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport SearchDialog from 'trieve-fumadocs-adapter/components/dialog/search';\n\n<SearchDialog\n  defaultTag=\"value\"\n  tags={[\n    {\n      name: 'Tag Name',\n      value: 'value',\n    },\n  ]}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Tables\nDESCRIPTION: Demonstrates how to create a simple two-column table using markdown syntax.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/content-collections/content/docs/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| name        | description |\n| ----------- | ----------- |\n| Hello World | Goodbye     |\n```\n\n----------------------------------------\n\nTITLE: Generating Type Table with auto-type-table Component (Fumadocs)\nDESCRIPTION: This JSX-like component tag is specific to the Fumadocs framework. It automatically generates a documentation table for the TypeScript type named 'Player' located in the file './test-2.ts'. The 'path' attribute specifies the source file, and the 'name' attribute indicates the specific type or interface to document.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/typescript/test/fixtures/test.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<auto-type-table path=\"./test-2.ts\" name=\"Player\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Fumadocs Document Metadata in Markdown\nDESCRIPTION: Sets up the frontmatter for a Fumadocs document, including the title and description. This metadata is typically used for SEO and document organization.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/i18n/content/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Hello World\ndescription: Your first document\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic TOC Components with React\nDESCRIPTION: Demonstrates the basic setup of a Table of Contents using fumadocs-core components. Shows how to combine AnchorProvider, ScrollProvider, and TOCItem components for a functional TOC implementation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/components/toc.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Base from 'fumadocs-core/toc';\n\nreturn (\n  <Base.AnchorProvider>\n    <Base.ScrollProvider>\n      <Base.TOCItem />\n      <Base.TOCItem />\n    </Base.ScrollProvider>\n  </Base.AnchorProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring RTL Layout\nDESCRIPTION: React component setup for enabling RTL (Right-to-left) layout in the application root, using RootProvider from fumadocs-ui.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/theme.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RootProvider } from 'fumadocs-ui/provider';\nimport type { ReactNode } from 'react';\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body dir=\"rtl\">\n        <RootProvider dir=\"rtl\">{children}</RootProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js Config for Fumadocs MDX v10\nDESCRIPTION: Shows how to refactor the import and configuration in next.config.js for Fumadocs MDX v10. The import statement is changed and the createMDX function is now imported from 'fumadocs-mdx/next'.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/blog/mdx-v10-summary.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMDX } from 'fumadocs-mdx/next';\n\nconst withMDX = createMDX();\n\n/** @type {import('next').NextConfig} */\nconst config = {\n  reactStrictMode: true,\n};\n\nexport default withMDX(config);\n```\n\n----------------------------------------\n\nTITLE: Starting Fumadocs Development Server (Bash)\nDESCRIPTION: These shell commands demonstrate how to launch the development server for the Fumadocs application. Users can select the command corresponding to their installed package manager (npm, pnpm, or yarn). Executing one of these commands typically starts a local server hosting the application for development and testing.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/create-app/template/react-router/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\npnpm dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Sidebar Components in React with Fumadocs\nDESCRIPTION: This code demonstrates how to implement a basic sidebar using the fumadocs-core package. It imports the necessary components from the sidebar module and sets up a complete sidebar with provider, trigger, and list components.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/components/sidebar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Base from 'fumadocs-core/sidebar';\n\nreturn (\n  <Base.SidebarProvider>\n    <Base.SidebarTrigger />\n    <Base.SidebarList />\n  </Base.SidebarProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a React Layout Component with Children in TypeScript\nDESCRIPTION: This TypeScript code defines a React functional component named `Layout`. It accepts `children` of type `ReactNode` as props and renders them inside a `div`, appended with a string variable `v`. It demonstrates basic component structure and prop handling in React with TypeScript. The use of `as any` for the variable `v` bypasses TypeScript's type checking for that assignment.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/doc-gen/test/fixtures/ts2js.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReactNode } from 'react';\n\nexport default function Layout({ children }: { children: ReactNode }) {\n  const v: string = 'hello world' as any;\n\n  return (\n    <div>\n      {children} {v}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Generation Mode\nDESCRIPTION: Configures how pages are generated by specifying the 'per' option to generate pages by tag.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/openapi/configurations.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateFiles } from 'fumadocs-openapi';\n\nvoid generateFiles({\n  per: 'tag',\n});\n```\n\n----------------------------------------\n\nTITLE: Example MDX Code Block with Title Meta\nDESCRIPTION: Shows how to use the title meta string feature in MDX code blocks.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/rehype-code.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n```js title=\"Title\"\nconsole.log('Hello');\n```\n```\n\n----------------------------------------\n\nTITLE: Logging to Console with JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to print a simple message ('Hello World') to the console. It requires a JavaScript runtime environment, such as Node.js or a web browser console. The key command is console.log, which outputs the string provided as its argument to the standard output. No input is required and the output will be the text 'Hello World' in the console. This is a fundamental example often used to verify initial setup or debug output.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/content-collections/content/docs/test.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log('Hello World');\n```\n\n----------------------------------------\n\nTITLE: MDX Options Configuration - TypeScript\nDESCRIPTION: Shows how to customize MDX options at the collection level with default settings.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/collections.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollections, getDefaultMDXOptions } from 'fumadocs-mdx/config';\n\nexport const blog = defineCollections({\n  type: 'doc',\n  mdxOptions: {\n    // mdx options\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollections, getDefaultMDXOptions } from 'fumadocs-mdx/config';\n\nexport const blog = defineCollections({\n  type: 'doc',\n  mdxOptions: getDefaultMDXOptions({\n    // extended mdx options\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Mermaid Component in MDX Files\nDESCRIPTION: Example of how to use the Mermaid component in MDX files to render diagrams. The chart attribute contains the Mermaid diagram definition in string format.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/(integrations)/mermaid.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<Mermaid\n  chart=\"\ngraph TD;\nsubgraph AA [Consumers]\nA[Mobile app];\nB[Web app];\nC[Node.js client];\nend\nsubgraph BB [Services]\nE[REST API];\nF[GraphQL API];\nG[SOAP API];\nend\nZ[GraphQL API];\nA --> Z;\nB --> Z;\nC --> Z;\nZ --> E;\nZ --> F;\nZ --> G;\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Fumadocs MDX collection output in TypeScript\nDESCRIPTION: TypeScript example showing how to import and use a docs collection from the generated .source folder. This demonstrates the basic pattern for accessing Fumadocs-generated data.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/mdx/index.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// source.config.ts\nimport { defineDocs } from 'fumadocs-mdx/config';\n\nexport const docs = defineDocs({\n  dir: 'content/docs',\n  docs: {\n    // options for `doc` collection\n  },\n  meta: {\n    // options for `meta` collection\n  },\n});\n\n// lib/source.ts\nimport { docs } from '@/.source';\n\nconsole.log(docs);\n```\n\n----------------------------------------\n\nTITLE: Accessing Contentlayer properties in JSX\nDESCRIPTION: This snippet showcases the change in accessing Contentlayer properties in JSX components after the migration. It highlights how properties previously accessed directly from `page.body.code` are now accessed through `page.data.body.code`.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/CHANGELOG.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n- <Content code={page.body.code} />\n+ <Content code={page.data.body.code} />\n```\n\n----------------------------------------\n\nTITLE: Installing Fumadocs with npm\nDESCRIPTION: Command to create a new Fumadocs app using npm package manager.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create fumadocs-app\n```\n\n----------------------------------------\n\nTITLE: Successful Key Creation Response Structure (JSON)\nDESCRIPTION: This JSON snippet illustrates the expected response format for a successful key creation request (HTTP 200 OK) to the Unkey `/v1/migrations.createKeys` endpoint. It contains a `keyIds` array listing the unique identifiers of the keys that were created. These IDs are not secrets and can be stored for future reference or management operations.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/migrations.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keyIds\": [\n    \"key_123\",\n    \"key_456\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing React Router Provider\nDESCRIPTION: Implementation of ReactRouterProvider component for React Router framework integration with Fumadocs Core.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ReactNode } from 'react';\nimport { ReactRouterProvider } from 'fumadocs-core/framework/react-router';\n\nexport function Root({ children }: { children: ReactNode }) {\n  return <ReactRouterProvider>{children}</ReactRouterProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fumadocs Components\nDESCRIPTION: Command to select and install Fumadocs components interactively.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/cli/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: package-install\nCODE:\n```\nnpx @fumadocs/cli add\n```\n\n----------------------------------------\n\nTITLE: Using TypeTable Component in MDX\nDESCRIPTION: Demonstrates how to import and use the TypeTable component to document type definitions with properties like percentage, including descriptions, types, and default values.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/components/type-table.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { TypeTable } from 'fumadocs-ui/components/type-table';\n\n<TypeTable\n  type={{\n    percentage: {\n      description:\n        'The percentage of scroll position to display the roll button',\n      type: 'number',\n      default: 0.2,\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Fumadocs Core Package\nDESCRIPTION: Command to install the fumadocs-core package with no additional dependencies required.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfumadocs-core\n```\n\n----------------------------------------\n\nTITLE: Importing Static Images in MDX After Remark Transformation - mdx\nDESCRIPTION: Illustrates the MDX code generated after embedding an image with the 'remark-image' plugin. This code statically imports an image and renders it with an <img> tag for better performance and build-time optimization. This approach requires the image file to be available at the correct path and is supported by the Fumadocs build tooling.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/mdx/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nimport img_banner from '../../public/image.png';\n\n<img alt=\"banner\" src={img_banner} />\n```\n\n----------------------------------------\n\nTITLE: Image Import Examples in MDX\nDESCRIPTION: Examples of using local and external images in MDX with the remark-image plugin.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-image.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n![Hello](/hello.png)\n![Test](https://example.com/image.png)\n```\n\n----------------------------------------\n\nTITLE: Logging 'Goodbye' in TypeScript (Always Shown)\nDESCRIPTION: This TypeScript snippet logs the string \"Goodbye\" to the console. It is located within a `<show>` component whose `on` prop is set to `true`, meaning this code block and its surrounding content will always be rendered.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/doc-gen/test/fixtures/remark-show.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconsole.log(\"Goodbye\")\n```\n\n----------------------------------------\n\nTITLE: Generated MDX Output Without Imports\nDESCRIPTION: The transformed MDX output when static imports are disabled.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/remark-image.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<img alt=\"Hello\" src=\"/hello.png\" width=\"1980\" height=\"1080\" />\n<img\n  alt=\"Test\"\n  src=\"https://example.com/image.png\"\n  width=\"1980\"\n  height=\"1080\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Logging Output with Console.log in JavaScript\nDESCRIPTION: This code snippet demonstrates how to print a string to the console using the console.log function in JavaScript. It is commonly used for testing, debugging, or providing output during script execution. The snippet takes a string as input (in this case, 'HELLO') and prints it to the standard output; no input parameters or return values are used, and there are no dependencies or constraints.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/remote-mdx/content/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log('HELLO');\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Folder in Fumadocs meta.json\nDESCRIPTION: This JSON snippet demonstrates how to configure a root folder in meta.json for Fumadocs. It shows the properties for setting a folder as a root folder, including title, description, and the root flag.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/page-conventions.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Name of Folder\",\n  \"description\": \"The description of root folder (optional)\",\n  \"root\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Logging a String to Console in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to log the string 'Not indexed' to the console using the `console.log` function. It requires a JavaScript/TypeScript runtime environment. The surrounding markdown text does not provide specific context for this operation.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/core/test/fixtures/remark-structure.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log('Not indexed');\n```\n\n----------------------------------------\n\nTITLE: Dynamic Link Component Usage in MDX\nDESCRIPTION: Shows how to use the DynamicLink component for dynamic routing scenarios in Next.js App Router.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/components/link.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { DynamicLink } from 'fumadocs-core/dynamic-link';\n\n<DynamicLink href=\"/[lang]/components\">Click Me</DynamicLink>\n```\n\n----------------------------------------\n\nTITLE: Logging Hello World to the Console using TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to print 'Hello World' to the console. No external dependencies are required; it runs in any JavaScript-compatible environment. The main action is outputting the string to stdout. It serves as a basic starting example for verifying that the development environment is set up correctly.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/examples/tanstack-start/content/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log('Hello World');\n```\n\n----------------------------------------\n\nTITLE: Disabling Prefetching in DocsLayout Sidebar\nDESCRIPTION: Demonstrates how to disable prefetching for sidebar links in the DocsLayout component to reduce serverless function usage and data cache on platforms like Vercel.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/layouts/docs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocsLayout } from 'fumadocs-ui/layouts/docs';\n\n<DocsLayout sidebar={{ prefetch: false }} />;\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server - Bash\nDESCRIPTION: This snippet demonstrates three methods to start the development server in a Next.js project generated by Create Fumadocs, using npm, pnpm, or yarn. It requires Node.js and one of the specified package managers to be installed. The server listens on http://localhost:3000 and is primarily intended for use during development. The snippet does not affect production settings and should be executed from the project root directory.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/create-app/template/+next/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\npnpm dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: MDX Component Integration\nDESCRIPTION: Example of importing and using components in MDX documents.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/markdown.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Component } from './component';\n\n<Component name=\"Hello\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Fumadocs with yarn\nDESCRIPTION: Command to create a new Fumadocs app using yarn package manager.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/ui/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn create fumadocs-app\n```\n\n----------------------------------------\n\nTITLE: Defining a Separator Item in the Page Tree (JSON)\nDESCRIPTION: Provides an example JSON object representing a separator node, used to label sections between navigation items. Only requires 'type' and 'name' properties. Used to enhance UI by grouping items in the navigation tree. Outputs a simple label object in JSON.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/page-tree.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"type\\\": \\\"separator\\\",\\n  \\\"name\\\": \\\"Components\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Structure Function with Custom Remark Plugins in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the structure function with custom remark plugins. It imports necessary modules and applies the function with a custom plugin (remark-math).\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/apps/docs/content/docs/headless/mdx/structure.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { structure } from 'fumadocs-core/mdx-plugins';\nimport remarkMath from 'remark-math';\n\nstructure(page.body.raw, [remarkMath]);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Unauthorized Error Response (401)\nDESCRIPTION: This TypeScript interface defines the structure for a 401 Unauthorized error response. It specifies an `error` object containing at least the `code` property with the value 'UNAUTHORIZED' and a comment describing its purpose. The provided snippet is incomplete for the full error object.\nSOURCE: https://github.com/fuma-nama/fumadocs/blob/dev/packages/openapi/test/out/unkey/ratelimits.mdx#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n```ts\nexport interface Response {\n  error: {\n    /**\n     * A machine readable error code.\n     */\n    code: \"UNAUTHORIZED\";\n```\n```"
  }
]