[
  {
    "owner": "motdotla",
    "repo": "dotenv",
    "content": "TITLE: Creating Environment Variables\nDESCRIPTION: Example of defining environment variables in a .env file using key-value pairs.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: dosini\nCODE:\n```\nS3_BUCKET=\"YOURS3BUCKET\"\nSECRET_KEY=\"YOURSECRETKEYGOESHERE\"\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Code\nDESCRIPTION: Example showing how to access environment variables in application code after loading them.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config()\n// or import 'dotenv/config' if you're using ES6\n\n...\n\ns3.getBucketCors({Bucket: process.env.S3_BUCKET}, function(err, data) {})\n```\n\n----------------------------------------\n\nTITLE: Installing Dotenv Package\nDESCRIPTION: Commands to install the dotenv package using different package managers including npm, yarn, and bun.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dotenv --save\n\nyarn add dotenv\n# or\nbun add dotenv\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Dotenv with ES6 Import in JavaScript\nDESCRIPTION: This snippet shows the correct way to use dotenv with ES6 imports to ensure environment variables are properly loaded.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'dotenv/config'\n\nimport errorReporter from './errorReporter.mjs'\n```\n\n----------------------------------------\n\nTITLE: Using Dotenv Config Function with Error Handling in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the dotenv config function to load environment variables from a .env file with proper error handling. It returns an object with either a parsed key containing loaded content or an error key if loading failed.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = dotenv.config()\n\nif (result.error) {\n  throw result.error\n}\n\nconsole.log(result.parsed)\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables with ES6\nDESCRIPTION: Example of loading environment variables using ES6 import syntax.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'dotenv/config'\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables with CommonJS\nDESCRIPTION: Example of loading environment variables using CommonJS require syntax.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config()\nconsole.log(process.env) // remove this after you've confirmed it is working\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple .env Files in Order with Dotenv in JavaScript\nDESCRIPTION: This example demonstrates how to load multiple .env files in a specific order. Files are parsed sequentially and combined, with the first value set for a variable winning unless the override option is enabled.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config({ path: ['.env.local', '.env'] })\n```\n\n----------------------------------------\n\nTITLE: Customizing Dotenv Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to use dotenv.config() to parse a .env file and further customize the environment variables using a plugin like dotenv-expand.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst dotenv = require('dotenv')\nconst variableExpansion = require('dotenv-expand')\nconst myEnv = dotenv.config()\nvariableExpansion(myEnv)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Target Object with Dotenv in JavaScript\nDESCRIPTION: This snippet shows how to write environment variables to a custom object instead of process.env. This allows you to keep environment variables isolated from the global process.env object.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst myObject = {}\nrequire('dotenv').config({ processEnv: myObject })\n\nconsole.log(myObject) // values from .env\nconsole.log(process.env) // this was not changed or written to\n```\n\n----------------------------------------\n\nTITLE: Enabling Override Mode in Dotenv Configuration in JavaScript\nDESCRIPTION: This example shows how to enable override mode in dotenv, which allows values from .env files to supersede existing environment variables. With override enabled, the last value set wins when multiple files are provided.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config({ override: true })\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Path for .env File in JavaScript\nDESCRIPTION: This snippet shows how to configure dotenv to look for a .env file in a custom location instead of the default current working directory. This is useful when your environment file is stored in a non-standard location.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config({ path: '/custom/path/to/.env' })\n```\n\n----------------------------------------\n\nTITLE: Multiline Environment Variables\nDESCRIPTION: Examples showing how to define multiline values in .env files, such as private keys.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: dosini\nCODE:\n```\nPRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\n...\nKh9NV...\n...\n-----END RSA PRIVATE KEY-----\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variables with Comments\nDESCRIPTION: Example showing how to add comments in .env files, both standalone and inline.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: dosini\nCODE:\n```\n# This is a comment\nSECRET_KEY=YOURSECRETKEYGOESHERE # comment\nSECRET_HASH=\"something-with-a-#-hash\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Environment Variables Programmatically\nDESCRIPTION: Example showing how to use the dotenv parser directly to parse environment variables from a string or buffer.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst dotenv = require('dotenv')\nconst buf = Buffer.from('BASIC=basic')\nconst config = dotenv.parse(buf) // will return an object\nconsole.log(typeof config, config) // object { BASIC : 'basic' }\n```\n\n----------------------------------------\n\nTITLE: Using Dotenv Populate Function with Custom Source in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the populate function to directly assign environment variables from a custom source object to process.env. This gives more control over the source of environment variables.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst dotenv = require('dotenv')\nconst parsed = { HELLO: 'world' }\n\ndotenv.populate(process.env, parsed)\n\nconsole.log(process.env.HELLO) // world\n```\n\n----------------------------------------\n\nTITLE: Using Dotenv Parse Function with Buffer in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the dotenv parse function directly with a Buffer. This allows parsing environment variables from sources other than .env files, returning an object with the parsed keys and values.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst dotenv = require('dotenv')\nconst buf = Buffer.from('BASIC=basic')\nconst config = dotenv.parse(buf) // will return an object\nconsole.log(typeof config, config) // object { BASIC : 'basic' }\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with Dotenv and Polyfills in JavaScript\nDESCRIPTION: This example demonstrates how to configure Webpack to work with dotenv and include necessary polyfills for front-end usage.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config()\n\nconst path = require('path');\nconst webpack = require('webpack')\n\nconst NodePolyfillPlugin = require('node-polyfill-webpack-plugin')\n\nmodule.exports = {\n  mode: 'development',\n  entry: './src/index.ts',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  plugins: [\n    new NodePolyfillPlugin(),\n    new webpack.DefinePlugin({\n      'process.env': {\n        HELLO: JSON.stringify(process.env.HELLO)\n      }\n    }),\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in Dotenv Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to enable debug mode in dotenv to help troubleshoot issues with environment variables. Debug mode provides logging information about why certain keys or values aren't being set as expected.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config({ debug: process.env.DEBUG })\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for Troubleshooting in JavaScript\nDESCRIPTION: This snippet shows how to enable debug mode when troubleshooting issues with .env files not loading correctly. Debug mode will output helpful error messages to the console to identify problems.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config({ debug: true })\n```\n\n----------------------------------------\n\nTITLE: Using Dotenv Parse Function with Debug Option in JavaScript\nDESCRIPTION: This example shows how to use the parse function with debug mode enabled. This is useful when troubleshooting why certain environment variables aren't parsing correctly from a buffer.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst dotenv = require('dotenv')\nconst buf = Buffer.from('hello world')\nconst opt = { debug: true }\nconst config = dotenv.parse(buf, opt)\n// expect a debug message because the buffer is not in KEY=VAL form\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Encoding for .env File in JavaScript\nDESCRIPTION: This snippet shows how to specify a non-default encoding when loading a .env file. This is useful when your environment file uses an encoding other than the default UTF-8.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config({ encoding: 'latin1' })\n```\n\n----------------------------------------\n\nTITLE: Using Dotenv Populate with Custom Source and Target in JavaScript\nDESCRIPTION: This example shows how to use the populate function with custom source and target objects and additional options. This provides complete control over both the source and destination of environment variables.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst dotenv = require('dotenv')\nconst parsed = { HELLO: 'universe' }\nconst target = { HELLO: 'world' } // empty object\n\ndotenv.populate(target, parsed, { override: true, debug: true })\n\nconsole.log(target) // { HELLO: 'universe' }\n```\n\n----------------------------------------\n\nTITLE: Using Dotenv with ES6 Import in JavaScript\nDESCRIPTION: This example shows how to use dotenv with ES6 import syntax in an ESM (ECMAScript Module) file.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// index.mjs (ESM)\nimport 'dotenv/config' // see https://github.com/motdotla/dotenv#how-do-i-use-dotenv-with-import\nimport express from 'express'\n```\n\n----------------------------------------\n\nTITLE: Running Tests for dotenv Project using TAP\nDESCRIPTION: This command executes the test suite for the dotenv project using the TAP (Test Anything Protocol) framework. It runs all the tests defined in the project to ensure code functionality and prevent regressions.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Linting dotenv Project Code\nDESCRIPTION: This command runs the linting process for the dotenv project. It uses the 'standard' package and editorconfig to check and enforce code style and best practices, ensuring consistency across the codebase.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Dotenv with ES6 Import in JavaScript\nDESCRIPTION: This snippet demonstrates an incorrect way of using dotenv with ES6 imports, which will result in blank environment variables.\nSOURCE: https://github.com/motdotla/dotenv/blob/master/README.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nclass Client {\n  constructor (apiKey) {\n    console.log('apiKey', apiKey)\n\n    this.apiKey = apiKey\n  }\n}\n\nexport default new Client(process.env.API_KEY)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Note: this is INCORRECT and will not work\nimport * as dotenv from 'dotenv'\ndotenv.config()\n\nimport errorReporter from './errorReporter.mjs' // process.env.API_KEY will be blank!\n```"
  }
]