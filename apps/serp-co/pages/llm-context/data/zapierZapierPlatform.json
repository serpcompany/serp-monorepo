[
  {
    "owner": "zapier",
    "repo": "zapier-platform",
    "content": "TITLE: Defining a Resource Schema in JavaScript\nDESCRIPTION: Example of defining a ResourceSchema object for a 'tag' resource with get and list operations. Includes sample data and display configuration.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'tag',\n  noun: 'Tag',\n  get: {\n    display: { label: 'Get Tag by ID', description: 'Grab a specific Tag by ID.', hidden: true },\n    operation: { perform: { url: 'https://fake-crm.getsandbox.com/tags/{{inputData.id}}' } }\n  },\n  list: {\n    display: {\n      label: 'New Tag',\n      description: 'Trigger when a new Tag is created in your account.'\n    },\n    operation: {\n      perform: { url: 'https://fake-crm.getsandbox.com/tags' },\n      sample: { id: 385, name: 'proactive enable ROI' }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Basic Action Operation Example\nDESCRIPTION: Example of a valid basic action operation configuration with the required perform and sample parameters for defining how Zapier retrieves data.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{ perform: { require: 'some/path/to/file.js' }, sample: { id: 42, name: 'Hooli' } }\n```\n\n----------------------------------------\n\nTITLE: Building and Uploading Integration\nDESCRIPTION: Builds and uploads the current integration to Zapier. Equivalent to running 'zapier build' and 'zapier upload' in sequence.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nzapier push\n```\n\n----------------------------------------\n\nTITLE: Installing Zapier CLI with NPM\nDESCRIPTION: Command to install the Zapier Platform CLI globally using npm. This is required before using any of the Zapier CLI commands.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g zapier-platform-cli\n```\n\n----------------------------------------\n\nTITLE: Listing Jobs for Zapier Integration\nDESCRIPTION: Lists ongoing migration or promotion jobs for the current integration. Jobs are returned from oldest to newest and represent background processes for migrate or promote commands.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nzapier jobs\n```\n\n----------------------------------------\n\nTITLE: Defining a Buffered Create Action in JavaScript\nDESCRIPTION: Demonstrates how to define a Buffered Create Action, which allows creating objects in bulk with fewer API requests. This includes using the new 'performBuffer' function and 'buffer' configuration.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  key: 'create',\n  noun: 'Item',\n  display: {\n    label: 'Create Item',\n    description: 'Creates a new item.'\n  },\n  operation: {\n    perform: createItem,\n    performBuffer: createItemsBulk,\n    buffer: {\n      maxItems: 100,\n      maxSeconds: 60\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up and deploying a Zapier integration project with CLI commands\nDESCRIPTION: A set of bash commands that demonstrate the typical workflow for a Zapier integration project, including installing dependencies, running tests, registering or linking an integration, and pushing changes to Zapier.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/example-apps/typescript/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm install  # or you can use yarn\n\n# Run tests\nzapier test\n\n# Register the integration on Zapier if you haven't\nzapier register \"App Title\"\n\n# Or you can link to an existing integration on Zapier\nzapier link\n\n# Push it to Zapier\nzapier push\n```\n\n----------------------------------------\n\nTITLE: Defining a Create Operation in Zapier Platform\nDESCRIPTION: Example of defining a create operation, which allows Zapier to create a new object in an application. It includes required fields like key, noun, display, and operation, with optional fields like shouldLock.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'recipe',\n  noun: 'Recipe',\n  display: { label: 'Create Recipe', description: 'Creates a new recipe.' },\n  operation: { perform: '$func$2$f$', sample: { id: 1 } }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Zapier Integration Project with CLI Commands\nDESCRIPTION: A series of bash commands to set up, test, register, and deploy a Zapier integration project. It covers installing dependencies, running tests, registering or linking the integration, and pushing it to Zapier.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/src/generators/templates/README.template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm install  # or you can use yarn\n\n# Run tests\nzapier test\n\n# Register the integration on Zapier if you haven't\nzapier register \"App Title\"\n\n# Or you can link to an existing integration on Zapier\nzapier link\n\n# Push it to Zapier\nzapier push\n```\n\n----------------------------------------\n\nTITLE: Defining Triggers Collection in Zapier Platform App\nDESCRIPTION: Example showing how to define multiple triggers in a Zapier app. Each trigger is mapped to a unique key and contains its own configuration including display properties and operation details.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  newRecipe: {\n    key: 'newRecipe',\n    noun: 'Recipe',\n    display: { label: 'New Recipe', description: 'Triggers when a new recipe is added.' },\n    operation: { type: 'polling', perform: '$func$0$f$', sample: { id: 1 } }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Directory to Existing Integration\nDESCRIPTION: Links the current directory with an existing Zapier integration by generating a .zapierapprc file. This file ties the code to an integration and is used in push and validate operations.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nzapier link\n```\n\n----------------------------------------\n\nTITLE: Setting up and deploying OpenAI Zapier integration\nDESCRIPTION: This bash snippet outlines the steps to install dependencies, run tests, register or link the integration with Zapier, and push the project. It covers the essential commands for setting up and deploying the OpenAI integration on the Zapier platform.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/example-apps/openai/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm install  # or you can use yarn\n\n# Run tests\nzapier test\n\n# Register the integration on Zapier if you haven't\nzapier register \"App Title\"\n\n# Or you can link to an existing integration on Zapier\nzapier link\n\n# Push it to Zapier\nzapier push\n```\n\n----------------------------------------\n\nTITLE: Example of CreatesSchema Implementation in JSON\nDESCRIPTION: Shows how to define a 'createRecipe' action in the Zapier Platform. The example demonstrates the required structure including key, noun, display properties, and operation details.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  createRecipe: {\n    key: 'createRecipe',\n    noun: 'Recipe',\n    display: { label: 'Create Recipe', description: 'Creates a new recipe.' },\n    operation: { perform: '$func$2$f$', sample: { id: 1 } }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Users Between Integration Versions\nDESCRIPTION: Migrates a percentage of users or a single user from one version of the integration to another. Supports migrating private Zaps or all Zaps within an account.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nzapier migrate 1.0.0 1.0.1\n```\n\nLANGUAGE: bash\nCODE:\n```\nzapier migrate 1.0.1 2.0.0 10\n```\n\nLANGUAGE: bash\nCODE:\n```\nzapier migrate 2.0.0 2.0.1 --user=user@example.com\n```\n\nLANGUAGE: bash\nCODE:\n```\nzapier migrate 2.0.0 2.0.1 --account=account@example.com\n```\n\n----------------------------------------\n\nTITLE: Examples of FieldSchema Configuration\nDESCRIPTION: Various examples of valid field schema configurations, showing different ways to define fields with options like choices and meta data.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n{ key: 'abc' }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ key: 'abc', choices: { mobile: 'Mobile Phone' } }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ key: 'abc', choices: [ 'first', 'second', 'third' ] }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ key: 'abc', choices: [ { label: 'Red', sample: '#f00', value: '#f00' } ] }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ key: 'abc', children: [ { key: 'abc' } ] }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ key: 'abc', type: 'integer', helpText: 'neat' }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'abc',\n  type: 'integer',\n  meta: { internalType: 'numeric', should_call_api: true, display_order: 1 }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Local Integration Files\nDESCRIPTION: Retrieves and updates local integration files with the latest version from Zapier. Prompts for confirmation if there are destructive file changes.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nzapier pull\n```\n\n----------------------------------------\n\nTITLE: Example Upsert Configuration in JavaScript\nDESCRIPTION: Configuration for an Upsert operation which searches for a widget and updates if found or creates if not found, with mappings between search output and update input.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'upsertWidgets',\n  display: {\n    label: 'Upsert Widgets',\n    description: 'Searches for a widget matching the provided query and updates it if found, or creates one if it does not exist.',\n    hidden: false\n  },\n  search: 'searchWidgets',\n  create: 'createWidget',\n  update: 'updateExistingWidget',\n  updateInputFromSearchOutput: { widget_id: 'id' },\n  searchUniqueInputToOutputConstraint: { widget_name: 'name' }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete OAuth2 Authentication Configuration Example\nDESCRIPTION: Example of a comprehensive OAuth2 authentication configuration including optional parameters like refreshAccessToken, codeParam, scope, autoRefresh, and PKCE support.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  authorizeUrl: { require: 'some/path/to/file.js' },\n  getAccessToken: { require: 'some/path/to/file2.js' },\n  refreshAccessToken: { require: 'some/path/to/file3.js' },\n  codeParam: 'unique_code',\n  scope: 'read/write',\n  autoRefresh: true,\n  enablePkce: true\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Recent Logs for Zapier Integration\nDESCRIPTION: Prints recent logs for the Zapier integration, including console logs, bundle logs, and HTTP logs. Allows filtering by version, status, type, and user.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nzapier logs\n```\n\n----------------------------------------\n\nTITLE: Basic Operation Schema Example in JavaScript\nDESCRIPTION: An example showing how to define a basic operation with required perform method and sample data. This pattern is used for triggers, searches, or creates in Zapier integrations.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{ perform: { require: 'some/path/to/file.js' }, sample: { id: 42, name: 'Hooli' } }\n```\n\n----------------------------------------\n\nTITLE: SearchOrCreatesSchema with Update Example in JavaScript\nDESCRIPTION: Example of a SearchOrCreatesSchema that includes an update operation alongside search and create, supporting a complete upsert flow.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  searchAndCreateWidgets: {\n    key: 'searchAndCreateWidgets',\n    display: {\n      label: 'Search and Create Widgets',\n      description: 'Searches for a widget matching the provided query, creates one if it does not exist or updates existing one if found.',\n      hidden: false\n    },\n    search: 'searchWidgets',\n    create: 'createWidget',\n    update: 'updateWidget'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zapier Login\nDESCRIPTION: Configures the ~/.zapierrc file with a deploy key for authentication. Includes an SSO option for users who log in with Single Sign-On.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nzapier login\n```\n\n----------------------------------------\n\nTITLE: Hook Operation Schema Example in JavaScript\nDESCRIPTION: Example of defining a webhook trigger with the required hook type, perform function, and supporting methods for list, subscribe and unsubscribe operations. This pattern is used for implementing REST Hooks in Zapier integrations.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: 'hook',\n  perform: { require: 'some/path/to/file.js' },\n  performList: { require: 'some/path/to/file2.js' },\n  performSubscribe: { require: 'some/path/to/file3.js' },\n  performUnsubscribe: { require: 'some/path/to/file4.js' },\n  sample: { id: 42, name: 'Hooli' }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Zapier Platform CLI from GitHub\nDESCRIPTION: Commands to clone the Zapier Platform repository from GitHub and install dependencies using yarn. This is the initial setup for the development version of the CLI.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/INSTALL_DEV.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/projects  # or wherever you want to cloen the repo\ngit clone git@github.com/zapier/zapier-platform.git\ncd zapier-platform\nyarn\n```\n\n----------------------------------------\n\nTITLE: Setting up and deploying a Zapier OAuth2 integration\nDESCRIPTION: A series of CLI commands for managing a Zapier integration project. This includes installing dependencies, running tests, registering or linking to an integration, and deploying the integration to Zapier.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/example-apps/oauth2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm install  # or you can use yarn\n\n# Run tests\nzapier test\n\n# Register the integration on Zapier if you haven't\nzapier register \"App Title\"\n\n# Or you can link to an existing integration on Zapier\nzapier link\n\n# Push it to Zapier\nzapier push\n```\n\n----------------------------------------\n\nTITLE: Creating a Trigger Definition in Zapier Platform\nDESCRIPTION: Examples demonstrating how to define triggers in Zapier integrations. Triggers specify how Zapier will be notified of new objects from your API, including the polling or hook operations and their UI display properties.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'new_recipe',\n  noun: 'Recipe',\n  display: { label: 'New Recipe', description: 'Triggers when a new recipe is added.' },\n  operation: { type: 'polling', perform: '$func$0$f$', sample: { id: 1 } }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'new_recipe',\n  noun: 'Recipe',\n  display: {\n    label: 'New Recipe',\n    description: 'Triggers when a new recipe is added.',\n    hidden: true\n  },\n  operation: { type: 'polling', perform: '$func$0$f$' }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up and Deploying Zapier Custom Auth Integration\nDESCRIPTION: Commands for installing dependencies, running tests, registering the integration with Zapier, linking to existing integrations, and deploying the project. These commands represent the typical workflow for setting up a Zapier integration with custom authentication.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/example-apps/custom-auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm install  # or you can use yarn\n\n# Run tests\nzapier test\n\n# Register the integration on Zapier if you haven't\nzapier register \"App Title\"\n\n# Or you can link to an existing integration on Zapier\nzapier link\n\n# Push it to Zapier\nzapier push\n```\n\n----------------------------------------\n\nTITLE: Defining Search or Create Schema in JavaScript\nDESCRIPTION: Example of a SearchOrCreateSchema object. Shows how to pair an existing search and create to enable 'Find or Create' functionality, including an optional update action.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'searchOrCreateWidgets',\n  display: {\n    label: 'Search or Create Widgets',\n    description: 'Searches for a widget matching the provided query, or creates one if it does not exist.',\n    hidden: false\n  },\n  search: 'searchWidgets',\n  create: 'createWidget',\n  update: 'updateWidget',\n  updateInputFromSearchOutput: {\n    id: 'id',\n    name: 'name'\n  },\n  searchUniqueInputToOutputConstraint: {\n    id: 'id'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Deploying Zapier Integration Project\nDESCRIPTION: Basic command sequence for setting up a new Zapier integration project, including dependency installation, testing, registration, and deployment steps. Shows essential CLI commands for managing the integration lifecycle.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/example-apps/session-auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm install  # or you can use yarn\n\n# Run tests\nzapier test\n\n# Register the integration on Zapier if you haven't\nzapier register \"App Title\"\n\n# Or you can link to an existing integration on Zapier\nzapier link\n\n# Push it to Zapier\nzapier push\n```\n\n----------------------------------------\n\nTITLE: Defining a Bulk Read Operation in Zapier Platform\nDESCRIPTION: Example of defining a bulk read operation, which allows Zapier to fetch multiple resources from an application. It includes required fields like key, noun, display, and operation.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'recipes',\n  noun: 'Recipes',\n  display: { label: 'Recipes', description: 'A Read that lets Zapier fetch all recipes.' },\n  operation: {\n    perform: '$func$0$f$',\n    sample: { id: 1, firstName: 'Walter', lastName: 'Sobchak', occupation: 'Bowler' }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing and Upload Commands\nDESCRIPTION: Examples of running tests and uploading integration builds to Zapier.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nzapier test\nzapier test --skip-validate -- -t 30000 --grep api\nzapier test -- -fo --testNamePattern \"auth pass\"\nzapier upload\n```\n\n----------------------------------------\n\nTITLE: Running Zapier CLI Commands for Basic Auth Integration\nDESCRIPTION: A series of Zapier CLI commands for initializing and deploying a basic authentication integration. It covers dependency installation, testing, registration or linking to an existing integration, and deployment.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/example-apps/basic-auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm install  # or you can use yarn\n\n# Run tests\nzapier test\n\n# Register the integration on Zapier if you haven't\nzapier register \"App Title\"\n\n# Or you can link to an existing integration on Zapier\nzapier link\n\n# Push it to Zapier\nzapier push\n```\n\n----------------------------------------\n\nTITLE: Resource Method Get Schema Examples\nDESCRIPTION: Examples of valid resource get method definitions, showing required display and operation properties.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  display: { label: 'Get Tag by ID', description: 'Grab a specific Tag by ID.' },\n  operation: { perform: { url: '$func$0$f$' }, sample: { id: 385, name: 'proactive enable ROI' } }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  display: { label: 'Get Tag by ID', description: 'Grab a specific Tag by ID.', hidden: true },\n  operation: { perform: { url: '$func$0$f$' } }\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth1 Authentication Configuration Example\nDESCRIPTION: Example of a valid OAuth1 authentication configuration with the required getRequestToken, authorizeUrl, and getAccessToken parameters.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  getRequestToken: { require: 'some/path/to/file.js' },\n  authorizeUrl: { require: 'some/path/to/file2.js' },\n  getAccessToken: { require: 'some/path/to/file3.js' }\n}\n```\n\n----------------------------------------\n\nTITLE: SearchOrCreatesSchema Example in JavaScript\nDESCRIPTION: Example of a SearchOrCreatesSchema object that defines a searchOrCreateWidgets operation with references to existing search and create operations.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  searchOrCreateWidgets: {\n    key: 'searchOrCreateWidgets',\n    display: {\n      label: 'Search or Create Widgets',\n      description: 'Searches for a widget matching the provided query, or creates one if it does not exist.',\n      hidden: false\n    },\n    search: 'searchWidgets',\n    create: 'createWidget'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the versions Command\nDESCRIPTION: Command for listing all versions of your integration that are available for use in Zapier automations.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\nzapier versions\n```\n\n----------------------------------------\n\nTITLE: Register Zapier Integration Command Examples\nDESCRIPTION: Examples of using the zapier register command to create or update an integration with various configuration options.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nzapier register\nzapier register \"My Cool Integration\"\nzapier register \"My Cool Integration\" --desc \"My Cool Integration helps you integrate your apps with the apps that you need.\" --no-subscribe\nzapier register \"My Cool Integration\" --url \"https://www.zapier.com\" --audience private --role employee --category marketing-automation\nzapier register --subscribe\n```\n\n----------------------------------------\n\nTITLE: Promoting Integration Version to Public Access\nDESCRIPTION: Promotes a specific version of the integration to public access, making it available for new users. Does not affect existing users or build/upload the version.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nzapier promote 1.0.0\n```\n\n----------------------------------------\n\nTITLE: Using the users:remove Command\nDESCRIPTION: Command for removing a user from all versions of your integration, which turns off their Zaps immediately and prevents usage until re-invited or public release.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\nzapier users:remove EMAIL\n```\n\n----------------------------------------\n\nTITLE: Basic OAuth2 Authentication Configuration Example\nDESCRIPTION: Example of a minimal valid OAuth2 authentication configuration with the required authorizeUrl and getAccessToken parameters.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  authorizeUrl: { require: 'some/path/to/file.js' },\n  getAccessToken: { require: 'some/path/to/file2.js' }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Fields with altersDynamicFields in Zapier Platform v14\nDESCRIPTION: Example of setting the altersDynamicFields flag for dynamic dropdown fields. In v14, this property must be explicitly set to true if a dynamic dropdown should refresh other input fields.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ninputFields: [\n  {\n    key: 'city',\n    dynamic: 'city.id.name',\n    altersDynamicFields: true  // <- set this appropriately on v14\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating z.dehydrate Usage in JavaScript\nDESCRIPTION: Shows how to use the z.dehydrate function with a new optional argument to control cache duration on hydrators. The default cache duration remains 5 minutes if not specified.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nz.dehydrate(myFunction, { cacheTTL: 3600 }) // Cache for 1 hour\n```\n\n----------------------------------------\n\nTITLE: Marking Integration Version as Legacy\nDESCRIPTION: Marks a non-production version of the integration as legacy, indicating it's no longer recommended for new users but still available for existing users.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nzapier legacy 1.2.3\n```\n\n----------------------------------------\n\nTITLE: Scaffold Zapier Integration Components\nDESCRIPTION: Examples of using the zapier scaffold command to create new triggers, searches, creates, or resources with custom configurations.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nzapier scaffold trigger contact\nzapier scaffold search contact --dest=my_src/searches\nzapier scaffold create contact --entry=src/index.js\nzapier scaffold resource contact --force\n```\n\n----------------------------------------\n\nTITLE: Running Development Commands for Zapier Platform Core\nDESCRIPTION: Basic npm commands for development workflow including installation, testing, and building boilerplate code for local testing.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/core/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm test\nnpm run local-integration-test\nnpm run build-boilerplate -- --debug\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Zapier Platform Repository\nDESCRIPTION: Commands to clone the Zapier Platform repository from GitHub and install dependencies using Yarn.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:zapier/zapier-platform.git\ncd zapier-platform\nyarn\n```\n\n----------------------------------------\n\nTITLE: Session Authentication Configuration Example\nDESCRIPTION: Example of a valid session authentication configuration with the required perform parameter to fetch authentication data.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{ perform: { require: 'some/path/to/file.js' } }\n```\n\n----------------------------------------\n\nTITLE: Environment File Format for Zapier Authentication\nDESCRIPTION: Example of a .env file format for storing authentication data for a Zapier OAuth2 integration. This file contains environment variables and auth data fields that the 'zapier invoke' command uses for local testing.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCLIENT_ID='your_client_id'\nCLIENT_SECRET='your_client_secret'\nauthData_access_token='1234567890'\nauthData_refresh_token='abcdefg'\nauthData_account_name='zapier'\n```\n\n----------------------------------------\n\nTITLE: Example of HydratorsSchema Configuration\nDESCRIPTION: Valid example of a hydrators schema, which defines named functions that can be used with z.hydrate() for lazy loading data.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n{ hydrateFile: { require: 'some/path/to/file.js' } }\n```\n\n----------------------------------------\n\nTITLE: Running All Tests for Zapier Platform\nDESCRIPTION: Command to run all tests for all packages and configured tooling in the Zapier Platform project.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Team Management Commands\nDESCRIPTION: Examples of managing team members in a Zapier integration with different roles and access levels.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nzapier team:add bruce@wayne.com admin\nzapier team:add robin@wayne.com collaborator \"Hey Robin, check out this app.\"\nzapier team:add alfred@wayne.com subscriber \"Hey Alfred, check out this app.\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Zapier Project with Minimal Template\nDESCRIPTION: Demonstrates how to initialize a Zapier project using the minimal template in v10, which no longer uses the minimal template by default.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/changelog/v10-v13.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nzapier init -t minimal\n```\n\n----------------------------------------\n\nTITLE: Setting up and deploying Zapier OAuth1 Trello integration\nDESCRIPTION: This code snippet outlines the steps to set up and deploy a Zapier OAuth1 integration for Trello. It includes commands for installing dependencies, running tests, registering or linking the integration, and pushing it to Zapier.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/example-apps/oauth1-trello/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm install  # or you can use yarn\n\n# Run tests\nzapier test\n\n# Register the integration on Zapier if you haven't\nzapier register \"App Title\"\n\n# Or you can link to an existing integration on Zapier\nzapier link\n\n# Push it to Zapier\nzapier push\n```\n\n----------------------------------------\n\nTITLE: Initializing a Zapier App Using CLI Command\nDESCRIPTION: Command to initialize a new Zapier app using the zapier-platform-cli. This will present the user with available templates to start with.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/example-apps/create/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzapier init .\n```\n\n----------------------------------------\n\nTITLE: Examples of FieldsSchema Configuration\nDESCRIPTION: Valid example of a FieldsSchema, which is an array of field schema objects.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n[ { key: 'abc' } ]\n```\n\n----------------------------------------\n\nTITLE: Defining Results Schema in JavaScript\nDESCRIPTION: Example of a ResultsSchema, which is an array of objects suitable for returning in perform calls. Shows a simple result with a name field.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n[ { name: 'Alex Trebek' } ]\n```\n\n----------------------------------------\n\nTITLE: Valid Authentication Schema Examples\nDESCRIPTION: Examples of valid authentication schema configurations for basic and custom authentication types with required test functions and optional parameters.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{ type: 'basic', test: '$func$2$f$' }\n{ type: 'custom', test: '$func$2$f$', fields: [ { key: 'abc' } ] }\n{ type: 'custom', test: '$func$2$f$', connectionLabel: '{{bundle.inputData.abc}}' }\n{ type: 'custom', test: '$func$2$f$', connectionLabel: '$func$2$f$' }\n{ type: 'custom', test: '$func$2$f$', connectionLabel: { url: 'abc' } }\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic App Flags Example\nDESCRIPTION: Example configuration for app flags showing skip settings for HTTP patch and throwForStatus behavior.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"skipHttpPatch\": true, \"skipThrowForStatus\": false }\n```\n\n----------------------------------------\n\nTITLE: Object-style FieldChoicesSchema Example\nDESCRIPTION: Shows how to define dropdown choices using an object with keys as values and values as labels. This format is used when labels are needed but order doesn't matter.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{ a: '1', b: '2', c: '3' }\n```\n\n----------------------------------------\n\nTITLE: Defining Resources Schema in JavaScript\nDESCRIPTION: Example of defining a ResourcesSchema object containing a 'tag' resource with a get operation. Demonstrates how to structure multiple resources.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  tag: {\n    key: 'tag',\n    noun: 'Tag',\n    get: {\n      display: { label: 'Get Tag by ID', description: 'Grab a specific Tag by ID.' },\n      operation: {\n        perform: { url: 'https://fake-crm.getsandbox.com/tags/{{inputData.id}}' },\n        sample: { id: 385, name: 'proactive enable ROI' }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal App Configuration Example\nDESCRIPTION: Basic app configuration showing required version and platformVersion fields.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"version\": \"1.0.0\", \"platformVersion\": \"10.1.2\" }\n```\n\n----------------------------------------\n\nTITLE: Modifying Response Content in Zapier Platform Core v10\nDESCRIPTION: Shows how to modify response content in an afterResponse middleware for Zapier Platform Core v10, which now uses response.data instead of response.content for parsed data.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/changelog/v10-v13.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way (pre-v10)\nresponse.content = JSON.stringify(parsedOrTransformed)\n\n// New way (v10+)\nresponse.data = parsedOrTransformed\n```\n\n----------------------------------------\n\nTITLE: Resource Method Hook Schema Examples\nDESCRIPTION: Examples of valid resource hook (trigger) method definitions, showing required display and operation properties.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  display: { label: 'Get Tag by ID', description: 'Grab a specific Tag by ID.' },\n  operation: {\n    type: 'hook',\n    perform: '$func$0$f$',\n    sample: { id: 385, name: 'proactive enable ROI' }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  display: { label: 'Get Tag by ID', description: 'Grab a specific Tag by ID.', hidden: true },\n  operation: { type: 'hook', perform: '$func$0$f$' }\n}\n```\n\n----------------------------------------\n\nTITLE: SearchSchema Example in JavaScript\nDESCRIPTION: Example of a SearchSchema that defines a search for recipes by cuisine style, including display configuration and operation details.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'recipe',\n  noun: 'Recipe',\n  display: { label: 'Find a Recipe', description: 'Search for recipe by cuisine style.' },\n  operation: { perform: '$func$2$f$', sample: { id: 1 } }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Reference Schema Anti-Examples\nDESCRIPTION: Examples of invalid resource references that do not match the required pattern.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_48\n\nLANGUAGE: text\nCODE:\n```\n'Contact List' - _Does not match resource_key pattern_\n'Contact.list,find.id' - _Does not match foreign_key pattern_\n'Contact.list.id.full_name' - _Does not match human_label_key pattern_\n```\n\n----------------------------------------\n\nTITLE: Resource Method List Schema Examples\nDESCRIPTION: Examples of valid resource list (trigger) method definitions, showing required display and operation properties.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  display: {\n    label: 'New User',\n    description: 'Trigger when a new User is created in your account.'\n  },\n  operation: {\n    perform: { url: 'https://fake-crm.getsandbox.com/users' },\n    sample: { id: 49, name: 'Veronica Kuhn', email: 'veronica.kuhn@company.com' }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  display: {\n    label: 'New User',\n    description: 'Trigger when a new User is created in your account.',\n    hidden: true\n  },\n  operation: { perform: { url: 'https://fake-crm.getsandbox.com/users' } }\n}\n```\n\n----------------------------------------\n\nTITLE: SearchesSchema Example in JavaScript\nDESCRIPTION: Example of a SearchesSchema object that defines a recipe search operation with hidden display, which would typically be used within resources.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  recipe: {\n    key: 'recipe',\n    noun: 'Recipe',\n    display: {\n      label: 'Find a Recipe',\n      description: 'Search for recipe by cuisine style.',\n      hidden: true\n    },\n    operation: { perform: '$func$2$f$' }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic DynamicFieldsSchema with Single Field\nDESCRIPTION: Example of DynamicFieldsSchema with a single field definition containing just the required 'key' property.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n[ { key: 'abc' } ]\n```\n\n----------------------------------------\n\nTITLE: Developer's Perform Function Signature in JavaScript\nDESCRIPTION: The signature of a developer's perform function, which receives the z object and bundle as arguments.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/core/ARCHITECTURE.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction perform(z, bundle) { ... }\n```\n\n----------------------------------------\n\nTITLE: FieldChoiceWithLabelSchema Example\nDESCRIPTION: Demonstrates how to create a labeled choice for a dropdown field with distinct label, sample, and value properties. This is useful when the display text needs to differ from the actual value.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{ label: 'Red', sample: '#f00', value: '#f00' }\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Polling Operation in Zapier Platform\nDESCRIPTION: Example of defining a basic polling operation, which represents the fundamental mechanics of a trigger in Zapier. It includes required fields like perform and sample, as well as optional fields like resource and inputFields.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n{ \n  perform: { require: 'some/path/to/file.js' }, \n  sample: { id: 42, name: 'Hooli' } \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Search and Create Schema in JavaScript\nDESCRIPTION: Example of a SearchAndCreatesSchema (alias for SearchOrCreatesSchema) object. Demonstrates how to configure a search or create operation for widgets.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  searchOrCreateWidgets: {\n    key: 'searchOrCreateWidgets',\n    display: {\n      label: 'Search or Create Widgets',\n      description: 'Searches for a widget matching the provided query, or creates one if it does not exist.',\n      hidden: false\n    },\n    search: 'searchWidgets',\n    create: 'createWidget'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example SearchOrCreate Configuration in JavaScript\nDESCRIPTION: Example configuration for a Search or Create operation in Zapier platform, defining a basic search or create widget functionality.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'searchOrCreateWidgets',\n  display: {\n    label: 'Search or Create Widgets',\n    description: 'Searches for a widget matching the provided query, or creates one if it does not exist.',\n    hidden: false\n  },\n  search: 'searchWidgets',\n  create: 'createWidget'\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Method Create Schema Examples\nDESCRIPTION: Examples of valid resource create method definitions, showing required display and operation properties.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  display: { label: 'Create Tag', description: 'Create a new Tag in your account.' },\n  operation: { perform: '$func$2$f$', sample: { id: 1 } }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  display: {\n    label: 'Create Tag',\n    description: 'Create a new Tag in your account.',\n    hidden: true\n  },\n  operation: { perform: '$func$2$f$' }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Throttle Overrides in Zapier Platform\nDESCRIPTION: Examples of valid throttle override objects that specify settings based on account attributes. These configurations allow different rate limiting for different account types (free, trial, paid).\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\n{ window: 60, limit: 100, filter: 'free' }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ window: 60, limit: 100, filter: 'paid', retry: false }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ window: 60, limit: 100, filter: 'trial', retry: true }\n```\n\n----------------------------------------\n\nTITLE: Basic Display Schema Examples in JavaScript\nDESCRIPTION: Examples showing various ways to configure the user interface properties for operations. This includes setting visibility, labels, descriptions, and directions for Zapier integration components.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{ hidden: true }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ label: 'New Thing', description: 'Gets a new thing for you.' }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  label: 'New Thing',\n  description: 'Gets a new thing for you.',\n  directions: 'This is how you use the thing.',\n  hidden: false\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Out from Zapier CLI\nDESCRIPTION: Deactivates the active deploy key and resets the ~/.zapierrc file, effectively logging out the user from the Zapier CLI.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nzapier logout\n```\n\n----------------------------------------\n\nTITLE: Mixed DynamicFieldsSchema with Field and Function\nDESCRIPTION: Shows how to combine a static field definition with a function reference in a DynamicFieldsSchema, allowing for both static and dynamic field generation.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n[ { key: 'abc' }, '$func$2$f$' ]\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Double Quoting Example\nDESCRIPTION: Examples showing the proper way to format environment variables in .env files when using zapier.tools.env.inject() to handle special characters like hashes and backticks\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nSECRET_HASH=\"something-with-a-#-hash\"\nSECRET_BACKTICK=\"something-with-a-`-backtick\"\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Schema Example\nDESCRIPTION: Example of a valid HTTP request object for the Zapier Platform.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{ method: 'GET', url: 'https://zapier.com' }\n```\n\n----------------------------------------\n\nTITLE: Function-only DynamicFieldsSchema Example\nDESCRIPTION: Example where all fields in DynamicFieldsSchema are generated by functions, allowing for completely dynamic field definition based on runtime conditions.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n[ '$func$2$f$', '$func$2$f$' ]\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Response in Zapier Platform Core v10\nDESCRIPTION: Demonstrates how to parse JSON response data in Zapier Platform Core v10, which now automatically parses JSON and form-encoded response bodies.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/changelog/v10-v13.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way (pre-v10)\nz.JSON.parse(response.content)\n\n// New way (v10+)\nresponse.data\n```\n\n----------------------------------------\n\nTITLE: Multi-property FieldMetaSchema Example\nDESCRIPTION: Demonstrates a FieldMetaSchema with multiple properties of different primitive types (boolean and string), showing how to store various metadata on a field.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{ shouldCapitalize: true, internalType: 'datetime' }\n```\n\n----------------------------------------\n\nTITLE: Specifying Skip Encoding Characters in JavaScript Request\nDESCRIPTION: New skipEncodingChars option added to z.request() to skip percent-encoding specific characters in the request.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/changelog/v10-v13.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nz.request()\n```\n\n----------------------------------------\n\nTITLE: Using z.cache.set with nx Argument in JavaScript\nDESCRIPTION: Shows how to use the new 'nx' argument in z.cache.set() function. This allows setting a cache value only if the key doesn't already exist.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nz.cache.set('myKey', 'myValue', { nx: true })\n```\n\n----------------------------------------\n\nTITLE: Example of FunctionRequireSchema Configuration\nDESCRIPTION: Valid example of a FunctionRequireSchema, which specifies a path to a JavaScript file containing exportable functions.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n{ require: 'some/path/to/file.js' }\n```\n\n----------------------------------------\n\nTITLE: Calling Response Throw for Status in JavaScript\nDESCRIPTION: Change to how response.throwForStatus() behaves when skipThrowForStatus is true. It now always throws an error for status codes >= 400, rather than being a no-op.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/changelog/v10-v13.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nresponse.throwForStatus()\n```\n\n----------------------------------------\n\nTITLE: Examples of MiddlewaresSchema Configuration\nDESCRIPTION: Valid examples of middleware schemas, which can be a single function or an array of functions to be executed before or after operations.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n{ require: 'some/path/to/file.js' }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[ { require: 'some/path/to/file.js' } ]\n```\n\n----------------------------------------\n\nTITLE: Alternative CreatesSchema Example with Underscore Naming\nDESCRIPTION: Demonstrates an alternative key naming convention using underscores in the Zapier Platform. This example shows the same recipe creation functionality but with a different key format.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  Create_Recipe_01: {\n    key: 'Create_Recipe_01',\n    noun: 'Recipe',\n    display: { label: 'Create Recipe', description: 'Creates a new recipe.' },\n    operation: { perform: '$func$2$f$', sample: { id: 1 } }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication Send Code Example\nDESCRIPTION: Example of configuring a custom authentication endpoint for sending OTP codes, including headers and body parameters.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sendCode\": {\n    \"url\": \"https://example.com/api/send\",\n    \"headers\": { \"Authorization\": \"Bearer {{process.env.API_KEY}}\" },\n    \"body\": {\n      \"to_phone_number\": \"{{bundle.inputData.phone_number}}\",\n      \"code\": \"{{bundle.inputData.code}}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of RedirectRequestSchema Configuration\nDESCRIPTION: Valid example of a redirect request schema, which defines HTTP redirects with optional template variables.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n{ method: 'GET', url: 'https://google.com' }\n```\n\n----------------------------------------\n\nTITLE: Resource Reference Schema Example\nDESCRIPTION: Examples of valid resource references in the format of {resource_key}.{foreign_key}(.{human_label_key}).\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_47\n\nLANGUAGE: text\nCODE:\n```\n'contact.id'\n'contact.id.name'\n'contact.id.firstName,lastName'\n'contact.id.first_name,last_name,email'\n'contact.Contact Id.Full Name'\n'contact.data[]id.data[]First Name,data[]Last Name'\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting with Throttle Settings in Zapier Platform\nDESCRIPTION: Examples of valid throttle configuration objects that specify time windows, request limits, and optional scoping. These configurations control how many API requests can be made within specific timeframes.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\n{ window: 60, limit: 100 }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ window: 600, limit: 100, scope: [ 'account', 'user' ] }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ window: 3600, limit: 10, scope: [ 'auth' ] }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ window: 3600, limit: 10, key: 'random_key', scope: [] }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  window: 3600,\n  limit: 10,\n  key: 'random_key-{{bundle.inputData.test_field}}',\n  scope: [ 'action', 'auth' ],\n  retry: false\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  window: 3600,\n  limit: 10,\n  scope: [ 'auth' ],\n  retry: false,\n  overrides: [ { window: 3600, limit: 2, filter: 'free', retry: false } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of FunctionSchema Configuration\nDESCRIPTION: Valid examples of function schemas, which can be function pointers, require statements, or inline source code.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n'$func$0$f$'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'$func$2$t$'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ source: 'return 1 + 2' }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ require: 'some/path/to/file.js' }\n```\n\n----------------------------------------\n\nTITLE: Using Zapier Stash File in JavaScript\nDESCRIPTION: Rewrite of z.stashFile() with improvements including no longer requiring knownLength for streams, smarter file type detection and filename generation, and better performance.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/changelog/v10-v13.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nz.stashFile()\n```\n\n----------------------------------------\n\nTITLE: Specifying Version Numbers in Zapier Platform\nDESCRIPTION: Examples of valid version strings for the Zapier Platform. Versions must follow a simplified semver format from 0.0.0 to 999.999.999 with exactly three numeric segments.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\n'1.0.0'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'2.11.3'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'999.999.999'\n```\n\n----------------------------------------\n\nTITLE: Creating Shell Alias for Zapier Development CLI\nDESCRIPTION: Command to add an alias to your shell configuration file that allows you to run the development version of the Zapier CLI using the 'zapier-dev' command.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/INSTALL_DEV.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nalias zapier-dev=\"node ~/projects/zapier-platform/packages/cli/src/bin/run\"\n```\n\n----------------------------------------\n\nTITLE: Defining FieldSchema with Meta Field in JavaScript\nDESCRIPTION: Demonstrates how to use the new optional 'meta' field in the FieldSchema object to store field-specific context for use in dynamic needs and action execution.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fieldSchema = {\n  key: 'myField',\n  label: 'My Field',\n  meta: {\n    customContext: 'Some value'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of LockObjectSchema Configuration\nDESCRIPTION: Examples of lock object schemas used for internal operation locking, with options for key, scope, and timeout.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n{ key: 'random_key', scope: [ 'account', 'user' ], timeout: 30 }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ key: '{{bundle.inputData.test_field}}' }\n```\n\n----------------------------------------\n\nTITLE: Array-style FieldChoicesSchema Example\nDESCRIPTION: Demonstrates using an array of strings to define dropdown choices when order matters but custom labels aren't needed. The values are used as both the value and label.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n[ 'first', 'second', 'third' ]\n```\n\n----------------------------------------\n\nTITLE: Enabling Pagination in Zapier Triggers\nDESCRIPTION: Configuration snippet showing how to enable pagination for trigger operations by setting the canPaginate flag to true. Starting from v14, this flag is required for the Zap editor to show the Load More button.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntriggers: {\n  contact: {\n    operation: {\n      canPaginate: true  // <- set this appropriately on v14\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Empty DynamicFieldsSchema Example\nDESCRIPTION: Shows the simplest valid implementation of DynamicFieldsSchema with an empty array, which is acceptable in the Zapier Platform.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Using Skip Throw for Status Flag in JavaScript Request\nDESCRIPTION: New app-wide skipThrowForStatus flag added for backwards compatibility when migrating from v9.x to v12.x. Only affects requests made with z.request().\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/changelog/v10-v13.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nz.request()\n```\n\n----------------------------------------\n\nTITLE: Documenting Zapier Platform Callback Template in Markdown\nDESCRIPTION: This markdown snippet provides an overview of the Callback Template for the Zapier Platform. It mentions the use of the performResume callback function in a create action and directs users to the official documentation for more information.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/src/generators/templates/callback/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# The \"Callback\" Template\n\nThis example has a create showcasing the `performResume` callback function.\n\nFind out more in the docs: https://github.com/zapier/zapier-platform/blob/main/packages/cli#zgeneratecallbackurl.\n```\n\n----------------------------------------\n\nTITLE: Examples of FunctionSourceSchema Configuration\nDESCRIPTION: Valid examples of function source schemas, which define inline JavaScript code to be executed as functions.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n{ source: 'return 1 + 2' }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ args: [ 'x', 'y' ], source: 'return x + y;' }\n```\n\n----------------------------------------\n\nTITLE: Logging in Zapier JavaScript SDK\nDESCRIPTION: Performance improvements made to z.console.log and HTTP logging functionality.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/changelog/v10-v13.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nz.console.log\n```\n\n----------------------------------------\n\nTITLE: Invalid Authentication Schema Examples\nDESCRIPTION: Examples of invalid authentication schema configurations including missing required keys, incorrect types, and invalid values.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{} - _Missing required keys: type and test_\n'$func$2$f$' - _Must be object_\n{ type: 'unknown', test: '$func$2$f$' } - _Invalid value for key: type_\n{ type: 'custom', test: '$func$2$f$', fields: '$func$2$f$' } - _Invalid value for key: fields_\n```\n\n----------------------------------------\n\nTITLE: Migrating zapier test command flags in CLI\nDESCRIPTION: Instructions for migrating from the deprecated -g and -t flags in zapier test to the new syntax that passes flags directly to the test script using -- delimiter.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/changelog/v10-v13.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nzapier test -- -g 'cool' --timeout 5000\n```\n\n----------------------------------------\n\nTITLE: Request Configuration Change Example\nDESCRIPTION: Example showing the breaking change in version 8.0 where omitEmptyParams was replaced with removeMissingValuesFrom object configuration\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/changelog/v0-v9.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// before\nz.request({\n  url: 'https://site.com',\n  omitEmptyParams: true,\n});\n\n// after:\nz.request({\n  url: 'https://site.com',\n  removeMissingValuesFrom: { params: true },\n});\n```\n\n----------------------------------------\n\nTITLE: Examples of FlatObjectSchema Configuration\nDESCRIPTION: Examples of valid flat object schemas, which can only contain primitive values like strings, numbers, and booleans.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n{ a: 1, b: 2, c: 3 }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ a: 1.2, b: 2.2, c: 3.3 }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ a: 'a', b: 'b', c: 'c' }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ a: true, b: true, c: false }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ a: 'a', b: 2, c: 3.1, d: true, e: false }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ '123': 'hello' }\n```\n\n----------------------------------------\n\nTITLE: Custom Build Hook for Transpilers in zapier-platform-cli\nDESCRIPTION: Reference to the _zapier-build custom build hook that can be used with the build command for transpilation processes as mentioned in the Using Transpilers documentation.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/changelog/v10-v13.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n_zapier-build\n```\n\n----------------------------------------\n\nTITLE: Zapier Development CLI Output Example\nDESCRIPTION: Example output when running the zapier-dev command, showing the version information and basic usage instructions for the Zapier Platform CLI.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/INSTALL_DEV.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ zapier-dev\nThe CLI for managing integrations in Zapier Developer Platform.\n\nVERSION\n  zapier-platform-cli/15.16.0 darwin-arm64 node-v21.7.1\n\nUSAGE\n  $ zapier [COMMAND]\n```\n\n----------------------------------------\n\nTITLE: Lambda Handler Signature in JavaScript\nDESCRIPTION: The signature of the Lambda handler function created by zapier-platform-core. This function receives the event object from the Zapier monolith.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/core/ARCHITECTURE.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction(event, context, callback) { ... }\n```\n\n----------------------------------------\n\nTITLE: File Handling Documentation in Markdown\nDESCRIPTION: Markdown documentation explaining the purpose of the files template and providing a link to detailed documentation about file stashing in Zapier Platform.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/src/generators/templates/files/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# The \"files\" Template\n\nThis example has a trigger and a create showcasing file handling.\n\nFind out more in the docs: https://github.com/zapier/zapier-platform/blob/main/packages/cli/README.md#stashing-files.\n```\n\n----------------------------------------\n\nTITLE: Examples of Valid KeySchema Values\nDESCRIPTION: Valid examples of key schema values, which must be strings starting with a letter followed by letters, numbers, or underscores.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n'vk'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'validKey'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'ValidKey'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'Valid_Key_2'\n```\n\n----------------------------------------\n\nTITLE: Using z.request in JavaScript\nDESCRIPTION: Example of how developers might use the z.request method to make external HTTP requests. This method includes additional features like beforeRequest and afterResponse hooks.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/core/ARCHITECTURE.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nz.request({\n  method: 'GET',\n  url: 'https://example.com/api',\n  params: { key: 'value' }\n}).then(response => {\n  // Handle response\n});\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Schema Anti-Example\nDESCRIPTION: Example of an invalid HTTP request object with an improper method value.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{ method: 'SUPERCHARGE', url: 'https://zapier.com' }\n```\n\n----------------------------------------\n\nTITLE: Initializing a Zapier OpenAI Integration Project\nDESCRIPTION: Command used to initialize the Zapier integration project. This creates the foundation for connecting with OpenAI's API to generate responses based on user prompts.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/src/generators/templates/openai/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nzapier init\n```\n\n----------------------------------------\n\nTITLE: Invalid Session Authentication Configuration Example\nDESCRIPTION: Example of an invalid session authentication configuration missing the required perform key.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Deploying a Minimal Zapier Integration\nDESCRIPTION: Basic command sequence for setting up a Zapier integration project, including installing dependencies, running tests, registering or linking to an integration, and deploying it to Zapier.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/example-apps/minimal/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm install  # or you can use yarn\n\n# Run tests\nzapier test\n\n# Register the integration on Zapier if you haven't\nzapier register \"App Title\"\n\n# Or you can link to an existing integration on Zapier\nzapier link\n\n# Push it to Zapier\nzapier push\n```\n\n----------------------------------------\n\nTITLE: Initializing a Zapier OAuth1 Tumblr Example App with CLI\nDESCRIPTION: A command for initializing a new Zapier app using the OAuth1 Tumblr template. This command creates the basic structure needed for an OAuth1-authenticated app with Tumblr integration.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/example-apps/oauth1-tumblr/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzapier init . --template=oauth1-tumblr\n```\n\n----------------------------------------\n\nTITLE: Importing zapier-platform-core in JavaScript\nDESCRIPTION: Example of how developers might import the zapier-platform-core package in their code. This is inferred from the context, as no explicit code snippet is provided.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/core/ARCHITECTURE.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst zapierPlatformCore = require('zapier-platform-core');\n```\n\n----------------------------------------\n\nTITLE: Invalid OAuth1 Authentication Configuration Example\nDESCRIPTION: Example of an invalid OAuth1 authentication configuration missing the required getAccessToken key.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  getRequestToken: { require: 'some/path/to/file.js' },\n  authorizeUrl: { require: 'some/path/to/file2.js' }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Method List Schema Anti-Example\nDESCRIPTION: Example of an invalid resource list method missing the required sample property in operation.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  display: {\n    label: 'New User',\n    description: 'Trigger when a new User is created in your account.'\n  },\n  operation: { perform: { url: 'https://fake-crm.getsandbox.com/users' } }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the validate Command\nDESCRIPTION: Command for validating your integration using the standard JSON schema validation routine, which checks for structural errors. This is the same validation used in build, upload, push, and test commands.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\nzapier validate\n```\n\n----------------------------------------\n\nTITLE: Invalid Basic Action Operation Example\nDESCRIPTION: Example of an invalid basic action operation configuration missing the required sample key, which is only valid in certain conditions.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{ perform: { require: 'some/path/to/file.js' } }\n```\n\n----------------------------------------\n\nTITLE: SearchOrCreatesSchema Key Mismatch Anti-Example in JavaScript\nDESCRIPTION: Example showing invalid configuration where the outer object key doesn't match the inner key property, which is required for consistency.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  searchOrCreateWidgets: {\n    key: 'socWidgets',\n    display: {\n      label: 'Search or Create Widgets',\n      description: 'Searches for a widget matching the provided query, or creates one if it does not exist.',\n      hidden: false\n    },\n    search: 'searchWidgets',\n    create: 'createWidget'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffer Settings for Bulk Operations in Zapier\nDESCRIPTION: Example of configuring buffer settings for creating objects in bulk. This is an internal-only feature used by Zapier. It specifies how to group items and the maximum number of items to process in a batch.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{ groupedBy: [ 'workspace', 'sheet' ], limit: 100 }\n```\n\n----------------------------------------\n\nTITLE: SearchesSchema Key Mismatch Anti-Example in JavaScript\nDESCRIPTION: Example showing invalid configuration where the outer object key doesn't match the inner key property for a search operation.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  searchRecipe: {\n    key: 'recipe',\n    noun: 'Recipe',\n    display: {\n      label: 'Find a Recipe',\n      description: 'Search for recipe by cuisine style.',\n      hidden: true\n    },\n    operation: { perform: '$func$2$f$' }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Using the validate Command\nDESCRIPTION: Examples showing different ways to use the validate command, including with style checks, and with different output formats.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\nzapier validate\nzapier validate --without-style\nzapier validate --format json\n```\n\n----------------------------------------\n\nTITLE: Anti-Examples of FieldSchema Configuration\nDESCRIPTION: Examples of invalid field schema configurations, showing common mistakes and validation errors to avoid when defining fields.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n{}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ key: 'abc', type: 'loltype' }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ key: 'abc', choices: {} }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ key: 'abc', choices: [] }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ key: 'abc', choices: [ 3 ] }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ key: 'abc', choices: [ { label: 'Red', value: '#f00' } ] }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ key: 'abc', choices: 'mobile' }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ key: 'abc', children: [ '$func$2$f$' ] }\n```\n\n----------------------------------------\n\nTITLE: Running Tests for CLI Package\nDESCRIPTION: Commands to navigate to the CLI package directory and run its specific tests.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/cli\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Resource Method Get Schema Anti-Example\nDESCRIPTION: Example of an invalid resource get method missing the required sample property in operation.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  display: { label: 'Get Tag by ID', description: 'Grab a specific Tag by ID.' },\n  operation: { perform: { url: '$func$0$f$' } }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Schema-to-TS Tests\nDESCRIPTION: Commands to navigate to the schema-to-ts directory and run its specific tests using Vitest.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd schema-to-ts\nyarn test\n```\n\n----------------------------------------\n\nTITLE: User Management Commands\nDESCRIPTION: Examples of managing user access and invitations to a Zapier integration.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/cli/docs/cli.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nzapier users:add bruce@wayne.com\nzapier users:add alfred@wayne.com 1.2.3\nzapier users:get\nzapier users:links\n```\n\n----------------------------------------\n\nTITLE: Missing Update Key Anti-Example in JavaScript\nDESCRIPTION: Example showing invalid configuration with update-related mapping fields but missing the required update key.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'upsertWidgets',\n  display: {\n    label: 'Upsert Widgets',\n    description: 'Searches for a widget matching the provided query and updates it if found, or creates one if it does not exist.',\n    hidden: false\n  },\n  search: 'searchWidgets',\n  create: 'createWidget',\n  updateInputFromSearchOutput: { widget_id: 'id' },\n  searchUniqueInputToOutputConstraint: { widget_name: 'name' }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Key Format Anti-Example in JavaScript\nDESCRIPTION: Example of invalid configuration with improperly formatted key that violates the requirement for keys to start with a letter.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: '01_Search_or_Create_Widgets',\n  display: {\n    label: 'Search or Create Widgets',\n    description: 'Searches for a widget matching the provided query, or creates one if it does not exist.',\n    hidden: false\n  },\n  search: 'searchWidgets',\n  create: 'createWidget'\n}\n```\n\n----------------------------------------\n\nTITLE: SearchSchema with Hidden Display Example in JavaScript\nDESCRIPTION: Example of a SearchSchema with a hidden display property, indicating this search should not be directly visible to users in the interface.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'recipe',\n  noun: 'Recipe',\n  display: {\n    label: 'Find a Recipe',\n    description: 'Search for recipe by cuisine style.',\n    hidden: true\n  },\n  operation: { perform: '$func$2$f$' }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Zapier Platform Core to npm\nDESCRIPTION: Command for versioning and publishing the package to npm. The process includes testing, updating dependencies, generating documentation, and triggering Travis CI to publish to npm.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/core/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm version [patch|minor|major]\n```\n\n----------------------------------------\n\nTITLE: Basic Zapier CLI Commands for Integration Development\nDESCRIPTION: Essential Zapier CLI commands for setting up, testing, and deploying a Zapier integration. Includes commands for installing dependencies, running tests, registering or linking the integration, and pushing changes to Zapier.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/example-apps/dynamic-dropdown/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm install  # or you can use yarn\n\n# Run tests\nzapier test\n\n# Register the integration on Zapier if you haven't\nzapier register \"App Title\"\n\n# Or you can link to an existing integration on Zapier\nzapier link\n\n# Push it to Zapier\nzapier push\n```\n\n----------------------------------------\n\nTITLE: Package Section Headers\nDESCRIPTION: Section headers for different package components\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/changelog/v0-v9.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### cli\n\n### core\n\n### schema\n```\n\n----------------------------------------\n\nTITLE: Travis CI Build Status Badge Markdown\nDESCRIPTION: Markdown code for displaying the Travis CI build status badge, linking to the build status page for the zapier-platform-example-app-trigger repository.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/example-apps/trigger/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Build Status](https://travis-ci.org/zapier/zapier-platform-example-app-trigger.svg?branch=master)](https://travis-ci.org/zapier/zapier-platform-example-app-trigger)\n```\n\n----------------------------------------\n\nTITLE: Command Line Options for ynarxdeiH\nDESCRIPTION: File conflict resolution options used in the Zapier pull command\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nynarxdeiH\n```\n\n----------------------------------------\n\nTITLE: Zapier Platform Versioning Header\nDESCRIPTION: Version header for release 9.7.3 with release date markup\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/changelog/v0-v9.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 9.7.3\n\n_released `2022-03-21`_\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Managing Zapier Integration Project\nDESCRIPTION: This snippet provides a series of bash commands for initializing, testing, and deploying a Zapier integration project. It covers installing dependencies, running tests, registering or linking the integration, and pushing it to Zapier.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/example-apps/search-or-create/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm install  # or you can use yarn\n\n# Run tests\nzapier test\n\n# Register the integration on Zapier if you haven't\nzapier register \"App Title\"\n\n# Or you can link to an existing integration on Zapier\nzapier link\n\n# Push it to Zapier\nzapier push\n```\n\n----------------------------------------\n\nTITLE: Pull Request Reference Link\nDESCRIPTION: Markdown link referencing a GitHub pull request\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/changelog/v0-v9.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n([#514](https://github.com/zapier/zapier-platform/pull/514))\n```\n\n----------------------------------------\n\nTITLE: Setting up and Deploying Zapier Integration using CLI\nDESCRIPTION: Basic CLI commands for initializing, testing, and deploying a Zapier integration project. Includes steps for installing dependencies, running tests, registering or linking the integration, and pushing changes to Zapier.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/example-apps/files/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm install  # or you can use yarn\n\n# Run tests\nzapier test\n\n# Register the integration on Zapier if you haven't\nzapier register \"App Title\"\n\n# Or you can link to an existing integration on Zapier\nzapier link\n\n# Push it to Zapier\nzapier push\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Deploying Zapier Integration Project with Bash Commands\nDESCRIPTION: This code snippet provides a series of bash commands to set up, test, register, and deploy a Zapier integration project. It covers installing dependencies, running tests, registering or linking the integration, and pushing it to Zapier.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/example-apps/digest-auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm install  # or you can use yarn\n\n# Run tests\nzapier test\n\n# Register the integration on Zapier if you haven't\nzapier register \"App Title\"\n\n# Or you can link to an existing integration on Zapier\nzapier link\n\n# Push it to Zapier\nzapier push\n```\n\n----------------------------------------\n\nTITLE: Setting up and deploying Zapier integration project using CLI commands\nDESCRIPTION: This code snippet demonstrates the typical steps for setting up, testing, registering, and deploying a Zapier integration project using the Zapier CLI. It includes commands for installing dependencies, running tests, registering or linking the integration, and pushing it to Zapier.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/example-apps/callback/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm install  # or you can use yarn\n\n# Run tests\nzapier test\n\n# Register the integration on Zapier if you haven't\nzapier register \"App Title\"\n\n# Or you can link to an existing integration on Zapier\nzapier link\n\n# Push it to Zapier\nzapier push\n```\n\n----------------------------------------\n\nTITLE: Invalid Search and Create Values Anti-Example in JavaScript\nDESCRIPTION: Example showing invalid configuration where search and create values are objects instead of strings referencing registered functions.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'searchOrCreateWidgets',\n  display: {\n    label: 'Search or Create Widgets',\n    description: 'Searches for a widget matching the provided query, or creates one if it does not exist.',\n    hidden: false\n  },\n  search: { require: 'path/to/some/file.js' },\n  create: { require: 'path/to/some/file.js' }\n}\n```\n\n----------------------------------------\n\nTITLE: SearchSchema Missing Sample Anti-Example in JavaScript\nDESCRIPTION: Invalid SearchSchema example missing the required sample in the operation configuration, which is needed unless a resource provides it.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  key: 'recipe',\n  noun: 'Recipe',\n  display: { label: 'Find a Recipe', description: 'Search for recipe by cuisine style.' },\n  operation: { perform: '$func$2$f$' }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Method Hook Schema Anti-Example\nDESCRIPTION: Example of an invalid resource hook method missing the required sample property in operation.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  display: { label: 'Get Tag by ID', description: 'Grab a specific Tag by ID.' },\n  operation: { type: 'hook', perform: '$func$0$f$' }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Method Create Schema Anti-Example\nDESCRIPTION: Example of an invalid resource create method missing the required sample property in operation.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  display: { label: 'Create Tag', description: 'Create a new Tag in your account.' },\n  operation: { perform: '$func$2$f$' }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid CreatesSchema with Mismatched Keys\nDESCRIPTION: Anti-example where the object key doesn't match the 'key' field value inside the CreateSchema object, which is required for validation.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  Create_Recipe: {\n    key: 'createRecipe',\n    noun: 'Recipe',\n    display: { label: 'Create Recipe', description: 'Creates a new recipe.' },\n    operation: { perform: '$func$2$f$', sample: { id: 1 } }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid CreatesSchema with Numeric Prefix\nDESCRIPTION: Anti-example showing an invalid CreatesSchema implementation where the key starts with a number instead of a letter, which violates the schema requirements.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  '01_Create_Recipe': {\n    key: '01_Create_Recipe',\n    noun: 'Recipe',\n    display: { label: 'Create Recipe', description: 'Creates a new recipe.' },\n    operation: { perform: '$func$2$f$', sample: { id: 1 } }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Object Example for Authentication Schema\nDESCRIPTION: Example of an invalid authentication configuration object with incorrect key format.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{ foo: true }\n```\n\n----------------------------------------\n\nTITLE: Invalid OAuth2 Authentication Configuration Example\nDESCRIPTION: Example of an invalid OAuth2 authentication configuration missing the required getAccessToken key.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{ authorizeUrl: { require: 'some/path/to/file.js' } }\n```\n\n----------------------------------------\n\nTITLE: CLI Installation Recommendation for Zapier Platform\nDESCRIPTION: A recommended command for initializing a new Zapier Platform app using the CLI tool, which provides templates to start with.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/example-apps/oauth1-twitter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzapier init .\n```\n\n----------------------------------------\n\nTITLE: Running Zapier Development and Test Commands\nDESCRIPTION: These commands compile the app live for development and run tests. The 'zapier-dev' script likely uses Babel to transpile the code on-the-fly.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/example-apps/babel/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run zapier-dev # compiles live\nzapier test\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Integration Testing Commands\nDESCRIPTION: Commands for deploying and running integration tests on AWS Lambda. Requires AWS access key with appropriate Lambda permissions.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/core/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run deploy-integration-test\nnpm run lambda-integration-test\n```\n\n----------------------------------------\n\nTITLE: Breaking Change - Bundle Meta Usage\nDESCRIPTION: Example of renamed bundle.meta key changes that require updates in client code implementation. The changes were made to improve clarity of the field names.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/changelog/v0-v9.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbundle.meta\n```\n\n----------------------------------------\n\nTITLE: Configuration Parameter Renaming\nDESCRIPTION: Breaking change renaming omitEmptyParams to removeMissingValuesFrom in TypeScript implementation. The parameter remains optional but was initially marked as required.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/changelog/v0-v9.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nomitEmptyParams -> removeMissingValuesFrom\n```\n\n----------------------------------------\n\nTITLE: Publishing Version Updates\nDESCRIPTION: Command to publish package updates using semantic versioning. Updates schema, docs, package version, and publishes to npm.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn version --[patch|minor|major]\n```\n\n----------------------------------------\n\nTITLE: Running Development Commands\nDESCRIPTION: Set of commands for development tasks including linting, testing, documentation generation, and schema exports.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn lint\nyarn test\nyarn smoke-test\nyarn coverage\nyarn validate\nyarn export\nyarn docs\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Installing Zapier Platform Dependencies\nDESCRIPTION: Command to install packages and dependencies to get started with Zapier platform development.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Verifying Linked Packages\nDESCRIPTION: Command to check if the core and schema packages are correctly symlinked in an integration project.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nls -hl node_modules/zapier-platform-*\n```\n\n----------------------------------------\n\nTITLE: Linking Development Versions of Core and Schema Packages\nDESCRIPTION: Commands to link local development versions of zapier-platform-core and zapier-platform-schema packages for use in an integration project.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/zapier-platform/packages/core\nyarn link\ncd /path/to/zapier-platform/packages/schema\nyarn link\ncd /path/to/your/awesome-app\nyarn link zapier-platform-core\nyarn link zapier-platform-schema\n```\n\n----------------------------------------\n\nTITLE: Setting Up Zapier CLI Development Version Alias\nDESCRIPTION: Bash alias command to create a shortcut for the development version of the Zapier CLI.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nalias zapier-dev=\"/path/to/zapier-platform/packages/cli/src/bin/run\"\n```\n\n----------------------------------------\n\nTITLE: Updating Zapier Platform CLI Development Version\nDESCRIPTION: Commands to update your local development version of the Zapier Platform CLI by pulling the latest changes from the main branch and updating dependencies.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/INSTALL_DEV.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/projects/zapier-platform\ngit pull origin main\nyarn\n```\n\n----------------------------------------\n\nTITLE: Simple FieldMetaSchema Example\nDESCRIPTION: Shows a basic implementation of FieldMetaSchema with a single boolean property. This allows storing additional metadata on fields for internal processing.\nSOURCE: https://github.com/zapier/zapier-platform/blob/main/packages/schema/docs/build/schema.md#2025-04-21_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{ shouldCapitalize: true }\n```"
  }
]