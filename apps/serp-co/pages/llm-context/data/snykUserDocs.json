[
  {
    "owner": "snyk",
    "repo": "user-docs",
    "content": "TITLE: Exporting Snyk Test Results to JSON File with Terminal Display\nDESCRIPTION: Command to run Snyk code test and export results to a JSON file while maintaining standard terminal output. Requires Snyk CLI v1.910.0 or higher.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/view-snyk-code-cli-results.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsnyk code test --json-file-output=<path/to/new_json_file>\n```\n\n----------------------------------------\n\nTITLE: Authenticating Snyk CLI\nDESCRIPTION: This command authenticates the Snyk CLI with a Snyk account. It's the first step in using the CLI to scan and monitor projects.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk auth\"\n```\n\n----------------------------------------\n\nTITLE: Generating CycloneDX SBOM for a Project\nDESCRIPTION: Basic command to generate a Software Bill of Materials in CycloneDX format. Requires Snyk CLI version 1.1071.0 or higher and an internet connection.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/sbom.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk sbom --format=cyclonedx1.4+json\n```\n\n----------------------------------------\n\nTITLE: Authenticating Snyk CLI\nDESCRIPTION: This command is used to authenticate the Snyk CLI with your Snyk account. Running this command will open a browser window prompting you to log in and authenticate.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/auth.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"$ snyk auth\"\n```\n\n----------------------------------------\n\nTITLE: Basic Snyk Test Command Example\nDESCRIPTION: Tests a project in the current folder for known vulnerabilities. This is the most basic form of the snyk test command that scans the current directory for dependencies and checks them against Snyk's vulnerability database.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/test.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk test\n```\n\n----------------------------------------\n\nTITLE: Outputting Snyk Code Test Results in JSON Format\nDESCRIPTION: This command runs a Snyk Code test and outputs the results in JSON format directly in the terminal. This is useful for parsing results programmatically or integrating with other tools.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/view-snyk-code-cli-results.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk code test <path/to/folder> --json\n```\n\n----------------------------------------\n\nTITLE: Testing the Latest Version of an npm Package\nDESCRIPTION: Tests the latest version of an npm package for vulnerabilities. This command checks the most recent version of the lodash package available in the npm registry.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/test.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk test lodash\n```\n\n----------------------------------------\n\nTITLE: Generate CycloneDX JSON SBOM for Redis Image\nDESCRIPTION: Command to create a CycloneDX version 1.6 JSON document for a Redis container image, demonstrating basic SBOM generation with Snyk CLI\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/container-sbom.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk container sbom --format=cyclonedx1.6+json redis:latest\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Monitor for Continuous Vulnerability Tracking\nDESCRIPTION: This YAML configuration sets up a GitHub Action to run Snyk monitor, which sends project data to Snyk for continuous vulnerability tracking. It uses the Snyk Node action with the 'monitor' command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/node@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          command: monitor\n```\n\n----------------------------------------\n\nTITLE: Testing Converted Bicep JSON File with Snyk CLI\nDESCRIPTION: Command to test the converted Bicep JSON configuration file using Snyk Infrastructure as Code CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/arm-files.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test deploy.json\n```\n\n----------------------------------------\n\nTITLE: Adding a Vulnerable Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add the 'tinymce' library version 4.1.0 as a dependency in the package.json file. This intentionally adds a vulnerability to the project for demonstration purposes.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/integrate-snyk-into-your-workflow-using-the-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"name\": \"goof\",\n...\n}\n\"dependencies\" {\n ...\n\"typeorm\": \"^0.2.24\",\n\"tinymce\": \"4.1.0\"\n},\n...\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Broker with Bitbucket using Basic Auth via Docker\nDESCRIPTION: This snippet provides the Docker command to run the Snyk Broker client and connect it to a Bitbucket Server instance using Basic Authentication. It requires setting environment variables for the Broker token, Bitbucket credentials, API endpoint, and other configuration parameters. This setup supports analyzing Open Source, IaC, Container, Code files, and Snyk Essentials.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/bitbucket-server-data-center-prerequisites-and-steps-to-install-and-configure-broker/data-center.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --restart=always \\\n           -p 8000:8000 \\\n           -e BROKER_TOKEN=<secret-broker-token> \\\n           -e BROKER_SERVER_URL=<broker-region-url> \\\n           -e BITBUCKET_USERNAME=<username> \\\n           -e BITBUCKET_PASSWORD=<password> \\\n           -e BITBUCKET=<your.bitbucket-server.domain.com (no http/s)> \\\n           -e BITBUCKET_API=<your.bitbucket-server.domain.com/rest/api/1.0 (no http/s)> \\\n           -e PORT=8000 \\\n           -e BROKER_CLIENT_URL=<http://broker.url.example:8000 (dns/IP:port)> \\\n           -e ACCEPT_IAC=tf,yaml,yml,json,tpl \\\n           -e ACCEPT_CODE=true \\\n           -e ACCEPT_Essentials=true \\\n       snyk/broker:bitbucket-server\n```\n\n----------------------------------------\n\nTITLE: Monitoring Project with Snyk\nDESCRIPTION: This command sends a snapshot of the project's current dependencies to the Snyk dashboard. This allows Snyk to notify the user about newly disclosed vulnerabilities in those dependencies, or when a previously unavailable patch or upgrade path is created.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/monitor-your-projects-at-regular-intervals.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n`snyk monitor`\n```\n\n----------------------------------------\n\nTITLE: Gradle Project Testing Command\nDESCRIPTION: CLI command to test all Gradle sub-projects using Snyk\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/guidance-for-java-and-kotlin.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --all-sub-projects\n```\n\n----------------------------------------\n\nTITLE: Checking for Vulnerabilities with Snyk Maven Action in GitHub Actions\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to check for vulnerabilities in a Maven project using Snyk. It runs on push events and uses the Snyk Maven Action with a secret token for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-maven-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Maven using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/maven@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Snyk App Access Token for REST API\nDESCRIPTION: This snippet shows how to authenticate with the Snyk REST API using a Snyk App access token. The token is provided in the Authorization header with the 'bearer' prefix.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/rest-api/authentication-for-api/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n--url \"https://api.snyk.io/rest/self?version=2024-06-10\" \\\n--header \"Content-Type: application/vnd.api+json\" \\\n--header \"Authorization: bearer API_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Path to Packages Folder for Snyk Testing\nDESCRIPTION: This snippet shows how to specify a custom path to the packages folder for Snyk testing using the `--packages-folder` option. This is necessary when the dependencies are installed in a uniquely named folder.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/test.md#2025-04-21_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n\"snyk test --packages-folder=../location/to/packages\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk Test with Organizational Context\nDESCRIPTION: This snippet configures the 'snyk test' command with a specific Snyk Organization context using the '--org' option. This configuration ties test operations to particular organizational settings and impacts how features and private test limits are managed across different projects within that organization.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/test.md#2025-04-21_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n\"snyk config set org=<ORG_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring Specific Sub-Project in Gradle\nDESCRIPTION: This snippet uses the `--sub-project` option to monitor a specified sub-project within a Gradle multi-project configuration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/monitor.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--sub-project=<NAME>\n```\n\n----------------------------------------\n\nTITLE: Contextualizing a Data Flow Rule in JavaScript\nDESCRIPTION: This snippet shows how to modify a Snyk data flow rule by removing a specific source that is not relevant in the given application context. Using the And operator, the rule is adjusted to exclude a non-vulnerable source, refining the security analysis to focus on genuine threats.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/create-query.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nTaint<And<PRED:AnySource,Not<PRED:”SnykSource”>>,PRED:XssSanitizer,PRED:XssSink>\n```\n\n----------------------------------------\n\nTITLE: CycloneDX XML Document for Maven\nDESCRIPTION: Command to create a CycloneDX XML document for Maven projects using 'pom.xml' file and 'cyclonedx1.6+xml' format with Snyk CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/sbom.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk sbom --file=pom.xml --format=cyclonedx1.6+xml\n```\n\n----------------------------------------\n\nTITLE: Using Snyk Setup Action in GitHub Actions Workflow\nDESCRIPTION: This YAML snippet demonstrates how to use the Snyk Setup Action to install the Snyk CLI and run a Snyk test. It defines a GitHub Actions workflow that triggers on push events, checks out the code, sets up Go, installs the Snyk CLI using the Snyk Setup Action, and then runs a Snyk test.  The Snyk token is passed as an environment variable.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-setup-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Snyk example \non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - uses: snyk/actions/setup@master\n    - uses: actions/setup-go@v1\n      with:\n        go-version: \"1.13\"\n    - name: Snyk test\n      run: snyk test\n      env:\n        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Aggregate Many Terraform States Using Glob Pattern\nDESCRIPTION: This command demonstrates using a glob pattern to aggregate various Terraform state files for unmanaged resource detection. It's effective for larger projects with many states.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/iac-describe.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"$ snyk iac describe --from=\\\"tfstate://path/to/**/*.tfstate\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Example Property Path in Snyk IaC Test Results\nDESCRIPTION: This snippet illustrates the property path format used in Snyk IaC test results to pinpoint the location of an issue within a configuration file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/understand-the-iac-cli-test-results/snyk-iac-cli-test-results-v.-1.939.0-and-later.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nresource > aws_api_gateway_stage[denied] > access_log_settingsresource > aws_api_gateway_stage[denied] > access_log_settings\n```\n\n----------------------------------------\n\nTITLE: Specifying a .NET Solution File for Snyk Testing\nDESCRIPTION: This snippet shows how to specify a .NET solution file (`.sln`) for Snyk testing using the `--file=<filename>.sln` option. This allows Snyk to test all .NET projects included in the given solution file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/test.md#2025-04-21_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n\"snyk test --file=myApp.sln\"\n```\n\n----------------------------------------\n\nTITLE: Filtering AWS S3 Buckets using Snyk CLI with JMESPath\nDESCRIPTION: These examples demonstrate the use of the Snyk CLI with JMESPath expressions to filter AWS S3 buckets based on specific criteria. It includes expression syntax for inclusion and exclusion of resources, requiring familiarity with shell command syntax and JMESPath grammar. Proper handling of shell special characters within expressions is necessary.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/filter-rules.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Will include only S3 bucket in the search\n$ snyk iac describe --filter=\"Type=='aws_s3_bucket'\"\n# OR (beware of escape your shell special chars between double quotes)\n$ snyk iac describe --filter=$'Type==\\'aws_s3_bucket\\''\n# Excludes only s3 bucket named 'my-bucket-name'\n$ snyk iac describe --filter=$'Type==\\'aws_s3_bucket\\' && Id!=\\'my-bucket-name\\''\n# Ignore buckets with an ID prefix of 'terraform-'\n$ snyk iac describe --filter=$'!(Type==\\'aws_s3_bucket\\' && starts_with(Id, \\'terraform-\\'))'\n# Ignore buckets with an ID suffix of '-test'\n$ snyk iac describe --filter=$'!(Type==\\'aws_s3_bucket\\' && ends_with(Id, \\'-test\\'))'\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Code Test in CLI\nDESCRIPTION: Command to initiate a security vulnerability scan of source code using Snyk CLI. Requires authentication and minimum CLI version 1.716.0.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk code test\n```\n\n----------------------------------------\n\nTITLE: Download and Run Snyk CLI (macOS)\nDESCRIPTION: This snippet demonstrates how to download the latest Snyk CLI executable for macOS using `curl`, make it executable with `chmod`, and move it to the `/usr/local/bin/` directory to make it accessible from the command line. This method requires manual updates.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/install-or-update-the-snyk-cli/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --compressed https://downloads.snyk.io/cli/stable/snyk-macos -o snyk\nchmod +x ./snyk\nmv ./snyk /usr/local/bin/\n```\n\n----------------------------------------\n\nTITLE: Snyk CLI Command Basic Usage\nDESCRIPTION: Standard command structure for executing Snyk CLI commands with various options and contexts\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/cli-commands-and-options-summary.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsnyk [COMMAND] [SUBCOMMAND] [OPTIONS] [PACKAGE] [CONTEXT-SPECIFIC-OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Ignoring vulnerabilities using Snyk CLI\nDESCRIPTION: This command updates the `.snyk` file and allows you to ignore vulnerabilities for a certain period. The command takes several options such as the ID of the issue, the expiry date, the reason for ignoring the vulnerability, the policy path, and the path to the resource.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/ignore-vulnerabilities-using-the-snyk-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n`snyk ignore --id=<ISSUE_ID> [--expiry=<EXPIRY>] [--reason=<REASON>] [--policy-path=<PATH_TO_POLICY_FILE>] [<OPTIONS>]`\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Personal API Token for Snyk REST API\nDESCRIPTION: This snippet demonstrates how to make a GET request to the Snyk REST API using a personal API token. The token is provided in the Authorization header with the 'token' prefix.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/rest-api/authentication-for-api/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n--url \"https://api.snyk.io/rest/self?version=2024-06-10\" \\\n--header \"Content-Type: application/vnd.api+json\" \\\n--header \"Authorization: token API_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Basic Vulnerability Check with Snyk Gradle-jdk14 Action in GitHub Workflows\nDESCRIPTION: This snippet demonstrates how to set up a basic GitHub workflow that uses the Snyk Gradle-jdk14 Action to check for vulnerabilities in a project. It runs on push events and uses the SNYK_TOKEN secret for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-gradle-jdk14-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Gradle (jdk14) using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/gradle-jdk14@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Sharing CLI Scan Results with Snyk Web UI\nDESCRIPTION: This command shows how to scan Helm chart templates and report the results to the Snyk Web UI using the --report flag, enabling integration between CLI scans and the Snyk platform.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/scan-your-iac-source-code/scan-kubernetes-configuration-files/scan-and-fix-security-issues-in-helm-charts-current-iac.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test out/ --report\n```\n\n----------------------------------------\n\nTITLE: Sharing IaC Test Results with Snyk Web UI Using CLI\nDESCRIPTION: Basic command to scan an IaC project and share results with the Snyk Web UI. This allows users to view configuration issues in the web interface.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/share-cli-results-with-the-snyk-web-ui.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test myproject --report\n```\n\n----------------------------------------\n\nTITLE: Setting Target Reference for IaC Scan Results\nDESCRIPTION: Command to set the target reference (such as a Git branch) for IaC projects when reporting results to the Snyk Web UI. This helps track which version or branch was scanned.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/share-cli-results-with-the-snyk-web-ui.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test myproject --report \\\n    --target-reference=\"$(git branch --show-current)\"\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Gradle Projects with Snyk CLI\nDESCRIPTION: Command to scan all Gradle sub-projects at once, which is the recommended approach for Gradle builds with multiple sub-projects.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsnyk test --all-sub-projects\n```\n\n----------------------------------------\n\nTITLE: Monitoring a Container Image with Snyk Container\nDESCRIPTION: Command to monitor a container image for ongoing vulnerability tracking. Enables continuous security alerts and sharing of results across team members.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-container/scan-and-monitor-images.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk container monitor <repository>:<tag>\n```\n\n----------------------------------------\n\nTITLE: Generating SBOM with Organization Specification\nDESCRIPTION: Generate an SBOM for a specific Snyk organization, useful for managing multiple organizational contexts and access permissions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/sbom.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk sbom --format=cyclonedx1.5+xml --org=<ORG_ID>\n```\n\n----------------------------------------\n\nTITLE: Monitoring Projects with Snyk CLI\nDESCRIPTION: Command to monitor all projects and post vulnerabilities to Snyk UI for continuous monitoring. Uses the --all-projects flag to detect all projects and specifies organization via --org parameter.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/snyk-test-and-snyk-monitor-in-ci-cd-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk monitor --all-projects --org=snyk-apps\n```\n\n----------------------------------------\n\nTITLE: Rendering Helm Charts on Windows PowerShell\nDESCRIPTION: This snippet demonstrates how to render Helm charts and scan them using Snyk IAC within a Windows PowerShell environment. It adjusts the command syntax to fit Windows' file path conventions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/helm-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nhelm template .\\helm\\ --output-dir .\\output\\\nsnyk iac test .\\output\\\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Rules Bundle with Snyk IaC Rules\nDESCRIPTION: This command builds a custom rules bundle using the snyk-iac-rules tool.  It packages the rules in the current directory into a deployable bundle for use with Snyk IaC.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/bundling-rules.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n```\nsnyk-iac-rules build\n```\n```\n\n----------------------------------------\n\nTITLE: Uploading Snyk Scan Results to GitHub Code Scanning with Gradle-jdk14 Action\nDESCRIPTION: This snippet demonstrates how to use the Snyk Gradle-jdk14 Action to generate a SARIF file and upload it to GitHub Code Scanning. It uses the --sarif-file-output option and the GitHub SARIF upload action. The continue-on-error option is used to ensure the SARIF upload occurs even if vulnerabilities are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-gradle-jdk14-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Gradle (jdk14) using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/gradle-jdk14@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Aggregating Multiple Terraform State Files with Snyk IaC Describe\nDESCRIPTION: Executes the Snyk IaC Describe command to aggregate multiple Terraform state files by listing their paths in the '--from' option. This enables scanning of diverse configurations in a single command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/get-started-with-snyk-iac-describe-on-aws.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk iac describe --from=\"tfstate://path/to/terraform_S3.tfstate,tfstate://path/to/terraform_VPC.tfstate\"\n```\n\n----------------------------------------\n\nTITLE: Snyk Ruby Vulnerability Scanning with GitHub Code Scanning SARIF Upload\nDESCRIPTION: GitHub Actions workflow for scanning Ruby project vulnerabilities and uploading SARIF results to GitHub Code Scanning, with continue-on-error to ensure result upload\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-ruby-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Ruby using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/ruby@master\n        continue-on-error: true\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Save SBOM to File with Redirection\nDESCRIPTION: Generate a CycloneDX JSON SBOM for a Redis image and redirect the output to a file, useful for storing and sharing SBOM documents\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/container-sbom.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk container sbom --format=cyclonedx1.6+json redis:latest > mySBOM.json\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode\nDESCRIPTION: This command enables strict mode for the scan. It includes service-linked resources in the report. Using `--strict` will add all linked resources to the scan and report.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/iac-describe-command-examples.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac describe --strict\n```\n\n----------------------------------------\n\nTITLE: Monitoring Build Tools with Snyk CLI\nDESCRIPTION: Command syntax for monitoring build tools using Snyk CLI with context-specific options.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsnyk monitor -- [<context-specific_options>]\n```\n\n----------------------------------------\n\nTITLE: Scanning Unmanaged JAR, WAR, and AAR Files with Snyk CLI\nDESCRIPTION: This snippet demonstrates how to scan individual JAR, WAR, and AAR files using the Snyk CLI with the `--scan-unmanaged` and `--file` options. This allows you to test specific unmanaged files for vulnerabilities.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/test.md#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n\"--scan-unmanaged --file=<JAR_FILE_NAME>\"\n```\n\n----------------------------------------\n\nTITLE: Basic Taint Analysis Rule for CWE-312 in Custom Rules Framework\nDESCRIPTION: This custom rule uses the Taint template to detect potential CWE-312 vulnerabilities by tracking data flow from Console.ReadLine to File.WriteAllText.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/create-query.md#2025-04-21_snippet_10\n\nLANGUAGE: ada\nCODE:\n```\nTaint<\n  \"global::System.Console.ReadLine\",\n  PRED:None,\n  \"global::System.IO.File.WriteAllText\"\n>\n```\n\n----------------------------------------\n\nTITLE: Testing specific repository using Snyk Code from a different location\nDESCRIPTION: This snippet shows how to test the `snyk-goof` repository from a specified directory using the `snyk code test` command. This requires specifying the full path to the target repository.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/scan-source-code-with-snyk-code-using-the-cli.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk code test /Users/username/Documents/Repositories/snyk-goof\"\n```\n\n----------------------------------------\n\nTITLE: Building Maven Projects for Java\nDESCRIPTION: For Maven projects, run this command to build the project and resolve dependencies before testing with Snyk CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/open-source-projects-that-must-be-built-before-testing-with-the-snyk-cli.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn install\n```\n\n----------------------------------------\n\nTITLE: Scanning Docker Images with Snyk Container Test\nDESCRIPTION: Scans a specified Docker image for vulnerabilities using the `snyk container test` command. This is the basic usage for testing container images.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/container-test.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk container test <image>\n```\n\n----------------------------------------\n\nTITLE: Identifying Double Free Vulnerabilities\nDESCRIPTION: This entry details double free vulnerabilities (CWE-415) in C++. This occurs when a memory block is freed more than once, potentially leading to application crashes or security breaches.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Testing a Specific Gradle Sub-Project with Snyk CLI\nDESCRIPTION: Demonstrates how to test a specific sub-project in a Gradle multi-project configuration using the `--sub-project=<NAME>` or `--gradle-sub-project=<NAME>` options with the Snyk CLI. This allows focusing the scan on a particular part of a larger project.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/test.md#2025-04-21_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n\"--sub-project=<NAME>\", \"--gradle-sub-project=<NAME>\"\n```\n\n----------------------------------------\n\nTITLE: Snyk Gradle (jdk17) Action Workflow with SARIF Upload in YAML\nDESCRIPTION: This snippet demonstrates a GitHub Actions workflow that runs Snyk on a Gradle (jdk17) project, generates a SARIF file, and uploads the results to GitHub Code Scanning. It uses continue-on-error to ensure the SARIF upload occurs even if vulnerabilities are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-gradle-jdk17-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Gradle (jdk17) using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/gradle-jdk17@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Test Command for Unmanaged Projects (Bash)\nDESCRIPTION: This snippet shows how to run the `snyk test` command to analyze unmanaged projects for vulnerabilities, including generating a list of dependencies.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/c-c++/snyk-cli-for-open-source-c++-scans.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk test --unmanaged\n```\n\n----------------------------------------\n\nTITLE: Testing IaC with Custom Rules using Snyk CLI\nDESCRIPTION: This snippet shows how to run a test using a local Infrastructure as Code (IaC) rules bundle with the Snyk CLI. It requires the Snyk CLI to be installed. The primary parameter is `--rules` which specifies the path to the custom rules bundle. The expected output is the configuration scan results, including issues identified by both Snyk's default rules and the custom rules provided.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/use-iac-custom-rules-with-cli/use-a-local-iac-custom-rules-bundle.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsnyk iac test --rules=bundle.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom PR Template with YAML in Snyk\nDESCRIPTION: This YAML template example demonstrates how to structure a custom pull request template for Snyk integration. It shows conditional formatting using Mustache syntax with is_upgrade_pr and jira_ids variables, along with using other variables like issue_count, package_name, package_from, package_to, and snyk_project_url to create dynamic PR content.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/examples-and-template-validation.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: This PR fixes {{ issue_count }} issues\ncommitMessage: \"fix: {{ issue_count }} Snyk issues\"\ndescription: |\n  {{ #is_upgrade_pr }}\n  This PR has been opened to make sure our repositories are kept up-to-date.\n  It updates {{ package_name }} from version {{ package_from }} to version {{ package_to }}.\n  Review relevant docs for possible breaking changes.\n  {{ /is_upgrade_pr }}\n  \n  **Tickets**\n  {{ #jira_ids }}\n  - Fixes {{ . }}\n  {{ /jira_ids }}\n  \n  To find more details, see the Snyk project [{{ snyk_project_name }}]({{ snyk_project_url }})\n```\n\n----------------------------------------\n\nTITLE: Running Snyk IaC Test Command\nDESCRIPTION: Demonstrates how to run the Snyk CLI command to test different types of Infrastructure as Code files, such as CloudFormation, Kubernetes, Terraform, ARM, and directories. The command checks for security issues in IaC configurations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/iac-test.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ snyk iac test /path/to/cloudformation_file.yaml\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ snyk iac test /path/to/kubernetes_file.yaml\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ snyk iac test /path/to/terraform_file.tf\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform plan -out=tfplan.binary\\n$ terraform show -json tfplan.binary > tf-plan.json\\n$ snyk iac test tf-plan.json\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ snyk iac test /path/to/arm_file.json\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ snyk iac test /path/to/directory\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ snyk iac test /path/to/directory --rules=bundle.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Rego Test - Testing MY_RULE\nDESCRIPTION: This Rego test defines test cases for the `MY_RULE` rule. It includes `allowed_test_cases` where the rule should pass and `denied_test_cases` where the rule should fail.  The `testing.evaluate_test_cases` function is used to run the test cases against the provided fixtures.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/testing-a-rule.md#2025-04-21_snippet_2\n\nLANGUAGE: rego\nCODE:\n```\n\"package rules\\n\\nimport data.lib\\nimport data.lib.testing\\n\\ntest_MY_RULE {\\n\t# array containing test cases where the rule is allowed\\n\tallowed_test_cases := [{\\n\t\t\\\"want_msgs\\\": [],\\n\t\t\\\"fixture\\\": \\\"allowed.tf\\\",\\n\t}]\\n\t# array containing cases where the rule is denied\\n\tdenied_test_cases := [{\\n\t\t\\\"want_msgs\\\": [\\\"input.resource.aws_redshift_cluster[denied].tags\\\"],\\n\t\t\\\"fixture\\\": \\\"denied.tf\\\",\\n\t}]\\n\ttest_cases := array.concat(allowed_test_cases, denied_test_cases)\\n\ttesting.evaluate_test_cases(\\\"MY_RULE\\\", \\\"./rules/MY_RULE/fixtures\\\", test_cases)\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Output Snyk Test Results in SARIF Format\nDESCRIPTION: The `--sarif` option with the `snyk code test` command outputs the test results in SARIF (Static Analysis Results Interchange Format), suitable for tools that consume SARIF for security analysis.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/code-test.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsnyk code test --sarif\n```\n\n----------------------------------------\n\nTITLE: Identifying Deserialization of Untrusted Data Vulnerabilities\nDESCRIPTION: This entry addresses deserialization of untrusted data vulnerabilities (CWE-502) across C#, Java, JavaScript, Kotlin, PHP, Python, Ruby, Scala, and Visual Basic. Such vulnerabilities can be exploited to execute arbitrary code on the server.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Excluding a Single Directory or File from Snyk Code CLI Test\nDESCRIPTION: This command demonstrates how to exclude a single directory or file from the Snyk Code CLI test. It creates or updates the .snyk file with the specified exclusion.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/exclude-directories-and-files-from-snyk-code-cli-tests.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk ignore --file-path=<directory_or_file>\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk and GitHub Code Scanning Integration\nDESCRIPTION: This YAML configuration demonstrates how to set up a GitHub Action that uses Snyk to scan for vulnerabilities and upload the results to GitHub Code Scanning. It is necessary to use 'continue-on-error' to ensure the SARIF upload step executes even if vulnerabilities are found. This setup requires 'snyk/actions/node' and 'github/codeql-action/upload-sarif'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/README.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/node@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Uploading Snyk Scan Results to GitHub Code Scanning in YAML\nDESCRIPTION: This YAML configuration shows how to use the Snyk dotNET Action to run a vulnerability scan and upload the results to GitHub Code Scanning. It uses the --sarif-file-output option and the GitHub SARIF upload action. The continue-on-error option is used to ensure the SARIF upload occurs even if vulnerabilities are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-dotnet-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for dotNET using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Setup .NET\n        uses: actions/setup-dotnet@4\n      - name: Restore dependencies\n        run: dotnet restore ./path/to/your.sln\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/dotnet@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Implementing Pull Request Gating Criteria\nDESCRIPTION: Configure build checks and gating measures using severity, fixability, and security vulnerability criteria in Snyk\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/implement-snyk/team-implementation-guide/phase-1-discovery-and-planning/create-rollout-plan.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Pull Request/Merge Request Checks using criteria such as `severity` and `is fixable`.\n* Fail builds based on criteria such as `High` or `Critical`, `CVSS`, `Mature Exploit` for Open Source and other criteria using the [Snyk Filter](https://github.com/snyk-labs/snyk-filter) plugin.\n```\n\n----------------------------------------\n\nTITLE: Handling JSON Output in Snyk Test\nDESCRIPTION: This snippet illustrates how to output scan results as a JSON data structure using the '--json' or '--json-file-output' options in the 'snyk test' command. These options facilitate easy integration with other tools or for automated analysis by saving detailed scan results in a structured format.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/test.md#2025-04-21_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n\"snyk test --json\"\n\"snyk test --json-file-output=<OUTPUT_FILE_PATH>\"\n```\n\n----------------------------------------\n\nTITLE: Scanning Specific Manifest File with Snyk CLI\nDESCRIPTION: This command demonstrates how to use the --file option to specify a particular manifest file for Snyk to inspect for package information.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/use-options-to-customize-the-snyk-test-command.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk test --file=package.json\n```\n\n----------------------------------------\n\nTITLE: Snyk Container Test with Dockerfile and Policy Path\nDESCRIPTION: Scans a Docker image using a specified Dockerfile and a custom Snyk policy file. The `--file` and `--policy-path` options are used to provide the paths to the Dockerfile and policy file, respectively.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/container-test.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk container test app:latest --file=Dockerfile\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk container test app:latest --file=Dockerfile --policy-path=path/to/.snyk\n```\n\n----------------------------------------\n\nTITLE: Monitoring a project with Snyk CLI\nDESCRIPTION: This command takes a snapshot and continuously monitors a project for open-source vulnerabilities and license issues. It allows for continuous security monitoring of a project.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk monitor\"\n```\n\n----------------------------------------\n\nTITLE: Testing a Python Project with Custom Requirements File\nDESCRIPTION: This command demonstrates how to test a Python project with a non-default requirements file by specifying both the file name and package manager. This is necessary when your requirements file has a non-standard name like 'requirements-dev.txt'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/test.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --file=requirements-dev.txt --package-manager=pip\n```\n\n----------------------------------------\n\nTITLE: Executing Snyk Test Command with Options\nDESCRIPTION: This snippet demonstrates the syntax for executing the 'snyk test' command with various options to check projects for vulnerabilities. These options allow you to configure the scan for multiple projects, specify file paths, manage dependencies, and format outputs. The core functionality revolves around identifying open-source vulnerabilities and license issues within the project's dependencies.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/test.md#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n\"snyk test [<OPTIONS>]\"\n```\n\n----------------------------------------\n\nTITLE: Scanning All Project Manifest Files with Snyk CLI\nDESCRIPTION: This command shows how to use the --all-projects option to inspect all manifest files in a project.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/use-options-to-customize-the-snyk-test-command.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk test --all-projects\n```\n\n----------------------------------------\n\nTITLE: Phased PR Check Rollout Strategy\nDESCRIPTION: Describes a gradual implementation approach for Snyk PR Checks, starting with optional tests and progressively moving to blocking PRs with critical issues\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/implement-snyk/enterprise-implementation-guide/phase-6-rolling-out-the-prevention-stage/enable-and-configure-snyk-on-prs.md#2025-04-21_snippet_1\n\nLANGUAGE: strategy\nCODE:\n```\n# Rollout Phases\n1. Optional PR checks with visible results\n2. Block PRs with High/Critical severity issues\n3. Require fixes for discoverable vulnerabilities\n```\n\n----------------------------------------\n\nTITLE: Testing Yarn Workspaces with Snyk\nDESCRIPTION: This command is used to scan Yarn workspace packages, referencing the root lockfile and allowing for deeper detection of sub-folders.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/snyk-open-source-specific-ci-cd-strategies.md#2025-04-21_snippet_6\n\nLANGUAGE: Yarn\nCODE:\n```\nsnyk test --yarn-workspaces --detection-depth=6\n```\n\n----------------------------------------\n\nTITLE: Snyk Ruby Vulnerability Scanning with High Severity Threshold\nDESCRIPTION: GitHub Actions workflow for scanning Ruby project vulnerabilities, filtering results to only include high severity issues\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-ruby-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Ruby using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/ruby@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Authenticating Snyk CLI with API Token\nDESCRIPTION: This command authenticates the Snyk CLI using an API token.  Use the `--auth-type=token` option to explicitly specify token-based authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/auth.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n`snyk auth --auth-type=token`\n```\n\n----------------------------------------\n\nTITLE: SBOM Generation for Monorepos\nDESCRIPTION: Generate a comprehensive SBOM for multi-project repositories, detecting and including all projects in the working directory.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/sbom.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk sbom --format=spdx2.3+json --all-projects --name=MyProject --version=1.0.0\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Code Test on Specific Folder with JSON Output\nDESCRIPTION: This example command demonstrates how to run a Snyk Code test on a specific folder (snyk-goof-master) and output the results in JSON format in the terminal.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/view-snyk-code-cli-results.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk code test /Users/username/Documents/Repositories/snyk-goof-master --json\n```\n\n----------------------------------------\n\nTITLE: Authenticate with Snyk Token\nDESCRIPTION: Overrides the token stored in the Snyk configuration file. This is commonly used in CI/CD environments to provide authentication credentials.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/configure-the-snyk-cli/configure-snyk-cli-to-connect-to-snyk-api.md#2025-04-21_snippet_3\n\nLANGUAGE: environment\nCODE:\n```\n\"SNYK_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Snyk Test Results to SARIF File without Terminal Display\nDESCRIPTION: Command to run Snyk code test and export results to a SARIF file while suppressing terminal output.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/view-snyk-code-cli-results.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsnyk code test --sarif > <path/to/new_sarif_file>\n```\n\n----------------------------------------\n\nTITLE: Directory Testing with Depth Limit\nDESCRIPTION: Command to test IaC files with a specified directory depth limit\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test --detection-depth=3\n```\n\n----------------------------------------\n\nTITLE: Executing Snyk Code Test Command\nDESCRIPTION: The command `snyk code test` is used to perform Static Application Security Testing (SAST) on source code. It checks for any known security vulnerabilities. The command accepts various options to customize the scanning process, such as specifying an organization, output formats (JSON or SARIF), and severity thresholds. An appropriate `ORG_ID` should be set, especially when working with multiple organizations in Snyk. The command also provides detailed debug logs and exit codes for various scenarios.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/code-test.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsnyk code test [<OPTIONS>] [<PATH>]\n```\n\n----------------------------------------\n\nTITLE: Scanning a Docker Image with Snyk Container\nDESCRIPTION: Basic command to test a container image for vulnerabilities using Snyk. Supports testing images from remote registries or local Docker daemon. Provides vulnerability detection and reporting.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-container/scan-and-monitor-images.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk container test debian\n```\n\nLANGUAGE: bash\nCODE:\n```\nsnyk container test <repository>:<tag>\n```\n\nLANGUAGE: bash\nCODE:\n```\nsnyk container test <repository>:<tag> --file=Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Mid Level Usage with GitLab\nDESCRIPTION: Example of mid-level usage with GitLab, which starts from specified groups to get all repositories and count commits from the past 90 days.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/usage.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count gitlab --token TOKEN --groups GROUP1,GROUP2\n```\n\n----------------------------------------\n\nTITLE: Blocking Vulnerabilities in Pull Requests\nDESCRIPTION: Implementing Snyk PR checks to prevent new security issues from being introduced during code changes. Focuses on blocking only the differences in code to ease developer adoption.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/implement-snyk/enterprise-implementation-guide/phase-6-rolling-out-the-prevention-stage/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [Run PR Checks](../../../scan-with-snyk/pull-requests/pull-request-checks/), which include the option to block new issues.\n* [Snyk Delta](../../../snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-delta.md) can assist with differences in results at the CLI level.\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Code scan with snyk-to-html conversion\nDESCRIPTION: Command to run a Snyk Code scan, pipe the JSON output to snyk-to-html, and generate an HTML report called results-code.html.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-to-html.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsnyk code test --json | snyk-to-html -o results-code.html\n```\n\n----------------------------------------\n\nTITLE: Testing a repository from a different location with Snyk Code using the CLI\nDESCRIPTION: This snippet shows how to test a repository from a location other than the current directory using the `snyk code test` command. The `<path/to/folder>` argument specifies the full path to the repository to be tested.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/scan-source-code-with-snyk-code-using-the-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk code test <path/to/folder>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Snyk Security Scan Task in YAML\nDESCRIPTION: This snippet illustrates the setup for a Snyk security scan task specifically for code analysis. It specifies the task version and crucial parameters like the service connection endpoint, the type of test ('code'), the severity threshold to report issues as 'medium', and the instruction to fail if any issues are found. Dependencies include a valid Snyk security scanning task and available service connection endpoint configured with 'snykToken'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/azure-pipelines-integration/simple-example-of-a-snyk-task-to-run-a-code-test.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- task: SnykSecurityScan@1\n  inputs:\n    serviceConnectionEndpoint: 'snykToken'\n    testType: 'code'\n    codeSeverityThreshold: 'medium'\n    failOnIssues: true\n```\n\n----------------------------------------\n\nTITLE: Scanning Terraform Configuration Files with Snyk IaC CLI\nDESCRIPTION: Commands to scan Terraform configuration files using Snyk IaC CLI. You can specify either a single file or an entire directory for scanning.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/terraform-files.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test main.tf\nsnyk iac test .\n```\n\n----------------------------------------\n\nTITLE: Retrieving SBOM Document using cURL\nDESCRIPTION: This cURL command demonstrates how to make an API request to Snyk to retrieve an SBOM document for a specific project. It requires the organization ID, project ID, SBOM format, and Snyk API token.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/sbom-apis/rest-api-get-a-projects-sbom-document.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl --location 'https://api.snyk.io/rest/orgs/<ORG_ID>/projects/<PROJECT_ID>/sbom?version=yyyy-mm-dd&format=<SBOM_FORMAT>' \\\n--header 'Authorization: token <SNYK_API_TOKEN>'\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for Bitbucket Cloud and Snyk authentication\nDESCRIPTION: Sets required environment variables for authentication with Bitbucket Cloud and Snyk API. These credentials are necessary for performing import operations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-bitbucket-cloud-organizations-and-repos-in-snyk.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport BITBUCKET_CLOUD_USERNAME=***\nexport BITBUCKET_CLOUD_PASSWORD=***\nexport SNYK_TOKEN=***\n```\n\n----------------------------------------\n\nTITLE: Example Output of IaC Test with Report Flag\nDESCRIPTION: Sample output when running the 'snyk iac test' command with the '--report' flag. It shows detected issues and provides a link to view results in the Snyk Web UI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/share-cli-results-with-the-snyk-web-ui.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> snyk iac test myproject --report\n\nTesting arm-file.tf...\n\n\nInfrastructure as code issues:\n  ✗ VM Agent is not provisioned automatically for Windows [Low Severity] [SNYK-CC-AZURE-667] in Compute\n    introduced by resource > azurerm_virtual_machine[my_terraformvm] > os_profile_windows_config > provision_vm_agent\n\n\nOrganization:      my.org\nType:              Terraform\nTarget file:       arm-file.tf\nProject name:      myproject\nOpen source:       no\nProject path:      myproject\n\nTested arm-file.tf for known issues, found 1 issues\n\nYour test results are available at: https://app.snyk.io/org/my.org/projects under the name myproject\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Test for Node.js Project with GitHub Actions\nDESCRIPTION: This YAML configuration sets up a GitHub Action to run Snyk vulnerability scanning on a Node.js project. It uses the Snyk Node action and requires a SNYK_TOKEN secret to be set.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/node@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Running Snyk test with DEBUG environment variable\nDESCRIPTION: This snippet shows how to run the Snyk test command with the `DEBUG=*` environment variable to enable debug logging. This is an alternative method for capturing logs, providing detailed insights into the Snyk scan process.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/ci-cd-troubleshooting-and-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"DEBUG=* snyk test\"\n```\n\n----------------------------------------\n\nTITLE: Integrate Snyk IaC GitHub Action for Contract Testing\nDESCRIPTION: This GitHub Actions workflow tests the contract between the custom rules and the Snyk CLI. It installs the Snyk CLI, builds a bundle of custom rules, and then runs the Snyk IaC GitHub Action to check Infrastructure as Code files for issues. The `SNYK_TOKEN` is used for authentication with Snyk.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/iac-custom-rules-within-a-pipeline.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"jobs:\\n  contract_test:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v2\\n\\n      - uses: actions/setup-node@v1\\n        with:\\n          node-version: 15\\n\\n      - name: Install snyk-iac-rules\\n        run: npm i -g snyk-iac-rules\\n\\n      - name: Build bundle\\n        run: snyk-iac-rules build .\\n\\n      - name: Run contract with Snyk to check Infrastructure as Code files for issues\\n        continue-on-error: true\\n        uses: snyk/actions/iac@master\\n        env:\\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\\n        with:\\n          args: --rules=bundle.tar.gz\\n\"\n```\n\n----------------------------------------\n\nTITLE: Extending a Data Flow Rule in JavaScript\nDESCRIPTION: The code demonstrates extending an existing Snyk data flow rule to include a custom source using the Or operator. This JavaScript snippet adds a user-defined source to Snyk's known sources and checks for data flow into an XSS sink. This helps in identifying new vulnerabilities that might otherwise be missed.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/create-query.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nTaint<Or<PRED:AnySource,\"SourceFoo\">,PRED:XssSanitizer,PRED:XssSink>\n```\n\n----------------------------------------\n\nTITLE: Context-Specific Options Description\nDESCRIPTION: Description of context-specific options that can be passed to Snyk test and monitor commands using the double-dash syntax.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/cli-commands-and-options-summary.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n-- [<CONTEXT-SPECIFIC_OPTIONS>]\n```\n\n----------------------------------------\n\nTITLE: BitBucket Pipeline Configuration with Direct Snyk CLI Installation\nDESCRIPTION: Example showing how to download, validate, and use the Snyk CLI directly in BitBucket Pipelines without using the snyk/snyk-scan integration. Includes SHA256 checksum validation for security.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-images-guides-to-migration/bitbucket-pipelines-migration.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimage: node:18\n\npipelines:\n  default:\n    - step:\n        name: Build\n        caches:\n          - node\n        script:\n          - npm install\n    - step:\n        name: Snyk scan\n        script:\n          # Download Snyk Linux CLI\n          - curl https://downloads.snyk.io/cli/latest/snyk-linux -o snyk-linux\n          # Download Snyk Linux CLI SHASUM\n          - curl https://downloads.snyk.io/cli/latest/snyk-linux.sha256 -o snyk.sha256\n          # Validate binary using SHASUM\n          - sha256sum -c snyk.sha256\n          # Configure CLI for executtion\n          - chmod +x snyk-linux\n          - mv snyk-linux /usr/local/bin/snyk\n          # Run Snyk CLI\n          - snyk test --all-projects -d\n```\n\n----------------------------------------\n\nTITLE: Counting Open Issues Per SLA Status and Severity in Snowflake\nDESCRIPTION: This SQL query calculates the number of open issues categorized by SLA status (Within SLA, At Risk, Breached) and severity level. The query uses configurable SLA targets and at-risk thresholds for each severity level, allowing teams to track compliance with their remediation policies.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/reporting/reporting-and-bi-integrations-snowflake-data-share/build-your-first-dashboard.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nWITH \n    base AS (\n    SELECT \n        CASE\n            WHEN LAST_INTRODUCED IS NULL THEN DATEDIFF('DAY', TO_DATE(FIRST_INTRODUCED), CURRENT_DATE)\n            WHEN TO_DATE(FIRST_INTRODUCED) <= TO_DATE(LAST_INTRODUCED) THEN DATEDIFF('DAY', TO_DATE(LAST_INTRODUCED), CURRENT_DATE)\n        END AS ISSUE_AGE,\n        ISSUE_SEVERITY,     \n        CASE \n           WHEN ISSUE_SEVERITY = 'Critical' AND ISSUE_AGE > c.CRITICAL THEN 'Breached' \n           WHEN ISSUE_SEVERITY = 'Critical' AND ISSUE_AGE >= (c.CRITICAL-c.CRITICAL_AT_RISK) THEN 'At Risk' \n           WHEN ISSUE_SEVERITY = 'Critical' AND ISSUE_AGE < (c.CRITICAL-c.CRITICAL_AT_RISK) THEN 'Within SLA' \n           WHEN ISSUE_SEVERITY = 'High' AND ISSUE_AGE > h.HIGH THEN 'Breached' \n           WHEN ISSUE_SEVERITY = 'High' AND ISSUE_AGE >= (h.HIGH-h.HIGH_AT_RISK) THEN 'At Risk' \n           WHEN ISSUE_SEVERITY = 'High' AND ISSUE_AGE < (h.HIGH-h.HIGH_AT_RISK) THEN 'Within SLA' \n           WHEN ISSUE_SEVERITY = 'Medium' AND ISSUE_AGE > m.MEDIUM THEN 'Breached' \n           WHEN ISSUE_SEVERITY = 'Medium' AND ISSUE_AGE >= (m.MEDIUM-m.MEDIUM_AT_RISK) THEN 'At Risk'\n           WHEN ISSUE_SEVERITY = 'Medium' AND ISSUE_AGE < (m.MEDIUM-m.MEDIUM_AT_RISK) THEN 'Within SLA'  \n           WHEN ISSUE_SEVERITY = 'Low' AND ISSUE_AGE > l.LOW THEN 'Breached' \n           WHEN ISSUE_SEVERITY = 'Low' AND ISSUE_AGE >= (l.LOW-l.LOW_AT_RISK) THEN 'At Risk' \n           WHEN ISSUE_SEVERITY = 'Low' AND ISSUE_AGE < (l.LOW-l.LOW_AT_RISK) THEN 'Within SLA' \n       END AS SLA_STATUS       \n       FROM SNYK.SNYK.ISSUES__V_1_0 i \n            INNER JOIN SNYK.SNYK.PROJECTS__V_1_0 p ON i.project_public_id = p.public_id\n            -- set the SLA TARGETS and AT RISK threshold inside the select clause of each table below\n            CROSS JOIN (SELECT 15 AS CRITICAL, 3 AS CRITICAL_AT_RISK) AS c\n            CROSS JOIN (SELECT 30 AS HIGH, 10 AS HIGH_AT_RISK) AS h \n            CROSS JOIN (SELECT 90 AS MEDIUM, 20 AS MEDIUM_AT_RISK) AS m \n            CROSS JOIN (SELECT 180 AS LOW, 30 AS LOW_AT_RISK) AS l \n       WHERE IS_MONITORED = true    -- include only monitored projects\n        AND ISSUE_STATUS = 'Open'   -- include only open issues\n        AND i.DELETED_AT IS NULL    -- remove deleted issues\n    )\nSELECT\n    SLA_STATUS,\n    SUM(CASE WHEN ISSUE_SEVERITY = 'Critical' THEN 1 ELSE 0 END) AS critical,\n    SUM(CASE WHEN ISSUE_SEVERITY = 'High' THEN 1 ELSE 0 END) AS high,\n    SUM(CASE WHEN ISSUE_SEVERITY = 'Medium' THEN 1 ELSE 0 END) AS medium,\n    SUM(CASE WHEN ISSUE_SEVERITY = 'Low' THEN 1 ELSE 0 END) AS low\nFROM base\nGROUP BY SLA_STATUS\nORDER BY SLA_STATUS\n```\n\n----------------------------------------\n\nTITLE: Monitoring Ivy Dependencies with Snyk\nDESCRIPTION: Command to continuously monitor dependencies in an Ant/Ivy project using the generated POM file with Snyk.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nsnyk monitor --file=pom.xml\n```\n\n----------------------------------------\n\nTITLE: Snyk PHP High Severity Vulnerability Scanning\nDESCRIPTION: GitHub Actions workflow that scans for only high severity vulnerabilities in PHP projects using Snyk. Adds severity threshold argument to the basic configuration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-php-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for PHP using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/php@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Test with High Severity Threshold\nDESCRIPTION: This YAML configuration sets up a GitHub Action to run Snyk test with a custom severity threshold. It uses the Snyk Node action and sets the '--severity-threshold' argument to 'high' to report only high severity vulnerabilities.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/README.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/node@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Generating Organization Data with Skip Empty Org\nDESCRIPTION: This command generates organization data while skipping any organizations that do not have repositories. It ensures only relevant organizations are processed during import.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-bitbucket-server-organizations-and-repos-in-snyk.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import orgs:data --source=bitbucket-server --groupId=<snyk_group_id> --skipEmptyOrg\n```\n\n----------------------------------------\n\nTITLE: Use Single Terraform State from S3 Backend\nDESCRIPTION: This command detects unmanaged resources by fetching a Terraform state stored in an S3 bucket. It demonstrates how to work with remote Terraform state files.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/iac-describe.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"$ snyk iac describe --from=\\\"tfstate+s3://my-bucket/path/to/state.tfstate\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk Maven Plugin in pom.xml\nDESCRIPTION: Demonstrates how to add the Snyk Maven Plugin to a project's pom.xml with basic configuration for scanning dependencies and monitoring vulnerabilities\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/maven-plugin-integration-with-snyk.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n  <plugins>\n    <plugin>\n      <groupId>io.snyk</groupId>\n      <artifactId>snyk-maven-plugin</artifactId>\n      <version>2.2.0</version>\n      <inherited>false</inherited>\n      <executions>\n        <execution>\n          <id>snyk-test</id>\n          <goals>\n            <goal>test</goal>\n          </goals>\n        </execution>\n        <execution>\n          <id>snyk-monitor</id>\n          <goals>\n            <goal>monitor</goal>\n          </goals>\n        </execution>\n      </executions>\n      <configuration>\n        <apiToken>${env.SNYK_TOKEN}</apiToken>\n        <args>\n          <arg>--all-projects</arg>\n        </args>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Creating Snyk Monitor Namespace\nDESCRIPTION: Command to create a dedicated namespace for the Snyk Controller in Kubernetes.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/install-the-snyk-controller-with-helm-azure-and-google-cloud-platform.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace snyk-monitor\n```\n\n----------------------------------------\n\nTITLE: Building and Scanning Kustomize Templates with Snyk CLI\nDESCRIPTION: This code snippet demonstrates how to build a Kubernetes manifest file from Kustomize templates and then scan it using Snyk CLI's 'iac test' command. The first command uses Kustomize to build the manifest, and the second command scans the resulting file for potential security issues.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/kustomize-files.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkustomize build > kubernetes.yaml\nsnyk iac test kubernetes.yaml\n```\n\n----------------------------------------\n\nTITLE: Testing CloudFormation Files with Snyk CLI\nDESCRIPTION: This command is used to test CloudFormation files for security issues using Snyk Infrastructure as Code CLI. It can be used with both YAML and JSON formatted files.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/cloudformation-files.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test\n```\n\n----------------------------------------\n\nTITLE: Exporting Snyk API Token for Multiple Commands\nDESCRIPTION: Export the Snyk API token as an environment variable for use in multiple subsequent commands.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/authenticate-to-use-the-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport SNYK_TOKEN=<SNYK_API_TOKEN>\\nsnyk test\n```\n\n----------------------------------------\n\nTITLE: Using severity-threshold with Snyk test command in CLI\nDESCRIPTION: This command runs a Snyk test with a medium severity threshold, meaning only vulnerabilities of medium, high, or critical severity will be reported in the results.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/set-severity-thresholds-for-cli-tests.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk test --severity-threshold=medium\n```\n\n----------------------------------------\n\nTITLE: Snyk Python SARIF Export and GitHub Code Scanning Upload\nDESCRIPTION: GitHub Actions workflow that performs vulnerability scanning, exports results to SARIF format, and uploads them to GitHub Code Scanning. Uses continue-on-error to ensure SARIF upload occurs even if vulnerabilities are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-python-3.8-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Python-3.8 using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/python-3.8@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Setting Up Snyk with Custom Development Environment\nDESCRIPTION: This YAML snippet shows how to configure a Snyk GitHub Action while using custom development tools already installed in your environment. It merely installs the Snyk CLI using 'snyk/actions/setup' and can include other setup actions such as setting up a specific Go version using 'actions/setup-go'. Ensure 'SNYK_TOKEN' is set for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/README.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: Snyk example\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - uses: snyk/actions/setup@master\n      - uses: actions/setup-go@v1\n        with:\n          go-version: '1.19'\n      - name: Snyk test\n        run: snyk test\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Testing Serverless Files with Snyk IaC\nDESCRIPTION: Basic command to scan Serverless configuration files for security vulnerabilities using Snyk Infrastructure as Code.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/serverless-files.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Open Source scan with snyk-to-html conversion\nDESCRIPTION: Command to run a Snyk Open Source scan, pipe the JSON output to snyk-to-html, and generate an HTML report called results-opensource.html.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-to-html.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --json | snyk-to-html -o results-opensource.html\n```\n\n----------------------------------------\n\nTITLE: Creating Snyk App in Normal Mode using CLI\nDESCRIPTION: This snippet demonstrates how to create a Snyk App using the Snyk CLI in normal mode with required parameters like organization ID, app name, redirect URIs, and permission scopes. It requires the '--experimental' flag to access 'snyk apps' subcommands.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/create-a-snyk-app-using-the-snyk-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\nsnyk apps create --experimental --org=48ebb069-472f-40f4-b5bf-d2d103bc02d4 --name='My Awesome App' --redirect-uris=https://example1.com,https://example2.com --scopes=apps:beta\n```\n\n----------------------------------------\n\nTITLE: Updating Express Middleware for Passport Authentication in TypeScript\nDESCRIPTION: This snippet shows how to update the Express app to include Passport middleware. It sets up JSON parsing, URL encoding, session handling, and initializes Passport with the Snyk OAuth2 strategy.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/app.ts\n\n...\n\nimport passport from \"passport\";\nimport { getOAuth2 } from \"./util/OAuth2Strategy\";\n\n...\n\nconstructor(controllers: Controller[], port: number) {\n  ...\n  this.initDatabaseFile();\n  this.initGlobalMiddlewares();\n  this.initRoutes(controllers);\n  ...\n}\n\n...\n\nprivate setupPassport() {\n  passport.use(getOAuth2());\n  this.app.use(passport.initialize());\n  this.app.use(passport.session());\n  passport.serializeUser((user: Express.User, done) => {\n    done(null, user);\n  });\n  passport.deserializeUser((user: Express.User, done) => {\n    done(null, user);\n  });\n}\n\nprivate initGlobalMiddlewares() {\n  this.app.use(express.json());\n  this.app.use(express.urlencoded({ extended: true }));\n  this.app.use(\n    expressSession({\n      secret: uuid4(),\n      resave: false,\n      saveUninitialized: true,\n    })\n  );\n  this.setupPassport();\n}\n\n...\n```\n\n----------------------------------------\n\nTITLE: Using snyk-delta inline with setPassIfNoBaseline flag\nDESCRIPTION: This command pipes the JSON output of `snyk test --json --print-deps` to `snyk-delta`, specifying a baseline organization and project, and setting the `setPassIfNoBaseline` flag to true. This prevents `snyk-prevent_commit_status` from failing if the project is not monitored.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-delta.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk test --json --print-deps | snyk-delta --baselineOrg xxx --baselineProject xxx --setPassIfNoBaseline true\"\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Runtime Sensor Using Helm\nDESCRIPTION: Complete Helm installation command for deploying the Snyk Runtime Sensor as a Kubernetes DaemonSet with optional configuration for region, cluster name, and group ID.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install my-runtime-sensor \\\n--set workloadType=daemonset \\ # Can be ommited, as 'daemonset' is the default\n--set secretName=<<YOUR_SECRET_NAME>> \\\n--set clusterName=<<CLUSTER_NAME>> \\\n--set snykGroupId=<<YOUR_GROUP_ID>> \\\n--set snykAPIBaseURL=api.<<REGION>>.snyk.io:443 \\ # Optional\n-n snyk-runtime-sensor \\\nruntime-sensor/runtime-sensor\n```\n\n----------------------------------------\n\nTITLE: Verifying Broker Container Image Signature with Cosign\nDESCRIPTION: Command to verify a signed Broker container image using Cosign verify command with a public key. This verification process validates cosign claims, checks transparency log entries, and verifies signatures against the specified public key.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/verifying-broker-image-signatures.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cosign verify --key cosign.pub snyk/broker:4.169.1-github-com\n\nVerification for index.docker.io/snyk/broker:4.169.1-github-com --\nThe following checks were performed on each of these signatures:\n  - The cosign claims were validated\n  - Existence of the claims in the transparency log was verified offline\n  - The signatures were verified against the specified public key\n\n[{\"critical\":{\"identity\":{\"docker-reference\":\"index.docker.io/snyk/broker\"},\"image\":{\"docker-manifest-digest\":\"sha256:a2ff856b180a532c3e31a90b9788cad567fa05d78c84bccc637de54c6f46ebf2\"},\"type\":\"cosign container image signature\"},\"optional\":{\"Bundle\":{\"SignedEntryTimestamp\":\"MEUCIEOmElvKK0eC/hvpM9SE66RAekcV6DpF6NSO4Gz5aftrAiEAlQY8lKe1RUqYtCK1WRwWhWT/f/PvyBTJC8qBjgU20kU=\",\"Payload\":{\"body\":\"eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJraW5kIjoiaGFzaGVkcmVrb3JkIiwic3BlYyI6eyJkYXRhIjp7Imhhc2giOnsiYWxnb3JpdGhtIjoic2hhMjU2IiwidmFsdWUiOiJjOTE2NDQ1N2YxMDA0NTQxNWNlMjBlN2I3YjNmYjg4YjZmMmNhNzI4MDNkODY4NTk0ZDhlY2UzMGJkYTFiZjQ4In19LCJzaWduYXR1cmUiOnsiY29udGVudCI6Ik1FWUNJUUNRQVp6VVdqbkNFai9GZkpxTGU4YVdoYXhacWJzZnZTc21JNXRiRzZuRmdBSWhBTFgyMWVLRHl6OXNqWHQrVStVZUZNTUFyN1oyV09Gd0k1b1oxclc0dlJBUCIsInB1YmxpY0tleSI6eyJjb250ZW50IjoiTFMwdExTMUNSVWRKVGlCUVZVSk1TVU1nUzBWWkxTMHRMUzBLVFVacmQwVjNXVWhMYjFwSmVtb3dRMEZSV1VsTGIxcEplbW93UkVGUlkwUlJaMEZGWkNzeWJVVlhlVVJyT0VOdGJUQkRSREZhT0dwamMxaEhZVkV5YVFwelREaHdlRWh5ZDI5SlNEUkVlRzFrZVVveWJucDNWMkY0V1daelpscE5OazV2UTFKV2MyZFpRVlpsTlVkQ2FFWmljalpvZW1OcU5XZDNQVDBLTFMwdExTMUZUa1FnVUZWQ1RFbERJRXRGV1MwdExTMHRDZz09In19fX0=\",\"integratedTime\":1698788303,\"logIndex\":46732614,\"logID\":\"c0d23d6ad406973f9559f3ba2d1ca01f84147d8ffc5b8445c224f98b9591801d\"}},\"tag\":\"4.169.1-github-com\"}}]\n```\n\n----------------------------------------\n\nTITLE: Scanning for Log4Shell Vulnerabilities using Snyk CLI\nDESCRIPTION: The command `snyk log4shell` allows users to identify traces of the Log4J library impacted by the Log4Shell vulnerability CVE-2021-44228. It scans projects for these vulnerabilities even when Log4J is not declared in manifest files like pom.xml or build.gradle. Dependencies include the Snyk CLI installation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/log4shell.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n`snyk log4shell`\n```\n\n----------------------------------------\n\nTITLE: Fetching Commits API Endpoint for GitHub Enterprise\nDESCRIPTION: API endpoint used to retrieve commits for the fetched or provided repositories list in GitHub Enterprise.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/github-enterprise/github-enterprise-flow-and-tech.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* To get the commits for the fetched/provided repo/s list: `api/v3/repos/{Org}/{Repo}/commits`\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Test with Severity Threshold\nDESCRIPTION: This command runs a Snyk test and reports only vulnerabilities of high severity or higher.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/failing-of-builds-in-snyk-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Authenticating Snyk CLI with API Token Value\nDESCRIPTION: This command authenticates the Snyk CLI with an API token passed as an argument. Ensure to replace `<API_TOKEN>` with the actual token value.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/auth.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n`snyk auth [<API_TOKEN>] [<OPTIONS>]`\n```\n\n----------------------------------------\n\nTITLE: Running Snyk test with debug option\nDESCRIPTION: This snippet shows how to run the Snyk test command with the `-d` option to enable debug logging, which can be useful for troubleshooting issues in CI/CD pipelines. The debug logs can provide more detailed information about the scan process.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/ci-cd-troubleshooting-and-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk test -d\"\n```\n\n----------------------------------------\n\nTITLE: Executing jira-tickets-for-new-vulns Tool with Extended Options (Shell)\nDESCRIPTION: This snippet shows the full range of command-line options available for the tool, including filtering by severity, issue type, and configuring Jira ticket details.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-jira-tickets-for-new-vulns.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./snyk-jira-sync-<yourplatform> \n    --orgID=<SNYK_ORG_ID>                                                // Can find it under settings\n    --projectID=<SNYK_PROJECT_ID>                                        // Optional. Syncs all projects in Organization if not provided.\n                                                                        // Project ID can be found under project->settings\n    --api=<API endpoint>                                                 // Optional. Set to https://<instance>/api for private instances\n    --token=<API Token>                                                  // Snyk API Token. Service accounts work.\n    --jiraProjectID=<12345>                                              // Jira project ID the tickets will be opened against\n    --jiraProjectKey=<KEY>                                               // Jira project Key the tickets will be opened against\n    --jiraTicketType=<Task|Bug|....>                                     // Optional. Type of ticket to open. Defaults to Bug. Please see the 'Notes' section below.\n    --severity=<critical|high|medium|low>                                // Optional. Severity threshold to open tickets for. Defaults to low.\n    --maturityFilter=[mature,proof-of-concept,no-known-exploit,no-data]  // Optional. include only maturity level(s). Separated by commas\n    --type=<all|vuln|license>                                            // Optional. Issue type to open tickets for. Defaults to all.\n    --assigneeId=<123abc456def789>                                       // Optional.  Jira ID of user to assign tickets to. Note: Do not use assigneeName and assigneeId at the same time\n    --assigneeName=<AccountName>                                         // Optional.  Jira Name of user to assign tickets to. Note: Do not use assigneeName and assigneeId at the same time\n    --priorityIsSeverity                                                 // Optional. Set the ticket priority to be based on severity (defaults: Low|Medium|High|Critical=>Low|Medium|High|Highest)\n    --labels=<IssueLabel1>,IssueLabel2                                   // Optional. Set JIRA ticket labels\n    --priorityScoreThreshold=[0-1000]                                    // Optional. Your min priority score threshold\n    --dryRun=<true|false>                                                // Optional. result can be found in a json file were the tool is run\n    --debug=<true|false>                                                 // Optional. enable debug mode\n    --ifUpgradeAvailableOnly=<true|false>                                // Optional. create ticket only for upgradable issues\n    --configFile                                                         // Path the jira.yaml if not root \n```\n\n----------------------------------------\n\nTITLE: Filtering by GitLab Groups with Snyk CLI\nDESCRIPTION: Executes the snyk-scm-contributors-count command to retrieve commits for specified GitLab groups by providing a token and the group names. This is useful for narrowed data fetches in large GitLab environments.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/gitlab-and-gitlab-server/gitlab-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n\"snyk-scm-contributors-count gitlab --token TOKEN --groups GROUP1,GROUP2\\n\"\n```\n\n----------------------------------------\n\nTITLE: Aggregate Multiple Terraform States\nDESCRIPTION: This command allows for the aggregation of multiple Terraform state files specified as inputs to the Snyk CLI command. This is useful when managing multiple resources across different states.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/iac-describe.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"$ snyk iac describe --from=\\\"tfstate://terraform_S3.tfstate,tfstate://terraform_VPC.tfstate\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Issue Aging by Organization\nDESCRIPTION: SQL query that calculates the average aging (in days) of critical issues per Snyk organization. Considers only open critical issues from monitored projects and accounts for issue reintroduction dates.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/reporting/reporting-and-bi-integrations-snowflake-data-share/build-your-first-dashboard.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT o.DISPLAY_NAME AS organization_display_name,\n    ROUND(AVG(\n    CASE\n        WHEN LAST_INTRODUCED IS NULL THEN DATEDIFF('DAY', TO_DATE(FIRST_INTRODUCED), CURRENT_DATE)\n        WHEN TO_DATE(FIRST_INTRODUCED) <= TO_DATE(LAST_INTRODUCED) THEN DATEDIFF('DAY', TO_DATE(LAST_INTRODUCED), CURRENT_DATE)\n    END),0) AS open_issues_aging\nFROM SNYK.SNYK.ISSUES__V_1_0 i\n     INNER JOIN SNYK.SNYK.PROJECTS__V_1_0 p ON i.PROJECT_PUBLIC_ID = p.PUBLIC_ID\n     INNER JOIN SNYK.SNYK.ORGS__V_1_0 o ON i.ORG_PUBLIC_ID = o.PUBLIC_ID\nWHERE p.IS_MONITORED = TRUE\n     AND i.DELETED_AT IS NULL\n     AND ISSUE_STATUS = 'Open'\n     AND ISSUE_SEVERITY IN ('Critical')\nGROUP BY o.DISPLAY_NAME\nORDER BY open_issues_aging DESC;\n```\n\n----------------------------------------\n\nTITLE: Specifying Terraform Lock File\nDESCRIPTION: This command specifies a custom path to the Terraform lock file (`.terraform.lock.hcl`). The `--tf-lockfile` option allows users to define the location of the lock file if it is not in the default location.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/iac-describe-command-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac describe --to=\"aws+tf\" --tf-lockfile=\"/path/to/.terraform.lock.hcl\"\n```\n\n----------------------------------------\n\nTITLE: Testing Maven Projects with Snyk CLI\nDESCRIPTION: Commands for testing Maven projects using Snyk CLI, including options for aggregate and non-aggregate projects\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --maven-aggregate-project\n```\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --all-projects\n```\n\n----------------------------------------\n\nTITLE: Snyk CLI Authentication Command\nDESCRIPTION: Command used to authenticate Snyk CLI with a Snyk account, providing access to scanning and monitoring features\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/cli-commands-and-options-summary.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsnyk auth\n```\n\n----------------------------------------\n\nTITLE: Installing snyk-to-html with npm globally\nDESCRIPTION: Command to install the snyk-to-html tool globally using npm. This requires appropriate permissions on your machine.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-to-html.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install snyk-to-html -g\n```\n\n----------------------------------------\n\nTITLE: Validating Webhook Signatures with Node.js\nDESCRIPTION: A Node.js function that validates incoming webhook requests from Snyk by computing an HMAC SHA-256 signature and comparing it with the X-Hub-Signature header. The function takes the request object and secret key as parameters and returns a boolean indicating whether the signature is valid.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/how-to-use-snyk-webhooks-apis/validation-and-versioning-of-payloads.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as crypto from 'crypto';\n\nfunction verifySignature(request, secret) {\n  const hmac = crypto.createHmac('sha256', secret);\n  const buffer = JSON.stringify(request.body);\n  hmac.update(buffer, 'utf8');\n\n  const signature = `sha256=${hmac.digest('hex')}`;\n\n  return signature === request.headers['x-hub-signature'];\n}\n```\n\n----------------------------------------\n\nTITLE: Print JSON Results with Snyk CLI (Shell)\nDESCRIPTION: By adding the `--json` option, users can output the results of their Snyk container tests in a JSON format, allowing for easier programmatic consumption and analysis.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/container-monitor.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n`$ snyk container test --json`\n```\n\n----------------------------------------\n\nTITLE: Snyk CLI Open Source Dependency Testing Command\nDESCRIPTION: Command to test all projects in a repository for open source vulnerabilities using Snyk CLI with organization specification\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/implement-snyk/team-implementation-guide/phase-3-gain-visibility/import-projects.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --all-projects --org=[org-id]\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Broker for Bitbucket Server with Bearer Auth (PAT)\nDESCRIPTION: Helm command to install Snyk Broker for Bitbucket Server using Bearer Authentication with a Personal Access Token (PAT). This command sets various environment variables including the broker token, Bitbucket PAT, URLs, and enables Snyk Essentials.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/bitbucket-server-data-center-prerequisites-and-steps-to-install-and-configure-broker/bitbucket-server-data-center-install-and-configure-using-helm.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install snyk-broker-chart snyk-broker/snyk-broker \\\n             --set scmType=bitbucket-server-bearer-auth \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set bitbucketPat=<ENTER_PAT> \\\n             --set bitbucket=<ENTER_BITBUCKET_URL> \\\n             --set bitbucketApi=<ENTER_BITBUCKET_API_URL> \\\n             --set brokerClientUrl=<ENTER_BROKER_CLIENT_URL>:<ENTER_BROKER_CLIENT_PORT> \\\n             --set enableEssentials=true \\\n             -n snyk-broker --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Setting Snyk API Token for Single Command\nDESCRIPTION: Execute a Snyk test command with API token authentication using environment variable for a single command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/authenticate-to-use-the-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSNYK_TOKEN=<SNYK_API_TOKEN> snyk test\n```\n\n----------------------------------------\n\nTITLE: Snyk Container Test with JSON Output\nDESCRIPTION: Runs a Snyk container test and outputs the results in JSON format to the console. The `--json` option ensures that the output is structured as a JSON data structure.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/container-test.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk container test --json\n```\n\n----------------------------------------\n\nTITLE: Snyk IaC Describe Example\nDESCRIPTION: This snippet demonstrates a specific usage of the `snyk iac describe` command with the `--only-unmanaged` option. This command detects infrastructure drift and unmanaged cloud resources, filtering the results to show only resources not managed by IaC.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/iac.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n`snyk iac describe --only-unmanaged`\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Snyk Monitor\nDESCRIPTION: This command creates a Kubernetes secret named 'snyk-monitor' with the dockercfg.json file, integration ID, and service account API token for Snyk monitoring.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/authenticate-to-private-container-registries.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic snyk-monitor -n snyk-monitor \\ \n        --from-file=./dockercfg.json \\\n        --from-literal=integrationId=abcd1234-abcd-1234-abcd-1234abcd1234 \\\n        --from-literal=serviceAccountApiToken=aabb1212-abab-1212-dcba-4321abcd4321\n```\n\n----------------------------------------\n\nTITLE: Creating Axios Instance for Snyk API Calls in TypeScript\nDESCRIPTION: This snippet creates a reusable Axios instance configured with the necessary headers for making API requests to Snyk. The instance is created based on the API version chosen.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/util/APIHelpers.ts\n\nimport qs from \"qs\";\nimport axios, { AxiosInstance } from \"axios\";\nimport { API_BASE, CLIENT_ID, CLIENT_SECRET, TOKEN_URL } from \"../app\";\nimport { AuthData } from \"../interfaces/DB\";\n\nexport function callSnykApi(tokenType: string, token: string, version: APIVersion): AxiosInstance {\n  const contentType = version === APIVersion.V1 ? \"application/json\": \"application/vnd.api+json\";\n\n  const axiosInstance = axios.create({\n    baseURL: `${API_BASE}/${version}`,\n    headers: {\n      \"Content-Type\": contentType,\n      Authorization: `${tokenType} ${token}`,\n    },\n  });\n\n  return axiosInstance;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for GitLab and Snyk Authentication\nDESCRIPTION: Commands to export the GitLab and Snyk authentication tokens as environment variables, which are required for all import operations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-gitlab-organizations-and-repos-in-snyk.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GITLAB_TOKEN=***\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport SNYK_TOKEN=***\n```\n\n----------------------------------------\n\nTITLE: Snyk CLI Open Source Test Command\nDESCRIPTION: This command uses the Snyk CLI to test all projects for open source vulnerabilities. It specifies the organization ID using the `--org` flag and the `--all-projects` flag to scan all projects.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/implement-snyk/enterprise-implementation-guide/phase-3-gain-visibility/import-projects.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk test --all-projects --org=[org-id]\"\n```\n\n----------------------------------------\n\nTITLE: Package Manifest File for Swift Package Manager\nDESCRIPTION: The `package.swift` file is the manifest file for Swift Package Manager. It defines the package's dependencies, products, and targets. Snyk Open Source supports `package.swift` to identify and analyze dependencies.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/swift-and-objective-c/README.md#2025-04-21_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n\"package.swift\"\n```\n\n----------------------------------------\n\nTITLE: Update Snyk Group Settings via API\nDESCRIPTION: This shell script demonstrates how to update the Infrastructure as Code settings for a Snyk Group using the Snyk API. It uses `curl` to send a PATCH request to the API endpoint, specifying the OCI registry URL and tag for the custom rules bundle. The script requires a Snyk API token and the Group ID to be configured as secrets.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/iac-custom-rules-within-a-pipeline.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"      - name: Update Snyk\\n        run: |\\n          curl --location --request PATCH 'https://api.snyk.io/rest/groups/<group id>/settings/iac/?version=2021-11-03~beta' \\\\\\n          --header 'Content-Type: application/vnd.api+json' \\\\\\n          --header 'Authorization: token ${{ secrets.SNYK_TOKEN }}' \\\\\\n          --data-raw '{ \\n            \"data\": {\\n                  \"type\": \"iac_settings\",\\n                  \"attributes\": {\\n                    \"custom_rules\": {\\n                      \"oci_registry_url\": \"registry-1.${{ secrets.OCI_REGISTRY_NAME }}\",\\n                      \"oci_registry_tag\": \"v1\",\\n                      \"is_enabled\": true\\n                    }\\n                }\\n            }\\n          }'\\n\"\n```\n\n----------------------------------------\n\nTITLE: Constructing Authorization URL for Snyk Apps\nDESCRIPTION: This code snippet shows the format for constructing a URL to authorize users through the Snyk Apps system. It includes necessary query parameters such as 'response_type', 'client_id', 'redirect_uri', 'state', 'code_challenge', and 'code_challenge_method'. The snippet doesn't contain actual executable code but represents a template for URL construction in the OAuth2 authorization flow for Snyk Apps.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/set-up-a-snyk-app-using-the-oauth2-api/set-up-to-authorize-users.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://app.snyk.io/oauth2/authorize?response_type=code&client_id={clientId}&redirect_uri={redirectURI}&state={state}&code_challenge={codeChallenge}&code_challenge_method=S256\n```\n\n----------------------------------------\n\nTITLE: Snyk CLI Command Reference\nDESCRIPTION: CLI commands affected by Organization policies, specifically snyk test and snyk monitor commands.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/assign-a-policy-to-an-organization.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsnyk test\nsnyk monitor\n```\n\n----------------------------------------\n\nTITLE: Scanning Terraform Plan JSON Output with Snyk IaC CLI\nDESCRIPTION: Command to scan Terraform plan JSON output using Snyk IaC CLI. By default, it scans only the changes that would be made to the infrastructure.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/terraform-files.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test tf-plan.json\n```\n\n----------------------------------------\n\nTITLE: Scanning AWS in a Terraform Context\nDESCRIPTION: This command explicitly specifies that the scan should be performed in an AWS context within a Terraform configuration. The `--to` option is used to define the cloud provider and IaC type.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/iac-describe-command-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac describe --to=\"aws+tf\"\n```\n\n----------------------------------------\n\nTITLE: Complex Tag Rules for User/Service in AWS Redshift Clusters - Rego\nDESCRIPTION: This snippet checks tag requirements based on the type of resource (user or service) for AWS Redshift clusters. It uses conditionals to ensure mutual exclusivity between the user and service checks, denying resources lacking the necessary tags.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/examples-of-iac-custom-rules.md#2025-04-21_snippet_4\n\nLANGUAGE: rego\nCODE:\n```\npackage rules\n\ncheckTags(resource){\n    resource.tags.type == \"user\"\n    not resource.tags.email\n}\n\ncheckTags(resource){\n    resource.tags.type == \"service\"\n    not resource.tags.serviceDescription\n}\n\ncheckTags(resource){\n    count(resource.tags) == 0\n}\n\nden[y]\n{\n    resource := input.resource.aws_redshift_cluster[name]\n    checkTags(resource)   \n\n    msg := {\n        \"publicId\": \"CUSTOM-RULE-5\",\n        \"title\": \"Complex rule\",\n        \"severity\": \"medium\",\n        \"msg\": sprintf(\"input.resource.aws_redshift_cluster[%v].tags\", [name]),\n        \"issue\": \"\",\n        \"impact\": \"\",\n        \"remediation\": \"\",\n        \"references\": [],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Broker for Existing Integration\nDESCRIPTION: Curl command to enable broker for an existing integration using Snyk's API with GitHub integration type\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/api-endpoints-index-and-tips/examples-for-the-update-existing-integration-endpoint.md#2025-04-21_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --include \\\n     --request PUT \\\n     --header \"Content-Type: application/json; charset=utf-8\" \\\n     --header \"Authorization: token API_KEY\" \\\n     --data-binary \"{\n    \\\"type\\\": \\\"github\\\",\n    \\\"broker\\\": { \\\"enabled\\\": true }\n}\" \\\n'https://api.snyk.io/v1/org/{orgId}/integrations/{integrationId}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"9a3e5d90-b782-468a-a042-9a2073736f0b\",\n  \"brokerToken\": \"4a18d42f-0706-4ad0-b127-24078731fbed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unmanaged C/C++ Scanning CLI Option\nDESCRIPTION: Specific CLI option for performing vulnerability scanning on unmanaged C/C++ projects using the Snyk CLI. This option is exclusively for unmanaged C/C++ scanning and should not be used with other languages.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/jetbrains-plugin/configuration-for-the-snyk-jetbrains-plugin-and-ide-proxy.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--unmanaged\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk Pipe in Bitbucket Pipeline YAML\nDESCRIPTION: This snippet demonstrates how to insert the Snyk pipe command into a Bitbucket pipeline YAML configuration. It highlights the structuring of build commands and the placement of the Snyk pipe in relation to other deployment steps. It requires variables such as SNYK_TOKEN and LANGUAGE to be configured properly before execution.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/bitbucket-pipelines-integration-using-a-snyk-pipe/how-to-add-a-snyk-pipe.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - step:\n      name: 'Install dependencies'\n      script:\n        - npm install\n        - npm run build\n  - step:\n      name: 'Test'\n      script:\n        - npm test\n  - step:\n      name: 'Snyk scan'\n      script:\n        - pipe: atlassian/snyk-cli-pipe:latest\n          variables:\n            SNYK_TOKEN: <your_snyk_token>\n            LANGUAGE: 'npm'\n            DONT_BREAK_BUILD: 'true'\n            SEVERITY_THRESHOLD: 'high'\n```\n\n----------------------------------------\n\nTITLE: Basic Snyk Gradle (jdk17) Action Workflow in YAML\nDESCRIPTION: This snippet demonstrates a basic GitHub Actions workflow for checking vulnerabilities in a Gradle (jdk17) project using Snyk. It runs on push events and uses the Snyk token for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-gradle-jdk17-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Gradle (jdk17) using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/gradle-jdk17@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Policy Command in Shell\nDESCRIPTION: The `snyk policy` command is used to display the contents of the `.snyk` policy file for a given package. Users can manually specify the path to a policy file using `<PATH_TO_POLICY_FILE>`. The command also supports additional options, such as `-d` for debug logs. There are no prerequisite installations, but access to the Snyk CLI is required.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/policy.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsnyk policy [<PATH_TO_POLICY_FILE>] [<OPTIONS>]\n```\n\n----------------------------------------\n\nTITLE: Example of snyk ignore Command for a Specific Vulnerability\nDESCRIPTION: Practical example of using the snyk ignore command to generate a rule that ignores the BSON vulnerability for all paths to that library on disk, with an expiry date of April 1, 2018.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/the-.snyk-file.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsnyk ignore --id='SNYK-JS-BSON-561052' --expiry='2018-04-01' --reason='testing'\n```\n\n----------------------------------------\n\nTITLE: Snyk Python SARIF Upload Workflow\nDESCRIPTION: GitHub Actions workflow that runs Snyk security scanning and uploads results to GitHub Code Scanning in SARIF format. Uses continue-on-error to ensure SARIF upload occurs even if vulnerabilities are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-python-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Python using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/python@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Testing Dev Dependencies with Snyk CLI\nDESCRIPTION: This command shows how to use the --dev option to include development dependencies in the Snyk scan, which are not scanned by default.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/use-options-to-customize-the-snyk-test-command.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk test --dev\n```\n\n----------------------------------------\n\nTITLE: Testing Kubernetes Files with Snyk CLI\nDESCRIPTION: This command uses Snyk Infrastructure as Code to test Kubernetes configuration files for issues. It can be used with a single file or multiple files.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/kubernetes-files.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test\n```\n\n----------------------------------------\n\nTITLE: Docker run Snyk CLI with Gradle\nDESCRIPTION: This snippet demonstrates how to run the Snyk CLI from a Docker image to scan a Gradle project.  It mounts the project directory and Gradle cache, sets the Snyk token as an environment variable, and then runs the `snyk test` command against the project, specifying the organization name.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/install-or-update-the-snyk-cli/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it \\\n    -e \"SNYK_TOKEN=<TOKEN>\" \\\n    -v \"<PROJECT_DIRECTORY>:/project\" \\\n    -v \"/home/user/.gradle:/home/node/.gradle\" \\\n  snyk/snyk:gradle:6.4 test --org=my-org-name\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request to Snyk API using curl\nDESCRIPTION: This snippet demonstrates how to make a GET request to the Snyk REST API to list projects for a specific organization. It uses curl and requires the organization ID and API token for authentication. The expected output is a JSON response containing project details.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/rest-api/getting-started-with-the-rest-api.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request GET \\\n--url \"https://api.snyk.io/rest/orgs/{orgId}/projects?version=2024-10-15\" \\\n--header \"Content-Type: application/vnd.api+json\" \\\n--header \"Authorization: token API_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Complete .snyk File Syntax for Excluding Files and Directories\nDESCRIPTION: Comprehensive YAML syntax showing various patterns for excluding files and directories in the .snyk file, including single files, directories, file extensions, and pattern matching examples.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/import-project-repository/exclude-directories-and-files-from-project-import.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Snyk (https://snyk.io) policy file\n---\nexclude:\n    global:\n        # Exclude a single file. For example, - test.spec.js\n        - file_name.ext\n        # Exclude a single directory. For example, - src/lib\n        - source/directory_name\n        # Exclude any file with a specific extension in the specific directory. For example, - tests/.js\n        - directory_name/.ext\n        # Exclude files with a specific ending in any directory. For example, - \"*.spec.js\"\n        - \"*.ending.ext\"\n        # Exclude files in directories that have the same name with a different ending, like \"test\" and \"tests\". The last character before the question mark is optional. For example, - tests?/\n        - directory_name?/\n        # Exclude all files and directories located within any specified folder within your Project. For example, directory_name/** matches and excludes all contents under any directory named directory_name. It is not constrained to the root level or the location of the .snyk file.\n        - directory_name/**\n```\n\n----------------------------------------\n\nTITLE: Scanning Node.js Application with Snyk in Bitbucket Pipelines 1.0.0\nDESCRIPTION: This YAML snippet shows how to configure a Bitbucket Pipeline to use Snyk for scanning Node.js applications. It uses the snyk/snyk-scan:1.0.0 Docker image, installs dependencies, runs tests, and scans for vulnerabilities. It requires an environment variable SNYK_TOKEN for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/bitbucket-pipelines-integration-using-a-snyk-pipe/migrating-to-bitbucket-pipelines-v1.0.0.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nscript:\n  - npm install\n\n  - npm test\n\n  - pipe: snyk/snyk-scan:1.0.0\n    variables:\n      SNYK_TOKEN: $SNYK_TOKEN\n      LANGUAGE: \"node\" # language tag is \"node\"\n\n  - npm publish\n```\n\n----------------------------------------\n\nTITLE: Monitoring Container Images with Snyk CLI\nDESCRIPTION: The Snyk CLI offers a highly customizable way to monitor container images. You can use `snyk container monitor` as part of your continuous deployment pipeline to capture a snapshot of the container image as it's being deployed, ensuring comprehensive vulnerability detection.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/container-registry-integrations/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"snyk container monitor\"\n```\n\n----------------------------------------\n\nTITLE: Organization-Specific Testing\nDESCRIPTION: Commands to target specific Snyk organizations for testing and configuration\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test  --org=infrastructure\nsnyk iac test main.tf --org=infrastructure\nsnyk config set org=infrastructure\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Node LTS Docker Image for Snyk CLI\nDESCRIPTION: Dockerfile configuration to create a custom Alpine-based image with Node LTS and Snyk CLI installed. The image includes curl for downloading Snyk CLI and performs SHA256 verification for security.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/user-defined-custom-images-for-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nFROM alpine:3.18\n\n# Install curl\nRUN apk add --no-cache curl\n\n# Install Node LTS\nRUN apk add --no-cache nodejs\n\n# Install & setup Snyk CLI\nRUN curl -o ./snyk-alpine https://downloads.snyk.io/cli/stable/snyk-alpine && \\\n    curl -o ./snyk-alpine.sha256 https://downloads.snyk.io/cli/stable/snyk-alpine.sha256 && \\\n    sha256sum -c snyk-alpine.sha256 && \\\n    mv snyk-alpine /usr/local/bin/snyk && \\\n    chmod +x /usr/local/bin/snyk\n```\n\n----------------------------------------\n\nTITLE: Get Group Service Account Details - GET Request\nDESCRIPTION: API endpoint to retrieve details of a specific service account in a Snyk Group.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/service-accounts/manage-service-accounts-using-the-snyk-api.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.snyk.io/rest/groups/{groupId}/service_accounts/{serviceAccountId}\n```\n\n----------------------------------------\n\nTITLE: Executing Snyk CLI for All GitLab Groups\nDESCRIPTION: Runs the snyk-scm-contributors-count command using a GitLab token and optional custom URL to fetch commit data across all groups in GitLab. The command relies on a valid GitLab token which must have read access.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/gitlab-and-gitlab-server/gitlab-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n\"snyk-scm-contributors-count gitlab --token TOKEN --url URL\\n\"\n```\n\n----------------------------------------\n\nTITLE: Using snyk-delta inline with specific baseline\nDESCRIPTION: This command pipes the JSON output of `snyk test --json --print-deps` to `snyk-delta` while specifying the baseline organization and project. This compares the current scan against a specific snapshot on the Snyk platform using the provided organization and project UUIDs.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-delta.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk test --json --print-deps | snyk-delta --baselineOrg xxx --baselineProject xxx\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Command for Dependency Scanning\nDESCRIPTION: This command allows specifying which Python interpreter to use when scanning Python projects, particularly useful in environments with multiple Python installations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/monitor.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--command=<COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Snyk Container Test with Dockerfile\nDESCRIPTION: Scans a Docker image and provides more detailed advice, including base image remediation, by specifying the path to the Dockerfile. The `--file` option is used to provide the Dockerfile path.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/container-test.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--file=path/to/Dockerfile\n```\n\n----------------------------------------\n\nTITLE: JSON Output Format Testing\nDESCRIPTION: Commands to output test results in JSON format for local storage or further analysis\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test  --json\nsnyk iac test main.tf --json\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Broker for Azure Repos using Helm\nDESCRIPTION: Helm command to install Snyk Broker for Azure Repos with required configuration parameters. The command sets up the broker with essential environment variables including broker token, server URL, Azure repos credentials, and enables Snyk Essentials.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/azure-repos-prerequisites-and-steps-to-install-and-configure-broker/azure-repos-install-and-configure-and-configure-using-helm.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install snyk-broker-chart snyk-broker/snyk-broker \\\n             --set scmType=azure-repos \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set brokerServerUrl=<broker-region-url>\n             --set azureReposToken=<ENTER_REPO_TOKEN> \\\n             --set azureReposOrg=<ENTER_REPO_ORG> \\\n             --set azureReposHost=<ENTER_REPO_HOST> \\\n             --set brokerClientUrl=<ENTER_BROKER_CLIENT_URL>:<ENTER_BROKER_CLIENT_PORT> \\\n             --set enableEssentials=true \\\n             -n snyk-broker --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Identifying Exposure of Private Personal Information to Unauthorized Actors\nDESCRIPTION: This entry examines vulnerabilities involving exposure of private personal information (CWE-359) in C# and C++. Such vulnerabilities can lead to serious privacy breaches.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Defining Swift Package Manager Requirements\nDESCRIPTION: This snippet explains the necessary components that must be present for Snyk CLI to discover Swift projects, emphasizing the requirement for a 'Package.swift' file and the command used to generate the dependency graph.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/swift-and-objective-c/swift-and-objective-c-for-open-source.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<p>A <code>Package.swift</code> file must be present for the Snyk CLI to discover the Project.<br><br>Snyk uses the <code>swift package show-dependencies</code>  command to build the dependency graph.<br><br>Limitations:<br>Supports only Projects using Swift 3.0 or higher.<br><br>Swift Package Manager supports pre-processing and post-processing. For post-processing, custom commands can add extra dependencies. Detecting such dependencies is not supported.<br></p>\n```\n\n----------------------------------------\n\nTITLE: Running in Debug Mode for Verbose Output\nDESCRIPTION: Command to run the contributors count in debug mode for verbose output by prefixing the command with DEBUG=snyk*.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/azure-devops/azure-examples.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=snyk* snyk-scm-contributors-count azure-devops --token AZURE-TOKEN --org AZURE-ORG --projectKeys Key1 --repo Repo1 --exclusionFilePath PATH_TO_FILE --skipSnykMonitoredRepos --json\n```\n\n----------------------------------------\n\nTITLE: Container Image Scanning Configuration\nDESCRIPTION: Shows how to configure the Snyk Maven Plugin to scan a specific container image tag using the container-test goal\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/maven-plugin-integration-with-snyk.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <args>\n    <arg>--print-deps</arg>\n    <arg>nginx:1.9.5</arg>\n  </args>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Denylist Rules for Sensitive Information in ConfigMaps - Rego\nDESCRIPTION: This snippet defines denylist rules to prevent the use of sensitive information like passwords in Kubernetes ConfigMaps. It checks the keys in input data against a predefined list of sensitive tokens and denies those that match.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/examples-of-iac-custom-rules.md#2025-04-21_snippet_6\n\nLANGUAGE: rego\nCODE:\n```\npackage rules\n\nsensitive_denylist := [\n\t\"pass\",\n\t\"secret\",\n\t\"key\",\n\t\"token\",\n]\n\ncheck_sensitive(keys, denylist) {\n\t_ = keys[key]\n\tcontains(key, denylist[_])\n}\n\nden[msg] {\n\tinput.kind == \"ConfigMap\"\n\tinput.data = keys\n\tcheck_sensitive(keys, sensitive_denylist)\n\tmsg := {\n\t\t\"publicId\": \"CUSTOM-RULE-7\",\n\t\t\"title\": \"ConfigMap exposes sensitive data\",\n\t\t\"severity\": \"high\",\n\t\t\"msg\": \"input.data\",\n\t\t\"issue\": \"\",\n\t\t\"impact\": \"\",\n\t\t\"remediation\": \"\",\n\t\t\"references\": [],\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Vulnerabilities with Snyk Golang Action in GitHub Workflows\nDESCRIPTION: This YAML snippet demonstrates a basic GitHub Actions workflow that uses the Snyk Golang Action to check for vulnerabilities in a Golang project. It runs on push events and uses the SNYK_TOKEN secret for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-golang-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Golang using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/golang@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Uploading Snyk Scan Results to GitHub Code Scanning\nDESCRIPTION: This YAML snippet demonstrates a GitHub workflow that uses the Snyk Gradle Action to scan for vulnerabilities and upload the results to GitHub Code Scanning. It uses the --sarif-file-output option and the GitHub SARIF upload action. The continue-on-error option is used to ensure the SARIF upload occurs even if vulnerabilities are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-gradle-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Gradle using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/gradle@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Enforce Custom Rules with Snyk IaC GitHub Action\nDESCRIPTION: This GitHub Actions workflow enforces custom rules in a separate repository by using the Snyk IaC GitHub Action.  It checks Infrastructure as Code files for issues, utilizing the custom rules bundle configured in the Snyk Group settings. A `SNYK_TOKEN` is necessary for authentication, and the action will fail if any misconfigurations are detected based on the custom rules.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/iac-custom-rules-within-a-pipeline.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"name: Snyk Infrastructure as Code Custom Rules\\n\\non:\\n  push:\\n\\njobs:\\n  snyk-iac-security:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v2\\n\\n      - name: Run Snyk to check Infrastructure as Code files for issues\\n        continue-on-error: false\\n        uses: snyk/actions/iac@master\\n        env:\\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Prevention Methods for Security Scanning\nDESCRIPTION: Two primary methods for preventing new security vulnerabilities: Snyk tests on Pull Request checks and adding `snyk test` to CI/CD pipelines. Supports scanning for open source, code, infrastructure as code, and container vulnerabilities.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/implement-snyk/enterprise-implementation-guide/phase-6-rolling-out-the-prevention-stage/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Snyk tests on [Pull Request (PR) or Merge Request (MR) Checks](../../../scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/),  available for Open Source, with Snyk Code PR checks in Beta.\n* Adding `snyk test` to your CI/CD pipelines; you may have already implemented `snyk monitor` to import your Projects as part of the pipeline.\n```\n\n----------------------------------------\n\nTITLE: Passing Build Tool Options with Snyk\nDESCRIPTION: Shows how to use a double dash to pass additional options to build tools like Gradle or Maven with the Snyk CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/sbom.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n-- [<CONTEXT-SPECIFIC_OPTIONS>]\n```\n\n----------------------------------------\n\nTITLE: Using snyk monitor for unmanaged dependencies\nDESCRIPTION: Example of running the 'snyk monitor --unmanaged' command to create a snapshot of dependencies and vulnerabilities and import them into the Snyk Web UI. This allows for review of issues and inclusion in reports.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/c-c++/snyk-cli-for-open-source-c++-scans.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk monitor --unmanaged\nMonitoring /c-example (c-example)...\n\nExplore this snapshot at https://app.snyk.io/org/example-org/project/8ac0e233-d0f9-403e-b422-5970e7a37443/history/5de4616d-3967-485f-bf21-bbbe91068029\n\nNotifications about newly disclosed issues related to these dependencies will be emailed to you.\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Run Command for Standard Jira Broker Setup\nDESCRIPTION: Docker run command to set up a Broker Client for standard Jira integration. Includes configuration for essential environment variables like broker token, server URL, Jira credentials, and networking settings.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/jira-prerequisites-and-steps-to-install-and-configure-broker/setup-broker-with-jira.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker run --restart=always \\\n           -p 8000:8000 \\\n           -e BROKER_TOKEN=secret-broker-token \\\n           -e BROKER_SERVER_URL=<broker-region-url> \\\n           -e JIRA_USERNAME=username \\\n           -e JIRA_PASSWORD=password \\\n           -e JIRA_HOSTNAME=your.jira.domain.com \\\n           -e BROKER_CLIENT_URL=http://my.broker.client:8000 \\\n           -e PORT=8000 \\\n       snyk/broker:jira\n```\n\n----------------------------------------\n\nTITLE: Scanning Terraform State from a File\nDESCRIPTION: This command reads and aggregates a single Terraform state file. It utilizes `terraform state pull` to fetch the state and saves it into a file, which is then used as input for the `snyk iac describe` command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/iac-describe-command-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterraform state pull > state.tfstate\n\nsnyk iac describe --from=\"tfstate://state.tfstate\"\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Strategy for Snyk Authentication in TypeScript\nDESCRIPTION: This code snippet defines the OAuth2 strategy for Snyk authentication. It sets up the Snyk OAuth2 strategy with custom profile fetching and handles the authentication callback, including token storage and database operations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// ./util/OAuth2Strategy.ts\n\nimport type { Request } from \"express\";\nimport axios, { AxiosResponse, AxiosInstance } from \"axios\";\nimport OAuth2Strategy, { VerifyCallback } from \"passport-oauth2\";\nimport SnykOAuth2Strategy, { ProfileFunc } from \"@snyk/passport-snyk-oauth2\";\nimport { v4 as uuid4 } from \"uuid\";\nimport jwt_decode from \"jwt-decode\";\nimport { EncryptDecrypt } from \"../util/encrypt-decrypt\";\nimport { writeToDb } from \"../util/db\";\nimport { AuthData } from \"../interfaces/db\";\nimport { getAppOrgID } from \"../util/APIHelpers\";\n\n// This just wraps up the tutorial's app config to avoid writing\n// each config variable.\n// You'd likely want to parse environment variables or something.\nimport * as config from \"../app\";\n\n// Set up a new type definition for the parameters we'll be sending with our auth.\ntype Params = {\n  expires_in: number;\n  scope: string;\n  token_type: string;\n};\n\nexport function getOAuth2(): SnykOAuth2Strategy {\n  // User can pass their own implementation of fetching the profile\n  // by providing the profileFunc implementation. Snyk OAuth2 strategy\n  // will call this function to fetch the profile associated with request\n  const profileFunc: ProfileFunc = function(accessToken: string) {\n    return axios.get(\"https://api.snyk.io/v1/user/me\", {\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\",\n        Authorization: `bearer ${accessToken}`,\n      },\n    });\n  };\n\n  // Note*: the value of version being manually added\n  return new SnykOAuth2Strategy(\n    {\n      authorizationURL: `${config.APP_BASE}${config.AUTHORIZATION_URL}`,\n      tokenURL: `${config.API_BASE}${config.TOKEN_URL}`,\n      clientID: config.CLIENT_ID,\n      clientSecret: config.CLIENT_SECRET,\n      callbackURL: \"http://localhost:3000/callback\",\n      state: true,\n      pkce: true,\n      passReqToCallback: true,\n      profileFunc,\n    },\n    async function (\n      req: Request,\n      access_token: string,\n      refresh_token: string,\n      params: Params,\n      profile: AxiosResponse,\n      done: VerifyCallback\n    ) {\n      try {\n        // Notify passport that all work, like the storing\n        // of data in the DB, has been completed\n        const userId = profile.data.id;\n        const { expires_in, scope, token_type } = params;\n\n        const { orgId } = await getAppOrgID(token_type, access_token);\n        const ed = new EncryptDecrypt(config.ENCRYPTION_SECRET as string);\n\n        await writeToDb({\n          date: new Date(),\n          userId,\n          orgId,\n          access_token: ed.encryptString(access_token),\n          expires_in,\n          scope,\n          token_type,\n          refresh_token: ed.encryptString(refresh_token),\n        } as AuthData);\n      } catch (error) {\n        return done(error as Error, false);\n      }\n      return done(null, { nonce });\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Slack Message with Block Kit\nDESCRIPTION: This asynchronous function `messageSlack` formats and sends a message to a Slack channel using Slack's Block Kit. It takes vulnerability details as input, constructs a JSON payload with formatted text, sections, dividers, fields, and an action button linking back to Snyk. It utilizes `axios` to make a POST request to the Slack webhook URL with the payload and logs the response.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/how-to-use-snyk-webhooks-to-connect-snyk-to-slack-with-aws-lambda/configure-the-aws-lambda-script.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function messageSlack(message,snykProjectUrl,snykProjectName,snykIssuePackage,snykIssueUrl,snykIssueId,severity,snykIssuePriority) {\n    \n    //strings modified to avoid Axios/Slack errors \n    snykProjectUrl = snykProjectUrl.replace(/['\"]+/g, '')\n    snykProjectName = snykProjectName.replace(/['\"]+/g, '')\n    snykIssueUrl = snykIssueUrl.replace(/['\"]+/g, '')\n    snykIssueId = snykIssueId.replace(/['\"]+/g, '')\n    snykIssuePackage = snykIssuePackage.replace(/['\"]+/g, '')\n    severity = severity.replace(/['\"]+/g, '')\n    \n    //construct message\n    let payload = { \"text\": `${message}`,\n                    \"blocks\": [\n\t\t                {\n                \t\t\t\"type\": \"header\",\n                \t\t\t\"text\": {\n                \t\t\t\t\"type\": \"plain_text\",\n                \t\t\t\t\"text\": `${message}`,\n                \t\t\t}\n                \t\t},{ \n                \t\t\t\"type\": \"section\",\n                \t\t\t\"text\": {\n                \t\t\t\t\"type\": \"mrkdwn\",\n                \t\t\t\t\"text\": \"Snyk has found a new vulnerability in the project:\\n*<\"+snykProjectUrl+\"|\"+snykProjectName+\">*\"\n                \t\t\t}\n                \t\t},\n                \t\t{\n                \t\t\t\"type\": \"divider\"\n                \t\t},\n                \t\t{\n                \t\t\t\"type\": \"section\",\n                \t\t\t\"fields\": [\n                \t\t\t\t{\n                \t\t\t\t\t\"type\": \"mrkdwn\",\n                \t\t\t\t\t\"text\": \"*Package name:*\\n\"+snykIssuePackage\n                \t\t\t\t},\n                \t\t\t\t{\n                \t\t\t\t\t\"type\": \"mrkdwn\",\n                \t\t\t\t\t\"text\": \"*Vulnerability:*\\n<\"+snykIssueUrl+\"|\"+snykIssueId+\">\"\n                \t\t\t\t},\n                \t\t\t\t{\n                \t\t\t\t\t\"type\": \"mrkdwn\",\n                \t\t\t\t\t\"text\": \"*Severity:*\\n\"+severity\n                \t\t\t\t},\n                \t\t\t\t{\n                \t\t\t\t\t\"type\": \"mrkdwn\",\n                \t\t\t\t\t\"text\": \"*Priority Score:*\\n\"+snykIssuePriority\n                \t\t\t\t}\n                \t\t\t]\n                \t\t},\n                \t\t{\n                \t\t\t\"type\": \"actions\",\n                \t\t\t\"elements\": [\n                \t\t\t\t{\n                \t\t\t\t\t\"type\": \"button\",\n                \t\t\t\t\t\"text\": {\n                \t\t\t\t\t\t\"type\": \"plain_text\",\n                \t\t\t\t\t\t\"text\": \"View in Snyk\"\n                \t\t\t\t\t},\n                \t\t\t\t\t\"style\": \"primary\",\n                \t\t\t\t\t\"url\": snykProjectUrl,\n                \t\t\t\t\t\"value\": \"browseUrl\"\n                \t\t\t\t}\n                \t\t\t]\n                \t\t}\n\t               ]};\n    \n    //send message \n    const res = await axios.post(slackWebhookUrl, payload);\n    const data = res.data;\n    console.log(data);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Specific Version or Range of npm Package with Snyk CLI\nDESCRIPTION: This command syntax shows how to use Snyk CLI to test a specific version or semver range of a public npm package for known vulnerabilities before installation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/test-public-npm-packages-before-use.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test module[@semver-range]\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Environment Variables in Helm Installation\nDESCRIPTION: Example of how to pass custom environment variables when installing Snyk Broker using Helm. This includes setting BROKER_CLIENT_VALIDATION_URL and other custom variables.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/install-and-configure-broker-using-helm.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--set env[0].name=BROKER_CLIENT_VALIDATION_URL \\\n--set env[0].value=whatever_value_makes_sense\n```\n\nLANGUAGE: bash\nCODE:\n```\n--set env[1].name=MY_OTHER_ENV_VAR \\\n--set env[1].value=\"other env with spaces\" \\\n--set env[2].name=THIRD_ENV_VAR \\\n--set env[2].value=and_so_on\n```\n\n----------------------------------------\n\nTITLE: Sending API Request with curl in Shell\nDESCRIPTION: This shell script demonstrates how to create a cloud environment in Google Cloud using Snyk API with curl. The request requires an organization ID, API token, Google service account email, and project ID. It outputs a JSON response that includes the environment details.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/google-cloud-integration/google-cloud-integration-api/step-3-create-and-scan-a-cloud-environment-for-google-api.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST \\\n'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/environments?version=2022-12-21~beta' \\\n-H 'Authorization: token YOUR-API-TOKEN' \\\n-H 'Content-Type:application/vnd.api+json' -d '{\n  \"data\": {\n    \"type\": \"environments\",\n    \"attributes\": {\n      \"options\": {\n        \"identity_provider\": \"YOUR-IDENTITY-PPROVIDER-URL\"\n        \"service_account_email\": \"YOUR-SERVICE-ACCOUNT-EMAIL\",\n        \"project_id\": \"YOUR-PROJECT-ID\"\n      },\n      \"kind\": \"google\"\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Severity Threshold Filtering\nDESCRIPTION: Commands to filter test results by severity level\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test  --severity-threshold=medium\nsnyk iac test main.tf --severity-threshold=medium\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Plan JSON Output\nDESCRIPTION: Commands to generate a Terraform plan and convert it to JSON format for scanning. This process creates a complete artifact that includes all variables and modules used in the deployment.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/terraform-files.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform plan -out=tfplan.binary\nterraform show -json tfplan.binary > tf-plan.json\n```\n\n----------------------------------------\n\nTITLE: Testing Single ARM JSON File with Snyk CLI\nDESCRIPTION: Command to test a single ARM JSON configuration file for security issues using Snyk Infrastructure as Code CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/arm-files.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test deploy.json\n```\n\n----------------------------------------\n\nTITLE: Testing a Public GitHub Repository\nDESCRIPTION: Tests a public GitHub repository for vulnerabilities. This command scans the dependencies in the specified GitHub repository to identify any known security issues.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/test.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk test https://github.com/snyk-labs/nodejs-goof\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket Server Broker Docker Image\nDESCRIPTION: Dockerfile configuration for Bitbucket Server/Data Center Broker integration with environment variables for authentication and server settings.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/derived-docker-images-for-broker-client-integrations-and-container-registry-agent.md#2025-04-21_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM snyk/broker:bitbucket-server\n\nENV BROKER_TOKEN        secret-broker-token\nENV BITBUCKET_USERNAME  username\nENV BITBUCKET_PASSWORD  password\nENV BITBUCKET           your.bitbucket-server.domain.com\nENV BITBUCKET_API       your.bitbucket-server.domain.com/rest/api/1.0\nENV PORT                8000\n```\n\n----------------------------------------\n\nTITLE: GET Pull Request Template Endpoint in Swagger\nDESCRIPTION: Swagger API specification for retrieving a pull request template for a specific group. Uses the GET method on the /groups/{group_id}/settings/pull_request_template endpoint.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/pull-request-templates.md#2025-04-21_snippet_1\n\nLANGUAGE: swagger\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/groups/{group_id}/settings/pull_request_template\" method=\"get\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Using Snyk CLI with Default Filter\nDESCRIPTION: This example demonstrates how to use the snyk-filter with the default YAML filter file located at .snyk-filter/snyk.yml. It pipes the JSON output of snyk test into snyk-filter for processing.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-filter.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsnyk test --json | snyk-filter\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Rules Bundle at Group Level with Snyk API\nDESCRIPTION: JSON payload for updating IaC settings at the Group level to configure a custom rules bundle. This specifies the OCI registry URL, tag, and enables the custom rules feature.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/use-iac-custom-rules-with-cli/use-a-remote-iac-custom-rules-bundle.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"data\": {\n         \"type\": \"iac_settings\",\n         \"attributes\": {\n           \"custom_rules\": {\n             \"oci_registry_url\": \"registry-1.docker.io/group-account/group-bundle-image\",\n             \"oci_registry_tag\": \"1.3.14\",\n             \"is_enabled\": true\n           }\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting capture groups to non-capture groups in regex\nDESCRIPTION: Demonstrates how to convert regular capture groups to non-capture groups by adding ?: after the opening parenthesis. This fixes the 'Group is missing a name' error.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/use-snyk-container/use-custom-base-image-recommendations/custom-versioning-schema-for-custom-base-images.md#2025-04-21_snippet_7\n\nLANGUAGE: regex\nCODE:\n```\n(debian)|(ubuntu)\n```\n\nLANGUAGE: regex\nCODE:\n```\n(?:debian)|(?:ubuntu)\n```\n\n----------------------------------------\n\nTITLE: Scanning Workspace Projects with Snyk CLI\nDESCRIPTION: This command scans all workspace projects in the current directory and five sub-directories deep, including any other project types detected. It allows testing with unsynchronized manifest and lock files by setting strict-out-of-sync to false.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/javascript/javascript-for-open-source.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --all-projects --strict-out-of-sync=false --detection-depth=6 \n```\n\n----------------------------------------\n\nTITLE: Configuring Container Registry Authentication - Snyk\nDESCRIPTION: These snippets demonstrate how to set `SNYK_REGISTRY_USERNAME` and `SNYK_REGISTRY_PASSWORD` for authenticating against container registries during `snyk container` commands. The command line options `--username` and `--password` can override these values.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/configure-the-snyk-cli/environment-variables-for-snyk-cli.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n`SNYK_REGISTRY_USERNAME`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n`SNYK_REGISTRY_PASSWORD`\n```\n\n----------------------------------------\n\nTITLE: Using Snyk IaC Describe Command for Glob Patterns with Terraform State Files\nDESCRIPTION: Runs the Snyk IaC Describe command to automatically load and report on multiple local Terraform state files using glob patterns. This feature streamlines the drift detection process across numerous files.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/get-started-with-snyk-iac-describe-on-aws.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk iac describe --from=\"tfstate://path/to/**/*.tfstate\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nexus 3 Broker Docker Image\nDESCRIPTION: Dockerfile configuration for Nexus 3 Broker integration with environment variables for authentication and server URLs.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/derived-docker-images-for-broker-client-integrations-and-container-registry-agent.md#2025-04-21_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM snyk/broker:nexus\n\nENV BROKER_TOKEN                     secret-broker-token\nENV BASE_NEXUS_URL                   https://[<user>:<pass>@]<your.nexus.hostname>\nENV BROKER_CLIENT_VALIDATION_URL     https://<your.nexus.hostname>/service/rest/v1/status[/check]\nENV RES_BODY_URL_SUB                 https://<your.nexus.hostname>/repository\n```\n\n----------------------------------------\n\nTITLE: Skeleton of a Generated Deny Rule in Rego\nDESCRIPTION: The skeleton of a deny rule shows how to structure a Rego policy file to define a deny rule. It includes mandatory fields such as 'publicId', 'title', and 'severity', and utilizes Rego's 'sprintf' for dynamic messages. Optional fields like 'issue' and 'remediation' are included to improve scan insights.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/writing-a-rule.md#2025-04-21_snippet_1\n\nLANGUAGE: rego\nCODE:\n```\npackage rules\n\ndeny[msg] {\n\tresource := input.resource.test[name]\n\tresource.todo\n\tmsg := {\n\t\t# Mandatory fields\n\t\t\"publicId\": \"NEW-RULE\",\n\t\t\"title\": \"Default title\",\n\t\t\"severity\": \"low\",\n\t\t\"msg\": sprintf(\"input.resource.test[%s].todo\", [name]),\n\t\t# Optional fields\n\t\t\"issue\": \"\",\n\t\t\"impact\": \"\",\n\t\t\"remediation\": \"\",\n\t\t\"references\": [],\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Graph Command for Git Integration\nDESCRIPTION: Alternative command used by Snyk for analyzing Go module dependencies when full source code analysis is disabled in Git integration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/go/go-for-open-source.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo mod graph\n```\n\n----------------------------------------\n\nTITLE: Downloading Snyk Language Server via Shell Script - Bash\nDESCRIPTION: This script downloads the latest version of the Snyk Language Server automatically based on the detected operating system and architecture. It checks the OS type and architecture, retrieves the version information from a JSON endpoint, and uses wget to download the appropriate binary. This script is a helpful utility for non-managed IDEs that require regular updates.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/snyk-language-server/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n# This file allows you to download the latest language server, which is helpful for integration into non-managed Editors and IDEs.\n# This might be any editor that does not have a downloader built by Snyk and thus needs to download\n# and update the language server regularly, and this script allows this for system administrators and users.\n# Snyk recommends always using the latest version of the language server.\n\nset -e\nOS=$(uname -s | tr '[:upper:]' '[:lower:]')\nARCH=$(uname -m | tr '[:upper:]' '[:lower:]')\nif [[ $ARCH == \"x86_64\" ]]; then\n  ARCH=\"amd64\"\nfi\nif [[ $ARCH == \"aarch64\" ]]; then\n  ARCH=\"arm64\"\nfi\nPROTOCOL_VERSION=3\nVERSION=$(curl https://static.snyk.io/snyk-ls/$PROTOCOL_VERSION/metadata.json | jq .version | sed -e s/\"//g)\nwget -O /usr/local/bin/snyk-ls \"https://static.snyk.io/snyk-ls/$PROTOCOL_VERSION/snyk-ls_${VERSION}_${OS}_${ARCH}\"\n\n```\n\n----------------------------------------\n\nTITLE: Utilizing Interceptors in API Call Function\nDESCRIPTION: This snippet shows how to integrate the interceptors into an Axios instance within the `callSnykApi` function, ensuring the request and response have the interceptors applied when making API calls.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/util/APIHelpers.ts\n...\n\nimport {\n  refreshTokenReqInterceptor,\n  refreshTokenRespInterceptor,\n} from \"./interceptors\";\n\n...\n\nexport function callSnykApi(tokenType: string, token: string, version: APIVersion): AxiosInstance {\n  ...\n\n  axiosInstance.interceptors.request.use(\n    refreshTokenReqInterceptor,\n    Promise.reject\n  );\n  axiosInstance.interceptors.response.use(\n    (response) => response,\n    refreshTokenRespInterceptor\n  );\n\n  ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating organizations with duplicate prevention\nDESCRIPTION: Command to create organizations while preventing duplicates of existing organizations. The --noDuplicateNames parameter ensures only new organizations are created during re-import.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-bitbucket-cloud-organizations-and-repos-in-snyk.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import orgs:create --file=orgs.json --noDuplicateNames\n```\n\n----------------------------------------\n\nTITLE: Basic Snyk Infrastructure as Code Action Workflow in YAML\nDESCRIPTION: A basic GitHub Actions workflow that uses the Snyk Infrastructure as Code Action to check for vulnerabilities in Kubernetes manifest files. It runs on push events and uses a Snyk API token stored in GitHub Secrets.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-infrastructure-as-code-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Snyk Infrastructure as Code\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run Snyk to check Kubernetes manifest file for issues\n        uses: snyk/actions/iac@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Checking SBOM Test Run Status with Snyk REST API\nDESCRIPTION: This curl command demonstrates how to check the status of an SBOM test run using the Snyk REST API. It requires the organization ID and the job ID from the previous create test run request.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/sbom-apis/rest-api-endpoint-test-an-sbom-document-for-vulnerabilities.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \\\n    -H \"Authorization: token <SNYK_TOKEN>\" \\\n    'https://api.snyk.io/rest/orgs/<ORG_ID>/sbom_tests/<TEST_ID>?version=2024-09-03~beta'\n```\n\n----------------------------------------\n\nTITLE: Identifying Electron Disable Security Warnings Vulnerabilities\nDESCRIPTION: This entry discusses vulnerabilities related to electron applications that do not handle security warnings (CWE-16). This can expose users to various security risks.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Basic Snyk Ruby Vulnerability Scanning\nDESCRIPTION: GitHub Actions workflow for running Snyk vulnerability scan on Ruby project, using Snyk token for authentication\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-ruby-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Ruby using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/ruby@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Importing Snyk CLI GPG Key\nDESCRIPTION: This command imports the Snyk CLI GPG key from the keyserver `hkps://keys.openpgp.org`. The key ID `A22665FB96CAB0E0973604C83676C4B8289C296E` is used to identify the key to import. This step is necessary to verify the GPG signature of the downloaded `sha256sums.txt.asc` file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/install-or-update-the-snyk-cli/verifying-cli-standalone-binaries.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngpg --keyserver hkps://keys.openpgp.org --recv-keys A22665FB96CAB0E0973604C83676C4B8289C296E\n```\n\n----------------------------------------\n\nTITLE: Publish Custom Rules to OCI Registry via GitHub Action\nDESCRIPTION: This GitHub Actions workflow publishes custom rules to an OCI registry when changes are merged into the `main` branch. It builds the custom rules bundle, authenticates with Docker Hub, and then pushes the bundle to the specified registry using `snyk-iac-rules push`. The workflow relies on GitHub secrets for authentication details.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/iac-custom-rules-within-a-pipeline.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"name: Publish Custom Rules\\n\\non:\\n  push:\\n    branches:\\n      - 'main'\\n\\njobs:\\n  publish:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v2\\n\\n      - uses: actions/setup-node@v1\\n        with:\\n          node-version: 15\\n\\n      - name: Install snyk-iac-rules\\n        run: npm i -g snyk-iac-rules\\n        \\n      - name: Build bundle\\n        run: snyk-iac-rules build .\\n        \\n      - name: Login to Docker Hub\\n        uses: docker/login-action@v1\\n        with:\\n          username: ${{ secrets.OCI_REGISTRY_USERNAME }}\\n          password: ${{ secrets.OCI_REGISTRY_PASSWORD }}\\n\\n      - name: Publish rules\\n        run: snyk-iac-rules push --registry $OCI_REGISTRY_URL bundle.tar.gz\\n        env:\\n          OCI_REGISTRY_URL: \"${{ secrets.OCI_REGISTRY_NAME }}:v1\"\\n\"\n```\n\n----------------------------------------\n\nTITLE: IAM Role Policy for Snyk ECR Service Role\nDESCRIPTION: This JSON snippet describes how to edit the SnykCraAssumeRolePolicy by including the ARN of the SnykEcrServiceRole, which allows the Container Registry Agent to assume the necessary role effectively.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/snyk-broker-container-registry-agent/setting-up-the-container-registry-agent-for-a-brokered-ecr-integration.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  Version: 2012-10-17,\n  Statement: [\n    {\n      Sid: SnykCraAssumeRolePolicyAccountA,\n      Effect: Allow,\n      Action: sts:AssumeRole,\n      Resource: role ARN of SnykEcrServiceRole of account A\n    },\n    {\n      Sid: SnykCraAssumeRolePolicyAccountB,\n      Effect: Allow,\n      Action: sts:AssumeRole,\n      Resource: Role ARN of SnykEcrServiceRole of account B\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Securing Snyk API Token with CryptoJS in Postman Pre-request Script\nDESCRIPTION: Pre-request script for Postman that creates a secure HMAC SHA-256 signature using the Snyk API token. The script sets environment variables for the webhook authentication header used to verify payload integrity.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/how-to-use-snyk-webhooks-to-connect-snyk-to-slack-with-aws-lambda/test-the-snyk-webhook-connection.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npostman.setEnvironmentVariable('x-hub-signature', CryptoJS.HmacSHA256(request.data, 'your-secret-string-here').toString(CryptoJS.digest)); postman.setEnvironmentVariable('x-hub-signature', 'sha256='+ postman.getEnvironmentVariable('x-hub-signature'));\n```\n\n----------------------------------------\n\nTITLE: Adding Project Tags to IaC Scan Results\nDESCRIPTION: Command to attach custom key-value tags to IaC projects when reporting results to the Snyk Web UI. This helps with project organization and filtering.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/share-cli-results-with-the-snyk-web-ui.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> snyk iac test myproject --report \\\n    --project-tags=department=platform,team=persistence\n```\n\n----------------------------------------\n\nTITLE: Excluding Multiple Directories or Files from Snyk Code CLI Test\nDESCRIPTION: This command shows how to exclude multiple directories or files from the Snyk Code CLI test in a single line. It uses the && operator to chain multiple snyk ignore commands.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/exclude-directories-and-files-from-snyk-code-cli-tests.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk ignore --file-path=<directory1_or_file1> && snyk ignore --file-path=<directory2_or_file2> && snyk ignore --file-path=<directory3_or_file3>\n```\n\n----------------------------------------\n\nTITLE: Terraform Custom Role Definition\nDESCRIPTION: This Terraform code defines a custom IAM role with specific permissions required by `iac describe`. It includes data sources to get the current account ID and create IAM policy documents for assuming the role and defining the allowed actions. It then creates the IAM role and attaches the policy.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/configure-cloud-providers/configure-aws-provider.md#2025-04-21_snippet_3\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"aws_caller_identity\" \"current\" {}\n\ndata \"aws_iam_policy_document\" \"assume_role_policy\" {\n  statement {\n    effect = \"Allow\"\n    actions   = [\"sts:AssumeRole\"]\n    principals {\n      type        = \"AWS\"\n      identifiers = [\"arn:aws:iam::${data.aws_caller_identity.current.account_id}:root\"]\n    }\n  }\n}\n\ndata \"aws_iam_policy_document\" \"policy\" {\n  statement {\n    effect = \"Allow\"\n    actions   = [\n      \"apigateway:GET\",\n      \"cloudformation:DescribeStacks\",\n      \"cloudformation:GetTemplate\",\n      \"cloudfront:GetDistribution\",\n      \"cloudfront:ListDistributions\",\n      \"cloudfront:ListTagsForResource\",\n      \"ec2:DescribeAddresses\",\n      \"ec2:DescribeImages\",\n      \"ec2:DescribeInstanceAttribute\",\n      \"ec2:DescribeInstances\",\n      \"ec2:DescribeInstanceCreditSpecifications\",\n      \"ec2:DescribeInternetGateways\",\n      \"ec2:DescribeKeyPairs\",\n      \"ec2:DescribeNetworkAcls\",\n      \"ec2:DescribeRouteTables\",\n      \"ec2:DescribeSecurityGroups\",\n      \"ec2:DescribeSnapshots\",\n      \"ec2:DescribeTags\",\n      \"ec2:DescribeVolumes\",\n      \"ec2:DescribeVpcs\",\n      \"ec2:DescribeVpcAttribute\",\n      \"ec2:DescribeVpcClassicLink\",\n      \"ec2:DescribeVpcClassicLinkDnsSupport\",\n      \"ec2:DescribeSubnets\",\n      \"ec2:DescribeNatGateways\",\n      \"ec2:DescribeLaunchTemplates\",\n      \"ecr:DescribeRepositories\",\n      \"ecr:ListTagsForResource\",\n      \"iam:GetPolicy\",\n      \"iam:GetPolicyVersion\",\n      \"iam:GetRole\",\n      \"iam:GetRolePolicy\",\n      \"iam:GetUser\",\n      \"iam:GetUserPolicy\",\n      \"iam:ListAccessKeys\",\n      \"iam:ListAttachedRolePolicies\",\n      \"iam:ListAttachedUserPolicies\",\n      \"iam:ListPolicies\",\n      \"iam:ListRolePolicies\",\n      \"iam:ListRoles\",\n      \"iam:ListUserPolicies\",\n      \"iam:ListUsers\",\n      \"kms:DescribeKey\",\n      \"kms:GetKeyPolicy\",\n      \"kms:GetKeyRotationStatus\",\n      \"kms:ListAliases\",\n      \"kms:ListKeys\",\n      \"kms:ListResourceTags\",\n      \"lambda:GetEventSourceMapping\",\n      \"lambda:GetFunction\",\n      \"lambda:GetFunctionCodeSigningConfig\",\n      \"lambda:ListEventSourceMappings\",\n      \"lambda:ListFunctions\",\n      \"lambda:ListVersionsByFunction\",\n      \"rds:DescribeDBInstances\",\n      \"rds:DescribeDBSubnetGroups\",\n      \"rds:ListTagsForResource\",\n      \"route53:GetHostedZone\",\n      \"route53:ListHostedZones\",\n      \"route53:ListResourceRecordSets\",\n      \"route53:ListTagsForResource\",\n      \"route53:ListHealthChecks\",\n      \"route53:GetHealthCheck\",\n      \"s3:GetAccelerateConfiguration\",\n      \"s3:GetAnalyticsConfiguration\",\n      \"s3:GetBucketAcl\",\n      \"s3:GetBucketCORS\",\n      \"s3:GetBucketLocation\",\n      \"s3:GetBucketLogging\",\n      \"s3:GetBucketNotification\",\n      \"s3:GetBucketObjectLockConfiguration\",\n      \"s3:GetBucketPolicy\",\n      \"s3:GetBucketRequestPayment\",\n      \"s3:GetBucketTagging\",\n      \"s3:GetBucketVersioning\",\n      \"s3:GetBucketWebsite\",\n      \"s3:GetEncryptionConfiguration\",\n      \"s3:GetInventoryConfiguration\",\n      \"s3:GetLifecycleConfiguration\",\n      \"s3:GetMetricsConfiguration\",\n      \"s3:GetReplicationConfiguration\",\n      \"s3:ListAllMyBuckets\",\n      \"s3:ListBucket\",\n      \"sqs:GetQueueAttributes\",\n      \"sqs:ListQueueTags\",\n      \"sqs:ListQueues\",\n      \"sns:ListTopics\",\n      \"sns:GetTopicAttributes\",\n      \"sns:ListTagsForResource\",\n      \"sns:ListSubscriptions\",\n      \"sns:ListSubscriptionsByTopic\",\n      \"sns:GetSubscriptionAttributes\",\n      \"dynamodb:ListTables\",\n      \"dynamodb:DescribeTable\",\n      \"dynamodb:DescribeGlobalTable\",\n      \"dynamodb:ListTagsOfResource\",\n      \"dynamodb:DescribeTimeToLive\",\n      \"dynamodb:DescribeTableReplicaAutoScaling\",\n      \"dynamodb:DescribeContinuousBackups\",\n      \"rds:DescribeDBClusters\",\n      \"rds:DescribeGlobalClusters\",\n      \"application-autoscaling:DescribeScheduledActions\",\n      \"autoscaling:DescribeLaunchConfigurations\"\n    ]\n    resources = [\"*\"]\n  }\n}\n\nresource \"aws_iam_role\" \"snyk_assume_role\" {\n  name = \"snyk_assume_role\"\n  assume_role_policy = data.aws_iam_policy_document.assume_role_policy.json\n}\n\nresource \"aws_iam_role_policy\" \"snyk_policy\" {\n  name = \"snyk_policy\"\n  role = aws_iam_role.snyk_assume_role.id\n  policy = data.aws_iam_policy_document.policy.json\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Organization Per Command in Snyk CLI\nDESCRIPTION: This shell command allows overriding the global organization setting for specific Snyk CLI commands. It is specified using the `--org` flag followed by the `orgslugname`. This command affects only the current execution.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/how-to-select-the-organization-to-use-in-the-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsnyk monitor --org=orgslugname\n```\n\nLANGUAGE: shell\nCODE:\n```\nsnyk test --org=orgslugname\n```\n\n----------------------------------------\n\nTITLE: Basic .snyk File Structure for Excluding Files and Directories in Snyk Code\nDESCRIPTION: The basic YAML syntax for the .snyk file to exclude files and directories from Snyk Code analysis. This snippet shows the structure with placeholder exclusion rules that would be replaced with actual patterns.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/import-project-repository/exclude-directories-and-files-from-project-import.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Snyk (https://snyk.io) policy file\nexclude:\n global:\n   - <Exclusion_rule>\n   - <Exclusion_rule>\n```\n\n----------------------------------------\n\nTITLE: Basic Snyk Python Vulnerability Scanning Workflow\nDESCRIPTION: A basic GitHub Actions workflow that runs Snyk security scanning on Python projects. Uses ubuntu-latest runner and requires a SNYK_TOKEN secret to be configured.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-python-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Python using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/python@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Using snyk ignore Command Syntax for Vulnerability Ignoring\nDESCRIPTION: Basic syntax for the snyk ignore command which modifies the .snyk file to ignore a specified vulnerability. The command requires a vulnerability ID and supports optional expiry date and reason parameters.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/the-.snyk-file.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsnyk ignore --id='vulnerabilityID' --expiry='date-string' --reason='text string'\n```\n\n----------------------------------------\n\nTITLE: Checking for High Severity Vulnerabilities with Snyk dotNET Action in YAML\nDESCRIPTION: This YAML configuration demonstrates how to use the Snyk dotNET Action to check for only high severity vulnerabilities in a dotNET project. It includes an additional argument to set the severity threshold.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-dotnet-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for dotNET using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n      - name: Setup .NET\n        uses: actions/setup-dotnet@4\n      - name: Restore dependencies\n        run: dotnet restore ./path/to/your.sln\n        uses: snyk/actions/dotnet@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Configuring dockercfg.json for GKE using GCR\nDESCRIPTION: This JSON structure demonstrates the configuration of dockercfg.json for Google Kubernetes Engine (GKE) using Google Container Registry (GCR).\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/authenticate-to-private-container-registries.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credHelpers\": {\n    \"us.gcr.io\": \"gcloud\",\n    \"asia.gcr.io\": \"gcloud\",\n    \"marketplace.gcr.io\": \"gcloud\",\n    \"gcr.io\": \"gcloud\",\n    \"eu.gcr.io\": \"gcloud\",\n    \"staging-k8s.gcr.io\": \"gcloud\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Policy for Assuming Role\nDESCRIPTION: This JSON code defines an IAM policy that allows a user to assume the specified role.  It should be attached to the IAM user who will be running the `iac describe` command. Replace `<IDOFYOURACCOUNT>` with the actual AWS account ID.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/configure-cloud-providers/configure-aws-provider.md#2025-04-21_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"sts:AssumeRole\",\n      \"Resource\": \"arn:aws:iam::<IDOFYOURACCOUNT>:role/snyk_assume_role\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Windows Batch Script for Recursive JAR File Scanning\nDESCRIPTION: Windows batch script to scan JAR files recursively in a specified workspace directory using Snyk CLI. Requires Snyk CLI to be pre-installed and supports passing workspace and project name as parameters.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/test-for-vulnerabilities/scan-all-unmanaged-jar-files.md#2025-04-21_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nREM Usage:    \nREM For example: scanjar.bat \"C:\\workspace\\app\" \"myapp\" \nSET WORKSPACE=%1 \nSET REMOTE_REPO_URL=%2 \nfor /R %WORKSPACE% %%f in (*.jar) do cmd /c snyk monitor --scan-unmanaged --remote-repo-url=%REMOTE_REPO_URL% --file=%%f --project-name=%%f\n```\n\n----------------------------------------\n\nTITLE: Setting default Snyk Organization globally using CLI\nDESCRIPTION: This snippet shows how to set the default Snyk Organization for all CLI tests using the `snyk config set org` command.  It requires the Snyk CLI to be installed and configured and either the Organization ID or internal name. This command updates the Snyk CLI configuration to use the specified Organization for subsequent tests.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/set-the-snyk-organization-for-the-cli-tests.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nsnyk config set org=<ORG_ID_or_ORG_INTERNAL_NAME>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Organization (POST /org)\nDESCRIPTION: API endpoint to create a new organization. This endpoint is part of the v1 API and uses the POST method.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/organizations-v1.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/org\" method=\"post\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Outputting Snyk Code Test Results in SARIF Format\nDESCRIPTION: This command runs a Snyk Code test and outputs the results in SARIF format in the terminal. SARIF is an open standard for static analysis tool output, useful for standardized reporting and integration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/view-snyk-code-cli-results.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk code test <path/to/folder> --sarif\n```\n\n----------------------------------------\n\nTITLE: Querying MTTR Results Per Issue Severity in Snowflake\nDESCRIPTION: This SQL query calculates the mean time to remediation (MTTR) for issues of different severity levels (Critical, High, Medium, Low) per Snyk organization. It filters for issues that were resolved in the last month and excludes deleted issues and non-monitored projects to reduce noise in the results.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/reporting/reporting-and-bi-integrations-snowflake-data-share/build-your-first-dashboard.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n    o.DISPLAY_NAME AS organization_display_name,\n    ROUND(AVG(CASE WHEN ISSUE_SEVERITY = 'Critical' THEN \n        DATEDIFF('DAY', TO_DATE(LAST_INTRODUCED),TO_DATE(LAST_RESOLVED)) ELSE NULL END),2) AS critical_mttr,\n    ROUND(AVG(CASE WHEN ISSUE_SEVERITY = 'High' THEN \n        DATEDIFF('DAY', TO_DATE(LAST_INTRODUCED),TO_DATE(LAST_RESOLVED)) ELSE NULL END),2) AS high_mttr,\n    ROUND(AVG(CASE WHEN ISSUE_SEVERITY = 'Medium' THEN \n        DATEDIFF('DAY', TO_DATE(LAST_INTRODUCED),TO_DATE(LAST_RESOLVED)) ELSE NULL END),2) AS medium_mttr,\n    ROUND(AVG(CASE WHEN ISSUE_SEVERITY = 'Low' THEN \n        DATEDIFF('DAY', TO_DATE(LAST_INTRODUCED),TO_DATE(LAST_RESOLVED)) ELSE NULL END),2) AS low_mttr\nFROM SNYK.SNYK.ISSUES__V_1_0 i\n    INNER JOIN SNYK.SNYK.PROJECTS__V_1_0 p ON i.PROJECT_PUBLIC_ID = p.PUBLIC_ID\n    INNER JOIN SNYK.SNYK.ORGS__V_1_0 o ON i.ORG_PUBLIC_ID = o.PUBLIC_ID \nWHERE IS_MONITORED = TRUE                       -- include only monitored projects\n     AND i.DELETED_AT IS NULL                   -- remove deleted issues\n     AND ISSUE_STATUS = 'Resolved'              -- include only resolved issues\n     -- issues that were resolved in the last month\n     AND TO_DATE(LAST_RESOLVED) >= DATE_TRUNC('MONTH', DATEADD('MONTH', -12, CURRENT_DATE))\n     AND TO_DATE(LAST_RESOLVED) <= DATEADD('DAY', -1, DATE_TRUNC('MONTH', CURRENT_DATE))\nGROUP BY organization_display_name\nORDER BY organization_display_name ASC;         -- Update based on the desired order\n```\n\n----------------------------------------\n\nTITLE: Creating Universal Broker Deployment via API\nDESCRIPTION: API call to create a new Universal Broker deployment with specified organization and metadata details.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/using-the-api-to-set-up-univeral-broker/using-the-api-to-set-up-a-github-connection.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://api.snyk.io/rest/tenants/TENANT_ID/brokers/installs/INSTALL_ID/deployments?version=2024-02-08~experimental' \\\n--header 'Content-Type: application/vnd.api+json' \\\n--header 'Authorization: token YOUR_SNYK_TOKEN' \\\n--data-raw '{\n    \"data\": {\n        \"type\": \"broker_deployment\",\n        \"attributes\": {\n            \"broker_app_installed_in_org_id\":\"ORG_ID_WHERE_APP_WAS_INSTALLED\",\n            \"metadata\": {\n                \"deployment_name\": \"My Universal Broker Deployment\",\n                \"cluster\": \"Cluster X Region Y or whatever you need to not lose your deployment.\"\n            }\n        }\n    }\\n}'\n```\n\n----------------------------------------\n\nTITLE: Example of a Customized Rego Rule\nDESCRIPTION: An example Rego rule modifies the template to set a 'msg' for resources missing an 'owner' tag. This outlines how users can customize rules for specific policy goals while maintaining required and optional output fields for Snyk integration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/writing-a-rule.md#2025-04-21_snippet_3\n\nLANGUAGE: rego\nCODE:\n```\npackage rules\n\ndeny[msg] {\n    resource := input.resource.aws_redshift_cluster[name]\n    not resource.tags.owner\n    \n    msg := {\n        \"publicId\": \"MY_RULE\",\n        \"title\": \"Missing an owner from tag\",\n        \"severity\": \"medium\",\n        \"msg\": sprintf(\"input.resource.aws_redshift_cluster[%s].tags\", [name]),\n        \"issue\": \"\",\n        \"impact\": \"\",\n        \"remediation\": \"\",\n        \"references\": [],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk Unmanaged Project Options\nDESCRIPTION: Specifies the maximum depth for archive extraction during Snyk scanning with the '--unmanaged' option. A zero value disables extraction.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/sbom.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n--max-depth=1\n```\n\n----------------------------------------\n\nTITLE: Nexus 3 - BROKER_CLIENT_VALIDATION_URL Example\nDESCRIPTION: This example shows how to construct the BROKER_CLIENT_VALIDATION_URL environment variable for Nexus 3. It highlights the difference between URLs when authentication is required versus when it is not.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/nexus-repository-prerequisites-and-steps-to-install-and-configure-broker/nexus-repository-environment-variables-for-snyk-broker.md#2025-04-21_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n\"https://<user>:<pass>@<your.nexus.hostname]/service/rest/v1/status/check)\"\n```\n\nLANGUAGE: Text\nCODE:\n```\n\"https://<your.nexus.hostname]/service/rest/v1/status`).\"\n```\n\n----------------------------------------\n\nTITLE: Setting Output to JSON Format\nDESCRIPTION: This command sets the output format to JSON. The `--json` flag enables JSON output, which is required when using the `consolidateResults` command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-server/bitbucket-server-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count bitbucket-server --token BITBUCKET-TOKEN --url BITBUCKET-URL --projectKeys Key1 --repo Repo1 --json\n```\n\n----------------------------------------\n\nTITLE: Installing sbt-dependency-graph Plugin\nDESCRIPTION: Command to add the sbt-dependency-graph plugin to plugins.sbt file. This plugin is required for Snyk CLI to analyze Scala projects.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/scala/scala-for-open-source.md#2025-04-21_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\naddSbtPlugin(\"net.virtual-void\" % \"sbt-dependency-graph\" % \"0.10.0-RC1\")\n```\n\n----------------------------------------\n\nTITLE: Handling Database Operations in TypeScript\nDESCRIPTION: This snippet contains functions for reading, writing, and updating entries in the lowdb database. It takes advantage of asynchronous programming to handle I/O operations efficiently.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/util/DB.ts\n\nimport { dbPath } from \"../app\";\nimport { AuthData, DB } from \"../interfaces/DB\";\nimport { Low, JSONFile } from \"lowdb\";\n\nexport async function readFromDb(): Promise<DB> {\n  const adapter = new JSONFile<DB>(dbPath);\n  const db = new Low<DB>(adapter);\n  await db.read();\n  // Return existing data or create a new DB\n  return db.data ?? buildNewDb();\n}\n\nfunction buildNewDb(): DB {\n  return { installs: [] };\n}\n\nexport async function writeToDb(data: AuthData): Promise<void> {\n  const existingData = await readFromDb();\n  existingData.installs.push(data);\n  // Creates a new DB if one doesn't already exist\n  const adapter = new JSONFile(dbPath);\n  const db = new Low(adapter);\n  db.data = existingData;\n  return db.write();\n}\n\nexport async function updateDb(\n  oldData: AuthData,\n  newData: AuthData\n): Promise<boolean> {\n  const adapter = new JSONFile<DB>(dbPath);\n  const db = new Low<DB>(adapter);\n  await db.read();\n  if (db.data == null) {\n    return false;\n  }\n  // After reading check if data exists in the database\n  const installs = db.data?.installs || [];\n\n  const index = installs.findIndex((install) => install.date === oldData.date);\n  if (index === -1) return false;\n  installs[index] = newData;\n  // Replace the existing install with new one\n  db.data.installs = installs;\n  await db.write();\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Organizations with Duplicate Prevention\nDESCRIPTION: Command for re-import scenarios to create organizations in Snyk while preventing duplication of existing organizations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-gitlab-organizations-and-repos-in-snyk.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import orgs:create --file=orgs.json --noDuplicateNames\n```\n\n----------------------------------------\n\nTITLE: Querying Code Issues Backlog by Organization\nDESCRIPTION: SQL query that returns open Snyk Code issues backlog counters distributed by severity and grouped by Snyk Organization. Filters for monitored projects and excludes deleted issues.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/reporting/reporting-and-bi-integrations-snowflake-data-share/build-your-first-dashboard.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT o.DISPLAY_NAME AS organization_display_name,\n        COUNT_IF(ISSUE_SEVERITY='High') AS high_issues,\n        COUNT_IF(ISSUE_SEVERITY='Medium') AS medium_issues,\n        COUNT_IF(ISSUE_SEVERITY='Low') AS low_issues\nFROM SNYK.SNYK.ISSUES__V_1_0 i\n     INNER JOIN SNYK.SNYK.PROJECTS__V_1_0 p ON i.PROJECT_PUBLIC_ID = p.PUBLIC_ID\n     INNER JOIN SNYK.SNYK.ORGS__V_1_0 o ON i.ORG_PUBLIC_ID = o.PUBLIC_ID\nWHERE p.IS_MONITORED = TRUE\n     AND i.DELETED_AT IS NULL\n     AND ISSUE_STATUS = 'Open'\n     AND i.PRODUCT_NAME = 'Snyk Code'\nGROUP BY o.DISPLAY_NAME\nORDER BY high_issues DESC,\n         medium_issues DESC,\n         low_issues DESC;\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running Broker Client with Docker\nDESCRIPTION: This Docker command sets up the Snyk Broker Client for the Container Registry Agent. It configures necessary environment variables, including broker and registry authentication details, and starts the Docker container to enable secure communication between the Broker Client and the Snyk environment. Make sure to replace placeholder values with actual credentials and URLs.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/snyk-broker-container-registry-agent/README.md#2025-04-21_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker run --restart=always \\\n       -p 8000:8000 \\\n       -e BROKER_TOKEN=\"<secret-broker-token>\" \\\n       -e BROKER_CLIENT_URL=\"<broker-client-url>\" \\\n       -e CR_AGENT_URL=\"<container-registry-agent-url>\" \\\n       -e CR_TYPE=\"<container-registry-type>\" \\\n       -e CR_BASE=\"<container-registry-hostname>\" \\\n       -e CR_USERNAME=\"<username>\" \\\n       -e CR_PASSWORD=\"<password>\" \\\n       -e PORT=8000 \\\n       snyk/broker:container-registry-agent\n```\n\n----------------------------------------\n\nTITLE: Snyk Node SARIF Export and GitHub Code Scanning Integration\nDESCRIPTION: Workflow that runs Snyk scanning, exports results in SARIF format, and uploads them to GitHub Code Scanning. Includes continue-on-error to ensure SARIF upload occurs even if vulnerabilities are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-node-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Node using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/node@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of .snyk File Ignore Rules\nDESCRIPTION: YAML syntax example showing the ignore section structure in a .snyk file. Each ignore rule includes the vulnerability ID, path to the affected library, reason for ignoring, and an optional expiry date.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/the-.snyk-file.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nignore:\n  snyk-vulnid:\n    - path to library using > separator :\n        reason: 'text string'\n        expires: 'YYYY-MM-DDThh:mm:ss.fffZ'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment ID without jq\nDESCRIPTION: This snippet shows how to find the ID of a cloud environment by querying the Snyk API without using jq. It uses curl to fetch environment IDs directly from the API.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/getting-started-with-cloud-scans/manage-cloud-environments/scan-a-cloud-environment.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \n  'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/environments?version=2022-12-21~beta' \n  -H 'Authorization: token YOUR-API-TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Specify AWS Credentials for Snyk CLI\nDESCRIPTION: This command sets AWS credentials as environment variables before running the Snyk CLI command. It's important for authenticating the user with AWS services.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/iac-describe.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"$ AWS_ACCESS_KEY_ID=XXX AWS_SECRET_ACCESS_KEY=XXX snyk iac describe\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Organization with Snyk CLI\nDESCRIPTION: Use the `snyk config set org=<ORG_ID>` command to set a default Snyk Organization for CLI commands. This default Organization influences the scope within which private tests are run. The Organization can be specified using either the `ORG_ID` or the org slug name, although slug names are not compatible with the API.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/code-test.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsnyk config set org=<ORG_ID>\n```\n\n----------------------------------------\n\nTITLE: Creating API Custom PR Template Using JSON\nDESCRIPTION: This JSON snippet defines a pull request template with a variable substitution for Jira IDs. Dependencies include the necessity of having Snyk Jira integration enabled. The key parameter is 'jira_ids', which translates to a list of Jira tickets in the commit message. The input is JSON formatted, and the output is a string representing the template message.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"commit_message\": \"This pull request is from Snyk and relates to {{ jira_ids }}\" \n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Universal Broker Connection\nDESCRIPTION: Command to integrate a created connection with a specific Organization. Requires selecting the deployment and connection, followed by entering the Organization ID.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/add-a-new-connection-to-your-universal-broker.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-broker-config workflows connections integrate\n```\n\n----------------------------------------\n\nTITLE: Getting Commits for All Projects in Azure DevOps Org\nDESCRIPTION: Command to retrieve commit information for all projects and their repositories under an Azure DevOps organization. This requires providing the Azure token and organization name.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/azure-devops/azure-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count azure-devops --token AZURE-TOKEN --org AZURE-ORG\n```\n\n----------------------------------------\n\nTITLE: Displaying Snyk Container CLI Help\nDESCRIPTION: Command to display the help information for Snyk Container CLI. This provides details on available commands and options for advanced usage of the Snyk Container CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-container/advanced-use-of-snyk-container-cli.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk container --help\n```\n\n----------------------------------------\n\nTITLE: Scanning Docker and OCI Archives with Snyk Container CLI\nDESCRIPTION: Examples of using Snyk Container CLI to scan Docker, OCI, and Kaniko image archives. These commands allow for testing and monitoring of container images stored in archive formats.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-container/advanced-use-of-snyk-container-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk container test docker-archive:archive.tar\nsnyk container test oci-archive:archive.tar\nsnyk container test kaniko-archive:archive.tar\n```\n\n----------------------------------------\n\nTITLE: Setting Up Snyk Language Server in Neovim with Lua\nDESCRIPTION: This Lua script outlines the setup for integrating the Snyk Language Server in Neovim. It defines the necessary environment setup, installs plugins using 'packer.nvim', and configures key bindings and logging for the language server. Prerequisites include Neovim with version 0.5.1 or higher and access to the 'packer.nvim' and 'nvim-lspconfig' plugins.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/snyk-language-server/example-configurations-for-snyk-language-server.md#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal on_windows = vim.loop.os_uname().version:match 'Windows'\n\nlocal function join_paths(...)\n    local path_sep = on_windows and '\\\\' or '/'\n    local result = table.concat({ ... }, path_sep)\n    return result\nend\n\nvim.cmd [[set runtimepath=$VIMRUNTIME]]\n\nlocal temp_dir = vim.loop.os_getenv 'TEMP' or '/tmp'\n\nvim.cmd('set packpath=' .. join_paths(temp_dir, 'nvim', 'site'))\n\nlocal package_root = join_paths(temp_dir, 'nvim', 'site', 'pack')\nlocal install_path = join_paths(package_root, 'packer', 'start', 'packer.nvim')\nlocal compile_path = join_paths(install_path, 'plugin', 'packer_compiled.lua')\n\nlocal function load_plugins()\n    require('packer').startup {\n        {\n            'wbthomason/packer.nvim',\n            'neovim/nvim-lspconfig',\n        },\n        config = {\n            package_root = package_root,\n            compile_path = compile_path,\n        },\n    }\nend\n\n_G.load_config = function()\n    vim.lsp.set_log_level 'trace'\n    if vim.fn.has 'nvim-0.5.1' == 1 then\n        require('vim.lsp.log').set_format_func(vim.inspect)\n    end\n    local nvim_lsp = require 'lspconfig'\n    local on_attach = function(_, bufnr)\n        local function buf_set_option(...)\n            vim.api.nvim_buf_set_option(bufnr, ...)\n        end\n\n        buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')\n\n        local opts = { buffer = bufnr, noremap = true, silent = true }\n        vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)\n        vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)\n        vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)\n        vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)\n        vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)\n        vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)\n        vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)\n        vim.keymap.set('n', '<space>wl', function()\n            print(vim.inspect(vim.lsp.buf.list_workspace_folders()))\n        end, opts)\n        vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)\n        vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, opts)\n        vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)\n        vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)\n        vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)\n        vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)\n        vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)\n    end\n\n    local lspconfig = require('lspconfig')\n    local configs = require 'lspconfig.configs'\n\n    if not configs.snyk then\n        configs.snyk = {\n            default_config = {\n                cmd = {'/usr/local/bin/snyk-ls','-f','/path/to/log/snyk-ls-vim.log'},\n                root_dir = function(name)\n                    return lspconfig.util.find_git_ancestor(name) or vim.loop.os_homedir()\n                end,\n                init_options = {\n                    activateSnykCode = \"true\",\n                    token = \"xxx\"\n                }\n            };\n        }\n    end\n    lspconfig.snyk.setup {\n      on_attach = on_attach\n    }\n\n    print [[You can find your log at $HOME/.cache/nvim/lsp.log. Please paste in a github issue under a details tag as described in the issue template.]]\nend\n\nif vim.fn.isdirectory(install_path) == 0 then\n    vim.fn.system { 'git', 'clone', 'https://github.com/wbthomason/packer.nvim', install_path }\n    load_plugins()\n    require('packer').sync()\n    vim.cmd [[autocmd User PackerComplete ++once lua load_config()]]\nelse\n    load_plugins()\n    require('packer').sync()\n    _G.load_config()\nend\n```\n\n----------------------------------------\n\nTITLE: Uploading Snyk Scan Results to GitHub Code Scanning with Maven-3-jdk-11 Action in YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the Snyk Maven-3-jdk-11 Action to perform a vulnerability scan, generate a SARIF file, and upload the results to GitHub Code Scanning. It uses continue-on-error to ensure the SARIF upload occurs even if vulnerabilities are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-maven-3-jdk-11-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Maven (3-jdk-11) using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/maven-3-jdk-11@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Outputting Contributors Count in JSON Format for Bitbucket Cloud\nDESCRIPTION: Command example for retrieving contributors count with JSON output format by using the --json flag.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-cloud/bitbucket-cloud-examples.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count bitbucket-cloud --user USERNAME --password APP_PASSWORD --workspaces Workspace1 --repo Repo1 --json\n```\n\n----------------------------------------\n\nTITLE: Checking for High Severity Vulnerabilities with Snyk Maven Action\nDESCRIPTION: This YAML configuration extends the basic Snyk Maven Action setup to only check for high severity vulnerabilities. It uses the '--severity-threshold' argument to filter the results.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-maven-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Maven using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/maven@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Install Node.js via 'n' module\nDESCRIPTION: These commands clear the npm cache, install the 'n' module globally, and then install the latest stable version of Node.js. The 'n' module simplifies Node.js version management.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/install-or-update-the-snyk-cli/install-or-upgrade-to-version-of-node.js-required-for-snyk-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo npm cache clean -f\nsudo npm install -g n\nsudo n stable\n```\n\n----------------------------------------\n\nTITLE: Polling Import Job Status in Snyk (YAML)\nDESCRIPTION: This YAML snippet defines the GET endpoint for polling the status of an import job in Snyk. It includes path parameters for organization ID, integration ID, and job ID.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/import-projects-v1.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/org/{orgId}/integrations/{integrationId}/import/{jobId}\" method=\"get\" %}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Project ID in Terraform Template\nDESCRIPTION: This snippet shows how to set the default project ID in the Terraform template for Google service account creation. Modify the 'project_id' variable to align it with your specific Google Cloud Project ID.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/google-cloud-integration/google-cloud-integration-web-ui/step-2-create-the-google-service-account-web-ui.md#2025-04-21_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndefault = \"your-project-id\"\n```\n\n----------------------------------------\n\nTITLE: Creating IAM OIDC Provider for EKS - AWS CLI\nDESCRIPTION: This command associates an IAM OIDC provider with the EKS cluster, necessary for granting permissions to service accounts.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\neksctl utils associate-iam-oidc-provider \\\n--cluster=\"<<CLUSTER_NAME>>\" \\\n--approve\n```\n\n----------------------------------------\n\nTITLE: Available Command Options for Bitbucket Cloud Contributors Count\nDESCRIPTION: Lists all available command line options for the 'snyk-scm-contributors-count bitbucket-cloud' command including required parameters, optional flags, and output customization options.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-cloud/bitbucket-cloud-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  --version                 Show version number                        [boolean]\n  --help                    Show help                                  [boolean]\n  --user                    Bitbucket cloud username                   [required]\n  --password                Bitbucket cloud app password               [required]\n  --workspaces              [Optional] Bitbucket cloud workspace name/uuid to count contributors for\n  --repo                    [Optional] Specific repo to count only for\n  --exclusionFilePath       [Optional] Exclusion list filepath\n  --json                    [Optional] JSON output, requiered when using the \"consolidateResults\" command\n  --skipSnykMonitoredRepos  [Optional] Skip Snyk monitored repos and count contributors for all repos\n  --importConfDir           [Optional] Generate an import file with the unmonitored repos: A path to a valid folder for the generated import files\n  --importFileRepoType      [Optional] To be used with the importConfDir flag: Specify the type of repos to be added to the import file. Options: all/private/public. Default: all\n```\n\n----------------------------------------\n\nTITLE: Snyk Infrastructure as Code Action with Severity Threshold in YAML\nDESCRIPTION: This workflow example sets a severity threshold for the Snyk Infrastructure as Code Action, configuring it to only report on high severity vulnerabilities in a Kubernetes manifest file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-infrastructure-as-code-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Snyk Infrastructure as Code\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run Snyk to check Kubernetes manifest file for issues\n        uses: snyk/actions/iac@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          file: your/kubernetes-manifest.yaml\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Testing Multi-Platform Images with Snyk Container CLI\nDESCRIPTION: Example of using Snyk Container CLI to test a multi-platform image for a specific platform. This command allows for scanning an image targeting a particular operating system and architecture.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-container/advanced-use-of-snyk-container-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk container test --platform=linux/arm64 debian\n```\n\n----------------------------------------\n\nTITLE: Using Snyk CLI to Create Scoped Ignore Rules\nDESCRIPTION: Commands showing how to use the Snyk CLI to create ignore rules for specific files. These commands create ignore rules for a Kubernetes vulnerability in two specific YAML configuration files.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/iac-ignores-using-the-.snyk-policy-file.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk ignore --id=SNYK-CC-K8S-1 --path='staging/cronjob.yaml > *'\nsnyk ignore --id=SNYK-CC-K8S-1 --path='staging/deployment.yaml > *'\n```\n\n----------------------------------------\n\nTITLE: Adding Organization Members in Snyk API v1\nDESCRIPTION: Endpoint for adding members to a specific organization within a group\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/groups-v1.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n/group/{groupId}/org/{orgId}/members\n```\n\n----------------------------------------\n\nTITLE: Generating a new rule with snyk-iac-rules template\nDESCRIPTION: This command generates the scaffolding for a new rule with the specified name. It creates a directory structure with rule and test files, as well as utility functions. This is the starting point for writing custom rules for Snyk IaC.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/sdk-reference.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk-iac-rules template --rule CUSTOM_RULE\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk Project Monitoring Options\nDESCRIPTION: Controls whether a project snapshot is recorded in the Snyk UI after scanning. When enabled, it allows continuous monitoring and vulnerability tracking.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/bitbucket-pipelines-integration-using-a-snyk-pipe/snyk-pipe-parameters-and-values-bitbucket-cloud.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nMONITOR: false\n```\n\n----------------------------------------\n\nTITLE: Snyk Python High Severity Vulnerability Scan\nDESCRIPTION: GitHub Actions workflow that checks for high severity vulnerabilities only using Snyk Python 3.8 Action. Uses the severity-threshold argument to filter results.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-python-3.8-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Python-3.8 using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/python-3.8@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Testing Pub Packages using SBOM CLI\nDESCRIPTION: This snippet shows how to generate an SBOM file using `cdxgen` and then test it using the Snyk SBOM CLI. This allows you to test your application's dependencies for vulnerabilities.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/dart-and-flutter.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n\"cdxgen -t pub -o pub-sbom.json \\\n  && snyk sbom test --experimental --file pub-sbom.json\"\n```\n\n----------------------------------------\n\nTITLE: Listing Package Issues with URL-encoded PURL (Bash)\nDESCRIPTION: Example of making an API request with a valid URL-encoded purl for a Maven package. This demonstrates how to properly format the purl in the request URL.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/issues-list-issues-for-a-package.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ http \\\n  \"https://api.snyk.io/rest/orgs/{org_id}/packages/pkg%3Amaven%2fcom.fasterxml.woodstox%2fwoodstox-core%405.0.0/issues\" \\\n  \"Authorization: token $API_TOKEN\" \\\n  version==2024-06-26\n```\n\n----------------------------------------\n\nTITLE: Creating Snyk Webhook via API\nDESCRIPTION: HTTP POST request to create a new webhook in Snyk, specifying the Zapier webhook URL and secret\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/tutorial.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/v1/org/{orgId}/webhooks HTTP/2\n> Host: snyk.io\n> Authorization: token {authToken}\n> Content-Type: application/json\n| {\n|   \"url\": \"https://hooks.zapier.com/hooks/catch/9002958/oemlgkz/\",\n|   \"secret\": \"my-secret-string\"\n| }\n```\n\n----------------------------------------\n\nTITLE: Generating Organization Data with Empty Org Skipping\nDESCRIPTION: Command for re-import scenarios to generate organization data while skipping any GitLab groups that don't have repositories.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-gitlab-organizations-and-repos-in-snyk.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import orgs:data --source=gitlab --groupId=<snyk_group_id> --skipEmptyOrg\n```\n\n----------------------------------------\n\nTITLE: Snyk IaC Usage Command\nDESCRIPTION: This snippet shows the basic usage of the `snyk iac` command. It demonstrates the general structure for executing IaC related tasks with Snyk, where `<COMMAND>` represents specific actions like testing or describing infrastructure, and `<PATH>` specifies the target directory or file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/iac.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n`snyk iac <COMMAND> [<OPTIONS>] [<PATH>]`\n```\n\n----------------------------------------\n\nTITLE: Fetching Contributor Counts for All Repositories - Command Line - Shell\nDESCRIPTION: This command fetches contributor counts for all repositories across all organizations specified in GitHub using the user's GitHub token. It requires the token as a parameter for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/github/github-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsnyk-scm-contributors-count github --token TOKEN\n```\n\n----------------------------------------\n\nTITLE: Defining Patches in Snyk Configuration\nDESCRIPTION: This YAML snippet shows how patches are defined in a .snyk file for a specific path to a dependency. Each entry specifies the path to the dependency and the timestamp when the patch was applied. During source code integration, `snyk` becomes a dependency, and the .snyk file manages the patches applied.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-open-source/manage-vulnerabilities/snyk-patches-to-fix-vulnerabilities.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n'npm:negotiator:20160616':\n    - errorhandler > accepts > negotiator:\n       patched: '2017-05-05T12:39:16.961Z'\n    - negotiator: \n       patched: '2017-05-05T12:39:16.961Z'\n```\n\n----------------------------------------\n\nTITLE: Snyk Gradle (jdk17) Action Workflow for High Severity Vulnerabilities in YAML\nDESCRIPTION: This snippet shows a GitHub Actions workflow that checks for only high severity vulnerabilities in a Gradle (jdk17) project using Snyk. It uses the --severity-threshold argument to filter results.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-gradle-jdk17-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Gradle (jdk17) using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/gradle-jdk17@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Monitoring Maven Projects with Snyk CLI\nDESCRIPTION: Commands for monitoring Maven projects using Snyk CLI, including options for aggregate and non-aggregate projects\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk monitor --maven-aggregate-project\n```\n\nLANGUAGE: bash\nCODE:\n```\nsnyk monitor --all-projects\n```\n\n----------------------------------------\n\nTITLE: Querying Snyk Cloud Environment IDs Using API\nDESCRIPTION: Retrieve the ID of a cloud environment in Snyk by sending a GET request to the specified endpoint. Requires an API token for authorization. The output includes a JSON object where 'data.id' holds the environment ID.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/getting-started-with-cloud-scans/manage-cloud-environments/update-a-cloud-environment.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/environments?version=2022-12-21~beta' \\\n  -H 'Authorization: token YOUR-API-TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Project Snapshot Webhook Event Request\nDESCRIPTION: Example of a project_snapshot event webhook request that is triggered when an existing project is tested. Includes headers and basic payload structure.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/webhooks.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nPOST /webhook-handler/snyk123 HTTP/1.1\nHost: my.app.com\nX-Snyk-Event: project_snapshot/v0\nX-Snyk-Transport-ID: 998fe884-18a0-45db-8ae0-e379eea3bc0a\nX-Snyk-Timestamp: 2020-09-25T15:27:53Z\nX-Hub-Signature: sha256=7d38cdd689735b008b3c702edd92eea23791c5f6\nUser-Agent: Snyk-Webhooks/044aadd\nContent-Type: application/json\n{\n  \"project\": { ... },\n  \"org\": { ... },\n  \"group\": { ... },\n  \"newIssues\": [],\n  \"removedIssues\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Broker Docker Image\nDESCRIPTION: Dockerfile configuration for GitHub.com Broker integration with environment variables for tokens and connection settings.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/derived-docker-images-for-broker-client-integrations-and-container-registry-agent.md#2025-04-21_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM snyk/broker:github-com\n\nENV BROKER_TOKEN      secret-broker-token\nENV GITHUB_TOKEN      secret-github-token\nENV PORT              8000\nENV BROKER_CLIENT_URL http://my.broker.client:8000\n```\n\n----------------------------------------\n\nTITLE: Example Vulnerable Log4j Detection Output\nDESCRIPTION: Sample command output when a vulnerable log4j version is detected, showing multiple file locations of the vulnerable library\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/log4shell-command-use.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk log4shell\nPlease note this command is for already built artifacts. To test source code use `snyk test`.\n\nResults:\nA vulnerable version of log4j was detected: \n         demo-0.0.1-SNAPSHOT/WEB-INF/lib/log4j-core-2.14.1.jar\n         demo-0.0.1-SNAPSHOT.war/WEB-INF/lib/log4j-core-2.14.1.jar\n         demo-0.0.1-SNAPSHOT.war.original/WEB-INF/lib/log4j-core-2.14.1.jar\n\n We highly recommend fixing this vulnerability. If it cannot be fixed by upgrading, see mitigation information here:\n        - https://security.snyk.io/vuln/SNYK-JAVA-ORGAPACHELOGGINGLOG4J-2314720\n        - https://snyk.io/blog/log4shell-remediation-cheat-sheet/\n```\n\n----------------------------------------\n\nTITLE: Testing a rule with snyk-iac-rules test\nDESCRIPTION: This command executes all test cases discovered in matching files for a rule. The `--run` flag filters the tests to be executed for a specific rule. This step is crucial to ensure the rule behaves as expected.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/sdk-reference.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk-iac-rules test --run CUSTOM_RULE\n```\n\n----------------------------------------\n\nTITLE: Listing Connection-Specific Workflows\nDESCRIPTION: Demonstrates the available commands for managing connections in the Universal Broker, including creation, deletion, disconnection, integration, and migration workflows.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/list-and-review-the-universal-broker-configuration-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> snyk-broker-config-workflows connections\nUniversal Broker - Create Connection Workflow\n\nUSAGE\n  > snyk-broker-config workflows connections COMMAND\n  \nCOMMANDS\n workflows connections create     Universal Broker - Create Connection Workflow\n workflows connections delete     Universal Broker - Delete Connection Workflow\n workflows connections disconnect Universal Broker - Connection Disconnect \nIntegration(s) Workflow\n workflows connections get        Universal Broker - Get Connection Workflow\n workflows connections integrate  Universal Broker - Connection Create Integration(s) \nWorkflow\n workflows connections migrate    Universal Broker - Existing Connection Migration \nWorkflow\n```\n\n----------------------------------------\n\nTITLE: SARIF Output Format Testing\nDESCRIPTION: Commands to output and save test results in SARIF format\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test main.tf --sarif\nsnyk iac test main.tf --sarif-file-output=snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Container scan with snyk-to-html conversion\nDESCRIPTION: Command to run a Snyk Container scan on a specified image, pipe the JSON output to snyk-to-html, and generate an HTML report called results-container.html.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-to-html.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk container test [image] --json | snyk-to-html -o results-container.html\n```\n\n----------------------------------------\n\nTITLE: Creating NPM Package Lock File for Snyk Analysis\nDESCRIPTION: This command creates a package-lock.json file for the Node application. This lock file is important for Snyk to accurately analyze the project's dependencies.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/integrate-snyk-into-your-workflow-using-the-cli.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --package-lock\n```\n\n----------------------------------------\n\nTITLE: Linux/Mac Bash Script for Recursive JAR File Scanning\nDESCRIPTION: Bash script to recursively find and scan JAR files using Snyk CLI, with support for MacOS and Linux. Downloads Snyk CLI binary, iterates through JAR files, and provides detailed scan results.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/test-for-vulnerabilities/scan-all-unmanaged-jar-files.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nSNYK_CLI_BINARY_NAME=snyk-cli\nSNYK_CLI_BINARY_LOCATION=https://github.com/snyk/cli/releases/latest/download/\nREMOTE_REPO_URL= #Insert desired project name in Snyk UI here\n\ndetected_jars=\"\"\nundetected_jars=\"\"\ndetected_count=0\nundetected_count=0\n\n[[ -z \"$REMOTE_REPO_URL\" ]] && { echo \"REMOTE_REPO_URL is empty. Please enter REMOTE_REPO_URL (line 6) and re-run script.\" ; exit 1; }\n\n#Download Snyk binary specific to OS (MacOS or Linux)\ncase \"$(uname -s)\" in\n   Darwin)\n     curl -L -O $SNYK_CLI_BINARY_LOCATION/snyk-macos\n     mv snyk-macos snyk-cli\n     ;;\n   Linux)\n     curl -L -O $SNYK_CLI_BINARY_LOCATION/snyk-linux\n     mv snyk-linux snyk-cli\n     ;;\nesac\n\nchmod +x $SNYK_CLI_BINARY_NAME\n\n#Loop through folders recursively to find all .jar files\n#NOTE: will ERROR on files with whitespace in name or contained in directories with whitespace in name\nfor file in $(find . -type f -name '*.jar' | uniq)\ndo\necho \"\"\necho \"=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\"    \necho $file\necho \"=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\"\n\n#Execute Snyk monitor for each .jar\nif (./$SNYK_CLI_BINARY_NAME monitor --scan-unmanaged --file=$file --project-name=$file --remote-repo-url=$REMOTE_REPO_URL) then\n  detected_jars+=$file'\\n'\n  let detected_count++\nelse\n  undetected_jars+=$file'\\n'\n  let undetected_count++\nfi\n\ndone\n\n#Output metrics to the console\necho \"\"\necho \"\"\necho \"\"\necho \"=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\"\necho \"Detected jars ($detected_count) - does not include transitive dependencies:\"\necho \"\"\nif [ ${detected_count} -gt 0 ]; then\n   printf \"${detected_jars}\"\nfi\necho \"\"\necho \"\"\necho \"\"\necho \"=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\"\necho \"Undetected jars ($undetected_count) - not found on Maven Central:\"\necho \"\"\nif [ ${undetected_count} -gt 0 ]; then\n   printf \"${undetected_jars}\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk IaC GitHub Action with Custom Rules Environment Variables\nDESCRIPTION: GitHub Action workflow that uses environment variables to authenticate with an OCI registry and pull down custom rule bundles for Snyk Infrastructure as Code scanning. The workflow uses SNYK_CFG_OCI_REGISTRY_URL, SNYK_CFG_OCI_REGISTRY_USERNAME, and SNYK_CFG_OCI_REGISTRY_PASSWORD environment variables to access the custom rules.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/iac-custom-rules-within-a-pipeline.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nname: Snyk Infrastructure as Code Custom Rules\n\non:\n  push:\n\njobs:\n  snyk-iac-security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Run Snyk to check Infrastructure as Code files for issues\n        continue-on-error: false\n        uses: snyk/actions/iac@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n          SNYK_CFG_OCI_REGISTRY_URL: ${{ secrets.OCI_REGISTRY_URL }}\n          SNYK_CFG_OCI_REGISTRY_USERNAME: ${{ secrets.OCI_REGISTRY_USERNAME }}\n          SNYK_CFG_OCI_REGISTRY_PASSWORD: ${{ secrets.OCI_REGISTRY_PASSWORD }}\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command for GitLab Broker Client Setup\nDESCRIPTION: This command sets up a fully configured Broker Client to analyze Open Source, IaC, Container, Code files, and Snyk Essentials information for GitLab integration. It includes environment variables for token, URLs, and various configuration options.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/gitlab-prerequisites-and-steps-to-install-and-configure-broker/setup-broker-with-gitlab.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --restart=always \\\n           -p 8000:8000 \\\n           -e BROKER_TOKEN=<secret-broker-token> \\\n           -e BROKER_SERVER_URL=<broker-region-url> \\\n           -e GITLAB_TOKEN=<secret-gitlab-token> \\\n           -e GITLAB=<your.gitlab.domain.com (no http/s)> \\\n           -e PORT=8000 \\\n           -e BROKER_CLIENT_URL=<http://broker.url.example:8000 (dns/IP:port)> \\\n           -e ACCEPT_IAC=tf,yaml,yml,json,tpl \\\n           -e ACCEPT_CODE=true \\\n           -e ACCEPT_ESSENTIALS=true \\\n       snyk/broker:gitlab\n```\n\n----------------------------------------\n\nTITLE: High Severity Vulnerability Check with Snyk Python-3.6 Action\nDESCRIPTION: GitHub Action workflow that checks only for high severity vulnerabilities in Python projects using Snyk. Uses severity threshold argument to filter results.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-python-3.6-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Python-3.6 using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/python-3.6@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Checking for High Severity Vulnerabilities with Snyk Gradle Action\nDESCRIPTION: This YAML snippet shows a GitHub workflow that uses the Snyk Gradle Action to check for only high severity vulnerabilities in a Gradle project. It uses the --severity-threshold argument to filter the results.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-gradle-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Gradle using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/gradle@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Encrypting and Decrypting Data Class in TypeScript\nDESCRIPTION: This snippet defines a class that provides methods for encrypting and decrypting strings using the Cryptr library. It takes a secret for initialization and exposes two methods for string operations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/util/encrypt-decrypt.ts\n\nimport Cryptr from \"cryptr\";\n\nexport class EncryptDecrypt {\n  private secret: string;\n  private cryptr: Cryptr;\n\n  constructor(secret: string) {\n    // Uses the passed secret\n    this.secret = secret as string;\n    // Initialize the Cryptr instance with the secret\n    this.cryptr = new Cryptr(this.secret);\n  }\n\n  /**\n   * Function used to encrypt data\n   * @param {String} message to be encrypted\n   * @returns {String} encrypter message\n   */\n  public encryptString(message: string): string {\n    return this.cryptr.encrypt(message);\n  }\n  /**\n   * Function used to decrypt data\n   * @param  {String} encryptedString to be decrypted\n   * @returns {String} decrypted string\n   */\n  public decryptString(encryptedString: string): string {\n    return this.cryptr.decrypt(encryptedString);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Snyk Gradle-jdk16 Action to Check for High Severity Vulnerabilities in YAML\nDESCRIPTION: This snippet shows how to configure the Snyk Gradle (jdk16) Action to check for only high severity vulnerabilities. It uses the --severity-threshold argument to filter the results.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-gradle-jdk16-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Gradle (jdk16) using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/gradle-jdk16@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Checking for High Severity Vulnerabilities with Snyk Gradle-jdk12 Action\nDESCRIPTION: This snippet shows how to configure the Snyk Gradle (jdk12) Action to check for only high severity vulnerabilities. It uses the --severity-threshold argument to set the threshold.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-gradle-jdk12-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Gradle (jdk12) using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/gradle-jdk12@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Registry Agent Docker Image\nDESCRIPTION: Dockerfile configuration for Container Registry Agent with environment variables for broker settings and container registry authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/derived-docker-images-for-broker-client-integrations-and-container-registry-agent.md#2025-04-21_snippet_9\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM snyk/broker:container-registry-agent\n\nENV BROKER_TOKEN          secret-broker-token\nENV BROKER_CLIENT_URL     https://my.broker.client:8000\nENV CR_AGENT_URL          https://my.container.registry.agent\nENV CR_TYPE               container-registry-type\nENV CR_BASE               your.container.registry.domain.com\nENV CR_USERNAME           secret-container-registry-username\nENV CR_PASSWORD           secret-container-registry-password\nENV PORT                  8000\n```\n\n----------------------------------------\n\nTITLE: Snyk .NET Target Framework Example\nDESCRIPTION: This code snippet shows how to use the `--dotnet-target-framework` option with the `snyk test` command when a solution contains multiple `<TargetFramework>` directives. This allows scanning a specific target framework.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/test.md#2025-04-21_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\n\"snyk test --dotnet-runtime-resolution --dotnet-target-framework=net6.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Artifactory Broker Docker Image\nDESCRIPTION: Dockerfile configuration for Artifactory Broker integration with environment variables for broker token and Artifactory URL.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/derived-docker-images-for-broker-client-integrations-and-container-registry-agent.md#2025-04-21_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM snyk/broker:artifactory\n\nENV BROKER_TOKEN      secret-broker-token\nENV ARTIFACTORY_URL   <yourdomain>.artifactory.com\n```\n\n----------------------------------------\n\nTITLE: Gradle Project Options Command Line Arguments\nDESCRIPTION: Command line arguments for Gradle projects in Snyk CLI, including options for sub-project selection, configuration matching, and initialization scripts.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/cli-commands-and-options-summary.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n--sub-project=<NAME>, --gradle-sub-project=<NAME>\n--all-sub-projects\n--configuration-matching=<CONFIGURATION_REGEX>\n--configuration-attributes=<ATTRIBUTE>[,<ATTRIBUTE>]...\n--init-script=<FILE\n```\n\n----------------------------------------\n\nTITLE: Integrating Broker Connection\nDESCRIPTION: Command to integrate the Broker connection with an organization\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/basic-steps-to-install-and-configure-universal-broker.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> snyk-broker-config workflows connections integrate\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure with Service Principal for Snyk IAC\nDESCRIPTION: This snippet demonstrates how to configure Azure authentication using a service principal account with a client secret. It sets the necessary environment variables for authentication before executing the Snyk command to describe infrastructure as code for Azure.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/configure-cloud-providers/configure-azure-provider.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ AZURE_SUBSCRIPTION_ID=00000000-0000-0000-0000-000000000000\\\n  AZURE_TENANT_ID=00000000-0000-0000-0000-000000000000\\\n  AZURE_CLIENT_ID=00000000-0000-0000-0000-000000000000\\\n  AZURE_CLIENT_SECRET=password\\\n  snyk iac describe --to=\"azure+tf\"\n```\n\n----------------------------------------\n\nTITLE: High Severity Vulnerability Check with Snyk Gradle-jdk14 Action in GitHub Workflows\nDESCRIPTION: This snippet shows how to configure the Snyk Gradle-jdk14 Action to check for only high severity vulnerabilities. It uses the --severity-threshold argument to set the threshold to high.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-gradle-jdk14-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Gradle (jdk14) using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/gradle-jdk14@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Retrieving Image Target References - GET\nDESCRIPTION: This snippet represents a GET request to fetch the image target references associated with a specific container image ID within an organization. The swagger specification provides comprehensive information on the request parameters and the structure of the returned data.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/containerimage.md#2025-04-21_snippet_2\n\nLANGUAGE: Swagger\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/orgs/{org_id}/container_images/{image_id}/relationships/image_target_refs\" method=\"get\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n```\n\n----------------------------------------\n\nTITLE: Snyk Infrastructure as Code Action with Specified Paths in YAML\nDESCRIPTION: This example demonstrates how to specify paths to configuration files and directories for the Snyk Infrastructure as Code Action to target during the test. It includes both a Kubernetes manifest file and a Terraform directory.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-infrastructure-as-code-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Snyk Infrastructure as Code\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run Snyk to check Kubernetes manifest file for issues\n        uses: snyk/actions/iac@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          file: your/kubernetes-manifest.yaml your/terraform/directory\n```\n\n----------------------------------------\n\nTITLE: Checking for High Severity Vulnerabilities with Snyk Golang Action\nDESCRIPTION: This YAML snippet shows a GitHub Actions workflow that uses the Snyk Golang Action to check for only high severity vulnerabilities in a Golang project. It uses the --severity-threshold argument to filter results.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-golang-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Golang using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/golang@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Scanning Native Dependencies with Snyk Monitor\nDESCRIPTION: This command runs `snyk monitor` to scan for native dependencies after building the Flutter app. The `--exclude` parameter removes duplicates and ignores example applications. The `snyk monitor` command uploads the dependency information to the Snyk web UI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/dart-and-flutter.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n\"snyk monitor --all-projects --exclude=example,.symlinks\"\n```\n\n----------------------------------------\n\nTITLE: Deactivating Dependency Locking for CompileOnly Configuration in Gradle\nDESCRIPTION: Solution to resolve Gradle lockfile issues by deactivating dependency locking for the deprecated compileOnly configuration in build.gradle.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_14\n\nLANGUAGE: groovy\nCODE:\n```\ncompileOnly {resolutionStrategy.deactivateDependencyLocking() }\n```\n\n----------------------------------------\n\nTITLE: Monitoring Application Container with Dockerfile\nDESCRIPTION: CLI command to monitor an application container image while specifying a Dockerfile path\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/use-snyk-container/use-custom-base-image-recommendations/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk container monitor somecompany/app-python:2021110408 --file=path/to/Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Snyk Service Account Token\nDESCRIPTION: Command to create a Kubernetes secret containing the Snyk service account token that will be used by the Runtime Sensor for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic <<YOUR_SECRET_NAME>> --from-literal=snykToken=<<YOUR_TOKEN>> -n snyk-runtime-sensor\n```\n\n----------------------------------------\n\nTITLE: Illustrating Project Attribute in Snyk Security Policies\nDESCRIPTION: This snippet demonstrates how to reference a Project attribute in a security policy condition. It shows an example of ignoring issues in Projects with a specific business criticality level.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/security-policies/security-policy-actions.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`business` `criticality` attribute of `low`\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Log Level in VS Code\nDESCRIPTION: This snippet shows how to start VS Code from the terminal with the `SNYK_LOG_LEVEL` environment variable set to `debug`. This enables more detailed logging, which can be helpful for troubleshooting issues with the Snyk extension. Alternatively, you can add `-d` to the additional parameters in the Snyk settings.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/visual-studio-code-extension/troubleshooting-for-visual-studio-code-extension.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"cd your-repo SNYK_LOG_LEVEL=debug code .\"\n```\n\n----------------------------------------\n\nTITLE: Creating Snyk Monitor Secret\nDESCRIPTION: Command to create a Kubernetes secret containing the Snyk Integration ID and service account token.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/install-the-snyk-controller-with-helm-azure-and-google-cloud-platform.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic snyk-monitor -n snyk-monitor \\\n        --from-literal=dockercfg.json={} \\\n        --from-literal=integrationId=abcd1234-abcd-1234-abcd-1234abcd1234 \\\n        --from-literal=serviceAccountApiToken=bdca4123-dbca-4343-bbaa-1313cbad4231\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Aggregate Maven Projects with Snyk CLI\nDESCRIPTION: Command to scan non-aggregate Maven projects, testing all projects in the directory structure.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsnyk test --all-projects\n```\n\n----------------------------------------\n\nTITLE: Testing Maven Projects with System Properties\nDESCRIPTION: Command to test a Maven project with a defined system property, setting pkg_version to 1.4.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsnyk test -- -Dpkg_version=1.4\n```\n\n----------------------------------------\n\nTITLE: Uploading Snyk Scan Results to GitHub Code Scanning\nDESCRIPTION: This YAML snippet demonstrates a GitHub Actions workflow that runs the Snyk Golang Action to check for vulnerabilities, generates a SARIF output file, and uploads the results to GitHub Code Scanning. It uses continue-on-error to ensure the upload step runs even if vulnerabilities are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-golang-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Golang using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/golang@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Counting Contributors for Specific Projects\nDESCRIPTION: This command counts contributors for specific projects and their repositories in Bitbucket Server. It requires the Bitbucket Server token, URL, and a comma-separated list of project keys.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-server/bitbucket-server-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count bitbucket-server --token BITBUCKET-TOKEN --url BITBUCKET-URL --projectKeys Key1,Key2...\n```\n\n----------------------------------------\n\nTITLE: Output for Backlog PR Description\nDESCRIPTION: A YAML snippet delivers the output when 'is_backlog_pr' is used, depicting backlog-related PR information in the description following a JSON input.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nThis PR has been opened to fix known vulnerabilities. These vulnerabilities are retrieved from the Project's backlog.\n```\n\n----------------------------------------\n\nTITLE: CycloneDX JSON for Monorepo\nDESCRIPTION: Generates a CycloneDX JSON document for monorepo projects using the Snyk CLI with the '--all-projects' option.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/sbom.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk sbom --format=cyclonedx1.6+json --all-projects\n```\n\n----------------------------------------\n\nTITLE: Creating AWS CloudFormation Stack for Snyk IAM Role using AWS CLI\nDESCRIPTION: This AWS CLI command creates a CloudFormation stack to set up the Snyk IAM role. It uses the provided CloudFormation template file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/aws-integration/aws-integration-web-ui/step-2-create-the-snyk-iam-role.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation create-stack \\\n  --stack-name snyk-cloud-role \\\n  --capabilities CAPABILITY_NAMED_IAM \\\n  --template-body file://snyk-permissions-aws.yml\n```\n\n----------------------------------------\n\nTITLE: Identifying Division By Zero Vulnerabilities\nDESCRIPTION: This entry covers the vulnerabilities resulting from division by zero (CWE-369) in C++. Such errors can cause applications to crash or lead to unintended outcomes.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Running Snyk Broker Docker Container with Environment Variables\nDESCRIPTION: Docker command to run the Snyk Broker container with required environment variables including deployment ID, client credentials, GitHub token, and port configuration. Uses the universal broker image with auto-restart functionality.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/restart-your-broker-for-a-new-environment-variable.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --restart=always \\\n    -p 8000:8000 \\\n    -e ACCEPT_CODE=true \\\n    -e DEPLOYMENT_ID=<DEPLOYMENTID> \\\n    -e CLIENT_ID=<CLIENTID> \\\n    -e CLIENT_SECRET=<CLIENTSECRET> \\\n    -e MY_GITHUB_TOKEN=GITHUB_TOKEN_VALUE \\\n    -e PORT=8000 \\\nsnyk/broker:universal\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple CloudFormation Files\nDESCRIPTION: This example shows how to test multiple CloudFormation files simultaneously using the Snyk Infrastructure as Code CLI. It tests two files named 'file-1.yaml' and 'file-2.yaml'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/cloudformation-files.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test file-1.yaml file-2.yaml\n```\n\n----------------------------------------\n\nTITLE: High Severity Vulnerabilities Scan Workflow\nDESCRIPTION: GitHub Actions workflow that checks for only high severity vulnerabilities using Snyk Python-3.7 Action. Uses severity-threshold argument to filter results.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-python-3.7-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Python-3.7 using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/python-3.7@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Migrating Broker Connection\nDESCRIPTION: Command to migrate an existing Classic Broker connection to Universal Broker for a specific organization\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/upgrade-an-organization-integration-from-classic-broker-to-universal-broker.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-broker-config workflows connections migrate\n```\n\n----------------------------------------\n\nTITLE: Testing Specific Gradle Sub-Projects with Snyk CLI\nDESCRIPTION: Command to scan a specific sub-project in a Gradle build, targeting only that component.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsnyk test --sub-project=myapp\n```\n\n----------------------------------------\n\nTITLE: Fetching Contributor Counts for Selected Organizations - Command Line - Shell\nDESCRIPTION: This command fetches contributor counts for repositories belonging to specific organizations provided by the user. The GitHub token and a comma-separated list of organizations are required as parameters.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/github/github-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsnyk-scm-contributors-count github --token TOKEN --orgs ORG_ONE,ORG_TWO,ORG_THREE\n```\n\n----------------------------------------\n\nTITLE: Filtering from JSON File with snyk-filter\nDESCRIPTION: This example demonstrates using snyk-filter with an input JSON file instead of piping the output directly. It uses a JSON file generated by snyk test and processes it using snyk-filter with an optional custom filter YAML file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-filter.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsnyk-filter -i results-opensource.json\n```\n\nLANGUAGE: shell\nCODE:\n```\nsnyk-filter -i snyk_results.json -f /path/to/example-high-upgradeable-vulns.yml\n```\n\n----------------------------------------\n\nTITLE: Custom AWS Credentials for S3 Backend\nDESCRIPTION: This code snippet demonstrates how to use custom AWS credentials, prefixed with `DCTL_S3_`, to read a Terraform state file from an S3 bucket. It also shows how to specify a region using `DCTL_S3_REGION`. These overrides are useful for reading state in a different region or with different credentials than your infrastructure.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/configure-cloud-providers/configure-aws-provider.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n# Export a dedicated AWS named profile (or any other AWS environment variables) to read your state in your S3 backend\n$ export DCTL_S3_PROFILE=\"s3reader\"\n# Export the usual AWS named profile\n$ export AWS_PROFILE=\"snykrole\"\n$ snyk iac describe --from=\"tfstate+s3://mybucket/terraform.tfstate\"\n\n# You can also use a specific region to authenticate to the S3 bucket\n$ DCTL_S3_REGION=us-east-1 snyk iac describe --from=\"tfstate+s3://mybucket/terraform.tfstate\"\n\n```\n\n----------------------------------------\n\nTITLE: Paginated Request for Package Issues (Bash)\nDESCRIPTION: Example of a paginated API request for listing package issues. It demonstrates how to use the limit and offset parameters to control pagination.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/issues-list-issues-for-a-package.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ http \\\n  \"https://api.snyk.io/rest/orgs/{org_id}/packages/pkg%3Amaven%2fcom.fasterxml.woodstox%2fwoodstox-core%405.0.0/issues\" \\\n  \"Authorization: token $API_TOKEN\" \\\n  version==2024-06-26 \\\n  limit==100 \\\n  offset==0\n```\n\n----------------------------------------\n\nTITLE: Snyk PHP SARIF Results Upload Workflow\nDESCRIPTION: GitHub Actions workflow that generates SARIF output from Snyk scan and uploads results to GitHub Code Scanning. Uses continue-on-error to ensure SARIF upload occurs even if vulnerabilities are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-php-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for PHP using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/php@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Checking for High Severity Vulnerabilities with Snyk CocoaPods Action\nDESCRIPTION: This YAML snippet shows how to configure the Snyk CocoaPods Action to check for only high severity vulnerabilities. It uses the '--severity-threshold=high' argument to filter the results.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-cocoapods-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for CocoaPods using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/cocoapods@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Pushing Bundle Using Snyk CLI Bash\nDESCRIPTION: This snippet shows how to push a custom rules bundle to an OCI registry using the `snyk-iac-rules push` command. Ensure that you are logged into your container registry, e.g., using Docker's `docker login`, before executing the command. Specify the registry URL, bundle file, and optionally a tag for versioning. The command supports only HTTPS protocols.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/pushing-a-bundle.md#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nsnyk-iac-rules push -r docker.io/example/test bundle.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Example Snyk Dep Graph API Response with Vulnerability Data\nDESCRIPTION: Sample JSON response from the Test Dep Graph API showing vulnerability details. The response includes overall status, detailed vulnerability information, affected packages, and organization details.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-open-source/snyk-for-bazel/dep-graph-api.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n{\n    \"ok\": false,\n    \"packageManager\": \"maven\",\n    \"issuesData\": {\n        \"SNYK-JAVA-CHQOSLOGBACK-30208\": {\n            \"CVSSv3\": \"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H\",\n            \"alternativeIds\": [],\n            \"creationTime\": \"2017-03-19T14:58:38Z\",\n            \"credit\": [\n                \"Unknown\"\n            ],\n            \"cvssScore\": 9.8,\n            \"description\": \"## Overview\\n[ch.qos.logback:logback-core](https://mvnrepository.com/artifact/ch.qos.logback/logback-core) is a logback-core module.\\n\\nAffected versions of this package are vulnerable to Arbitrary Code Execution. A configuration can be ...\",\n            \"disclosureTime\": \"2017-03-13T06:59:00Z\",\n            \"exploit\": \"Not Defined\",\n            \"fixedIn\": [\n                \"1.1.11\"\n            ],\n            \"functions\": [],\n            \"id\": \"SNYK-JAVA-CHQOSLOGBACK-30208\",\n            \"identifiers\": {\n                \"CVE\": [\n                    \"CVE-2017-5929\"\n                ],\n                \"CWE\": [\n                    \"CWE-502\"\n                ]\n            },\n            \"language\": \"java\",\n            \"mavenModuleName\": {\n                \"artifactId\": \"logback-core\",\n                \"groupId\": \"ch.qos.logback\"\n            },\n            \"modificationTime\": \"2020-06-12T14:36:56.271247Z\",\n            \"moduleName\": \"ch.qos.logback:logback-core\",\n            \"packageManager\": \"maven\",\n            \"packageName\": \"ch.qos.logback:logback-core\",\n            \"patches\": [],\n            \"proprietary\": false,\n            \"publicationTime\": \"2017-03-21T15:30:44Z\",\n            \"references\": [\n                {\n                    \"title\": \"GitHub Commit #1\",\n                    \"url\": \"https://github.com/qos-ch/logback/commit/f46044b805bca91efe5fd6afe52257cd02f775f8\"\n                },\n                {\n                    \"title\": \"GitHub Commit #2\",\n                    \"url\": \"https://github.com/qos-ch/logback/commit/979b042cb1f0b4c1e5869ccc8912e68c39f769f9\"\n                },\n                {\n                    \"title\": \"Logback News\",\n                    \"url\": \"https://logback.qos.ch/news.html\"\n                },\n                {\n                    \"title\": \"NVD\",\n                    \"url\": \"https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5929\"\n                },\n                {\n                    \"title\": \"NVD\",\n                    \"url\": \"https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5929/\"\n                }\n            ],\n            \"semver\": {\n                \"vulnerable\": [\n                    \"[, 1.1.11)\"\n                ]\n            },\n            \"severity\": \"high\",\n            \"title\": \"Arbitrary Code Execution\"\n        }\n    },\n    \"issues\": [\n        {\n            \"pkgName\": \"ch.qos.logback:logback-core\",\n            \"pkgVersion\": \"1.0.13\",\n            \"issueId\": \"SNYK-JAVA-CHQOSLOGBACK-30208\",\n            \"fixInfo\": {}\n        }\n    ],\n    \"org\": {\n        \"id\": \"3e5fe3fe-9181-4f0f-a231-39764485e73f\",\n        \"name\": \"stephen.elson-xnf\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Machine-Readable Output in JSON (Bash)\nDESCRIPTION: This command allows users to get machine-readable output of the Snyk test results in JSON format, making it easier to integrate with other tools or automate processes.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/c-c++/snyk-cli-for-open-source-c++-scans.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk test --unmanaged --json\n```\n\n----------------------------------------\n\nTITLE: Installing Python Package in Editable Mode\nDESCRIPTION: For Python projects using setup.py, run this command to install the package in editable mode and resolve dependencies before testing with Snyk CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/open-source-projects-that-must-be-built-before-testing-with-the-snyk-cli.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Monitor on a Project - Shell\nDESCRIPTION: Demonstrates the use of the `snyk monitor` command to create a snapshot of current project dependencies, allowing Snyk to monitor and notify about new vulnerabilities. Dependencies must be properly configured to use this functionality.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/getting-started-with-the-snyk-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> snyk monitor\nMonitoring /project (project-name)...\n\nExplore this snapshot at \nhttps://app.snyk.io/org/my-org/project/29361c2c-9005-4692-8df4-88f1c040fa7c/history/e1c994b3-de5d-482b-9281-eab4236c851e\n\nNotifications about newly disclosed issues related to these\ndependencies will be emailed to you.\n\n```\n\n----------------------------------------\n\nTITLE: Checking for High Severity Vulnerabilities with Snyk Gradle-jdk11 Action\nDESCRIPTION: This YAML configuration demonstrates how to use the Snyk Gradle-jdk11 Action to check for only high severity vulnerabilities in a GitHub workflow. It uses the --severity-threshold argument to filter results.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-gradle-jdk11-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Gradle (jdk11) using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/gradle-jdk11@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Scanning Custom Named Manifest Files with Snyk CLI\nDESCRIPTION: This command illustrates how to use a combination of --file and --package-manager options to scan manifest files with custom names from supported languages.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/use-options-to-customize-the-snyk-test-command.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk test --file=req.txt --package-manager=pip\n```\n\n----------------------------------------\n\nTITLE: Sample Log File Output (JSON)\nDESCRIPTION: This snippet shows the structure of the log file generated by the tool, which includes details about the created Jira tickets and associated Snyk vulnerabilities.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-jira-tickets-for-new-vulns.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projects\": {\n    \"123\": [\n      {\n        \"Summary\": \"test/goof:package.json - Remote Code Execution (RCE)\",\n        \"Description\": \"\\r\\n \\\\*\\\\*\\\\*\\\\* Issue details: \\\\*\\\\*\\\\*\\\\*\\n\\r\\n cvssScore:  8.10\\n exploitMaturity:  proof\\\\-of\\\\-concept\\n severity:  high\\n pkgVersions: 3.0.0\\\\]\\n\\r\\n*Impacted Paths:*\\n\\\\- \\\"snyk\\\"@\\\"1.228.3\\\" =\\u003e \\\"proxy\\\\-agent\\\"@\\\"3.1.0\\\" =\\u003e \\\"pac\\\\-proxy\\\\-agent\\\"@\\\"3.0.0\\\" =\\u003e \\\"pac\\\\-resolver\\\"@\\\"3.0.0\\\"\\n\\r\\n[See this issue on Snyk|https://app.snyk.io/org/test/project/123]\\n\\n[More About this issue|https://snyk.io/vuln/SNYK-JS-PACRESOLVER-1589857]\\n\\n\",\n        \"JiraIssueDetail\": {\n          \"JiraIssue\": {\n            \"Id\": \"10001\",\n            \"Key\": \"FPI-001\"\n          },\n          \"IssueId\": \"SNYK-JS-PACRESOLVER-1589857\"\n        }\n      },\n      {\n        \"Summary\": \"test/goof:package.json - Prototype Pollution\",\n        \"Description\": \"\\r\\n \\\\*\\\\*\\\\*\\\\* Issue details: \\\\*\\\\*\\\\*\\\\*\\n\\r\\n cvssScore:  6.30\\n exploitMaturity:  proof\\\\-of\\\\-concept\\n severity:  medium\\n pkgVersions: 4.2.0\\\\]\\n\\r\\n*Impacted Paths:*\\n\\\\- \\\"snyk\\\"@\\\"1.228.3\\\" =\\u003e \\\"configstore\\\"@\\\"3.1.2\\\" =\\u003e \\\"dot\\\\-prop\\\"@\\\"4.2.0\\\"\\n\\r\\\\- \\\"snyk\\\"@\\\"1.228.3\\\" =\\u003e \\\"update\\\\-notifier\\\"@\\\"2.5.0\\\" =\\u003e \\\"configstore\\\"@\\\"3.1.2\\\" =\\u003e \\\"dot\\\\-prop\\\"@\\\"4.2.0\\\"\\n\\r\\n[See this issue on Snyk|https://app.snyk.io/org/test/project/123]\\n\\n[More About this issue|https://snyk.io/vuln/SNYK-JS-DOTPROP-543499]\\n\\n\",\n        \"JiraIssueDetail\": {\n          \"JiraIssue\": {\n            \"Id\": \"10001\",\n            \"Key\": \"FPI-001\"\n          },\n          \"IssueId\": \"SNYK-JS-DOTPROP-543499\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Contributors for a Specific Repository in Bitbucket Cloud\nDESCRIPTION: Command example for getting commits for a single repository by providing username, app password, workspace name, and repository name.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-cloud/bitbucket-cloud-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count bitbucket-cloud --user USERNAME --password APP_PASSWORD --workspaces Workspace1 --repo Repo1\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk SDK with Windows Scoop Manager\nDESCRIPTION: Instructions for using Scoop on Windows to install the Snyk SDK. Scoop must be installed prior to executing these commands.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/install-the-sdk.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nscoop bucket add snyk https://github.com/snyk/scoop-snyk\nscoop install snyk-iac-rules\n```\n\n----------------------------------------\n\nTITLE: Installing the Helm Chart for Snyk Runtime Sensor - Kubernetes Bash\nDESCRIPTION: This command installs the Snyk runtime sensor Helm chart into the specified namespace, allowing for configuration options such as secret name and cluster name.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm install my-runtime-sensor \\\n--set workloadType=deployment \\\n--set secretName=<<YOUR_SECRET_NAME>> \\\n--set clusterName=<<CLUSTER_NAME>> \\\n--set snykGroupId=<<YOUR_GROUP_ID>> \\\n--set snykAPIBaseURL=api.<<REGION>>.snyk.io:443 \\ # Optional\n-n snyk-runtime-sensor \\\nruntime-sensor/runtime-sensor\n```\n\n----------------------------------------\n\nTITLE: Custom Maven Settings Testing\nDESCRIPTION: CLI command to test Maven projects with custom settings.xml location\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/guidance-for-java-and-kotlin.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test -- -s path/to/settings.xml\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Manager for Pip Projects in Snyk\nDESCRIPTION: This command instructs Snyk to consider Pip as the package manager when scanning Pip projects with non-standard manifest files.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/snyk-open-source-specific-ci-cd-strategies.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nsnyk test --file= --package-manager=pip\n```\n\n----------------------------------------\n\nTITLE: Listing Projects for an Organization via REST API\nDESCRIPTION: API endpoint to list all projects for an organization. This is used to retrieve the project_id needed for configuring project-level notification overrides.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/integrate-with-snyk/jira-and-slack-integrations/slack-app.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGET /orgs/{org_id}/projects\n```\n\n----------------------------------------\n\nTITLE: Basic Snyk Python Vulnerability Scan Workflow\nDESCRIPTION: GitHub Actions workflow that performs basic vulnerability scanning using Snyk Python 3.8 Action. It runs on push events and requires a SNYK_TOKEN secret for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-python-3.8-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Python-3.8 using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/python-3.8@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Filtering Resources - Bash\nDESCRIPTION: This snippet illustrates how to filter resources in Snyk's API by specifying query parameters such as environment_id and location. This allows for customized queries to narrow down the results based on specific criteria.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/getting-started-with-cloud-scans/view-cloud-resources.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/resources?environment_id=YOUR-ENVIRONMENT-ID&version=2022-12-21~beta' \\\n  -H 'Authorization: token YOUR-API-TOKEN'\n\ncurl -X GET \\\n  'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/resources?location=us-east-1,us-east-2&version=2022-12-21~beta' \\\n  -H 'Authorization: token YOUR-API-TOKEN'\n\ncurl -X GET \\\n  'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/resources?resource_type=aws_s3_bucket&limit=5&version=2022-12-21~beta' \\\n  -H 'Authorization: token YOUR-API-TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Broker Chart with Override File\nDESCRIPTION: This snippet demonstrates how to install the Snyk Broker Helm Chart using an override.yaml file to add custom environment variables. It sets up the broker for GitHub with specified tokens and URLs.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/custom-additional-options-for-broker-helm-chart-installation.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhelm install snyk-broker-chart snyk-broker/snyk-broker \\\n             --set scmType=github-com \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set scmToken=<ENTER_REPO_TOKEN> \\\n             --set brokerClientUrl=<ENTER_BROKER_CLIENT_URL>:<ENTER_BROKER_CLIENT_PORT> \\\n             --values override.yaml \\\n             -n snyk-broker --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Pinging Snyk Webhook API Request\nDESCRIPTION: HTTP POST request to test a created webhook by sending a ping request. Requires the webhook ID, organization ID, and authentication token.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/how-to-use-snyk-webhooks-to-integrate-new-relic-with-snyk/create-a-snyk-webhook.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.snyk.io/v1/org/{SNYK-ORG-ID}/webhooks/{SNYK-WEBHOOK-ID}/ping HTTP/2\nHost: snyk.io\nAuthorization: token {SNYK-TOKEN}\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Snyk CLI Open Source Dependency Monitoring Command\nDESCRIPTION: Command to monitor all projects in a repository for open source vulnerabilities using Snyk CLI with organization specification\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/implement-snyk/team-implementation-guide/phase-3-gain-visibility/import-projects.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk monitor --all-projects --org=[org-id]\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk Container Security Scan in Azure DevOps\nDESCRIPTION: Defines a Snyk security scan task for testing a container image with specific configuration parameters. Includes service connection, container image details, and scan behavior settings.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/azure-pipelines-integration/simple-example-of-a-snyk-task-to-test-a-container-image.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- task: SnykSecurityScan@1\n  inputs:\n    serviceConnectionEndpoint: 'snykToken'\n    testType: 'container'\n    dockerImageName: 'goof'\n    dockerfilePath: 'Dockerfile'\n    monitorWhen: 'always'\n    failOnIssues: true\n```\n\n----------------------------------------\n\nTITLE: Generate SPDX JSON SBOM Excluding Application Dependencies\nDESCRIPTION: Create an SPDX version 2.3 JSON SBOM for a Redis image while excluding application-level dependencies, focusing only on OS-level components\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/container-sbom.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk container sbom --format=spdx2.3+json redis:latest --exclude-app-vulns\n```\n\n----------------------------------------\n\nTITLE: Converting saved JSON files to HTML with snyk-to-html\nDESCRIPTION: Commands to convert previously saved Snyk scan JSON files to HTML reports using snyk-to-html with the -i (input) and -o (output) options.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-to-html.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-to-html -i results-opensource.json -o results-opensource.html\nsnyk-to-html -i results-code.json -o results-code.html\nsnyk-to-html -i results-container.json -o results-container.html\nsnyk-to-html -i results-iac.json -o results-iac.html\n```\n\n----------------------------------------\n\nTITLE: Disable Snyk CLI Analytics\nDESCRIPTION: Disables all analytics collection by the Snyk CLI. Setting this variable prevents the CLI from sending usage data.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/configure-the-snyk-cli/configure-snyk-cli-to-connect-to-snyk-api.md#2025-04-21_snippet_2\n\nLANGUAGE: environment\nCODE:\n```\n\"SNYK_DISABLE_ANALYTICS=1\"\n```\n\n----------------------------------------\n\nTITLE: Save Snyk Test Output to JSON File\nDESCRIPTION: The `--json-file-output=<OUTPUT_FILE_PATH>` option saves the test results as a JSON file to the specified path. This allows results to be captured in a file for later analysis or record-keeping. Notably, JSON files are only created by the SAST when vulnerabilities are detected.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/code-test.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsnyk code test --json-file-output=vuln.json\n```\n\n----------------------------------------\n\nTITLE: Listing Helm Releases in Bash\nDESCRIPTION: This command lists all Helm releases in the cluster, which is used to identify the Snyk Controller release name.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/overview-of-kubernetes-integration/disable-the-kubernetes-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ helm ls --short\n```\n\n----------------------------------------\n\nTITLE: Filtering Snyk Code Test Results by Severity in CLI\nDESCRIPTION: This command filters the Snyk Code test results to display only issues with a specified severity level and higher. It allows users to focus on the most critical issues in their codebase.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/view-snyk-code-cli-results.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk code test <path/to/folder> --severity-threshold=<low|medium|high>\n```\n\n----------------------------------------\n\nTITLE: Using Snyk dotNET Action to Check for Vulnerabilities in YAML\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to check for vulnerabilities in a dotNET project using Snyk. It includes steps to checkout the code, setup .NET, restore dependencies, and run the Snyk scan.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-dotnet-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for dotNET using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Setup .NET\n        uses: actions/setup-dotnet@4\n      - name: Restore dependencies\n        run: dotnet restore ./path/to/your.sln\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/dotnet@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Adding Project Tags via CLI Command\nDESCRIPTION: Example of using the Snyk CLI monitor command to add project tags for associating projects\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/set-up-insights-for-snyk-apprisk/set-up-insights-associating-snyk-open-source-code-and-container-projects.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk monitor --project-tags=component=pkg:github/my-team/back-end@main\n```\n\n----------------------------------------\n\nTITLE: Annotating Kubernetes Deployment for Snyk Import\nDESCRIPTION: Example YAML configuration showing how to annotate a Kubernetes Deployment to be automatically imported into a Snyk Organization using the orgs.k8s.snyk.io/v1 annotation key with an Organization ID.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/annotated-import.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-app-deployment\n  annotations:\n    orgs.k8s.snyk.io/v1: cacb791e-07cc-4b10-b4be-64de19f532f1\nspec:\n  template:\n    spec:\n      containers:\n      …\n```\n\n----------------------------------------\n\nTITLE: Snyk Infrastructure as Code Action with GitHub Code Scanning Integration in YAML\nDESCRIPTION: This workflow example shows how to use the Snyk Infrastructure as Code Action to generate a SARIF file and upload it to GitHub Code Scanning, enabling the display of issues in the GitHub Security tab.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-infrastructure-as-code-action.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: Snyk Infrastructure as Code\non: push\njobs:\n  snyk:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run Snyk to check configuration files for security issues\n        continue-on-error: true\n        uses: snyk/actions/iac@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: CycloneDX JSON Document Redirect\nDESCRIPTION: Creates a CycloneDX JSON document with Snyk CLI and redirects the output to a file 'mySBOM.json'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/sbom.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk sbom --format=cyclonedx1.6+json > mySBOM.json\n```\n\n----------------------------------------\n\nTITLE: Setting SNYK_LOG_LEVEL Environment Variable\nDESCRIPTION: This snippet shows how to set the SNYK_LOG_LEVEL environment variable to 'trace' to increase the verbosity of log messages generated by the Snyk CLI. This is crucial for obtaining detailed logs and understanding CLI behavior.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/debugging-the-snyk-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport SNYK_LOG_LEVEL=trace\n```\n\n----------------------------------------\n\nTITLE: Automating Lerna Project Scans\nDESCRIPTION: Running a script to automate the scanning of nested package.json files in a Lerna project. This ensures comprehensive monitoring of a monorepo setup using Snyk.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/javascript/javascript-for-open-source.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nls packages | xargs -I PKG_NAME snyk monitor --file=packages/PKG_NAME/package.json\n```\n\n----------------------------------------\n\nTITLE: Output Snyk Test Results in JSON\nDESCRIPTION: The `--json` option with the `snyk code test` command outputs the test results in a JSON data structure format, which can be helpful for integration with other tools or systems that consume JSON.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/code-test.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsnyk code test --json\n```\n\n----------------------------------------\n\nTITLE: Basic Snyk Python-3.7 Vulnerability Scan Workflow\nDESCRIPTION: GitHub Actions workflow that performs basic vulnerability scanning using Snyk Python-3.7 Action. Triggers on push events and requires a SNYK_TOKEN secret.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-python-3.7-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Python-3.7 using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/python-3.7@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Testing for Unmanaged Open Source Dependencies\nDESCRIPTION: This command is used to test unmanaged open source dependencies in a C/C++ project. It helps identify licensing and security issues associated with open source code.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/c-c++/guidance-for-snyk-for-c-c++.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --unmanaged\n```\n\n----------------------------------------\n\nTITLE: Passing Options to Build Tools with Snyk CLI\nDESCRIPTION: Allows passing additional context-specific options to build tools like Gradle or Maven when using Snyk commands. The double dash (`--`) separates Snyk-specific options from build tool options.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/monitor.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsnyk monitor -- --build-cache\n```\n\nLANGUAGE: bash\nCODE:\n```\nsnyk monitor --org=myorg -- -s settings.xml\n```\n\n----------------------------------------\n\nTITLE: Snyk Container Test with JSON File Output\nDESCRIPTION: Runs a Snyk container test and saves the results in JSON format to the specified file. The `--json-file-output` option allows saving the JSON output regardless of the `--json` option usage.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/container-test.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk container test --json-file-output=vuln.json\n```\n\n----------------------------------------\n\nTITLE: Manual JSON Structure for Azure Organizations in Snyk\nDESCRIPTION: JSON structure required for manually creating Azure Organizations in Snyk. The file defines organizations with their names, group IDs, and optional source organization IDs for copying settings.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/creating-organizations-in-snyk.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"orgs\":[\n      {\n         \"name\":\"THE_NAME_OF_AN_AZURE_ORG\",\n         \"groupId\":\"YOUR_SNYK_GROUP_ID\",\n         \"sourceOrgId\":\"THE_SNYK_ORG_ID_FROM_WHICH_TO_COPY_THE_SETTINGS_FROM\"   // **optional**\n      },\n      {\n         \"name\":\"THE_NAME_OF_ANOTHER_AZURE_ORG\",\n         \"groupId\":\"YOUR_SNYK_GROUP_ID\",\n         \"sourceOrgId\":\"THE_SNYK_ORG_ID_FROM_WHICH_TO_COPY_THE_SETTINGS_FROM\"  // **optional**\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Vulnerabilities with Snyk Gradle-jdk11 Action in GitHub Workflow\nDESCRIPTION: This YAML configuration sets up a GitHub workflow to check for vulnerabilities in a Gradle project using Snyk. It runs on push events and uses the Snyk Gradle-jdk11 action with a Snyk API token.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-gradle-jdk11-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Gradle (jdk11) using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/gradle-jdk11@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for AWS Cloud Environment Creation\nDESCRIPTION: This JSON response contains details about the newly created AWS Cloud Environment, including its ID, name, status, and other attributes.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/aws-integration/aws-integration-api/step-3-create-and-scan-a-cloud-environment-api.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonapi\": {\n    \"version\": \"1.0\"\n  },\n  \"data\": {\n    \"id\": \"3b7ccff9-8900-4e54-0000-1234abcd1234\",\n    \"type\": \"environment\",\n    \"attributes\": {\n      \"name\": \"Example AWS Environment\",\n      \"options\": {\n        \"role_arn\": \"arn:aws:iam::123412341234:role/snyk-cloud-role\"\n      },\n      \"native_id\": \"123412341234\",\n      \"properties\": {\n        \"account_id\": \"123412341234\",\n        \"account_alias\": \"example\"\n      },\n      \"kind\": \"aws\",\n      \"revision\": 1,\n      \"created_at\": \"2022-07-31T00:50:49Z\",\n      \"status\": \"in_progress\",\n      \"updated_at\": \"2022-07-31T00:50:49Z\"\n    },\n    \"relationships\": {\n      \"organization\": {\n        \"data\": {\n          \"id\": \"d70c1768-5675-0000-1234-abcd1234abcd\",\n          \"type\": \"organization\"\n        },\n        \"links\": {\n          \"related\": \"/orgs/d70c1768-5675-0000-1234-abcd1234abcd?version=2022-12-21~beta\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Access Policy for S3 Read-Only Access Using JSON\nDESCRIPTION: This JSON snippet outlines the IAM policy required for granting minimal read-only access to an S3 bucket for the `snyk iac describe` command. The policy allows listing the bucket and getting objects within it.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/iac-sources-usage.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:ListBucket\",\n      \"Resource\": \"arn:aws:s3:::mybucket\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:GetObject\",\n      \"Resource\": \"arn:aws:s3:::mybucket/path/to/my/key\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Version in Pipfile\nDESCRIPTION: This snippet demonstrates how to set the required Python version in a Pipfile, which allows Snyk to utilize the correct version during dependency scanning. The Python version specified should reflect the project's requirements.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/python/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n[requires]\npython_version = \"3.6\"\n```\n\n----------------------------------------\n\nTITLE: Snyk CLI Open Source Monitor Command\nDESCRIPTION: This command uses the Snyk CLI to monitor all projects for open source vulnerabilities. It specifies the organization ID using the `--org` flag and the `--all-projects` flag to scan all projects. It reports vulnerabilities passively.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/implement-snyk/enterprise-implementation-guide/phase-3-gain-visibility/import-projects.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk monitor --all-projects --org=[org-id]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Organizations in Snyk\nDESCRIPTION: This command creates organizations in Snyk using a JSON file that contains organization data. It ensures that Snyk recognizes the new organizations created from Bitbucket Server.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-bitbucket-server-organizations-and-repos-in-snyk.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import orgs:create --file=orgs.json\n```\n\n----------------------------------------\n\nTITLE: Running Snyk IaC Test\nDESCRIPTION: This snippet describes the CLI command to test Infrastructure as Code (IaC) configurations using Snyk. The command 'snyk iac test' is used to analyze the IaC files to identify potential security issues. Additionally, you can use 'snyk iac test --report' to generate a detailed report of the findings. Ensure the setup follows the proper configurations for accurate scanning results.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/working-with-snyk/snyk-terms-of-support-and-services-glossary/snyk-jumpstart-services-description.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsnyk iac test\nsnyk iac test --report\n```\n\n----------------------------------------\n\nTITLE: Generating a custom rules bundle with snyk-iac-rules build\nDESCRIPTION: This command packages the OPA policy and data files into a bundle. The `--output` flag specifies the name and location of the resulting bundle. This is necessary for deploying custom rules for Snyk IaC.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/sdk-reference.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk-iac-rules build --output bundle-v1.0.0.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Querying All Resources via GET Request - Bash\nDESCRIPTION: This snippet demonstrates how to send a GET request to the Snyk API to retrieve all resources within an organization. It utilizes the curl command to communicate with the specified endpoint, highlighting the need for an API token for authorization.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/getting-started-with-cloud-scans/view-cloud-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/resources?version=2022-12-21~beta' \\\n  -H 'Authorization: token YOUR-API-TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Registering app with Snyk using curl\nDESCRIPTION: This `curl` command registers a new Snyk App by sending a POST request to the Snyk API. It specifies the app's name, redirect URIs, and scopes.  Replace `<API_TOKEN>` and `<ORG_ID>` with actual values.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --include \\\n     --request POST \\\n     --header \"Content-Type: application/vnd.api+json\" \\\n     --header \"Authorization: token <API_TOKEN>\" \\\n     --data-binary \"{\n       \\\"name\\\": \\\"My Awesome App\\\",\n       \\\"redirectUris\\\": [ \\\"http://localhost:3000/callback\\\" ],\n       \\\"scopes\\\": [ \\\"apps:beta\\\" ]\n       }\" \\\n     'https://api.snyk.io/rest/orgs/<ORG_ID>/apps?version='\n```\n\n----------------------------------------\n\nTITLE: Making API Request for IaC Template using cURL\nDESCRIPTION: API request to retrieve the IaC template from Snyk API. Requires Organization ID and API token with Org Admin privileges.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/google-cloud-integration/google-cloud-integration-api/step-1-download-service-account-iac-template-api.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST \\\n'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/permissions?version=2022-12-21~beta' \\\n-H 'Authorization: token YOUR-API-TOKEN' \\\n-H 'Content-Type:application/vnd.api+json' -d '{\n    \"data\": {\n        \"attributes\": {\n            \"type\": \"tf\",\n            \"platform\": \"google\"\n        },\n        \"type\": \"permissions\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Monitoring Dependencies with Snyk CLI in CI/CD\nDESCRIPTION: Command to continuously monitor project dependencies for vulnerabilities. This should be run in the deployment process with SNYK_TOKEN environment variable configured.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/ci-cd-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk monitor\n```\n\n----------------------------------------\n\nTITLE: Creating organizations in Snyk from GitHub data\nDESCRIPTION: Command to create Snyk organizations based on the previously generated organization data file. This step establishes the organizational structure in Snyk to mirror GitHub.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-github.com-and-github-enterprise-organizations-and-repos-in-snyk.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import orgs:create --file=orgs.json\n```\n\n----------------------------------------\n\nTITLE: Testing a Python Project with Custom File\nDESCRIPTION: This snippet indicates how to test a Python project using a custom requirements file, requiring the use of the `--package-manager=pip` option.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/monitor.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --file=requirements-dev.txt --package-manager=pip\n```\n\n----------------------------------------\n\nTITLE: API Response: Vulnerability Fixes and Representations (JSON)\nDESCRIPTION: Example of how vulnerability fixes and package version representations are structured in the API response.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/issues-list-issues-for-a-package.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"coordinates\": [\n    {\n        \"remedies\": [\n            {\n                \"type\": \"indeterminate\",\n                \"description\": \"Upgrade the package version to 4.2.15,5.0.8 to fix this vulnerability\",\n                \"details\": {\n                    \"upgrade_package\": \"4.2.15,5.0.8\"\n                }\n            }\n        ],\n        \"representations\": [\n            {\n                \"resource_path\": \"[,4.2.15),[5.0,5.0.8)\"\n            },\n            {\n                \"package\": {\n                    \"name\": \"django\",\n                    \"version\": \"4.2.14\",\n                    \"type\": \"pypi\",\n                    \"url\": \"pkg:pypi/django@4.2.14\"\n                }\n            }\n        ]\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring dockercfg.json for GKE using Google Artifact Registry\nDESCRIPTION: This JSON structure shows the configuration of dockercfg.json for Google Kubernetes Engine (GKE) using Google Artifact Registry (GAR). It requires a service account key.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/authenticate-to-private-container-registries.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auths\": {\n\t\"northamerica-northeast2-docker.pkg.dev\": {\n  \t\"auth\": \"<output from \\\"echo -n \\\"_json_key:$(cat <path to file containing raw key>)\\\" | base64\\\"\"}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Snyk CLI with Homebrew (macOS, Linux)\nDESCRIPTION: This snippet shows how to install the Snyk CLI on macOS or Linux using Homebrew.  It first taps the Snyk Homebrew tap and then installs the Snyk CLI. This method uses Homebrew's package management to handle updates.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/install-or-update-the-snyk-cli/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap snyk/tap\nbrew install snyk\n```\n\n----------------------------------------\n\nTITLE: Source File Extensions\nDESCRIPTION: Supported source code file extensions for Java and Kotlin in Snyk Code\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/README.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n.java\n.jsp\n.jspx\n.kt\n```\n\n----------------------------------------\n\nTITLE: Retrieving Container Images - GET\nDESCRIPTION: This snippet represents a GET request to retrieve container images for a given organization ID. The specific details of the request, including parameters and response structure, are defined in the referenced swagger specification.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/containerimage.md#2025-04-21_snippet_0\n\nLANGUAGE: Swagger\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/orgs/{org_id}/container_images\" method=\"get\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n```\n\n----------------------------------------\n\nTITLE: Bash Command - Running a Specific Test\nDESCRIPTION: This command executes a specific Rego test case, `test_MY_RULE`, using the `snyk-iac-rules test` command with the `--run` option. It is useful for targeting individual tests during development and debugging.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/testing-a-rule.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk-iac-rules test --run test_MY_RULE\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for snyk iac describe\nDESCRIPTION: This command displays the help information for the `snyk iac describe` command. It provides a list of available options and their usage.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/iac-describe-command-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac describe --help\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Server Certificates in Helm\nDESCRIPTION: Commands to set up HTTPS server by specifying certificate and key files from the Helm chart directory.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/parameters-for-troubleshooting-and-providing-your-own-certificate-with-helm.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--set httpsCert=<CERT_NAME> --set httpsKey=<CERT_KEY>\n```\n\n----------------------------------------\n\nTITLE: Accessing Fields in Rego from Terraform Plan Structure - Rego\nDESCRIPTION: This Rego code snippet shows how to access the 'tags' field from the parsed JSON structure of a Terraform VPC resource in Rego.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/parsing-an-input-file.md#2025-04-21_snippet_11\n\nLANGUAGE: Rego\nCODE:\n```\ninput.resource.aws_vpc.example.tags\n```\n\n----------------------------------------\n\nTITLE: Rendering Helm Charts on macOS/Linux/Unix\nDESCRIPTION: This snippet shows how to render Helm charts to output Kubernetes manifest files and scan them with Snyk IAC on Unix-like systems. The commands utilize the Helm CLI to generate templates and the Snyk CLI for scanning.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/helm-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm template ./helm --output-dir ./output\nsnyk iac test ./output\n```\n\n----------------------------------------\n\nTITLE: Creating Organizations in Snyk\nDESCRIPTION: Command to create organizations in Snyk based on the generated organization data file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-gitlab-organizations-and-repos-in-snyk.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import orgs:create --file=orgs.json\n```\n\n----------------------------------------\n\nTITLE: Installing npm Dependencies for JavaScript Projects\nDESCRIPTION: For npm projects without a package-lock.json file, run this command to generate the lockfile and install dependencies before testing with Snyk CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/open-source-projects-that-must-be-built-before-testing-with-the-snyk-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Debugging Snyk Log4Shell Command Outputs\nDESCRIPTION: To obtain debug information while running the snyk log4shell command, users can utilize the `-d` option. This assists in diagnosing issues by providing extended logging of the command's execution.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/log4shell.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n`-d`\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Snyk CLI via npm\nDESCRIPTION: This command installs the latest version of the Snyk CLI globally using npm. It allows users to access the new IaC CLI output results available in version 1.939.0 and later.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/understand-the-iac-cli-test-results/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install snyk -g\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Snyk CLI Version in GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates how to install a specific version of the Snyk CLI using the Snyk Setup Action and retrieve the installed version. It defines a GitHub Actions workflow that triggers on push events, checks out the code, sets up Go, installs the specified Snyk CLI version using the `snyk-version` property of the Snyk Setup Action, and then prints the installed version.  It also runs a Snyk monitor command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-setup-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Snyk example\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - uses: snyk/actions/setup@master\n      id: snyk\n      with:\n        snyk-version: v1.391.0\n    - uses: actions/setup-go@v1\n      with:\n        go-version: \"1.13\"\n    - name: Snyk version\n      run: echo \"${{ steps.snyk.outputs.version }}\"\n    - name: Snyk monitor \n      run: snyk monitor\n      env:\n        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Updating Python Dependencies with pipenv\nDESCRIPTION: For Python projects using pipenv, run this command to update and install dependencies before testing with Snyk CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/open-source-projects-that-must-be-built-before-testing-with-the-snyk-cli.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npipenv update\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Services to Inspect\nDESCRIPTION: This command specifies multiple AWS services to include in the report. It uses the `--service` option with a comma-separated list of services (e.g., `aws_s3`, `aws_ec2`).\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/iac-describe-command-examples.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac describe --service=\"aws_s3,aws_ec2\"\n```\n\n----------------------------------------\n\nTITLE: Generating Poetry Lockfile for Python Projects\nDESCRIPTION: For Python projects using Poetry without an existing lockfile, run this command to generate a poetry.lock file before testing with Snyk CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/open-source-projects-that-must-be-built-before-testing-with-the-snyk-cli.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npoetry lock\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Boolean Rule with Rego\nDESCRIPTION: This snippet illustrates a basic example of a Rego rule that denies access based on the absence of an 'owner' tag in AWS Redshift Cluster resources. It utilizes the walrus operator for variable assignment and logical checks.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/examples-of-iac-custom-rules.md#2025-04-21_snippet_0\n\nLANGUAGE: rego\nCODE:\n```\npackage rules\n\ndeny[msg] {\n    resource := input.resource.aws_redshift_cluster[name]\n    not resource.tags.owner\n\n    msg := {\n        \"publicId\": \"CUSTOM-RULE-1\",\n        \"title\": \"Missing an owner from tag\",\n        \"severity\": \"medium\",\n        \"msg\": sprintf(\"input.resource.aws_redshift_cluster[%s].tags\", [name]),\n        \"issue\": \"\",\n        \"impact\": \"\",\n        \"remediation\": \"\",\n        \"references\": [],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bash Command - Running All Tests\nDESCRIPTION: This command executes all Rego tests located within the `rules/` directory using the `snyk-iac-rules test` command.  It assumes the current working directory is the root of the project.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/testing-a-rule.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\" snyk-iac-rules test\"\n```\n\n----------------------------------------\n\nTITLE: Nexus 3 - BASE_NEXUS_URL Example\nDESCRIPTION: This example shows how to set the BASE_NEXUS_URL environment variable for a Nexus 3 deployment, including optional authentication details.  It emphasizes the URL format and the need for URL encoding when authentication is required.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/nexus-repository-prerequisites-and-steps-to-install-and-configure-broker/nexus-repository-environment-variables-for-snyk-broker.md#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"BASE_NEXUS_URL=https://[<username_or_token><password_or_token>]@<your.nexus.hostname]\"\n```\n\n----------------------------------------\n\nTITLE: Listing Apps Created by an Organization - HTTP GET Request\nDESCRIPTION: This snippet demonstrates how to view a list of Snyk Apps owned by a specific organization by sending a GET request to the apps/creations endpoint. The endpoint requires the organization ID and version as parameters.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/manage-app-details.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://api.snyk.io/rest/orgs/{orgId}/apps/creations?version={version}\n```\n\n----------------------------------------\n\nTITLE: Set Default Organization for Snyk Commands (Shell)\nDESCRIPTION: Use the Snyk CLI to configure a default organization for running commands, ensuring projects are monitored under the correct organization. Use the `orgslugname` as seen in the URL, though it is limited to CLI usage.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/container-monitor.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n`$ snyk config set org=<ORG_ID>`\n```\n\n----------------------------------------\n\nTITLE: Running CLI Commands with Specific Organization\nDESCRIPTION: Override the global organization setting for individual CLI command executions. Useful for scanning or monitoring projects in a specific organization.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-admin/groups-and-organizations/switch-between-groups-and-organizations.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --org=ORG_ID\n```\n\nLANGUAGE: bash\nCODE:\n```\nsnyk monitor --org=ORG_ID\n```\n\n----------------------------------------\n\nTITLE: Provision a User to Organization API Request Model\nDESCRIPTION: JSON request model for provisioning a user to a Snyk organization with role permissions. You can specify either 'role' or 'rolePublicId' (for Enterprise plans with custom roles) but not both in the same call.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-admin/user-management-with-the-api/provision-users-to-organizations-using-the-api.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"email\": \"test@example.com\",\n\"rolePublicId\": \"\",\n\"role\": \"ADMIN\"\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Snyk Scan Results to GitHub Code Scanning\nDESCRIPTION: This YAML configuration demonstrates how to run a Snyk scan on a Maven project and upload the results to GitHub Code Scanning. It uses the '--sarif-file-output' option to generate a SARIF file and the GitHub SARIF upload action to upload the results. The 'continue-on-error' option is used to ensure the upload step runs even if vulnerabilities are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-maven-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Maven using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/maven@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: SPDX JSON Document Creation\nDESCRIPTION: Command to create an SPDX JSON document with Snyk CLI and save it to 'mySBOM.json'. Uses 'spdx2.3+json' format.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/sbom.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk sbom --format spdx2.3+json --json-file-output mySBOM.json\n```\n\n----------------------------------------\n\nTITLE: Installing jq and snyk-filter dependencies\nDESCRIPTION: This shell script installs the jq binary on Ubuntu and sets environment variables to inform node-jq about its location. It also includes the command to install snyk-filter globally using npm. Ensure that node version is not greater than 12 for this setup.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-filter.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install -y jq\nexport NODE_JQ_SKIP_INSTALL_BINARY=true\nexport JQ_PATH=$(which jq)\nsudo npm install -g\n```\n\n----------------------------------------\n\nTITLE: Testing a Single CloudFormation File\nDESCRIPTION: This example demonstrates how to test a single CloudFormation file named 'deploy.yaml' using the Snyk Infrastructure as Code CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/cloudformation-files.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test deploy.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing snyk-api-import with Yarn\nDESCRIPTION: Command to install the snyk-api-import CLI globally using Yarn package manager.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add snyk-api-import\n```\n\n----------------------------------------\n\nTITLE: Ignoring Vulnerabilities in Snyk CLI Using Shell\nDESCRIPTION: The `snyk ignore` command in shell allows users to modify the `.snyk` policy file, to ignore specific vulnerabilities using their Snyk ID. It supports options for setting an expiry date, reason, file path, and more, making it a versatile tool for vulnerability management. The primary dependencies are the Snyk CLI and a .snyk policy file; key parameters include `--id`, `--expiry`, and `--reason`.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/ignore.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ snyk ignore --id='npm:qs:20170213' --expiry='2021-01-10' --reason='Module not affected by this vulnerability'\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ snyk ignore --id='SNYK-JS-PATHPARSE-1077067' --expiry='2021-01-10' --path='nyc@11.9.0 > istanbul-lib-report@1.1.3 > path-parse@1.0.5' --reason='Module not affected by this vulnerability'\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ snyk ignore --id='SNYK-JS-PATHPARSE-1077067' --expiry='2021-01-10' --path='nyc@11.9.0'\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ snyk ignore --id=npm:tough-cookie:20160722\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ snyk ignore --file-path='./deps/curl-7.58.0/src/tool_msgs.c' --expiry='2031-01-20' --reason='patched file'\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ snyk ignore --file-path='./**/vendor/**/*.cpp' --file-path-group='global'\n```\n\n----------------------------------------\n\nTITLE: Generating Organization Data from GitLab\nDESCRIPTION: Command to generate organization data from GitLab for import into Snyk, specifying the GitLab group ID to mirror.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-gitlab-organizations-and-repos-in-snyk.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import orgs:data --source=gitlab --groupId=<snyk_group_id>\n```\n\n----------------------------------------\n\nTITLE: High Recall Mode for Source and Sink Identification\nDESCRIPTION: This JavaScript snippet demonstrates using Snyk's high recall mode to comprehensively identify all known data sources and sinks in the application code. This mode aids in thorough code analysis, highlighting all potential data flow paths without focusing on specific vulnerabilities.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/create-query.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPRED:AnySource\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPRED:AnySink\n```\n\n----------------------------------------\n\nTITLE: Setting HTTPS Proxy for Helm Chart Installation\nDESCRIPTION: Command to configure HTTPS proxy settings when installing a Helm chart. Uses the --set flag to specify the proxy URL parameter.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/proxy-settings-for-broker-helm-chart-installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--set httpsProxy=<PROXY_URL>\n```\n\n----------------------------------------\n\nTITLE: Using AWS Profile with Snyk IaC Describe\nDESCRIPTION: This code snippet shows how to execute the `snyk iac describe` command while overriding the default AWS profile using the `AWS_PROFILE` environment variable. This allows the command to use the specified profile's credentials for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/configure-cloud-providers/configure-aws-provider.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ AWS_PROFILE=snykrole snyk iac describe\n```\n\n----------------------------------------\n\nTITLE: Creating Namespace for Snyk Runtime Sensor - Kubernetes Bash\nDESCRIPTION: This command creates a new Kubernetes namespace called 'snyk-runtime-sensor' which will be used to deploy the Snyk runtime sensor resources.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace snyk-runtime-sensor\n```\n\n----------------------------------------\n\nTITLE: Scanning Unmanaged JAR Files with Snyk CLI\nDESCRIPTION: Options for testing unmanaged JAR, WAR, and AAR files with Snyk CLI. These options allow scanning of individual files or auto-detection of files in a directory.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n--scan-unmanaged\n```\n\nLANGUAGE: shell\nCODE:\n```\n--scan-unmanaged --file=<JAR_FILE_NAME>\n```\n\nLANGUAGE: shell\nCODE:\n```\n--scan-all-unmanaged\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Rules Tag Only with Snyk API\nDESCRIPTION: Simplified JSON payload for updating only the tag of a custom rules bundle. This allows for changing the version of the bundle without modifying other settings.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/use-iac-custom-rules-with-cli/use-a-remote-iac-custom-rules-bundle.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"data\": {\n         \"type\": \"iac_settings\",\n         \"attributes\": {\n           \"custom_rules\": {\n             \"oci_registry_tag\": \"1.3.14\"\n           }\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Dependency Paths with Snyk Test Command (Bash)\nDESCRIPTION: This command is used to display the paths of each file contributing to the identified dependencies during a Snyk test.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/c-c++/snyk-cli-for-open-source-c++-scans.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk test --unmanaged --print-dep-paths\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby Dependencies with Bundler\nDESCRIPTION: For Ruby projects using Bundler without a Gemfile.lock file, run this command to generate the lockfile and install dependencies before testing with Snyk CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/open-source-projects-that-must-be-built-before-testing-with-the-snyk-cli.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Kubernetes Files Example\nDESCRIPTION: This example shows how to use the Snyk CLI to test multiple Kubernetes configuration files simultaneously by specifying their names after the 'test' command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/kubernetes-files.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test file-1.yaml file-2.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Snyk App in Interactive Mode using CLI\nDESCRIPTION: This snippet shows how to create a Snyk App using the Snyk CLI in interactive mode, allowing the user to input details such as app name, redirect URIs, permission scopes, and organization ID through prompts. The '--experimental' flag is necessary to access this feature.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/create-a-snyk-app-using-the-snyk-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: CLI\nCODE:\n```\nsnyk apps create --experimental --interactive\n\n? Name of the Snyk App (visible to users when they install the Snyk App)? My Awesome Snyk App\n? Your Snyk App's redirect URIs (comma-separated list.  Ex: https://example1.com,https://example2.com)?:  https://example1.com\n? Your Snyk App's permission scopes (comma-separated list.  Ex: org.read)?:  apps:beta\n? Please provide the org id under which you want to create your Snyk App:  48ebb069-472f-40f4-b5bf-d2d103bc02d4\n```\n\n----------------------------------------\n\nTITLE: Understanding Exit Codes for Snyk Log4Shell Command\nDESCRIPTION: This section explains the exit codes returned by the `snyk log4shell` command, helping users to interpret the outcomes of their scans. Exit code 0 indicates no vulnerabilities found, code 1 indicates vulnerabilities were found, and code 2 indicates a failure occurred during the scan.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/log4shell.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n0: success (scan completed), Log4Shell not found\n```\n\nLANGUAGE: bash\nCODE:\n```\n1: action_needed (scan completed), Log4Shell found\n```\n\nLANGUAGE: bash\nCODE:\n```\n2: failure, try to re-run the command. Use -d to output the debug logs.\n```\n\n----------------------------------------\n\nTITLE: Generating CycloneDX JSON for Local Project\nDESCRIPTION: Command to create a CycloneDX JSON document for local software projects using the Snyk CLI. Specifies the 'cyclonedx1.6+json' format.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/sbom.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk sbom --format=cyclonedx1.6+json\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Token Scopes for Snyk in Shell\nDESCRIPTION: This snippet details the GitHub token scopes necessary for Snyk's `iac describe` to enumerate all supported GitHub resources correctly. It specifies the minimum scopes needed, including `repo` for accessing private repositories and `read:org` for obtaining organization-related data.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/configure-cloud-providers/configure-github-provider.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Required to enumerate private repos\nrepo\n\n# Required to list your organization teams\n# and other organization related resources\nread:org\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Output Format\nDESCRIPTION: Example JSON output showing the application ID after successful infrastructure creation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/azure-integration-for-cloud-configurations/azure-integration-web-ui/step-2-create-the-entra-id-app-registration.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"application_id\": \"12345678-9012-3456-7890-12345678abcd\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying for Unmatched Sinks in Starlang\nDESCRIPTION: This Starlang query locates unmatched sinks, focusing on elements like java.sql.Connection objects that are ready to receive data but lack incoming data flows.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/create-query.md#2025-04-21_snippet_8\n\nLANGUAGE: starlang\nCODE:\n```\nPRED:AnySink and not DataFlowsFrom<PRED:AnySource>\n```\n\n----------------------------------------\n\nTITLE: Accessing Fields in Rego from Terraform Structure - Rego\nDESCRIPTION: This Rego code snippet shows how to access the 'node_type' field from the parsed JSON structure for an AWS Redshift cluster in Rego.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/parsing-an-input-file.md#2025-04-21_snippet_9\n\nLANGUAGE: Rego\nCODE:\n```\ninput.resource.aws_redshift_cluster.example.node_type\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Broker for GitHub using Helm\nDESCRIPTION: Helm installation command for Snyk Broker with GitHub configuration. Includes essential parameters like broker token, SCM token, server URL, and enables Snyk Essentials. Creates a dedicated namespace for the broker installation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/github-prerequisites-and-steps-to-install-and-configure-broker/github-install-and-configure-using-helm.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install snyk-broker-chart snyk-broker/snyk-broker \\\n             --set scmType=github-com \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set brokerServerUrl=<broker-region-url>\n             --set scmToken=<ENTER_REPO_TOKEN> \\\n             --set enableEssentials=true \\\n             --set brokerClientUrl=<ENTER_BROKER_CLIENT_URL>:<ENTER_BROKER_CLIENT_PORT> \\\n             -n snyk-broker --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Setting Snyk Organization locally for specific CLI test\nDESCRIPTION: This snippet shows how to specify an Organization for a specific CLI test, overriding the default Organization. It requires the Snyk CLI to be installed and the `--org` parameter followed by either the Organization ID or internal name. The organization will be used only for this specific test.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/set-the-snyk-organization-for-the-cli-tests.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n--org=<ORG_ID_or_ORG_INTERNAL_NAME>\n```\n\n----------------------------------------\n\nTITLE: Sending API Request to Retrieve Azure IaC Template (Bash)\nDESCRIPTION: This curl command sends a POST request to the Snyk API to retrieve either a Terraform or Bash script for Azure app registration. It requires the organization ID, API token, Azure subscription ID, and tenant ID.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/azure-integration-for-cloud-configurations/azure-integration-api/step-1-download-azure-app-registration-iac-template-or-script-api.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/permissions?version=2022-12-21~beta' \\\n-H 'Authorization: token YOUR-API-TOKEN' \\\n-H 'Content-Type:application/vnd.api+json' -d '{\n    \"data\": {\n        \"attributes\": {\n            \"options\": {\n              \"subscription_id\": \"YOUR-SUBSCRIPTION-ID\",\n              \"tenant_id\": \"YOUR-TENANT-ID\"\n            },\n            \"type\": \"INPUT-TYPE\",\n            \"platform\": \"azure\"\n        },\n        \"type\": \"permissions\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Viewing Single Resource Details - Bash\nDESCRIPTION: This snippet shows how to retrieve detailed information about a specific cloud resource using the Snyk API by requesting its resource ID. The format of the request is similar to previous examples and also requires an API token for authorization.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/getting-started-with-cloud-scans/view-cloud-resources.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/resources?id=YOUR-RESOURCE-ID&version=2022-12-21~beta' \\\n  -H 'Authorization: token YOUR-API-TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace for Snyk Runtime Sensor\nDESCRIPTION: Command to create a dedicated Kubernetes namespace for the Snyk Runtime Sensor deployment.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace snyk-runtime-sensor\n```\n\n----------------------------------------\n\nTITLE: Python Project Options Command Line Arguments\nDESCRIPTION: Command line arguments for Python projects in Snyk CLI, including options for custom commands, unresolved dependencies, and package management.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/cli-commands-and-options-summary.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n--command=<COMMAND>\n--skip-unresolved=true|false\n--File=<filename>\n--pakage-manager=<package manager>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Cloud Environment using Snyk API - Bash\nDESCRIPTION: This code snippet demonstrates how to use a CURL command to send a DELETE request to the Snyk API to remove a specified cloud environment by providing the organization ID and environment ID. Ensure to replace 'YOUR-ORGANIZATION-ID' and 'YOUR-ENVIRONMENT-ID' with actual values, and include an authorization token for access.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/getting-started-with-cloud-scans/manage-cloud-environments/remove-a-cloud-environment.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE \\\n  'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/environments/YOUR-ENVIRONMENT-ID?version=2022-12-21~beta' \\\n  -H 'Authorization: token YOUR-SERVICE-ACCOUNT-TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Directories from Snyk IaC Scans\nDESCRIPTION: This command scans all .tf files except those in the 'prod' directory. It uses the find command with the -not -path option to exclude the production environment files while scanning all other Terraform files in the project.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/iac-exclusions-using-the-command-line.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfind . -name '*.tf' -not -path './prod/*' | xargs snyk iac test\n```\n\n----------------------------------------\n\nTITLE: Defining Taint Matcher in Specification Language\nDESCRIPTION: This snippet defines the 'Taint' matcher, which identifies data propagation flows from specified sources to designated sinks without passing through defined sanitizers. It includes template parameters 'Source', 'Sanitizer', and 'Sink'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/templates-and-predicates.md#2025-04-21_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n#### Taint\n\nIdentify data propagation flows that start at the specified source(s) and reach the designated destination sinks (like vulnerable methods) without going through the specified sanitizer(s).\n\nTemplate parameters:\n\n* Source\n* Sanitizer\n* Sink\n```\n\n----------------------------------------\n\nTITLE: Multi-Key Kubernetes Secret Definition\nDESCRIPTION: Example of a Kubernetes secret containing multiple keys for Nexus configuration\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/kubernetes-secrets-and-helm-chart-installation.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: snyk-broker-secrets\ntype: Opaque\ndata:\n  nexus-broker-token-key: <broker-token-here>\n  nexus-nexus-url: https://user:pass@nexus.tld/myrepository\n  nexus-base-nexus-url: https://user:pass@nexus.tld\n  nexus-broker-client-validation-url: https://user:pass@nexus.tld/service/rest/v1/status/check\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Helm Chart with Custom API Endpoint\nDESCRIPTION: Command to install the Snyk Monitor Helm chart with a custom API endpoint for self-hosted instances.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/install-the-snyk-controller-with-helm-azure-and-google-cloud-platform.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install snyk-monitor snyk-charts/snyk-monitor \\\n             --namespace snyk-monitor \\\n             --set clusterName=\"Production cluster\" \\\n             --set integrationApi=https://<server>/kubernetes-upstream\n```\n\n----------------------------------------\n\nTITLE: Updating Organization Settings (PUT /org/{orgId}/settings)\nDESCRIPTION: API endpoint to update the settings of an organization. This endpoint is part of the v1 API and uses the PUT method, requiring the organization ID as a path parameter.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/organizations-v1.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/org/{orgId}/settings\" method=\"put\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Scala Action for Vulnerability Check\nDESCRIPTION: This snippet demonstrates a basic GitHub Actions workflow that uses the Snyk Scala Action to scan a Scala project for vulnerabilities. It checks out the code, runs the Snyk scan, and requires a Snyk API token stored as a GitHub secret.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-scala-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Scala using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/scala@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Output Results in JSON Format\nDESCRIPTION: Command to retrieve contributor counts and output the results in JSON format. Uses the json flag along with required token and host URL parameters.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/github-enterprise/github-enterprise-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count github-enterprise --token TOKEN --url HOST_URL --json\n```\n\n----------------------------------------\n\nTITLE: Example of JSON Export Command\nDESCRIPTION: Practical example of exporting Snyk code test results to a JSON file named 'json' in the current directory.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/view-snyk-code-cli-results.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsnyk code test --json-file-output=json\n```\n\n----------------------------------------\n\nTITLE: Generating organization data for re-import skipping empty organizations\nDESCRIPTION: Command to generate organization data from GitHub specifically for re-importing, using the skipEmptyOrg flag to ignore organizations that don't have any repositories.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-github.com-and-github-enterprise-organizations-and-repos-in-snyk.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import orgs:data --source=github --groupId=<snyk_group_id> --skipEmptyOrg\n```\n\n----------------------------------------\n\nTITLE: Disabling Snyk Runtime Sensor Add-on\nDESCRIPTION: AWS CLI command to disable and remove the Snyk Runtime Sensor add-on from an Amazon EKS cluster when it's no longer needed.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\naws eks delete-addon --addon-name snyk_runtime-sensor --cluster-name $CLUSTER_NAME --region $AWS_REGION\n```\n\n----------------------------------------\n\nTITLE: Uploading Snyk Scan Results to GitHub Code Scanning with CocoaPods Action\nDESCRIPTION: This YAML snippet demonstrates how to use the Snyk CocoaPods Action to generate a SARIF file and upload it to GitHub Code Scanning. It uses the '--sarif-file-output' option and the GitHub SARIF upload action. The 'continue-on-error' option is used to ensure the upload step runs even if vulnerabilities are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-cocoapods-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for CocoaPods using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/cocoapods@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Configuring Existing Service Account for Helm Chart Installation\nDESCRIPTION: This snippet shows the parameters that need to be added to a Helm install command to use an existing service account instead of creating a new one. It disables the creation of a service account and specifies the name of an existing one to use.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/service-accounts-for-helm-chart-installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--set serviceAccount.create=false \\\n--set serviceAccount.name=<ENTER_EXISTING_SERVICE_ACCOUNT> \\\n```\n\n----------------------------------------\n\nTITLE: Running Snyk CLI in Debug Mode for GitLab\nDESCRIPTION: Prepends DEBUG=snyk* to run snyk-scm-contributors-count with verbose output for debugging purposes. This setup is essential for troubleshooting and understanding in-depth command operations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/gitlab-and-gitlab-server/gitlab-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n\"DEBUG=snyk* snyk-scm-contributors-count gitlab --token TOKEN --url URL --exclusionFilePath PATH_TO_FILE --json\\n\"\n```\n\n----------------------------------------\n\nTITLE: Query Language Formal Syntax in EBNF\nDESCRIPTION: Extended Backus-Naur Form (EBNF) syntax definition for the Snyk Code Query Language, defining the structure of queries, terms, literals, regular expressions, predicates, and templates.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/README.md#2025-04-21_snippet_3\n\nLANGUAGE: ebnf\nCODE:\n```\n<query> ::= <term> | <term> \" \" <query>\n<term> ::= <literal> | <regexp> | <predicate> | <template>\n<literal> ::= \"\\\"\" <value> \"\\\"\"\n<regexp> ::= \"~\\\"\" <value> \"\\\"\"\n<predicate> ::= \"PRED:\" <predicate-name>\n<template> ::= <template-name> \"<\" <template-params>  \">\"\n<template-params> ::= <term> | <term> \",\" <template-params>\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk to Slack Webhook in Node.js\nDESCRIPTION: Implements a Lambda function in Node.js to post vulnerability alerts from Snyk to a Slack channel. The function handles message formatting and sends it using Axios, checking message integrity using Crypto.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/how-to-use-snyk-webhooks-to-connect-snyk-to-slack-with-aws-lambda/aws-lambda-setup-create-lambda-function-to-connect-snyk-to-slack.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require('crypto')\nconst axios = require('axios')\n\nlet slackWebhookUrl = '\\u003cyour_slackWebhookUrl_here\\u003e' // adjust\n\n//customised messaging to Slack with issue information, modify as needed\nasync function messageSlack(\n  message,\n  snykProjectUrl,\n  snykProjectName,\n  snykIssuePackage,\n  snykIssueUrl,\n  snykIssueId,\n  severity,\n  snykIssuePriority\n) {\n  //strings modified to avoid Axios/Slack errors\n  snykProjectUrl = snykProjectUrl.replace(/['\"]+/g, '')\n  snykProjectName = snykProjectName.replace(/['\"]+/g, '')\n  snykIssueUrl = snykIssueUrl.replace(/['\"]+/g, '')\n  snykIssueId = snykIssueId.replace(/['\"]+/g, '')\n  snykIssuePackage = snykIssuePackage.replace(/['\"]+/g, '')\n  severity = severity.replace(/['\"]+/g, '')\n\n  //construct message\n  let payload = {\n    text: `${message}`,\n    blocks: [\n      {\n        type: 'header',\n        text: {\n          type: 'plain_text',\n          text: `${message}`,\n        },\n      },\n      {\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: `Snyk has found a new vulnerability in the project:\\n*\\u003c${snykProjectUrl}|${snykProjectName}\\u003e*`,\n        },\n      },\n      {\n        type: 'divider',\n      },\n      {\n        type: 'section',\n        fields: [\n          {\n            type: 'mrkdwn',\n            text: `*Package name:*\\n${snykIssuePackage}`,\n          },\n          {\n            type: 'mrkdwn',\n            text: `*Vulnerability:*\\n\\u003c${snykIssueUrl}|${snykIssueId}\\u003e`,\n          },\n          {\n            type: 'mrkdwn',\n            text: `*Severity:*\\n${severity}`,\n          },\n          {\n            type: 'mrkdwn',\n            text: `*Priority Score:*\\n${snykIssuePriority}`,\n          },\n        ],\n      },\n      {\n        type: 'actions',\n        elements: [\n          {\n            type: 'button',\n            text: {\n              type: 'plain_text',\n              text: 'View in Snyk',\n            },\n            style: 'primary',\n            url: snykProjectUrl,\n            value: 'browseUrl',\n          },\n        ],\n      },\n    ],\n  }\n\n  //send message\n  const res = await axios.post(slackWebhookUrl, payload)\n  const data = res.data\n}\n\nexports.handler = async (event) => {\n  // Securing integrity of payload, this can be moved to another Lambda function and called seperately for authentication\n  let response\n\n  const {hmac_verification, severity_threshold} = process.env\n  const hmac = crypto.createHmac('sha256', hmac_verification)\n  const buffer = JSON.stringify(event.body)\n  hmac.update(buffer, 'utf8')\n  const stored_signature = `sha256=${hmac.digest('hex')}`\n\n  let sent_signature = event.headers['x-hub-signature']\n\n  if (stored_signature !== sent_signature) {\n    console.log('Integrity of request compromised, aborting')\n    response = {\n      statusCode: 403,\n      body: JSON.stringify('Bad request'),\n    }\n    return response\n  }\n\n  // If integrity is ok, verify that the webhook actually contains the project object, iterate and filter\n  if (buffer.indexOf('project') !== -1 && buffer.indexOf('newIssues') !== -1) {\n    // Iterate through new issues\n    var len = buffer['newIssues'] ? buffer['newIssues'].length : 0\n\n    for (let x = 0; x \\u003c len; x++) {\n      // Get Severity\n      let severity = JSON.stringify(buffer['newIssues'][x]['issueData']['severity'])\n      // Filter\n      if (severity.includes('high') || severity.includes('critical')) {\n        let snykProjectName = JSON.stringify(buffer['project'].name)\n        let snykProjectUrl = JSON.stringify(buffer['project'].browseUrl)\n        let snykIssueUrl = JSON.stringify(buffer['newIssues'][x]['issueData'].url)\n        let snykIssueId = JSON.stringify(buffer['newIssues'][x].id)\n        let snykIssuePackage = JSON.stringify(buffer['newIssues'][x].pkgName)\n        let snykIssuePriority = JSON.stringify(buffer['newIssues'][x]['priority'].score)\n        let message = 'New Snyk Vulnerability'\n\n        // Send the result to Slack\n        await messageSlack(\n          message,\n          snykProjectUrl,\n          snykProjectName,\n          snykIssuePackage,\n          snykIssueUrl,\n          snykIssueId,\n          severity,\n          snykIssuePriority\n        )\n      }\n    }\n  }\n  //do nothing, or modify for any preferable action\n  else {\n    console.log('Valid webhook, but project missing or empty')\n  }\n\n  //respond to Snyk\n  response = {\n    statusCode: 200,\n    body: JSON.stringify('Success'),\n  }\n\n  return response\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running the import process with debug logging\nDESCRIPTION: Command to execute the import process with debug logging enabled. The DEBUG environment variable captures all Snyk-related logs during the import process.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-bitbucket-cloud-organizations-and-repos-in-snyk.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=*snyk* snyk-api-import import\n```\n\n----------------------------------------\n\nTITLE: Running the Import Process with Debug Information\nDESCRIPTION: Command to execute the import process with debug logging enabled to provide detailed information about the import process.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-gitlab-organizations-and-repos-in-snyk.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=*snyk* snyk-api-import import\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: This command changes the current directory to the specified project directory. It is a prerequisite for running the `snyk monitor` command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/monitor-your-projects-at-regular-intervals.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n`cd ~/projects/myproject/`\n```\n\n----------------------------------------\n\nTITLE: Scanning Terraform States in a Directory\nDESCRIPTION: This command reads and aggregates all Terraform states located within a specified directory. It uses the `tfstate://` prefix to indicate that the source is a Terraform state file or directory.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/iac-describe-command-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac describe --from=\"tfstate://directory/*.tfstate\"\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for Snyk Broker with Azure Repos\nDESCRIPTION: Docker run command to set up a fully configured Broker Client for analyzing Open Source, IaC, Container, Code files, and Snyk Essentials information for one Azure organization. It includes environment variables for configuration and enables Snyk Essentials.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/azure-repos-prerequisites-and-steps-to-install-and-configure-broker/setup-broker-with-azure-repos.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --restart=always \\\n           -p 8000:8000 \\\n           -e BROKER_TOKEN=<secret-broker-token> \\\n           -e BROKER_SERVER_URL=<broker-region-url> \\\n           -e AZURE_REPOS_TOKEN=<secret-azure-token> \\\n           -e AZURE_REPOS_ORG=<org-name> \\\n           -e AZURE_REPOS_HOST=<your.azure-server.domain.com (no http/s)> \\\n           -e PORT=8000 \\\n           -e BROKER_CLIENT_URL=<http://broker.url.example:8000 (dns/IP:port)> \\\n           -e ACCEPT_IAC=tf,yaml,yml,json,tpl \\\n           -e ACCEPT_CODE=true \\\n           -e ACCEPT_ESSENTIALS=true \\\n       snyk/broker:azure-repos\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Broker for Nexus 3 using Helm\nDESCRIPTION: This Helm command installs Snyk Broker for Nexus 3. It sets various environment variables including the broker token, server URL, Nexus URLs, and client validation URL.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/nexus-repository-prerequisites-and-steps-to-install-and-configure-broker/nexus-repository-install-and-configure-using-helm.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install snyk-broker-chart snyk-broker/snyk-broker \\\n             --set scmType=nexus \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set brokerServerUrl=<broker-region-url>\n             --set baseNexusUrl=<ENTER_BASE_NEXUS_URL> \\\n             --set nexusUrl=<ENTER_NEXUS_URL>\n             --set brokerClientValidationUrl=<ENTER_BROKER_CLIENT_VALIDATION_URL> \\\n             -n snyk-broker --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring dockercfg.json for AKS using ACR\nDESCRIPTION: This JSON structure demonstrates the configuration of dockercfg.json for Azure Kubernetes Service (AKS) using Azure Container Registry (ACR).\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/authenticate-to-private-container-registries.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credHelpers\": { \n    \"myregistry.azurecr.io\": \"acr-env\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vulnerability Found Automation Rule Syntax in Jira Cloud\nDESCRIPTION: Example of Jira automation rule syntax for creating tickets from Snyk vulnerabilities. This shows how to reference vulnerability properties in the ticket summary and description fields using Jira's templating syntax.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/integrate-with-snyk/jira-and-slack-integrations/snyk-security-in-jira-cloud-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFix \\{{vulnerability.displayName\\}}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n\\{{vulnerability.description.wiki\\}}\n```\n\n----------------------------------------\n\nTITLE: AWS CLI Configuration Profile\nDESCRIPTION: This code snippet defines a named profile in the AWS CLI configuration file. It specifies the role ARN, the source profile to assume the role, and the AWS region. This allows `iac describe` to use an IAM role for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/configure-cloud-providers/configure-aws-provider.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\n[profile snykrole]\nrole_arn = arn:aws:iam::123456789012:role/<NAMEOFTHEROLE>\nsource_profile = user # profile to assume the role\nregion = eu-west-3\n\n```\n\n----------------------------------------\n\nTITLE: Starting Snyk MCP Server with Stdio Transport\nDESCRIPTION: Command-line instruction for starting the Snyk MCP server using Standard Input/Output (Stdio) transport with the experimental flag\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/snyk-mcp-experimental.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsnyk mcp -t stdio --experimental\n```\n\n----------------------------------------\n\nTITLE: Snyk Issues Database Schema Definition\nDESCRIPTION: Database schema showing field definitions for tracking security vulnerabilities in Snyk. Includes fields for product identification, vulnerability scoring, reachability assessment, and various metadata timestamps.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/reporting/reporting-and-bi-integrations-snowflake-data-share/data-share-data-dictionary.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nproduct_name varchar,\nproject_public_id varchar,\nreachability varchar,\nscore float,\nsemver_vulnerable_range variant,\nsnyk_cvss_score number,\nsnyk_cvss_vector varchar,\nvulnerability_publication_date date,\nvuln_db_url varchar,\n__updated_at timestamp_ntz\n```\n\n----------------------------------------\n\nTITLE: Pushing Bundle with Tag Using Snyk CLI Bash\nDESCRIPTION: This snippet demonstrates pushing a custom rules bundle with a specified tag to an OCI registry using the `snyk-iac-rules push` command. The tag is included to version the bundle, which can be useful for tracking versions. It's important to log into your container registry beforehand and to use HTTPS.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/pushing-a-bundle.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nsnyk-iac-rules push -r docker.io/example/test:v0.0.1 bundle.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group Organizations in Snyk API v1\nDESCRIPTION: Endpoint for fetching organizations within a specific group using group ID\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/groups-v1.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n/group/{groupId}/orgs\n```\n\n----------------------------------------\n\nTITLE: Running the Import Command in Snyk\nDESCRIPTION: This command starts the import process in Snyk. It utilizes debug output for troubleshooting purposes during the import.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-bitbucket-server-organizations-and-repos-in-snyk.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=*snyk* snyk-api-import import\n```\n\n----------------------------------------\n\nTITLE: Defining Package Version To in PR Template Using JSON\nDESCRIPTION: This JSON snippet integrates 'package_to' into a PR template for indicating updated package versions. It assumes knowledge of package version progression. JSON input yields a description of the updated version transition in string format.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"description\": \"Fix is applied by moving to {{ package_to}}\"\n            \n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Language Pattern Matching Examples\nDESCRIPTION: Illustrates various ways to match program elements using quotes, fully qualified names, and regular expressions in Snyk Code's query language\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/README.md#2025-04-21_snippet_1\n\nLANGUAGE: datalog\nCODE:\n```\n\"java.time.LocalDate.now\"\n\"test\"\n\"123\"\n~\"12.*\"\n\"java.lang.System.out.println\"\n~\".*\\.println\"\n```\n\n----------------------------------------\n\nTITLE: Java Code Example for Query Matching\nDESCRIPTION: Demonstrates a Java code snippet with method calls and string literals that can be matched using Snyk Code custom rule queries\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/README.md#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.time.LocalDate;\nclass Test {\n static void test() {\n   System.out.println(\"test\" + 123);\n   System.out.println(LocalDate.now());\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Latest Version of npm Package with Snyk CLI\nDESCRIPTION: This command demonstrates how to use Snyk CLI to test the latest version of a public npm package (in this case, 'ionic' version 1.6.5) for known vulnerabilities before installing it.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/test-public-npm-packages-before-use.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test ionic@1.6.5\n```\n\n----------------------------------------\n\nTITLE: Creating a Net New Data Flow Rule in JavaScript\nDESCRIPTION: This snippet shows how to create a custom data flow query in JavaScript using Snyk's Taint template. It tracks data flow from a custom source to a vulnerable sink, bypassing any sanitizers. This is useful for detecting potential security issues like XSS vulnerabilities. The Taint query uses custom and predefined predicates for tracking data flow.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/create-query.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nTaint<PRED:\"SourceFoo\",PRED:XssSanitizer,PRED:XssSink>\n```\n\n----------------------------------------\n\nTITLE: Generating a summary-only HTML report with snyk-to-html\nDESCRIPTION: Command to generate a simplified HTML report with only summary information by using the -s or --summary option with snyk-to-html.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-to-html.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-to-html -i results.json -o results.html -s\n```\n\n----------------------------------------\n\nTITLE: Generating the Previously Imported Log in Snyk\nDESCRIPTION: This optional command generates a log of previously imported repositories, allowing users to skip these during the next import process.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-bitbucket-server-organizations-and-repos-in-snyk.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import-macos list:imported --integrationType=<integration-type> --groupId=<snyk_group_id>\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Remote Container Registry with Snyk CLI\nDESCRIPTION: Example of using Snyk Container CLI to authenticate to a remote container registry by passing username and password. This method can be used when Docker is not installed or pre-configured authentication is not available.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-container/advanced-use-of-snyk-container-cli.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk container test <repository>:<tag> --username= --password=\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Helm Chart\nDESCRIPTION: Command to install the Snyk Monitor Helm chart with basic configuration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/install-the-snyk-controller-with-helm-azure-and-google-cloud-platform.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install snyk-monitor snyk-charts/snyk-monitor \\\n             --namespace snyk-monitor \\\n             --set clusterName=\"Production cluster\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group Settings in Snyk API v1\nDESCRIPTION: Endpoint for fetching current settings of a specific group using group ID\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/groups-v1.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n/group/{groupId}/settings\n```\n\n----------------------------------------\n\nTITLE: Running Snyk CLI in Debug Mode with Log Level\nDESCRIPTION: This snippet demonstrates how to run the Snyk CLI commands in debug mode using the '--debug' option and sets the log level to 'trace' for more detailed output. It's useful for diagnosing issues with the Snyk CLI by providing comprehensive log messages.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/debugging-the-snyk-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --debug --log-level=trace\n```\n\n----------------------------------------\n\nTITLE: Basic Snyk PHP Vulnerability Scanning Workflow\nDESCRIPTION: Basic GitHub Actions workflow configuration to scan PHP projects for vulnerabilities using Snyk. Uses ubuntu-latest runner and requires a SNYK_TOKEN secret.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-php-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for PHP using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/php@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Checking for Vulnerabilities with Snyk CocoaPods Action in GitHub Workflow\nDESCRIPTION: This YAML snippet demonstrates a basic GitHub workflow that uses the Snyk CocoaPods Action to check for vulnerabilities in a project. It runs on push events and uses the SNYK_TOKEN secret for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-cocoapods-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for CocoaPods using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/cocoapods@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Basic SCM-Contributors-Count Command Structure\nDESCRIPTION: The general command structure for the SCM-Contributors-Count tool. It requires specifying a command for the SCM platform and command-specific options.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/usage.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count <command> <command-options>\n```\n\n----------------------------------------\n\nTITLE: Exporting Snyk Test Results to JSON File without Terminal Display\nDESCRIPTION: Command to run Snyk code test and export results to a JSON file while suppressing terminal output.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/view-snyk-code-cli-results.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsnyk code test --json > <path/to/new_json_file>\n```\n\n----------------------------------------\n\nTITLE: Creating SBOM Test Run with Snyk REST API\nDESCRIPTION: This snippet demonstrates how to create an SBOM test run using the Snyk REST API. It includes the curl command to make the POST request and the JSON structure for the request body.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/sbom-apis/rest-api-endpoint-test-an-sbom-document-for-vulnerabilities.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n    -H \"Authorization: token <SNYK_TOKEN>\" \\\n    -H \"Content-Type: application/vnd.api+json\" \\\n    --data-binary '@request_body.json' \\\n    'https://api.snyk.io/rest/orgs/<ORG_ID>/sbom_tests?version=2023-08-31~beta'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"type\": \"sbom_test\",\n        \"attributes\":{ \n            \"sbom\": {\n            <SBOM_CONTENTS>\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sysdig Secret for Snyk Integration in Kubernetes\nDESCRIPTION: This bash snippet creates a Kubernetes secret named `snyk-sysdig-secret` in the `snyk-monitor` namespace. It contains the necessary credentials for Snyk to integrate with Sysdig, including the Risk Spotlight Token, the Sysdig endpoint URL, and the agent cluster name. The environment variable values must be set prior to executing this command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/integrate-with-sysdig.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic snyk-sysdig-secret -n snyk-monitor \\\n  --from-literal=token=$SYSDIG_RISK_SPOTLIGHT_TOKEN \\\n  --from-literal=endpoint=$SYSDIG_ENDPOINT_URL \\\n  --from-literal=cluster=$SYSDIG_AGENT_CLUSTER\n```\n\n----------------------------------------\n\nTITLE: Uploading Snyk Scan Results to GitHub Code Scanning using Gradle-jdk16 Action in YAML\nDESCRIPTION: This snippet demonstrates how to use the Snyk Gradle (jdk16) Action to generate a SARIF file and upload it to GitHub Code Scanning. It uses the continue-on-error option to ensure the upload step runs even if vulnerabilities are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-gradle-jdk16-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Gradle (jdk16) using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/gradle-jdk16@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Output for Files Changed Description\nDESCRIPTION: The output for using 'files_changed' within a pull request template is demonstrated, exemplifying how modified file data is displayed using a JSON input, specifically in a Maven project scenario.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nChanges included in this PR: pom.xml\n```\n\n----------------------------------------\n\nTITLE: Setting Up Credential Pool Environment Variable\nDESCRIPTION: Demonstrates how to set up a pool of credentials using an environment variable with a '_POOL' suffix. Multiple tokens are separated by commas.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-snyk-broker-docker-installation/credential-pooling-with-docker-and-helm.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGITHUB_TOKEN_POOL=token1, token2, token3\n```\n\n----------------------------------------\n\nTITLE: Executing GitLab Import Data Generation Commands\nDESCRIPTION: Command line instructions to run the import:data utility for GitLab.com and self-hosted GitLab. These commands generate the import data needed for the Snyk import command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/creating-import-targets-data-for-import-command.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=snyk* GITLAB_TOKEN=*** SNYK_TOKEN=*** snyk-api-import import:data --orgsData=path/to/snyk-orgs.json --source=gitlab --integrationType=gitlab\n```\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=snyk* GITLAB_TOKEN=*** SNYK_TOKEN=*** snyk-api-import import:data --orgsData=path/to/snyk-orgs.json --source=gitlab --integrationType=gitlab --sourceUrl=https://gitlab.custom.com\n```\n\n----------------------------------------\n\nTITLE: Creating Organizations and Avoiding Duplicates in Snyk\nDESCRIPTION: This command creates organizations in Snyk while ensuring that already created organizations are not duplicated, using the --noDuplicateNames parameter.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-bitbucket-server-organizations-and-repos-in-snyk.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import orgs:create --file=orgs.json --noDuplicateNames\n```\n\n----------------------------------------\n\nTITLE: Creating new organizations while avoiding duplicates\nDESCRIPTION: Command to create Snyk organizations from the organization data file, using the noDuplicateNames flag to avoid creating duplicate organizations that already exist in Snyk.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-github.com-and-github-enterprise-organizations-and-repos-in-snyk.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import orgs:create --file=orgs.json --noDuplicateNames\n```\n\n----------------------------------------\n\nTITLE: Using Snyk IaC Describe Command for S3 Backend Terraform State File\nDESCRIPTION: Invokes the Snyk IaC Describe command to report drift by specifying a Terraform state file stored in an S3 bucket. This command structure ensures compatibility with resources managed through cloud storage.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/get-started-with-snyk-iac-describe-on-aws.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk iac describe --from=\"tfstate+s3://my-bucket/path/to/state.tfstate\"\n```\n\n----------------------------------------\n\nTITLE: Installing Pip Dependencies\nDESCRIPTION: Command to install Python dependencies from requirements.txt before running Snyk scan\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/python/snyk-cli-for-python.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Using Snyk Delta to Find New Vulnerabilities\nDESCRIPTION: This command runs a Snyk test and pipes the JSON output to snyk-delta to identify new vulnerabilities introduced in the current build.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/failing-of-builds-in-snyk-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --json --print-deps | snyk-delta\n```\n\n----------------------------------------\n\nTITLE: Scanning All Unmanaged Files Recursively\nDESCRIPTION: This command auto-detects and scans all unmanaged files (JAR, WAR, AAR) recursively from the current folder.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/monitor.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--scan-all-unmanaged\n```\n\n----------------------------------------\n\nTITLE: Reading Terraform State from Local and Remote Sources using Snyk\nDESCRIPTION: This snippet shows the usage of the `snyk iac describe` command with different options for reading a Terraform state from various backends such as local files, S3, GCS, HTTPS, and Terraform Cloud. Users can select the appropriate source based on their storage configuration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/iac-sources-usage.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk iac describe --from=\"tfstate://terraform.tfstate\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk iac describe --from=\"tfstate+s3://my-bucket/path/to/state.tfstate\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk iac describe --from=\"tfstate+gs://my-bucket/path/to/state.tfstate\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk iac describe --from=\"tfstate+https://my-url/state.tfstate\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk iac describe --from=\"tfstate+tfcloud://WORKSPACE_ID\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk iac describe --from=\"tfstate+azurerm://container-name/path/to/state.tfstate\"\n```\n\n----------------------------------------\n\nTITLE: Negation of Rules for S3 Buckets\nDESCRIPTION: This YAML snippet configures the .snyk file to ignore all resources except for S3 buckets by employing rule negation, represented by '!aws_s3_bucket'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/ignore-resources-for-drift.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.22.1\nexclude:\n  iac-drift:\n    - '*'\n    - '!aws_s3_bucket'\n```\n\n----------------------------------------\n\nTITLE: Describing Terraform State with GitLab using Snyk\nDESCRIPTION: This snippet demonstrates how to use the `snyk iac describe` command with GitLab-managed Terraform state by providing an access token and the appropriate API URL. It outlines the necessary environmental variable for the token and the command structure.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/iac-sources-usage.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ GITLAB_TOKEN=<access_token> \\\n$ snyk iac describe \\\n--from=\"tfstate+https://gitlab.com/api/v4/projects/<project_id>/terraform/state/<path_to_state>\" \\\n--headers \"Authorization=Bearer ${GITLAB_TOKEN}\"\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Create Azure Cloud Environment\nDESCRIPTION: This curl command sends a POST request to the Snyk API to create an Azure Cloud Environment. It requires the organization ID, API token, subscription ID, tenant ID, and application ID.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/azure-integration-for-cloud-configurations/azure-integration-api/step-3-create-and-scan-a-cloud-environment-for-azure-api.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/environments?version=2022-12-21~beta' \\\n-H 'Authorization: token YOUR-API-TOKEN' \\\n-H 'Content-Type:application/vnd.api+json' -d '{\n  \"data\": {\n    \"type\": \"environments\",\n    \"attributes\": {\n      \"options\": {\n        \"subscription_id\": \"YOUR-SUBSCRIPTION-ID\",\n        \"tenant_id\": \"YOUR-TENANT-ID\",\n        \"application_id\": \"YOUR-APPLICATION-ID\"\n      },\n      \"kind\": \"azure\",\n      \"name\": \"OPTIONAL-NAME\"\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Downloading and running FIPS-enabled Snyk CLI on Microsoft Mariner\nDESCRIPTION: Example of downloading and executing the FIPS-enabled Snyk CLI using a Microsoft Mariner Docker container. It installs necessary certificates, downloads the CLI, and runs it with debug output.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/security-concept-of-operations-for-snyk/using-fips-validated-cryptography.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it mcr.microsoft.com/cbl-mariner/base/core:2.0 bash\n> tdnf install -y ca-certificates\n> curl --compressed https://downloads.snyk.io/fips/cli/latest/snyk-linux-arm64 -o snyk\n> chmod +x snyk\n> ./snyk -d\n...\n2023-09-13T11:02:49Z main - Features:\n2023-09-13T11:02:49Z main -   oauth:               Disabled\n2023-09-13T11:02:49Z main -   fips:                Enabled\n...\n```\n\n----------------------------------------\n\nTITLE: Generating an HTML report with actionable remediation\nDESCRIPTION: Command to generate an HTML report that includes actionable remediation information by using the -a or --actionable-remediation option with snyk-to-html.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-to-html.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-to-html -i results.json -o results.html -a\n```\n\n----------------------------------------\n\nTITLE: Output for Snyk Organization Name in YAML Format\nDESCRIPTION: A YAML snippet displays the output format that includes 'snyk_org_name' in a PR template, presenting the organization's name within the PR description when a related JSON input is given.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nFix applied by my-org\n```\n\n----------------------------------------\n\nTITLE: Options for orgs:data Utility in Snyk API Import\nDESCRIPTION: Command line options for the orgs:data utility that helps generate data needed to mirror organization structures in Snyk. The utility supports various parameters including source type, group ID, and custom source URLs.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/creating-organizations-in-snyk.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  --source             The source of the targets to be imported\n                       (for example, Github, Github Enterprise, Gitlab,\n                       Bitbucket Server) [required].\n  --groupId            Public id of the group in Snyk (available\n                       on Group settings) [required].\n  --sourceUrl          Custom base url for the source API that can\n                       list organizations (for example, GitHub Enterprise url).\n  --sourceOrgPublicId  Public id of the Organization in Snyk that\n                       can be used as a template to copy all\n                       supported Organization settings.\n  --skipEmptyOrgs      Skip organizations that have no targets \n                       (for example, Github organizations that have no repos).\n```\n\n----------------------------------------\n\nTITLE: Saving Snyk scan results to JSON files for later conversion\nDESCRIPTION: Commands to run different types of Snyk scans and save the results directly to JSON files instead of piping them to snyk-to-html.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-to-html.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --json-file-output=results-opensource.json\n\nsnyk code test --json-file-output=results-code.json\n\nsnyk container test [image] --json-file-output=results-container.json\n\nsnyk iac test  --json-file-output=results-iac.json\n```\n\n----------------------------------------\n\nTITLE: Executing Snyk Language Server as CLI command\nDESCRIPTION: Demonstrates how to run the Snyk Language Server using the CLI command instead of the standalone snyk-ls command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/security-concept-of-operations-for-snyk/using-fips-validated-cryptography.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> snyk language-server\n\n# instead of \n> snyk-ls\n```\n\n----------------------------------------\n\nTITLE: Snyk API Specification\nDESCRIPTION: This snippet references a YAML file containing the API specification for the Snyk v1 API's dependencies endpoint. It is located at '../../.gitbook/assets/v1-api-spec.yaml' and uses the POST method on the '/org/{orgId}/dependencies' path.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/dependencies-v1.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/org/{orgId}/dependencies\" method=\"post\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWS IAM Role ARN Using AWS CLI\nDESCRIPTION: AWS CLI command to retrieve the ARN of a Snyk Cloud IAM role. The command queries the role details and outputs just the ARN in text format.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/aws-integration/aws-integration-web-ui/step-3-create-and-scan-a-cloud-environment-web-ui.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws iam get-role \\\n  --role-name snyk-cloud-role \\\n  --query 'Role.Arn' --output text\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Kubernetes Configuration and Vulnerability Factors\nDESCRIPTION: A table showing the relationship between Kubernetes configuration factors and corresponding vulnerability properties that affect the Priority Score calculation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/kubernetes-integration-ui-explained/kubernetes-and-the-snyk-priority-score.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Configuration**                                                                                   | **Vulnerability properties**                                                                                                  |\n| --------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| Permission issues, for instance running privileged, able to run as root, not dropping capabilities. | CVSSv3 Privileges (PR) vector present in the vulnerability. Weighing based on the impact.                                     |\n| Missing memory and/or CPU limits.                                                                   | CVSSv3 Availability (A) vector present in the vulnerability, or CWE includes denial of service. Weighing based on the impact. |\n| Not setting a read only root filesystem.                                                            | CWE indicates filesystem access required.                                                                                     |\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Container Image by ID - GET\nDESCRIPTION: This snippet represents a GET request to retrieve a specific container image based on its ID within an organization. The request details, including required parameters and the expected response format, are outlined in the linked swagger specification.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/containerimage.md#2025-04-21_snippet_1\n\nLANGUAGE: Swagger\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/orgs/{org_id}/container_images/{image_id}\" method=\"get\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n```\n\n----------------------------------------\n\nTITLE: Identifying Improper Handling of Insufficient Permissions or Privileges Vulnerabilities\nDESCRIPTION: This entry outlines vulnerabilities that arise from improper handling of insufficient permissions or privileges (CWE-280) in Java, Kotlin, and Python. Such vulnerabilities may allow unauthorized actions to be performed without proper checks.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Snyk Configuration Command\nDESCRIPTION: Command for managing Snyk CLI configuration settings, with subcommands for getting, setting, and unsetting configuration parameters\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/cli-commands-and-options-summary.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsnyk config [get|set|unset|clear]\n```\n\n----------------------------------------\n\nTITLE: Use AWS Named Profile with Snyk CLI\nDESCRIPTION: This command specifies an AWS named profile for Snyk CLI. It allows the user to run the command under a specific profile configured in their AWS credentials.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/iac-describe.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"$ AWS_PROFILE=profile_name snyk iac describe\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Excluded Namespaces\nDESCRIPTION: Specifies namespaces to be excluded from Snyk monitoring.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/optional-installation-steps-for-snyk-controller-with-helm.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install snyk-monitor snyk-charts/snyk-monitor \\ \n             --namespace snyk-monitor \\\n             --set excludedNamespaces=\"{kube-node-lease,local-path-storage,some_namespace}\"\n```\n\n----------------------------------------\n\nTITLE: Issuing POST Request to Revoke Token - HTTP\nDESCRIPTION: This snippet explains how to format a POST request to revoke a compromised refresh token using the Snyk API. The request must be sent to the specified endpoint and include properties in a x-www-form-urlencoded format, specifically the token, client_id, and client_secret.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/set-up-a-snyk-app-using-the-oauth2-api/revoke-compromised-refresh-tokens.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST https://api.snyk.io/oauth2/revoke\n\ntoken=(refresh token to be revoked)\n&client_id=(clientId from the app creation)\n&client_secret=(clientSecret from the app creation)\n```\n\n----------------------------------------\n\nTITLE: Patching Azure Environment with Snyk API\nDESCRIPTION: Update an Azure environment's application ID in Snyk using a PATCH request. Requires an API token, environment ID, application ID, tenant ID, and subscription ID as inputs. Ensure tenant and subscription IDs remain unchanged.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/getting-started-with-cloud-scans/manage-cloud-environments/update-a-cloud-environment.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH \\\n'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/environments/YOUR-ENVIRONMENT-ID?version=2022-12-21~beta' \\\n-H 'Authorization: token YOUR-API-TOKEN' \\\n-H 'Content-Type:application/vnd.api+json' -d '{\n  \"data\": {\n    \"attributes\": {\n      \"name\": \"YOUR-NEW-ENVIRONMENT-NAME\",\n      \"options\": {\n        \"application_id\": \"YOUR-NEW-APPLICATION-ID\",\n        \"tenant_id\": \"00000000-0000-0000-1234-12345678abcd\",\n        \"subscription_id\": \"abcd1234-abcd-1234-0000-000000000000\"\n      }\n    },\n    \"type\": \"resource\"\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Testing an Individual .NET Project with Snyk\nDESCRIPTION: This snippet shows how to test an individual .NET project using the `packages.config` file with Snyk CLI. It targets a single .NET project for vulnerability scanning.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/test.md#2025-04-21_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n\"--file=packages.config\"\n```\n\n----------------------------------------\n\nTITLE: Getting Current User Details - Snyk API v1 - YAML\nDESCRIPTION: This snippet defines the API endpoint to retrieve the current user's details. It can be used for user-specific operations, helping applications access user information without needing to specify user IDs.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/users-v1.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/user/me\" method=\"get\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Authenticate with OAuth Token\nDESCRIPTION: Specifies the OAuth token for authentication.  This may be required in certain verification workflows.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/configure-the-snyk-cli/configure-snyk-cli-to-connect-to-snyk-api.md#2025-04-21_snippet_4\n\nLANGUAGE: environment\nCODE:\n```\n\"SNYK_OAUTH_TOKEN=<OAuth token>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Enterprise Broker Docker Image\nDESCRIPTION: Dockerfile configuration for GitHub Enterprise Broker integration with environment variables for API endpoints and authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/derived-docker-images-for-broker-client-integrations-and-container-registry-agent.md#2025-04-21_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM snyk/broker:github-enterprise\n\nENV BROKER_TOKEN      secret-broker-token\nENV GITHUB_TOKEN      secret-github-token\nENV GITHUB            your.ghe.domain.com\nENV GITHUB_API        your.ghe.domain.com/api/v3\nENV GITHUB_GRAPHQL    your.ghe.domain.com/api\nENV PORT              8000\nENV BROKER_CLIENT_URL http://my.broker.client:8000\n```\n\n----------------------------------------\n\nTITLE: Generating Import Data for Bitbucket Cloud\nDESCRIPTION: Command to generate import data for Bitbucket Cloud using the snyk-api-import tool. This command requires the Bitbucket Cloud credentials, Snyk token, and the path to the organizations data JSON file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/creating-import-targets-data-for-import-command.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=snyk* BITBUCKET_CLOUD_USERNAME=*** BITBUCKET_CLOUD_PASSWORD=*** SNYK_TOKEN=*** snyk-api-import import:data --orgsData=path/to/snyk-orgs.json --source=bitbucket-cloud --integrationType=bitbucket-cloud\n```\n\n----------------------------------------\n\nTITLE: Java Login Examples\nDESCRIPTION: Demonstrates different login implementations in Java using FTP and LoginContext\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/templates-and-predicates.md#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport sun.net.ftp.FtpProtocolException;\nimport sun.net.ftp.impl.FtpClient;\n\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport java.io.IOException;\n\npublic class X {\n    private static void ftpExample() {\n        FtpClient client = new FtpClient();\n        try {\n            client.login(\"user\", \"pass\".toCharArray());\n        } catch (FtpProtocolException | IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static void loginContextExample() {\n        try {\n            LoginContext lc = new LoginContext(\"MyLoginConfig\");\n            lc.login();\n            System.out.println(\"Authentication succeeded!\");\n\n        } catch (LoginException e) {\n            System.err.println(\"Authentication failed: \" + e.getMessage());\n        }\n    }\n\n    public static void main(String[] args) {\n        ftpExample();\n        loginContextExample();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Test on setup.py\nDESCRIPTION: Command to run Snyk security testing on a Python setup.py file. This command scans only the install_requires dependencies.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/setup.py-file-failing-to-scan-or-finding-zero-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --file=setup.py\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTP Headers for Terraform State\nDESCRIPTION: This command specifies HTTP headers to use when fetching a Terraform state file, enabling authentication with services like GitLab.  It defines the `Authorization` header with a bearer token obtained from the `GITLAB_TOKEN` environment variable.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/iac-describe-command-examples.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nGITLAB_TOKEN=<access_token> \\\n  snyk iac describe \\\n  --from=\"tfstate+https://gitlab.com/api/v4/projects/<project_id>/terraform/state/<path_to_state>\" \\\n --fetch-tfstate-headers='Authorization=\"Bearer ${GITLAB_TOKEN}\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Authentication in Shell\nDESCRIPTION: This snippet demonstrates how to configure authentication for GitHub provider by setting environment variables and executing the `snyk iac describe` command. It requires a valid GitHub token and organization name. The command outputs configuration data to the specified format. Dependencies include setting up GitHub tokens and having Snyk CLI installed.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/configure-cloud-providers/configure-github-provider.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ GITHUB_TOKEN=14758f1afd44c09b7992073ccf00b43d \\\n  GITHUB_ORGANIZATION=my-org \\\n  snyk iac describe --to=\"github+tf\"\n```\n\n----------------------------------------\n\nTITLE: Counting Contributors for Specific Organizations in GitHub Enterprise\nDESCRIPTION: Command to retrieve contributor counts for all repositories within specific organizations in GitHub Enterprise. Requires token, host URL, and a comma-separated list of organization names.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/github-enterprise/github-enterprise-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count github-enterprise --token TOKEN --url HOST_URL --orgs ORG_ONE,ORG_TWO,ORG_THREE\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab Broker Docker Image\nDESCRIPTION: Dockerfile configuration for GitLab Broker integration with environment variables for authentication and server settings.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/derived-docker-images-for-broker-client-integrations-and-container-registry-agent.md#2025-04-21_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM snyk/broker:gitlab\n\nENV BROKER_TOKEN        secret-broker-token\nENV GITLAB_TOKEN        secret-gitlab-token\nENV GITLAB              your.gitlab.domain.com\nENV BROKER_CLIENT_URL   http://my.broker.client:8000\nENV PORT                8000\n```\n\n----------------------------------------\n\nTITLE: Identifying GraphQL Injection Vulnerabilities\nDESCRIPTION: This entry examines vulnerabilities associated with GraphQL injection (CWE-89) in JavaScript. Such injections allow attackers to manipulate GraphQL queries and potentially exploit backend functionalities.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Excluding Specific IAM User\nDESCRIPTION: This YAML snippet demonstrates how to ignore a specific IAM user, in this case, 'aws_iam_user.tfc-demo', from being detected as drift in the Snyk policy file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/ignore-resources-for-drift.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.22.1\nexclude:\n  iac-drift:\n    - aws_iam_user.tfc-demo\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Files from Snyk Code CLI Test Example\nDESCRIPTION: This example command demonstrates how to exclude the app.js and db.js files from the Snyk Code CLI test, leaving only the routes/index.js file to be scanned for issues.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/exclude-directories-and-files-from-snyk-code-cli-tests.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk ignore --file-path=app.js && snyk ignore --file-path=db.js\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bots Authorized to an Organization via REST API\nDESCRIPTION: API endpoint to get a list of bots authorized to an organization. The expand=app query parameter is required to identify the Slack App bot.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/integrate-with-snyk/jira-and-slack-integrations/slack-app.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGET /orgs/{org_id}/app_bots\n```\n\n----------------------------------------\n\nTITLE: Configuring Pull Request/Merge Request Checks with Snyk\nDESCRIPTION: Implementation of build gating criteria for security vulnerability scanning using Snyk, focusing on severity levels and exploitability\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/implement-snyk/enterprise-implementation-guide/phase-1-discovery-and-planning/create-rollout-plan.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example Snyk filtering criteria\ngating_rules:\n  severity:\n    - High\n    - Critical\n  conditions:\n    - is_fixable\n    - has_mature_exploit\n```\n\n----------------------------------------\n\nTITLE: Adding Snyk Broker Helm Repository\nDESCRIPTION: This command adds the Snyk Broker Helm repository to your local Helm setup. It is a prerequisite step before installing the Snyk Broker Helm Chart. The repository URL is specified, and this command does not require additional parameters.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/jira-prerequisites-and-steps-to-install-and-configure-broker/jira-install-and-configure-using-helm.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add snyk-broker https://snyk.github.io/snyk-broker-helm/\n```\n\n----------------------------------------\n\nTITLE: Terraform Resource - Allowed Redshift Cluster\nDESCRIPTION: This Terraform configuration defines an `aws_redshift_cluster` resource named \"allowed\" with a tag. This example is intended to represent a configuration that should be considered compliant by a Rego rule that enforces tagging.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/testing-a-rule.md#2025-04-21_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\n\"resource \\\"aws_redshift_cluster\\\" \\\"allowed\\\" {\\n  cluster_identifier = \\\"tf-redshift-cluster\\\"\\n  database_name      = \\\"mydb\\\"\\n  master_username    = \\\"foo\\\"\\n  master_password    = \\\"Mustbe8characters\\\"\\n  node_type          = \\\"dc1.large\\\"\\n  cluster_type       = \\\"single-node\\\"\\n  tags {\\n    owner = \\\"snyk\\\"\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Excluding Contributors from Count\nDESCRIPTION: Command to exclude specific contributors from the count by providing an exclusion file with email addresses to ignore.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/azure-devops/azure-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count azure-devops --token AZURE-TOKEN --org AZURE-ORG --projectKeys Key1,Key2 --exclusionFilePath PATH_TO_FILE\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Route Template Rendering\nDESCRIPTION: Example of implementing route handling with EJS template rendering\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/render-content-for-users.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprivate initRoutes() {\n  this.router.get(`${this.path}`, this.indexPage);\n}\nprivate indexPage(req: Request, res: Response, next: NextFunction) {\n  return res.render(\"index\");\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Organization Notification Settings (PUT /org/{orgId}/notification-settings)\nDESCRIPTION: API endpoint to update the notification settings of an organization. This endpoint is part of the v1 API and uses the PUT method, requiring the organization ID as a path parameter.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/organizations-v1.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/org/{orgId}/notification-settings\" method=\"put\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk Test for Pipeline - CLI\nDESCRIPTION: This snippet outlines the CLI commands to run Snyk tests in a CI/CD pipeline to ensure ongoing security checks. The commands include 'snyk test' to analyze dependencies and 'snyk monitor' to provide continuous monitoring. These commands should be integrated into the pipeline configuration for regular execution, allowing automatic detection of vulnerabilities.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/working-with-snyk/snyk-terms-of-support-and-services-glossary/snyk-jumpstart-services-description.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsnyk test\nsnyk monitor\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Multiple Universal Broker Integrations Example\nDESCRIPTION: Demonstrates the interactive workflow for disconnecting multiple organization integrations from a connection, including selection interface with tab/backspace controls.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/disconnect-and-clean-up.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUniversal Broker - Connections Disconnect Integration(s) Workflow\n✓ Valid Snyk Token\n✓ Tenant Admin role confirmed.\nNow using Tenant ID <number returned> and Install ID <number returned>.\nNow using Deployment <number returned>.\nWhich Connection do you want to use <number entered>\nSelected Connection ID <number entered>. Ready to disconnect integrations using \nthis connection.\nSelect (Press <backspace> to remove option) {Type: github] in <Organization ID returned>\n[✓ ] Type github in <Organization ID returned> integr <number returned>)\n[    ] Type github in <Organization ID returned>? integr <number returned>)\n```\n\n----------------------------------------\n\nTITLE: Overriding Auth Method with Bearer Token in accept.json\nDESCRIPTION: Configuration to override the default authentication method with a Bearer token in the accept.json file. This overrides any other authentication configuration for the service.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-snyk-broker-docker-installation/changing-the-auth-method-with-docker.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": [\n    {\n      ...,\n      \"auth\": {\n        \"scheme\": \"bearer\",\n        \"token\": \"${BEARER_TOKEN}\"\n      }\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring All Sub-Projects in Gradle\nDESCRIPTION: This command monitors all sub-projects in a Gradle multi-project configuration using the `--all-sub-projects` option.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/monitor.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--all-sub-projects\n```\n\n----------------------------------------\n\nTITLE: Deleting Snyk Controller Helm Release in Bash\nDESCRIPTION: This command deletes the Snyk Controller Helm release from the cluster, effectively uninstalling the Snyk Controller.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/overview-of-kubernetes-integration/disable-the-kubernetes-integration.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ helm delete snyk-monitor\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Path Vulnerability Ignore\nDESCRIPTION: Example of ignoring a specific vulnerability for a single dependency path with an expiration date\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/the-.snyk-file.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nignore:\n  SNYK-JS-BSON-561052:\n    - mongodb > mongodb-core > bson:\n        reason: None given\n        expires: '2020-06-19T20:36:54.553Z'\n```\n\n----------------------------------------\n\nTITLE: Generating Import Target Data\nDESCRIPTION: Command to generate import target data using the created organizations information and GitLab as the source.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-gitlab-organizations-and-repos-in-snyk.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import import:data --orgsData=snyk-created-orgs.json --source=gitlab --integrationType=gitlab\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Universal Broker (Linux/Mac)\nDESCRIPTION: Commands to set essential environment variables for Universal Broker configuration on Linux/Mac systems, including SNYK_TOKEN, TENANT_ID, and INSTALL_ID.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/preparing-for-creating-universal-broker-deployments.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport SNYK_TOKEN=xxxx\nexport TENANT_ID=yyyy\nexport INSTALL_ID=zzzz\n```\n\n----------------------------------------\n\nTITLE: Using Snyk Docker Action to Check for Vulnerabilities in YAML\nDESCRIPTION: This snippet demonstrates how to set up a GitHub Actions workflow to check Docker images for vulnerabilities using Snyk. It requires a Snyk API token and specifies the Docker image to test.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-docker-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Docker using Snyk \non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Run Snyk to check Docker image for vulnerabilities\n      uses: snyk/actions/docker@master\n      env:\n        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n      with:\n        image: your/image-to-test\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI Settings - Snyk\nDESCRIPTION: This snippet describes the use of the environment variable `SNYK_CFG_<KEY>`, which allows users to override configuration keys defined by `snyk config`. An example shows how to set the organization key.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/configure-the-snyk-cli/environment-variables-for-snyk-cli.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n`SNYK_CFG_ORG=myorg`\n```\n\n----------------------------------------\n\nTITLE: Delete a Target\nDESCRIPTION: Deletes a specific target by its ID for a given organization ID using the Snyk REST API. This API call is a DELETE request to the `/orgs/{org_id}/targets/{target_id}` endpoint, defined in the `rest-spec.json` file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/targets.md#2025-04-21_snippet_2\n\nLANGUAGE: swagger\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/orgs/{org_id}/targets/{target_id}\" method=\"delete\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Container Image with CLI\nDESCRIPTION: CLI command to monitor a container image with a specific project name and organization\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/use-snyk-container/use-custom-base-image-recommendations/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk container monitor somecompany/base-python:3.9.2_2021110408 --project-name=base-python:3.9.2_2021110408 --org=ORGANIZATION_ID/ORGANIZATION_NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk Repository Integration\nDESCRIPTION: Set up Git repository integrations to gain broad security visibility across codebases, with automatic scanning triggered by code changes\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/implement-snyk/team-implementation-guide/phase-1-discovery-and-planning/create-rollout-plan.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"info\" %}\nTo reduce noise, disable notifications before import if you have onboarded all your users.\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Full example of eclipse.ini modification\nDESCRIPTION: This snippet shows a full example of `eclipse.ini` configuration after adding the JDK 17 path. The key line is the one starting with `-vm`. Replace `C:\\\\Program Files\\\\Java\\\\jdk-17.0.1\\\\bin` with the actual JDK 17 installation path.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/eclipse-plugin/troubleshooting-for-the-eclipse-plugin.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"-startup plugins/org.eclipse.equinox.launcher_1.6.200.v20210416-2027.jar --launcher.library plugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.2.200.v20210429-1609 -product org.eclipse.epp.package.jee.product -showsplash org.eclipse.epp.package.common --launcher.defaultAction openFile --launcher.appendVmargs -vmargs -Dosgi.requiredJavaVersion=11 -Xms256m -Xmx2048m --add-modules=ALL-SYSTEM --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.nio=ALL-UNNAMED --add-opens=java.base/sun.nio.ch=ALL-UNNAMED -vm C:\\\\Program Files\\\\Java\\\\jdk-17.0.1\\\\bin\"\n```\n\n----------------------------------------\n\nTITLE: Setting Python Version in .snyk File for Project\nDESCRIPTION: This snippet defines the Python version utilized for a specific project by including a configuration in the .snyk file. The file should be placed in the same directory as the project's manifest. The specified version will override the default settings for this project, allowing for tailored dependency management.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/python/git-repositories-and-python.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlanguage-settings:\n  python: '3.10'\n```\n\n----------------------------------------\n\nTITLE: Generating Import Data for Bitbucket Server\nDESCRIPTION: Command to generate import data for Bitbucket Server using the snyk-api-import tool. This command requires the Bitbucket Server token, Snyk token, and the path to the organizations data JSON file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/creating-import-targets-data-for-import-command.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=snyk* BITBUCKET_SERVER_TOKEN=*** SNYK_TOKEN=*** snyk-api-import import:data --orgsData=path/to/snyk-orgs.json --source=bitbucket-server --integrationType=bitbucket-server --sourceUrl=https://bitbucket-server.dev.example.com\n```\n\n----------------------------------------\n\nTITLE: Running Snyk IaC Test Command\nDESCRIPTION: This snippet shows the command to run a Snyk IaC test on a specific file, which pulls the configured custom rules from the OCI registry during the scan, including issues from both default and custom rules.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/use-iac-custom-rules-with-cli/use-a-remote-iac-custom-rules-bundle.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test <file>\n```\n\n----------------------------------------\n\nTITLE: Identifying File Access Enabled Vulnerabilities\nDESCRIPTION: This entry outlines vulnerabilities caused by file access being enabled (CWE-200) in Java and Kotlin, which could allow unauthorized file access and modifications.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Snyk IaC Test Command Help\nDESCRIPTION: This snippet displays the command to access the help documentation for the `snyk iac test` command. It allows the user to understand how to use the command to test for known security issues in IaC files.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/iac.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n`iac test --help`\n```\n\n----------------------------------------\n\nTITLE: Unescaping JSON with jq (Bash)\nDESCRIPTION: Command to unescape the JSON response and save the Terraform template or Bash script to a file using jq. This should be appended to the API request command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/azure-integration-for-cloud-configurations/azure-integration-api/step-1-download-azure-app-registration-iac-template-or-script-api.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n| jq -r .data.attributes.data > snyk_azure_permissions\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure with az CLI for Snyk IAC\nDESCRIPTION: This snippet shows how to authenticate to Azure using the az CLI instead of a service principal. It only requires the AZURE_SUBSCRIPTION_ID to be set as an environment variable prior to calling the Snyk command to describe the infrastructure as code.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/configure-cloud-providers/configure-azure-provider.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ AZURE_SUBSCRIPTION_ID=00000000-0000-0000-0000-000000000000\\\n  snyk iac describe --to=azure+tf\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Code Test with Severity Threshold in CI/CD\nDESCRIPTION: Example command used in CI/CD pipelines that will only fail the build if unignored issues at or above the high severity level are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/ignore-issues/consistent-ignores-for-snyk-code-early-access/snyk-cli.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsnyk code test --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Creating Request Interceptor for Token Refresh Logic\nDESCRIPTION: This snippet defines the `refreshTokenReqInterceptor` function that checks if the current access token is expired. If it is, it refreshes the token using the refresh token and updates the database accordingly.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/util/interceptors.ts\n\n...\n\nexport async function refreshTokenReqInterceptor(request: AxiosRequestConfig): Promise<AxiosRequestConfig> {\n  // Read the latest data(auth token, refresh token and expiry)\n  const db = await readFromDb();\n  const data = mostRecent(db.installs);\n  // If no data then continue with the request\n  if (!data) return request;\n  // Data used to calculate the expiry\n  const expiresIn = data.expires_in;\n  const createdDate = data.date;\n  // Used npm library luxon to parse the date and calculate expiry\n  const parsedCreateDate = DateTime.fromISO(createdDate.toString());\n  const expirationDate = parsedCreateDate.plus({ seconds: expiresIn });\n  // Check if expired\n  if (expirationDate < DateTime.now()) {\n    await refreshAndUpdateDb(data);\n  }\n  return request;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Maven Projects with Specific Profile\nDESCRIPTION: Command to test a Maven project with a specific profile (in this example, 'prod').\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsnyk test -- -prod\n```\n\n----------------------------------------\n\nTITLE: Setting Workers Count\nDESCRIPTION: Configures the number of workers for the Snyk monitor.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/optional-installation-steps-for-snyk-controller-with-helm.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install snyk-monitor snyk-charts/snyk-monitor \\\n             --namespace snyk-monitor \\\n             --set workers.count=\"XX\"\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Configuration\nDESCRIPTION: This command applies the Terraform configuration to create the Google service account and provision the necessary resources in Google Cloud. The user must confirm the action by entering 'yes'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/google-cloud-integration/google-cloud-integration-web-ui/step-2-create-the-google-service-account-web-ui.md#2025-04-21_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk CLI via GitHub Actions\nDESCRIPTION: This snippet sets up a GitHub Action workflow to manually install the Snyk CLI without using a predefined action. It runs on Ubuntu and involves downloading the Snyk binary, verifying it with a checksum, making it executable, and moving it to '/usr/local/bin/'. Requires SNYK_TOKEN to be set in the environment for successful execution of Snyk tests.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-images-guides-to-migration/github-actions-migration.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow using Snyk\non: push\njobs:\n  snyk_scan:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Install Snyk CLI\n      run: |\n        curl https://downloads.snyk.io/cli/stable/snyk-linux -o snyk-linux\n        curl https://downloads.snyk.io/cli/stable/snyk-linux.sha256 -o snyk.sha256\n        sha256sum -c snyk.sha256\n        chmod +x snyk-linux\n        sudo mv snyk-linux /usr/local/bin/snyk\n    - name: Run Snyk to test project dependencies\n      env:\n        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n      run: |\n        snyk test\n```\n\n----------------------------------------\n\nTITLE: Kerberos Configuration (Linux, macOS)\nDESCRIPTION: These environment variables are required for Kerberos SSO on non-Windows operating systems when using Snyk CLI behind a proxy. `KRB5_CONFIG` specifies the Kerberos configuration file path, while `KRB5CCNAME` defines the Kerberos credential cache file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/configure-the-snyk-cli/proxy-configuration-for-snyk-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"KRB5_CONFIG # default \\\"/etc/krb5.conf\\\"\\nKRB5CCNAME # default \\\"FILE:/tmp/krb5cc_<UserUID>\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Insecure Downstream Mode in Snyk Broker Helm Chart\nDESCRIPTION: This YAML snippet shows how to set the INSECURE_DOWNSTREAM environment variable to 'true' when installing the Snyk Broker Helm Chart. This configuration forces downstream requests to use HTTP instead of HTTPS.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/insecure-downstream-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n--set env[0].name=INSECURE_DOWNSTREAM --set env[0].value=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring dockercfg.json for EKS using ECR\nDESCRIPTION: This JSON structure demonstrates the configuration of dockercfg.json for Amazon Elastic Kubernetes Service (EKS) using Elastic Container Registry (ECR).\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/authenticate-to-private-container-registries.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credsStore\": \"ecr-login\"\n}\n```\n\n----------------------------------------\n\nTITLE: Projects Controller Implementation\nDESCRIPTION: TypeScript controller for handling project listing routes\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/render-content-for-users.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Controller } from \"../../interfaces/Controller\";\nimport type { NextFunction, Request, Response } from \"express\";\nimport { Router } from \"express\";\nimport { getProjectsFromApi } from \"./projectsHandler\";\n\nexport class ProjectsController implements Controller {\n  public path = \"/projects\";\n  public router = Router();\n\n  constructor() {\n    this.initRoutes();\n  }\n\n  private initRoutes() {\n    this.router.get(`${this.path}`, this.getProjects);\n  }\n\n  private async getProjects(req: Request, res: Response, next: NextFunction) {\n    try {\n      const projects = await getProjectsFromApi();\n      return res.render(\"projects\", {\n        projects,\n      });\n    } catch (error) {\n      return next(error);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Report as JSON\nDESCRIPTION: This command outputs the scan report in JSON format. The `--json` option enables JSON output, and the output is redirected to a file named `report.json`.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/iac-describe-command-examples.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac describe --json > report.json\n```\n\n----------------------------------------\n\nTITLE: Snyk Webhook Sample Payload JSON\nDESCRIPTION: Example webhook payload JSON containing vulnerability notification data, including project details, organization information, and vulnerability specifics like severity, CVSS score, and package information.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/how-to-use-snyk-webhooks-to-connect-snyk-to-slack-with-aws-lambda/test-the-snyk-webhook-connection.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"project\":{\"id\":\"bc75a806-0893-4ccf-84c5-8fde48a88df8\",\"name\":\"snyk/juice-shop:frontend/package.json\",\"created\":\"2022-06-17T06:54:21.326Z\",\"origin\":\"github\",\"type\":\"npm\",\"readOnly\":false,\"testFrequency\":\"daily\",\"totalDependencies\":1216,\"issueCountsBySeverity\":{\"low\":2,\"high\":16,\"medium\":17,\"critical\":0},\"imageTag\":\"12.3.0\",\"imagePlatform\":\"\",\"lastTestedDate\":\"2022-06-29T05:45:12.569Z\",\"browseUrl\":\"https://app.snyk.io/org/api-test/project/bc75a806-0893-4ccf-84c5-8fde48a88df7\",\"importingUser\":null,\"owner\":null,\"tags\":[],\"isMonitored\":true,\"attributes\":{\"criticality\":[],\"lifecycle\":[],\"environment\":[]},\"branch\":\"master\"},\"org\":{\"id\":\"570a1e02-8774-4697-80fc-129f5c5195a1\",\"name\":\"API\",\"slug\":\"api-quc\",\"url\":\"https://app.snyk.io/org/api-test\",\"group\":null,\"created\":\"2022-05-25T06:29:29.833Z\"},\"newIssues\":[{\"id\":\"SNYK-JS-SCSSTOKENIZER-2339884\",\"issueType\":\"vuln\",\"pkgName\":\"scss-tokenizer\",\"pkgVersions\":[\"0.2.3\"],\"priorityScore\":336,\"priority\":{\"score\":336,\"factors\":[{\"name\":\"isFresh\",\"description\":\"Recently disclosed\"},{\"name\":\"cvssScore\",\"description\":\"CVSS 5.3\"}]},\"issueData\":{\"id\":\"SNYK-JS-SCSSTOKENIZER-2339884\",\"title\":\"Regular Expression Denial of Service (ReDoS)\",\"severity\":\"high\",\"url\":\"https://snyk.io/vuln/SNYK-JS-SCSSTOKENIZER-2339884\",\"description\":\"Long description\",\"identifiers\":{\"CWE\":[\"CWE-1333\"],\"CVE\":[\"CVE-2022-25758\"]},\"credit\":[\"Paul Bastide\"],\"exploitMaturity\":\"no-known-exploit\",\"semver\":{\"vulnerable\":[\"*\"]},\"publicationTime\":\"2022-06-29T10:29:38Z\",\"disclosureTime\":\"2022-01-13T16:29:34Z\",\"CVSSv3\":\"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L\",\"cvssScore\":5.3,\"functions\":[],\"language\":\"js\",\"patches\":[],\"nearestFixedInVersion\":\"\",\"isMaliciousPackage\":false},\"isPatched\":false,\"isIgnored\":false,\"fixInfo\":{\"isUpgradable\":false,\"isPinnable\":false,\"isPatchable\":false,\"isFixable\":false,\"isPartiallyFixable\":false,\"nearestFixedInVersion\":\"\",\"fixedIn\":[]}}],\"removedIssues\":[]}\n```\n\n----------------------------------------\n\nTITLE: Patch Section Structure in .snyk File\nDESCRIPTION: YAML syntax for the patch section in a .snyk file. This configuration specifies which vulnerabilities have been patched through Snyk's patch mechanism, including the path to the affected library and patched timestamp.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/the-.snyk-file.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n'npm:library:yyyymmdd' :\n  - path to library using > separator:\n    patched: 'datetime string'\n  - path to library using > separator > to > another > path:\n    patched: 'YYYY-MM-DDThh:mm:ss.fffZ'\n```\n\n----------------------------------------\n\nTITLE: Webhook Creation Response\nDESCRIPTION: HTTP response containing the created webhook details including ID and URL\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/tutorial.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\n< HTTP/2 200 \n< Content-Type: application/json\n| {\n|   \"id\": \"{webhookId}\",\n|   \"url\": \"https://hooks.zapier.com/hooks/catch/9002958/oemlgkz/\",\n| }\n```\n\n----------------------------------------\n\nTITLE: GET Organization IaC Settings\nDESCRIPTION: This endpoint retrieves the current IaC settings for a given organization. It uses the organization ID to fetch the configuration and requires proper authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/iacsettings.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/orgs/{org_id}/settings/iac\" method=\"get\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n```\n\n----------------------------------------\n\nTITLE: Generating organization data from GitHub for Snyk import\nDESCRIPTION: Command to generate organization data from GitHub for import into Snyk. This collects information about GitHub organizations that need to be created in Snyk.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-github.com-and-github-enterprise-organizations-and-repos-in-snyk.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import orgs:data --source=github --groupId=<snyk_group_id>\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Scans with Python Version Specification\nDESCRIPTION: This command allows Snyk to use a specific Python version for scanning, particularly useful in environments with multiple Python versions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/snyk-open-source-specific-ci-cd-strategies.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nsnyk test --command=python3\n```\n\n----------------------------------------\n\nTITLE: Monitoring Unmanaged Open Source Dependencies\nDESCRIPTION: This command allows monitoring of unmanaged open source dependencies within a project, linking results to a specific organization in Snyk, which is useful for ongoing license and security compliance.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/c-c++/guidance-for-snyk-for-c-c++.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk monitor --unmanaged --org=<org-id>\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure\nDESCRIPTION: Commands to create the necessary directory structure for EJS templates and static files\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/render-content-for-users.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ./src/views/partials\nmkdir -p ./src/public\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Auth in accept.json\nDESCRIPTION: Default authentication configuration for GitHub, where the token is part of the origin field in the accept.json file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-snyk-broker-docker-installation/changing-the-auth-method-with-docker.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": [\n    {\n      ...,\n      \"origin\": \"https://${GITHUB_TOKEN}@${GITHUB_API}\"\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Scanning Unmanaged JAR Files with Snyk\nDESCRIPTION: This snippet provides an example command for scanning unmanaged JAR files. The `--scan-unmanaged` option is used to specify the file to be scanned.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/monitor.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--scan-unmanaged --file=<JAR_FILE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Configuring dockercfg.json for Nexus Repository\nDESCRIPTION: This JSON structure demonstrates the configuration of dockercfg.json for Nexus Repository, including authentication details for a single registry.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/authenticate-to-private-container-registries.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auths\": {\n    \"<registry>\": {\n        \"auth\": \"BASE64-ENCODED-AUTH-DETAILS\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring All S3 Buckets Drifts\nDESCRIPTION: This YAML snippet illustrates how to configure the .snyk file to ignore all drifts associated with S3 buckets by using the wildcard '*'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/ignore-resources-for-drift.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.22.1\nexclude:\n  iac-drift:\n    - aws_s3_bucket.*\n```\n\n----------------------------------------\n\nTITLE: Adding Snyk Broker Helm Repository\nDESCRIPTION: Command to add the Snyk Broker Helm Chart repository to your Helm installation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/gitlab-prerequisites-and-steps-to-install-and-configure-broker/gitlab-install-and-configure-using-helm.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add snyk-broker https://snyk.github.io/snyk-broker-helm/\n```\n\n----------------------------------------\n\nTITLE: Parsing Terraform Files - Command\nDESCRIPTION: This command converts a Terraform file into JSON format using the Snyk parse command with the hcl2 format option.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/parsing-an-input-file.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsnyk-iac-rules parse example.tf --format hcl2\n```\n\n----------------------------------------\n\nTITLE: Defining Returned Entity Matcher in Specification Language\nDESCRIPTION: This snippet defines the 'ReturnedBy' matcher, which matches on the entity that is returned by a function. It includes the template parameter 'Function' that specifies the returning entity.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/templates-and-predicates.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n#### ReturnedBy\n\nMatches on the returned entity.\n\nTemplate parameters:\n\n* Function - The entity that returns.\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Broker with LoadBalancer Service Type\nDESCRIPTION: Helm command to install Snyk Broker with GitHub integration and LoadBalancer service configuration. This setup enables external access to the broker through a load balancer service.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/ingress-options-with-snyk-broker-helm-installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install snyk-broker-chart snyk-broker/snyk-broker \\\n             --set scmType=github-com \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set scmToken=<ENTER_REPO_TOKEN> \\\n             --set brokerClientUrl=<ENTER_BROKER_CLIENT_URL>:<ENTER_BROKER_CLIENT_PORT> \\\n             --set service.brokerType=LoadBalancer \\\n             -n snyk-broker --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Counting Contributors for All Projects and Repos\nDESCRIPTION: This command counts contributors for all projects and their repositories in a Bitbucket Server instance. It requires the Bitbucket Server token and URL.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-server/bitbucket-server-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count bitbucket-server --token BITBUCKET-TOKEN --url BITBUCKET-URL\n```\n\n----------------------------------------\n\nTITLE: Creating Logical AND Condition for Tag Validation\nDESCRIPTION: This snippet shows how to create a logical AND condition to check for both 'owner' and 'description' tags in AWS Redshift Cluster resources. The implementation defines a helper function to encapsulate the tag presence check.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/examples-of-iac-custom-rules.md#2025-04-21_snippet_1\n\nLANGUAGE: rego\nCODE:\n```\npackage rules\n\naws_redshift_cluster_tags_present(resource) {\n    resource.tags.owner\n    resource.tags.description\n}\n\ndeny[msg] {\n    resource := input.resource.aws_redshift_cluster[name]\n    not aws_redshift_cluster_tags_present(resource)\n    msg := {\n        \"publicId\": \"CUSTOM-RULE-2\",\n        \"title\": \"Missing a description and an owner from the tag\",\n        \"severity\": \"medium\",\n        \"msg\": sprintf(\"input.resource.aws_redshift_cluster[%s].tags\", [name]),\n        \"issue\": \"\",\n        \"impact\": \"\",\n        \"remediation\": \"\",\n        \"references\": [],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Snyk Webhook Creation Response\nDESCRIPTION: Example response from the webhook creation API showing the webhook ID and configured URL.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/how-to-use-snyk-webhooks-to-integrate-new-relic-with-snyk/create-a-snyk-webhook.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"{SNYK-WEBHOOK-ID}\",\n  \"url\": \"https://{URL}\",\n}\n```\n\n----------------------------------------\n\nTITLE: Re-running PR Checks with Git\nDESCRIPTION: This snippet demonstrates how to re-run Snyk PR Checks by creating an empty commit and a new commit, followed by closing and re-opening the pull request. This can be useful when PR checks fail due to transient issues or require a refresh.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/pull-request-checks/troubleshoot-pr-checks.md#2025-04-21_snippet_0\n\nLANGUAGE: git\nCODE:\n```\n\"git commit –allow-empty\"\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Base Image - REST API PATCH Request\nDESCRIPTION: This snippet demonstrates the PATCH request for updating a specific custom base image identified by '{custombaseimage_id}'. It relies on the REST API for implementation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/custom-base-images.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/custom_base_images/{custombaseimage_id}\" method=\"patch\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group Tags in Snyk API v1\nDESCRIPTION: Endpoint for fetching tags associated with a specific group using group ID\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/groups-v1.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n/group/{groupId}/tags\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Broker Container Registry Agent with Helm\nDESCRIPTION: Basic Helm installation command for Snyk Broker Container Registry Agent with required parameters including broker token, registry type, base URL, and credentials.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/snyk-broker-container-registry-agent/install-broker-for-container-registry-agent-using-helm.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install snyk-broker-chart snyk-broker/snyk-broker \\\n             --set scmType=container-registry-agent \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set crType=<ENTER_CR_TYPE> \\\n             --set crBase=<ENTER_CR_BASE_URL> \\\n             --set crUsername=<ENTER_CR_URSERNAME> \\\n             --set crPassword=<ENTER_CR_PASSWORD> \\\n             -n snyk-broker --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Adding Snyk Broker Helm Repository\nDESCRIPTION: Command to add the Snyk Broker Helm chart repository to your local Helm configuration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/github-prerequisites-and-steps-to-install-and-configure-broker/github-install-and-configure-using-helm.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add snyk-broker https://snyk.github.io/snyk-broker-helm/\n```\n\n----------------------------------------\n\nTITLE: JavaScript Configuration Settings Example\nDESCRIPTION: Example of package.json and package-lock.json file references used in Snyk configuration for JavaScript projects. These files are essential for dependency management and vulnerability scanning.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/javascript/git-repositories-and-javascript.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npackage.json\npackage-lock.json\nyarn.lock\n```\n\n----------------------------------------\n\nTITLE: API Response for Group IaC Settings\nDESCRIPTION: Sample response from the Snyk API showing the Group settings after a successful update. Includes the custom rules configuration details and update timestamp.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/use-iac-custom-rules-with-cli/use-a-remote-iac-custom-rules-bundle.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"iac_settings\",\n  \"id\": \"<group id>\",\n  \"attributes\": {\n    \"custom_rules\": {\n      \"oci_registry_url\": \"registry-1.docker.io/group-account/group-bundle-image\",\n      \"oci_registry_tag\": \"1.3.14\",\n      \"is_enabled\": true\n    },\n   \"updated\": \"2021-11-27T11:34:33.132Z\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Snyk Helm Repository\nDESCRIPTION: Command to add the Snyk Charts repository to Helm with force update option.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/install-the-snyk-controller-with-helm-azure-and-google-cloud-platform.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add snyk-charts https://snyk.github.io/kubernetes-monitor --force-update\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Plan for Snyk IAM Role Creation\nDESCRIPTION: This command reviews and applies the Terraform plan to create the Snyk IAM role in AWS.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/aws-integration/aws-integration-web-ui/step-2-create-the-snyk-iam-role.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Deleting an Organization (DELETE /org/{orgId})\nDESCRIPTION: API endpoint to delete an existing organization. This endpoint is part of the v1 API and uses the DELETE method, requiring the organization ID as a path parameter.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/organizations-v1.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/org/{orgId}\" method=\"delete\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Insecure Registry Settings\nDESCRIPTION: Configuration for insecure registry or registry using unqualified images using registries.conf format.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/optional-installation-steps-for-snyk-controller-with-helm.md#2025-04-21_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\n[[registry]]\nlocation = \"internal-registry-for-example.net/bar\"\ninsecure = true\n```\n\n----------------------------------------\n\nTITLE: SARIF Upload Workflow for GitHub Code Scanning\nDESCRIPTION: GitHub Actions workflow that performs vulnerability scanning and uploads results to GitHub Code Scanning in SARIF format. Uses continue-on-error to ensure SARIF upload occurs even if vulnerabilities are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-python-3.7-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Python-3.7 using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/python-3.7@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Identifying External Control of System or Configuration Setting Vulnerabilities\nDESCRIPTION: This entry highlights external control over configuration settings (CWE-15) in Java, Kotlin, and Scala, which could enable attackers to manipulate the system's behavior.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Installing Snyk Broker for Artifactory Repository using Helm\nDESCRIPTION: Helm command to install Snyk Broker for Artifactory Repository integration. The command specifies SCM type, broker token, server URL, and Artifactory URL parameters within the snyk-broker namespace. The artifactoryUrl value should not include 'https://'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/artifactory-repository-install-and-configure-broker/artifactory-repository-install-and-configure-using-helm.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install snyk-broker-chart snyk-broker/snyk-broker \\\n             --set scmType=artifactory \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set brokerServerUrl=<broker-region-url>\n             --set artifactoryUrl=<ENTER_ARTIFACTORY_URL> \\\n             -n snyk-broker --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Installing EJS Dependencies\nDESCRIPTION: Command to install the EJS template engine package for Node.js\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/render-content-for-users.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save ejs\n```\n\n----------------------------------------\n\nTITLE: Swagger API Documentation for Slack Settings\nDESCRIPTION: This snippet includes Swagger API documentation for various endpoints related to Slack app settings and project integrations. It covers methods for managing Slack bots and their associated projects within an organization.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/slacksettings.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/orgs/{org_id}/slack_app/{bot_id}\" method=\"post\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/orgs/{org_id}/slack_app/{bot_id}\" method=\"get\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/orgs/{org_id}/slack_app/{bot_id}\" method=\"delete\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/orgs/{org_id}/slack_app/{bot_id}/projects\" method=\"get\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/orgs/{org_id}/slack_app/{bot_id}/projects/{project_id}\" method=\"post\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/orgs/{org_id}/slack_app/{bot_id}/projects/{project_id}\" method=\"patch\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/orgs/{org_id}/slack_app/{bot_id}/projects/{project_id}\" method=\"delete\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Setting broker server URL for regional Helm chart installation\nDESCRIPTION: Command to configure the Helm chart with a region-specific broker URL. This setting is necessary when deploying Snyk in different multi-tenant regions to ensure proper connectivity.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/multi-tenant-settings-for-helm-chart-installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--set brokerServerUrl=<broker-region-url>\n```\n\n----------------------------------------\n\nTITLE: Editing AWS IAM Trust Relationships for Snyk\nDESCRIPTION: This JSON snippet demonstrates how to update the 'sts:ExternalId' field in the AWS IAM role trust relationships to include additional Snyk Organization IDs. The organization IDs must be enclosed in square brackets and separated by commas. This setup ensures that multiple organizations are recognized during authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/container-registry-integrations/integrate-with-amazon-elastic-container-registry-ecr/add-more-organizations-to-your-aws-iam-role-for-snyk-authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"sts:ExternalId\": [\n\"11111111-1111-1111-1111-111111111111\",\n\"22222222-2222-2222-2222-222222222222\",\n\"c2fa1651-601d-41gc-abe9-03691f5287d8\"\n]\n```\n\n----------------------------------------\n\nTITLE: Terraform Cloud Organization Tasks URL\nDESCRIPTION: URL pattern for accessing run tasks settings in Terraform Cloud organization\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/terraform-cloud-integration-for-snyk-iac-using-run-tasks/set-up-the-terraform-cloud-integration-for-iac.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://app.terraform.io/app/{YOUR_TFC_ORG}/settings/tasks\n```\n\n----------------------------------------\n\nTITLE: Testing and Printing Dependency List\nDESCRIPTION: This command tests unmanaged open source dependencies and prints a detailed list of discovered dependencies and their origin, which is particularly useful for identifying the confidence level of matches.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/c-c++/guidance-for-snyk-for-c-c++.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --unmanaged --print-deps\n```\n\n----------------------------------------\n\nTITLE: Generating Base64 Encoded Authentication for dockercfg.json\nDESCRIPTION: This command generates a Base64 encoded string from a username and password combination for use in the dockercfg.json file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/authenticate-to-private-container-registries.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho -n 'username:password' | base64\n```\n\n----------------------------------------\n\nTITLE: Handling Corrupted Bundle Error with Snyk CLI\nDESCRIPTION: This is an error message output when the provided bundle is corrupted or invalid. Users are encouraged to follow the correct bundle generation process and utilize the `-d` flag while contacting Snyk support with the acquired output.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/use-iac-custom-rules-with-cli/use-a-local-iac-custom-rules-bundle.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nWe were unable run the test. Please run the command again with the `-d` flag and contact support@snyk.io with the contents of the output.\n```\n\n----------------------------------------\n\nTITLE: Detect Unmanaged Resources with Local Terraform State\nDESCRIPTION: This command detects unmanaged resources by comparing a local Terraform state file with actual resources in the cloud. It provides a mechanism to see discrepancies and helps maintain resource management.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/iac-describe.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ snyk iac describe --from=\\\"tfstate://terraform.tfstate\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Broker Chart for Jira Integration with PAT\nDESCRIPTION: This Helm command installs the Snyk Broker Chart using personal access tokens (PAT) for Jira when SSO is enabled. It requires scmType set to 'jira-bearer-auth', brokerToken, jiraPat, jiraHostname, and brokerClientUrl as key parameters. This command should be used when the Jira account is SSO-enabled, replacing username/password with a PAT.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/jira-prerequisites-and-steps-to-install-and-configure-broker/jira-install-and-configure-using-helm.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install snyk-broker-chart snyk-broker/snyk-broker \\\n             --set scmType=jira-bearer-auth \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set jiraPat=<ENTER_JIRA_PAT> \\\n             --set jiraHostname=<ENTER_JIRA_HOSTNAME>  \\\n             --set brokerClientUrl=<ENTER_BROKER_CLIENT_URL>:<ENTER_BROKER_CLIENT_PORT> \\\n             -n snyk-broker --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Installing snyk-delta using npm\nDESCRIPTION: This command installs the snyk-delta tool globally using npm.  This allows the tool to be used from the command line. The tool will be installed in the global node_modules directory.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-delta.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm i -g snyk-delta\"\n```\n\n----------------------------------------\n\nTITLE: POST Pull Request Template Endpoint in Swagger\nDESCRIPTION: Swagger API specification for creating a pull request template for a specific group. Uses the POST method on the /groups/{group_id}/settings/pull_request_template endpoint.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/pull-request-templates.md#2025-04-21_snippet_0\n\nLANGUAGE: swagger\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/groups/{group_id}/settings/pull_request_template\" method=\"post\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Defining Number Literal Matcher in Specification Language\nDESCRIPTION: This snippet describes the 'NumberLiteral' matcher which matches numeric type literals. It defines the template parameter 'Value' as the numeric value being matched.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/templates-and-predicates.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n#### NumberLiteral\n\nMatches on numeric type literals.\n\nTemplate parameters:\n\n* Value\n```\n\n----------------------------------------\n\nTITLE: Pulling the Latest Snyk Broker Image with Docker\nDESCRIPTION: This snippet demonstrates how to pull the latest Docker image for Snyk Broker, which is required for integrating with third-party services in Snyk AppRisk. The command relies on having Docker installed.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/snyk-broker-apprisk.md#2025-04-21_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker pull snyk/broker:universal\n```\n\n----------------------------------------\n\nTITLE: Direct Snyk CLI Installation in CircleCI\nDESCRIPTION: Step-by-step configuration for downloading, verifying, and installing Snyk CLI directly without using the Snyk orb\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-images-guides-to-migration/circleci-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\njobs:\n  snyk_scan:\n    docker:\n      - image: cimg/node:lts\n    steps:\n      - checkout\n      - run: npm ci\n      - run:\n          name: Download Snyk CLI\n          command: |\n            curl -Lo snyk-linux https://downloads.snyk.io/cli/stable/snyk-linux\n      - run:\n          name: Download Snyk CLI SHA256 Checksum\n          command: |\n            curl -Lo snyk-linux.sha256 https://downloads.snyk.io/cli/stable/snyk-linux.sha256\n      - run:\n          name: Verify SHA256 Checksum\n          command: |\n            sha256sum -c snyk-linux.sha256\n      - run:\n          name: Install Snyk CLI\n          command: |\n            chmod +x snyk-linux\n            ./snyk-linux --version\n      - run:\n          name: Run Snyk iac test\n          command: |\n            ./snyk-linux iac test\nworkflows:\n  version: 2\n  build_and_scan:\n    jobs:\n      - snyk_scan\n```\n\n----------------------------------------\n\nTITLE: Bash Command - Running a Specific Test with Explain Notes\nDESCRIPTION: This command executes a specific Rego test case, `test_MY_RULE`, and includes the `--explain notes` option to provide more detailed output for debugging failed tests. The additional output shows more details about why the test failed.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/testing-a-rule.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\" snyk-iac-rules test --run test_MY_RULE --explain notes\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Universal Broker Connection Example\nDESCRIPTION: Shows the interactive prompt flow when deleting a connection using snyk-broker-config, including validation steps and confirmation for disconnecting organization integrations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/disconnect-and-clean-up.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUniversal Broker - Delete Connection Workflow\n✓ Valid Snyk Token.\n✓ Tenant Adnmim role confirms.\nNow using Tenant ID of <returned number>.\nNow using Deployment <returned number>.\n   Which Connection do you want to use? <number entered>\n   Connection <number entered> is used by 2 orgs integrations. \nDo you want to disconnect them all? (Y/N)\n```\n\n----------------------------------------\n\nTITLE: Using Container Recommended Base Image Name in PR\nDESCRIPTION: This snippet demonstrates how to use the `container.recommended_base_image_name` variable to suggest a base image upgrade in a container project pull request. It requires a JSON configuration where the description includes this variable, resulting in a message suggesting an upgrade to a specified base image.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"description\": \"We recommend upgrading to {{ container.recommended_base_image_name }}\"\n            \n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Snyk CLI Organization\nDESCRIPTION: Sets the default Snyk Organization ID using the `snyk config set org=<ORG_ID>` command. This ensures that all newly tested and monitored projects are associated with the specified Organization.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/container-test.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk config set org=<ORG_ID>\n```\n\n----------------------------------------\n\nTITLE: Scanning Projects with Custom Policy Path in Snyk CLI\nDESCRIPTION: This command scans all projects while applying a common policy file located at src/.snyk. This is useful when maintaining ignores and patches in one place to be applied for all detected workspaces.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/javascript/javascript-for-open-source.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --all-projects --strict-out-of-sync=false --policy-path=src/.snyk\n```\n\n----------------------------------------\n\nTITLE: API Response: Vulnerability Identifiers (JSON)\nDESCRIPTION: Example of how CVE and CWE identifiers are represented in the API response for a vulnerability.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/issues-list-issues-for-a-package.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"problems\": [\n    {\n        \"id\": \"CVE-2024-41990\",\n        \"source\": \"CVE\"\n    },\n    {\n        \"id\": \"CWE-400\",\n        \"source\": \"CWE\"\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Basic IaC Testing Command\nDESCRIPTION: Basic command to recursively test all IaC files in current directory\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test\n```\n\n----------------------------------------\n\nTITLE: CLI Test with Report and Passive Execution\nDESCRIPTION: Demonstrates how to run Snyk CLI tests with reporting and ensure build continues even if issues are found\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/implement-snyk/team-implementation-guide/phase-2-configure-your-organization/configure-integrations.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsnyk code test --report || true\n```\n\nLANGUAGE: shell\nCODE:\n```\nsnyk iac test --report || true\n```\n\n----------------------------------------\n\nTITLE: Docker Build and Push Commands for Snyk Custom Image\nDESCRIPTION: Shell commands to build and push the custom Snyk Docker image to a repository. The commands demonstrate tagging the image with node-lts and pushing it to a Docker registry.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/user-defined-custom-images-for-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# bulid image\ndocker build <PATH-TO-DOCKERFILE> --tag foobar/snyk:node-lts\n\n# push image\ndocker push foobar/snyk:node-lts\n```\n\n----------------------------------------\n\nTITLE: Committing Changes and Pushing to GitHub for Snyk PR Check\nDESCRIPTION: These Git commands commit the changes locally and push them to GitHub, creating a new branch. This sets up the scenario for Snyk to perform PR checks on the new vulnerabilities.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/integrate-snyk-into-your-workflow-using-the-cli.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit status\ngit add package*\ngit commit -m \"adding tinymce v4.1.0\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push --set-upstream origin add_vulns\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request to Check AWS Cloud Environment Scan Status\nDESCRIPTION: This curl command sends a GET request to the Snyk API to check the status of an AWS Cloud Environment scan. It requires the organization ID, environment ID, and API token.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/aws-integration/aws-integration-api/step-3-create-and-scan-a-cloud-environment-api.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/environments?id=YOUR-ENVIRONMENT-ID&version=2022-12-21~beta' \\\n  -H 'Authorization: token YOUR-API-TOKEN'\n```\n\n----------------------------------------\n\nTITLE: BitBucket Pipeline Configuration with Updated Snyk Node-22 Image\nDESCRIPTION: Updated BitBucket Pipelines configuration using the supported snyk/snyk:node-22 Snyk Image. Demonstrates the migration path from the deprecated node-16 image to the supported node-22 image.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-images-guides-to-migration/bitbucket-pipelines-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n#  Upgrading to supported Snyk Image `snyk/snyk:node-22`\n#  Template NodeJS build\n\n#  This template allows you to validate your NodeJS code.\n#  The workflow allows running tests and code linting on the default branch.\n\nimage: atlassian/default-image:latest\n\npipelines:\n  default:\n    - parallel:\n        - step:\n            name: Build\n            caches:\n              - node\n            script:\n              - npm install\n        - step:\n            name: Snyk scan\n            script:\n              - pipe: snyk/snyk-scan:1.0.1\n                variables:\n                  SNYK_TOKEN: $SNYK_TOKEN\n                  LANGUAGE: \"node-22\" # <------ Upgrade to the `snyk/snyk:node-22` Snyk Image\n                  EXTRA_ARGS: \"--all-projects\" # Optional\n                  DEBUG: \"true\" # Optional\n```\n\n----------------------------------------\n\nTITLE: Configuring PR Check Fail Conditions\nDESCRIPTION: Defines customizable fail conditions for Snyk PR Checks, allowing filtering of issues based on severity and fixability\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/implement-snyk/enterprise-implementation-guide/phase-6-rolling-out-the-prevention-stage/enable-and-configure-snyk-on-prs.md#2025-04-21_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\n# PR Check Fail Conditions\n- Fail for High or Critical severity issues\n- Fail when issues have a fix available\n```\n\n----------------------------------------\n\nTITLE: Provision a User to Organization API Response Model\nDESCRIPTION: JSON response model returned after successfully provisioning a user to a Snyk organization. The response includes the user's email, role information, and creation timestamp.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-admin/user-management-with-the-api/provision-users-to-organizations-using-the-api.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"email\": \"test@example.com\",\n\"rolePublicId\": \"\",\n\"role\": \"ADMIN\",\n\"created\": Date\n}\n```\n\n----------------------------------------\n\nTITLE: Snyk Python High Severity Vulnerability Scanning\nDESCRIPTION: GitHub Actions workflow that runs Snyk security scanning for only high severity vulnerabilities in Python projects using the severity-threshold argument.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-python-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Python using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/python@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Snyk LSP Initialization Options - JSON Configuration\nDESCRIPTION: This JSON snippet illustrates the initialization options available for Snyk Language Server. It includes settings for activating various Snyk features (Open Source, Code, IaC), configuring proxies, and setting the token for authentication. Advanced options for telemetry, trusted folders, and additional parameters for the Snyk CLI can also be specified here.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/snyk-language-server/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"activateSnykOpenSource\": \"true\", // Enables Snyk Open Source - defaults to true\n  \"activateSnykCode\": \"false\", // Enables Snyk Code, if enabled for your organization - defaults to false\n  \"activateSnykIac\":  \"true\", // Enables Infrastructure as Code - defaults to true\n  \"insecure\": \"false\", // Allows custom CAs (Certification Authorities)\n  \"endpoint\":  \"https://example.com\", // Snyk API Endpoint required for non-default multi-tenant and single-tenant setups\n  \"additionalParams\": \"--all-projects\", // Any extra params for the Snyk CLI, separated by spaces\n  \"additionalEnv\":  \"MAVEN_OPTS=-Djava.awt.headless=true;FOO=BAR\", // Additional environment variables, separated by semicolons\n  \"path\": \"/usr/local/bin\", // Adds to the system path used by the CLI\n  \"sendErrorReports\":  \"true\", // Whether or not to report errors to Snyk - defaults to true\n  \"organization\": \"a string\", // The name of your organization, e.g. the output of: curl -H \"Authorization: token $(snyk config get api)\"  https://api.snyk.io/v1/cli-config/settings/sast | jq .org\n  \"enableTelemetry\":  \"true\", // Whether or not user analytics can be tracked\n  \"manageBinariesAutomatically\": \"true\", // Whether or not CLI/LS binaries will be downloaded & updated automatically\n  \"cliPath\":  \"/a/patch/snyk-cli\", // The path where the CLI can be found, or where it should be downloaded to\n  \"token\":  \"secret-token\", // The Snyk token, e.g.: snyk config get api\n  \"automaticAuthentication\": \"true\", // Whether or not LS will automatically authenticate on scan start (default: true)\n  \"enableTrustedFoldersFeature\": \"true\", // Whether or not LS will prompt to trust a folder (default: true)\n  \"trustedFolders\": [\"/a/trusted/path\", \"/another/trusted/path\"] // An array of folder that should be trusted\n}\n```\n\n----------------------------------------\n\nTITLE: Get Organization Service Account Details - GET Request\nDESCRIPTION: API endpoint to retrieve details of a specific service account in a Snyk Organization.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/service-accounts/manage-service-accounts-using-the-snyk-api.md#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.snyk.io/rest/orgs/{orgId}/service_accounts/{serviceAccountId}\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Broker with Bitbucket using PAT via Docker\nDESCRIPTION: This snippet provides the Docker command to run the Snyk Broker client and connect it to a Bitbucket Server instance using a Personal Access Token (PAT). It requires setting environment variables for the Broker token, Bitbucket PAT, API endpoint, and other configuration parameters. This setup supports analyzing Open Source, IaC, Container, Code files, and Snyk Essentials.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/bitbucket-server-data-center-prerequisites-and-steps-to-install-and-configure-broker/data-center.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --restart=always \\\n           -p 8000:8000 \\\n           -e BROKER_TOKEN=<secret-broker-token> \\\n           -e BITBUCKET_PAT=<personal-access-token> \\\n           -e BITBUCKET=<your.bitbucket-server.domain.com (no http/s)> \\\n           -e BITBUCKET_API=<your.bitbucket-server.domain.com/rest/api/1.0 (no http/s)> \\\n           -e PORT=8000 \\\n           -e BROKER_CLIENT_URL=<http://broker.url.example:8000 (dns/IP:port)> \\\n           -e ACCEPT_IAC=tf,yaml,yml,json,tpl \\\n           -e ACCEPT_CODE=true \\\n           -e ACCEPT_Essentials=true \\\n       snyk/broker:bitbucket-server-bearer-auth\n```\n\n----------------------------------------\n\nTITLE: Creating an Import File for Unmonitored Repos\nDESCRIPTION: This command generates an import file containing information about unmonitored repositories. The `--importConfDir` flag specifies the directory to store the import file, and the `--importFileRepoType` flag (optional) specifies the types of repositories to include (`all`, `private`, or `public`).\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-server/bitbucket-server-examples.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count bitbucket-server --token BITBUCKET-TOKEN --url BITBUCKET-URL --importConfDir ValidPathToFolder --importFileRepoType private/public/all\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Auth for BitBucket in accept.json\nDESCRIPTION: Default authentication configuration for BitBucket Server and Data Center using Basic Auth with username and password in the accept.json file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-snyk-broker-docker-installation/changing-the-auth-method-with-docker.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": [\n    {\n      ...,\n      \"auth\": {\n         \"scheme\": \"basic\",\n         \"username\": \"${BITBUCKET_USERNAME}\",\n         \"password\": \"${BITBUCKET_PASSWORD}\"\n      }\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Severity Levels in Snyk Security Policies\nDESCRIPTION: This snippet shows the available severity levels that can be set in a Snyk security policy action. These levels are used to change the severity of issues matching certain conditions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/security-policies/security-policy-actions.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`Low`, `Medium`, `High`, or `Critical`\n```\n\n----------------------------------------\n\nTITLE: Fetching Contributor Counts for a Specific Repository - Command Line - Shell\nDESCRIPTION: This command retrieves contributor counts for a single repository within a given organization using the user's GitHub token. It requires the token, the organization name, and the repository name.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/github/github-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsnyk-scm-contributors-count github --token TOKEN --orgs ORG --repo REPO\n```\n\n----------------------------------------\n\nTITLE: Deleting an App - HTTP DELETE Request\nDESCRIPTION: This snippet outlines how to delete a Snyk App from an organization by sending a DELETE request to the appropriate endpoint. The app ID must be included in the URL.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/manage-app-details.md#2025-04-21_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE https://api.snyk.io/rest/orgs/{orgId}/apps/creations/{app_id}?version={version}\n```\n\n----------------------------------------\n\nTITLE: Internal Server Error Response\nDESCRIPTION: Example of a 500 internal server error response showing the HTTP headers and structure.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/v1-api.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nHTTP/1.1 500 Internal Server Error\nx-error-reference: a45ec9c1-065b-4f7b-baf8-dbd1552ffc9f\nContent-Type: application/json; charset=utf-8\nContent-Length: 1848\nVary: Accept-Encoding\nDate: Sun, 10 Sep 2017 06:48:40 GMT\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile FROM Statement Example\nDESCRIPTION: Example reference to Dockerfile FROM statements in multi-stage builds. The final FROM statement determines the base image that Snyk will analyze for vulnerabilities.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/use-snyk-container/detect-the-container-base-image.md#2025-04-21_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM\n```\n\n----------------------------------------\n\nTITLE: Snyk Permissions Table HTML Structure\nDESCRIPTION: HTML table structure displaying user permissions with checkmark emojis indicating allowed actions for different user roles\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-admin/user-roles/pre-defined-roles.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tr><td>View Container Image</td><td><span data-gb-custom-inline data-tag=\"emoji\" data-code=\"2714\">✔️</span></td><td></td><td><span data-gb-custom-inline data-tag=\"emoji\" data-code=\"2714\">✔️</span></td><td></td><td></td></tr>\n```\n\n----------------------------------------\n\nTITLE: Nexus 3 - RES_BODY_URL_SUB Example\nDESCRIPTION: This example shows how to configure the RES_BODY_URL_SUB environment variable for a Nexus 3 deployment. It is essential for npm and Yarn integrations, providing the URL without credentials appended with `/repository`.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/nexus-repository-prerequisites-and-steps-to-install-and-configure-broker/nexus-repository-environment-variables-for-snyk-broker.md#2025-04-21_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n\"https://<your.nexus.hostname]/repository\"\n```\n\n----------------------------------------\n\nTITLE: Creating Snyk Webhook Using HTTP POST Request\nDESCRIPTION: This snippet illustrates an API request to create a webhook in Snyk, which requires the Snyk Organization ID, authentication token, the public URL for the Lambda function, and the Lambda secret environment variable value. The snippet showcases the necessary headers and JSON body format expected by the Snyk API.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/how-to-use-snyk-webhooks-to-connect-snyk-to-slack-with-aws-lambda/set-up-the-snyk-webhook.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST https://api.snyk.io/v1/org/{SNYK-ORG-ID}/webhooks HTTP/2\nHost: snyk.io\nAuthorization: token {SNYK-TOKEN}\nContent-Type: application/json\n\n{\n    \"url\": \"https://{TARGET-WEBHOOK-URL}\",\n    \"secret\": \"{THE-VALUE-OF-YOUR-LAMBDA-SECRET-ENVIRONMENT-VARIABLE}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Universal Broker Client\nDESCRIPTION: Docker command to run the Universal Broker client with required environment variables and configuration\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/basic-steps-to-install-and-configure-universal-broker.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --restart=always \\\n-p 8000:8000 \\\n-e DEPLOYMENT_ID=<DEPLOYMENT_ID_JUST_CREATED> \\\n-e CLIENT_ID=<CLIENT_ID_SAVED_EARLIER> \\\n\n-e CLIENT_SECRET=<CLIENT_SECRET_SAVED_EARLIER> \\\n-e MY_GITHUB_TOKEN=<THE_ACTUAL_GITHUB_TOKEN_VALUE> \\\n-e PORT=8000 \\\nsnyk/broker:universal\n```\n\n----------------------------------------\n\nTITLE: Counting Contributors for All Workspaces in Bitbucket Cloud\nDESCRIPTION: Command example for getting commits for all workspaces and their repositories in Bitbucket Cloud by providing username and app password.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-cloud/bitbucket-cloud-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count bitbucket-cloud --user USERNAME --password APP_PASSWORD\n```\n\n----------------------------------------\n\nTITLE: API Response After Reverting to Group Settings\nDESCRIPTION: Sample response from the Snyk API showing the Organization settings after reverting to parent Group settings. Includes the inherit_from_parent property and Group settings.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/use-iac-custom-rules-with-cli/use-a-remote-iac-custom-rules-bundle.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"iac_settings\",\n  \"id\": \"<org id>\",\n  \"attributes\": {\n    \"custom_rules\": {\n      \"oci_registry_url\": \"registry-1.docker.io/group-account/group-bundle-image\",\n      \"oci_registry_tag\": \"1.3.14\",\n      \"is_enabled\": true,\n      \"inherit_from_parent\": \"group\"\n    },\n   \"updated\": \"2021-11-19T10:59:45.259Z\",\n   \"parents\"  {\n      \"group\": {\n        \"id\": \"<group id>\",\n        \"type\": \"iac_settings\",\n        \"attributes\": {\n          \"custom_rules\": {\n            \"oci_registry_url\": \"registry-1.docker.io/group-account/group-bundle-image\",\n            \"oci_registry_tag\": \"1.3.14\",\n            \"is_enabled\": true\n          },\n          \"updated\": \"2021-11-19T10:59:45.259Z\"\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Python Version Configuration\nDESCRIPTION: Example showing how to set Python version 3.7 at the project level using language-settings in the .snyk file\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/the-.snyk-file.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nlanguage-settings: \n  python: \"3.7\"\n```\n\n----------------------------------------\n\nTITLE: Initial PVC Configuration\nDESCRIPTION: Creates and configures a new PersistentVolumeClaim for the Snyk monitor.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/optional-installation-steps-for-snyk-controller-with-helm.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install snyk-monitor snyk-charts/snyk-monitor \\\n             --namespace snyk-monitor \\\n             --set pvc.enabled=true \\\n             --set pvc.create=true \\\n             --set pvc.name=\"snyk-monitor-pvc\"\n```\n\n----------------------------------------\n\nTITLE: Setting Bitbucket Cloud Credentials\nDESCRIPTION: Bash commands to set the Bitbucket Cloud username and password as environment variables, which are required for authentication during the import process.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/creating-import-targets-data-for-import-command.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexport BITBUCKET_CLOUD_USERNAME=your_bitbucket_cloud_username\nexport BITBUCKET_CLOUD_PASSWORD=your_bitbucket_cloud_password\n```\n\n----------------------------------------\n\nTITLE: Adding Snyk Broker Helm Chart Repository\nDESCRIPTION: This command adds the Snyk Broker Helm Chart repository to your Helm installation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/nexus-repository-prerequisites-and-steps-to-install-and-configure-broker/nexus-repository-install-and-configure-using-helm.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add snyk-broker https://snyk.github.io/snyk-broker-helm/\n```\n\n----------------------------------------\n\nTITLE: Setting Bash Script Permissions for Azure CLI Setup\nDESCRIPTION: Command to make the Azure CLI setup script executable.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/azure-integration-for-cloud-configurations/azure-integration-web-ui/step-2-create-the-entra-id-app-registration.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nchmod 755 snyk-permissions-azure.sh\n```\n\n----------------------------------------\n\nTITLE: Checking AWS CloudFormation Stack Status using AWS CLI\nDESCRIPTION: This AWS CLI command checks the status of the CloudFormation stack created for the Snyk IAM role.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/aws-integration/aws-integration-web-ui/step-2-create-the-snyk-iam-role.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation describe-stacks \\\n  --stack-name snyk-cloud-role \\\n  --query 'Stacks[0].StackStatus'\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML Files with Rego Builtin\nDESCRIPTION: A custom Rego function that takes a file path and converts YAML formatted content to JSON. Enables easier file parsing in testing scenarios.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/custom-rego-builtins.md#2025-04-21_snippet_1\n\nLANGUAGE: rego\nCODE:\n```\nyaml.unmarshal_file\n```\n\n----------------------------------------\n\nTITLE: Processing Snyk Security Findings in C# Azure Function\nDESCRIPTION: Azure Function implementation that processes Snyk webhook payloads containing security scan results. The function parses vulnerability data, formats repository/container information, and generates a structured findings report. Supports GitHub, Docker Hub, and Azure Repos integrations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/how-to-use-snyk-webhooks-to-integrate-new-relic-with-snyk/create-an-azure-function-app.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#r \"Newtonsoft.Json\"\n\nusing System.Net;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Primitives;\nusing Newtonsoft.Json;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing Newtonsoft.Json.Linq;\nusing System.Web;\nusing System.Text.RegularExpressions;\n\npublic static async Task<IActionResult> Run(HttpRequest req, ILogger log)\n{\n    log.LogInformation(\"C# HTTP trigger function processed a request.\");\n    string responseMessage = \"No valid payload received!\";\n\n    try\n    {\n        string name = req.Query[\"name\"];\n\n        string requestBody = await new StreamReader(req.Body).ReadToEndAsync();\n        dynamic data = JsonConvert.DeserializeObject(requestBody);\n        //log.LogInformation(\"data: \" + requestBody);\n\n        if (data.project != null)\n        {\n            string count = data.newIssues.Count.ToString();\n            string projectName = data.project.name;\n            string[] projectNameParts = projectName.Split(':');\n            string containerImage = projectName;\n            if (projectNameParts.Length > 1)\n            {\n                containerImage = projectNameParts[1] + \":\" + data.project.imageTag;\n            }\n            string repoURL = data.project.name;\n            string artifactURL = data.project.name;\n            string entityLookupValue = repoURL;\n            string entityType = \"Repository\";\n            int idxRepoURLBranch = repoURL.IndexOf(\"(\");\n            if (data.project.origin == \"github\")\n            {\n                int idxRepoURLProject = repoURL.IndexOf(\":\");\n                string package = \"\";\n                if (idxRepoURLBranch >= 0)\n                {\n                    package = repoURL.Substring(idxRepoURLProject + 1, repoURL.Length - idxRepoURLProject - 1);\n                    log.LogInformation(\"package: \" + package);\n                    entityLookupValue = \"https://github.com/\" + repoURL.Substring(0, idxRepoURLBranch);\n                    repoURL = \"https://github.com/\" + repoURL.Substring(0, idxRepoURLBranch);\n\n                    if (data.project.branch != \"\")\n                    {\n                        repoURL = repoURL + \"/blob/\" + data.project.branch + \"/\" + package;\n                    }\n                }\n                else\n                {\n                    entityLookupValue = \"https://github.com/\" + repoURL.Substring(0, idxRepoURLProject);\n                    repoURL = \"https://github.com/\" + repoURL.Substring(0, idxRepoURLProject);\n                }\n            }\n            else if (data.project.origin == \"docker-hub\")\n            {\n                entityType = \"ContainerImage\";\n                entityLookupValue = data.project.imageId;\n                if (idxRepoURLBranch >= 0)\n                {\n                    artifactURL = \"https://hub.docker.com/repository/docker/\" + repoURL.Substring(0, idxRepoURLBranch);\n                    repoURL = \"https://hub.docker.com/repository/docker/\" + repoURL.Substring(0, idxRepoURLBranch);\n\n                    if (data.project.branch != \"\")\n                    {\n                        repoURL = repoURL + \"/tree/\" + data.project.branch;\n                    }\n                }\n                else\n                {\n                    int idxRepoURLProject = repoURL.IndexOf(\":\");\n                    artifactURL = \"https://hub.docker.com/repository/docker/\" + repoURL.Substring(0, idxRepoURLProject);\n                    repoURL = \"https://hub.docker.com/repository/docker/\" + repoURL.Substring(0, idxRepoURLProject);\n                }\n            }\n            else if (data.project.origin == \"azure-repos\")\n            {\n                var AZURE_DEVOPS_ORG = Environment.GetEnvironmentVariable(\"AZURE_DEVOPS_ORG\");\n                int idxRepoURLProject = repoURL.IndexOf(\"/\");\n                string package = \"\";\n                if (idxRepoURLBranch >= 0)\n                {\n                    package = repoURL.Substring(idxRepoURLProject + 1, repoURL.Length - idxRepoURLProject - 1);\n                    log.LogInformation(\"package: \" + package);\n                    entityLookupValue = \"https://dev.azure.com/\" + AZURE_DEVOPS_ORG + \"/\" + repoURL.Substring(0, idxRepoURLProject);\n                    repoURL = \"https://dev.azure.com/\" + AZURE_DEVOPS_ORG + \"/\" + repoURL.Substring(0, idxRepoURLBranch);\n\n                    if (data.project.branch != \"\")\n                    {\n                        repoURL = repoURL + \"/blob/\" + data.project.branch + \"/\" + package;\n                    }\n                }\n                else\n                {\n                    entityLookupValue = \"https://dev.azure.com/\" + AZURE_DEVOPS_ORG + \"/\" + repoURL.Substring(0, idxRepoURLProject);\n                    repoURL = \"https://dev.azure.com/\" + AZURE_DEVOPS_ORG + \"/\" + repoURL.Substring(0, idxRepoURLProject);\n                }\n            }\n\n            log.LogInformation(projectName + \", data.newIssues.Count: \" + count);\n            responseMessage = \"No new issues found. Nothing to process!\";\n\n            name = name ?? data?.name;\n            string browseUrl = data.project.browseUrl;\n            int x = 0;\n\n            StringBuilder sb = new StringBuilder();\n            sb.Append(\"{\\\"findings\\\":[}\");\n\n            if (data.newIssues.Count > 0)\n            {\n                log.LogInformation(\"New issues found!\");\n\n                for (int i = 0; i < data.newIssues.Count; i++)\n                {\n                    string id = data.newIssues[i].id.ToString();\n                    string issueType = data.newIssues[i].issueType;\n                    string pkgName = data.newIssues[i].pkgName;\n                    int priorityScore = data.newIssues[i].priorityScore;\n                    string title = data.newIssues[i].issueData.title;\n                    string issueId = data.newIssues[i].issueData.id;\n                    string issueVendorId = issueId;\n                    if (data.newIssues[i].issueData.identifiers.CVE.Count > 0)\n                    {\n                        issueId = data.newIssues[i].issueData.identifiers.CVE[0];\n                    }\n                    else if (data.newIssues[i].issueData.identifiers.CWE.Count > 0)\n                    {\n                        issueId = data.newIssues[i].issueData.identifiers.CWE[0];\n                    }\n                    double cvssScore = data.newIssues[i].issueData.cvssScore;\n                    string severity = data.newIssues[i].issueData.severity.ToString().ToUpper();\n                    string issueSeverity = data.newIssues[i].issueData.severity;\n                    string descr = data.newIssues[i].issueData.description.ToString();\n                    if (data.newIssues[i].issueData.description.ToString().Length >= 256)\n                    {\n                        descr = data.newIssues[i].issueData.description.ToString().Substring(0, 256);\n                    }\n                    descr = descr.Replace(\"\\n\", \"\").Replace(\"\\r\", \"\");\n                    bool remediationExists = data.newIssues[i].fixInfo.isFixable;\n                    string remediationRecommendation = \"\";\n                    if (remediationExists)\n                    {\n                        remediationRecommendation = \"upgrade \" + pkgName + \" to \" + data.newIssues[i].fixInfo.fixedIn[0];\n                    }\n\n                    if (i > 0)\n                    {\n                        sb.Append(\",\");\n                    }\n\n                    sb.Append(\"{\");\n                    sb.Append(\"  \\\"artifactURL\\\": \\\"\" + artifactURL + \"\\\",\");\n                    sb.Append(\"  \\\"containerImage\\\": \\\"\" + containerImage + \"\\\",\");\n                    sb.Append(\"  \\\"cvss.score\\\": \\\"\" + cvssScore + \"\\\",\");\n                    sb.Append(\"  \\\"cvssScore\\\": \\\"\" + cvssScore + \"\\\",\");\n                    sb.Append(\"  \\\"disclosureUrl\\\": \\\"\" + browseUrl + \"\\\",\");\n                    sb.Append(\"  \\\"entityLookupValue\\\": \\\"\" + entityLookupValue + \"\\\",\");\n                    sb.Append(\"  \\\"entityType\\\": \\\"\" + entityType + \"\\\",\");\n                    sb.Append(\"  \\\"imageBaseImage\\\": \\\"\" + data.project.imageBaseImage + \"\\\",\");\n                    sb.Append(\"  \\\"imageId\\\": \\\"\" + data.project.imageId + \"\\\",\");\n                    sb.Append(\"  \\\"imagePlatform\\\": \\\"\" + data.project.imagePlatform + \"\\\",\");\n                    sb.Append(\"  \\\"imageTag\\\": \\\"\" + data.project.imageTag + \"\\\",\");\n                    sb.Append(\"  \\\"issueCountsBySeverityCritical\\\": \" + data.project.issueCountsBySeverity.critical + \",\");\n                    sb.Append(\"  \\\"issueCountsBySeverityHigh\\\": \" + data.project.issueCountsBySeverity.high + \",\");\n                    sb.Append(\"  \\\"issueCountsBySeverityMedium\\\": \" + data.project.issueCountsBySeverity.medium + \",\");\n                    sb.Append(\"  \\\"issueCountsBySeverityLow\\\": \" + data.project.issueCountsBySeverity.low + \",\");\n                    sb.Append(\"  \\\"issueId\\\": \\\"\" + issueId + \"\\\",\");\n                    sb.Append(\"  \\\"issueInstanceKey\\\": \\\"\" + repoURL + \"\\\",\");\n                    sb.Append(\"  \\\"issueSeverity\\\": \\\"\" + issueSeverity + \"\\\",\");\n                    sb.Append(\"  \\\"issueType\\\": \\\"Library Vulnerability\\\",\");\n                    sb.Append(\"  \\\"issueVendorId\\\": \\\"\" + issueVendorId + \"\\\",\");\n                    sb.Append(\"  \\\"message\\\": \\\"\" + descr + \"\\\",\");\n                    sb.Append(\"  \\\"pkgName\\\": \\\"\" + pkgName + \"\\\",\");\n                    sb.Append(\"  \\\"projectName\\\": \\\"\" + projectName + \"\\\",\");\n                    sb.Append(\"  \\\"priorityScore\\\": \" + priorityScore + \",\");\n                    sb.Append(\"  \\\"remediation.exists\\\": \\\"\" + remediationExists + \"\\\",\");\n                    sb.Append(\"  \\\"remediationExists\\\": \\\"\" + remediationExists + \"\\\",\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk CLI Environment Region\nDESCRIPTION: Command to set a specific Snyk regional environment for CLI operations, enabling region-specific configuration\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/working-with-snyk/regional-hosting-and-data-residency.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsnyk config environment SNYK-US-02\n```\n\n----------------------------------------\n\nTITLE: Summarizing Contributor Counts in Markdown\nDESCRIPTION: This snippet represents the summary statistics output from the SCM-Contributors-Count tool, showcasing contributor counts segmented into private and public repositories and overall totals.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/output.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n#### Summary\nPrivate Repos Contributors Count:: 1\nPublic Repos Contributors Count: 1\nTotal Unique Contributors Count for Private and Public repositories: 1\nPrivate Repository Count: 1\nPublic Repository Count: 1\nTotal Repository Count: 2\nExclusion Count: 1\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk MCP Server with Stdio Transport in mcpconfig.json\nDESCRIPTION: JSON configuration for adding Snyk MCP server using stdio transport, enabling integration of Snyk security tools with AI systems\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/snyk-mcp-experimental.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"Snyk Security Scanner\": {\n      \"command\": \"snyk\",\n      \"args\": [\n        \"mcp\",\n        \"-t\",\n        \"stdio\",\n        \"--experimental\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Organization Service Accounts - GET Request\nDESCRIPTION: API endpoint to retrieve a paginated list of service accounts in a Snyk Organization.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/service-accounts/manage-service-accounts-using-the-snyk-api.md#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.snyk.io/rest/orgs/{orgId}/service_accounts\n```\n\n----------------------------------------\n\nTITLE: Handling Bad Request Response\nDESCRIPTION: Example response structure for a bad request, adhering to the JSON:API format, which indicates the nature of the error that occurred.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/rest-api/about-the-rest-api.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"errors\": [\n        {\n            \"status\": \"400\",\n            \"detail\": \"Client request did not conform to OpenAPI specification\",\n            ...\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Upgrade PR in Template Using JSON\nDESCRIPTION: This JSON snippet uses 'is_upgrade_pr' to illustrate upgrade pull requests pushing dependencies to newer versions. Prerequisites include recognizing dependency upgrade paths. Using JSON inputs results in descriptive output adjustments for upgrade PRs.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"description\": \"{{ #is_upgrade_pr }} This PR has been opened to make sure our repositories are kept up-to-date. It updates {{ package_name }} from version {{ package_from }} to version {{ package_to }}. Review relevant docs for possible breaking changes. {{ /is_upgrade_pr }} \"\n            \n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: User Permissions for Nexus 3 with Snyk\nDESCRIPTION: This snippet lists the necessary user permissions for Nexus 3 to enable Snyk integration, including specific privileges that the Nexus user must have.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-open-source/package-repository-integrations/nexus-repository-manager-connection-setup/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* `nx-metrics-all` (for the [system status check endpoint](https://support.sonatype.com/hc/en-us/articles/226254487-System-Status-and-Metrics-REST-API))\n* `nx-repository-view-[*-* | <ecosystem-repo-name>]-read`\n* `nx-repository-view-[*-* | <ecosystem-repo-name>]-browse`\n```\n\n----------------------------------------\n\nTITLE: Setting Snyk Environment Variables on Windows\nDESCRIPTION: Commands to set the SNYK_TOKEN and TENANT_ID environment variables in Windows environments\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/prerequisites-for-universal-broker.md#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nset SNYK_TOKEN=xxxx\nset TENANT_ID=yyyy\n```\n\n----------------------------------------\n\nTITLE: Generating previously imported repositories log\nDESCRIPTION: Optional command to generate a log of previously imported repositories in a Snyk group. This allows skipping already imported repositories during subsequent imports.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-bitbucket-cloud-organizations-and-repos-in-snyk.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import-macos list:imported --integrationType=<integration-type> --groupId=<snyk_group_id>\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependencies\nDESCRIPTION: Command to install TypeScript as a development dependency using npm.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install typescript --save-dev\n```\n\n----------------------------------------\n\nTITLE: Adding Snyk Organization Name to PR Template Using JSON\nDESCRIPTION: This JSON snippet illustrates how to include 'snyk_org_name' in a PR template, enabling the addition of the Snyk organization name in the PR description. The process requires access to Snyk organization data. Inputs are in JSON, providing a string output with the organization name.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"description\": \"Fix applied by {{ snyk_org_name }}\"\n            \n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: POST Project History using Swagger v1 API in YAML\nDESCRIPTION: This snippet demonstrates how to use a POST method to retrieve historical project data using Snyk's v1 API in YAML format. The request requires specifying an organization ID and a project ID in the URL path. The v1 API specification is consumed for this operation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/snapshots-v1.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\\\"../../.gitbook/assets/v1-api-spec.yaml\\\" path=\\\"/org/{orgId}/project/{projectId}/history\\\" method=\\\"post\\\" %}\\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Exporting Application Constants in TypeScript\nDESCRIPTION: This snippet exports various constants needed for the application configuration such as API base URLs, client secrets, and encryption keys. Dependencies include the 'uuid' library for generating unique encryption secrets.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/app.ts\n\n...\n\nimport { v4 as uuid4 } from \"uuid\";\n\n...\n\nexport const APP_BASE = \"https://app.snyk.io\";\nexport const API_BASE = \"https://api.snyk.io\";\nexport const CLIENT_ID = \"[replace with your client id]\";\nexport const CLIENT_SECRET = \"[replace with your client secret]\";\nexport const ENCRYPTION_SECRET = uuid4();\nexport const REDIRECT_URI = \"https://localhost:3000/callback\";\nexport const TOKEN_URL = \"/oauth2/token\";\nexport const AUTHORIZATION_URL = \"/oauth2/authorize\";\nexport const SCOPE = \"apps:beta\";\nexport const STATE = true;\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Broker Environment Variable\nDESCRIPTION: Configuration note about setting BROKER_SERVER_URL environment variable based on the region where data is hosted.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/install-and-configure-broker-using-docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nACCEPT_=false\n```\n\n----------------------------------------\n\nTITLE: GET Issue Paths using Swagger v1 API in YAML\nDESCRIPTION: This snippet shows how to retrieve issue paths for a specific snapshot using a GET method in Snyk's v1 API. It requires providing organization ID, project ID, snapshot ID, and issue ID in the path. This operation fetches the relevant data based on the given identifiers.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/snapshots-v1.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\\\"../../.gitbook/assets/v1-api-spec.yaml\\\" path=\\\"/org/{orgId}/project/{projectId}/history/{snapshotId}/issue/{issueId}/paths\\\" method=\\\"get\\\" %}\\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Excluded Namespaces in Helm for Snyk Monitor\nDESCRIPTION: Helm configuration to customize the list of excluded Kubernetes namespaces during setup of snyk-monitor. This allows specifying which namespaces should be ignored during scanning.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/manually-import-kubernetes-workload-projects.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n      --set excludedNamespaces={kube-node-lease,local-path-storage,some_namespace}\n```\n\n----------------------------------------\n\nTITLE: Adding Snyk Broker Helm Chart Repository\nDESCRIPTION: Command to add the Snyk Broker Helm Chart repository to your local Helm installation. This step is required before installing the Broker.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/bitbucket-server-data-center-prerequisites-and-steps-to-install-and-configure-broker/bitbucket-server-data-center-install-and-configure-using-helm.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add snyk-broker https://snyk.github.io/snyk-broker-helm/\n```\n\n----------------------------------------\n\nTITLE: Using snyk-delta inline with snyk test\nDESCRIPTION: This command pipes the JSON output of `snyk test --json --print-deps` to `snyk-delta`.  This allows snyk-delta to compare the current scan results with a baseline snapshot.  The baseline snapshot can be specified using the `--baselineOrg` and `--baselineProject` flags.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-delta.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk test --json --print-deps | snyk-delta\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Jira Broker Docker Image\nDESCRIPTION: Dockerfile configuration for Jira Broker integration with environment variables for authentication and hostname settings.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/derived-docker-images-for-broker-client-integrations-and-container-registry-agent.md#2025-04-21_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM snyk/broker:jira\n\nENV BROKER_TOKEN        secret-broker-token\nENV JIRA_USERNAME       username\nENV JIRA_PASSWORD       password\nENV JIRA_HOSTNAME       your.jira.domain.com\nENV PORT                8000\n```\n\n----------------------------------------\n\nTITLE: Retrieving License Information using Snyk v1 API\nDESCRIPTION: POST endpoint for retrieving license information for an organization. This endpoint is part of Snyk's v1 API which will eventually be deprecated in favor of the REST API.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/licenses-v1.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/org/{orgId}/licenses\" method=\"post\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Annotation Example in Java\nDESCRIPTION: Shows how to match deprecated parameter annotations in Java code\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/templates-and-predicates.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage snippets.java.docs;\n\npublic class HasAnnotationDemo {\n    public void oldMethod(@Deprecated String parameter1, String parameter2) {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Fixed PR in Template Using JSON\nDESCRIPTION: This JSON snippet demonstrates 'is_fix_pr' to describe backlogged PRs focusing on resolving recently found vulnerabilities. The snippet asks for JSON input, producing a conditional string detailing fix-specific descriptions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"description\": \"{{ #is_fix_pr }} This PR has been opened to fix vulnerabilities in your project. {{ /is_fix_pr }}\"\n            \n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP, HTTPS, and No Proxy Settings in Docker\nDESCRIPTION: Environment variables for configuring Docker to use proxy servers. Includes settings for HTTP_PROXY, HTTPS_PROXY, and NO_PROXY to specify which addresses should bypass the proxy.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-snyk-broker-docker-installation/proxy-support-with-docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n -e HTTP_PROXY=http://my.proxy.address:8080\n -e HTTPS_PROXY=http://my.proxy.address:8080\n -e NO_PROXY=*.test.example.com,.example2.com,127.0.0.0/8\n```\n\n----------------------------------------\n\nTITLE: Running Snyk with Generated POM for Ant/Ivy Projects\nDESCRIPTION: Command sequence to convert Ivy dependencies to POM format and run Snyk test and monitor commands against the generated POM file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nant makepom\nsnyk test --file=pom.xml\n```\n\n----------------------------------------\n\nTITLE: Ignoring Resources After Drift Detection with Snyk IaC Describe\nDESCRIPTION: Uses the output of the Snyk IaC Describe command to update exclusion policies in the Snyk configuration, allowing users to ignore specific resources after they have been reviewed.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/get-started-with-snyk-iac-describe-on-aws.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk iac describe --json --all | snyk iac update-exclude-policy\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Universal Broker (Windows)\nDESCRIPTION: Commands to set essential environment variables for Universal Broker configuration on Windows systems, including SNYK_TOKEN, TENANT_ID, and INSTALL_ID.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/preparing-for-creating-universal-broker-deployments.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nset SNYK_TOKEN=xxxx\nsetTENANT_ID=yyyy\nset INSTALL_ID=zzzz\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Controller with Sysdig Integration Enabled\nDESCRIPTION: This snippet demonstrates the Helm command to install or upgrade the Snyk Controller, enabling the Sysdig integration by setting the flag `--set sysdig.enabled=true`. It specifies the namespace and cluster name as parameters for proper configuration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/integrate-with-sysdig.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install snyk-monitor snyk-charts/snyk-monitor \\\n  --namespace snyk-monitor \\\n  --set clusterName=\"Production cluster\" \\\n  --set sysdig.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Output for Snyk Project URL in YAML\nDESCRIPTION: A YAML snippet that demonstrates the output format of a PR template using the 'snyk_project_url' variable. It outputs a message with a URL to the relevant Snyk project, given the JSON input is applied.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nTo find more details, see the Snyk project https://app.snyk.io/org/my-org/project/xx-xxx-xx-xx\n```\n\n----------------------------------------\n\nTITLE: Assigning GCP Roles for Resource Enumeration\nDESCRIPTION: This snippet specifies the roles required by the 'iac describe' command on Google Cloud Platform. The roles include cloudasset.viewer, necessary for resource enumeration, and viewer, needed for accessing resource details in deep mode. Assigning these roles requires project-level IAM permissions management. It is important to ensure the roles are correctly assigned to the service account used for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/configure-cloud-providers/configure-google-provider.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Mandatory role to allow describe to enumerate resources\nroles/cloudasset.viewer\n\n# Required for deep mode only\nroles/viewer\n```\n\n----------------------------------------\n\nTITLE: EJS Header Template\nDESCRIPTION: Basic EJS template for the header partial including meta tags and stylesheets\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/render-content-for-users.md#2025-04-21_snippet_4\n\nLANGUAGE: ejs\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap\" rel=\"stylesheet\" />\n    <link href=\"https://raw.githubusercontent.com/snyk/snyk-apps-demo/main/src/public/css/styles.css\" />\n    <link rel=\"shortcut icon\" href=\"https://raw.githubusercontent.com/snyk/snyk-apps-demo/main/src/public/images/snyk_dog.svg\" type=\"image/x-icon\" />\n    <title>Snyk Apps Tutorial</title>\n  </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Verifying Snyk Runtime Sensor Add-on Installation\nDESCRIPTION: AWS CLI command to check the status of the Snyk Runtime Sensor add-on installation on an Amazon EKS cluster. It describes the add-on and its current state.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\naws eks describe-addon --addon-name snyk_runtime-sensor --cluster-name $CLUSTER_NAME --region $AWS_REGION\n```\n\n----------------------------------------\n\nTITLE: Checking for Vulnerabilities with Snyk Gradle-jdk12 Action in GitHub Workflows\nDESCRIPTION: This snippet demonstrates how to use the Snyk Gradle (jdk12) Action to check for vulnerabilities in a GitHub workflow. It runs on push events and uses the SNYK_TOKEN secret for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-gradle-jdk12-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Gradle (jdk12) using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/gradle-jdk12@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Running Snyk IaC scan with snyk-to-html conversion\nDESCRIPTION: Command to run a Snyk Infrastructure as Code scan, pipe the JSON output to snyk-to-html, and generate an HTML report called results-iac.html.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-to-html.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test --json | snyk-to-html -o results-iac.html\n```\n\n----------------------------------------\n\nTITLE: Creating Import File for Unmonitored Repos\nDESCRIPTION: Command to generate import files for unmonitored repositories with options to specify which repository types to include (all, private, or public).\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/azure-devops/azure-examples.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count azure-devops --token AZURE-TOKEN --org AZURE-ORG --importConfDir ValidPathToWritableFolder --importFileRepoType private/public/all\n```\n\n----------------------------------------\n\nTITLE: Identifying Dereference of a NULL Pointer Vulnerabilities\nDESCRIPTION: This entry identifies dereference of a NULL pointer vulnerabilities (CWE-476) relevant to C++ applications. Such dereferences can lead to crashes and potential exploitable conditions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Policy Creation Markdown Documentation\nDESCRIPTION: Markdown documentation describing the steps and options for creating new policies in Snyk, including both starting from scratch and using templates.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/assets-policies/create-policies.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Create policies\n\nSnyk Essentials includes a powerful policy editor for creating and modifying policies.\n\nThere are two steps to building policies:\n\n1. [Define filters](create-policies.md#define-filters) - Set filter conditions on asset properties.\n2. [Set actions](create-policies.md#set-actions) - Define actions to be taken on filtered assets.\n```\n\n----------------------------------------\n\nTITLE: Retrieve a Single Target\nDESCRIPTION: Retrieves a specific target by its ID for a given organization ID using the Snyk REST API. This API call is a GET request to the `/orgs/{org_id}/targets/{target_id}` endpoint, defined in the `rest-spec.json` file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/targets.md#2025-04-21_snippet_1\n\nLANGUAGE: swagger\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/orgs/{org_id}/targets/{target_id}\" method=\"get\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Disable HTTPS Upgrade\nDESCRIPTION: Prevents the Snyk CLI from upgrading HTTP requests to HTTPS. This is useful when working with reverse proxies or similar setups where HTTPS upgrade is not desired.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/configure-the-snyk-cli/configure-snyk-cli-to-connect-to-snyk-api.md#2025-04-21_snippet_1\n\nLANGUAGE: environment\nCODE:\n```\n\"SNYK_HTTP_PROTOCOL_UPGRADE=0\"\n```\n\n----------------------------------------\n\nTITLE: Adding Snyk Broker Helm Repository\nDESCRIPTION: Command to add the Snyk Broker Helm Chart repository to your Helm installation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/github-enterprise-prerequisites-and-steps-to-install-and-configure-broker/github-enterprise-install-and-configure-using-helm.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add snyk-broker https://snyk.github.io/snyk-broker-helm/\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy via Eclipse Preferences\nDESCRIPTION: This snippet demonstrates how to override proxy settings in Eclipse through the Snyk preferences.  It involves adding environment variables to configure the `https_proxy`. Replace `http://your-proxy.com:8080` with the appropriate proxy address and port.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/eclipse-plugin/troubleshooting-for-the-eclipse-plugin.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"https_proxy=http://your-proxy.com:8080\"\n```\n\n----------------------------------------\n\nTITLE: CocoaPods Requirements for Dependency Graph\nDESCRIPTION: This snippet details how Snyk examines 'Podfile' and 'Podfile.lock' files to build the dependency graph for CocoaPods and provides an optional strict check for out-of-sync lock files.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/swift-and-objective-c/swift-and-objective-c-for-open-source.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<p>To build the dependency graph, Snyk examines the <code>Podfile</code> and <code>Podfile.lock</code> files.<br><br>When working with Swift and Objective-C projects from the Snyk CLI, you can prevent testing any lock files that are out-of-sync by using the <code>--strict-out-of-sync=true|false</code> option. </p><p>For details, see <a href=\"../../snyk-cli/commands/test.md#option-for-cocoapods-projects\">Option for CocoaPods projects</a> in the <code>snyk test</code> help.</p>\n```\n\n----------------------------------------\n\nTITLE: Excluding Folders in Snyk SCM Import UI\nDESCRIPTION: Example of how to exclude folders when importing a project through an SCM integration in the Snyk UI. This image shows the interface for adding exclusions at the bottom of the import window.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/ignore-issues/exclude-files-and-ignore-issues-faqs.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<figure><img src=\"https://lh7-us.googleusercontent.com/stHVnzk1ZuP6oUm0zAImt0zROcajuZMm5iB4qX7vTbHkjPWklSgD9NxUdZ6UGgT1kV-dBjrcLyOp0SP1CqFzbNuq9S7qgl4cOD6T9UwuWlEk5SWVHUiHRlO-KfAyq_UppnGNvE67p7ZsSwuWok0_2RM\" alt=\"Exclude folders\"><figcaption><p>Exclude folders</p></figcaption></figure>\n```\n\n----------------------------------------\n\nTITLE: Standard Format Expression for Versioning\nDESCRIPTION: This regex captures the standard semantic versioning format for container image tags, including major, minor, and patch versioning components, while also accommodating optional OS distribution indicators.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/use-snyk-container/use-custom-base-image-recommendations/custom-versioning-schema-for-custom-base-images.md#2025-04-21_snippet_2\n\nLANGUAGE: regex\nCODE:\n```\n(?<C0>\\d+)\\.(?<C1>\\d+)\\.(?<C2>\\d+)\n```\n\n----------------------------------------\n\nTITLE: Refreshing Database Records for Access Tokens\nDESCRIPTION: This snippet defines the `refreshAndUpdateDb` function, which refreshes an access token for a user in the database and updates the relevant information with the new token details.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/util/interceptors.ts\n\n...\n\nasync function refreshAndUpdateDb(data: AuthData): Promise<string> {\n  // Create a instance for encryption and decryption\n  const eD = new EncryptDecrypt(process.env[Envars.EncryptionSecret] as string);\n  // Make request to refresh token\n  const { access_token, expires_in, refresh_token, scope, token_type } = await refreshAuthToken(\n    eD.decryptString(data.refresh_token),\n  );\n  // Update the access and refresh token with the newly fetched access and refresh token\n  // along with the expiry and other required info\n  await updateDb(data, {\n    ...data,\n    access_token: eD.encryptString(access_token),\n    expires_in,\n    refresh_token: eD.encryptString(refresh_token),\n    token_type,\n    scope,\n    date: new Date(),\n  });\n\n  return access_token;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling or Disabling Trusted Folders Feature in JavaScript\nDESCRIPTION: This snippet describes how to enable or disable the folder trust feature in the Snyk Language Server by modifying the 'enableTrustedFoldersFeature' initialization option, controlling trust prompts during scans.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/snyk-language-server/README.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Disable trust dialogs in Snyk Language Server initialization options\nconst initializationOptions = {\n    enableTrustedFoldersFeature: false\n};\n```\n\n----------------------------------------\n\nTITLE: Disable Proxy Authentication\nDESCRIPTION: This command line parameter disables proxy authentication for the Snyk CLI. Use this if you encounter authentication issues or if your proxy does not require authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/configure-the-snyk-cli/proxy-configuration-for-snyk-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n\"--proxy-noauth\"\n```\n\n----------------------------------------\n\nTITLE: Denying Invalid Tags for User/Service with XOR - Rego\nDESCRIPTION: This snippet refines the previous rules to implement an XOR logic check for user and service tags in AWS Redshift clusters. It utilizes a series of helper functions to ensure that only one condition holds true for either user or service types.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/examples-of-iac-custom-rules.md#2025-04-21_snippet_5\n\nLANGUAGE: rego\nCODE:\n```\npackage rules\n\ncheckUserTag(resource){\n    not resource.tags.email\n}\n\ncheckUserTag(resource){\n    resource.tags.serviceDescription\n}\n\ncheckServiceTag(resource){\n    not resource.tags.serviceDescription\n}\n\ncheckServiceTag(resource){\n    resource.tags.email\n}\n\ncheckTags(resource){\n\tcount(resource.tags) == 0\n}\n\ncheckTags(resource) {\n    resource.tags.type == \"user\"\n    checkUserTag(resource)\n} else {\n    resource.tags.type == \"service\"\n    checkServiceTag(resource)\n}\n\nden[y]\n{\n    resource := input.resource.aws_redshift_cluster[name]\n\tcheckTags(resource)\n    msg := {\n        \"publicId\": \"CUSTOM-RULE-5\",\n        \"title\": \"Missing the right tags from for a resource of type user or service\",\n        \"severity\": \"medium\",\n        \"msg\": sprintf(\"input.resource.aws_redshift_cluster[%v].tags\", [name]),\n        \"issue\": \"\",\n        \"impact\": \"\",\n        \"remediation\": \"\",\n        \"references\": [],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing an Existing Client Secret - Request Body\nDESCRIPTION: This snippet illustrates the body of the request required to replace an existing client secret for a Snyk App. It uses the operation mode 'replace'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/manage-app-details.md#2025-04-21_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\"mode\": \"replace\"}\n```\n\n----------------------------------------\n\nTITLE: Running Universal Broker Client Docker Container\nDESCRIPTION: Docker command to run the Universal Broker client with necessary environment variables and configuration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/using-the-api-to-set-up-univeral-broker/using-the-api-to-set-up-a-github-connection.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --restart=always \\\n    -p 8000:8000 \\\n    -e ACCEPT_CODE=true \\\n    -e DEPLOYMENT_ID=<DEPLOYMENTID> \\\n    -e CLIENT_ID=<CLIENTID> \\\n    -e CLIENT_SECRET=<CLIENTSECRET> \\\n    -e UNIVERSAL_BROKER_ENABLED=true \\\n    -e PORT=8000 \\\n    -e BROKER_HA_MODE_ENABLED=true \\\nsnyk/broker:universal\n```\n\n----------------------------------------\n\nTITLE: Extension Settings Location\nDESCRIPTION: Specifies the location of the Visual Studio extension's additional settings file.  These settings are stored in a `settings.json` file within the extension directory, which is located under the `%LocalAppData%\\Microsoft\\VisualStudio\\` path. The path includes the VS version number.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/visual-studio-extension/troubleshooting-and-known-issues-with-visual-studio-extension.md#2025-04-21_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n\"%LocalAppData%\\\\Microsoft\\\\VisualStudio\\\\\"\n```\n\n----------------------------------------\n\nTITLE: Creating Credentials Reference for GitHub Integration\nDESCRIPTION: API call to create credentials references for GitHub integration with the Universal Broker deployment.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/using-the-api-to-set-up-univeral-broker/using-the-api-to-set-up-a-github-connection.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://api.snyk.io/rest/tenants/TENANT_ID/brokers/installs/INSTALL_ID/deployments/DEPLOYMENT_ID/credentials?version=2024-02-08~experimental' \\\n--header 'Content-Type: application/vnd.api+json' \\\n--header 'Authorization: token YOUR_SNYK_TOKEN' \\\n--data-raw '{\n    \"data\": {\n        \"type\": \"deployment_credential\",\n        \"attributes\": [{\n            \"comment\": \"This is github token service account XYZ (example)\",\n            \"environment_variable_name\": \"MY_GITHUB_TOKEN\",\n            \"type\": \"github\"\n        }]\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: DataFlow Analysis with Java Scanner Example\nDESCRIPTION: Demonstrates using replaceAll as a sanitizer for data read from Scanner input\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/templates-and-predicates.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.Scanner;\n\npublic class RegexSanitize {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        input = input.replaceAll(\"[^a-zA-Z0-9 ]\", \"\");\n        System.out.println(input);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Link Jira Tickets in PR Commit Message\nDESCRIPTION: This snippet, written in YAML, shows how to dynamically append Jira ticket identifiers to a commit message within a Snyk pull request. It relies on having Snyk's Jira integration enabled and linked appropriately.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\ncommitMessage: |\n  This pull request is from Snyk and relates to {{ jira_ids }}\n```\n\n----------------------------------------\n\nTITLE: AWS ECR Service Role Permissions JSON\nDESCRIPTION: Comprehensive list of IAM permissions required for Snyk to access and interact with Elastic Container Registry\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/snyk-broker-container-registry-agent/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"ecr:GetLifecyclePolicyPreview\",\n  \"ecr:GetDownloadUrlForLayer\",\n  \"ecr:BatchGetImage\",\n  \"ecr:DescribeImages\",\n  \"ecr:GetAuthorizationToken\",\n  \"ecr:DescribeRepositories\",\n  \"ecr:ListTagsForResource\",\n  \"ecr:ListImages\",\n  \"ecr:BatchCheckLayerAvailability\",\n  \"ecr:GetRepositoryPolicy\",\n  \"ecr:GetLifecyclePolicy\"\n]\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Code Test with Standard Output\nDESCRIPTION: The basic command to run Snyk Code tests in the CLI, which by default hides ignored results and shows only unignored findings.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/ignore-issues/consistent-ignores-for-snyk-code-early-access/snyk-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk code test\n```\n\n----------------------------------------\n\nTITLE: Variable Precedence Example - Variable Definition\nDESCRIPTION: Terraform variable definition file that declares the remote_user_addr variable with a default value. This file establishes the variable that will be used in resource configurations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/scan-your-iac-source-code/scan-terraform-files/terraform-variables-support-current-iac.md#2025-04-21_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"remote_user_addr\" {\n  type = string\n  default = \"11.0.0.0/24\"\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Update Policy Configuration\nDESCRIPTION: Shows configuration options for controlling how the Snyk CLI is downloaded and updated\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/maven-plugin-integration-with-snyk.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <cli>\n    <updatePolicy>daily</updatePolicy>\n  </cli>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Denying Missing Tags for AWS Redshift Clusters - Rego\nDESCRIPTION: This snippet defines rules that deny AWS Redshift clusters if they are missing an 'owner' tag, a 'description' tag, or if the owner's email does not belong to the '@corp-domain.com' domain. It uses the deny rule to generate a message indicating the missing tags.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/examples-of-iac-custom-rules.md#2025-04-21_snippet_3\n\nLANGUAGE: rego\nCODE:\n```\npackage rules\n\naws_redshift_cluster_tags_missing(resource) {\n    not resource.tags.owner\n}\n\naws_redshift_cluster_tags_missing(resource) {\n    not resource.tags.description\n}\n\naws_redshift_cluster_tags_missing(resource) {\n    not endswith(resource.tags.owner, \"@corp-domain.com\")\n}\n\ndeny[msg] {\n    resource := input.resource.aws_redshift_cluster[name]\n    aws_redshift_cluster_tags_missing(resource)\n    msg := {\n        \"publicId\": \"CUSTOM-RULE-4\",\n        \"title\": \"Missing a description and an owner from tag, or owner tag does not comply with email requirements\",\n        \"severity\": \"medium\",\n        \"msg\": sprintf(\"input.resource.aws_redshift_cluster[%s].tags\", [name]),\n        \"issue\": \"\",\n        \"impact\": \"\",\n        \"remediation\": \"\",\n        \"references\": [],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Image Recommendations with Regex\nDESCRIPTION: This regex extends the previous definition by adding a MATCH group to filter image recommendations based on a specific flavor indicator within the image tag. This ensures that only relevant image tags are matched.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/use-snyk-container/use-custom-base-image-recommendations/custom-versioning-schema-for-custom-base-images.md#2025-04-21_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n(?<C0>\\d+)\\.(?<C1>\\d+)_V(?<C2>\\d+)-(?>\\k<M0>.*)\n```\n\n----------------------------------------\n\nTITLE: Deleting Slack Notification Customization for a Project via REST API\nDESCRIPTION: API endpoint to delete a Slack notification customization for a specific project. Requires org_id, bot_id, and project_id parameters.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/integrate-with-snyk/jira-and-slack-integrations/slack-app.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nDELETE /orgs/{org_id}/slack_app/{bot_id}/projects/{project_id}\n```\n\n----------------------------------------\n\nTITLE: Overriding Group Settings at Organization Level with Snyk API\nDESCRIPTION: JSON payload for updating IaC settings at the Organization level with different custom rules bundle configuration. This allows organizations to use their own bundle instead of the Group's.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/use-iac-custom-rules-with-cli/use-a-remote-iac-custom-rules-bundle.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"data\": {\n         \"type\": \"iac_settings\",\n         \"attributes\": {\n           \"custom_rules\": {\n             \"oci_registry_url\": \"registry-1.docker.io/org-account/org-bundle-imageage\",\n             \"oci_registry_tag\": \"1.3.15\",\n             \"is_enabled\": true\n           }\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Broker Client with HTTPS in Docker\nDESCRIPTION: This Docker command demonstrates how to run the Broker Client with HTTPS enabled. It mounts a local directory containing SSL certificate files and sets environment variables for HTTPS configuration, along with other necessary settings for the Broker Client.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-snyk-broker-docker-installation/https-for-broker-client-with-docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --restart=always \\\n           -p 8000:8000 \\\n           -e BROKER_TOKEN=secret-broker-token \\\n           -e GITHUB_TOKEN=secret-github-token \\\n           -e PORT=8000 \\\n           -e HTTPS_CERT=/private/broker.crt \\\n           -e HTTPS_KEY=/private/broker.key \\\n           -e BROKER_CLIENT_URL=https://my.broker.client:8000 \\\n           -v /local/path/to/private:/private \\\n       snyk/broker:github-com\n```\n\n----------------------------------------\n\nTITLE: Rotating App Client Secret - HTTP POST Request\nDESCRIPTION: This snippet explains how to manage and rotate the client secret for a Snyk App. It shows how to send a POST request to create, delete, or replace a secret based on the mode specified in the request body.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/manage-app-details.md#2025-04-21_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST https://api.snyk.io/rest/orgs/{orgId}/apps/creations/{app_id}/secrets?version={version}\n```\n\n----------------------------------------\n\nTITLE: Running Command in Debug Mode - Command Line - Shell\nDESCRIPTION: This command allows for verbose output during execution, useful for debugging purposes. It requires prefixing the command with DEBUG=snyk*.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/github/github-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nDEBUG=snyk* snyk-scm-contributors-count github --token TOKEN --orgs ORG --repo REPO --exclusionFilePath PATH_TO_FILE --json\n```\n\n----------------------------------------\n\nTITLE: Creating API Request with cURL for Snyk Dep Graph Testing\nDESCRIPTION: Example cURL command to send a Dep Graph JSON object to the Snyk Test Dep Graph API endpoint. The request includes authorization via token and submits the dependency graph as JSON payload.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-open-source/snyk-for-bazel/dep-graph-api.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://api.snyk.io/v1/test/dep-graph' \\\n  -H 'Authorization: token {{your token}}' \\\n  -H 'Content-Type: application/json; charset=utf-8' \\\n  -d @dep-graph.json\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request to List Package Issues (Bash)\nDESCRIPTION: Example of how to make an HTTP request to the Snyk API endpoint for listing package issues. It demonstrates the basic structure of the request, including the URL and required headers.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/issues-list-issues-for-a-package.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ http \\\n  \"https://api.snyk.io/rest/orgs/{org_id}/packages/{purl}/issues\" \\\n  \"Authorization: token $API_TOKEN\" \\\n  version==<snyk-api-version>\n```\n\n----------------------------------------\n\nTITLE: Customizing Snyk Container Product PR Description Using JSON\nDESCRIPTION: This JSON snippet utilizes 'product_is_container' to customize descriptions based on whether a PR is related to Snyk Container products. It necessitates familiarity with Snyk product distinctions. The JSON input encompasses boolean logic producing descriptions specific to container PRs.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"description\": \"{{ #product_is_container }} This Container PR has been opened to fix vulnerabilities in your project. {{ /product_is_container }}\"\n            \n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Snyk Signing Certificate to CER Format Using OpenSSL\nDESCRIPTION: This command converts the Snyk signing certificate from PEM format to DER format (.cer) for use in Azure's verification certificate settings. This is needed when implementing signature verification of incoming Snyk requests.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/single-sign-on-sso-for-authentication-to-snyk/configure-self-serve-single-sign-on-sso/azure-ad-enterprise-application-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -outform DER -in snyk.pem -out snyk.cer\n```\n\n----------------------------------------\n\nTITLE: Incorporating Snyk Organization Name in PR Description\nDESCRIPTION: The snippet uses the `snyk_org_name` variable to include the Snyk organization's name in the pull request description, allowing easy identification of the organization responsible.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: |\n  Fix applied by {{ snyk_org_name }}\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML Files - YAML\nDESCRIPTION: This YAML snippet defines a Kubernetes Pod resource, illustrating how to structure YAML configuration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/parsing-an-input-file.md#2025-04-21_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n    - name: example\n      image: example:latest\n      securityContext:\n        privileged: true\n```\n\n----------------------------------------\n\nTITLE: Specifying Google Artifact Registry Hostname in Markdown\nDESCRIPTION: This code snippet demonstrates how to specify the Google Artifact Registry hostname format in Markdown. It shows the typical format and mentions the possibility of using specific regions or multi-regions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/container-registry-integrations/integrate-with-google-artifact-registry-gar.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Your Region Name>-docker.pkg.dev\n```\n\n----------------------------------------\n\nTITLE: Golang Image Migration Strategy\nDESCRIPTION: Outlines migration paths for Golang-based Snyk images from versions 1.12 to 1.19, with recommendations for newer versions\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-images-guides-to-migration/snyk-images-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Deprecated: snyk/snyk:golang-1.12 through snyk/snyk:golang-1.19\n* Recommended: snyk/snyk:golang, snyk/snyk:golang-1.20, snyk/snyk:golang-1.21, snyk/snyk:golang-1.22\n```\n\n----------------------------------------\n\nTITLE: Defining Snyk API Version Enum in TypeScript\nDESCRIPTION: This snippet defines an enum for the Snyk API versioning that helps in managing different API calls within the application code, providing better code organization and readability.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// ./interfaces/API.ts\nexport const enum APIVersion {\n  V1 = \"v1\",\n  REST = \"rest\",\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Broker Deployment\nDESCRIPTION: Command to display connection details and validate the deployment\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/basic-steps-to-install-and-configure-universal-broker.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> snyk-broker-config workflows connections get\n```\n\n----------------------------------------\n\nTITLE: Snyk IaC Update Exclude Policy Example\nDESCRIPTION: This example demonstrates how to pipe the output of `snyk iac describe --json` to `snyk iac update-exclude-policy`.  This generates exclude policy rules based on the JSON output of the `describe` command.  The generated rules can then be used to ignore specific resources.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/iac-update-exclude-policy.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ snyk iac describe --json | snyk iac update-exclude-policy\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Broker Server URL for Non-US Regions\nDESCRIPTION: Environment variable configuration for setting Broker server URL in different geographic regions to enable proper authentication and connectivity\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/prepare-snyk-broker-for-deployment/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-e BROKER_SERVER_URL=https://broker.eu.snyk.io\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Authorization Endpoint Specifications\nDESCRIPTION: This snippet defines the API specification for the OAuth2 authorization endpoint, which is utilized to authorize a user. It complies with the OpenAPI standard and details the 'get' method used for retrieving authorization.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/oauth2-api.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% openapi src=\"../.gitbook/assets/oauth-app-spec.yaml\" path=\"/oauth2/authorize\" method=\"get\" %}\n[oauth-app-spec.yaml](../.gitbook/assets/oauth-app-spec.yaml)\n{% endopenapi %}\n```\n\n----------------------------------------\n\nTITLE: Checking npm Registry Configuration with CLI Command\nDESCRIPTION: Command to check which npm registry is currently configured for your project. If the result shows 'registry.npmjs.org', you're using the public registry rather than a private one.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/malicious-packages.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm config get registry\n```\n\n----------------------------------------\n\nTITLE: Using Container Current Base Image Name in PR\nDESCRIPTION: The snippet demonstrates how to utilize the `container.current_base_image_name` variable to insert the current base image name in the pull request description. It uses a JSON configuration to decorate the PR with this information, specifically for container projects.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"description\": \"The current base image is: {{ container.current_base_image_name }}\"\n            \n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Controller with Helm\nDESCRIPTION: Helm command to install or upgrade the Snyk Controller using custom values file and cluster configuration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/install-the-snyk-controller-on-amazon-elastic-kubernetes-service-amazon-eks.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install snyk-monitor snyk-charts/snyk-monitor \\\n             --namespace snyk-monitor \\\n             --set clusterName=<ENTER_CLUSTER_NAME> \\\n             -f <newFile>.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Container Manifest in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a container in a Kubernetes manifest, specifying the container name and image.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/assets-and-risk-factors-for-snyk-apprisk/risk-factor-deployed.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  containers:\n  - name: my-app\n    image: gcr.io/my-company/my-app:latest\n```\n\n----------------------------------------\n\nTITLE: Variable Precedence Example - Main Resource Definition\nDESCRIPTION: Terraform resource definition for an AWS security group rule that uses a variable named remote_user_addr to set the cidr_blocks value. This demonstrates variable usage in resource configuration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/scan-your-iac-source-code/scan-terraform-files/terraform-variables-support-current-iac.md#2025-04-21_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_security_group_rule\" \"ssh\" {\n  type              = \"ingress\"\n  from_port         = 22\n  to_port           = 22\n  protocol          = \"tcp\"\n  cidr_blocks       = [var.remote_user_addr]\n  security_group_id = aws_security_group.allow.id\n}\n```\n\n----------------------------------------\n\nTITLE: Snyk IaC Describe Command Help\nDESCRIPTION: This snippet displays the command to access the help documentation for the `snyk iac describe` command. It provides information on how to use the command to detect infrastructure drift and unmanaged cloud resources.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/iac.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n`iac describe --help`\n```\n\n----------------------------------------\n\nTITLE: Converting Environment File to Requirements Format Using Dephell\nDESCRIPTION: This snippet illustrates how to convert a Conda environment file 'environments.yml' into a 'requirements.txt' file using the 'dephell' command. It is useful for ensuring compatibility with Snyk's scanning process, which primarily uses 'requirements.txt'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/python/git-repositories-and-python.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndephell deps convert --from=conda --to=requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Container Test with Policy File\nDESCRIPTION: Command for running Snyk Container test with a policy file to apply ignore rules for container vulnerabilities.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/ignore-issues/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsnyk container test node --policy-path=.snyk.\n```\n\n----------------------------------------\n\nTITLE: Sample Log Output for Active High Availability Mode in Snyk Broker\nDESCRIPTION: This log snippet demonstrates the output when high availability mode is active in Snyk Broker. It shows the enabled status, server ID allocation, and connection to the broker server.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/high-availability-mode.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n...\nchecking for HA mode (enabled=true)\nreceived server id (serverId=0)\nbroker client is connecting to broker server (url=https://broker.snyk.io, serverId=0)\n...\n```\n\n----------------------------------------\n\nTITLE: API Response for Organization IaC Settings with Parent Group Info\nDESCRIPTION: Sample response from the Snyk API showing the Organization settings after a successful override. Includes both Organization settings and parent Group settings for comparison.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/use-iac-custom-rules-with-cli/use-a-remote-iac-custom-rules-bundle.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"iac_settings\",\n  \"id\": \"<org id>\",\n  \"attributes\": {\n    \"custom_rules\": {\n      \"oci_registry_url\": \"registry-1.docker.io/org-account/org-bundle-image\",\n      \"oci_registry_tag\": \"1.3.15\",\n      \"is_enabled\": true\n    },\n   \"updated\": \"2021-11-27T11:34:33.132Z\",\n   \"parents\": {\n      \"group\": {\n        \"id\": \"<group id>\",\n        \"type\": \"iac_settings\",\n        \"attributes\": {\n          \"custom_rules\": {\n            \"oci_registry_url\": \"registry-1.docker.io/group-account/group-bundle-image\",\n            \"oci_registry_tag\": \"1.3.14\",\n            \"is_enabled\": true\n          },\n          \"updated\": \"2021-11-19T10:59:45.259Z\"\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Exporting Snyk Token Environment Variable\nDESCRIPTION: Shows how to export the SNYK_TOKEN environment variable, which is required if you want to get contributors only for repositories already monitored by Snyk. The token should have Group level access.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/azure-devops/azure-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport SNYK_TOKEN=<YOUR-SNYK-TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Triggering a Scan without jq\nDESCRIPTION: This snippet demonstrates how to manually trigger a cloud scan using curl after finding the environment ID. It constructs a POST request to the Snyk API using the specified environment ID.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/getting-started-with-cloud-scans/manage-cloud-environments/scan-a-cloud-environment.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \n'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/scans?version=2022-12-21~beta' \n-H 'Authorization: token YOUR-API-TOKEN' \n-H \"Content-Type:application/vnd.api+json\"  -d '{\\n  \\\"data\\\": {\\n    \\\"relationships\\\": {\\n      \\\"environment\\\": {\\n        \\\"data\\\": {\\n          \\\"id\\\": \\\"YOUR-ENVIRONMENT-ID\\\",\\n          \\\"type\\\": \\\"environment\\\"\\n        }\\n      }\\n    },\\n    \\\"type\\\": \\\"resource\\\"\\n  }\\n}'\n```\n\n----------------------------------------\n\nTITLE: Including Package Name in PR Description\nDESCRIPTION: Shows how to add the name of the package targeted in the pull request using the `package_name` variable. This can help specify which package the PR is addressing.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: |\n  Fixes {{ package_name }}\n```\n\n----------------------------------------\n\nTITLE: Snyk Code Vulnerability Detection Configuration\nDESCRIPTION: Environment variable configuration for enabling Snyk Code vulnerability scanning during Broker deployment\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/prepare-snyk-broker-for-deployment/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-e ACCEPT_CODE\n```\n\n----------------------------------------\n\nTITLE: Adding Snyk Broker Helm Chart Repository\nDESCRIPTION: Command to add the Snyk Broker Helm Chart repository to your Helm installation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/install-and-configure-broker-using-helm.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add snyk-broker https://snyk.github.io/snyk-broker-helm/\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Environment Variables for Snyk IaC Describe\nDESCRIPTION: Sets up necessary AWS environment variables to authenticate with Snyk IaC Describe command. This is essential for enabling the command to function with the appropriate permissions for AWS resources.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/get-started-with-snyk-iac-describe-on-aws.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID=\"your_access_key\"\nexport AWS_SECRET_ACCESS_KEY=\"your_secret_key\"\nexport AWS_REGION=\"your_region\"\n```\n\n----------------------------------------\n\nTITLE: Customizing commit message with quotes in YAML PR template\nDESCRIPTION: Example showing how to include a colon in a YAML commit message by enclosing the text in double quotes to avoid YAML parsing issues.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/apply-a-custom-pr-template.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncommitMessage: \"snyk: this is a security pull request\"\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to Token Endpoint - Snyk API - Markdown\nDESCRIPTION: This snippet illustrates the required POST request to exchange the authorization code for an access token. It outlines the necessary properties that should be included in the request body formatted as x-www-form-urlencoded. Dependencies include knowledge of OAuth2 and access to the authorization code.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/set-up-a-snyk-app-using-the-oauth2-api/set-up-the-authorization-code-exchange.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.snyk.io/oauth2/token\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Manifest File\nDESCRIPTION: Identifies the specific manifest file to be analyzed, such as package.json or Dockerfile. Allows precise targeting of dependency files.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/bitbucket-pipelines-integration-using-a-snyk-pipe/snyk-pipe-parameters-and-values-bitbucket-cloud.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nTARGET_FILE: none\n```\n\n----------------------------------------\n\nTITLE: Instantiating the App Class in the Entry Point\nDESCRIPTION: This snippet shows how to instantiate the 'App' class in the main entry point file of the application, passing in the IndexController instance and the port number to start the Express application.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/configuring-express.js.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport IndexController from './routes/indexController';\nimport App from './app';\n\nnew App(\n  [\n    new IndexController()\n  ],\n  3000\n);\n```\n\n----------------------------------------\n\nTITLE: Python Login Examples\nDESCRIPTION: Shows FTP and SMTP login implementations in Python\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/templates-and-predicates.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ftplib import FTP, error_perm\nimport smtplib\n\ndef ftp_example():\n    try:\n        ftp = FTP('ftp.example.com')\n        ftp.login('user', 'pass')\n        print(\"FTP login successful\")\n    except error_perm as e:\n        print(f\"FTP login failed: {e}\")\n\ndef smtp_example():\n    try:\n        smtp = smtplib.SMTP('smtp.example.com', 587)\n        smtp.ehlo()\n        smtp.starttls()\n        smtp.login('user@example.com', 'password')\n        print(\"SMTP login successful\")\n    except smtplib.SMTPException as e:\n        print(f\"SMTP login failed: {e}\")\n\nif __name__ == '__main__':\n    ftp_example()\n    smtp_example()\n```\n\n----------------------------------------\n\nTITLE: Error Message in Snyk CLI\nDESCRIPTION: This snippet illustrates the error message returned by the Snyk CLI when attempting to import more projects after reaching the organization's limit. It is triggered by the `snyk monitor` command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-admin/snyk-projects/maximum-number-of-projects-in-an-organization.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"Maximum number of projects reached for this organization. You cannot import more projects.\"\n```\n\n----------------------------------------\n\nTITLE: Running Snyk SCM Contributors Count Commands\nDESCRIPTION: This snippet demonstrates the usage of the snyk-scm-contributors-count command with the --json flag to output results into files for GitHub and GitHub Enterprise. It outlines how to correctly redirect the output to specific files for later consolidation. The parameters include the SCM type (github/github-enterprise), a token for authentication, and output redirection to a file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/consolidate-results.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsnyk-scm-contributors-count github --token TOKEN --json > PathToFolder/FileName\nsnyk-scm-contributors-count github-enterprise --token TOKEN --json > PathToFolder/OtherFileName\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Rules Bundle via Snyk CLI\nDESCRIPTION: Command to set the OCI registry URL for custom rules using Snyk CLI configuration. This sets the SNYK_CFG_OCI_REGISTRY_URL environment variable for local testing.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/use-iac-custom-rules-with-cli/use-a-remote-iac-custom-rules-bundle.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsnyk config set oci-registry-url=registry-1.docker.io/org-account/org-bundle-image:1.3.14\n```\n\n----------------------------------------\n\nTITLE: Generating import targets data for GitHub repositories\nDESCRIPTION: Command to generate import targets data that defines which GitHub repositories should be imported into which Snyk organizations. Uses the created organizations data from the previous step.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-github.com-and-github-enterprise-organizations-and-repos-in-snyk.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import import:data --orgsData=snyk-created-orgs.json --source=github --integrationType=github\n```\n\n----------------------------------------\n\nTITLE: Testing unmanaged project with Snyk CLI\nDESCRIPTION: This command tests all files in the project for known open-source dependencies (C/C++ only). It is used to scan all files in the project for open-source dependencies when they are not managed by a package manager.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk test --unmanaged\"\n```\n\n----------------------------------------\n\nTITLE: Running Universal Broker with Docker\nDESCRIPTION: Docker command to run the Snyk Universal Broker client. Configures essential environment variables including deployment ID, client credentials, port settings, and custom credential references.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/running-your-universal-broker-client.md#2025-04-21_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker run --restart=always \n-p 8000:8000 \n-e DEPLOYMENT_ID=<DEPLOYMENTID> \n-e CLIENT_ID=<CLIENTID> \n-e CLIENT_SECRET=<CLIENTSECRET> \n-e PORT=8000 \n-e <YOUR_CREDENTIALS_REFERENCE>=<secret value> \nsnyk/broker:universal\n```\n\n----------------------------------------\n\nTITLE: External Secret Configuration\nDESCRIPTION: YAML configuration showing how to reference external secrets in the Helm values file\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/kubernetes-secrets-and-helm-chart-installation.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nuseExternalSecrets: true\n\nbrokerTokenSecret:\n  name: snyk-broker-secrets\n  key: org-x-broker-token\n```\n\n----------------------------------------\n\nTITLE: Setting Project Attributes for IaC Scan Results\nDESCRIPTION: Command to set business criticality, environment, and lifecycle attributes for IaC projects when reporting results to the Snyk Web UI. These attributes help categorize and prioritize projects.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/share-cli-results-with-the-snyk-web-ui.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> snyk iac test myproject --report \\\n    --project-business-criticality=high \\\n    --project-environment=frontend,internal \\\n    --project-lifecycle=development\n```\n\n----------------------------------------\n\nTITLE: Exchanging Refresh Token for New Access Token - HTTP\nDESCRIPTION: The snippet demonstrates how to make a POST request to the Snyk API token endpoint to exchange a refresh token for a new access token. It lists the required request properties and explains the expected response containing new tokens. Concurrency considerations are crucial to prevent token invalidation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/set-up-a-snyk-app-using-the-oauth2-api/set-up-the-refresh-token-exchange.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.snyk.io/oauth2/token\n```\n\nLANGUAGE: HTTP\nCODE:\n```\ngrant_type=refresh_token\n&refresh_token=(refresh token from the previous step)\n&client_id=(clientId from the app creation)\n&client_secret=(clientSecret from the app creation)\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Monitor with Azure Configuration\nDESCRIPTION: Command to install Snyk Monitor with Azure-specific configuration using an override file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/install-the-snyk-controller-with-helm-azure-and-google-cloud-platform.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install snyk-monitor snyk-charts/snyk-monitor \\\n  --namespace snyk-monitor \\\n  -f override.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Matchers in Specification Language\nDESCRIPTION: This group of snippets defines matchers for the first through seventh parameters of a method or function declaration. Each matcher specifies the 'Function' template parameter to denote the function being analyzed.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/templates-and-predicates.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n#### Param1In\n\nMatches on the 1st parameter for the provided method or function declaration.\n\nTemplate parameters:\n\n* Function\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### Param2In\n\nMatches on the 2nd parameter for the provided method or function declaration.\n\nTemplate parameters:\n\n* Function\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### Param3In\n\nMatches on the 3rd parameter for the provided method or function declaration.\n\nTemplate parameters:\n\n* Function\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### Param4In\n\nMatches on the 4th parameter for the provided method or function declaration.\n\nTemplate parameters:\n\n* Function\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### Param5In\n\nMatches on the 5th parameter for the provided method or function declaration.\n\nTemplate parameters:\n\n* Function\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### Param6In\n\nMatches on the 6th parameter for the provided method or function declaration.\n\nTemplate parameters:\n\n* Function\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### Param7In\n\nMatches on the 7th parameter for the provided method or function declaration.\n\nTemplate parameters:\n\n* Function\n```\n\n----------------------------------------\n\nTITLE: Defining Negation Matcher in Specification Language\nDESCRIPTION: This snippet explains the 'Not' matcher, which only matches if the argument does not match. It includes the necessary template parameter 'Negated' to specify the property being negated.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/templates-and-predicates.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n#### Not\n\nA negation. Matches only if the argument does not match.\n\nTemplate parameters:\n\n* Negated - property\n```\n\n----------------------------------------\n\nTITLE: Snyk IaC Update Exclude Policy Command Help\nDESCRIPTION: This snippet displays the command to access the help documentation for the `snyk iac update-exclude-policy` command. This command auto-generates `.snyk` exclusions for cloud resources.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/iac.md#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n`iac update-exclude-policy --help`\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Broker for ECR with Helm\nDESCRIPTION: Helm installation command specifically for Amazon Elastic Container Registry (ECR) with required AWS-specific parameters including role ARN, region, and external ID.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/snyk-broker-container-registry-agent/install-broker-for-container-registry-agent-using-helm.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install snyk-broker-chart snyk-broker/snyk-broker \\\n             --set scmType=container-registry-agent \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set crType=ecr \\\n             --set crRoleArn=<ENTER_CR_ROLE_ARN> \\\n             --set crRegion=<ENTER_CR_REGION> \\\n             --set crExternalId=<ENTER_CR_EXTERNAL_ID> \\\n             -n snyk-broker --create-namespace\n```\n\n----------------------------------------\n\nTITLE: First Vulnerable Code Example for Snyk Code\nDESCRIPTION: Example of a vulnerable Node.js code snippet that uses user input to read files, demonstrating how Snyk Code recognizes issues even after refactoring.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/ignore-issues/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar fs = require('fs');\nvar logFileName = req.query.file || 'standard_log.log';\nvar logfile = fs.readFile(logFileName, \"utf8\", function(err, data) {...\n\n```\n\n----------------------------------------\n\nTITLE: Output for Package Name in YAML\nDESCRIPTION: A YAML snippet provides the output format incorporating 'package_name' in a pull request template. This shows how the resolved package name appears in the PR description when linked to a specific package name.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nFixes adm-zip\n```\n\n----------------------------------------\n\nTITLE: Example .snyk File Entry for Ignored Vulnerability\nDESCRIPTION: Sample entry in a .snyk policy file showing how an ignored vulnerability appears with reason and expiration date.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/ignore-issues/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n'npm:moment:20170905':\n- moment:\nreason: The reason given\nexpires: '2017-12-29T16:10:16.946Z'\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure\nDESCRIPTION: Bash commands to create the required directory structure for source and distribution files.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ./dist\nmkdir ./src\n```\n\n----------------------------------------\n\nTITLE: Setting CLI Timeout - Snyk\nDESCRIPTION: This snippet shows how to set the environment variable `SNYK_TIMEOUT_SECS`. By setting this variable to a specific number of seconds, the CLI will terminate its operations if they exceed the specified timeout duration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/configure-the-snyk-cli/environment-variables-for-snyk-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n`SNYK_TIMEOUT_SECS=60`\n```\n\n----------------------------------------\n\nTITLE: Configuring Broker environment variable for custom PR templates\nDESCRIPTION: Environment variable configuration needed for Snyk Broker to fetch custom PR templates. This requires Broker version 4.188.0 or higher and replaces the ACCEPT parameter with the ACCEPT_CUSTOM_PR_TEMPLATES variable.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/apply-a-custom-pr-template.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nACCEPT_CUSTOM_PR_TEMPLATES=true\n```\n\n----------------------------------------\n\nTITLE: Specific Field Sensitivity Detection Rule in Custom Rules Framework\nDESCRIPTION: This custom rule focuses on detecting sensitive data flow from specific fields (like 'EmailAddress') to file writing methods, enhancing precision in CWE-312 detection.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/create-query.md#2025-04-21_snippet_13\n\nLANGUAGE: ada\nCODE:\n```\nTaint<\n  \"EmailAddress\",\n  PRED:None,\n  CallExpression<\n    ~\"global::System\\.IO\\.File\\.(Write|Append)All(Text|Lines|Bytes)(Async)?\"\n  >\n    and \n      HasArg1<\"testFile.txt\" or \"testFile.bin\">\n>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating WebServer and WebServlet Interaction in Java\nDESCRIPTION: This Java code snippet showcases a custom WebServer and a WebServlet class, illustrating potential gaps in data flow analysis due to unsupported components or frameworks.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/create-query.md#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.sql.Connection;\nimport java.sql.Statement;\nimport java.util.Map;\n\npublic class CoverageDemo {\n    static class WebServer extends MyWebEndpoint {\n        private Connection connection;\n\n        @Override\n        void handlePostRequest(Map<String, String> parameters) throws Throwable {\n            final String username = parameters.get(\"username\");\n            final String query = String.format(\"SELECT * FROM users WHERE user = '%s'\", username);\n            final Statement statement = connection.createStatement();\n            statement.execute(query);\n            statement.close();\n        }\n    }\n\n    static class WebServlet extends HttpServlet {\n        private MySpecialDatabase database;\n\n        @Override\n        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            final String username = req.getParameter(\"username\");\n            final String query = String.format(\"SELECT * FROM users WHERE user = '%s'\", username);\n            database.performSQL(query);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extra CLI Arguments\nDESCRIPTION: Enables passing additional command-line arguments to customize the Snyk CLI scan behavior beyond standard configuration options.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/bitbucket-pipelines-integration-using-a-snyk-pipe/snyk-pipe-parameters-and-values-bitbucket-cloud.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nEXTRA_ARGS: none\n```\n\n----------------------------------------\n\nTITLE: Webhook Payload Validation\nDESCRIPTION: JavaScript code for validating webhook payload using crypto and secret key\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/tutorial.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require('crypto');\nconst secret = \"my-secret-string\";\n\nfunction makeSignature(body, secret) {\n  const hmac = crypto.createHmac('sha256', secret);\n  hmac.update(body, 'utf8');\n\n  return `sha256=${hmac.digest('hex')}`;\n}\n\ntry {\n  const body = JSON.parse(inputData.body);\n  const { project, org, group, newIssues } = body;\n\n  output = { \n    isValid: inputData.signature === makeSignature(inputData.body, secret)\n  };\n} catch (err) {\n  output = { isValid: false, err: err.message };\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Snyk Monitored Repos Check for Bitbucket Cloud Contributors Count\nDESCRIPTION: Command example that skips checking which repositories are already monitored by Snyk and counts contributors for all repositories in Bitbucket Cloud.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-cloud/bitbucket-cloud-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count bitbucket-cloud --user USERNAME --password APP_PASSWORD --skipSnykMonitoredRepos\n```\n\n----------------------------------------\n\nTITLE: Generating Import Data for Snyk from Bitbucket Server\nDESCRIPTION: This snippet generates the import data for Snyk using the previously created organization data. It prepares the necessary information required to conduct the import.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-bitbucket-server-organizations-and-repos-in-snyk.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import import:data --orgsData=snyk-created-orgs.json --source=bitbucket-server --integrationType=bitbucket-server\n```\n\n----------------------------------------\n\nTITLE: Using Issue Count Variable in PR Description\nDESCRIPTION: The YAML code snippet shows how to dynamically display the number of issues a pull request intends to fix using the `issue_count` variable.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: |\n   The PR will fix {{ issue_count }} issues.\n```\n\n----------------------------------------\n\nTITLE: Configuring CPU Resources\nDESCRIPTION: Sets CPU requests and limits for the Snyk monitor.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/optional-installation-steps-for-snyk-controller-with-helm.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install snyk-monitor snyk-charts/snyk-monitor \\\n             --namespace snyk-monitor \\\n             --set requests.cpu=\"X\"\n             --set limits.cpu=\"Y\"\n```\n\n----------------------------------------\n\nTITLE: Pulling Snyk Universal Broker Helm Chart\nDESCRIPTION: Command to pull the Snyk Universal Broker Helm chart from the Docker registry.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/running-your-universal-broker-client.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm pull oci://registry-1.docker.io/snyk/snyk-universal-broker\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Authentication in Docker\nDESCRIPTION: Environment variable for specifying proxy server authentication credentials with username and password.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-snyk-broker-docker-installation/proxy-support-with-docker.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-e PROXY_AUTH=userID:userPass\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Assume Role Policy for Container Registry Agent\nDESCRIPTION: JSON policy that allows the Container Registry Agent to assume roles through AWS STS service. This policy is attached to the EC2 role or IAM user running the agent.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/snyk-broker-container-registry-agent/setting-up-the-container-registry-agent-for-a-brokered-ecr-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Version: 2012-10-17,\n  Statement: [\n    {\n      Sid: SnykCraAssumeRolePolicy,\n      Effect: Allow,\n      Action: sts:AssumeRole,\n      Resource: *\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Artifactory Broker Client with Docker\nDESCRIPTION: Docker run command to set up a basic Broker Client for Artifactory Registry. Requires configuration of broker token, server URL, and Artifactory URL.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/artifactory-repository-install-and-configure-broker/set-up-snyk-broker-with-artifactory-repository.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker run --restart=always \\\n           -p 8000:8000 \\\n           -e BROKER_TOKEN=secret-broker-token \\\n           -e BROKER_SERVER_URL=<broker-region-url> \\\n           -e ARTIFACTORY_URL=<yourdomain>.artifactory.com/artifactory \\\n       snyk/broker:artifactory\n```\n\n----------------------------------------\n\nTITLE: Updating App Class to Handle Route Initialization\nDESCRIPTION: This updated 'App' class snippet includes a new method 'initRoutes()' that registers the routes by iterating through an array of Controllers. The constructor has been modified to accept Controllers, enhancing its flexibility to manage multiple routes.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/configuring-express.js.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\nimport type { Application } from 'express';\nimport type { Server } from 'http';\nimport type { Controller } from './interfaces/Controller';\n\nclass App {\n  public app: Application;\n  private server: Server;\n\n  constructor(controllers: Controller[], port: number) {\n    this.app = express();\n    this.initRoutes(controllers);\n    this.server = this.listen(port);\n  }\n\n  private initRoutes(controllers: Controller[]) {\n    controllers.forEach((controller: Controller) => {\n      this.app.use('/', controller.router);\n    });\n  }\n\n  private listen(port: number) {\n    this.server = this.app.listen(port, () => {\n      console.log(`App listening on port: ${port}`);\n    });\n\n    return this.server;\n  }\n\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Updating User Notification Settings for a Project - Snyk API v1 - YAML\nDESCRIPTION: This snippet defines the API endpoint for updating notification settings for a specific project within an organization on behalf of the current user. This is essential for managing project-specific notifications.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/users-v1.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/user/me/notification-settings/org/{orgId}/project/{projectId}\" method=\"put\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Defining Organizations Data Structure for GitHub Import\nDESCRIPTION: JSON structure required to map GitHub organizations to Snyk organizations and integration IDs. This data is needed as input to the import:data utility for GitHub imports.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/creating-import-targets-data-for-import-command.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"orgData\": [\n    {\n      \"name\": \"<org_name_in_gh_used_to_list_repos>\",\n      \"orgId\": \"<snyk_org_id>\",\n      \"integrations\": {\n        \"github\": \"<snyk_org_integration_id>\",\n        \"github-enterprise\": \"<snyk_org_integration_id>\"\n      },\n    },\n    {...}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Token Revocation Endpoint Specifications\nDESCRIPTION: This snippet defines the API specification for the OAuth2 token revocation endpoint, allowing clients to revoke previously obtained access tokens. The 'post' method is used for executing revocation requests.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/oauth2-api.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{% openapi src=\"../.gitbook/assets/oauth-api-spec.yaml\" path=\"/revoke\" method=\"post\" %}\n[oauth-api-spec.yaml](../.gitbook/assets/oauth-api-spec.yaml)\n{% endopenapi %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Resources for Runtime Sensor\nDESCRIPTION: Optional Helm parameters to customize the CPU and memory resources allocated to the Snyk Runtime Sensor pods.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n...\n--set sensor.resources.requests.memory=512Mi\n--set sensor.resources.requests.cpu=100m\n--set sensor.resources.limits.memory=1024Mi\n--set sensor.resources.limits.cpu=500m\n...\n```\n\n----------------------------------------\n\nTITLE: Cloud Platform Navigation Links in Markdown\nDESCRIPTION: Markdown links to different cloud platform integration documentation sections for AWS, Azure, and Google Cloud.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [AWS integration](aws-integration/)\n* [Azure integration](azure-integration-for-cloud-configurations/)\n* [Google Cloud integration](google-cloud-integration/)\n```\n\n----------------------------------------\n\nTITLE: VarArgs Method Example\nDESCRIPTION: Shows matching variable argument method calls in Java\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/templates-and-predicates.md#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage snippets.java.docs;\n\npublic class VarArgsDemo {\n    public void method(String... args) {}\n\n    public static void main(String[] args) {\n        VarArgsDemo check = new VarArgsDemo();\n        check.method(\"tainted\", \"sample2\", \"sample3\");\n        check.method(\"sample0\", \"tainted\", \"sample2\", \"sample3\");\n        check.method(\"sample2\", \"sample3\", \"tainted\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Output for Package Version To in YAML\nDESCRIPTION: A YAML output format utilizing 'package_to' in a PR template illustrates how the target updated package version is conveyed in the PR description.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nFix is applied by moving to 0.5.2\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM/Yarn Artifactory Broker Client with Docker\nDESCRIPTION: Docker run command specifically for npm or Yarn integration with Artifactory. Includes additional configuration for response body URL substitution.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/artifactory-repository-install-and-configure-broker/set-up-snyk-broker-with-artifactory-repository.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker run --restart=always \\\n  -p 8000:8000 \\\n  -e BROKER_TOKEN=secret-broker-token \\\n  -e ARTIFACTORY_URL=acme.com/artifactory \\\n  -e RES_BODY_URL_SUB=http://acme.com/artifactory \\ \n  snyk/broker:artifactory\n```\n\n----------------------------------------\n\nTITLE: Example of Issue Paths Data\nDESCRIPTION: This JSON snippet demonstrates the format of the `paths` array within the Snyk API response, showing the dependency paths through which an issue is introduced. Each path is an array of package descriptors, containing the package name, version, and optionally a `fixVersion` if an upgrade is available.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/api-endpoints-index-and-tips/project-issue-paths-api-endpoints.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"paths\": [\n        [\n            { \"name\": \"lodash\", \"version\": \"4.17.4\", \"fixVersion\": \"4.17.20\" }\n        ],\n        [ \n            { \"name\": \"babel-template\", \"version\": \"6.26.0\", \"fixVersion\": \"6.26.0\" },\n            { \"name\": \"lodash\", \"version\": \"4.17.10\" }\n        ]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example AWS IAM Role ARN Output\nDESCRIPTION: Example output showing the format of an AWS IAM role ARN after retrieval.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/aws-integration/aws-integration-web-ui/step-3-create-and-scan-a-cloud-environment-web-ui.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\narn:aws:iam::123412341234:role/snyk-cloud-role\n```\n\n----------------------------------------\n\nTITLE: Initializing Snyk Pipe Configuration in Bitbucket Pipeline\nDESCRIPTION: Basic YAML configuration for setting up the Snyk vulnerability scanning pipe in a Bitbucket Cloud pipeline. The pipe version 1.0.0 is specified and includes a placeholder for variables.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/bitbucket-pipelines-integration-using-a-snyk-pipe/snyk-pipe-parameters-and-values-bitbucket-cloud.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- pipe: snyk/snyk-scan:1.0.0\n  variables:\n    // variables go here\n```\n\n----------------------------------------\n\nTITLE: Snyk Orb IaC Scanning Configuration with CircleCI\nDESCRIPTION: Example CircleCI configuration using Snyk orb for infrastructure-as-code scanning with Node.js environment\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-images-guides-to-migration/circleci-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\norbs:\n  node: circleci/node@5\n  snyk: snyk/snyk@2.1.0\njobs:\n  snyk_scan:\n    docker:\n      - image: cimg/node:lts\n    steps:\n      - checkout\n      - run: npm ci\n      - snyk/install\n      - run:\n          command: snyk iac test\n          name: Run iac test\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Exclusion Examples\nDESCRIPTION: This YAML snippet provides multiple examples of how to exclude various AWS resources like S3 buckets, IAM roles, and specific fields from IaC drift detection.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/ignore-resources-for-drift.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.22.1\nexclude:\n  iac-drift:\n      # Will ignore S3 bucket called my-bucket\n    - aws_s3_bucket.my-bucket\n      # Will ignore every aws_instance resource\n    - aws_instance.*\n      # Will ignore environment for all lambda functions\n    - aws_lambda_function.*.environment\n      # Will ignore resources like aws_iam_role.AmazonSSMRoleForInstances and aws_iam_role.AWSServiceRoleForAmazonSSM\n    - *role.*Amazon*\n      # Will ignore lastModified for my-lambda-name lambda function\n    - aws_lambda_function.my-lambda-name.last_modified\n```\n\n----------------------------------------\n\nTITLE: Listing Available Universal Broker Workflows\nDESCRIPTION: Shows the main command output for snyk-broker-config-workflows, displaying the available resource categories and their purposes.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/list-and-review-the-universal-broker-configuration-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> snyk-broker-config-workflows\nInteractive workflows for Deployments, Credentials, Connections and \nIntegrations management\n\nUSAGE\n     $ snyk-broker.config workflows COMMAND\n\nTOPICS\n      workflows connections    Universal Broker - Create Connection Workflow\n      workflows credentials.   Universal Broker - Create Credentials Workflow\n      workflows deployments    Universal Broker - Create Deployment Workflow\n      workflows integration.   Universal Broker - Get Connection Integration Workflow\n```\n\n----------------------------------------\n\nTITLE: GitHub Server App Creation URL Template\nDESCRIPTION: URL template for creating a GitHub App with pre-configured Snyk permissions. Users need to replace placeholder values for GitHub server URL and Snyk environment before navigating to this URL.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-scm-integrations/github-server-app.md#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\n{{GITHUB-SERVER-URL}}/settings/apps/new?name=Snyk&description=Snyk%20helps%20you%20develop%20fast%20while%20staying%20secure%20by%20finding%20and%20automatically%20fixing%20security%20issues%20in%20your%20code%2C%20open%20source%20dependencies%2C%20containers%2C%20and%20infrastructure%20as%20code%20-%20all%20powered%20by%20Snyk%E2%80%99s%20security%20intelligence.&url=https%3A%2F%2Fgithub.com%2Fapps%2Fsnyk-io&public=false&webhook_active=true&webhook_url={{SNYK-ENV}}%2Fapi%2Fhidden%2Fscm-apps%2Fapi%2Fgithub-app%2Fwebhook&checks=write&statuses=write&contents=write&metadata=read&pull_requests=write&repository_hooks=write&members=read&events[]=repository\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment ID and Triggering Scan with jq\nDESCRIPTION: This snippet retrieves the first cloud environment ID from the Snyk API and triggers a scan for that environment using jq. It requires that jq is installed and makes use of Snyk API tokens.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/getting-started-with-cloud-scans/manage-cloud-environments/scan-a-cloud-environment.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSNYK_ORG_ID=\"YOUR-ORGANIZATION-ID\" &#x26;&#x26; \nSNYK_API_TOKEN=\"YOUR-API-TOKEN\" &#x26;&#x26; \nSNYK_ENV_ID=$(curl -s -X GET \n  \"https://api.snyk.io/rest/orgs/${SNYK_ORG_ID}/cloud/environments?version=2022-12-21~beta<a data-footnote-ref href=\"#user-content-fn-1\">&#x26;kind=aws,azure,google</a>\" \n  -H \"Authorization: token ${SNYK_API_TOKEN}\" | jq -r '.data[0].id') &#x26;&#x26; \ncurl -X POST \n\"https://api.snyk.io/rest/orgs/${SNYK_ORG_ID}/cloud/scans?version=2022-12-21~beta\" \n-H \"Authorization: token ${SNYK_API_TOKEN}\" \n-H \"Content-Type:application/vnd.api+json\"  -d \"{\\n  \\\"data\\\": {\\n    \\\"relationships\\\": {\\n      \\\"environment\\\": {\\n        \\\"data\\\": {\\n          \\\"id\\\": \\\"${SNYK_ENV_ID}\\\",\\n          \\\"type\\\": \\\"environment\\\"\\n        }\\n      }\\n    },\\n    \\\"type\\\": \\\"resource\\\"\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output for Vulnerabilities (JSON)\nDESCRIPTION: This snippet represents the structure of the JSON output produced by the Snyk test command, detailing package vulnerabilities, their severity, and related metadata.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/c-c++/snyk-cli-for-open-source-c++-scans.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"issues\": [\n      {\n        \"pkgName\": \"curl|https://github.com/curl/curl/releases/download/curl-7_58_0/curl-7.58.0.tar.xz\",\n        \"pkgVersion\": \"7.58.0\",\n        \"issueId\": \"CVE-2019-5481\",\n        \"fixInfo\": {\n          \"isPatchable\": false,\n          \"isPinnable\": false\n        }\n      }\n    ],\n    \"issuesData\": {\n      \"CVE-2019-5481\": {\n        \"severity\": \"high\",\n        \"CVSSv3\": \"\",\n        \"originalSeverity\": \"high\",\n        \"severityWithCritical\": \"high\",\n        \"type\": \"vuln\",\n        \"alternativeIds\": [\n          \"\"\n        ],\n        \"creationTime\": \"2019-09-16T19:15:00.000Z\",\n        \"disclosureTime\": \"2019-09-16T19:15:00.000Z\",\n        \"modificationTime\": \"2020-10-20T22:15:00.000Z\",\n        \"publicationTime\": \"2019-09-16T19:15:00.000Z\",\n        \"credit\": [\n          \"\"\n        ],\n        \"id\": \"CVE-2019-5481\",\n        \"packageManager\": \"cpp\",\n        \"packageName\": \"curl|https://github.com/curl/curl/releases/download/curl-7_58_0/curl-7.58.0.tar.xz\",\n        \"language\": \"cpp\",\n        \"fixedIn\": [\n          \"\"\n        ],\n        \"patches\": [],\n        \"exploit\": \"No Data\",\n        \"functions\": [\n          \"\"\n        ],\n        \"semver\": {\n          \"vulnerable\": [\n            \"7.58.0\"\n          ],\n          \"vulnerableHashes\": [\n            \"\"\n          ],\n          \"vulnerableByDistro\": {}\n        },\n        \"references\": [\n          {\n            \"title\": \"https://curl.haxx.se/docs/CVE-2019-5481.html\",\n            \"url\": \"https://curl.haxx.se/docs/CVE-2019-5481.html\"\n          }\n        ],\n        \"internal\": {},\n        \"identifiers\": {\n          \"CVE\": [\n            \"CVE-2019-5481\"\n          ],\n          \"CWE\": [],\n          \"ALTERNATIVE\": [\n            \"\"\n          ]\n        },\n        \"title\": \"CVE-2019-5481\",\n        \"description\": \"\",\n        \"license\": \"\",\n        \"proprietary\": true,\n        \"nearestFixedInVersion\": \"\"\n      }\n    },\n    \"fileSignaturesDetails\": {\n      \"https://curl.se|curl@7.58.0\": {\n        \"artifact\": \"curl\",\n        \"version\": \"7.58.0\",\n        \"author\": \"curl\",\n        \"path\": \"curl-7.58.0\",\n        \"id\": \"59d80da8ba341aaff828662700000000\",\n        \"url\": \"https://curl.se/download/curl-7.58.0.tar.gz\",\n        \"purl\": \"pkg:generic/curl@7.58.0?download_url=https:%2F%2Fcurl.se%2Fdownload%2Fcurl-7.58.0.tar.gz\",\n        \"score\": 1,\n        \"confidence\": 1,\n        \"filePaths\": [\n          \"deps/curl-7.58.0/CHANGES\",\n          \"c-example/deps/curl-7.58.0/CMake/CMakeConfigurableFile.in\",\n          \"c-example/deps/curl-7.58.0/CMake/CurlSymbolHiding.cmake\"\n        ],\n        \"confidence\": 1\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Snyk Secret in EKS Cluster\nDESCRIPTION: kubectl command to create a secret named 'snyk-secret' in the 'snyk-runtime-sensor' namespace. This secret contains the Snyk Service Account Token required for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic snyk-secret \\\n--from-literal=snykToken=$SNYK_TOKEN \\\n-n snyk-runtime-sensor\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Contributors with an Exclusion File\nDESCRIPTION: Command to count contributors while excluding specific email addresses listed in an exclusion file. Requires token, host URL, and the path to a file containing emails to exclude (one per line).\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/github-enterprise/github-enterprise-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count github-enterprise --token TOKEN --url HOST_URL --orgs ORG_ONE,ORG_TWO --exclusionFilePath PATH_TO_FILE\n```\n\n----------------------------------------\n\nTITLE: Adding Helm Repository for Snyk Runtime Sensor - Kubernetes Bash\nDESCRIPTION: This command adds the Snyk runtime sensor Helm repository to Helm, allowing you to install the sensor directly from it.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add runtime-sensor https://snyk.github.io/runtime-sensor\n```\n\n----------------------------------------\n\nTITLE: Querying SCA Issues Backlog by Organization\nDESCRIPTION: SQL query that returns open SCA issues backlog counters distributed by fixability and grouped by Snyk Organization. Focuses on high and critical severity issues from monitored projects, excluding deleted issues.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/reporting/reporting-and-bi-integrations-snowflake-data-share/build-your-first-dashboard.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT  o.DISPLAY_NAME AS organization_display_name,\n        COUNT_IF(ISSUE_SEVERITY='Critical' AND COMPUTED_FIXABILITY='Fixable') AS fixable_critical_issues,\n        COUNT_IF(ISSUE_SEVERITY='High'AND COMPUTED_FIXABILITY='Fixable') AS fixable_high_issues,\n        COUNT_IF(ISSUE_SEVERITY='Critical' AND COMPUTED_FIXABILITY='Partially Fixable') AS partially_fixable_critical_issues,\n        COUNT_IF(ISSUE_SEVERITY='High'AND COMPUTED_FIXABILITY='Partially Fixable') AS partially_fixable_high_issues,\n        COUNT_IF(ISSUE_SEVERITY='Critical' AND COMPUTED_FIXABILITY='No Fix Supported') AS unfixable_critical_issues,\n        COUNT_IF(ISSUE_SEVERITY='High'AND COMPUTED_FIXABILITY='No Fix Supported') AS unfixable_high_issues\nFROM SNYK.SNYK.ISSUES__V_1_0 i\n     INNER JOIN SNYK.SNYK.PROJECTS__V_1_0 p ON i.PROJECT_PUBLIC_ID = p.PUBLIC_ID\n     INNER JOIN SNYK.SNYK.ORGS__V_1_0 o ON i.ORG_PUBLIC_ID = o.PUBLIC_ID\nWHERE p.IS_MONITORED = TRUE\n     AND i.DELETED_AT IS NULL\n     AND ISSUE_STATUS = 'Open'\n     AND i.PRODUCT_NAME = 'Snyk Open Source'\nGROUP BY o.DISPLAY_NAME\nORDER BY fixable_critical_issues DESC, fixable_high_issues DESC,\n    partially_fixable_critical_issues DESC, partially_fixable_high_issues DESC;\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Integration API for SNYK-EU-01\nDESCRIPTION: Helm upgrade command parameter for configuring the integration API endpoint for the SNYK-EU-01 region when installing the Snyk Controller.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/working-with-snyk/regional-hosting-and-data-residency.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n--set integrationApi=https://api.eu.snyk.io/v2/kubernetes-upstream\n```\n\n----------------------------------------\n\nTITLE: Passing Insecure Downstream Mode as Docker Environment Variable\nDESCRIPTION: This Docker command-line option shows how to pass the insecure downstream mode setting as an environment variable when running a container. It enables HTTP-only connections for downstream services.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-snyk-broker-docker-installation/insecure-downstream-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-e INSECURE_DOWNSTREAM=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Secret for Snyk Token - AWS CLI\nDESCRIPTION: This command creates a new secret in AWS Secrets Manager to store the Snyk service account token securely.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\naws secretsmanager create-secret \\\n--name snyk-runtime-sensor-secret \\\n--secret-string '{\"snykToken\":\"<<YOUR_SERVICE_ACCOUNT_TOKEN>>\"}'\n```\n\n----------------------------------------\n\nTITLE: Adding Snyk Runtime Sensor Helm Repository\nDESCRIPTION: Command to add the Snyk Runtime Sensor Helm chart repository to your Helm installation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add runtime-sensor https://snyk.github.io/runtime-sensor\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Broker Client\nDESCRIPTION: This snippet lists the necessary environment variables to be set when running the Broker Client. It allows for secure and seamless integration to access ECR without requiring a username and password.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/snyk-broker-container-registry-agent/setting-up-the-container-registry-agent-for-a-brokered-ecr-integration.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nCR_TYPE=ecr\nCR_ROLE_ARN=the role ARN of SnykEcrServiceRole\nCR_REGION=AWS Region of ECR\nCR_EXTERNAL_ID=Optional. The external ID found in the trust relationship condition\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Error Response\nDESCRIPTION: Example of the JSON response returned when authentication fails, showing the 401 unauthorized error structure.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/v1-api.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 401,\n    \"error\": \"Not authorised\",\n    \"message\": \"Not authorised\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using snyk-delta as a module\nDESCRIPTION: This code snippet demonstrates how to use `snyk-delta` as a module within a JavaScript application. It imports the `getDelta` function from the `snyk-delta` package and uses it to compare the JSON results from a Snyk test command.  The `jsonResultsFromSnykTest` variable is assumed to be populated from a file or pipe.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-delta.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"import { getDelta } from 'snyk-delta'\\n\\nconst jsonResultsFromSnykTest = Read from file or pipe snyk test command\\n\\nconst result = await getDelta(jsonResultsFromSnykTest);\"\n```\n\n----------------------------------------\n\nTITLE: Defining User API Specification\nDESCRIPTION: This snippet specifies the REST API endpoint for getting user information in a self-serve manner. It includes the method type and the path to the API schema.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/users.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/self\" method=\"get\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n```\n\n----------------------------------------\n\nTITLE: Listing All Scans for an Organization\nDESCRIPTION: This snippet shows how to get a list of all scans for an organization using a GET request to the Snyk API. The response will contain details on each scan.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/getting-started-with-cloud-scans/manage-cloud-environments/scan-a-cloud-environment.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \n'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/scans?version=2022-12-21~beta' \n-H 'Authorization: token YOUR-API-TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Checking Snyk CLI Version\nDESCRIPTION: This command checks the installed version of the Snyk CLI. It outputs the version number to the console, allowing users to verify if they are running a version that requires Rosetta 2 on Apple silicon machines.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/install-or-update-the-snyk-cli/using-cli-releases-before-version-1.1230.0-on-an-apple-m1-or-m2-machine.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ snyk --version\n```\n\n----------------------------------------\n\nTITLE: Identifying Denial of Service (DoS) through Nested GraphQL Queries\nDESCRIPTION: This entry examines vulnerabilities related to Denial of Service (CWE-400) through nested GraphQL queries in JavaScript applications. Attackers can exploit this by crafting queries that lead to resource exhaustion.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Inserting Package Name into PR Template Using JSON\nDESCRIPTION: This JSON snippet defines a pull request template utilizing 'package_name' to indicate the specific package being addressed in the PR description. It requires identifying package names within projects. The input and output are JSON and string-based respectively, detailing the package name.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"description\": \"Fixes {{ package_name }}\"\n            \n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Universal Broker Config CLI\nDESCRIPTION: Command to install the snyk-broker-config CLI tool using npm\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/basic-steps-to-install-and-configure-universal-broker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> snyk-broker-config workflows connections create\n```\n\n----------------------------------------\n\nTITLE: Deleting Organization Provision (DELETE /org/{orgId}/provision)\nDESCRIPTION: API endpoint to delete the provision of an organization. This endpoint is part of the v1 API and uses the DELETE method, requiring the organization ID as a path parameter.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/organizations-v1.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/org/{orgId}/provision\" method=\"delete\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk API Token\nDESCRIPTION: This snippet outlines how to configure your environment in GitHub Actions to include the Snyk API token. This token is necessary for authenticating API calls to Snyk's services.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/README.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Ping Webhook Event Request Example\nDESCRIPTION: Example of a ping event webhook request that is sent after creating a new webhook or manually triggering it. Shows the required headers and basic payload structure.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/webhooks.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nPOST /webhook-handler/snyk123 HTTP/1.1\nHost: my.app.com\nX-Snyk-Event: ping/v0\nX-Snyk-Transport-ID: 998fe884-18a0-45db-8ae0-e379eea3bc0a\nX-Snyk-Timestamp: 2020-09-25T15:27:53Z\nX-Hub-Signature: sha256=7d38cdd689735b008b3c702edd92eea23791c5f6\nUser-Agent: Snyk-Webhooks/044aadd\nContent-Type: application/json\n{\n  \"webhookId\": \"d3cf26b3-2d77-497b-bce2-23b33cc15362\"\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Ignore File Configurations\nDESCRIPTION: Steps to diagnose and resolve issues with .gitignore and .dcignore files that may interfere with Snyk Code scanning\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/troubleshooting-ides/missing-or-differing-results-in-snyk-code.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Rename ignore files\nmv .gitignore .gitignore.bak\nmv .dcignore .dcignore.bak\n\n# Enable debug logging\n# For Jetbrains\n# Enable debug logging for Snyk Code logger\n\n# For Language Server\nexport SNYK_DEBUG_LEVEL=trace\n```\n\n----------------------------------------\n\nTITLE: Snyk Custom Rule YAML Export Example\nDESCRIPTION: Example of how a custom rule is exported to the .snyk file for repository-specific security scanning\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/create-custom-rule.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# .snyk file custom rule configuration\ncustom-rules:\n  - id: custom-security-rule\n    pattern: \"specific code pattern to detect\"\n    severity: \"High\"\n    message: \"Custom security rule violation\"\n```\n\n----------------------------------------\n\nTITLE: Generating organization data with empty organization skipping\nDESCRIPTION: Command for re-importing that generates organization data while skipping organizations without repositories. Used during the periodic syncing process.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-bitbucket-cloud-organizations-and-repos-in-snyk.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import orgs:data --source=bitbucket-cloud --groupId=<snyk_group_id> --skipEmptyOrg\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk SCM Contributors Count Tool using NPM\nDESCRIPTION: This code snippet provides the command needed to globally install the snyk-scm-contributors-count tool via NPM, allowing users to utilize the tool's functionality for counting contributors from various SCM platforms.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -g snyk-scm-contributors-count\n```\n\n----------------------------------------\n\nTITLE: Available Workload Types for Filtering\nDESCRIPTION: JSON list of Kubernetes workload types that can be used to filter which pods the Runtime Sensor will monitor.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\ndeployment\ndaemonset\nstatefulset\nreplicaset\njob\ncronjob\n```\n\n----------------------------------------\n\nTITLE: Configuring Artifactory Auth in .env File\nDESCRIPTION: Default authentication configuration for Artifactory using the .env file, where the credentials are embedded in the URL.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-snyk-broker-docker-installation/changing-the-auth-method-with-docker.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# The URL to your artifactory\n# If not using basic auth this will only be \"<yourdomain.artifactory.com>/artifactory\"\nARTIFACTORY_URL=<username>:<password>@<yourdomain.artifactory.com>/artifactory\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group Roles in Snyk API v1\nDESCRIPTION: Endpoint for fetching roles associated with a specific group using group ID\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/groups-v1.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n/group/{groupId}/roles\n```\n\n----------------------------------------\n\nTITLE: Snyk Organization Integration URL\nDESCRIPTION: URL pattern for accessing the Terraform Cloud integration settings in Snyk Web UI\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/terraform-cloud-integration-for-snyk-iac-using-run-tasks/set-up-the-terraform-cloud-integration-for-iac.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://app.snyk.io/org/{YOUR-SNYK-ORG}/manage/integrations/terraform-cloud\n```\n\n----------------------------------------\n\nTITLE: Snyk CLI Test Command\nDESCRIPTION: This command uses the Snyk CLI to test the code for vulnerabilities. It specifies the organization ID using the `--org` flag. This is typically used to gate the build process, breaking the build if vulnerabilities exceeding a defined severity threshold are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/implement-snyk/enterprise-implementation-guide/phase-3-gain-visibility/import-projects.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk code test --org=[org-id]\"\n```\n\n----------------------------------------\n\nTITLE: Docker Image Migration for Docker Environments\nDESCRIPTION: Provides migration paths for Docker-based Snyk images, including deprecated images like docker-18.09 and docker-19.03 and their recommended replacements\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-images-guides-to-migration/snyk-images-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Deprecated: snyk/snyk:docker-18.09, snyk/snyk:docker-19.03\n* Recommended: snyk/snyk:docker, snyk/snyk:docker-latest\n```\n\n----------------------------------------\n\nTITLE: Scanning Node.js Application with Snyk in Bitbucket Pipelines 0.7.0\nDESCRIPTION: This YAML snippet details configuring a Bitbucket Pipeline with version 0.7.0 of the Snyk Docker image. It performs dependency installation, testing, and vulnerability scanning for a Node.js application. It requires the SNYK_TOKEN environment variable for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/bitbucket-pipelines-integration-using-a-snyk-pipe/migrating-to-bitbucket-pipelines-v1.0.0.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nscript:\n  - npm install\n\n  - npm test\n\n  - pipe: snyk/snyk-scan:0.7.0\n    variables:\n      SNYK_TOKEN: $SNYK_TOKEN\n      LANGUAGE: \"npm\" # language tag is \"npm\"\n\n  - npm publish\n```\n\n----------------------------------------\n\nTITLE: Example of GitHub Token Pool Configuration\nDESCRIPTION: Shows an example of setting up a GitHub token pool with a valid and an invalid token for demonstration purposes.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-snyk-broker-docker-installation/credential-pooling-with-docker-and-helm.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nGITHUB_TOKEN_POOL=good_token, bad_token\n```\n\n----------------------------------------\n\nTITLE: Enabling Snyk Runtime Sensor Add-on via AWS CLI\nDESCRIPTION: AWS CLI command to enable the Snyk Runtime Sensor add-on for an Amazon EKS cluster. It requires setting environment variables for CLUSTER_NAME, AWS_REGION, SNYK_GROUP_ID, and SNYK_API_BASE_URL.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\naws eks create-addon \\\n--cluster-name $CLUSTER_NAME \\\n--region $AWS_REGION \\\n--addon-name snyk_runtime-sensor \\\n--configuration-values '{\"secretName\":\"snyk-secret\",\"clusterName\":\"$CLUSTER_NAME\",\"snykGroupId\":\"$SNYK_GROUP_ID\",\"snykAPIBaseURL\": \"$SNYK_API_BASE_URL\"}' \\\n--resolve-conflicts OVERWRITE\n```\n\n----------------------------------------\n\nTITLE: Nexus 2 - RES_BODY_URL_SUB Examples\nDESCRIPTION: These examples show how to set the RES_BODY_URL_SUB environment variable for a Nexus 2 deployment. These are used for npm and Yarn integrations and include the `/nexus/content` path.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/nexus-repository-prerequisites-and-steps-to-install-and-configure-broker/nexus-repository-environment-variables-for-snyk-broker.md#2025-04-21_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n\"https://acme.com/nexus/content/groups\"\n```\n\nLANGUAGE: Text\nCODE:\n```\n\"https://acme.com/nexus/content/repositories\"\n```\n\n----------------------------------------\n\nTITLE: Creating ConfigMap for Registry Certificates in Kubernetes\nDESCRIPTION: Creates a ConfigMap to store registry certificates (.crt, .cert, .key files) for the Snyk monitor.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/optional-installation-steps-for-snyk-controller-with-helm.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create configmap snyk-monitor-certs \\\n        -n snyk-monitor --from-file=<path_to_certs_folder>\n```\n\n----------------------------------------\n\nTITLE: Inviting Member to Organization (POST /org/{orgId}/invite)\nDESCRIPTION: API endpoint to invite a new member to an organization. This endpoint is part of the v1 API and uses the POST method, requiring the organization ID as a path parameter.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/organizations-v1.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/org/{orgId}/invite\" method=\"post\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Base Images - REST API GET Request\nDESCRIPTION: This snippet shows the GET request endpoint to retrieve all custom base images. It requires the REST API and is accessible via the specified path.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/custom-base-images.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/custom_base_images\" method=\"get\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Using snyk-delta as a standalone command\nDESCRIPTION: This command runs `snyk-delta` as a standalone command, specifying the baseline organization, baseline project, current organization, and current project.  The `setPassIfNoBaseline` flag is set to false. The organization and project UUIDs for both baseline and current state are required.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-delta.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk-delta --baselineOrg xxx --baselineProject xxx --currentOrg xxx --currentProject xxx --setPassIfNoBaseline false\"\n```\n\n----------------------------------------\n\nTITLE: List Group Service Accounts - GET Request\nDESCRIPTION: API endpoint to retrieve a paginated list of service accounts in a Snyk Group.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/service-accounts/manage-service-accounts-using-the-snyk-api.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.snyk.io/rest/groups/{groupId}/service_accounts\n```\n\n----------------------------------------\n\nTITLE: Using Snyk IaC Describe Command for Local Terraform State File\nDESCRIPTION: Executes the Snyk IaC Describe command to report drift by comparing the current state of cloud resources to a specified local Terraform state file. The command uses the '--from' option to indicate the source of the state file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/get-started-with-snyk-iac-describe-on-aws.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk iac describe --from=\"tfstate://path/to/terraform.tfstate\"\n```\n\n----------------------------------------\n\nTITLE: API Response with Bash Script (JSON)\nDESCRIPTION: Example JSON response from the Snyk API when requesting a Bash script. The actual Bash script is contained in the 'data.attributes.data' field as an escaped JSON string.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/azure-integration-for-cloud-configurations/azure-integration-api/step-1-download-azure-app-registration-iac-template-or-script-api.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonapi\": {\n    \"version\": \"1.0\"\n  },\n  \"data\": {\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\n    \"type\": \"permissions\",\n    \"attributes\": {\n      \"data\": \"objectId=$(az ad app create <...>\",\n      \"type\": \"bash\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Trust Relationship for Snyk ECR Service Role in JSON\nDESCRIPTION: This snippet shows the JSON configuration to update the trust relationship of the Snyk ECR Service Role. It ensures that only the specified IAM roles can assume the role, enhancing security. The JSON structure requires filling in the AWS ARN and optionally adding external IDs for multiple access management.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/snyk-broker-container-registry-agent/setting-up-the-container-registry-agent-for-a-brokered-ecr-integration.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  Version:2012-10-17,\n  Statement: [\n    {\n      Effect:Allow,\n      Principal:{\n        AWS:ARN of Container Registry Agent IAM User or IAM Role\n      },\n      Action:sts:AssumeRole,\n      Condition:{\n        StringEquals: {\n          sts:ExternalId:optional external ID\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Open Source Product PR Description Using JSON\nDESCRIPTION: In this JSON snippet, 'product_is_open_source' is leveraged to tailor PR descriptions for open-source products. It involves identifying PR types within Snyk offerings. Boolean-based JSON inputs result in descriptions aligned with open-source products.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"description\": \"{{ #product_is_open_source }} This Open Source PR has been opened to fix vulnerabilities in your project. {{ /product_is_open_source }}\"\n            \n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling High Availability Mode in Helm Chart for Snyk Broker\nDESCRIPTION: This command demonstrates how to enable high availability mode when deploying Snyk Broker using a Helm chart. It requires Helm chart version 1.7.0 or later and allows for additional configuration options.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/high-availability-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--set highAvailabilityMode.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Markdown Hint Block for Cluster Information\nDESCRIPTION: A markdown hint block indicating that the Cluster column data is only available when using the Snyk Runtime Sensor.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-assets/assets-inventory-components.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"info\" %}\nThe Cluster column is populated only when the Snyk Runtime Sensor is utilized.\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Running the API Documentation Generator\nDESCRIPTION: Command to generate API documentation locally using Make.\nSOURCE: https://github.com/snyk/user-docs/blob/main/tools/api-docs-generator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Broker for GitHub Enterprise\nDESCRIPTION: Helm install command for Snyk Broker with GitHub Enterprise configuration. Sets up broker token, SCM type, server URLs, and essential configurations. Creates a dedicated namespace for the broker installation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/github-enterprise-prerequisites-and-steps-to-install-and-configure-broker/github-enterprise-install-and-configure-using-helm.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install snyk-broker-chart snyk-broker/snyk-broker \\\n             --set scmType=github-enterprise \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set brokerServerUrl=<broker-region-url>\n             --set scmToken=<ENTER_REPO_TOKEN> \\\n             --set github=<ENTER_GHE_ADDRESS> \\\n             --set githubApi=<ENTER_GHE_API_ADDRESS> \\\n             --set githubGraphQl=<ENTER_GRAPHQL_ADDRESS> \\\n             --set enableEssentials=true \\\n             --set brokerClientUrl=<ENTER_BROKER_CLIENT_URL>:<ENTER_BROKER_CLIENT_PORT> \\\n             -n snyk-broker --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Command Options for Azure DevOps Contributors Count\nDESCRIPTION: Lists all available command-line options for the snyk-scm-contributors-count azure-devops command, including required parameters like token and org, as well as optional parameters for filtering by project, repository, and output format.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/azure-devops/azure-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  --version                 Show version number                        [boolean]\n  --help                    Show help                                  [boolean]\n  --token                   Azure DevOps token                         [required]\n  --org                     Your Org name in Azure DevOps, for example, https://dev.azure.com/{OrgName}           [required]\n  --projectKeys             [Optional] Azure DevOps project key/name to count\n                            contributors for\n  --repo                    [Optional] Specific repo to count only for\n  --exclusionFilePath       [Optional] Exclusion list filepath\n  --json                    [Optional] JSON output, required when using the \"consolidateResults\" command\n  --skipSnykMonitoredRepos  [Optional] Skip Snyk monitored repos and count contributors for all repos\n  --importConfDir           [Optional] Generate an import file with the unmonitored repos: A path to a valid folder for the generated import files\n  --importFileRepoType      [Optional] To be used with the importConfDir flag: Specify the type of repos to be added to the import file. Options: all/private/public. Default: all\n```\n\n----------------------------------------\n\nTITLE: Reverting to Group Settings with Snyk API\nDESCRIPTION: JSON payload for resetting an Organization to inherit IaC settings from its parent Group. This removes any Organization-specific overrides for custom rules.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/use-iac-custom-rules-with-cli/use-a-remote-iac-custom-rules-bundle.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"data\": {\n         \"type\": \"iac_settings\",\n         \"attributes\": {\n           \"custom_rules\": {\n             \"inherit_from_parent\": \"group\"\n           }\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: .Net and NuGet Project Options Command Line Arguments\nDESCRIPTION: Command line arguments for .Net and NuGet projects in Snyk CLI, including options for solution files, packages configuration, asset project naming, and runtime resolution.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/cli-commands-and-options-summary.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n--file=.sln\n--file=<filename>.sln\n--file=packages.config\n--assets-project-name\n--packages-folder\n--project-name-prefix=<PREFIX_STRING>\n--project-name-prefix=my-group/\n--dotnet-runtime-resolution\n--dotnet-target-framework\n```\n\n----------------------------------------\n\nTITLE: Example setting Snyk Organization for specific test using Org internal name\nDESCRIPTION: This snippet provides an example of setting the Snyk Organization for a specific CLI test using the Organization's internal name. It requires the Snyk CLI to be installed and assumes a valid Organization internal name is provided. The specified Organization is used only for this particular test run.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/set-the-snyk-organization-for-the-cli-tests.md#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nsnyk code test --org=snyk-xxxx-xxx \n```\n\n----------------------------------------\n\nTITLE: Creating ECR Read-Only Access Policy\nDESCRIPTION: JSON policy that defines read-only permissions for accessing ECR repositories. This policy is used by the Snyk ECR Service Role to provide necessary access to container images and repository metadata.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/snyk-broker-container-registry-agent/setting-up-the-container-registry-agent-for-a-brokered-ecr-integration.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  Version:2012-10-17,\n  Statement: [\n    {\n      Sid:SnykAllowPull,\n      Effect:Allow,\n      Action: [\n        ecr:GetLifecyclePolicyPreview,\n        ecr:GetDownloadUrlForLayer,\n        ecr:BatchGetImage,\n        ecr:DescribeImages,\n        ecr:GetAuthorizationToken,\n        ecr:DescribeRepositories,\n        ecr:ListTagsForResource,\n        ecr:ListImages,\n        ecr:BatchCheckLayerAvailability,\n        ecr:GetRepositoryPolicy,\n        ecr:GetLifecyclePolicy\n      ],\n      Resource:*\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Container Registry Agent Docker Container\nDESCRIPTION: Docker command to run the Container Registry Agent with port and environment variable configuration\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/snyk-broker-container-registry-agent/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --restart=always \\\n       -p 8081:8081 \\\n       -e SNYK_PORT=8081 \\\n       snyk/container-registry-agent:latest\n```\n\n----------------------------------------\n\nTITLE: Excluding Non-Terraform Files from Snyk IaC Scans\nDESCRIPTION: This command finds all files with a .tf extension in the current directory and its subdirectories, then passes them to the Snyk IaC test command. It effectively excludes any files that don't have the .tf extension from being scanned.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/iac-exclusions-using-the-command-line.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfind . -type file -name '*.tf' | xargs snyk iac test\n```\n\n----------------------------------------\n\nTITLE: Restricted File Writing Detection Rule in Custom Rules Framework\nDESCRIPTION: This custom rule enhances the previous rule by specifically targeting writes to 'testFile.txt' while ignoring other files like 'cache.txt'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/create-query.md#2025-04-21_snippet_11\n\nLANGUAGE: ada\nCODE:\n```\nTaint<\n  \"global::System.Console.ReadLine\",\n  PRED:None,\n  CallExpression<\"global::System.IO.File.WriteAllText\">\n    and\n      HasArg1<\"testFile.txt\">\n>\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Snyk Enterprise Implementation\nDESCRIPTION: Markdown content describing Snyk enterprise implementation process, features, and strategies. Includes sections on achieving visibility, prevention, developer adoption, and fixing backlogs.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/implement-snyk/enterprise-implementation-guide/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Enterprise implementation guide\n\nEach business and environment is different. With that in mind, this guide aims to help an enterprise business to implement Snyk. The guide provides recommendations on implementing a large-scale rollout, focusing on the stages needed to help get to an ideal rollout.\n\nThe guide starts by recognizing that most businesses:\n\n* Have a backlog of issues in their existing software.\n* Are continuously creating new software and need to secure new code.\n```\n\n----------------------------------------\n\nTITLE: BitBucket Pipeline Configuration with Legacy Snyk Node-16 Image\nDESCRIPTION: Example BitBucket Pipelines configuration using the deprecated snyk/snyk:node-16 Snyk Image that will be removed. Shows parallel steps for building Node.js code and running Snyk security scanning.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-images-guides-to-migration/bitbucket-pipelines-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#  Example bitbucket-pipelines.yml using `snyk/snyk:node-16` Snyk Image\n#  Template NodeJS build\n\n#  This template allows you to validate your NodeJS code.\n#  The workflow allows running tests and code linting on the default branch.\n\nimage: atlassian/default-image:latest\n\npipelines:\n  default:\n    - parallel:\n        - step:\n            name: Build\n            caches:\n              - node\n            script:\n              - npm install\n        - step:\n            name: Snyk scan\n            script:\n              - pipe: snyk/snyk-scan:1.0.1\n                variables:\n                  SNYK_TOKEN: $SNYK_TOKEN\n                  LANGUAGE: \"node-16\" # <------ Using the `snyk/snyk:node-16` Snyk Image\n                  EXTRA_ARGS: \"--all-projects\" # Optional\n                  DEBUG: \"true\" # Optional\n```\n\n----------------------------------------\n\nTITLE: Running in License Consumption Mode with Bitbucket Cloud\nDESCRIPTION: Example of using the tool to check Snyk license consumption for Bitbucket Cloud. This requires exporting a Snyk token and works only with Bitbucket and Azure.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/usage.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport SNYK_TOKEN=<YOUR-SNYK-TOKEN>\nsnyk-scm-contributors-count bitbucket-cloud --user USERNAME --password PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Displaying Info Hint for Application Analytics Availability in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to create an information hint box, indicating that Application Analytics is only available to Snyk AppRisk users.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/enterprise-analytics/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"info\" %}\n**Feature availability**\n\nApplication Analytics is available only to Snyk AppRisk users. &#x20;\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Basic .snyk Policy File Structure for IaC Ignores\nDESCRIPTION: The basic structure of a .snyk policy file used to ignore all instances of an IaC vulnerability. This example shows the syntax for ignoring a Kubernetes-related issue with ID 'SNYK-CC-K8S-1'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/iac-ignores-using-the-.snyk-policy-file.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v1.19.0\nignore:\n  SNYK-CC-K8S-1:\n    - '*':\n        reason: None Given\n        expires: 2021-08-26T08:40:35.249Z\n        created: 2021-07-27T08:40:35.251Z\n```\n\n----------------------------------------\n\nTITLE: Kubernetes System Requirements Configuration\nDESCRIPTION: Specifies the core Kubernetes and infrastructure requirements for deploying Snyk Code Local Engine, including version compatibility and network access specifications\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-local-engine.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkubernetes:\n  version: 1.21.0 - 1.28.0\n  cluster_type:\n    - managed_public_cloud\n    - unmanaged_self_hosted\n  network_requirements:\n    - outbound_https_websockets: \\*.snyk.io\n    - git_ci_cd_access: required\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for Snyk App\nDESCRIPTION: This command installs the necessary dependencies for handling user authentication, API requests, data storage, encryption, and token management in the Snyk App. It installs packages such as passport, passport-oauth2, axios, uuid, and cryptr, along with their corresponding type definitions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save passport \\\n    passport-oauth2 \\\n    @snyk/passport-snyk-oauth2 \\\n    @types/passport \\\n    @types/uuid \\\n    express-session \\\n    axios \\\n    uuid \\\n    ejs \\\n    jwt-decode \\\n    cryptr \\\n    \"github:dankreiger/lowdb#chore/esm-cjs-hybrid-WITH-LIB\" # This allows lowdb to be used with commonjs modules\n    luxon;\n\nnpm install --save-dev @types/cryptr \\\n    @types/ejs \\\n    @types/express-session \\\n    @types/luxon \\\n    @types/passport \\\n    @types/passport-oauth2 \\\n    @types/uuid\n```\n\n----------------------------------------\n\nTITLE: GET Group IaC Settings\nDESCRIPTION: This endpoint fetches the IaC settings for a particular group. The group ID is needed in the request path, and the API requires proper authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/iacsettings.md#2025-04-21_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/groups/{group_id}/settings/iac\" method=\"get\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n```\n\n----------------------------------------\n\nTITLE: Nexus 2 - BASE_NEXUS_URL Example\nDESCRIPTION: This example demonstrates how to set the BASE_NEXUS_URL environment variable for Nexus 2, including optional authentication. It specifies the URL format and highlights the option to omit authentication if not required.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/nexus-repository-prerequisites-and-steps-to-install-and-configure-broker/nexus-repository-environment-variables-for-snyk-broker.md#2025-04-21_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n\"BASE_NEXUS_URL=https://[username_or_token:password_or_token]@acme.com\"\n```\n\n----------------------------------------\n\nTITLE: Example Role Assertions Array in JSON Format\nDESCRIPTION: A sample JSON structure showing how role assertions are formatted in the Identity Provider configuration. This example demonstrates assigning different roles at group, organization, and custom role levels.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/single-sign-on-sso-for-authentication-to-snyk/custom-mapping/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"roles\": [\n        \"snyk:group:*:group_viewer\",\n        \"snyk:org:development:org_admin\",\n        \"snyk:org:test-org-N58YhztauHcaMiNfvi5fbL:custom:developer_readonly\",\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk API Endpoint in YAML\nDESCRIPTION: This code snippet demonstrates how to modify a Snyk scan task to use an alternate API endpoint. It requires setting a SNYK_API environment variable in the pipeline to the desired endpoint URL. The example uses YAML formatting to define the pipeline task and its inputs. Users must ensure the correct endpoint URL is provided as input for accurate API interaction.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/azure-pipelines-integration/regional-api-endpoints.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  SNYK_API: http://api.us.snyk.io/\n...\n\n- task: SnykSecurityScan@1\n  inputs:\n   ...\n  env:\n    SNYK_API: '$(SNYK_API)'\n```\n\n----------------------------------------\n\nTITLE: Deleting Group Tags in Snyk API v1\nDESCRIPTION: Endpoint for deleting tags from a specific group using group ID\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/groups-v1.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n/group/{groupId}/tags/delete\n```\n\n----------------------------------------\n\nTITLE: Running the Consolidate Results Command\nDESCRIPTION: This snippet shows how to execute the consolidateResults command in the Snyk tool. It requires the --folderPath flag to specify the folder containing the JSON output files from individual SCM commands. The command compiles the results into a single consolidated file named consolidated-results.json.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/consolidate-results.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsnyk-scm-contributors-count consolidateResults --folderPath PathToFolder\n```\n\n----------------------------------------\n\nTITLE: Organization Object Example\nDESCRIPTION: Example of an organization object in the webhook payload, showing the structure of organization-related data.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/webhooks.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"org\": {\n  \"name\": \"My Org\",\n  \"id\": \"a04d9cbd-ae6e-44af-b573-0556b0ad4bd2\",\n  \"slug\": \"my-org\",\n  \"url\": \"https://api.snyk.io/v1/org/my-org\",\n  \"created\": \"2020-11-18T10:39:00.983Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Group Service Account - DELETE Request\nDESCRIPTION: API endpoint to permanently delete a service account from a Snyk Group and revoke its credentials.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/service-accounts/manage-service-accounts-using-the-snyk-api.md#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nDELETE https://api.snyk.io/rest/groups/{groupId}/service_accounts/{serviceAccountId}\n```\n\n----------------------------------------\n\nTITLE: Disabling Broker for Existing Integration\nDESCRIPTION: Curl command to disable broker for an existing integration while updating GitHub credentials\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/api-endpoints-index-and-tips/examples-for-the-update-existing-integration-endpoint.md#2025-04-21_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --include \\\n     --request PUT \\\n     --header \"Content-Type: application/json; charset=utf-8\" \\\n     --header \"Authorization: token API_KEY\" \\\n     --data-binary \"{\n    \\\"type\\\": \\\"github\\\",\n    \\\"broker\\\": { \\\"enabled\\\": false },\n    \\\"credentials\\\": { \\\"token\\\": \\\"GITHUB_TOKEN\\\" }\n}\" \\\n'https://api.snyk.io/v1/org/{orgId}/integrations/{integrationId}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"9a3e5d90-b782-468a-a042-9a2073736f0b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven CodeBuild with Maven Install\nDESCRIPTION: Example buildspec.yml for a Maven project using CodeBuild, showing standard Maven installation and artifact collection process\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/aws-codepipeline-integration-by-adding-a-snyk-scan-stage/aws-code-pipeline-codebuild-step-example.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 0.2\nphases:\n  build:\n    commands:\n      - mvn install\nartifacts:\n  files:\n    - '**/*'\n```\n\n----------------------------------------\n\nTITLE: Patching Google Environment with Snyk API\nDESCRIPTION: Update a Google environment's service account email in Snyk by sending a PATCH request. Needs an API token, environment ID, and new service account email. Can optionally include a Project ID, which should match the current one.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/getting-started-with-cloud-scans/manage-cloud-environments/update-a-cloud-environment.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH \\\n'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/environments/YOUR-ENVIRONMENT-ID?version=2022-12-21~beta' \\\n-H 'Authorization: token YOUR-API-TOKEN' \\\n-H \"Content-Type:application/vnd.api+json\"  -d '{\n  \"data\": {\n    \"attributes\": {\n      \"options\": {\n        \"service_account_email\": \"YOUR-NEW-SERVICE-ACCOUNT-EMAIL\"\n      }\n    },\n    \"type\": \"resource\"\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Excluding Contributors Using an Exclusion File\nDESCRIPTION: This command counts contributors while excluding those listed in an exclusion file. The `--exclusionFilePath` flag specifies the path to the file containing email addresses to exclude, separated by newlines.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-server/bitbucket-server-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count bitbucket-server --token BITBUCKET-TOKEN --url BITBUCKET-URL --projectKeys Key1,Key2 --exclusionFilePath PATH_TO_FILE\n```\n\n----------------------------------------\n\nTITLE: Defining Returns Matcher in Specification Language\nDESCRIPTION: This snippet explains the 'Returns' matcher, which matches on the entity that returns a specific value. It specifies the template parameter 'Value' to denote the expected return value.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/templates-and-predicates.md#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n#### Returns\n\nMatches on the entity (e.g. a function or a method) that returns the value provided as argument.\n\nTemplate parameters:\n\n* Value - What is returned.\n```\n\n----------------------------------------\n\nTITLE: Running in Scoping Mode with Bitbucket Cloud\nDESCRIPTION: Example of using the tool in scoping mode for Bitbucket Cloud, which skips Snyk-monitored repositories when counting contributors. This mode works only with Bitbucket and Azure.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/usage.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count bitbucket-cloud --user USERNAME --password PASSWORD --skipSnykMonitoredRepos\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Options Table in Markdown\nDESCRIPTION: A markdown table defining the available filters in the Asset Dashboard, including Asset Class, Asset Type, Application, Catalog name, and other filtering options with their descriptions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-issues/reporting/available-snyk-reports.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Filter               | Description                                                                                                                                                                                                                                                                                                                                                            |\n| -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Asset Class          | The business criticality of an asset (A - most critical to D - least critical).                                                                                                                                                                                                                                                                                        |\n| Asset type           | The type of an asset (Container image, Package, Repository). Most data widgets already present certain asset types by default.                                                                                                                                                                                                                                                         |\n| *Application        | The list of the applications for which you have configured the application context catalog in Snyk Essentials.                                                                                                                                                                                                                                                         |\n| *Catalog name       | The name of your application context catalog.                                                                                                                                                                                                                                                                                                                          |\n| *Category           | The category of a repository asset. For example, `service` or `library`.                                                                                                                                                                                                                                                                                               |\n| Discovered          | The period when the asset was discovered.                                                                                                                                                                                                                                                                                                                              |\n| Last Seen            | The period when the asset was last imported from the integration.                                                                                                                                                                                                                                                                                                      |\n| *Lifecycle          | The lifecycle state of the application context catalog component. For example `production`, `experimental`, `deprecated`.                                                                                                                                                                                                                                              |\n| *Owner              | The team that owns the repository for which the application context catalog was configured.                                                                                                                                                                                                                                                                            |\n| Repository Freshness | The last commit date in the repository: **Active**: Had commits in the last 3 months. **Inactive**: The last commits were made in the last 3 - 6 months. **Dormant**: No commits in the last 6 months. **N/A**: There are no commits detected by Snyk Essentials. |\n| Source               | The integration that imported the asset.                                                                                                                                                                                                                                                                                                                               |\n| Tags                 | The asset tags. For more details about tagging assets using a policy, see the [Tagging policy] page.                                                                                                                                                                     |\n| *Title              | The name of the component for which the application context catalog was configured.                                                                                                                                                                                    |\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Broker Region Configuration\nDESCRIPTION: Configuring Broker deployment using Helm chart with region-specific server URL\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/working-with-snyk/regional-hosting-and-data-residency.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--set brokerServerUrl=https://broker.us.snyk.io\n```\n\n----------------------------------------\n\nTITLE: Object Name Query Using Regex\nDESCRIPTION: Demonstrates a regex technique for matching object names with flexible prefix and postfix matching, useful when full qualified names are obscured by syntactical variations\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/best-practices-for-snyk-code-custom-rules.md#2025-04-21_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n~\".*[object_name].*\"\n```\n\n----------------------------------------\n\nTITLE: Setting Regional API Hostname for Windows\nDESCRIPTION: Command to set the Snyk API hostname for non-US-01 regions on Windows systems\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/prerequisites-for-universal-broker.md#2025-04-21_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nset SNYK_API_HOSTNAME=https://api.REGION.snyk.io\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Output from Snyk Code Tests\nDESCRIPTION: Command to output Snyk Code test results in JSON format, which includes ignore metadata in the suppressions module.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/ignore-issues/consistent-ignores-for-snyk-code-early-access/snyk-cli.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk code test --json\n```\n\n----------------------------------------\n\nTITLE: Running Tests for the API Generator\nDESCRIPTION: Command to execute tests for the API documentation generator utility.\nSOURCE: https://github.com/snyk/user-docs/blob/main/tools/api-docs-generator/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Gradle Project Testing Options\nDESCRIPTION: Various command-line options for testing Gradle projects, including sub-project selection, configuration matching, and initialization scripts\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--sub-project=<NAME>\n--gradle-sub-project=<NAME>\n--all-sub-projects\n--all-projects\n--configuration-matching=<CONFIGURATION_REGEX>\n--configuration-attributes=<ATTRIBUTE>[,<ATTRIBUTE>]...\n--init-script=<FILE>\n```\n\n----------------------------------------\n\nTITLE: Making API Request for IAM Role Template\nDESCRIPTION: cURL command to request the IAM role template from Snyk's API. Requires organization ID and API token, with option to specify template format (Terraform or CloudFormation).\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/aws-integration/aws-integration-api/step-1-download-iam-role-iac-template-api.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/permissions?version=2022-12-21~beta' \\\n-H 'Authorization: token YOUR-API-TOKEN' \\\n-H 'Content-Type:application/vnd.api+json' -d '{\n    \"data\": {\n        \"attributes\": {\n            \"type\": \"INPUT-TYPE\",\n            \"platform\": \"aws\"\n        },\n        \"type\": \"permissions\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing Kubernetes Connector using Helm Chart\nDESCRIPTION: Instructions for installing the Kubernetes connector using a Helm Chart. The chart creates the necessary permissions for the agent to run on the cluster. The user installing the chart needs sufficient permissions to create new roles in the Kubernetes cluster.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/set-up-insights-for-snyk-apprisk/set-up-insights-kubernetes-connector.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Follow the instructions on the Kubernetes-scanner GitHub repo\n# to use the Helm Chart to deploy the latest released version:\n# https://github.com/snyk/kubernetes-scanner\n# https://github.com/snyk/kubernetes-scanner/releases\n```\n\n----------------------------------------\n\nTITLE: Listing Issues for Operating System Package (Bash)\nDESCRIPTION: Example of making an API request for an operating system package (Debian in this case). It shows how to include the vendor and distro information in the purl.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/issues-list-issues-for-a-package.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ http \\\n  \"https://api.snyk.io/rest/orgs/{org_id}/packages/pkg%3Adeb%2Fdebian%2Fcurl%3Fdistro%3Dbullseye/issues\" \\\n  \"Authorization: token $API_TOKEN\" \\\n  version==2024-06-26\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Create AWS Cloud Environment with Snyk API\nDESCRIPTION: This curl command sends a POST request to the Snyk API to create a new AWS Cloud Environment. It requires the organization ID, API token, and the AWS role ARN.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/aws-integration/aws-integration-api/step-3-create-and-scan-a-cloud-environment-api.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/environments?version=2022-12-21~beta' \\\n-H 'Authorization: token YOUR-API-TOKEN' \\\n-H 'Content-Type:application/vnd.api+json' -d '{\n  \"data\": {\n    \"attributes\": {\n      \"kind\": \"aws\",\n      \"name\": \"Example AWS Environment\",\n      \"options\": {\n        \"role_arn\": \"YOUR-ROLE-ARN\"\n      }\n    },\n    \"type\": \"environment\"\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Verifying GPG Signature\nDESCRIPTION: This command uses `gpg` to verify the signature of the `sha256sums.txt.asc` file. It checks if the file has been signed with a trusted key and if the signature is valid. This ensures the integrity and authenticity of the checksum file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/install-or-update-the-snyk-cli/verifying-cli-standalone-binaries.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngpg --verify sha256sums.txt.asc\n```\n\n----------------------------------------\n\nTITLE: Verifying SHA256 Checksum\nDESCRIPTION: This command uses `grep` to extract the line corresponding to `snyk-macos` from the `sha256sums.txt.asc` file and pipes it to `sha256sum` to verify the checksum. The `-c` option tells `sha256sum` to read checksums from the input.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/install-or-update-the-snyk-cli/verifying-cli-standalone-binaries.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngrep snyk-macos sha256sums.txt.asc | sha256sum -c -\n```\n\n----------------------------------------\n\nTITLE: Removing User from Group with PATCH Request (JSON Body)\nDESCRIPTION: JSON payload for removing a user from a Snyk Group using the PATCH endpoint. Sets the membership attribute to null to remove the user's association with the group.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-admin/user-management-with-the-api/remove-members-from-groups-and-orgs-using-the-api.md#2025-04-21_snippet_0\n\nLANGUAGE: postman_json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"membership\": null\n        },\n        \"id\": \"<user-id>\",\n        \"type\": \"user\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: REST API Audit Logs Response Format\nDESCRIPTION: Example response format from the GA REST Audit Logs API, showing the same event data wrapped in a standardized JSON API response structure with pagination links.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/api-end-of-life-eol-process-and-migration-guides/guides-to-migration/search-audit-logs-group-and-org-v1-api-to-ga-rest-audit-logs-api-migration-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"items\": [\n      {\n        \"groupId\": \"4a18d42f-0706-4ad0-b127-24078731fbea\",\n        \"orgId\": \"4a18d42f-0706-4ad0-b127-24078731fbea\",\n        \"userId\": \"4a18d42f-0706-4ad0-b127-24078731fbea\",\n        \"projectId\": null,\n        \"event\": \"group.edit\",\n        \"content\": {\n          \"before\": {\n            \"name\": \"Group Previous Name\"\n          },\n          \"after\": {\n            \"name\": \"Group Current Name\"\n          }\n        },\n        \"created\": \"2017-04-11T21:00:00.000Z\"\n      }\n    ]\n  },\n  \"jsonapi\": {\n    \"version\": \"1.0\"\n  },\n  \"links\": {\n    \"next\": \"https://example.com/api/resource\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Output of Snyk IaC Test Showing Vulnerability Path\nDESCRIPTION: Sample output from the 'snyk iac test' command showing a security issue in a Kubernetes deployment file. This output contains the resource path needed to create a specific ignore rule.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/iac-ignores-using-the-.snyk-policy-file.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTesting production/deployment.yaml...Infrastructure as code issues:\n  ✗ Container is running in privileged mode [High Severity] [SNYK-CC-K8S-1] in Deployment\n    introduced by [DocId: 0] > input > spec > template > spec > containers[web] \n    > securityContext > privileged\n```\n\n----------------------------------------\n\nTITLE: Group Object Example\nDESCRIPTION: Example of a group object in the webhook payload, showing the basic structure of group-related data.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/webhooks.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"group\": {\n  \"name\": \"ACME Inc.\",\n   \"id\": \"a060a49f-636e-480f-9e14-38e773b2a97f\"\n}\n```\n\n----------------------------------------\n\nTITLE: Service Account Documentation - Markdown Content\nDESCRIPTION: Complete markdown documentation explaining service account concepts, setup procedures, and management in Snyk Enterprise.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/service-accounts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Service accounts\n\n{% hint style=\"info\" %}\n**Feature availability**\\\nService accounts are available only for Enterprise plans. For more information, see [plans and pricing](https://snyk.io/plans/).\n\nFree and Team plan users and Trial users have access to a Snyk user's token under their profile and can use this token to authenticate with a CI/CD, to run the CLI locally or on a build machine, and to authenticate with an IDE manually.\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Docker run Snyk CLI with Maven\nDESCRIPTION: This snippet demonstrates how to run the Snyk CLI from a Docker image to scan a Maven project.  It sets the Snyk token as an environment variable, and then runs the `snyk monitor` command against the project, specifying the organization name.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/install-or-update-the-snyk-cli/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm \\\n-e SNYK_TOKEN=<YOUR_SNYK_TOKEN> \\\n-v <PROJECT_DIRECTORY>:/app \\\n-v <PROJECT_DIRECTORY>/settings.xml:/root/.m2/settings.xml \\\nsnyk/snyk:maven snyk monitor \\\n--all-projects=true \\\n--maven-aggregate-project\n```\n\n----------------------------------------\n\nTITLE: Parsing Webhook Payload\nDESCRIPTION: JavaScript code for parsing the webhook payload from string to JSON\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/tutorial.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  output = JSON.parse(inputData.body);\n} catch (err) {\n  output = { err: err.message };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Broker Chart for Jira Integration\nDESCRIPTION: This command installs the Snyk Broker Helm Chart for Jira using the specified environment variables. Key parameters include scmType, brokerToken, brokerServerUrl, jiraUsername, jiraPassword, jiraHostname, and brokerClientUrl. The command initializes the Jira integration with specified values but does not include https:// in the jiraHostname value.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/jira-prerequisites-and-steps-to-install-and-configure-broker/jira-install-and-configure-using-helm.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm install snyk-broker-chart snyk-broker/snyk-broker \\\n             --set scmType=jira \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set brokerServerUrl=<broker-region-url>\n             --set jiraUsername=<ENTER_JIRA_USERNAME> \\\n             --set jiraPassword=<ENTER_JIRA_PASSWORD>  \\\n             --set jiraHostname=<ENTER_JIRA_HOSTNAME>  \\\n             --set brokerClientUrl=<ENTER_BROKER_CLIENT_URL>:<ENTER_BROKER_CLIENT_PORT> \\\n             -n snyk-broker --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Snyk .NET Runtime Resolution Example\nDESCRIPTION: This code snippet demonstrates how to use the `--dotnet-runtime-resolution` option with the `snyk test` command when testing .NET projects using Runtime Resolution Scanning. This option is required for this type of scanning.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/test.md#2025-04-21_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n\"snyk test --dotnet-runtime-resolution\"\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Verbosity Level\nDESCRIPTION: Configures the logging level (INFO, WARN, ERROR, DEBUG) for the Snyk monitor.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/optional-installation-steps-for-snyk-controller-with-helm.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install snyk-monitor snyk-charts/snyk-monitor \\\n             --namespace snyk-monitor \\\n             --set clusterName=\"Production cluster\" \\\n             --set log_level=\"WARN\"\n```\n\n----------------------------------------\n\nTITLE: Deleting a Client Secret - Request Body\nDESCRIPTION: This snippet shows the request body needed to delete a specific client secret from a Snyk App. The body must include the operation mode 'delete' and the client secret to remove.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/manage-app-details.md#2025-04-21_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\"mode\": \"delete\", \"secret\": \"{clientSecret}\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Universal Broker Deployments\nDESCRIPTION: Command to create a new deployment for Universal Broker. This is required before creating connections if no deployment exists.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/setting-up-and-integrating-your-universal-broker-connections.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-broker-config workflows deployments create\n```\n\n----------------------------------------\n\nTITLE: Implementing Logical OR Conditions for Tag Check\nDESCRIPTION: In this snippet, a logical OR condition is applied to check the absence of either 'owner' or 'description' tags in AWS Redshift Cluster resources. It demonstrates the structure of defining multiple functions for the same rule name.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/examples-of-iac-custom-rules.md#2025-04-21_snippet_2\n\nLANGUAGE: rego\nCODE:\n```\npackage rules\n\naws_redshift_cluster_tags_missing(resource) {\n    not resource.tags.owner\n}\n\naws_redshift_cluster_tags_missing(resource) {\n    not resource.tags.description\n}\n\ndeny[msg] {\n    resource := input.resource.aws_redshift_cluster[name]\n    aws_redshift_cluster_tags_missing(resource)\n    msg := {\n        \"publicId\": \"CUSTOM-RULE-3\",\n        \"title\": \"Missing a description or an owner from the tag\",\n        \"severity\": \"medium\",\n        \"msg\": sprintf(\"input.resource.aws_redshift_cluster[%s].tags\", [name]),\n        \"issue\": \"\",\n        \"impact\": \"\",\n        \"remediation\": \"\",\n        \"references\": [],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Secret for Snyk Token - Kubernetes Bash\nDESCRIPTION: This command creates a Kubernetes secret to store the Snyk service account token, which is required for the sensor to authenticate and function properly.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic <<YOUR_SECRET_NAME>> --from-literal=snykToken=<<YOUR_TOKEN>> -n snyk-runtime-sensor\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk SDK with npm\nDESCRIPTION: This snippet shows how to install the Snyk SDK using npm. Requires Node version 10 or later and npm. After installation, users can verify functionality with a help command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/install-the-sdk.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g snyk-iac-rules\nsnyk-iac-rules --help\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk SDK with Prebuilt Binaries\nDESCRIPTION: This snippet demonstrates how to download and set up Snyk's prebuilt binaries from GitHub. Assumes Intel-based macOS and uses version 0.0.5.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/install-the-sdk.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ tar xzf snyk-iac-rules_0.0.5_Darwin_x86_64.tar.gz\n$ sudo mv snyk-iac-rules /usr/local/bin\nsnyk-iac-rules --help\n```\n\n----------------------------------------\n\nTITLE: Identifying Cryptographic Issues\nDESCRIPTION: This entry reports cryptographic issues (CWE-310) that can occur in Java, JavaScript, Kotlin, Python, and Scala. Such issues can lead to weak encryption implementations or mismanagement of sensitive data, resulting in data breaches.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Identifying Debug Mode Enabled Vulnerabilities\nDESCRIPTION: This entry discusses vulnerabilities arising from debug mode being enabled (CWE-489) in Python applications. Running applications in debug mode can expose sensitive information and system vulnerabilities to attackers.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Environment Variable List for GitHub Enterprise Broker Configuration\nDESCRIPTION: Comprehensive list of environment variables required for GitHub Enterprise Broker configuration, including authentication tokens (BROKER_TOKEN, GITHUB_TOKEN), server URLs (BROKER_SERVER_URL), GitHub Enterprise specific configurations (GITHUB, GITHUB_API, GITHUB_GRAPHQL), and optional feature flags (ACCEPT_IAC, ACCEPT_CODE, ACCEPT_ESSENTIALS).\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/github-enterprise-prerequisites-and-steps-to-install-and-configure-broker/github-enterprise-environment-variables-for-snyk-broker.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBROKER_TOKEN\nGITHUB_TOKEN\nBROKER_SERVER_URL\nGITHUB\nGITHUB_API\nGITHUB_GRAPHQL\nPORT\nBROKER_CLIENT_URL\nACCEPT_IAC\nACCEPT_CODE\nACCEPT_ESSENTIALS\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Resource Requests and Limits Configuration\nDESCRIPTION: This snippet defines the CPU and memory requirements for the Kubernetes pods running the Snyk Controller. It specifies both request and limit settings to ensure the pods have necessary resources allocated during deployment.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrequests: cpu: \"250m\" memory: \"400Mi\"\nlimits: cpu: \"1\" memory: \"2Gi\"\n```\n\n----------------------------------------\n\nTITLE: Identifying Hardcoded Secrets Vulnerabilities\nDESCRIPTION: This entry discusses vulnerabilities involving hardcoded secrets (CWE-547) across multiple languages, including Apex, C#, Go, Java, JavaScript, Kotlin, PHP, Python, Ruby, Rust, Scala, Swift, and Visual Basic. Hardcoded credentials can be easily discovered and exploited by attackers.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Displaying Dependencies with Snyk Test Command (Bash)\nDESCRIPTION: This command displays the dependencies found during a Snyk test run, providing detailed output about each dependency's source and confidence level.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/c-c++/snyk-cli-for-open-source-c++-scans.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk test --unmanaged --print-deps\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform Project\nDESCRIPTION: This command initializes the Terraform project setup, necessary before provisioning any resources. It prepares the working directory containing Terraform configuration files for other commands.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/google-cloud-integration/google-cloud-integration-web-ui/step-2-create-the-google-service-account-web-ui.md#2025-04-21_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform init\n```\n\n----------------------------------------\n\nTITLE: Delete Pending User Provision API Response Model\nDESCRIPTION: JSON response model returned after successfully deleting a pending user provision. The response contains a simple confirmation with 'ok' set to true.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-admin/user-management-with-the-api/provision-users-to-organizations-using-the-api.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Contributors from Count - Command Line - Shell\nDESCRIPTION: This command counts contributors while excluding specific contributors listed in an exclusion file. The path to the exclusion file must be provided along with the GitHub token and organizations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/github/github-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsnyk-scm-contributors-count github --token TOKEN --orgs ORG_ONE,ORG_TWO --exclusionFilePath PATH_TO_FILE\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk Environment via CLI\nDESCRIPTION: Sets the Snyk CLI environment configuration, allowing for easy switching of API endpoints through aliases and ensuring specific configurations are environment-dependent. Dependencies include an installed Snyk CLI version 1.1293.0 or higher. Use the command 'snyk config environment <ENVIRONMENT>' to change the environment. Supports options like '--no-check' to ignore configuration checks. Intended for use when working with Snyk in various operational environments.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/config-environment.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsnyk config environment <ENVIRONMENT>\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nsnyk config environment default\nsnyk config environment SNYK-EU-01\nsnyk config environment SNYK-AU-01\nsnyk config environment SNYK-AU-01 --no-check\nsnyk config environment https://api.eu.snyk.io\n```\n\n----------------------------------------\n\nTITLE: Assigning Org Collaborator Role in JSON\nDESCRIPTION: JSON structure for assigning users with the Org Collaborator role for all Organizations under a specific Group using the 'roles' array.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-configuration/single-sign-on-sso-for-authentication-to-snyk/custom-mapping/legacy-custom-mapping.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"roles\": [\n        \"snyk-{groupID}\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Bitbucket Cloud Contributors Count in Debug Mode\nDESCRIPTION: Command example for running the contributor count tool with verbose debug output to help troubleshoot issues or see detailed execution information.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-cloud/bitbucket-cloud-examples.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=snyk* snyk-scm-contributors-count bitbucket-cloud --user USERNAME --password APP_PASSWORD --workspaces Workspace1 --repo Repo1 --exclusionFilePath PATH_TO_FILE --skipSnykMonitoredRepos --json\n```\n\n----------------------------------------\n\nTITLE: Debug Logging Configuration\nDESCRIPTION: Explains how to enable debug logging by adding the `-d` parameter to the Extension Settings, Solution Settings, or Additional Parameters in Visual Studio. This is useful for troubleshooting issues with the Snyk Visual Studio extension. The IDE needs to be restarted for this to take effect.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/visual-studio-extension/troubleshooting-and-known-issues-with-visual-studio-extension.md#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Configuring Deeproxy Verification Endpoint for SNYK-US-02\nDESCRIPTION: Configuration entry for values-customer-settings.yml to set the deeproxy verification endpoint for the SNYK-US-02 region.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/working-with-snyk/regional-hosting-and-data-residency.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndeeproxy:\nverificationEndpoint: \"https://api.us.snyk.io/v1/validate/token/snyk-to-deepcode-proxy-validation\"\n```\n\n----------------------------------------\n\nTITLE: Getting List of Roles in a Snyk Group\nDESCRIPTION: This HTTP GET request retrieves all available roles in a specific Snyk group. The response contains an array of role objects with their properties, including a 'publicId' that's needed for role assignment.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-admin/user-management-with-the-api/update-member-roles-using-the-api.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.snyk.io/v1/group/{groupId}/roles\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Example of the expected project directory structure after successful compilation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/README.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmy-snyk-app/\n - dist/\n   - index.d.ts\n   - index.js\n   - index.js.map\n - src/\n   - index.ts\n - node_modules/\n   - <lots of things here>\n - package-lock.json\n - tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Broker for DigitalOcean Container Registry with Helm\nDESCRIPTION: Helm installation command for DigitalOcean Container Registry with required parameters including base URL and token.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/snyk-broker-container-registry-agent/install-broker-for-container-registry-agent-using-helm.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install snyk-broker-chart snyk-broker/snyk-broker \\\n             --set scmType=container-registry-agent \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set crType=digitalocean-cr \\\n             --set crBase=<ENTER_CR_BASE_URL> \\\n             --set crToken=<ENTER_CR_TOKEN> \\\n             -n snyk-broker --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Filters for Snyk Runtime Sensor\nDESCRIPTION: Optional Helm parameters to filter which pods the Runtime Sensor will monitor based on workload types, namespaces, and pod labels.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n...\n--set 'sensor.filters.workloadTypes={deployment,cronjob}'\n--set 'sensor.filters.namespaces={ns1,ns2}'\n--set sensor.filters.podLabels.label_key1='label_value1'\n--set sensor.filters.podLabels.label_key2='label_value2'\n...\n```\n\n----------------------------------------\n\nTITLE: Querying Snyk Audit Logs in AWS CloudTrail Lake\nDESCRIPTION: This SQL query retrieves the most recent 10 Snyk audit log entries from AWS CloudTrail Lake. It selects event time, user identity, event name, and additional event data, ordered by event time in descending order. Replace <EVENT-DATA-STORE-ID> with the actual event data store ID associated with the Snyk integration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/integrate-with-snyk/event-forwarding/aws-cloudtrail-lake.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect \n    eventtime, \n    eventdata.useridentity, \n    eventdata.eventname,\n    eventdata.additionaleventdata\nfrom <EVENT-DATA-STORE-ID>\norder by eventTime desc\nlimit 10\n```\n\n----------------------------------------\n\nTITLE: Interpreting Snyk API Response for Azure Cloud Environment Creation\nDESCRIPTION: This JSON response from the Snyk API contains details about the newly created Azure Cloud Environment, including its ID, attributes, and relationships. The 'status' field indicates the scanning progress.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/azure-integration-for-cloud-configurations/azure-integration-api/step-3-create-and-scan-a-cloud-environment-for-azure-api.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonapi\": {\n    \"version\": \"1.0\"\n  },\n  \"data\": {\n    \"id\": \"e25a5ef1-1e96-1234-0000-1234abcd1234\",\n    \"type\": \"environment\",\n    \"attributes\": {\n      \"name\": \"Example Azure Environment\",\n      \"options\": {\n        \"tenant_id\": \"00000000-0000-0000-1234-12345678abcd\",\n        \"application_id\": \"12345678-1234-0000-0000-09876543dcba\",\n        \"subscription_id\": \"abcd1234-abcd-1234-0000-000000000000\"\n      },\n      \"native_id\": \"abcd1234-abcd-1234-0000-000000000000\",\n      \"properties\": {\n        \"subscription_id\": \"abcd1234-abcd-1234-0000-000000000000\",\n        \"subscription_name\": \"Example User\"\n      },\n      \"kind\": \"azure\",\n      \"revision\": 1,\n      \"created_at\": \"2023-02-06T06:34:05Z\",\n      \"status\": \"in_progress\",\n      \"updated_at\": \"2023-02-06T06:34:05Z\"\n    },\n    \"relationships\": {\n      \"organization\": {\n        \"data\": {\n          \"id\": \"d70c1768-5675-0000-1234-abcd1234abcd\",\n          \"type\": \"organization\"\n        },\n        \"links\": {\n          \"related\": \"/orgs/d70c1768-5675-0000-1234-abcd1234abcd?version=2022-12-21~beta\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing npm Lockfile Version\nDESCRIPTION: Using the npm install command with the --lockfile-version flag to specify the lockfile version desired. This ensures consistency in lockfile generation across environments.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/javascript/javascript-for-open-source.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --lockfile-version=2\n```\n\n----------------------------------------\n\nTITLE: Identifying Improper Access Control: Email Content Injection Vulnerabilities\nDESCRIPTION: This entry addresses the improper access control vulnerabilities (CWE-284) related to email content injection in Apex, Go, and PHP. These vulnerabilities allow unauthorized users to manipulate email content.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Scanning Container Image with Snyk CLI\nDESCRIPTION: Example command for scanning a container image using Snyk CLI, specifying the full image name as referenced in Kubernetes deployment.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/set-up-insights-for-snyk-apprisk/set-up-insights-image-scanning.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk container monitor gcr.io/my-company/my-image:latest\n```\n\n----------------------------------------\n\nTITLE: Authentication Token Configuration\nDESCRIPTION: Configure authentication method for Snyk plugin, supporting OAuth2 or API token. Specifies how users can authenticate and set up their Snyk account credentials in the JetBrains IDE.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/jetbrains-plugin/configuration-for-the-snyk-jetbrains-plugin-and-ide-proxy.md#2025-04-21_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\n* **Authentication method:** Specify whether to authenticate with OAuth2 or with an API token. `OAuth2` is the default\n* **Token**: Set the token to use for authentication with Snyk\n```\n\n----------------------------------------\n\nTITLE: Identifying Debug Features Enabled Vulnerabilities\nDESCRIPTION: This entry highlights vulnerabilities related to enabled debug features (CWE-215) in C# and Visual Basic, as well as XML. These debug settings can expose sensitive information and allow attackers to manipulate applications.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Filtering Snyk API for IaC Issues\nDESCRIPTION: This code snippet provides a JSON payload for the Snyk API to filter and retrieve Infrastructure as Code issues. The 'orgs' field should include the public organization ID which can be found in the Snyk UI. The 'types' field must include 'configuration' to specify IaC issues. This request helps in extracting specific issues from the API.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/view-snyk-iac-issue-reports.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filters\": {\n    \"orgs\": [\"my-public-org-id\"],\n    \"types\": [\n      \"configuration\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Custom Base Image - REST API DELETE Request\nDESCRIPTION: This snippet outlines the DELETE request method for removing a custom base image identified by '{custombaseimage_id}'. It is necessary to use the REST API for this operation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/custom-base-images.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/custom_base_images/{custombaseimage_id}\" method=\"delete\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Identifying Cross-Site Request Forgery (CSRF) Vulnerabilities\nDESCRIPTION: This entry outlines CSRF vulnerabilities (CWE-352) affecting Java, JavaScript, Kotlin, Python, and Scala. CSRF attacks trick the victim into submitting a request unknowingly, allowing attackers to perform actions on behalf of the user.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Overriding Category Names with x-snyk-documentation Extension\nDESCRIPTION: YAML example showing how to override category names for operations in the OpenAPI specification without changing tags. This allows for better organization of the documentation without creating breaking changes.\nSOURCE: https://github.com/snyk/user-docs/blob/main/tools/api-docs-generator/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /tomatoes:\n    post:\n      x-snyk-documentation:\n        category: vegetables\n      tags:\n        - fruits\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Syntactical Query in C#\nDESCRIPTION: This C# code snippet demonstrates reading a JSON request body from a stream, deserializing it to an object, and executing an SQL command using the deserialized data. The snippet highlights potential security issues like SQL injection by showcasing the direct use of user input in the SQL query. It requires Newtonsoft.Json for JSON deserialization and Npgsql for executing the SQL command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/create-query.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Read request body\nstring body;\nusing (var reader = new StreamReader(context.Request.Body))\n{\n   body = await reader.ReadToEndAsync();\n}\n// Parse JSON data\nvar form = JsonConvert.DeserializeObject<SignupForm>(body);\nvar sql = String.Format(\"INSERT INTO submissions(email, name) VALUES('%s', '%s')\", form.Email, form.Name);\nform.Email = \"nobody@notrealdomain.co.uk\";\nusing var cmd = new NpgsqlCommand(sql, conn);\n```\n\n----------------------------------------\n\nTITLE: Processing Snyk Findings and Sending to New Relic in C#\nDESCRIPTION: This C# code snippet processes Snyk security findings, formats them into a JSON payload, and sends them to New Relic's Security API. It includes error handling and logging to New Relic Insights. The function uses environment variables for configuration and HTTP client for API communication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/how-to-use-snyk-webhooks-to-integrate-new-relic-with-snyk/create-an-azure-function-app.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nsb.Append(\"  \\\"remediationRecommendation\\\": \\\"\" + remediationRecommendation + \"\\\",\");\nsb.Append(\"  \\\"severity\\\": \\\"\" + severity + \"\\\",\");\nsb.Append(\"  \\\"snykIssueType\\\": \\\"\" + issueType + \"\\\",\");\nsb.Append(\"  \\\"snykOrigin\\\": \\\"\" + data.project.origin + \"\\\",\");\nsb.Append(\"  \\\"source\\\": \\\"Snyk\\\",\");\nsb.Append(\"  \\\"title\\\": \\\"\" + title + \"\\\"\");\nsb.Append(\"}\");\n}\n}\n\nsb.Append(\"]}\");\n\nstring payload = sb.ToString();\npayload = payload.Replace(System.Environment.NewLine, \". \");\n\nif (payload != \"{\\\"findings\":[]}\"){\n    log.LogInformation(\"payload: \" + payload);\n    var content = new StringContent(payload, Encoding.UTF8, \"application/json\");\n    var NEW_RELIC_SECURITY_URL = Environment.GetEnvironmentVariable(\"NEW_RELIC_SECURITY_URL\");\n    var NEW_RELIC_LICENSE_KEY = Environment.GetEnvironmentVariable(\"NEW_RELIC_LICENSE_KEY\");\n\n    var url = NEW_RELIC_SECURITY_URL;\n    var headerKey = NEW_RELIC_LICENSE_KEY;\n\n    using var client = new HttpClient();\n    client.DefaultRequestHeaders.Clear();\n    client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue(\"application/json\"));\n    client.DefaultRequestHeaders.TryAddWithoutValidation(\"Content-Type\", \"application/json\");\n    client.DefaultRequestHeaders.Add(\"Api-Key\", headerKey);\n    var response = await client.PostAsync(url, content);\n\n    string result = response.Content.ReadAsStringAsync().Result;\n    log.LogInformation(\"response.StatusCode: \" + response.StatusCode);\n    if (response.StatusCode == HttpStatusCode.OK)\n    {\n        x++;\n    }\n    log.LogInformation(\"result: \" + result);\n\n    // write output as summary\n    string output = \"Successfully processed \" + x + \" issues.\";\n    log.LogInformation(output);\n    responseMessage = output;\n}\nelse\n{\n    log.LogInformation(\"No project found!\");\n}\n}\ncatch (Exception ex)\n{\nStringBuilder sb = new StringBuilder();\nsb.Append(\"{\");\nsb.Append(\"  \\\"eventType\\\": \\\"SnykFindingsErrors\\\",\");\nsb.Append(\"  \\\"message\\\": \\\"\" + ex.Message + \"\\\"\");\nsb.Append(\"}\");\n\nvar content = new StringContent(sb.ToString());\n\ncontent.Headers.ContentType = new MediaTypeHeaderValue(\"application/json\");\n\nvar NEW_RELIC_INSIGHTS_URL = Environment.GetEnvironmentVariable(\"NEW_RELIC_INSIGHTS_URL\");\nvar NEW_RELIC_LICENSE_KEY = Environment.GetEnvironmentVariable(\"NEW_RELIC_LICENSE_KEY\");\n\nvar url = NEW_RELIC_INSIGHTS_URL;\nusing var client = new HttpClient();\nclient.DefaultRequestHeaders.Add(\"Api-Key\", NEW_RELIC_LICENSE_KEY);\nvar response = await client.PostAsync(url, content);\n\nstring result = response.Content.ReadAsStringAsync().Result;\nlog.LogInformation(\"response.StatusCode: \" + response.StatusCode);\n\nresponseMessage = \"Error during execution\";\n}\n\nreturn new OkObjectResult(responseMessage);\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logs for Troubleshooting\nDESCRIPTION: Command to run an IaC test with debug logs enabled using the -d flag. This provides more detailed information for diagnosing issues with custom rules bundles.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/use-iac-custom-rules-with-cli/use-a-remote-iac-custom-rules-bundle.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test <file> -d\n```\n\n----------------------------------------\n\nTITLE: Setting up Google SCC Integration with Snyk REST API\nDESCRIPTION: This curl command creates a Google Security Command Center integration with Snyk using the REST API. It requires your Snyk Group ID, API token, Google Cloud organization ID, finding source name, and GCP service account key.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/integrate-with-snyk/event-forwarding/google-security-command-center.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location 'https://api.snyk.io/rest/groups/<SNYK_GROUP_ID>/cloud_events/group_registrations?version=2023-01-25~experimental' \\\n--header 'Content-Type: application/vnd.api+json' \\\n--header 'Authorization: token <SNYK_API_TOKEN>' \\\n--data '{\n\t\"data\": {\n\t\"type\": \"group_registration\",\n\t\"attributes\": {\n\t\t\t\"type\": \"google-securitycommandcenter\",\n\t\t\t\"name\": \"Test Google SCC integration\",\n\t\t\t\"config\": {\n\t\t\t\t\"org_id\": \"<GCP_ORG_ID>\",\n\t\t\t\t\"finding_source_name\": \"<GCP_FINDING_SOURCE_NAME>\"\n\t\t\t},\n\t\t\t\"credentials\": \"<GCP_SERVICE_ACCOUNT_KEY>\"\n\t\t}\n\t}\n}'\n```\n\n----------------------------------------\n\nTITLE: Interpreting API Response JSON\nDESCRIPTION: This JSON snippet is an example of the response received after creating a Google Cloud Environment using the Snyk API. It contains details such as environment ID, type, attributes, and the status of the operation, which is initially 'in_progress'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/google-cloud-integration/google-cloud-integration-api/step-3-create-and-scan-a-cloud-environment-for-google-api.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonapi\": {\n    \"version\": \"1.0\"\n  },\n  \"data\": {\n    \"id\": \"c61079b9-7260-4b2f-1234-abcd1234abcd\",\n    \"type\": \"environment\",\n    \"attributes\": {\n      \"name\": \"my-project-demo\",\n      \"options\": {\n        \"project_id\": \"my-project-demo\",\n        \"service_account_email\": \"snyk-cloud-mt-us-abcd1234@my-project-demo.iam.gserviceaccount.com\"\n      },\n      \"native_id\": \"my-project-demo\",\n      \"properties\": {\n        \"project_id\": \"my-project-demo\",\n        \"project_name\": \"my-project-demo\",\n        \"project_number\": \"123456789012\"\n      },\n      \"kind\": \"google\",\n      \"revision\": 1,\n      \"created_at\": \"2022-10-13T20:45:19Z\",\n      \"status\": \"in_progress\",\n      \"updated_at\": \"2022-10-13T20:45:19Z\"\n    },\n    \"relationships\": {\n      \"organization\": {\n        \"data\": {\n          \"id\": \"d70c1768-5675-0000-1234-abcd1234abcd\",\n          \"type\": \"organization\"\n        },\n        \"links\": {\n          \"related\": \"/orgs/d70c1768-5675-0000-1234-abcd1234abcd?version=2022-12-21~beta\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Commits for Specific Projects in Azure DevOps\nDESCRIPTION: Command to retrieve commit information for specific projects under an Azure DevOps organization by providing the project keys as a comma-separated list.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/azure-devops/azure-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count azure-devops --token AZURE-TOKEN --org AZURE-ORG --projectKeys Key1,Key2...\n```\n\n----------------------------------------\n\nTITLE: Update CloudFormation Stack using AWS CLI\nDESCRIPTION: This shell command updates an existing CloudFormation stack to use the latest Snyk role. It requires the stack name and uses a template URL from an S3 bucket. The command also uses the `CAPABILITY_NAMED_IAM` capability because the template creates IAM resources.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/configure-cloud-providers/configure-aws-provider.md#2025-04-21_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ aws cloudformation update-stack --stack-name SNYK_STACK_NAME --template-url https://driftctl-cfn-templates.s3.eu-west-3.amazonaws.com/snyk-role.yml --capabilities CAPABILITY_NAMED_IAM\n```\n\n----------------------------------------\n\nTITLE: Conditional Expression Example - Variable Definition\nDESCRIPTION: Terraform variable definition that declares the remote_user_addr variable with a default value of 0.0.0.0/0, which will trigger a security issue in Snyk's analysis.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/scan-your-iac-source-code/scan-terraform-files/terraform-variables-support-current-iac.md#2025-04-21_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"remote_user_addr\" {\n  type = string\n  default = \"0.0.0.0/0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Snyk CLI Version via npm\nDESCRIPTION: This command installs a specific version of the Snyk CLI globally using npm. It is used to install the last version of the CLI that supported Node.js 4.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/install-or-update-the-snyk-cli/most-recent-version-of-the-cli-that-supports-node.js-4.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"npm i -g snyk@1.143.6\"\n```\n\n----------------------------------------\n\nTITLE: Modifying eclipse.ini for JDK 17\nDESCRIPTION: This snippet shows how to modify the `eclipse.ini` file to specify the path to JDK 17 or a higher version. This is useful when facing issues installing Eclipse plugins due to JDK incompatibility.  Replace `{path to JDK 17 or higher version}` with the actual JDK installation path.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/eclipse-plugin/troubleshooting-for-the-eclipse-plugin.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"vm {path to JDK 17 or higher version}\\bin\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies with Version Variables\nDESCRIPTION: Example showing how to declare Scala dependencies in build.sbt using version variables that Snyk can detect and analyze.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/scala/scala-for-open-source.md#2025-04-21_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\n  lazy val derbyVersion = \"10.4.1.3\"\n  libraryDependencies ++= Seq(\n    \"org.apache.derby\" % \"derby\" % derbyVersion\n  )\n```\n\n----------------------------------------\n\nTITLE: List Pending User Provisions API Response Model\nDESCRIPTION: JSON response model returned when listing pending user provisions for a Snyk organization. The response contains an array of pending provision objects with user emails, role information, and creation timestamps.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-admin/user-management-with-the-api/provision-users-to-organizations-using-the-api.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n....\n{\n\"email\": \"test@example.com\",\n\"rolePublicId\": \"\",\n\"role\": \"ADMIN\",\n\"created\": Date\n},\n....\n]\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Path Format Example\nDESCRIPTION: Shows the expected format for specifying the path to a Dockerfile in Snyk's configuration\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/scan-your-dockerfile/detect-vulnerable-base-images-from-your-dockerfile.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/path/dockerfile\n```\n\n----------------------------------------\n\nTITLE: Installing Universal Broker with Helm\nDESCRIPTION: Helm command to install the Snyk Universal Broker on a Kubernetes cluster, configuring deployment ID, client credentials, and additional credential references like GitHub tokens.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/running-your-universal-broker-client.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install my-snyk-broker oci://registry-1.docker.io/snyk/snyk-universal-broker \\\n  --set deploymentId='YOUR_DEPLOYMENT_ID' \\\n  --set clientId='YOUR_CLIENT_ID' \\\n  --set clientSecret='YOUR_CLIENT_SECRET' \\\n  --set credentialReferences.MY_GITHUB_TOKEN='YOUR_GITHUB_PAT' \\\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk CLI for OCI Registry\nDESCRIPTION: This code snippet sets the OCI registry username and password for Snyk CLI configuration. It allows users to authenticate to pull custom rules from the specified OCI registry by setting corresponding environment variables in Snyk.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/use-iac-custom-rules-with-cli/use-a-remote-iac-custom-rules-bundle.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk config set oci-registry-username=<org registry username>\nsnyk config set oci-registry-password=<org registry password>\n```\n\n----------------------------------------\n\nTITLE: Providing Certificate Content Directly in Helm\nDESCRIPTION: Command to directly provide certificate content through the caCertFile parameter.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/parameters-for-troubleshooting-and-providing-your-own-certificate-with-helm.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--set caCertFile=\"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\"\n```\n\n----------------------------------------\n\nTITLE: CocoaPods Podfile\nDESCRIPTION: The `podfile` and `podfile.lock` files are used by CocoaPods to manage dependencies in Swift and Objective-C projects. Snyk Open Source supports these files to identify and analyze open source dependencies.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/swift-and-objective-c/README.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n\"podfile\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\n\"podfile.lock\"\n```\n\n----------------------------------------\n\nTITLE: Defining Binary Disjunction Matcher in Specification Language\nDESCRIPTION: This snippet outlines the 'Or' matcher that performs a binary disjunction, matching if either or both arguments match. It includes template parameters 'First' and 'Second' to denote the disjuncts.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/templates-and-predicates.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n#### Or\n\nA binary disjunction. Matches if either (or both) arguments match.\n\nTemplate parameters:\n\n* First - disjunct\n* Second - disjunct\n```\n\n----------------------------------------\n\nTITLE: Output for Issue Count in YAML\nDESCRIPTION: A YAML snippet presents the output format for 'issue_count', displaying how the total number of resolved issues appears in the pull request description.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nThe PR will fix 98 issues.\n```\n\n----------------------------------------\n\nTITLE: Configuring Nexus 3 Instance for Snyk Integration\nDESCRIPTION: This snippet provides the steps required to configure a Nexus 3 instance to work with Snyk. It requires entering the Nexus URL, Username, and Password, and clicking Save to complete the integration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-open-source/package-repository-integrations/nexus-repository-manager-connection-setup/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Enter the URL of your Nexus instance; this must end with `/repository`\n* Enter the Username.\n* Enter the Password.\n* Click **Save**\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkmarx SAST Integration with Docker\nDESCRIPTION: This code snippet shows how to configure the Checkmarx SAST integration using Docker. The environment variables such as `BROKER_CLIENT_URL`, `BROKER_TOKEN`, and `CHECKMARX_PASSWORD` are specified for the integration setup. Docker must be available, and the Checkmarx service credentials should be prepared in advance.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/snyk-broker-apprisk.md#2025-04-21_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\ndocker run --restart=always \\\n        -p 8001:8001 -e PORT=8001 \\\n        -e BROKER_CLIENT_URL=http://broker.url.example:8000 \\\n        -e BROKER_TOKEN=<YOUR BROKER TOKEN> \\\n        -e UNIVERSAL_BROKER_ENABLED=true \\\n        -e CHECKMARX_PASSWORD=<YOUR CHECKMARX PASSWORD> \\\n        -e BROKER_SERVER_URL=https://broker.snyk.io \\\n        -v $(pwd)/config.universal.json:/home/node/config.universal.json \\\n    snyk/broker:universal\n```\n\n----------------------------------------\n\nTITLE: Identifying Ignored Files for Code Import\nDESCRIPTION: Explains how Snyk Code uses .gitignore and .dcignore files to exclude specific files from code scanning and import process\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n.gitignore\n.dcignore\n```\n\n----------------------------------------\n\nTITLE: Defining S3 Bucket with ACL in Terraform AWS Provider v4.0.0 (Single File)\nDESCRIPTION: Example of defining an S3 bucket with a permissive ACL using Terraform AWS Provider v4.0.0, where the ACL is in a separate resource but in the same file. Snyk IaC can properly scan this configuration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/scan-your-iac-source-code/scan-terraform-files/terraform-aws-provider-support.md#2025-04-21_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_s3_bucket\" \"example\" {\n  # ... other configuration ...\n}\n\nresource \"aws_s3_bucket_acl\" \"example\" {\n  bucket = aws_s3_bucket.example.id\n  acl    = \"public-read-write\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Cursor-Based Pagination in Response\nDESCRIPTION: Structure of API response demonstrating cursor-based pagination, including links for navigating pages of data.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/rest-api/about-the-rest-api.md#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"data\": [ ... ],\n    \"links\": {\n        \"prev\": \"/orgs/123-abc-def-456/projects?version=2024-06-10&ending_before=v1.eyJpZCI6Mz1zODQyMH0%3D\",\n        \"next\": \"/orgs/123-abc-def-456/projects?version=2024-06-10&starting_after=v1.eyJpZCI6Mz1zODQyMH0%3D\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Build Requirements for Different Languages in AWS CodePipeline\nDESCRIPTION: This snippet provides a table that outlines the build requirements for various programming languages when using AWS CodePipeline. It details when a build is necessary based on the existence of relevant configuration files and specifies the steps required to ensure all dependencies are properly installed before proceeding with Snyk scans.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/aws-codepipeline-integration-by-adding-a-snyk-scan-stage/setup-requirements-for-aws-codepipeline.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n|      Language     | Project Type | Build Required |                                            Notes                                           |\n| :---------------: | :----------: | -------------- | :----------------------------------------------------------------------------------------: |\n|     Javascript    |      npm     | No*            |   Build only required if no `package-lock.json` file present; run npm install to generate  |\n|     Javascript    |     Yarn     | No*            |      Build only required if no `yarn.lock` file present; run yarn install to generate      |\n|        Java       |     Maven    | Yes            |                              Run `mvn install` before testing                              |\n|        Java       |    Gradle    | No             |                                                                                            |\n|        .NET       |     Nuget    | No*            |                  Build only required if no `packages.config` file present                  |\n|       Python      |      Pip     | No*            |     Build only required if missing a Snyk config file with the language-settings param     |\n|       Python      |   Setup.py   | Yes            |                            Run `pip install -e .` before testing                           |\n|       Python      |    Poetry    | No*            |     Build only required if no `poetry.lock` file present; run `poetry lock` to generate    |\n|        Ruby       |    Bundler   | No*            |   Build only required if no `Gemfile.lock` file present; run `bundle install` to generate  |\n|        PHP        |   Composer   | No*            | Build only required if no `composer.lock` file present; run `composer install` to generate |\n|       Scala       |      SBT     | No             |                                                                                            |\n|         Go        |  Go Modules  | No             |                                                                                            |\n| Swift/Objective-C |   Cocoapods  | No*            |     Build only required if no `Podfile.lock` file present; run `pod install` to generate     |\n```\n\n----------------------------------------\n\nTITLE: TypeScript Express Request Handler with Cookie Handling\nDESCRIPTION: Express.js middleware demonstrating cookie access and potential security vulnerability through logging sensitive data\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/templates-and-predicates.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Request, Response, NextFunction } from 'express';\n\nmodule.exports = function productReviews () {\n return (req: Request, res: Response, next: NextFunction) => {\n   let user = req.signedCookies;\n   doSomething(user);\n   console.log('Some message ' + user);\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Custom Base Image - REST API GET Request\nDESCRIPTION: This snippet captures the GET request to fetch a specific custom base image by its unique identifier '{custombaseimage_id}'. It requires the REST API for access.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/custom-base-images.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/custom_base_images/{custombaseimage_id}\" method=\"get\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Monitoring CI/CD Pipeline Test Adoption in Snowflake\nDESCRIPTION: This SQL query measures the adoption of security tests in CI/CD pipelines by calculating the number of tested repositories, total test scans, and success rate per Snyk product. The query focuses on tests executed in the CI/CD stage over the past three months, helping teams assess the effectiveness of their security gates.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/reporting/reporting-and-bi-integrations-snowflake-data-share/build-your-first-dashboard.md#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    PRODUCT_DISPLAY_NAME AS PRODUCT,\n    COUNT(DISTINCT INTERACTION_TARGET_ID) AS \"TESTED REPOS\",\n    COUNT(1) AS \"TOTAL SCANS\",\n    ROUND(((SUM(CASE WHEN INTERACTION_EXIT_CODE=0 THEN 1 ELSE 0 END))/\n    (NULLIF(SUM(CASE WHEN INTERACTION_EXIT_CODE IN (0,1) THEN 1 ELSE 0 END),0))\n    *100),0) AS \"SUCCESS RATE\"\nFROM SNYK.SNYK.USAGE_EVENTS__V_1_0\nWHERE INTERACTION_STAGE != 'cicd'\n    AND ARRAY_CONTAINS('test'::VARIANT, INTERACTION_CATEGORIES) \n    AND INTERACTION_TIMESTAMP >= DATE_TRUNC('MONTH', DATEADD('MONTH', -3, CURRENT_DATE))\nGROUP BY PRODUCT\n```\n\n----------------------------------------\n\nTITLE: Getting Commits for a Specific Repository in Azure DevOps\nDESCRIPTION: Command to retrieve commit information for a specific repository within a project by providing the project key and repository name.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/azure-devops/azure-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count azure-devops --token AZURE-TOKEN --org AZURE-ORG --projectKeys Key1 --repo Repo1\n```\n\n----------------------------------------\n\nTITLE: Specifying Terraform Provider Version\nDESCRIPTION: This command specifies the version of the Terraform provider to use during the scan. It uses the `--tf-provider-version` option to define the provider version. This avoids potential scan errors due to provider incompatibilities.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/iac-describe-command-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac describe --tf-provider-version=3.43.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Base Image in JSON\nDESCRIPTION: This snippet demonstrates how to display the current base image in a template for container projects. It utilizes a JSON structure to set the description with the base image name. The key parameter is 'container.current_base_image_name', which is dynamically replaced with the actual image name in the output.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"description\": \"The current base image is: {{ container.current_base_image_name }}\"\n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hello World TypeScript Implementation\nDESCRIPTION: Simple TypeScript example demonstrating basic functionality with a hello world function that includes type definitions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst world = 'world';\n\nexport function hello(world: string = world): string {\n  return `Hello ${world}! `;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Snyk Charts Repository to Helm\nDESCRIPTION: Command to add the Snyk Charts repository to Helm package manager with force update option.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/install-the-snyk-controller-on-amazon-elastic-kubernetes-service-amazon-eks.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add snyk-charts https://snyk.github.io/kubernetes-monitor --force-update\n```\n\n----------------------------------------\n\nTITLE: Package Format Examples in Rust\nDESCRIPTION: Examples of package format specifications used in Snyk for testing Rust applications and packages.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npkg:cargo\n```\n\n----------------------------------------\n\nTITLE: Updating Organization Member Details (PUT /org/{orgId}/members/update/{userId})\nDESCRIPTION: API endpoint to update specific details of a member in an organization. This endpoint is part of the v1 API and uses the PUT method, requiring both the organization ID and user ID as path parameters.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/organizations-v1.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/org/{orgId}/members/update/{userId}\" method=\"put\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Scanning Specific Configurations in Gradle\nDESCRIPTION: This command allows the user to select specific values of configuration attributes for scanning dependencies in a Gradle project.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/snyk-open-source-specific-ci-cd-strategies.md#2025-04-21_snippet_1\n\nLANGUAGE: Gradle\nCODE:\n```\nsnyk test --configuration-attributes=\n```\n\n----------------------------------------\n\nTITLE: Yarn Project Options Command Line Arguments\nDESCRIPTION: Command line arguments for Yarn projects in Snyk CLI, including options for strict out-of-sync behavior and workspaces support.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/cli-commands-and-options-summary.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n--strict-out-of-sync=true|false\n--yarn-workspaces\n```\n\n----------------------------------------\n\nTITLE: Identifying Disabled Neutralization of CRLF Sequences in HTTP Headers\nDESCRIPTION: This entry highlights vulnerabilities related to the disabled neutralization of CRLF sequences (CWE-113) that can affect Java, Kotlin, and Scala applications, which can lead to HTTP response splitting and header injection attacks.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Comprehensive File Writing Detection Rule in Custom Rules Framework\nDESCRIPTION: This advanced custom rule uses regular expressions to catch various file writing methods and file types, improving coverage for potential CWE-312 vulnerabilities.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/create-query.md#2025-04-21_snippet_12\n\nLANGUAGE: ada\nCODE:\n```\nTaint<\n  \"global::System.Console.ReadLine\",\n  PRED:None,\n  CallExpression<\n    ~\"global::System\\.IO\\.File\\.(Write|Append)All(Text|Lines|Bytes)(Async)?\"\n  >\n    and \n      HasArg1<\"testFile.txt\" or \"testFile.bin\">\n>\n```\n\n----------------------------------------\n\nTITLE: Parsing Terraform Plan JSON Output Files - JSON\nDESCRIPTION: This JSON snippet represents the structure of a Terraform Plan JSON output file, showcasing resources and their configurations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/parsing-an-input-file.md#2025-04-21_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"format_version\": \"0.2\",\n  \"terraform_version\": \"1.0.11\",\n  \"planned_values\": {\n    \"root_module\": {\n      \"resources\": [\n        {\n          \"address\": \"aws_vpc.example\",\n          \"mode\": \"managed\",\n          \"type\": \"aws_vpc\",\n          \"name\": \"example\",\n          \"provider_name\": \"registry.terraform.io/hashicorp/aws\",\n          \"schema_version\": 1,\n          \"values\": {\n            \"assign_generated_ipv6_cidr_block\": false,\n            \"cidr_block\": \"10.0.0.0/16\",\n            \"enable_dns_support\": true,\n            \"instance_tenancy\": \"default\",\n            \"tags\": null\n          },\n          \"sensitive_values\": {\n            \"tags_all\": {}\n          }\n        }\n      ]\n    }\n  },\n  \"resource_changes\": [\n    {\n      \"address\": \"aws_vpc.example\",\n      \"mode\": \"managed\",\n      \"type\": \"aws_vpc\",\n      \"name\": \"example\",\n      \"provider_name\": \"registry.terraform.io/hashicorp/aws\",\n      \"change\": {\n        \"actions\": [\n          \"create\"\n        ],\n        \"before\": null,\n        \"after\": {\n          \"assign_generated_ipv6_cidr_block\": false,\n          \"cidr_block\": \"10.0.0.0/16\",\n          \"enable_dns_support\": true,\n          \"instance_tenancy\": \"default\",\n          \"tags\": null\n        },\n        \"after_unknown\": {\n          \"arn\": true,\n          \"default_network_acl_id\": true,\n          \"default_route_table_id\": true,\n          \"default_security_group_id\": true,\n          \"dhcp_options_id\": true,\n          \"enable_classiclink\": true,\n          \"enable_classiclink_dns_support\": true,\n          \"enable_dns_hostnames\": true,\n          \"id\": true,\n          \"ipv6_association_id\": true,\n          \"ipv6_cidr_block\": true,\n          \"main_route_table_id\": true,\n          \"owner_id\": true,\n          \"tags_all\": true\n        },\n        \"before_sensitive\": false,\n        \"after_sensitive\": {\n          \"tags_all\": {}\n        }\n      }\n    }\n  ],\n  \"configuration\": {\n    \"provider_config\": {\n      \"aws\": {\n        \"name\": \"aws\",\n        \"expressions\": {\n          \"region\": {\n            \"constant_value\": \"us-east-1\"\n          }\n        }\n      }\n    },\n    \"root_module\": {\n      \"resources\": [\n        {\n          \"address\": \"aws_vpc.example\",\n          \"mode\": \"managed\",\n          \"type\": \"aws_vpc\",\n          \"name\": \"example\",\n          \"provider_config_key\": \"aws\",\n          \"expressions\": {\n            \"cidr_block\": {\n              \"constant_value\": \"10.0.0.0/16\"\n            }\n          },\n          \"schema_version\": 1\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Response: Issue Metadata (JSON)\nDESCRIPTION: Example of the JSON response structure for issue metadata, including Snyk issue ID, issue types, and general vulnerability information such as title and timestamps.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/issues-list-issues-for-a-package.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"id\": \"SNYK-PYTHON-DJANGO-7642790\",\n\"type\": \"issue\",\n\"title\": \"Denial of Service (DoS)\",\n\"type\": \"package_vulnerability\",\n\"created_at\": \"2024-08-07T08:13:29.424951Z\",\n\"updated_at\": \"2024-08-08T13:36:35.964359Z\",\n\"description\": ...\n```\n\n----------------------------------------\n\nTITLE: Include Snyk Project Name in PR Description\nDESCRIPTION: This YAML snippet displays how to insert the Snyk project name into the description of a pull request using the `snyk_project_name` variable.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: |\n  Fix applied to project {{ snyk_project_name }}\n```\n\n----------------------------------------\n\nTITLE: API Response: Pagination Links (JSON)\nDESCRIPTION: Example of how pagination links are included in the API response, showing previous, current, and next page links where applicable.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/issues-list-issues-for-a-package.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"links\": {\n    \"prev\": \"/orgs/<org-id>/packages/{purl}/issues?version=<api-version>&limit=1000&offset=0\",\n    \"self\": \"/orgs/<org-id>/packages/{purl}/issues?version=<api-version>&limit=1000&offset=1\"\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring SonarQube SAST Integration with Docker\nDESCRIPTION: This snippet explains how to set up SonarQube SAST integration with Snyk Broker using Docker. Credentials required include `SONARQUBE_HOST_URL` and `SONARQUBE_API_TOKEN`. Ensure Docker is installed and ready for execution.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/snyk-broker-apprisk.md#2025-04-21_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\ndocker run --restart=always \\\n-p 8001:8001 -e PORT=8001 \\\n-e BROKER_CLIENT_URL=http://broker.url.example:8000 \\\n-e BROKER_TOKEN=<YOUR BROKER TOKEN> \\\n-e UNIVERSAL_BROKER_ENABLED=true \\\n-e SONARQUBE_HOST_URL=<YOUR HOST URL> \\\n-e SONARQUBE_API_TOKEN=<YOUR API TOKEN> \\\n-e BROKER_SERVER_URL=https://broker.snyk.io \\\n-v $(pwd)/config.universal.json:/home/node/config.universal.json \\\nsnyk/broker:universal\n```\n\n----------------------------------------\n\nTITLE: Error Message for Invalid Credentials\nDESCRIPTION: Sample error message when invalid credentials are provided for accessing the container registry. This helps diagnose authentication issues when trying to download custom bundles.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/use-iac-custom-rules-with-cli/use-a-remote-iac-custom-rules-bundle.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nThere was an authentication error. Incorrect credentials provided.\n    We were unable to download the custom bundle to the disk.\n    Please ensure access to the remote Registry and validate you have provided all the right parameters.\n```\n\n----------------------------------------\n\nTITLE: Checking Snyk CLI Version\nDESCRIPTION: This command displays the currently installed version of the Snyk CLI.  It allows users to verify the CLI version they are using.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/install-or-update-the-snyk-cli/most-recent-version-of-the-cli-that-supports-node.js-4.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n\"snyk --version\"\n```\n\n----------------------------------------\n\nTITLE: Basic Snyk Node Vulnerability Scanning in GitHub Actions\nDESCRIPTION: Basic workflow configuration to run Snyk security scanning on Node.js projects. Uses the Snyk Node Action to check for vulnerabilities on push events.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-node-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Node using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/node@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ping Identity Name Attribute Expression\nDESCRIPTION: SAML attribute mapping expression used in Ping Identity to combine user's given name and family name for the name attribute.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/single-sign-on-sso-for-authentication-to-snyk/configure-self-serve-single-sign-on-sso/ping-identity-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\nuser.name.given + ' ' + user.name.family\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group Members in Snyk API v1\nDESCRIPTION: Endpoint for fetching members of a specific group using group ID\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/groups-v1.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n/group/{groupId}/members\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Settings (GET /org/{orgId}/settings)\nDESCRIPTION: API endpoint to retrieve the settings of an organization. This endpoint is part of the v1 API and uses the GET method, requiring the organization ID as a path parameter.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/organizations-v1.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/org/{orgId}/settings\" method=\"get\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Security Policy Condition Values\nDESCRIPTION: Code values representing different maturity levels for exploit conditions in Snyk security policies.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/security-policies/security-policies-conditions.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMature\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nProof of Concept\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nNo known exploit\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nNo data available\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for EKS Node Role\nDESCRIPTION: YAML configuration file for setting up volumes, security context, and RBAC with EKS role annotations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/install-the-snyk-controller-on-amazon-elastic-kubernetes-service-amazon-eks.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  projected:\n    serviceAccountToken: true\n    \nsecurityContext:\n  fsGroup: 65534\n\nrbac:\n  serviceAccount:\n    annotations:\n      eks.amazonaws.com/role-arn: <Node IAM Role ARN>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Vulnerability Ignore\nDESCRIPTION: Example of ignoring a vulnerability across all paths using the wildcard selector\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/the-.snyk-file.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nignore:\n  SNYK-JS-BSON-561052:\n    - '*':\n        reason: None Given\n        expires: 2020-04-04T17:33:45.004Z\n```\n\n----------------------------------------\n\nTITLE: Enabling Pod Security Policy\nDESCRIPTION: Enables Pod Security Policy for the Snyk monitor deployment.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/optional-installation-steps-for-snyk-controller-with-helm.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install snyk-monitor snyk-charts/snyk-monitor \\\n             --namespace snyk-monitor \\\n             --set clusterName=\"Production cluster\" \\\n             --set psp.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Migrating Scala GitHub Action\nDESCRIPTION: This snippet shows how to update a GitHub Action workflow to use a new version of Scala/SBT action provided by Snyk, transitioning from a deprecated 'scala' action. Edit the YAML workflow to utilize 'sbt1.10.0-scala3.4.2@master' instead of the deprecated version. The environment requires SNYK_TOKEN to be set as a secret.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-images-guides-to-migration/github-actions-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Scala using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/scala@master // <- Using old scala action\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Scala using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/sbt1.10.0-scala3.4.2@master // <- Using new scala action\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Source Code File for Swift Projects\nDESCRIPTION: The `.swift` file extension represents the source code files in Swift projects. Snyk Code analyzes `.swift` files to identify security vulnerabilities and code quality issues through static analysis.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/swift-and-objective-c/README.md#2025-04-21_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n\".swift\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Members (GET /org/{orgId}/members)\nDESCRIPTION: API endpoint to retrieve the list of members in an organization. This endpoint is part of the v1 API and uses the GET method, requiring the organization ID as a path parameter.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/organizations-v1.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/org/{orgId}/members\" method=\"get\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Filesystem Paths for Snyk Cache and Config\nDESCRIPTION: Specifies the required filesystem paths for Snyk cache and configuration storage across Windows, Linux, and macOS. These paths need read, write, and sometimes execute permissions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/security-concept-of-operations-for-snyk/access-requirements.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* CACHE_PATH (Read,Write,Execute)\n  * Windows: `C:\\Users\\<USERNAME>\\AppData\\Local\\snyk`\n  * Linux/Alpine: `/home/<USERNAME>/.cache/snyk`\n  * macOS: `/Users/<USERNAME>/Library/Caches/snyk`\n* CONFIG_PATH (Read,Write)\n  * Windows: `%USERPROFILE%\\.config\\configstore`\n  * Linux: `$HOME/.config/configstore`\n  * macOs: `$HOME/.config/configstore`\n```\n\n----------------------------------------\n\nTITLE: Creating Value Expression for Roles Array in Okta SAML Configuration\nDESCRIPTION: This expression constructs a value that creates a roles array to be sent to Snyk. It flattens the Snyk organization names stored in the custom attribute 'snyk_orgs'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/single-sign-on-sso-for-authentication-to-snyk/custom-mapping/examples-setting-up-custom-mapping-for-idps/example-setting-up-custom-mapping-for-okta.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\nArrays.flatten(appuser.snyk_orgs)\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Peer Dependencies\nDESCRIPTION: Modifying the package.json file to mark peer dependencies as optional in npm v7+ projects for accurate scanning. It ensures peer dependencies are not scanned unless required.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/javascript/javascript-for-open-source.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"peerDependenciesMeta\": {\n        \"cache-manager\": {\n            \"optional\": true\n        }\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example of an invalid named group with too large index\nDESCRIPTION: Shows an example of a named capture group with an index value exceeding the maximum limit of 100, which causes the 'Operator index is too big' error.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/use-snyk-container/use-custom-base-image-recommendations/custom-versioning-schema-for-custom-base-images.md#2025-04-21_snippet_8\n\nLANGUAGE: regex\nCODE:\n```\n(?<C101>.*)\n```\n\n----------------------------------------\n\nTITLE: File Path Example in JavaScript\nDESCRIPTION: Example demonstrating how file paths are referenced in Snyk Code's vulnerability tracking system. Shows a scenario where code is moved between files while maintaining vulnerability detection.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/manage-code-vulnerabilities/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nutils/auth_utils.js\n```\n\nLANGUAGE: javascript\nCODE:\n```\nutils/auth_helpers.js\n```\n\n----------------------------------------\n\nTITLE: Required Properties for Access Token Request - Snyk API - Markdown\nDESCRIPTION: This snippet specifies the required properties for the request body when exchanging the authorization code for an access token. Each parameter's purpose is outlined and includes client authentication requirements.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/set-up-a-snyk-app-using-the-oauth2-api/set-up-the-authorization-code-exchange.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngrant_type=authorization_code\n&code=(code from the previous step)\n&redirect_uri=(redirect URI from the previous step)\n&client_id=(clientId from the app creation),\n&client_secret=(clientSecret from the app creation)\n&code_verifier=(code verifier generated in the previous step)\n```\n\n----------------------------------------\n\nTITLE: Output for Upgrade PR Description Using JSON\nDESCRIPTION: A JSON output snippet shows the result of using 'is_upgrade_pr' in a pull request template, defining how upgrade-based details are presented in the PR description.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_25\n\nLANGUAGE: json\nCODE:\n```\nThis PR has been opened to make sure our repositories are kept up-to-date. It updates package-x from version 1.0.0 to version 2.0.0. Review relevant docs for possible breaking changes.\n```\n\n----------------------------------------\n\nTITLE: Creating Universal Broker Connections\nDESCRIPTION: Command to initiate the connection creation workflow for Universal Broker. This command launches an interactive process to set up new connections.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/setting-up-and-integrating-your-universal-broker-connections.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-broker-config workflows connections create\n```\n\n----------------------------------------\n\nTITLE: Docker Run Configuration for Nexus 2 Broker Client\nDESCRIPTION: Docker command to configure and run the Broker Client for Nexus 2 integration. Specifies environment variables for broker token, server URL, base Nexus URL, and resource body URL substitution.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/nexus-repository-prerequisites-and-steps-to-install-and-configure-broker/set-up-snyk-broker-with-nexus-repository-manager.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker run --restart=always \\\n  -p 7341:7341 \\\n  -e BROKER_TOKEN=<secret-broker-token> \\\n  -e BROKER_SERVER_URL=<broker-region-url> \\\n  -e BASE_NEXUS_URL=https://[username:password]@acme.com \\\n  -e RES_BODY_URL_SUB=https://acme.com/nexus/content/(groups|repositories) \\\n  snyk/broker:nexus2\n```\n\n----------------------------------------\n\nTITLE: Disabling Custom Rules with Snyk API\nDESCRIPTION: JSON payload for disabling custom rules by setting the is_enabled flag to false. This turns off custom rule scanning while preserving the configuration for future use.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/use-iac-custom-rules-with-cli/use-a-remote-iac-custom-rules-bundle.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"data\": {\n         \"type\": \"iac_settings\",\n         \"attributes\": {\n           \"custom_rules\": {\n             \"is_enabled\": false\n           }\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Python GitHub Action\nDESCRIPTION: This snippet demonstrates how to update a GitHub Action workflow to use a newer Python version (3.10) supported by Snyk, replacing the deprecated Python 3.6. It requires modifying the YAML workflow file by replacing the old action version with the newer one available in the Snyk build tool chain. The environment requires SNYK_TOKEN to be set as a secret.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-images-guides-to-migration/github-actions-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Python-3.6 using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/python-3.6@master // <- Using python 3.6\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Python using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/python-3.10@master // <- Using python 3.10\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Auto-Detecting Maven, JAR, WAR, and AAR Files with Snyk CLI\nDESCRIPTION: This snippet shows how to use the `--scan-all-unmanaged` option with the Snyk CLI to automatically detect Maven, JAR, WAR, and AAR files recursively from the current folder. This provides a convenient way to scan all unmanaged files in a project directory.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/test.md#2025-04-21_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n\"--scan-all-unmanaged\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Organization in Snyk CLI\nDESCRIPTION: Configure the default organization for Snyk CLI operations using config set command. Allows setting a global organization for project scanning and monitoring.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-admin/groups-and-organizations/switch-between-groups-and-organizations.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk config set org=ORG_ID\n```\n\n----------------------------------------\n\nTITLE: Listing API Endpoint Additions for Snyk\nDESCRIPTION: This snippet outlines various API endpoints added to the Snyk API, including their HTTP methods, paths, and brief descriptions of their functionality. It covers a range of features from user invitations to app management and Infrastructure as Code settings.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/rest-api/changelog.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nDELETE - `/orgs/{org_id}/slack_app/{bot_id}/projects/{project_id}` - Added\n* Remove Slack settings override for a project.\n\nGET - `/orgs/{org_id}/invites` - Added\n* List pending user invitations to an organization.\n\nDELETE - `/orgs/{org_id}/invites/{invite_id}` - Added\n* Cancel a pending user invitations to an organization.\n\nGET - `/orgs/{org_id}/slack_app/{tenant_id}/channels` - Added\n* Requires the Snyk Slack App to be set up for this org, will retrieve a list of channels the Snyk Slack App can access.\n\nGET - `/orgs/{org_id}/slack_app/{tenant_id}/channels/{channel_id}` - Added\n* Requires the Snyk Slack App to be set up for this org. It will return the Slack channel name for the provided Slack channel ID.\n\nGET - `/orgs/{org_id}/packages/{purl}/issues` - Added\n* Query issues for a specific package version identified by Package URL (purl).\n\nPOST - `/orgs/{org_id}/invites` - Added\n* Invite a user to an organization with a role.\n\nGET - `/self/apps` - Added\n* Get a list of apps that can act on your behalf.\n\nDELETE - `/self/apps/{app_id}` - Added\n* Revoke access for an app by app id\n\nPOST - `/orgs/{org_id}/apps` - Added\n* Create a new app for an organization. Deprecated, use /orgs/{org_id}/apps/creations instead.\n\nGET - `/orgs/{org_id}/apps` - Added\n* Get a list of apps created by an organization. Deprecated, use /orgs/{org_id}/apps/creations instead.\n\nPATCH - `/orgs/{org_id}/apps/{client_id}` - Added\n* Update app attributes. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.\n\nGET - `/orgs/{org_id}/apps/{client_id}` - Added\n* Get an App by client id. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.\n\nDELETE - `/orgs/{org_id}/apps/{client_id}` - Added\n* Delete an app by app id. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.\n\nPOST - `/orgs/{org_id}/apps/{client_id}/secrets` - Added\n* Manage client secrets for an app. Deprecated, use /orgs/{org_id}/apps/creations/{app_id}/secrets instead.\n\nGET - `/orgs/{org_id}/app_bots` - Added\n* Get a list of app bots authorized to an organization. Deprecated, use /orgs/{org_id}/apps/installs instead.\n\nDELETE - `/orgs/{org_id}/app_bots/{bot_id}` - Added\n* Revoke app bot authorization. Deprecated, use /orgs/{org_id}/apps/installs/{install_id} instead.\n\nPATCH - `/orgs/{org_id}/settings/iac` - Added\n* Update the Infrastructure as Code Settings for an org.\n\nGET - `/orgs/{org_id}/settings/iac` - Added\n* Get the Infrastructure as Code Settings for an org.\n\nPATCH - `/groups/{group_id}/settings/iac` - Added\n* Update the Infrastructure as Code Settings for a group.\n\nGET - `/groups/{group_id}/settings/iac` - Added\n* Get the Infrastructure as Code Settings for a group.\n```\n\n----------------------------------------\n\nTITLE: Configuring Nexus 2 Broker Docker Image\nDESCRIPTION: Dockerfile configuration for Nexus 2 Broker integration with environment variables for authentication and server URLs.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/derived-docker-images-for-broker-client-integrations-and-container-registry-agent.md#2025-04-21_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM snyk/broker:nexus2\n\nENV BROKER_TOKEN                     secret-broker-token\nENV BASE_NEXUS_URL                   https://[<user>:<pass>@]<your.nexus.hostname>\nENV BROKER_CLIENT_VALIDATION_URL     https://<your.nexus.hostname>:<port>/systemcheck \nENV RES_BODY_URL_SUB                 https://<your.nexus.hostname>/nexus/content/(groups|repositories)\n```\n\n----------------------------------------\n\nTITLE: Performing Data Flow Analysis in JavaScript\nDESCRIPTION: This JavaScript snippet describes a server setup using Express that handles signup requests by inserting form data into a database and logging submissions to a file. It illustrates the use of body-parser for handling JSON input, and how client queries in Snyk Code can analyze data flows to identify potential SQL injection and XSS vulnerabilities. Dependencies include express, body-parser, pg, and fs.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/create-query.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst { Client } = require('pg');\nconst fs = require('fs');\n\nconst app = express();\napp.use(bodyParser.json());\n\nconst client = new Client({\n   host: 'localhost',\n   user: 'youruser',\n   password: 'yourpassword',\n   database: 'yourdbname'\n});\n\nasync function connectDb(client) {\n   await client.connect();\n}\n\nasync function insertSubmission(client, email, name) {\n   await client.query(`INSERT INTO submissions(email, name) VALUES(${email}, ${name})`);\n}\n\nfunction logSubmission(email, name) {\n   const logMessage = `New submission: Email=${email}, Name=${name}\\n`;\n   fs.appendFileSync('myapp.log', logMessage);\n}\n\napp.post('/signup', async (req, res) => {\n   try {\n       const { email, name } = req.body;\n       await insertSubmission(client, email, name);\n       logSubmission(email, name);\n       res.send({ message: 'Signup successful!' });\n   } catch (err) {\n       console.error(err);\n       res.status(500).send({ message: 'An error occurred.' });\n   }\n});\n\nconnectDb(client).then(() => {\n   app.listen(3000, () => console.log('Server is running on port 3000'));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring User Profile Roles in Google Workspace\nDESCRIPTION: Example payload for updating a user's profile with custom role assignments using the Google Workspace Users API. Demonstrates how to attach multiple Snyk organization roles to a user.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/single-sign-on-sso-for-authentication-to-snyk/custom-mapping/examples-setting-up-custom-mapping-for-idps/example-setting-up-custom-mapping-for-google-workspace.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"customSchemas\": {\n   \"Snyk-SSO\": {\n     \"roles\": [\n       {\n         \"value\": \"snyk:org:org1:org_admin\"\n       },\n       {\n         \"value\": \"snyk:org:org2:org_admin\"\n       }\n     ]\n   }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting User Notification Settings for a Project - Snyk API v1 - YAML\nDESCRIPTION: This snippet outlines the API endpoint for retrieving notification settings for a specific project within an organization for the current user. It helps users to check their notification preferences for individual projects.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/users-v1.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/user/me/notification-settings/org/{orgId}/project/{projectId}\" method=\"get\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Path Vulnerability Ignores\nDESCRIPTION: Example of ignoring a specific vulnerability for multiple dependency paths\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/the-.snyk-file.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nignore:\n  SNYK-JS-DOTPROP-543489:\n    - configstore > dot-prop:\n        reason: None given\n        expires: '2020-06-19T20:36:54.553Z'\n    - snyk > configstore > dot-prop:\n        reason: None given\n        expires: '2020-06-19T20:36:54.553Z'\n```\n\n----------------------------------------\n\nTITLE: Filtering Snyk Test Results with Custom Criteria\nDESCRIPTION: This command runs a Snyk test and pipes the JSON output to snyk-filter, which applies custom filtering criteria defined in a YAML file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/failing-of-builds-in-snyk-cli.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --json | snyk-filter -f /path/to/example-cvss-9-or-above.yml\n```\n\n----------------------------------------\n\nTITLE: Example CloudFormation API Response\nDESCRIPTION: Sample JSON response from the API when requesting a CloudFormation template format.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/aws-integration/aws-integration-api/step-1-download-iam-role-iac-template-api.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonapi\": {\n    \"version\": \"1.0\"\n  },\n  \"data\": {\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\n    \"type\": \"permissions\",\n    \"attributes\": {\n      \"data\": \"AWSTemplateFormatVersion:<...>\",\n      \"type\": \"cf\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unsupported SSH-based Gem Declaration in Ruby Gemfile\nDESCRIPTION: An example of an unsupported private gem declaration using SSH URL format in a Gemfile. Snyk does not support SSH URLs for private gem sources, only HTTPS URLs are supported.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-open-source/package-repository-integrations/private-gem-sources-for-ruby-configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"privvy\", git: \"git@github.com:testexample/ruby-gem-for-private-source\"\n```\n\n----------------------------------------\n\nTITLE: Configuring dockercfg.json for EKS using ECR with Specific Registry\nDESCRIPTION: This JSON structure shows how to configure dockercfg.json for Amazon EKS using ECR with a specific registry URI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/authenticate-to-private-container-registries.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credHelpers\": {\n    \"public.ecr.aws\": \"ecr-login\",\n    \"<aws_account_id>.dkr.ecr.<region>.amazonaws.com\": \"ecr-login\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Universal Broker Connection\nDESCRIPTION: Command to create a new connection in the Universal Broker system. Used to initiate the connection creation workflow.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/add-a-new-connection-to-your-universal-broker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-broker-config workflows connections create\n```\n\n----------------------------------------\n\nTITLE: Go Project Options Command Line Arguments\nDESCRIPTION: Unsupported command line argument for Go projects in Snyk CLI, specifically the fail-on option.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/cli-commands-and-options-summary.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n--fail-on=<all|upgradable|patchable>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Notification Settings (GET /org/{orgId}/notification-settings)\nDESCRIPTION: API endpoint to retrieve the notification settings of an organization. This endpoint is part of the v1 API and uses the GET method, requiring the organization ID as a path parameter.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/organizations-v1.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/org/{orgId}/notification-settings\" method=\"get\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Error Response in Snyk API\nDESCRIPTION: This JSON snippet shows the specific error response from the Snyk API when an import request exceeds the organization's project limit. It contains details such as error code, message, and reference ID.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-admin/snyk-projects/maximum-number-of-projects-in-an-organization.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n        \\\"code\\\":400,\\n        \\\"message\\\":\\\"This organization has 25000 of the maximum 25000 projects.\\n        You will not be able to import more projects: https://docs.snyk.io/getting-started/introduction-to-snyk-projects/maximum-number-of-projects-in-an-organsation\\\",\\n        \\\"errorRef\\\":\\\"5bc3fb50-cbcd-4c15-81f6-b183fc95d10f\\\"\\n    }\n```\n\n----------------------------------------\n\nTITLE: Constructing Complex Value Expression for Roles Array in Okta SAML Configuration\nDESCRIPTION: This expression creates a roles array by concatenating two custom attributes: 'user_role' and 'snyk_orgs'. It handles the special case of 'groupadmin' role and formats the roles for other cases.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/single-sign-on-sso-for-authentication-to-snyk/custom-mapping/examples-setting-up-custom-mapping-for-idps/example-setting-up-custom-mapping-for-okta.md#2025-04-21_snippet_1\n\nLANGUAGE: expression\nCODE:\n```\nappuser.user_role == \"groupadmin\" ? \"snyk-groupadmin\" : Arrays.flatten(String.replace(String.replace(String.append(\"snyk-\",String.append(Arrays.toCsvString(appuser.snyk_orgs),\"-\"+appuser.user_role)),\",\",\",snyk-\"),\",\",\"-\"+appuser.user_role+\",\"))\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Issue Paths API\nDESCRIPTION: This JSON snippet illustrates the structure of the response returned by the Snyk API's `paths` endpoint, detailing issue paths in projects or snapshots. It provides information such as the snapshot ID, total number of paths, navigation links for pagination, and the array of dependency paths, each containing package descriptors.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/api-endpoints-index-and-tips/project-issue-paths-api-endpoints.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"snapshotId\": \"6d5813be-7e6d-4ab8-80c2-1e3e2a454553\",\n    \"paths\": [...],\n    \"total\": 193,\n    \"links\": {\n        \"prev\": \"<https://snyk.io/>...\",\n        \"next\": \"<https://snyk.io/>...\",\n        \"last\": \"<https://snyk.io/>...\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Risk Score Table - Scope Impact\nDESCRIPTION: Markdown table showing how different scope values affect the risk score calculation\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/risk-score.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Possible input value | Score impact                      |\n| -------------------- | --------------------------------- |\n| `Unchanged`          | Impact subscore is not affected.  |\n| `Changed`            | Impact subscore is affected.      |\n```\n\n----------------------------------------\n\nTITLE: Git Support Limitations for Scanning Projects\nDESCRIPTION: This snippet summarizes the limitations surrounding the ability to scan Swift Package Manager projects using Git import, contrasting it with CocoaPods capability to analyze specific files.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/swift-and-objective-c/swift-and-objective-c-for-open-source.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Swift Package Manager and Git                                               | CocoaPods and Git                                                            |\n| --------------------------------------------------------------------------- | ---------------------------------------------------------------------------- |\n| It is not possible to scan Swift Package Manager Projects using Git import. | To test your Projects, Snyk analyzes the `Podfile` and `Podfile.lock` files. |\n```\n\n----------------------------------------\n\nTITLE: Updating App Initialization with New Controllers in TypeScript\nDESCRIPTION: This snippet shows how to update the main index.ts file to include the newly created AuthController and CallbackController in the App initialization.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/index.ts\n\nimport IndexController from \"./routes/index/indexController\";\nimport AuthController from \"./routes/auth/authController\";\nimport CallbackController from \"./routes/callback/callbackController\";\nimport App from \"./app\";\n\nnew App([\n   new IndexController(),\n   new AuthController(),\n   new CallbackController()],\n  3000\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Required Node.js Packages for Express Application Setup\nDESCRIPTION: This snippet shows how to install essential packages for the Express application such as 'express', 'express-rate-limit', and 'express-session', along with TypeScript type definitions as development dependencies. These packages are crucial for setting up middleware and managing sessions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/configuring-express.js.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save \\\n  express \\\n  express-rate-limit \\\n  express-session \\\n  http\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev \\\n  @types/express \\\n  @types/express-rate-limit \\\n  @types/express-session \\\n  @types/node\n```\n\n----------------------------------------\n\nTITLE: CLI Organization Selection Option\nDESCRIPTION: Command-line flag to specify a different Organization for scanning, overriding the default Preferred Organization\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-admin/groups-and-organizations/organizations/set-your-preferred-organization.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--org=<ORG_ID>\n```\n\n----------------------------------------\n\nTITLE: Running Helm Dry Run Installation Command\nDESCRIPTION: Command to perform a dry run installation of Snyk Broker Helm chart to obtain required secrets list\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/kubernetes-secrets-and-helm-chart-installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install snyk-broker-chart \\\n  snyk-broker/snyk-broker \\\n  --set externalSecrets=true \\\n  --set scmType=<your-scm-type> \\\n  --dry-run=client\n```\n\n----------------------------------------\n\nTITLE: Fetching Organizations List (GET /orgs)\nDESCRIPTION: API endpoint to retrieve a list of organizations. This endpoint is part of the v1 API and uses the GET method.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/organizations-v1.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/orgs\" method=\"get\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Provision Status (GET /org/{orgId}/provision)\nDESCRIPTION: API endpoint to retrieve the provision status of an organization. This endpoint is part of the v1 API and uses the GET method, requiring the organization ID as a path parameter.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/organizations-v1.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/org/{orgId}/provision\" method=\"get\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific IAM Policy Attachment using ARN\nDESCRIPTION: This YAML snippet shows how to ignore an IAM Policy Attachment using an ARN (Amazon Resource Name) format, specifically for 'AWSServiceRoleForRDS'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/ignore-resources-for-drift.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.22.1\nexclude:\n  iac-drift:\n    - aws_iam_policy_attachment.AWSServiceRoleForRDS-arn:aws:iam::aws:policy/aws-service-role/AmazonRDSServiceRolePolicy\n```\n\n----------------------------------------\n\nTITLE: Example of Terraform Resource with Missing Configuration\nDESCRIPTION: Example Terraform configuration that would trigger a security issue in Snyk IaC scanning due to missing access_log_settings. This demonstrates what non-compliant code looks like.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/understand-the-iac-cli-test-results/snyk-iac-cli-test-results-v.-1.938.0-and-earlier.md#2025-04-21_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_api_gateway_stage\" \"denied\" {\n  xray_tracing_enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching All Organizations in GitHub Enterprise\nDESCRIPTION: Command to retrieve contributor counts from all organizations in GitHub Enterprise, including those where the user doesn't have operate rights. Uses the fetchAllOrgs flag with token and host URL.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/github-enterprise/github-enterprise-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count github-enterprise --token TOKEN --url HOST_URL --fetchAllOrgs\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Role ARN Format\nDESCRIPTION: Shows the expected format for an AWS IAM role ARN used in Snyk cloud scanning.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/aws-integration/aws-integration-web-ui/step-3-create-and-scan-a-cloud-environment-web-ui.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\narn:aws:iam::YOUR-ACCOUNT-ID:role/snyk-cloud-role\n```\n\n----------------------------------------\n\nTITLE: Create Organization Service Account - POST Request\nDESCRIPTION: API endpoint to create a new service account in a Snyk Organization with specified role permissions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/service-accounts/manage-service-accounts-using-the-snyk-api.md#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.snyk.io/rest/orgs/{orgId}/service_accounts\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Lifecycle Policy for Vulnerability Source Data\nDESCRIPTION: This snippet describes the cache retention period for vulnerability source data within Amazon Web Services (AWS) S3. For EU/AU/Private Tenant, the data is cached for 24 to 48 hours according to the S3 policy.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/working-with-snyk/how-snyk-handles-your-data.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n\"<a href=\\\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html\\\"> S3 policy</a>\"\n```\n\n----------------------------------------\n\nTITLE: Create Organization Integration v1 API\nDESCRIPTION: Endpoint for creating a new integration within a Snyk organization using the v1 API\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/integrations-v1.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npath: \"/org/{orgId}/integrations\"\nmethod: \"post\"\n```\n\n----------------------------------------\n\nTITLE: Npm Save-Prefix Format Example\nDESCRIPTION: Example of npm dependency version range format using caret notation, which is the default save-prefix used by Snyk when creating fixes for npm v7+ projects.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/javascript/git-repositories-and-javascript.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n^\"\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Container CLI Monitor with Partial Image Name\nDESCRIPTION: This command demonstrates using the Snyk Container CLI to monitor a Docker image using a partial name, omitting the container registry.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/assets-and-risk-factors-for-snyk-apprisk/risk-factor-deployed.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk container monitor my-app:latest\n```\n\n----------------------------------------\n\nTITLE: Error Message for Invalid Registry URL\nDESCRIPTION: Sample error message when an invalid container registry URL is provided. This helps users identify misconfigured registry URLs that prevent downloading the custom bundle.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/use-iac-custom-rules-with-cli/use-a-remote-iac-custom-rules-bundle.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nWe were unable to download the custom bundle to the disk. \nPlease ensure access to the remote Registry and validate you have provided all the right parameters.\n```\n\n----------------------------------------\n\nTITLE: Snyk Code ignore management table structure\nDESCRIPTION: HTML table structure defining ignore management permissions and their descriptions\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/ignore-issues/consistent-ignores-for-snyk-code-early-access/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table><thead><tr><th width=\"203\">Ignore management </th><th>Description</th></tr></thead><tbody><tr><td>View Ignores</td><td>View Ignore information.</td></tr><tr><td>Create Ignores</td><td>Create new Ignores.</td></tr><tr><td>Edit Ignores</td><td>Configure Ignores.</td></tr><tr><td>Remove Ignores</td><td>Permanently remove Ignores.</td></tr></tbody></table>\n```\n\n----------------------------------------\n\nTITLE: Listing Supported GitHub Resources for Drift Scanning\nDESCRIPTION: A table of GitHub resources compatible with Snyk IaC drift scanning, including repository, team, membership, and branch protection configurations\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/supported-resources/github-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Resource**               |\n| -------------------------- |\n| github\\_repository         |\n| github\\_team               |\n| github\\_membership         |\n| github\\_team\\_membership   |\n| github\\_branch\\_protection |\n```\n\n----------------------------------------\n\nTITLE: Supported Container Registry Types\nDESCRIPTION: List of supported container registry types that can be used with the crType parameter in the Helm installation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/snyk-broker-container-registry-agent/install-broker-for-container-registry-agent-using-helm.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nacr\nartifactory-cr\ndigitalocean-cr\ndocker-hub\necr\ngcr\ngoogle-artifact-cr\ngithub-cr\ngitlab-cr\nharbor-cr\nquay-cr\nnexus-cr\n```\n\n----------------------------------------\n\nTITLE: Ignoring a Specific Vulnerability Instance with .snyk Policy\nDESCRIPTION: A .snyk policy file example that ignores a specific instance of a vulnerability (SNYK-CC-K8S-1) by specifying the exact resource path within a specific file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/iac-ignores-using-the-.snyk-policy-file.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v1.19.0\nignore:\n  SNYK-CC-K8S-1:\n    - 'production/deployment.yaml > [DocId:1] > spec > template > spec > containers[web] > securityContext > privileged':\n        reason: None Given\n        expires: 2021-08-26T08:40:35.249Z\n        created: 2021-07-27T08:40:35.251Z\n```\n\n----------------------------------------\n\nTITLE: Testing Maven Aggregate Projects with Snyk CLI\nDESCRIPTION: Command to scan Maven aggregate projects that use modules and inheritance. This performs a compile to ensure all modules are fixable by the Maven reactor.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsnyk test --maven-aggregate-project\n```\n\n----------------------------------------\n\nTITLE: Creating an App Class with Express Initialization\nDESCRIPTION: This TypeScript snippet creates an 'App' class that initializes an Express application. Upon instantiation, it sets the server to listen on port 3000. The private 'listen()' method manages the server startup process.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/configuring-express.js.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\nimport type { Application } from 'express';\nimport type { Server } from 'http';\n\nclass App {\n  public app: Application;\n  private server: Server;\n\n  constructor() {\n    this.app = express();\n    this.server = this.listen(3000);\n  }\n\n  private listen(port: number) {\n    this.server = this.app.listen(port, () => {\n      console.log(`App listening on port: ${port}`);\n    });\n\n    return this.server;\n  }\n\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Generating SARIF Output from Snyk Code Tests\nDESCRIPTION: Command to output Snyk Code test results in SARIF format, which includes ignore metadata for integration with other security tools.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/ignore-issues/consistent-ignores-for-snyk-code-early-access/snyk-cli.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk code test --sarif\n```\n\n----------------------------------------\n\nTITLE: Filtering Snyk Payload in AWS Lambda\nDESCRIPTION: This code snippet filters the Snyk payload received by an AWS Lambda function. It checks for the presence of 'project' and 'newIssues', iterates through the issues, and filters based on severity (high or critical). It extracts relevant information such as project name, URL, issue URL, ID, package name, and priority, and then calls the `messageSlack` function to send the notification.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/how-to-use-snyk-webhooks-to-connect-snyk-to-slack-with-aws-lambda/configure-the-aws-lambda-script.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif(snykbody.indexOf(\"project\") !== -1 && snykbody.indexOf(\"newIssues\") !== -1){\n    // Iterate through new issues\n    var len = event.body['newIssues'].length;\n    \n    for(let x=0;x<len;x++){    \n        // Get Severity\n        let severity = JSON.stringify(event.body['newIssues'][x]['issueData']['severity']);\n        // Filter\n        if(severity.includes(\"high\") || severity.includes(\"critical\")){\n            \n            let snykProjectName = JSON.stringify(event.body['project'].name);\n            let snykProjectUrl = JSON.stringify(event.body['project'].browseUrl);\n            let snykIssueUrl = JSON.stringify(event.body['newIssues'][x]['issueData'].url);\n            let snykIssueId = JSON.stringify(event.body['newIssues'][x].id);\n            let snykIssuePackage = JSON.stringify(event.body['newIssues'][x].pkgName);\n            let snykIssuePriority = JSON.stringify(event.body['newIssues'][x]['priority'].score);\n            let message = \"New Snyk Vulnerability\";\n            \n            // Send the result to Slack\n            const result = await messageSlack(\n                message,snykProjectUrl,snykProjectName,snykIssuePackage,snykIssueUrl,snykIssueId,severity,snykIssuePriority\n            );\n        } \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Snyk Broker with Existing Service Account - Helm CLI\nDESCRIPTION: Helm command to deploy a Snyk Broker instance using an existing service account in the namespace. Requires broker token, SCM token, and broker client URL configuration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/deploying-multiple-brokers-in-the-same-namespace.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install <ENTER_UNIQUE_CHART_NAME> snyk-broker/snyk-broker \\\n             --set scmType=github-com \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set scmToken=<ENTER_REPO_TOKEN> \\\n             --set brokerClientUrl=<ENTER_BROKER_CLIENT_URL>:<ENTER_BROKER_CLIENT_PORT> \\\n             --set serviceAccount.create=false \\\n             --set serviceAccount.name=<EXISTING_SERVICE_ACCOUNT> \\\n             -n <EXISTING_NAMESPACE>\n```\n\n----------------------------------------\n\nTITLE: List Organization Integrations v1 API\nDESCRIPTION: Endpoint for retrieving all integrations within a Snyk organization using the v1 API\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/integrations-v1.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npath: \"/org/{orgId}/integrations\"\nmethod: \"get\"\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Least Privilege Policy for Snyk IaC Describe Command\nDESCRIPTION: This JSON policy document defines the minimal set of AWS permissions required for Snyk's 'iac describe' command to function properly. It includes read-only permissions for various AWS services like EC2, IAM, S3, Lambda, RDS, and more to allow the command to discover and analyze cloud resources.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/configure-cloud-providers/configure-aws-provider.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Resource\": \"*\",\n            \"Action\": [\n                \"apigateway:GET\",\n                \"cloudformation:DescribeStacks\",\n                \"cloudformation:GetTemplate\",\n                \"cloudfront:GetDistribution\",\n                \"cloudfront:ListDistributions\",\n                \"cloudfront:ListTagsForResource\",\n                \"ec2:DescribeAddresses\",\n                \"ec2:DescribeImages\",\n                \"ec2:DescribeInstanceAttribute\",\n                \"ec2:DescribeInstances\",\n                \"ec2:DescribeInstanceCreditSpecifications\",\n                \"ec2:DescribeInternetGateways\",\n                \"ec2:DescribeKeyPairs\",\n                \"ec2:DescribeNetworkAcls\",\n                \"ec2:DescribeRouteTables\",\n                \"ec2:DescribeSecurityGroups\",\n                \"ec2:DescribeSnapshots\",\n                \"ec2:DescribeTags\",\n                \"ec2:DescribeVolumes\",\n                \"ec2:DescribeVpcs\",\n                \"ec2:DescribeVpcAttribute\",\n                \"ec2:DescribeVpcClassicLink\",\n                \"ec2:DescribeVpcClassicLinkDnsSupport\",\n                \"ec2:DescribeSubnets\",\n                \"ec2:DescribeNatGateways\",\n                \"ec2:DescribeLaunchTemplates\",\n                \"ecr:DescribeRepositories\",\n                \"ecr:ListTagsForResource\",\n                \"iam:GetPolicy\",\n                \"iam:GetPolicyVersion\",\n                \"iam:GetRole\",\n                \"iam:GetRolePolicy\",\n                \"iam:GetUser\",\n                \"iam:GetUserPolicy\",\n                \"iam:ListAccessKeys\",\n                \"iam:ListAttachedRolePolicies\",\n                \"iam:ListAttachedUserPolicies\",\n                \"iam:ListPolicies\",\n                \"iam:ListRolePolicies\",\n                \"iam:ListRoles\",\n                \"iam:ListUserPolicies\",\n                \"iam:ListUsers\",\n                \"kms:DescribeKey\",\n                \"kms:GetKeyPolicy\",\n                \"kms:GetKeyRotationStatus\",\n                \"kms:ListAliases\",\n                \"kms:ListKeys\",\n                \"kms:ListResourceTags\",\n                \"lambda:GetEventSourceMapping\",\n                \"lambda:GetFunction\",\n                \"lambda:GetFunctionCodeSigningConfig\",\n                \"lambda:ListEventSourceMappings\",\n                \"lambda:ListFunctions\",\n                \"lambda:ListVersionsByFunction\",\n                \"rds:DescribeDBInstances\",\n                \"rds:DescribeDBSubnetGroups\",\n                \"rds:ListTagsForResource\",\n                \"route53:GetHostedZone\",\n                \"route53:ListHostedZones\",\n                \"route53:ListResourceRecordSets\",\n                \"route53:ListTagsForResource\",\n                \"route53:ListHealthChecks\",\n                \"route53:GetHealthCheck\",\n                \"s3:GetAccelerateConfiguration\",\n                \"s3:GetAnalyticsConfiguration\",\n                \"s3:GetBucketAcl\",\n                \"s3:GetBucketCORS\",\n                \"s3:GetBucketLocation\",\n                \"s3:GetBucketLogging\",\n                \"s3:GetBucketNotification\",\n                \"s3:GetBucketObjectLockConfiguration\",\n                \"s3:GetBucketPolicy\",\n                \"s3:GetBucketRequestPayment\",\n                \"s3:GetBucketTagging\",\n                \"s3:GetBucketVersioning\",\n                \"s3:GetBucketWebsite\",\n                \"s3:GetEncryptionConfiguration\",\n                \"s3:GetInventoryConfiguration\",\n                \"s3:GetLifecycleConfiguration\",\n                \"s3:GetMetricsConfiguration\",\n                \"s3:GetReplicationConfiguration\",\n                \"s3:ListAllMyBuckets\",\n                \"s3:ListBucket\",\n                \"sqs:GetQueueAttributes\",\n                \"sqs:ListQueueTags\",\n                \"sqs:ListQueues\",\n                \"sns:ListTopics\",\n                \"sns:GetTopicAttributes\",\n                \"sns:ListTagsForResource\",\n                \"sns:ListSubscriptions\",\n                \"sns:ListSubscriptionsByTopic\",\n                \"sns:GetSubscriptionAttributes\",\n                \"dynamodb:ListTables\",\n                \"dynamodb:DescribeTable\",\n                \"dynamodb:DescribeGlobalTable\",\n                \"dynamodb:ListTagsOfResource\",\n                \"dynamodb:DescribeTimeToLive\",\n                \"dynamodb:DescribeTableReplicaAutoScaling\",\n                \"dynamodb:DescribeContinuousBackups\",\n                \"rds:DescribeDBClusters\",\n                \"rds:DescribeGlobalClusters\",\n                \"application-autoscaling:DescribeScalableTargets\",\n                \"application-autoscaling:DescribeScalingPolicies\",\n                \"application-autoscaling:DescribeScheduledActions\",\n                \"autoscaling:DescribeLaunchConfigurations\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Snyk CLI with Custom Filter File\nDESCRIPTION: This example shows how to specify a custom YAML filter file location when using snyk-filter. The output from snyk test in JSON format is piped into snyk-filter along with a custom filter file path.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-filter.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsnyk test --json | snyk-filter -f /path/to/example-cvss-9-or-above.yml\n```\n\n----------------------------------------\n\nTITLE: Specifying Snyk Organization Configuration\nDESCRIPTION: Allows associating the repository scan with a specific Snyk organization account. If not specified, uses the default organization configured in the Snyk account.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/bitbucket-pipelines-integration-using-a-snyk-pipe/snyk-pipe-parameters-and-values-bitbucket-cloud.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nORGANIZATION: none\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Details in Markdown\nDESCRIPTION: This snippet provides a detailed breakdown of contributors, including their email, contributions count, and repositories they have contributed to, formatted as a JSON-like structure.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/output.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\n## Contributors details\n[\n    [\n        \"someUser\",\n        {\n            \"email\": \"someUser@company.io\",\n            \"contributionsCount\": 15,\n            \"reposContributedTo\": [\n                \"someOrganization/someRepository(Private)\"\n                \"anotherOrganization/anotherRepository(Public)\"\n            ]\n        }\n    ],\n    [\n        \"anotheruser\",\n        {\n            \"email\": \"anotherUser@company.io\",\n            \"contributionsCount\": 11,\n            \"reposContributedTo\": [\n                \"someOrganization/someRepository(Private)\"\n            ]\n        }\n    ],\n    [\n        \"anotheruser(duplicate)\",\n        {\n            \"email\": \"anotherUser@otherCompany.com\",\n            \"contributionsCount\": 11,\n            \"reposContributedTo\": [\n                \"someOrganization/someRepository(Private)\"\n            ]\n        }\n    ]\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Deleting Snyk Monitor Secret\nDESCRIPTION: Command to delete existing Snyk Monitor secret during update process.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/install-the-snyk-controller-with-helm-azure-and-google-cloud-platform.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete secret snyk-monitor -n snyk-monitor\n```\n\n----------------------------------------\n\nTITLE: Adding Category Context in Configuration\nDESCRIPTION: YAML configuration example showing how to add additional context or notes to specific API categories. This example adds a note about a one-hour delay in reflecting changes for the licenses-v1 category.\nSOURCE: https://github.com/snyk/user-docs/blob/main/tools/api-docs-generator/README.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncategoryContext:\n    - name: licenses-v1\n      hint: |\n        **Note:** When you import or update Projects, changes will be reflected in the endpoint results after a one-hour delay.\n```\n\n----------------------------------------\n\nTITLE: POST Aggregated Issues using Swagger v1 API in YAML\nDESCRIPTION: This snippet provides a method to post and retrieve aggregated issues for a snapshot using Snyk's v1 API. The method requires organization, project, and snapshot identifiers and uses the v1 API specification file to define the request structure.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/snapshots-v1.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\\\"../../.gitbook/assets/v1-api-spec.yaml\\\" path=\\\"/org/{orgId}/project/{projectId}/history/{snapshotId}/aggregated-issues\\\" method=\\\"post\\\" %}\\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Defining Maven BOM File Structure\nDESCRIPTION: Example of a Maven Bill of Materials (BOM) file that centralizes dependency versions. Shows how to define dependencyManagement section to specify versions for log4j and commons-logging dependencies.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/more-information-about-java-support.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<project ...>\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>snyk</groupId>\n    <artifactId>snyk-bom</artifactId>\n    <version>1.0</version>\n    <packaging>pom</packaging>\n    <name>Snyk Bill Of Materials</name>\n    \n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>log4j</groupId>\n                <artifactId>log4j</artifactId>\n                <version>1.2.12</version>\n            </dependency>\n            <dependency>\n                <groupId>commons-logging</groupId>\n                <artifactId>commons-logging</artifactId>\n                <version>1.1.1</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Internal CA Certificate for Bitbucket\nDESCRIPTION: This example shows how to run a Broker Client Docker container for Bitbucket Server while providing an internal CA certificate. The configuration mounts a local certificate directory and uses the NODE_EXTRA_CA_CERTS environment variable to specify the certificate path.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-snyk-broker-docker-installation/backend-requests-with-an-internal-certificate-for-docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --restart=always \\\n           -p 8000:8000 \\\n           -e BROKER_TOKEN=secret-broker-token \\\n           -e BITBUCKET_USERNAME=username \\\n           -e BITBUCKET_PASSWORD=password \\\n           -e BITBUCKET=your.bitbucket-server.domain.com \\\n           -e BITBUCKET_API=your.bitbucket-server.domain.com/rest/api/1.0 \\\n           -e PORT=8000 \\\n           -e NODE_EXTRA_CA_CERTS=/private/ca.cert.pem \\\n           -v /local/path/to/private:/private \\\n       snyk/broker:bitbucket-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk API Endpoint\nDESCRIPTION: Allows specification of a custom Snyk API endpoint, with default set to the global Snyk API service.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/bitbucket-pipelines-integration-using-a-snyk-pipe/snyk-pipe-parameters-and-values-bitbucket-cloud.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nSNYK_API: https://api.snyk.io\n```\n\n----------------------------------------\n\nTITLE: Warning Hint for Custom Mapping Setup in Markdown\nDESCRIPTION: This snippet displays a warning message to contact Snyk support or account team after completing custom mapping setup. It uses Markdown syntax with a hint style.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/single-sign-on-sso-for-authentication-to-snyk/choose-a-provisioning-option.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"warning\" %}\nContact your Snyk account team or Snyk Support to turn on custom mapping once you have completed the setup steps.\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Generated Secret Names Example Output\nDESCRIPTION: Example output showing required secret names and values for Nexus SCM type\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/kubernetes-secrets-and-helm-chart-installation.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n### Secret Creation Disabled ###\n\nEnsure secrets are present on your cluster in the default namespace:\n\n-> NAME:KEY <VALUE>\n-> nexus-broker-token-snyk-broker-chart:nexus-broker-token-key <your-broker-token>\n-> nexus-base-nexus-url-snyk-broker-chart:nexus-base-nexus-url <BASE_NEXUS_URL>\n-> nexus-nexus-url-snyk-broker-chart:nexus-nexus-url <NEXUS_URL>\n-> nexus-broker-client-validation-url-snyk-broker-chart:nexus-broker-client-validation-url <BROKER_CLIENT_VALIDATION_URL>\n```\n\n----------------------------------------\n\nTITLE: Ignoring Vulnerabilities in Specific Files with .snyk Policy\nDESCRIPTION: A .snyk policy file example that ignores a specific vulnerability (SNYK-CC-K8S-1) in two different files: staging/deployment.yaml and staging/cronjob.yaml.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/iac-ignores-using-the-.snyk-policy-file.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v1.19.0\nignore:\n  SNYK-CC-K8S-1:\n    - 'staging/deployment.yaml > *':\n        reason: None Given\n        expires: 2021-08-26T08:40:35.249Z\n        created: 2021-07-27T08:40:35.251Z\n  - 'staging/cronjob.yaml > *':\n        reason: None Given\n        expires: 2021-08-26T08:40:35.249Z\n        created: 2021-07-27T08:40:35.251Z\n```\n\n----------------------------------------\n\nTITLE: Defining the IndexController Class with a Basic Route\nDESCRIPTION: This snippet defines an 'IndexController' class implementing the Controller interface, featuring a basic route that returns a simple response for get requests to the root path. It utilizes Express Router functionality to manage the routing.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/configuring-express.js.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Controller } from '../../interfaces/Controller';\nimport type { Request, Response, NextFunction } from 'express';\nimport { Router } from 'express';\n\nclass IndexController implements Controller {\n  public path = '/';\n  public router = Router();\n\n  constructor() {\n    this.initRoutes();\n  }\n\n  private initRoutes() {\n    this.router.get(`${this.path}`, this.indexPage);\n  }\n\n  private indexPage(req: Request, res: Response, next: NextFunction) {\n    return res.send('index route!');\n  }\n}\n\nexport default IndexController;\n```\n\n----------------------------------------\n\nTITLE: Broker Connection Status Log Output\nDESCRIPTION: Example JSON log output showing the broker connection status message, including connection name, hostname, process ID, and connection status information.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/restart-your-broker-for-a-new-environment-variable.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"name\":\"my github connection\",\"hostname\":\"ae7d64e0edac\",\"pid\":1,\"level\":30,\"id\":\"12345678-1234-1234-1234-123456789012\",\"msg\":\"Connection (my github connection) not in use by any orgs. Will check periodically and create connection when in use.\",\"time\":\"2024-06-18T20:21:24.382Z\",\"v\":0}\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Delta with Specific Project Coordinates\nDESCRIPTION: This command runs snyk-delta with specific organization and project coordinates to compare against a baseline snapshot.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/failing-of-builds-in-snyk-cli.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --json --print-deps | snyk-delta --baselineOrg xxx --baselineProject xxx\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links for Snyk AppRisk Documentation\nDESCRIPTION: A markdown list of internal documentation links for various aspects of the Snyk AppRisk Issues UI functionality.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/using-the-issues-ui-with-snyk-apprisk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [Filter your issues](filter-your-issues.md)\n* [Understand your issues](understand-your-issues.md)\n* [Evidence graph](evidence-graph.md)\n* [Export and customize views](export-and-customize-views.md)\n```\n\n----------------------------------------\n\nTITLE: List Integrations by Type v1 API\nDESCRIPTION: Endpoint for retrieving integrations of a specific type within a Snyk organization using the v1 API\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/integrations-v1.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npath: \"/org/{orgId}/integrations/{type}\"\nmethod: \"get\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Custom Versioning Schema Regex\nDESCRIPTION: This regex defines the schema for matching the Snyk container image tags based on their significance. It captures major, minor, and least significant version components, along with a version indicator.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/use-snyk-container/use-custom-base-image-recommendations/custom-versioning-schema-for-custom-base-images.md#2025-04-21_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n(?<SIGNIFICANT>\\d+)\\.(?<LESS_SIGNIFICANT>\\d+)_V(?<LEAST_SIGNIFICANT>\\d+)\n```\n\n----------------------------------------\n\nTITLE: Configuration File Structure (YAML)\nDESCRIPTION: This snippet demonstrates the structure of the jira.yaml configuration file, which can be used to set default values for various tool options and include custom Jira fields.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-jira-tickets-for-new-vulns.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nschema: 1\nsnyk: \n    orgID: a1b2c3de-99b1-4f3f-bfdb-6ee4b4990513 # <SNYK_ORG_ID> \n    projectID: a1b2c3de-99b1-4f3f-bfdb-6ee4b4990514 # <SNYK_PROJECT_ID>\n    severity: critical # <critical|high|medium|low>\n    maturityFilter: mature # <mature,proof-of-concept,no-known-exploit,no-data>\n    type: all # <all|vuln|license>\n    priorityScoreThreshold: 10\n    api: https://myapi # <API endpoint> default to \n    ifUpgradeAvailableOnly: false # <true|false>\njira:\n    jiraTicketType: Task # <Task|Bug|....>\n    jiraProjectID: 12345\n    assigneeId: 123abc456def789\n    assigneeName: AccountName\n    priorityIsSeverity: true # <true|false>\n    labels: label1 # <IssueLabel1>,<IssueLabel2>\n    jiraProjectKey: testProject\n    priorityIsSeverity: false # <true|false> (defaults: Low|Medium|High|Critical=>Low|Medium|High|Highest)\n    customMandatoryFields:\n        key: \n            value: 5\n```\n\n----------------------------------------\n\nTITLE: Skipping Snyk Monitored Repositories\nDESCRIPTION: This command counts contributors for all repositories in Bitbucket Server, regardless of whether they are already monitored by Snyk. The `--skipSnykMonitoredRepos` flag skips the check for Snyk-monitored repositories.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-server/bitbucket-server-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count bitbucket-server --token BITBUCKET-TOKEN --url BITBUCKET-URL --skipSnykMonitoredRepos\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk MCP Server with SSE Transport in mcpconfig.json\nDESCRIPTION: JSON configuration for adding Snyk MCP server using server-sent events (SSE) transport, specifying the base URL for the local SSE server\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/snyk-mcp-experimental.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"Snyk Security Scanner\": {\n      \"url\": \"http://baseUrl/sse\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Pub Packages using Snyk API\nDESCRIPTION: This snippet shows the endpoint for testing open-source packages from the Pub package manager using the Snyk API. The API returns known vulnerabilities for the specified package.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/dart-and-flutter.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\n\"GET /orgs/{org_id}/packages/{purl}/issues endpoint\"\n```\n\n----------------------------------------\n\nTITLE: Installing libstdc++ on Alpine Linux\nDESCRIPTION: This command installs the libstdc++ library, which is a prerequisite for running Snyk CLI and Snyk Jenkins plugin on Alpine Linux. It uses the apk package manager to add the shared library to the container environment.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/install-or-update-the-snyk-cli/prerequisites-for-cli-and-jenkins-plugin-on-alpine-linux-operating-system.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"apk add libstdc++\"\n```\n\n----------------------------------------\n\nTITLE: Customizing values.yaml for Image Repository in Snyk User Docs\nDESCRIPTION: Modify the values.yaml file to specify a custom container registry URI and tag for Snyk User Docs deployment. This allows users to use their own private registry instead of the default public images.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/image-repository-tab-and-image-pull-secret.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example modification in values.yaml\nimage:\n  repository: your-registry.com/snyk-user-docs\n  tag: your-custom-tag\n```\n\n----------------------------------------\n\nTITLE: App Controller Registration\nDESCRIPTION: TypeScript code for registering all controllers in the main app file\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/render-content-for-users.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport IndexController from \"./routes/index/indexController\";\nimport AuthController from \"./routes/auth/authController\";\nimport CallbackController from \"./routes/callback/callbackController\";\nimport ProjectsController from \"./routes/projects/projectsController\";\nimport App from \"./app\";\n\nnew App([\n   new IndexController(),\n   new AuthController(),\n   new CallbackController()\n   new ProjectsController()],\n  3000\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Group Membership with REST API\nDESCRIPTION: This snippet illustrates how to create a new membership in a group using a POST request through the REST API. The Swagger specification file is required. The main parameter `group_id` specifies the target group for the membership creation. It results in a new membership being added to the defined group.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/groups.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"src\\\": \\\"../../.gitbook/assets/rest-spec.json\\\",\\n  \\\"path\\\": \\\"/groups/{group_id}/memberships\\\",\\n  \\\"method\\\": \\\"post\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Ruby Version Declaration Example\nDESCRIPTION: Example showing Ruby version declaration patterns in Gemfile. Shows both unsupported specific version pinning and supported version range syntax for Ruby versions below 3.2.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/ruby/ruby-for-open-source.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nruby \"2.7.7\"    # Unsupported specific version pinning\nruby \"~> 2.7.x\"  # Supported version range\n```\n\n----------------------------------------\n\nTITLE: Example PEM Certificate Format for Internal CA\nDESCRIPTION: This code snippet demonstrates the proper PEM format for certificate files used with the Broker Client. It shows how multiple certificates can be chained together in a single file, each with BEGIN and END CERTIFICATE markers and base64-encoded content.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-snyk-broker-docker-installation/backend-requests-with-an-internal-certificate-for-docker.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-----BEGIN CERTIFICATE-----\n<base64-encoded certificate>\n-----END CERTIFICATE----\n-----BEGIN CERTIFICATE-----\n<base64-encoded certificate>\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n<base64-encoded certificate>\n-----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CWE-312 Vulnerability in C#\nDESCRIPTION: This C# code snippet illustrates a potential CWE-312 vulnerability by writing user input directly to a file without proper protection.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/create-query.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing System.Text;\nusing System.Threading;\n\nnamespace CWE_312_Example\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.Write(\"Please enter your username: \");\n            string username = Console.ReadLine();\n\n            string userData = $\"Username: {username}\";\n\n            File.WriteAllText(\"testFile.txt\", userData);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Snyk Code Quality Reporting Differences\nDESCRIPTION: Explanation of reporting variations between Snyk Code tools, highlighting that IDE plugins and Language Server report Code Quality results while CLI does not\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/troubleshooting-ides/missing-or-differing-results-in-snyk-code.md#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Installing Snyk Broker Chart with Inline Environment Variables\nDESCRIPTION: This snippet shows how to install the Snyk Broker Helm Chart using inline options to set custom environment variables. It sets up the broker for GitHub and adds two custom environment variables.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/custom-additional-options-for-broker-helm-chart-installation.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhelm install snyk-broker-chart snyk-broker/snyk-broker \\\n             --set scmType=github-com \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set scmToken=<ENTER_REPO_TOKEN> \\\n             --set brokerClientUrl=<ENTER_BROKER_CLIENT_URL>:<ENTER_BROKER_CLIENT_PORT> \\\n             --set env[0].name=myEnvVarName \\\n             --set env[0].value=myEnvVarValue \\\n             --set env[1].name=myOtherEnvVarName \\\n             --set env[1].value=myOtherEnvVarValue \\\n             -n snyk-broker --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Template Usage Example in Java\nDESCRIPTION: Example Java code demonstrating how template HasArg1 matches program elements. Shows string literal assignments and println statements where only the first println matches the query HasArg1<StringLiteral<\"test\">>.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/README.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nclass Test {\n  String x;\n  void test() {\n    this.x = \"test\";\n    System.out.println(x);\n    this.x = \"test2\";\n    System.out.println(x);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scan Docker Image with Snyk (Shell)\nDESCRIPTION: Example command for scanning and monitoring Docker images using the Snyk CLI. This command helps in detecting vulnerabilities in the given container image.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/container-monitor.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n`$ snyk container monitor <image>`\n```\n\n----------------------------------------\n\nTITLE: Cloning and Branching with Git for Snyk CLI Integration\nDESCRIPTION: These commands clone the 'goof' repository and create a new branch for adding vulnerabilities. This is the initial setup for the Snyk CLI integration workflow.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/integrate-snyk-into-your-workflow-using-the-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/snyk/goof.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit branch add_vulns\ngit checkout add_vulns\n```\n\n----------------------------------------\n\nTITLE: Enabling JSON Output Format in Snyk CLI\nDESCRIPTION: Utilizes the --json flag with snyk-scm-contributors-count to produce output in JSON format. This option needs to be set when utilizing the consolidateResults command, ensuring structured data output.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/gitlab-and-gitlab-server/gitlab-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n\"snyk-scm-contributors-count gitlab --token TOKEN --json\\n\"\n```\n\n----------------------------------------\n\nTITLE: Output for Snyk Project Name in YAML Format\nDESCRIPTION: A YAML snippet that provides the output format of using 'snyk_project_name' in a pull request template. It displays the name of the Snyk project in the PR description, based on a given JSON input.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nFix applied to project my-org/project:filename\n```\n\n----------------------------------------\n\nTITLE: Showing Ignore Types in Snyk Security Policies\nDESCRIPTION: This snippet lists the available ignore types that can be selected when setting an ignore action in a Snyk security policy. These types provide context for why an issue is being ignored.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/security-policies/security-policy-actions.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`won't fix` and `not vulnerable`\n```\n\n----------------------------------------\n\nTITLE: Private Gem Declaration Example in Ruby Gemfile\nDESCRIPTION: An example of how to properly declare a private gem using HTTPS URL in a Gemfile, which is supported by Snyk for private gem sources. This demonstrates the required format for gem sources to work with Snyk's private gem configuration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-open-source/package-repository-integrations/private-gem-sources-for-ruby-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"privvy\", git: \"https://github.com/testexample/ruby-gem-for-private-source\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Downstream Mode in Bash\nDESCRIPTION: This command demonstrates how to enable insecure downstream mode by setting an environment variable. It forces downstream requests to use HTTP instead of HTTPS, which is not recommended for security reasons.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-snyk-broker-docker-installation/insecure-downstream-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport INSECURE_DOWNSTREAM=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Uploading Snyk Scan Results to GitHub Code Scanning\nDESCRIPTION: This snippet demonstrates how to upload Snyk scan results to GitHub Code Scanning using the SARIF format. It includes the `continue-on-error` option to ensure that the SARIF upload action runs even if the Snyk scan fails, and uses the `github/codeql-action/upload-sarif@v3` action to upload the SARIF file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-scala-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Scala using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/scala@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for Auth and Callback Routes in Bash\nDESCRIPTION: This bash script creates the necessary directory structure and files for handling authentication and callback routes in the Snyk App.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ./src/routes/auth;\nmkdir -p ./src/routes/callback;\ntouch ./src/routes/auth/authController.ts\ntouch ./src/routes/callback/callbackController.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Pod Security Policy\nDESCRIPTION: Configures Pod Security Policy with a specific name for the Snyk monitor.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/optional-installation-steps-for-snyk-controller-with-helm.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install snyk-monitor snyk-charts/snyk-monitor \\\n             --namespace snyk-monitor \\\n             --set clusterName=\"Production cluster\" \\\n             --set psp.enabled=true \\\n             --set psp.name=something\n```\n\n----------------------------------------\n\nTITLE: Adding SCC to User in OpenShift - OpenShift CLI\nDESCRIPTION: This command adds the 'privileged' Security Context Constraint to the Snyk Runtime Sensor service account in OpenShift, which is necessary for it to function appropriately.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\noc adm policy add-scc-to-user privileged \\\nsystem:serviceaccount:<<YOUR_NAMESPACE>>:runtime-sensor\n```\n\n----------------------------------------\n\nTITLE: Error Response Example for API Issues\nDESCRIPTION: This JSON snippet illustrates the structure of an error response from the Snyk API, showcasing how errors are formatted including details like 'id', 'detail', and 'status'. It serves as a template for developers to understand the response they may receive during error states.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/issues-list-issues-for-a-package.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonapi\": {\n        \"version\": \"1.0\"\n    },\n    \"errors\": [{\n        \"id\": \"8139dce7-eeb4-404b-be0e-5e4c15004972\",\n        \"detail\": \"Unsupported Ecosystem\",\n        \"status\": \"400\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Schema for Google Workspace User Roles\nDESCRIPTION: JSON schema definition for adding custom role mapping to Google Workspace users. Creates a multi-valued string field named 'roles' that can be accessed by admins and users.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/single-sign-on-sso-for-authentication-to-snyk/custom-mapping/examples-setting-up-custom-mapping-for-idps/example-setting-up-custom-mapping-for-google-workspace.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"fields\":\n   [\n     {\n       \"fieldName\": \"roles\",\n       \"fieldType\": \"STRING\",\n       \"readAccessType\": \"ADMINS_AND_SELF\",\n       \"multiValued\": true,\n       \"displayName\": \"roles\"\n     }\n   ],\n   \"schemaName\": \"Snyk-SSO\"\n }\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode\nDESCRIPTION: Activates extended debugging information for troubleshooting Snyk scan processes and configurations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/bitbucket-pipelines-integration-using-a-snyk-pipe/snyk-pipe-parameters-and-values-bitbucket-cloud.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nDEBUG: false\n```\n\n----------------------------------------\n\nTITLE: Identifying Disabling Strict Contextual Escaping (SCE) Vulnerabilities\nDESCRIPTION: This entry describes the void created by disabling strict contextual escaping (CWE-79), which increases the attack surface for XSS in JavaScript applications. This practice allows attackers to inject scripts.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Example Error Response Structure for Invalid Query Parameter\nDESCRIPTION: JSON format for error response when an unknown query parameter is received, providing relevant details for troubleshooting.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/rest-api/about-the-rest-api.md#2025-04-21_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"errors\": [\n        {\n            \"id\": \"0418e907-a89e-4736-9a5b-91a2022e0899\",\n            \"detail\": \"Unknown query parameter 'unknown'\",\n            \"status\": \"400\",\n            \"source\": {\n                \"parameter\": \"unknown\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Init Containers\nDESCRIPTION: Disables initialization containers when using PVC storage.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/optional-installation-steps-for-snyk-controller-with-helm.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install snyk-monitor snyk-charts/snyk-monitor \\\n             --namespace snyk-monitor \\\n             --set initContainers.enabled = false\n```\n\n----------------------------------------\n\nTITLE: Basic Vulnerability Check with Snyk Python-3.6 Action\nDESCRIPTION: GitHub Action workflow configuration to check for vulnerabilities in Python projects using Snyk. Requires SNYK_TOKEN as an environment variable for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-python-3.6-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Python-3.6 using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/python-3.6@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Counting Contributors for All Organizations in GitHub Enterprise\nDESCRIPTION: Command to retrieve contributor counts for all repositories across all organizations the user has access to in a GitHub Enterprise instance. Requires authentication token and host URL.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/github-enterprise/github-enterprise-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count github-enterprise --token TOKEN --url HOST_URL\n```\n\n----------------------------------------\n\nTITLE: V1 Audit Logs API Response Format\nDESCRIPTION: Example response format from the v1 Search Audit Logs API showing a group edit event with before and after states.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/api-end-of-life-eol-process-and-migration-guides/guides-to-migration/search-audit-logs-group-and-org-v1-api-to-ga-rest-audit-logs-api-migration-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"groupId\": \"4a18d42f-0706-4ad0-b127-24078731fbea\",\n    \"orgId\": \"4a18d42f-0706-4ad0-b127-24078731fbea\",\n    \"userId\": \"4a18d42f-0706-4ad0-b127-24078731fbea\",\n    \"projectId\": null,\n    \"event\": \"group.edit\",\n    \"content\": {\n      \"before\": {\n        \"name\": \"Group Previous Name\"\n      },\n      \"after\": {\n        \"name\": \"Group Current Name\"\n      }\n    },\n    \"created\": \"2017-04-11T21:00:00.000Z\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Understanding API Response Structure - JSON\nDESCRIPTION: This snippet provides an example of the JSON response structure returned by the Snyk API when querying for cloud resources. It includes nested objects that represent the resource data and its relationships, such as environment and organization IDs.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/getting-started-with-cloud-scans/view-cloud-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonapi\": {\n    \"version\": \"1.0\"\n  },\n  \"links\": {\n    \"next\": \"/rest/orgs/d70c1768-5675-4f44-0000-1234abcd1234/cloud/resources?starting_after=eyJpZCI6IjY5ODA5MjNhLWU0ZTAtNDg3Mi04ZDAwLWRjZDEXAMPLEEXAMPLE&version=2022-04-13~experimental\"\n  },\n  \"data\": [\n    {\n      \"id\": \"23b3a46d-cdf7-526c-8888-1abc2abc3abc\",\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"environment_id\": \"ef5d85de-fb4f-4c42-1234-000000000000\",\n        \"scan_id\": \"44f386a6-6ce8-4303-0000-098765432109\",\n        \"created_at\": \"2022-08-07T05:34:24.272279Z\",\n        \"updated_at\": \"2022-08-07T05:34:24.272279Z\",\n        \"revision\": 1,\n        \"kind\": \"cloud\",\n        \"hash\": \"717cdff4218bf3d6abcdefEXAMPLEEXAMPLEEXAMPLEEXAMPLEEXAMPLEEXAMPLE\",\n        \"platform\": \"aws\",\n        \"namespace\": \"us-east-1\",\n        \"resource_type\": \"aws_s3_bucket\",\n        \"resource_id\": \"example-bucket\",\n        \"native_id\": \"arn:aws:s3:::example-bucket\",\n        \"name\": \"example-bucket\",\n        \"location\": \"us-east-1\",\n        \"state\": {\n          \"id\": \"example-bucket\",\n          \"acl\": \"private\",\n          \"arn\": \"arn:aws:s3:::example-bucket\"\n          <trimmed for length>\n        },\n        \"tags\": {}\n      },\n      \"relationships\": {\n        \"environment\": {\n          \"data\": {\n            \"id\": \"ef5d85de-fb4f-4c42-1234-000000000000\",\n            \"type\": \"environment\"\n          },\n          \"links\": {\n            \"related\": \"/orgs/d70c1768-5675-4f44-0000-1234abcd1234/cloud/environments?id=ef5d85de-fb4f-4c42-1234-000000000000&version=2022-12-21~beta\"\n          }\n        },\n        \"organization\": {\n          \"data\": {\n            \"id\": \"d70c1768-5675-4f44-0000-1234abcd1234\",\n            \"type\": \"organization\"\n          },\n          \"links\": {\n            \"related\": \"/orgs/d70c1768-5675-4f44-0000-1234abcd1234?version=2022-12-21~beta\"\n          }\n        },\n        \"scan\": {\n          \"data\": {\n            \"id\": \"a7fa2167-58a8-4ac5-9999-0987dcba6543\",\n            \"type\": \"scan\"\n          },\n          \"links\": {\n            \"related\": \"/orgs/d70c1768-5675-4f44-0000-1234abcd1234/cloud/scans?id=a7fa2167-58a8-4ac5-9999-0987dcba6543&version=2022-12-21~beta\"\n          }\n        }\n      }\n    }\n    <trimmed for length>\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Risk Score Table - Business Criticality Impact\nDESCRIPTION: Markdown table showing how different business criticality levels affect the risk score impact subscore\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/risk-score.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Possible input value | Score impact                             |\n| -------------------- | ---------------------------------------- |\n| `Critical`           | Impact subscore increases.               |\n| `High`               | Impact subscore is not affected.         |\n| `Medium`             | Impact subscore decreases.               |\n| `Low`                | Impact subscore decreases significantly. |\n```\n\n----------------------------------------\n\nTITLE: Deleting Group Membership with REST API\nDESCRIPTION: This code snippet describes how to delete a membership from a group using the DELETE HTTP method in the REST API, requiring a Swagger specification file. Important parameters include `group_id` and `membership_id`, pinpointing the group and the membership to be deleted. The operation removes the specified membership.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/groups.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"src\\\": \\\"../../.gitbook/assets/rest-spec.json\\\",\\n  \\\"path\\\": \\\"/groups/{group_id}/memberships/{membership_id}\\\",\\n  \\\"method\\\": \\\"delete\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Improper Certificate Validation Vulnerabilities\nDESCRIPTION: This entry discusses improper certificate validation (CWE-295) vulnerabilities present in Go, Java, Kotlin, Python, Ruby, Scala, and Swift applications. This can lead to man-in-the-middle attacks.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Configuring Azure Repos Broker Docker Image\nDESCRIPTION: Dockerfile configuration for Azure Repos Broker integration with environment variables for broker token, Azure tokens, organization details, and connection settings.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/derived-docker-images-for-broker-client-integrations-and-container-registry-agent.md#2025-04-21_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM snyk/broker:azure-repos\n\nENV BROKER_TOKEN        secret-broker-token\nENV AZURE_REPOS_TOKEN   secret-azure-token\nENV AZURE_REPOS_ORG     org-name\nENV AZURE_REPOS_HOST    your.azure-server.domain.com\nENV BROKER_CLIENT_URL   http://my.broker.client:8000\nENV PORT                8000\n```\n\n----------------------------------------\n\nTITLE: Snyk Dep Graph JSON Schema Definition in TypeScript\nDESCRIPTION: TypeScript interface defining the schema for a Snyk Dep Graph JSON object. This structure describes the format for submitting dependency information to the Snyk API, including package manager info, packages, and graph relationships.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-open-source/snyk-for-bazel/dep-graph-api.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nexport interface DepGraphData {\n  schemaVersion: string;\n  pkgManager: {\n    name: string;\n    version?: string;\n    repositories?: Array<{\n      alias: string;\n    }>;\n  };\n  pkgs: Array<{\n    id: string;\n    info: {\n      name: string;\n      version?: string;\n    };\n  }>;\n  graph: {\n    rootNodeId: string;\n    nodes: Array<{\n      nodeId: string;\n      pkgId: string;\n      info?: {\n        versionProvenance?: {\n          type: string;\n          location: string;\n          property?: {\n            name: string;\n          };\n        },\n        labels?: {\n          [key: string]: string | undefined;\n        };\n      };\n      deps: Array<{\n        nodeId: string;\n      }>;\n    }>;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Snyk Infrastructure as Code Action with Result Sharing in YAML\nDESCRIPTION: This example shows how to configure the Snyk Infrastructure as Code Action to share test results to the Snyk platform using the --report argument.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-infrastructure-as-code-action.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Snyk Infrastructure as Code\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run Snyk to check Kubernetes manifest file for issues\n        uses: snyk/actions/iac@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --report\n```\n\n----------------------------------------\n\nTITLE: Accessing Fields in Rego from YAML Structure - Rego\nDESCRIPTION: This Rego code snippet shows how to access the 'privileged' field from the parsed JSON structure for a Kubernetes Pod in Rego.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/parsing-an-input-file.md#2025-04-21_snippet_10\n\nLANGUAGE: Rego\nCODE:\n```\ninput.spec.containers[0].securityContext.privileged\n```\n\n----------------------------------------\n\nTITLE: Creating Slack Notification Customization for a Project via REST API\nDESCRIPTION: API endpoint to create a new Slack notification customization for a specific project. Requires org_id, bot_id, and project_id parameters.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/integrate-with-snyk/jira-and-slack-integrations/slack-app.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPOST /orgs/{org_id}/slack_app/{bot_id}/projects/{project_id}\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Integration API for SNYK-US-02\nDESCRIPTION: Helm upgrade command parameter for configuring the integration API endpoint for the SNYK-US-02 region when installing the Snyk Controller.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/working-with-snyk/regional-hosting-and-data-residency.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n--set integrationApi=https://api.us.snyk.io/v2/kubernetes-upstream\n```\n\n----------------------------------------\n\nTITLE: Simplified API Versioning Strategy\nDESCRIPTION: New approach to API versioning with version specification based on date, focusing on publishing versions only for breaking changes\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/rest-api/changelog.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nGoing forward, Snyk will expose one API specification per version-date, rather than one for each stability. New versions of the Snyk API will only be published when necessitated by breaking changes.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Slack Channel Information using REST API\nDESCRIPTION: This Swagger UI block describes the GET endpoint for retrieving information about a specific Slack channel for a given organization, tenant, and channel ID.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/slack.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/orgs/{org_id}/slack_app/{tenant_id}/channels/{channel_id}\" method=\"get\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Listing Files Changed in PR Template Using JSON\nDESCRIPTION: This JSON snippet encompasses 'files_changed' in a template to list modified files in the pull request. It benefits from tracking file change history. Inputs include JSON, providing outputs in descriptive string formats enumerating change details.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"description\": \"Changes included in this PR: {{ files_changed }}\"\n            \n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Package Reference Format\nDESCRIPTION: Example of package reference format for testing TypeScript applications using pkg:npm syntax.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npkg:npm\n```\n\n----------------------------------------\n\nTITLE: Uploading Snyk Scan Results to GitHub Code Scanning with Gradle-jdk12 Action\nDESCRIPTION: This snippet demonstrates how to use the Snyk Gradle (jdk12) Action to generate a SARIF file and upload it to GitHub Code Scanning. It uses continue-on-error to ensure the upload step runs even if vulnerabilities are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-gradle-jdk12-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Gradle (jdk12) using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/gradle-jdk12@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Snyk API\nDESCRIPTION: Example of the JSON response received from the API containing the escaped IaC template data.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/google-cloud-integration/google-cloud-integration-api/step-1-download-service-account-iac-template-api.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonapi\": {\n    \"version\": \"1.0\"\n  },\n  \"data\": {\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\n    \"type\": \"permissions\",\n    \"attributes\": {\n      \"data\": \"variable \\\"project_id\\\"<...>\",\n      \"type\": \"tf\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scanning AWS CDK Generated JSON with Snyk Infrastructure as Code CLI\nDESCRIPTION: This command uses the Snyk Infrastructure as Code CLI to scan the JSON file generated by the CDK synthesis. Replace 'cdk.out/*.json' with the specific application name you want to scan.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/aws-cdk-files.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test cdk.out/*.json\n```\n\n----------------------------------------\n\nTITLE: Broker Cosign Public Key\nDESCRIPTION: The public key used for verifying Broker container image signatures with Cosign. This key is required for the verification process using the cosign verify command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/verifying-broker-image-signatures.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEd+2mEWyDk8Cmm0CD1Z8jcsXGaQ2i\nsL8pxHrwoIH4DxmdyJ2nzwWaxYfsfZM6NoCRVsgYAVe5GBhFbr6hzcj5gw==\n-----END PUBLIC KEY-----\n```\n\n----------------------------------------\n\nTITLE: Listing Repositories in Markdown\nDESCRIPTION: This snippet details the types of repositories scanned by the SCM-Contributors-Count tool, categorizing them into private and public repositories.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/output.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\n### Details:\n## Repository List\n\n# Private Repositories:\nsomeOrganization/someRepository(Private)\n\n# Public Repositories:\nanotherOrganization/anotherRepository(Public)\n```\n```\n\n----------------------------------------\n\nTITLE: DELETE Pull Request Template Endpoint in Swagger\nDESCRIPTION: Swagger API specification for deleting a pull request template for a specific group. Uses the DELETE method on the /groups/{group_id}/settings/pull_request_template endpoint.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/pull-request-templates.md#2025-04-21_snippet_2\n\nLANGUAGE: swagger\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/groups/{group_id}/settings/pull_request_template\" method=\"delete\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Developer IDE & CLI Usage in Snowflake\nDESCRIPTION: This SQL query identifies adoption patterns of Snyk tools during the development phase by counting unique developers and total scans per environment and Snyk product. The query focuses on tests executed in the development environment, excluding those performed during CI/CD stages.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/reporting/reporting-and-bi-integrations-snowflake-data-share/build-your-first-dashboard.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    ENVIRONMENT_DISPLAY_NAME AS IDE,\n    PRODUCT_DISPLAY_NAME AS PRODUCT,\n    COUNT(DISTINCT USER_EMAIL) AS UNIQUE_DEVELOPERS,\n    COUNT(1) AS TOTAL_SCANS\nfrom SNYK.SNYK.USAGE_EVENTS__V_1_0\nWHERE (RUNTIME_APPLICATION_DATA_SCHEMA_VERSION = 'v2' \nAND ARRAY_CONTAINS('test'::VARIANT, INTERACTION_CATEGORIES) \nAND INTERACTION_STAGE IN ('dev')\n\t\tOR RUNTIME_APPLICATION_DATA_SCHEMA_VERSION = 'v1'\n\t )\nGROUP BY IDE, PRODUCT\n```\n\n----------------------------------------\n\nTITLE: Gradle Lockfile Error Example\nDESCRIPTION: Example error message when using Gradle lockfiles with the deprecated compileOnly configuration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nGradle Error (short): > Could not resolve all dependencies for configuration ':compileOnly'. > Locking strict mode: Configuration ':compileOnly' is locked but does not have lock state.\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom and Standard Roles in JSON\nDESCRIPTION: JSON structure for assigning users a combination of standard and custom roles for different Organizations using the 'roles' array.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-configuration/single-sign-on-sso-for-authentication-to-snyk/custom-mapping/legacy-custom-mapping.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"roles\": [\n        \"snyk-{orgslug}-admin\",\n        \"snyk-{orgslug2}-collaborator\",\n        \"snyk-{orgslug3}-developer_readonly\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Credentials for Non-Brokered Integration\nDESCRIPTION: Curl command to update credentials for an existing integration, specifically for GitLab using an authentication token\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/api-endpoints-index-and-tips/examples-for-the-update-existing-integration-endpoint.md#2025-04-21_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --include \\\n     --request PUT \\\n     --header \"Content-Type: application/json; charset=utf-8\" \\\n     --header \"Authorization: token API_KEY\" \\\n     --data-binary \"{\n    \\\"type\\\": \\\"gitlab\\\",\n    \\\"credentials\\\": { \\\"token\\\": \\\"GITLAB_TOKEN\\\" }\n}\" \\\n'https://api.snyk.io/v1/org/{orgId}/integrations/{integrationId}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"9a3e5d90-b782-468a-a042-9a2073736f0b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom CLI Path in JavaScript\nDESCRIPTION: This snippet explains how to manually set the path to the Snyk CLI using the 'cliPath' initialization option, allowing users to specify a custom location for the CLI executable.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/snyk-language-server/README.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Set the custom CLI path in initialization options\nconst initializationOptions = {\n    cliPath: '/path/to/custom/snyk-cli'\n};\n```\n\n----------------------------------------\n\nTITLE: Using jq to Process API Response\nDESCRIPTION: Command to extract and save the template data using jq JSON processor.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/aws-integration/aws-integration-api/step-1-download-iam-role-iac-template-api.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n| jq -r .data.attributes.data > snyk_iac_template\n```\n\n----------------------------------------\n\nTITLE: Setting Vulnerability Severity Threshold\nDESCRIPTION: Defines the minimum severity level for reporting vulnerabilities. Allows filtering issues based on criticality from low to critical.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/bitbucket-pipelines-integration-using-a-snyk-pipe/snyk-pipe-parameters-and-values-bitbucket-cloud.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nSEVERITY_THRESHOLD: low\n```\n\n----------------------------------------\n\nTITLE: Unmanaged Scanning Options Command Line Arguments\nDESCRIPTION: Command line arguments for unmanaged scanning in Snyk CLI, including options for organization, output formatting, repository information, and dependency handling.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/cli-commands-and-options-summary.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n--org=<ORG_ID>\n--json\n--json-file-output=<OUTPUT_FILE_PATH>\n--remote-repo-url=<URL>\n--severity-threshold=<low|medium|high|critical>\n--target-reference=<TARGET_REFERENCE>\n--max-depth\n--print-dep-paths\n--project-name=c-project\n```\n\n----------------------------------------\n\nTITLE: Defining Token Endpoint Specifications\nDESCRIPTION: This snippet defines the API specification for the OAuth2 token endpoint. It is essential for exchanging an authorization code for an access token. It uses the 'post' method for token retrieval.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/oauth2-api.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% openapi src=\"../.gitbook/assets/oauth-api-spec.yaml\" path=\"/token\" method=\"post\" %}\n[oauth-api-spec.yaml](../.gitbook/assets/oauth-api-spec.yaml)\n{% endopenapi %}\n```\n\n----------------------------------------\n\nTITLE: Open Source Specific Template Customization\nDESCRIPTION: This code snippet uses the `product_is_open_source` boolean variable to tailor PR descriptions to projects focused on open-source contributions, distinguishing them from other product types.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_40\n\nLANGUAGE: plain\nCODE:\n```\ndescription: |\n  {{ #product_is_open_source }}\n  This Open Source PR has been opened to make sure our repositories are kept up-to-date.\n  It updates {{ package_name }} from version {{ package_from }} to version {{ package_to }}.\n  Review relevant docs for possible breaking changes.\n  {{ /product_is_open_source }}\n```\n\n----------------------------------------\n\nTITLE: Determine if a PR is a Fix PR\nDESCRIPTION: The YAML snippet uses the `is_fix_pr` variable to add conditional logic in PR descriptions about whether the PR addresses new vulnerabilities, making it a 'fix PR'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: |\n  Is this pr a fix pr? {{ is_fix_pr }}\n\n\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables for Tokens\nDESCRIPTION: This snippet involves setting the Bitbucket Server token and the Snyk token as environment variables. These tokens are essential for authenticating API requests to Bitbucket Server and Snyk.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-bitbucket-server-organizations-and-repos-in-snyk.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport BITBUCKET_SERVER_TOKEN=***\nexport SNYK_TOKEN=***\n```\n\n----------------------------------------\n\nTITLE: Setting up Snyk Webhook Handler package.json\nDESCRIPTION: Defines the Node.js package with required dependencies for the webhook handler that integrates Snyk alerts with Slack. Dependencies include axios and crypto, and provide metadata and script configuration for the Node.js application.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/how-to-use-snyk-webhooks-to-connect-snyk-to-slack-with-aws-lambda/aws-lambda-setup-create-lambda-function-to-connect-snyk-to-slack.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"snyk-webhook-handler\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Snyk to Slack Webhook Integration\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" \\u0026\\u0026 exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"axios\": \"^1.1.3\",\n    \"crypto\": \"^1.0.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Low Level Usage with GitHub Enterprise\nDESCRIPTION: Example of low-level usage with GitHub Enterprise, which focuses on a single repository to count contributors.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/usage.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count github-enterprise --token TOKEN --url HOST_URL --orgs ORG --repo REPO\n```\n\n----------------------------------------\n\nTITLE: Identifying Command Injection Vulnerabilities\nDESCRIPTION: This entry describes command injection vulnerabilities (CWE-78) that can affect multiple languages including Apex, C#, C++, Go, Java, JavaScript, Kotlin, PHP, Python, Ruby, Rust, Scala, Swift, and Visual Basic. These vulnerabilities allow an attacker to execute arbitrary commands on a host operating system via a vulnerable application.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Accessing Optional Network Resources for Snyk Features\nDESCRIPTION: Enumerates optional network resources that may be required depending on the Snyk features being used. This includes endpoints for Snyk Code, CLI downloads, and error reporting.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/security-concept-of-operations-for-snyk/access-requirements.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Optional\n\n* deeproxy.snyk.io:443 (for Snyk Code)\n* downloads.snyk.io:443 (depending on features used, such as downloading the CLI)\n* learn.snyk.io:443 (to be able to display Snyk Learn links in issue details)\n* static.snyk.io:443 (depending on features used, such as downloading the CLI)\n* snyk.io:443 (depending on features used)\n* *.sentry.io:443 (error reporting)\n```\n\n----------------------------------------\n\nTITLE: Listing Changed Files in PR Description\nDESCRIPTION: This JSON snippet demonstrates the usage of the `files_changed` variable to list all the files modified within a pull request description. It's particularly used for giving a quick overview of changes involved in the PR.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"description\": \"Changes included in this PR: {{ files_changed }}\"\n            \n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dispatcher Base URL for Regional Snyk Platform\nDESCRIPTION: This environment variable sets the Dispatcher Base URL for Snyk Broker when using a regional Snyk platform. It's required only for regional platforms and not for app.snyk.io.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/high-availability-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nBROKER_DISPATCHER_BASE_URL=https://api.snyk.io\n```\n\n----------------------------------------\n\nTITLE: Configure .NET SDK Version in global.json\nDESCRIPTION: This JSON snippet demonstrates how to pin a specific .NET SDK version in the `global.json` file. This configuration can lead to scan failures if the specified SDK is not the newest in its channel.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/error-catalog.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sdk\": {\n    \"version\": \"6.0.101\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JavaScript File Reference\nDESCRIPTION: Simple file reference showing where a vulnerability might be located in a JavaScript file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/manage-code-vulnerabilities/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfile1.js\n```\n\n----------------------------------------\n\nTITLE: Python Method Call Analysis Example\nDESCRIPTION: Sample Python code demonstrating method calls and object interactions for Snyk Code query exploration\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/templates-and-predicates.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef safesend(x, y):\n lock(x)\n x.send(y)\n unlock(x)\n\n\ndef finalsend(x):\n x.send('final')\n x.disconnect()\n\n\no = connect()\no1 = connect()\nsafesend(o, 'connect')\nsafesend(o, 'message')\nfinalsend(o)\no.send('unsafe')\n```\n\n----------------------------------------\n\nTITLE: Executing Azure CLI Setup Script\nDESCRIPTION: Command to run the Azure CLI script that creates the app registration and related resources.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/azure-integration-for-cloud-configurations/azure-integration-web-ui/step-2-create-the-entra-id-app-registration.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./snyk-permissions-azure.sh\n```\n\n----------------------------------------\n\nTITLE: Modifying IAM Role Name in Terraform\nDESCRIPTION: Example of how to customize the IAM role name in the Terraform template.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/aws-integration/aws-integration-api/step-1-download-iam-role-iac-template-api.md#2025-04-21_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n  name                = \"snyk-cloud-role\"\n```\n\n----------------------------------------\n\nTITLE: Generating Import File with Repository Type Filter\nDESCRIPTION: Command to generate an import file for unmonitored private repositories using the snyk-scm-contributors-count tool, specifying an import configuration directory\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/creating-and-using-the-import-file.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count <command> --token TOKEN -- importConfDir /snyk/import/ --importFileRepoType 'private'\n```\n\n----------------------------------------\n\nTITLE: Equivalent JSON from Terraform Plan JSON - JSON\nDESCRIPTION: This JSON snippet represents the equivalent output when parsing the Terraform Plan JSON output into JSON format, suitable for use in Rego.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/parsing-an-input-file.md#2025-04-21_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"data\": {},\n\t\"resource\": {\n\t\t\"aws_vpc\": {\n\t\t\t\"example\": {\n\t\t\t\t\"assign_generated_ipv6_cidr_block\": false,\n\t\t\t\t\"cidr_block\": \"10.0.0.0/16\",\n\t\t\t\t\"enable_dns_support\": true,\n\t\t\t\t\"instance_tenancy\": \"default\",\n\t\t\t\t\"tags\": null\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Yarn Cache Directory Reference\nDESCRIPTION: Reference to the Yarn cache directory path used in zero-installs feature, which stores all project dependencies locally.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/javascript/git-repositories-and-javascript.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n.yarn/cache\n```\n\n----------------------------------------\n\nTITLE: Using Package Version From in PR Description\nDESCRIPTION: This YAML snippet demonstrates how to include the 'from' version of a package using the `package_from` variable, particularly useful when documenting package upgrades in a PR.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: |\n  Fix is applied by moving from {{ package_from}}\n\n\n```\n\n----------------------------------------\n\nTITLE: Generating import data for Bitbucket Cloud repositories\nDESCRIPTION: Command to prepare import data for Bitbucket Cloud repositories using the created organizations file. Specifies Bitbucket Cloud as both source and integration type.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-bitbucket-cloud-organizations-and-repos-in-snyk.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import import:data --orgsData=snyk-created-orgs.json --source=bitbucket-cloud --integrationType=bitbucket-cloud\n```\n\n----------------------------------------\n\nTITLE: Targeting the setup.py file with Snyk\nDESCRIPTION: This command specifies the setup.py file as the target for Snyk scans in Python projects.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/snyk-open-source-specific-ci-cd-strategies.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nsnyk test --file=setup.py\n```\n\n----------------------------------------\n\nTITLE: Example .snyk File Excluding a Directory from Snyk Code Analysis\nDESCRIPTION: A simple example of a .snyk file that excludes all files within the todolist-goof directory and its subdirectories from Snyk Code analysis.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/import-project-repository/exclude-directories-and-files-from-project-import.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Snyk (https://snyk.io) policy file\nexclude:\n global:\n   - todolist-goof/** \n```\n\n----------------------------------------\n\nTITLE: Specifying Python File for Snyk Scanning\nDESCRIPTION: This snippet shows how to specify a particular file in a Python project for Snyk scanning, with the default being 'requirements.txt'. The '--package-manager' option is mandatory when using a file other than 'requirements.txt'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/sbom.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--file=<filename>\n```\n\n----------------------------------------\n\nTITLE: Generating organization data from Bitbucket Cloud for Snyk import\nDESCRIPTION: Command to generate organization data from Bitbucket Cloud source for import into a specific Snyk group. Creates an orgs.json file with the organization information.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-bitbucket-cloud-organizations-and-repos-in-snyk.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import orgs:data --source=bitbucket-cloud --groupId=<snyk_group_id>\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Scala Action with Severity Threshold\nDESCRIPTION: This snippet shows how to configure the Snyk Scala Action to only report high severity vulnerabilities. It utilizes the `args` parameter to pass the `--severity-threshold=high` flag to the Snyk CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-scala-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Scala using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/scala@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Output for Open Source Product Description\nDESCRIPTION: An output example for 'product_is_open_source' shows how a PR description is adjusted for open-source projects, using a specific JSON template.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nThis Open Source PR has been opened to fix vulnerabilities in your project\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Integration API for SNYK-AU-01\nDESCRIPTION: Helm upgrade command parameter for configuring the integration API endpoint for the SNYK-AU-01 region when installing the Snyk Controller.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/working-with-snyk/regional-hosting-and-data-residency.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n--set integrationApi=https://api.au.snyk.io/v2/kubernetes-upstream\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Structure for Release Stages\nDESCRIPTION: A series of markdown tables defining each release stage with columns for Description, Available to, Access, and Docs. Each table represents a different stage in the release lifecycle from Alpha to End of Life.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/getting-started/snyk-release-process.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table><thead><tr><th width=\"240\">Description</th><th>Available to</th><th>Access</th><th>Docs</th></tr></thead><tbody><tr><td>Internal release only.</td><td>Snyk internal users, potentially some design partners.</td><td>Controlled </td><td>No docs provided.</td></tr></tbody></table>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Definition for Vulnerability Fields\nDESCRIPTION: A markdown table defining the various fields that appear in Snyk Container vulnerability reports, including severity, heading, description, info, introduced through, from, introduced by, and fixed in fields.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-container/understand-snyk-container-cli-results.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Field**              | **Description**                                                                                                                                                                                                                    |\n| ---------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **Severity**           | The importance of the specific vulnerability. For more information, see [Severity levels of detected Linux vulnerabilities](../../../scan-with-snyk/snyk-container/how-snyk-container-works/severity-levels-of-detected-linux-vulnerabilities.md). |\n| **A clear heading**    | A summary of the vulnerability and the package it affects.                                                                                                                                                                                         |\n| **Description**        | A brief description of the type of issue or Common Vulnerabilities and Exposure (CVE) reference, if a CVE exists.                                                                                                                                  |\n| **Info**               | A link to vulnerability details, including links to upstream sources and global vulnerabilities databases.                                                                                                                                         |\n| **Introduced through** | The top-level package names that the vulnerability affects.                                                                                                                                                                                        |\n| **From**               | How the affected packages came to be in the image.                                                                                                                                                                                                 |\n| **Introduced by**      | Whether the vulnerability is in the base image or which line in the Dockerfile introduced the vulnerability.                                                                                                                                       |\n| **Fixed in**           | If available, the version of the package that has a fix for the vulnerability.                                                                                                                                                                     |\n```\n\n----------------------------------------\n\nTITLE: Running Snyk IaC Test Command on Terraform Files\nDESCRIPTION: Example command to run Snyk IaC test on a Terraform file. This command analyzes the specified file for security issues and misconfigurations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/understand-the-iac-cli-test-results/snyk-iac-cli-test-results-v.-1.938.0-and-earlier.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test aws_api_gateway_stage_logging.tf\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Configuration for Azure App Registration\nDESCRIPTION: Command to apply the Terraform configuration and create the Azure infrastructure.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/azure-integration-for-cloud-configurations/azure-integration-web-ui/step-2-create-the-entra-id-app-registration.md#2025-04-21_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: API Response with Terraform Configuration (JSON)\nDESCRIPTION: Example JSON response from the Snyk API when requesting a Terraform configuration. The actual Terraform code is contained in the 'data.attributes.data' field as an escaped JSON string.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/azure-integration-for-cloud-configurations/azure-integration-api/step-1-download-azure-app-registration-iac-template-or-script-api.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonapi\": {\n    \"version\": \"1.0\"\n  },\n  \"data\": {\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\n    \"type\": \"permissions\",\n    \"attributes\": {\n      \"data\": \"provider \\\"azuread\\\"<...>\",\n      \"type\": \"tf\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrade npm globally\nDESCRIPTION: This command upgrades npm to the latest version globally.  It ensures the latest features and bug fixes are available.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/install-or-update-the-snyk-cli/install-or-upgrade-to-version-of-node.js-required-for-snyk-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g npm\n```\n\n----------------------------------------\n\nTITLE: Risk Score Table - Provider Urgency Impact\nDESCRIPTION: Markdown table showing how different provider urgency levels affect the risk score impact subscore\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/risk-score.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Possible input value | Score impact                             |\n| -------------------- | ---------------------------------------- |\n| `Critical`           | Impact subscore increases significantly. |\n| `High`               | Impact subscore increases.               |\n| `Medium`             | Impact subscore decreases significantly. |\n| `Low`                | Impact subscore decreases significantly. |\n```\n\n----------------------------------------\n\nTITLE: Snyk Features Comparison Table\nDESCRIPTION: Table comparing features available in Snyk Open Source vs Snyk Code for Ruby implementations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/ruby/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Snyk Open Source                                                   | Snyk Code                                      |\n| ------------------------------------------------------------------ | ---------------------------------------------- |\n| <ul><li>Fix PRs</li><li>License scanning</li><li>Reports</li></ul> | <ul><li>Reports</li><li>Custom rules</li></ul> |\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for GitHub Broker Client Configuration\nDESCRIPTION: Docker run command to set up a fully configured Broker Client that enables analysis of Open Source, IaC, Container, Code files (with Code Agent), and Snyk Essentials information. The command includes essential environment variables and port configuration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/github-prerequisites-and-steps-to-install-and-configure-broker/github-install-and-configure-using-docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --restart=always \\\n           -p 8000:8000 \\\n           -e BROKER_TOKEN=<secret-broker-token> \\\n           -e GITHUB_TOKEN=<secret-github-token> \\\n           -e BROKER_SERVER_URL=<broker-region-url> \\\n           -e PORT=8000 \\\n           -e BROKER_CLIENT_URL=<http://broker.url.example:8000 (dns/IP:port)> \\\n           -e ACCEPT_IAC=tf,yaml,yml,json,tpl \\\n           -e ACCEPT_CODE=true \\\n           -e ACCEPT_ESSENTIALS=true \\ \n       snyk/broker:github-com\n```\n\n----------------------------------------\n\nTITLE: Log File Location\nDESCRIPTION: Specifies the location of the Snyk extension log file in the user's AppData directory. This log file contains debugging information that can be helpful when troubleshooting issues with the Snyk Visual Studio extension. The path uses the `%HOMEPATH%` environment variable.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/visual-studio-extension/troubleshooting-and-known-issues-with-visual-studio-extension.md#2025-04-21_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n\"%HOMEPATH%\\AppData\\Local\\Snyk\\snyk-extension.log\"\n```\n\n----------------------------------------\n\nTITLE: Checking for High Severity Vulnerabilities with Snyk Maven-3-jdk-11 Action in YAML\nDESCRIPTION: This YAML snippet shows how to configure the Snyk Maven-3-jdk-11 Action to check for only high severity vulnerabilities. It uses the --severity-threshold argument to set the threshold to high.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-maven-3-jdk-11-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Maven (3-jdk-11) using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/maven-3-jdk-11@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Adding Snyk Project Name to PR Template Using JSON\nDESCRIPTION: This JSON snippet demonstrates the use of 'snyk_project_name' in a pull request template, allowing the inclusion of a Snyk project name in the PR description. Dependencies include access to Snyk project information. The input is JSON format and outputs a string with the project's name.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"description\": \"Fix applied to project {{ snyk_project_name }}\"\n            \n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Snyk CLI Code Scanning Command\nDESCRIPTION: Command to perform code scanning using Snyk CLI with organization specification\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/implement-snyk/team-implementation-guide/phase-3-gain-visibility/import-projects.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk code test --org=[org-id]\n```\n\n----------------------------------------\n\nTITLE: Verifying IntelliJ Environment Variables in Mac/Linux\nDESCRIPTION: Shell command to inspect environment variables for a specific process by its Process ID (PID)\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/troubleshooting-ides/how-to-set-environment-variables-by-operating-system-for-ides-and-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nps eww -o command <PID> | tr ' ' '\\n'\n```\n\n----------------------------------------\n\nTITLE: Setting Credentials and Describing Infrastructure with GCP and Snyk CLI\nDESCRIPTION: This snippet configures environment variables needed to authenticate and execute the 'iac describe' command using the Snyk CLI on Google Cloud Platform. The command requires the GOOGLE_APPLICATION_CREDENTIALS and CLOUDSDK_CORE_PROJECT variables to be set, which authenticate the request using a service account. The input is a valid Google Cloud project and service account credentials file. The output is the infrastructure description retrieved from GCP. Dependencies include the Snyk CLI and access to the Google Cloud Asset API.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/configure-cloud-providers/configure-google-provider.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_APPLICATION_CREDENTIALS=your-creds.json \\\n  CLOUDSDK_CORE_PROJECT=my-project \\\n  snyk iac describe --to=\"gcp+tf\"\n```\n\n----------------------------------------\n\nTITLE: Risk Score Table - Exploit Maturity Impact\nDESCRIPTION: Markdown table showing how different exploit maturity levels affect the risk score impact subscore\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/risk-score.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Possible input value | Score impact                             |\n| -------------------- | ---------------------------------------- |\n| `No Known Exploit`   | Impact subscore decreases significantly. |\n| `Proof of Concept`   | Impact subscore decreases slightly.      |\n| `Functional`         | Impact subscore increases.               |\n| `High`               | Impact subscore increases significantly. |\n```\n\n----------------------------------------\n\nTITLE: Displaying Degradation Warning for Snyk CLI\nDESCRIPTION: This snippet displays a warning message when the Snyk CLI is running in a degraded state, indicating reduced functionality. It aims to inform users about the issue and guides them to further resources for resolution.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/install-or-update-the-snyk-cli/installing-snyk-cli-as-a-binary-using-npm.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n------------------------------ Warning -------------------------------\nYou are currently running a degraded version of the Snyk CLI.\nAs a result, some features of the CLI will be unavailable.\nFor information on how to resolve this, please see this article: https://docs.snyk.io/snyk-cli/installing-snyk-cli-as-a-binary-via-npm\nFor any assistance, please check http://support.snyk.io/.\n------------------------------- Warning -------------------------------\n```\n\n----------------------------------------\n\nTITLE: Identifying Generation of Error Message Containing Sensitive Information Vulnerabilities\nDESCRIPTION: This entry highlights issues concerning the generation of error messages that include sensitive information (CWE-209) in Go and XML applications, which can expose critical data to attackers.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Subsequent PVC Configuration\nDESCRIPTION: Updates existing PVC configuration for the Snyk monitor.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/optional-installation-steps-for-snyk-controller-with-helm.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install snyk-monitor snyk-charts/snyk-monitor \\\n             --namespace snyk-monitor \\\n             --set pvc.enabled=true \\\n             --set pvc.name=\"snyk-monitor-pvc\"\n```\n\n----------------------------------------\n\nTITLE: Container-Specific Template Customization Example\nDESCRIPTION: This example uses the `product_is_container` boolean variable to show customized messages in the PR description that pertain specifically to container-based projects.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_39\n\nLANGUAGE: plain\nCODE:\n```\ndescription: |\n  {{ #product_is_container }}\n  This Container PR has been opened to make sure our repositories are kept up-to-date.\n  It updates {{ package_name }} from version {{ package_from }} to version {{ package_to }}.\n  Review relevant docs for possible breaking changes.\n  {{ /product_is_container }}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Installation of Snyk Runtime Sensor - Kubernetes Bash\nDESCRIPTION: This command upgrades the existing Snyk runtime sensor installation with new configuration, allowing you to modify parameters as needed.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install <<SENSOR_REPO_NAME>> \\\n--set secretName=<<YOUR_SECRET_NAME>> \\\n--set clusterName=<<CLUSTER_NAME>> \\\n--set snykGroupId=<<YOUR_GROUP_ID>> \\\n-n snyk-runtime-sensor \\\nruntime-sensor/runtime-sensor\n```\n\n----------------------------------------\n\nTITLE: Node.js Image Migration Overview\nDESCRIPTION: Details migration paths for Node.js-based Snyk images from older versions to current LTS versions\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-images-guides-to-migration/snyk-images-migration.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* Deprecated: snyk/snyk:node-8 through snyk/snyk:node-16\n* Recommended: snyk/snyk:node, snyk/snyk:node-18, snyk/snyk:node-20, snyk/snyk:node-22\n```\n\n----------------------------------------\n\nTITLE: API Response: Package Metadata (JSON)\nDESCRIPTION: Example of how package metadata is represented in the API response, including package name, type, URL, and version.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/issues-list-issues-for-a-package.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"meta\": {\n    \"package\": {\n        \"name\": \"django\",\n        \"type\": \"pypi\",\n        \"url\": \"pkg:pypi/django@4.2.14\",\n        \"version\": \"4.2.14\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Indicating Policy-Based Ignore Status in Snyk\nDESCRIPTION: This snippet shows how Snyk marks issues that have been ignored by a security policy. This status is displayed when viewing ignored issues in the Snyk interface.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/security-policies/security-policy-actions.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`ignored by Security Policy`\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Contributors in GitLab\nDESCRIPTION: Runs snyk-scm-contributors-count with an exclusion file to ignore contributions from specified emails. The emails in the file should be newline-separated. Configuring this option helps refine the commit data by removing unwanted entries.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/gitlab-and-gitlab-server/gitlab-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n\"snyk-scm-contributors-count gitlab --token TOKEN --projectKeys ID1,ID2,Path1/Namespace1 --exclusionFilePath PATH_TO_FILE\\n\"\n```\n\n----------------------------------------\n\nTITLE: Assigning Roles Using Comma-Separated List in JSON\nDESCRIPTION: Alternative JSON structure for assigning multiple roles using a comma-separated list instead of an array in the 'roles' field.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-configuration/single-sign-on-sso-for-authentication-to-snyk/custom-mapping/legacy-custom-mapping.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"roles\": \"snyk-{orgslug}-admin,snyk-{orgslug2}-collaborator\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Previously Imported Repositories\nDESCRIPTION: Optional command to generate a log of previously imported repositories to avoid reimporting them in subsequent operations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-gitlab-organizations-and-repos-in-snyk.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import-macos list:imported --integrationType=gitlab --groupId=<snyk_group_id>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group Memberships with REST API\nDESCRIPTION: This code snippet shows how to get all memberships in a specified group using the GET method of the REST API. The method requires a Swagger JSON specification file. The `group_id` is a key parameter identifying the group whose memberships are being retrieved, and it returns a list of group memberships.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/groups.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"src\\\": \\\"../../.gitbook/assets/rest-spec.json\\\",\\n  \\\"path\\\": \\\"/groups/{group_id}/memberships\\\",\\n  \\\"method\\\": \\\"get\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: BitBucket Pipeline Configuration with Custom Snyk Image\nDESCRIPTION: YAML configuration for BitBucket pipeline using a custom Snyk image. Demonstrates how to specify the custom image and language variables for Snyk scanning in the pipeline.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/user-defined-custom-images-for-cli.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nscript:\n  - npm install\n  - npm test\n\n  - pipe: snyk/snyk-scan:1.0.0\n    variables:\n      SNYK_TOKEN: $SNYK_TOKEN\n      LANGUAGE: \"node-lts\"\n      SNYK_BASE_IMAGE: \"foobar/snyk\"\n\n# rest of script\n```\n\n----------------------------------------\n\nTITLE: Uploading Snyk Scan Results to GitHub Code Scanning with Gradle-jdk11 Action\nDESCRIPTION: This YAML configuration shows how to upload Snyk scan results to GitHub Code Scanning using the Snyk Gradle-jdk11 Action. It generates a SARIF file and uses the GitHub SARIF upload action. The continue-on-error option is used to ensure the upload step runs even if vulnerabilities are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-gradle-jdk11-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Gradle (jdk11) using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/gradle-jdk11@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Configuring Deeproxy Verification Endpoint for SNYK-AU-01\nDESCRIPTION: Configuration entry for values-customer-settings.yml to set the deeproxy verification endpoint for the SNYK-AU-01 region.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/working-with-snyk/regional-hosting-and-data-residency.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndeeproxy:\nverificationEndpoint: \"https://api.au.snyk.io/v1/validate/token/snyk-to-deepcode-proxy-validation\"\n```\n\n----------------------------------------\n\nTITLE: CLI Settings Location\nDESCRIPTION: Describes where the Snyk CLI settings are stored, including the API token and endpoint. The Visual Studio plugin utilizes these settings from the CLI configuration. The location is in the user's home directory under `.config/configstore`.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/visual-studio-extension/troubleshooting-and-known-issues-with-visual-studio-extension.md#2025-04-21_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n\"%HOME%/.config/configstore/snyk.json\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - CLI Import Ignore Rules\nDESCRIPTION: Table showing how different ignore methods are respected in UI and CLI/IDE tests for CLI-imported projects. Details support for Open Source, Container, and Code products.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/ignore-issues/how-ignores-work-for-projects-imported-using-an-scm-and-the-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **Import through the CLI and set ignore by available methods** | **Ignore respected in UI for testing** | **Ignore respected in CLI and IDE tests** |\n| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- | ----------------------------------------------------------------------------------- |\n| Ignore by policy | <p>Open Source: ✅</p><p>Container: ✅</p><p>Code: ❌</p> | <p>Open Source: ✅</p><p>Container: ✅</p><p>Code: ❌</p> |\n| Ignore by UI or API | <p>Open Source: ✅</p><p>Container: ✅</p><p>[Early Access] Code: ✅</p> | <p>Open Source: ✅</p><p>Container: ✅</p><p>[Early Access] Code: ✅ CLI    ❌ IDE </p> |\n| Ignore by `.snyk` file | <p>Open Source: ✅</p><p>Container: ✅</p><p>Code: ❌</p> | <p>Open Source: ✅</p><p>Container: ✅</p><p>Code: ❌</p> |\n```\n\n----------------------------------------\n\nTITLE: Identifying Improper Authentication Vulnerabilities\nDESCRIPTION: This entry covers improper authentication vulnerabilities (CWE-287) prevalent in Java, Kotlin, and Scala, which can enable unauthorized users to gain system access.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Using jq to Unescape JSON Response\nDESCRIPTION: Command to process the API response using jq, unescaping the JSON and saving it to a Terraform file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/google-cloud-integration/google-cloud-integration-api/step-1-download-service-account-iac-template-api.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n| jq -r .data.attributes.data > snyk_google_iac_template.tf\n```\n\n----------------------------------------\n\nTITLE: Output for Container Product Description\nDESCRIPTION: A template output for 'product_is_container' shows how the relevant PR description is rendered when dealing with container PRs, based on an applied JSON template.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nThis Container PR has been opened to fix vulnerabilities in your project\n```\n\n----------------------------------------\n\nTITLE: Setting kubectl Context for EKS Cluster\nDESCRIPTION: AWS CLI command to update the kubectl configuration for controlling the specified EKS cluster. This step is necessary before adding the Snyk Service Account Token.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\naws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION\n```\n\n----------------------------------------\n\nTITLE: Preparing Organization Data JSON for Bitbucket Cloud Import\nDESCRIPTION: JSON structure required for mapping Snyk Organization IDs and integration IDs to Bitbucket Cloud workspaces. This data is used as input for the import process.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/creating-import-targets-data-for-import-command.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"orgData\": [\n    {\n      \"name\": \"<workspace_name_in_bitbucket_cloud_used_to_list_repos>\",\n      \"orgId\": \"<snyk_org_id>\",\n      \"integrations\": {\n        \"bitbucket-cloud\": \"<snyk_org_integration_id>\"\n      }\n    },\n    {...}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Comparison Table for Analytics Features in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to create a table comparing the features of Issues Analytics and Application Analytics in Snyk.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/enterprise-analytics/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Issues Analytics                                                                                                                                                                                                                           | Application Analytics                                                                                                                                                                                                                                                                                              |\n| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| <ul><li>Data filtered by default on critical and high-severity issues.</li><li>Drill down to see the way that issues were introduced.</li><li>Issues framework: categorized based on Exposure, Manage, Prevention, and Coverage.</li></ul> | <ul><li>Data filtered based on assets, applications, and code owners (teams).</li><li>Helps you to identify and take action on risk, coverage gaps, and association gaps.</li><li>Asset class view</li><li>Application and owner view</li><li>Surface coverage gap</li><li>Comparison and prioritization</li></ul> |\n```\n\n----------------------------------------\n\nTITLE: Creating a New Client Secret - Request Body\nDESCRIPTION: This snippet captures the request body required to create a new client secret for a Snyk App. The body specifies the operation mode as 'create'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/manage-app-details.md#2025-04-21_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\"mode\": \"create\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Project Folder Location\nDESCRIPTION: Sets the root directory for the project being scanned. By default, uses the current directory.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/bitbucket-pipelines-integration-using-a-snyk-pipe/snyk-pipe-parameters-and-values-bitbucket-cloud.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nPROJECT_FOLDER: ./\n```\n\n----------------------------------------\n\nTITLE: Updating a Member's Role in a Snyk Organization\nDESCRIPTION: This HTTP PUT request updates the role of a specific user in a Snyk organization. The request body should contain the rolePublicId parameter with the role ID collected in the first step.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-admin/user-management-with-the-api/update-member-roles-using-the-api.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT https://api.snyk.io/v1/org/{orgId}/members/update/{userId}\n```\n\n----------------------------------------\n\nTITLE: GCP Cloud Storage Policy for Vulnerability Source Data\nDESCRIPTION: This snippet describes the cache retention period for vulnerability source data within Google Cloud Platform (GCP). For US (Default) tenants, the data is cached for 24 hours according to the Google Cloud Storage Policy.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/working-with-snyk/how-snyk-handles-your-data.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n\"<a href=\\\"https://cloud.google.com/storage/docs/lifecycle\\\"> Google Cloud Storage Policy</a>\"\n```\n\n----------------------------------------\n\nTITLE: Preparing Organization Data JSON for Bitbucket Server Import\nDESCRIPTION: JSON structure required for mapping Snyk Organization IDs and integration IDs to Bitbucket Server projects. This data is used as input for the import process.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/creating-import-targets-data-for-import-command.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"orgData\": [\n    {\n      \"name\": \"<project_name_in_bitbucket_server_used_to_list_repos>\",\n      \"orgId\": \"<snyk_org_id>\",\n      \"integrations\": {\n        \"bitbucket-server\": \"<snyk_org_integration_id>\"\n      }\n    },\n    {...}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Snyk Token for Authentication\nDESCRIPTION: Instructions for exporting the SNYK_TOKEN environment variable to authenticate with Snyk. This token is required to get contributors only for repos that are already monitored by Snyk.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-cloud/bitbucket-cloud-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport SNYK_TOKEN=<YOUR-SNYK-TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Binary Path Output from Snyk Plugin\nDESCRIPTION: This snippet shows the expected output of the Snyk plugin indicating the path of the `snyk-ls` binaries. This is useful for users who need to locate the binary for deletion or updates.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/troubleshooting-ides/force-use-of-the-latest-language-server.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[Info] Snyk Language Server path: /Users/matthew/Library/Application Support/snyk-ls/snyk-ls_darwin_amd64\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS Verification in Helm\nDESCRIPTION: Command to disable TLS rejection for troubleshooting SSL inspection issues.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/parameters-for-troubleshooting-and-providing-your-own-certificate-with-helm.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--set tlsRejectUnauthorized=disable\n```\n\n----------------------------------------\n\nTITLE: Video Embed Block\nDESCRIPTION: Markdown code block for embedding a video demonstration of coverage and coverage gap filters.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/assets-policies/use-cases-for-policies/coverage-and-coverage-gap-policies.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% embed url=\"https://res.cloudinary.com/snyk/video/upload/v1737656987/snyk-learn/product-training-videos/Snyk_Essentials_and_Snyk_AppRisk_-4b_-_v1_-_Coverage_vs_Coverage_Gap.mp4\" %}\nCoverage and coverage gap when filtering or creating asset policies\n{% endembed %}\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Ignore in Snyk CLI\nDESCRIPTION: Example command showing how to ignore a specific vulnerability using the Snyk CLI with an expiry date and reason.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/ignore-issues/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk ignore --id='npm:braces:20180219' --expiry='2018-04-01' --reason='testing'\n```\n\n----------------------------------------\n\nTITLE: Important Environment Variables for Development\nDESCRIPTION: Key environment variables used across different programming languages and development tools\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/troubleshooting-ides/how-to-set-environment-variables-by-operating-system-for-ides-and-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# CLI Environment Variables\nHTTP_PROXY\nHTTPS_PROXY\nNO_PROXY\nPATH\nJAVA_HOME\n\n# Java Proxy Variables\nhttp.proxyHost\nhttps.proxyHost\nhttp.proxyPort\nhttps.proxyPort\n\n# Golang Variables\nGOPATH\nGOROOT\n\n# Python Variable\nPYTHONPATH\n```\n\n----------------------------------------\n\nTITLE: Inserting Image with Caption in Markdown\nDESCRIPTION: This snippet demonstrates how to insert an image with a caption using Markdown syntax. It includes a reference to an image file and provides a descriptive caption for the Snyk AppRisk Issues page evidence graph detailed view.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/using-the-issues-ui-with-snyk-apprisk/evidence-graph.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<figure><img src=\"../../../.gitbook/assets/image (655).png\" alt=\"\"><figcaption><p>Snyk AppRisk - Issues page, Evidence graph detailed view</p></figcaption></figure>\n```\n\n----------------------------------------\n\nTITLE: Updating Group Membership with REST API\nDESCRIPTION: This snippet showcases how to update an existing group membership information using the PATCH method through the REST API. It requires the Swagger JSON specification, with parameters `group_id` and `membership_id` indicating the group and membership to be updated. It modifies details of the specified membership.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/groups.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"src\\\": \\\"../../.gitbook/assets/rest-spec.json\\\",\\n  \\\"path\\\": \\\"/groups/{group_id}/memberships/{membership_id}\\\",\\n  \\\"method\\\": \\\"patch\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Video for Snyk Essentials Issue Prioritization in Markdown\nDESCRIPTION: This snippet embeds a video tutorial explaining how to prioritize issues using Snyk Essentials. It uses a custom embed syntax specific to the documentation platform.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/prioritization-for-snyk-essentials.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% embed url=\"https://res.cloudinary.com/snyk/video/upload/v1737735579/snyk-learn/product-training-videos/Snyk_Essentials_and_Snyk_AppRisk_-_7a_-_v2_-_Issue_Prioritization_with_Snyk_Essentials.mp4\" %}\nPrioritizing issues with Snyk Essentials\n{% endembed %}\n```\n\n----------------------------------------\n\nTITLE: Setting Output to JSON Format - Command Line - Shell\nDESCRIPTION: This command outputs the contributor count in JSON format. It requires the GitHub token and the --json flag to be included in the command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/github/github-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsnyk-scm-contributors-count github --token TOKEN --json\n```\n\n----------------------------------------\n\nTITLE: Unsupported Credentials Matrix Example\nDESCRIPTION: Demonstrates an example of a credentials matrix that is not supported by the Broker Client. It shows how multiple pools would be combined if matrix support were implemented.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-snyk-broker-docker-installation/credential-pooling-with-docker-and-helm.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nUSERNAME_POOL=u1, u2, u3\nPASSWORD_POOL=p1, p2, p3\nCREDENTIALS_POOL=$USERNAME:$PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Snyk Patch Configuration\nDESCRIPTION: Example of a .snyk file configured to apply a security patch for the 'hawk' vulnerability in an npm package\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/the-.snyk-file.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\n# patches apply the minimum changes required to fix a vulnerability\npatch:\n  'npm:hawk:20160119':\n    - tap > codecov.io > request > hawk:\n        patched: '2020-01-20T14:26:34.404Z'\n```\n\n----------------------------------------\n\nTITLE: Updating Slack Notification Customization for a Project via REST API\nDESCRIPTION: API endpoint to update an existing Slack notification customization for a specific project. Requires org_id, bot_id, and project_id parameters.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/integrate-with-snyk/jira-and-slack-integrations/slack-app.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPATCH /orgs/{org_id}/slack_app/{bot_id}/projects/{project_id}\n```\n\n----------------------------------------\n\nTITLE: Manage Group Service Account Secret - POST Request\nDESCRIPTION: API endpoint to manage client secrets for oauth_client_secret service accounts in a Snyk Group.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/service-accounts/manage-service-accounts-using-the-snyk-api.md#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.snyk.io/rest/groups/{groupId}/service_accounts/{serviceAccountId}/secrets\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Trusted Folders in JavaScript\nDESCRIPTION: This snippet demonstrates how to provide an initial set of trusted folders in the 'initializationOptions' to automatically trust specific paths at startup, bypassing user prompts.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/snyk-language-server/README.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Set initial trusted folders in initialization options\nconst initializationOptions = {\n    trustedFolders: ['/trusted/path1', '/trusted/path2']\n};\n```\n\n----------------------------------------\n\nTITLE: API Version Naming Convention\nDESCRIPTION: Updated guidance on specifying API versions, recommending date-based identifiers without stability suffixes\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/rest-api/changelog.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nFor newer versions, you should only specify the date for beta versions, i.e `2024-10-15` rather than `2024-10-15~beta`\n```\n\n----------------------------------------\n\nTITLE: Output for Package Version From in YAML\nDESCRIPTION: A YAML snippet detailing the output format when 'package_from' is used in a PR template, highlighting the version update context where the 'from' version is communicated in the description.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nFix is applied by moving from 0.4.7\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Large Manifest Handling in Helm\nDESCRIPTION: This snippet shows how to add an environment variable to the Helm setup to allow Snyk to retrieve large manifest files using a different SCM endpoint. This enables scanning of repositories with large manifest files that might otherwise be skipped.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/snyk-open-source-scans-sca-of-large-manifest-files-helm-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n--set 'env[0].name=ACCEPT_LARGE_MANIFESTS' \\\n--set 'env[0].value=true'\n```\n\n----------------------------------------\n\nTITLE: Testing Managed and Unmanaged Java Projects for Vulnerabilities\nDESCRIPTION: To identify Log4Shell vulnerabilities in managed Java projects, use the `snyk test` command. For unmanaged files, the command `snyk test --scan-all-unmanaged` should be used to perform a comprehensive scan. Dependencies include having the Snyk CLI and relevant manifest files.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/log4shell.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test\n```\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --scan-all-unmanaged\n```\n\n----------------------------------------\n\nTITLE: Identifying Electron Insecure Web Preferences Vulnerabilities\nDESCRIPTION: This entry reviews insecure web preferences in electron applications (CWE-16), which can compromise user data and lead to exploitation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Updating Group Settings in Snyk API v1\nDESCRIPTION: Endpoint for modifying settings of a specific group using group ID\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/groups-v1.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n/group/{groupId}/settings\n```\n\n----------------------------------------\n\nTITLE: No code snippets found\nDESCRIPTION: This document contains only markdown text, configuration steps, and embedded videos. No actual code snippets are present.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/README.md#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Disabling TLS Certificate Verification in Docker Run Command\nDESCRIPTION: This code snippet shows how to add an environment variable to the Docker run command to disable TLS certificate verification. This is particularly useful when dealing with self-signed certificates.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-snyk-broker-docker-installation/disable-certificate-verification-with-docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-e NODE_TLS_REJECT_UNAUTHORIZED=0\n```\n\n----------------------------------------\n\nTITLE: Piping Helm Output to a File on Unix-based Systems\nDESCRIPTION: This snippet illustrates an alternative method for rendering Helm charts and scanning with Snyk by piping the output directly into a single YAML file. This approach aggregates the manifest files into one formatted output.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/helm-charts.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm template ./helm > output.yaml\nsnyk iac test output.yaml\n```\n\n----------------------------------------\n\nTITLE: Information Notice About Coverage Gap Filter\nDESCRIPTION: Markdown hint block explaining the distinction between Coverage and Coverage Gap filters.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/assets-policies/use-cases-for-policies/coverage-and-coverage-gap-policies.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"info\" %}\nThe Coverage Gap filter is not the opposite of the Coverage filter.&#x20;\n\nAn asset can be covered (if it was scanned a month ago) but, at the same time, can still have a coverage gap, if the requirement is a daily scan.\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Project Object Example\nDESCRIPTION: Detailed example of a project object in the webhook payload, showing all available fields and their structure.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/webhooks.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"project\": {\n  \"name\": \"snyk/goof\",\n  \"id\": \"af137b96-6966-46c1-826b-2e79ac49bbd9\",\n  \"created\": \"2018-10-29T09:50:54.014Z\",\n  \"origin\": \"github\",\n  \"type\": \"maven\",\n  \"readOnly\": false,\n  \"testFrequency\": \"daily\",\n  \"totalDependencies\": 42,\n  \"issueCountsBySeverity\": {\n    \"low\": 13,\n    \"medium\": 8,\n    \"high\": 4,\n    \"critical\": 5\n  },\n  \"imageId\": \"sha256:caf27325b298a6730837023a8a342699c8b7b388b8d878966b064a1320043019\",\n  \"imageTag\": \"latest\",\n  \"imageBaseImage\": \"alpine:3\",\n  \"imagePlatform\": \"linux/arm64\",\n  \"imageCluster\": \"Production\",\n  \"hostname\": null,\n  \"remoteRepoUrl\": \"https://github.com/snyk/goof.git\",\n  \"lastTestedDate\": \"2019-02-05T08:54:07.704Z\",\n  \"browseUrl\": \"https://app.snyk.io/org/4a18d42f-0706-4ad0-b127-24078731fbed/project/af137b96-6966-46c1-826b-2e79ac49bbd9\",\n  \"importingUser\": {\n    \"id\": \"e713cf94-bb02-4ea0-89d9-613cce0caed2\",\n    \"name\": \"example-user@snyk.io\",\n    \"username\": \"exampleUser\",\n    \"email\": \"example-user@snyk.io\"\n  },\n  \"isMonitored\": false,\n  \"branch\": null,\n  \"targetReference\": null,\n  \"tags\": [\n    {\n      \"key\": \"example-tag-key\",\n      \"value\": \"example-tag-value\"\n    }\n  ],\n  \"attributes\": {\n    \"criticality\": [\n      \"high\"\n    ],\n    \"environment\": [\n      \"backend\"\n    ],\n    \"lifecycle\": [\n      \"development\"\n    ]\n  },\n  \"remediation\": {\n    \"upgrade\": {},\n    \"patch\": {},\n    \"pin\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Issue Object Example\nDESCRIPTION: Detailed example of an issue object in the webhook payload, showing the structure of vulnerability-related data including CVSS scores, patches, and priority information.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/webhooks.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"npm:ms:20170412\",\n  \"issueType\": \"vuln\",\n  \"pkgName\": \"ms\",\n  \"pkgVersions\": [\n    \"1.0.0\"\n  ],\n  \"issueData\": {\n    \"id\": \"npm:ms:20170412\",\n    \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n    \"severity\": \"low\",\n    \"url\": \"https://snyk.io/vuln/npm:ms:20170412\",\n    \"description\": \"Lorem ipsum\",\n    \"identifiers\": {\n      \"CVE\": [],\n      \"CWE\": [\n        \"CWE-400\"\n      ],\n      \"ALTERNATIVE\": [\n        \"SNYK-JS-MS-10509\"\n      ]\n    },\n    \"credit\": [\n      \"Snyk Security Research Team\"\n    ],\n    \"exploitMaturity\": \"no-known-exploit\",\n    \"semver\": {\n      \"vulnerable\": [\n        \">=0.7.1 <2.0.0\"\n      ]\n    },\n    \"publicationTime\": \"2017-05-15T06:02:45Z\",\n    \"disclosureTime\": \"2017-04-11T21:00:00Z\",\n    \"CVSSv3\": \"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L\",\n    \"cvssScore\": 3.7,\n    \"language\": \"js\",\n    \"patches\": [\n      {\n        \"id\": \"patch:npm:ms:20170412:2\",\n        \"urls\": [\n          \"https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch\"\n        ],\n        \"version\": \"=0.7.1\",\n        \"comments\": [],\n        \"modificationTime\": \"2019-12-03T11:40:45.866206Z\"\n      }\n    ],\n    \"nearestFixedInVersion\": \"2.0.0\"\n  },\n  \"isPatched\": false,\n  \"isIgnored\": false,\n  \"fixInfo\": {\n    \"isUpgradable\": false,\n    \"isPinnable\": false,\n    \"isPatchable\": true,\n    \"nearestFixedInVersion\": \"2.0.0\"\n  },\n  \"priority\": {\n    \"score\": 399,\n    \"factors\": [\n      {\n        \"name\": \"isFixable\",\n        \"description\": \"Has a fix available\"\n      },\n      {\n        \"name\": \"cvssScore\",\n        \"description\": \"CVSS 3.7\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Organizations Data Structure for GitLab Import\nDESCRIPTION: JSON structure required to map GitLab groups to Snyk organizations and integration IDs. This data is needed as input to the import:data utility for GitLab imports.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/creating-import-targets-data-for-import-command.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"orgData\": [\n    {\n      \"name\": \"<group_name_in_gitlab_used_to_list_repos>\",\n      \"orgId\": \"<snyk_org_id>\",\n      \"integrations\": {\n        \"gitlab\": \"<snyk_org_integration_id>\",\n      },\n    },\n    {...}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Interfaces in TypeScript\nDESCRIPTION: This snippet defines TypeScript interfaces for managing database entries, focusing on authorization data structures. This lays the foundation for type safety when interacting with the database.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/interfaces/DB.ts\n\nexport interface DB {\n  installs: AuthData[];\n}\n\nexport interface AuthData {\n  date: Date;\n  userId: string;\n  orgId: string;\n  access_token: string;\n  expires_in: 3600;\n  scope: string;\n  token_type: string;\n  refresh_token: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS for Container Registry Agent with Docker\nDESCRIPTION: This snippet demonstrates how to configure the Container Registry Agent to run an HTTPS server by providing an SSL certificate and a private key to the Docker container. It mounts the folder containing the certificate and key files and uses the `HTTPS_CERT` and `HTTPS_KEY` environment variables to specify their locations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/snyk-broker-container-registry-agent/container-registry-agent-advanced-configuration-using-docker.md#2025-04-21_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker run --restart=always \\\n       -p 8081:8081 \\\n       -e SNYK_PORT=8081 \\\n       -e HTTPS_CERT=/private/container-registry-agent.crt \\\n       -e HTTPS_KEY=/private/container-registry-agent.key \\\n       snyk/container-registry-agent:latest\n```\n\n----------------------------------------\n\nTITLE: Custom Rule Metadata Configuration YAML\nDESCRIPTION: YAML structure for defining a custom security rule with metadata such as name, severity, description, CWE, and fix analysis\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/create-custom-rule.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Custom rule metadata template\nname: \"Custom Rule Name\"\nseverity: \"High\"\ndescription: \"Detailed description of the security issue\"\ncwe:\n  - \"CWE-XXX\"\nfix_analysis: \"Guidance for resolving the identified vulnerability\"\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk SDK with Docker\nDESCRIPTION: Explains how to use Docker to pull and run the Snyk SDK. Docker installation and capability to run Linux containers are required.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/install-the-sdk.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull snyk/snyk-iac-rules\ndocker run --rm -v $(pwd):/app snyk/snyk-iac-rules {SDK command}\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -v $(pwd):/app snyk/snyk-iac-rules template -r {rule_name}\n```\n\n----------------------------------------\n\nTITLE: Generating Import Files for Unmonitored Bitbucket Cloud Repositories\nDESCRIPTION: Command example for creating import files for repositories not yet monitored by Snyk by specifying an output directory and optionally filtering by repository type.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-cloud/bitbucket-cloud-examples.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count bitbucket-cloud --user USERNAME --password APP_PASSWORD --importConfDir ValidPathToFolder --importFileRepoType private/public/all\n```\n\n----------------------------------------\n\nTITLE: Validating Snyk Broker Configuration with Log Output\nDESCRIPTION: This output snippet illustrates successful broker server connection establishment and contains configuration checks for the Snyk Broker. It verifies the connection status and validates client URL and connection configurations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/snyk-broker-apprisk.md#2025-04-21_snippet_3\n\nLANGUAGE: docker\nCODE:\n```\n{\"id\":\"broker-client-url-validation\",\"name\":\"Broker Client URL Validation Check\",\"status\":\"passing\",\"output\":\"config check: ok\"},{\"id\":\"universal-broker-connections-config-validation\",\"name\":\"Universal Broker Client Connections Configuration Check\",\"status\":\"passing\",\"output\":\"connections config check: ok\"}],\"version\":\"4.179.5\",\"supportedIntegrationType\":\"apprisk\"},\"msg\":\"successfully established a websocket connection to the broker server\",\"time\":\"2024-03-11T11:43:26.014Z\",\"v\":0}\n```\n\n----------------------------------------\n\nTITLE: Defining System Properties in Maven Projects\nDESCRIPTION: Example of defining system properties for Maven projects that use property placeholders in pom.xml.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n${pkg_version}\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Snyk Repository Documentation\nDESCRIPTION: A markdown link directing users to the Snyk scan repository documentation for current usage examples.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/bitbucket-pipelines-integration-using-a-snyk-pipe/snyk-pipe-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[documentation](https://bitbucket.org/snyk/snyk-scan/src/develop/README.md)\n```\n\n----------------------------------------\n\nTITLE: Linking Snyk Project URL in PR Template\nDESCRIPTION: This JSON snippet specifies a pull request template with 'snyk_project_url' to insert a Snyk Project link in the PR description. Dependencies include accessing Snyk projects. It accepts JSON input, creating a PR description with a URL. The input format is JSON and the expected outcome is a descriptive string with the project URL.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"description\": \"To find more details, see the Snyk project {{ snyk_project_url }}\"\n            \n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Google SCC Integration Details with Snyk REST API\nDESCRIPTION: This curl command retrieves the existing Google Security Command Center integrations for a Snyk Group. It requires your Snyk Group ID and API token.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/integrate-with-snyk/event-forwarding/google-security-command-center.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location 'https://api.snyk.io/rest/groups/<SNYK_GROUP_ID>/cloud_events/group_registrations?version=2023-01-25~experimental' \\\n\n--header 'Authorization: token <SNYK_API_TOKEN>' \\\n\n--header 'Content-Type: application/vnd.api+json'\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple ARM JSON Files with Snyk CLI\nDESCRIPTION: Command to test multiple ARM JSON configuration files simultaneously for security issues using Snyk Infrastructure as Code CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/arm-files.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test file-1.json file-2.json\n```\n\n----------------------------------------\n\nTITLE: Testing Python Setup File\nDESCRIPTION: Command to run Snyk test on a Python setup.py file, which must be explicitly specified using the --file option\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/python/snyk-cli-for-python.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsnyk test --file=setup.py\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Secret Definition Example\nDESCRIPTION: Example YAML configuration for defining a Kubernetes secret with a broker token\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/kubernetes-secrets-and-helm-chart-installation.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: snyk-broker-secrets\ntype: Opaque\ndata:\n  org-x-broker-token: <broker-token-here>\n```\n\n----------------------------------------\n\nTITLE: Alternative Format for Role Assertions Using Comma-Separated String\nDESCRIPTION: An alternative way to provide role assertions using a comma-separated string instead of an array. This format is also supported by Snyk's custom mapping system.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/single-sign-on-sso-for-authentication-to-snyk/custom-mapping/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"roles\": \"snyk:group:*:group_viewer, snyk:org:development:org_admin, \nsnyk:org:test-org-N58YhztauHcaMiNfvi5fbL:custom:developer_readonly\"\n}\n```\n\n----------------------------------------\n\nTITLE: Go List Command for Dependency Analysis\nDESCRIPTION: Command used by Snyk to analyze Go module dependencies at the package level when using CLI scanning.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/go/go-for-open-source.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -json -deps ./...\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Version From in PR Template Using JSON\nDESCRIPTION: This JSON snippet adopts 'package_from' in a PR template to denote the original version of a package being upgraded. Dependencies involve understanding version histories of packages. The JSON input results in a string output updating from a given package version.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"description\": \"Fix is applied by moving from {{ package_from}}\"\n            \n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying PR Type in YAML Template\nDESCRIPTION: This YAML snippet is useful for identifying the type of pull request (e.g., fix, upgrade) by using the 'snyk_pull_request_type' variable in the description. The template replaces '{{ snyk_pull_request_type }}' with the actual PR type such as 'fix'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: |\n  This is a {{ snyk_pull_request_type }} pull request\n```\n\n----------------------------------------\n\nTITLE: Configure GitHub Action for PR Checks\nDESCRIPTION: This GitHub Actions workflow is configured to run unit tests on all non-`main` branches, specifically for pull requests. It sets up a Node.js environment, installs the `snyk-iac-rules` SDK, and executes unit tests using `snyk-iac-rules test`. If any tests fail, the PR check will also fail, preventing the merge of potentially broken rules.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/iac-custom-rules-within-a-pipeline.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"name: Test Custom Rules\\n\\non:\\n  push:\\n    branches:\\n      - '**'        # matches every branch\\n      - '!main'     # excludes main\\n\\njobs:\\n  unit_test:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v2\\n\\n      - uses: actions/setup-node@v1\\n        with:\\n          node-version: 15\\n\\n      - name: Install snyk-iac-rules\\n        run: npm i -g snyk-iac-rules\\n\\n      - name: Run unit tests\\n        run: snyk-iac-rules test\\n\"\n```\n\n----------------------------------------\n\nTITLE: Building Flutter Apps for Native Dependency Scanning\nDESCRIPTION: These commands build Flutter applications for different platforms (Android, iOS, macOS) in debug mode. Building the application ensures that all native platform dependencies are fetched and linked, making them available for scanning.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/dart-and-flutter.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n\"flutter build apk --debug\nflutter build ios --debug --no-codesign\nflutter build macos --debug\"\n```\n\n----------------------------------------\n\nTITLE: Executing GitHub Import Data Generation Commands\nDESCRIPTION: Command line instructions to run the import:data utility for GitHub.com and GitHub Enterprise. These commands generate the import data needed for the Snyk import command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/creating-import-targets-data-for-import-command.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=snyk* GITHUB_TOKEN=*** SNYK_TOKEN=*** snyk-api-import import:data --orgsData=path/to/snyk-orgs.json --source=github --integrationType=github\n```\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=snyk* GITHUB_TOKEN=*** SNYK_TOKEN=*** snyk-api-import import:data --orgsData=path/to/snyk-orgs.json --source=github-enterprise --integrationType=github-enterprise --sourceUrl=https://ghe.custom.com\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Project Settings\nDESCRIPTION: TypeScript configuration file (tsconfig.json) that specifies compilation options including ES6 target, module system, and output directory settings.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"module\": \"commonjs\",\n    \"declaration\": true,\n    \"sourceMap\": true,\n    \"moduleResolution\": \"node\",\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true\n  },\n  \"exclude\": [\n    \"./tests\",\n    \"./dist\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running License Compliance Check with Snyk CLI\nDESCRIPTION: Example of running a Snyk license compliance test using the Snyk CLI tool. The command 'snyk test' scans projects for both security vulnerabilities and license issues.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-open-source/scan-open-source-libraries-and-licenses/snyk-license-compliance-management.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test\n```\n\n----------------------------------------\n\nTITLE: Ant Task for Converting Ivy Dependencies to Maven POM Format\nDESCRIPTION: Ant task for generating a Maven POM file from Ivy dependencies, which enables compatibility with Snyk scanning tools.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"makepom\" depends=\"resolve-dependencies\">\n    <ivy:makepom ivyfile=\"${basedir}/ivy.xml\" pomfile=\"${basedir}/pom.xml\" conf=\"default,runtime\">\n        <mapping conf=\"default\" scope=\"compile\"/>\n        <mapping conf=\"runtime\" scope=\"runtime\"/>\n    </ivy:makepom>\n</target>\n```\n\n----------------------------------------\n\nTITLE: Example Role Mapping for Engineering Team\nDESCRIPTION: JSON structure example for assigning multiple roles to the Engineering team across different Organizations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-configuration/single-sign-on-sso-for-authentication-to-snyk/custom-mapping/legacy-custom-mapping.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"roles\": [\n        \"snyk-application-securityscanner1-admin\",\n        \"snyk-partner-plugins-admin\",\n        \"snyk-application-payments-collaborator\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Group Viewer Role in JSON\nDESCRIPTION: JSON structure for assigning users with the Group Viewer role using the 'roles' array in SAML attributes or OIDC claims.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-configuration/single-sign-on-sso-for-authentication-to-snyk/custom-mapping/legacy-custom-mapping.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"roles\": [\n        \"snyk-groupviewer\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Serverless Artifacts\nDESCRIPTION: Command to package Serverless configuration files into artifacts for testing. Creates CloudFormation JSON format files in a specified output directory.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/serverless-files.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverless package --package serverless-artifacts\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk SDK with Homebrew\nDESCRIPTION: Describes how to install the Snyk SDK on macOS or Linux using Homebrew. Users must have Homebrew installed first.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/install-the-sdk.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbrew tap snyk/tap\nbrew install snyk-iac-rules\n```\n\n----------------------------------------\n\nTITLE: Installing snyk-api-import with npm\nDESCRIPTION: Command to install the snyk-api-import CLI globally using npm package manager.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install snyk-api-import@latest -g\n```\n\n----------------------------------------\n\nTITLE: Integrating Universal Broker Connections\nDESCRIPTION: Command to integrate an existing connection with a Snyk organization. This is the final step in setting up a working connection.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/setting-up-and-integrating-your-universal-broker-connections.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-broker-config workflows connections integrate\n```\n\n----------------------------------------\n\nTITLE: Angular-style Commit Message Format Example in Markdown\nDESCRIPTION: An example of the required Angular-style commit message format for the project, showing a fix type commit with a brief description.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/contributing-to-snyk-api-import.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfix: minified scripts being removed\n\nAlso includes tests\n```\n\n----------------------------------------\n\nTITLE: Monitoring .NET Projects with Custom Asset Project Name\nDESCRIPTION: This specifies a name for the assets project when monitoring a .NET project using NuGet's `PackageReference`.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/monitor.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--assets-project-name\n```\n\n----------------------------------------\n\nTITLE: ECR Login Configuration\nDESCRIPTION: JSON configuration file for Docker credentials store using ECR login.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/install-the-snyk-controller-on-amazon-elastic-kubernetes-service-amazon-eks.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credsStore\": \"ecr-login\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example setting Snyk Organization via CLI using Org ID\nDESCRIPTION: This snippet provides an example of setting the default Snyk Organization using the Organization ID. It requires the Snyk CLI to be installed and assumes a valid Organization ID is provided. This sets the specified Organization as the default for all subsequent CLI tests.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/set-the-snyk-organization-for-the-cli-tests.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nsnyk config set org=a7708807-3881-xxxx-xxxx-xxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Testing Projects for High Severity Issues\nDESCRIPTION: Command to test all projects for vulnerabilities with a severity threshold set to high. This configuration will fail the build if high severity issues are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/snyk-test-and-snyk-monitor-in-ci-cd-integration.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --all-projects --org=snyk-apps --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Handling Inconsistent Tag Formats\nDESCRIPTION: This regex is designed to accommodate repositories with varying tag formats, ensuring that optional components are correctly considered while validating container image tags.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/use-snyk-container/use-custom-base-image-recommendations/custom-versioning-schema-for-custom-base-images.md#2025-04-21_snippet_4\n\nLANGUAGE: regex\nCODE:\n```\n(?<C0>\\d+)\\.(?<C1>\\d+)(?:\\.(?<C2>\\d+))?\n```\n\n----------------------------------------\n\nTITLE: Updating App Details - HTTP PATCH Request\nDESCRIPTION: This snippet illustrates how to update the name or redirect URIs of an existing Snyk App via a PATCH request. The request must include the app ID in the URL.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/manage-app-details.md#2025-04-21_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nPATCH https://api.snyk.io/rest/orgs/{orgId}/apps/creations{app_id}?version={version}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Completion Output\nDESCRIPTION: Output structure printed after successful application of the Terraform configuration. It provides important identifiers such as the service account email and identity provider needed for further steps.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/google-cloud-integration/google-cloud-integration-web-ui/step-2-create-the-google-service-account-web-ui.md#2025-04-21_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nApply complete! Resources: 22 added, 0 changed, 0 destroyed.\n\nOutputs:\n\nservice_account_email = \"snyk-cloud-mt-us-abcd1234@my-project.iam.gserviceaccount.com\"\nidentity_provider = \"https://iam.googleapis.com/projects/12345567/locations/global/workloadIdentityPools/workload-identity-123456/providers/identity-provider-123456\"\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Rules Bundle with Custom Entrypoint\nDESCRIPTION: This command builds a custom rules bundle and overrides the default entry point. It uses the `--entrypoint` option to specify the package and function name to be used as the entry point for the rules.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/bundling-rules.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n```\nsnyk-iac-rules build --entrypoint \"<package name>/<function name>\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk Language Server in Sublime Text\nDESCRIPTION: This JSON configuration snippet sets up the Snyk Language Server in Sublime Text. It defines the command, log level, and initialization options necessary to integrate Snyk for real-time vulnerability scanning. Dependencies include the Snyk Language Server binary and a valid Snyk Token.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/snyk-language-server/example-configurations-for-snyk-language-server.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"show_view_status\": true,\n  \"clients\": {\n    \"snyk\": {\n      \"enabled\": true,\n      \"command\": [\n        \"/usr/local/bin/snyk-ls\", \n        \"-l\", \n        \"info\", \n        \"-f\", \n        \"/path/to/log/dir/snyk-ls-sublime.log\"\n      ],\n      \"selector\": \"source\",\n      \"initializationOptions\": {\n        \"activateSnykCode\":\"true\",\n        \"token\": \"xxx\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Snyk Environments via API\nDESCRIPTION: This code snippet shows how to retrieve a list of environments from Snyk using the API.  It requires setting the `YOUR-ORGANIZATION-ID` and `YOUR-API-TOKEN` appropriately.  The response will be a JSON object containing the environment data.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/getting-started-with-cloud-scans/manage-cloud-environments/find-an-environment-id.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/environments?version=2022-12-21~beta' \\\n  -H 'Authorization: token YOUR-API-TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Versioning Custom Rules via Tagging in GitHub Actions\nDESCRIPTION: This code snippet shows how to publish experimental versions of custom rules using tagging in a GitHub Actions workflow.  It pushes the same bundle to different tags in the OCI registry, allowing for trialing new rules without impacting existing CI/CD pipelines. The workflow uses the `snyk-iac-rules push` command and environment variables to specify the registry and tag.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/iac-custom-rules-within-a-pipeline.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"      - name: Publish experimental rules\\n        run: snyk-iac-rules push --registry $OCI_REGISTRY_URL bundle.tar.gz\\n        env:\\n          OCI_REGISTRY_URL: \"${{ secrets.OCI_REGISTRY_NAME }}:v1\"\\n      - name: Publish rules\\n        run: snyk-iac-rules push --registry $OCI_REGISTRY_URL bundle.tar.gz\\n        env:\\n          OCI_REGISTRY_URL: \"${{ secrets.OCI_REGISTRY_NAME }}:v2-beta\"\\n\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Controller for Snyk OAuth2 in TypeScript\nDESCRIPTION: This code defines the CallbackController class which handles the /callback route and its sub-routes for successful and failed authentication in the Snyk OAuth2 process.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/routes/callback/callbackController.ts\n\nimport type { Controller } from 'interfaces/Controller';\nimport type { NextFunction, Request, Response } from 'express';\nimport { Router } from 'express';\n\nexport class CallbackController implements Controller {\n  public path = '/callback';\n  public router: Router = Router();\n\n  constructor() {\n    this.initRoutes();\n  }\n\n  private initRoutes() {\n    // Path to handle the result of authentication flow or the callback/redirect_uri\n    this.router.get(`${this.path}`, this.passportAuthenticate());\n    // Path to handle success, same as what we pass to passport\n    this.router.get(`${this.path}/success`, this.success);\n    // Path to handle failure, same as what we pass to passport\n    this.router.get(`${this.path}/failure`, this.failure);\n  }\n  \n  private passportAuthenticate() {\n    return passport.authenticate('snyk-oauth2', {\n      successRedirect: '/callback/success',\n      failureRedirect: '/callback/failure',\n    });\n  }\n\n  private success(req: Request, res: Response, next: NextFunction) {\n    // return res.render('callback');\n    return res.send('SUCCESS!');\n  }\n\n  private failure(req: Request, res: Response, next: NextFunction) {\n    // return next(new HttpException(401, 'Authentication failed'));\n  }\n}\n\nexport default CallbackController;\n```\n\n----------------------------------------\n\nTITLE: Constructing a Snyk Dependency Graph from Bazel Project\nDESCRIPTION: JSON representation of a Snyk Dependency Graph created from a Bazel project. The graph shows a root application with a single dependency on logback-core, formatted according to Snyk's schema version 1.2.0.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-open-source/snyk-for-bazel/example-of-snyk-for-bazel.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"depGraph\": {\n    \"schemaVersion\": \"1.2.0\",\n    \"pkgManager\": {\n      \"name\": \"maven\"\n    },\n    \"pkgs\": [\n      {\n        \"id\": \"app@1.0.0\",\n        \"info\": {\n          \"name\": \"app\",\n          \"version\": \"1.0.0\"\n        }\n      },\n      {\n        \"id\": \"ch.qos.logback:logback-core@1.0.13\",\n        \"info\": {\n          \"name\": \"ch.qos.logback:logback-core\",\n          \"version\": \"1.0.13\"\n        }\n      }\n    ],\n    \"graph\": {\n      \"rootNodeId\": \"root-node\",\n      \"nodes\": [\n        {\n          \"nodeId\": \"root-node\",\n          \"pkgId\": \"app@1.0.0\",\n          \"deps\": [\n            {\n              \"nodeId\": \"ch.qos.logback:logback-core@1.0.13\"\n            }\n          ]\n        },\n        {\n          \"nodeId\": \"ch.qos.logback:logback-core@1.0.13\",\n          \"pkgId\": \"ch.qos.logback:logback-core@1.0.13\",\n          \"deps\": []\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Info Hint for Feature Availability in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to create an information hint box, advising users to refer to the product documentation for the latest information on feature availability.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/enterprise-analytics/README.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"info\" %}\nThe specific features and availability of both products may vary as they continue to evolve. For the latest information, refer to the respective product documentation.\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Ruby Vulnerability in .snyk File\nDESCRIPTION: Complete example of a .snyk policy file ignoring a specific vulnerability in a Ruby package with expiration date and reason.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/ignore-issues/README.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v1.5.0\nignore:\n    'SNYK-RUBY-FASTREADER-20085':\n     - '* > fastreader':\n        reason: 'No fix available'\n        expires: '2024-01-01T00:00:00.000Z'\n```\n\n----------------------------------------\n\nTITLE: SBOM Test Run Response JSON\nDESCRIPTION: This snippet shows the expected JSON response after creating an SBOM test run. It includes the job_id which is used for subsequent API calls to check status and retrieve results.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/sbom-apis/rest-api-endpoint-test-an-sbom-document-for-vulnerabilities.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"id\": \"<JOB_ID>\",\n        \"type\": \"sbom_tests\"\n    },\n    \"jsonapi\": {\n        \"version\": \"1.0\"\n    },\n    \"links\": {\n        \"self\": \"/rest/orgs/<ORG_ID>/sbom_tests?version=2023-08-31~beta\",\n        \"related\": \"/rest/orgs/<ORG_ID>/sbom_tests/<JOB_ID>?version=2023-08-31~beta\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Final Information Notice\nDESCRIPTION: Markdown hint block about coverage and coverage gap filters for image assets.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/assets-policies/use-cases-for-policies/coverage-and-coverage-gap-policies.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"info\" %}\nYou can use the Coverage and Coverage gap filters to monitor coverage and coverage gaps of image assets. This provides a more complete view of the risks of the assets and the capability to take action when needed.\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Terraform Resource - Denied Redshift Cluster\nDESCRIPTION: This Terraform configuration defines an `aws_redshift_cluster` resource named \"denied\" without any tags. This example is intended to represent a configuration that should be flagged as non-compliant by a Rego rule that enforces tagging.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/testing-a-rule.md#2025-04-21_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\n\"resource \\\"aws_redshift_cluster\\\" \\\"denied\\\" {\\n  cluster_identifier = \\\"tf-redshift-cluster\\\"\\n  database_name      = \\\"mydb\\\"\\n  master_username    = \\\"foo\\\"\\n  master_password    = \\\"Mustbe8characters\\\"\\n  node_type          = \\\"dc1.large\\\"\\n  cluster_type       = \\\"single-node\\\"\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving SBOM Test Run Results with Snyk REST API\nDESCRIPTION: This curl command shows how to retrieve the results of a completed SBOM test run using the Snyk REST API. It requires the organization ID and the job ID from the initial create test run request.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/sbom-apis/rest-api-endpoint-test-an-sbom-document-for-vulnerabilities.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \\\n    -H \"Authorization: token <SNYK_TOKEN>\" \\\n    'https://api.snyk.io/rest/orgs/<ORG_ID>/sbom_tests/<TEST_ID>/results?version=2023-08-31~beta'\n```\n\n----------------------------------------\n\nTITLE: Creating Response Interceptor for Handling 401 Errors\nDESCRIPTION: This snippet defines the `refreshTokenRespInterceptor` function that handles Axios response errors. It refreshes the access token if a 401 Unauthorized error is detected and retries the request with the new token.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/util/interceptors.ts\n\n...\n\nexport async function refreshTokenRespInterceptor(error: AxiosError): Promise<AxiosError> {\n  const status = error.response ? error.response.status: null;\n  // Only refresh & retry the token on 401 Unauthorized, in case the access-token is\n  //  invalidated before it expires, such as the signing key being rotated in an emergency.\n  if (status === 401) {\n    // Read the latest data(auth token, refresh token and expiry)\n    const db = await readFromDb();\n    const data = mostRecent(db.installs);\n    // If no data then fail the retry\n    if (!data) return Promise.reject(error);\n    \n    const newAccessToken = await refreshAndUpdateDb(data);\n    \n    // Use the new access token to retry the failed request\n    error.config.headers['Authorization'] = `${data.token_type} ${newAccessToken}`;\n    return axios.request(error.config);\n  }\n  \n  return Promise.reject(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CloudTrail Lake Integration for Snyk Group via REST API\nDESCRIPTION: This curl command creates a group-level registration for AWS CloudTrail Lake integration. It sends a POST request to the Snyk API endpoint that configures the integration for a Snyk Group and all its child Organizations, requiring the group ID, API token, integration name, AWS account ID, and Channel ARN.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/integrate-with-snyk/event-forwarding/aws-cloudtrail-lake.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location --request POST 'https://api.snyk.io/rest/groups/<YOUR GROUP ID>/cloud_events/group_registrations?version=2023-01-25~experimental' \\\n--header 'Content-Type: application/vnd.api+json' \\\n--header 'Authorization: token <YOUR SNYK API TOKEN>' \\\n--data-raw '{\n    \"data\": {\n        \"type\": \"group_registration\",\n        \"attributes\": {\n            \"type\": \"aws-cloudtrail\",\n            \"name\": \"<NAME YOUR INTEGRATION>\",\n            \"config\": {\n                \"account_id\": \"<YOUR AWS ACCOUNT ID>\",\n                \"channel_arn\": \"<CHANNEL ARN FROM PREVIOUS STEP>\"\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Maven Package Reference Format\nDESCRIPTION: Package reference format for testing Maven applications in Snyk\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npkg:maven\n```\n\n----------------------------------------\n\nTITLE: Identifying Improper Code Sanitization Vulnerabilities\nDESCRIPTION: This entry covers improper code sanitization vulnerabilities (CWE-116, CWE-79, CWE-94) relevant to JavaScript applications. Failing to properly sanitize code can allow various types of attacks, including XSS.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Setting Default Organization for Snyk CLI\nDESCRIPTION: Configure the default Snyk organization for all CLI operations, which can be used in subsequent SBOM generations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/sbom.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk config set org=<ORG_ID>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - SCM Import Ignore Rules\nDESCRIPTION: Table showing how different ignore methods are respected in UI and CLI/IDE tests for SCM-imported projects. Details support for Open Source, Container, and Code products.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/ignore-issues/how-ignores-work-for-projects-imported-using-an-scm-and-the-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Import through an SCM and set ignore by available methods** | **Ignore respected in UI for testing** | **Ignore respected in CLI and IDE tests** |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------ | ------------------------------------------------------ |\n| Ignore by policy (add ignore commands to your security policies) | <p>Open Source: ✅<br>Container: ✅</p><p>Code: ❌</p> | <p>Open Source: ✅</p><p>Container: ✅</p><p>Code: ❌</p> |\n| Ignore by UI or API | <p>Open Source: ✅</p><p>Container: ✅</p><p>Code: ✅</p> | <p>Open Source: ❌</p><p>Container: ❌</p><p>Code: ❌</p> |\n| Ignore by `.snyk` file | <p>Open Source: ✅</p><p>Container: ✅</p><p>Code: ❌</p> | <p>Open Source: ✅</p><p>Container: ✅</p><p>Code: ❌</p> |\n```\n\n----------------------------------------\n\nTITLE: Parsing HCL2 Files with Rego Builtin\nDESCRIPTION: A custom Rego function that takes a file path and converts HCL2 formatted content to JSON. Used in testing frameworks to simplify fixture generation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/custom-rego-builtins.md#2025-04-21_snippet_0\n\nLANGUAGE: rego\nCODE:\n```\nhcl2.unmarshal_file\n```\n\n----------------------------------------\n\nTITLE: Configuring JQL for Automated Vulnerability Ticket Closure in Jira\nDESCRIPTION: This JQL query is used in a scheduled Jira automation rule to identify tickets for closed vulnerabilities that are not yet marked as Done. It helps in automating the closure of resolved vulnerability tickets.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/integrate-with-snyk/jira-and-slack-integrations/snyk-security-in-jira-cloud-integration.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nstatus != Done AND vulnerability[status] = CLOSED\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Run Command for Snyk Broker with GitHub Enterprise\nDESCRIPTION: This Docker run command sets up a fully configured Broker Client for analyzing Open Source, IaC, Container, Code files, and Snyk Essentials information with GitHub Enterprise. It includes essential environment variables and port mappings.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/github-enterprise-prerequisites-and-steps-to-install-and-configure-broker/github-enterprise-install-and-configure-using-docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --restart=always \\\n           -p 8000:8000 \\\n           -e BROKER_TOKEN=<secret-broker-token> \\\n           -e BROKER_SERVER_URL=<broker-region-url> \\\n           -e GITHUB_TOKEN=<secret-github-token> \\\n           -e GITHUB=<your.ghe.domain.com (no http/s)> \\\n           -e GITHUB_API=<your.ghe.domain.com/api/v3 (no http/s)> \\\n           -e GITHUB_GRAPHQL=<your.ghe.domain.com/api (no http/s)> \\\n           -e PORT=8000 \\\n           -e BROKER_CLIENT_URL=<http://broker.url.example:8000 (dns/IP:port)> \\\n           -e ACCEPT_IAC=tf,yaml,yml,json,tpl \\\n           -e ACCEPT_CODE=true \\\n           -e ACCEPT_ESSENTIALS=true \\\n       snyk/broker:github-enterprise\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom PR Template with JSON in Snyk API\nDESCRIPTION: This JSON template example shows how to structure a custom pull request template for Snyk API integration. It demonstrates the use of variables like snyk_pull_request_type, package_name, package_from, package_to, issue_count, snyk_project_url, snyk_project_name, and snyk_org_name to create dynamic PR titles, commit messages, and descriptions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/examples-and-template-validation.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"title\": \"[{{ snyk_pull_request_type }}] for {{ package_name }}\",\n            \"commit_message\": \"{{ snyk_pull_request_type}}: for {{ package_name }}\",\n            \"description\": \"Moving package {{ package_name }} from {{ package_from }} to {{ package_to }}\\nFixes {{ issue_count }} issues\\nFor more details see {{ snyk_project_url }}\\nProject {{ snyk_project_name }}\\nOrg {{ snyk_org_name }}\"\n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Image Migration Strategy\nDESCRIPTION: Provides migration guidance for Python-based Snyk images from older versions to current supported versions\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-images-guides-to-migration/snyk-images-migration.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* Deprecated: snyk/snyk:python-2.7, snyk/snyk:python-3.6, snyk/snyk:python-3.7\n* Recommended: snyk/snyk:python, snyk/snyk:python-alpine, snyk/snyk:python-3.8/3.9/3.10/3.11\n```\n\n----------------------------------------\n\nTITLE: Ensuring Dependencies for Go Projects\nDESCRIPTION: For Go projects using dep, run this command to ensure and fetch dependencies before testing with Snyk CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/open-source-projects-that-must-be-built-before-testing-with-the-snyk-cli.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndep ensure\n```\n\n----------------------------------------\n\nTITLE: Showing Command Options for Snyk CLI with GitLab\nDESCRIPTION: This snippet lists the available options when executing the snyk-scm-contributors-count command tailored for GitLab. It highlights the main flags required such as token and optional settings like URL, groups, and json format. These options help tailor the command execution for GitLab environments.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/gitlab-and-gitlab-server/gitlab-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"\\n  --version                 Show version number                        [boolean]\\n  --help                    Show help                                  [boolean]\\n  --token                   GitLab token                               [required]\\n  --url                     [Optional] Your GitLab host custom URL. If no host was provided\\n                            it will default to https://gitlab.com/\\n  --groups                  [Optional] Your Gitlab groups names to count contributors for \\n                            *note* for sub-level groups, provide the lowest level group name\\n  --project                 [Optional] Your GitLab project path with namespaces to count contributors for\\n  --exclusionFilePath       [Optional] Exclusion list filepath\\n  --json                    [Optional] JSON output, required when using the \\\"consolidateResults\\\" command\\n\"\n```\n\n----------------------------------------\n\nTITLE: Metadata Tag Rules Table in Markdown\nDESCRIPTION: A markdown table defining the tag rules related to metadata in Snyk Essentials, showing the relationship between rules and their corresponding tags.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-assets/assets-inventory-components.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Rule                                                                  | Tag               |\n| --------------------------------------------------------------------- | ----------------- |\n| Snyk Essentials found technologies in use.                            | `< technologies>` |\n| Snyk Essentials found languages from the SCM.                         | `<languages>`     |\n| Snyk Essentials detected a new repository created in the last 7 days. | `new repository`  |\n| Snyk Essentials found the code Project with the code owner.           | `codeowners`      |\n```\n\n----------------------------------------\n\nTITLE: Integrating Universal Broker Connection\nDESCRIPTION: Command to integrate a Universal Broker connection with a test organization using existing credentials\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/upgrade-an-organization-integration-from-classic-broker-to-universal-broker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-broker-config workflows connections integrate\n```\n\n----------------------------------------\n\nTITLE: Retrieving Slack Channels using REST API\nDESCRIPTION: This Swagger UI block describes the GET endpoint for retrieving Slack channels for a specific organization and tenant.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/slack.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/orgs/{org_id}/slack_app/{tenant_id}/channels\" method=\"get\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn Dependencies for JavaScript Projects\nDESCRIPTION: For Yarn projects without a yarn.lock file, run this command to generate the lockfile and install dependencies before testing with Snyk CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/open-source-projects-that-must-be-built-before-testing-with-the-snyk-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Skipping Snyk Monitored Repos Check\nDESCRIPTION: Command to retrieve commit information for all repositories in Azure DevOps regardless of whether they are monitored by Snyk, using the skipSnykMonitoredRepos flag.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/azure-devops/azure-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count azure-devops --token AZURE-TOKEN --org AZURE-ORG --skipSnykMonitoredRepos\n```\n\n----------------------------------------\n\nTITLE: Generated Rego Rule Test\nDESCRIPTION: This Rego snippet outlines a test for the newly defined rule. It incorporates allowed and denied test cases to validate that the rule accurately produces the expected 'msg' field based on different fixture files.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/writing-a-rule.md#2025-04-21_snippet_2\n\nLANGUAGE: rego\nCODE:\n```\npackage rules\n\nimport data.lib\nimport data.lib.testing\n\ntest_NEW_RULE {\n\t# array containing test cases where the rule is allowed\n\tallowed_test_cases := [{\n\t\t\"want_msgs\": [],\n\t\t\"fixture\": \"allowed.tf\",\n\t}]\n\n\t# array containing cases where the rule is denied\n\tdenied_test_cases := [{\n\t\t\"want_msgs\": [\"input.resource.test[denied].todo\"], # verifies that the correct msg is returned by the denied rule\n\t\t\"fixture\": \"denied.tf\",\n\t}]\n\n\ttest_cases := array.concat(allowed_test_cases, denied_test_cases)\n\ttesting.evaluate_test_cases(\"NEW-RULE\", \"./rules/NEW-RULE/fixtures\", test_cases)\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Snyk Broker with New Service Account - Helm CLI\nDESCRIPTION: Helm command to deploy a Snyk Broker instance while creating a new service account in the namespace. Requires broker token, SCM token, and broker client URL configuration.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/deploying-multiple-brokers-in-the-same-namespace.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install <ENTER_UNIQUE_CHART_NAME> snyk-broker/snyk-broker \\\n             --set scmType=github-com \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set scmToken=<ENTER_REPO_TOKEN> \\\n             --set brokerClientUrl=<ENTER_BROKER_CLIENT_URL>:<ENTER_BROKER_CLIENT_PORT> \\\n             --set serviceAccount.name=<NEW_SERVICE_ACCOUNT_TO_BE_CREATED> \\\n             -n <EXISTING_NAMESPACE>\n```\n\n----------------------------------------\n\nTITLE: Defining Organizations Data Structure for Azure Repos Import\nDESCRIPTION: JSON structure required to map Azure organizations to Snyk organizations and integration IDs. This data is needed as input to the import:data utility for Azure Repos imports using Azure API v1.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/creating-import-targets-data-for-import-command.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"orgData\": [\n    {\n      \"name\": \"<org_name_in_azure_used_to_list_repos>\",\n      \"orgId\": \"<snyk_org_id>\",\n      \"integrations\": {\n        \"azure-repos\": \"<snyk_org_integration_id>\",\n      },\n    },\n    {...}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Snyk Docker Action with GitHub Code Scanning in YAML\nDESCRIPTION: This workflow demonstrates how to use the Snyk Docker Action and upload results to GitHub Code Scanning. It includes steps for building a Docker image, running Snyk analysis, and uploading the SARIF file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-docker-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Snyk Container\non: push\njobs:\n  snyk:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Build a Docker image\n      run: docker build -t your/image-to-test .\n    - name: Run Snyk to check Docker image for vulnerabilities\n      continue-on-error: true\n      uses: snyk/actions/docker@master\n      env:\n        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n      with:\n        image: your/image-to-test\n        args: --file=Dockerfile\n    - name: Upload result to GitHub Code Scanning\n      uses: github/codeql-action/upload-sarif@v3\n      with:\n        sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Creating a Snyk App with CURL\nDESCRIPTION: This CURL command sends a POST request to create a new Snyk App for an organization. It includes the necessary headers and a JSON payload with the App's details such as name, context, redirect URIs, and scopes.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/create-a-snyk-app-using-the-snyk-api.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L \\\n  --request POST \\\n  --url 'https://api.snyk.io/rest/orgs/{org_id}/apps/creations?version=2024-10-15' \\\n  --header 'Authorization: {YOUR_API_KEY}' \\\n  --header 'Content-Type: application/vnd.api+json' \\\n  --data '{\n    \"data\": {\n      \"attributes\": {\n        \"context\": \"tenant\",\n        \"name\": \"My Awesome Snyk App\",\n        \"redirect_uris\": [\n          \"https://example.com/callback\"\n        ],\n        \"scopes\": [\n          \"org.read\"\n        ]\n      },\n      \"type\": \"app\"\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Broker for Bitbucket Server with Basic Auth\nDESCRIPTION: Helm command to install Snyk Broker for Bitbucket Server using Basic Authentication. This command sets various environment variables including the broker token, Bitbucket credentials, URLs, and enables Snyk Essentials.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/bitbucket-server-data-center-prerequisites-and-steps-to-install-and-configure-broker/bitbucket-server-data-center-install-and-configure-using-helm.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install snyk-broker-chart snyk-broker/snyk-broker \\\n             --set scmType=bitbucket-server \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set brokerServerUrl=<broker-region-url>\n             --set bitbucketUsername=<ENTER_USERNAME> \\\n             --set bitbucketPassword=<ENTER_PASSWORD> \\\n             --set bitbucket=<ENTER_BITBUCKET_URL> \\\n             --set bitbucketApi=<ENTER_BITBUCKET_API_URL> \\\n             --set brokerClientUrl=<ENTER_BROKER_CLIENT_URL>:<ENTER_BROKER_CLIENT_PORT> \\\n             --set enableEssentials=true \\\n             -n snyk-broker --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Setting Target Reference to Latest Git Tag in Snyk CLI\nDESCRIPTION: This code snippet shows how to set the '--target-reference' option to the latest Git tag using the Snyk CLI. It retrieves the most recent tag and configures project monitoring accordingly.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/group-projects-by-branch-or-version-for-monitoring.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk monitor --target-reference=\"$(git describe --tags --abbrev=0)\"\n```\n\n----------------------------------------\n\nTITLE: Generating Organization Data in Snyk from Bitbucket Server\nDESCRIPTION: This command generates organization data for Snyk using the provided Bitbucket Server group ID. It is part of the process to import organizations into Snyk.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-bitbucket-server-organizations-and-repos-in-snyk.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import orgs:data --source=bitbucket-server --groupId=<snyk_group_id>\n```\n\n----------------------------------------\n\nTITLE: Snyk Role Slugs List in Markdown Table\nDESCRIPTION: A markdown table showing the mapping between role types, role names and their corresponding normalized slug identifiers used in Snyk's permission system. Covers Organization, Group, and Tenant level roles.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/single-sign-on-sso-for-authentication-to-snyk/custom-mapping/README.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Role Type    | Role Name        | Role Slug          |\n| ------------ | ---------------- | ------------------ |\n| Organization | Org Admin        | `org_admin`        |\n| Organization | Org Collaborator | `org_collaborator` |\n| Group        | Group Admin      | `group_admin`      |\n| Group        | Group Viewer     | `group_viewer`     |\n| Group        | Group Member     | `group_member`     |\n| Tenant       | Tenant Admin     | `tenant_admin`     |\n| Tenant       | Tenant Viewer    | `tenant_viewer`    |\n| Tenant       | Tenant Member    | `tenant_member`    |\n```\n\n----------------------------------------\n\nTITLE: Detecting Infrastructure as Code Files\nDESCRIPTION: Configuration for enabling Infrastructure as Code file detection during Snyk Broker deployment by adding environment variables or custom allowlist\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/prepare-snyk-broker-for-deployment/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-e ACCEPT_IAC\n```\n\n----------------------------------------\n\nTITLE: Initiating Project Import in Snyk (YAML)\nDESCRIPTION: This YAML snippet defines the POST endpoint for initiating a project import in Snyk. It specifies the path parameters for organization ID and integration ID.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/import-projects-v1.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/org/{orgId}/integrations/{integrationId}/import\" method=\"post\" %}\n```\n\n----------------------------------------\n\nTITLE: Adding Snyk Security Scan Task to Azure Pipelines\nDESCRIPTION: This YAML snippet demonstrates how to add the Snyk Security Scan task to your Azure Pipeline configuration. It configures the task to test the application (`testType: 'app'`), always monitor for issues (`monitorWhen: 'always'`), and fail the build if issues are found (`failOnIssues: true`).  This snippet is inserted into the `azure-pipelines.yml` file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/azure-pipelines-integration/add-the-snyk-security-task-to-your-pipelines.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n       - task: SnykSecurityScan@1\n         inputs:\n           testType: 'app'\n           monitorWhen: 'always'\n           failOnIssues: true\n```\n\n----------------------------------------\n\nTITLE: Implementing BOM in Project POM\nDESCRIPTION: Example showing how to import and use a BOM file in a Project POM. Demonstrates inheriting dependency versions from the parent BOM without explicitly specifying versions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/more-information-about-java-support.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<project ...>\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>snyk</groupId>\n        <artifactId>snyk-bom</artifactId>\n        <version>1.0</version>\n    </parent>\n    \n    <groupId>snyk</groupId>\n    <artifactId>snyk-project</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n    <name>Snyk Project</name>\n    \n    <dependency>\n        <groupId>log4j</groupId>\n        <artifactId>log4j</artifactId>\n    </dependency>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Identifying Cross-site Scripting (XSS) Vulnerabilities\nDESCRIPTION: This entry covers XSS vulnerabilities (CWE-79) applicable to various languages, including Apex, C#, C++, Go, Java, JavaScript, Kotlin, PHP, Python, Ruby, Rust, Scala, Swift, and Visual Basic. XSS vulnerabilities allow attackers to inject malicious scripts into content that is viewed by others.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: SARIF Report Upload with Snyk Python-3.6 Action\nDESCRIPTION: GitHub Action workflow that generates a SARIF report from Snyk scan and uploads it to GitHub Code Scanning. Uses continue-on-error to ensure SARIF upload happens even if vulnerabilities are found.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-python-3.6-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Python-3.6 using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/python-3.6@master\n        continue-on-error: true # To make sure that SARIF upload gets called\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --sarif-file-output=snyk.sarif\n      - name: Upload result to GitHub Code Scanning\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: snyk.sarif\n```\n\n----------------------------------------\n\nTITLE: Specifying Projects and Exclusions in Snyk Tests\nDESCRIPTION: This snippet shows how to auto-detect all projects in a directory using 'snyk test --all-projects' and exclude specific files or directories using the '--exclude' option. These features are useful for managing large projects and ensuring that only relevant files are scanned, optimizing performance and accuracy.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/test.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n\"snyk test --all-projects --exclude=dir1,file2\"\n```\n\n----------------------------------------\n\nTITLE: Generating Rule Scaffolding with Snyk IaC CLI\nDESCRIPTION: This shell command utilizes the 'snyk-iac-rules template' functionality to create the necessary files for writing a Rego rule. It supports a variety of formats (hcl2, json, yaml, tf-plan) and generates files, including fixtures, that match the specified configuration format.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/writing-a-rule.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsnyk-iac-rules template --rule <RULE-NAME> --format <hcl2|json|yaml|tf-plan>\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Registry Agent with Internal Certificate via Docker\nDESCRIPTION: This snippet shows how to configure the Container Registry Agent to trust an internal certificate authority (CA) when connecting to the Container Registry or Broker Client. It mounts the folder containing the CA certificate file and uses the `NODE_EXTRA_CA_CERTS` environment variable to specify the certificate's location within the Docker container.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/snyk-broker-container-registry-agent/container-registry-agent-advanced-configuration-using-docker.md#2025-04-21_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\ndocker run --restart=always \\\n       -p 8081:8081 \\\n       -e SNYK_PORT=8081 \\\n       -e NODE_EXTRA_CA_CERTS=/private/ca.cert.pem \\\n       snyk/container-registry-agent:latest\n```\n\n----------------------------------------\n\nTITLE: Testing SBOM Files with Snyk CLI\nDESCRIPTION: The 'snyk sbom test' command is used to scan SBOM files for vulnerabilities in open-source packages. It requires the '--experimental' and '--file=<FILE_PATH>' options. Supported SBOM formats include CycloneDX and SPDX JSON files. Package identification must be done using PackageURL. The command offers JSON output for structured data representation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/sbom-test.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"snyk sbom test --experimental --file=<FILE_PATH> [<options>]\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\n\"snyk sbom test --experimental --file=bom.cdx.json\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\n\"snyk sbom test --experimental --file=bom.cdx.json --json\"\n```\n\n----------------------------------------\n\nTITLE: Patching AWS Environment with Snyk API\nDESCRIPTION: Update an AWS environment's role ARN in Snyk by sending a PATCH request to a specific endpoint. Requires an API token, environment ID, and new role ARN as inputs. Uses JSON API format for the payload.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/getting-started-with-cloud-scans/manage-cloud-environments/update-a-cloud-environment.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH \\\n'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/environments/YOUR-ENVIRONMENT-ID?version=2022-12-21~beta' \\\n-H 'Authorization: token YOUR-API-TOKEN' \\\n-H \"Content-Type:application/vnd.api+json\"  -d '{\n  \"data\": {\n    \"attributes\": {\n      \"options\": {\n        \"role_arn\": \"YOUR-NEW-ROLE-ARN\"\n      }\n    },\n    \"type\": \"resource\"\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: npm Project Options Command Line Arguments\nDESCRIPTION: Command line argument for npm projects in Snyk CLI, specifically for controlling strict out-of-sync behavior.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/cli-commands-and-options-summary.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n--strict-out-of-sync=true|false\n```\n\n----------------------------------------\n\nTITLE: Debugging IaC Custom Rules with Snyk CLI\nDESCRIPTION: This command enables debug logs for troubleshooting a local custom rules bundle using the Snyk CLI. It requires the Snyk CLI to be installed and primarily uses the `--rules` option to specify the bundle path. The `-d` flag is added to enable debug output, which aids in diagnosing issues when the provided bundle cannot be extracted or is corrupted.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/use-iac-custom-rules-with-cli/use-a-local-iac-custom-rules-bundle.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsnyk iac test --rules=bundle.tar.gz -d\n```\n\n----------------------------------------\n\nTITLE: System Check Response for GitHub Token Pool\nDESCRIPTION: Illustrates the JSON response from the /systemcheck endpoint when validating a pool of GitHub tokens. It includes validation details for each token in the pool.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-snyk-broker-docker-installation/credential-pooling-with-docker-and-helm.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"brokerClientValidationUrl\": \"https://api.github.com/user\",\n    \"brokerClientValidationMethod\": \"GET\",\n    \"brokerClientValidationTimeoutMs\": 5000,\n    \"brokerClientValidationUrlStatusCode\": 200,\n    \"ok\": true,\n    \"maskedCredentials\": \"goo***ken\"\n  },\n  {\n    \"brokerClientValidationUrl\": \"https://api.github.com/user\",\n    \"brokerClientValidationMethod\": \"GET\",\n    \"brokerClientValidationTimeoutMs\": 5000,\n    \"ok\": false,\n    \"error\": \"401 - {\\\"message\\\":\\\"Bad credentials\\\",\\\"documentation_url\\\":\\\"https://docs.github.com/rest\\\"}\",\n    \"maskedCredentials\": \"bad***ken\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Snyk Environment API Response Example\nDESCRIPTION: This JSON snippet is an example response from the Snyk environments API endpoint. The `id` field contains the environment's unique identifier. Other fields would be present in a complete response.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/getting-started-with-cloud-scans/manage-cloud-environments/find-an-environment-id.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonapi\": {\n    \"version\": \"1.0\"\n  },\n  \"data\": {\n    \"id\": \"3b7ccff9-8900-4e54-0000-1234abcd1234\",\n    <trimmed for length>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk Security Scan Task - YAML\nDESCRIPTION: This snippet configures a Snyk security scan task specifically aimed at testing an application's open-source dependencies. It utilizes the SnykSecurityScan task with specified inputs such as service connection endpoint, test type, monitoring conditions, and handling of found issues. Dependencies include a valid Snyk service connection token.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/azure-pipelines-integration/simple-example-of-a-snyk-task-to-test-an-application.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- task: SnykSecurityScan@1\n  inputs:\n    serviceConnectionEndpoint: 'snykToken'\n    testType: 'app'\n    monitorWhen: 'always'\n    failOnIssues: true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization ID from Snyk API in TypeScript\nDESCRIPTION: This snippet defines an asynchronous function to fetch the organization ID associated with a Snyk application using the Snyk API, handling errors gracefully.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/util/APIHelpers.ts\n\n...\n\nexport async function getAppOrgID(tokenType: string, accessToken: string): Promise<{ orgId: string }> {\n  try {\n    const clientId = CLIENT_ID;\n    const result = await callSnykApi(tokenType, accessToken, APIVersion.REST)({\n      method: \"GET\",\n      url: `/apps/${clientId}/orgs?version=2021-08-11~experimental`,\n    });\n    // Fetch the first org\n    const org = result.data.data[0];\n    return {\n      orgId: org.id,\n    };\n  } catch (error) {\n    console.error(\"Error fetching org info: \" + error);\n    throw error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Broker for GitLab using Helm\nDESCRIPTION: Helm command to install Snyk Broker with GitLab configuration. Includes essential parameters like broker token, SCM type, GitLab URL, and server configuration. Supports regional hosting with custom broker server URLs.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/gitlab-prerequisites-and-steps-to-install-and-configure-broker/gitlab-install-and-configure-using-helm.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install snyk-broker-chart snyk-broker/snyk-broker \\\n             --set scmType=gitlab \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set brokerServerUrl=<broker-region-url>\n             --set gitlab=<ENTER_GITLAB_URL> \\\n             --set scmToken=<ENTER_GITLAB_TOKEN> \\\n             --set brokerClientUrl=<ENTER_BROKER_CLIENT_URL>:<ENTER_BROKER_CLIENT_PORT> \\\n             --set enableESSENTIALS=true \\\n             -n snyk-broker --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Displaying Permission Error Warning for Snyk CLI Installation\nDESCRIPTION: This snippet displays a warning message for users who encounter permission issues while trying to install Snyk CLI via npm. It provides suggestions for resolving the permissions problem, such as modifying the npm install command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/install-or-update-the-snyk-cli/installing-snyk-cli-as-a-binary-using-npm.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n------------------------------ Warning -------------------------------\nYou don't have the permissions to install Snyk. Please try the following options:\n* If you are installing with increased privileges (for example sudo), try adding unsafe-perm a parameter to npm install\n* If you run NPM <= 6, please upgrade to a later version.\nIf the problems persist please check http://support.snyk.io/.\n------------------------------ Warning -------------------------------\n```\n\n----------------------------------------\n\nTITLE: Confirmation of successful Snyk Organization update\nDESCRIPTION: This snippet demonstrates the confirmation message received after successfully updating the default Snyk Organization using the CLI.  It indicates that the `org` configuration has been updated. No dependencies are required other than having executed the previous `snyk config set org` command successfully.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/set-the-snyk-organization-for-the-cli-tests.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\norg updated\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Pipeline with Snyk Security Scanner\nDESCRIPTION: Example Jenkins pipeline configuration that demonstrates how to integrate Snyk security scanning into a standard build pipeline. The pipeline includes build, test (with Snyk security scanning), and deploy stages.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/jenkins-plugin-integration-with-snyk.md#2025-04-21_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\npipeline {\n  agent any\n\n  stages {\n    stage('Build') {\n      steps {\n        echo 'Building...'\n      }\n    }\n    stage('Test') {\n      steps {\n        echo 'Testing...'\n        snykSecurity(\n          snykInstallation: '<Your Snyk Installation Name>',\n          snykTokenId: '<Your Snyk API Token ID>',\n          // place other parameters here\n        )\n      }\n    }\n    stage('Deploy') {\n      steps {\n        echo 'Deploying...'\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Snyk API Projects Handler\nDESCRIPTION: TypeScript handler for fetching user projects from Snyk API\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/render-content-for-users.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readFromDb } from \"../../util/DB\";\nimport { callSnykApi } from \"../../util/apiHelpers\";\nimport { EncryptDecrypt } from \"../../util/encrypt-decrypt\";\nimport { AuthData } from \"../../interfaces/DB\";\nimport { APIVersion } from \"../../interfaces/API\";\nimport { ENCRYPTION_SECRET } from \"../../app\";\n\nexport async function getProjectsFromApi(): Promise<unknown[]> {\n  const db = await readFromDb();\n  const data = mostRecent(db.installs);\n  if (!data) return [];\n\n  const eD = new EncryptDecrypt(ENCRYPTION_SECRET as string);\n  const access_token = eD.decryptString(data?.access_token);\n  const token_type = data?.token_type;\n  const result = await callSnykApi(\n    token_type,\n    access_token,\n    APIVersion.V1\n  ).post(`/org/${data?.orgId}/projects`);\n\n  return result.data.projects || [];\n}\n\nexport function mostRecent(installs: AuthData[]): AuthData | void {\n  if (installs) {\n    return installs[installs.length - 1];\n  }\n  return;\n}\n```\n\n----------------------------------------\n\nTITLE: RACI Matrix for Enterprise Snyk Implementation\nDESCRIPTION: Detailed matrix defining responsibilities for key stakeholders during Snyk rollout, including roles for Champion, Admin, Security, and DevOps teams across various implementation tasks\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/implement-snyk/team-implementation-guide/phase-1-discovery-and-planning/discovery.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Task | Champion | Admin | Security | DevOps |\n|------|----------|-------|----------|--------|\n| Onboarding | Responsible | Responsible | Responsible | Responsible |\n| Admin Training | Accountable | Responsible | Consulted | Responsible |\n| Security Training | Responsible | Consulted | Accountable | Responsible |\n| DevOps Training | Responsible | Consulted | Consulted | Accountable |\n| Source Control/IDE/PIPELINE Setup | Responsible | Responsible | Responsible | Accountable |\n| License Policy Management | Responsible | Responsible | Responsible | Accountable |\n| Security Triage | Responsible | Consulted | Accountable | Consulted |\n```\n\n----------------------------------------\n\nTITLE: Upgrade PR Check for Description\nDESCRIPTION: The YAML snippet demonstrates using the `is_upgrade_pr` variable to indicate if a PR is for a dependency upgrade, thus providing insight into the intent of the update.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: |\n  Is this pr an upgrade pr? {{ is_upgrade_pr }}\n```\n\n----------------------------------------\n\nTITLE: Defining Ignore Blocks in YAML\nDESCRIPTION: YAML blocks for ignoring vulnerabilities provide a structured way to specify which issues to ignore in a `.snyk` file. These configurations support expiry dates and custom reasons, and they require editing the .snyk file directly or using Snyk CLI commands to populate. Key fields include `ignore` and `exclude`, each listing issue IDs or file patterns.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/ignore.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nignore:\n  '<ISSUE_ID>':\n    - '*':\n        reason: <REASON>\n        expires: <EXPIRY>\n```\n\nLANGUAGE: yaml\nCODE:\n```\nignore:\n  '<ISSUE_ID>':\n    - '<PATH_TO_RESOURCE>':\n        reason: <REASON>\n        expires: <EXPIRY>\n```\n\nLANGUAGE: yaml\nCODE:\n```\nexclude:\n  '<GROUP>':\n    - <FILE MATCHING-PATTERN>\n    - <FILE MATCHING-PATTERN>:\n      expires: <EXPIRY>\n      created: <CREATION TIME>\n```\n\n----------------------------------------\n\nTITLE: Monitoring Container Images with Snyk CLI (Shell)\nDESCRIPTION: The `snyk container monitor` command allows users to analyze container image layers and dependencies for monitoring vulnerabilities. It captures a snapshot of the current state of the image and compares it against known vulnerabilities, sending reports to Snyk’s service. It is crucial for pre-production to ensure security and avoid deploying vulnerabilities.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/container-monitor.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n`snyk container monitor [<OPTIONS>] [<IMAGE>]`\n```\n\n----------------------------------------\n\nTITLE: Checking Helm Repository List - Kubernetes Bash\nDESCRIPTION: This command lists all Helm repositories configured, which is useful for verifying the repository name for upgrades.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo list\n```\n\n----------------------------------------\n\nTITLE: Example Role Mapping for Security Team\nDESCRIPTION: JSON structure example for assigning the Group Admin role to the Security team.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-configuration/single-sign-on-sso-for-authentication-to-snyk/custom-mapping/legacy-custom-mapping.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"roles\": [\n        \"snyk-groupadmin\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Snyk Maven-3-jdk-11 Action for Vulnerability Check in YAML\nDESCRIPTION: This YAML snippet demonstrates how to set up a GitHub Actions workflow to check for vulnerabilities using the Snyk Maven-3-jdk-11 Action. It runs on push events and uses the SNYK_TOKEN secret for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-maven-3-jdk-11-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Maven (3-jdk-11) using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/maven-3-jdk-11@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Terraform State from Azure Blob Storage with Snyk\nDESCRIPTION: This snippet provides instructions on setting the required environmental variables for accessing Terraform state stored in Azure Blob Storage. Users must export the storage account name and key before executing the Snyk command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/iac-sources-usage.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ export AZURE_STORAGE_ACCOUNT=...\n$ export AZURE_STORAGE_KEY=...\n$ snyk iac describe --from=\"tfstate+azurerm://my-container/terraform.tfstate\"\n```\n\n----------------------------------------\n\nTITLE: Snyk IaC Test Results Output\nDESCRIPTION: This snippet shows the output of a Snyk IaC test command, including severity levels, issue descriptions, and resolution suggestions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/understand-the-iac-cli-test-results/snyk-iac-cli-test-results-v.-1.939.0-and-later.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nSnyk Infrastructure as Code\n\n✔ Test completed.\n\nIssues\n\nLow Severity Issues: 1\n\n  [Low] API Gateway access logging disabled\n  Info:    Amazon Api Gateway access logging is not enabled. Audit records may not be available during investigation\n  Rule:    https://security.snyk.io/rules/cloud/SNYK-CC-TF-138\n  Path:    resource > aws_api_gateway_stage[denied] > access_log_settings\n  File:    aws_api_gateway_stage_logging.tf\n  Resolve: Set `access_log_settings` attribute\n\n-------------------------------------------------------\n\nTest Summary\n\n  Organization: demo-org\n\n✔ Files without issues: 0\n✗ Files with issues: 1\n  Invalid files: 0\n  Ignored issues: 0\n  Total issues: 1 [ 0 critical, 0 high, 0 medium, 1 low ]\n```\n\n----------------------------------------\n\nTITLE: Templating Helm Charts and Scanning with Snyk CLI\nDESCRIPTION: This code demonstrates how to template a Helm chart and scan the resulting Kubernetes manifests using the Snyk CLI. The process includes updating dependencies, generating templates, and running Snyk IaC tests on the output directory.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/scan-your-iac-source-code/scan-kubernetes-configuration-files/scan-and-fix-security-issues-in-helm-charts-current-iac.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/helm/chart\nhelm dependency update\nhelm template . --output-dir out\nsnyk iac test out/\n```\n\n----------------------------------------\n\nTITLE: Using Snyk Gradle-jdk16 Action to Check for Vulnerabilities in YAML\nDESCRIPTION: This snippet demonstrates how to set up a GitHub Actions workflow to check for vulnerabilities in a Gradle (jdk16) project using Snyk. It runs on push events and uses the Snyk token for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-gradle-jdk16-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Gradle (jdk16) using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/gradle-jdk16@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Docker Run Configuration for Nexus 3 Broker Client\nDESCRIPTION: Docker command to configure and run the Broker Client for Nexus 3 integration. Sets up necessary environment variables including broker token, server URL, base Nexus URL, and validation endpoints.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/nexus-repository-prerequisites-and-steps-to-install-and-configure-broker/set-up-snyk-broker-with-nexus-repository-manager.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker run --restart=always \\\n           -p 7341:7341 \\\n           -e BROKER_TOKEN=secret-broker-token \\\n           -e BROKER_SERVER_URL=<broker-region-url> \\\n           -e BASE_NEXUS_URL=https://[<user>:<pass>@]<your.nexus.hostname> \\\n           -e BROKER_CLIENT_VALIDATION_URL=https://<your.nexus.hostname>/service/rest/v1/status[/check] \\\n           -e RES_BODY_URL_SUB=https://<your.nexus.hostname>/repository \\\n       snyk/broker:nexus\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk Broker for Nexus 2 using Helm\nDESCRIPTION: This Helm command installs Snyk Broker for Nexus 2. It sets various environment variables including the broker token, server URL, Nexus URLs, and client validation URL.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/nexus-repository-prerequisites-and-steps-to-install-and-configure-broker/nexus-repository-install-and-configure-using-helm.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install snyk-broker-chart snyk-broker/snyk-broker \\\n             --set scmType=nexus2 \\\n             --set brokerToken=<ENTER_BROKER_TOKEN> \\\n             --set brokerServerUrl=<broker-region-url>\n             --set baseNexusUrl=<ENTER_BASE_NEXUS_URL> \\\n             --set nexusUrl=<ENTER_NEXUS_URL>\n             --set brokerClientValidationUrl=<ENTER_BROKER_CLIENT_VALIDATION_URL> \\\n             -n snyk-broker --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Getting List of Organization Members\nDESCRIPTION: This HTTP GET request retrieves all non-admin members of a specific Snyk organization. The response includes user IDs needed for updating roles. Note that service accounts require getting their publicID from the Service Account Settings page.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-admin/user-management-with-the-api/update-member-roles-using-the-api.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.snyk.io/v1/org/{orgId}/members\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group Organization Memberships with REST API\nDESCRIPTION: This snippet demonstrates how to list all organization memberships within a specified group using the REST API. Dependencies include the Swagger JSON specification file. The key parameter is `group_id`, representing the unique identifier of the group. It returns a list of organization memberships linked to the specified group.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/groups.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"src\\\": \\\"../../.gitbook/assets/rest-spec.json\\\",\\n  \\\"path\\\": \\\"/groups/{group_id}/org_memberships\\\",\\n  \\\"method\\\": \\\"get\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Snyk CLI Preview Version (MacOS)\nDESCRIPTION: This shell script downloads and runs a preview version of the Snyk CLI on MacOS in a temporary directory. It creates a directory, navigates into it, downloads the snyk executable, makes it executable, and then runs the executable with the -version flag to verify the installation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/releases-and-channels-for-the-snyk-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"mkdir snyk-preview\ncd snyk-preview\ncurl --compressed https://downloads.snyk.io/cli/preview/snyk-macos -o snyk\nchmod +x ./snyk\n./snyk -version\"\n```\n\n----------------------------------------\n\nTITLE: Identifying Backlog PR in Template Using JSON\nDESCRIPTION: The JSON snippet incorporates 'is_backlog_pr' to represent backlog pull requests addressing existing vulnerabilities. It deals with recognizing backlogged vulnerabilities within the project. JSON inputs facilitate output strings specific to backlog issue descriptions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"description\": \"{{ #is_backlog_pr }} This PR has been opened to fix known vulnerbilities. These vulnerabilities are retrieved from the Project's backlog. {{ /is_backlog_pr }}\"\n            \n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Snyk Environments by Kind via API\nDESCRIPTION: This code snippet demonstrates how to filter the Snyk environments API request by the `kind` parameter.  This example filters for Google Cloud environments.  It requires setting the `YOUR-ORGANIZATION-ID` and `YOUR-API-TOKEN` appropriately.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/getting-started-with-cloud-scans/manage-cloud-environments/find-an-environment-id.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/environments?kind=google&version=2022-12-21~beta' \\\n  -H 'Authorization: token YOUR-API-TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta 2 on macOS\nDESCRIPTION: This command installs the Rosetta 2 software on macOS. Rosetta 2 is a translation layer that enables older applications compiled for Intel processors to run on Apple silicon (M1/M2) machines. This is necessary to run older versions of Snyk CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/install-or-update-the-snyk-cli/using-cli-releases-before-version-1.1230.0-on-an-apple-m1-or-m2-machine.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n`softwareupdate --install-rosetta`\n```\n\n----------------------------------------\n\nTITLE: API Custom PR Template Output Using YAML\nDESCRIPTION: This YAML snippet shows the expected message for a pull request template using custom Jira IDs. It demonstrates the output when the input template JSON is applied, showing how Jira IDs are integrated into a commit message.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nThis pull request is from Snyk and relates to JIRA-1,JIRA-2,JIRA-3\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration with Missing Access Log Settings\nDESCRIPTION: This Terraform snippet shows an aws_api_gateway_stage resource block named 'denied' that lacks the access_log_settings field, which is flagged as an issue in the Snyk IaC test results.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/understand-the-iac-cli-test-results/snyk-iac-cli-test-results-v.-1.939.0-and-later.md#2025-04-21_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_api_gateway_stage\" \"denied\" {\n  xray_tracing_enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Expression Example - Resource with Local Variables\nDESCRIPTION: Terraform configuration using conditional expressions with local and input variables to determine the cidr_blocks value for a security group rule. Shows advanced variable usage patterns.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/scan-your-iac-source-code/scan-terraform-files/terraform-variables-support-current-iac.md#2025-04-21_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_security_group_rule\" \"ssh\" {\n  type              = \"ingress\"\n  from_port         = 22\n  to_port           = 22\n  protocol          = \"tcp\"\n  cidr_blocks       = local.test == 0 ? [var.remote_user_addr] : [\"11.0.0.0/24\"]\n  security_group_id = aws_security_group.allow.id\n}\n\nlocals {\n  test = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Project Tags via API Request\nDESCRIPTION: JSON payload example showing how to add project tags through the Snyk API\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/set-up-insights-for-snyk-apprisk/set-up-insights-associating-snyk-open-source-code-and-container-projects.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n \"tags\": [\n    {\n      \"key\": \"component\",\n      \"value\": \"pkg:github/my-team/back-end@main\"\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Indicating Issue Count in PR Template Using JSON\nDESCRIPTION: This JSON snippet uses 'issue_count' to reflect the number of issues addressed by the pull request within a template. Dependencies include issue tracking within Snyk. It accepts JSON inputs that result in string outputs reflecting the issue count in PR descriptions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"description\": \"The PR will fix {{ issue_count }} issues.\"\n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PATCH Group IaC Settings\nDESCRIPTION: This endpoint is used to modify the IaC settings for a specific group. It requires the group ID in the path and appropriate API authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/iacsettings.md#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/groups/{group_id}/settings/iac\" method=\"patch\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n```\n\n----------------------------------------\n\nTITLE: Defining S3 Bucket ACL in Terraform AWS Provider v4.0.0 (Split Files - ACL Definition)\nDESCRIPTION: Example of an S3 bucket ACL definition in a separate file using Terraform AWS Provider v4.0.0. This split file approach may cause Snyk to miss security issues or report false positives.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/scan-your-iac-source-code/scan-terraform-files/terraform-aws-provider-support.md#2025-04-21_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_s3_bucket_acl\" \"example\" {\n  bucket = aws_s3_bucket.example.id\n  acl    = \"public-read-write\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing jira-tickets-for-new-vulns Tool with Basic Options (Shell)\nDESCRIPTION: This snippet demonstrates how to run the tool with essential command-line arguments, including organization ID, API token, and Jira project key.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-jira-tickets-for-new-vulns.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./snyk-jira-sync-<yourplatform> \n    --orgID=<SNYK_ORG_ID>                    // Can find it under settings\n    --token=<API Token>                      // Snyk API Token. Service accounts work.\n    --jiraProjectKey=<Key>                  // Jira project Key the tickets will be opened against\n```\n\n----------------------------------------\n\nTITLE: Custom PR Commit Message with Snyk Pull Request Type\nDESCRIPTION: Shows how to add the type of pull request (e.g., fix, upgrade) to the commit message using the `snyk_pull_request_type` variable. The template uses JSON format in its input and yields a commit message formatted according to the pull request type.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"attributes\": {\n            \"commit_message\": \"{{ snyk_pull_request_type}}: for {{ package_name }}\"\n            \n        },\n        \"type\": \"pull_request_template\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining S3 Bucket in Terraform AWS Provider v4.0.0 (Split Files - Bucket Definition)\nDESCRIPTION: Example of an S3 bucket definition in a separate file using Terraform AWS Provider v4.0.0. When resources are split across files, Snyk IaC has limitations in linking the resources together for security scanning.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/scan-your-iac-source-code/scan-terraform-files/terraform-aws-provider-support.md#2025-04-21_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_s3_bucket\" \"example\" {\n  # ... other configuration ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Vulnerabilities with Snyk Gradle Action in GitHub Workflow\nDESCRIPTION: This YAML snippet demonstrates a basic GitHub workflow that uses the Snyk Gradle Action to check for vulnerabilities in a Gradle project. It runs on push events and uses the SNYK_TOKEN secret for authentication.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-gradle-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Gradle using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/gradle@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Testing container image archive with Snyk CLI\nDESCRIPTION: This command scans a container image archive (tar format) for vulnerabilities using Snyk, without relying on the Docker daemon. It supports both Docker and OCI formats. The archive.tar parameter specifies the path to the container image archive file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/snyk-container-specific-ci-cd-strategies.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk container test docker-archive:archive.tar\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk container test oci-archive:archive.tar\"\n```\n\n----------------------------------------\n\nTITLE: Outputting Results in JSON Format\nDESCRIPTION: Command to output the contributors count result in JSON format by using the json flag, which is required when using the consolidateResults command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/azure-devops/azure-examples.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count azure-devops --token AZURE-TOKEN --org AZURE-ORG --projectKeys Key1 --repo Repo1 --json\n```\n\n----------------------------------------\n\nTITLE: Using Package Version To in PR Description\nDESCRIPTION: This snippet demonstrates the use of the `package_to` variable to indicate the target version of a package in a pull request description. It's typically used when documenting upgrades.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: |\n  Fix is applied by moving to {{ package_to}}\n\n\n```\n\n----------------------------------------\n\nTITLE: Reading State from Terraform Enterprise Workspace\nDESCRIPTION: This command reads the Terraform state from a Terraform Enterprise workspace. It requires the workspace ID, API token, and endpoint URL for the Terraform Enterprise instance. Environment variables `$WORKSPACE_ID` and `$TFC_TOKEN` are used.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/iac-describe-command-examples.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac describe --from=\"tfstate+tfcloud://$WORKSPACE_ID\" --tfc-token=\"$TFC_TOKEN\" --tfc-endpoint=\"https://tfe.example.com/api/v2\"\n```\n\n----------------------------------------\n\nTITLE: EJS Index Template\nDESCRIPTION: Main index template with authorization button for unauthorized users\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/render-content-for-users.md#2025-04-21_snippet_5\n\nLANGUAGE: ejs\nCODE:\n```\n<%- include('./partials/header.ejs') %>\n\n<body>\n  <div class=\"index-page\">\n    <img class=\"index-page__snyk-logo\" src=\"https://github.com/snyk/snyk-apps-demo/raw/main/src/public/images/snykLogoWithDog.svg\" alt=\"snyk-logo\" />\n    <div class=\"index-page__card\">\n      <h1 class=\"index-page__title\">Add Demo App</h1>\n      <p class=\"index-page__description\">Authorize this App to connect to your Snyk account.</p>\n      <button class=\"button\" onclick=\"location.href='/auth';\">Install App</button>\n    </div>\n  </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Fixing incorrect capture group syntax in regex\nDESCRIPTION: Changes the Python-style named capture group syntax to JavaScript-style named capture group syntax. This fixes the 'Use of unsupported regex feature' error.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/use-snyk-container/use-custom-base-image-recommendations/custom-versioning-schema-for-custom-base-images.md#2025-04-21_snippet_5\n\nLANGUAGE: regex\nCODE:\n```\n(?P<C0>.*)\n```\n\nLANGUAGE: regex\nCODE:\n```\n(?<C0>.*)\n```\n\n----------------------------------------\n\nTITLE: Setting SNYK_TOKEN Environment Variable\nDESCRIPTION: This command sets the SNYK_TOKEN environment variable, which is required for authenticating with Snyk when retrieving contributors only for repos already monitored by Snyk. The token should have Group level access.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-server/bitbucket-server-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport SNYK_TOKEN=<YOUR-SNYK-TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Deleting Google SCC Integration with Snyk REST API\nDESCRIPTION: This curl command deletes an existing Google Security Command Center integration from Snyk. It requires your Snyk Group ID, the registration ID of the integration, and your Snyk API token.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/integrate-with-snyk/event-forwarding/google-security-command-center.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location --request DELETE 'https://api.snyk.io/rest/groups/<SNYK_GROUP_ID>/cloud_events/group_registrations/<REGISTRATION_ID>?version=2023-01-25~experimental' \\\n\n--header 'Content-Type: application/vnd.api+json' \\\n\n--header 'Authorization: token <SNYK_API_TOKEN>'\n```\n\n----------------------------------------\n\nTITLE: Fetching Commits for Specific GitLab Projects\nDESCRIPTION: Using snyk-scm-contributors-count to get commit data for a certain GitLab project by specifying the project and a group name alongside the GitLab token. This command remains focused, aiding in single project analysis.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/gitlab-and-gitlab-server/gitlab-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n\"snyk-scm-contributors-count gitlab --token TOKEN --groups GROUP --project PROJECT\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Run Command for SSO-enabled Jira with PAT Authentication\nDESCRIPTION: Docker run command for setting up Broker Client with SSO-enabled Jira using Personal Access Token (PAT) authentication instead of username/password credentials.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/jira-prerequisites-and-steps-to-install-and-configure-broker/setup-broker-with-jira.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker run --restart=always \\\n           -p 8000:8000 \\\n           -e BROKER_TOKEN=secret-broker-token \\\n           -e JIRA_PAT=<your_pat_token> \\\n           -e JIRA_HOSTNAME=your.jira.domain.com \\\n           -e BROKER_CLIENT_URL=http://my.broker.client:8000 \\\n           -e PORT=8000 \\\n       snyk/broker:jira-bearer-auth\n```\n\n----------------------------------------\n\nTITLE: Testing a repository from its root folder with Snyk Code using the CLI\nDESCRIPTION: This snippet shows how to test the current repository folder using the `snyk code test` command. This command scans the current directory and all its subdirectories for vulnerabilities, displaying the results in the terminal.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/scan-source-code-with-snyk-code-using-the-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk code test\"\n```\n\n----------------------------------------\n\nTITLE: Defining MSBuild Conditions in .NET Project Files\nDESCRIPTION: Examples of MSBuild condition constructs in .NET project files. These snippets demonstrate how to define and use conditions in .targets and .csproj files, which is relevant to the 'Missing MSBuild Condition Construct' error.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/error-catalog.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Project>\n  <PropertyGroup>\n    <SomeCondition Condition=\"'$(SomeCondition)' == ''\">false</SomeCondition>\n  </PropertyGroup>\n</Project>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk='Microsoft.NET.Sdk'>\n  <Import Project='..\\external-libraries\\some-library\\project.targets' />\n  <PropertyGroup>\n    <TargetFrameworks>net8.0</TargetFrameworks>\n  </PropertyGroup>\n  <ItemGroup Condition='!$(SomeCondition)'>\n    <PackageReference Include='Newtonsoft.Json' Version='13.0.3' />\n  </ItemGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Enabling Large Manifest File Retrieval in Docker for Snyk Open Source Scans\nDESCRIPTION: This Docker environment variable allows the Broker client to retrieve larger manifest files using a different endpoint. It's necessary when Snyk detects large manifest files that require an alternative retrieval method.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-snyk-broker-docker-installation/snyk-open-source-scans-sca-of-large-manifest-files-docker-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n-e ACCEPT_LARGE_MANIFESTS=true\n```\n\n----------------------------------------\n\nTITLE: Customizing Snyk Docker Action for High Severity Vulnerabilities in YAML\nDESCRIPTION: This example shows how to modify the Snyk Docker Action to check for only high severity vulnerabilities. It uses the 'args' property to set the severity threshold.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-docker-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Docker using Snyk \non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Run Snyk to check Docker images for vulnerabilities\n      uses: snyk/actions/docker@master\n      env:\n        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n      with:\n        image: your/image-to-test\n        args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Checking Scan Status\nDESCRIPTION: This snippet retrieves the scan status for a specified environment by making a GET request to the Snyk API. The response includes the status of the scan for the given environment ID.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/getting-started-with-cloud-scans/manage-cloud-environments/scan-a-cloud-environment.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \n  'https://api.snyk.io/rest/orgs/YOUR-ORGANIZATION-ID/cloud/environments?id=YOUR-ENVIRONMENT-ID&version=2022-12-21~beta' \n  -H 'Authorization: token YOUR-API-TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Path Errors with Snyk CLI\nDESCRIPTION: This snippet represents an error message when the provided path to the custom rules bundle is incorrect or the bundle is non-existent. The Snyk CLI needs proper access permissions to the location specified in the `--rules` option.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/use-iac-custom-rules-with-cli/use-a-local-iac-custom-rules-bundle.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nWe were unable to extract the rules provided at: ./invalid/location/bundle.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Setting Target Reference to Current Git Branch in Snyk CLI\nDESCRIPTION: This code snippet demonstrates how to set the '--target-reference' option to the current Git branch using the Snyk CLI. It utilizes command substitution to capture the active branch name dynamically.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/group-projects-by-branch-or-version-for-monitoring.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk monitor --target-reference=\"$(git branch --show-current)\"\n```\n\n----------------------------------------\n\nTITLE: Creating a multiline description in a YAML PR template for Snyk\nDESCRIPTION: Example of using YAML multiline operators in a Snyk custom PR template. The pipe operator (|) preserves new line characters, creating a description that spans multiple lines with formatting intact.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/apply-a-custom-pr-template.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: |\n  This pull request comes from Snyk\n  For more information see the project page {{ snyk_project_url }}\n  If you have more questions reach out to a member of the security team\n\n```\n\n----------------------------------------\n\nTITLE: Available Options for snyk-scm-contributors-count GitHub Enterprise Command\nDESCRIPTION: Lists all the command-line options available for the snyk-scm-contributors-count github-enterprise command, including required parameters like token and URL, as well as optional flags for targeting specific organizations or repositories.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/github-enterprise/github-enterprise-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  --version                 Show version number                        [boolean]\n  --help                    Show help                                  [boolean]\n  --token                   Github Enterprise token                    [required]\n  --url                     Your GitHub host custom URL, \n                            for example, https://ghe.prod.company.org/ [required]\n  --orgs                    [Optional] A list of GitHub Enterprise organizations, separeted by comma, \n                            to fetch and count contributors for their repositories              \n  --repo                    [Optional] Specific repo to count only for\n  --fetchAllOrgs            [Optional] When enabled, will fetch all orgs that the token has access to\n                            rather than fetching only the orgs your authorized to operate in.\n  --exclusionFilePath       [Optional] Exclusion list filepath\n  --json                    [Optional] JSON output, required when using the \"consolidateResults\" command\n```\n\n----------------------------------------\n\nTITLE: Embedding Snyk Project URL in PR Description\nDESCRIPTION: The code example utilizes the `snyk_project_url` variable to include a direct link to the Snyk project page in the pull request description. This is useful for providing direct access to the project's web page.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: |\n  To find more details, see the Snyk project {{ snyk_project_url }}\n```\n\n----------------------------------------\n\nTITLE: Equivalent JSON from YAML File - JSON\nDESCRIPTION: This JSON snippet represents the equivalent output when parsing the YAML Pod resource definition into JSON format, suitable for use in Rego.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/parsing-an-input-file.md#2025-04-21_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"apiVersion\": \"v1\",\n\t\"kind\": \"Pod\",\n\t\"metadata\": {\n\t\t\"name\": \"example\"\n\t},\n\t\"spec\": {\n\t\t\"containers\": [\n\t\t\t{\n\t\t\t\t\"image\": \"example:latest\",\n\t\t\t\t\"name\": \"example\",\n\t\t\t\t\"securityContext\": {\n\t\t\t\t\t\"privileged\": true\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Maven Dependency in Bazel\nDESCRIPTION: Example of how to specify a Maven dependency in a Bazel BUILD file. This shows the configuration for the logback-core package with its artifact coordinates and SHA1 checksum.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-open-source/snyk-for-bazel/example-of-snyk-for-bazel.md#2025-04-21_snippet_0\n\nLANGUAGE: bazel\nCODE:\n```\nmaven_jar(\n    name = \"logback-core\",\n    artifact = \"ch.qos.logback:logback-core:1.0.13\",\n    sha1 = \"dc6e6ce937347bd4d990fc89f4ceb469db53e45e\",\n)\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Versioning Schema Regex\nDESCRIPTION: This regex compiles all aspects of the custom versioning schema, capturing major, minor, and patch versions, as well as OS distribution and date elements, along with optional flavor matching.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/use-snyk-container/use-custom-base-image-recommendations/custom-versioning-schema-for-custom-base-images.md#2025-04-21_snippet_3\n\nLANGUAGE: regex\nCODE:\n```\n(?<C0>\\d+)\\.(?<C1>\\d+)\\.(?<C2>\\d+)_(?<M0>deb\\d+)_(?<C3>\\d{10})(?:-(?<M1>.*))?\n```\n\n----------------------------------------\n\nTITLE: Updating Organization Member (PUT /org/{orgId}/members/{userId})\nDESCRIPTION: API endpoint to update a member's details in an organization. This endpoint is part of the v1 API and uses the PUT method, requiring both the organization ID and user ID as path parameters.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/organizations-v1.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/org/{orgId}/members/{userId}\" method=\"put\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Specific Instance Ignore Rule with Snyk CLI\nDESCRIPTION: A Snyk CLI command to ignore a specific instance of a vulnerability in a specific file. This example ignores a privileged container issue at a specific path in a Kubernetes deployment file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/iac-ignores-using-the-.snyk-policy-file.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsnyk ignore --id=SNYK-CC-K8S-1 --path='production/deployment.yaml > [DocId:1] > spec > template > spec > containers[web] \n > securityContext > privileged'\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for Axios Interceptors\nDESCRIPTION: This snippet imports various necessary modules, including Axios, to set up interceptors for handling token refresh in a Snyk application. It uses TypeScript for static type checking.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/util/interceptors.ts\n\nimport type { AxiosRequestConfig } from \"axios\";\nimport { AuthData } from \"../interfaces/DB\";\nimport { DateTime } from \"luxon\";\nimport { readFromDb, updateDb } from \"./DB\";\nimport { mostRecent } from \"../routes/projects/projectsController\";\nimport { EncryptDecrypt } from \"./encrypt-decrypt\";\nimport { refreshAuthToken } from \"../util/APIHelpers\";\nimport { ENCRYPTION_SECRET } from \"../app\";\nimport axios from \"axios\";\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML Files - Command\nDESCRIPTION: This command converts a YAML file into JSON format using the Snyk parse command with the yaml format option.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/parsing-an-input-file.md#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nsnyk-iac-rules parse example.yaml --format=yaml\n```\n\n----------------------------------------\n\nTITLE: Network Connectivity Test Command\nDESCRIPTION: Example curl command to test network connectivity between Terraform Enterprise instance and Snyk API. Even a 401 response indicates successful basic connectivity.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/terraform-enterprise-integration-for-snyk-iac.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Log on to your Terraform Enterprise server.\n* Make an HTTP request to a Snyk API endpoint; for example, you could use **curl** to initiate an HTTP request.\n* Even if you receive a 401/Unauthorized response from a Snyk API endpoint, that is an acceptable response; you are checking only basic network connectivity.\n```\n\n----------------------------------------\n\nTITLE: Updating User Notification Settings for Organization - Snyk API v1 - YAML\nDESCRIPTION: This snippet outlines the API endpoint to update notification settings for a specific organization on behalf of the current user. This allows customization of user notifications for different organizations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/users-v1.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/user/me/notification-settings/org/{orgId}\" method=\"put\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Equivalent JSON from Terraform File - JSON\nDESCRIPTION: This JSON snippet represents the equivalent output when parsing the Terraform resource definition into JSON format, suitable for use in Rego.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/parsing-an-input-file.md#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"resource\": {\n\t\t\"aws_redshift_cluster\": {\n\t\t\t\"example\": {\n\t\t\t\t\"cluster_identifier\": \"tf-redshift-cluster\",\n\t\t\t\t\"cluster_type\": \"single-node\",\n\t\t\t\t\"database_name\": \"mydb\",\n\t\t\t\t\"master_password\": \"Mustbe8characters\",\n\t\t\t\t\"master_username\": \"foo\",\n\t\t\t\t\"node_type\": \"dc1.large\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Information Hint for Custom Mapping Availability in Markdown\nDESCRIPTION: This snippet provides information about the availability of Custom Mapping feature for Enterprise plans. It uses Markdown syntax with a hint style and includes a link to plans and pricing.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/single-sign-on-sso-for-authentication-to-snyk/choose-a-provisioning-option.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"info\" %}\n**Feature availability**\nCustom Mapping is available only for Enterprise plans. For more information, see [plans and pricing](https://snyk.io/plans/).&#x20;\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Policy for AWS Secret - AWS CLI\nDESCRIPTION: This command creates an IAM policy that grants permissions to access the specific AWS secret created for the Snyk runtime sensor.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nPOLICY_ARN=$(aws --query Policy.Arn --output text iam create-policy --policy-name snyk-runtime-sensor-secret-policy --policy-document '{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [ {\n        \"Effect\": \"Allow\",\n        \"Action\": [\"secretsmanager:GetSecretValue\", \"secretsmanager:DescribeSecret\"],\n        \"Resource\": [\"<<YOUR_SECRET'S_ARN>>\"]\n    } ]\n}' )\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with pip\nDESCRIPTION: For Python projects using pip, run this command to install dependencies from requirements.txt before testing with Snyk CLI. This ensures the full dependency tree is available for testing.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/open-source-projects-that-must-be-built-before-testing-with-the-snyk-cli.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: EJS Callback Template\nDESCRIPTION: Template for successful authorization callback page\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/render-content-for-users.md#2025-04-21_snippet_6\n\nLANGUAGE: ejs\nCODE:\n```\n<%- include('./partials/header.ejs') %>\n<body>\n  <div>\n    <h2 class=\"main__heading\">Snyk Apps Tutorial</h2>\n  </div>\n  <div class=\"card__30\">\n    <div class=\"callback-page__success-box\">\n      <img class=\"snyk-con-img\" src=\"https://github.com/snyk/snyk-apps-demo/raw/main/src/public/images/success_check.svg\" alt=\"success\" />\n        <div>\n          <h2 class=\"callback-page__success-text\">Successfully connected to Snyk!</h2>\n        </div>\n        <button class=\"button\" onclick=\"location.href='/projects';\">List Projects</button>\n      </div>\n    </div>\n  </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Getting User Details - Snyk API v1 - YAML\nDESCRIPTION: This snippet defines the API endpoint for retrieving user details based on a user ID. It is intended to facilitate user data retrieval for further manipulations or display within applications.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/users-v1.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/user/{userId}\" method=\"get\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Configuring dockercfg.json for Private Registries\nDESCRIPTION: This JSON structure shows how to configure the dockercfg.json file for private registries other than Nexus. It includes authentication details for multiple registries.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/authenticate-to-private-container-registries.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auths\": {\n    \"gcr.io\": {\n      \"auth\": \"BASE64-ENCODED-AUTH-DETAILS\"\n    },\n    \"<yourdomain>.azurecr.io\": {\n      \"auth\": \"BASE64-ENCODED-AUTH-DETAILS\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Azure Repos Import Data Generation Commands\nDESCRIPTION: Command line instructions to run the import:data utility for dev.azure.com and self-hosted Azure. These commands generate the import data needed for the Snyk import command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/creating-import-targets-data-for-import-command.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=snyk* AZURE_TOKEN=*** SNYK_TOKEN=*** snyk-api-import import:data --orgsData=path/to/snyk-orgs.json --source=azure-repos --integrationType=azure-repos\n```\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=snyk* AZURE_TOKEN=*** SNYK_TOKEN=*** snyk-api-import import:data --orgsData=path/to/snyk-orgs.json --source=azure-repos --integrationType=azure-repos --sourceUrl=https://azure.custom.com\n```\n\n----------------------------------------\n\nTITLE: Custom Rules SDK Key Features\nDESCRIPTION: Highlights the primary capabilities of the Snyk IaC SDK for defining custom security rules that can be integrated with Snyk CLI scanning processes\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* [Install the SDK](install-the-sdk.md)\n* [Getting started with the SDK](writing-rules-using-the-sdk/)\n* [Use IaC custom rules with the Snyk CLI](use-iac-custom-rules-with-cli/)\n* [Integrating custom rules within a pipeline](iac-custom-rules-within-a-pipeline.md)\n* [SDK reference](sdk-reference.md)\n```\n\n----------------------------------------\n\nTITLE: Setting Package Manager for Snyk Scanning\nDESCRIPTION: This snippet demonstrates how to set the package manager option to 'pip' in the Snyk command when the file is not 'requirements.txt'. This is crucial for successful SBOM generation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/sbom.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--package-manager=<package manager>\n```\n\n----------------------------------------\n\nTITLE: Defining String Literal Matcher in Specification Language\nDESCRIPTION: This snippet describes the 'StringLiteral' matcher, which matches on string type literals. It specifies the 'Value' template parameter for the string being matched.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/templates-and-predicates.md#2025-04-21_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n#### StringLiteral\n\nMatches on string type literals.\n\nTemplate parameters:\n\n* Value\n```\n\n----------------------------------------\n\nTITLE: Removing Organization Member (DELETE /org/{orgId}/members/{userId})\nDESCRIPTION: API endpoint to remove a member from an organization. This endpoint is part of the v1 API and uses the DELETE method, requiring both the organization ID and user ID as path parameters.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/organizations-v1.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/org/{orgId}/members/{userId}\" method=\"delete\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nexus 2 Instance for Snyk Integration\nDESCRIPTION: This snippet describes the configuration steps for a Nexus 2 instance to integrate with Snyk. Users must provide the Nexus URL, Username, and Password, then click Save.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-open-source/package-repository-integrations/nexus-repository-manager-connection-setup/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Enter the URL of your Nexus instance; this must end with `/nexus/content.`\n* Enter the Username.\n* Enter the Password.\n* Click **Save.**\n```\n\n----------------------------------------\n\nTITLE: Generating CloudFormation File from AWS CDK Application\nDESCRIPTION: This command uses the CDK CLI to synthesize the CloudFormation template from the AWS CDK application. It produces YAML output in the terminal and creates a JSON file in the cdk.out directory.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/aws-cdk-files.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncdk synth\n```\n\n----------------------------------------\n\nTITLE: Example Property Path Format for Identified Issues\nDESCRIPTION: Shows the format of the property path that Snyk uses to identify where issues are located in your configuration files. This helps pinpoint exactly where remediation is needed.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/understand-the-iac-cli-test-results/snyk-iac-cli-test-results-v.-1.938.0-and-earlier.md#2025-04-21_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource > aws_api_gateway_stage[denied] > access_log_settings\n```\n\n----------------------------------------\n\nTITLE: Required JSON Structure for orgs:create Utility in Snyk\nDESCRIPTION: JSON format required for the orgs:create command to create organizations in Snyk. Each organization entry must include a group ID, name, and optional source organization ID for copying settings.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/creating-organizations-in-snyk.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"orgs\": [\n  {\n    \"groupId\": \"<public_snyk_group_id>\",\n    \"name\": \"<name_of_the_organization>\",\n    \"sourceOrgId\": \"<public_snyk_organization_id>\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Specifying Terraform Provider Version for Github\nDESCRIPTION: This command specifies the version of the Terraform provider to use during the scan for Github resources. It uses the `--tf-provider-version` option to define the provider version, with `--to` option pointing to github and terraform.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/detect-drift-and-manually-created-resources/iac-describe-command-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac describe --to=\"github+tf\" --tf-provider-version=4.10.1\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging for Snyk Artifactory Gatekeeper Plugin in XML\nDESCRIPTION: This XML snippet shows how to add a logger configuration to enable debug logging for the Snyk Artifactory Gatekeeper Plugin. It should be inserted into the Artifactory logback.xml file located in the ${ARTIFACTORY_HOME}/var/etc/artifactory/ directory.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-open-source/manage-vulnerabilities/gatekeeper-plugins/artifactory-gatekeeper-plugin.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<logger name=\"io.snyk\" level=\"debug\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Project ID via Terraform Command Line\nDESCRIPTION: Demonstrates how to set the project ID variable when running the Terraform apply command using the '-var' option. Ensures that the correct project ID is used during the execution of the Terraform script.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/google-cloud-integration/google-cloud-integration-web-ui/step-2-create-the-google-service-account-web-ui.md#2025-04-21_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform apply -var=\"project_id=your-project-id\"\n```\n\n----------------------------------------\n\nTITLE: Defining S3 Bucket with ACL in Terraform AWS Provider v3.x.x\nDESCRIPTION: Example of defining an S3 bucket with a permissive ACL using Terraform AWS Provider v3.x.x. This single resource approach is easily scanned by Snyk IaC for security issues.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/scan-your-iac-source-code/scan-terraform-files/terraform-aws-provider-support.md#2025-04-21_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_s3_bucket\" \"example\" {\n  # ... other configuration ...\n  acl = \"public-read-write\"\n}\n```\n\n----------------------------------------\n\nTITLE: Second Vulnerable Code Example with Variable Renaming\nDESCRIPTION: The same vulnerable code as the previous example but with renamed variables, showing how Snyk Code can recognize the same issue despite surface-level changes.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/ignore-issues/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar filesystem = require('fs');\nvar generalLogFileName = req.query.file || 'standard_log.log'; \nvar handleLogFile = filesystem.readFile(generalLogFileName, \"utf8\", function(err, data) {...\n\n```\n\n----------------------------------------\n\nTITLE: Monitoring container image with Snyk CLI\nDESCRIPTION: This command monitors a container image for vulnerabilities using Snyk, keeping a record of the bill of materials. It requires the Snyk CLI to be installed and configured. This is useful for tracking vulnerabilities in production environments.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/snyk-container-specific-ci-cd-strategies.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk container monitor\"\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Variable in CLI\nDESCRIPTION: This snippet shows how to set a proxy variable in the command line. It is useful for configuring proxy settings for the Snyk CLI when running outside of the Eclipse IDE. Replace `<http...>` with the actual proxy address.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/eclipse-plugin/troubleshooting-for-the-eclipse-plugin.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"set http_proxy=<http…>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Veracode Custom Field for Repository URL in JSON\nDESCRIPTION: JSON format for creating a Veracode custom field called 'repoURL' which is required to match Veracode applications with Snyk AppRisk repository assets. This custom field must be created using the Veracode API.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/connect-a-third-party-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"name\": \"repoURL\", \n\"value\": <YOUR GITHUB URL>\n}\n\n```\n\n----------------------------------------\n\nTITLE: Testing C/C++ Code with Snyk CLI\nDESCRIPTION: This snippet shows how to perform a security test on the C/C++ codebase using Snyk's CLI command. It analyzes the source code for vulnerabilities without needing a build step.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/c-c++/guidance-for-snyk-for-c-c++.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk code test\n```\n\n----------------------------------------\n\nTITLE: Running in Debug Mode with Verbose Output\nDESCRIPTION: Command to run the contributor count tool in debug mode with verbose logging. Uses the DEBUG environment variable prefix along with the standard command parameters.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/github-enterprise/github-enterprise-examples.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=snyk* snyk-scm-contributors-count github-enterprise --token TOKEN --url HOST_URL --orgs ORG --repo REPO --exclusionFilePath PATH_TO_FILE --json\n```\n\n----------------------------------------\n\nTITLE: Counting Contributors for a Single Repository in GitHub Enterprise\nDESCRIPTION: Command to retrieve contributor counts for a specific repository within a specific organization in GitHub Enterprise. Requires token, host URL, organization name, and repository name.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/github-enterprise/github-enterprise-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count github-enterprise --token TOKEN --url HOST_URL --orgs ORG --repo REPO\n```\n\n----------------------------------------\n\nTITLE: Applying Common Policy File for Yarn Workspaces with Snyk\nDESCRIPTION: This command applies a common .snyk policy file to all detected Yarn workspace packages, providing a centralized management for ignores and patches.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/snyk-open-source-specific-ci-cd-strategies.md#2025-04-21_snippet_7\n\nLANGUAGE: Yarn\nCODE:\n```\nsnyk test --yarn-workspaces --policy-path=src/.snyk\n```\n\n----------------------------------------\n\nTITLE: Installing snyk-to-html locally from GitHub repository\nDESCRIPTION: Commands to install snyk-to-html locally by cloning the GitHub repository, building it, and running the tool directly.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-to-html.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\nnode ./dist/index.js\n```\n\n----------------------------------------\n\nTITLE: Running in Debug Mode\nDESCRIPTION: This command runs the `snyk-scm-contributors-count` command in debug mode, providing verbose output for troubleshooting. The `DEBUG=snyk*` environment variable enables debug logging for Snyk-related components.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-server/bitbucket-server-examples.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=snyk* snyk-scm-contributors-count bitbucket-server --token BITBUCKET-TOKEN --url BITBUCKET-URL --projectKeys Key1 --repo Repo1 --exclusionFilePath PATH_TO_FILE --skipSnykMonitoredRepos --json\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk Runtime Sensor Add-on in YAML\nDESCRIPTION: YAML configuration for the Snyk Runtime Sensor add-on, including secretName, clusterName, snykGroupId, and snykAPIBaseURL. This configuration is used when setting up the add-on through the AWS console.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nsecretName: snyk-secret\nclusterName: <<MY_CLUSTER>>\nsnykGroupId: <<MY_SNYK_GROUP_ID>>\nsnykAPIBaseURL: api.snyk.io:443\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Container CLI Monitor Command\nDESCRIPTION: This command example shows how to use the Snyk Container CLI to monitor a Docker image, which is recommended to be done after building and before deploying to a cluster.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/assets-and-risk-factors-for-snyk-apprisk/risk-factor-deployed.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk container monitor gcr.io/my-company/my-app:latest\n```\n\n----------------------------------------\n\nTITLE: PATCH Organization IaC Settings\nDESCRIPTION: This endpoint allows you to update the IaC settings for a specific organization.  It requires the organization ID and authentication for the API.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/iacsettings.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/orgs/{org_id}/settings/iac\" method=\"patch\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI Cache Folder - Snyk\nDESCRIPTION: This snippet defines the environment variable `SNYK_CACHE_PATH`, which specifies the path to the directory where the Snyk CLI caches its files. Access requirements must be met for the defined path.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/configure-the-snyk-cli/environment-variables-for-snyk-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n`SNYK_CACHE_PATH`\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Snyk Monitor\nDESCRIPTION: Command to create a Kubernetes secret containing Integration ID, service account token, and Docker config.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/install-the-snyk-controller-on-amazon-elastic-kubernetes-service-amazon-eks.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic snyk-monitor \\\n        -n snyk-monitor --from-file=dockercfg.json \\\n        --from-literal=integrationId=abcd1234-abcd-1234-abcd-1234abcd1234 \\\n        --from-literal=serviceAccountApiToken=bdca4123-dbca-4343-bbaa-1313cbad4231\n```\n\n----------------------------------------\n\nTITLE: Example Rules Bundle Contents\nDESCRIPTION: This is an example output from extracting the contents of a Snyk IaC custom rules bundle. The bundle includes data, Rego rules, a policy WASM and manifest files.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/bundling-rules.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n```\n/data.json\n/lib/main.rego\n/rules/MY_RULE/main.rego\n/policy.wasm\n/.manifest\n```\n```\n\n----------------------------------------\n\nTITLE: Listing previously imported repositories\nDESCRIPTION: Optional command to generate a log of previously imported repositories in a Snyk group. This helps skip re-importing repositories that have already been imported.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-github.com-and-github-enterprise-organizations-and-repos-in-snyk.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import-macos list:imported --integrationType=<integration-type> --groupId=<snyk_group_id>\n```\n\n----------------------------------------\n\nTITLE: Deployment Resource Requirements Configuration\nDESCRIPTION: Detailed resource allocation requirements for different Snyk Code Local Engine deployment scenarios, including CLI, IDE, SCM, and full deployment configurations\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-local-engine.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndeployment_options:\n  cli:\n    ram: 165GB\n    cpu: 60 cores\n    storage: 55GB\n  ide:\n    ram: 165GB\n    cpu: 60 cores\n    storage: 55GB\n  scm:\n    ram: 170GB\n    cpu: 65 cores\n    storage: 65GB\n```\n\n----------------------------------------\n\nTITLE: Permanent Ignore Rule Structure for .snyk File\nDESCRIPTION: YAML syntax for creating a permanent ignore rule by omitting the expires field. This configuration will ignore the specified vulnerability indefinitely for the given library path.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/policies/the-.snyk-file.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nignore:\n  snyk-vulnid:\n    - path to library using > separator :\n        reason: 'text string'\n```\n\n----------------------------------------\n\nTITLE: Example of Wildcard Role Assertions for Default and Specific Roles\nDESCRIPTION: A JSON example demonstrating how to use wildcards to assign default roles to all organizations while specifying different roles for specific organizations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/single-sign-on-sso-for-authentication-to-snyk/custom-mapping/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nroles: [\n        \"snyk:org:*:custom:developer_readonly\",\n        \"snyk:org:development:org_admin\",\n    ]\n```\n\n----------------------------------------\n\nTITLE: Running in Debug Mode with Bitbucket Server\nDESCRIPTION: Example of running the tool in debug mode with Bitbucket Server, which provides additional logging information and can include various optional flags.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/usage.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=snyk* snyk-scm-contributors-count bitbucket-server --token BITBUCKET-TOKEN --url BITBUCKET-URL --projectKeys Key1 --repo Repo1 --exclusionFilePath PATH_TO_FILE --skipSnykMonitoredRepos --json\n```\n\n----------------------------------------\n\nTITLE: Testing container image with Snyk CLI\nDESCRIPTION: This command scans a container image for vulnerabilities using Snyk. It requires the Snyk CLI to be installed and configured with appropriate authentication. The IMAGE_NAME parameter specifies the container image to be tested.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/snyk-container-specific-ci-cd-strategies.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk container test $IMAGE_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Counting Contributors for Specific Workspaces in Bitbucket Cloud\nDESCRIPTION: Command example for getting commits for selected workspaces by providing username, app password, and a comma-separated list of workspace names.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-cloud/bitbucket-cloud-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count bitbucket-cloud --user USERNAME --password APP_PASSWORD --workspaces Workspace1,Workspace2...\n```\n\n----------------------------------------\n\nTITLE: Snyk Container Test with Image Digest and Dockerfile\nDESCRIPTION: Scans a container image referred to by its digest, using a specified Dockerfile. The image is identified by its SHA256 digest and the `--file` option points to the Dockerfile.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/container-test.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk container test app@sha256:17cb37098f0efb819c075eea4ff2a495be909a396e86ece317a6e3a8968e025c --file=Dockerfile\n```\n\n----------------------------------------\n\nTITLE: User Permissions for Nexus 2 with Snyk\nDESCRIPTION: This snippet outlines the user permissions required for Nexus 2 to ensure proper Snyk integration, specifying various repository access rights that must be assigned.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-open-source/package-repository-integrations/nexus-repository-manager-connection-setup/README.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* `Status - Read`\n* `All [<ecosystem>] Repositories - (read)`\n* `[All Repositories | <repoName>] - (view)`\n```\n\n----------------------------------------\n\nTITLE: Fetching Organizations API Endpoint for GitHub Enterprise\nDESCRIPTION: API endpoint used to retrieve organizations from GitHub Enterprise. The endpoint varies based on whether all organizations are being fetched or not.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/github-enterprise/github-enterprise-flow-and-tech.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* To get the orgs from GitHub Enterprise: `api/v3/organizations` (if the `fetchAllOrgs` flag **was** set) or `api/v3/user/orgs` (if the `fetchAllOrgs` flag was **not** set)\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Service Account for Snyk Runtime Sensor - AWS CLI\nDESCRIPTION: This command creates an IAM service account for the Snyk runtime sensor, associating it with the policy created in a previous step.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\neksctl create iamserviceaccount \\\n--name runtime-sensor \\\n--region=<<REGION>> \\\n--cluster \"<<CLUSTER_NAME>>\" \\\n--attach-policy-arn \"$POLICY_ARN\" \\\n--approve \\\n--override-existing-serviceaccounts \\\n--namespace=snyk-runtime-sensor\n```\n\n----------------------------------------\n\nTITLE: Retrieve Targets\nDESCRIPTION: Retrieves a list of targets for a given organization ID using the Snyk REST API. This API call is a GET request to the `/orgs/{org_id}/targets` endpoint, defined in the `rest-spec.json` file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/targets.md#2025-04-21_snippet_0\n\nLANGUAGE: swagger\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/orgs/{org_id}/targets\" method=\"get\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Efficient Monitoring of Dependencies in Gradle Projects\nDESCRIPTION: This command optimally scans all sub-projects for vulnerabilities in Gradle projects by using the all-projects parameter with targeted file referencing.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/snyk-open-source-specific-ci-cd-strategies.md#2025-04-21_snippet_9\n\nLANGUAGE: Gradle\nCODE:\n```\nsnyk test --file=build.gradle --all-sub-projects\n```\n\n----------------------------------------\n\nTITLE: Installing Cocoapods Dependencies for Swift/Objective-C Projects\nDESCRIPTION: For Cocoapods projects without a Podfile.lock file, run this command to generate the lockfile and install dependencies before testing with Snyk CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/open-source-projects-that-must-be-built-before-testing-with-the-snyk-cli.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npod install\n```\n\n----------------------------------------\n\nTITLE: Running Snyk Test Command in Bash\nDESCRIPTION: This snippet demonstrates how to navigate to a project directory and run the Snyk test command to scan for vulnerabilities. The command identifies local dependencies and queries the Snyk service for known vulnerabilities.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/projects/myproj/\n$ snyk test\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Organization in Snyk CLI\nDESCRIPTION: This shell command configures the default organization for the Snyk CLI. The `orgslugname` must match the slug used in the Snyk UI organization URL. This setting applies globally across all CLI commands.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/how-to-select-the-organization-to-use-in-the-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsnyk config set org=orgslugname\n```\n\n----------------------------------------\n\nTITLE: Counting Contributors for a Specific Repository\nDESCRIPTION: This command counts contributors for a specific repository within a Bitbucket Server project. It requires the Bitbucket Server token, URL, a project key, and a repository name.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-server/bitbucket-server-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count bitbucket-server --token BITBUCKET-TOKEN --url BITBUCKET-URL --projectKeys Key1 --repo Repo1\n```\n\n----------------------------------------\n\nTITLE: Checking npm Lockfile Version\nDESCRIPTION: Determining the lockfile version in package-lock.json to understand the dependency tree generated by Snyk. This snippet helps identify the lockfile format used in the project.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/javascript/javascript-for-open-source.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"lockfileVersion\": 3,\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables with dotenv in Docker\nDESCRIPTION: Configuration example showing the path and file structure for loading environment variables using dotenv in a Docker container. The .env file should be mounted at the specified location with appropriate permissions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-snyk-broker-docker-installation/mounting-secrets-with-docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$HOME/.env\n```\n\n----------------------------------------\n\nTITLE: Provisioning an Organization (POST /org/{orgId}/provision)\nDESCRIPTION: API endpoint to provision an organization. This endpoint is part of the v1 API and uses the POST method, requiring the organization ID as a path parameter.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/organizations-v1.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/org/{orgId}/provision\" method=\"post\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Parsing Terraform Files - Terraform\nDESCRIPTION: This Terraform snippet defines an AWS Redshift cluster resource with various parameters. It demonstrates defining infrastructure using Terraform syntax.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/parsing-an-input-file.md#2025-04-21_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"aws_redshift_cluster\" \"example\" {\n  cluster_identifier = \"tf-redshift-cluster\"\n  database_name      = \"mydb\"\n  master_username    = \"foo\"\n  master_password    = \"Mustbe8characters\"\n  node_type          = \"dc1.large\"\n  cluster_type       = \"single-node\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Specific Project Files in a Monorepo\nDESCRIPTION: This command runs Snyk tests for a specific project file (e.g., package.json) in a monorepo setup, enabling focused scanning of individual projects.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/snyk-open-source-specific-ci-cd-strategies.md#2025-04-21_snippet_8\n\nLANGUAGE: General\nCODE:\n```\nsnyk test --file=package.json\n```\n\n----------------------------------------\n\nTITLE: Custom Annotation Example with Named Parameters\nDESCRIPTION: Demonstrates using custom annotations with named parameters in Java\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/templates-and-predicates.md#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage snippets.java.docs;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Target({ElementType.FIELD, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@interface Sensitive {\n    String reason();\n}\n\n\npublic class HasAnnotationWithArgsDemo {\n    private String email = \"support@snyk.io\";\n\n    @Sensitive(reason = \"PII\")\n    public String getEmail() {\n        return email;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Snyk API URL\nDESCRIPTION: Sets the API host for Snyk CLI requests. Useful for regional hosting, on-premise instances, or proxy servers. The CLI automatically upgrades HTTP requests to HTTPS unless SNYK_HTTP_PROTOCOL_UPGRADE is set to 0.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/configure-the-snyk-cli/configure-snyk-cli-to-connect-to-snyk-api.md#2025-04-21_snippet_0\n\nLANGUAGE: environment\nCODE:\n```\n\"SNYK_API\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Required Network Resources for Snyk Applications\nDESCRIPTION: Lists the mandatory network resources that Snyk applications need to access. These include the main Snyk API and application endpoints.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/security-concept-of-operations-for-snyk/access-requirements.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Required\n\n* api.<SNYK_INSTANCE>.io:443\n* app.<SNYK_INSTANCE>.io:443\n```\n\n----------------------------------------\n\nTITLE: Not Found Error Response\nDESCRIPTION: Example of a 404 error response showing the JSON structure returned when an organization cannot be found or access is denied.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/v1-api.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 404,\n    \"message\": \"Org 39db46b1-ad57-47e6-a87d-e34f6968030b was not found or you may not have the correct permissions to access the org.\",\n    \"error\": \"Org 39db46b1-ad57-47e6-a87d-e34f6968030b was not found or you may not have the correct permissions to access the org.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Ignored Results in Snyk Code CLI\nDESCRIPTION: Command to show both open and ignored findings in the CLI output, providing visibility into what issues have been suppressed.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/ignore-issues/consistent-ignores-for-snyk-code-early-access/snyk-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk code test --include-ignores\n```\n\n----------------------------------------\n\nTITLE: Configuring dockercfg.json for Artifactory Container Registry\nDESCRIPTION: This JSON structure shows how to configure dockercfg.json for Artifactory Container Registry with multiple private repositories.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/authenticate-to-private-container-registries.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auths\": {\n    \"<registry1>\": {\n        \"auth\": \"BASE64-ENCODED-AUTH-DETAILS\"\n       },\n    \"<registry2>\": {\n       \"auth\": \"BASE64-ENCODED-AUTH-DETAILS\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for High Availability Mode in Snyk Broker\nDESCRIPTION: This snippet shows how to enable high availability mode for Snyk Broker by setting an environment variable. This setting allows multiple Broker Clients to operate independently, increasing scalability and redundancy.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/high-availability-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nBROKER_HA_MODE_ENABLED=true\n```\n\n----------------------------------------\n\nTITLE: Formatting Security Issues\nDESCRIPTION: JavaScript code for formatting security issues into HTML strings for display\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/tutorial.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction formatIssue({ pkgName, pkgVersions, issueData }) {\n  return `\n  <a href=\"${issueData.url}\">${issueData.title}</a><br/>\n  Vulnerability in ${pkgName} (${pkgVersions.join(', ')}). ${issueData.severity} severity.\n`;\n}\n\ntry {\n  const { newIssues, ...body } = JSON.parse(inputData.body);\n\n  output = { ...body, newIssues: newIssues.map(formatIssue) };\n} catch (err) {\n  output = { newIssues: [], err: err.message };\n}\n```\n\n----------------------------------------\n\nTITLE: Executing the import process with debug logging\nDESCRIPTION: Command to start the import process with debug logging enabled. This imports the GitHub repositories into Snyk according to the generated import data.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-github.com-and-github-enterprise-organizations-and-repos-in-snyk.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=*snyk* snyk-api-import import\n```\n\n----------------------------------------\n\nTITLE: Top Level Usage with GitHub\nDESCRIPTION: Example of top-level usage with GitHub, which starts from the top of the SCM to get all organizations, repositories, and count commits from the past 90 days.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/usage.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count github --token TOKEN\n```\n\n----------------------------------------\n\nTITLE: Loading External Variable Definitions File in Snyk CLI\nDESCRIPTION: Example command showing how to load an external variable definitions file using the --var-file option when scanning Terraform files with Snyk CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/scan-your-iac-source-code/scan-terraform-files/terraform-variables-support-current-iac.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test myproject/staging/networking --var-file=myproject/vars.tf\n```\n\n----------------------------------------\n\nTITLE: Identifying Electron Load Insecure Content Vulnerabilities\nDESCRIPTION: This entry flags the loading of insecure content in electron applications (CWE-16), which can allow attackers to exploit vulnerabilities over unsecured networks.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Disabling Preflight Checks in Snyk Broker\nDESCRIPTION: Environment variable setting to disable the Preflight Checks feature in Snyk Broker. When set to false, no checks will be executed when the Broker Client starts.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/preflight-checks-for-snyk-broker.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"info\" %}\nYou can use the environment variable PREFLIGHT_CHECKS_ENABLED=false to disable the Preflight Checks feature, so no checks will be executed when the Broker Client starts.\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Generate SBOM Using Container Image Digest\nDESCRIPTION: Demonstrate SBOM generation for a specific container image version using its digest, ensuring precise version identification\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/container-sbom.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk container sbom --format=cyclonedx1.6+xml alpine@sha256:c5c5fda71656f28e49ac9c5416b3643eaa6a108a8093151d6d1afc9463be8e33\n```\n\n----------------------------------------\n\nTITLE: Retrieving Slack Notification Customizations via REST API\nDESCRIPTION: API endpoint to list all Slack notification customizations for projects in an organization. Requires org_id and bot_id parameters.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/integrate-with-snyk/jira-and-slack-integrations/slack-app.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGET /orgs/{org_id}/slack_app/{bot_id}/projects\n```\n\n----------------------------------------\n\nTITLE: Variable Precedence Example - Variable Value Override\nDESCRIPTION: Terraform variable values file that overrides the default value of remote_user_addr. This demonstrates variable precedence where tfvars values take precedence over default values.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/scan-your-iac-source-code/scan-terraform-files/terraform-variables-support-current-iac.md#2025-04-21_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nremote_user_addr = \"0.0.0.0/0\"\n```\n\n----------------------------------------\n\nTITLE: Assigning Multiple Organization Roles in JSON\nDESCRIPTION: JSON structure for assigning users different roles (Admin and Collaborator) for multiple Organizations using the 'roles' array.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-configuration/single-sign-on-sso-for-authentication-to-snyk/custom-mapping/legacy-custom-mapping.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"roles\": [\n        \"snyk-{orgslug}-admin\",\n        \"snyk-{orgslug2}-collaborator\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Scanning a .sln File with Snyk in .NET\nDESCRIPTION: This command configures Snyk to scan all sub-projects contained within the specified solution file in .NET projects.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/snyk-open-source-specific-ci-cd-strategies.md#2025-04-21_snippet_5\n\nLANGUAGE: .NET\nCODE:\n```\nsnyk test --file=sln/.sln\n```\n\n----------------------------------------\n\nTITLE: Testing a project with Snyk CLI\nDESCRIPTION: This command tests a local project for open-source vulnerabilities and license issues. It's a core function for identifying security problems in a project.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk test\"\n```\n\n----------------------------------------\n\nTITLE: Using Standalone Snyk Delta\nDESCRIPTION: This command runs snyk-delta as a standalone tool, specifying both baseline and current project coordinates for comparison.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/failing-of-builds-in-snyk-cli.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-delta --baselineOrg xxx --baselineProject xxx --currentOrg xxx --currentProject xxx\n```\n\n----------------------------------------\n\nTITLE: Identifying Device Authentication Bypass Vulnerabilities\nDESCRIPTION: This entry covers device authentication bypass vulnerabilities (CWE-287) in Swift. These vulnerabilities allow unauthorized access to devices or systems, leading to potential exploitation.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: No Vulnerable Log4j Version Output\nDESCRIPTION: Sample command output when no vulnerable log4j versions are detected in the project\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/log4shell-command-use.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk log4shell\nPlease note this command is for already built artifacts. To test source code use `snyk test`.\n\nResults:\nNo known vulnerable version of log4j was detected\n```\n\n----------------------------------------\n\nTITLE: Using Snyk CLI monitor command with project attributes\nDESCRIPTION: Example of using the 'snyk monitor' command with the '--project-environment' argument, which requires specific permissions to edit project attributes.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-admin/user-roles/user-role-management.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk monitor --project-environment\n```\n\n----------------------------------------\n\nTITLE: Pinging Webhook\nDESCRIPTION: HTTP POST request to test the webhook by sending a ping\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/tutorial.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\n> POST /api/v1/org/{orgId}/webhooks/{webhookId}/ping HTTP/2\n> Host: snyk.io\n> Authorization: token {authToken}\n> Content-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Creating organizations in Snyk from generated data\nDESCRIPTION: Command to create Snyk organizations based on the previously generated organization data file. This creates a snyk-created-orgs.json file with organization IDs needed for import.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-bitbucket-cloud-organizations-and-repos-in-snyk.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-api-import orgs:create --file=orgs.json\n```\n\n----------------------------------------\n\nTITLE: Basic Import File Generation Command\nDESCRIPTION: Demonstrates using the snyk-scm-contributors-count tool to generate an import file in a specified directory with a provided authentication token\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/creating-and-using-the-import-file.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count <command> --token TOKEN -- importConfDir /snyk/import/\n```\n\n----------------------------------------\n\nTITLE: Assigning Group Admin Role in JSON\nDESCRIPTION: JSON structure for assigning users with the Group Admin role using the 'roles' array in SAML attributes or OIDC claims.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-configuration/single-sign-on-sso-for-authentication-to-snyk/custom-mapping/legacy-custom-mapping.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"roles\": [\n        \"snyk-groupadmin\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up required tokens for GitHub and Snyk import\nDESCRIPTION: Commands to set the required GitHub and Snyk API tokens as environment variables for authentication during the import process.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/mirroring-github.com-and-github-enterprise-organizations-and-repos-in-snyk.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GITHUB_TOKEN=*** && export SNYK_TOKEN=***\n```\n\n----------------------------------------\n\nTITLE: Setting Bitbucket Server Personal Access Token\nDESCRIPTION: Bash command to set the Bitbucket Server personal access token as an environment variable, which is required for authentication during the import process.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/creating-import-targets-data-for-import-command.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport BITBUCKET_SERVER_TOKEN=your_personal_access_token\n```\n\n----------------------------------------\n\nTITLE: pnpm Project Options Command Line Arguments\nDESCRIPTION: Command line arguments for pnpm projects in Snyk CLI, including options for development dependencies, multi-project scanning, and dependency handling.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/cli-commands-and-options-summary.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n--dev\n--all-projects\n--fail-on\n--prune-repeated-subdependencies\n```\n\n----------------------------------------\n\nTITLE: Parsing Terraform Plan JSON Output Files - Command\nDESCRIPTION: This command converts a Terraform Plan JSON output file into a usable JSON format using the Snyk parse command with the tf-plan format option.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/parsing-an-input-file.md#2025-04-21_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nsnyk-iac-rules parse example.json.tfplan --format=tf-plan\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript CodeBuild with NPM\nDESCRIPTION: Example buildspec.yml for a JavaScript project using CodeBuild, demonstrating standard npm installation process\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/aws-codepipeline-integration-by-adding-a-snyk-scan-stage/aws-code-pipeline-codebuild-step-example.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 0.2\nphases:\n  build:\n    commands:\n      - npm install\nartifacts:\n  files:\n    - '**/*'\n```\n\n----------------------------------------\n\nTITLE: CLI Scan Targeting for Priority Applications\nDESCRIPTION: Targeted Snyk CLI scanning approach for securing critical applications with precision and focused visibility\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/implement-snyk/enterprise-implementation-guide/phase-1-discovery-and-planning/create-rollout-plan.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Example Snyk CLI scan for priority application\nsnyk test --severity-threshold=high --project-name=critical-app\n```\n\n----------------------------------------\n\nTITLE: Identifying File Inclusion Vulnerabilities\nDESCRIPTION: This entry addresses file inclusion vulnerabilities (CWE-98) specific to PHP. These flaws can enable remote code execution or unauthorized file access.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-security-rules/README.md#2025-04-21_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Exporting Snyk Test Results to SARIF File with Terminal Display\nDESCRIPTION: Command to run Snyk code test and export results to a SARIF file while maintaining standard terminal output.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/view-snyk-code-cli-results.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsnyk code test --sarif-file-output=<path/to/new_sarif_file>\n```\n\n----------------------------------------\n\nTITLE: Testing a Single Kubernetes File Example\nDESCRIPTION: This example demonstrates how to use the Snyk CLI to test a single Kubernetes deployment file named 'deploy.yaml'.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/kubernetes-files.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test deploy.yaml\n```\n\n----------------------------------------\n\nTITLE: Fetching Repositories API Endpoint for GitHub Enterprise\nDESCRIPTION: API endpoint used to retrieve repositories that correspond to the fetched or provided organizations list in GitHub Enterprise.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/github-enterprise/github-enterprise-flow-and-tech.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* To get the list of the repo/s that correlate with the fetched/provided orgs list: `api/v3/orgs/{Org}/repos`\n```\n\n----------------------------------------\n\nTITLE: Example Role Mapping for Product Team\nDESCRIPTION: JSON structure example for assigning the Org Collaborator role to the Product team for all Organizations under a specific Group.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-configuration/single-sign-on-sso-for-authentication-to-snyk/custom-mapping/legacy-custom-mapping.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"roles\": [\n        \"snyk-{groupID}\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Ant Task for Retrieving Ivy Dependencies\nDESCRIPTION: Ant task defined in build.xml for resolving and retrieving Ivy-managed dependencies.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<target name=\"resolve-dependencies\" depends=\"init\">\n    <ivy:retrieve pattern=\"${lib.dir}/[artifact]-[revision].[ext]\"/>\n</target>\n```\n\n----------------------------------------\n\nTITLE: Configuring NODE_EXTRA_CA_CERTS for self-signed certificates\nDESCRIPTION: Environment variable configuration to use a custom CA certificate for HTTPS API calls when working with self-signed certificates.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-tools/tool-snyk-api-import/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport NODE_EXTRA_CA_CERTS=./path-to-ca\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings with Helm\nDESCRIPTION: Sets up proxy configuration for outbound connections using Helm chart values.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/optional-installation-steps-for-snyk-controller-with-helm.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install snyk-monitor snyk-charts/snyk-monitor \\\n             --namespace snyk-monitor \\\n             --set clusterName=\"Production cluster\" \\\n             --set https_proxy=http://192.168.99.100:8080\n```\n\n----------------------------------------\n\nTITLE: SPDX JSON for Unmanaged Project\nDESCRIPTION: Generates an SPDX 2.3 JSON document for unmanaged software projects with the Snyk CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/sbom.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk sbom --unmanaged --format=spdx2.3+json\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repository - Kubernetes Bash\nDESCRIPTION: This command updates the specified Helm repository, ensuring that you have the latest version of the Snyk runtime sensor chart.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/snyk-apprisk/integrations-for-snyk-apprisk/snyk-runtime-sensor.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update <<SENSOR_REPO_NAME>>\n```\n\n----------------------------------------\n\nTITLE: Defining JSON:API Content-Type Header\nDESCRIPTION: Specify the Content-Type header when making requests that contain data to the Snyk REST API, ensuring that requests adhere to the API requirements.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/rest-api/about-the-rest-api.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nContent-Type: application/vnd.api+json\n```\n\n----------------------------------------\n\nTITLE: API Response: Vulnerability Severities (JSON)\nDESCRIPTION: Example of how vulnerability severities are represented in the API response, including different severity sources and CVSS scores.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/issues-list-issues-for-a-package.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"severities\": [\n    {\n        \"type\": \"primary\",\n        \"source\": \"Snyk\",\n        \"level\": \"medium\",\n        \"score\": 6.9,\n        \"version\": \"4.0\",\n        \"vector\": \"CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:L/SC:N/SI:N/SA:N\"\n    },\n    {\n        \"type\": \"secondary\",\n        \"source\": \"Snyk\",\n        \"level\": \"medium\",\n        \"score\": 5.3,\n        \"version\": \"3.1\",\n        \"vector\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L\"\n    },\n    {\n        \"type\": \"secondary\",\n        \"source\": \"NVD\",\n        \"level\": \"high\",\n        \"score\": 7.5,\n        \"version\": \"3.1\",\n        \"vector\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H\"\n    },\n    {\n        \"type\": \"secondary\",\n        \"source\": \"Red Hat\",\n        \"level\": \"high\",\n        \"score\": 7.5,\n        \"version\": \"3.1\",\n        \"vector\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H\"\n    },\n    {\n        \"type\": \"secondary\",\n        \"source\": \"SUSE\",\n        \"level\": \"high\",\n        \"score\": 7.5,\n        \"version\": \"3.1\",\n        \"vector\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H\"\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Dependencies with Composer\nDESCRIPTION: For PHP projects using Composer without a composer.lock file, run this command to generate the lockfile and install dependencies before testing with Snyk CLI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-open-source/open-source-projects-that-must-be-built-before-testing-with-the-snyk-cli.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Backlog PR Check for Description\nDESCRIPTION: Utilizing the `is_backlog_pr` variable, this YAML code provides a method for indicating whether a pull request targets existing vulnerabilities, known as a backlog PR.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: |\n  Is this pr a backlog pr? {{ is_backlog_pr }}\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Contributors from Bitbucket Cloud Count\nDESCRIPTION: Command example for excluding certain contributors by providing a file containing email addresses to ignore when counting commits.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/cli-tools/snyk-scm-contributors-count/scripts-for-scm-contributors-count/bitbucket-cloud/bitbucket-cloud-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsnyk-scm-contributors-count bitbucket-cloud --user USERNAME --password APP_PASSWORD --workspaces Workspace1,Workspace2 --exclusionFilePath PATH_TO_FILE\n```\n\n----------------------------------------\n\nTITLE: Configuring Deeproxy Verification Endpoint for SNYK-EU-01\nDESCRIPTION: Configuration entry for values-customer-settings.yml to set the deeproxy verification endpoint for the SNYK-EU-01 region.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/working-with-snyk/regional-hosting-and-data-residency.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndeeproxy:\nverificationEndpoint: \"https://api.eu.snyk.io/v1/validate/token/snyk-to-deepcode-proxy-validation\"\n```\n\n----------------------------------------\n\nTITLE: Introducing Snyk IaC Custom Rules SDK\nDESCRIPTION: Overview of the Snyk Infrastructure as Code SDK for creating custom security rules to supplement standard Snyk security checks\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# IaC custom rules\n\n{% hint style=\"info\" %}\n**Feature availability**\n\nIaC custom rules are available only with Enterprise plans.\n```\n\n----------------------------------------\n\nTITLE: Example of unsupported regex feature (backreferences)\nDESCRIPTION: Shows an example of a regex pattern using backreferences, which is not supported in the Custom Versioning Schema implementation based on RE2.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/use-snyk-container/use-custom-base-image-recommendations/custom-versioning-schema-for-custom-base-images.md#2025-04-21_snippet_6\n\nLANGUAGE: regex\nCODE:\n```\n(?<thing>.+)_\\k<thing>/\n```\n\n----------------------------------------\n\nTITLE: CocoaPods Project Options Command Line Arguments\nDESCRIPTION: Command line argument for CocoaPods projects in Snyk CLI, specifically for controlling strict out-of-sync behavior.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/cli-commands-and-options-summary.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n--strict-out-of-sync=true|false\n```\n\n----------------------------------------\n\nTITLE: Authentication Header Example\nDESCRIPTION: Shows the required format for the Authorization header when making API requests. The header must include 'token' followed by the API key.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/v1-api.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAuthorization: token API_KEY\n```\n\n----------------------------------------\n\nTITLE: Broker Deployment Environment Variable for US-02 Region\nDESCRIPTION: Setting Broker server URL environment variable for the US-02 regional deployment using Docker container configuration\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/working-with-snyk/regional-hosting-and-data-residency.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-e BROKER_SERVER_URL=https://broker.us.snyk.io\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Limits\nDESCRIPTION: Sets resource requests and limits for the Snyk monitor.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/optional-installation-steps-for-snyk-controller-with-helm.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install snyk-monitor snyk-charts/snyk-monitor \\\n             --namespace snyk-monitor \\\n             --set requests.\"ephemeral-storage\"=\"50Gi\"\n             --set limits.\"ephemeral-storage\"=\"50Gi\"\n```\n\n----------------------------------------\n\nTITLE: Running Snyk IaC Test Command for Terraform\nDESCRIPTION: This snippet demonstrates how to use the Snyk CLI to test a Terraform file for infrastructure as code issues.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/understand-the-iac-cli-test-results/snyk-iac-cli-test-results-v.-1.939.0-and-later.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test aws_api_gateway_stage_logging.tf\n```\n\n----------------------------------------\n\nTITLE: Advanced Snyk Maven Plugin Arguments Configuration\nDESCRIPTION: Demonstrates configuration of additional CLI arguments for customizing vulnerability scanning behavior\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/maven-plugin-integration-with-snyk.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <args>\n    <arg>--severity-threshold=high</arg>\n    <arg>--scan-all-unmanaged</arg>\n    <arg>--json</arg>\n  </args>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Getting help with Snyk CLI command\nDESCRIPTION: This command allows you to get help on specific Snyk CLI commands. It can be run on any snyk command.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"snyk auth --help\"\n```\n\n----------------------------------------\n\nTITLE: Creating ConfigMap for Registry Configuration\nDESCRIPTION: Creates a ConfigMap from the registries.conf file for registry settings.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/optional-installation-steps-for-snyk-controller-with-helm.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create configmap snyk-monitor-registries-conf \\\n        -n snyk-monitor \\\n        --from-file=<path_to_registries_conf_file>\n```\n\n----------------------------------------\n\nTITLE: Starting Snyk MCP Server with SSE Transport\nDESCRIPTION: Command-line instruction for starting the Snyk MCP server using Server-Sent Events (SSE) transport with the experimental flag\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/snyk-mcp-experimental.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsnyk mcp -t sse --experimental\n```\n\n----------------------------------------\n\nTITLE: Testing Build Tools with Snyk CLI\nDESCRIPTION: Command syntax for testing build tools using Snyk CLI with context-specific options.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsnyk test -- [<context-specific_options>]\n```\n\n----------------------------------------\n\nTITLE: Snyk IaC Test Command Example\nDESCRIPTION: Example of the Snyk CLI command for testing IaC files and reporting results to the Web UI.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test --report\n```\n\n----------------------------------------\n\nTITLE: Azure Client ID Configuration\nDESCRIPTION: YAML configuration for specifying Azure Client ID when using AKS with user-managed identities.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/install-the-snyk-controller-with-helm-azure-and-google-cloud-platform.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nazureEnvVars:\n  - name: AZURE_CLIENT_ID\n    value: \"abcd1234-abcd-1234-abcd-1234abcd1234\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform Project for Snyk IAM Role Creation\nDESCRIPTION: This command initializes the Terraform project in the directory containing the Snyk IAM role Terraform file.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/aws-integration/aws-integration-web-ui/step-2-create-the-snyk-iam-role.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\n```\n\n----------------------------------------\n\nTITLE: Checking Contents of the Rules Bundle\nDESCRIPTION: This command checks the contents of a tarball rules bundle without extracting it.  It uses the `tar` command with the `-tf` options to list the files within the `bundle.tar.gz` archive.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/current-iac-custom-rules/writing-rules-using-the-sdk/bundling-rules.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n```\ntar -tf bundle.tar.gz\n```\n```\n\n----------------------------------------\n\nTITLE: Snyk Infrastructure as Code Action for Terraform Plan Scanning in YAML\nDESCRIPTION: This workflow demonstrates how to specify the scan mode for Terraform Plan files using the Snyk Infrastructure as Code Action, setting it to scan only resource changes.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-infrastructure-as-code-action.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Snyk Infrastructure as Code\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run Snyk to check Kubernetes manifest file for issues\n        uses: snyk/actions/iac@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --scan=resource-changes\n```\n\n----------------------------------------\n\nTITLE: Testing and Reporting Serverless Files to Snyk UI\nDESCRIPTION: Command to scan Serverless configuration files and upload the results to the Snyk UI for visualization and tracking.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/serverless-files.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test --report\n```\n\n----------------------------------------\n\nTITLE: Output for Fixed PR Description in YAML\nDESCRIPTION: A YAML snippet manifests output when 'is_fix_pr' is used, suggesting how fixed PR details are displayed within a pull request description using a JSON templating logic.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/pull-requests/snyk-pull-or-merge-requests/customize-pr-templates/variables-list-and-description.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nThis PR has been opened to fix vulnerabilities in your project.\n```\n\n----------------------------------------\n\nTITLE: Getting User Notification Settings for Organization - Snyk API v1 - YAML\nDESCRIPTION: This snippet describes the API endpoint for retrieving notification settings for a specific organization for the current user, aiding users in understanding their notification preferences.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/users-v1.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/v1-api-spec.yaml\" path=\"/user/me/notification-settings/org/{orgId}\" method=\"get\" %}\n[v1-api-spec.yaml](../../.gitbook/assets/v1-api-spec.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Storing Snyk API Token Locally\nDESCRIPTION: Store the Snyk API token locally using the auth command for automatic authentication in future commands.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/authenticate-to-use-the-cli.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk auth <SNYK_API_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Create Group Service Account - POST Request\nDESCRIPTION: API endpoint to create a new service account in a Snyk Group with specified role permissions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/service-accounts/manage-service-accounts-using-the-snyk-api.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.snyk.io/rest/groups/{groupId}/service_accounts\n```\n\n----------------------------------------\n\nTITLE: Partial External Secrets Configuration\nDESCRIPTION: Example of mixing direct values and external secrets in Helm configuration\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/kubernetes-secrets-and-helm-chart-installation.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nscmType: github-com\nbrokerToken: <my-broker-token>\nuseExternalSecrets: true\ngithubToken: \"\"\n```\n\n----------------------------------------\n\nTITLE: Update Organization Service Account - PATCH Request\nDESCRIPTION: API endpoint to update the details of a specific service account in a Snyk Organization.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/service-accounts/manage-service-accounts-using-the-snyk-api.md#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPATCH https://api.snyk.io/rest/orgs/{orgId}/service_accounts/{serviceAccountId}\n```\n\n----------------------------------------\n\nTITLE: Setting Snyk Environment Variables on Linux/Mac\nDESCRIPTION: Commands to set the SNYK_TOKEN and TENANT_ID environment variables in Linux/Mac environments\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/prerequisites-for-universal-broker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport SNYK_TOKEN=xxxx\nexport TENANT_ID=yyyy\n```\n\n----------------------------------------\n\nTITLE: Update Group Service Account - PATCH Request\nDESCRIPTION: API endpoint to update the details of a specific service account in a Snyk Group.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/service-accounts/manage-service-accounts-using-the-snyk-api.md#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPATCH https://api.snyk.io/rest/groups/{groupId}/service_accounts/{serviceAccountId}\n```\n\n----------------------------------------\n\nTITLE: Setting Python Version for Snyk CLI\nDESCRIPTION: Command line option to specify the Python version when running Snyk test or monitor commands\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/python/snyk-cli-for-python.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n--command=python3\n```\n\n----------------------------------------\n\nTITLE: Running Log4shell Command\nDESCRIPTION: Basic CLI command to scan a Java project for log4j vulnerabilities after building the project\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/log4shell-command-use.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk log4shell\n```\n\n----------------------------------------\n\nTITLE: Testing Specific IaC Files\nDESCRIPTION: Command to test specific Infrastructure as Code files in the current working directory\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsnyk iac test file-1.tf dir/file-2.tf\n```\n\n----------------------------------------\n\nTITLE: Modifying IAM Role Name in CloudFormation\nDESCRIPTION: Example of how to customize the IAM role name in the CloudFormation template.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/aws-integration/aws-integration-api/step-1-download-iam-role-iac-template-api.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n      RoleName: snyk-cloud-role\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for Multi-Project Scanning\nDESCRIPTION: This configuration command is used with the Snyk CLI to test all sub-projects in a multi-project Gradle setup.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/snyk-open-source-specific-ci-cd-strategies.md#2025-04-21_snippet_0\n\nLANGUAGE: Gradle\nCODE:\n```\nsnyk test --all-sub-projects\n```\n\n----------------------------------------\n\nTITLE: Creating Snyk Monitor Namespace\nDESCRIPTION: Kubernetes command to create a dedicated namespace for the Snyk Controller.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-container/kubernetes-integration/install-the-snyk-controller/install-the-snyk-controller-on-amazon-elastic-kubernetes-service-amazon-eks.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace snyk-monitor\n```\n\n----------------------------------------\n\nTITLE: Snyk Node High Severity Vulnerability Scanning\nDESCRIPTION: GitHub Actions workflow that configures Snyk to scan only for high severity vulnerabilities in Node.js projects using the severity threshold argument.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/github-actions-for-snyk-setup-and-checking-for-vulnerabilities/snyk-node-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Example workflow for Node using Snyk\non: push\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/node@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n```\n\n----------------------------------------\n\nTITLE: Configure .NET SDK with rollForward in global.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the `global.json` file to use the `rollForward` directive.  This allows Snyk to scan the code using a newer version of the SDK, even with version pinning.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/error-catalog.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sdk\": {\n    \"version\": \"6.0.101\",\n    \"rollForward\": \"latestMajor\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manage Organization Service Account Secret - POST Request\nDESCRIPTION: API endpoint to manage client secrets for oauth_client_secret service accounts in a Snyk Organization.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/service-accounts/manage-service-accounts-using-the-snyk-api.md#2025-04-21_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.snyk.io/rest/orgs/{orgId}/service_accounts/{serviceAccountId}/secrets\n```\n\n----------------------------------------\n\nTITLE: Setting Custom CA Certificate File in Helm\nDESCRIPTION: Command to specify a custom Certificate Authority file located in the Helm chart directory.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/parameters-for-troubleshooting-and-providing-your-own-certificate-with-helm.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--set caCert=<CERT_NAME>\n```\n\n----------------------------------------\n\nTITLE: Delete Organization Service Account - DELETE Request\nDESCRIPTION: API endpoint to permanently delete a service account from a Snyk Organization.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/service-accounts/manage-service-accounts-using-the-snyk-api.md#2025-04-21_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nDELETE https://api.snyk.io/rest/orgs/{orgId}/service_accounts/{serviceAccountId}\n```\n\n----------------------------------------\n\nTITLE: Maven Aggregate Project Testing\nDESCRIPTION: CLI command to scan Maven aggregate projects using Snyk\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/guidance-for-java-and-kotlin.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test --maven-aggregate-project\n```\n\n----------------------------------------\n\nTITLE: Maven Profile Testing Command\nDESCRIPTION: CLI command to test a specific Maven profile configuration using Snyk\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/guidance-for-java-and-kotlin.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnyk test -- -P prod\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform Project for Azure App Registration\nDESCRIPTION: Command to initialize the Terraform project before creating Azure infrastructure.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/azure-integration-for-cloud-configurations/azure-integration-web-ui/step-2-create-the-entra-id-app-registration.md#2025-04-21_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform init\n```\n\n----------------------------------------\n\nTITLE: Build File Extensions\nDESCRIPTION: Supported build file extensions for Maven and Gradle in Snyk\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/README.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npom.xml\nbuild.gradle\nbuild.gradle.kts\n```\n\n----------------------------------------\n\nTITLE: Example Terraform API Response\nDESCRIPTION: Sample JSON response from the API when requesting a Terraform template format.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/cloud-platform-integrations/aws-integration/aws-integration-api/step-1-download-iam-role-iac-template-api.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonapi\": {\n    \"version\": \"1.0\"\n  },\n  \"data\": {\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\n    \"type\": \"permissions\",\n    \"attributes\": {\n      \"data\": \"data \\\"aws_iam_policy_document\\\"<...>\",\n      \"type\": \"tf\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Specific npm Dependency\nDESCRIPTION: Tests a specific npm package version for vulnerabilities. This command checks the ionic package version 1.6.5 against Snyk's vulnerability database.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/commands/test.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk test ionic@1.6.5\n```\n\n----------------------------------------\n\nTITLE: Configuring Private NuGet Package Sources in XML\nDESCRIPTION: Example of a NuGet.config file that defines private package sources. This configuration is relevant to the error where the dotnet CLI is unable to restore from private package sources, illustrating how to specify custom NuGet feeds.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/error-catalog.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <clear />\n    <add key=\"AzureFeed\" value=\"https://pkgs.dev.azure.com/your-org/_packaging/your-repo/nuget/v3/index.json\" />\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n  </packageSources>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Displaying Info Hint for Analytics Access Requirements in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to create an information hint box, explaining the tenant roles required to access Analytics features in Snyk.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/enterprise-analytics/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"info\" %}\nTo access Analytics, you need to have one of the following [tenant roles](../../snyk-admin/tenant-groups-and-organizations/tenant/manage-users-in-a-tenant.md): Tenant Admin, Tenant Viewer.\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Disabling CA Certificate Trust in Helm\nDESCRIPTION: Command to disable CA certificate trust for troubleshooting purposes.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/classic-broker/install-and-configure-snyk-broker/advanced-configuration-for-helm-chart-installation/parameters-for-troubleshooting-and-providing-your-own-certificate-with-helm.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--set disableCaCertTrust=true\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Reference in Glossary\nDESCRIPTION: Reference to Dockerfile FROM directive in base image definition\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/getting-started/glossary.md#2025-04-21_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Controller for Snyk OAuth2 in TypeScript\nDESCRIPTION: This code defines the AuthController class which handles the /auth route for initiating the Snyk OAuth2 authentication process using Passport.js.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/routes/auth/authController.ts\n\nimport type { Controller } from \"../../interfaces/Controller\";\nimport { Router } from \"express\";\nimport passport from \"passport\";\n\nclass AuthController implements Controller {\n  // The base URL path for this controller\n  public path = \"/auth\";\n  // Express router for this controller\n  public router = Router();\n\n  constructor() {\n    this.initRoutes();\n  }\n\n  /**\n   * The /auth route is called to authenticate the App\n   * via Snyk using passportjs authenticate method\n   */\n  private initRoutes() {\n    this.router.get(`${this.path}`, passport.authenticate(\"snyk-oauth2\"));\n  }\n}\n\nexport default AuthController;\n```\n\n----------------------------------------\n\nTITLE: Converting Bicep to JSON using Azure CLI\nDESCRIPTION: Command to convert a Bicep configuration file to JSON format using the Azure Bicep CLI before security testing.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-iac/test-your-iac-files/arm-files.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz bicep build -f deploy.bicep\n```\n\n----------------------------------------\n\nTITLE: Setting Default Organization in Snyk CLI\nDESCRIPTION: Command to configure the default organization ID for Snyk CLI operations. This setting ensures all new tests and monitoring are associated with the specified organization.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-ci-cd-integration-deployment-and-strategies/snyk-test-and-snyk-monitor-in-ci-cd-integration.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ snyk config set org=<ORG_ID>\n```\n\n----------------------------------------\n\nTITLE: Creating Snyk Webhook API Request\nDESCRIPTION: HTTP POST request to create a new Snyk Webhook. Requires Snyk Organization ID, authentication token, and target webhook URL with an optional secret string.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/how-to-use-snyk-webhooks-to-integrate-new-relic-with-snyk/create-a-snyk-webhook.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.snyk.io/v1/org/{SNYK-ORG-ID}/webhooks HTTP/2\nHost: snyk.io\nAuthorization: token {SNYK-TOKEN}\nContent-Type: application/json\n\n{\n    \"url\": \"https://{URL}\",\n    \"secret\": \"my-secret-string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS API Gateway Mapping Template for JSON Content\nDESCRIPTION: Mapping template configuration for handling POST requests with application/json content type. This template processes the HTTP method, request body, and headers for integration with Lambda.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/webhooks-apis/guides-to-webhooks/how-to-use-snyk-webhooks-to-connect-snyk-to-slack-with-aws-lambda/aws-lambda-setup-set-up-the-trigger/with-api-gateway/aws-api-gateway-add-the-post-method-to-connect-snyk-to-slack.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"method\": \"$context.httpMethod\",\n\"body\" : $input.json('$'),\n\"headers\": {\n#foreach($param in $input.params().header.keySet())\n\"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\"\n#if($foreach.hasNext),#end #end\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Example Role Mapping for Business Development Team\nDESCRIPTION: JSON structure example for assigning the Org Admin role to the Business Development team for a specific Organization.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-configuration/single-sign-on-sso-for-authentication-to-snyk/custom-mapping/legacy-custom-mapping.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"roles\": [\n        \"snyk-partner-plugins-admin\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: IDE Support Version Matrix Table in Markdown\nDESCRIPTION: Markdown table showing the supported versions for each Snyk IDE plugin/extension, including Eclipse, JetBrains, Visual Studio, and Visual Studio Code compatibility details.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ide-plugins-and-extensions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Snyk plugin or extension     | IDE version supported                                                                                                                                                                                                |\n| ---------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Eclipse plugin               | <p>The latest Snyk Eclipse plugin supports use with Eclipse 2024-03 or newer.</p><p>Older plugin versions may support use with Eclipse 2023-03 or newer.</p>                                                         |\n| JetBrains plugin             | <p>The latest Snyk JetBrains plugin supports use with all JetBrains IDEs 2023.3 or newer.</p><p>Older plugin versions may support use with JetBrains IDEs 2020.3 or newer.</p>                                       |\n| Visual Studio extension      | <p>The latest version of the Snyk Visual Studio extension supports use with Visual Studio 2022 (version 17.5 and above).</p><p>Older extension versions may support use with Visual Studio 2015, 2017, and 2019.</p> |\n| Visual Studio Code extension | The latest version of the Snyk Visual Studio Code extension supports use with Visual Studio Code version 1.76.0 and later.                                                                                           |\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Middleware for EJS\nDESCRIPTION: TypeScript code to configure Express middleware for EJS templating and static file serving\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/render-content-for-users.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass App {\n  private initGlobalMiddlewares() {\n    this.app.set(\"views\", path.join(__dirname, \"/views\"));\n    this.app.set(\"view engine\", \"ejs\");\n    this.app.use('/public', express.static(path.join(__dirname, '/public')));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Main Function in C# for .NET Projects\nDESCRIPTION: Example of a correct Main function implementation in C# to resolve the 'missing static Main function' error. This snippet demonstrates the proper structure and signature for the entry point of a C# program.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/error-catalog.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Example\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"hello world\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Ivy Dependencies Configuration File\nDESCRIPTION: Sample ivy.xml file showing how to define dependencies in Apache Ivy, including organization, module details, and external dependencies.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/java-and-kotlin/snyk-cli-for-java-and-kotlin.md#2025-04-21_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<ivy-module version=\"2.0\">\n    <info organisation=\"com.example\" module=\"my-project\" revision=\"1.0\"/>\n\n    <dependencies>\n        <dependency org=\"junit\" name=\"junit\" rev=\"4.12\" conf=\"default\"/>\n    </dependencies>\n</ivy-module>\n```\n\n----------------------------------------\n\nTITLE: Setting Regional API Hostname for Linux/Mac\nDESCRIPTION: Command to set the Snyk API hostname for non-US-01 regions on Linux/Mac systems\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/enterprise-setup/snyk-broker/universal-broker/prerequisites-for-universal-broker.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport SNYK_API_HOSTNAME=https://api.REGION.snyk.io\n```\n\n----------------------------------------\n\nTITLE: Ruby Version Support Table\nDESCRIPTION: Table showing all supported Ruby versions in Snyk, from version 2.3.X through 3.2.X, including specific patch versions.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/supported-languages-package-managers-and-frameworks/ruby/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Ruby main version | Ruby specific version                                         |\n| ----------------- | ------------------------------------------------------------- |\n| **`2.3.X`**       | `2.3.1`, `2.3.6`                                              |\n| **`2.4.X`**       | `2.4.0`, `2.4.1`, `2.4.2`, `2.4.5`, `2.4.6`, `2.4.9`          |\n| **`2.5.X`**       | `2.5.0`, `2.5.1`, `2.5.3`                                     |\n| **`2.6.X`**       | `2.6.1`, `2.6.3`, `2.6.5`, `2.6.6`                            |\n| **`2.7.X`**       | `2.7.2`, `2.7.3`, `2.7.4`, `2.7.5`, `2.7.6`, `2.7.7`, `2.7.8` |\n| **`3.0.X`**       | `3.0.0`                                                       |\n| **`3.1.X`**       | `3.1.0`, `3.1.1`, `3.1.2`, `3.1.3`                            |\n| **`3.2.X`**       | `3.2.0`, `3.2.1`                                              |\n```\n\n----------------------------------------\n\nTITLE: Understanding Snyk API JSON Response\nDESCRIPTION: Explains a typical JSON response from the Snyk API after updating an environment. Includes details like environment ID, updated attributes, and status, shown for AWS as an example.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-iac/getting-started-with-cloud-scans/manage-cloud-environments/update-a-cloud-environment.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonapi\": {\n    \"version\": \"1.0\"\n  },\n  \"data\": {\n    \"id\": \"3b7ccff9-8900-4e54-0000-1234abcd1234\",\n    \"type\": \"environment\",\n    \"attributes\": {\n      \"name\": \"Example AWS Environment\",\n      \"options\": {\n        \"role_arn\": \"arn:aws:iam::123412341234:role/snyk-cloud-role-updated\"\n      },\n      \"native_id\": \"123412341234\",\n      \"properties\": {\n        \"account_id\": \"123412341234\"\n      },\n      \"kind\": \"aws\",\n      \"revision\": 2,\n      \"created_at\": \"2022-07-31T00:50:49Z\",\n      \"status\": \"success\",\n      \"updated_at\": \"2022-08-17T18:18:01Z\"\n    },\n    \"relationships\": {\n      \"organization\": {\n        \"data\": {\n          \"id\": \"d70c1768-5675-0000-1234-abcd1234abcd\",\n          \"type\": \"organization\"\n        },\n        \"links\": {\n          \"related\": \"/orgs/d70c1768-5675-0000-1234-abcd1234abcd?version=2022-12-21~beta\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Base Image - REST API POST Request\nDESCRIPTION: This snippet illustrates the endpoint for creating a custom base image using the POST method. It requires the REST API for proper authentication and requests at the specified path.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/reference/custom-base-images.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{% swagger src=\"../../.gitbook/assets/rest-spec.json\" path=\"/custom_base_images\" method=\"post\" %}\n[rest-spec.json](../../.gitbook/assets/rest-spec.json)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Gradle and Java Image Migration\nDESCRIPTION: Provides migration guidance for Gradle-based Snyk images, covering multiple JDK versions and Gradle configurations\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scm-ide-and-ci-cd-integrations/snyk-ci-cd-integrations/snyk-images-guides-to-migration/snyk-images-migration.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* Deprecated: snyk/snyk:gradle-6.4, snyk/snyk:gradle-6.4-jdk8/11/14\n* Recommended: snyk/snyk:gradle, snyk/snyk:gradle-jdk8/11/12/13/14/16/17/18/19/20/21\n```\n\n----------------------------------------\n\nTITLE: PGP Public Key Block for Vulnerability Reporting\nDESCRIPTION: This code snippet provides the PGP public key that can be used to encrypt vulnerability disclosures sent to Snyk via email. Using this key ensures that sensitive information about potential vulnerabilities is transmitted securely. Vulnerability reports can be submitted to `report@snyk.io` directly or by using the Snyk Vulnerability Disclosure form.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/working-with-snyk/disclosure-of-a-vulnerability-in-an-open-source-package.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"-----BEGIN PGP PUBLIC KEY BLOCK-----\\nmQINBFmR918BEADrS77g30ejwt+ecbqJax4ZIBzQC6KSJxbuZ2slEDYdB2aDFj0G\\nbYhj685q7so6VXzko7weJKzfpbttaaFDPznx752T2nbPdh/ci0HFdbzPHvEBcmIK\\naoJAWhiTICT7ys+sdzEXQbtGqsNltExD+ylqws6ovRf1wWA1oCLMLy2/wGl3n67p\\njNW2ZkF/5Ke/GOfAM6CCdadUVHx+2d9dYhMrMuatBdhkOZMlOqAI1yvTXNAbE7mJ\\nmB5c4EfiC0ARiDl785yNgu8e+ONSZDqYaqiDKDen1JdUA0/qgU1E0cT/9rM96UhE\\nWkKlXMHwWLxA9CBU1dkFEukWwwaXDBpm0Zbx/1RaYc8M/s3yGH9TDbfMHSQ/qebK\\noRXOCQjuXUU4JlnnFc9SPzquBdZSHBhF9mSEwR55CmQVZhxeyGJMfeZIbyD5u8dr\\nhfWQ9MiWY2qH5XUr++6PJJnGWlkYTxXJGgic/gTwstfIHGtizLN/SEZ0hmquX40t\\nmcqM1/P3PIMRYYx8lw0D+8w8Wm2QJyzIOnRlJhSEsBBl8FNvxIuaO7EjdABRZFba\\nrfah6bnUIKZeIUdLJuO0l2ki9eIKbP3ASI4mQ94HE0riIVtEhvCtqs/woiws55t0\\n0y/1QBHk1BlmOGYcHynG3GlxHcCSlWzazLiAGE2g+aF5ZhDfdWy3Row99QARAQAB\\ntCZTbnlrJ3MgRGlzY2xvc3VyZSBOZXcgPHJlcG9ydEBzbnlrLmlvPokCVAQTAQoA\\nPgIbAwULCQgHAwUVCgkICwUWAgMBAAIeAQIXgBYhBKp3WNE4NW56Qbhnk32osM1b\\nvcseBQJmM6b+BQkQbVEQAAoJEH2osM1bvcsez5gQAKShZlSlkcaYX10erMt7w24x\\nLl7kARMjPfLyeoJXytxn52d0139kh++xDz3EhxfAIaRWqKivzYRDx28STmZMInGQ\\n23D54MMO63dtWQBmyAXem0DJIMT5uEYQI++3ovVSxE+EiUUjfUjxfs5uYd3p2kJZ\\no49YBmr51QCyPzvHnSNRXl3sEvDQ/U2SKYNE9dM4h1+ZLgAylLx6tF2SmHmC15Zy\\nACbD9WjKDb/O++WDfqUdvZ3moMCjwx/KUpC9EbH2ppnr3ludQ+gttqA5XQ/qxExn\\nYL+ipyic1U+p3LwG8PBjpsxRBKMtIvhXd1A17opjKnvSyRV7NOiSm794pMt7+YNY\\nxoJQRmsE5RJFDoyvFU76NxLTZkhdVcBVoFLepQBPoW6KiR1xpe2q2mJ/C/ndf3G6\\nNAEAm0ic9yrvMwAzW1aYN+uERLgrLJXRHERJddBcShaqcaqmaRZhhVAdsLox87+J\\n4yiSS3Si5YFmXxTHq2mfQM/f1jmDfvbAsOX9ZNwsYUh5KVFMkLPr+wx8nBYH0+lD\\nXYYOrbEmjd+oLWaomDD8Nb+Ft49/juSVw1ygqwXMQWw/iGHuKnS1up+88XGKymMF\\nYW+h3G77EtRr1zgIZC05rvDSyUGnEijuKu5FJesxJsxSkYbq0pbtE6nPAHpZ9yDs\\ncontOfKtJKYwZq9n8KySuQINBFmR918BEADeJq2StjfKuCdunn0wxDLIdIb+SnJN\\nR8E6q+c/2FoE+HyLIxeoecmgPaCsIiD1n2CWEhPmjWyXw6aNxbC2lIFgGzrdszzi\\nvRv5L79G3K8exomhHGOJZ7zCxXALQN1xRam+9WktPUAqLQzHQi4231y9oZCOEqN7\\newZnvpOqtNR6zfYAE45HjyIU1ti4uBJRpTD9LDiC/SiSLGXkQlFkqFi2MERxDJvF\\naTQifUVy5VpCtCttKoyZcaC1oNZgn4yAJTD6fdCMZoOzMWUNwM6hFOX6UyPxnHn5\\nz2NuOLXWjd5D6Yj+jLeWvHaBftd1RbfAJxAbd92N8K0ucTIhSO1QkwM/ebA2bLIT\\nrlHNvisPttDgD24b5QZbQt8GH6eoVLiKYdUgC6ERM/74hNDsBwtp1U9GOVFKkVD9\\nfk8bzBetuwYp8SJBgpxicPvw1mOLywMadtrO9/kNjywzXRt0z7v6b95jt20IZCED\\nw39CU3lIEGFVNsiBljoxNezpFO6mIX00msqW1Y8NxU8hLBc+Luf1PsYcViJpAKj3\\nN48DAZTxytolW86kfBQUBAeObG/kRXnyY5c8U+O91R8AyafieA9TVhxyOJBWezF9\\n5VNILN9uVy2RRnyqdqJ/CJLsdord31lJ5P/l0+KQIf93Vpnp9iaHj4DB0E8zvpJ5\\n4lQd0J3w0cSi/QARAQABiQI8BBgBCgAmAhsMFiEEqndY0Tg1bnpBuGeTfaiwzVu9\\nwx4FAmYzrBwFCRBtVjYACgkQfaiwzVu9yx5x4w/+PnXA+H8qkEgEECgemxcTfpCy\\nwiaB51ZGt8vBOD8lnrXbFA9fFm81fUcNNjl4oBC1TaVxvJmpzMG83LkhVwSw53YM\\nr+AlQrnpChOAWEKnDlFphvfHbNZE7kCWtLMQWcQuMpwJetQWwXaT6uVuk2yjKc7k\\nifpHtsgcacpIdMV2xiQIA3UU/aOHWhgx7QlIMQhQpN4Xd0TI/0r3exfC10+r4Dxg\\nCE0IKyHxF5lZaG81yIcCZtFpvb2nLR7F8bzIY0tYSSNqLheHLa0OY12otvMF6T5T\\ndKhNZw1kc1oeHUNcOAlYKKZHXUGEatN3pdKe5QjpkyIU4++g7NsVnNcHgQhkIikz\\nDTVUJDYjQyWxBNklSwCQHUuIPtIbbFWdfm62J8Bu9GruYWYfLJJjGugM+Dw3IbaS\\nWgFMODvL2kL53lwoYjUaNvNoebfLwAp3x1WexbrADTMzTdtTIZXQYRrhDhK+2PIU\\n9/5ijyf8xODOp1CLBHtSstWp7qnPeEeb8JT2+8XBbRWMsXEJCdxQWBqHdaQnVskB\\nfLzWt4Ug+DtYXENnKptpT3rij4BE7sjFD4QyAAmR9Hl4uWUdz6KVlMYtOhdcis05\\n5s+ZFF0//FDZ5OHWNi7TwF8vQOTQAwSZ2YTg+wDwJefMyCPEbIA1hWi3LRgsIiyK\\nBngSPyDdogCHhFterRI=\\n=IJDM\\n-----END PGP PUBLIC KEY BLOCK-----\n```\n\n----------------------------------------\n\nTITLE: Querying for Unmatched Sources in Starlang\nDESCRIPTION: This Starlang query identifies unmatched sources, specifically targeting situations where HttpServletRequest parameters are not linked to known sinks.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/scan-with-snyk/snyk-code/snyk-code-custom-rules/create-query.md#2025-04-21_snippet_7\n\nLANGUAGE: starlang\nCODE:\n```\nPRED:AnySource and not DataFlowsInto<Taint<PRED:AnySource, PRED:None, PRED:AnySink>>\n```\n\n----------------------------------------\n\nTITLE: Displaying Information Hint in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to create an information hint box, informing users that the evidence graph feature is only available to Snyk AppRisk users at the Group level.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/manage-risk/prioritize-issues-for-fixing/using-the-issues-ui-with-snyk-apprisk/evidence-graph.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"info\" %}\nThe evidence graph information is available only to Snyk AppRisk users and it is visible only at the Group level.\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Initializing LowDB Database in TypeScript\nDESCRIPTION: This snippet initializes a lowdb database at a specified path and ensures the database folder exists. It is part of the application constructor and depends on 'fs' and 'path' modules for file system operations.\nSOURCE: https://github.com/snyk/user-docs/blob/main/docs/snyk-api/using-specific-snyk-apis/snyk-apps-apis/tutorial-create-a-snyk-app/register-the-app-and-configure-user-authorization.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/app.ts\n\n...\nimport * as path from \"path\";\nimport * as fs from \"fs\";\n\n...\n\nconstructor(controllers: Controller[], port: number) {\n  this.app = express();\n  this.initDatabaseFile();\n  this.initRoutes(controllers);\n  this.server = this.listen(3000);\n}\n\n...\n\nprivate initDatabaseFile() {\n  try {\n    const dbFolder = path.join(__dirname, \"../db\");\n    dbPath = path.join(dbFolder, \"db.json\");\n    console.log(`Using db: ${dbPath}`);\n    if (!fs.existsSync(dbPath)) {\n      if (!fs.existsSync(dbFolder)) {\n        fs.mkdirSync(dbFolder);\n      }\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n...\n\nexport let dbPath: string;\nexport default App;\n```"
  }
]