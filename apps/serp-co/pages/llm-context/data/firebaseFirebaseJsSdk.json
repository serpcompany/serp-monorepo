[
  {
    "owner": "firebase",
    "repo": "firebase-js-sdk",
    "content": "TITLE: Initializing Firebase App in JavaScript\nDESCRIPTION: Code snippet demonstrating how to initialize a Firebase app using the configuration object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/README.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { initializeApp } from 'firebase/app';\n\n// TODO: Replace the following with your app's Firebase project configuration\nconst firebaseConfig = {\n  //...\n};\n\nconst app = initializeApp(firebaseConfig);\n```\n\n----------------------------------------\n\nTITLE: Initializing Auth with Custom Dependencies (TypeScript)\nDESCRIPTION: Example showing how to initialize Firebase Auth with custom session persistence and no popup/redirect resolver. This demonstrates using initializeAuth() for fine-grained control over Auth dependencies.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst auth = initializeAuth(app, {\n  persistence: browserSessionPersistence,\n  popupRedirectResolver: undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: Firebase Auth TypeScript API Definitions\nDESCRIPTION: Complete TypeScript type definitions generated by API Extractor for the Firebase Authentication module. Includes interfaces, classes, and constants for auth operations, user management, error handling, and authentication flows.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/auth.api.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CompleteFn } from '@firebase/util';\nimport { ErrorFactory } from '@firebase/util';\nimport { ErrorFn } from '@firebase/util';\nimport { FirebaseApp } from '@firebase/app';\nimport { FirebaseError } from '@firebase/util';\nimport { NextFn } from '@firebase/util';\nimport { Observer } from '@firebase/util';\nimport { Unsubscribe } from '@firebase/util';\n\n// @public\nexport interface ActionCodeInfo {\n    data: {\n        email?: string | null;\n        multiFactorInfo?: MultiFactorInfo | null;\n        previousEmail?: string | null;\n    };\n    operation: (typeof ActionCodeOperation)[keyof typeof ActionCodeOperation];\n}\n\n// @public\nexport const ActionCodeOperation: {\n    readonly EMAIL_SIGNIN: \"EMAIL_SIGNIN\";\n    readonly PASSWORD_RESET: \"PASSWORD_RESET\";\n    readonly RECOVER_EMAIL: \"RECOVER_EMAIL\";\n    readonly REVERT_SECOND_FACTOR_ADDITION: \"REVERT_SECOND_FACTOR_ADDITION\";\n    readonly VERIFY_AND_CHANGE_EMAIL: \"VERIFY_AND_CHANGE_EMAIL\";\n    readonly VERIFY_EMAIL: \"VERIFY_EMAIL\";\n};\n\n// @public\nexport interface ActionCodeSettings {\n    android?: {\n        installApp?: boolean;\n        minimumVersion?: string;\n        packageName: string;\n    };\n    // @deprecated\n    dynamicLinkDomain?: string;\n    handleCodeInApp?: boolean;\n    iOS?: {\n        bundleId: string;\n    };\n    linkDomain?: string;\n    url: string;\n}\n\n// @public\nexport class ActionCodeURL {\n    // @internal\n    constructor(actionLink: string);\n    readonly apiKey: string;\n    readonly code: string;\n    readonly continueUrl: string | null;\n    readonly languageCode: string | null;\n    readonly operation: string;\n    static parseLink(link: string): ActionCodeURL | null;\n    readonly tenantId: string | null;\n}\n\n// @public\nexport interface AdditionalUserInfo {\n    readonly isNewUser: boolean;\n    readonly profile: Record<string, unknown> | null;\n    readonly providerId: string | null;\n    readonly username?: string | null;\n}\n\n// @public\nexport interface ApplicationVerifier {\n    readonly type: string;\n    verify(): Promise<string>;\n}\n\n// @public\nexport function applyActionCode(auth: Auth, oobCode: string): Promise<void>;\n\n// @public\nexport interface Auth {\n    readonly app: FirebaseApp;\n    authStateReady(): Promise<void>;\n    beforeAuthStateChanged(callback: (user: User | null) => void | Promise<void>, onAbort?: () => void): Unsubscribe;\n    readonly config: Config;\n    readonly currentUser: User | null;\n    readonly emulatorConfig: EmulatorConfig | null;\n    languageCode: string | null;\n    readonly name: string;\n    onAuthStateChanged(nextOrObserver: NextOrObserver<User | null>, error?: ErrorFn, completed?: CompleteFn): Unsubscribe;\n    onIdTokenChanged(nextOrObserver: NextOrObserver<User | null>, error?: ErrorFn, completed?: CompleteFn): Unsubscribe;\n    setPersistence(persistence: Persistence): Promise<void>;\n    readonly settings: AuthSettings;\n    signOut(): Promise<void>;\n    tenantId: string | null;\n    updateCurrentUser(user: User | null): Promise<void>;\n    useDeviceLanguage(): void;\n}\n\n// @public\nexport class AuthCredential {\n    // @internal\n    protected constructor(\n    providerId: string,\n    signInMethod: string);\n    // Warning: (ae-forgotten-export) The symbol \"AuthInternal\" needs to be exported by the entry point index.d.ts\n    // Warning: (ae-forgotten-export) The symbol \"PhoneOrOauthTokenResponse\" needs to be exported by the entry point index.d.ts\n    //\n    // @internal (undocumented)\n    _getIdTokenResponse(_auth: AuthInternal): Promise<PhoneOrOauthTokenResponse>;\n    // @internal (undocumented)\n    _getReauthenticationResolver(_auth: AuthInternal): Promise<IdTokenResponse>;\n    // Warning: (ae-forgotten-export) The symbol \"IdTokenResponse\" needs to be exported by the entry point index.d.ts\n    //\n    // @internal (undocumented)\n    _linkToIdToken(_auth: AuthInternal, _idToken: string): Promise<IdTokenResponse>;\n    readonly providerId: string;\n    readonly signInMethod: string;\n    toJSON(): object;\n}\n\n// @public\nexport interface AuthError extends FirebaseError {\n    readonly customData: {\n        readonly appName: string;\n        readonly email?: string;\n        readonly phoneNumber?: string;\n        readonly tenantId?: string;\n    };\n}\n\n// @public\nexport const AuthErrorCodes: {\n    readonly ADMIN_ONLY_OPERATION: \"auth/admin-restricted-operation\";\n    readonly ARGUMENT_ERROR: \"auth/argument-error\";\n    readonly APP_NOT_AUTHORIZED: \"auth/app-not-authorized\";\n    readonly APP_NOT_INSTALLED: \"auth/app-not-installed\";\n    readonly CAPTCHA_CHECK_FAILED: \"auth/captcha-check-failed\";\n    readonly CODE_EXPIRED: \"auth/code-expired\";\n    readonly CORDOVA_NOT_READY: \"auth/cordova-not-ready\";\n    readonly CORS_UNSUPPORTED: \"auth/cors-unsupported\";\n    readonly CREDENTIAL_ALREADY_IN_USE: \"auth/credential-already-in-use\";\n    readonly CREDENTIAL_MISMATCH: \"auth/custom-token-mismatch\";\n    readonly CREDENTIAL_TOO_OLD_LOGIN_AGAIN: \"auth/requires-recent-login\";\n    readonly DEPENDENT_SDK_INIT_BEFORE_AUTH: \"auth/dependent-sdk-initialized-before-auth\";\n    readonly DYNAMIC_LINK_NOT_ACTIVATED: \"auth/dynamic-link-not-activated\";\n    readonly EMAIL_CHANGE_NEEDS_VERIFICATION: \"auth/email-change-needs-verification\";\n    readonly EMAIL_EXISTS: \"auth/email-already-in-use\";\n    readonly EMULATOR_CONFIG_FAILED: \"auth/emulator-config-failed\";\n    readonly EXPIRED_OOB_CODE: \"auth/expired-action-code\";\n    readonly EXPIRED_POPUP_REQUEST: \"auth/cancelled-popup-request\";\n    readonly INTERNAL_ERROR: \"auth/internal-error\";\n    readonly INVALID_API_KEY: \"auth/invalid-api-key\";\n    readonly INVALID_APP_CREDENTIAL: \"auth/invalid-app-credential\";\n    readonly INVALID_APP_ID: \"auth/invalid-app-id\";\n    readonly INVALID_AUTH: \"auth/invalid-user-token\";\n    readonly INVALID_AUTH_EVENT: \"auth/invalid-auth-event\";\n    readonly INVALID_CERT_HASH: \"auth/invalid-cert-hash\";\n    readonly INVALID_CODE: \"auth/invalid-verification-code\";\n    readonly INVALID_CONTINUE_URI: \"auth/invalid-continue-uri\";\n    readonly INVALID_CORDOVA_CONFIGURATION: \"auth/invalid-cordova-configuration\";\n    readonly INVALID_CUSTOM_TOKEN: \"auth/invalid-custom-token\";\n    readonly INVALID_DYNAMIC_LINK_DOMAIN: \"auth/invalid-dynamic-link-domain\";\n    readonly INVALID_EMAIL: \"auth/invalid-email\";\n    readonly INVALID_EMULATOR_SCHEME: \"auth/invalid-emulator-scheme\";\n    readonly INVALID_IDP_RESPONSE: \"auth/invalid-credential\";\n    readonly INVALID_LOGIN_CREDENTIALS: \"auth/invalid-credential\";\n    readonly INVALID_MESSAGE_PAYLOAD: \"auth/invalid-message-payload\";\n    readonly INVALID_MFA_SESSION: \"auth/invalid-multi-factor-session\";\n    readonly INVALID_OAUTH_CLIENT_ID: \"auth/invalid-oauth-client-id\";\n    readonly INVALID_OAUTH_PROVIDER: \"auth/invalid-oauth-provider\";\n    readonly INVALID_OOB_CODE: \"auth/invalid-action-code\";\n    readonly INVALID_ORIGIN: \"auth/unauthorized-domain\";\n    readonly INVALID_PASSWORD: \"auth/wrong-password\";\n    readonly INVALID_PERSISTENCE: \"auth/invalid-persistence-type\";\n    readonly INVALID_PHONE_NUMBER: \"auth/invalid-phone-number\";\n    readonly INVALID_PROVIDER_ID: \"auth/invalid-provider-id\";\n    readonly INVALID_RECIPIENT_EMAIL: \"auth/invalid-recipient-email\";\n    readonly INVALID_SENDER: \"auth/invalid-sender\";\n    readonly INVALID_SESSION_INFO: \"auth/invalid-verification-id\";\n    readonly INVALID_TENANT_ID: \"auth/invalid-tenant-id\";\n    readonly MFA_INFO_NOT_FOUND: \"auth/multi-factor-info-not-found\";\n    readonly MFA_REQUIRED: \"auth/multi-factor-auth-required\";\n    readonly MISSING_ANDROID_PACKAGE_NAME: \"auth/missing-android-pkg-name\";\n    readonly MISSING_APP_CREDENTIAL: \"auth/missing-app-credential\";\n    readonly MISSING_AUTH_DOMAIN: \"auth/auth-domain-config-required\";\n    readonly MISSING_CODE: \"auth/missing-verification-code\";\n    readonly MISSING_CONTINUE_URI: \"auth/missing-continue-uri\";\n    readonly MISSING_IFRAME_START: \"auth/missing-iframe-start\";\n    readonly MISSING_IOS_BUNDLE_ID: \"auth/missing-ios-bundle-id\";\n    readonly MISSING_OR_INVALID_NONCE: \"auth/missing-or-invalid-nonce\";\n    readonly MISSING_MFA_INFO: \"auth/missing-multi-factor-info\";\n    readonly MISSING_MFA_SESSION: \"auth/missing-multi-factor-session\";\n    readonly MISSING_PHONE_NUMBER: \"auth/missing-phone-number\";\n    readonly MISSING_SESSION_INFO: \"auth/missing-verification-id\";\n    readonly MODULE_DESTROYED: \"auth/app-deleted\";\n    readonly NEED_CONFIRMATION: \"auth/account-exists-with-different-credential\";\n    readonly NETWORK_REQUEST_FAILED: \"auth/network-request-failed\";\n    readonly NULL_USER: \"auth/null-user\";\n    readonly NO_AUTH_EVENT: \"auth/no-auth-event\";\n    readonly NO_SUCH_PROVIDER: \"auth/no-such-provider\";\n    readonly OPERATION_NOT_ALLOWED: \"auth/operation-not-allowed\";\n    readonly OPERATION_NOT_SUPPORTED: \"auth/operation-not-supported-in-this-environment\";\n    readonly POPUP_BLOCKED: \"auth/popup-blocked\";\n    readonly POPUP_CLOSED_BY_USER: \"auth/popup-closed-by-user\";\n    readonly PROVIDER_ALREADY_LINKED: \"auth/provider-already-linked\";\n    readonly QUOTA_EXCEEDED: \"auth/quota-exceeded\";\n    readonly REDIRECT_CANCELLED_BY_USER: \"auth/redirect-cancelled-by-user\";\n    readonly REDIRECT_OPERATION_PENDING: \"auth/redirect-operation-pending\";\n    readonly REJECTED_CREDENTIAL: \"auth/rejected-credential\";\n    readonly SECOND_FACTOR_ALREADY_ENROLLED: \"auth/second-factor-already-in-use\";\n    readonly SECOND_FACTOR_LIMIT_EXCEEDED: \"auth/maximum-second-factor-count-exceeded\";\n    readonly TENANT_ID_MISMATCH: \"auth/tenant-id-mismatch\";\n    readonly TIMEOUT: \"auth/timeout\";\n    readonly TOKEN_EXPIRED: \"auth/user-token-expired\";\n    readonly TOO_MANY_ATTEMPTS_TRY_LATER: \"auth/too-many-requests\";\n    readonly UNAUTHORIZED_DOMAIN: \"auth/unauthorized-continue-uri\";\n    readonly UNSUPPORTED_FIRST_FACTOR: \"auth/unsupported-first-factor\";\n    readonly UNSUPPORTED_PERSISTENCE: \"auth/unsupported-persistence-type\";\n```\n\n----------------------------------------\n\nTITLE: Firebase Auth Initialization Functions\nDESCRIPTION: Core functions for initializing and configuring Firebase Authentication. Includes getAuth for retrieving Auth instances and initializeAuth for custom initialization.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetAuth(app)\ninitializeAuth(app, deps)\n```\n\n----------------------------------------\n\nTITLE: Counting Documents in Firestore Query Result\nDESCRIPTION: Efficiently counts documents matching a query without downloading document data. Only the count is downloaded, making it suitable for large result sets.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getCount<AppModelType, DbModelType extends DocumentData>(query: Query<AppModelType, DbModelType>): Promise<AggregateQuerySnapshot<{\n    count: AggregateField<number>;\n}, AppModelType, DbModelType>>;\n```\n\n----------------------------------------\n\nTITLE: Defining Firebase App Types and Functions in TypeScript\nDESCRIPTION: This code snippet defines the main types, interfaces, and functions for Firebase app initialization and management. It includes FirebaseApp interface, FirebaseOptions, and functions like initializeApp, getApp, and deleteApp.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/app.api.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@firebase/component';\nimport { ComponentContainer } from '@firebase/component';\nimport { FirebaseError } from '@firebase/util';\nimport { LogCallback } from '@firebase/logger';\nimport { LogLevelString } from '@firebase/logger';\nimport { LogOptions } from '@firebase/logger';\nimport { Name } from '@firebase/component';\nimport { Provider } from '@firebase/component';\n\n// @internal (undocumented)\nexport function _addComponent<T extends Name>(app: FirebaseApp, component: Component<T>): void;\n\n// @internal (undocumented)\nexport function _addOrOverwriteComponent(app: FirebaseApp, component: Component): void;\n\n// @internal (undocumented)\nexport const _apps: Map<string, FirebaseApp>;\n\n// @internal\nexport function _clearComponents(): void;\n\n// @internal\nexport const _components: Map<string, Component<any>>;\n\n// @internal\nexport const _DEFAULT_ENTRY_NAME = \"[DEFAULT]\";\n\n// @public\nexport function deleteApp(app: FirebaseApp): Promise<void>;\n\n// @public\nexport interface FirebaseApp {\n    automaticDataCollectionEnabled: boolean;\n    readonly name: string;\n    readonly options: FirebaseOptions;\n}\n\n// @internal (undocumented)\nexport interface _FirebaseAppInternal extends FirebaseApp {\n    // (undocumented)\n    checkDestroyed(): void;\n    // (undocumented)\n    container: ComponentContainer;\n    // (undocumented)\n    isDeleted: boolean;\n}\n\n// @public\nexport interface FirebaseAppSettings {\n    automaticDataCollectionEnabled?: boolean;\n    name?: string;\n}\n\nexport { FirebaseError }\n\n// @public\nexport interface FirebaseOptions {\n    apiKey?: string;\n    appId?: string;\n    authDomain?: string;\n    databaseURL?: string;\n    measurementId?: string;\n    messagingSenderId?: string;\n    projectId?: string;\n    storageBucket?: string;\n}\n\n// @public\nexport interface FirebaseServerApp extends FirebaseApp {\n    name: string;\n    readonly settings: FirebaseServerAppSettings;\n}\n\n// @public\nexport interface FirebaseServerAppSettings extends Omit<FirebaseAppSettings, 'name'> {\n    appCheckToken?: string;\n    authIdToken?: string;\n    releaseOnDeref?: object;\n}\n\n// @internal (undocumented)\nexport interface _FirebaseService {\n    // (undocumented)\n    app: FirebaseApp;\n    _delete(): Promise<void>;\n}\n\n// @public\nexport function getApp(name?: string): FirebaseApp;\n\n// @public\nexport function getApps(): FirebaseApp[];\n\n// @internal (undocumented)\nexport function _getProvider<T extends Name>(app: FirebaseApp, name: T): Provider<T>;\n\n// @public\nexport function initializeApp(options: FirebaseOptions, name?: string): FirebaseApp;\n\n// @public\nexport function initializeApp(options: FirebaseOptions, config?: FirebaseAppSettings): FirebaseApp;\n\n// @public\nexport function initializeApp(): FirebaseApp;\n\n// @public\nexport function initializeServerApp(options: FirebaseOptions | FirebaseApp, config: FirebaseServerAppSettings): FirebaseServerApp;\n\n// @internal (undocumented)\nexport function _isFirebaseApp(obj: FirebaseApp | FirebaseOptions): obj is FirebaseApp;\n\n// @internal (undocumented)\nexport function _isFirebaseServerApp(obj: FirebaseApp | FirebaseServerApp | null | undefined): obj is FirebaseServerApp;\n\n// @public\nexport function onLog(logCallback: LogCallback | null, options?: LogOptions): void;\n\n// @internal (undocumented)\nexport function _registerComponent<T extends Name>(component: Component<T>): boolean;\n\n// @public\nexport function registerVersion(libraryKeyOrName: string, version: string, variant?: string): void;\n\n// @internal (undocumented)\nexport function _removeServiceInstance<T extends Name>(app: FirebaseApp, name: T, instanceIdentifier?: string): void;\n\n// @public\nexport const SDK_VERSION: string;\n\n// @internal (undocumented)\nexport const _serverApps: Map<string, FirebaseServerApp>;\n\n// @public\nexport function setLogLevel(logLevel: LogLevelString): void;\n```\n\n----------------------------------------\n\nTITLE: Sign-In with Redirect and Get Result in JavaScript\nDESCRIPTION: Demonstrates the process of signing in using a redirect with a Facebook provider, and then retrieving the result after the redirect. Includes provider configuration and result handling.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// Sign in using a redirect.\nconst provider = new FacebookAuthProvider();\n// You can add additional scopes to the provider:\nprovider.addScope('user_birthday');\n// Start a sign in process for an unauthenticated user.\nawait signInWithRedirect(auth, provider);\n// This will trigger a full page redirect away from your app\n\n// After returning from the redirect when your app initializes you can obtain the result\nconst result = await getRedirectResult(auth);\nif (result) {\n  // This is the signed-in user\n  const user = result.user;\n  // This gives you a Facebook Access Token.\n  const credential = provider.credentialFromResult(auth, result);\n  const token = credential.accessToken;\n}\n// As this API can be used for sign-in, linking and reauthentication,\n// check the operationType to determine what triggered this redirect\n// operation.\nconst operationType = result.operationType;\n```\n\n----------------------------------------\n\nTITLE: Creating User with Email and Password in TypeScript\nDESCRIPTION: Function signature for creating a new user account with email and password in Firebase Authentication. Returns a Promise resolving to UserCredential.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function createUserWithEmailAndPassword(auth: Auth, email: string, password: string): Promise<UserCredential>;\n```\n\n----------------------------------------\n\nTITLE: Logging View Cart or View Item Event in Firebase Analytics\nDESCRIPTION: This function logs either a 'view_cart' or 'view_item' event in Firebase Analytics. It accepts parameters for the analytics instance, event name, event parameters (including optional currency, items, and value), and analytics call options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'view_cart' | 'view_item', eventParams?: { currency?: EventParams['currency']; items?: EventParams['items']; value?: EventParams['value']; [key: string]: any; }, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Reauthenticating with Redirect using Facebook OAuth Provider in Firebase Auth\nDESCRIPTION: Example showing how to sign in and reauthenticate using Facebook OAuth provider with redirect flow. This demonstrates the full page redirect authentication process, including how to obtain results after returning from the redirect.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n// Sign in using a redirect.\nconst provider = new FacebookAuthProvider();\nconst result = await signInWithRedirect(auth, provider);\n// This will trigger a full page redirect away from your app\n\n// After returning from the redirect when your app initializes you can obtain the result\nconst result = await getRedirectResult(auth);\n// Reauthenticate using a redirect.\nawait reauthenticateWithRedirect(result.user, provider);\n// This will again trigger a full page redirect away from your app\n\n// After returning from the redirect when your app initializes you can obtain the result\nconst result = await getRedirectResult(auth);\n```\n\n----------------------------------------\n\nTITLE: Pushing New Data in Firebase Database\nDESCRIPTION: Generates a new child location with a unique key and optionally writes data to it. Returns a ThenableReference that combines Promise and Reference functionality.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function push(parent: DatabaseReference, value?: unknown): ThenableReference;\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase SDK using npm\nDESCRIPTION: Commands to initialize a project and install the Firebase SDK using npm.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/README.md#2025-04-14_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm init\n$ npm install --save firebase\n```\n\n----------------------------------------\n\nTITLE: Setting Data in Firebase Realtime Database\nDESCRIPTION: The set function writes data to a specific database location, overwriting any existing data at that location and its child locations. It takes a database reference and the value to be set as parameters, returning a Promise that resolves when the operation is complete.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nset(ref, value)\n```\n\n----------------------------------------\n\nTITLE: Implementing Facebook Sign-in with Redirect Flow in Firebase\nDESCRIPTION: Demonstrates how to implement Facebook authentication using redirect flow in Firebase. Shows the process of creating a provider, adding scopes, initiating sign-in, and handling the redirect result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// Sign in using a redirect.\nconst provider = new FacebookAuthProvider();\n// You can add additional scopes to the provider:\nprovider.addScope('user_birthday');\n// Start a sign in process for an unauthenticated user.\nawait signInWithRedirect(auth, provider);\n// This will trigger a full page redirect away from your app\n\n// After returning from the redirect when your app initializes you can obtain the result\nconst result = await getRedirectResult(auth);\nif (result) {\n  // This is the signed-in user\n  const user = result.user;\n  // This gives you a Facebook Access Token.\n  const credential = provider.credentialFromResult(auth, result);\n  const token = credential.accessToken;\n}\n// As this API can be used for sign-in, linking and reauthentication,\n// check the operationType to determine what triggered this redirect\n// operation.\nconst operationType = result.operationType;\n```\n\n----------------------------------------\n\nTITLE: Setting User Properties in Firebase Analytics\nDESCRIPTION: Sets custom user properties in Firebase Analytics using gtag config command. These properties can be used to define user segments for more targeted analysis.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function setUserProperties(analyticsInstance: Analytics, properties: CustomParams, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Reauthentication with Popup in Firebase Authentication\nDESCRIPTION: Demonstrates how to reauthenticate a user with a Facebook provider using popup flow. Reauthentication is necessary for sensitive operations like changing passwords that require recent sign-in credentials.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n// Sign in using a popup.\nconst provider = new FacebookAuthProvider();\nconst result = await signInWithPopup(auth, provider);\n// Reauthenticate using a popup.\nawait reauthenticateWithPopup(result.user, provider);\n```\n\n----------------------------------------\n\nTITLE: Creating a collection group query in Firestore with TypeScript\nDESCRIPTION: Function to create a Query that includes all documents across the database in collections with the given collectionId. Useful for querying subcollections without knowing their exact paths.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function collectionGroup(firestore: Firestore, collectionId: string): Query<DocumentData, DocumentData>;\n```\n\n----------------------------------------\n\nTITLE: Setting Document Data in Firestore Lite (Basic Version)\nDESCRIPTION: Writes data to a document referenced by a DocumentReference. Creates the document if it doesn't exist. Changes are only reflected after the returned promise resolves. This operation fails if the client is offline.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function setDoc<AppModelType, DbModelType extends DocumentData>(reference: DocumentReference<AppModelType, DbModelType>, data: WithFieldValue<AppModelType>): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Debug Error Map Implementation in TypeScript\nDESCRIPTION: A verbose error map with detailed descriptions for most error codes in Firebase Authentication. This map provides more context for debugging authentication issues than the standard error messages.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\ndebugErrorMap: AuthErrorMap\n```\n\n----------------------------------------\n\nTITLE: Email Sign-In Link Example with Firebase Authentication\nDESCRIPTION: Example demonstrating how to send a sign-in link to a user's email and complete the sign-in process. Includes configuration for both iOS and Android platforms with custom settings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst actionCodeSettings = {\n  url: 'https://www.example.com/?email=user@example.com',\n  iOS: {\n     bundleId: 'com.example.ios'\n  },\n  android: {\n    packageName: 'com.example.android',\n    installApp: true,\n    minimumVersion: '12'\n  },\n  handleCodeInApp: true\n};\nawait sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n// Obtain emailLink from the user.\nif(isSignInWithEmailLink(auth, emailLink)) {\n  await signInWithEmailLink(auth, 'user@example.com', emailLink);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firestore Instance in JavaScript\nDESCRIPTION: Functions to initialize and retrieve Firestore instances. These include getFirestore() for getting existing instances and initializeFirestore() for creating new instances with custom settings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetFirestore(app)\ngetFirestore(app, databaseId)\ninitializeFirestore(app, settings)\ninitializeFirestore(app, settings, databaseId)\n```\n\n----------------------------------------\n\nTITLE: Adding Document to Firestore Collection (TypeScript)\nDESCRIPTION: Adds a new document to a specified CollectionReference with given data, automatically assigning a document ID. The write is only reflected in document reads after the returned promise resolves. Fails if client is offline.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function addDoc<AppModelType, DbModelType extends DocumentData>(reference: CollectionReference<AppModelType, DbModelType>, data: WithFieldValue<AppModelType>): Promise<DocumentReference<AppModelType, DbModelType>>;\n```\n\n----------------------------------------\n\nTITLE: Phone Authentication with reCAPTCHA Verification\nDESCRIPTION: Example showing phone authentication flow with reCAPTCHA verification integration.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phoneauthprovider.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// 'recaptcha-container' is the ID of an element in the DOM.\nconst applicationVerifier = new RecaptchaVerifier('recaptcha-container');\nconst provider = new PhoneAuthProvider(auth);\nconst verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n// Obtain the verificationCode from the user.\nconst phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\nconst userCredential = await signInWithCredential(auth, phoneCredential);\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Link Authentication in JavaScript\nDESCRIPTION: Example code for implementing email link authentication flow. It shows sending a sign-in link, verifying the link is valid, and completing the sign-in process.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst actionCodeSettings = {\n  url: 'https://www.example.com/?email=user@example.com',\n  iOS: {\n     bundleId: 'com.example.ios'\n  },\n  android: {\n    packageName: 'com.example.android',\n    installApp: true,\n    minimumVersion: '12'\n  },\n  handleCodeInApp: true\n};\nawait sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n// Obtain emailLink from the user.\nif(isSignInWithEmailLink(auth, emailLink)) {\n  await signInWithEmailLink(auth, 'user@example.com', emailLink);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a collection reference in Firestore with TypeScript\nDESCRIPTION: Function to get a CollectionReference instance that points to a collection at the specified path. Takes a Firestore instance, a path string, and optional additional path segments.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function collection(firestore: Firestore, path: string, ...pathSegments: string[]): CollectionReference<DocumentData, DocumentData>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Reference from URL in Firebase Realtime Database in TypeScript\nDESCRIPTION: Returns a Reference representing the location in the Database corresponding to the provided Firebase URL. Throws an exception if the URL is invalid or has a different domain than the current Database instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function refFromURL(db: Database, url: string): DatabaseReference;\n```\n\n----------------------------------------\n\nTITLE: Initializing Firestore with Custom Settings in TypeScript\nDESCRIPTION: This function initializes a new instance of Cloud Firestore with custom settings. It must be called before any other Firestore functions, including getFirestore(). Empty settings make this equivalent to calling getFirestore().\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function initializeFirestore(app: FirebaseApp, settings: Settings): Firestore;\n```\n\n----------------------------------------\n\nTITLE: User Authentication and Management Functions\nDESCRIPTION: Core authentication functions for signing in users through various methods including email/password, phone, anonymous, and OAuth providers.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsignInAnonymously(auth)\nsignInWithCredential(auth, credential)\nsignInWithCustomToken(auth, customToken)\nsignInWithEmailAndPassword(auth, email, password)\n```\n\n----------------------------------------\n\nTITLE: Writing Data with set() Function\nDESCRIPTION: Function to write data to a Firebase Database location. Overwrites existing data at the location and child locations. Returns a Promise that resolves when write is complete.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function set(ref: DatabaseReference, value: unknown): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Anonymous Sign-In with Firebase Authentication\nDESCRIPTION: Asynchronously signs in as an anonymous user. Returns existing anonymous user if already signed in, otherwise creates a new identity. Not supported by Auth instances created with FirebaseServerApp.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function signInAnonymously(auth: Auth): Promise<UserCredential>;\n```\n\n----------------------------------------\n\nTITLE: Listening for Value Changes in Firebase Realtime Database\nDESCRIPTION: The onValue function listens for data changes at a specific location. It triggers the callback for initial data and subsequent changes. The function takes a query, a callback function, and optional parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nonValue(query, callback, cancelCallback)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nonValue(query, callback, options)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nonValue(query, callback, cancelCallback, options)\n```\n\n----------------------------------------\n\nTITLE: Firestore Query Operations in JavaScript\nDESCRIPTION: Functions for constructing and refining Firestore queries. These include orderBy() for sorting, where() for filtering, and various methods like startAt(), endAt() for pagination.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\norderBy(fieldPath, directionStr)\nwhere(fieldPath, opStr, value)\nstartAt(fieldValues)\nendAt(fieldValues)\nstartAfter(fieldValues)\nendBefore(fieldValues)\n```\n\n----------------------------------------\n\nTITLE: Performing Firestore Transactions and Batch Writes in JavaScript\nDESCRIPTION: Functions for executing transactions and batch writes in Firestore. runTransaction() allows for atomic operations, while writeBatch() enables multiple writes as a single operation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrunTransaction(firestore, updateFunction, options)\nwriteBatch(firestore)\n```\n\n----------------------------------------\n\nTITLE: Password Reset Email Example with Firebase Authentication\nDESCRIPTION: Example showing how to send a password reset email with custom action code settings and complete the password reset flow. Demonstrates configuration for both iOS and Android platforms.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst actionCodeSettings = {\n  url: 'https://www.example.com/?email=user@example.com',\n  iOS: {\n     bundleId: 'com.example.ios'\n  },\n  android: {\n    packageName: 'com.example.android',\n    installApp: true,\n    minimumVersion: '12'\n  },\n  handleCodeInApp: true\n};\nawait sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\n// Obtain code from user.\nawait confirmPasswordReset('user@example.com', code);\n```\n\n----------------------------------------\n\nTITLE: Firebase Database Child Changed Event Listener\nDESCRIPTION: Attaches a listener for child_changed events at a database location. Triggers when child data or descendants change. Provides updated DataSnapshot and previous child key.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nonChildChanged(query, callback, cancelCallback)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nonChildChanged(query, callback, options)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nonChildChanged(query, callback, cancelCallback, options)\n```\n\n----------------------------------------\n\nTITLE: Database Reference and Query Functions\nDESCRIPTION: Functions for creating and managing database references and constructing queries with various constraints.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nref(db, path)\nrefFromURL(db, url)\nchild(parent, path)\norderByKey()\norderByPriority()\norderByValue()\norderByChild(path)\n```\n\n----------------------------------------\n\nTITLE: Sending Email Verification with Custom Action Settings in Firebase Auth\nDESCRIPTION: Example demonstrating how to send an email verification to a user with custom action code settings. The settings include custom URLs, mobile app configuration, and handling options. The code also shows how to apply the verification code once received.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nconst actionCodeSettings = {\n  url: 'https://www.example.com/?email=user@example.com',\n  iOS: {\n     bundleId: 'com.example.ios'\n  },\n  android: {\n    packageName: 'com.example.android',\n    installApp: true,\n    minimumVersion: '12'\n  },\n  handleCodeInApp: true\n};\nawait sendEmailVerification(user, actionCodeSettings);\n// Obtain code from the user.\nawait applyActionCode(auth, code);\n```\n\n----------------------------------------\n\nTITLE: Verifying Before Updating Email in Firebase Auth\nDESCRIPTION: Example showing how to use verifyBeforeUpdateEmail to safely change a user's email address. This function sends a verification email to the new address first, and includes custom actionCodeSettings for handling the verification process across platforms.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nconst actionCodeSettings = {\n  url: 'https://www.example.com/?email=user@example.com',\n  iOS: {\n     bundleId: 'com.example.ios'\n  },\n  android: {\n    packageName: 'com.example.android',\n    installApp: true,\n    minimumVersion: '12'\n  },\n  handleCodeInApp: true\n};\nawait verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\n// Obtain code from the user.\nawait applyActionCode(auth, code);\n```\n\n----------------------------------------\n\nTITLE: Registering onValue Listener for Firebase Database Queries in TypeScript\nDESCRIPTION: Primary method for reading data from Firebase Database. Listens for value changes at a specific location, triggering with initial data and subsequently when data changes. The callback receives a DataSnapshot containing the complete data at the query location.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onValue(query: Query, callback: (snapshot: DataSnapshot) => unknown, cancelCallback?: (error: Error) => unknown): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Querying Firestore Database in JavaScript\nDESCRIPTION: Example of how to use the Cloud Firestore Lite SDK to retrieve a list of data from a collection.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/README.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, getDocs } from 'firebase/firestore/lite';\n// Follow this pattern to import other Firebase services\n// import { } from 'firebase/<service>';\n\n// TODO: Replace the following with your app's Firebase project configuration\nconst firebaseConfig = {\n  //...\n};\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\n// Get a list of cities from your database\nasync function getCities(db) {\n  const citiesCol = collection(db, 'cities');\n  const citySnapshot = await getDocs(citiesCol);\n  const cityList = citySnapshot.docs.map(doc => doc.data());\n  return cityList;\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Login Events in Firebase Analytics\nDESCRIPTION: Type declaration for logging login events with method parameter.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'login', eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Firestore Aggregate Operations in JavaScript\nDESCRIPTION: Functions for performing aggregate operations in Firestore queries. These include count() for document counting, and average() and sum() for numeric field aggregations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ncount()\naverage(field)\nsum(field)\n```\n\n----------------------------------------\n\nTITLE: Updating Document Fields in Firestore Lite with Object Data\nDESCRIPTION: Updates specific fields in an existing document. The update fails if the document doesn't exist. Only reflected after the returned promise resolves and requires the client to be online.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function updateDoc<AppModelType, DbModelType extends DocumentData>(reference: DocumentReference<AppModelType, DbModelType>, data: UpdateData<DbModelType>): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Managing Firestore Collections and Documents in JavaScript\nDESCRIPTION: Functions for interacting with Firestore collections and documents. These include collection() for getting collection references, doc() for document references, and collectionGroup() for querying across collections.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ncollection(firestore, path, pathSegments)\ncollectionGroup(firestore, collectionId)\ndoc(firestore, path, pathSegments)\n```\n\n----------------------------------------\n\nTITLE: Initializing Firestore instance with custom settings in TypeScript\nDESCRIPTION: Function to initialize a new instance of Cloud Firestore with custom settings. Must be called before other Firestore functions. Accepts a Firebase app instance, settings object, and an optional database ID.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function initializeFirestore(app: FirebaseApp, settings: Settings, databaseId?: string): Firestore;\n```\n\n----------------------------------------\n\nTITLE: Implementing Facebook Sign-in Using Redirect\nDESCRIPTION: Complete example demonstrating how to implement Facebook authentication using redirect flow, including scope addition and credential retrieval after redirect.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.facebookauthprovider.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Sign in using a redirect.\nconst provider = new FacebookAuthProvider();\n// Start a sign in process for an unauthenticated user.\nprovider.addScope('user_birthday');\nawait signInWithRedirect(auth, provider);\n// This will trigger a full page redirect away from your app\n\n// After returning from the redirect when your app initializes you can obtain the result\nconst result = await getRedirectResult(auth);\nif (result) {\n  // This is the signed-in user\n  const user = result.user;\n  // This gives you a Facebook Access Token.\n  const credential = FacebookAuthProvider.credentialFromResult(result);\n  const token = credential.accessToken;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Document Fields in Firestore Lite with Field/Value Pairs\nDESCRIPTION: Updates fields in an existing document using field path strings or FieldPath objects with corresponding values. Supports nested fields using dot notation. The update fails if the document doesn't exist.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function updateDoc<AppModelType, DbModelType extends DocumentData>(reference: DocumentReference<AppModelType, DbModelType>, field: string | FieldPath, value: unknown, ...moreFieldsAndValues: unknown[]): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Transaction Update Method Signatures\nDESCRIPTION: Method signatures for updating fields in a document within a transaction, supporting both object and field/value pair updates.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.transaction.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nupdate<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, data: UpdateData<DbModelType>): this;\n\nupdate<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, field: string | FieldPath, value: unknown, ...moreFieldsAndValues: unknown[]): this;\n```\n\n----------------------------------------\n\nTITLE: Registering Token Change Callback Functions in App Check\nDESCRIPTION: Alternative method to register for token change notifications using separate callback functions for next, error, and completion events. Returns an unsubscribe function to remove the listener.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onTokenChanged(appCheckInstance: AppCheck, onNext: (tokenResult: AppCheckTokenResult) => void, onError?: (error: Error) => void, onCompletion?: () => void): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Connecting to Firestore emulator in TypeScript\nDESCRIPTION: Function to configure a Firestore instance to connect to the local Firestore emulator. Must be called before any operations are performed with the instance. Supports mock authentication tokens.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function connectFirestoreEmulator(firestore: Firestore, host: string, port: number, options?: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n}): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Firestore Class in TypeScript\nDESCRIPTION: Declares the Firestore class, which represents the Cloud Firestore service interface. This class should not be instantiated directly, but rather accessed through the getFirestore() function.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestore.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Firestore \n```\n\n----------------------------------------\n\nTITLE: Email/Password Authentication Example\nDESCRIPTION: Demonstrates how to create auth credentials using email and password and sign in a user\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.emailauthprovider.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst authCredential = EmailAuthProvider.credential(email, password);\nconst userCredential = await signInWithCredential(auth, authCredential);\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Post Converter for Firebase in TypeScript\nDESCRIPTION: This snippet shows an advanced implementation of a Firebase data converter for a Post class. It includes a custom Post class, a PostDbModel interface for Firestore storage, and a PostConverter class implementing FirestoreDataConverter. The example demonstrates type-safe operations with setDoc, updateDoc, and getDoc.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.firestoredataconverter.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// The Post class is a model that is used by our application.\n// This class may have properties and methods that are specific\n// to our application execution, which do not need to be persisted\n// to Firestore.\nclass Post {\n    constructor(\n        readonly title: string,\n        readonly author: string,\n        readonly lastUpdatedMillis: number\n    ) {}\n    toString(): string {\n        return `${this.title} by ${this.author}`;\n    }\n}\n\n// The PostDbModel represents how we want our posts to be stored\n// in Firestore. This DbModel has different properties (`ttl`,\n// `aut`, and `lut`) from the Post class we use in our application.\ninterface PostDbModel {\n    ttl: string;\n    aut: { firstName: string; lastName: string };\n    lut: Timestamp;\n}\n\n// The `PostConverter` implements `FirestoreDataConverter` and specifies\n// how the Firestore SDK can convert `Post` objects to `PostDbModel`\n// objects and vice versa.\nclass PostConverter implements FirestoreDataConverter<Post, PostDbModel> {\n    toFirestore(post: WithFieldValue<Post>): WithFieldValue<PostDbModel> {\n        return {\n            ttl: post.title,\n            aut: this._autFromAuthor(post.author),\n            lut: this._lutFromLastUpdatedMillis(post.lastUpdatedMillis)\n        };\n    }\n\n    fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions): Post {\n        const data = snapshot.data(options) as PostDbModel;\n        const author = `${data.aut.firstName} ${data.aut.lastName}`;\n        return new Post(data.ttl, author, data.lut.toMillis());\n    }\n\n    _autFromAuthor(\n        author: string | FieldValue\n    ): { firstName: string; lastName: string } | FieldValue {\n        if (typeof author !== 'string') {\n            // `author` is a FieldValue, so just return it.\n            return author;\n        }\n        const [firstName, lastName] = author.split(' ');\n        return {firstName, lastName};\n    }\n\n    _lutFromLastUpdatedMillis(\n        lastUpdatedMillis: number | FieldValue\n    ): Timestamp | FieldValue {\n        if (typeof lastUpdatedMillis !== 'number') {\n            // `lastUpdatedMillis` must be a FieldValue, so just return it.\n            return lastUpdatedMillis;\n        }\n        return Timestamp.fromMillis(lastUpdatedMillis);\n    }\n}\n\nasync function advancedDemo(db: Firestore): Promise<void> {\n    // Create a `DocumentReference` with a `FirestoreDataConverter`.\n    const documentRef = doc(db, 'posts/post123').withConverter(new PostConverter());\n\n    // The `data` argument specified to `setDoc()` is type checked by the\n    // TypeScript compiler to be compatible with `Post`. Since the `data`\n    // argument is typed as `WithFieldValue<Post>` rather than just `Post`,\n    // this allows properties of the `data` argument to also be special\n    // Firestore values that perform server-side mutations, such as\n    // `arrayRemove()`, `deleteField()`, and `serverTimestamp()`.\n    await setDoc(documentRef, {\n        title: 'My Life',\n        author: 'Foo Bar',\n        lastUpdatedMillis: serverTimestamp()\n    });\n\n    // The TypeScript compiler will fail to compile if the `data` argument to\n    // `setDoc()` is _not_ compatible with `WithFieldValue<Post>`. This\n    // type checking prevents the caller from specifying objects with incorrect\n    // properties or property values.\n    // @ts-expect-error \"Argument of type { ttl: string; } is not assignable\n    // to parameter of type WithFieldValue<Post>\"\n    await setDoc(documentRef, { ttl: 'The Title' });\n\n    // When retrieving a document with `getDoc()` the `DocumentSnapshot`\n    // object's `data()` method returns a `Post`, rather than a generic object,\n    // which would have been returned if the `DocumentReference` did _not_ have a\n    // `FirestoreDataConverter` attached to it.\n    const snapshot1: DocumentSnapshot<Post> = await getDoc(documentRef);\n    const post1: Post = snapshot1.data()!;\n    if (post1) {\n        assertEqual(post1.title, 'My Life');\n        assertEqual(post1.author, 'Foo Bar');\n    }\n\n    // The `data` argument specified to `updateDoc()` is type checked by the\n    // TypeScript compiler to be compatible with `PostDbModel`. Note that\n    // unlike `setDoc()`, whose `data` argument must be compatible with `Post`,\n    // the `data` argument to `updateDoc()` must be compatible with\n    // `PostDbModel`. Similar to `setDoc()`, since the `data` argument is typed\n    // as `WithFieldValue<PostDbModel>` rather than just `PostDbModel`, this\n    // allows properties of the `data` argument to also be those special\n    // Firestore values, like `arrayRemove()`, `deleteField()`, and\n    // `serverTimestamp()`.\n    await updateDoc(documentRef, {\n        'aut.firstName': 'NewFirstName',\n        lut: serverTimestamp()\n    });\n\n    // The TypeScript compiler will fail to compile if the `data` argument to\n    // `updateDoc()` is _not_ compatible with `WithFieldValue<PostDbModel>`.\n    // This type checking prevents the caller from specifying objects with\n    // incorrect properties or property values.\n    // @ts-expect-error \"Argument of type { title: string; } is not assignable\n    // to parameter of type WithFieldValue<PostDbModel>\"\n    await updateDoc(documentRef, { title: 'New Title' });\n    const snapshot2: DocumentSnapshot<Post> = await getDoc(documentRef);\n    const post2: Post = snapshot2.data()!;\n    if (post2) {\n        assertEqual(post2.title, 'My Life');\n        assertEqual(post2.author, 'NewFirstName Bar');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Auth Function Declaration (TypeScript)\nDESCRIPTION: Function signature for initializeAuth() that creates an Auth instance with custom dependencies.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function initializeAuth(app: FirebaseApp, deps?: Dependencies): Auth;\n```\n\n----------------------------------------\n\nTITLE: Initializing Analytics in Firebase JS SDK\nDESCRIPTION: Functions for initializing and retrieving Firebase Analytics instances. These functions take a Firebase app instance as input and return an Analytics instance for tracking user events and behaviors.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetAnalytics(app)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ninitializeAnalytics(app, options)\n```\n\n----------------------------------------\n\nTITLE: Creating Extended Query in Firebase Realtime Database\nDESCRIPTION: The query function creates a new immutable instance of Query that includes additional query constraints. It takes an existing query and query constraints as parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nquery(query, queryConstraints)\n```\n\n----------------------------------------\n\nTITLE: Using update in Firebase Realtime Database\nDESCRIPTION: Writes multiple values to the Database at once. Unlike set(), update() selectively updates only the referenced properties without replacing all child properties at the current location.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate(ref, values)\n```\n\n----------------------------------------\n\nTITLE: Setting Persistence for Firebase Authentication\nDESCRIPTION: Changes the persistence type for the current and future Auth sessions. This helps manage whether user sessions are remembered and for how long. Not available in Node.js environments or with FirebaseServerApp instances.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function setPersistence(auth: Auth, persistence: Persistence): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Updating Document Fields in Firestore\nDESCRIPTION: Updates specific fields in a document referenced by a DocumentReference. The update will fail if the document doesn't exist. Nested fields can be updated using dot notation or FieldPath objects.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nupdateDoc(reference, field, value, moreFieldsAndValues)\n```\n\n----------------------------------------\n\nTITLE: Logging Analytics Event in JavaScript\nDESCRIPTION: This function sends a Google Analytics event with given eventParams. It automatically associates the logged event with the Firebase web app instance on the device. The example shows logging an 'add_payment_info' event with optional parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'add_payment_info', eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    payment_type?: EventParams['payment_type'];\n    value?: EventParams['value'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication State Change Listeners in TypeScript\nDESCRIPTION: These functions define listeners for authentication state changes and ID token changes, allowing developers to respond to user authentication events.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/auth.api.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport function onAuthStateChanged(auth: Auth, nextOrObserver: NextOrObserver<User>, error?: ErrorFn, completed?: CompleteFn): Unsubscribe;\n\nexport function onIdTokenChanged(auth: Auth, nextOrObserver: NextOrObserver<User>, error?: ErrorFn, completed?: CompleteFn): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Logging Lead Generation in Firebase Analytics\nDESCRIPTION: Type declaration for logging generate_lead events with value and currency parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'generate_lead', eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Declaring signInWithPopup Function in TypeScript\nDESCRIPTION: Function signature for authenticating a user using a popup-based OAuth flow. This method opens a popup window for the user to authenticate with the specified provider.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function signInWithPopup(auth: Auth, provider: AuthProvider, resolver?: PopupRedirectResolver): Promise<UserCredential>;\n```\n\n----------------------------------------\n\nTITLE: Creating Conjunction Filters in Firestore\nDESCRIPTION: Creates a composite filter constraint that combines multiple filters with AND logic. Documents must satisfy all specified conditions to be included in query results.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function and(...queryConstraints: QueryFilterConstraint[]): QueryCompositeFilterConstraint;\n```\n\n----------------------------------------\n\nTITLE: Setting User ID in Firebase Analytics\nDESCRIPTION: Sets the user ID for the current user in Firebase Analytics using gtag config command. This allows tracking user activity across sessions and devices when the same user ID is used.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function setUserId(analyticsInstance: Analytics, id: string | null, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Updating Current User in Firebase Auth\nDESCRIPTION: Updates the current user on the Auth instance asynchronously. The method creates a new instance copy of the provided user and triggers auth state change listeners. Returns a Promise and fails if the user belongs to a different Firebase project.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.auth.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nupdateCurrentUser(user: User | null): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ServerValue.increment() Usage in JavaScript\nDESCRIPTION: Shows the addition of ServerValue.increment() to support atomic field value increments without transactions in the Realtime Database.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/database/CHANGELOG.md#2025-04-14_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example usage of ServerValue.increment()\nfirebase.database().ref('path/to/counter').set(firebase.database.ServerValue.increment(1));\n```\n\n----------------------------------------\n\nTITLE: Connecting to Firebase Storage Emulator in JavaScript\nDESCRIPTION: Modifies a FirebaseStorage instance to communicate with the Cloud Storage emulator. This is useful for local development and testing without affecting production data.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport declare function connectStorageEmulator(storage: FirebaseStorage, host: string, port: number, options?: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n}): void;\n```\n\n----------------------------------------\n\nTITLE: Google Sign In with Popup Flow\nDESCRIPTION: Example showing how to implement Google sign-in using a popup flow, including setting up the provider with required scopes and handling the authentication result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.googleauthprovider.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Sign in using a popup.\nconst provider = new GoogleAuthProvider();\nprovider.addScope('profile');\nprovider.addScope('email');\nconst result = await signInWithPopup(auth, provider);\n\n// The signed-in user info.\nconst user = result.user;\n// This gives you a Google Access Token.\nconst credential = GoogleAuthProvider.credentialFromResult(result);\nconst token = credential.accessToken;\n```\n\n----------------------------------------\n\nTITLE: Getting Multi-Factor Session\nDESCRIPTION: Example demonstrating how to get a session for multi-factor authentication enrollment.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.multifactoruser.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst multiFactorUser = multiFactor(auth.currentUser);\nconst multiFactorSession = await multiFactorUser.getSession();\n\n// Send verification code.\nconst phoneAuthProvider = new PhoneAuthProvider(auth);\nconst phoneInfoOptions = {\n  phoneNumber: phoneNumber,\n  session: multiFactorSession\n};\nconst verificationId = await phoneAuthProvider.verifyPhoneNumber(phoneInfoOptions, appVerifier);\n\n// Obtain verification code from user.\nconst phoneAuthCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\nconst multiFactorAssertion = PhoneMultiFactorGenerator.assertion(phoneAuthCredential);\nawait multiFactorUser.enroll(multiFactorAssertion);\n```\n\n----------------------------------------\n\nTITLE: Custom Token Sign-In with Firebase Authentication\nDESCRIPTION: Signs in using a custom token generated by Firebase Admin SDK. Used to integrate with existing authentication systems. Fails if token is invalid or expired. Not supported with FirebaseServerApp instances.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function signInWithCustomToken(auth: Auth, customToken: string): Promise<UserCredential>;\n```\n\n----------------------------------------\n\nTITLE: Running a transaction in Firestore with TypeScript\nDESCRIPTION: Function to execute operations within a transaction context. If any document read within the transaction changes, Firestore retries the updateFunction. Supports up to 500 writes in a single transaction.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function runTransaction<T>(firestore: Firestore, updateFunction: (transaction: Transaction) => Promise<T>, options?: TransactionOptions): Promise<T>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Realtime Database in TypeScript\nDESCRIPTION: Returns the instance of the Realtime Database SDK associated with the provided FirebaseApp. Initializes a new instance with default settings if no instance exists or if the existing instance uses a custom database URL.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getDatabase(app?: FirebaseApp, url?: string): Database;\n```\n\n----------------------------------------\n\nTITLE: Transaction Class Definition in TypeScript\nDESCRIPTION: Core class declaration for Firestore transactions that provides methods to read and write data within a transaction context.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.transaction.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Transaction\n```\n\n----------------------------------------\n\nTITLE: Implementing Phone Number Authentication in JavaScript\nDESCRIPTION: Example code for implementing phone number authentication. It demonstrates creating a reCAPTCHA verifier, initiating the sign-in process, and confirming the verification code.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// 'recaptcha-container' is the ID of an element in the DOM.\nconst applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\nconst confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n// Obtain a verificationCode from the user.\nconst credential = await confirmationResult.confirm(verificationCode);\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Data Converter to Query in Firebase JavaScript SDK\nDESCRIPTION: This method applies a custom data converter to a Query, allowing the use of custom model objects with Firestore. It takes a FirestoreDataConverter and returns a new Query with the applied converter.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.query.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwithConverter<NewAppModelType, NewDbModelType extends DocumentData = DocumentData>(converter: FirestoreDataConverter<NewAppModelType, NewDbModelType>): Query<NewAppModelType, NewDbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Adding ID Token Change Listener in TypeScript\nDESCRIPTION: Function signature for adding an observer to monitor changes in the signed-in user's ID token. Returns an Unsubscribe function to remove the listener.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onIdTokenChanged(auth: Auth, nextOrObserver: NextOrObserver<User>, error?: ErrorFn, completed?: CompleteFn): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Defining Query Class in TypeScript for Firebase JavaScript SDK\nDESCRIPTION: This snippet defines the Query class for Firestore in the Firebase JavaScript SDK. It includes type parameters for application and database model types, and extends DocumentData.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.query.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Query<AppModelType = DocumentData, DbModelType extends DocumentData = DocumentData> \n```\n\n----------------------------------------\n\nTITLE: Firebase onValue with Cancel Callback\nDESCRIPTION: Extended version of onValue that includes a cancelCallback parameter for handling permission errors and other failures during data synchronization.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onValue(query: Query, callback: (snapshot: DataSnapshot) => unknown, cancelCallback: (error: Error) => unknown, options: ListenOptions): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Error Recovery in Phone Authentication\nDESCRIPTION: Example demonstrating error handling when updating a user's phone number, including recovery from account-exists-with-different-credentials errors.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phoneauthprovider.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst provider = new PhoneAuthProvider(auth);\nconst verificationId = await provider.verifyPhoneNumber(number, verifier);\ntry {\n  const code = ''; // Prompt the user for the verification code\n  await updatePhoneNumber(\n      auth.currentUser,\n      PhoneAuthProvider.credential(verificationId, code));\n} catch (e) {\n  if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\n    const cred = PhoneAuthProvider.credentialFromError(e);\n    await linkWithCredential(auth.currentUser, cred);\n  }\n}\n\n// At this point, auth.currentUser.phoneNumber === number.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents with Firestore Query\nDESCRIPTION: Executes a query and returns the results as a QuerySnapshot. All queries are executed on the server, with results reflecting only changes that have been applied by the backend.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getDocs<AppModelType, DbModelType extends DocumentData>(query: Query<AppModelType, DbModelType>): Promise<QuerySnapshot<AppModelType, DbModelType>>;\n```\n\n----------------------------------------\n\nTITLE: Sending Password Reset Email in Firebase Authentication\nDESCRIPTION: Sends a password reset email to a specified email address. When Email Enumeration Protection is enabled, this method doesn't throw an error for non-existent accounts. Requires Auth instance, email address, and optional action code settings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function sendPasswordResetEmail(auth: Auth, email: string, actionCodeSettings?: ActionCodeSettings): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Running Transaction in Firebase Realtime Database\nDESCRIPTION: The runTransaction function atomically modifies data at a specific location. It takes a database reference, a transaction update function, and optional parameters. It ensures there are no conflicts with other clients writing to the same location simultaneously.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nrunTransaction(ref, transactionUpdate, options)\n```\n\n----------------------------------------\n\nTITLE: Declaring signInWithRedirect Function in TypeScript\nDESCRIPTION: Function signature for authenticating a user using a full-page redirect flow. This method redirects the browser to the provider's authentication page.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function signInWithRedirect(auth: Auth, provider: AuthProvider, resolver?: PopupRedirectResolver): Promise<never>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Performance Monitoring in TypeScript\nDESCRIPTION: This function initializes and returns a FirebasePerformance instance for a given Firebase app. It can only be called once and optionally accepts performance settings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/performance.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function initializePerformance(app: FirebaseApp, settings?: PerformanceSettings): FirebasePerformance;\n```\n\n----------------------------------------\n\nTITLE: Fetching Sign-In Methods for Email in TypeScript\nDESCRIPTION: Function signature for retrieving available sign-in methods for a given email address. Returns a Promise resolving to an array of strings representing sign-in methods.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function fetchSignInMethodsForEmail(auth: Auth, email: string): Promise<string[]>;\n```\n\n----------------------------------------\n\nTITLE: Creating Performance Trace in TypeScript\nDESCRIPTION: This function creates and returns a new PerformanceTrace instance. It requires a FirebasePerformance instance and a name for the trace.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/performance.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function trace(performance: FirebasePerformance, name: string): PerformanceTrace;\n```\n\n----------------------------------------\n\nTITLE: Firebase Analytics TypeScript API Definition\nDESCRIPTION: Complete TypeScript definition for the Firebase Analytics JavaScript SDK, including interfaces for analytics configuration, event parameters, consent settings, and core functionality. It defines the structure for tracking various standard events with their respective parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/analytics.api.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FirebaseApp } from '@firebase/app';\n\n// @public\nexport interface Analytics {\n    app: FirebaseApp;\n}\n\n// @public\nexport interface AnalyticsCallOptions {\n    global: boolean;\n}\n\n// @public\nexport interface AnalyticsSettings {\n    config?: GtagConfigParams | EventParams;\n}\n\n// @public\nexport interface ConsentSettings {\n    // (undocumented)\n    [key: string]: unknown;\n    ad_personalization?: ConsentStatusString;\n    ad_storage?: ConsentStatusString;\n    ad_user_data?: ConsentStatusString;\n    analytics_storage?: ConsentStatusString;\n    functionality_storage?: ConsentStatusString;\n    personalization_storage?: ConsentStatusString;\n    security_storage?: ConsentStatusString;\n}\n\n// @public\nexport type ConsentStatusString = 'granted' | 'denied';\n\n// @public\nexport interface ControlParams {\n    // (undocumented)\n    event_callback?: () => void;\n    // (undocumented)\n    event_timeout?: number;\n    // (undocumented)\n    groups?: string | string[];\n    // (undocumented)\n    send_to?: string | string[];\n}\n\n// @public\nexport type Currency = string | number;\n\n// @public\nexport type CustomEventName<T> = T extends EventNameString ? never : T;\n\n// @public\nexport interface CustomParams {\n    // (undocumented)\n    [key: string]: unknown;\n}\n\n// @public\nexport type EventNameString = 'add_payment_info' | 'add_shipping_info' | 'add_to_cart' | 'add_to_wishlist' | 'begin_checkout' | 'checkout_progress' | 'exception' | 'generate_lead' | 'login' | 'page_view' | 'purchase' | 'refund' | 'remove_from_cart' | 'screen_view' | 'search' | 'select_content' | 'select_item' | 'select_promotion' | 'set_checkout_option' | 'share' | 'sign_up' | 'timing_complete' | 'view_cart' | 'view_item' | 'view_item_list' | 'view_promotion' | 'view_search_results';\n\n// @public\nexport interface EventParams {\n    // (undocumented)\n    [key: string]: unknown;\n    // (undocumented)\n    affiliation?: string;\n    // (undocumented)\n    checkout_option?: string;\n    // (undocumented)\n    checkout_step?: number;\n    // (undocumented)\n    content_type?: string;\n    // (undocumented)\n    coupon?: string;\n    // (undocumented)\n    currency?: string;\n    // (undocumented)\n    description?: string;\n    // (undocumented)\n    event_category?: string;\n    // (undocumented)\n    event_label?: string;\n    // (undocumented)\n    fatal?: boolean;\n    firebase_screen?: string;\n    firebase_screen_class?: string;\n    // (undocumented)\n    item_id?: string;\n    // (undocumented)\n    item_list_id?: string;\n    // (undocumented)\n    item_list_name?: string;\n    // (undocumented)\n    items?: Item[];\n    // (undocumented)\n    method?: string;\n    // (undocumented)\n    number?: string;\n    // (undocumented)\n    page_location?: string;\n    // (undocumented)\n    page_path?: string;\n    // (undocumented)\n    page_title?: string;\n    // (undocumented)\n    payment_type?: string;\n    // (undocumented)\n    promotion_id?: string;\n    // (undocumented)\n    promotion_name?: string;\n    // (undocumented)\n    promotions?: Promotion[];\n    // (undocumented)\n    screen_name?: string;\n    // (undocumented)\n    search_term?: string;\n    // (undocumented)\n    shipping?: Currency;\n    // (undocumented)\n    shipping_tier?: string;\n    // (undocumented)\n    tax?: Currency;\n    // (undocumented)\n    transaction_id?: string;\n    // (undocumented)\n    value?: number;\n}\n\n// @public\nexport function getAnalytics(app?: FirebaseApp): Analytics;\n\n// @public\nexport function getGoogleAnalyticsClientId(analyticsInstance: Analytics): Promise<string>;\n\n// @public\nexport interface GtagConfigParams {\n    // (undocumented)\n    [key: string]: unknown;\n    'allow_ad_personalization_signals'?: boolean;\n    'allow_google_signals'?: boolean;\n    'cookie_domain'?: string;\n    'cookie_expires'?: number;\n    'cookie_flags'?: string;\n    'cookie_prefix'?: string;\n    'cookie_update'?: boolean;\n    'page_location'?: string;\n    'page_title'?: string;\n    'send_page_view'?: boolean;\n}\n\n// @public\nexport function initializeAnalytics(app: FirebaseApp, options?: AnalyticsSettings): Analytics;\n\n// @public\nexport function isSupported(): Promise<boolean>;\n\n// @public\nexport interface Item {\n    // (undocumented)\n    affiliation?: string;\n    // @deprecated (undocumented)\n    brand?: string;\n    // @deprecated (undocumented)\n    category?: string;\n    // (undocumented)\n    coupon?: string;\n    // (undocumented)\n    creative_name?: string;\n    // (undocumented)\n    creative_slot?: string;\n    // (undocumented)\n    discount?: Currency;\n    // @deprecated (undocumented)\n    id?: string;\n    // (undocumented)\n    index?: number;\n    // (undocumented)\n    item_brand?: string;\n    // (undocumented)\n    item_category?: string;\n    // (undocumented)\n    item_category2?: string;\n    // (undocumented)\n    item_category3?: string;\n    // (undocumented)\n    item_category4?: string;\n    // (undocumented)\n    item_category5?: string;\n    // (undocumented)\n    item_id?: string;\n    // (undocumented)\n    item_list_id?: string;\n    // (undocumented)\n    item_list_name?: string;\n    // (undocumented)\n    item_name?: string;\n    // (undocumented)\n    item_variant?: string;\n    // (undocumented)\n    location_id?: string;\n    // @deprecated (undocumented)\n    name?: string;\n    // (undocumented)\n    price?: Currency;\n    // (undocumented)\n    promotion_id?: string;\n    // (undocumented)\n    promotion_name?: string;\n    // (undocumented)\n    quantity?: number;\n}\n\n// @public\nexport function logEvent(analyticsInstance: Analytics, eventName: 'add_payment_info', eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    payment_type?: EventParams['payment_type'];\n    value?: EventParams['value'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n\n// @public\nexport function logEvent(analyticsInstance: Analytics, eventName: 'add_shipping_info', eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    shipping_tier?: EventParams['shipping_tier'];\n    value?: EventParams['value'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n\n// @public\nexport function logEvent(analyticsInstance: Analytics, eventName: 'add_to_cart' | 'add_to_wishlist' | 'remove_from_cart', eventParams?: {\n    currency?: EventParams['currency'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n\n// @public\nexport function logEvent(analyticsInstance: Analytics, eventName: 'begin_checkout', eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n\n// @public\nexport function logEvent(analyticsInstance: Analytics, eventName: 'checkout_progress', eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n\n// @public\nexport function logEvent(analyticsInstance: Analytics, eventName: 'exception', eventParams?: {\n    description?: EventParams['description'];\n    fatal?: EventParams['fatal'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n\n// @public\nexport function logEvent(analyticsInstance: Analytics, eventName: 'generate_lead', eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n\n// @public\nexport function logEvent(analyticsInstance: Analytics, eventName: 'login', eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n\n// @public\nexport function logEvent(analyticsInstance: Analytics, eventName: 'page_view', eventParams?: {\n    page_title?: string;\n    page_location?: string;\n    page_path?: string;\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n\n// @public\nexport function logEvent(analyticsInstance: Analytics, eventName: 'purchase' | 'refund', eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    transaction_id: EventParams['transaction_id'];\n    tax?: EventParams['tax'];\n    shipping?: EventParams['shipping'];\n    items?: EventParams['items'];\n    coupon?: EventParams['coupon'];\n    affiliation?: EventParams['affiliation'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n\n// @public\nexport function logEvent(analyticsInstance: Analytics, eventName: 'screen_view', eventParams?: {\n    firebase_screen: EventParams['firebase_screen'];\n    firebase_screen_class: EventParams['firebase_screen_class'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n\n// @public\nexport function logEvent(analyticsInstance: Analytics, eventName: 'search' | 'view_search_results', eventParams?: {\n    search_term?: EventParams['search_term'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n\n// @public\nexport function logEvent(analyticsInstance: Analytics, eventName: 'select_content', eventParams?: {\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n\n// @public\nexport function logEvent(analyticsInstance: Analytics, eventName: 'select_item', eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n\n// @public\n```\n\n----------------------------------------\n\nTITLE: Listening for Child Changed Events in Firebase Realtime Database\nDESCRIPTION: This function sets up a listener for child changed events in a Firebase Realtime Database query. It returns an unsubscribe function to remove the listener. The callback receives a DataSnapshot and the previous child name.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onChildChanged(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, options: ListenOptions): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Twitter Authentication Using Popup Flow\nDESCRIPTION: Example demonstrating Twitter authentication implementation using popup flow, showing provider initialization and result handling.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.twitterauthprovider.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Sign in using a popup.\nconst provider = new TwitterAuthProvider();\nconst result = await signInWithPopup(auth, provider);\n\n// The signed-in user info.\nconst user = result.user;\n// This gives you a Twitter Access Token and Secret.\nconst credential = TwitterAuthProvider.credentialFromResult(result);\nconst token = credential.accessToken;\nconst secret = credential.secret;\n```\n\n----------------------------------------\n\nTITLE: Getting Server Timestamp in Firebase Database\nDESCRIPTION: Returns a placeholder value for auto-populating the current server timestamp in milliseconds since Unix epoch.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function serverTimestamp(): object;\n```\n\n----------------------------------------\n\nTITLE: Declaring Firestore Where Filter Function\nDESCRIPTION: TypeScript declaration for creating query constraints to filter documents based on field values.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function where(fieldPath: string | FieldPath, opStr: WhereFilterOp, value: unknown): QueryFieldFilterConstraint;\n```\n\n----------------------------------------\n\nTITLE: Creating Queries with Multiple Constraints in Firestore\nDESCRIPTION: Creates an immutable Query instance with additional query constraints. Allows extending an existing query with more filter or sorting conditions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function query<AppModelType, DbModelType extends DocumentData>(query: Query<AppModelType, DbModelType>, ...queryConstraints: QueryConstraint[]): Query<AppModelType, DbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Firebase onValue Event Listener\nDESCRIPTION: Function signature for onValue event listener that receives realtime data updates. Takes a query, callback function for handling snapshots, and optional configuration options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onValue(query: Query, callback: (snapshot: DataSnapshot) => unknown, options: ListenOptions): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Using Firestore Aggregation with Example\nDESCRIPTION: Example showing how to use the getAggregate function to count documents, sum field values, and calculate averages from Firestore query results.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nconst aggregateSnapshot = await getAggregate(query, {\n  countOfDocs: count(),\n  totalHours: sum('hours'),\n  averageScore: average('score')\n});\n\nconst countOfDocs: number = aggregateSnapshot.data().countOfDocs;\nconst totalHours: number = aggregateSnapshot.data().totalHours;\nconst averageScore: number | null = aggregateSnapshot.data().averageScore;\n```\n\n----------------------------------------\n\nTITLE: Logging Timing Complete Event in Firebase Analytics\nDESCRIPTION: This function logs a 'timing_complete' event in Firebase Analytics. It accepts parameters for the analytics instance, event name, event parameters (including required name and value, optional category and label), and analytics call options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'timing_complete', eventParams?: { name: string; value: number; event_category?: string; event_label?: string; [key: string]: any; }, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Checking Remote Config Support in TypeScript\nDESCRIPTION: This function checks if Remote Config is supported in the current environment. It verifies the existence of IndexedDB and whether the current browser context allows IndexedDB open() calls.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function isSupported(): Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Generative Model in TypeScript\nDESCRIPTION: Function to create a GenerativeModel instance with methods for inference. It requires a VertexAI instance and model parameters, with optional request configuration.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getGenerativeModel(vertexAI: VertexAI, modelParams: ModelParams, requestOptions?: RequestOptions): GenerativeModel;\n```\n\n----------------------------------------\n\nTITLE: Forcing WebSockets in Firebase Realtime Database in TypeScript\nDESCRIPTION: Forces the use of websockets instead of longPolling for database connections.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function forceWebSockets(): void;\n```\n\n----------------------------------------\n\nTITLE: Defining ModelParams Interface in TypeScript\nDESCRIPTION: This code snippet defines the ModelParams interface, which extends BaseParams and includes properties for model, systemInstruction, toolConfig, and tools. It is used to configure the generative model in Vertex AI integration.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.modelparams.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ModelParams extends BaseParams {\n  model: string;\n  systemInstruction?: string | Part | Content;\n  toolConfig?: ToolConfig;\n  tools?: Tool[];\n}\n```\n\n----------------------------------------\n\nTITLE: VertexAI TypeScript Interface Definitions\nDESCRIPTION: Comprehensive TypeScript type definitions and interfaces for the Firebase VertexAI SDK, including model configuration, content generation, chat sessions, and safety settings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppCheckTokenResult } from '@firebase/app-check-interop-types';\nimport { FirebaseApp } from '@firebase/app';\nimport { FirebaseAuthTokenData } from '@firebase/auth-interop-types';\nimport { FirebaseError } from '@firebase/util';\n\nexport class ArraySchema extends Schema {\n    constructor(schemaParams: SchemaParams, items: TypedSchema);\n    items: TypedSchema;\n    toJSON(): SchemaRequest;\n}\n\nexport interface BaseParams {\n    generationConfig?: GenerationConfig;\n    safetySettings?: SafetySetting[];\n}\n\nexport enum BlockReason {\n    BLOCKLIST = \"BLOCKLIST\",\n    OTHER = \"OTHER\",\n    PROHIBITED_CONTENT = \"PROHIBITED_CONTENT\",\n    SAFETY = \"SAFETY\"\n}\n\nexport class BooleanSchema extends Schema {\n    constructor(schemaParams?: SchemaParams);\n}\n\nexport class ChatSession {\n    constructor(apiSettings: ApiSettings, model: string, params?: StartChatParams | undefined, requestOptions?: RequestOptions | undefined);\n    getHistory(): Promise<Content[]>;\n    model: string;\n    params?: StartChatParams | undefined;\n    requestOptions?: RequestOptions | undefined;\n    sendMessage(request: string | Array<string | Part>): Promise<GenerateContentResult>;\n    sendMessageStream(request: string | Array<string | Part>): Promise<GenerateContentStreamResult>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Number Converter for Firestore in TypeScript\nDESCRIPTION: This snippet demonstrates a basic implementation of a Firestore data converter for number values. It includes methods for converting numbers to and from Firestore documents, and shows how to use the converter with setDoc, getDoc, and updateDoc operations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestoredataconverter.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst numberConverter = {\n    toFirestore(value: WithFieldValue<number>) {\n        return { value };\n    },\n    fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions) {\n        return snapshot.data(options).value as number;\n    }\n};\n\nasync function simpleDemo(db: Firestore): Promise<void> {\n    const documentRef = doc(db, 'values/value123').withConverter(numberConverter);\n\n    // converters are used with `setDoc`, `addDoc`, and `getDoc`\n    await setDoc(documentRef, 42);\n    const snapshot1 = await getDoc(documentRef);\n    assertEqual(snapshot1.data(), 42);\n\n    // converters are not used when writing data with `updateDoc`\n    await updateDoc(documentRef, { value: 999 });\n    const snapshot2 = await getDoc(documentRef);\n    assertEqual(snapshot2.data(), 999);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Remote Config in TypeScript\nDESCRIPTION: Creates a RemoteConfig instance for a given Firebase app with optional configuration options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.md#2025-04-14_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport declare function getRemoteConfig(app?: FirebaseApp, options?: RemoteConfigOptions): RemoteConfig;\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Popup Authentication in JavaScript\nDESCRIPTION: Example code for implementing OAuth authentication using a popup window. It shows creating a Facebook provider, signing in, and accessing the authentication result including the access token.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// Sign in using a popup.\nconst provider = new FacebookAuthProvider();\nconst result = await signInWithPopup(auth, provider);\n\n// The signed-in user info.\nconst user = result.user;\n// This gives you a Facebook Access Token.\nconst credential = provider.credentialFromResult(auth, result);\nconst token = credential.accessToken;\n```\n\n----------------------------------------\n\nTITLE: Getting String Value from Remote Config in TypeScript\nDESCRIPTION: This function retrieves the value for a given key as a string from the Remote Config instance. It's a convenience method equivalent to calling remoteConfig.getValue(key).asString().\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getString(remoteConfig: RemoteConfig, key: string): string;\n```\n\n----------------------------------------\n\nTITLE: Detaching Database Event Listeners in Firebase\nDESCRIPTION: Function to remove event listeners previously attached with on*() methods. Can remove specific callbacks, all callbacks for an event type, or all callbacks for a reference.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function off(query: Query, eventType?: EventType, callback?: (snapshot: DataSnapshot, previousChildName?: string | null) => unknown): void;\n```\n\n----------------------------------------\n\nTITLE: Google Sign In with Redirect Flow\nDESCRIPTION: Example demonstrating how to implement Google sign-in using a redirect flow, including setting up the provider with required scopes and retrieving the result after redirect.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.googleauthprovider.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Sign in using a redirect.\nconst provider = new GoogleAuthProvider();\n// Start a sign in process for an unauthenticated user.\nprovider.addScope('profile');\nprovider.addScope('email');\nawait signInWithRedirect(auth, provider);\n// This will trigger a full page redirect away from your app\n\n// After returning from the redirect when your app initializes you can obtain the result\nconst result = await getRedirectResult(auth);\nif (result) {\n  // This is the signed-in user\n  const user = result.user;\n  // This gives you a Google Access Token.\n  const credential = GoogleAuthProvider.credentialFromResult(result);\n  const token = credential.accessToken;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Google Analytics Client ID in JavaScript\nDESCRIPTION: This function retrieves a unique Google Analytics identifier for the web client. It returns a Promise that resolves to a string containing the client ID.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport declare function getGoogleAnalyticsClientId(analyticsInstance: Analytics): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Connecting to Firebase Auth Emulator in JavaScript\nDESCRIPTION: Demonstrates how to connect to the Firebase Authentication emulator for local development and testing.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconnectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\n```\n\n----------------------------------------\n\nTITLE: Creating an Imagen Model in TypeScript\nDESCRIPTION: Preview function to create an ImagenModel for image generation. Only Imagen 3 models are supported. Requires a VertexAI instance and model parameters, with optional request configuration.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getImagenModel(vertexAI: VertexAI, modelParams: ImagenModelParams, requestOptions?: RequestOptions): ImagenModel;\n```\n\n----------------------------------------\n\nTITLE: Uploading Bytes Resumable in Firebase Storage (TypeScript)\nDESCRIPTION: Uploads data to the object's location with the ability to pause, resume, and expose progress updates.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function uploadBytesResumable(ref: StorageReference, data: Blob | Uint8Array | ArrayBuffer, metadata?: UploadMetadata): UploadTask;\n```\n\n----------------------------------------\n\nTITLE: Getting App Check Token with Optional Refresh\nDESCRIPTION: Retrieves the current App Check token with an option to force refresh. When not forced, it checks memory and IndexedDB before requesting a fresh token from the App Check endpoint.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getToken(appCheckInstance: AppCheck, forceRefresh?: boolean): Promise<AppCheckTokenResult>;\n```\n\n----------------------------------------\n\nTITLE: Getting Nested Document Reference in Firestore (TypeScript)\nDESCRIPTION: Retrieves a DocumentReference instance referring to a document within another DocumentReference at a specified relative path. Throws an exception if the final path doesn't point to a document.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function doc<AppModelType, DbModelType extends DocumentData>(reference: DocumentReference<AppModelType, DbModelType>, path: string, ...pathSegments: string[]): DocumentReference<DocumentData, DocumentData>;\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Reference in Firebase Storage API (TypeScript)\nDESCRIPTION: Function to create a StorageReference for the given path in the default bucket. It takes a FirebaseStorage or StorageReference object and an optional path string as parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function ref(storageOrRef: FirebaseStorage | StorageReference, path?: string): StorageReference;\n```\n\n----------------------------------------\n\nTITLE: Firebase Data Removal\nDESCRIPTION: Function to remove data at a specified database location and all its children. Returns a Promise that resolves when the server sync is complete.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function remove(ref: DatabaseReference): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Extracting DataSnapshot Value\nDESCRIPTION: Method to extract a JavaScript value from the DataSnapshot, which can be a scalar type, array, object, or null.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.datasnapshot.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nval(): any;\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Data Converter to DocumentReference\nDESCRIPTION: Method to apply a custom data converter to a DocumentReference, allowing the use of custom model objects with Firestore. It returns a new DocumentReference instance with the specified converter.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.documentreference.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nwithConverter<NewAppModelType, NewDbModelType extends DocumentData = DocumentData>(converter: FirestoreDataConverter<NewAppModelType, NewDbModelType>): DocumentReference<NewAppModelType, NewDbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Removing Data in Firebase Realtime Database\nDESCRIPTION: The remove function deletes data at a specific database location and its child locations. It takes a database reference as a parameter and returns a Promise that resolves when the operation is complete.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nremove(ref)\n```\n\n----------------------------------------\n\nTITLE: Getting All Remote Config Values in TypeScript\nDESCRIPTION: Retrieves all config values as a Record of string keys and Value objects.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.md#2025-04-14_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport declare function getAll(remoteConfig: RemoteConfig): Record<string, Value>;\n```\n\n----------------------------------------\n\nTITLE: Generating Images with Imagen in JavaScript\nDESCRIPTION: Example code demonstrating how to initialize an ImagenModel instance and generate images from a text prompt. The response contains base64-encoded image data.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagenmodel.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst imagen = new ImagenModel(\n  vertexAI,\n  {\n    model: 'imagen-3.0-generate-002'\n  }\n);\n\nconst response = await imagen.generateImages('A photo of a cat');\nif (response.images.length > 0) {\n  console.log(response.images[0].bytesBase64Encoded);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Firestore Document Operations in TypeScript\nDESCRIPTION: Implements functions for Firestore document operations such as setting, updating, and deleting documents. It includes type-safe methods for different operation types.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore.api.md#2025-04-14_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setDoc<AppModelType, DbModelType extends DocumentData>(reference: DocumentReference<AppModelType, DbModelType>, data: WithFieldValue<AppModelType>): Promise<void>;\n\nexport function setDoc<AppModelType, DbModelType extends DocumentData>(reference: DocumentReference<AppModelType, DbModelType>, data: PartialWithFieldValue<AppModelType>, options: SetOptions): Promise<void>;\n\nexport function updateDoc<AppModelType, DbModelType extends DocumentData>(reference: DocumentReference<AppModelType, DbModelType>, data: UpdateData<DbModelType>): Promise<void>;\n\nexport function updateDoc<AppModelType, DbModelType extends DocumentData>(reference: DocumentReference<AppModelType, DbModelType>, field: string | FieldPath, value: unknown, ...moreFieldsAndValues: unknown[]): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Storage Reference in JavaScript\nDESCRIPTION: Returns a StorageReference for the given URL or root if no URL is provided. This function is essential for interacting with specific locations in Cloud Storage.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport declare function ref(storage: FirebaseStorage, url?: string): StorageReference;\n```\n\n----------------------------------------\n\nTITLE: Getting a Firebase Storage Instance in JavaScript\nDESCRIPTION: Retrieves a FirebaseStorage instance for the given Firebase app and optional bucket URL. This function allows developers to initialize and access Cloud Storage functionality.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport declare function getStorage(app?: FirebaseApp, bucketUrl?: string): FirebaseStorage;\n```\n\n----------------------------------------\n\nTITLE: Deleting Document in Firestore (TypeScript)\nDESCRIPTION: Deletes the document referred to by the specified DocumentReference. The deletion is only reflected in document reads after the returned promise resolves. Fails if the client is offline.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function deleteDoc<AppModelType, DbModelType extends DocumentData>(reference: DocumentReference<AppModelType, DbModelType>): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: DocumentSnapshot Class Definition in TypeScript\nDESCRIPTION: Class declaration for DocumentSnapshot that provides functionality to interact with Firestore document data. The class supports generic types for application and database model types.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.documentsnapshot.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class DocumentSnapshot<AppModelType = DocumentData, DbModelType extends DocumentData = DocumentData>\n```\n\n----------------------------------------\n\nTITLE: Creating Disjunction Query Filter in Firestore (TypeScript)\nDESCRIPTION: Creates a new QueryCompositeFilterConstraint that is a disjunction of the given filter constraints. A disjunction filter includes a document if it satisfies any of the given filters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function or(...queryConstraints: QueryFilterConstraint[]): QueryCompositeFilterConstraint;\n```\n\n----------------------------------------\n\nTITLE: Analytics Client Operations in Firebase JS SDK\nDESCRIPTION: Functions for working with an existing Analytics instance, including retrieving the Google Analytics client ID and logging various types of events to track user behavior in the application.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetGoogleAnalyticsClientId(analyticsInstance)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlogEvent(analyticsInstance, eventName, eventParams, options)\n```\n\n----------------------------------------\n\nTITLE: Creating Imagen Model in JavaScript\nDESCRIPTION: Returns an ImagenModel class with methods for using Imagen. This function is specifically for image generation tasks using Imagen 3 models.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetImagenModel(vertexAI, modelParams, requestOptions)\n```\n\n----------------------------------------\n\nTITLE: Limiting query results from the end in Firestore JavaScript SDK\nDESCRIPTION: Demonstrates how to use the limitToLast() method to return the last n documents as the query result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = citiesRef.orderBy('population').limitToLast(5);\n```\n\n----------------------------------------\n\nTITLE: Sign-In with Popup using OAuthProvider\nDESCRIPTION: Example of using OAuthProvider for sign-in with popup and retrieving the result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.oauthprovider.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Sign in using a popup.\nconst provider = new OAuthProvider('google.com');\nprovider.addScope('profile');\nprovider.addScope('email');\nconst result = await signInWithPopup(auth, provider);\n\n// The signed-in user info.\nconst user = result.user;\n// This gives you a OAuth Access Token for the provider.\nconst credential = provider.credentialFromResult(auth, result);\nconst token = credential.accessToken;\n```\n\n----------------------------------------\n\nTITLE: Incrementing Field Values in Firestore with TypeScript\nDESCRIPTION: Creates a special field value for incrementing numeric fields in Firestore documents. Can be used with setDoc() or updateDoc() to perform server-side incrementation of values.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function increment(n: number): FieldValue;\n```\n\n----------------------------------------\n\nTITLE: Phone Multi-Factor Assertion Generation Method\nDESCRIPTION: Static method that generates a PhoneMultiFactorAssertion from a PhoneAuthCredential. This method is specifically designed for browser environments and does not work in Node.js.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phonemultifactorgenerator.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic assertion(credential: PhoneAuthCredential): PhoneMultiFactorAssertion;\n```\n\n----------------------------------------\n\nTITLE: Child Added Event Listener with Cancel Callback and Options\nDESCRIPTION: Complete implementation of child added event listener with both cancel callback and options parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onChildAdded(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, cancelCallback: (error: Error) => unknown, options: ListenOptions): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp Class in TypeScript\nDESCRIPTION: Declaration of the Timestamp class with its constructor, properties, and methods. This class represents a point in time with nanosecond precision in UTC Epoch time.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.timestamp.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Timestamp {\n  constructor(seconds: number, nanoseconds: number);\n  readonly nanoseconds: number;\n  readonly seconds: number;\n  static fromDate(date: Date): Timestamp;\n  static fromMillis(milliseconds: number): Timestamp;\n  isEqual(other: Timestamp): boolean;\n  static now(): Timestamp;\n  toDate(): Date;\n  toJSON(): { seconds: number; nanoseconds: number; };\n  toMillis(): number;\n  toString(): string;\n  valueOf(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Email Sign-In Link in TypeScript\nDESCRIPTION: Function signature for verifying if a given link is a valid sign-in with email link. Returns a boolean indicating validity.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function isSignInWithEmailLink(auth: Auth, emailLink: string): boolean;\n```\n\n----------------------------------------\n\nTITLE: Child Added Event Listener with Cancel Callback\nDESCRIPTION: Function to listen for child added events in Firebase Database with an optional cancel callback. Returns an unsubscribe function to remove the listener.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onChildAdded(query: Query, callback: (snapshot: DataSnapshot, previousChildName?: string | null) => unknown, cancelCallback?: (error: Error) => unknown): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Updating User Phone Number with Recaptcha Verification in Firebase Auth\nDESCRIPTION: Example showing how to update a user's phone number using Firebase Authentication. The process includes creating a RecaptchaVerifier, verifying the phone number, obtaining a verification code from the user, and updating the phone number with the credential.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n// 'recaptcha-container' is the ID of an element in the DOM.\nconst applicationVerifier = new RecaptchaVerifier('recaptcha-container');\nconst provider = new PhoneAuthProvider(auth);\nconst verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n// Obtain the verificationCode from the user.\nconst phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\nawait updatePhoneNumber(user, phoneCredential);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom GTags in Firebase Analytics\nDESCRIPTION: Configures Firebase Analytics to use custom gtag or dataLayer names. Useful when gtag.js is installed independently with non-default names. Must be called before getAnalytics().\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function settings(options: SettingsOptions): void;\n```\n\n----------------------------------------\n\nTITLE: DocumentSnapshot Data Method Implementation\nDESCRIPTION: Method to retrieve all fields in a document as an Object. Returns undefined if document doesn't exist. Includes options for handling server timestamps.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.documentsnapshot.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndata(options?: SnapshotOptions): AppModelType | undefined;\n```\n\n----------------------------------------\n\nTITLE: Reading Document from Firestore (TypeScript)\nDESCRIPTION: Reads the document referred to by the specified DocumentReference. Documents are fetched directly from the server, reflecting recent modifications only if applied by the backend. Fails if the client is offline.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getDoc<AppModelType, DbModelType extends DocumentData>(reference: DocumentReference<AppModelType, DbModelType>): Promise<DocumentSnapshot<AppModelType, DbModelType>>;\n```\n\n----------------------------------------\n\nTITLE: Handling Incoming FCM Messages in TypeScript\nDESCRIPTION: Function to set up a listener for incoming push messages when the user is on the page. It takes a Messaging instance and a callback or observer, returning an unsubscribe function.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onMessage(messaging: Messaging, nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Listening for Child Removal in Firebase Realtime Database\nDESCRIPTION: The onChildRemoved function listens for data changes at a specific location, particularly when a child is removed. It takes a query, a callback function, and optional parameters. The callback is triggered for initial data and subsequent changes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nonChildRemoved(query, callback, cancelCallback)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nonChildRemoved(query, callback, options)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nonChildRemoved(query, callback, cancelCallback, options)\n```\n\n----------------------------------------\n\nTITLE: Verify Before Update Email Function Signature in Firebase Auth\nDESCRIPTION: TypeScript signature for the verifyBeforeUpdateEmail function that safely updates a user's email by sending verification to the new address first. Includes optional ActionCodeSettings for customizing the verification process.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function verifyBeforeUpdateEmail(user: User, newEmail: string, actionCodeSettings?: ActionCodeSettings | null): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Create Callable HTTPS Function Reference\nDESCRIPTION: Creates a reference to a callable HTTPS trigger function with specified name and options. Supports generic type parameters for request/response data.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function httpsCallable<RequestData = unknown, ResponseData = unknown, StreamData = unknown>(functionsInstance: Functions, name: string, options?: HttpsCallableOptions): HttpsCallable<RequestData, ResponseData, StreamData>;\n```\n\n----------------------------------------\n\nTITLE: Getting Query Results in Firebase Database\nDESCRIPTION: Retrieves the most up-to-date result for a query, returning a Promise that resolves to a DataSnapshot.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function get(query: Query): Promise<DataSnapshot>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Delivery Metrics Export to BigQuery\nDESCRIPTION: Enables or disables Firebase Cloud Messaging message delivery metrics export to BigQuery. This experimental function allows runtime configuration of the export feature.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_sw.md#2025-04-14_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport declare function experimentalSetDeliveryMetricsExportedToBigQueryEnabled(messaging: Messaging, enable: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: Apply Action Code Function Declaration (TypeScript)\nDESCRIPTION: Function signature for applyActionCode() that applies a verification code sent to users.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function applyActionCode(auth: Auth, oobCode: string): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Setting Session Persistence Example with Firebase Authentication\nDESCRIPTION: Example demonstrating how to set browser session persistence for Firebase Authentication. This would make credentials persist only until the browser window is closed.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nsetPersistence(auth, browserSessionPersistence);\n```\n\n----------------------------------------\n\nTITLE: Update Profile Function Signature in Firebase Auth\nDESCRIPTION: TypeScript signature for the updateProfile function that modifies a user's profile data. This allows updating the displayName and photoURL properties of a user's profile.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function updateProfile(user: User, { displayName, photoURL: photoUrl }: {\n    displayName?: string | null;\n    photoURL?: string | null;\n}): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Declaring signInWithPhoneNumber Function in TypeScript\nDESCRIPTION: Function signature for asynchronously signing in a user with a phone number. This method sends a verification code via SMS and returns a ConfirmationResult object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function signInWithPhoneNumber(auth: Auth, phoneNumber: string, appVerifier?: ApplicationVerifier): Promise<ConfirmationResult>;\n```\n\n----------------------------------------\n\nTITLE: Resolving Sign-In with Phone Authentication in JavaScript\nDESCRIPTION: Example of using MultiFactorResolver to complete a sign-in process with a phone authentication second factor. It demonstrates creating a credential, assertion, and resolving the sign-in.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.multifactorresolver.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst phoneAuthCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\nconst multiFactorAssertion = PhoneMultiFactorGenerator.assertion(phoneAuthCredential);\nconst userCredential = await resolver.resolveSignIn(multiFactorAssertion);\n```\n\n----------------------------------------\n\nTITLE: Setting Persistence Type for Auth in JavaScript\nDESCRIPTION: Example demonstrating how to set persistence type for Firebase Auth using the setPersistence method. This determines how user authentication state is stored.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.auth.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nauth.setPersistence(browserSessionPersistence);\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Values with update()\nDESCRIPTION: Function to update multiple values in the Database simultaneously. Allows selective updates of referenced properties. Returns a Promise that resolves when update is complete.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function update(ref: DatabaseReference, values: object): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Child Changed Event Listener\nDESCRIPTION: Function to listen for child changed events in Firebase Database. Triggers when data in a child or its descendants changes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onChildChanged(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, cancelCallback?: (error: Error) => unknown): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Data Manipulation and Query Constraint Functions\nDESCRIPTION: Functions for data manipulation, including atomic operations and query constraints for limiting and ordering results.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\npush(parent, value)\nget(query)\nincrement(delta)\nserverTimestamp()\nlimitToFirst(limit)\nlimitToLast(limit)\n```\n\n----------------------------------------\n\nTITLE: Getting Redirect Result in TypeScript\nDESCRIPTION: Function signature for retrieving the UserCredential from a redirect-based sign-in flow. Returns a Promise resolving to UserCredential or null.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getRedirectResult(auth: Auth, resolver?: PopupRedirectResolver): Promise<UserCredential | null>;\n```\n\n----------------------------------------\n\nTITLE: Declaring DocumentReference Class in TypeScript\nDESCRIPTION: Class declaration for DocumentReference that provides the main interface for interacting with documents in Firestore. Supports generic types for application and database models.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.documentreference.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class DocumentReference<AppModelType = DocumentData, DbModelType extends DocumentData = DocumentData>\n```\n\n----------------------------------------\n\nTITLE: Complete Firebase Messaging API Definition in TypeScript\nDESCRIPTION: A comprehensive TypeScript definition of the Firebase Cloud Messaging API, including token management functions, message handling, and payload interfaces. The API supports subscribing to messages, managing FCM tokens, and receiving notifications with various payload options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/messaging.api.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FirebaseApp } from '@firebase/app';\nimport { NextFn } from '@firebase/util';\nimport { Observer } from '@firebase/util';\nimport { Unsubscribe } from '@firebase/util';\n\n// @public\nexport function deleteToken(messaging: Messaging): Promise<boolean>;\n\n// @public\nexport interface FcmOptions {\n    analyticsLabel?: string;\n    link?: string;\n}\n\n// @public\nexport function getMessaging(app?: FirebaseApp): Messaging;\n\n// @public\nexport function getToken(messaging: Messaging, options?: GetTokenOptions): Promise<string>;\n\n// @public\nexport interface GetTokenOptions {\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n    vapidKey?: string;\n}\n\n// @public\nexport function isSupported(): Promise<boolean>;\n\n// @public\nexport interface MessagePayload {\n    collapseKey: string;\n    data?: {\n        [key: string]: string;\n    };\n    fcmOptions?: FcmOptions;\n    from: string;\n    messageId: string;\n    notification?: NotificationPayload;\n}\n\n// @public\nexport interface Messaging {\n    app: FirebaseApp;\n}\n\nexport { NextFn }\n\n// @public\nexport interface NotificationPayload {\n    body?: string;\n    icon?: string;\n    image?: string;\n    title?: string;\n}\n\nexport { Observer }\n\n// @public\nexport function onMessage(messaging: Messaging, nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>): Unsubscribe;\n\nexport { Unsubscribe }\n```\n\n----------------------------------------\n\nTITLE: Creating Queries with Composite Filters in Firestore\nDESCRIPTION: Creates an immutable Query instance with additional composite filter constraints. Allows combining multiple filter conditions with existing query constraints.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function query<AppModelType, DbModelType extends DocumentData>(query: Query<AppModelType, DbModelType>, compositeFilter: QueryCompositeFilterConstraint, ...queryConstraints: QueryNonFilterConstraint[]): Query<AppModelType, DbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Constructing a GenerativeModel Instance\nDESCRIPTION: Constructor signature for initializing a GenerativeModel instance with vertexAI instance, model parameters, and optional request options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generativemodel.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(vertexAI: VertexAI, modelParams: ModelParams, requestOptions?: RequestOptions);\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Config API in TypeScript\nDESCRIPTION: This code snippet defines the complete API for Firebase Remote Config, including functions, interfaces, and types. It covers operations like activating configs, fetching data, retrieving values, and setting custom signals.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/remote-config.api.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FirebaseApp } from '@firebase/app';\n\n// @public\nexport function activate(remoteConfig: RemoteConfig): Promise<boolean>;\n\n// @public\nexport interface CustomSignals {\n    // (undocumented)\n    [key: string]: string | number | null;\n}\n\n// @public\nexport function ensureInitialized(remoteConfig: RemoteConfig): Promise<void>;\n\n// @public\nexport function fetchAndActivate(remoteConfig: RemoteConfig): Promise<boolean>;\n\n// @public\nexport function fetchConfig(remoteConfig: RemoteConfig): Promise<void>;\n\n// @public\nexport interface FetchResponse {\n    config?: FirebaseRemoteConfigObject;\n    eTag?: string;\n    status: number;\n}\n\n// @public\nexport type FetchStatus = 'no-fetch-yet' | 'success' | 'failure' | 'throttle';\n\n// @public\nexport interface FirebaseRemoteConfigObject {\n    // (undocumented)\n    [key: string]: string;\n}\n\n// @public\nexport function getAll(remoteConfig: RemoteConfig): Record<string, Value>;\n\n// @public\nexport function getBoolean(remoteConfig: RemoteConfig, key: string): boolean;\n\n// @public\nexport function getNumber(remoteConfig: RemoteConfig, key: string): number;\n\n// @public (undocumented)\nexport function getRemoteConfig(app?: FirebaseApp, options?: RemoteConfigOptions): RemoteConfig;\n\n// @public\nexport function getString(remoteConfig: RemoteConfig, key: string): string;\n\n// @public\nexport function getValue(remoteConfig: RemoteConfig, key: string): Value;\n\n// @public\nexport function isSupported(): Promise<boolean>;\n\n// @public\nexport type LogLevel = 'debug' | 'error' | 'silent';\n\n// @public\nexport interface RemoteConfig {\n    app: FirebaseApp;\n    defaultConfig: {\n        [key: string]: string | number | boolean;\n    };\n    fetchTimeMillis: number;\n    lastFetchStatus: FetchStatus;\n    settings: RemoteConfigSettings;\n}\n\n// @public\nexport interface RemoteConfigOptions {\n    initialFetchResponse?: FetchResponse;\n    templateId?: string;\n}\n\n// @public\nexport interface RemoteConfigSettings {\n    fetchTimeoutMillis: number;\n    minimumFetchIntervalMillis: number;\n}\n\n// @public\nexport function setCustomSignals(remoteConfig: RemoteConfig, customSignals: CustomSignals): Promise<void>;\n\n// @public\nexport function setLogLevel(remoteConfig: RemoteConfig, logLevel: LogLevel): void;\n\n// @public\nexport interface Value {\n    asBoolean(): boolean;\n    asNumber(): number;\n    asString(): string;\n    getSource(): ValueSource;\n}\n\n// @public\nexport type ValueSource = 'static' | 'default' | 'remote';\n```\n\n----------------------------------------\n\nTITLE: Handling UploadTask Events in JavaScript\nDESCRIPTION: Example of using the 'on' method to listen for events during an upload task. Shows different ways to pass callbacks for next, error, and complete events.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.uploadtask.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar next = function(snapshot) {};\nvar error = function(error) {};\nvar complete = function() {};\n\n// The first example.\nuploadTask.on(\n    firebase.storage.TaskEvent.STATE_CHANGED,\n    next,\n    error,\n    complete);\n\n// This is equivalent to the first example.\nuploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, {\n  'next': next,\n  'error': error,\n  'complete': complete\n});\n\n// This is equivalent to the first example.\nvar subscribe = uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED);\nsubscribe(next, error, complete);\n\n// This is equivalent to the first example.\nvar subscribe = uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED);\nsubscribe({\n  'next': next,\n  'error': error,\n  'complete': complete\n});\n```\n\n----------------------------------------\n\nTITLE: Defining QueryConstraintType for Firebase Realtime Database (TypeScript)\nDESCRIPTION: Defines the different types of query constraints available in the Firebase Realtime Database SDK, including various ordering and limiting options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type QueryConstraintType = 'endAt' | 'endBefore' | 'startAt' | 'startAfter' | 'limitToFirst' | 'limitToLast' | 'orderByChild' | 'orderByKey' | 'orderByPriority' | 'orderByValue' | 'equalTo';\n```\n\n----------------------------------------\n\nTITLE: Implementing Facebook Sign-in Using Popup\nDESCRIPTION: Example showing how to implement Facebook authentication using popup flow, including scope addition and credential retrieval after successful authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.facebookauthprovider.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Sign in using a popup.\nconst provider = new FacebookAuthProvider();\nprovider.addScope('user_birthday');\nconst result = await signInWithPopup(auth, provider);\n\n// The signed-in user info.\nconst user = result.user;\n// This gives you a Facebook Access Token.\nconst credential = FacebookAuthProvider.credentialFromResult(result);\nconst token = credential.accessToken;\n```\n\n----------------------------------------\n\nTITLE: Timestamp Comparison and Utility Methods\nDESCRIPTION: Methods for comparing timestamps and converting to various formats including JSON and string representations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.timestamp.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nisEqual(other: Timestamp): boolean;\nstatic now(): Timestamp;\ntoDate(): Date;\ntoJSON(): { seconds: number; nanoseconds: number; };\ntoString(): string;\nvalueOf(): string;\n```\n\n----------------------------------------\n\nTITLE: Listing Items in Firebase Storage (TypeScript)\nDESCRIPTION: Lists items (files) and prefixes (folders) under the specified storage reference. Only available for Firebase Rules Version 2.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function list(ref: StorageReference, options?: ListOptions): Promise<ListResult>;\n```\n\n----------------------------------------\n\nTITLE: Database Connection Management Functions\nDESCRIPTION: Core functions for managing database connections including initialization, emulator connection, and online/offline state management.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetDatabase(app, url)\nconnectDatabaseEmulator(db, host, port, options)\ngoOffline(db)\ngoOnline(db)\nforceLongPolling()\nforceWebSockets()\n```\n\n----------------------------------------\n\nTITLE: Enrolling a Phone Second Factor\nDESCRIPTION: Example showing how to enroll a phone number as a second authentication factor. Demonstrates the complete flow from getting a session to final enrollment.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.multifactoruser.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst multiFactorUser = multiFactor(auth.currentUser);\nconst multiFactorSession = await multiFactorUser.getSession();\n\n// Send verification code.\nconst phoneAuthProvider = new PhoneAuthProvider(auth);\nconst phoneInfoOptions = {\n  phoneNumber: phoneNumber,\n  session: multiFactorSession\n};\nconst verificationId = await phoneAuthProvider.verifyPhoneNumber(phoneInfoOptions, appVerifier);\n\n// Obtain verification code from user.\nconst phoneAuthCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\nconst multiFactorAssertion = PhoneMultiFactorGenerator.assertion(phoneAuthCredential);\nawait multiFactorUser.enroll(multiFactorAssertion);\n// Second factor enrolled.\n```\n\n----------------------------------------\n\nTITLE: Defining LoadBundleTask Class in TypeScript\nDESCRIPTION: Declares the LoadBundleTask class that implements PromiseLike<LoadBundleTaskProgress>. This class represents the task of loading a Firestore bundle and provides methods for tracking progress and handling completion or errors.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.loadbundletask.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class LoadBundleTask implements PromiseLike<LoadBundleTaskProgress>\n```\n\n----------------------------------------\n\nTITLE: Linking OAuth Provider with Popup in Firebase Authentication\nDESCRIPTION: Example demonstrating how to link a Facebook authentication provider to a user account using popup flow. The code first signs in using email/password, then links the resulting user with a Facebook provider.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// Sign in using some other provider.\nconst result = await signInWithEmailAndPassword(auth, email, password);\n// Link using a popup.\nconst provider = new FacebookAuthProvider();\nawait linkWithPopup(result.user, provider);\n```\n\n----------------------------------------\n\nTITLE: Twitter Authentication Using Redirect Flow\nDESCRIPTION: Example showing how to implement Twitter authentication using redirect flow, including initialization of the provider and handling the redirect result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.twitterauthprovider.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Sign in using a redirect.\nconst provider = new TwitterAuthProvider();\n// Start a sign in process for an unauthenticated user.\nawait signInWithRedirect(auth, provider);\n// This will trigger a full page redirect away from your app\n\n// After returning from the redirect when your app initializes you can obtain the result\nconst result = await getRedirectResult(auth);\nif (result) {\n  // This is the signed-in user\n  const user = result.user;\n  // This gives you a Twitter Access Token and Secret.\n  const credential = TwitterAuthProvider.credentialFromResult(result);\n  const token = credential.accessToken;\n  const secret = credential.secret;\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Messaging Service Worker API Definition\nDESCRIPTION: Complete TypeScript definition file for the Firebase Messaging Service Worker API. It includes interfaces for message payloads, notification configuration, and functions for initializing messaging, handling background messages, and managing FCM tokens.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/messaging-sw.api.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FirebaseApp } from '@firebase/app';\nimport { NextFn } from '@firebase/util';\nimport { Observer } from '@firebase/util';\nimport { Unsubscribe } from '@firebase/util';\n\n// @public\nexport function experimentalSetDeliveryMetricsExportedToBigQueryEnabled(messaging: Messaging, enable: boolean): void;\n\n// @public\nexport interface FcmOptions {\n    analyticsLabel?: string;\n    link?: string;\n}\n\n// @public\nexport function getMessaging(app?: FirebaseApp): Messaging;\n\n// @public\nexport interface GetTokenOptions {\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n    vapidKey?: string;\n}\n\n// @public\nexport function isSupported(): Promise<boolean>;\n\n// @public\nexport interface MessagePayload {\n    collapseKey: string;\n    data?: {\n        [key: string]: string;\n    };\n    fcmOptions?: FcmOptions;\n    from: string;\n    messageId: string;\n    notification?: NotificationPayload;\n}\n\n// @public\nexport interface Messaging {\n    app: FirebaseApp;\n}\n\nexport { NextFn }\n\n// @public\nexport interface NotificationPayload {\n    body?: string;\n    icon?: string;\n    image?: string;\n    title?: string;\n}\n\nexport { Observer }\n\n// @public\nexport function onBackgroundMessage(messaging: Messaging, nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>): Unsubscribe;\n\nexport { Unsubscribe }\n\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Validating Password Against Firebase Policy\nDESCRIPTION: Example of validating a password against Firebase project or tenant password policy.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nvalidatePassword(auth, 'some-password');\n```\n\n----------------------------------------\n\nTITLE: Phone Authentication Basic Flow with PhoneAuthProvider\nDESCRIPTION: Example showing how to authenticate a user using PhoneAuthProvider by verifying a phone number and signing in with the resulting credential.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phoneauthprovider.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst provider = new PhoneAuthProvider(auth);\nconst verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n// Obtain verificationCode from the user.\nconst authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\nconst userCredential = signInWithCredential(auth, authCredential);\n```\n\n----------------------------------------\n\nTITLE: Firebase Database Child Added Event Listener\nDESCRIPTION: Attaches a listener for child_added events at a database location. Triggers for initial data and new children. Provides DataSnapshot and previous child key for ordering.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nonChildAdded(query, callback, cancelCallback)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nonChildAdded(query, callback, options)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nonChildAdded(query, callback, cancelCallback, options)\n```\n\n----------------------------------------\n\nTITLE: Value Extraction with DataSnapshot.val()\nDESCRIPTION: Method to extract JavaScript values from a DataSnapshot. Can return scalar types (string, number, boolean), arrays, objects, or null if the snapshot is empty.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.datasnapshot.md#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nval(): any;\n```\n\n----------------------------------------\n\nTITLE: Query Constraint - endBefore()\nDESCRIPTION: Creates a QueryConstraint with specified ending point (exclusive). Used for filtering data with arbitrary ending points.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function endBefore(value: number | string | boolean | null, key?: string): QueryConstraint;\n```\n\n----------------------------------------\n\nTITLE: Creating a write batch in Firestore with TypeScript\nDESCRIPTION: Function to create a WriteBatch for performing multiple writes as a single atomic operation. Supports up to 500 writes in a batch. Changes are only reflected after the returned promise resolves.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function writeBatch(firestore: Firestore): WriteBatch;\n```\n\n----------------------------------------\n\nTITLE: Deleting FCM Registration Token in TypeScript\nDESCRIPTION: Function to delete the registration token associated with a Messaging instance and unsubscribe from push notifications. Returns a Promise that resolves to a boolean.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function deleteToken(messaging: Messaging): Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: GitHub Sign-In Using Popup in JavaScript\nDESCRIPTION: Example demonstrating GitHub authentication using a popup window, including scope addition and credential extraction.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.githubauthprovider.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Sign in using a popup.\nconst provider = new GithubAuthProvider();\nprovider.addScope('repo');\nconst result = await signInWithPopup(auth, provider);\n\n// The signed-in user info.\nconst user = result.user;\n// This gives you a GitHub Access Token.\nconst credential = GithubAuthProvider.credentialFromResult(result);\nconst token = credential.accessToken;\n```\n\n----------------------------------------\n\nTITLE: Defining QueryOrderByConstraint Class in TypeScript\nDESCRIPTION: Class declaration for QueryOrderByConstraint that extends QueryConstraint. Used to define sort ordering in Firestore queries. Documents without the specified orderBy field will be excluded from query results.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.queryorderbyconstraint.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class QueryOrderByConstraint extends QueryConstraint \n```\n\n----------------------------------------\n\nTITLE: Getting Download URL in Firebase Storage (TypeScript)\nDESCRIPTION: Returns the download URL for the given StorageReference.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getDownloadURL(ref: StorageReference): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Deleting an Object from Firebase Storage in JavaScript\nDESCRIPTION: Deletes the object at the specified StorageReference location. This function allows developers to remove files from Cloud Storage programmatically.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport declare function deleteObject(ref: StorageReference): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Initializing reCAPTCHA Config in JavaScript\nDESCRIPTION: Example of calling the initializeRecaptchaConfig function to load reCAPTCHA configuration for an Auth instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ninitializeRecaptchaConfig(auth);\n```\n\n----------------------------------------\n\nTITLE: Sending Sign-In Link to Email in Firebase Authentication\nDESCRIPTION: Sends an email with a sign-in link to allow users to sign in without a password. Unlike other out-of-band actions, this flow must be completed within the app. Requires Auth instance, email, and action code settings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function sendSignInLinkToEmail(auth: Auth, email: string, actionCodeSettings: ActionCodeSettings): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Confirm Password Reset Function Declaration (TypeScript)\nDESCRIPTION: Function signature for confirmPasswordReset() that completes password reset with confirmation code.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function confirmPasswordReset(auth: Auth, oobCode: string, newPassword: string): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Extracting Document Data from DocumentSnapshot\nDESCRIPTION: Method to retrieve all fields in the document as an Object. Returns undefined if the document doesn't exist in Firestore. This method is used to access the full content of a document.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.documentsnapshot.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndata(): AppModelType | undefined;\n```\n\n----------------------------------------\n\nTITLE: Firebase Transaction Runner\nDESCRIPTION: Function to perform atomic modifications to data using transactions. Ensures data consistency when multiple clients are writing to the same location.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function runTransaction(ref: DatabaseReference, transactionUpdate: (currentData: any) => unknown, options?: TransactionOptions): Promise<TransactionResult>;\n```\n\n----------------------------------------\n\nTITLE: Email Link Sign In Flow Example\nDESCRIPTION: Shows the complete flow of email link sign in, including sending the link and signing in\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.emailauthprovider.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait sendSignInLinkToEmail(auth, email);\n// Obtain emailLink from user.\nconst userCredential = await signInWithEmailLink(auth, email, emailLink);\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Number Converter for Firebase in TypeScript\nDESCRIPTION: This snippet demonstrates a basic implementation of a Firebase data converter for numbers. It includes functions for converting to and from Firestore, as well as examples of using the converter with setDoc, getDoc, and updateDoc operations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.firestoredataconverter.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst numberConverter = {\n    toFirestore(value: WithFieldValue<number>) {\n        return { value };\n    },\n    fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions) {\n        return snapshot.data(options).value as number;\n    }\n};\n\nasync function simpleDemo(db: Firestore): Promise<void> {\n    const documentRef = doc(db, 'values/value123').withConverter(numberConverter);\n\n    // converters are used with `setDoc`, `addDoc`, and `getDoc`\n    await setDoc(documentRef, 42);\n    const snapshot1 = await getDoc(documentRef);\n    assertEqual(snapshot1.data(), 42);\n\n    // converters are not used when writing data with `updateDoc`\n    await updateDoc(documentRef, { value: 999 });\n    const snapshot2 = await getDoc(documentRef);\n    assertEqual(snapshot2.data(), 999);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing withConverter Method in TypeScript for Firebase JavaScript SDK\nDESCRIPTION: This snippet shows two overloads of the withConverter method. The first removes the current converter, while the second applies a custom data converter to the query for type conversion between Firestore and custom model objects.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.query.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nwithConverter(converter: null): Query<DocumentData, DocumentData>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nwithConverter<NewAppModelType, NewDbModelType extends DocumentData = DocumentData>(converter: FirestoreDataConverter<NewAppModelType, NewDbModelType>): Query<NewAppModelType, NewDbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Performing Aggregation Queries in Firestore with TypeScript\nDESCRIPTION: Calculates specified aggregations (count, sum, average) over documents in a query result set without downloading the complete documents. Only returns the final aggregation values.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getAggregate<AggregateSpecType extends AggregateSpec, AppModelType, DbModelType extends DocumentData>(query: Query<AppModelType, DbModelType>, aggregateSpec: AggregateSpecType): Promise<AggregateQuerySnapshot<AggregateSpecType, AppModelType, DbModelType>>;\n```\n\n----------------------------------------\n\nTITLE: Defining startAt Query Constraint in Firebase Realtime Database (TypeScript)\nDESCRIPTION: Creates a QueryConstraint with a specified starting point (inclusive) for Firebase Realtime Database queries. It allows setting a value and optional key to filter results.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function startAt(value?: number | string | boolean | null, key?: string): QueryConstraint;\n```\n\n----------------------------------------\n\nTITLE: IndexedDB Local Persistence Implementation in TypeScript\nDESCRIPTION: An implementation of the Persistence interface that uses indexedDB for the underlying storage. This provides a more robust persistent storage mechanism for authentication state than localStorage.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nindexedDBLocalPersistence: Persistence\n```\n\n----------------------------------------\n\nTITLE: Defining IdTokenResult Interface in TypeScript\nDESCRIPTION: Interface definition for IdTokenResult that contains properties related to Firebase Authentication ID tokens including token string, claims, timestamps, and authentication details.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.idtokenresult.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IdTokenResult \n```\n\n----------------------------------------\n\nTITLE: Iterating DataSnapshot Children\nDESCRIPTION: Method to enumerate the top-level children in the DataSnapshot, guaranteeing the order of iteration matches the query order.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.datasnapshot.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nforEach(action: (child: IteratedDataSnapshot) => boolean | void): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining Database Class in TypeScript for Firebase Realtime Database\nDESCRIPTION: This snippet defines the Database class for Firebase Realtime Database. It includes two readonly properties: 'app' of type FirebaseApp, and 'type' which is a string literal 'database'.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.database.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Database \n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Post Converter for Firestore in TypeScript\nDESCRIPTION: This snippet showcases an advanced implementation of a Firestore data converter for a Post class. It demonstrates how to convert between application-specific Post objects and Firestore-specific PostDbModel objects, including handling of nested properties and timestamps. The example also illustrates type checking and error handling in TypeScript.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestoredataconverter.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// The Post class is a model that is used by our application.\n// This class may have properties and methods that are specific\n// to our application execution, which do not need to be persisted\n// to Firestore.\nclass Post {\n    constructor(\n        readonly title: string,\n        readonly author: string,\n        readonly lastUpdatedMillis: number\n    ) {}\n    toString(): string {\n        return `${this.title} by ${this.author}`;\n    }\n}\n\n// The PostDbModel represents how we want our posts to be stored\n// in Firestore. This DbModel has different properties (`ttl`,\n// `aut`, and `lut`) from the Post class we use in our application.\ninterface PostDbModel {\n    ttl: string;\n    aut: { firstName: string; lastName: string };\n    lut: Timestamp;\n}\n\n// The `PostConverter` implements `FirestoreDataConverter` and specifies\n// how the Firestore SDK can convert `Post` objects to `PostDbModel`\n// objects and vice versa.\nclass PostConverter implements FirestoreDataConverter<Post, PostDbModel> {\n    toFirestore(post: WithFieldValue<Post>): WithFieldValue<PostDbModel> {\n        return {\n            ttl: post.title,\n            aut: this._autFromAuthor(post.author),\n            lut: this._lutFromLastUpdatedMillis(post.lastUpdatedMillis)\n        };\n    }\n\n    fromFirestore(snapshot: QueryDocumentSnapshot, options: SnapshotOptions): Post {\n        const data = snapshot.data(options) as PostDbModel;\n        const author = `${data.aut.firstName} ${data.aut.lastName}`;\n        return new Post(data.ttl, author, data.lut.toMillis());\n    }\n\n    _autFromAuthor(\n        author: string | FieldValue\n    ): { firstName: string; lastName: string } | FieldValue {\n        if (typeof author !== 'string') {\n            // `author` is a FieldValue, so just return it.\n            return author;\n        }\n        const [firstName, lastName] = author.split(' ');\n        return {firstName, lastName};\n    }\n\n    _lutFromLastUpdatedMillis(\n        lastUpdatedMillis: number | FieldValue\n    ): Timestamp | FieldValue {\n        if (typeof lastUpdatedMillis !== 'number') {\n            // `lastUpdatedMillis` must be a FieldValue, so just return it.\n            return lastUpdatedMillis;\n        }\n        return Timestamp.fromMillis(lastUpdatedMillis);\n    }\n}\n\nasync function advancedDemo(db: Firestore): Promise<void> {\n    // Create a `DocumentReference` with a `FirestoreDataConverter`.\n    const documentRef = doc(db, 'posts/post123').withConverter(new PostConverter());\n\n    // The `data` argument specified to `setDoc()` is type checked by the\n    // TypeScript compiler to be compatible with `Post`. Since the `data`\n    // argument is typed as `WithFieldValue<Post>` rather than just `Post`,\n    // this allows properties of the `data` argument to also be special\n    // Firestore values that perform server-side mutations, such as\n    // `arrayRemove()`, `deleteField()`, and `serverTimestamp()`.\n    await setDoc(documentRef, {\n        title: 'My Life',\n        author: 'Foo Bar',\n        lastUpdatedMillis: serverTimestamp()\n    });\n\n    // The TypeScript compiler will fail to compile if the `data` argument to\n    // `setDoc()` is _not_ compatible with `WithFieldValue<Post>`. This\n    // type checking prevents the caller from specifying objects with incorrect\n    // properties or property values.\n    // @ts-expect-error \"Argument of type { ttl: string; } is not assignable\n    // to parameter of type WithFieldValue<Post>\"\n    await setDoc(documentRef, { ttl: 'The Title' });\n\n    // When retrieving a document with `getDoc()` the `DocumentSnapshot`\n    // object's `data()` method returns a `Post`, rather than a generic object,\n    // which would have been returned if the `DocumentReference` did _not_ have a\n    // `FirestoreDataConverter` attached to it.\n    const snapshot1: DocumentSnapshot<Post> = await getDoc(documentRef);\n    const post1: Post = snapshot1.data()!;\n    if (post1) {\n        assertEqual(post1.title, 'My Life');\n        assertEqual(post1.author, 'Foo Bar');\n    }\n\n    // The `data` argument specified to `updateDoc()` is type checked by the\n    // TypeScript compiler to be compatible with `PostDbModel`. Note that\n    // unlike `setDoc()`, whose `data` argument must be compatible with `Post`,\n    // the `data` argument to `updateDoc()` must be compatible with\n    // `PostDbModel`. Similar to `setDoc()`, since the `data` argument is typed\n    // as `WithFieldValue<PostDbModel>` rather than just `PostDbModel`, this\n    // allows properties of the `data` argument to also be those special\n    // Firestore values, like `arrayRemove()`, `deleteField()`, and\n    // `serverTimestamp()`.\n    await updateDoc(documentRef, {\n        'aut.firstName': 'NewFirstName',\n        lut: serverTimestamp()\n    });\n\n    // The TypeScript compiler will fail to compile if the `data` argument to\n    // `updateDoc()` is _not_ compatible with `WithFieldValue<PostDbModel>`.\n    // This type checking prevents the caller from specifying objects with\n    // incorrect properties or property values.\n    // @ts-expect-error \"Argument of type { title: string; } is not assignable\n    // to parameter of type WithFieldValue<PostDbModel>\"\n    await updateDoc(documentRef, { title: 'New Title' });\n    const snapshot2: DocumentSnapshot<Post> = await getDoc(documentRef);\n    const post2: Post = snapshot2.data()!;\n    if (post2) {\n        assertEqual(post2.title, 'My Life');\n        assertEqual(post2.author, 'NewFirstName Bar');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining QueryCompositeFilterConstraint Class in TypeScript\nDESCRIPTION: This snippet defines the QueryCompositeFilterConstraint class, which is used to narrow the set of documents returned by a Firestore query using logical OR or AND operations on multiple filter constraints.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.querycompositefilterconstraint.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class QueryCompositeFilterConstraint \n```\n\n----------------------------------------\n\nTITLE: Setting Default Event Parameters in Firebase Analytics\nDESCRIPTION: Adds data that will be included with every event logged from the SDK, including automatic ones. Values persist on the current page and are passed with all subsequent events.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function setDefaultEventParameters(customParams: CustomParams): void;\n```\n\n----------------------------------------\n\nTITLE: Child Added Event Listener with Options\nDESCRIPTION: Function to listen for child added events with configurable options like onlyOnce. Returns an unsubscribe function.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onChildAdded(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, options: ListenOptions): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Checking FCM Support in Browser in TypeScript\nDESCRIPTION: Function to check if all required APIs for Firebase Cloud Messaging exist in the browser. It returns a Promise that resolves to a boolean indicating support.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function isWindowSupported(): Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Implementing fromFirestore Method in FirestoreDataConverter\nDESCRIPTION: This code snippet shows the signature of the fromFirestore method, which is called by the Firestore SDK to convert Firestore data into an object of type AppModelType. It takes a QueryDocumentSnapshot and optional SnapshotOptions as parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestoredataconverter.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfromFirestore(snapshot: QueryDocumentSnapshot<DocumentData, DocumentData>, options?: SnapshotOptions): AppModelType;\n```\n\n----------------------------------------\n\nTITLE: Getting FCM Registration Token in TypeScript\nDESCRIPTION: Function to subscribe a Messaging instance to push notifications and retrieve an FCM registration token. It handles permission requests and returns a Promise resolving to a string token.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getToken(messaging: Messaging, options?: GetTokenOptions): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Getting Firebase Installation Auth Token in TypeScript\nDESCRIPTION: Returns a Firebase Installations auth token, identifying the current Firebase Installation. This function is used to authenticate the installation with Firebase services.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/installations.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getToken(installations: Installations, forceRefresh?: boolean): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Generating Content Non-Streaming\nDESCRIPTION: Method for making a single non-streaming call to the model. Returns a Promise containing a single GenerateContentResponse object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generativemodel.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateContent(request: GenerateContentRequest | string | Array<string | Part>): Promise<GenerateContentResult>;\n```\n\n----------------------------------------\n\nTITLE: Writing Data with Priority using setWithPriority()\nDESCRIPTION: Function to write data and set priority simultaneously at a Database location. Returns a Promise that resolves when write is complete.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function setWithPriority(ref: DatabaseReference, value: unknown, priority: string | number | null): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Functions for Firestore in TypeScript\nDESCRIPTION: Defines query functions for Firestore, allowing the creation of complex queries with composite filters and constraints.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore.api.md#2025-04-14_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function query<AppModelType, DbModelType extends DocumentData>(query: Query<AppModelType, DbModelType>, compositeFilter: QueryCompositeFilterConstraint, ...queryConstraints: QueryNonFilterConstraint[]): Query<AppModelType, DbModelType>;\n\nexport function query<AppModelType, DbModelType extends DocumentData>(query: Query<AppModelType, DbModelType>, ...queryConstraints: QueryConstraint[]): Query<AppModelType, DbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Generating Content with Streaming\nDESCRIPTION: Method for making a streaming call to the model. Returns an object with an iterable stream of response chunks and a Promise for the final aggregated response.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generativemodel.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateContentStream(request: GenerateContentRequest | string | Array<string | Part>): Promise<GenerateContentStreamResult>;\n```\n\n----------------------------------------\n\nTITLE: Logging Screen View Events in Firebase Analytics\nDESCRIPTION: TypeScript declaration for logging screen view events with screen name and class parameters for tracking application navigation and screen views.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'screen_view', eventParams?: {\n    firebase_screen: EventParams['firebase_screen'];\n    firebase_screen_class: EventParams['firebase_screen_class'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Getting Document Reference in Firestore Collection (TypeScript)\nDESCRIPTION: Retrieves a DocumentReference instance referring to a document within a CollectionReference at a specified relative path. If no path is specified, an auto-generated unique ID is used.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function doc<AppModelType, DbModelType extends DocumentData>(reference: CollectionReference<AppModelType, DbModelType>, path?: string, ...pathSegments: string[]): DocumentReference<AppModelType, DbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Installations Instance in TypeScript\nDESCRIPTION: Returns an instance of Installations associated with the given FirebaseApp instance. This function is used to initialize the Installations SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/installations.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getInstallations(app?: FirebaseApp): Installations;\n```\n\n----------------------------------------\n\nTITLE: Send Email Verification Function Signature in Firebase Auth\nDESCRIPTION: TypeScript signature for the sendEmailVerification function that sends verification emails to users. The function accepts a User object and optional ActionCodeSettings to customize the verification process.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function sendEmailVerification(user: User, actionCodeSettings?: ActionCodeSettings | null): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Uploading String in Firebase Storage (TypeScript)\nDESCRIPTION: Uploads a string to the object's location. The upload is not resumable.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function uploadString(ref: StorageReference, value: string, format?: StringFormat, metadata?: UploadMetadata): Promise<UploadResult>;\n```\n\n----------------------------------------\n\nTITLE: Creating Google Credential with ID Token\nDESCRIPTION: Example showing how to create a Google credential using the ID token from a Google Sign In callback and sign in with it.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.googleauthprovider.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// `googleUser` from the onsuccess Google Sign In callback.\nconst credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\nconst result = await signInWithCredential(credential);\n```\n\n----------------------------------------\n\nTITLE: Using equalTo Query Constraint in Firebase Realtime Database\nDESCRIPTION: Creates a QueryConstraint that includes children matching the specified value. Can be further refined with an optional key argument to filter result sets.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nequalTo(value, key)\n```\n\n----------------------------------------\n\nTITLE: Registering onChildRemoved Listener with Cancellation Callback in TypeScript\nDESCRIPTION: Listens for child removal events in a Firebase Database. Triggers when a child is removed, providing a DataSnapshot of the removed data. This overload includes a cancellation callback for handling permission errors.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onChildRemoved(query: Query, callback: (snapshot: DataSnapshot) => unknown, cancelCallback?: (error: Error) => unknown): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Retrieving a VertexAI Instance in TypeScript\nDESCRIPTION: Function to retrieve a VertexAI instance for a given Firebase app. It optionally accepts a Firebase app instance and configuration options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getVertexAI(app?: FirebaseApp, options?: VertexAIOptions): VertexAI;\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentSnapshot Class in TypeScript\nDESCRIPTION: Declaration of the DocumentSnapshot class with generic types for application and database models. This class represents a snapshot of a document in Firestore, providing methods to access document data and metadata.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.documentsnapshot.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class DocumentSnapshot<AppModelType = DocumentData, DbModelType extends DocumentData = DocumentData>\n```\n\n----------------------------------------\n\nTITLE: Verifying Email Before Update in Firebase Authentication\nDESCRIPTION: Sends a verification email to a new email address before updating the user's email. This function takes the user object, new email address, and optional action code settings as parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nverifyBeforeUpdateEmail(user, newEmail, actionCodeSettings)\n```\n\n----------------------------------------\n\nTITLE: Creating a Reference to Firebase Realtime Database in TypeScript\nDESCRIPTION: Returns a Reference representing the location in the Database corresponding to the provided path. If no path is provided, the Reference will point to the root of the Database.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function ref(db: Database, path?: string): DatabaseReference;\n```\n\n----------------------------------------\n\nTITLE: Query Constraint - endAt()\nDESCRIPTION: Creates a QueryConstraint with specified ending point (inclusive). Used for filtering data with arbitrary ending points.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function endAt(value: number | string | boolean | null, key?: string): QueryConstraint;\n```\n\n----------------------------------------\n\nTITLE: Implementing First-N Limit Query in Firebase Database\nDESCRIPTION: Creates a QueryConstraint that limits results to the first N children, maintaining limit as data changes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function limitToFirst(limit: number): QueryConstraint;\n```\n\n----------------------------------------\n\nTITLE: Timestamp Class Implementation in TypeScript\nDESCRIPTION: Timestamp class definition with methods for creating, comparing and converting timestamp values. Includes functionality to work with dates and milliseconds.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore-lite.api.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Timestamp {\n    constructor(seconds: number, nanoseconds: number);\n    static fromDate(date: Date): Timestamp;\n    static fromMillis(milliseconds: number): Timestamp;\n    isEqual(other: Timestamp): boolean;\n    readonly nanoseconds: number;\n    static now(): Timestamp;\n    readonly seconds: number;\n    toDate(): Date;\n    toJSON(): {\n        seconds: number;\n        nanoseconds: number;\n    };\n    toMillis(): number;\n    toString(): string;\n    valueOf(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Field from DocumentSnapshot\nDESCRIPTION: Method to fetch a specific field from the document using a field path. Returns undefined if the document or field doesn't exist. Allows accessing nested fields using dot notation or FieldPath objects.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.documentsnapshot.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nget(fieldPath: string | FieldPath): any;\n```\n\n----------------------------------------\n\nTITLE: Implementing CollectionReference.withConverter Method\nDESCRIPTION: Method signature for applying a custom data converter to a CollectionReference. Enables conversion between Firestore data and custom model objects.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.collectionreference.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nwithConverter<NewAppModelType, NewDbModelType extends DocumentData = DocumentData>(converter: FirestoreDataConverter<NewAppModelType, NewDbModelType>): CollectionReference<NewAppModelType, NewDbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Declaring Firestore Order By Function\nDESCRIPTION: TypeScript declaration for creating query constraints to sort results by specified fields.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function orderBy(fieldPath: string | FieldPath, directionStr?: OrderByDirection): QueryOrderByConstraint;\n```\n\n----------------------------------------\n\nTITLE: Fetching and Activating Remote Config in TypeScript\nDESCRIPTION: Performs fetch and activate operations as a convenience. Returns a Promise resolving to a boolean indicating if new config was activated.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.md#2025-04-14_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport declare function fetchAndActivate(remoteConfig: RemoteConfig): Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Defining UserCredential Interface in TypeScript\nDESCRIPTION: This snippet defines the UserCredential interface with its properties. It includes the operationType, providerId, and user properties, each with their respective types.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.usercredential.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UserCredential \n{\n  operationType: (typeof OperationTypeMap)[keyof typeof OperationTypeMap];\n  providerId: string | null;\n  user: User;\n}\n```\n\n----------------------------------------\n\nTITLE: Firestore Field Operations and Special Values in JavaScript\nDESCRIPTION: Functions for working with Firestore fields and special values. These include operations like arrayUnion(), arrayRemove(), and special values like serverTimestamp() and documentId().\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeleteField()\ndocumentId()\nserverTimestamp()\narrayRemove(elements)\narrayUnion(elements)\n```\n\n----------------------------------------\n\nTITLE: Safe Object Property Access in TypeScript\nDESCRIPTION: This function safely accesses a property of an object. It takes an object and a key, returning the value if it exists or undefined if it doesn't, preventing errors from accessing non-existent properties.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function safeGet<T extends object, K extends keyof T>(obj: T, key: K): T[K] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Updating Metadata in Firebase Storage (TypeScript)\nDESCRIPTION: Updates the metadata for the specified object. Only values that have been explicitly set will be changed.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function updateMetadata(ref: StorageReference, metadata: SettableMetadata): Promise<FullMetadata>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Auth with Custom Error Map in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize Firebase Authentication with a custom error map. It uses the debugErrorMap for verbose error messages, which is useful for debugging but increases code size.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.autherrormap.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninitializeAuth(app, {errorMap: debugErrorMap})\n```\n\n----------------------------------------\n\nTITLE: ChatSession Message Methods - TypeScript\nDESCRIPTION: Methods for sending chat messages either as regular responses or streams.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.chatsession.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsendMessage(request: string | Array<string | Part>): Promise<GenerateContentResult>;\n\nsendMessageStream(request: string | Array<string | Part>): Promise<GenerateContentStreamResult>;\n```\n\n----------------------------------------\n\nTITLE: Setting Document Data in Firestore Lite with Merge Options\nDESCRIPTION: Writes data to a document with optional merge behavior. When merge options are provided, data can be merged into an existing document. Changes are only reflected after the returned promise resolves.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function setDoc<AppModelType, DbModelType extends DocumentData>(reference: DocumentReference<AppModelType, DbModelType>, data: PartialWithFieldValue<AppModelType>, options: SetOptions): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: StorageReference storage Property Type Definition\nDESCRIPTION: Defines the storage property type which represents the FirebaseStorage instance associated with this reference.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.storagereference.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nstorage: FirebaseStorage;\n```\n\n----------------------------------------\n\nTITLE: Using SAMLAuthProvider for Authentication in JavaScript\nDESCRIPTION: Example of how to use SAMLAuthProvider to sign in with a popup and obtain an AuthCredential.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.samlauthprovider.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst userCredential = await signInWithPopup(auth, samlProvider);\nconst credential = SAMLAuthProvider.credentialFromResult(userCredential);\n```\n\n----------------------------------------\n\nTITLE: Accessing Child References in Firebase Database\nDESCRIPTION: Gets a Reference for a child location using either simple names or slash-separated paths.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function child(parent: DatabaseReference, path: string): DatabaseReference;\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionReference Class in TypeScript\nDESCRIPTION: Class declaration for CollectionReference that extends Query class with generic type parameters for application and database models. Used for managing Firestore collections.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.collectionreference.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class CollectionReference<AppModelType = DocumentData, DbModelType extends DocumentData = DocumentData> extends Query<AppModelType, DbModelType>\n```\n\n----------------------------------------\n\nTITLE: Creating Facebook Credentials with Access Token\nDESCRIPTION: Example showing how to create Firebase credentials using a Facebook access token retrieved from the Facebook auth response callback.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.facebookauthprovider.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// `event` from the Facebook auth.authResponseChange callback.\nconst credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\nconst result = await signInWithCredential(credential);\n```\n\n----------------------------------------\n\nTITLE: Update Password Function Signature in Firebase Auth\nDESCRIPTION: TypeScript signature for the updatePassword function that changes a user's password. This security-sensitive operation requires recent authentication, and may require reauthentication if the requirement isn't met.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function updatePassword(user: User, newPassword: string): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Firestore Instance in TypeScript\nDESCRIPTION: This function returns the existing default Firestore instance associated with a FirebaseApp. If no instance exists, it initializes a new instance with default settings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getFirestore(app: FirebaseApp): Firestore;\n```\n\n----------------------------------------\n\nTITLE: Counting Tokens in Content\nDESCRIPTION: Method for counting tokens in the provided content. Accepts various input formats including CountTokensRequest, string, or array of strings/parts.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generativemodel.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncountTokens(request: CountTokensRequest | string | Array<string | Part>): Promise<CountTokensResponse>;\n```\n\n----------------------------------------\n\nTITLE: Listening for Child Moved Events with Options in Firebase Realtime Database\nDESCRIPTION: This overload of the onChildMoved function includes an options parameter for configuring the listener behavior, such as setting it to trigger only once. It returns an unsubscribe function to remove the listener.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onChildMoved(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, options: ListenOptions): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Declaring signInWithEmailLink Function in TypeScript\nDESCRIPTION: Function signature for asynchronously signing in a user with an email link. This method validates a link sent to a user's email for authentication purposes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function signInWithEmailLink(auth: Auth, email: string, emailLink?: string): Promise<UserCredential>;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Messaging Instance in TypeScript\nDESCRIPTION: Function to retrieve a Firebase Cloud Messaging instance associated with a Firebase app. It returns a Messaging interface object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getMessagingInWindow(app?: FirebaseApp): Messaging;\n```\n\n----------------------------------------\n\nTITLE: Debugging and Logging Functions\nDESCRIPTION: Functions for enabling and managing debugging and logging capabilities.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nenableLogging(enabled, persistent)\nenableLogging(logger)\n```\n\n----------------------------------------\n\nTITLE: QuerySnapshot ForEach Method\nDESCRIPTION: Method to iterate over all documents in the QuerySnapshot, executing a callback for each document.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.querysnapshot.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nforEach(callback: (result: QueryDocumentSnapshot<AppModelType, DbModelType>) => void, thisArg?: unknown): void;\n```\n\n----------------------------------------\n\nTITLE: Database URL Protocol Validation\nDESCRIPTION: Code fix to properly handle websocket protocol validation when parsing database URLs with 'wss' or 'ws' protocols. Sets webSocketOnly to true and disables long polling for websocket connections.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/database/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (databaseURL.startsWith('ws://') || databaseURL.startsWith('wss://')) {\n  webSocketOnly = true;\n  longPolling = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Auth State Change Handler Function Declaration (TypeScript)\nDESCRIPTION: Function signature for beforeAuthStateChanged() that adds a blocking callback before auth state changes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function beforeAuthStateChanged(auth: Auth, callback: (user: User | null) => void | Promise<void>, onAbort?: () => void): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase App Check in TypeScript\nDESCRIPTION: Activates App Check for a given Firebase app. This function can only be called once per app and requires initialization options that specify which attestation provider to use.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function initializeAppCheck(app: FirebaseApp | undefined, options: AppCheckOptions): AppCheck;\n```\n\n----------------------------------------\n\nTITLE: Registering onChildRemoved Listener with Both Cancellation and Options in TypeScript\nDESCRIPTION: Comprehensive listener for child removal events in Firebase Database. This overload supports both a cancellation callback for handling permission errors and listen options for configuring listener behavior like one-time execution.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onChildRemoved(query: Query, callback: (snapshot: DataSnapshot) => unknown, cancelCallback: (error: Error) => unknown, options: ListenOptions): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Getting Limited Use Token in Firebase App Check\nDESCRIPTION: Requests a limited-use Firebase App Check token specifically for authorizing requests to non-Firebase backends with replay protection. This method doesn't affect normal token generation behavior.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getLimitedUseToken(appCheckInstance: AppCheck): Promise<AppCheckTokenResult>;\n```\n\n----------------------------------------\n\nTITLE: Typescript API Declarations for Firebase App Check\nDESCRIPTION: Complete TypeScript interface and class declarations for the Firebase App Check module. Includes public interfaces for AppCheck, AppCheckToken, provider classes, and utility functions for token management.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/app-check.api.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FirebaseApp } from '@firebase/app';\nimport { PartialObserver } from '@firebase/util';\nimport { Unsubscribe } from '@firebase/util';\n\n// @public\nexport interface AppCheck {\n    app: FirebaseApp;\n}\n\n// @internal (undocumented)\nexport type _AppCheckComponentName = 'app-check';\n\n// @internal (undocumented)\nexport type _AppCheckInternalComponentName = 'app-check-internal';\n\n// @public\nexport interface AppCheckOptions {\n    isTokenAutoRefreshEnabled?: boolean;\n    provider: CustomProvider | ReCaptchaV3Provider | ReCaptchaEnterpriseProvider;\n}\n\n// @public\nexport interface AppCheckToken {\n    readonly expireTimeMillis: number;\n    // (undocumented)\n    readonly token: string;\n}\n\n// @public\nexport type AppCheckTokenListener = (token: AppCheckTokenResult) => void;\n\n// @public\nexport interface AppCheckTokenResult {\n    readonly token: string;\n}\n\n// Warning: (ae-forgotten-export) The symbol \"AppCheckProvider\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport class CustomProvider implements AppCheckProvider {\n    constructor(_customProviderOptions: CustomProviderOptions);\n    // Warning: (ae-forgotten-export) The symbol \"AppCheckTokenInternal\" needs to be exported by the entry point index.d.ts\n    //\n    // @internal (undocumented)\n    getToken(): Promise<AppCheckTokenInternal>;\n    // @internal (undocumented)\n    initialize(app: FirebaseApp): void;\n    // @internal (undocumented)\n    isEqual(otherProvider: unknown): boolean;\n}\n\n// @public\nexport interface CustomProviderOptions {\n    getToken: () => Promise<AppCheckToken>;\n}\n\n// @public\nexport function getLimitedUseToken(appCheckInstance: AppCheck): Promise<AppCheckTokenResult>;\n\n// @public\nexport function getToken(appCheckInstance: AppCheck, forceRefresh?: boolean): Promise<AppCheckTokenResult>;\n\n// @public\nexport function initializeAppCheck(app: FirebaseApp | undefined, options: AppCheckOptions): AppCheck;\n\n// @public\nexport function onTokenChanged(appCheckInstance: AppCheck, observer: PartialObserver<AppCheckTokenResult>): Unsubscribe;\n\n// @public\nexport function onTokenChanged(appCheckInstance: AppCheck, onNext: (tokenResult: AppCheckTokenResult) => void, onError?: (error: Error) => void, onCompletion?: () => void): Unsubscribe;\n\nexport { PartialObserver }\n\n// @public\nexport class ReCaptchaEnterpriseProvider implements AppCheckProvider {\n    constructor(_siteKey: string);\n    // @internal\n    getToken(): Promise<AppCheckTokenInternal>;\n    // @internal (undocumented)\n    initialize(app: FirebaseApp): void;\n    // @internal (undocumented)\n    isEqual(otherProvider: unknown): boolean;\n    }\n\n// @public\nexport class ReCaptchaV3Provider implements AppCheckProvider {\n    constructor(_siteKey: string);\n    // @internal\n    getToken(): Promise<AppCheckTokenInternal>;\n    // @internal (undocumented)\n    initialize(app: FirebaseApp): void;\n    // @internal (undocumented)\n    isEqual(otherProvider: unknown): boolean;\n    }\n\n// @public\nexport function setTokenAutoRefreshEnabled(appCheckInstance: AppCheck, isTokenAutoRefreshEnabled: boolean): void;\n\nexport { Unsubscribe }\n```\n\n----------------------------------------\n\nTITLE: Updating Document Fields with WriteBatch - TypeScript\nDESCRIPTION: Method signature for updating document fields in a batch operation. Allows updating single or multiple fields using field paths or dot notation, with support for generic document types.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore-lite.api.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nupdate<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, field: string | FieldPath, value: unknown, ...moreFieldsAndValues: unknown[]): WriteBatch;\n```\n\n----------------------------------------\n\nTITLE: Auth Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for Firebase Auth service that represents the authentication capabilities and properties.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.auth.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Auth \n```\n\n----------------------------------------\n\nTITLE: Firebase SDK Package Documentation Table\nDESCRIPTION: Markdown table listing all Firebase JavaScript SDK packages with their descriptions, including analytics, authentication, database, storage and other core Firebase services.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/index.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  Package | Description |\n|  --- | --- |\n|  [@firebase/analytics](./analytics.md#analytics_package) | The Firebase Analytics Web SDK. This SDK does not work in a Node.js environment. |\n|  [@firebase/app](./app.md#app_package) | Firebase App |\n|  [@firebase/app-check](./app-check.md#app-check_package) | The Firebase App Check Web SDK. |\n|  [@firebase/auth](./auth.md#auth_package) | Firebase Authentication |\n|  [@firebase/database](./database.md#database_package) | Firebase Realtime Database |\n|  [@firebase/firestore](./firestore.md#firestore_package) | Cloud Firestore |\n|  [@firebase/functions](./functions.md#functions_package) | Cloud Functions for Firebase |\n|  [@firebase/installations](./installations.md#installations_package) | The Firebase Installations Web SDK. This SDK does not work in a Node.js environment. |\n|  [@firebase/messaging](./messaging.md#messaging_package) | The Firebase Cloud Messaging Web SDK. This SDK does not work in a Node.js environment. |\n|  [@firebase/performance](./performance.md#performance_package) | The Firebase Performance Monitoring Web SDK. This SDK does not work in a Node.js environment. |\n|  [@firebase/remote-config](./remote-config.md#remote-config_package) | The Firebase Remote Config Web SDK. This SDK does not work in a Node.js environment. |\n|  [@firebase/storage](./storage.md#storage_package) | Cloud Storage for Firebase |\n|  [@firebase/vertexai](./vertexai.md#vertexai_package) | The Vertex AI in Firebase Web SDK. |\n```\n\n----------------------------------------\n\nTITLE: Implementing Last-N Limit Query in Firebase Database\nDESCRIPTION: Creates a QueryConstraint that limits results to the last N children, maintaining limit as data changes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function limitToLast(limit: number): QueryConstraint;\n```\n\n----------------------------------------\n\nTITLE: Firebase Query Constructor\nDESCRIPTION: Function to create a new Query instance with additional query constraints. Allows building complex queries by combining multiple constraints.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function query(query: Query, ...queryConstraints: QueryConstraint[]): Query;\n```\n\n----------------------------------------\n\nTITLE: Transaction Get Method Signature\nDESCRIPTION: Method signature for reading a document within a transaction. Returns a Promise resolving to a DocumentSnapshot.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.transaction.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>): Promise<DocumentSnapshot<AppModelType, DbModelType>>;\n```\n\n----------------------------------------\n\nTITLE: Listening for Child Moved Events in Firebase Realtime Database\nDESCRIPTION: This function sets up a listener for child moved events in a Firebase Realtime Database query. It is triggered when a child's sort order changes. The callback receives a DataSnapshot and the previous child name.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onChildMoved(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, cancelCallback?: (error: Error) => unknown): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Declaring Firestore Average Aggregation Function\nDESCRIPTION: TypeScript declaration for creating an AggregateField to compute field averages across query results.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function average(field: string | FieldPath): AggregateField<number | null>;\n```\n\n----------------------------------------\n\nTITLE: Checking Child Properties with DataSnapshot.hasChildren()\nDESCRIPTION: Method to check if a DataSnapshot has any non-null child properties. Returns true if the snapshot has children that can be enumerated using forEach(), false otherwise.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.datasnapshot.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nhasChildren(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Terminating a Firestore instance in TypeScript\nDESCRIPTION: Function to terminate a Firestore instance and release its resources. After termination, only clearIndexedDbPersistence can be called. Pending writes are not cancelled and promises awaiting server response remain unresolved.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function terminate(firestore: Firestore): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase via npm\nDESCRIPTION: This snippet shows the recommended way to install Firebase using npm. It emphasizes that @firebase/app should not be used directly, but rather through the official firebase package.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/app/README.md#2025-04-14_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n**This package is not intended for direct usage, and should only be used via the officially supported [firebase](https://www.npmjs.com/package/firebase) package.**\n```\n\n----------------------------------------\n\nTITLE: Forcing Long Polling in Firebase Realtime Database in TypeScript\nDESCRIPTION: Forces the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function forceLongPolling(): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing Atomic Increment in Firebase Database\nDESCRIPTION: Returns a placeholder value for atomically incrementing a database value by a specified delta amount.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function increment(delta: number): object;\n```\n\n----------------------------------------\n\nTITLE: Setting Tenant ID on Auth Instance in JavaScript\nDESCRIPTION: Example showing how to set a tenant ID on an Auth instance for multi-tenancy support. This allows sign-in operations to be scoped to a specific tenant project.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.auth.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the tenant ID on Auth instance.\nauth.tenantId = 'TENANT_PROJECT_ID';\n\n// All future sign-in request now include tenant ID.\nconst result = await signInWithEmailAndPassword(auth, email, password);\n// result.user.tenantId should be 'TENANT_PROJECT_ID'.\n```\n\n----------------------------------------\n\nTITLE: Updating Firebase Import Syntax\nDESCRIPTION: Example showing migration from namespace import to default import syntax for Firebase after browser field points to ESM build.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/component/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nimport * as firebase from 'firebase/app';\n\n// After\nimport firebase from 'firebase/app';\n```\n\n----------------------------------------\n\nTITLE: Implementing WriteBatch Update Method\nDESCRIPTION: Methods to update fields in existing documents, with support for nested fields using dot notation or FieldPath\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.writebatch.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nupdate<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, data: UpdateData<DbModelType>): WriteBatch;\n\nupdate<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, field: string | FieldPath, value: unknown, ...moreFieldsAndValues: unknown[]): WriteBatch;\n```\n\n----------------------------------------\n\nTITLE: Transaction Get Method Signature\nDESCRIPTION: Method signature for reading a document within a transaction. Returns a Promise containing the document snapshot.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.transaction.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>): Promise<DocumentSnapshot<AppModelType, DbModelType>>;\n```\n\n----------------------------------------\n\nTITLE: Connecting to Firebase Realtime Database Emulator in TypeScript\nDESCRIPTION: Modifies the provided instance to communicate with the Realtime Database emulator. This method must be called before performing any other operation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function connectDatabaseEmulator(db: Database, host: string, port: number, options?: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n}): void;\n```\n\n----------------------------------------\n\nTITLE: User Interface Definition in TypeScript\nDESCRIPTION: Interface definition for Firebase User object extending UserInfo. Specifies properties and methods available for authenticated users including token management and profile operations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/auth.api.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface User extends UserInfo {\n    delete(): Promise<void>;\n    readonly emailVerified: boolean;\n    getIdToken(forceRefresh?: boolean): Promise<string>;\n    getIdTokenResult(forceRefresh?: boolean): Promise<IdTokenResult>;\n    readonly isAnonymous: boolean;\n    readonly metadata: UserMetadata;\n    readonly providerData: UserInfo[];\n    readonly refreshToken: string;\n    reload(): Promise<void>;\n    readonly tenantId: string | null;\n    toJSON(): object;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Error Codes in Firebase Storage API (TypeScript)\nDESCRIPTION: Enumeration of error codes that can be attached to StorageError objects in Firebase Storage. It includes various error situations such as app deletion, bucket not found, cancellation, and authentication issues.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum StorageErrorCode \n{\n  APP_DELETED = \"app-deleted\",\n  BUCKET_NOT_FOUND = \"bucket-not-found\",\n  CANCELED = \"canceled\",\n  CANNOT_SLICE_BLOB = \"cannot-slice-blob\",\n  INTERNAL_ERROR = \"internal-error\",\n  INVALID_ARGUMENT = \"invalid-argument\",\n  INVALID_ARGUMENT_COUNT = \"invalid-argument-count\",\n  INVALID_CHECKSUM = \"invalid-checksum\",\n  INVALID_DEFAULT_BUCKET = \"invalid-default-bucket\",\n  INVALID_EVENT_NAME = \"invalid-event-name\",\n  INVALID_FORMAT = \"invalid-format\",\n  INVALID_ROOT_OPERATION = \"invalid-root-operation\",\n  INVALID_URL = \"invalid-url\",\n  NO_DEFAULT_BUCKET = \"no-default-bucket\",\n  NO_DOWNLOAD_URL = \"no-download-url\",\n  OBJECT_NOT_FOUND = \"object-not-found\",\n  PROJECT_NOT_FOUND = \"project-not-found\",\n  QUOTA_EXCEEDED = \"quota-exceeded\",\n  RETRY_LIMIT_EXCEEDED = \"retry-limit-exceeded\",\n  SERVER_FILE_WRONG_SIZE = \"server-file-wrong-size\",\n  UNAUTHENTICATED = \"unauthenticated\",\n  UNAUTHORIZED = \"unauthorized\",\n  UNAUTHORIZED_APP = \"unauthorized-app\",\n  UNKNOWN = \"unknown\",\n  UNSUPPORTED_ENVIRONMENT = \"unsupported-environment\"\n}\n```\n\n----------------------------------------\n\nTITLE: Function Declaration for reauthenticateWithPopup Method\nDESCRIPTION: TypeScript declaration for the reauthenticateWithPopup function that reauthenticates a user with an OAuthProvider using a popup flow. The function returns a Promise that resolves with a UserCredential.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function reauthenticateWithPopup(user: User, provider: AuthProvider, resolver?: PopupRedirectResolver): Promise<UserCredential>;\n```\n\n----------------------------------------\n\nTITLE: DocumentSnapshot Exists Method Implementation\nDESCRIPTION: Type guard method that checks if the document exists and narrows the type to QueryDocumentSnapshot if true.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.documentsnapshot.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexists(): this is QueryDocumentSnapshot<AppModelType, DbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Getting Boolean Value from Remote Config in TypeScript\nDESCRIPTION: Retrieves a boolean value for a given key from Remote Config. Convenience method for calling remoteConfig.getValue(key).asBoolean().\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.md#2025-04-14_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport declare function getBoolean(remoteConfig: RemoteConfig, key: string): boolean;\n```\n\n----------------------------------------\n\nTITLE: Transaction Update Method Signatures\nDESCRIPTION: Method signatures for updating fields in an existing document using either an update object or field/value pairs.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.transaction.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nupdate<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, data: UpdateData<DbModelType>): this;\n\nupdate<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, field: string | FieldPath, value: unknown, ...moreFieldsAndValues: unknown[]): this;\n```\n\n----------------------------------------\n\nTITLE: Generating Query String in TypeScript\nDESCRIPTION: This function generates a query string from an object of key-value pairs. It takes an object with string keys and string or number values, returning the formatted query string.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function querystring(querystringParams: {\n    [key: string]: string | number;\n}): string;\n```\n\n----------------------------------------\n\nTITLE: Firebase Database Child Moved Event Listener\nDESCRIPTION: Attaches a listener for child_moved events at a database location. Triggers when child's sort order changes relative to siblings. Provides moved child's DataSnapshot and previous sibling key.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nonChildMoved(query, callback, cancelCallback)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nonChildMoved(query, callback, options)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nonChildMoved(query, callback, cancelCallback, options)\n```\n\n----------------------------------------\n\nTITLE: Logging Sign Up Event in Firebase Analytics\nDESCRIPTION: This function logs a 'sign_up' event in Firebase Analytics. It takes parameters for the analytics instance, event name, event parameters (including an optional method), and analytics call options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'sign_up', eventParams?: { method?: EventParams['method']; [key: string]: any; }, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Query Class in TypeScript for Firebase JavaScript SDK\nDESCRIPTION: This code snippet defines the Query class for Firestore in the Firebase JavaScript SDK. It includes type parameters for application and database model types, and extends DocumentData.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.query.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Query<AppModelType = DocumentData, DbModelType extends DocumentData = DocumentData> \n```\n\n----------------------------------------\n\nTITLE: Retrieving Child DataSnapshot\nDESCRIPTION: Method to get another DataSnapshot for a child location specified by a relative path. Returns an empty DataSnapshot if the child location has no data.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.datasnapshot.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nchild(path: string): DataSnapshot;\n```\n\n----------------------------------------\n\nTITLE: Ordering Data by Key in Firebase Realtime Database in TypeScript\nDESCRIPTION: Creates a new QueryConstraint that orders results by their (ascending) key values. This can be used to sort data in Firebase Realtime Database queries.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function orderByKey(): QueryConstraint;\n```\n\n----------------------------------------\n\nTITLE: Get Auth Instance Function Declaration (TypeScript)\nDESCRIPTION: Function signature for getAuth() that returns the Auth instance associated with a Firebase App instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getAuth(app?: FirebaseApp): Auth;\n```\n\n----------------------------------------\n\nTITLE: Getting Metadata in Firebase Storage (TypeScript)\nDESCRIPTION: Retrieves the metadata for the specified object. Returns a Promise that resolves with the metadata or rejects if the object doesn't exist or metadata cannot be retrieved.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getMetadata(ref: StorageReference): Promise<FullMetadata>;\n```\n\n----------------------------------------\n\nTITLE: Streaming Data in Firebase Storage (TypeScript)\nDESCRIPTION: Downloads the data at the object's location as a ReadableStream. This API is only available in Node.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getStream(ref: StorageReference, maxDownloadSizeBytes?: number): ReadableStream;\n```\n\n----------------------------------------\n\nTITLE: Defining the Config Interface for Firebase Auth in TypeScript\nDESCRIPTION: Interface declaration for Auth configuration in Firebase JavaScript SDK. This interface contains properties for API endpoints, authentication keys, and client version information needed to initialize the Auth service.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.config.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Config \n```\n\n----------------------------------------\n\nTITLE: Handling Background Messages in Service Worker\nDESCRIPTION: Sets up a listener for messages received while the app is in the background. The provided function or observer is called when a message is received in this state.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_sw.md#2025-04-14_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport declare function onBackgroundMessage(messaging: Messaging, nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Extracting Additional User Info from UserCredential in Firebase Authentication\nDESCRIPTION: Extracts provider-specific AdditionalUserInfo from the given UserCredential object. This function is useful for obtaining extra information about the user after authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetAdditionalUserInfo(userCredential)\n```\n\n----------------------------------------\n\nTITLE: Declaring Firestore Instance Getter\nDESCRIPTION: TypeScript declaration for retrieving the default Firestore instance associated with the default Firebase app.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getFirestore(): Firestore;\n```\n\n----------------------------------------\n\nTITLE: Uploading Bytes in Firebase Storage (TypeScript)\nDESCRIPTION: Uploads data to the object's location. The upload is not resumable.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function uploadBytes(ref: StorageReference, data: Blob | Uint8Array | ArrayBuffer, metadata?: UploadMetadata): Promise<UploadResult>;\n```\n\n----------------------------------------\n\nTITLE: Getting Multi-Factor Resolver in TypeScript\nDESCRIPTION: Function signature for obtaining a MultiFactorResolver to complete a multi-factor authentication flow. Takes Auth instance and MultiFactorError as parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getMultiFactorResolver(auth: Auth, error: MultiFactorError): MultiFactorResolver;\n```\n\n----------------------------------------\n\nTITLE: ChatSession Constructor - TypeScript\nDESCRIPTION: Constructor implementation for initializing a new ChatSession instance with API settings, model, and optional parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.chatsession.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(apiSettings: ApiSettings, model: string, params?: StartChatParams | undefined, requestOptions?: RequestOptions | undefined);\n```\n\n----------------------------------------\n\nTITLE: Creating QueryStartAtConstraint at Start in TypeScript\nDESCRIPTION: Creates a QueryStartAtConstraint that modifies the result set to start at the provided fields relative to the order of the query. The order of the field values must match the order of the order by clauses of the query.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function startAt(...fieldValues: unknown[]): QueryStartAtConstraint;\n```\n\n----------------------------------------\n\nTITLE: Credential-Based Sign-In with Firebase Authentication\nDESCRIPTION: Signs in with credentials generated by an AuthProvider. Used for various authentication methods like OAuth providers. Not supported by Auth instances created with FirebaseServerApp.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function signInWithCredential(auth: Auth, credential: AuthCredential): Promise<UserCredential>;\n```\n\n----------------------------------------\n\nTITLE: DocumentSnapshot Get Method Implementation\nDESCRIPTION: Method to retrieve a specific field from the document using a field path. Includes options for handling server timestamps.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.documentsnapshot.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nget(fieldPath: string | FieldPath, options?: SnapshotOptions): any;\n```\n\n----------------------------------------\n\nTITLE: Setting Token Auto-Refresh for Firebase App Check in TypeScript\nDESCRIPTION: This function allows setting whether App Check will automatically refresh tokens as needed. It takes an AppCheck instance and a boolean flag as parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function setTokenAutoRefreshEnabled(appCheckInstance: AppCheck, isTokenAutoRefreshEnabled: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: Logging Custom Event in Firebase Analytics\nDESCRIPTION: This function logs a custom event in Firebase Analytics. It accepts a generic type parameter for the event name, along with parameters for the analytics instance, event name, event parameters (as a key-value object), and analytics call options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent<T extends string>(analyticsInstance: Analytics, eventName: CustomEventName<T>, eventParams?: { [key: string]: any; }, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Browser Session Persistence Implementation in TypeScript\nDESCRIPTION: An implementation of the Persistence interface that uses sessionStorage for the underlying storage. This provides authentication state that persists only for the current browser session.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nbrowserSessionPersistence: Persistence\n```\n\n----------------------------------------\n\nTITLE: Getting a document reference in Firestore with TypeScript\nDESCRIPTION: Function to get a DocumentReference instance that points to a document at the specified path. Takes a Firestore instance, a path string, and optional additional path segments.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function doc(firestore: Firestore, path: string, ...pathSegments: string[]): DocumentReference<DocumentData, DocumentData>;\n```\n\n----------------------------------------\n\nTITLE: Parent Collection Reference\nDESCRIPTION: Getter method for accessing the parent CollectionReference of the document.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.documentreference.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nget parent(): CollectionReference<AppModelType, DbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Declaring Firestore Class in TypeScript\nDESCRIPTION: This snippet defines the Firestore class, which represents the Cloud Firestore service interface. It should not be instantiated directly, but instead accessed through the getFirestore() function.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.firestore.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Firestore \n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Firebase Realtime Database in TypeScript\nDESCRIPTION: Disconnects from the server, allowing all Database operations to be completed offline. The client maintains a persistent connection by default, but this method can be used to control the connection when a persistent connection is undesirable.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function goOffline(db: Database): void;\n```\n\n----------------------------------------\n\nTITLE: Using Optional Callbacks with UploadTask in JavaScript\nDESCRIPTION: Demonstrates how to use the 'on' method with optional callbacks, focusing on specific events like completion or progress updates.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.uploadtask.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Just listening for completion, this is legal.\nuploadTask.on(\n    firebase.storage.TaskEvent.STATE_CHANGED,\n    null,\n    null,\n    function() {\n      console.log('upload complete!');\n    });\n\n// Just listening for progress/state changes, this is legal.\nuploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, function(snapshot) {\n  var percent = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n  console.log(percent + \"% done\");\n});\n\n// This is also legal.\nuploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, {\n  'complete': function() {\n    console.log('upload complete!');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing toFirestore Method for Partial Updates\nDESCRIPTION: This code snippet shows the signature of the toFirestore method used for partial updates. It is called when using setDoc() with merge options. It handles partial updates and allows for the use of FieldValues in property values.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestoredataconverter.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntoFirestore(modelObject: PartialWithFieldValue<AppModelType>, options: SetOptions): PartialWithFieldValue<DbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Declaring Firestore Database Instance Getter\nDESCRIPTION: TypeScript declaration for getting a Firestore instance with a specific database ID.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getFirestore(databaseId: string): Firestore;\n```\n\n----------------------------------------\n\nTITLE: Defining DatabaseReference Interface in TypeScript\nDESCRIPTION: This snippet defines the DatabaseReference interface, which extends the Query interface. It represents a specific location in the Firebase Realtime Database and provides methods for reading and writing data.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.databasereference.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface DatabaseReference extends Query \n```\n\n----------------------------------------\n\nTITLE: Defining FirestoreDataConverter Interface in TypeScript\nDESCRIPTION: Interface declaration for FirestoreDataConverter that handles conversion between application model types and database model types. It supports generic type parameters for both the application model (AppModelType) and database model (DbModelType).\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.firestoredataconverter.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface FirestoreDataConverter<AppModelType, DbModelType extends DocumentData = DocumentData>\n```\n\n----------------------------------------\n\nTITLE: StorageReference toString Method Definition\nDESCRIPTION: Defines the toString method that returns a gs:// URL for the referenced object in the format gs://<bucket>/<path>/<to>/<object>.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.storagereference.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntoString(): string;\n```\n\n----------------------------------------\n\nTITLE: QuerySnapshot Class Definition in TypeScript\nDESCRIPTION: Defines the QuerySnapshot class that contains query results from Firestore. The class is generic, accepting AppModelType and DbModelType type parameters for document data typing.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.querysnapshot.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class QuerySnapshot<AppModelType = DocumentData, DbModelType extends DocumentData = DocumentData>\n```\n\n----------------------------------------\n\nTITLE: Adding Cookie Persistence in Firebase Auth\nDESCRIPTION: New persistence method backed by cookies called Persistence.COOKIE, designed to be used with middleware to keep front and backend auth state synchronized.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPersistence.COOKIE\n```\n\n----------------------------------------\n\nTITLE: Subscribing to snapshot sync events in Firestore JavaScript SDK\nDESCRIPTION: Shows how to use the onSnapshotsInSync() method to be notified when all snapshot listeners are in sync with each other.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribe = firebase.firestore().onSnapshotsInSync(() => {\n  console.log('All snapshot listeners are in sync');\n});\n```\n\n----------------------------------------\n\nTITLE: Handling MultiFactorError in Firebase Authentication\nDESCRIPTION: Example JavaScript code demonstrating how to handle multi-factor authentication errors, resolve second factor challenges, and complete sign-in.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.multifactorerror.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet resolver;\nlet multiFactorHints;\n\nsignInWithEmailAndPassword(auth, email, password)\n    .then((result) => {\n      // User signed in. No 2nd factor challenge is needed.\n    })\n    .catch((error) => {\n      if (error.code == 'auth/multi-factor-auth-required') {\n        resolver = getMultiFactorResolver(auth, error);\n        multiFactorHints = resolver.hints;\n      } else {\n        // Handle other errors.\n      }\n    });\n\n// Obtain a multiFactorAssertion by verifying the second factor.\n\nconst userCredential = await resolver.resolveSignIn(multiFactorAssertion);\n```\n\n----------------------------------------\n\nTITLE: Getting Value from Remote Config in TypeScript\nDESCRIPTION: This function retrieves the Value object for a given key from the Remote Config instance. It returns a Value interface that can be used to access the config value in different formats.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getValue(remoteConfig: RemoteConfig, key: string): Value;\n```\n\n----------------------------------------\n\nTITLE: Ensuring Initialization of Remote Config in TypeScript\nDESCRIPTION: Ensures the last activated config is available to the getters. Returns a Promise that resolves when initialization is complete.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.md#2025-04-14_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport declare function ensureInitialized(remoteConfig: RemoteConfig): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Accessing DataSnapshot Key Property\nDESCRIPTION: Getter for the key property of DataSnapshot, which returns the last part of the path of the location. For the root URL, it returns null.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.datasnapshot.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget key(): string | null;\n```\n\n----------------------------------------\n\nTITLE: Checking IndexedDB Availability in TypeScript\nDESCRIPTION: This function checks if IndexedDB is available in the current environment. It returns a boolean indicating whether IndexedDB can be used.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function isIndexedDBAvailable(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Downloading Blob Data in Firebase Storage (TypeScript)\nDESCRIPTION: Downloads the data at the object's location as a Blob. Requires whitelisting the app's origin in the Cloud Storage bucket. Not available in Node.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getBlob(ref: StorageReference, maxDownloadSizeBytes?: number): Promise<Blob>;\n```\n\n----------------------------------------\n\nTITLE: Listing All Items in Firebase Storage (TypeScript)\nDESCRIPTION: Lists all items (files) and prefixes (folders) under the storage reference. This is a helper method that calls list() repeatedly until there are no more results.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function listAll(ref: StorageReference): Promise<ListResult>;\n```\n\n----------------------------------------\n\nTITLE: Logging Purchase/Refund Events in Firebase Analytics\nDESCRIPTION: TypeScript declaration for logging purchase or refund events with transaction-related parameters including value, currency, transaction ID, tax, shipping, items, coupon, and affiliation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'purchase' | 'refund', eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    transaction_id: EventParams['transaction_id'];\n    tax?: EventParams['tax'];\n    shipping?: EventParams['shipping'];\n    items?: EventParams['items'];\n    coupon?: EventParams['coupon'];\n    affiliation?: EventParams['affiliation'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Setting Device Language in Firebase Auth\nDESCRIPTION: Sets the authentication language to match the default device or browser preference. Returns void and takes no parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.auth.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nuseDeviceLanguage(): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Authentication Classes\nDESCRIPTION: Class implementations for email-based authentication including EmailAuthCredential and EmailAuthProvider with associated methods.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/auth.api.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class EmailAuthProvider implements AuthProvider {\n    static credential(email: string, password: string): EmailAuthCredential;\n    static credentialWithLink(email: string, emailLink: string): EmailAuthCredential;\n    static readonly EMAIL_LINK_SIGN_IN_METHOD: 'emailLink';\n    static readonly EMAIL_PASSWORD_SIGN_IN_METHOD: 'password';\n    static readonly PROVIDER_ID: 'password';\n    readonly providerId: \"password\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query Constraint Functions in TypeScript\nDESCRIPTION: Type definitions for Firestore query constraint functions including limit, limitToLast, and orderBy operations. These functions help construct database queries with specific filtering and ordering criteria.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore-lite.api.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function limit(limit: number): QueryLimitConstraint;\n\nexport function limitToLast(limit: number): QueryLimitConstraint;\n\nexport function orderBy(fieldPath: string | FieldPath, directionStr?: OrderByDirection): QueryOrderByConstraint;\n```\n\n----------------------------------------\n\nTITLE: Defining Firestore Query Functions\nDESCRIPTION: Collection of TypeScript function signatures for various Firestore query operations including getting documents, counts, and aggregate queries.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore.api.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getAggregateFromServer<AggregateSpecType extends AggregateSpec, AppModelType, DbModelType extends DocumentData>(query: Query<AppModelType, DbModelType>, aggregateSpec: AggregateSpecType): Promise<AggregateQuerySnapshot<AggregateSpecType, AppModelType, DbModelType>>;\n\nexport function getCountFromServer<AppModelType, DbModelType extends DocumentData>(query: Query<AppModelType, DbModelType>): Promise<AggregateQuerySnapshot<{\n    count: AggregateField<number>;\n}, AppModelType, DbModelType>>;\n```\n\n----------------------------------------\n\nTITLE: Defining OnDisconnect Class in TypeScript\nDESCRIPTION: TypeScript declaration for the OnDisconnect class, which is used to write or clear data when a client disconnects from the Firebase Realtime Database.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.ondisconnect.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class OnDisconnect \n```\n\n----------------------------------------\n\nTITLE: Declaring signInWithEmailAndPassword Function in TypeScript\nDESCRIPTION: Function signature for asynchronously signing in a user with email and password authentication. Returns a Promise resolving to a UserCredential object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function signInWithEmailAndPassword(auth: Auth, email: string, password: string): Promise<UserCredential>;\n```\n\n----------------------------------------\n\nTITLE: Getting Firebase Performance Instance in TypeScript\nDESCRIPTION: This function returns a FirebasePerformance instance for a given Firebase app. It can be called multiple times and does not require initialization settings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/performance.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getPerformance(app?: FirebaseApp): FirebasePerformance;\n```\n\n----------------------------------------\n\nTITLE: Defining ActionCodeInfo Interface in TypeScript\nDESCRIPTION: Base interface definition for ActionCodeInfo that represents the response structure from checkActionCode() operations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.actioncodeinfo.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ActionCodeInfo \n```\n\n----------------------------------------\n\nTITLE: Constructing Schema Instance in TypeScript\nDESCRIPTION: Constructor for the Schema class that takes SchemaInterface parameters. This is used to create new instances of specific schema types.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.schema.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(schemaParams: SchemaInterface);\n```\n\n----------------------------------------\n\nTITLE: Defining Firebase Auth Core Interfaces\nDESCRIPTION: Core interface definitions for Firebase Authentication including AuthProvider, AuthSettings, and Config types.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/auth.api.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AuthProvider {\n    readonly providerId: string;\n}\n\nexport interface AuthSettings {\n    appVerificationDisabledForTesting: boolean;\n}\n\nexport interface Config {\n    apiHost: string;\n    apiKey: string;\n    apiScheme: string;\n    authDomain?: string;\n    sdkClientVersion: string;\n    tokenApiHost: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring 'app' Property for Database Class in TypeScript\nDESCRIPTION: This snippet declares the 'app' property for the Database class. It is a readonly property of type FirebaseApp, representing the associated Firebase application instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.database.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly app: FirebaseApp;\n```\n\n----------------------------------------\n\nTITLE: Registering Token Change Observer in App Check\nDESCRIPTION: Registers a PartialObserver listener to monitor changes in the token state. Multiple listeners can be registered across App Check instances, with callbacks executing on the UI thread when tokens change.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onTokenChanged(appCheckInstance: AppCheck, observer: PartialObserver<AppCheckTokenResult>): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Query Constraint Functions in Firestore\nDESCRIPTION: Functions for creating query constraints that modify result sets based on document positions. These methods create constraints to define where queries should start and end relative to specific documents.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nendAt(snapshot)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nendBefore(snapshot)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nstartAfter(snapshot)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nstartAt(snapshot)\n```\n\n----------------------------------------\n\nTITLE: ActionCodeOperation Enum Definition in TypeScript\nDESCRIPTION: An enumeration of possible email action types used in Firebase Authentication for actions like email sign-in, password reset, email verification, and other email-related operations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nActionCodeOperation: {\n    readonly EMAIL_SIGNIN: \"EMAIL_SIGNIN\";\n    readonly PASSWORD_RESET: \"PASSWORD_RESET\";\n    readonly RECOVER_EMAIL: \"RECOVER_EMAIL\";\n    readonly REVERT_SECOND_FACTOR_ADDITION: \"REVERT_SECOND_FACTOR_ADDITION\";\n    readonly VERIFY_AND_CHANGE_EMAIL: \"VERIFY_AND_CHANGE_EMAIL\";\n    readonly VERIFY_EMAIL: \"VERIFY_EMAIL\";\n}\n```\n\n----------------------------------------\n\nTITLE: Linking OAuth Provider with Redirect in Firebase Authentication\nDESCRIPTION: Example showing how to link a Facebook authentication provider to a user account using redirect flow. This method causes a full page redirect and requires handling the result after returning from the redirect.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// Sign in using some other provider.\nconst result = await signInWithEmailAndPassword(auth, email, password);\n// Link using a redirect.\nconst provider = new FacebookAuthProvider();\nawait linkWithRedirect(result.user, provider);\n// This will trigger a full page redirect away from your app\n\n// After returning from the redirect when your app initializes you can obtain the result\nconst result = await getRedirectResult(auth);\n```\n\n----------------------------------------\n\nTITLE: Document Path Getter\nDESCRIPTION: Getter method for retrieving the full path of the document in the database.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.documentreference.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nget path(): string;\n```\n\n----------------------------------------\n\nTITLE: Declaring FieldPath Class in TypeScript\nDESCRIPTION: TypeScript class declaration for the FieldPath class that represents a path to a field in a Firestore document.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.fieldpath.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class FieldPath \n```\n\n----------------------------------------\n\nTITLE: Verifying Password Reset Code in Firebase Auth\nDESCRIPTION: TypeScript function signature for verifying a password reset code sent to user via email.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function verifyPasswordResetCode(auth: Auth, code: string): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase in Node.js\nDESCRIPTION: Examples of how to import Firebase modules in Node.js using CommonJS and ES6 module syntax.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/README.md#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { initializeApp } = require('firebase/app');\nconst { getFirestore, collection, getDocs } = require('firebase/firestore');\n// ...\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, getDocs } from 'firebase/firestore';\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining Settings Interface for Cloud Firestore in TypeScript\nDESCRIPTION: This code snippet defines the Settings interface for Cloud Firestore. It specifies the structure for custom configurations including the hostname, SSL usage, and handling of undefined properties during object serialization.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.settings.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface Settings \n{\n  host?: string;\n  ignoreUndefinedProperties?: boolean;\n  ssl?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Set Method Signatures\nDESCRIPTION: Method signatures for writing data to a document, with options for merge behavior when the document exists.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.transaction.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nset<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, data: WithFieldValue<AppModelType>): this;\n\nset<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, data: PartialWithFieldValue<AppModelType>, options: SetOptions): this;\n```\n\n----------------------------------------\n\nTITLE: StorageReference Interface Definition in TypeScript\nDESCRIPTION: Defines the core StorageReference interface for Firebase Storage, which represents a reference to a Google Cloud Storage object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.storagereference.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StorageReference \n```\n\n----------------------------------------\n\nTITLE: GeoPoint Constructor Signature in TypeScript\nDESCRIPTION: Defines the constructor for the GeoPoint class, taking latitude and longitude as parameters. The latitude must be between -90 and 90, and longitude between -180 and 180.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.geopoint.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(latitude: number, longitude: number);\n```\n\n----------------------------------------\n\nTITLE: Defining ImagenAspectRatio Enum in TypeScript\nDESCRIPTION: Preview API enum for specifying aspect ratios for Imagen image generation, including square, landscape, and portrait options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum ImagenAspectRatio\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionsError Class in TypeScript\nDESCRIPTION: Class declaration for FunctionsError that extends FirebaseError, providing structured error handling for Firebase Functions. The class includes a constructor for creating error instances with error codes, messages, and additional details.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.functionserror.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class FunctionsError extends FirebaseError \n```\n\n----------------------------------------\n\nTITLE: QuerySnapshot empty Property Getter\nDESCRIPTION: Getter method that returns a boolean indicating whether there are any documents in the QuerySnapshot.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.querysnapshot.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget empty(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining UserInfo Interface in TypeScript\nDESCRIPTION: This snippet defines the UserInfo interface with readonly properties for user profile information. It includes the user's display name, email, phone number, photo URL, provider ID, and unique user ID.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.userinfo.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UserInfo \n{\n  readonly displayName: string | null;\n  readonly email: string | null;\n  readonly phoneNumber: string | null;\n  readonly photoURL: string | null;\n  readonly providerId: string;\n  readonly uid: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Function Declaration for reauthenticateWithCredential Method\nDESCRIPTION: TypeScript declaration for the reauthenticateWithCredential function that re-authenticates a user with a fresh credential. Used before sensitive operations that require recent authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function reauthenticateWithCredential(user: User, credential: AuthCredential): Promise<UserCredential>;\n```\n\n----------------------------------------\n\nTITLE: EmailAuthProvider Class Definition\nDESCRIPTION: TypeScript class definition for EmailAuthProvider that implements the AuthProvider interface\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.emailauthprovider.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class EmailAuthProvider implements AuthProvider\n```\n\n----------------------------------------\n\nTITLE: Removing Data on Disconnect in TypeScript\nDESCRIPTION: Method signature for ensuring data at a specific location is deleted when the client disconnects from the Firebase Realtime Database.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.ondisconnect.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nremove(): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Logging Promotion Events in Firebase Analytics\nDESCRIPTION: TypeScript declaration for logging promotion selection and view events with items, promotion ID, and promotion name parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'select_promotion' | 'view_promotion', eventParams?: {\n    items?: EventParams['items'];\n    promotion_id?: EventParams['promotion_id'];\n    promotion_name?: EventParams['promotion_name'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Firestore Class Properties in TypeScript\nDESCRIPTION: This snippet shows the properties of the Firestore class. It includes 'app' which is the associated FirebaseApp instance, and 'type' which indicates whether it's a Firestore or Firestore Lite instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.firestore.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget app(): FirebaseApp;\ntype: 'firestore-lite' | 'firestore';\n```\n\n----------------------------------------\n\nTITLE: Logging Add Shipping Info Event in Firebase Analytics\nDESCRIPTION: This function logs an 'add_shipping_info' event in Firebase Analytics. It takes parameters for the analytics instance, event name, event parameters (including optional coupon, currency, items, shipping tier, and value), and analytics call options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'add_shipping_info', eventParams?: { coupon?: EventParams['coupon']; currency?: EventParams['currency']; items?: EventParams['items']; shipping_tier?: EventParams['shipping_tier']; value?: EventParams['value']; [key: string]: any; }, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Defining EventType for Firebase Realtime Database (TypeScript)\nDESCRIPTION: Defines the possible event types for Firebase Realtime Database listeners, including 'value', 'child_added', 'child_changed', 'child_removed', and 'child_moved'.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type EventType = 'value' | 'child_added' | 'child_changed' | 'child_moved' | 'child_removed';\n```\n\n----------------------------------------\n\nTITLE: AggregateField Instance Identifier Property\nDESCRIPTION: Read-only type property that serves as a unique identifier for instances of the AggregateField class.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.aggregatefield.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type = \"AggregateField\";\n```\n\n----------------------------------------\n\nTITLE: Creating Generative Model in JavaScript\nDESCRIPTION: Returns a GenerativeModel class with methods for inference and other functionality. This is used to interact with generative AI models.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetGenerativeModel(vertexAI, modelParams, requestOptions)\n```\n\n----------------------------------------\n\nTITLE: Implementing data() Method for QueryDocumentSnapshot in TypeScript\nDESCRIPTION: Definition of the data() method for QueryDocumentSnapshot. This method retrieves all fields in the document as an Object, with options for handling server timestamps.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.querydocumentsnapshot.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/** @override */\ndata(options?: SnapshotOptions): AppModelType;\n```\n\n----------------------------------------\n\nTITLE: ApplicationVerifier Interface Definition in TypeScript\nDESCRIPTION: The TypeScript interface definition for ApplicationVerifier which is used for domain verification and abuse prevention. Currently, only RecaptchaVerifier implements this interface.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.applicationverifier.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ApplicationVerifier \n```\n\n----------------------------------------\n\nTITLE: Defining ImagenGenerationConfig Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for configuring Imagen image generation parameters including watermarking, aspect ratio, image format, negative prompts, and number of images to generate.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagengenerationconfig.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ImagenGenerationConfig \n```\n\n----------------------------------------\n\nTITLE: Activating Fetched Config in TypeScript\nDESCRIPTION: Makes the last fetched config available to the getters. Returns a Promise that resolves to a boolean indicating if new config was activated.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.md#2025-04-14_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport declare function activate(remoteConfig: RemoteConfig): Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Declaring FirestoreError Properties in TypeScript\nDESCRIPTION: This snippet declares the properties of the FirestoreError class, including the error code, message, and stack trace. The code property is of type FirestoreErrorCode, while message and stack are strings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestoreerror.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly code: FirestoreErrorCode;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly message: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly stack?: string;\n```\n\n----------------------------------------\n\nTITLE: provider Property Type Definition in TypeScript\nDESCRIPTION: Defines the required provider property that accepts a CustomProvider, ReCaptchaV3Provider, or ReCaptchaEnterpriseProvider instance for App Check verification.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.appcheckoptions.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nprovider: CustomProvider | ReCaptchaV3Provider | ReCaptchaEnterpriseProvider;\n```\n\n----------------------------------------\n\nTITLE: Defining FetchResponse Interface in TypeScript\nDESCRIPTION: Core interface definition for handling Firebase Remote Config fetch responses with support for config data, ETag, and status code.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.fetchresponse.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FetchResponse \n```\n\n----------------------------------------\n\nTITLE: Defining FirebaseOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the FirebaseOptions interface, which contains properties for configuring a Firebase application. It includes fields for API key, app ID, auth domain, database URL, measurement ID, messaging sender ID, project ID, and storage bucket.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FirebaseOptions \n{\n  apiKey?: string;\n  appId?: string;\n  authDomain?: string;\n  databaseURL?: string;\n  measurementId?: string;\n  messagingSenderId?: string;\n  projectId?: string;\n  storageBucket?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ImagenModel Class in TypeScript\nDESCRIPTION: Defines a class for the Imagen model, extending VertexAIModel, with methods for generating images and configuration options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @beta\nexport class ImagenModel extends VertexAIModel {\n    constructor(vertexAI: VertexAI, modelParams: ImagenModelParams, requestOptions?: RequestOptions | undefined);\n    generateImages(prompt: string): Promise<ImagenGenerationResponse<ImagenInlineImage>>;\n    // @internal\n    generateImagesGCS(prompt: string, gcsURI: string): Promise<ImagenGenerationResponse<ImagenGCSImage>>;\n    generationConfig?: ImagenGenerationConfig;\n    // (undocumented)\n    requestOptions?: RequestOptions | undefined;\n    safetySettings?: ImagenSafetySettings;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Auth State Change Listener in TypeScript\nDESCRIPTION: Function signature for adding an observer to monitor changes in the user's sign-in state. Returns an Unsubscribe function to remove the listener.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onAuthStateChanged(auth: Auth, nextOrObserver: NextOrObserver<User>, error?: ErrorFn, completed?: CompleteFn): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Running Firestore Tests for Firebase JS SDK\nDESCRIPTION: Commands for running various Firestore tests including updating dependencies, running browser and node tests, debugging, and running tests against both emulator and production backends.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Come up to date on dependencies after performing git pull\n(cd ../../; yarn && yarn build)\n\n# Run all tests once (browser and node)\nyarn test\n\n# Run all browser tests once (unit and integration)\nyarn test:browser\n\n# Debug browser tests in Chrome and keep the browser open (and watch for file\n# changes).\nyarn test:browser:debug\n\n# Run only the browser unit or integration tests\nyarn test:browser --unit\nyarn test:browser --integration\n\n# Run browser integration tests against a Firestore server running on\n# localhost:8080.\nyarn test:browser:emulator --integration\n\n# Run all node tests once (unit and integration) against the emulator.\nyarn test:node\n\n# Run a subset of tests whose names match a filter.\nyarn test:browser --grep 'SortedSet keeps elements in the right order'\nyarn test:node --grep 'SortedSet keeps elements in the right order'\n\n# Run tests against the production backend.\nyarn test:node:prod\nyarn test:node:persistence:prod\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectSchema Class in TypeScript\nDESCRIPTION: Defines a class for object schema, extending the Schema class and including properties and optional properties.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class ObjectSchema extends Schema {\n    constructor(schemaParams: SchemaParams, properties: {\n        [k: string]: TypedSchema;\n    }, optionalProperties?: string[]);\n    // (undocumented)\n    optionalProperties: string[];\n    // (undocumented)\n    properties: {\n        [k: string]: TypedSchema;\n    };\n    // @internal (undocumented)\n    toJSON(): SchemaRequest;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Document Data in WriteBatch (TypeScript)\nDESCRIPTION: Method signature for setting document data in a WriteBatch. Takes a DocumentReference and data object as parameters. Returns the WriteBatch instance for chaining.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.writebatch.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nset<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, data: WithFieldValue<AppModelType>): WriteBatch;\n```\n\n----------------------------------------\n\nTITLE: Defining FieldValue Abstract Class in TypeScript\nDESCRIPTION: Abstract class definition for FieldValue that provides sentinel values for Firestore document operations like set() and update().\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.fieldvalue.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class FieldValue\n```\n\n----------------------------------------\n\nTITLE: Function Declaration for linkWithRedirect Method\nDESCRIPTION: TypeScript declaration for the linkWithRedirect function, which links an OAuthProvider to a user account using a full-page redirect flow. The method requires a User object, an AuthProvider, and optionally a PopupRedirectResolver.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function linkWithRedirect(user: User, provider: AuthProvider, resolver?: PopupRedirectResolver): Promise<never>;\n```\n\n----------------------------------------\n\nTITLE: Logging Item Selection Events in Firebase Analytics\nDESCRIPTION: TypeScript declaration for logging item selection events with items, item list name, and item list ID parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'select_item', eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: ActionCodeURL Method - Parse Link\nDESCRIPTION: Static method that parses an email action link string and returns an ActionCodeURL instance if valid, otherwise returns null.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.actioncodeurl.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nstatic parseLink(link: string): ActionCodeURL | null;\n```\n\n----------------------------------------\n\nTITLE: MultiFactorUser Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for MultiFactorUser that specifies the contract for multi-factor authentication operations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.multifactoruser.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MultiFactorUser \n```\n\n----------------------------------------\n\nTITLE: Defining AuthError Interface in TypeScript for Firebase Authentication\nDESCRIPTION: This code snippet defines the AuthError interface, which extends FirebaseError. It includes a customData property with details about the Firebase Auth error, such as appName, email, phoneNumber, and tenantId.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.autherror.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AuthError extends FirebaseError {\n    readonly customData: {\n        readonly appName: string;\n        readonly email?: string;\n        readonly phoneNumber?: string;\n        readonly tenantId?: string;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Share Event in Firebase Analytics\nDESCRIPTION: This function logs a 'share' event in Firebase Analytics. It accepts parameters for the analytics instance, event name, event parameters (including optional method, content type, and item ID), and analytics call options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'share', eventParams?: { method?: EventParams['method']; content_type?: EventParams['content_type']; item_id?: EventParams['item_id']; [key: string]: any; }, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Defining CountTokensResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the CountTokensResponse interface, which includes properties for total tokens, total billable characters, and a breakdown of prompt tokens by modality.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.counttokensresponse.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CountTokensResponse \n{\n  promptTokensDetails?: ModalityTokenCount[];\n  totalBillableCharacters?: number;\n  totalTokens: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing IndexedDB Operations in Firestore\nDESCRIPTION: Implements performance improvements for IndexedDB operations on supported browsers, including using transaction.commit() and IndexedDB.getAll().\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntransaction.commit();\nIndexedDB.getAll();\n```\n\n----------------------------------------\n\nTITLE: Creating QueryLimitConstraint for Last Documents in TypeScript\nDESCRIPTION: Creates a QueryLimitConstraint that only returns the last matching documents. At least one orderBy clause must be specified.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function limitToLast(limit: number): QueryLimitConstraint;\n```\n\n----------------------------------------\n\nTITLE: Defining the AuthCredential Class in TypeScript for Firebase Authentication\nDESCRIPTION: This code declares the AuthCredential class which represents credentials returned by an AuthProvider. It's used as an interface for various authentication provider implementations in Firebase.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.authcredential.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class AuthCredential \n```\n\n----------------------------------------\n\nTITLE: Getting Subcollection Reference from Document in Firestore (TypeScript)\nDESCRIPTION: Retrieves a CollectionReference instance referring to a subcollection of a given DocumentReference at a specified relative path. Throws an exception if the final path doesn't point to a collection.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function collection<AppModelType, DbModelType extends DocumentData>(reference: DocumentReference<AppModelType, DbModelType>, path: string, ...pathSegments: string[]): CollectionReference<DocumentData, DocumentData>;\n```\n\n----------------------------------------\n\nTITLE: Implementing RecaptchaVerifier Class in TypeScript\nDESCRIPTION: This class implements the ApplicationVerifierInternal interface and provides methods for reCAPTCHA verification, including rendering and clearing the reCAPTCHA.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/auth.api.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport class RecaptchaVerifier implements ApplicationVerifierInternal {\n    constructor(authExtern: Auth, containerOrId: HTMLElement | string, parameters?: RecaptchaParameters);\n    clear(): void;\n    // Warning: (ae-forgotten-export) The symbol \"ReCaptchaLoader\" needs to be exported by the entry point index.d.ts\n    //\n    // @internal (undocumented)\n    readonly _recaptchaLoader: ReCaptchaLoader;\n    render(): Promise<number>;\n    // @internal (undocumented)\n    _reset(): void;\n    readonly type = \"recaptcha\";\n    verify(): Promise<string>;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Query Start After Constraint with Document Snapshot in Firestore Lite\nDESCRIPTION: Creates a QueryStartAtConstraint that modifies query results to start after the provided document (exclusive). The document must contain all fields specified in the query's orderBy clause.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function startAfter<AppModelType, DbModelType extends DocumentData>(snapshot: DocumentSnapshot<AppModelType, DbModelType>): QueryStartAtConstraint;\n```\n\n----------------------------------------\n\nTITLE: Firebase Storage List API Support\nDESCRIPTION: Added support for the List API functionality in Firebase Storage.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/storage/CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nList API\n```\n\n----------------------------------------\n\nTITLE: Defining WriteBatch Class in TypeScript\nDESCRIPTION: Class declaration for WriteBatch that provides atomic write operations in Firestore\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.writebatch.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class WriteBatch\n```\n\n----------------------------------------\n\nTITLE: Handling Multi-Factor Authentication Flow in JavaScript\nDESCRIPTION: Comprehensive example of handling a multi-factor authentication flow, including initial sign-in attempt, error handling, selecting a second factor, verifying phone number, and resolving the sign-in.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.multifactorresolver.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet resolver;\nlet multiFactorHints;\n\nsignInWithEmailAndPassword(auth, email, password)\n    .then((result) => {\n      // User signed in. No 2nd factor challenge is needed.\n    })\n    .catch((error) => {\n      if (error.code == 'auth/multi-factor-auth-required') {\n        resolver = getMultiFactorResolver(auth, error);\n        // Show UI to let user select second factor.\n        multiFactorHints = resolver.hints;\n      } else {\n        // Handle other errors.\n      }\n    });\n\n// The enrolled second factors that can be used to complete\n// sign-in are returned in the `MultiFactorResolver.hints` list.\n// UI needs to be presented to allow the user to select a second factor\n// from that list.\n\nconst selectedHint = // ; selected from multiFactorHints\nconst phoneAuthProvider = new PhoneAuthProvider(auth);\nconst phoneInfoOptions = {\n  multiFactorHint: selectedHint,\n  session: resolver.session\n};\nconst verificationId = phoneAuthProvider.verifyPhoneNumber(phoneInfoOptions, appVerifier);\n// Store `verificationId` and show UI to let user enter verification code.\n\n// UI to enter verification code and continue.\n// Continue button click handler\nconst phoneAuthCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\nconst multiFactorAssertion = PhoneMultiFactorGenerator.assertion(phoneAuthCredential);\nconst userCredential = await resolver.resolveSignIn(multiFactorAssertion);\n```\n\n----------------------------------------\n\nTITLE: Setting Tenant ID and Signing In with Email/Password in JavaScript\nDESCRIPTION: Example of setting a tenant ID on the Auth instance and signing in a user with email and password, demonstrating the use of the tenantId property.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.user.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the tenant ID on Auth instance.\nauth.tenantId = 'TENANT_PROJECT_ID';\n\n// All future sign-in request now include tenant ID.\nconst result = await signInWithEmailAndPassword(auth, email, password);\n// result.user.tenantId should be 'TENANT_PROJECT_ID'.\n```\n\n----------------------------------------\n\nTITLE: Implementing Value-based Ordering in Firebase Database\nDESCRIPTION: Creates a QueryConstraint that orders results by their scalar values in ascending order. Works with string, number, or boolean values.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function orderByValue(): QueryConstraint;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Aggregation Results in AggregateQuerySnapshot\nDESCRIPTION: Definition of the 'data()' method, which returns the results of the aggregations performed over the underlying query. The returned object's keys correspond to the AggregateSpec object, and values are the aggregation results.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.aggregatequerysnapshot.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndata(): AggregateSpecData<AggregateSpecType>;\n```\n\n----------------------------------------\n\nTITLE: Transaction Set Method Signatures\nDESCRIPTION: Method signatures for writing data to a document within a transaction, with optional merge behavior.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.transaction.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nset<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, data: WithFieldValue<AppModelType>): this;\n\nset<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, data: PartialWithFieldValue<AppModelType>, options: SetOptions): this;\n```\n\n----------------------------------------\n\nTITLE: Implementing PhoneAuthCredential Class in TypeScript\nDESCRIPTION: This class extends AuthCredential and provides methods for handling phone authentication, including token responses and verification requests.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/auth.api.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport class PhoneAuthCredential extends AuthCredential {\n    static fromJSON(json: object | string): PhoneAuthCredential | null;\n    // @internal (undocumented)\n    static _fromTokenResponse(phoneNumber: string, temporaryProof: string): PhoneAuthCredential;\n    // @internal (undocumented)\n    static _fromVerification(verificationId: string, verificationCode: string): PhoneAuthCredential;\n    // @internal (undocumented)\n    _getIdTokenResponse(auth: AuthInternal): Promise<PhoneOrOauthTokenResponse>;\n    // @internal (undocumented)\n    _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse>;\n    // @internal (undocumented)\n    _linkToIdToken(auth: AuthInternal, idToken: string): Promise<IdTokenResponse>;\n    // Warning: (ae-forgotten-export) The symbol \"SignInWithPhoneNumberRequest\" needs to be exported by the entry point index.d.ts\n    //\n    // @internal (undocumented)\n    _makeVerificationRequest(): SignInWithPhoneNumberRequest;\n    toJSON(): object;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VertexAIModel Abstract Class in TypeScript\nDESCRIPTION: Declares the abstract base class for Vertex AI model functionality in Firebase. This class provides core model handling capabilities and is not meant to be instantiated directly.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.vertexaimodel.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class VertexAIModel\n```\n\n----------------------------------------\n\nTITLE: Declaring GeoPoint Class in TypeScript\nDESCRIPTION: Defines the GeoPoint class representing a geographic location with latitude and longitude. It includes a constructor, properties for latitude and longitude, and methods for equality comparison and JSON serialization.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.geopoint.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class GeoPoint \n```\n\n----------------------------------------\n\nTITLE: QuerySnapshot Size Getter\nDESCRIPTION: Getter method that returns the number of documents in the QuerySnapshot.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.querysnapshot.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nget size(): number;\n```\n\n----------------------------------------\n\nTITLE: Constructing StorageError in TypeScript\nDESCRIPTION: Constructor for the StorageError class. It takes a StorageErrorCode, a message string, and an optional HTTP status code as parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.storageerror.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(code: StorageErrorCode, message: string, status_?: number);\n```\n\n----------------------------------------\n\nTITLE: Using startAfter Query Constraint in Firebase Realtime Database\nDESCRIPTION: Creates a QueryConstraint with a specified exclusive starting point. Children with values greater than the specified value will be included in the query.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nstartAfter(value, key)\n```\n\n----------------------------------------\n\nTITLE: Fetching Remote Config in TypeScript\nDESCRIPTION: Fetches and caches configuration from the Remote Config service. Returns a Promise that resolves when fetching is complete.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.md#2025-04-14_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport declare function fetchConfig(remoteConfig: RemoteConfig): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Firebase onDisconnect Handler\nDESCRIPTION: Function to create an OnDisconnect object for handling offline capabilities and cleanup when client disconnects.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onDisconnect(ref: DatabaseReference): OnDisconnect;\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Values on Disconnect in TypeScript\nDESCRIPTION: Method signature for updating multiple values at a location when the client disconnects from the Firebase Realtime Database. Allows selective updates of referenced properties.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.ondisconnect.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nupdate(values: object): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Signing Out User in Firebase Auth\nDESCRIPTION: TypeScript function signature for signing out the current authenticated user from Firebase.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function signOut(auth: Auth): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Updating Firebase Import Syntax in JavaScript\nDESCRIPTION: Changes the import syntax for Firebase from namespace import to default import. This update is due to the browser field now pointing to the ESM build.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/database/CHANGELOG.md#2025-04-14_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Before this change\nimport * as firebase from 'firebase/app';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// After this change\nimport firebase from 'firebase/app';\n```\n\n----------------------------------------\n\nTITLE: Defining ModelParams Interface in TypeScript\nDESCRIPTION: Defines an interface for model parameters, extending BaseParams and including model name, system instruction, and tool configuration.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ModelParams extends BaseParams {\n    // (undocumented)\n    model: string;\n    // (undocumented)\n    systemInstruction?: string | Part | Content;\n    // (undocumented)\n    toolConfig?: ToolConfig;\n    // (undocumented)\n    tools?: Tool[];\n}\n```\n\n----------------------------------------\n\nTITLE: Generating PhoneAuthCredential from JSON\nDESCRIPTION: Static method signature for creating a PhoneAuthCredential instance from either a JSON object or string. Returns null if conversion fails.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phoneauthcredential.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic fromJSON(json: object | string): PhoneAuthCredential | null;\n```\n\n----------------------------------------\n\nTITLE: QueryConstraint Class Definition in TypeScript\nDESCRIPTION: Abstract class definition for QueryConstraint which is used to narrow database query results. Contains a type property that specifies the constraint type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.queryconstraint.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class QueryConstraint \n```\n\n----------------------------------------\n\nTITLE: Defining DocumentReference Class in TypeScript\nDESCRIPTION: Declaration of the DocumentReference class with generic types for application and database models. This class represents a reference to a document in Firestore and provides methods for interacting with the document.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.documentreference.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class DocumentReference<AppModelType = DocumentData, DbModelType extends DocumentData = DocumentData>\n```\n\n----------------------------------------\n\nTITLE: Connect to Functions Emulator\nDESCRIPTION: Configures a Functions instance to communicate with the local Cloud Functions emulator. Must be called before any other operations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function connectFunctionsEmulator(functionsInstance: Functions, host: string, port: number): void;\n```\n\n----------------------------------------\n\nTITLE: Function Declaration for multiFactor Method\nDESCRIPTION: TypeScript declaration for the multiFactor function that returns a MultiFactorUser object for a given User. This function is used to access multi-factor properties and operations related to the user.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function multiFactor(user: User): MultiFactorUser;\n```\n\n----------------------------------------\n\nTITLE: Check Action Code Function Declaration (TypeScript)\nDESCRIPTION: Function signature for checkActionCode() that validates a verification code sent to users.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function checkActionCode(auth: Auth, oobCode: string): Promise<ActionCodeInfo>;\n```\n\n----------------------------------------\n\nTITLE: Implementing QR Code URL Generation Method\nDESCRIPTION: Method implementation for generating QR code URLs compatible with authenticator apps. Takes optional accountName and issuer parameters to customize the QR code content.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.totpsecret.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateQrCodeUrl(accountName?: string, issuer?: string): string;\n```\n\n----------------------------------------\n\nTITLE: Logging Checkout Events in Firebase Analytics\nDESCRIPTION: Type declaration for logging begin_checkout events with support for currency, coupon, value and items parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'begin_checkout', eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Declaring EmailAuthCredential Class in Firebase Authentication SDK\nDESCRIPTION: Class declaration for EmailAuthCredential which extends AuthCredential and represents credentials for email/password and email link authentication methods.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.emailauthcredential.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class EmailAuthCredential extends AuthCredential \n```\n\n----------------------------------------\n\nTITLE: Detecting Node.js SDK Environment in TypeScript\nDESCRIPTION: This function checks if the code is running in a Node.js SDK environment. It returns a boolean indicating the result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function isNodeSdk(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining FirebaseAppSettings Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Firebase application settings that can be provided to initializeApp(). This interface includes optional properties for customizing the app name and controlling automatic data collection.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseappsettings.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FirebaseAppSettings \n```\n\n----------------------------------------\n\nTITLE: Query Constraint - equalTo()\nDESCRIPTION: Creates a QueryConstraint that matches children with specified value. Used for filtering data to exact matches.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function equalTo(value: number | string | boolean | null, key?: string): QueryConstraint;\n```\n\n----------------------------------------\n\nTITLE: Initializing reCAPTCHA Config in TypeScript\nDESCRIPTION: Function signature for loading the reCAPTCHA configuration into the Auth instance. This reduces latency for future auth flows that require reCAPTCHA verification.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function initializeRecaptchaConfig(auth: Auth): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Value\nDESCRIPTION: Function declaration for creating a new VectorValue from an array of numbers. The function creates a copy of the provided array.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function vector(values?: number[]): VectorValue;\n```\n\n----------------------------------------\n\nTITLE: Adding mockUserToken Support for Firestore in JavaScript\nDESCRIPTION: Adds support for mockUserToken in Firestore, allowing mocking of user authentication tokens for testing purposes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/CHANGELOG.md#2025-04-14_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nFirestore.mockUserToken()\n```\n\n----------------------------------------\n\nTITLE: Implementing WriteBatch Delete Method\nDESCRIPTION: Method to delete a document specified by DocumentReference in the write batch\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.writebatch.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndelete<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>): WriteBatch;\n```\n\n----------------------------------------\n\nTITLE: QuerySnapshot Document Changes Method\nDESCRIPTION: Method that returns an array of document changes since the last snapshot, with options to control metadata-only changes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.querysnapshot.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndocChanges(options?: SnapshotListenOptions): Array<DocumentChange<AppModelType, DbModelType>>;\n```\n\n----------------------------------------\n\nTITLE: Setting Data on Disconnect in TypeScript\nDESCRIPTION: Method signature for setting data at a specific location when the client disconnects from the Firebase Realtime Database. Useful for implementing presence systems.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.ondisconnect.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nset(value: unknown): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Implementing CollectionReference Null Converter Method\nDESCRIPTION: Method signature for removing the current converter from a CollectionReference, returning to default DocumentData types.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.collectionreference.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwithConverter(converter: null): CollectionReference<DocumentData, DocumentData>;\n```\n\n----------------------------------------\n\nTITLE: Registering onChildMoved Listener with Firebase Database Query in TypeScript\nDESCRIPTION: Listens for changes in a child's sort order in a Firebase Database. This function triggers when a child's position changes relative to its siblings, passing a DataSnapshot of the moved child and the key of the previous sibling. Supports cancellation callback and listen options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onChildMoved(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, cancelCallback: (error: Error) => unknown, options: ListenOptions): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Defining PhoneMultiFactorEnrollInfoOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the PhoneMultiFactorEnrollInfoOptions interface, which includes properties for the phone number and MultiFactorSession used in enrolling a second factor for authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phonemultifactorenrollinfooptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PhoneMultiFactorEnrollInfoOptions {\n  phoneNumber: string;\n  session: MultiFactorSession;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Firestore Types and Functions in TypeScript\nDESCRIPTION: This snippet shows the import statements for various Firestore-related types and functions from different Firebase packages.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore.api.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EmulatorMockTokenOptions } from '@firebase/util';\nimport { FirebaseApp } from '@firebase/app';\nimport { FirebaseError } from '@firebase/util';\nimport { LogLevelString as LogLevel } from '@firebase/logger';\n```\n\n----------------------------------------\n\nTITLE: Declaring ChatSession Class - TypeScript\nDESCRIPTION: Base class declaration for ChatSession that provides chat functionality and message history management.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.chatsession.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class ChatSession\n```\n\n----------------------------------------\n\nTITLE: Retrieving Modular Instance in TypeScript\nDESCRIPTION: This function retrieves the modular instance of a Firebase service. It accepts either a compatible or expanded service instance and returns the expanded service.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function getModularInstance<ExpService>(service: Compat<ExpService> | ExpService): ExpService;\n```\n\n----------------------------------------\n\nTITLE: FirebaseApp.options Property Definition\nDESCRIPTION: TypeScript property definition for the read-only options property, which contains the configuration options used to initialize the app.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseapp.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly options: FirebaseOptions;\n```\n\n----------------------------------------\n\nTITLE: Initialize Cloud Functions Instance\nDESCRIPTION: Returns a Functions instance for a Firebase app with optional region or custom domain configuration.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getFunctions(app?: FirebaseApp, regionOrCustomDomain?: string): Functions;\n```\n\n----------------------------------------\n\nTITLE: Getting Subcollection Reference in Firestore (TypeScript)\nDESCRIPTION: Retrieves a CollectionReference instance referring to a subcollection of a given CollectionReference at a specified relative path. Throws an exception if the final path doesn't point to a collection.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function collection<AppModelType, DbModelType extends DocumentData>(reference: CollectionReference<AppModelType, DbModelType>, path: string, ...pathSegments: string[]): CollectionReference<DocumentData, DocumentData>;\n```\n\n----------------------------------------\n\nTITLE: Defining FirestoreSettings Interface in TypeScript\nDESCRIPTION: Main interface declaration for Firestore configuration settings that must be set before invoking other methods.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestoresettings.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface FirestoreSettings \n```\n\n----------------------------------------\n\nTITLE: Downloading Byte Data in Firebase Storage (TypeScript)\nDESCRIPTION: Downloads the data at the object's location as an ArrayBuffer. Requires whitelisting the app's origin in the Cloud Storage bucket.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getBytes(ref: StorageReference, maxDownloadSizeBytes?: number): Promise<ArrayBuffer>;\n```\n\n----------------------------------------\n\nTITLE: Removing ES5 Bundles and Updating Fetch Implementation\nDESCRIPTION: Removes ES5 bundles, setting the minimum required ES version to ES2017. Also replaces undici and node-fetch dependencies with the native fetch implementation in node bundles.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/storage/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example of using native fetch (pseudocode)\nasync function fetchData(url) {\n  const response = await fetch(url);\n  return response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: ToolConfig Interface Definition in TypeScript\nDESCRIPTION: Defines the ToolConfig interface which serves as a configuration structure for tools. This interface is designed to be shared across all tools provided in a request.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.toolconfig.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ToolConfig \n```\n\n----------------------------------------\n\nTITLE: Defining Document Access Functions\nDESCRIPTION: Function signatures for retrieving Firestore documents using different sources (cache, server) and access patterns.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore.api.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getDoc<AppModelType, DbModelType extends DocumentData>(reference: DocumentReference<AppModelType, DbModelType>): Promise<DocumentSnapshot<AppModelType, DbModelType>>;\n\nexport function getDocFromCache<AppModelType, DbModelType extends DocumentData>(reference: DocumentReference<AppModelType, DbModelType>): Promise<DocumentSnapshot<AppModelType, DbModelType>>;\n\nexport function getDocFromServer<AppModelType, DbModelType extends DocumentData>(reference: DocumentReference<AppModelType, DbModelType>): Promise<DocumentSnapshot<AppModelType, DbModelType>>;\n```\n\n----------------------------------------\n\nTITLE: Defining QueryLimitConstraint Class in TypeScript\nDESCRIPTION: This snippet defines the QueryLimitConstraint class, which extends QueryConstraint. It is used to create limit constraints for Firestore queries using limit() or limitToLast() methods.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.querylimitconstraint.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class QueryLimitConstraint extends QueryConstraint \n```\n\n----------------------------------------\n\nTITLE: Declaring QueryDocumentSnapshot Class in TypeScript\nDESCRIPTION: Class declaration for QueryDocumentSnapshot that extends DocumentSnapshot, providing type-safe access to document data. The class is generic, accepting AppModelType and DbModelType parameters for type customization.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.querydocumentsnapshot.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class QueryDocumentSnapshot<AppModelType = DocumentData, DbModelType extends DocumentData = DocumentData> extends DocumentSnapshot<AppModelType, DbModelType>\n```\n\n----------------------------------------\n\nTITLE: Ordering by Child Key in Firebase Database\nDESCRIPTION: Creates a QueryConstraint that orders results by a specified child key. Requires proper indexing in Security Rules for optimal performance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function orderByChild(path: string): QueryConstraint;\n```\n\n----------------------------------------\n\nTITLE: Defining QueryFieldFilterConstraint Class in TypeScript\nDESCRIPTION: This code snippet defines the QueryFieldFilterConstraint class, which extends QueryConstraint. It is used to create field-based filters for Firestore queries.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.queryfieldfilterconstraint.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class QueryFieldFilterConstraint extends QueryConstraint \n```\n\n----------------------------------------\n\nTITLE: Defining QueryFieldFilterConstraint Class in TypeScript\nDESCRIPTION: Class declaration for QueryFieldFilterConstraint that extends QueryConstraint. Used to filter Firestore queries based on document field values.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.queryfieldfilterconstraint.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class QueryFieldFilterConstraint extends QueryConstraint \n```\n\n----------------------------------------\n\nTITLE: Unlink Provider Function Signature in Firebase Auth\nDESCRIPTION: TypeScript signature for the unlink function that removes a provider from a user account. The function takes a User object and a providerId string, returning a Promise that resolves to the updated User object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function unlink(user: User, providerId: string): Promise<User>;\n```\n\n----------------------------------------\n\nTITLE: Deleting Document in WriteBatch (TypeScript)\nDESCRIPTION: Method signature for deleting a document in a WriteBatch. Takes a DocumentReference as parameter and returns the WriteBatch instance for chaining.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.writebatch.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndelete<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>): WriteBatch;\n```\n\n----------------------------------------\n\nTITLE: Firebase Realtime Database Emulator Usage\nDESCRIPTION: New method added to use the Realtime Database local emulator by specifying host and port.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/CHANGELOG.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nuseEmulator(host, port)\n```\n\n----------------------------------------\n\nTITLE: Using ImagenImageFormat in JavaScript\nDESCRIPTION: This example demonstrates how to use the ImagenImageFormat class to specify a JPEG image format with a compression level of 75 in the imagenModelParams object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagenimageformat.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst imagenModelParams = {\n  // ... other ImagenModelParams\n  imageFormat: ImagenImageFormat.jpeg(75) // JPEG with a compression level of 75.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Firestore Collection Reference in TypeScript\nDESCRIPTION: These overloaded functions create a collection reference in Firestore. They can be called with different parameters to create references from various starting points.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore.api.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function collection(firestore: Firestore, path: string, ...pathSegments: string[]): CollectionReference<DocumentData, DocumentData>;\n\nexport function collection<AppModelType, DbModelType extends DocumentData>(reference: CollectionReference<AppModelType, DbModelType>, path: string, ...pathSegments: string[]): CollectionReference<DocumentData, DocumentData>;\n\nexport function collection<AppModelType, DbModelType extends DocumentData>(reference: DocumentReference<AppModelType, DbModelType>, path: string, ...pathSegments: string[]): CollectionReference<DocumentData, DocumentData>;\n```\n\n----------------------------------------\n\nTITLE: Reference Type Declaration\nDESCRIPTION: Constant property defining the type of the Firestore reference as 'document'.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.documentreference.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type = \"document\";\n```\n\n----------------------------------------\n\nTITLE: Defining DataSnapshot Class in TypeScript\nDESCRIPTION: Declaration of the DataSnapshot class, which contains data from a Firebase Database location. It provides methods to access and traverse the snapshot data.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.datasnapshot.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class DataSnapshot \n```\n\n----------------------------------------\n\nTITLE: Retrieving Installation ID in TypeScript\nDESCRIPTION: Creates a Firebase Installation if there isn't one for the app and returns the Installation ID. This function is used to get a unique identifier for the installation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/installations.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getId(installations: Installations): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Cancelling OnDisconnect Events in TypeScript\nDESCRIPTION: Method signature for cancelling all previously queued onDisconnect() set or update events for this location and all children in the Firebase Realtime Database.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.ondisconnect.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncancel(): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Browser Cookie Persistence Implementation in TypeScript\nDESCRIPTION: A preview API implementation of the Persistence interface that uses cookies for storage. This implementation is intended for client-side applications that leverage hybrid rendering and middleware, requiring companion middleware like that provided by ReactFire for NextJS.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nbrowserCookiePersistence: Persistence\n```\n\n----------------------------------------\n\nTITLE: Firebase Storage Error Message Enhancement\nDESCRIPTION: Modified error handling to include backend response messages in error objects for better debugging.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/storage/CHANGELOG.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nFirebaseStorageError\n```\n\n----------------------------------------\n\nTITLE: Implementing fromFirestore Method\nDESCRIPTION: Method signature for converting Firestore data into application model objects. This method is called by the SDK when retrieving data from Firestore.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.firestoredataconverter.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfromFirestore(snapshot: QueryDocumentSnapshot<DocumentData, DocumentData>): AppModelType;\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Fields in WriteBatch (TypeScript)\nDESCRIPTION: Overloaded method signature for updating specific fields in a document using a WriteBatch. Allows updating nested fields using dot notation or FieldPath objects.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.writebatch.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nupdate<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, field: string | FieldPath, value: unknown, ...moreFieldsAndValues: unknown[]): WriteBatch;\n```\n\n----------------------------------------\n\nTITLE: Implementing data() Method in QueryDocumentSnapshot\nDESCRIPTION: Method implementation for retrieving all fields in a document as an Object. This override ensures the return type is AppModelType and guarantees data existence unlike the parent class.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.querydocumentsnapshot.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/** @override */\ndata(): AppModelType;\n```\n\n----------------------------------------\n\nTITLE: Using ConfirmationResult for Phone Authentication in Firebase\nDESCRIPTION: Example JavaScript code demonstrating how to use the ConfirmationResult interface to complete a phone number sign-in flow, including obtaining the verification code from the user and confirming it.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.confirmationresult.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n// Obtain verificationCode from the user.\nconst userCredential = await confirmationResult.confirm(verificationCode);\n```\n\n----------------------------------------\n\nTITLE: profile Property Definition in AdditionalUserInfo\nDESCRIPTION: Defines the profile property which contains a map of IDP-specific user data retrieved from the authentication provider.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.additionaluserinfo.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly profile: Record<string, unknown> | null;\n```\n\n----------------------------------------\n\nTITLE: Logging Set Checkout Option Event in Firebase Analytics\nDESCRIPTION: This function logs a 'set_checkout_option' event in Firebase Analytics. It takes parameters for the analytics instance, event name, event parameters (including optional checkout step and option), and analytics call options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'set_checkout_option', eventParams?: { checkout_step?: EventParams['checkout_step']; checkout_option?: EventParams['checkout_option']; [key: string]: any; }, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Declaring the GenerativeModel Class in TypeScript\nDESCRIPTION: Class declaration for the GenerativeModel class which extends VertexAIModel. This is the primary class for working with generative AI models in the Firebase JS SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generativemodel.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class GenerativeModel extends VertexAIModel\n```\n\n----------------------------------------\n\nTITLE: Defining AggregateQuerySnapshot Class in TypeScript\nDESCRIPTION: Declaration of the AggregateQuerySnapshot class with generic types for aggregate specification, application model, and database model. This class represents the results of an aggregation query in Firestore.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.aggregatequerysnapshot.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class AggregateQuerySnapshot<AggregateSpecType extends AggregateSpec, AppModelType = DocumentData, DbModelType extends DocumentData = DocumentData> \n```\n\n----------------------------------------\n\nTITLE: Checking DataSnapshot Existence\nDESCRIPTION: Method to check if the DataSnapshot contains any data. It's more efficient than comparing val() to null.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.datasnapshot.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexists(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Declaring fromCache Property in SnapshotMetadata\nDESCRIPTION: Declaration of the readonly fromCache property, which indicates whether the snapshot was created from cached data or up-to-date server data.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.snapshotmetadata.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly fromCache: boolean;\n```\n\n----------------------------------------\n\nTITLE: Implementing assertionForSignIn Method in TotpMultiFactorGenerator\nDESCRIPTION: Static method that generates a TotpMultiFactorAssertion for signing in with TOTP as the second factor.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.totpmultifactorgenerator.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic assertionForSignIn(enrollmentId: string, oneTimePassword: string): TotpMultiFactorAssertion;\n```\n\n----------------------------------------\n\nTITLE: Implementing WriteBatch Commit Method\nDESCRIPTION: Method to commit all writes in the batch as an atomic unit, returning a Promise that resolves when writes are successful\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.writebatch.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncommit(): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Updated Firebase Import Syntax\nDESCRIPTION: Change in how Firebase should be imported in JavaScript code after pointing browser field to ESM build. Shows the old namespace import syntax and new default import syntax.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/CHANGELOG.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Before change\nimport * as firebase from 'firebase/app';\n\n// After change\nimport firebase from 'firebase/app';\n```\n\n----------------------------------------\n\nTITLE: Removing Data Converter from CollectionReference\nDESCRIPTION: Method signature for removing the current data converter from a CollectionReference. This returns the CollectionReference to its default state without any custom type conversions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.collectionreference.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwithConverter(converter: null): CollectionReference<DocumentData, DocumentData>;\n```\n\n----------------------------------------\n\nTITLE: Firebase Installations TypeScript API Declarations\nDESCRIPTION: TypeScript declarations for Firebase Installations API including methods for managing installation IDs, tokens, and installation instances. Defines core interfaces and types for Firebase installation management with methods for getting IDs, tokens, and handling installation changes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/installations.api.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FirebaseApp } from '@firebase/app';\n\n// @public\nexport function deleteInstallations(installations: Installations): Promise<void>;\n\n// @internal\nexport interface _FirebaseInstallationsInternal {\n    getId(): Promise<string>;\n    getToken(forceRefresh?: boolean): Promise<string>;\n}\n\n// @public\nexport function getId(installations: Installations): Promise<string>;\n\n// @public\nexport function getInstallations(app?: FirebaseApp): Installations;\n\n// @public\nexport function getToken(installations: Installations, forceRefresh?: boolean): Promise<string>;\n\n// @public\nexport type IdChangeCallbackFn = (installationId: string) => void;\n\n// @public\nexport type IdChangeUnsubscribeFn = () => void;\n\n// @public\nexport interface Installations {\n    app: FirebaseApp;\n}\n\n// @public\nexport function onIdChange(installations: Installations, callback: IdChangeCallbackFn): IdChangeUnsubscribeFn;\n```\n\n----------------------------------------\n\nTITLE: Releasing Modularized SDKs for Firebase\nDESCRIPTION: Release modularized SDKs for the Firebase JavaScript SDK, addressing issue #5015.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/app-types/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [`cdada6c68`](https://github.com/firebase/firebase-js-sdk/commit/cdada6c68f9740d13dd6674bcb658e28e68253b6) [#5345](https://github.com/firebase/firebase-js-sdk/pull/5345) (fixes [#5015](https://github.com/firebase/firebase-js-sdk/issues/5015)) - Release modularized SDKs\n```\n\n----------------------------------------\n\nTITLE: Defining BaseParams Interface in TypeScript\nDESCRIPTION: This code snippet defines the BaseParams interface, which includes optional properties for generationConfig and safetySettings. It serves as a base for parameters used in various methods.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.baseparams.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BaseParams {\n  generationConfig?: GenerationConfig;\n  safetySettings?: SafetySetting[];\n}\n```\n\n----------------------------------------\n\nTITLE: Query.toString Method Signature\nDESCRIPTION: Method for getting the absolute URL of the query's location in an encoded format\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.query.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntoString(): string;\n```\n\n----------------------------------------\n\nTITLE: Defining FirebaseServerApp Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for FirebaseServerApp that extends FirebaseApp interface. Defines the core structure for server-side Firebase applications.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseserverapp.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FirebaseServerApp extends FirebaseApp \n```\n\n----------------------------------------\n\nTITLE: Defining UploadTask Interface for Firebase Storage in TypeScript\nDESCRIPTION: This snippet defines the UploadTask interface, which represents an ongoing upload operation in Firebase Storage. It includes methods for controlling the upload process and accessing task information.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/storage.api.md#2025-04-14_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface UploadTask {\n    cancel(): boolean;\n    catch(onRejected: (error: StorageError) => unknown): Promise<unknown>;\n    on(event: TaskEvent, nextOrObserver?: StorageObserver<UploadTaskSnapshot> | null | ((snapshot: UploadTaskSnapshot) => unknown), error?: ((a: StorageError) => unknown) | null, complete?: Unsubscribe | null): Unsubscribe | Subscribe<UploadTaskSnapshot>;\n    pause(): boolean;\n    resume(): boolean;\n    snapshot: UploadTaskSnapshot;\n    then(onFulfilled?: ((snapshot: UploadTaskSnapshot) => unknown) | null, onRejected?: ((error: StorageError) => unknown) | null): Promise<unknown>;\n}\n```\n\n----------------------------------------\n\nTITLE: Logging E-commerce Events in Firebase Analytics\nDESCRIPTION: Type declaration for logging cart-related events (add_to_cart, add_to_wishlist, remove_from_cart) with support for currency, value and items parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'add_to_cart' | 'add_to_wishlist' | 'remove_from_cart', eventParams?: {\n    currency?: EventParams['currency'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Defining MessagePayload Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for MessagePayload that represents the structure of FCM messages. It includes properties for collapse key, data payload, FCM options, sender information, message ID, and notification payload.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.messagepayload.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MessagePayload \n```\n\n----------------------------------------\n\nTITLE: Logging Search Events in Firebase Analytics\nDESCRIPTION: TypeScript declaration for logging search-related events including search and view search results with search term parameter.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'search' | 'view_search_results', eventParams?: {\n    search_term?: EventParams['search_term'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Interface Definition for VertexAIOptions in TypeScript\nDESCRIPTION: The TypeScript interface definition for VertexAIOptions which allows configuring Vertex AI when initializing in the Firebase SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.vertexaioptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VertexAIOptions \n```\n\n----------------------------------------\n\nTITLE: Defining Schema Abstract Class in TypeScript\nDESCRIPTION: Defines an abstract class for schemas, including static methods for creating different schema types and a toJSON method.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport abstract class Schema implements SchemaInterface {\n    constructor(schemaParams: SchemaInterface);\n    [key: string]: unknown;\n    // (undocumented)\n    static array(arrayParams: SchemaParams & {\n        items: Schema;\n    }): ArraySchema;\n    // (undocumented)\n    static boolean(booleanParams?: SchemaParams): BooleanSchema;\n    description?: string;\n    // (undocumented)\n    static enumString(stringParams: SchemaParams & {\n        enum: string[];\n    }): StringSchema;\n    example?: unknown;\n    format?: string;\n    // (undocumented)\n    static integer(integerParams?: SchemaParams): IntegerSchema;\n    nullable: boolean;\n    // (undocumented)\n    static number(numberParams?: SchemaParams): NumberSchema;\n    // (undocumented)\n    static object(objectParams: SchemaParams & {\n        properties: {\n            [k: string]: Schema;\n        };\n        optionalProperties?: string[];\n    }): ObjectSchema;\n    // (undocumented)\n    static string(stringParams?: SchemaParams): StringSchema;\n    // @internal\n    toJSON(): SchemaRequest;\n    type: SchemaType;\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Delete Method Signature\nDESCRIPTION: Method signature for deleting a document within a transaction. Returns the transaction instance for chaining.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.transaction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndelete<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>): this;\n```\n\n----------------------------------------\n\nTITLE: Function Declaration for reauthenticateWithRedirect Method\nDESCRIPTION: TypeScript declaration for the reauthenticateWithRedirect function that reauthenticates a user with an OAuthProvider using a full-page redirect flow. The result must be handled after returning from the redirect.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function reauthenticateWithRedirect(user: User, provider: AuthProvider, resolver?: PopupRedirectResolver): Promise<never>;\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp Class in TypeScript\nDESCRIPTION: Class declaration for Timestamp that represents a point in time with nanosecond precision in UTC Epoch time format.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.timestamp.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Timestamp\n```\n\n----------------------------------------\n\nTITLE: Analytics Client ID Retrieval - JavaScript\nDESCRIPTION: Implementation of getGoogleAnalyticsClientId() method to retrieve a unique identifier for web clients, enabling backend event logging with GA4 Measurement Protocol.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/analytics/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getGoogleAnalyticsClientId(): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Declaring email Property in UserInfo Interface\nDESCRIPTION: This snippet shows the declaration of the email property in the UserInfo interface. It is a readonly property that can be either a string or null, representing the user's email address.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.userinfo.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly email: string | null;\n```\n\n----------------------------------------\n\nTITLE: Defining WriteBatch Class in TypeScript\nDESCRIPTION: Declaration of the WriteBatch class exported by the Firestore module. This class provides methods for batching multiple write operations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.writebatch.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class WriteBatch \n```\n\n----------------------------------------\n\nTITLE: Declaring Firestore Delete Field Function\nDESCRIPTION: TypeScript declaration for creating a sentinel value used to mark fields for deletion in document updates.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function deleteField(): FieldValue;\n```\n\n----------------------------------------\n\nTITLE: Firestore Emulator Usage\nDESCRIPTION: New method added to use the Firestore local emulator by specifying host and port.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/CHANGELOG.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nuseEmulator(host, port)\n```\n\n----------------------------------------\n\nTITLE: Defining ReCaptchaV3Provider Class in TypeScript\nDESCRIPTION: This snippet defines the ReCaptchaV3Provider class, which implements the AppCheckProvider interface. It provides functionality to obtain a reCAPTCHA V3 token and exchange it for an App Check token.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.recaptchav3provider.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class ReCaptchaV3Provider implements AppCheckProvider \n```\n\n----------------------------------------\n\nTITLE: Reload User Function Signature in Firebase Auth\nDESCRIPTION: TypeScript signature for the reload function that refreshes user account data if the user is signed in. This function takes a User object and returns a Promise that resolves when the reload is complete.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function reload(user: User): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Email Link Authentication Example\nDESCRIPTION: Demonstrates how to create auth credentials using email and email link and sign in a user\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.emailauthprovider.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\nconst userCredential = await signInWithCredential(auth, authCredential);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logging in Firebase Database\nDESCRIPTION: Configures debug logging with a custom logger function to control log output format.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function enableLogging(logger: (message: string) => unknown): any;\n```\n\n----------------------------------------\n\nTITLE: Setting Consent Settings in Firebase Analytics\nDESCRIPTION: Sets the end user consent state for the web app across all gtag references after Firebase Analytics is initialized. Consent types default to \"granted\" unless specified otherwise.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function setConsent(consentSettings: ConsentSettings): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing toFirestore Method (Full Document)\nDESCRIPTION: Method signature for converting application model objects into Firestore-compatible data structures. Used for full document writes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.firestoredataconverter.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntoFirestore(modelObject: WithFieldValue<AppModelType>): WithFieldValue<DbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Sign-In with Redirect using OAuthProvider\nDESCRIPTION: Example of using OAuthProvider for sign-in with redirect and retrieving the result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.oauthprovider.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Sign in using a redirect.\nconst provider = new OAuthProvider('google.com');\n// Start a sign in process for an unauthenticated user.\nprovider.addScope('profile');\nprovider.addScope('email');\nawait signInWithRedirect(auth, provider);\n// This will trigger a full page redirect away from your app\n\n// After returning from the redirect when your app initializes you can obtain the result\nconst result = await getRedirectResult(auth);\nif (result) {\n  // This is the signed-in user\n  const user = result.user;\n  // This gives you a OAuth Access Token for the provider.\n  const credential = provider.credentialFromResult(auth, result);\n  const token = credential.accessToken;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving DocumentReference from DocumentSnapshot\nDESCRIPTION: Getter method for obtaining the DocumentReference associated with the DocumentSnapshot. This reference can be used for further operations on the document in Firestore.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.documentsnapshot.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget ref(): DocumentReference<AppModelType, DbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Defining AggregateField Class in TypeScript\nDESCRIPTION: Class declaration for AggregateField that handles Firestore aggregation operations. The class is generic with type parameter T.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.aggregatefield.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class AggregateField<T> \n```\n\n----------------------------------------\n\nTITLE: Defining ListResult Interface in TypeScript\nDESCRIPTION: This snippet defines the ListResult interface, which includes properties for items, nextPageToken, and prefixes. It is used to represent the result of a list operation in Firebase Storage.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.listresult.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ListResult {\n  items: StorageReference[];\n  nextPageToken?: string;\n  prefixes: StorageReference[];\n}\n```\n\n----------------------------------------\n\nTITLE: VectorValue isEqual Method Implementation\nDESCRIPTION: Method that compares two VectorValue instances by checking if their underlying number arrays are identical. Returns a boolean indicating equality.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.vectorvalue.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisEqual(other: VectorValue): boolean;\n```\n\n----------------------------------------\n\nTITLE: Creating Object Schema in TypeScript\nDESCRIPTION: Static method to create an ObjectSchema. It takes object parameters including properties and optional properties, and returns an ObjectSchema instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.schema.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic object(objectParams: SchemaParams & {\n        properties: {\n            [k: string]: Schema;\n        };\n        optionalProperties?: string[];\n    }): ObjectSchema;\n```\n\n----------------------------------------\n\nTITLE: Checking Service Worker Support for Firebase Cloud Messaging\nDESCRIPTION: Checks whether all required APIs for Firebase Cloud Messaging exist within the Service Worker context. Returns a Promise that resolves to a boolean indicating support.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_sw.md#2025-04-14_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport declare function isSwSupported(): Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: GitHub Sign-In Using Redirect in JavaScript\nDESCRIPTION: Example of how to use GithubAuthProvider for sign-in with redirect, including scope addition and result handling.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.githubauthprovider.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Sign in using a redirect.\nconst provider = new GithubAuthProvider();\n// Start a sign in process for an unauthenticated user.\nprovider.addScope('repo');\nawait signInWithRedirect(auth, provider);\n// This will trigger a full page redirect away from your app\n\n// After returning from the redirect when your app initializes you can obtain the result\nconst result = await getRedirectResult(auth);\nif (result) {\n  // This is the signed-in user\n  const user = result.user;\n  // This gives you a GitHub Access Token.\n  const credential = GithubAuthProvider.credentialFromResult(result);\n  const token = credential.accessToken;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Query Methods to Realtime Database in TypeScript\nDESCRIPTION: Adds startAfter() and endBefore() methods to the Realtime Database TypeScript definitions for more flexible query options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/CHANGELOG.md#2025-04-14_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nquery.startAfter(value)\nquery.endBefore(value)\n```\n\n----------------------------------------\n\nTITLE: Browser Local Persistence Implementation in TypeScript\nDESCRIPTION: An implementation of the Persistence interface of type LOCAL that uses localStorage for the underlying storage. This provides persistent authentication state across browser sessions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nbrowserLocalPersistence: Persistence\n```\n\n----------------------------------------\n\nTITLE: Create URL-based Callable Function Reference\nDESCRIPTION: Creates a reference to a callable HTTPS trigger function using a full URL instead of just the function name. Supports generic type parameters for request/response data.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function httpsCallableFromURL<RequestData = unknown, ResponseData = unknown, StreamData = unknown>(functionsInstance: Functions, url: string, options?: HttpsCallableOptions): HttpsCallable<RequestData, ResponseData, StreamData>;\n```\n\n----------------------------------------\n\nTITLE: Declaring DocumentChange Properties in TypeScript\nDESCRIPTION: This code snippet shows the property declarations for the DocumentChange interface. It includes the affected document, new and old indices, and the type of change.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.documentchange.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly doc: QueryDocumentSnapshot<AppModelType, DbModelType>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly newIndex: number;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly oldIndex: number;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: DocumentChangeType;\n```\n\n----------------------------------------\n\nTITLE: Defining StartChatParams Interface in TypeScript\nDESCRIPTION: Defines an interface for chat start parameters, extending BaseParams and including history, system instruction, and tool configuration.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface StartChatParams extends BaseParams {\n    // (undocumented)\n    history?: Content[];\n    // (undocumented)\n    systemInstruction?: string | Part | Content;\n    // (undocumented)\n    toolConfig?: ToolConfig;\n    // (undocumented)\n    tools?: Tool[];\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Data Converter to CollectionReference\nDESCRIPTION: Method signature for applying a custom data converter to a CollectionReference. This allows using custom model objects with Firestore, converting between Firestore data and custom types.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.collectionreference.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nwithConverter<NewAppModelType, NewDbModelType extends DocumentData = DocumentData>(converter: FirestoreDataConverter<NewAppModelType, NewDbModelType>): CollectionReference<NewAppModelType, NewDbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Defining FullMetadata Interface in TypeScript\nDESCRIPTION: Interface definition for FullMetadata that extends UploadMetadata to provide comprehensive metadata for Firebase Storage objects. Includes properties for bucket information, download tokens, paths, generation numbers, and timestamps.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.fullmetadata.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FullMetadata extends UploadMetadata \n```\n\n----------------------------------------\n\nTITLE: Implementing Confirm Method in ConfirmationResult\nDESCRIPTION: TypeScript signature for the confirm method that completes a phone number authentication operation by verifying the code sent to the user's device.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.confirmationresult.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconfirm(verificationCode: string): Promise<UserCredential>;\n```\n\n----------------------------------------\n\nTITLE: Defining AnalyticsSettings Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Analytics instance initialization options. It exports an interface that contains optional configuration parameters for the initial gtag config call.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.analyticssettings.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AnalyticsSettings \n```\n\n----------------------------------------\n\nTITLE: Declaring Firestore Sum Aggregation Function\nDESCRIPTION: TypeScript declaration for creating an AggregateField to compute field sums across query results.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function sum(field: string | FieldPath): AggregateField<number>;\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Utils with ES Modules\nDESCRIPTION: Demonstrates how to import specific utility functions from @firebase/util package using ES Modules syntax. Shows importing the Deferred utility as an example.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/util/README.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Deferred } from '@firebase/util';\n\n// Do stuff with Deferred or any of the other Utils you import\n```\n\n----------------------------------------\n\nTITLE: Implementing isEqual Method for VectorValue in TypeScript\nDESCRIPTION: This method compares two VectorValue instances for equality. It returns true if the raw number arrays of both instances are the same, and false otherwise.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.vectorvalue.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisEqual(other: VectorValue): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining UploadTask Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for UploadTask, which represents an upload operation in Firebase Storage.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.uploadtask.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UploadTask \n```\n\n----------------------------------------\n\nTITLE: Defining Messaging Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for the Firebase Cloud Messaging SDK that defines the core messaging functionality. Contains the app property that links to the associated FirebaseApp instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.messaging.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Messaging \n```\n\n----------------------------------------\n\nTITLE: Database Query Pagination Methods\nDESCRIPTION: Implementation of startAfter and endBefore filters for paginating Realtime Database queries, added in version 0.9.0\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/database/CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nstartAfter(value: number|string|boolean|null, key?: string): Query\nendBefore(value: number|string|boolean|null, key?: string): Query\n```\n\n----------------------------------------\n\nTITLE: Declaring providerId Property in UserInfo Interface\nDESCRIPTION: This snippet shows the declaration of the providerId property in the UserInfo interface. It is a readonly string property representing the provider used to authenticate the user.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.userinfo.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly providerId: string;\n```\n\n----------------------------------------\n\nTITLE: Defining FirestoreError Class in TypeScript\nDESCRIPTION: Class declaration for FirestoreError that extends FirebaseError, representing errors returned by Firestore operations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.firestoreerror.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class FirestoreError extends FirebaseError \n```\n\n----------------------------------------\n\nTITLE: Implementing toFirestore Method for Full Document Writes\nDESCRIPTION: This code snippet shows the signature of the toFirestore method used for full document writes. It converts a custom model object of type AppModelType into a plain JavaScript object of type DbModelType, suitable for writing to Firestore.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestoredataconverter.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntoFirestore(modelObject: WithFieldValue<AppModelType>): WithFieldValue<DbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Defining VertexAIErrorCode Enum in TypeScript\nDESCRIPTION: Const enum defining standardized error codes for VertexAIError, covering various API, fetch, and validation errors.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare const enum VertexAIErrorCode\n```\n\n----------------------------------------\n\nTITLE: AppCheckOptions Interface Type Definition in TypeScript\nDESCRIPTION: Defines the interface for App Check initialization options in Firebase JS SDK, specifying the structure for configuring App Check features.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.appcheckoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AppCheckOptions \n```\n\n----------------------------------------\n\nTITLE: Implementing then Method for LoadBundleTask\nDESCRIPTION: Defines the then method for LoadBundleTask, which implements the Promise<LoadBundleTaskProgress>.then interface. This method is called on the completion of the loading task or when an error occurs.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.loadbundletask.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthen<T, R>(onFulfilled?: (a: LoadBundleTaskProgress) => T | PromiseLike<T>, onRejected?: (a: Error) => R | PromiseLike<R>): Promise<T | R>;\n```\n\n----------------------------------------\n\nTITLE: Revoking Access Tokens in Firebase Authentication\nDESCRIPTION: Function to revoke an OAuth access token. Currently only supports Apple OAuth access tokens. Requires Auth instance and the token to revoke.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function revokeAccessToken(auth: Auth, token: string): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Removing Converter from Query in Firebase JavaScript SDK\nDESCRIPTION: This method removes the current converter from a Query instance, returning a Query that uses DocumentData for both app and database models.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.query.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nwithConverter(converter: null): Query<DocumentData, DocumentData>;\n```\n\n----------------------------------------\n\nTITLE: Creating QueryStartAtConstraint in TypeScript\nDESCRIPTION: Creates a QueryStartAtConstraint that modifies the result set to start after the provided fields relative to the order of the query. The order of the field values must match the order of the order by clauses of the query.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function startAfter(...fieldValues: unknown[]): QueryStartAtConstraint;\n```\n\n----------------------------------------\n\nTITLE: Declaring Firestore Server Timestamp Function\nDESCRIPTION: TypeScript declaration for creating a sentinel value to include server-generated timestamps in documents.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function serverTimestamp(): FieldValue;\n```\n\n----------------------------------------\n\nTITLE: QuerySnapshot query Property Definition\nDESCRIPTION: Read-only property that returns the Query object used to generate this QuerySnapshot.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.querysnapshot.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly query: Query<AppModelType, DbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Starting Query at Document Snapshot\nDESCRIPTION: Function declaration for creating a QueryStartAtConstraint that modifies result set to start at a provided document snapshot. The snapshot must contain all fields specified in the query's orderBy clause.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function startAt<AppModelType, DbModelType extends DocumentData>(snapshot: DocumentSnapshot<AppModelType, DbModelType>): QueryStartAtConstraint;\n```\n\n----------------------------------------\n\nTITLE: Checking for Children in DataSnapshot\nDESCRIPTION: Method to determine if the DataSnapshot has any non-null child properties.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.datasnapshot.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nhasChildren(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Get Additional User Info Function Signature in Firebase Auth\nDESCRIPTION: TypeScript signature for the getAdditionalUserInfo function that extracts provider-specific information from a UserCredential. Returns AdditionalUserInfo or null if no additional information is available.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getAdditionalUserInfo(userCredential: UserCredential): AdditionalUserInfo | null;\n```\n\n----------------------------------------\n\nTITLE: Defining QueryEndAtConstraint Class in TypeScript\nDESCRIPTION: This snippet defines the QueryEndAtConstraint class, which extends QueryConstraint. It is used to create constraints for ending a query result set in Firestore.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.queryendatconstraint.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class QueryEndAtConstraint extends QueryConstraint \n```\n\n----------------------------------------\n\nTITLE: Logging Checkout Progress in Firebase Analytics\nDESCRIPTION: Type declaration for logging checkout_progress events with support for step and option tracking along with standard e-commerce parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'checkout_progress', eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Defining LoadBundleTaskProgress Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for LoadBundleTaskProgress that tracks bundle loading progress with properties for loaded/total bytes and documents.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.loadbundletaskprogress.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface LoadBundleTaskProgress \n```\n\n----------------------------------------\n\nTITLE: VectorValue toArray Method Implementation\nDESCRIPTION: Method that returns a copy of the vector's internal number array representation. Creates a new array to prevent direct modification of the internal state.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.vectorvalue.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntoArray(): number[];\n```\n\n----------------------------------------\n\nTITLE: Creating OAuthCredential from Google Sign-In\nDESCRIPTION: Example of creating an OAuthCredential using the credential method with a Google Sign-In result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.oauthprovider.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// `googleUser` from the onsuccess Google Sign In callback.\n// Initialize a generate OAuth provider with a `google.com` providerId.\nconst provider = new OAuthProvider('google.com');\nconst credential = provider.credential({\n  idToken: googleUser.getAuthResponse().id_token,\n});\nconst result = await signInWithCredential(credential);\n```\n\n----------------------------------------\n\nTITLE: Defining FirestoreError Class in TypeScript\nDESCRIPTION: This snippet defines the FirestoreError class, which extends FirebaseError. It includes properties for the error code, message, and stack trace.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestoreerror.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class FirestoreError extends FirebaseError \n```\n\n----------------------------------------\n\nTITLE: SHA-1 Hash Implementation in TypeScript\nDESCRIPTION: This class implements the SHA-1 hashing algorithm. It provides methods for updating the hash with new data, compressing the data, and finalizing the hash digest.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Sha1 {\n    constructor();\n    blockSize: number;\n    compress_(buf: number[] | Uint8Array | string, offset?: number): void;\n    digest(): number[];\n    reset(): void;\n    update(bytes?: number[] | Uint8Array | string, length?: number): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Number Value from Remote Config in TypeScript\nDESCRIPTION: Retrieves a number value for a given key from Remote Config. Convenience method for calling remoteConfig.getValue(key).asNumber().\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.md#2025-04-14_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport declare function getNumber(remoteConfig: RemoteConfig, key: string): number;\n```\n\n----------------------------------------\n\nTITLE: FetchResponse Config Property Definition\nDESCRIPTION: Property definition for the config field that contains the map of parameters returned in the fetch response body for 200 responses.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.fetchresponse.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconfig?: FirebaseRemoteConfigObject;\n```\n\n----------------------------------------\n\nTITLE: Defining FirestoreDataConverter Interface in TypeScript\nDESCRIPTION: This code snippet defines the FirestoreDataConverter interface, which is used to convert between application model types and database model types when interacting with Firestore. It includes two generic type parameters and three method signatures.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestoredataconverter.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface FirestoreDataConverter<AppModelType, DbModelType extends DocumentData = DocumentData> \n```\n\n----------------------------------------\n\nTITLE: CustomProvider Class Definition in TypeScript for Firebase App Check\nDESCRIPTION: Declaration of the CustomProvider class that implements the AppCheckProvider interface for Firebase App Check. This class allows for custom token providers in App Check authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.customprovider.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class CustomProvider implements AppCheckProvider \n```\n\n----------------------------------------\n\nTITLE: Defining ControlParams Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for gtag.js control parameters used in Firebase Analytics. It includes optional properties for event callback functions, timeout values, group configurations, and send_to targets.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.controlparams.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ControlParams {}\n```\n\n----------------------------------------\n\nTITLE: SnapshotListenOptions includeMetadataChanges Property Definition\nDESCRIPTION: Property definition for includeMetadataChanges flag that determines whether to include metadata-only changes in snapshot events. Optional boolean property that defaults to false.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.snapshotlistenoptions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly includeMetadataChanges?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Creating OnDisconnect Object in Firebase Realtime Database\nDESCRIPTION: The onDisconnect function returns an OnDisconnect object, which is used for enabling offline capabilities in the database. It takes a database reference as a parameter.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nonDisconnect(ref)\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Values in Firestore\nDESCRIPTION: Creates a new VectorValue object by making a copy of a provided array of numbers. This is used for vector-based operations in Firestore.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvector(values)\n```\n\n----------------------------------------\n\nTITLE: Using endBefore Query Constraint in Firebase Realtime Database\nDESCRIPTION: Creates a QueryConstraint with a specified exclusive ending point for database queries. Children with values less than the specified value will be included in the query.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nendBefore(value, key)\n```\n\n----------------------------------------\n\nTITLE: Converting DataSnapshot to JSON\nDESCRIPTION: Method to return a JSON-serializable representation of the DataSnapshot object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.datasnapshot.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntoJSON(): Object;\n```\n\n----------------------------------------\n\nTITLE: Creating WriteBatch Instance in TypeScript\nDESCRIPTION: Function declaration for creating a new WriteBatch instance from a Firestore instance. WriteBatch allows grouping multiple write operations into a single atomic unit.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore.api.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport function writeBatch(firestore: Firestore): WriteBatch;\n```\n\n----------------------------------------\n\nTITLE: Creating Query End Before Constraint with Document Snapshot in Firestore Lite\nDESCRIPTION: Creates a QueryEndAtConstraint that modifies query results to end before the provided document (exclusive). The document must contain all fields specified in the query's orderBy clause.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function endBefore<AppModelType, DbModelType extends DocumentData>(snapshot: DocumentSnapshot<AppModelType, DbModelType>): QueryEndAtConstraint;\n```\n\n----------------------------------------\n\nTITLE: Implementing removeItem Method for ReactNativeAsyncStorage\nDESCRIPTION: The removeItem method removes an item from storage based on the provided key. It returns a Promise that resolves to void upon completion of the operation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.reactnativeasyncstorage.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nremoveItem(key: string): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining Functions Interface in TypeScript\nDESCRIPTION: Main interface definition for Firebase Functions service that specifies the core structure and required properties.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.functions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Functions \n```\n\n----------------------------------------\n\nTITLE: Adding Storage Emulator Support in JavaScript\nDESCRIPTION: Adds the useEmulator method to Firebase Storage, allowing users to connect to a local storage emulator for testing purposes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/CHANGELOG.md#2025-04-14_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nstorage().useEmulator(host, port)\n```\n\n----------------------------------------\n\nTITLE: Document Reference Converter Property\nDESCRIPTION: Property declaration for the converter that transforms between Firestore data and custom application types.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.documentreference.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly converter: FirestoreDataConverter<AppModelType, DbModelType> | null;\n```\n\n----------------------------------------\n\nTITLE: Defining StartChatParams Interface in TypeScript\nDESCRIPTION: This code snippet defines the StartChatParams interface, which extends BaseParams and includes properties for chat history, system instructions, tool configuration, and tools. It is used to provide parameters for the GenerativeModel.startChat() method.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.startchatparams.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StartChatParams extends BaseParams {\n    history?: Content[];\n    systemInstruction?: string | Part | Content;\n    toolConfig?: ToolConfig;\n    tools?: Tool[];\n}\n```\n\n----------------------------------------\n\nTITLE: Removing FirestoreDataConverter in JavaScript\nDESCRIPTION: Added support to remove a FirestoreDataConverter on a Firestore reference by calling withConverter(null). This allows resetting to default behavior.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nwithConverter(null)\n```\n\n----------------------------------------\n\nTITLE: Using endAt Query Constraint in Firebase Realtime Database\nDESCRIPTION: Creates a QueryConstraint with a specified inclusive ending point for database queries. Can be further limited with an optional key argument.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nendAt(value, key)\n```\n\n----------------------------------------\n\nTITLE: Declaring Firestore Count Aggregation Function\nDESCRIPTION: TypeScript declaration for creating an AggregateField object to count documents in a query result set.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function count(): AggregateField<number>;\n```\n\n----------------------------------------\n\nTITLE: Defining AggregateQuerySnapshot Class in TypeScript\nDESCRIPTION: Declares the AggregateQuerySnapshot class with generic types for aggregate specifications, application model, and database model. It includes properties for the query and type, and a method to retrieve aggregation results.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.aggregatequerysnapshot.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class AggregateQuerySnapshot<AggregateSpecType extends AggregateSpec, AppModelType = DocumentData, DbModelType extends DocumentData = DocumentData> \n```\n\n----------------------------------------\n\nTITLE: Logging Share Events in Firebase Analytics\nDESCRIPTION: TypeScript function signature for logging share events with parameters for sharing method and content details.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/analytics.api.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function logEvent(analyticsInstance: Analytics, eventName: 'share', eventParams?: {\n    method?: EventParams['method'];\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Reconnecting to Firebase Realtime Database in TypeScript\nDESCRIPTION: Reconnects to the server and synchronizes the offline Database state with the server state. This method should be used after disabling the active connection with goOffline().\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function goOnline(db: Database): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing assertionForEnrollment Method in TotpMultiFactorGenerator\nDESCRIPTION: Static method that generates a TotpMultiFactorAssertion for enrolling in TOTP second factor authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.totpmultifactorgenerator.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic assertionForEnrollment(secret: TotpSecret, oneTimePassword: string): TotpMultiFactorAssertion;\n```\n\n----------------------------------------\n\nTITLE: Updating Firebase Firestore Dependencies in package.json\nDESCRIPTION: Example of updating Firebase Firestore and related dependencies in a package.json file. This shows the syntax for specifying version ranges for @firebase packages.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"@firebase/firestore\": \"^4.7.10\",\n  \"@firebase/util\": \"^1.11.0\",\n  \"@firebase/component\": \"^0.6.13\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Document Data with Options in WriteBatch (TypeScript)\nDESCRIPTION: Overloaded method signature for setting document data with options in a WriteBatch. Allows for merging data into existing documents.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.writebatch.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nset<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, data: PartialWithFieldValue<AppModelType>, options: SetOptions): WriteBatch;\n```\n\n----------------------------------------\n\nTITLE: Query.toJSON Method Signature\nDESCRIPTION: Method for converting Query object to a JSON-serializable representation\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.query.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntoJSON(): string;\n```\n\n----------------------------------------\n\nTITLE: Defining CustomProviderOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the CustomProviderOptions interface, which includes a single property 'getToken'. The getToken property is a function that returns a Promise resolving to an AppCheckToken.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.customprovideroptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CustomProviderOptions {\n  getToken: () => Promise<AppCheckToken>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Firestore Log Level in TypeScript\nDESCRIPTION: Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function setLogLevel(logLevel: LogLevel): void;\n```\n\n----------------------------------------\n\nTITLE: Direct Email/Password Sign In Example\nDESCRIPTION: Shows direct email and password sign in without creating credentials explicitly\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.emailauthprovider.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst userCredential = await signInWithEmailAndPassword(auth, email, password);\n```\n\n----------------------------------------\n\nTITLE: Implementing WriteBatch Set Method\nDESCRIPTION: Method to write or create a document with provided data. Includes overload for merge options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.writebatch.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nset<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, data: WithFieldValue<AppModelType>): WriteBatch;\n\nset<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, data: PartialWithFieldValue<AppModelType>, options: SetOptions): WriteBatch;\n```\n\n----------------------------------------\n\nTITLE: Defining VertexAI Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for the VertexAI component that defines the structure for Vertex AI instances in Firebase SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.vertexai.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VertexAI \n```\n\n----------------------------------------\n\nTITLE: Getting Vertex AI Instance in JavaScript\nDESCRIPTION: Returns a VertexAI instance for the given Firebase app. This function is used to initialize Vertex AI functionality.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetVertexAI(app, options)\n```\n\n----------------------------------------\n\nTITLE: AdditionalUserInfo Interface Definition in Typescript\nDESCRIPTION: Defines the AdditionalUserInfo interface which contains additional user information from a federated identity provider after authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.additionaluserinfo.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AdditionalUserInfo \n```\n\n----------------------------------------\n\nTITLE: Query Class Definition in TypeScript\nDESCRIPTION: Base Query class definition for Firestore with generic type parameters for application and database models. Includes converter functionality and type information.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore-lite.api.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Query<AppModelType = DocumentData, DbModelType extends DocumentData = DocumentData> {\n    protected constructor();\n    readonly converter: FirestoreDataConverter<AppModelType, DbModelType> | null;\n    readonly firestore: Firestore;\n    readonly type: 'query' | 'collection';\n    withConverter(converter: null): Query<DocumentData, DocumentData>;\n    withConverter<NewAppModelType, NewDbModelType extends DocumentData = DocumentData>(converter: FirestoreDataConverter<NewAppModelType, NewDbModelType>): Query<NewAppModelType, NewDbModelType>;\n}\n```\n\n----------------------------------------\n\nTITLE: GoogleAuthProvider Class Declaration in TypeScript\nDESCRIPTION: TypeScript declaration of the GoogleAuthProvider class that extends BaseOAuthProvider. It's used for generating an OAuthCredential for Google authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.googleauthprovider.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class GoogleAuthProvider extends BaseOAuthProvider \n```\n\n----------------------------------------\n\nTITLE: Defining GenerativeContentBlob Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for GenerativeContentBlob which is used for sending image data. It contains two properties: data for the base64-encoded image content and mimeType to specify the image format.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generativecontentblob.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GenerativeContentBlob \n```\n\n----------------------------------------\n\nTITLE: Declaring hasPendingWrites Property in SnapshotMetadata\nDESCRIPTION: Declaration of the readonly hasPendingWrites property, which indicates whether the snapshot contains local writes that haven't been committed to the backend yet.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.snapshotmetadata.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly hasPendingWrites: boolean;\n```\n\n----------------------------------------\n\nTITLE: Declaring RecaptchaVerifier Class in TypeScript\nDESCRIPTION: Class declaration for RecaptchaVerifier that implements ApplicationVerifierInternal interface. This class provides reCAPTCHA-based verification functionality.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.recaptchaverifier.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class RecaptchaVerifier implements ApplicationVerifierInternal\n```\n\n----------------------------------------\n\nTITLE: Using startAt Query Constraint in Firebase Realtime Database\nDESCRIPTION: Creates a QueryConstraint with a specified inclusive starting point. The optional key argument can further limit the query to children with key names greater than or equal to the specified key.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nstartAt(value, key)\n```\n\n----------------------------------------\n\nTITLE: Creating Bytes from Base64 String in TypeScript\nDESCRIPTION: Static method to create a new Bytes object from a Base64 string. It converts the given Base64 string to bytes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.bytes.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic fromBase64String(base64: string): Bytes;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionsErrorCode Type in TypeScript\nDESCRIPTION: This TypeScript type definition creates a string literal type for Firebase Functions error codes. It prefixes the core error code with 'functions/' to create the complete error code format.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FunctionsErrorCode = `functions/${FunctionsErrorCodeCore}`;\n```\n\n----------------------------------------\n\nTITLE: Defining QueryEndAtConstraint Class in TypeScript\nDESCRIPTION: This snippet declares the QueryEndAtConstraint class, which extends QueryConstraint. It is used to create constraints for Firestore queries to exclude documents from the end of the result set.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.queryendatconstraint.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class QueryEndAtConstraint extends QueryConstraint \n```\n\n----------------------------------------\n\nTITLE: Defining CollectionReference Class in TypeScript\nDESCRIPTION: Declares the CollectionReference class, which extends the Query class. It is used for adding documents, getting document references, and querying documents in a Firestore collection.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.collectionreference.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class CollectionReference<AppModelType = DocumentData, DbModelType extends DocumentData = DocumentData> extends Query<AppModelType, DbModelType>\n```\n\n----------------------------------------\n\nTITLE: GenerateContentCandidate Interface Definition in TypeScript\nDESCRIPTION: This defines the GenerateContentCandidate interface which represents a candidate returned as part of a GenerateContentResponse. It contains properties for content, citation metadata, safety ratings, and indicators for response completion.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentcandidate.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GenerateContentCandidate \n```\n\n----------------------------------------\n\nTITLE: Using setWithPriority in Firebase Realtime Database\nDESCRIPTION: Writes data to a Database location while also specifying the priority for that data. Similar to set() but with added priority functionality.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetWithPriority(ref, value, priority)\n```\n\n----------------------------------------\n\nTITLE: Defining StorageObserver Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for StorageObserver that implements stream observation patterns for Firebase Storage. The interface is generic and includes optional handlers for next, error, and complete events.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.storageobserver.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StorageObserver<T> \n```\n\n----------------------------------------\n\nTITLE: Transaction Delete Method Signature\nDESCRIPTION: Method signature for deleting a document within a transaction. Returns the transaction instance for chaining.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.transaction.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndelete<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>): this;\n```\n\n----------------------------------------\n\nTITLE: Defining GenerateContentStreamResult Interface in TypeScript\nDESCRIPTION: Interface definition for GenerateContentStreamResult that contains a stream for receiving content chunks and a promise for the complete response.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentstreamresult.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GenerateContentStreamResult \n```\n\n----------------------------------------\n\nTITLE: Database Emulator Usage with TypeScript\nDESCRIPTION: Implementation of useEmulator method for Realtime Database with host and port parameters, introduced in version 0.7.0\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/database/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nuseEmulator(host: string, port: number)\n```\n\n----------------------------------------\n\nTITLE: Checking Document Existence in Firestore\nDESCRIPTION: Method to determine if the document exists in Firestore. Returns a boolean indicating the document's existence and narrows the type to QueryDocumentSnapshot if true.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.documentsnapshot.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexists(): this is QueryDocumentSnapshot<AppModelType, DbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Defining Firestore Aggregate Field Types in TypeScript\nDESCRIPTION: This type definition represents the possible return types of aggregate functions like sum, average, and count in Firestore queries.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore.api.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AggregateFieldType = ReturnType<typeof sum> | ReturnType<typeof average> | ReturnType<typeof count>;\n```\n\n----------------------------------------\n\nTITLE: Defining HttpsCallableOptions Interface in TypeScript\nDESCRIPTION: Interface definition for HttpsCallableOptions that specifies configuration parameters for Firebase callable functions. It includes options for timeout duration and App Check token usage.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.httpscallableoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface HttpsCallableOptions \n```\n\n----------------------------------------\n\nTITLE: Defining SignInMethod Enumeration in TypeScript\nDESCRIPTION: Enumeration of supported Firebase Authentication sign-in methods, including email link, email password, and various OAuth providers.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\nSignInMethod: {\n    readonly EMAIL_LINK: \"emailLink\";\n    readonly EMAIL_PASSWORD: \"password\";\n    readonly FACEBOOK: \"facebook.com\";\n    readonly GITHUB: \"github.com\";\n    readonly GOOGLE: \"google.com\";\n    readonly PHONE: \"phone\";\n    readonly TWITTER: \"twitter.com\";\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuthProvider Class in TypeScript\nDESCRIPTION: This class extends BaseOAuthProvider and provides methods for creating and managing OAuth credentials, including handling errors and JSON conversion.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/auth.api.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class OAuthProvider extends BaseOAuthProvider {\n    credential(params: OAuthCredentialOptions): OAuthCredential;\n    static credentialFromError(error: FirebaseError): OAuthCredential | null;\n    static credentialFromJSON(json: object | string): OAuthCredential;\n    static credentialFromResult(userCredential: UserCredential): OAuthCredential | null;\n    }\n```\n\n----------------------------------------\n\nTITLE: Validating Callback Function in Firebase JS SDK\nDESCRIPTION: This function validates a callback function passed to a Firebase SDK method. It checks if the callback is a valid function and whether it's optional or required.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function validateCallback(fnName: string, argumentName: string, callback: Function, optional: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: Accessing Default App Name in JavaScript\nDESCRIPTION: Example showing how to access the name of the default Firebase app, which is \"[DEFAULT]\".\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseapp.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// The default app's name is \"[DEFAULT]\"\nconst app = initializeApp(defaultAppConfig);\nconsole.log(app.name);  // \"[DEFAULT]\"\n```\n\n----------------------------------------\n\nTITLE: Creating WriteBatch Instance - TypeScript\nDESCRIPTION: Function signature for creating a new WriteBatch instance. Takes a Firestore instance as parameter and returns a WriteBatch object for performing multiple write operations atomically.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore-lite.api.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport function writeBatch(firestore: Firestore): WriteBatch;\n```\n\n----------------------------------------\n\nTITLE: Defining UploadTaskSnapshot Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for UploadTaskSnapshot that holds data about the current state of a file upload task in Firebase Storage.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.uploadtasksnapshot.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UploadTaskSnapshot \n```\n\n----------------------------------------\n\nTITLE: GeoPoint toJSON Method Signature in TypeScript\nDESCRIPTION: Defines the toJSON method that returns a JSON-serializable representation of the GeoPoint, containing latitude and longitude as number properties.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.geopoint.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntoJSON(): {\n        latitude: number;\n        longitude: number;\n    };\n```\n\n----------------------------------------\n\nTITLE: Declaring DatabaseReference Properties in TypeScript\nDESCRIPTION: This snippet declares the properties of the DatabaseReference interface. It includes 'key' for the last part of the reference's path, 'parent' for the parent location, and 'root' for the root reference of the database.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.databasereference.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly key: string | null;\nreadonly parent: DatabaseReference | null;\nreadonly root: DatabaseReference;\n```\n\n----------------------------------------\n\nTITLE: Defining ImagenImageFormat Class in TypeScript\nDESCRIPTION: This snippet defines the ImagenImageFormat class with its properties and methods. It is used to specify the desired format (JPEG or PNG) and compression quality for images generated by Imagen.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagenimageformat.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class ImagenImageFormat \n{\n  compressionQuality?: number;\n  mimeType: string;\n  static jpeg(compressionQuality?: number): ImagenImageFormat;\n  static png(): ImagenImageFormat;\n}\n```\n\n----------------------------------------\n\nTITLE: Document ID Getter\nDESCRIPTION: Getter method for retrieving the document's identifier within its collection.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.documentreference.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nget id(): string;\n```\n\n----------------------------------------\n\nTITLE: FunctionCallingMode Enumeration in TypeScript\nDESCRIPTION: Enumeration defining function calling modes that control how models can use functions. Modes include automatic determination, always using functions, or never using functions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum FunctionCallingMode \n{\n  ANY = \"ANY\",\n  AUTO = \"AUTO\",\n  NONE = \"NONE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from UploadTask Events in JavaScript\nDESCRIPTION: Shows how to use the returned function from the 'on' method to unsubscribe from upload task events.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.uploadtask.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar unsubscribe = uploadTask.on(\n    firebase.storage.TaskEvent.STATE_CHANGED,\n    function(snapshot) {\n      var percent = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      console.log(percent + \"% done\");\n      // Stop after receiving one update.\n      unsubscribe();\n    });\n\n// This code is equivalent to the above.\nvar handle = uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED);\nunsubscribe = handle(function(snapshot) {\n  var percent = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n  console.log(percent + \"% done\");\n  // Stop after receiving one update.\n  unsubscribe();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Firestore Class Method in TypeScript\nDESCRIPTION: Declares the 'toJSON' method of the Firestore class, which returns a JSON-serializable representation of the Firestore instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestore.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntoJSON(): object;\n```\n\n----------------------------------------\n\nTITLE: Defining ProviderId Enumeration in TypeScript\nDESCRIPTION: Enumeration of supported authentication providers in Firebase, including Facebook, GitHub, Google, password-based, phone, and Twitter authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\nProviderId: {\n    readonly FACEBOOK: \"facebook.com\";\n    readonly GITHUB: \"github.com\";\n    readonly GOOGLE: \"google.com\";\n    readonly PASSWORD: \"password\";\n    readonly PHONE: \"phone\";\n    readonly TWITTER: \"twitter.com\";\n}\n```\n\n----------------------------------------\n\nTITLE: OAuthCredential Class Declaration in Firebase Auth\nDESCRIPTION: Defines the OAuthCredential class that extends AuthCredential to represent OAuth credentials returned by an OAuthProvider.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.oauthcredential.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class OAuthCredential extends AuthCredential \n```\n\n----------------------------------------\n\nTITLE: Defining RequestOptions Interface in TypeScript for Firebase Vertex AI\nDESCRIPTION: This code snippet defines the RequestOptions interface used in the Firebase JS SDK for Vertex AI integration. It specifies two optional properties: baseUrl for setting the API endpoint, and timeout for setting the request timeout duration.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.requestoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RequestOptions \n{\n  baseUrl?: string;\n  timeout?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving DataSnapshot Priority\nDESCRIPTION: Getter for the priority value of the data in the DataSnapshot. This is used for ordering collections, though it's not necessary for most applications.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.datasnapshot.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget priority(): string | number | null;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for MultiFactorInfo in Firebase Auth\nDESCRIPTION: Defines the MultiFactorInfo interface which contains information about a second factor entity in Firebase Authentication. This interface includes properties for display name, enrollment time, factor ID, and multi-factor enrollment ID.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.multifactorinfo.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MultiFactorInfo \n```\n\n----------------------------------------\n\nTITLE: Web Vital Metrics Collection in Performance SDK v0.7.0\nDESCRIPTION: A minor change that adds functionality to collect web vital metrics (INP, CLS, LCP) as part of page load events, enhancing performance monitoring capabilities.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/performance/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [`2ec1c76`](https://github.com/firebase/firebase-js-sdk/commit/2ec1c768271b8432ef15fc4ba46e825ee15f3ee1) [#8644](https://github.com/firebase/firebase-js-sdk/pull/8644) - Collect web vital metrics (INP,CLS,LCP) as part of page load event.\n```\n\n----------------------------------------\n\nTITLE: Timestamp Static Date Conversion Method\nDESCRIPTION: Static method to create a Timestamp from a JavaScript Date object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.timestamp.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic fromDate(date: Date): Timestamp;\n```\n\n----------------------------------------\n\nTITLE: Defining GenerationConfig Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for GenerationConfig which specifies configuration options for content-related requests in VertexAI.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generationconfig.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GenerationConfig \n```\n\n----------------------------------------\n\nTITLE: Defining PersistentCacheIndexManager Class in TypeScript\nDESCRIPTION: Declares the PersistentCacheIndexManager class which is used to configure persistent cache indexes for local query execution in Firestore.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.persistentcacheindexmanager.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class PersistentCacheIndexManager \n```\n\n----------------------------------------\n\nTITLE: Defining Unsubscribe Interface in TypeScript for Firebase JS SDK\nDESCRIPTION: This code snippet defines the Unsubscribe interface, which represents a function returned by onSnapshot(). When invoked, this function removes the listener that was previously set up.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.unsubscribe.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface Unsubscribe \n```\n\n----------------------------------------\n\nTITLE: Setting Custom Signals for Remote Config in TypeScript\nDESCRIPTION: This function sets custom signals for the app instance in Remote Config. It takes a map of custom signals and persists them locally on the client. Existing signals can be overwritten or unset by passing null as the value.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function setCustomSignals(remoteConfig: RemoteConfig, customSignals: CustomSignals): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Content.parts Property Definition in TypeScript\nDESCRIPTION: Property definition for the parts array of the Content interface, which holds an array of Part objects.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.content.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nparts: Part[];\n```\n\n----------------------------------------\n\nTITLE: Using setPriority in Firebase Realtime Database\nDESCRIPTION: Sets a priority for data at a specific Firebase Database location. While applications don't need to use priority, it can be utilized for ordering collections.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetPriority(ref, priority)\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionResult Class in TypeScript\nDESCRIPTION: This snippet defines the TransactionResult class with its properties and methods. It includes two readonly properties: 'committed' for the transaction status and 'snapshot' for the resulting DataSnapshot. It also declares a toJSON method for serialization.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.transactionresult.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class TransactionResult \n{\n  readonly committed: boolean;\n  readonly snapshot: DataSnapshot;\n  toJSON(): object;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing setItem Method for ReactNativeAsyncStorage\nDESCRIPTION: The setItem method persists an item in storage with the provided key and value. It returns a Promise that resolves to void upon successful storage of the item.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.reactnativeasyncstorage.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetItem(key: string, value: string): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Response Property Type Definition\nDESCRIPTION: Type definition for the response property that returns a Promise containing the complete enhanced generate content response.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentstreamresult.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nresponse: Promise<EnhancedGenerateContentResponse>;\n```\n\n----------------------------------------\n\nTITLE: Update Phone Number Function Signature in Firebase Auth\nDESCRIPTION: TypeScript signature for the updatePhoneNumber function that updates a user's phone number. This function requires a PhoneAuthCredential and doesn't work in Node.js or with FirebaseServerApp instances.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function updatePhoneNumber(user: User, credential: PhoneAuthCredential): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Connect Auth Emulator Function Declaration (TypeScript)\nDESCRIPTION: Function signature for connectAuthEmulator() that configures Auth instance to use local emulator instead of production.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function connectAuthEmulator(auth: Auth, url: string, options?: {\n    disableWarnings: boolean;\n}): void;\n```\n\n----------------------------------------\n\nTITLE: Starting a Chat Session\nDESCRIPTION: Method for creating a new ChatSession instance that can be used for multi-turn conversations with the model.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generativemodel.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nstartChat(startChatParams?: StartChatParams): ChatSession;\n```\n\n----------------------------------------\n\nTITLE: Defining Content Interface in TypeScript for Vertex AI\nDESCRIPTION: TypeScript interface definition for Content, which represents the structure for both prompts and response candidates. It contains two properties: parts (an array of Part objects) and role (a Role type).\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.content.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Content {\n  parts: Part[];\n  role: Role;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Firestore Document ID Function\nDESCRIPTION: TypeScript declaration for creating a special FieldPath that references a document's ID for queries.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function documentId(): FieldPath;\n```\n\n----------------------------------------\n\nTITLE: Checking Firebase Analytics Support\nDESCRIPTION: Checks if Firebase Analytics is supported in the current environment by verifying browser extension status, cookie support, IndexedDB availability, and browser context validity.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function isSupported(): Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Defining SnapshotMetadata Class in TypeScript\nDESCRIPTION: Declaration of the SnapshotMetadata class, which contains metadata about a Firestore snapshot. It includes properties for cache status and pending writes, and a method for equality comparison.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.snapshotmetadata.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class SnapshotMetadata \n```\n\n----------------------------------------\n\nTITLE: Defining ImagenGenerationConfig Interface in TypeScript\nDESCRIPTION: Defines an interface for configuration options used in image generation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @beta\nexport interface ImagenGenerationConfig {\n    addWatermark?: boolean;\n    aspectRatio?: ImagenAspectRatio;\n    imageFormat?: ImagenImageFormat;\n    negativePrompt?: string;\n    numberOfImages?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ReactNativeAsyncStorage Interface in TypeScript\nDESCRIPTION: This snippet defines the ReactNativeAsyncStorage interface with three methods: getItem, removeItem, and setItem. Each method operates asynchronously on key-value pairs in storage.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.reactnativeasyncstorage.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ReactNativeAsyncStorage {\n    getItem(key: string): Promise<string | null>;\n    removeItem(key: string): Promise<void>;\n    setItem(key: string, value: string): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Committing WriteBatch in TypeScript\nDESCRIPTION: Method signature for committing all writes in a WriteBatch as an atomic unit. Returns a Promise that resolves when the writes are successfully committed to the backend.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.writebatch.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncommit(): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Converting Bytes to Uint8Array in TypeScript\nDESCRIPTION: Method to convert the Bytes object to a new Uint8Array. It returns the underlying bytes as a Uint8Array.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.bytes.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntoUint8Array(): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Defining Log Levels for Remote Config in TypeScript\nDESCRIPTION: This type definition specifies the available log levels for Remote Config. It includes options for debug, error, and silent logging.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.md#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LogLevel = 'debug' | 'error' | 'silent';\n```\n\n----------------------------------------\n\nTITLE: Checking IndexedDB Availability in Firebase JS SDK\nDESCRIPTION: This function checks if IndexedDB is available and can be opened in the current environment. It returns a Promise that resolves to a boolean indicating whether IndexedDB is usable.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function validateIndexedDBOpenable(): Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Creating Bytes Object from Base64 String in TypeScript\nDESCRIPTION: Static method to create a new Bytes object from a Base64 string. It converts the string to bytes and returns a new Bytes instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.bytes.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic fromBase64String(base64: string): Bytes;\n```\n\n----------------------------------------\n\nTITLE: Defining CustomData Property in StorageError\nDESCRIPTION: Declaration of the customData property in the StorageError class, which stores a serverResponse string or null.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.storageerror.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncustomData: {\n        serverResponse: string | null;\n    };\n```\n\n----------------------------------------\n\nTITLE: QuerySnapshot forEach Method\nDESCRIPTION: Method that iterates over all documents in the QuerySnapshot, executing a callback function for each document. Takes an optional thisArg parameter for binding the callback context.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.querysnapshot.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nforEach(callback: (result: QueryDocumentSnapshot<AppModelType, DbModelType>) => void, thisArg?: unknown): void;\n```\n\n----------------------------------------\n\nTITLE: FirebaseApp Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for FirebaseApp, which holds initialization information for Firebase services.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseapp.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FirebaseApp \n```\n\n----------------------------------------\n\nTITLE: Implementing Firestore Transaction and WriteBatch Classes in TypeScript\nDESCRIPTION: Defines Transaction and WriteBatch classes for Firestore, enabling atomic operations and batch writes. These classes provide methods for various document operations within a transaction or batch.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore.api.md#2025-04-14_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Transaction {\n    delete<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>): this;\n    get<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>): Promise<DocumentSnapshot<AppModelType, DbModelType>>;\n    set<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, data: WithFieldValue<AppModelType>): this;\n    set<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, data: PartialWithFieldValue<AppModelType>, options: SetOptions): this;\n    update<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, data: UpdateData<DbModelType>): this;\n    update<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, field: string | FieldPath, value: unknown, ...moreFieldsAndValues: unknown[]): this;\n}\n\nexport class WriteBatch {\n    commit(): Promise<void>;\n    delete<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>): WriteBatch;\n    set<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, data: WithFieldValue<AppModelType>): WriteBatch;\n    set<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, data: PartialWithFieldValue<AppModelType>, options: SetOptions): WriteBatch;\n    update<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, data: UpdateData<DbModelType>): WriteBatch;\n}\n```\n\n----------------------------------------\n\nTITLE: TwitterAuthProvider Class Definition in TypeScript\nDESCRIPTION: Base class definition for TwitterAuthProvider that extends BaseOAuthProvider to handle Twitter authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.twitterauthprovider.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class TwitterAuthProvider extends BaseOAuthProvider\n```\n\n----------------------------------------\n\nTITLE: Defining NextOrObserver Type in TypeScript\nDESCRIPTION: Type definition for an event callback in Firebase Authentication that can be either a next function or an observer for handling authentication state changes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_90\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NextOrObserver<T> = NextFn<T | null> | Observer<T | null>;\n```\n\n----------------------------------------\n\nTITLE: Defining the UploadResult Interface in Firebase Storage SDK (TypeScript)\nDESCRIPTION: TypeScript interface definition for UploadResult which is returned from a non-resumable upload operation in Firebase Storage. This interface specifies the structure of the upload result object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.uploadresult.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UploadResult \n```\n\n----------------------------------------\n\nTITLE: Implementing toFirestore Method (Partial Update)\nDESCRIPTION: Overloaded method signature for converting partial application model objects during merge operations. Supports partial updates with merge options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.firestoredataconverter.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntoFirestore(modelObject: PartialWithFieldValue<AppModelType>, options: SetOptions): PartialWithFieldValue<DbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Accessing Underlying Query in AggregateQuerySnapshot\nDESCRIPTION: Defines a readonly property 'query' that returns the Query object over which the aggregations were performed. It uses generic types for application and database models.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.aggregatequerysnapshot.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly query: Query<AppModelType, DbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Unenrolling a Second Factor\nDESCRIPTION: Example showing how to remove an enrolled second factor from a user's account.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.multifactoruser.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst multiFactorUser = multiFactor(auth.currentUser);\n// Present user the option to choose which factor to unenroll.\nawait multiFactorUser.unenroll(multiFactorUser.enrolledFactors[i])\n```\n\n----------------------------------------\n\nTITLE: Defining ImagenSafetySettings Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ImagenSafetySettings, which provides controls for filtering sensitive content in generated images. This interface is part of Firebase's Vertex AI integration and is currently in Public Preview.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagensafetysettings.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ImagenSafetySettings \n```\n\n----------------------------------------\n\nTITLE: Implementing temperature Property in GenerationConfig\nDESCRIPTION: TypeScript property definition for temperature in GenerationConfig interface, which controls randomness in token selection during generation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generationconfig.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntemperature?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining SAMLAuthProvider Class in TypeScript\nDESCRIPTION: Declaration of the SAMLAuthProvider class, extending FederatedAuthProvider. This class provides SAML authentication functionality for Firebase.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.samlauthprovider.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class SAMLAuthProvider extends FederatedAuthProvider \n```\n\n----------------------------------------\n\nTITLE: Implementing GeoPoint Class in TypeScript\nDESCRIPTION: Class definition for Firestore GeoPoint that stores geographical coordinates with latitude and longitude. Includes methods for equality comparison and JSON serialization.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore.api.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class GeoPoint {\n    constructor(latitude: number, longitude: number);\n    isEqual(other: GeoPoint): boolean;\n    get latitude(): number;\n    get longitude(): number;\n    toJSON(): {\n        latitude: number;\n        longitude: number;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: HttpsCallableOptions timeout Property Definition\nDESCRIPTION: Type definition for the timeout property which specifies the maximum time in milliseconds to wait for a response before canceling the request. Defaults to 70000ms.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.httpscallableoptions.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntimeout?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateData Type for Firestore Document Updates in TypeScript\nDESCRIPTION: Defines a type for update data used with updateDoc() function. It allows for nested field updates and supports FieldValue types for special update operations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type UpdateData<T> = T extends Primitive ? T : T extends {} ? {\n    [K in keyof T]?: UpdateData<T[K]> | FieldValue;\n} & NestedUpdateFields<T> : Partial<T>;\n```\n\n----------------------------------------\n\nTITLE: Defining MultiFactorResolver Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for MultiFactorResolver, which includes properties for hints and session, and a method for resolving sign-in.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.multifactorresolver.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MultiFactorResolver {\n  readonly hints: MultiFactorInfo[];\n  readonly session: MultiFactorSession;\n  resolveSignIn(assertion: MultiFactorAssertion): Promise<UserCredential>;\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Argument Count in TypeScript\nDESCRIPTION: This constant function validates the number of arguments passed to a function. It takes the function name, minimum and maximum allowed argument counts, and the actual argument count, throwing an error if the count is invalid.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const validateArgCount: (fnName: string, minCount: number, maxCount: number, argCount: number) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionResponsePart Interface in TypeScript\nDESCRIPTION: This code snippet defines the FunctionResponsePart interface, which represents a content part for a FunctionResponse. It specifies the structure and properties of the interface, including functionCall, functionResponse, inlineData, and text.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.functionresponsepart.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FunctionResponsePart {\n  functionCall?: never;\n  functionResponse: FunctionResponse;\n  inlineData?: never;\n  text?: never;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Analytics Collection State in Firebase\nDESCRIPTION: Type declaration for enabling/disabling analytics collection globally for the app instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function setAnalyticsCollectionEnabled(analyticsInstance: Analytics, enabled: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentData Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for DocumentData which represents the structure of document data in Firestore. Used for type-checking document fields and values when performing operations like setDoc().\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.documentdata.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface DocumentData \n```\n\n----------------------------------------\n\nTITLE: Defining IndexField Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for IndexField that specifies the structure for configuring individual fields in a Firestore cache index. Contains properties for array configuration, field path, and sort order.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.indexfield.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface IndexField \n```\n\n----------------------------------------\n\nTITLE: Defining GtagConfigParams Interface in TypeScript\nDESCRIPTION: This code snippet defines the GtagConfigParams interface, which includes various configuration options for Google Analytics using gtag.js. It specifies properties for controlling advertising features, cookie behavior, and page view tracking.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.gtagconfigparams.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GtagConfigParams \n```\n\n----------------------------------------\n\nTITLE: Defining ActionCodeSettings Interface in TypeScript\nDESCRIPTION: This code snippet defines the ActionCodeSettings interface with its properties. It includes options for Android and iOS app settings, handling code in-app, and specifying URL and domain settings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.actioncodesettings.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ActionCodeSettings {\n  android?: {\n    installApp?: boolean;\n    minimumVersion?: string;\n    packageName: string;\n  };\n  dynamicLinkDomain?: string;\n  handleCodeInApp?: boolean;\n  iOS?: {\n    bundleId: string;\n  };\n  linkDomain?: string;\n  url: string;\n}\n```\n\n----------------------------------------\n\nTITLE: StorageObserver Error Handler Definition\nDESCRIPTION: Definition of the error handler property in the StorageObserver interface. Takes a function that accepts a StorageError parameter or null.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.storageobserver.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nerror?: (error: StorageError) => void | null;\n```\n\n----------------------------------------\n\nTITLE: Defining PerformanceTrace Interface in TypeScript\nDESCRIPTION: This snippet defines the PerformanceTrace interface, which includes methods for managing trace attributes, metrics, and timing.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/performance.performancetrace.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PerformanceTrace {\n  getAttribute(attr: string): string | undefined;\n  getAttributes(): {\n    [key: string]: string;\n  };\n  getMetric(metricName: string): number;\n  incrementMetric(metricName: string, num?: number): void;\n  putAttribute(attr: string, value: string): void;\n  putMetric(metricName: string, num: number): void;\n  record(startTime: number, duration: number, options?: {\n    metrics?: {\n      [key: string]: number;\n    };\n    attributes?: {\n      [key: string]: string;\n    };\n  }): void;\n  removeAttribute(attr: string): void;\n  start(): void;\n  stop(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bytes Class in TypeScript for Firebase JS SDK\nDESCRIPTION: Declares the Bytes class, which represents an immutable array of bytes. This class provides methods for creating, converting, and comparing byte arrays.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.bytes.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Bytes \n```\n\n----------------------------------------\n\nTITLE: Defining ImagenSafetyFilterLevel Enum in TypeScript\nDESCRIPTION: Preview API enum for controlling sensitivity levels of content filtering in image generation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum ImagenSafetyFilterLevel\n```\n\n----------------------------------------\n\nTITLE: Defining MemoryLocalCache Interface in TypeScript\nDESCRIPTION: Declares the MemoryLocalCache interface with a 'kind' property of type 'memory'. This interface is used to provide an in-memory cache to the Firebase SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.memorylocalcache.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface MemoryLocalCache \n{\n    kind: 'memory';\n}\n```\n\n----------------------------------------\n\nTITLE: Detaching Firebase Database Event Listeners\nDESCRIPTION: Method to remove previously attached event listeners from Firebase Database references. Can remove specific callbacks, all callbacks for an event type, or all callbacks for a reference.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\noff(query, eventType, callback)\n```\n\n----------------------------------------\n\nTITLE: Defining CustomErrorData Interface in TypeScript\nDESCRIPTION: Interface definition for CustomErrorData that contains error response data including error details, response content, and HTTP status information.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.customerrordata.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CustomErrorData\n```\n\n----------------------------------------\n\nTITLE: Defining HarmCategory Enum in TypeScript\nDESCRIPTION: Defines an enum for different harm categories used in content moderation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum HarmCategory {\n    LOW = \"LOW\",\n    MEDIUM = \"MEDIUM\",\n    NEGLIGIBLE = \"NEGLIGIBLE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Text Helper Method Declaration in TypeScript\nDESCRIPTION: Method declaration that extracts the text string from the response. Throws an error if the prompt or candidate response was blocked by content safety filters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.enhancedgeneratecontentresponse.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntext: () => string;\n```\n\n----------------------------------------\n\nTITLE: Configuring reCAPTCHA Enterprise for Phone Verification Testing\nDESCRIPTION: cURL command to enable and enforce reCAPTCHA Enterprise for phone authentication. This configuration sets the phone enforcement state to ENFORCE and enables SMS bot score and toll fraud protection features.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl   -H \"Authorization: Bearer $(gcloud auth print-access-token)\"   -H \"Content-Type: application/json\"   -H \"X-Goog-User-Project: $\n{PROJECT_ID}\"   -X POST https://identitytoolkit.googleapis.com/v2/projects/${PROJECT_ID}/config?updateMask=recaptchaConfig.phoneEnforcementState,recaptchaConfig.useSmsBotScore,recaptchaConfig.useSmsTollFraudProtection  -d '\n{\n  \"name\": \"projects/{PROJECT_ID}\",\n  \"recaptchaConfig\": {\n    \"phoneEnforcementState\": \"ENFORCE\",\n    \"useSmsBotScore\": \"true\",\n    \"useSmsTollFraudProtection\": \"true\",\n  },\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing toJSON Method in EmailAuthCredential\nDESCRIPTION: Method that converts an EmailAuthCredential instance to a JSON-serializable representation for storage or transmission.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.emailauthcredential.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntoJSON(): object;\n```\n\n----------------------------------------\n\nTITLE: Querying across collections in Firestore JavaScript SDK\nDESCRIPTION: Shows how to use the collectionGroup() method to query across all collections in the database with a given collection ID.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = firebase.firestore().collectionGroup('posts');\n```\n\n----------------------------------------\n\nTITLE: Declaring AggregateSpec Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for AggregateSpec, which defines the structure for specifying aggregation operations in Firebase queries. This interface is exported for use in the Firebase JS SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.aggregatespec.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface AggregateSpec \n```\n\n----------------------------------------\n\nTITLE: Enabling Logging in Firebase Database\nDESCRIPTION: Configures debug logging with options for persistence between page refreshes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function enableLogging(enabled: boolean, persistent?: boolean): any;\n```\n\n----------------------------------------\n\nTITLE: Constructing GeoPoint Object in TypeScript for Firebase JS SDK\nDESCRIPTION: Defines the constructor for the GeoPoint class, which takes latitude and longitude as parameters to create a new immutable GeoPoint object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.geopoint.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(latitude: number, longitude: number);\n```\n\n----------------------------------------\n\nTITLE: HarmBlockThreshold Enumeration in TypeScript\nDESCRIPTION: Enumeration defining thresholds above which prompts or candidates will be blocked, ranging from allowing all content to blocking most content.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum HarmBlockThreshold \n{\n  BLOCK_LOW_AND_ABOVE = \"BLOCK_LOW_AND_ABOVE\",\n  BLOCK_MEDIUM_AND_ABOVE = \"BLOCK_MEDIUM_AND_ABOVE\",\n  BLOCK_NONE = \"BLOCK_NONE\",\n  BLOCK_ONLY_HIGH = \"BLOCK_ONLY_HIGH\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ReCaptchaEnterpriseProvider Class in TypeScript\nDESCRIPTION: This snippet declares the ReCaptchaEnterpriseProvider class, which implements the AppCheckProvider interface. It is used to obtain reCAPTCHA Enterprise tokens and exchange them for App Check tokens.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.recaptchaenterpriseprovider.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class ReCaptchaEnterpriseProvider implements AppCheckProvider \n```\n\n----------------------------------------\n\nTITLE: JSON Serialization with DataSnapshot.toJSON()\nDESCRIPTION: Method to create a JSON-serializable representation of a DataSnapshot object. Returns either an object or null.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.datasnapshot.md#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntoJSON(): object | null;\n```\n\n----------------------------------------\n\nTITLE: Defining AnalyticsCallOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for AnalyticsCallOptions that can be passed to Analytics method calls such as logEvent. It specifies additional options for controlling analytics behavior.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.analyticscalloptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AnalyticsCallOptions \n```\n```\n\n----------------------------------------\n\nTITLE: Defining FcmOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the FcmOptions interface with two optional properties: analyticsLabel and link. It is used to specify options for FCM (Firebase Cloud Messaging) features in web applications.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_sw.fcmoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FcmOptions \n{\n  analyticsLabel?: string;\n  link?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConsentSettings Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ConsentSettings that specifies various consent type configurations for GA4 integration.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.consentsettings.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ConsentSettings \n```\n\n----------------------------------------\n\nTITLE: QuerySnapshot Docs Getter Method\nDESCRIPTION: Getter method that returns an array of QueryDocumentSnapshot objects representing all documents in the query result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.querysnapshot.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget docs(): Array<QueryDocumentSnapshot<AppModelType, DbModelType>>;\n```\n\n----------------------------------------\n\nTITLE: Defining CustomParams Interface in TypeScript\nDESCRIPTION: This code snippet defines the CustomParams interface. It represents any custom parameters that a user may pass to the 'gtag' function. The interface is exported, allowing it to be used in other parts of the codebase.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.customparams.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CustomParams \n```\n\n----------------------------------------\n\nTITLE: Defining QuerySnapshot Class in TypeScript\nDESCRIPTION: Class definition for QuerySnapshot that contains zero or more DocumentSnapshot objects representing query results. The class is generic, accepting AppModelType and DbModelType type parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.querysnapshot.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class QuerySnapshot<AppModelType = DocumentData, DbModelType extends DocumentData = DocumentData>\n```\n\n----------------------------------------\n\nTITLE: Implementing signal Property for Stream Control\nDESCRIPTION: Optional AbortSignal property that enables cancellation of streaming responses by terminating the underlying HTTP connection.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.httpscallablestreamoptions.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsignal?: AbortSignal;\n```\n\n----------------------------------------\n\nTITLE: ActionCodeInfo Operation Property Type Definition\nDESCRIPTION: Defines the operation property type that indicates the type of action code operation being performed.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.actioncodeinfo.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noperation: (typeof ActionCodeOperationMap)[keyof typeof ActionCodeOperationMap];\n```\n\n----------------------------------------\n\nTITLE: Defining WhereFilterOp Type for Firestore Query Filters in TypeScript\nDESCRIPTION: Specifies the allowed filter operators for Firestore where() queries. It includes comparison operators and array-specific operators.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type WhereFilterOp = '<' | '<=' | '==' | '!=' | '>=' | '>' | 'array-contains' | 'in' | 'array-contains-any' | 'not-in';\n```\n\n----------------------------------------\n\nTITLE: Defining GenerateContentResponse Interface in TypeScript for Vertex AI\nDESCRIPTION: TypeScript interface definition for GenerateContentResponse used in Vertex AI generative models. This interface represents the response structure returned by generateContent() and generateContentStream() methods, containing optional arrays of candidates, prompt feedback, and usage metadata.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentresponse.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GenerateContentResponse \n```\n\n----------------------------------------\n\nTITLE: Defining QueryConstraint Abstract Class in TypeScript\nDESCRIPTION: This snippet defines the abstract QueryConstraint class used to narrow the set of documents returned by a Firestore query. It includes an abstract readonly property 'type' of QueryConstraintType.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.queryconstraint.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class QueryConstraint \n{\n    abstract readonly type: QueryConstraintType;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration and Settings Functions in Firebase Analytics\nDESCRIPTION: TypeScript function signatures for various analytics configuration methods including consent settings, user properties, and analytics collection toggling.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/analytics.api.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport function setAnalyticsCollectionEnabled(analyticsInstance: Analytics, enabled: boolean): void;\n\nexport function setConsent(consentSettings: ConsentSettings): void;\n\nexport function setCurrentScreen(analyticsInstance: Analytics, screenName: string, options?: AnalyticsCallOptions): void;\n\nexport function setDefaultEventParameters(customParams: CustomParams): void;\n\nexport function settings(options: SettingsOptions): void;\n\nexport function setUserId(analyticsInstance: Analytics, id: string | null, options?: AnalyticsCallOptions): void;\n\nexport function setUserProperties(analyticsInstance: Analytics, properties: CustomParams, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Defining FieldPath Class in TypeScript\nDESCRIPTION: Declares the FieldPath class for representing field paths in Firestore documents. It includes a constructor for creating field paths and a method for comparing equality with other FieldPath instances.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.fieldpath.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class FieldPath \n```\n\n----------------------------------------\n\nTITLE: Defining ErrorDetails Interface in TypeScript\nDESCRIPTION: Interface definition for ErrorDetails which provides structured information about errors in the Firebase JS SDK. This interface contains properties for error type, domain, reason, and additional metadata.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.errordetails.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ErrorDetails \n```\n\n----------------------------------------\n\nTITLE: Defining PersistenceSettings Interface in TypeScript\nDESCRIPTION: Interface definition for PersistenceSettings that configures Firestore persistence options. Used with enableIndexedDbPersistence() method and includes options for forcing persistence ownership.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.persistencesettings.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface PersistenceSettings \n```\n\n----------------------------------------\n\nTITLE: RecaptchaVerifier Verify Method\nDESCRIPTION: Method signature for verifying the reCAPTCHA response, returns a Promise resolving with the reCAPTCHA token.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.recaptchaverifier.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nverify(): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: StorageObserver Complete Handler Definition\nDESCRIPTION: Definition of the complete handler property in the StorageObserver interface. Accepts a CompleteFn type or null.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.storageobserver.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncomplete?: CompleteFn | null;\n```\n\n----------------------------------------\n\nTITLE: Implementing frequencyPenalty Property in GenerationConfig\nDESCRIPTION: TypeScript property definition for frequencyPenalty in GenerationConfig interface, which adjusts penalties for frequently used tokens.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generationconfig.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfrequencyPenalty?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Firestore Index Interface in TypeScript\nDESCRIPTION: This snippet defines the Index interface for Firestore. It includes properties for the collection group and an array of indexed fields. The interface is marked as a preview feature and is now considered obsolete.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.index.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface Index {\n  readonly collectionGroup: string;\n  readonly fields?: IndexField[];\n}\n```\n\n----------------------------------------\n\nTITLE: Update Email Function Signature in Firebase Auth\nDESCRIPTION: TypeScript signature for the updateEmail function that changes a user's email address. This security-sensitive operation may require recent authentication and is not supported for users from FirebaseServerApp instances.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function updateEmail(user: User, newEmail: string): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining the tools Property in GenerateContentRequest Interface\nDESCRIPTION: Specifies the optional tools property which is an array of Tool objects.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentrequest.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntools?: Tool[];\n```\n\n----------------------------------------\n\nTITLE: Alternative Phone Authentication Flow\nDESCRIPTION: Alternative approach to phone authentication using signInWithPhoneNumber method instead of PhoneAuthProvider directly.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phoneauthprovider.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n// Obtain verificationCode from the user.\nconst userCredential = await confirmationResult.confirm(verificationCode);\n```\n\n----------------------------------------\n\nTITLE: VertexAIError Constructor Implementation in TypeScript\nDESCRIPTION: Constructor for the VertexAIError class that accepts an error code, message, and optional custom error data.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.vertexaierror.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(code: VertexAIErrorCode, message: string, customErrorData?: CustomErrorData | undefined);\n```\n\n----------------------------------------\n\nTITLE: Implementing generateSecret Method in TotpMultiFactorGenerator\nDESCRIPTION: Static method that generates a TotpSecret containing the shared secret key and other TOTP parameters for enrolling a TOTP second factor.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.totpmultifactorgenerator.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstatic generateSecret(session: MultiFactorSession): Promise<TotpSecret>;\n```\n\n----------------------------------------\n\nTITLE: Implementing ObjectSchema Constructor in TypeScript\nDESCRIPTION: Constructor for the ObjectSchema class that accepts schema parameters, a properties map, and an optional array of property names that are optional.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.objectschema.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(schemaParams: SchemaParams, properties: {\n        [k: string]: TypedSchema;\n    }, optionalProperties?: string[]);\n```\n\n----------------------------------------\n\nTITLE: Complete Firebase Performance TypeScript API Definition\nDESCRIPTION: This TypeScript code defines the full public API for Firebase Performance monitoring. It includes interfaces for FirebasePerformance, PerformanceSettings, and PerformanceTrace, as well as functions to initialize performance monitoring, get the performance instance, and create traces.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/performance.api.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FirebaseApp } from '@firebase/app';\n\n// @public\nexport interface FirebasePerformance {\n    app: FirebaseApp;\n    dataCollectionEnabled: boolean;\n    instrumentationEnabled: boolean;\n}\n\n// @public\nexport function getPerformance(app?: FirebaseApp): FirebasePerformance;\n\n// @public\nexport function initializePerformance(app: FirebaseApp, settings?: PerformanceSettings): FirebasePerformance;\n\n// @public\nexport interface PerformanceSettings {\n    dataCollectionEnabled?: boolean;\n    instrumentationEnabled?: boolean;\n}\n\n// @public\nexport interface PerformanceTrace {\n    getAttribute(attr: string): string | undefined;\n    getAttributes(): {\n        [key: string]: string;\n    };\n    getMetric(metricName: string): number;\n    incrementMetric(metricName: string, num?: number): void;\n    putAttribute(attr: string, value: string): void;\n    putMetric(metricName: string, num: number): void;\n    record(startTime: number, duration: number, options?: {\n        metrics?: {\n            [key: string]: number;\n        };\n        attributes?: {\n            [key: string]: string;\n        };\n    }): void;\n    removeAttribute(attr: string): void;\n    start(): void;\n    stop(): void;\n}\n\n// @public\nexport function trace(performance: FirebasePerformance, name: string): PerformanceTrace;\n```\n\n----------------------------------------\n\nTITLE: Firestore Aggregate Field Type Definition\nDESCRIPTION: Type definition for supported aggregate field types in Firestore, combining sum, average, and count operations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type AggregateFieldType = ReturnType<typeof sum> | ReturnType<typeof average> | ReturnType<typeof count>;\n```\n\n----------------------------------------\n\nTITLE: FieldPath Equality Comparison Method\nDESCRIPTION: Method implementation for comparing two FieldPath instances to check if they reference the same field path.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.fieldpath.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisEqual(other: FieldPath): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining NumberSchema Class in TypeScript\nDESCRIPTION: This code snippet defines the NumberSchema class, which extends the Schema class. It is used for creating schemas for 'number' types in the Firebase JavaScript SDK. The class has a constructor that optionally accepts SchemaParams.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.numberschema.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class NumberSchema extends Schema \n{\n    constructor(schemaParams?: SchemaParams);\n}\n```\n\n----------------------------------------\n\nTITLE: Content Part Type Definition in TypeScript\nDESCRIPTION: Type definition for content parts that can be used in generative model interactions, including text, inline data, function calls, function responses, and file data.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Part = TextPart | InlineDataPart | FunctionCallPart | FunctionResponsePart | FileDataPart;\n```\n\n----------------------------------------\n\nTITLE: IndexField arrayConfig Property Type Definition\nDESCRIPTION: Type definition for the arrayConfig property used to specify array indexing configuration. Used for array-contains and array-contains-any indexes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.indexfield.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly arrayConfig?: 'CONTAINS';\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationPayload Interface in TypeScript\nDESCRIPTION: Interface definition for notification payload structure in Firebase Cloud Messaging. Specifies the properties for notification title, body, icon, and image URLs.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_sw.notificationpayload.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NotificationPayload\n```\n\n----------------------------------------\n\nTITLE: Defining FcmOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the FcmOptions interface with two optional properties: analyticsLabel and link. It is used to specify options for FCM features in web applications.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.fcmoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FcmOptions \n{\n  analyticsLabel?: string;\n  link?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Undefined Properties Handling\nDESCRIPTION: Property definition for controlling how undefined properties are handled during serialization.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestoresettings.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nignoreUndefinedProperties?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationPayload Interface in TypeScript\nDESCRIPTION: This snippet defines the NotificationPayload interface with properties for notification details. It includes optional fields for body, icon, image, and title of the notification.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.notificationpayload.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NotificationPayload \n{\n  body?: string;\n  icon?: string;\n  image?: string;\n  title?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Constructor in TypeScript for Firebase JavaScript SDK\nDESCRIPTION: This snippet shows the constructor signature for the Query class. It is a protected constructor with no parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.query.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprotected constructor();\n```\n\n----------------------------------------\n\nTITLE: Declaring Firestore Array Remove Function\nDESCRIPTION: TypeScript declaration for creating a special value to remove elements from array fields.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function arrayRemove(...elements: unknown[]): FieldValue;\n```\n\n----------------------------------------\n\nTITLE: Defining QueryLimitConstraint Class in TypeScript\nDESCRIPTION: This snippet defines the QueryLimitConstraint class that extends QueryConstraint. It is used to create limit constraints for Firestore queries using limit() or limitToLast() methods.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.querylimitconstraint.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class QueryLimitConstraint extends QueryConstraint \n```\n\n----------------------------------------\n\nTITLE: providerId Property Definition in AdditionalUserInfo\nDESCRIPTION: Defines the providerId property which identifies the provider used to authenticate the user, such as Google, Facebook, or Twitter.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.additionaluserinfo.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly providerId: string | null;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionsErrorCodeCore Type in TypeScript\nDESCRIPTION: This TypeScript type definition enumerates all possible core error code values for Firebase Functions. These codes match gRPC status codes and represent various error conditions from 'ok' to 'unauthenticated'.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FunctionsErrorCodeCore = 'ok' | 'cancelled' | 'unknown' | 'invalid-argument' | 'deadline-exceeded' | 'not-found' | 'already-exists' | 'permission-denied' | 'resource-exhausted' | 'failed-precondition' | 'aborted' | 'out-of-range' | 'unimplemented' | 'internal' | 'unavailable' | 'data-loss' | 'unauthenticated';\n```\n\n----------------------------------------\n\nTITLE: Creating Bytes from Uint8Array in TypeScript\nDESCRIPTION: Static method to create a new Bytes object from a Uint8Array. It uses the provided Uint8Array to initialize the Bytes object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.bytes.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic fromUint8Array(array: Uint8Array): Bytes;\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentChange Interface in TypeScript\nDESCRIPTION: This code snippet defines the DocumentChange interface in TypeScript. It represents changes to documents matching a query and includes generic types for application and database models.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.documentchange.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface DocumentChange<AppModelType = DocumentData, DbModelType extends DocumentData = DocumentData> \n```\n\n----------------------------------------\n\nTITLE: Declaring Firestore Array Union Function\nDESCRIPTION: TypeScript declaration for creating a special value to add unique elements to array fields.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function arrayUnion(...elements: unknown[]): FieldValue;\n```\n\n----------------------------------------\n\nTITLE: Implementing toArray Method for VectorValue in TypeScript\nDESCRIPTION: This method returns a copy of the raw number array form of the vector. It allows access to the underlying data of the VectorValue instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.vectorvalue.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntoArray(): number[];\n```\n\n----------------------------------------\n\nTITLE: Firebase Realtime Database API TypeScript Definitions\nDESCRIPTION: Complete TypeScript type definitions for the Firebase Realtime Database SDK (@firebase/database). Includes classes, interfaces, and function signatures for database operations, queries, listeners, and data manipulation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/database.api.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EmulatorMockTokenOptions } from '@firebase/util';\nimport { FirebaseApp } from '@firebase/app';\n\n// @public\nexport function child(parent: DatabaseReference, path: string): DatabaseReference;\n\n// @public\nexport function connectDatabaseEmulator(db: Database, host: string, port: number, options?: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n}): void;\n\n// @public\nexport class Database {\n    readonly app: FirebaseApp;\n    readonly 'type' = \"database\";\n}\n\n// @public\nexport interface DatabaseReference extends Query {\n    readonly key: string | null;\n    readonly parent: DatabaseReference | null;\n    readonly root: DatabaseReference;\n}\n\n// @public\nexport class DataSnapshot {\n    child(path: string): DataSnapshot;\n    exists(): boolean;\n    exportVal(): any;\n    forEach(action: (child: IteratedDataSnapshot) => boolean | void): boolean;\n    hasChild(path: string): boolean;\n    hasChildren(): boolean;\n    get key(): string | null;\n    get priority(): string | number | null;\n    readonly ref: DatabaseReference;\n    get size(): number;\n    toJSON(): object | null;\n    val(): any;\n}\n\nexport { EmulatorMockTokenOptions }\n\n// @public\nexport function enableLogging(enabled: boolean, persistent?: boolean): any;\n\n// @public\nexport function enableLogging(logger: (message: string) => unknown): any;\n\n// @public\nexport function endAt(value: number | string | boolean | null, key?: string): QueryConstraint;\n\n// @public\nexport function endBefore(value: number | string | boolean | null, key?: string): QueryConstraint;\n\n// @public\nexport function equalTo(value: number | string | boolean | null, key?: string): QueryConstraint;\n\n// @public\nexport type EventType = 'value' | 'child_added' | 'child_changed' | 'child_moved' | 'child_removed';\n\n// @public\nexport function forceLongPolling(): void;\n\n// @public\nexport function forceWebSockets(): void;\n\n// @public\nexport function get(query: Query): Promise<DataSnapshot>;\n\n// @public\nexport function getDatabase(app?: FirebaseApp, url?: string): Database;\n\n// @public\nexport function goOffline(db: Database): void;\n\n// @public\nexport function goOnline(db: Database): void;\n\n// @public\nexport function increment(delta: number): object;\n\n// @public\nexport interface IteratedDataSnapshot extends DataSnapshot {\n    // (undocumented)\n    key: string;\n}\n\n// @public\nexport function limitToFirst(limit: number): QueryConstraint;\n\n// @public\nexport function limitToLast(limit: number): QueryConstraint;\n\n// @public\nexport interface ListenOptions {\n    readonly onlyOnce?: boolean;\n}\n\n// @public\nexport function off(query: Query, eventType?: EventType, callback?: (snapshot: DataSnapshot, previousChildName?: string | null) => unknown): void;\n\n// @public\nexport function onChildAdded(query: Query, callback: (snapshot: DataSnapshot, previousChildName?: string | null) => unknown, cancelCallback?: (error: Error) => unknown): Unsubscribe;\n\n// @public\nexport function onChildAdded(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, options: ListenOptions): Unsubscribe;\n\n// @public\nexport function onChildAdded(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, cancelCallback: (error: Error) => unknown, options: ListenOptions): Unsubscribe;\n\n// @public\nexport function onChildChanged(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, cancelCallback?: (error: Error) => unknown): Unsubscribe;\n\n// @public\nexport function onChildChanged(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, options: ListenOptions): Unsubscribe;\n\n// @public\nexport function onChildChanged(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, cancelCallback: (error: Error) => unknown, options: ListenOptions): Unsubscribe;\n\n// @public\nexport function onChildMoved(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, cancelCallback?: (error: Error) => unknown): Unsubscribe;\n\n// @public\nexport function onChildMoved(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, options: ListenOptions): Unsubscribe;\n\n// @public\nexport function onChildMoved(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, cancelCallback: (error: Error) => unknown, options: ListenOptions): Unsubscribe;\n\n// @public\nexport function onChildRemoved(query: Query, callback: (snapshot: DataSnapshot) => unknown, cancelCallback?: (error: Error) => unknown): Unsubscribe;\n\n// @public\nexport function onChildRemoved(query: Query, callback: (snapshot: DataSnapshot) => unknown, options: ListenOptions): Unsubscribe;\n\n// @public\nexport function onChildRemoved(query: Query, callback: (snapshot: DataSnapshot) => unknown, cancelCallback: (error: Error) => unknown, options: ListenOptions): Unsubscribe;\n\n// @public\nexport class OnDisconnect {\n    cancel(): Promise<void>;\n    remove(): Promise<void>;\n    set(value: unknown): Promise<void>;\n    setWithPriority(value: unknown, priority: number | string | null): Promise<void>;\n    update(values: object): Promise<void>;\n}\n\n// @public\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect;\n\n// @public\nexport function onValue(query: Query, callback: (snapshot: DataSnapshot) => unknown, cancelCallback?: (error: Error) => unknown): Unsubscribe;\n\n// @public\nexport function onValue(query: Query, callback: (snapshot: DataSnapshot) => unknown, options: ListenOptions): Unsubscribe;\n\n// @public\nexport function onValue(query: Query, callback: (snapshot: DataSnapshot) => unknown, cancelCallback: (error: Error) => unknown, options: ListenOptions): Unsubscribe;\n\n// @public\nexport function orderByChild(path: string): QueryConstraint;\n\n// @public\nexport function orderByKey(): QueryConstraint;\n\n// @public\nexport function orderByPriority(): QueryConstraint;\n\n// @public\nexport function orderByValue(): QueryConstraint;\n\n// @public\nexport function push(parent: DatabaseReference, value?: unknown): ThenableReference;\n\n// @public\nexport interface Query {\n    isEqual(other: Query | null): boolean;\n    readonly ref: DatabaseReference;\n    toJSON(): string;\n    toString(): string;\n}\n\n// @public\nexport function query(query: Query, ...queryConstraints: QueryConstraint[]): Query;\n\n// @public\nexport abstract class QueryConstraint {\n    abstract readonly type: QueryConstraintType;\n}\n\n// @public\nexport type QueryConstraintType = 'endAt' | 'endBefore' | 'startAt' | 'startAfter' | 'limitToFirst' | 'limitToLast' | 'orderByChild' | 'orderByKey' | 'orderByPriority' | 'orderByValue' | 'equalTo';\n\n// @public\nexport function ref(db: Database, path?: string): DatabaseReference;\n\n// @public\nexport function refFromURL(db: Database, url: string): DatabaseReference;\n\n// @public\nexport function remove(ref: DatabaseReference): Promise<void>;\n\n// @public\nexport function runTransaction(ref: DatabaseReference, transactionUpdate: (currentData: any) => unknown, options?: TransactionOptions): Promise<TransactionResult>;\n\n// @public\nexport function serverTimestamp(): object;\n\n// @public\nexport function set(ref: DatabaseReference, value: unknown): Promise<void>;\n\n// @public\nexport function setPriority(ref: DatabaseReference, priority: string | number | null): Promise<void>;\n\n// @public\nexport function setWithPriority(ref: DatabaseReference, value: unknown, priority: string | number | null): Promise<void>;\n\n// @public\nexport function startAfter(value: number | string | boolean | null, key?: string): QueryConstraint;\n\n// @public\nexport function startAt(value?: number | string | boolean | null, key?: string): QueryConstraint;\n\n// @public\nexport interface ThenableReference extends DatabaseReference, Pick<Promise<DatabaseReference>, 'then' | 'catch'> {\n    // (undocumented)\n    key: string;\n    // (undocumented)\n    parent: DatabaseReference;\n}\n\n// @public\nexport interface TransactionOptions {\n    readonly applyLocally?: boolean;\n}\n\n// @public\nexport class TransactionResult {\n    readonly committed: boolean;\n    readonly snapshot: DataSnapshot;\n    toJSON(): object;\n}\n\n// @public\nexport type Unsubscribe = () => void;\n\n// @public\nexport function update(ref: DatabaseReference, values: object): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Accessing App Configuration Options in JavaScript\nDESCRIPTION: Example showing how to access the configuration options of a Firebase app, demonstrating that they match the original initialization parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseapp.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = initializeApp(config);\nconsole.log(app.options.databaseURL === config.databaseURL);  // true\n```\n\n----------------------------------------\n\nTITLE: Defining SnapshotOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for SnapshotOptions that specifies configuration options for DocumentSnapshot data retrieval. The interface includes a serverTimestamps property that controls how pending server timestamps are handled.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.snapshotoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface SnapshotOptions \n```\n\n----------------------------------------\n\nTITLE: Defining IteratedDataSnapshot Interface in TypeScript\nDESCRIPTION: Interface declaration for IteratedDataSnapshot that extends DataSnapshot. This interface ensures that child snapshots being iterated have a defined key property of type string.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.iterateddatasnapshot.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface IteratedDataSnapshot extends DataSnapshot \n```\n\n----------------------------------------\n\nTITLE: Constructing ReCaptchaEnterpriseProvider in TypeScript\nDESCRIPTION: This snippet shows the constructor signature for the ReCaptchaEnterpriseProvider class. It takes a single parameter '_siteKey' of type string, which is used to create a new instance of the provider.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.recaptchaenterpriseprovider.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(_siteKey: string);\n```\n\n----------------------------------------\n\nTITLE: Defining GetTokenOptions Interface for Firebase Messaging\nDESCRIPTION: TypeScript interface that defines the configuration options when requesting an FCM registration token. Includes optional parameters for service worker registration and VAPID key configuration.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.gettokenoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GetTokenOptions \n```\n\n----------------------------------------\n\nTITLE: Logging Page Views in Firebase Analytics\nDESCRIPTION: Type declaration for logging page_view events with title, location and path parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'page_view', eventParams?: {\n    page_title?: string;\n    page_location?: string;\n    page_path?: string;\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Defining safetySettings Property Type\nDESCRIPTION: Type definition for the safetySettings property that configures content filtering and safety parameters for image generation. This is marked as a preview API feature.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagenmodelparams.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsafetySettings?: ImagenSafetySettings;\n```\n\n----------------------------------------\n\nTITLE: DocumentSnapshot Constructor Signature\nDESCRIPTION: Protected constructor signature for creating new DocumentSnapshot instances.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.documentsnapshot.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprotected constructor();\n```\n\n----------------------------------------\n\nTITLE: Tool Type Definition in TypeScript\nDESCRIPTION: Type definition for a tool that a model can call to access external knowledge, currently limited to function declaration tools.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type Tool = FunctionDeclarationsTool;\n```\n\n----------------------------------------\n\nTITLE: RecaptchaVerifier Constructor Implementation\nDESCRIPTION: Constructor signature for creating a new RecaptchaVerifier instance. Takes Auth instance, container element or ID, and optional parameters for configuring the reCAPTCHA widget.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.recaptchaverifier.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(authExtern: Auth, containerOrId: HTMLElement | string, parameters?: RecaptchaParameters);\n```\n\n----------------------------------------\n\nTITLE: FullMetadata Full Path Property\nDESCRIPTION: TypeScript property definition for the complete path of the storage object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.fullmetadata.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfullPath: string;\n```\n\n----------------------------------------\n\nTITLE: QuerySnapshot Query Property\nDESCRIPTION: Read-only property that returns the original Query object used to obtain this QuerySnapshot.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.querysnapshot.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly query: Query<AppModelType, DbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Defining SafetySetting Interface in TypeScript\nDESCRIPTION: Main interface definition for SafetySetting that specifies the structure for safety configuration parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.safetysetting.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SafetySetting \n```\n\n----------------------------------------\n\nTITLE: Declaring phoneNumber Property in UserInfo Interface\nDESCRIPTION: This snippet shows the declaration of the phoneNumber property in the UserInfo interface. It is a readonly property that can be either a string or null, representing the user's phone number normalized to the E.164 standard.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.userinfo.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly phoneNumber: string | null;\n```\n\n----------------------------------------\n\nTITLE: Defining GroundingMetadata Interface in TypeScript\nDESCRIPTION: This code snippet defines the GroundingMetadata interface with three properties: groundingAttributions, retrievalQueries, and webSearchQueries. It specifies the types for each property and includes a deprecation warning for groundingAttributions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.groundingmetadata.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GroundingMetadata {\n    groundingAttributions: GroundingAttribution[];\n    retrievalQueries?: string[];\n    webSearchQueries?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Event Names Type Definition\nDESCRIPTION: Type definition for standard Google Analytics event names. The logEvent function accepts these standard names as well as any custom string as a custom event name.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EventNameString = 'add_payment_info' | 'add_shipping_info' | 'add_to_cart' | 'add_to_wishlist' | 'begin_checkout' | 'checkout_progress' | 'exception' | 'generate_lead' | 'login' | 'page_view' | 'purchase' | 'refund' | 'remove_from_cart' | 'screen_view' | 'search' | 'select_content' | 'select_item' | 'select_promotion' | 'set_checkout_option' | 'share' | 'sign_up' | 'timing_complete' | 'view_cart' | 'view_item' | 'view_item_list' | 'view_promotion' | 'view_search_results';\n```\n\n----------------------------------------\n\nTITLE: Defining IndexConfiguration Interface in TypeScript\nDESCRIPTION: Interface declaration for IndexConfiguration that specifies the structure for Firestore index configurations. Contains a property 'indexes' which is an array of Index objects used to define custom indexes for query optimization.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.indexconfiguration.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface IndexConfiguration \n```\n\n----------------------------------------\n\nTITLE: Updating Document Fields in WriteBatch (TypeScript)\nDESCRIPTION: Method signature for updating fields in a document using a WriteBatch. Takes a DocumentReference and an update data object as parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.writebatch.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nupdate<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, data: UpdateData<DbModelType>): WriteBatch;\n```\n\n----------------------------------------\n\nTITLE: FunctionsError Constructor Implementation\nDESCRIPTION: Constructor signature for creating new FunctionsError instances. Takes an error code, optional message string, and optional details that can be included in the error response.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.functionserror.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(\n    code: FunctionsErrorCode, message?: string, \n    details?: unknown);\n```\n\n----------------------------------------\n\nTITLE: Defining SettableMetadata Interface in TypeScript\nDESCRIPTION: This snippet defines the SettableMetadata interface, which includes properties for various HTTP headers and custom metadata that can be set on storage objects.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.settablemetadata.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SettableMetadata {\n    cacheControl?: string | undefined;\n    contentDisposition?: string | undefined;\n    contentEncoding?: string | undefined;\n    contentLanguage?: string | undefined;\n    contentType?: string | undefined;\n    customMetadata?: {\n        [key: string]: string;\n    } | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GenerateContentResult Interface in TypeScript for Vertex AI\nDESCRIPTION: TypeScript interface definition for GenerateContentResult, which is returned by the generateContent() method of GenerativeModel. It contains a single property 'response' of type EnhancedGenerateContentResponse.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentresult.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GenerateContentResult \n\n```\n\n----------------------------------------\n\nTITLE: Value Interface Definition in TypeScript\nDESCRIPTION: Interface definition for the Value type that wraps Remote Config values with metadata and type-safe getters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.value.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Value \n```\n\n----------------------------------------\n\nTITLE: Token Expiration Property Definition\nDESCRIPTION: Property definition for exp that indicates when the token expires.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.parsedtoken.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'exp'?: string;\n```\n\n----------------------------------------\n\nTITLE: Creating QueryLimitConstraint in TypeScript\nDESCRIPTION: Creates a QueryLimitConstraint that only returns the first matching documents.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function limit(limit: number): QueryLimitConstraint;\n```\n\n----------------------------------------\n\nTITLE: QueryCompositeFilterConstraint Class Definition in TypeScript\nDESCRIPTION: Defines the QueryCompositeFilterConstraint class which is used to combine multiple query constraints in Firestore queries. The class includes a type property that specifies whether it's an 'or' or 'and' operation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.querycompositefilterconstraint.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class QueryCompositeFilterConstraint \n```\n\n----------------------------------------\n\nTITLE: Defining Bytes Class in TypeScript\nDESCRIPTION: Declaration of the Bytes class, which represents an immutable array of bytes. This class provides methods for creating, comparing, and converting byte arrays.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.bytes.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Bytes \n```\n\n----------------------------------------\n\nTITLE: Declaring GetTokenOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for GetTokenOptions which specifies the configuration parameters when requesting an FCM registration token.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_sw.gettokenoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GetTokenOptions \n```\n\n----------------------------------------\n\nTITLE: Defining PhoneMultiFactorInfo Interface in TypeScript\nDESCRIPTION: This code snippet defines the PhoneMultiFactorInfo interface, which extends MultiFactorInfo. It represents a phone number second factor in Firebase Authentication and includes a readonly phoneNumber property.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phonemultifactorinfo.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PhoneMultiFactorInfo extends MultiFactorInfo {\n  readonly phoneNumber: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AppCheckToken Interface in TypeScript\nDESCRIPTION: This snippet defines the AppCheckToken interface that represents the token returned from an App Check provider. It contains a token string and an expiration time in milliseconds.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.appchecktoken.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AppCheckToken {\n  readonly token: string;\n  readonly expireTimeMillis: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RemoteConfig Interface in TypeScript\nDESCRIPTION: This snippet defines the RemoteConfig interface for the Firebase Remote Config service. It includes properties for app association, default config, fetch time, fetch status, and settings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.remoteconfig.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RemoteConfig {\n  app: FirebaseApp;\n  defaultConfig: {\n    [key: string]: string | number | boolean;\n  };\n  fetchTimeMillis: number;\n  lastFetchStatus: FetchStatus;\n  settings: RemoteConfigSettings;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FirebaseServerAppSettings Interface in TypeScript\nDESCRIPTION: This code snippet defines the FirebaseServerAppSettings interface, which extends FirebaseAppSettings and includes additional properties for server-side configuration.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseserverappsettings.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FirebaseServerAppSettings extends Omit<FirebaseAppSettings, 'name'> \n```\n\n----------------------------------------\n\nTITLE: Getting DataSnapshot Size\nDESCRIPTION: Getter that returns the number of child properties in the DataSnapshot.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.datasnapshot.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nget size(): number;\n```\n\n----------------------------------------\n\nTITLE: CustomProvider Constructor Implementation in TypeScript\nDESCRIPTION: Constructor for the CustomProvider class that accepts CustomProviderOptions as a parameter. This is used to initialize a new custom provider for Firebase App Check.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.customprovider.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(_customProviderOptions: CustomProviderOptions);\n```\n\n----------------------------------------\n\nTITLE: Function Declaration for reauthenticateWithPhoneNumber Method\nDESCRIPTION: TypeScript declaration for the reauthenticateWithPhoneNumber function that re-authenticates a user using a fresh phone credential. The function requires a user, phone number, and an application verifier.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function reauthenticateWithPhoneNumber(user: User, phoneNumber: string, appVerifier?: ApplicationVerifier): Promise<ConfirmationResult>;\n```\n\n----------------------------------------\n\nTITLE: Defining QueryStartAtConstraint Class in TypeScript\nDESCRIPTION: Class definition for QueryStartAtConstraint that extends QueryConstraint. Used to create query constraints that define the starting point of query results in Firestore.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.querystartatconstraint.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class QueryStartAtConstraint extends QueryConstraint \n```\n\n----------------------------------------\n\nTITLE: OAuthCredential secret Property Declaration\nDESCRIPTION: Declares the optional secret property which stores the OAuth access token secret for OAuth 1.0 providers like twitter.com.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.oauthcredential.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsecret?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining UsageMetadata Interface in TypeScript\nDESCRIPTION: This code snippet defines the UsageMetadata interface, which includes properties for token counts and details related to prompt and candidate responses in a GenerateContentResponse.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.usagemetadata.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UsageMetadata {\n  candidatesTokenCount: number;\n  candidatesTokensDetails?: ModalityTokenCount[];\n  promptTokenCount: number;\n  promptTokensDetails?: ModalityTokenCount[];\n  totalTokenCount: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ImagenModelParams Interface in TypeScript\nDESCRIPTION: Defines an interface for Imagen model parameters, including generation config, model name, and safety settings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @beta\nexport interface ImagenModelParams {\n    generationConfig?: ImagenGenerationConfig;\n    model: string;\n    safetySettings?: ImagenSafetySettings;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileData Interface in TypeScript\nDESCRIPTION: Interface definition for FileData that includes properties for file URI and MIME type information for files stored in Google Cloud Storage.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.filedata.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FileData \n```\n\n----------------------------------------\n\nTITLE: SafetySetting Threshold Property Definition\nDESCRIPTION: Defines the required threshold property of type HarmBlockThreshold.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.safetysetting.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthreshold: HarmBlockThreshold;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCallPart Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for FunctionCallPart that represents a function call content part. The interface includes a required functionCall property of type FunctionCall and explicitly marks functionResponse, inlineData, and text properties as never types.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.functioncallpart.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FunctionCallPart \n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCall: FunctionCall;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionResponse?: never;\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninlineData?: never;\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntext?: never;\n```\n\n----------------------------------------\n\nTITLE: Declaring FirebaseStorage Interface in TypeScript\nDESCRIPTION: Defines the main FirebaseStorage interface that extends _FirebaseService. This interface represents a Firebase Storage instance with core configuration properties.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.firebasestorage.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FirebaseStorage extends _FirebaseService \n```\n\n----------------------------------------\n\nTITLE: Defining Task Event Type in Firebase Storage API (TypeScript)\nDESCRIPTION: Type definition for an event that is triggered on a task in Firebase Storage. Currently, it only includes the 'state_changed' event.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TaskEvent = 'state_changed';\n```\n\n----------------------------------------\n\nTITLE: MultiFactorInfo.enrollmentTime Property Definition\nDESCRIPTION: Defines the enrollmentTime property of the MultiFactorInfo interface, which represents the enrollment date of the second factor formatted as a UTC string. This is a readonly required property.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.multifactorinfo.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly enrollmentTime: string;\n```\n\n----------------------------------------\n\nTITLE: Defining PromptFeedback Interface in TypeScript\nDESCRIPTION: This code snippet defines the PromptFeedback interface, which includes properties for block reason, block reason message, and safety ratings. It is used to provide feedback when a prompt is blocked.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.promptfeedback.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PromptFeedback \n{\n  blockReason?: BlockReason;\n  blockReasonMessage?: string;\n  safetyRatings: SafetyRating[];\n}\n```\n\n----------------------------------------\n\nTITLE: AuthCredential signInMethod Property Implementation in Firebase Authentication\nDESCRIPTION: Defines the readonly signInMethod property which represents the authentication sign-in method used for the credential, corresponding to identifiers returned in fetchSignInMethodsForEmail().\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.authcredential.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly signInMethod: string;\n```\n\n----------------------------------------\n\nTITLE: Defining String Upload Formats in Firebase Storage API (TypeScript)\nDESCRIPTION: Enumeration of possible string formats for upload in Firebase Storage. It includes RAW, BASE64, BASE64URL, and DATA_URL formats.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nStringFormat: {\n    readonly RAW: \"raw\";\n    readonly BASE64: \"base64\";\n    readonly BASE64URL: \"base64url\";\n    readonly DATA_URL: \"data_url\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WriteBatch Update Operation in TypeScript\nDESCRIPTION: Type definition for the WriteBatch update method that allows updating specific fields of a document in a batch operation. Supports both single field updates and multiple field-value pairs.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore.api.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nupdate<AppModelType, DbModelType extends DocumentData>(documentRef: DocumentReference<AppModelType, DbModelType>, field: string | FieldPath, value: unknown, ...moreFieldsAndValues: unknown[]): WriteBatch;\n```\n\n----------------------------------------\n\nTITLE: Defining Installations Interface in TypeScript\nDESCRIPTION: This code snippet defines the Installations interface for the Firebase Installations SDK. It includes a single property 'app' of type FirebaseApp.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/installations.installations.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Installations {\n  app: FirebaseApp;\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Exceptions in Firebase Analytics\nDESCRIPTION: Type declaration for logging exception events with description and fatal flag parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'exception', eventParams?: {\n    description?: EventParams['description'];\n    fatal?: EventParams['fatal'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Defining StorageError Class in TypeScript\nDESCRIPTION: Declaration of the StorageError class that extends FirebaseError. It includes a constructor, properties for custom data and server response, and a method for comparing error codes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.storageerror.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class StorageError extends FirebaseError \n```\n\n----------------------------------------\n\nTITLE: Defining FirebasePerformance Interface in TypeScript\nDESCRIPTION: This code snippet defines the FirebasePerformance interface, which is the main interface for interacting with Firebase Performance Monitoring. It includes properties for the associated FirebaseApp, data collection settings, and instrumentation settings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/performance.firebaseperformance.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FirebasePerformance {\n  app: FirebaseApp;\n  dataCollectionEnabled: boolean;\n  instrumentationEnabled: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: VAPID Key Property Definition\nDESCRIPTION: TypeScript property definition for the optional VAPID key used to authenticate push message subscribers. Recommended to use a custom VAPID key for services like Chrome Push Service that require non-default keys.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.gettokenoptions.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvapidKey?: string;\n```\n\n----------------------------------------\n\nTITLE: Comparing Firestore Snapshots in TypeScript\nDESCRIPTION: Returns true if the provided snapshots are equal.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function snapshotEqual<AppModelType, DbModelType extends DocumentData>(left: DocumentSnapshot<AppModelType, DbModelType> | QuerySnapshot<AppModelType, DbModelType>, right: DocumentSnapshot<AppModelType, DbModelType> | QuerySnapshot<AppModelType, DbModelType>): boolean;\n```\n\n----------------------------------------\n\nTITLE: Creating Query End Constraint with Document Snapshot in Firestore Lite\nDESCRIPTION: Creates a QueryEndAtConstraint that modifies query results to end at the provided document (inclusive). The document must contain all fields specified in the query's orderBy clause.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function endAt<AppModelType, DbModelType extends DocumentData>(snapshot: DocumentSnapshot<AppModelType, DbModelType>): QueryEndAtConstraint;\n```\n\n----------------------------------------\n\nTITLE: OAuthCredential idToken Property Declaration\nDESCRIPTION: Declares the optional idToken property which stores the OAuth ID token associated with the credential for OIDC providers like google.com.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.oauthcredential.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nidToken?: string;\n```\n\n----------------------------------------\n\nTITLE: Updating Current User in Firebase Auth\nDESCRIPTION: TypeScript function signature for updating the current user in Firebase Authentication. Sets a new user as the current user and triggers auth state change events.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function updateCurrentUser(auth: Auth, user: User | null): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining the ObjectSchema Class in TypeScript\nDESCRIPTION: Declaration of the ObjectSchema class that extends the Schema class. This class is used for defining object-type schemas with a properties map of Schema objects.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.objectschema.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class ObjectSchema extends Schema \n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCall Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for FunctionCall, which represents a predicted function call returned from a model. It contains a name property for the function name and an args property for parameters as a structured JSON object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.functioncall.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FunctionCall {\n  name: string;\n  args: object;\n}\n```\n\n----------------------------------------\n\nTITLE: AuthCredential providerId Property Implementation in Firebase Authentication\nDESCRIPTION: Defines the readonly providerId property which represents the authentication provider ID for the credential, such as 'facebook.com' or 'google.com'.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.authcredential.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly providerId: string;\n```\n\n----------------------------------------\n\nTITLE: Defining MultiFactorError Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for MultiFactorError that extends AuthError, used to handle multi-factor authentication requirements.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.multifactorerror.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MultiFactorError extends AuthError \n```\n\n----------------------------------------\n\nTITLE: Defining PasswordPolicy Interface in TypeScript\nDESCRIPTION: This snippet defines the PasswordPolicy interface with its properties. It includes allowedNonAlphanumericCharacters, customStrengthOptions, enforcementState, and forceUpgradeOnSignin.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.passwordpolicy.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PasswordPolicy {\n  readonly allowedNonAlphanumericCharacters: string;\n  readonly customStrengthOptions: {\n    readonly minPasswordLength?: number;\n    readonly maxPasswordLength?: number;\n    readonly containsLowercaseLetter?: boolean;\n    readonly containsUppercaseLetter?: boolean;\n    readonly containsNumericCharacter?: boolean;\n    readonly containsNonAlphanumericCharacter?: boolean;\n  };\n  readonly enforcementState: string;\n  readonly forceUpgradeOnSignin: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: ActionCodeURL Property Signature - Language Code\nDESCRIPTION: Property definition for accessing the language code from the email action link. Returns null if not provided.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.actioncodeurl.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly languageCode: string | null;\n```\n\n----------------------------------------\n\nTITLE: Defining PopupRedirectResolver Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for PopupRedirectResolver, which is used to handle DOM-specific operations for authentication methods like signInWithPopup and signInWithRedirect in Firebase Authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.popupredirectresolver.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PopupRedirectResolver \n```\n\n----------------------------------------\n\nTITLE: Implementing isEqual Method in SnapshotMetadata\nDESCRIPTION: Declaration of the isEqual method, which compares the current SnapshotMetadata object with another for equality.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.snapshotmetadata.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nisEqual(other: SnapshotMetadata): boolean;\n```\n\n----------------------------------------\n\nTITLE: ActionCodeURL Property Signature - API Key\nDESCRIPTION: Property definition for accessing the API key of the email action link.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.actioncodeurl.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly apiKey: string;\n```\n\n----------------------------------------\n\nTITLE: Comparing AggregateQuerySnapshot Instances in TypeScript\nDESCRIPTION: Compares two AggregateQuerySnapshot instances for equality. Two instances are considered equal if they have underlying queries that compare equal, and the same data.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function aggregateQuerySnapshotEqual<AggregateSpecType extends AggregateSpec, AppModelType, DbModelType extends DocumentData>(left: AggregateQuerySnapshot<AggregateSpecType, AppModelType, DbModelType>, right: AggregateQuerySnapshot<AggregateSpecType, AppModelType, DbModelType>): boolean;\n```\n\n----------------------------------------\n\nTITLE: Declaring TaskEvent and TaskState Types for Firebase Storage\nDESCRIPTION: This snippet defines types for task events and states in Firebase Storage operations, including both public and internal declarations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/storage.api.md#2025-04-14_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport type TaskEvent = 'state_changed';\n\n// @internal\nexport type _TaskEvent = string;\n\n// @internal\nexport const _TaskEvent: {\n    STATE_CHANGED: string;\n};\n\n// @public\nexport type TaskState = 'running' | 'paused' | 'success' | 'canceled' | 'error';\n\n// @internal\nexport type _TaskState = (typeof _TaskState)[keyof typeof _TaskState];\n\n// @internal\nexport const _TaskState: {\n    readonly RUNNING: \"running\";\n    readonly PAUSED: \"paused\";\n    readonly SUCCESS: \"success\";\n    readonly CANCELED: \"canceled\";\n    readonly ERROR: \"error\";\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring QueryOrderByConstraint Type Property\nDESCRIPTION: Definition of the readonly type property for QueryOrderByConstraint class that specifies the constraint type as 'orderBy'.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.queryorderbyconstraint.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type = \"orderBy\";\n```\n\n----------------------------------------\n\nTITLE: QuerySnapshot Empty Status Getter\nDESCRIPTION: Getter method that returns a boolean indicating whether the query result contains any documents.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.querysnapshot.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget empty(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining ImagenModelParams Interface in TypeScript\nDESCRIPTION: Main interface definition for ImagenModelParams that specifies the configuration structure for Imagen model instances. Includes type definitions for model selection, generation configuration, and safety settings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagenmodelparams.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ImagenModelParams \n```\n\n----------------------------------------\n\nTITLE: MultiFactorInfo.displayName Property Definition\nDESCRIPTION: Defines the displayName property of the MultiFactorInfo interface, which represents the user-friendly name of the second factor. This is a readonly optional property that can be a string or null.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.multifactorinfo.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly displayName?: string | null;\n```\n\n----------------------------------------\n\nTITLE: QueryStartAtConstraint Type Property Definition\nDESCRIPTION: Type definition for the readonly type property of QueryStartAtConstraint class, which can be either 'startAt' or 'startAfter' to indicate the constraint type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.querystartatconstraint.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: 'startAt' | 'startAfter';\n```\n\n----------------------------------------\n\nTITLE: Defining SafetySetting Interface in TypeScript\nDESCRIPTION: Defines an interface for safety settings, including category, method, and threshold.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface SafetySetting {\n    // (undocumented)\n    category: HarmCategory;\n    // (undocumented)\n    method?: HarmBlockMethod;\n    // (undocumented)\n    threshold: HarmBlockThreshold;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Undefined Properties in Firestore Set Operation\nDESCRIPTION: Fixed handling of ignoreUndefinedProperties in set({ merge: true }). Previously, undefined values were treated as FieldValue.delete(), which was unintended behavior.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nset({ merge: true })\n```\n\n----------------------------------------\n\nTITLE: ImagenGenerationConfig Aspect Ratio Property Definition\nDESCRIPTION: TypeScript property definition for specifying the aspect ratio of generated images.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagengenerationconfig.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\naspectRatio?: ImagenAspectRatio;\n```\n\n----------------------------------------\n\nTITLE: Decoding Query String in TypeScript\nDESCRIPTION: This function decodes a query string into an object of key-value pairs. It takes a query string as input and returns a record with string keys and values.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function querystringDecode(querystring: string): Record<string, string>;\n```\n\n----------------------------------------\n\nTITLE: Promotion Interface Properties TypeScript Definitions\nDESCRIPTION: Individual property definitions for the Promotion interface, each defined as an optional string field.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.promotion.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreative_name?: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncreative_slot?: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nid?: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nname?: string;\n```\n\n----------------------------------------\n\nTITLE: OAuthCredential accessToken Property Declaration\nDESCRIPTION: Declares the optional accessToken property which stores the OAuth access token associated with the credential for providers like facebook.com or twitter.com.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.oauthcredential.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\naccessToken?: string;\n```\n\n----------------------------------------\n\nTITLE: Registering onChildRemoved Listener with Options in TypeScript\nDESCRIPTION: Listens for child removal events in a Firebase Database. This overload accepts listen options such as onlyOnce to configure the listener behavior, allowing for one-time listeners that automatically unsubscribe after the first event.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onChildRemoved(query: Query, callback: (snapshot: DataSnapshot) => unknown, options: ListenOptions): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: Defining PromptFeedback Interface in TypeScript\nDESCRIPTION: Defines an interface for prompt feedback, including block reason, message, and safety ratings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface PromptFeedback {\n    // (undocumented)\n    blockReason?: BlockReason;\n    // (undocumented)\n    blockReasonMessage?: string;\n    // (undocumented)\n    safetyRatings: SafetyRating[];\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Storage App Property Definition\nDESCRIPTION: Defines the readonly app property that links the storage instance to a FirebaseApp instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.firebasestorage.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly app: FirebaseApp;\n```\n\n----------------------------------------\n\nTITLE: Constructing FieldPath in TypeScript\nDESCRIPTION: Creates a FieldPath from the provided field names. If multiple field names are provided, the path will point to a nested field in a document.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.fieldpath.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(...fieldNames: string[]);\n```\n\n----------------------------------------\n\nTITLE: Comparing AggregateField Instances in TypeScript\nDESCRIPTION: Compares two AggregateField instances for equality.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function aggregateFieldEqual(left: AggregateField<unknown>, right: AggregateField<unknown>): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining PhoneInfoOptions Type in TypeScript\nDESCRIPTION: Type definition for phone authentication information used in various phone authentication scenarios including single-factor sign-in, multi-factor enrollment, and multi-factor sign-in.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PhoneInfoOptions = PhoneSingleFactorInfoOptions | PhoneMultiFactorEnrollInfoOptions | PhoneMultiFactorSignInInfoOptions;\n```\n\n----------------------------------------\n\nTITLE: Defining Task State Type in Firebase Storage API (TypeScript)\nDESCRIPTION: Type definition representing the current state of a running upload in Firebase Storage. It includes 'running', 'paused', 'success', 'canceled', and 'error' states.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.md#2025-04-14_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TaskState = 'running' | 'paused' | 'success' | 'canceled' | 'error';\n```\n\n----------------------------------------\n\nTITLE: Citation title Property Definition\nDESCRIPTION: Property definition for the optional title property of a Citation, which provides the title of the cited source.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.citation.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntitle?: string;\n```\n\n----------------------------------------\n\nTITLE: Declaring task Property\nDESCRIPTION: Property definition for referencing the parent UploadTask object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.uploadtasksnapshot.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntask: UploadTask;\n```\n\n----------------------------------------\n\nTITLE: Declaring Firestore End At Function\nDESCRIPTION: TypeScript declaration for creating query constraints to end result sets at specified field values.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function endAt(...fieldValues: unknown[]): QueryEndAtConstraint;\n```\n\n----------------------------------------\n\nTITLE: Defining OAuthCredentialOptions Interface in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface definition for OAuthCredentialOptions. It includes optional properties for accessToken, idToken, and rawNonce.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.oauthcredentialoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface OAuthCredentialOptions {\n  accessToken?: string;\n  idToken?: string;\n  rawNonce?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining App Check Token Listener Type in TypeScript\nDESCRIPTION: This type definition describes a listener function that is called whenever the App Check token changes. It takes an AppCheckTokenResult as a parameter.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AppCheckTokenListener = (token: AppCheckTokenResult) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining PhoneMultiFactorAssertion Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for phone-based multi-factor authentication assertions. This interface extends MultiFactorAssertion and is used to assert ownership of a phone second factor through the PhoneMultiFactorGenerator.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phonemultifactorassertion.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PhoneMultiFactorAssertion extends MultiFactorAssertion \n```\n\n----------------------------------------\n\nTITLE: VertexAIError Class Declaration in TypeScript\nDESCRIPTION: Declares the VertexAIError class that extends FirebaseError for handling Vertex AI specific errors in Firebase SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.vertexaierror.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class VertexAIError extends FirebaseError \n```\n\n----------------------------------------\n\nTITLE: Defining ConfirmationResult Interface in Firebase Authentication\nDESCRIPTION: TypeScript interface definition for ConfirmationResult, which represents the result of a phone number authentication operation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.confirmationresult.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ConfirmationResult \n```\n\n----------------------------------------\n\nTITLE: Defining RemoteConfigSettings Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for RemoteConfigSettings that specifies configuration options for the Remote Config SDK. Contains two numeric properties: fetchTimeoutMillis for setting request timeout and minimumFetchIntervalMillis for cache staleness control.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.remoteconfigsettings.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RemoteConfigSettings \n```\n\n----------------------------------------\n\nTITLE: Converting Bytes to Base64 String in TypeScript\nDESCRIPTION: Method to convert the Bytes object to a Base64-encoded string. It returns the underlying bytes as a Base64 string.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.bytes.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntoBase64(): string;\n```\n\n----------------------------------------\n\nTITLE: VertexAIModel Property Definition\nDESCRIPTION: Defines the readonly model property that stores the fully qualified model resource name used for operations like image generation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.vertexaimodel.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly model: string;\n```\n\n----------------------------------------\n\nTITLE: Defining AggregateField Properties in TypeScript\nDESCRIPTION: This snippet defines the properties of the AggregateField class. It includes 'aggregateType' which indicates the aggregation operation, and 'type' which is a unique identifier for instances of this class.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.aggregatefield.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly aggregateType: AggregateType;\nreadonly type = \"AggregateField\";\n```\n\n----------------------------------------\n\nTITLE: Importing Firestore Bundles in JavaScript\nDESCRIPTION: Added support for Firestore Bundles (pre-packaged Firestore data). For NPM users, this can be enabled via an additional import.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'firebase/firestore/bundle'\n```\n\n----------------------------------------\n\nTITLE: Declaring AggregateField Class in TypeScript\nDESCRIPTION: This snippet shows the TypeScript declaration of the AggregateField class. It is a generic class that represents an aggregation that can be performed by Firestore.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.aggregatefield.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class AggregateField<T> \n```\n\n----------------------------------------\n\nTITLE: Implementing stopSequences Property in GenerationConfig\nDESCRIPTION: TypeScript property definition for stopSequences in GenerationConfig interface, which specifies text sequences that will stop generation when encountered.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generationconfig.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nstopSequences?: string[];\n```\n\n----------------------------------------\n\nTITLE: Stringifying Data in TypeScript\nDESCRIPTION: This function converts any data to its string representation. It takes data of unknown type as input and returns the stringified version.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function stringify(data: unknown): string;\n```\n\n----------------------------------------\n\nTITLE: Implementing topK Property in GenerationConfig\nDESCRIPTION: TypeScript property definition for topK in GenerationConfig interface, which limits token selection to top K most probable tokens.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generationconfig.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntopK?: number;\n```\n\n----------------------------------------\n\nTITLE: Browser Popup Redirect Resolver Implementation in TypeScript\nDESCRIPTION: An implementation of the PopupRedirectResolver interface suitable for browser-based applications. This resolver handles popup and redirect authentication flows but does not work in a Node.js environment.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nbrowserPopupRedirectResolver: PopupRedirectResolver\n```\n\n----------------------------------------\n\nTITLE: FunctionDeclarationsTool Interface Definition in TypeScript\nDESCRIPTION: Defines the FunctionDeclarationsTool interface which enables the system to interact with external systems beyond the model's knowledge and scope.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.functiondeclarationstool.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface FunctionDeclarationsTool \n```\n\n----------------------------------------\n\nTITLE: Declaring Type Property for QueryLimitConstraint in TypeScript\nDESCRIPTION: This code snippet declares the 'type' property for the QueryLimitConstraint class. It specifies the type of the query constraint as either 'limit' or 'limitToLast'.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.querylimitconstraint.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: 'limit' | 'limitToLast';\n```\n\n----------------------------------------\n\nTITLE: CountTokensRequest Contents Property Definition\nDESCRIPTION: Property definition for the contents array that holds Content objects.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.counttokensrequest.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncontents: Content[];\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordValidationStatus Interface in TypeScript\nDESCRIPTION: This code snippet defines the PasswordValidationStatus interface, which contains properties related to password validation and policy requirements.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.passwordvalidationstatus.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PasswordValidationStatus \n{\n  readonly containsLowercaseLetter?: boolean;\n  readonly containsNonAlphanumericCharacter?: boolean;\n  readonly containsNumericCharacter?: boolean;\n  readonly containsUppercaseLetter?: boolean;\n  readonly isValid: boolean;\n  readonly meetsMaxPasswordLength?: boolean;\n  readonly meetsMinPasswordLength?: boolean;\n  readonly passwordPolicy: PasswordPolicy;\n}\n```\n\n----------------------------------------\n\nTITLE: IteratedDataSnapshot Key Property Definition\nDESCRIPTION: Type definition for the key property of IteratedDataSnapshot interface. The key property is required and must be a string.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.iterateddatasnapshot.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nkey: string;\n```\n\n----------------------------------------\n\nTITLE: Defining User Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the User object, extending UserInfo interface.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.user.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface User extends UserInfo \n```\n\n----------------------------------------\n\nTITLE: Generating Ad Hoc Size Analysis Report\nDESCRIPTION: This snippet demonstrates how to perform an ad hoc size analysis using the generateReport function. It requires a name for the report, an absolute path to a TypeScript definition file, and an absolute path to the corresponding bundle file.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/repo-scripts/size-analysis/README.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  const name: string = \"adhoc\";\n  const dtsFile: string = '.../index.d.ts';\n  const bundleFile: string = '.../index.esm2017.js';\n  const report: Report = await generateReport(name, dtsFile, bundleFile);\n  console.log(report);\n\n\n}catch (error) {\n\n\n  console.log(error);\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: SnapshotListenOptions source Property Definition\nDESCRIPTION: Property definition for source configuration that specifies which data source the query should listen to. Optional property that defaults to 'default' for listening to both cache and server.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.snapshotlistenoptions.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly source?: ListenSource;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Firebase Cloud Messaging Instance in Service Worker\nDESCRIPTION: Retrieves a Firebase Cloud Messaging instance associated with the provided Firebase app in a service worker context.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_sw.md#2025-04-14_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport declare function getMessagingInSw(app?: FirebaseApp): Messaging;\n```\n\n----------------------------------------\n\nTITLE: Defining Role Type in TypeScript\nDESCRIPTION: Defines a type for roles based on the POSSIBLE_ROLES constant.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport type Role = (typeof POSSIBLE_ROLES)[number];\n```\n\n----------------------------------------\n\nTITLE: Detecting Browser Environment in TypeScript\nDESCRIPTION: This function checks if the current environment is a browser. It returns a boolean indicating whether the code is running in a browser context.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function isBrowser(): boolean;\n```\n\n----------------------------------------\n\nTITLE: QuerySnapshot Metadata Property\nDESCRIPTION: Read-only property that provides metadata about the snapshot, including source and local modification information.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.querysnapshot.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly metadata: SnapshotMetadata;\n```\n\n----------------------------------------\n\nTITLE: Defining AppCheck Interface in TypeScript for Firebase JS SDK\nDESCRIPTION: This code snippet defines the AppCheck interface for the Firebase App Check service. It includes a single property 'app' of type FirebaseApp, which represents the Firebase application associated with this AppCheck instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.appcheck.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AppCheck {\n  app: FirebaseApp;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AuthProvider Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for AuthProvider that declares the basic structure required for Firebase authentication providers. Contains a readonly providerId property that identifies the specific authentication provider type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.authprovider.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AuthProvider \n```\n\n----------------------------------------\n\nTITLE: Firestore Error Codes Type Definition\nDESCRIPTION: Type definition for all possible Firestore error codes, matching gRPC status codes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type FirestoreErrorCode = 'cancelled' | 'unknown' | 'invalid-argument' | 'deadline-exceeded' | 'not-found' | 'already-exists' | 'permission-denied' | 'resource-exhausted' | 'failed-precondition' | 'aborted' | 'out-of-range' | 'unimplemented' | 'internal' | 'unavailable' | 'data-loss' | 'unauthenticated';\n```\n\n----------------------------------------\n\nTITLE: isTokenAutoRefreshEnabled Property Type Definition in TypeScript\nDESCRIPTION: Defines the optional boolean property for enabling automatic background refresh of App Check tokens.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.appcheckoptions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisTokenAutoRefreshEnabled?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining startAfter Query Constraint in Firebase Realtime Database (TypeScript)\nDESCRIPTION: Creates a QueryConstraint with a specified starting point (exclusive) for Firebase Realtime Database queries. It allows setting a value and optional key to filter results.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function startAfter(value: number | string | boolean | null, key?: string): QueryConstraint;\n```\n\n----------------------------------------\n\nTITLE: Defining ListenOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the ListenOptions interface used to customize listeners in the Firebase JavaScript SDK. It includes a single optional property 'onlyOnce' of type boolean.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.listenoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface ListenOptions \n{\n  readonly onlyOnce?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Callback for Installation ID Changes in TypeScript\nDESCRIPTION: Sets a new callback that will get called when Installation ID changes. Returns an unsubscribe function that will remove the callback when called. This function is used to monitor changes to the installation ID.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/installations.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onIdChange(installations: Installations, callback: IdChangeCallbackFn): IdChangeUnsubscribeFn;\n```\n\n----------------------------------------\n\nTITLE: Defining ParsedToken Interface in TypeScript\nDESCRIPTION: Main interface definition for ParsedToken that represents a parsed Firebase ID token structure.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.parsedtoken.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ParsedToken \n```\n\n----------------------------------------\n\nTITLE: Declaring ArraySchema Class in TypeScript\nDESCRIPTION: This snippet defines the ArraySchema class which extends the Schema class. It is used for schema definitions of array types, where the 'items' parameter specifies the type of elements in the array.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.arrayschema.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class ArraySchema extends Schema \n```\n\n----------------------------------------\n\nTITLE: HarmCategory Enumeration in TypeScript\nDESCRIPTION: Enumeration defining harm categories that would cause prompts or candidates to be blocked, including dangerous content, harassment, hate speech, and sexually explicit content.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum HarmCategory \n{\n  HARM_CATEGORY_DANGEROUS_CONTENT = \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n  HARM_CATEGORY_HARASSMENT = \"HARM_CATEGORY_HARASSMENT\",\n  HARM_CATEGORY_HATE_SPEECH = \"HARM_CATEGORY_HATE_SPEECH\",\n  HARM_CATEGORY_SEXUALLY_EXPLICIT = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\"\n}\n```\n\n----------------------------------------\n\nTITLE: FieldPath Constructor Implementation\nDESCRIPTION: Constructor for creating a FieldPath instance that accepts variable number of field names to create a path to nested fields.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.fieldpath.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(...fieldNames: string[]);\n```\n\n----------------------------------------\n\nTITLE: Deleting Firebase Installation in TypeScript\nDESCRIPTION: Deletes the Firebase Installation and all associated data. This function is used to remove an installation from Firebase.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/installations.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function deleteInstallations(installations: Installations): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining properties Property in ObjectSchema\nDESCRIPTION: Declaration of the properties property which is a map of property names to TypedSchema objects, defining the structure of the object schema.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.objectschema.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nproperties: {\n        [k: string]: TypedSchema;\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining ThenableReference Interface in TypeScript\nDESCRIPTION: Declaration of ThenableReference interface that extends DatabaseReference and includes Promise-like functionality. It provides both immediate reference access and Promise resolution for backend write operations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.thenablereference.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface ThenableReference extends DatabaseReference, Pick<Promise<DatabaseReference>, 'then' | 'catch'>\n```\n\n----------------------------------------\n\nTITLE: Serializing GeoPoint to JSON in TypeScript for Firebase JS SDK\nDESCRIPTION: Defines the toJSON method for the GeoPoint class, which returns a JSON-serializable representation of the GeoPoint object containing latitude and longitude.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.geopoint.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntoJSON(): {\n        latitude: number;\n        longitude: number;\n    };\n```\n\n----------------------------------------\n\nTITLE: FullMetadata Reference Property\nDESCRIPTION: TypeScript property definition for the StorageReference associated with the upload.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.fullmetadata.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nref?: StorageReference | undefined;\n```\n\n----------------------------------------\n\nTITLE: Transaction Class Declaration\nDESCRIPTION: Base class declaration for the Transaction class used in Firestore transactions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.transaction.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Transaction\n```\n\n----------------------------------------\n\nTITLE: FinishReason Enumeration in TypeScript\nDESCRIPTION: Enumeration defining reasons why a candidate response might be terminated, including normal stops, token limits, safety concerns, and invalid function calls.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum FinishReason \n{\n  BLOCKLIST = \"BLOCKLIST\",\n  MALFORMED_FUNCTION_CALL = \"MALFORMED_FUNCTION_CALL\",\n  MAX_TOKENS = \"MAX_TOKENS\",\n  OTHER = \"OTHER\",\n  PROHIBITED_CONTENT = \"PROHIBITED_CONTENT\",\n  RECITATION = \"RECITATION\",\n  SAFETY = \"SAFETY\",\n  SPII = \"SPII\",\n  STOP = \"STOP\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Properties Map\nDESCRIPTION: Optional property mapping object that contains nested Schema objects using the generic type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.schemashared.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nproperties?: {\n        [k: string]: T;\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining WithFieldValue Type for Firestore Field Updates in TypeScript\nDESCRIPTION: Creates a type that allows FieldValues to be used as property values while maintaining type safety. It recursively applies this transformation to nested objects.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type WithFieldValue<T> = T | (T extends Primitive ? T : T extends {} ? {\n    [K in keyof T]: WithFieldValue<T[K]> | FieldValue;\n} : never);\n```\n\n----------------------------------------\n\nTITLE: Defining model Property Type\nDESCRIPTION: Type definition for the required model property that specifies which Imagen model version to use. Only supports Imagen 3 models with naming pattern 'imagen-3.0-*'.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagenmodelparams.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmodel: string;\n```\n\n----------------------------------------\n\nTITLE: Defining InlineDataPart Interface in TypeScript\nDESCRIPTION: Interface declaration for InlineDataPart which represents inline data content (such as images) in the Firebase JS SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.inlinedatapart.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InlineDataPart \n```\n\n----------------------------------------\n\nTITLE: StorageReference root Property Type Definition\nDESCRIPTION: Defines the root property type which represents a reference to the root of the storage bucket.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.storagereference.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nroot: StorageReference;\n```\n\n----------------------------------------\n\nTITLE: Implementing topP Property in GenerationConfig\nDESCRIPTION: TypeScript property definition for topP in GenerationConfig interface, which limits token selection to a cumulative probability threshold.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generationconfig.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntopP?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining UserMetadata Interface in TypeScript\nDESCRIPTION: This snippet defines the UserMetadata interface with two readonly properties: creationTime and lastSignInTime. Both properties are optional strings representing timestamps.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.usermetadata.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UserMetadata \n{\n  readonly creationTime?: string;\n  readonly lastSignInTime?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining personFilterLevel Property in ImagenSafetySettings\nDESCRIPTION: Definition of the personFilterLevel property that controls whether images containing people or faces are allowed to be generated. This property uses the ImagenPersonFilterLevel type and is optional.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagensafetysettings.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npersonFilterLevel?: ImagenPersonFilterLevel;\n```\n\n----------------------------------------\n\nTITLE: Query.isEqual Method Signature\nDESCRIPTION: Method for comparing two Query objects to check if they represent the same location and have identical query parameters\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.query.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisEqual(other: Query | null): boolean;\n```\n\n----------------------------------------\n\nTITLE: Log Format Structure for Firebase Logger\nDESCRIPTION: This snippet demonstrates the format used by the Logger when outputting logs. Each log includes a timestamp, the component name, and the log message arguments.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/logger/README.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n`[${new Date()}]  ${COMPONENT_NAME}: ${...args}`\n```\n\n----------------------------------------\n\nTITLE: TransactionOptions.applyLocally Property Definition\nDESCRIPTION: Definition of the applyLocally optional boolean property that controls event emission during transaction execution. When false, it suppresses intermediate state events until transaction completion.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.transactionoptions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly applyLocally?: boolean;\n```\n\n----------------------------------------\n\nTITLE: React Native Persistence Configuration\nDESCRIPTION: Function for configuring persistence in React Native environment using AsyncStorage.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetReactNativePersistence(storage)\n```\n\n----------------------------------------\n\nTITLE: Defining ImagenSafetyFilterLevel Enum in TypeScript\nDESCRIPTION: Defines an enum for safety filter levels used in image generation safety settings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @beta\nexport enum ImagenSafetyFilterLevel {\n    BLOCK_LOW_AND_ABOVE = \"block_low_and_above\",\n    BLOCK_MEDIUM_AND_ABOVE = \"block_medium_and_above\",\n    BLOCK_NONE = \"block_none\",\n    BLOCK_ONLY_HIGH = \"block_only_high\"\n}\n```\n\n----------------------------------------\n\nTITLE: Observer Interface Definition in TypeScript\nDESCRIPTION: This interface defines the structure of an observer object. It includes next, error, and complete methods for handling observable events.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Observer<T> {\n    complete: CompleteFn;\n    error: ErrorFn;\n    next: NextFn<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Child Changed Events with Cancel Callback in Firebase Realtime Database\nDESCRIPTION: This overload of the onChildChanged function includes a cancel callback parameter, which is called if the event subscription is canceled due to permission issues. It also accepts options for configuring the listener behavior.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onChildChanged(query: Query, callback: (snapshot: DataSnapshot, previousChildName: string | null) => unknown, cancelCallback: (error: Error) => unknown, options: ListenOptions): Unsubscribe;\n```\n\n----------------------------------------\n\nTITLE: QuerySnapshot size Property Getter\nDESCRIPTION: Getter method that returns the number of documents in the QuerySnapshot.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.querysnapshot.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nget size(): number;\n```\n\n----------------------------------------\n\nTITLE: Exporting DataSnapshot Value\nDESCRIPTION: Method to export the entire contents of the DataSnapshot as a JavaScript object, including priority information if available.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.datasnapshot.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexportVal(): any;\n```\n\n----------------------------------------\n\nTITLE: Defining EventParams Interface in TypeScript\nDESCRIPTION: This code snippet defines the EventParams interface, which represents standard gtag.js event parameters used in Firebase Analytics. It includes various properties for tracking different aspects of user interactions and events.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.eventparams.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EventParams {\n  affiliation?: string;\n  checkout_option?: string;\n  checkout_step?: number;\n  content_type?: string;\n  coupon?: string;\n  currency?: string;\n  description?: string;\n  event_category?: string;\n  event_label?: string;\n  fatal?: boolean;\n  firebase_screen_class?: string;\n  firebase_screen?: string;\n  item_id?: string;\n  item_list_id?: string;\n  item_list_name?: string;\n  items?: Item[];\n  method?: string;\n  number?: string;\n  page_location?: string;\n  page_path?: string;\n  page_title?: string;\n  payment_type?: string;\n  promotion_id?: string;\n  promotion_name?: string;\n  promotions?: Promotion[];\n  screen_name?: string;\n  search_term?: string;\n  shipping_tier?: string;\n  shipping?: Currency;\n  tax?: Currency;\n  transaction_id?: string;\n  value?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing catch Method for LoadBundleTask\nDESCRIPTION: Defines the catch method for LoadBundleTask, which implements the Promise<LoadBundleTaskProgress>.catch interface. This method is called when an error occurs during bundle loading.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.loadbundletask.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncatch<R>(onRejected: (a: Error) => R | PromiseLike<R>): Promise<R | LoadBundleTaskProgress>;\n```\n\n----------------------------------------\n\nTITLE: Defining SchemaType Enum in TypeScript\nDESCRIPTION: Enum containing OpenAPI data types as defined by the OpenAPI specification.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum SchemaType\n```\n\n----------------------------------------\n\nTITLE: Defining FieldValue Class in TypeScript for Firebase SDK\nDESCRIPTION: Abstract class definition for FieldValue, which represents sentinel values used in Firestore write operations. It includes an abstract method for equality comparison.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.fieldvalue.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class FieldValue \n```\n\n----------------------------------------\n\nTITLE: Defining Messaging Interface in TypeScript for Firebase Cloud Messaging SDK\nDESCRIPTION: This code snippet defines the Messaging interface for the Firebase Cloud Messaging SDK. It includes a single property 'app' of type FirebaseApp, which represents the Firebase application instance associated with this Messaging object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_sw.messaging.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Messaging {\n  app: FirebaseApp;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing DataSnapshot Reference\nDESCRIPTION: Readonly property that returns the DatabaseReference for the location of this DataSnapshot.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.datasnapshot.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly ref: DatabaseReference;\n```\n\n----------------------------------------\n\nTITLE: Defining Fetch Status for Remote Config in TypeScript\nDESCRIPTION: This type definition summarizes the outcome of the last attempt to fetch config from the Firebase Remote Config server. It includes statuses for initial state, success, failure, and throttling.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FetchStatus = 'no-fetch-yet' | 'success' | 'failure' | 'throttle';\n```\n\n----------------------------------------\n\nTITLE: Defining ActionCodeURL Class in TypeScript\nDESCRIPTION: Class declaration for ActionCodeURL that handles email action links. This is an internal class that should not be instantiated directly by third-party code.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.actioncodeurl.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class ActionCodeURL\n```\n\n----------------------------------------\n\nTITLE: Defining HarmSeverity Enum in TypeScript\nDESCRIPTION: Enum specifying different levels of harm severity from NEGLIGIBLE to HIGH.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum HarmSeverity\n```\n\n----------------------------------------\n\nTITLE: Defining HttpsCallable Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for HttpsCallable that enables type-safe HTTP callable functions with support for request data, response data, and stream data types.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.httpscallable.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface HttpsCallable<RequestData = unknown, ResponseData = unknown, StreamData = unknown>\n```\n\n----------------------------------------\n\nTITLE: Defining AggregateSpec Interface in TypeScript for Firebase JS SDK\nDESCRIPTION: This code snippet defines the AggregateSpec interface, which is used to specify a set of aggregations and their aliases. It is part of the Firebase JavaScript SDK and is likely used in querying or data aggregation operations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.aggregatespec.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface AggregateSpec \n```\n\n----------------------------------------\n\nTITLE: Defining inMemoryPersistence Constant in TypeScript\nDESCRIPTION: An implementation of Persistence of type 'NONE' used for in-memory authentication state that doesn't persist across sessions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\ninMemoryPersistence: Persistence\n```\n\n----------------------------------------\n\nTITLE: SafetySetting Category Property Definition\nDESCRIPTION: Defines the required category property of type HarmCategory.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.safetysetting.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncategory: HarmCategory;\n```\n\n----------------------------------------\n\nTITLE: FirestoreError Stack Property Signature\nDESCRIPTION: TypeScript signature for the optional stack property that contains the error stack trace.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.firestoreerror.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly stack?: string;\n```\n\n----------------------------------------\n\nTITLE: Converting Bytes to String Representation in TypeScript\nDESCRIPTION: Method to get a string representation of the Bytes object. It returns a descriptive string of the Bytes object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.bytes.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntoString(): string;\n```\n\n----------------------------------------\n\nTITLE: Comparing GeoPoint Objects in TypeScript for Firebase JS SDK\nDESCRIPTION: Defines the isEqual method for the GeoPoint class, which compares the current GeoPoint object with another GeoPoint object for equality.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.geopoint.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisEqual(other: GeoPoint): boolean;\n```\n\n----------------------------------------\n\nTITLE: FirebaseApp.automaticDataCollectionEnabled Property Definition\nDESCRIPTION: TypeScript property definition for the automaticDataCollectionEnabled flag, which controls GDPR opt-in/opt-out for data collection.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseapp.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nautomaticDataCollectionEnabled: boolean;\n```\n\n----------------------------------------\n\nTITLE: Timestamp Milliseconds Conversion Methods\nDESCRIPTION: Methods for converting between Timestamp and milliseconds representation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.timestamp.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstatic fromMillis(milliseconds: number): Timestamp;\ntoMillis(): number;\n```\n\n----------------------------------------\n\nTITLE: Firebase Firestore Lite Type Definitions\nDESCRIPTION: Core type definitions and interfaces for the Firebase Firestore Lite SDK, including imports, document types, query types, and utility functions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore-lite.api.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EmulatorMockTokenOptions } from '@firebase/util';\nimport { FirebaseApp } from '@firebase/app';\nimport { FirebaseError } from '@firebase/util';\nimport { LogLevelString as LogLevel } from '@firebase/logger';\n\n// @public\nexport function addDoc<AppModelType, DbModelType extends DocumentData>(reference: CollectionReference<AppModelType, DbModelType>, data: WithFieldValue<AppModelType>): Promise<DocumentReference<AppModelType, DbModelType>>;\n\n// @public\nexport type AddPrefixToKeys<Prefix extends string, T extends Record<string, unknown>> = {\n    [K in keyof T & string as `${Prefix}.${K}`]+?: string extends K ? any : T[K];\n};\n\n// Additional type definitions and classes follow...\n```\n\n----------------------------------------\n\nTITLE: WebAttribution Interface Definition in TypeScript\nDESCRIPTION: Defines the WebAttribution interface which contains two string properties: title and uri.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.webattribution.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WebAttribution \n```\n\n----------------------------------------\n\nTITLE: CountTokensRequest SystemInstruction Property Definition\nDESCRIPTION: Optional property definition for model behavior instructions that can accept string, Part, or Content type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.counttokensrequest.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsystemInstruction?: string | Part | Content;\n```\n\n----------------------------------------\n\nTITLE: Defining Modality Enum in TypeScript\nDESCRIPTION: Enum specifying different content types including text, audio, image, video, and document.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum Modality\n```\n\n----------------------------------------\n\nTITLE: Accessing Named App Instance in JavaScript\nDESCRIPTION: Example showing how to access the name of a named Firebase app instance, which matches the name provided during initialization.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseapp.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// A named app's name is what you provide to initializeApp()\nconst otherApp = initializeApp(otherAppConfig, \"other\");\nconsole.log(otherApp.name);  // \"other\"\n```\n\n----------------------------------------\n\nTITLE: Defining safetyFilterLevel Property in ImagenSafetySettings\nDESCRIPTION: Definition of the safetyFilterLevel property that controls the aggressiveness of filtering out sensitive content from generated images. This property uses the ImagenSafetyFilterLevel type and is optional.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagensafetysettings.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsafetyFilterLevel?: ImagenSafetyFilterLevel;\n```\n\n----------------------------------------\n\nTITLE: Defining OAuthProvider Class in TypeScript\nDESCRIPTION: Declaration of the OAuthProvider class extending BaseOAuthProvider.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.oauthprovider.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class OAuthProvider extends BaseOAuthProvider \n```\n\n----------------------------------------\n\nTITLE: Defining ImagenGenerationResponse Interface in TypeScript\nDESCRIPTION: Defines a generic interface for the response of image generation, including filtered reason and generated images.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @beta\nexport interface ImagenGenerationResponse<T extends ImagenInlineImage | ImagenGCSImage> {\n    filteredReason?: string;\n    images: T[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Index.collectionGroup Property in TypeScript\nDESCRIPTION: This snippet defines the collectionGroup property of the Index interface. It represents the ID of the collection to be indexed and is marked as a preview feature.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.index.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly collectionGroup: string;\n```\n\n----------------------------------------\n\nTITLE: Observable Interface Definition in TypeScript\nDESCRIPTION: This interface defines the structure of an observable object. It includes a subscribe method that follows the Observable pattern.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Observable<T> {\n    subscribe: Subscribe<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining name Property in FirebaseAppSettings\nDESCRIPTION: Optional string property for setting a custom name for the Firebase App. If not specified, the default value is \"[DEFAULT]\".\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseappsettings.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nname?: string;\n```\n\n----------------------------------------\n\nTITLE: Firestore Instance Reference\nDESCRIPTION: Property declaration for accessing the parent Firestore instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.documentreference.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly firestore: Firestore;\n```\n\n----------------------------------------\n\nTITLE: Expiration Time Property Definition\nDESCRIPTION: Property definition for token expiration time in UTC string format.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.idtokenresult.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexpirationTime: string;\n```\n\n----------------------------------------\n\nTITLE: User Profile and Security Functions\nDESCRIPTION: Functions for managing user profiles, security settings, and account verification.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdateProfile(user, { displayName, photoURL: photoUrl })\nupdateEmail(user, newEmail)\nupdatePassword(user, newPassword)\nsendEmailVerification(user, actionCodeSettings)\n```\n\n----------------------------------------\n\nTITLE: Defining Firebase Functions TypeScript Interfaces and Declarations\nDESCRIPTION: TypeScript definitions for Firebase Cloud Functions including core types, error handling, HTTP callable functions, and utility methods. Includes interfaces for Functions instance, error codes, callable options and results, and streaming capabilities.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/functions.api.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FirebaseApp } from '@firebase/app';\nimport { FirebaseError } from '@firebase/util';\n\n// @public\nexport function connectFunctionsEmulator(functionsInstance: Functions, host: string, port: number): void;\n\n// @public\nexport interface Functions {\n    app: FirebaseApp;\n    customDomain: string | null;\n    region: string;\n}\n\n// @public\nexport class FunctionsError extends FirebaseError {\n    constructor(\n    code: FunctionsErrorCodeCore, message?: string,\n    details?: unknown);\n    readonly details?: unknown;\n}\n\n// @public\nexport type FunctionsErrorCode = `functions/${FunctionsErrorCodeCore}`;\n\n// @public\nexport type FunctionsErrorCodeCore = 'ok' | 'cancelled' | 'unknown' | 'invalid-argument' | 'deadline-exceeded' | 'not-found' | 'already-exists' | 'permission-denied' | 'resource-exhausted' | 'failed-precondition' | 'aborted' | 'out-of-range' | 'unimplemented' | 'internal' | 'unavailable' | 'data-loss' | 'unauthenticated';\n\n// @public\nexport function getFunctions(app?: FirebaseApp, regionOrCustomDomain?: string): Functions;\n\n// @public\nexport interface HttpsCallable<RequestData = unknown, ResponseData = unknown, StreamData = unknown> {\n    // (undocumented)\n    (data?: RequestData | null): Promise<HttpsCallableResult<ResponseData>>;\n    // (undocumented)\n    stream: (data?: RequestData | null, options?: HttpsCallableStreamOptions) => Promise<HttpsCallableStreamResult<ResponseData, StreamData>>;\n}\n\n// @public\nexport function httpsCallable<RequestData = unknown, ResponseData = unknown, StreamData = unknown>(functionsInstance: Functions, name: string, options?: HttpsCallableOptions): HttpsCallable<RequestData, ResponseData, StreamData>;\n\n// @public\nexport function httpsCallableFromURL<RequestData = unknown, ResponseData = unknown, StreamData = unknown>(functionsInstance: Functions, url: string, options?: HttpsCallableOptions): HttpsCallable<RequestData, ResponseData, StreamData>;\n\n// @public\nexport interface HttpsCallableOptions {\n    limitedUseAppCheckTokens?: boolean;\n    timeout?: number;\n}\n\n// @public\nexport interface HttpsCallableResult<ResponseData = unknown> {\n    readonly data: ResponseData;\n}\n\n// @public\nexport interface HttpsCallableStreamOptions {\n    limitedUseAppCheckTokens?: boolean;\n    signal?: AbortSignal;\n}\n\n// @public\nexport interface HttpsCallableStreamResult<ResponseData = unknown, StreamData = unknown> {\n    // (undocumented)\n    readonly data: Promise<ResponseData>;\n    // (undocumented)\n    readonly stream: AsyncIterable<StreamData>;\n}\n```\n\n----------------------------------------\n\nTITLE: FirebaseApp.name Property Definition\nDESCRIPTION: TypeScript property definition for the read-only name property of FirebaseApp. The default app's name is \"[DEFAULT]\".\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseapp.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly name: string;\n```\n\n----------------------------------------\n\nTITLE: Defining ImagenInlineImage Interface in TypeScript\nDESCRIPTION: Defines an interface for inline images used in image generation, including base64 encoded bytes and MIME type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @beta\nexport interface ImagenInlineImage {\n    bytesBase64Encoded: string;\n    mimeType: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing isEqual Method for FieldValue in TypeScript\nDESCRIPTION: Abstract method signature for comparing FieldValue objects for equality. It takes another FieldValue as a parameter and returns a boolean indicating equality.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.fieldvalue.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nabstract isEqual(other: FieldValue): boolean;\n```\n\n----------------------------------------\n\nTITLE: ConsentSettings analytics_storage Property\nDESCRIPTION: Property definition for analytics-related storage consent status.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.consentsettings.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nanalytics_storage?: ConsentStatusString;\n```\n\n----------------------------------------\n\nTITLE: OAuthCredential Static fromJSON Method\nDESCRIPTION: Defines a static method that deserializes a JSON representation into an OAuthCredential object. Accepts either a string or object input.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.oauthcredential.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstatic fromJSON(json: string | object): OAuthCredential | null;\n```\n\n----------------------------------------\n\nTITLE: Implementing onProgress Method for LoadBundleTask\nDESCRIPTION: Defines the onProgress method for LoadBundleTask, which registers functions to listen to bundle loading progress events. It allows tracking progress updates, error handling, and completion notification.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.loadbundletask.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonProgress(next?: (progress: LoadBundleTaskProgress) => unknown, error?: (err: Error) => unknown, complete?: () => void): void;\n```\n\n----------------------------------------\n\nTITLE: Declaring ImagenGenerationResponse Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for ImagenGenerationResponse that defines the structure of responses from Imagen image generation requests. It uses a generic type parameter to support different image output formats.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagengenerationresponse.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ImagenGenerationResponse<T extends ImagenInlineImage | ImagenGCSImage> \n```\n\n----------------------------------------\n\nTITLE: Defining ImagenPersonFilterLevel Enum in TypeScript\nDESCRIPTION: Defines an enum for person filter levels used in image generation safety settings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @beta\nexport enum ImagenPersonFilterLevel {\n    ALLOW_ADULT = \"allow_adult\",\n    ALLOW_ALL = \"allow_all\",\n    BLOCK_ALL = \"dont_allow\"\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Data Connect API Type Definitions\nDESCRIPTION: Comprehensive TypeScript type and interface definitions for the Firebase Data Connect module. Includes core types for operations, queries, mutations, error handling, and configuration.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/data-connect.api.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseApp } from '@firebase/app';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { FirebaseError } from '@firebase/util';\nimport { LogLevelString } from '@firebase/logger';\nimport { Provider } from '@firebase/component';\n\nexport type CallerSdkType = 'Base' | 'Generated' | 'TanstackReactCore' | 'GeneratedReact' | 'TanstackAngularCore' | 'GeneratedAngular';\n\nexport const CallerSdkTypeEnum: {\n    readonly Base: \"Base\";\n    readonly Generated: \"Generated\";\n    readonly TanstackReactCore: \"TanstackReactCore\";\n    readonly GeneratedReact: \"GeneratedReact\";\n    readonly TanstackAngularCore: \"TanstackAngularCore\";\n    readonly GeneratedAngular: \"GeneratedAngular\";\n};\n\nexport type Code = DataConnectErrorCode;\n\nexport const Code: {\n    OTHER: DataConnectErrorCode;\n    ALREADY_INITIALIZED: DataConnectErrorCode;\n    NOT_INITIALIZED: DataConnectErrorCode;\n    NOT_SUPPORTED: DataConnectErrorCode;\n    INVALID_ARGUMENT: DataConnectErrorCode;\n    PARTIAL_ERROR: DataConnectErrorCode;\n    UNAUTHORIZED: DataConnectErrorCode;\n};\n\nexport function connectDataConnectEmulator(dc: DataConnect, host: string, port?: number, sslEnabled?: boolean): void;\n\nexport interface ConnectorConfig {\n    connector: string;\n    location: string;\n    service: string;\n}\n\nexport class DataConnect {\n    constructor(app: FirebaseApp, dataConnectOptions: DataConnectOptions, _authProvider: Provider<FirebaseAuthInternalName>, _appCheckProvider: Provider<AppCheckInternalComponentName>);\n    readonly app: FirebaseApp;\n    enableEmulator(transportOptions: TransportOptions): void;\n    getSettings(): ConnectorConfig;\n    isEmulator: boolean;\n    setInitialized(): void;\n}\n\nexport class DataConnectError extends FirebaseError {\n    constructor(code: Code, message: string);\n}\n\nexport type DataConnectErrorCode = 'other' | 'already-initialized' | 'not-initialized' | 'not-supported' | 'invalid-argument' | 'partial-error' | 'unauthorized';\n\nexport class DataConnectOperationError extends DataConnectError {\n    readonly response: DataConnectOperationFailureResponse;\n}\n\nexport interface DataConnectOperationFailureResponse {\n    readonly data?: Record<string, unknown> | null;\n    readonly errors: DataConnectOperationFailureResponseErrorInfo[];\n}\n\nexport interface DataConnectOperationFailureResponseErrorInfo {\n    readonly message: string;\n    readonly path: Array<string | number>;\n}\n\nexport interface DataConnectOptions extends ConnectorConfig {\n    projectId: string;\n}\n\nexport interface DataConnectResult<Data, Variables> extends OpResult<Data> {\n    ref: OperationRef<Data, Variables>;\n}\n\nexport interface DataConnectSubscription<Data, Variables> {\n    errCallback?: (e?: DataConnectError) => void;\n    unsubscribe: () => void;\n    userCallback: OnResultSubscription<Data, Variables>;\n}\n\nexport type DataSource = typeof SOURCE_CACHE | typeof SOURCE_SERVER;\n\nexport function executeMutation<Data, Variables>(mutationRef: MutationRef<Data, Variables>): MutationPromise<Data, Variables>;\n\nexport function executeQuery<Data, Variables>(queryRef: QueryRef<Data, Variables>): QueryPromise<Data, Variables>;\n\nexport function getDataConnect(options: ConnectorConfig): DataConnect;\n\nexport function getDataConnect(app: FirebaseApp, options: ConnectorConfig): DataConnect;\n\nexport const MUTATION_STR = \"mutation\";\n\nexport interface MutationPromise<Data, Variables> extends Promise<MutationResult<Data, Variables>> {}\n\nexport interface MutationRef<Data, Variables> extends OperationRef<Data, Variables> {\n    refType: typeof MUTATION_STR;\n}\n\nexport function mutationRef<Data>(dcInstance: DataConnect, mutationName: string): MutationRef<Data, undefined>;\n\nexport function mutationRef<Data, Variables>(dcInstance: DataConnect, mutationName: string, variables: Variables): MutationRef<Data, Variables>;\n\nexport interface MutationResult<Data, Variables> extends DataConnectResult<Data, Variables> {\n    ref: MutationRef<Data, Variables>;\n}\n\nexport type OnCompleteSubscription = () => void;\n\nexport type OnErrorSubscription = (err?: DataConnectError) => void;\n\nexport type OnResultSubscription<Data, Variables> = (res: QueryResult<Data, Variables>) => void;\n\nexport interface OperationRef<_Data, Variables> {\n    dataConnect: DataConnect;\n    name: string;\n    refType: ReferenceType;\n    variables: Variables;\n}\n\nexport interface OpResult<Data> {\n    data: Data;\n    fetchTime: string;\n    source: DataSource;\n}\n\nexport const QUERY_STR = \"query\";\n\nexport interface QueryPromise<Data, Variables> extends Promise<QueryResult<Data, Variables>> {}\n\nexport interface QueryRef<Data, Variables> extends OperationRef<Data, Variables> {\n    refType: typeof QUERY_STR;\n}\n\nexport function queryRef<Data>(dcInstance: DataConnect, queryName: string): QueryRef<Data, undefined>;\n\nexport function queryRef<Data, Variables>(dcInstance: DataConnect, queryName: string, variables: Variables): QueryRef<Data, Variables>;\n\nexport interface QueryResult<Data, Variables> extends DataConnectResult<Data, Variables> {\n    ref: QueryRef<Data, Variables>;\n    toJSON: () => SerializedRef<Data, Variables>;\n}\n\nexport type QueryUnsubscribe = () => void;\n\nexport type ReferenceType = typeof QUERY_STR | typeof MUTATION_STR;\n\nexport interface RefInfo<Variables> {\n    connectorConfig: DataConnectOptions;\n    name: string;\n    variables: Variables;\n}\n\nexport interface SerializedRef<Data, Variables> extends OpResult<Data> {\n    refInfo: RefInfo<Variables>;\n}\n\nexport function setLogLevel(logLevel: LogLevelString): void;\n\nexport const SOURCE_CACHE = \"CACHE\";\n\nexport const SOURCE_SERVER = \"SERVER\";\n\nexport function subscribe<Data, Variables>(queryRefOrSerializedResult: QueryRef<Data, Variables> | SerializedRef<Data, Variables>, observer: SubscriptionOptions<Data, Variables>): QueryUnsubscribe;\n\nexport function subscribe<Data, Variables>(queryRefOrSerializedResult: QueryRef<Data, Variables> | SerializedRef<Data, Variables>, onNext: OnResultSubscription<Data, Variables>, onError?: OnErrorSubscription, onComplete?: OnCompleteSubscription): QueryUnsubscribe;\n\nexport interface SubscriptionOptions<Data, Variables> {\n    onComplete?: OnCompleteSubscription;\n    onErr?: OnErrorSubscription;\n    onNext?: OnResultSubscription<Data, Variables>;\n}\n\nexport function terminate(dataConnect: DataConnect): Promise<void>;\n\nexport function toQueryRef<Data, Variables>(serializedRef: SerializedRef<Data, Variables>): QueryRef<Data, Variables>;\n\nexport interface TransportOptions {\n    host: string;\n    port?: number;\n    sslEnabled?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Item.item_name Property\nDESCRIPTION: Declaration of the optional item_name property for the Item interface, which can be used to specify the name of the item.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nitem_name?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining ToolConfig Interface in TypeScript\nDESCRIPTION: Defines an interface for tool configuration, including function calling config.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ToolConfig {\n    // (undocumented)\n    functionCallingConfig?: FunctionCallingConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query Properties in TypeScript for Firebase JavaScript SDK\nDESCRIPTION: This snippet defines the readonly properties of the Query class, including converter, firestore, and type. These properties provide access to the data converter, Firestore instance, and query type respectively.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.query.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly converter: FirestoreDataConverter<AppModelType, DbModelType> | null;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly firestore: Firestore;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: 'query' | 'collection';\n```\n\n----------------------------------------\n\nTITLE: Defining VideoMetadata Interface in TypeScript\nDESCRIPTION: Interface definition for VideoMetadata which describes input video content. It contains two properties: startOffset and endOffset, both representing time points in protobuf Duration format.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.videometadata.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VideoMetadata \n\n```\n\n----------------------------------------\n\nTITLE: Generating Size Reports for Multiple Firebase Modules\nDESCRIPTION: This snippet shows how to generate size analysis reports for multiple Firebase modules using the generateReportForModules function. It takes an array of module paths and returns a Promise that resolves to an array of Report objects.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/repo-scripts/size-analysis/README.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  const moduleLocations: string[] = ['...module1', '...module2'];\n  const reports: Report[] = await generateReportForModules(moduleLocations);\n  console.log(reports);\n\n\n}catch (error) {\n\n\n  console.log(error);\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: AuthCredential toJSON Method Implementation in Firebase Authentication\nDESCRIPTION: Defines the toJSON method that returns a JSON-serializable representation of the AuthCredential object. This allows the credential to be easily stored or transmitted.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.authcredential.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntoJSON(): object;\n```\n\n----------------------------------------\n\nTITLE: FirestoreError Code Property Signature\nDESCRIPTION: TypeScript signature for the code property that contains the backend error code associated with the Firestore error.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.firestoreerror.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly code: FirestoreErrorCode;\n```\n\n----------------------------------------\n\nTITLE: Building and Running Android App\nDESCRIPTION: Commands to build the Cordova app for Android and run it on an emulator or connected device.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/cordova/demo/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncordova build android\ncordova emulate android\n\n# Or\ncordova run android\n```\n\n----------------------------------------\n\nTITLE: FullMetadata Download Tokens Property\nDESCRIPTION: TypeScript property definition for download tokens that provide access to the download URL.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.fullmetadata.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndownloadTokens: string[] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining VertexAI Configuration Interface in TypeScript\nDESCRIPTION: TypeScript interface defining configuration options for VertexAI integration, including an optional location parameter.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VertexAIOptions {\n    location?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GenerateContentResponse.promptFeedback Property in TypeScript\nDESCRIPTION: TypeScript property definition for the promptFeedback property in the GenerateContentResponse interface. This optional property contains PromptFeedback information related to the generated content.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentresponse.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npromptFeedback?: PromptFeedback;\n```\n\n----------------------------------------\n\nTITLE: MultiFactorInfo.uid Property Definition\nDESCRIPTION: Defines the uid property of the MultiFactorInfo interface, which represents the multi-factor enrollment ID. This is a readonly required string property.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.multifactorinfo.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly uid: string;\n```\n\n----------------------------------------\n\nTITLE: Defining TextPart Interface in TypeScript\nDESCRIPTION: Defines an interface for text parts used in content generation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface TextPart {\n    // (undocumented)\n    functionCall?: never;\n    // (undocumented)\n    functionResponse?: never;\n    // (undocumented)\n    inlineData?: never;\n    // (undocumented)\n    text: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Auth Error Codes Map Definition in TypeScript\nDESCRIPTION: A comprehensive mapping of Firebase Authentication error codes used for error comparison. This map includes all possible error types that can be thrown by the Auth SDK, with a caution that using it may increase bundle size.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nAUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY: {\n    readonly ADMIN_ONLY_OPERATION: \"auth/admin-restricted-operation\";\n    readonly ARGUMENT_ERROR: \"auth/argument-error\";\n    readonly APP_NOT_AUTHORIZED: \"auth/app-not-authorized\";\n    readonly APP_NOT_INSTALLED: \"auth/app-not-installed\";\n    readonly CAPTCHA_CHECK_FAILED: \"auth/captcha-check-failed\";\n    readonly CODE_EXPIRED: \"auth/code-expired\";\n    readonly CORDOVA_NOT_READY: \"auth/cordova-not-ready\";\n    readonly CORS_UNSUPPORTED: \"auth/cors-unsupported\";\n    readonly CREDENTIAL_ALREADY_IN_USE: \"auth/credential-already-in-use\";\n    readonly CREDENTIAL_MISMATCH: \"auth/custom-token-mismatch\";\n    readonly CREDENTIAL_TOO_OLD_LOGIN_AGAIN: \"auth/requires-recent-login\";\n    readonly DEPENDENT_SDK_INIT_BEFORE_AUTH: \"auth/dependent-sdk-initialized-before-auth\";\n    readonly DYNAMIC_LINK_NOT_ACTIVATED: \"auth/dynamic-link-not-activated\";\n    readonly EMAIL_CHANGE_NEEDS_VERIFICATION: \"auth/email-change-needs-verification\";\n    readonly EMAIL_EXISTS: \"auth/email-already-in-use\";\n    readonly EMULATOR_CONFIG_FAILED: \"auth/emulator-config-failed\";\n    readonly EXPIRED_OOB_CODE: \"auth/expired-action-code\";\n    readonly EXPIRED_POPUP_REQUEST: \"auth/cancelled-popup-request\";\n    readonly INTERNAL_ERROR: \"auth/internal-error\";\n    readonly INVALID_API_KEY: \"auth/invalid-api-key\";\n    readonly INVALID_APP_CREDENTIAL: \"auth/invalid-app-credential\";\n    readonly INVALID_APP_ID: \"auth/invalid-app-id\";\n    readonly INVALID_AUTH: \"auth/invalid-user-token\";\n    readonly INVALID_AUTH_EVENT: \"auth/invalid-auth-event\";\n    readonly INVALID_CERT_HASH: \"auth/invalid-cert-hash\";\n    readonly INVALID_CODE: \"auth/invalid-verification-code\";\n    readonly INVALID_CONTINUE_URI: \"auth/invalid-continue-uri\";\n    readonly INVALID_CORDOVA_CONFIGURATION: \"auth/invalid-cordova-configuration\";\n    readonly INVALID_CUSTOM_TOKEN: \"auth/invalid-custom-token\";\n    readonly INVALID_DYNAMIC_LINK_DOMAIN: \"auth/invalid-dynamic-link-domain\";\n    readonly INVALID_EMAIL: \"auth/invalid-email\";\n    readonly INVALID_EMULATOR_SCHEME: \"auth/invalid-emulator-scheme\";\n    readonly INVALID_IDP_RESPONSE: \"auth/invalid-credential\";\n    readonly INVALID_LOGIN_CREDENTIALS: \"auth/invalid-credential\";\n    readonly INVALID_MESSAGE_PAYLOAD: \"auth/invalid-message-payload\";\n    readonly INVALID_MFA_SESSION: \"auth/invalid-multi-factor-session\";\n    readonly INVALID_OAUTH_CLIENT_ID: \"auth/invalid-oauth-client-id\";\n    readonly INVALID_OAUTH_PROVIDER: \"auth/invalid-oauth-provider\";\n    readonly INVALID_OOB_CODE: \"auth/invalid-action-code\";\n    readonly INVALID_ORIGIN: \"auth/unauthorized-domain\";\n    readonly INVALID_PASSWORD: \"auth/wrong-password\";\n    readonly INVALID_PERSISTENCE: \"auth/invalid-persistence-type\";\n    readonly INVALID_PHONE_NUMBER: \"auth/invalid-phone-number\";\n    readonly INVALID_PROVIDER_ID: \"auth/invalid-provider-id\";\n    readonly INVALID_RECIPIENT_EMAIL: \"auth/invalid-recipient-email\";\n    readonly INVALID_SENDER: \"auth/invalid-sender\";\n    readonly INVALID_SESSION_INFO: \"auth/invalid-verification-id\";\n    readonly INVALID_TENANT_ID: \"auth/invalid-tenant-id\";\n    readonly MFA_INFO_NOT_FOUND: \"auth/multi-factor-info-not-found\";\n    readonly MFA_REQUIRED: \"auth/multi-factor-auth-required\";\n    readonly MISSING_ANDROID_PACKAGE_NAME: \"auth/missing-android-pkg-name\";\n    readonly MISSING_APP_CREDENTIAL: \"auth/missing-app-credential\";\n    readonly MISSING_AUTH_DOMAIN: \"auth/auth-domain-config-required\";\n    readonly MISSING_CODE: \"auth/missing-verification-code\";\n    readonly MISSING_CONTINUE_URI: \"auth/missing-continue-uri\";\n    readonly MISSING_IFRAME_START: \"auth/missing-iframe-start\";\n    readonly MISSING_IOS_BUNDLE_ID: \"auth/missing-ios-bundle-id\";\n    readonly MISSING_OR_INVALID_NONCE: \"auth/missing-or-invalid-nonce\";\n    readonly MISSING_MFA_INFO: \"auth/missing-multi-factor-info\";\n    readonly MISSING_MFA_SESSION: \"auth/missing-multi-factor-session\";\n    readonly MISSING_PHONE_NUMBER: \"auth/missing-phone-number\";\n    readonly MISSING_SESSION_INFO: \"auth/missing-verification-id\";\n    readonly MODULE_DESTROYED: \"auth/app-deleted\";\n    readonly NEED_CONFIRMATION: \"auth/account-exists-with-different-credential\";\n    readonly NETWORK_REQUEST_FAILED: \"auth/network-request-failed\";\n    readonly NULL_USER: \"auth/null-user\";\n    readonly NO_AUTH_EVENT: \"auth/no-auth-event\";\n    readonly NO_SUCH_PROVIDER: \"auth/no-such-provider\";\n    readonly OPERATION_NOT_ALLOWED: \"auth/operation-not-allowed\";\n    readonly OPERATION_NOT_SUPPORTED: \"auth/operation-not-supported-in-this-environment\";\n    readonly POPUP_BLOCKED: \"auth/popup-blocked\";\n    readonly POPUP_CLOSED_BY_USER: \"auth/popup-closed-by-user\";\n    readonly PROVIDER_ALREADY_LINKED: \"auth/provider-already-linked\";\n    readonly QUOTA_EXCEEDED: \"auth/quota-exceeded\";\n    readonly REDIRECT_CANCELLED_BY_USER: \"auth/redirect-cancelled-by-user\";\n    readonly REDIRECT_OPERATION_PENDING: \"auth/redirect-operation-pending\";\n    readonly REJECTED_CREDENTIAL: \"auth/rejected-credential\";\n    readonly SECOND_FACTOR_ALREADY_ENROLLED: \"auth/second-factor-already-in-use\";\n    readonly SECOND_FACTOR_LIMIT_EXCEEDED: \"auth/maximum-second-factor-count-exceeded\";\n    readonly TENANT_ID_MISMATCH: \"auth/tenant-id-mismatch\";\n    readonly TIMEOUT: \"auth/timeout\";\n    readonly TOKEN_EXPIRED: \"auth/user-token-expired\";\n    readonly TOO_MANY_ATTEMPTS_TRY_LATER: \"auth/too-many-requests\";\n    readonly UNAUTHORIZED_DOMAIN: \"auth/unauthorized-continue-uri\";\n    readonly UNSUPPORTED_FIRST_FACTOR: \"auth/unsupported-first-factor\";\n    readonly UNSUPPORTED_PERSISTENCE: \"auth/unsupported-persistence-type\";\n    readonly UNSUPPORTED_TENANT_OPERATION: \"auth/unsupported-tenant-operation\";\n    readonly UNVERIFIED_EMAIL: \"auth/unverified-email\";\n    readonly USER_CANCELLED: \"auth/user-cancelled\";\n    readonly USER_DELETED: \"auth/user-not-found\";\n    readonly USER_DISABLED: \"auth/user-disabled\";\n    readonly USER_MISMATCH: \"auth/user-mismatch\";\n    readonly USER_SIGNED_OUT: \"auth/user-signed-out\";\n    readonly WEAK_PASSWORD: \"auth/weak-password\";\n    readonly WEB_STORAGE_UNSUPPORTED: \"auth/web-storage-unsupported\";\n    readonly ALREADY_INITIALIZED: \"auth/already-initialized\";\n    readonly RECAPTCHA_NOT_ENABLED: \"auth/recaptcha-not-enabled\";\n    readonly MISSING_RECAPTCHA_TOKEN: \"auth/missing-recaptcha-token\";\n    readonly INVALID_RECAPTCHA_TOKEN: \"auth/invalid-recaptcha-token\";\n    readonly INVALID_RECAPTCHA_ACTION: \"auth/invalid-recaptcha-action\";\n    readonly MISSING_CLIENT_TYPE: \"auth/missing-client-type\";\n    readonly MISSING_RECAPTCHA_VERSION: \"auth/missing-recaptcha-version\";\n    readonly INVALID_RECAPTCHA_VERSION: \"auth/invalid-recaptcha-version\";\n    readonly INVALID_REQ_TYPE: \"auth/invalid-req-type\";\n    readonly INVALID_HOSTING_LINK_DOMAIN: \"auth/invalid-hosting-link-domain\";\n}\n```\n\n----------------------------------------\n\nTITLE: ImagenInlineImage.bytesBase64Encoded Property Signature\nDESCRIPTION: Defines the bytesBase64Encoded property which contains the base64-encoded image data. This property is part of the Public Preview API.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imageninlineimage.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbytesBase64Encoded: string;\n```\n\n----------------------------------------\n\nTITLE: Defining SnapshotListenOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for SnapshotListenOptions that specifies configuration options for Firestore snapshot listeners. Used with onSnapshot() and QuerySnapshot.docChanges() methods.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.snapshotlistenoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface SnapshotListenOptions \n```\n\n----------------------------------------\n\nTITLE: Defining SchemaInterface Type Property\nDESCRIPTION: Type declaration for the required 'type' property within the SchemaInterface, which must be of SchemaType. This property defines the data type for schema validation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.schemainterface.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype: SchemaType;\n```\n\n----------------------------------------\n\nTITLE: Constructing ArraySchema Instance in TypeScript\nDESCRIPTION: This constructor initializes a new instance of the ArraySchema class. It takes two parameters: schemaParams of type SchemaParams, and items of type TypedSchema which defines the type of elements in the array.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.arrayschema.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(schemaParams: SchemaParams, items: TypedSchema);\n```\n\n----------------------------------------\n\nTITLE: Defining Item Interface Structure in TypeScript\nDESCRIPTION: Definition of the standard Google Analytics Item interface used for tracking items in analytics events. The interface contains various properties for describing products or items in e-commerce applications.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Item \n```\n\n----------------------------------------\n\nTITLE: Sign-in Provider Property Definition\nDESCRIPTION: Property definition for the authentication provider type, which can be anonymous, custom, phone, password, etc.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.idtokenresult.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsignInProvider: string | null;\n```\n\n----------------------------------------\n\nTITLE: TypedSchema Type Definition in TypeScript\nDESCRIPTION: Type that includes all specific schema types that can be used for function parameter type definitions, including integers, numbers, strings, booleans, objects, and arrays.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TypedSchema = IntegerSchema | NumberSchema | StringSchema | BooleanSchema | ObjectSchema | ArraySchema;\n```\n\n----------------------------------------\n\nTITLE: Logging View Item List Event in Firebase Analytics\nDESCRIPTION: This function logs a 'view_item_list' event in Firebase Analytics. It takes parameters for the analytics instance, event name, event parameters (including optional items, item list name, and item list ID), and analytics call options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'view_item_list', eventParams?: { items?: EventParams['items']; item_list_name?: EventParams['item_list_name']; item_list_id?: EventParams['item_list_id']; [key: string]: any; }, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Setting Priority with setPriority() Function\nDESCRIPTION: Function to set priority for data at a Database location. Returns a Promise that resolves when the priority write is complete.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function setPriority(ref: DatabaseReference, priority: string | number | null): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: StorageReference name Property Type Definition\nDESCRIPTION: Defines the name property type which represents the short name (final path component) of the referenced object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.storagereference.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Implementing responseSchema Property in GenerationConfig\nDESCRIPTION: TypeScript property definition for responseSchema in GenerationConfig interface, which defines the structure for responses with supported MIME types like application/json and text/x.enum.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generationconfig.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nresponseSchema?: TypedSchema | SchemaRequest;\n```\n\n----------------------------------------\n\nTITLE: Logging Timing Events in Firebase Analytics\nDESCRIPTION: TypeScript function signature for logging timing completion events with required name and value parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/analytics.api.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport function logEvent(analyticsInstance: Analytics, eventName: 'timing_complete', eventParams?: {\n    name: string;\n    value: number;\n    event_category?: string;\n    event_label?: string;\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Defining SchemaRequest Interface in TypeScript\nDESCRIPTION: Defines an interface for schema requests, extending SchemaShared and including required properties and type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface SchemaRequest extends SchemaShared<SchemaRequest> {\n    required?: string[];\n    type: SchemaType;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FieldValue.isEqual Method\nDESCRIPTION: Abstract method declaration for comparing FieldValue instances for equality. Takes another FieldValue as parameter and returns a boolean indicating if they are equal.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.fieldvalue.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nabstract isEqual(other: FieldValue): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining Item.creative_slot Property\nDESCRIPTION: Declaration of the optional creative_slot property for the Item interface, which can be used to specify the slot position of a promotional creative.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncreative_slot?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining HttpsCallableStreamResult Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for HttpsCallableStreamResult that wraps streaming results from Firebase Functions. Contains generic type parameters for response and stream data types.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.httpscallablestreamresult.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface HttpsCallableStreamResult<ResponseData = unknown, StreamData = unknown> \n```\n\n----------------------------------------\n\nTITLE: AuthErrorMap Interface Definition in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface definition for AuthErrorMap. It represents a mapping of error codes to error messages used in Firebase Authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.autherrormap.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AuthErrorMap \n```\n\n----------------------------------------\n\nTITLE: Defining Item.item_category4 Property\nDESCRIPTION: Declaration of the optional item_category4 property for the Item interface, which can be used to specify a fourth category level for the item.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nitem_category4?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Modality Enum in TypeScript\nDESCRIPTION: Defines an enum for different content modalities used in token counting and content generation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport enum Modality {\n    AUDIO = \"AUDIO\",\n    DOCUMENT = \"DOCUMENT\",\n    IMAGE = \"IMAGE\",\n    MODALITY_UNSPECIFIED = \"MODALITY_UNSPECIFIED\",\n    TEXT = \"TEXT\",\n    VIDEO = \"VIDEO\"\n}\n```\n\n----------------------------------------\n\nTITLE: Token Claims Property Definition\nDESCRIPTION: Property definition for token claims that includes both standard reserved claims and custom claims using ParsedToken type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.idtokenresult.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclaims: ParsedToken;\n```\n\n----------------------------------------\n\nTITLE: MultiFactorInfo.factorId Property Definition\nDESCRIPTION: Defines the factorId property of the MultiFactorInfo interface, which identifies the type of second factor. This is a readonly property that uses values from the FactorIdMap enum.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.multifactorinfo.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly factorId: (typeof FactorIdMap)[keyof typeof FactorIdMap];\n```\n\n----------------------------------------\n\nTITLE: Defining ImagenSafetySettings Interface in TypeScript\nDESCRIPTION: Defines an interface for safety settings used in image generation, including person and safety filter levels.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @beta\nexport interface ImagenSafetySettings {\n    personFilterLevel?: ImagenPersonFilterLevel;\n    safetyFilterLevel?: ImagenSafetyFilterLevel;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GenerateContentResponse.usageMetadata Property in TypeScript\nDESCRIPTION: TypeScript property definition for the usageMetadata property in the GenerateContentResponse interface. This optional property contains UsageMetadata information about the API usage for this generation request.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentresponse.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nusageMetadata?: UsageMetadata;\n```\n\n----------------------------------------\n\nTITLE: Declaring MultiFactorUid Property Type\nDESCRIPTION: Type declaration for the multiFactorUid property which specifies the unique identifier of the second authentication factor.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phonemultifactorsignininfooptions.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmultiFactorUid?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining QueryOrderByConstraint Class in TypeScript\nDESCRIPTION: This snippet defines the QueryOrderByConstraint class, which extends QueryConstraint. It is used to create ordering constraints for Firestore queries. The class has a readonly 'type' property set to 'orderBy'.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.queryorderbyconstraint.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class QueryOrderByConstraint extends QueryConstraint \n{\n    readonly type = \"orderBy\";\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Claims Property Definition\nDESCRIPTION: Complex property definition for Firebase-specific claims including sign-in provider, second factor authentication, and user identities.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.parsedtoken.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n'firebase'?: {\n        'sign_in_provider'?: string;\n        'sign_in_second_factor'?: string;\n        'identities'?: Record<string, string>;\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining POSSIBLE_ROLES Constant in TypeScript\nDESCRIPTION: Defines a constant array of possible roles for content generation participants.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const POSSIBLE_ROLES: readonly [\"user\", \"model\", \"function\", \"system\"];\n```\n\n----------------------------------------\n\nTITLE: InlineDataPart videoMetadata Property TypeScript Definition\nDESCRIPTION: Optional property definition for videoMetadata that provides additional information when the inlineData contains video content. This property is only applicable for video data.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.inlinedatapart.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nvideoMetadata?: VideoMetadata;\n```\n\n----------------------------------------\n\nTITLE: QuerySnapshot docs Property Getter\nDESCRIPTION: Getter method that returns an array of QueryDocumentSnapshot objects representing all documents in the QuerySnapshot.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.querysnapshot.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget docs(): Array<QueryDocumentSnapshot<AppModelType, DbModelType>>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Enum Property\nDESCRIPTION: Optional string array property for defining enumerated values.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.schemashared.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nenum?: string[];\n```\n\n----------------------------------------\n\nTITLE: GtagConfigParams Property: cookie_expires\nDESCRIPTION: This property sets the expiration time for cookies in seconds. It defaults to 63072000 (two years) if not specified. It is part of the GtagConfigParams interface and controls cookie lifetime.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.gtagconfigparams.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n'cookie_expires'?: number;\n```\n\n----------------------------------------\n\nTITLE: FileDataPart.functionCall Property Signature\nDESCRIPTION: Signature for the functionCall property which is explicitly set to never type to prevent its use in a FileDataPart.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.filedatapart.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCall?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining Firestore Class Properties in TypeScript\nDESCRIPTION: Declares the 'app' and 'type' properties of the Firestore class. The 'app' property is a getter that returns the associated FirebaseApp instance, while 'type' indicates whether it's a Firestore or Firestore Lite instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestore.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget app(): FirebaseApp;\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype: 'firestore-lite' | 'firestore';\n```\n\n----------------------------------------\n\nTITLE: Defining Type Property in ObjectSchemaInterface\nDESCRIPTION: Specifies the type property signature that enforces the schema type to be SchemaType.OBJECT, ensuring proper type checking for object schemas.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.objectschemainterface.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype: SchemaType.OBJECT;\n```\n\n----------------------------------------\n\nTITLE: Defining Persistence Interface in TypeScript for Firebase Authentication\nDESCRIPTION: This code snippet defines the Persistence interface with a single property 'type'. The type property specifies the persistence mechanism used for storing authentication state, such as session storage, local storage, in-memory, or cookies.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.persistence.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Persistence {\n  readonly type: 'SESSION' | 'LOCAL' | 'NONE' | 'COOKIE';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SchemaInterface Interface in TypeScript\nDESCRIPTION: Defines an interface for schema, extending SchemaShared and specifying the type property.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface SchemaInterface extends SchemaShared<SchemaInterface> {\n    type: SchemaType;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring VectorValue Class in TypeScript\nDESCRIPTION: This snippet shows the TypeScript declaration of the VectorValue class. It is exported and can be used to represent vector types in Firestore documents.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.vectorvalue.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class VectorValue \n```\n\n----------------------------------------\n\nTITLE: Comparing Bytes Objects in TypeScript\nDESCRIPTION: Method to check if the current Bytes object is equal to another Bytes object. It returns true if the objects are equal.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.bytes.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nisEqual(other: Bytes): boolean;\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Getter Method Signature\nDESCRIPTION: Method signature for converting Remote Config values to boolean. Interprets '1', 'true', 't', 'yes', 'y', 'on' as true (case-insensitive), and other values as false.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.value.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasBoolean(): boolean;\n```\n\n----------------------------------------\n\nTITLE: FunctionCalls Helper Method Declaration in TypeScript\nDESCRIPTION: Method declaration that retrieves function calls from the response, returning an array of FunctionCall objects or undefined if none exist.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.enhancedgeneratecontentresponse.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCalls: () => FunctionCall[] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Declaring Firebase Storage Upload Functions in TypeScript\nDESCRIPTION: This snippet declares functions for uploading data to Firebase Storage, including updateMetadata, uploadBytes, uploadBytesResumable, and uploadString. It also defines interfaces for upload metadata and results.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/storage.api.md#2025-04-14_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport function updateMetadata(ref: StorageReference, metadata: SettableMetadata): Promise<FullMetadata>;\n\n// @public\nexport function uploadBytes(ref: StorageReference, data: Blob | Uint8Array | ArrayBuffer, metadata?: UploadMetadata): Promise<UploadResult>;\n\n// @public\nexport function uploadBytesResumable(ref: StorageReference, data: Blob | Uint8Array | ArrayBuffer, metadata?: UploadMetadata): UploadTask;\n\n// @public\nexport interface UploadMetadata extends SettableMetadata {\n    md5Hash?: string | undefined;\n}\n\n// @public\nexport interface UploadResult {\n    readonly metadata: FullMetadata;\n    readonly ref: StorageReference;\n}\n\n// @public\nexport function uploadString(ref: StorageReference, value: string, format?: StringFormat, metadata?: UploadMetadata): Promise<UploadResult>;\n```\n\n----------------------------------------\n\nTITLE: Timestamp Property Declarations\nDESCRIPTION: Readonly property declarations for seconds and nanoseconds components of the timestamp.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.timestamp.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly nanoseconds: number;\nreadonly seconds: number;\n```\n\n----------------------------------------\n\nTITLE: Defining GenerateContentResponse.candidates Property in TypeScript\nDESCRIPTION: TypeScript property definition for the candidates array in the GenerateContentResponse interface. This property contains an optional array of GenerateContentCandidate objects representing the generated content responses.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentresponse.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncandidates?: GenerateContentCandidate[];\n```\n\n----------------------------------------\n\nTITLE: username Property Definition in AdditionalUserInfo\nDESCRIPTION: Defines the optional username property which contains the username if the provider is GitHub or Twitter. This property may be null for other providers.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.additionaluserinfo.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly username?: string | null;\n```\n\n----------------------------------------\n\nTITLE: Running Firebase Auth Emulator Tests with CLI Command\nDESCRIPTION: Command for executing all integration and WebDriver tests against the Firebase Auth emulator using the firebase CLI. This uses the emulators:exec command to start the Auth emulator with a specific project and run the local integration tests.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfirebase emulators:exec --project foo-bar --only auth \"yarn test:integration:local\"\n```\n\n----------------------------------------\n\nTITLE: Accessing VerificationId Property in ConfirmationResult\nDESCRIPTION: TypeScript signature for the readonly verificationId property that stores the authentication operation's verification ID, which can be used with a verification code to create a PhoneAuthCredential.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.confirmationresult.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly verificationId: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Item.item_id Property\nDESCRIPTION: Declaration of the optional item_id property for the Item interface, which can be used to specify a unique identifier for the item.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nitem_id?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining HttpsCallableResult Interface in TypeScript\nDESCRIPTION: This code snippet defines the HttpsCallableResult interface, which wraps the result of a Firebase Cloud Functions callable function. It has a generic type parameter ResponseData for the data property, defaulting to unknown.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.httpscallableresult.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface HttpsCallableResult<ResponseData = unknown> \n```\n\n----------------------------------------\n\nTITLE: Declaring QueryLimitConstraint Type Property in TypeScript\nDESCRIPTION: This snippet declares the 'type' property of the QueryLimitConstraint class. It is a readonly property that can be either 'limit' or 'limitToLast', indicating the type of query constraint.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.querylimitconstraint.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: 'limit' | 'limitToLast';\n```\n\n----------------------------------------\n\nTITLE: Defining Item.item_category Property\nDESCRIPTION: Declaration of the optional item_category property for the Item interface, which can be used to specify the category of the item.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nitem_category?: string;\n```\n\n----------------------------------------\n\nTITLE: FunctionDeclarationsTool functionDeclarations Property in TypeScript\nDESCRIPTION: Defines the functionDeclarations property of the FunctionDeclarationsTool interface. This property holds an array of function declarations that can be passed to the model with user queries.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.functiondeclarationstool.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclarations?: FunctionDeclaration[];\n```\n\n----------------------------------------\n\nTITLE: Firebase Storage Operation Retry Time Property\nDESCRIPTION: Defines the maxOperationRetryTime property that sets the maximum retry duration for non-upload/download operations in milliseconds.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.firebasestorage.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmaxOperationRetryTime: number;\n```\n\n----------------------------------------\n\nTITLE: Terminating Firestore instance in JavaScript SDK\nDESCRIPTION: Shows how to use the terminate() method to terminate a Firestore instance and release held resources.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.firestore().terminate().then(() => {\n  console.log('Firestore instance terminated');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Value Source for Remote Config in TypeScript\nDESCRIPTION: This type definition indicates the source of a value in Remote Config. It distinguishes between static constants, default config, and fetched config values.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.md#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ValueSource = 'static' | 'default' | 'remote';\n```\n\n----------------------------------------\n\nTITLE: Defining cacheSizeBytes Property in PersistentCacheSettings\nDESCRIPTION: This snippet shows the declaration of the cacheSizeBytes property in the PersistentCacheSettings interface. It sets the approximate cache size threshold for on-disk data, with a default of 40 MB and a minimum of 1 MB.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.persistentcachesettings.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncacheSizeBytes?: number;\n```\n\n----------------------------------------\n\nTITLE: ImagenGCSImage.gcsURI Property Definition\nDESCRIPTION: Property definition for gcsURI which stores the URI of the file in Cloud Storage for Firebase. Example format would be \"gs://bucket-name/path/sample_0.jpg\".\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagengcsimage.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngcsURI: string;\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionOptions Interface in TypeScript\nDESCRIPTION: Declaration of the TransactionOptions interface that provides configuration options for Firebase database transactions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.transactionoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface TransactionOptions \n```\n\n----------------------------------------\n\nTITLE: Accessing the Token API Host Property in Firebase Auth Config\nDESCRIPTION: Property definition for tokenApiHost in the Config interface. Specifies the host where the Secure Token API is running.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.config.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntokenApiHost: string;\n```\n\n----------------------------------------\n\nTITLE: Extracting Issued At Time from Token in TypeScript\nDESCRIPTION: This constant function extracts the issued at time from a token. It takes a token string as input and returns the issued at time as a number, or null if not found.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const issuedAtTime: (token: string) => number | null;\n```\n\n----------------------------------------\n\nTITLE: GenerativeContentBlob.data Property Definition\nDESCRIPTION: Property definition for the data field in GenerativeContentBlob interface, which stores the image as a base64-encoded string.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generativecontentblob.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndata: string;\n```\n\n----------------------------------------\n\nTITLE: Defining StringFormat Enum in TypeScript for Firebase Storage\nDESCRIPTION: This snippet defines a constant object StringFormat with readonly properties for different string encoding formats used in Firebase Storage operations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/storage.api.md#2025-04-14_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const StringFormat: {\n    readonly RAW: \"raw\";\n    readonly BASE64: \"base64\";\n    readonly BASE64URL: \"base64url\";\n    readonly DATA_URL: \"data_url\";\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Items Property\nDESCRIPTION: Optional generic property for nested schema items.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.schemashared.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nitems?: T;\n```\n\n----------------------------------------\n\nTITLE: Extracting OAuthCredential from AuthError in TypeScript\nDESCRIPTION: Static method to extract the underlying OAuthCredential from an AuthError thrown during authentication operations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.samlauthprovider.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic credentialFromError(error: FirebaseError): AuthCredential | null;\n```\n\n----------------------------------------\n\nTITLE: Declaring photoURL Property in UserInfo Interface\nDESCRIPTION: This snippet shows the declaration of the photoURL property in the UserInfo interface. It is a readonly property that can be either a string or null, representing the URL of the user's profile photo.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.userinfo.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly photoURL: string | null;\n```\n\n----------------------------------------\n\nTITLE: Local Cache Configuration\nDESCRIPTION: Property definition for specifying the local cache implementation and settings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestoresettings.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlocalCache?: FirestoreLocalCache;\n```\n\n----------------------------------------\n\nTITLE: Implementing the tokenCount Property in ModalityTokenCount Interface\nDESCRIPTION: TypeScript property declaration for the tokenCount property in ModalityTokenCount interface. This property represents the number of tokens counted for a particular modality.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.modalitytokencount.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntokenCount: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Query Class for Firestore in TypeScript\nDESCRIPTION: Defines the Query class for Firestore operations. It includes methods for converting queries and handling different model types.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore.api.md#2025-04-14_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Query<AppModelType = DocumentData, DbModelType extends DocumentData = DocumentData> {\n    protected constructor();\n    readonly converter: FirestoreDataConverter<AppModelType, DbModelType> | null;\n    readonly firestore: Firestore;\n    readonly type: 'query' | 'collection';\n    withConverter(converter: null): Query<DocumentData, DocumentData>;\n    withConverter<NewAppModelType, NewDbModelType extends DocumentData = DocumentData>(converter: FirestoreDataConverter<NewAppModelType, NewDbModelType>): Query<NewAppModelType, NewDbModelType>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SchemaType Enum in TypeScript\nDESCRIPTION: Defines an enum for different schema types used in schema definitions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport enum SchemaType {\n    ARRAY = \"array\",\n    BOOLEAN = \"boolean\",\n    INTEGER = \"integer\",\n    NUMBER = \"number\",\n    OBJECT = \"object\",\n    STRING = \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the parameters Property Signature in FunctionDeclaration\nDESCRIPTION: TypeScript signature for the optional parameters property of FunctionDeclaration. This property uses ObjectSchemaInterface to describe function parameters in JSON Schema Object format following OpenAPI 3.03 standards.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.functiondeclaration.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nparameters?: ObjectSchemaInterface;\n```\n\n----------------------------------------\n\nTITLE: Logging Promotion Events in Firebase Analytics\nDESCRIPTION: TypeScript function signature for logging promotion-related events (select_promotion, view_promotion) with optional parameters for promotion details.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/analytics.api.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function logEvent(analyticsInstance: Analytics, eventName: 'select_promotion' | 'view_promotion', eventParams?: {\n    items?: EventParams['items'];\n    promotion_id?: EventParams['promotion_id'];\n    promotion_name?: EventParams['promotion_name'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Defining prefixes Property in ListResult Interface\nDESCRIPTION: This snippet shows the definition of the prefixes property in the ListResult interface. It is an array of StorageReference objects representing sub-folders in the listed directory.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.listresult.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprefixes: StorageReference[];\n```\n\n----------------------------------------\n\nTITLE: Implementing candidateCount Property in GenerationConfig\nDESCRIPTION: TypeScript property definition for candidateCount in GenerationConfig interface, which specifies the number of generated candidates to return.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generationconfig.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncandidateCount?: number;\n```\n\n----------------------------------------\n\nTITLE: With Converter Method Implementation\nDESCRIPTION: Method for applying a custom data converter to the DocumentReference, enabling custom type conversion.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.documentreference.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nwithConverter<NewAppModelType, NewDbModelType extends DocumentData = DocumentData>(converter: FirestoreDataConverter<NewAppModelType, NewDbModelType>): DocumentReference<NewAppModelType, NewDbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Defining ModalityTokenCount Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for ModalityTokenCount, which represents token counting information for a single modality in the Firebase JS SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.modalitytokencount.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ModalityTokenCount \n```\n\n----------------------------------------\n\nTITLE: Defining nextPageToken Property in ListResult Interface\nDESCRIPTION: This snippet defines the nextPageToken property in the ListResult interface. It is an optional string that indicates if there might be more results for the list operation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.listresult.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnextPageToken?: string;\n```\n\n----------------------------------------\n\nTITLE: Accessing Document ID in DocumentSnapshot\nDESCRIPTION: Getter method for retrieving the document's ID from a DocumentSnapshot instance. This property provides access to the unique identifier of the document in Firestore.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.documentsnapshot.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget id(): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Possible Roles Constant in TypeScript\nDESCRIPTION: Constant array defining the possible roles a content producer can have in a conversation with generative models.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nPOSSIBLE_ROLES: readonly [\"user\", \"model\", \"function\", \"system\"]\n```\n\n----------------------------------------\n\nTITLE: Declaring ObjectSchemaInterface Type Definition in TypeScript\nDESCRIPTION: Defines the interface for ObjectSchema class that extends SchemaInterface. Specifies the structure for object schema handling with optional properties and schema type definitions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.objectschemainterface.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ObjectSchemaInterface extends SchemaInterface \n```\n\n----------------------------------------\n\nTITLE: Defining DocumentData Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for DocumentData which represents the structure of document data in Firestore. This interface is used when setting document data through setDoc() operations and defines the mapping between fields and their values.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.documentdata.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface DocumentData\n```\n\n----------------------------------------\n\nTITLE: Defining OperationType Enumeration in TypeScript\nDESCRIPTION: Enumeration of supported authentication operation types including link, reauthenticate, and sign-in operations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\nOperationType: {\n    readonly LINK: \"link\";\n    readonly REAUTHENTICATE: \"reauthenticate\";\n    readonly SIGN_IN: \"signIn\";\n}\n```\n\n----------------------------------------\n\nTITLE: EmulatorConfig Interface Definition in TypeScript\nDESCRIPTION: The TypeScript interface definition for EmulatorConfig, which is used to configure Firebase Authentication Emulator settings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.emulatorconfig.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EmulatorConfig \n```\n\n----------------------------------------\n\nTITLE: Declaring Type Property for QueryStartAtConstraint in TypeScript\nDESCRIPTION: This code snippet declares the 'type' property for the QueryStartAtConstraint class. It specifies the type of the query constraint as either 'startAt' or 'startAfter'.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.querystartatconstraint.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: 'startAt' | 'startAfter';\n```\n\n----------------------------------------\n\nTITLE: Converting PhoneAuthCredential to JSON\nDESCRIPTION: Method signature for serializing a PhoneAuthCredential instance to a JSON-serializable object representation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phoneauthcredential.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntoJSON(): object;\n```\n\n----------------------------------------\n\nTITLE: Implementing maxOutputTokens Property in GenerationConfig\nDESCRIPTION: TypeScript property definition for maxOutputTokens in GenerationConfig interface, which limits the maximum number of tokens in the generated response.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generationconfig.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmaxOutputTokens?: number;\n```\n\n----------------------------------------\n\nTITLE: Constructor for ReCaptchaV3Provider in TypeScript\nDESCRIPTION: This snippet shows the constructor for the ReCaptchaV3Provider class. It takes a siteKey parameter of type string, which is used to create a new instance of the provider.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.recaptchav3provider.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(_siteKey: string);\n```\n\n----------------------------------------\n\nTITLE: GenerateContentCandidate content Property Definition\nDESCRIPTION: Defines the required content property which contains the actual generated content of the candidate response.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentcandidate.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncontent: Content;\n```\n\n----------------------------------------\n\nTITLE: Defining RemoteConfigOptions Interface in TypeScript\nDESCRIPTION: Interface definition for Remote Config initialization options. Specifies two optional properties: initialFetchResponse for hydrating state with fetch data, and templateId for specifying which template to use.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.remoteconfigoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RemoteConfigOptions \n```\n\n----------------------------------------\n\nTITLE: Accessing Underlying Query in AggregateQuerySnapshot\nDESCRIPTION: Definition of the 'query' property, which provides access to the underlying Query object over which the aggregations were performed. It is a read-only property returning a Query instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.aggregatequerysnapshot.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly query: Query<AppModelType, DbModelType>;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionDeclaration Interface in TypeScript\nDESCRIPTION: Interface declaration for FunctionDeclaration that represents a structured function definition following OpenAPI 3.0 specification. This interface is used to define functions that can be used as Tools by models.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.functiondeclaration.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface FunctionDeclaration \n```\n\n----------------------------------------\n\nTITLE: Defining PhoneMultiFactorSignInInfoOptions Interface in TypeScript\nDESCRIPTION: Interface definition for phone multi-factor authentication options. Used to specify parameters when signing in with a second factor in Firebase Authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phonemultifactorsignininfooptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PhoneMultiFactorSignInInfoOptions \n```\n\n----------------------------------------\n\nTITLE: Declaring displayName Property in UserInfo Interface\nDESCRIPTION: This snippet shows the declaration of the displayName property in the UserInfo interface. It is a readonly property that can be either a string or null, representing the user's display name.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.userinfo.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly displayName: string | null;\n```\n\n----------------------------------------\n\nTITLE: Defining SchemaParams Interface in TypeScript\nDESCRIPTION: This code snippet defines the SchemaParams interface, which extends SchemaShared<SchemaInterface>. It is used to specify parameters for creating Schema classes in the Firebase JavaScript SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.schemaparams.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SchemaParams extends SchemaShared<SchemaInterface>\n```\n\n----------------------------------------\n\nTITLE: Twitter OAuth Provider Class Definition in TypeScript\nDESCRIPTION: Class definition for Twitter authentication provider extending BaseOAuthProvider. Includes methods for handling Twitter credentials and constants for provider identification.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/auth.api.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TwitterAuthProvider extends BaseOAuthProvider {\n    constructor();\n    static credential(token: string, secret: string): OAuthCredential;\n    static credentialFromError(error: FirebaseError): OAuthCredential | null;\n    static credentialFromResult(userCredential: UserCredential): OAuthCredential | null;\n    static readonly PROVIDER_ID: 'twitter.com';\n    static readonly TWITTER_SIGN_IN_METHOD: 'twitter.com';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TotpSecret Class Structure in TypeScript\nDESCRIPTION: Class declaration for TotpSecret that handles TOTP (Time-based One-Time Password) functionality for multi-factor authentication. Used for generating assertions and managing shared secret keys.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.totpsecret.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class TotpSecret \n```\n\n----------------------------------------\n\nTITLE: TextPart Function Response Property Definition\nDESCRIPTION: Property definition that explicitly marks functionResponse as an optional never type, indicating this property cannot exist on text parts.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.textpart.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionResponse?: never;\n```\n\n----------------------------------------\n\nTITLE: HttpsCallableStreamResult Data Property Signature\nDESCRIPTION: TypeScript signature for the data property which returns a Promise of the ResponseData type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.httpscallablestreamresult.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly data: Promise<ResponseData>;\n```\n\n----------------------------------------\n\nTITLE: Generating AuthCredential from UserCredential in TypeScript\nDESCRIPTION: Static method to generate an AuthCredential from a UserCredential after a successful SAML authentication flow.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.samlauthprovider.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstatic credentialFromResult(userCredential: UserCredential): AuthCredential | null;\n```\n\n----------------------------------------\n\nTITLE: Implementing getItem Method for ReactNativeAsyncStorage\nDESCRIPTION: The getItem method retrieves an item from storage based on the provided key. It returns a Promise that resolves to either a string value or null if the key is not found.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.reactnativeasyncstorage.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetItem(key: string): Promise<string | null>;\n```\n\n----------------------------------------\n\nTITLE: Defining AuthSettings Interface in TypeScript\nDESCRIPTION: This code defines the AuthSettings interface, which represents an Auth instance's settings. It includes a single property for disabling app verification for phone authentication testing.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.authsettings.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AuthSettings \n{\n  appVerificationDisabledForTesting: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: ApplicationVerifier.type Property Definition\nDESCRIPTION: The type property identifies the type of application verifier being used (e.g., \"recaptcha\").\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.applicationverifier.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string;\n```\n\n----------------------------------------\n\nTITLE: Defining ImagenAspectRatio Enum in TypeScript\nDESCRIPTION: Defines an enum for different aspect ratios used in image generation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @beta\nexport enum ImagenAspectRatio {\n    LANDSCAPE_16x9 = \"16:9\",\n    LANDSCAPE_3x4 = \"3:4\",\n    PORTRAIT_4x3 = \"4:3\",\n    PORTRAIT_9x16 = \"9:16\",\n    SQUARE = \"1:1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PersistentLocalCache Interface in TypeScript\nDESCRIPTION: Declares the PersistentLocalCache interface with a 'kind' property of type 'persistent'. This interface is used to provide a persistent cache backed by IndexedDb to the Firebase SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.persistentlocalcache.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface PersistentLocalCache \n{\n    kind: 'persistent';\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring allowedFunctionNames Property in FunctionCallingConfig\nDESCRIPTION: Property definition for allowedFunctionNames which accepts an array of strings to specify permitted function names.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.functioncallingconfig.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nallowedFunctionNames?: string[];\n```\n\n----------------------------------------\n\nTITLE: Declaring serverTimestamps Property Type\nDESCRIPTION: Type definition for the serverTimestamps property within SnapshotOptions interface. Specifies three possible values: 'estimate', 'previous', or 'none' to control how pending server timestamps are handled.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.snapshotoptions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly serverTimestamps?: 'estimate' | 'previous' | 'none';\n```\n\n----------------------------------------\n\nTITLE: Defining FileDataPart Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for FileDataPart which specifies that it contains FileData and explicitly prevents other content part types from being used simultaneously.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.filedatapart.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FileDataPart \n\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionResponse Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for FunctionResponse which contains the result of a FunctionCall. It includes the function name and a structured JSON response object that provides context to the model.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.functionresponse.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FunctionResponse \n\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Comparison Method\nDESCRIPTION: Method to compare a StorageErrorCode against the error's code, filtering out the prefix.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.storageerror.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n_codeEquals(code: StorageErrorCode): boolean;\n```\n\n----------------------------------------\n\nTITLE: Stream Property Type Definition\nDESCRIPTION: Type definition for the stream property that provides an AsyncGenerator for receiving chunks of the enhanced generate content response.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentstreamresult.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstream: AsyncGenerator<EnhancedGenerateContentResponse>;\n```\n\n----------------------------------------\n\nTITLE: Defining InlineDataPart Interface in TypeScript\nDESCRIPTION: Defines an interface for inline data parts used in content generation, including generative content blob and video metadata.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface InlineDataPart {\n    // (undocumented)\n    functionCall?: never;\n    // (undocumented)\n    functionResponse?: never;\n    // (undocumented)\n    inlineData: GenerativeContentBlob;\n    // (undocumented)\n    text?: never;\n    videoMetadata?: VideoMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomParameters Type in TypeScript\nDESCRIPTION: Type definition for a map of OAuth custom parameters as key-value string pairs, used when configuring OAuth providers.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_89\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CustomParameters = Record<string, string>;\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the TransactionOptions interface, which is used to specify options for customizing transaction behavior in Firestore. It includes a single property 'maxAttempts' to set the maximum number of commit attempts.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.transactionoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface TransactionOptions \n```\n\n----------------------------------------\n\nTITLE: EmulatorConfig.host Property Definition in TypeScript\nDESCRIPTION: The host property definition for EmulatorConfig interface which specifies the hostname of the emulator. It can be a domain, IPv4 address, or quoted IPv6 address.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.emulatorconfig.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly host: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Promotion Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the deprecated Promotion type used in Firebase Analytics. Contains optional string properties for creative_name, creative_slot, id, and name to track promotional content details.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.promotion.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Promotion\n```\n\n----------------------------------------\n\nTITLE: Removing Data Converter from DocumentReference\nDESCRIPTION: Method to remove the current data converter from a DocumentReference. It returns a new DocumentReference instance without any converter, using the default DocumentData type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.documentreference.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwithConverter(converter: null): DocumentReference<DocumentData, DocumentData>;\n```\n\n----------------------------------------\n\nTITLE: RemoteConfigSettings Fetch Timeout Property\nDESCRIPTION: Property definition for the maximum request timeout duration when fetching remote config data. Specified in milliseconds with a default value of 60000 (one minute).\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.remoteconfigsettings.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfetchTimeoutMillis: number;\n```\n\n----------------------------------------\n\nTITLE: Location Property Definition in VertexAIOptions Interface\nDESCRIPTION: The optional location property definition in the VertexAIOptions interface. It accepts a string value that likely specifies the geographic location for Vertex AI resources.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.vertexaioptions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlocation?: string;\n```\n\n----------------------------------------\n\nTITLE: HttpsCallableOptions limitedUseAppCheckTokens Property Definition\nDESCRIPTION: Type definition for the limitedUseAppCheckTokens property which enables limited-use App Check tokens for callable function requests. Required for functions with replay protection enabled.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.httpscallableoptions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlimitedUseAppCheckTokens?: boolean;\n```\n\n----------------------------------------\n\nTITLE: OAuthCredential toJSON Method\nDESCRIPTION: Defines a method that returns a JSON-serializable representation of the OAuthCredential object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.oauthcredential.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntoJSON(): object;\n```\n\n----------------------------------------\n\nTITLE: ApplicationVerifier.verify Method Definition\nDESCRIPTION: The verify method executes the verification process and returns a Promise for a token that can be used to assert the validity of a request.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.applicationverifier.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nverify(): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: ChatSession History Method - TypeScript\nDESCRIPTION: Method for retrieving chat history, excluding blocked prompts and their responses.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.chatsession.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetHistory(): Promise<Content[]>;\n```\n\n----------------------------------------\n\nTITLE: Defining Type Identifier for AggregateQuerySnapshot\nDESCRIPTION: Declaration of the 'type' property, which is a string constant used to uniquely identify instances of the AggregateQuerySnapshot class. It is set to \"AggregateQuerySnapshot\".\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.aggregatequerysnapshot.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type = \"AggregateQuerySnapshot\";\n```\n\n----------------------------------------\n\nTITLE: Implementing responseMimeType Property in GenerationConfig\nDESCRIPTION: TypeScript property definition for responseMimeType in GenerationConfig interface, which specifies the output format of generated content (text/plain, application/json, or text/x.enum).\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generationconfig.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nresponseMimeType?: string;\n```\n\n----------------------------------------\n\nTITLE: Converting Bytes to String Representation in TypeScript\nDESCRIPTION: Method to create a string representation of the Bytes object. The exact format of this representation is not specified in the documentation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.bytes.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntoString(): string;\n```\n\n----------------------------------------\n\nTITLE: Defining PhoneMultiFactorGenerator Class Structure\nDESCRIPTION: Class declaration for PhoneMultiFactorGenerator that provides functionality for generating phone-based multi-factor authentication assertions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phonemultifactorgenerator.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class PhoneMultiFactorGenerator\n```\n\n----------------------------------------\n\nTITLE: ThenableReference Parent Property Definition\nDESCRIPTION: Type definition for the parent property of ThenableReference interface, representing the DatabaseReference of the parent location.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.thenablereference.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nparent: DatabaseReference;\n```\n\n----------------------------------------\n\nTITLE: FileData fileUri Property Definition\nDESCRIPTION: Property definition for the fileUri field of type string that represents the URI of the uploaded file.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.filedata.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfileUri: string;\n```\n\n----------------------------------------\n\nTITLE: Defining the md5Hash Property in UploadMetadata Interface\nDESCRIPTION: Declaration of the optional md5Hash property in the UploadMetadata interface, which accepts a string representing a Base64-encoded MD5 hash of the object being uploaded.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.uploadmetadata.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmd5Hash?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining garbageCollector Property in MemoryCacheSettings\nDESCRIPTION: This code snippet shows the signature of the garbageCollector property within the MemoryCacheSettings interface. It is an optional property of type MemoryGarbageCollector used for the memory cache layer.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.memorycachesettings.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngarbageCollector?: MemoryGarbageCollector;\n```\n\n----------------------------------------\n\nTITLE: Defining Firebase Analytics Interface in TypeScript\nDESCRIPTION: This code snippet defines the Analytics interface for Firebase. It includes a single property 'app' of type FirebaseApp, which represents the Firebase application instance associated with this Analytics object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.analytics.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Analytics {\n  app: FirebaseApp;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring MultiFactorHint Property Type\nDESCRIPTION: Type declaration for the multiFactorHint property which specifies the MultiFactorInfo object used during authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phonemultifactorsignininfooptions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmultiFactorHint?: MultiFactorInfo;\n```\n\n----------------------------------------\n\nTITLE: RecaptchaVerifier Clear Method\nDESCRIPTION: Method signature for clearing the reCAPTCHA widget from the page and destroying the instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.recaptchaverifier.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclear(): void;\n```\n\n----------------------------------------\n\nTITLE: Defining MemoryCacheSettings Interface in TypeScript\nDESCRIPTION: This code snippet defines the MemoryCacheSettings interface, which is used to configure an MemoryLocalCache instance. It includes a single optional property for specifying a garbage collector.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.memorycachesettings.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface MemoryCacheSettings \n{\n    garbageCollector?: MemoryGarbageCollector;\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing FieldPath Equality in TypeScript\nDESCRIPTION: Defines the isEqual method for the FieldPath class. This method compares the current FieldPath instance with another FieldPath and returns a boolean indicating if they are equal.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.fieldpath.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisEqual(other: FieldPath): boolean;\n```\n\n----------------------------------------\n\nTITLE: Constructing BooleanSchema Instance in TypeScript\nDESCRIPTION: This code snippet shows the constructor signature for the BooleanSchema class. It accepts an optional SchemaParams object as a parameter, allowing for customization of the schema instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.booleanschema.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(schemaParams?: SchemaParams);\n```\n\n----------------------------------------\n\nTITLE: CustomErrorData errorDetails Property Definition\nDESCRIPTION: Property definition for optional array of ErrorDetails objects that provide additional error information.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.customerrordata.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nerrorDetails?: ErrorDetails[];\n```\n\n----------------------------------------\n\nTITLE: Declaring bytesTransferred Property\nDESCRIPTION: Property definition for tracking the number of bytes successfully uploaded in the task.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.uploadtasksnapshot.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbytesTransferred: number;\n```\n\n----------------------------------------\n\nTITLE: Defining collapseKey Property Type\nDESCRIPTION: Type definition for the collapseKey property used for message collapsing functionality in FCM.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.messagepayload.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncollapseKey: string;\n```\n\n----------------------------------------\n\nTITLE: Defining CitationMetadata Interface in TypeScript\nDESCRIPTION: This snippet defines the CitationMetadata interface, which contains an array of Citation objects. It is used to represent citation metadata that may be found on a GenerateContentCandidate.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.citationmetadata.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CitationMetadata \n{\n  citations: Citation[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TotpMultiFactorInfo Interface in TypeScript\nDESCRIPTION: This code snippet defines the TotpMultiFactorInfo interface, which extends the MultiFactorInfo interface. It represents TOTP second factors in Firebase Authentication, with a factorId of FactorId.TOTP.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.totpmultifactorinfo.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TotpMultiFactorInfo extends MultiFactorInfo \n```\n\n----------------------------------------\n\nTITLE: Defining GenerateContentRequest Interface in TypeScript\nDESCRIPTION: Interface definition for GenerateContentRequest that extends BaseParams, used for sending requests to the generative model.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentrequest.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GenerateContentRequest extends BaseParams\n```\n\n----------------------------------------\n\nTITLE: AggregateField Type Property Definition\nDESCRIPTION: Property definition for the aggregateType field which indicates the type of aggregation operation to be performed.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.aggregatefield.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly aggregateType: AggregateType;\n```\n\n----------------------------------------\n\nTITLE: Setting Device Language in Firebase Auth\nDESCRIPTION: TypeScript function signature for setting the authentication language to device/browser preference.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function useDeviceLanguage(auth: Auth): void;\n```\n\n----------------------------------------\n\nTITLE: EmulatorConfig.protocol Property Definition in TypeScript\nDESCRIPTION: The protocol property definition for EmulatorConfig interface which specifies the communication protocol with the emulator, either \"http\" or \"https\".\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.emulatorconfig.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly protocol: string;\n```\n\n----------------------------------------\n\nTITLE: Defining the systemInstruction Property in GenerateContentRequest Interface\nDESCRIPTION: Specifies the optional systemInstruction property which can be a string, Part, or Content object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentrequest.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsystemInstruction?: string | Part | Content;\n```\n\n----------------------------------------\n\nTITLE: Declaring uid Property in UserInfo Interface\nDESCRIPTION: This snippet shows the declaration of the uid property in the UserInfo interface. It is a readonly string property representing the user's unique ID, scoped to the project.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.userinfo.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly uid: string;\n```\n\n----------------------------------------\n\nTITLE: Defining MultiFactorSession Interface in TypeScript\nDESCRIPTION: Declares the MultiFactorSession interface for use in multi-factor authentication scenarios. This interface represents a session object used during the process of enrolling a second factor or signing in with a second factor.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.multifactorsession.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MultiFactorSession \n```\n\n----------------------------------------\n\nTITLE: Custom Event Name Type Definition\nDESCRIPTION: Type for custom event names in Firebase Analytics, excluding standard event names defined in EventNameString type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CustomEventName<T> = T extends EventNameString ? never : T;\n```\n\n----------------------------------------\n\nTITLE: Remove Converter Method\nDESCRIPTION: Method overload for removing the current converter from the DocumentReference.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.documentreference.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nwithConverter(converter: null): DocumentReference<DocumentData, DocumentData>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Priority-based Ordering in Firebase Database\nDESCRIPTION: Creates a QueryConstraint that orders database results by priority. This is a legacy feature as applications typically order by regular properties instead.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function orderByPriority(): QueryConstraint;\n```\n\n----------------------------------------\n\nTITLE: GenerateContentCandidate safetyRatings Property Definition\nDESCRIPTION: Defines the optional safetyRatings property which contains an array of SafetyRating objects that provide safety evaluation results for the content.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentcandidate.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsafetyRatings?: SafetyRating[];\n```\n\n----------------------------------------\n\nTITLE: ConsentSettings ad_storage Property\nDESCRIPTION: Property definition for advertising-related storage consent status.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.consentsettings.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nad_storage?: ConsentStatusString;\n```\n\n----------------------------------------\n\nTITLE: StorageReference bucket Property Type Definition\nDESCRIPTION: Defines the bucket property type which represents the name of the storage bucket containing the referenced object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.storagereference.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbucket: string;\n```\n\n----------------------------------------\n\nTITLE: Groups Property Definition\nDESCRIPTION: TypeScript property definition for the groups parameter which accepts either a single string or an array of strings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.controlparams.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngroups?: string | string[];\n```\n\n----------------------------------------\n\nTITLE: HarmBlockMethod Enumeration in TypeScript\nDESCRIPTION: Enumeration defining methods used for harm blocking, either by probability score alone or by both probability and severity scores.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum HarmBlockMethod \n{\n  PROBABILITY = \"PROBABILITY\",\n  SEVERITY = \"SEVERITY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Partial Observer Type Definition in TypeScript\nDESCRIPTION: This type defines a partial observer, allowing for optional implementation of observer methods. It's based on the Observer interface with all properties made optional.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type PartialObserver<T> = Partial<Observer<T>>;\n```\n\n----------------------------------------\n\nTITLE: Implementing limitedUseAppCheckTokens Property\nDESCRIPTION: Optional boolean property that enables limited-use App Check tokens for callable function requests. Required when using functions with replay protection.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.httpscallablestreamoptions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlimitedUseAppCheckTokens?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Query.ref Property Declaration\nDESCRIPTION: Read-only property declaration for accessing the DatabaseReference of the Query's location\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.query.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly ref: DatabaseReference;\n```\n\n----------------------------------------\n\nTITLE: ThenableReference Key Property Definition\nDESCRIPTION: Type definition for the key property of ThenableReference interface, representing the unique identifier string for the database reference.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.thenablereference.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nkey: string;\n```\n\n----------------------------------------\n\nTITLE: React Native Persistence Function Declaration (TypeScript)\nDESCRIPTION: Function signature for getReactNativePersistence() that creates a persistence layer using React Native's AsyncStorage.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getReactNativePersistence(storage: ReactNativeAsyncStorage): Persistence;\n```\n\n----------------------------------------\n\nTITLE: Defining metadata Property in ErrorDetails Interface\nDESCRIPTION: Property definition for the metadata field in the ErrorDetails interface. This optional property contains additional metadata about the error as a record of string keys to unknown values.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.errordetails.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmetadata?: Record<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: FullMetadata Metageneration Property\nDESCRIPTION: TypeScript property definition for the object's metageneration number.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.fullmetadata.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nmetageneration: string;\n```\n\n----------------------------------------\n\nTITLE: Validating Token Timestamp in TypeScript\nDESCRIPTION: This constant function checks if a token has a valid timestamp. It takes a token string as input and returns a boolean indicating whether the timestamp is valid.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const isValidTimestamp: (token: string) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies Interface in TypeScript\nDESCRIPTION: This code snippet defines the Dependencies interface used for initializing Auth instances. It includes properties for errorMap, persistence, and popupRedirectResolver.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.dependencies.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Dependencies {\n  errorMap?: AuthErrorMap;\n  persistence?: Persistence | Persistence[];\n  popupRedirectResolver?: PopupRedirectResolver;\n}\n```\n\n----------------------------------------\n\nTITLE: Citation license Property Definition\nDESCRIPTION: Property definition for the optional license property of a Citation, which specifies licensing information for the cited content.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.citation.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlicense?: string;\n```\n\n----------------------------------------\n\nTITLE: Declaring authIdToken Property in FirebaseServerAppSettings\nDESCRIPTION: This code snippet declares the optional authIdToken property in the FirebaseServerAppSettings interface, which is used to resume a signed-in user session in server-side environments.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseserverappsettings.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nauthIdToken?: string;\n```\n\n----------------------------------------\n\nTITLE: String Value Getter Method Signature\nDESCRIPTION: Method signature for retrieving Remote Config values as strings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.value.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasString(): string;\n```\n\n----------------------------------------\n\nTITLE: Defining RetrievedContextAttribution Interface in TypeScript\nDESCRIPTION: Defines an interface for retrieved context attribution, including title and URI.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface RetrievedContextAttribution {\n    // (undocumented)\n    title: string;\n    // (undocumented)\n    uri: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining domain Property in ErrorDetails Interface\nDESCRIPTION: Property definition for the domain field in the ErrorDetails interface. This optional string property indicates the domain where the error occurred.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.errordetails.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndomain?: string;\n```\n\n----------------------------------------\n\nTITLE: Declaring ref Property\nDESCRIPTION: Property definition for the StorageReference that initiated the upload task.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.uploadtasksnapshot.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nref: StorageReference;\n```\n\n----------------------------------------\n\nTITLE: Declaring appCheckToken Property in FirebaseServerAppSettings\nDESCRIPTION: This code snippet declares the optional appCheckToken property in the FirebaseServerAppSettings interface, which is used for App Check functionality in server-side environments.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseserverappsettings.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nappCheckToken?: string;\n```\n\n----------------------------------------\n\nTITLE: ImagenInlineImage Interface Definition in TypeScript\nDESCRIPTION: Defines the ImagenInlineImage interface which represents an image generated by Imagen as inline data. This interface is in Public Preview and not recommended for production use.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imageninlineimage.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ImagenInlineImage \n```\n\n----------------------------------------\n\nTITLE: Defining SafetyRating Interface in TypeScript\nDESCRIPTION: Interface definition that specifies the structure for safety ratings associated with generated content. Includes properties for blocked status, harm category, probability, severity and their corresponding numeric scores.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.safetyrating.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SafetyRating {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nblocked: boolean;\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncategory: HarmCategory;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nprobability: HarmProbability;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nprobabilityScore: number;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nseverity: HarmSeverity;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nseverityScore: number;\n```\n\n----------------------------------------\n\nTITLE: Adding a Document to a Firestore Collection in TypeScript\nDESCRIPTION: This function adds a new document to a Firestore collection. It takes a collection reference and data as parameters, and returns a promise that resolves to the new document reference.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore.api.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function addDoc<AppModelType, DbModelType extends DocumentData>(reference: CollectionReference<AppModelType, DbModelType>, data: WithFieldValue<AppModelType>): Promise<DocumentReference<AppModelType, DbModelType>>;\n```\n\n----------------------------------------\n\nTITLE: Declaring Data Property in HttpsCallableResult Interface\nDESCRIPTION: This code snippet shows the declaration of the 'data' property within the HttpsCallableResult interface. It is a readonly property of type ResponseData, representing the data returned from the callable function.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.httpscallableresult.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly data: ResponseData;\n```\n\n----------------------------------------\n\nTITLE: Defining RequestOptions Interface in TypeScript\nDESCRIPTION: Defines an interface for request options, including base URL and timeout.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface RequestOptions {\n    baseUrl?: string;\n    timeout?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining phoneNumber Property in PhoneMultiFactorEnrollInfoOptions\nDESCRIPTION: This code snippet shows the definition of the phoneNumber property in the PhoneMultiFactorEnrollInfoOptions interface. It specifies the phone number to which a verification code will be sent.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phonemultifactorenrollinfooptions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nphoneNumber: string;\n```\n\n----------------------------------------\n\nTITLE: Declaring metadata Property\nDESCRIPTION: Property definition for storing upload metadata, containing server metadata after upload completion.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.uploadtasksnapshot.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmetadata: FullMetadata;\n```\n\n----------------------------------------\n\nTITLE: Defining TotpMultiFactorAssertion Interface in TypeScript\nDESCRIPTION: This code snippet defines the TotpMultiFactorAssertion interface, which extends the MultiFactorAssertion interface. It is used for asserting ownership of a TOTP second factor in Firebase Authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.totpmultifactorassertion.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TotpMultiFactorAssertion extends MultiFactorAssertion \n```\n\n----------------------------------------\n\nTITLE: Comparing Firestore References in TypeScript\nDESCRIPTION: Returns true if the provided references are equal, pointing to the same location in the same Firestore database.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function refEqual<AppModelType, DbModelType extends DocumentData>(left: DocumentReference<AppModelType, DbModelType> | CollectionReference<AppModelType, DbModelType>, right: DocumentReference<AppModelType, DbModelType> | CollectionReference<AppModelType, DbModelType>): boolean;\n```\n\n----------------------------------------\n\nTITLE: Factor ID Enum Definition in TypeScript\nDESCRIPTION: An enumeration of factors that may be used for multifactor authentication in Firebase. Currently supports phone-based and time-based one-time password (TOTP) factors.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nFactorId: {\n    readonly PHONE: \"phone\";\n    readonly TOTP: \"totp\";\n}\n```\n\n----------------------------------------\n\nTITLE: FullMetadata Generation Property\nDESCRIPTION: TypeScript property definition for the object's generation number, used for versioning.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.fullmetadata.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngeneration: string;\n```\n\n----------------------------------------\n\nTITLE: GenerativeContentBlob.mimeType Property Definition\nDESCRIPTION: Property definition for the mimeType field in GenerativeContentBlob interface, which specifies the format of the image (e.g., image/jpeg, image/png).\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generativecontentblob.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmimeType: string;\n```\n\n----------------------------------------\n\nTITLE: Functions Region Property Signature\nDESCRIPTION: Type definition for the region property that specifies the geographical location of Cloud Functions with a default of us-central-1.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.functions.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nregion: string;\n```\n\n----------------------------------------\n\nTITLE: Defining MessagePayload Interface in TypeScript\nDESCRIPTION: This code snippet defines the MessagePayload interface, which represents the structure of an FCM message payload. It includes properties for collapse key, data, FCM options, sender, message ID, and notification details.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_sw.messagepayload.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MessagePayload \n{\n  collapseKey: string;\n  data?: {\n    [key: string]: string;\n  };\n  fcmOptions?: FcmOptions;\n  from: string;\n  messageId: string;\n  notification?: NotificationPayload;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring timeoutSeconds Property in TypeScript\nDESCRIPTION: This snippet shows the declaration of the timeoutSeconds property within the ExperimentalLongPollingOptions interface. It's an optional number property used to set the desired maximum timeout interval for long-polling GET responses.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.experimentallongpollingoptions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntimeoutSeconds?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining RecaptchaParameters Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for RecaptchaParameters that accepts reCAPTCHA configuration parameters. Supports all standard reCAPTCHA parameters except 'sitekey' which is managed by Firebase Auth. For invisible reCAPTCHA, the size parameter should be set to 'invisible'.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.recaptchaparameters.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RecaptchaParameters \n```\n\n----------------------------------------\n\nTITLE: Defining automaticDataCollectionEnabled Property in FirebaseAppSettings\nDESCRIPTION: Optional boolean property that controls GDPR opt-in/opt-out for automatic data collection in a Firebase application.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseappsettings.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nautomaticDataCollectionEnabled?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining CountTokensRequest Interface in TypeScript\nDESCRIPTION: Main interface definition for CountTokensRequest that specifies the structure for token counting operations in VertexAI generative models.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.counttokensrequest.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CountTokensRequest \n```\n\n----------------------------------------\n\nTITLE: Defining Type Identifier for AggregateQuerySnapshot\nDESCRIPTION: Specifies a readonly property 'type' with a string value to uniquely identify instances of the AggregateQuerySnapshot class.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.aggregatequerysnapshot.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type = \"AggregateQuerySnapshot\";\n```\n\n----------------------------------------\n\nTITLE: Detecting Web Worker Environment in TypeScript\nDESCRIPTION: This function checks if the code is running in a Web Worker environment. It returns a boolean indicating the result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function isWebWorker(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment for Firebase Remote Config SDK\nDESCRIPTION: Instructions for setting up the development environment for contributing to the Firebase Remote Config JavaScript SDK. This involves running the yarn package manager in the repository root.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/remote-config/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Checking Child Existence in DataSnapshot\nDESCRIPTION: Method to check if a specified child path has non-null data in the DataSnapshot.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.datasnapshot.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nhasChild(path: string): boolean;\n```\n\n----------------------------------------\n\nTITLE: Metadata Property Definition in UploadResult Interface (TypeScript)\nDESCRIPTION: Declaration of the metadata property in the UploadResult interface. This readonly property contains the FullMetadata sent back from the server after an upload operation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.uploadresult.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly metadata: FullMetadata;\n```\n\n----------------------------------------\n\nTITLE: Defining Item.item_list_name Property\nDESCRIPTION: Declaration of the optional item_list_name property for the Item interface, which can be used to specify the name of the list in which the item was presented to the user.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nitem_list_name?: string;\n```\n\n----------------------------------------\n\nTITLE: Mapping Object Properties in TypeScript\nDESCRIPTION: This function maps the properties of an object using a provided function. It takes an object, a mapping function, and an optional context object as inputs, and returns a new object with mapped properties.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function map<K extends string, V, U>(obj: {\n    [key in K]: V;\n}, fn: (value: V, key: K, obj: {\n    [key in K]: V;\n}) => U, contextObj?: unknown): {\n    [key in K]: U;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Analytics Settings Properties\nDESCRIPTION: TypeScript property definition for the config parameter in AnalyticsSettings interface. Specifies the configuration parameters that can be passed during Firebase Analytics initialization.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.analyticssettings.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconfig?: GtagConfigParams | EventParams;\n```\n\n----------------------------------------\n\nTITLE: MultiFactorAssertion factorId Property Definition\nDESCRIPTION: Definition of the readonly factorId property that identifies the type of second factor being used for authentication. The type is constrained to valid values from the FactorIdMap.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.multifactorassertion.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly factorId: (typeof FactorIdMap)[keyof typeof FactorIdMap];\n```\n\n----------------------------------------\n\nTITLE: Defining MemoryEagerGarbageCollector Interface in TypeScript\nDESCRIPTION: This code snippet defines the MemoryEagerGarbageCollector interface. It is a garbage collector that deletes documents not in active queries and without local mutations, optimizing for low memory footprint at the cost of potentially reduced offline query capabilities.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.memoryeagergarbagecollector.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface MemoryEagerGarbageCollector {\n    kind: 'memoryEager';\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Bytes to Base64 String in TypeScript\nDESCRIPTION: Method to convert the Bytes object to a Base64-encoded string representation of the underlying bytes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.bytes.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntoBase64(): string;\n```\n\n----------------------------------------\n\nTITLE: StorageReference fullPath Property Type Definition\nDESCRIPTION: Defines the fullPath property type which represents the complete path to the referenced object in storage.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.storagereference.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfullPath: string;\n```\n\n----------------------------------------\n\nTITLE: Defining PerformanceSettings Interface in TypeScript\nDESCRIPTION: This snippet defines the PerformanceSettings interface, which contains configuration options for the Performance Monitoring SDK. It includes two optional boolean properties: dataCollectionEnabled and instrumentationEnabled.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/performance.performancesettings.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PerformanceSettings \n{\n  dataCollectionEnabled?: boolean;\n  instrumentationEnabled?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: GenerateContentCandidate groundingMetadata Property Definition\nDESCRIPTION: Defines the optional groundingMetadata property which contains grounding information for the generated content.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentcandidate.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngroundingMetadata?: GroundingMetadata;\n```\n\n----------------------------------------\n\nTITLE: Declaring releaseOnDeref Property in FirebaseServerAppSettings\nDESCRIPTION: This code snippet declares the optional releaseOnDeref property in the FirebaseServerAppSettings interface, which is used for automatic cleanup of FirebaseServerApp instances.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseserverappsettings.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreleaseOnDeref?: object;\n```\n\n----------------------------------------\n\nTITLE: Defining VertexAIErrorCode Enum in TypeScript\nDESCRIPTION: Defines an enum for different VertexAI error codes used in error handling.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport const enum VertexAIErrorCode {\n    API_NOT_ENABLED = \"api-not-enabled\",\n    ERROR = \"error\",\n    FETCH_ERROR = \"fetch-error\",\n    INVALID_CONTENT = \"invalid-content\",\n    INVALID_SCHEMA = \"invalid-schema\",\n    NO_API_KEY = \"no-api-key\",\n    NO_APP_ID = \"no-app-id\",\n    NO_MODEL = \"no-model\",\n    NO_PROJECT_ID = \"no-project-id\",\n    PARSE_FAILED = \"parse-failed\",\n    REQUEST_ERROR = \"request-error\",\n    RESPONSE_ERROR = \"response-error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PersistentCacheSettings Interface in TypeScript\nDESCRIPTION: This snippet defines the PersistentCacheSettings interface, which is used to configure persistent caching in the Firebase JavaScript SDK. It includes properties for setting cache size and managing multiple tabs or windows.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.persistentcachesettings.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface PersistentCacheSettings {\n  cacheSizeBytes?: number;\n  tabManager?: PersistentTabManager;\n}\n```\n\n----------------------------------------\n\nTITLE: EnhancedGenerateContentResponse Interface Definition in TypeScript\nDESCRIPTION: Interface definition that extends GenerateContentResponse, providing a structured way to handle AI-generated content responses in Firebase JS SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.enhancedgeneratecontentresponse.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EnhancedGenerateContentResponse extends GenerateContentResponse \n```\n\n----------------------------------------\n\nTITLE: VAPID Key Property Definition\nDESCRIPTION: Optional property definition for specifying the public server key (VAPID key) used to authenticate push subscribers. Recommended for use with services like Chrome Push Service.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_sw.gettokenoptions.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvapidKey?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining tabManager Property in PersistentCacheSettings\nDESCRIPTION: This snippet shows the declaration of the tabManager property in the PersistentCacheSettings interface. It specifies how multiple tabs or windows will be managed by the SDK using the PersistentTabManager type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.persistentcachesettings.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntabManager?: PersistentTabManager;\n```\n\n----------------------------------------\n\nTITLE: Defining ID Change Unsubscribe Function Type in TypeScript\nDESCRIPTION: Defines the type for the unsubscribe function returned by onIdChange. This function is used to remove a previously added callback for ID changes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/installations.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type IdChangeUnsubscribeFn = () => void;\n```\n\n----------------------------------------\n\nTITLE: FullMetadata Size Property\nDESCRIPTION: TypeScript property definition for the object's size in bytes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.fullmetadata.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsize: number;\n```\n\n----------------------------------------\n\nTITLE: Declaring FacebookAuthProvider Class in TypeScript\nDESCRIPTION: TypeScript declaration for the FacebookAuthProvider class that extends BaseOAuthProvider, used for generating OAuth credentials for Facebook authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.facebookauthprovider.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class FacebookAuthProvider extends BaseOAuthProvider \n```\n\n----------------------------------------\n\nTITLE: Defining Schema Class in TypeScript\nDESCRIPTION: Declaration of the abstract Schema class that implements the SchemaInterface. This class serves as the base for all schema types and can be converted to JSON for use with Vertex AI REST endpoints.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.schema.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class Schema implements SchemaInterface \n```\n\n----------------------------------------\n\nTITLE: Allowing useEmulators() with Storage Configuration\nDESCRIPTION: Update that enables the useEmulators() function to be called with only storage configuration, allowing developers to test Firebase Storage functionality in isolation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/rules-unit-testing/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [`b97dd4e1d`](https://github.com/firebase/firebase-js-sdk/commit/b97dd4e1d366ade504703f73628bcd1920db434b) [#4901](https://github.com/firebase/firebase-js-sdk/pull/4901) - Allow using useEmulators() with only the storage configuration.\n```\n\n----------------------------------------\n\nTITLE: Defining VertexAIModel Abstract Class in TypeScript\nDESCRIPTION: Defines an abstract class for VertexAI models, including constructor, protected API settings, and model name normalization method.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport abstract class VertexAIModel {\n    // @internal\n    protected constructor(vertexAI: VertexAI, modelName: string);\n    // @internal (undocumented)\n    protected _apiSettings: ApiSettings;\n    readonly model: string;\n    static normalizeModelName(modelName: string): string;\n}\n```\n\n----------------------------------------\n\nTITLE: IntegerSchema Constructor Implementation in TypeScript\nDESCRIPTION: Constructor for the IntegerSchema class that accepts optional SchemaParams for customizing the integer validation behavior.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.integerschema.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(schemaParams?: SchemaParams);\n```\n\n----------------------------------------\n\nTITLE: InlineDataPart text Property TypeScript Definition\nDESCRIPTION: Property definition for text that is explicitly set as never to exclude text content from this interface type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.inlinedatapart.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntext?: never;\n```\n\n----------------------------------------\n\nTITLE: QueryConstraint Type Property Definition\nDESCRIPTION: Abstract readonly property definition for the type field that specifies the type of query constraint being applied.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.queryconstraint.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nabstract readonly type: QueryConstraintType;\n```\n\n----------------------------------------\n\nTITLE: Implementing fromJSON Method in EmailAuthCredential\nDESCRIPTION: Static method that deserializes a JSON representation into an EmailAuthCredential object. It accepts either an object or a string that will be parsed.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.emailauthcredential.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic fromJSON(json: object | string): EmailAuthCredential | null;\n```\n\n----------------------------------------\n\nTITLE: Defining ImagenGCSImage Interface in TypeScript\nDESCRIPTION: Declaration of the ImagenGCSImage interface which contains properties for accessing images generated by Imagen and stored in Cloud Storage for Firebase.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagengcsimage.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ImagenGCSImage \n```\n\n----------------------------------------\n\nTITLE: Accessing the API Key Property in Firebase Auth Config\nDESCRIPTION: Property definition for apiKey in the Config interface. Specifies the API key used for communication with the Firebase Auth backend.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.config.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napiKey: string;\n```\n\n----------------------------------------\n\nTITLE: ImagenGenerationConfig Watermark Property Definition\nDESCRIPTION: TypeScript property definition for configuring whether to add an invisible SynthID watermark to generated images.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagengenerationconfig.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\naddWatermark?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Detecting Electron Environment in TypeScript\nDESCRIPTION: This function determines if the code is running in an Electron environment. It returns a boolean indicating the result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function isElectron(): boolean;\n```\n\n----------------------------------------\n\nTITLE: IndexConfiguration Indexes Property Definition\nDESCRIPTION: Type definition for the indexes property of IndexConfiguration interface. Defines an optional readonly array of Index objects that represent all Firestore indexes for the configuration.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.indexconfiguration.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly indexes?: Index[];\n```\n\n----------------------------------------\n\nTITLE: FileDataPart.functionResponse Property Signature\nDESCRIPTION: Signature for the functionResponse property which is explicitly set to never type to prevent its use in a FileDataPart.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.filedatapart.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionResponse?: never;\n```\n\n----------------------------------------\n\nTITLE: Importing Component from @firebase/component using ES Modules in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the Component class from the @firebase/component package using ES Modules syntax. This is the recommended way to include the Component functionality in a Firebase JS SDK project.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/component/README.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from '@firebase/component';\n```\n\n----------------------------------------\n\nTITLE: Implementing HttpsCallable Stream Method Signature\nDESCRIPTION: Type definition for the stream method of HttpsCallable interface, which handles streaming responses from Firebase Cloud Functions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.httpscallable.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstream: (data?: RequestData | null, options?: HttpsCallableStreamOptions) => Promise<HttpsCallableStreamResult<ResponseData, StreamData>>;\n```\n\n----------------------------------------\n\nTITLE: NotificationPayload Icon Property Definition\nDESCRIPTION: Type definition for the notification icon URL property. If not provided, FCM uses the launcher icon from the app manifest.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_sw.notificationpayload.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nicon?: string;\n```\n\n----------------------------------------\n\nTITLE: RemoteConfigOptions initialFetchResponse Property Definition\nDESCRIPTION: Property definition for initialFetchResponse, which allows hydrating the Remote Config state with an initial fetch response. Takes an optional FetchResponse type parameter.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.remoteconfigoptions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninitialFetchResponse?: FetchResponse;\n```\n\n----------------------------------------\n\nTITLE: Firebase Storage Upload Retry Time Property\nDESCRIPTION: Defines the maxUploadRetryTime property that sets the maximum retry duration for upload operations in milliseconds.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.firebasestorage.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmaxUploadRetryTime: number;\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Logger Instance in TypeScript for Firebase Components\nDESCRIPTION: This snippet demonstrates how to import the Logger class from the @firebase/logger package and create a new instance with a component name as an identifier. This is the basic setup required to begin logging in a Firebase component.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/logger/README.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from '@firebase/logger';\n\nconst logClient = new Logger(`@firebase/<COMPONENT>`);\n```\n\n----------------------------------------\n\nTITLE: GtagConfigParams Property: allow_ad_personalization_signals\nDESCRIPTION: This property, when set to false, disables all advertising personalization with gtag.js. It is part of the GtagConfigParams interface and is used to control advertising features.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.gtagconfigparams.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n'allow_ad_personalization_signals'?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Issue Time Property Definition\nDESCRIPTION: Property definition for token issuance time in UTC string format.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.idtokenresult.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nissuedAtTime: string;\n```\n\n----------------------------------------\n\nTITLE: RemoteConfigSettings Minimum Fetch Interval Property\nDESCRIPTION: Property definition for the maximum cache age before entries are considered stale. Specified in milliseconds with a default value of 43200000 (twelve hours).\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.remoteconfigsettings.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nminimumFetchIntervalMillis: number;\n```\n\n----------------------------------------\n\nTITLE: GtagConfigParams Property: cookie_prefix\nDESCRIPTION: This property sets the prefix for Google Analytics cookies. It defaults to '_ga' if not specified. It is part of the GtagConfigParams interface and affects cookie naming.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.gtagconfigparams.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n'cookie_prefix'?: string;\n```\n\n----------------------------------------\n\nTITLE: GtagConfigParams Property: cookie_domain\nDESCRIPTION: This property sets the cookie domain for Google Analytics. It defaults to 'auto' if not specified. It is part of the GtagConfigParams interface and affects cookie behavior.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.gtagconfigparams.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n'cookie_domain'?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining items Property in ArraySchema Class\nDESCRIPTION: This property declaration specifies the 'items' property of the ArraySchema class. It is of type TypedSchema and represents the type of elements that can be members of the array.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.arrayschema.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nitems: TypedSchema;\n```\n\n----------------------------------------\n\nTITLE: Defining ImagenImageFormat Class in TypeScript\nDESCRIPTION: Defines a class for image format options, including JPEG and PNG formats with compression quality.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @beta\nexport class ImagenImageFormat {\n    compressionQuality?: number;\n    static jpeg(compressionQuality?: number): ImagenImageFormat;\n    mimeType: string;\n    static png(): ImagenImageFormat;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OptionalProperties Signature in ObjectSchemaInterface\nDESCRIPTION: Declares the signature for optional properties in the ObjectSchemaInterface, allowing for an array of strings to specify which properties are optional in the schema.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.objectschemainterface.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptionalProperties?: string[];\n```\n\n----------------------------------------\n\nTITLE: RecaptchaVerifier Type Property\nDESCRIPTION: Read-only property definition that specifies the verifier type as 'recaptcha'.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.recaptchaverifier.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type = \"recaptcha\";\n```\n\n----------------------------------------\n\nTITLE: Number Value Getter Method Signature\nDESCRIPTION: Method signature for converting Remote Config values to numbers. Behaves similarly to Number(value) || 0.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.value.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasNumber(): number;\n```\n\n----------------------------------------\n\nTITLE: Defining SchemaInterface TypeScript Interface\nDESCRIPTION: TypeScript interface definition that extends SchemaShared and includes a type property of SchemaType. This interface is used for schema validation and type checking in the Firebase JS SDK Vertex AI integration.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.schemainterface.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SchemaInterface extends SchemaShared<SchemaInterface> \n```\n\n----------------------------------------\n\nTITLE: Defining Item.item_list_id Property\nDESCRIPTION: Declaration of the optional item_list_id property for the Item interface, which can be used to specify the ID of the list in which the item was presented to the user.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nitem_list_id?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining GithubAuthProvider Class in TypeScript\nDESCRIPTION: Declaration of the GithubAuthProvider class, extending BaseOAuthProvider for GitHub authentication in Firebase.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.githubauthprovider.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class GithubAuthProvider extends BaseOAuthProvider \n```\n\n----------------------------------------\n\nTITLE: Defining SchemaRequest Interface in TypeScript\nDESCRIPTION: Interface definition for SchemaRequest that extends SchemaShared. Specifies the structure for schema parameters used in backend requests including required properties and schema type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.schemarequest.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SchemaRequest extends SchemaShared<SchemaRequest>\n```\n\n----------------------------------------\n\nTITLE: Storage Emulator Configuration Method Addition\nDESCRIPTION: Added storage().useEmulator() method to enable emulator mode for storage, allowing users to set a storage emulator host and port.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/storage/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstorage().useEmulator()\n```\n\n----------------------------------------\n\nTITLE: Defining SafetyRating Interface in TypeScript\nDESCRIPTION: Defines an interface for safety ratings, including blocked status, category, probability, and severity.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface SafetyRating {\n    // (undocumented)\n    blocked: boolean;\n    // (undocumented)\n    category: HarmCategory;\n    // (undocumented)\n    probability: HarmProbability;\n    // (undocumented)\n    probabilityScore: number;\n    // (undocumented)\n    severity: HarmSeverity;\n    // (undocumented)\n    severityScore: number;\n}\n```\n\n----------------------------------------\n\nTITLE: NotificationPayload.body Property Definition\nDESCRIPTION: Defines the optional 'body' property of the NotificationPayload interface, which represents the notification's body text.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.notificationpayload.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody?: string;\n```\n\n----------------------------------------\n\nTITLE: Citation publicationDate Property Definition\nDESCRIPTION: Property definition for the optional publicationDate property of a Citation, which specifies when the cited content was published.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.citation.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\npublicationDate?: Date;\n```\n\n----------------------------------------\n\nTITLE: Defining PhoneSingleFactorInfoOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the PhoneSingleFactorInfoOptions interface, which includes a single property 'phoneNumber' of type string. This interface is used to specify options for single-factor sign-in using a phone number in Firebase Authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phonesinglefactorinfooptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PhoneSingleFactorInfoOptions {\n    phoneNumber: string;\n}\n```\n\n----------------------------------------\n\nTITLE: AuthProvider providerId Property Definition\nDESCRIPTION: Signature definition for the providerId property of the AuthProvider interface. This readonly string property identifies the specific authentication provider type being used.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.authprovider.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly providerId: string;\n```\n\n----------------------------------------\n\nTITLE: SSL Connection Property\nDESCRIPTION: Property definition for controlling SSL usage in connections.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestoresettings.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nssl?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level for Remote Config in TypeScript\nDESCRIPTION: This function defines the log level to use for Remote Config. It takes a RemoteConfig instance and a RemoteConfigLogLevel as parameters to set the desired logging level.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function setLogLevel(remoteConfig: RemoteConfig, logLevel: RemoteConfigLogLevel): void;\n```\n\n----------------------------------------\n\nTITLE: Declaring Firestore End Before Function\nDESCRIPTION: TypeScript declaration for creating query constraints to end result sets before specified field values.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function endBefore(...fieldValues: unknown[]): QueryEndAtConstraint;\n```\n\n----------------------------------------\n\nTITLE: Implementing Nullable Property\nDESCRIPTION: Optional boolean property to indicate if the schema element can be null.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.schemashared.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnullable?: boolean;\n```\n\n----------------------------------------\n\nTITLE: NotificationPayload Body Property Definition\nDESCRIPTION: Type definition for the notification body property which contains the main text content of the notification.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_sw.notificationpayload.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Item.item_variant Property\nDESCRIPTION: Declaration of the optional item_variant property for the Item interface, which can be used to specify the variant or version of the item.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nitem_variant?: string;\n```\n\n----------------------------------------\n\nTITLE: WebAttribution.uri Property Definition\nDESCRIPTION: Defines the uri property of the WebAttribution interface as a string.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.webattribution.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nuri: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Segment Interface in TypeScript\nDESCRIPTION: Defines an interface for content segments, including start and end indices and part index.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface Segment {\n    // (undocumented)\n    endIndex: number;\n    // (undocumented)\n    partIndex: number;\n    // (undocumented)\n    startIndex: number;\n}\n```\n\n----------------------------------------\n\nTITLE: ImagenGenerationConfig Negative Prompt Property Definition\nDESCRIPTION: TypeScript property definition for specifying elements to be omitted from generated images.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagengenerationconfig.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnegativePrompt?: string;\n```\n\n----------------------------------------\n\nTITLE: FetchResponse ETag Property Definition\nDESCRIPTION: Property definition for the ETag response header value, available for both 200 and 304 responses.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.fetchresponse.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\neTag?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining SchemaParams Interface in TypeScript\nDESCRIPTION: Defines an interface for schema parameters, extending SchemaShared.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface SchemaParams extends SchemaShared<SchemaInterface> {\n}\n```\n\n----------------------------------------\n\nTITLE: Reference Property Definition in UploadResult Interface (TypeScript)\nDESCRIPTION: Declaration of the ref property in the UploadResult interface. This readonly property contains the StorageReference that initiated the upload operation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.uploadresult.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly ref: StorageReference;\n```\n\n----------------------------------------\n\nTITLE: Updating Firebase Import Syntax in JavaScript\nDESCRIPTION: Example showing the change in import syntax for Firebase. The update points the browser field to the ESM build, requiring developers to use default import instead of namespace import.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Before this change\nimport * as firebase from 'firebase/app';\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After this change\nimport firebase from 'firebase/app';\n```\n\n----------------------------------------\n\nTITLE: Declaring totalBillableCharacters Property in TypeScript\nDESCRIPTION: This code snippet declares the totalBillableCharacters property of the CountTokensResponse interface, which is an optional number representing the total number of billable characters counted across all instances from the request.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.counttokensresponse.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntotalBillableCharacters?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining the name Property Signature in FunctionDeclaration\nDESCRIPTION: TypeScript signature for the name property of FunctionDeclaration. This property defines the function name with specific formatting requirements: must start with a letter or underscore, contain only a-z, A-Z, 0-9, underscores and dashes, with max length of 64.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.functiondeclaration.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: FullMetadata Time Created Property\nDESCRIPTION: TypeScript property definition for the object's creation timestamp.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.fullmetadata.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntimeCreated: string;\n```\n\n----------------------------------------\n\nTITLE: ConsentSettings ad_user_data Property\nDESCRIPTION: Property definition for user data advertising consent status.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.consentsettings.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nad_user_data?: ConsentStatusString;\n```\n\n----------------------------------------\n\nTITLE: Generating Ordinal String in TypeScript\nDESCRIPTION: This function generates an ordinal string (e.g., '1st', '2nd', '3rd') from a given number. It takes a number as input and returns the corresponding ordinal string.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function ordinal(i: number): string;\n```\n\n----------------------------------------\n\nTITLE: ImagenInlineImage.mimeType Property Signature\nDESCRIPTION: Defines the mimeType property which indicates the format of the image (either \"image/png\" or \"image/jpeg\"). Different formats can be requested using the imageFormat property in ImagenGenerationConfig.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imageninlineimage.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmimeType: string;\n```\n\n----------------------------------------\n\nTITLE: Defining PhoneAuthCredential Class in TypeScript\nDESCRIPTION: Class declaration for PhoneAuthCredential that extends AuthCredential base class. Used for representing phone authentication credentials in Firebase Authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phoneauthcredential.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class PhoneAuthCredential extends AuthCredential \n```\n\n----------------------------------------\n\nTITLE: Accessing the Auth Domain Property in Firebase Auth Config\nDESCRIPTION: Property definition for authDomain in the Config interface. Optional property that specifies the domain where web widgets are hosted, provided through Firebase Config.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.config.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nauthDomain?: string;\n```\n\n----------------------------------------\n\nTITLE: VertexAIModel Normalization Method\nDESCRIPTION: Static method that normalizes a given model name into a fully qualified model resource name. Takes a model name string as input and returns the normalized version.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.vertexaimodel.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic normalizeModelName(modelName: string): string;\n```\n\n----------------------------------------\n\nTITLE: Clearing Firestore persistence in JavaScript SDK\nDESCRIPTION: Demonstrates how to use the clearPersistence() method to wipe persisted Firestore data from disk.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.firestore().clearPersistence().then(() => {\n  console.log('Persistence has been cleared');\n});\n```\n\n----------------------------------------\n\nTITLE: Global Property Definition in AnalyticsCallOptions Interface\nDESCRIPTION: Definition of the 'global' property within the AnalyticsCallOptions interface. When set to true, the config or event call applies globally to all Google Analytics properties on the page.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.analyticscalloptions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nglobal: boolean;\n```\n\n----------------------------------------\n\nTITLE: VertexAIError Code Property Declaration in TypeScript\nDESCRIPTION: Read-only property for accessing the error code representing the specific error type from VertexAIErrorCode enum.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.vertexaierror.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly code: VertexAIErrorCode;\n```\n\n----------------------------------------\n\nTITLE: Defining Item.promotion_name Property\nDESCRIPTION: Declaration of the optional promotion_name property for the Item interface, which can be used to specify the name of a promotion associated with the item.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\npromotion_name?: string;\n```\n\n----------------------------------------\n\nTITLE: Subscribe Function Interface in TypeScript\nDESCRIPTION: This interface defines the structure of a subscribe function for observables. It allows for subscription using either individual callback functions or an observer object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Subscribe<T> {\n    (next?: NextFn<T>, error?: ErrorFn, complete?: CompleteFn): Unsubscribe;\n    (observer: PartialObserver<T>): Unsubscribe;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UsageMetadata Interface in TypeScript\nDESCRIPTION: Defines an interface for usage metadata, including token counts for prompts and candidates.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface UsageMetadata {\n    // (undocumented)\n    candidatesTokenCount: number;\n    // (undocumented)\n    candidatesTokensDetails?: ModalityTokenCount[];\n    // (undocumented)\n    promptTokenCount: number;\n    // (undocumented)\n    promptTokensDetails?: ModalityTokenCount[];\n    // (undocumented)\n    totalTokenCount: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding mockUserToken Support for Firebase Database Emulator in JavaScript\nDESCRIPTION: Adds support for mockUserToken in the Firebase Database emulator, enabling mocking of user authentication tokens for testing.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/CHANGELOG.md#2025-04-14_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ndatabase.useEmulator(host, port, { mockUserToken: token })\n```\n\n----------------------------------------\n\nTITLE: Defining the toolConfig Property in GenerateContentRequest Interface\nDESCRIPTION: Specifies the optional toolConfig property of type ToolConfig interface.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentrequest.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntoolConfig?: ToolConfig;\n```\n\n----------------------------------------\n\nTITLE: WebAttribution.title Property Definition\nDESCRIPTION: Defines the title property of the WebAttribution interface as a string.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.webattribution.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Item.price Property\nDESCRIPTION: Declaration of the optional price property for the Item interface, which uses the Currency type to specify the price of the item.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nprice?: Currency;\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Storage Package Reference\nDESCRIPTION: Package name and usage note for the Firebase Storage component, indicating it should only be used via the main firebase package.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/storage/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @firebase/storage\n```\n\n----------------------------------------\n\nTITLE: Defining items Property in ListResult Interface\nDESCRIPTION: This snippet shows the definition of the items property in the ListResult interface. It represents the objects in the listed directory and is an array of StorageReference objects.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.listresult.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nitems: StorageReference[];\n```\n\n----------------------------------------\n\nTITLE: CustomErrorData status Property Definition\nDESCRIPTION: Property definition for optional HTTP status code number from the error response.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.customerrordata.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatus?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Firestore Document Reference Class in TypeScript\nDESCRIPTION: This class represents a reference to a document in Firestore. It includes properties and methods for accessing document metadata and converting between different model types.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/firestore.api.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DocumentReference<AppModelType = DocumentData, DbModelType extends DocumentData = DocumentData> {\n    readonly converter: FirestoreDataConverter<AppModelType, DbModelType> | null;\n    readonly firestore: Firestore;\n    get id(): string;\n    get parent(): CollectionReference<AppModelType, DbModelType>;\n    get path(): string;\n    readonly type = \"document\";\n    withConverter<NewAppModelType, NewDbModelType extends DocumentData = DocumentData>(converter: FirestoreDataConverter<NewAppModelType, NewDbModelType>): DocumentReference<NewAppModelType, NewDbModelType>;\n    withConverter(converter: null): DocumentReference<DocumentData, DocumentData>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining generationConfig Property Type\nDESCRIPTION: Type definition for the generationConfig property that specifies configuration options for generating images with Imagen. This is marked as a preview API feature.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagenmodelparams.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngenerationConfig?: ImagenGenerationConfig;\n```\n\n----------------------------------------\n\nTITLE: Validating Token Format in TypeScript\nDESCRIPTION: This constant function checks if a token has a valid format. It takes a token string as input and returns a boolean indicating whether the format is valid.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const isValidFormat: (token: string) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining Item.item_category2 Property\nDESCRIPTION: Declaration of the optional item_category2 property for the Item interface, which can be used to specify a second category level for the item.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nitem_category2?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Date_2 Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Date_2 that represents a Protobuf google.type.Date structure with year, month, and day properties.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.date_2.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Date \n```\n\n----------------------------------------\n\nTITLE: Using FirebaseServerApp Settings in JavaScript\nDESCRIPTION: Example demonstrating how to initialize a server app and access its settings. Shows verification of authIdToken configuration.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseserverapp.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = initializeServerApp(settings);\nconsole.log(app.settings.authIdToken === options.authIdToken);  // true\n```\n\n----------------------------------------\n\nTITLE: ActionCodeURL Property Signature - Action Code\nDESCRIPTION: Property definition for accessing the action code from the email action link.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.actioncodeurl.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly code: string;\n```\n\n----------------------------------------\n\nTITLE: FileData mimeType Property Definition\nDESCRIPTION: Property definition for the mimeType field of type string that represents the MIME type of the uploaded file.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.filedata.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmimeType: string;\n```\n\n----------------------------------------\n\nTITLE: Accessing the API Host Property in Firebase Auth Config\nDESCRIPTION: Property definition for apiHost in the Config interface. Specifies the host where the Firebase Auth backend is running.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.config.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napiHost: string;\n```\n\n----------------------------------------\n\nTITLE: StorageReference parent Property Type Definition\nDESCRIPTION: Defines the parent property type which represents a reference to the parent location of the current reference.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.storagereference.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nparent: StorageReference | null;\n```\n\n----------------------------------------\n\nTITLE: ConsentSettings ad_personalization Property\nDESCRIPTION: Property definition for personalized advertising consent status.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.consentsettings.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nad_personalization?: ConsentStatusString;\n```\n\n----------------------------------------\n\nTITLE: Maximum Value in Milliseconds Constant in TypeScript\nDESCRIPTION: This constant defines the maximum value in milliseconds. It's used as a limit for time-related operations in the Firebase SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const MAX_VALUE_MILLIS: number;\n```\n\n----------------------------------------\n\nTITLE: Defining TotpMultiFactorGenerator Class in TypeScript\nDESCRIPTION: Declaration of the TotpMultiFactorGenerator class, which provides methods for generating TOTP multi-factor assertions and secrets.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.totpmultifactorgenerator.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class TotpMultiFactorGenerator \n```\n\n----------------------------------------\n\nTITLE: Event Timeout Property Definition\nDESCRIPTION: TypeScript property definition for the event_timeout parameter which accepts a numeric value.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.controlparams.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nevent_timeout?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Item.promotion_id Property\nDESCRIPTION: Declaration of the optional promotion_id property for the Item interface, which can be used to specify the ID of a promotion associated with the item.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\npromotion_id?: string;\n```\n\n----------------------------------------\n\nTITLE: Unsubscribe Function Type in TypeScript\nDESCRIPTION: This type defines a function for unsubscribing from an observable. It represents a function that can be called to cancel a subscription.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type Unsubscribe = () => void;\n```\n\n----------------------------------------\n\nTITLE: ToolConfig Properties Definition\nDESCRIPTION: Defines the functionCallingConfig property of the ToolConfig interface, which is an optional property of type FunctionCallingConfig.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.toolconfig.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCallingConfig?: FunctionCallingConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining QueryStartAtConstraint Class in TypeScript\nDESCRIPTION: This code snippet defines the QueryStartAtConstraint class, which extends the QueryConstraint class. It is used to create constraints for starting points in Firestore queries.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.querystartatconstraint.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class QueryStartAtConstraint extends QueryConstraint \n```\n\n----------------------------------------\n\nTITLE: Defining SchemaShared Interface in TypeScript\nDESCRIPTION: Defines a generic interface for shared schema properties, including description, enum, example, format, items, nullable, and properties.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface SchemaShared<T> {\n    // (undocumented)\n    [key: string]: unknown;\n    description?: string;\n    enum?: string[];\n    example?: unknown;\n    format?: string;\n    items?: T;\n    nullable?: boolean;\n    properties?: {\n        [k: string]: T;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Size Report for a Single Firebase Module\nDESCRIPTION: This snippet demonstrates how to generate a size analysis report for a single Firebase module using the generateReportForModule function. It requires an absolute path to the module and returns a Promise that resolves to a Report object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/repo-scripts/size-analysis/README.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  const moduleLocation: string = \"absolute/path/to/firebase/module\";\n  const report: Report = await generateReportForModule(moduleLocation);\n  console.log(report);\n\n\n}catch (error) {\n\n\n  console.log(error);\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Accessing the SDK Client Version Property in Firebase Auth Config\nDESCRIPTION: Property definition for sdkClientVersion in the Config interface. Specifies the version of the SDK client being used.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.config.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsdkClientVersion: string;\n```\n\n----------------------------------------\n\nTITLE: Declaring totalDocuments Property Type\nDESCRIPTION: Property definition for storing the total number of documents in the bundle being loaded.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.loadbundletaskprogress.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntotalDocuments: number;\n```\n\n----------------------------------------\n\nTITLE: GtagConfigParams Property: page_title\nDESCRIPTION: This property sets the title of the page for Google Analytics tracking. It is part of the GtagConfigParams interface and is used for page view tracking.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.gtagconfigparams.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n'page_title'?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for TransactionOptions that specifies customizable transaction behavior options in Firebase JS SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.transactionoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface TransactionOptions \n```\n\n----------------------------------------\n\nTITLE: Cloud Functions Emulator Usage\nDESCRIPTION: New method added to use the Cloud Functions local emulator by specifying host and port.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/CHANGELOG.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nuseEmulator(host, port)\n```\n\n----------------------------------------\n\nTITLE: Defining the 'response' Property in GenerateContentResult Interface\nDESCRIPTION: TypeScript signature for the 'response' property of the GenerateContentResult interface. This property is of type EnhancedGenerateContentResponse.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentresult.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nresponse: EnhancedGenerateContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Second Factor Property Definition\nDESCRIPTION: Property definition for the type of second factor used in multi-factor authentication.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.idtokenresult.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsignInSecondFactor: string | null;\n```\n\n----------------------------------------\n\nTITLE: Defining Item.index Property\nDESCRIPTION: Declaration of the optional index property for the Item interface, which can be used to specify the position of the item in a list.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nindex?: number;\n```\n\n----------------------------------------\n\nTITLE: ImagenModel Class Declaration in TypeScript\nDESCRIPTION: TypeScript declaration for the ImagenModel class that extends VertexAIModel and provides image generation capabilities.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagenmodel.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class ImagenModel extends VertexAIModel \n```\n\n----------------------------------------\n\nTITLE: Declaring Messaging App Property Type\nDESCRIPTION: Type declaration for the app property of the Messaging interface, which references the FirebaseApp instance associated with this Messaging instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.messaging.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp: FirebaseApp;\n```\n\n----------------------------------------\n\nTITLE: Functions App Property Signature\nDESCRIPTION: Type definition for the app property that associates the Functions instance with a FirebaseApp instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.functions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp: FirebaseApp;\n```\n\n----------------------------------------\n\nTITLE: Defining QueryDocumentSnapshot Class in TypeScript\nDESCRIPTION: Declaration of the QueryDocumentSnapshot class, which extends DocumentSnapshot. It represents a document snapshot from a Firestore query, guaranteeing the document's existence.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.querydocumentsnapshot.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class QueryDocumentSnapshot<AppModelType = DocumentData, DbModelType extends DocumentData = DocumentData> extends DocumentSnapshot<AppModelType, DbModelType>\n```\n\n----------------------------------------\n\nTITLE: InlineDataPart functionCall Property TypeScript Definition\nDESCRIPTION: Property definition for functionCall that is explicitly set as never to exclude function call content from this interface type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.inlinedatapart.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCall?: never;\n```\n\n----------------------------------------\n\nTITLE: Constructing SAMLAuthProvider in TypeScript\nDESCRIPTION: Constructor for the SAMLAuthProvider class. It requires a providerId parameter that must start with \"saml.\".\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.samlauthprovider.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(providerId: string);\n```\n\n----------------------------------------\n\nTITLE: DataLayerName Property Definition\nDESCRIPTION: Property definition for customizing the name of the dataLayer array used by gtag.js\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.settingsoptions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndataLayerName?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Item.affiliation Property\nDESCRIPTION: Declaration of the optional affiliation property for the Item interface, which can be used to specify the store or affiliation from which the item was purchased.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\naffiliation?: string;\n```\n\n----------------------------------------\n\nTITLE: CustomErrorData response Property Definition\nDESCRIPTION: Property definition for optional GenerateContentResponse object returned from a GenerateContentRequest.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.customerrordata.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nresponse?: GenerateContentResponse;\n```\n\n----------------------------------------\n\nTITLE: ActionCodeURL Property Signature - Continue URL\nDESCRIPTION: Property definition for accessing the continue URL from the email action link. Returns null if not provided.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.actioncodeurl.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly continueUrl: string | null;\n```\n\n----------------------------------------\n\nTITLE: Defining UserProfile Type in TypeScript\nDESCRIPTION: Type definition for user profile information used in AdditionalUserInfo, representing arbitrary user profile data with unknown values.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UserProfile = Record<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: Detecting Browser Extension Environment in TypeScript\nDESCRIPTION: This function determines if the code is running in a browser extension context. It returns a boolean indicating the result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function isBrowserExtension(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining messageId Property Type\nDESCRIPTION: Type definition for the unique message identifier property.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.messagepayload.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nmessageId: string;\n```\n\n----------------------------------------\n\nTITLE: Defining notification Property Type\nDESCRIPTION: Type definition for the notification payload that contains display notification details.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.messagepayload.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnotification?: NotificationPayload;\n```\n\n----------------------------------------\n\nTITLE: Firebase Server App Initialization with App Check\nDESCRIPTION: FirebaseServerApp can now be initialized with an App Check token directly instead of calling getToken method, enabling App Check enforced products in SSR environments.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nFirebaseServerApp\n```\n\n----------------------------------------\n\nTITLE: Value Source Getter Method Signature\nDESCRIPTION: Method signature for retrieving the ValueSource of a Remote Config value.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.value.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetSource(): ValueSource;\n```\n\n----------------------------------------\n\nTITLE: Send To Property Definition\nDESCRIPTION: TypeScript property definition for the send_to parameter which accepts either a single string or an array of strings to specify analytics targets.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.controlparams.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsend_to?: string | string[];\n```\n\n----------------------------------------\n\nTITLE: FullMetadata Name Property\nDESCRIPTION: TypeScript property definition for the object's short name (last component of the full path).\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.fullmetadata.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Defining HarmProbability Enum in TypeScript\nDESCRIPTION: Enum defining probability levels for content safety assessment, ranging from NEGLIGIBLE to HIGH.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum HarmProbability\n```\n\n----------------------------------------\n\nTITLE: FileDataPart.inlineData Property Signature\nDESCRIPTION: Signature for the inlineData property which is explicitly set to never type to prevent its use in a FileDataPart.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.filedatapart.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninlineData?: never;\n```\n\n----------------------------------------\n\nTITLE: RecaptchaVerifier Render Method\nDESCRIPTION: Method signature for rendering the reCAPTCHA widget, returns a Promise resolving with the widget ID.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.recaptchaverifier.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrender(): Promise<number>;\n```\n\n----------------------------------------\n\nTITLE: Declaring VectorValue Class in TypeScript\nDESCRIPTION: Class declaration for VectorValue which represents vector data in Firestore documents. Used for storing and manipulating vector data types.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.vectorvalue.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class VectorValue \n```\n\n----------------------------------------\n\nTITLE: Defining CustomSignals Interface in TypeScript\nDESCRIPTION: This code snippet defines the CustomSignals interface. It represents custom signals and their values, where the values must be of type string, number, or null.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.customsignals.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CustomSignals \n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Measurement ID Fetching (Markdown)\nDESCRIPTION: Update to dynamically fetch the app's Measurement ID from the Dynamic Config backend, with a fallback to the local config.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/analytics-types/CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- [`fb3b095e4`](https://github.com/firebase/firebase-js-sdk/commit/fb3b095e4b7c8f57fdb3172bc039c84576abf290) [#2800](https://github.com/firebase/firebase-js-sdk/pull/2800) - Analytics now dynamically fetches the app's Measurement ID from the Dynamic Config backend\n  instead of depending on the local Firebase config. It will fall back to any `measurementId`\n  value found in the local config if the Dynamic Config fetch fails.\n```\n\n----------------------------------------\n\nTITLE: Specifying VideoMetadata.endOffset Property\nDESCRIPTION: Definition of the endOffset property in the VideoMetadata interface. This property stores the end time position of the video using protobuf Duration format as a string.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.videometadata.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nendOffset: string;\n```\n\n----------------------------------------\n\nTITLE: Defining PersistentSingleTabManagerSettings Interface in TypeScript\nDESCRIPTION: Interface declaration for PersistentSingleTabManagerSettings that defines configuration options for persistent storage management in a single browser tab scenario.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.persistentsingletabmanagersettings.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface PersistentSingleTabManagerSettings \n```\n\n----------------------------------------\n\nTITLE: Defining Index.fields Property in TypeScript\nDESCRIPTION: This snippet defines the fields property of the Index interface. It represents a list of fields to be indexed and is marked as a preview feature. The property is optional and of type IndexField array.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.index.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly fields?: IndexField[];\n```\n\n----------------------------------------\n\nTITLE: Cache Size Property Definition\nDESCRIPTION: Property definition for cacheSizeBytes setting that controls on-disk data cache size threshold.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestoresettings.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncacheSizeBytes?: number;\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal _UploadTask Class for Firebase Storage in TypeScript\nDESCRIPTION: This snippet defines an internal _UploadTask class that implements the UploadTask interface. It includes methods for managing the upload process and handling task state changes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/storage.api.md#2025-04-14_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @internal\nexport class _UploadTask {\n    constructor(ref: _Reference, blob: _FbsBlob, metadata?: Metadata | null);\n    _blob: _FbsBlob;\n    cancel(): boolean;\n    catch<T>(onRejected: (p1: StorageError) => T | Promise<T>): Promise<T>;\n    // (undocumented)\n    isExponentialBackoffExpired(): boolean;\n    // Warning: (ae-forgotten-export) The symbol \"Metadata\" needs to be exported by the entry point index.d.ts\n    _metadata: Metadata | null;\n    // Warning: (ae-forgotten-export) The symbol \"Unsubscribe\" needs to be exported by the entry point index.d.ts\n    // Warning: (ae-forgotten-export) The symbol \"Subscribe\" needs to be exported by the entry point index.d.ts\n    on(type: _TaskEvent, nextOrObserver?: StorageObserver<UploadTaskSnapshot> | null | ((snapshot: UploadTaskSnapshot) => unknown), error?: ((a: StorageError) => unknown) | null, completed?: CompleteFn | null): Unsubscribe_2 | Subscribe_2<UploadTaskSnapshot>;\n    pause(): boolean;\n    resume(): boolean;\n    get snapshot(): UploadTaskSnapshot;\n    // Warning: (ae-forgotten-export) The symbol \"InternalTaskState\" needs to be exported by the entry point index.d.ts\n    _state: InternalTaskState;\n    then<U>(onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null, onRejected?: ((error: StorageError) => U | Promise<U>) | null): Promise<U>;\n    _transferred: number;\n    }\n```\n\n----------------------------------------\n\nTITLE: Removing FirestoreDataConverter in JavaScript\nDESCRIPTION: Adds support to remove a FirestoreDataConverter on a Firestore reference by passing null to the withConverter method.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/CHANGELOG.md#2025-04-14_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nfirestore.withConverter(null)\n```\n\n----------------------------------------\n\nTITLE: Defining VertexAI App Property Signature\nDESCRIPTION: TypeScript property signature for the app property that associates a VertexAI instance with a FirebaseApp instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.vertexai.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp: FirebaseApp;\n```\n\n----------------------------------------\n\nTITLE: GenerateContentCandidate finishReason Property Definition\nDESCRIPTION: Defines the optional finishReason property which indicates why the content generation process stopped or completed.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentcandidate.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfinishReason?: FinishReason;\n```\n\n----------------------------------------\n\nTITLE: Defining Item.item_category3 Property\nDESCRIPTION: Declaration of the optional item_category3 property for the Item interface, which can be used to specify a third category level for the item.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nitem_category3?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining VertexAI Interface in TypeScript\nDESCRIPTION: Defines an interface for VertexAI, including the Firebase app and location.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface VertexAI {\n    app: FirebaseApp;\n    // (undocumented)\n    location: string;\n}\n```\n\n----------------------------------------\n\nTITLE: User ID Property Definition\nDESCRIPTION: Property definition for sub that stores the unique identifier of the user.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.parsedtoken.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n'sub'?: string;\n```\n\n----------------------------------------\n\nTITLE: Accessing the API Scheme Property in Firebase Auth Config\nDESCRIPTION: Property definition for apiScheme in the Config interface. Specifies the scheme (protocol) used to communicate with the Firebase Auth backend.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.config.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napiScheme: string;\n```\n\n----------------------------------------\n\nTITLE: Defining images Property in ImagenGenerationResponse\nDESCRIPTION: Declaration of the images property that contains the array of generated images. The number of returned images may be fewer than requested if some were filtered out.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagengenerationresponse.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimages: T[];\n```\n\n----------------------------------------\n\nTITLE: String-Like Interface Definition in TypeScript\nDESCRIPTION: This interface defines an object that can be converted to a string. It requires implementing a toString method that returns a string representation of the object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface StringLike {\n    toString(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ListOptions Interface in TypeScript for Firebase Storage\nDESCRIPTION: This code snippet defines the ListOptions interface used in Firebase Storage. It specifies two optional properties: maxResults for limiting the number of results, and pageToken for pagination.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.listoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ListOptions {\n  maxResults?: number | null;\n  pageToken?: string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: GtagName Property Definition\nDESCRIPTION: Property definition for customizing the name of the gtag function\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.settingsoptions.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngtagName?: string;\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Package for JavaScript SDK\nDESCRIPTION: This code snippet shows the npm package name for the officially supported Firebase package that should be used instead of directly using @firebase/functions-types.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/functions-types/README.md#2025-04-14_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[firebase](https://www.npmjs.com/package/firebase)\n```\n\n----------------------------------------\n\nTITLE: Building Firebase Auth Dependencies for Demo\nDESCRIPTION: Commands to build the auth package dependencies before deployment.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/demo/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd auth/demo\nyarn\nyarn build:deps\n```\n\n----------------------------------------\n\nTITLE: Content.role Property Definition in TypeScript\nDESCRIPTION: Property definition for the role property of the Content interface, which is of type Role.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.content.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nrole: Role;\n```\n\n----------------------------------------\n\nTITLE: Checking Admin Status in TypeScript\nDESCRIPTION: This constant function checks if a given token belongs to an admin. It takes a token string as input and returns a boolean indicating admin status.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const isAdmin: (token: string) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Declaring taskState Property Type\nDESCRIPTION: Property definition for tracking the current state of the bundle loading task using TaskState enum.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.loadbundletaskprogress.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntaskState: TaskState;\n```\n\n----------------------------------------\n\nTITLE: Long Polling Auto-Detection Property\nDESCRIPTION: Property definition for experimental setting to auto-detect if long-polling should be used.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestoresettings.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexperimentalAutoDetectLongPolling?: boolean;\n```\n\n----------------------------------------\n\nTITLE: EmulatorConfig.port Property Definition in TypeScript\nDESCRIPTION: The port property definition for EmulatorConfig interface which specifies the port of the emulator. It can be a number or null if using protocol defaults.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.emulatorconfig.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly port: number | null;\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase App with Updated Settings\nDESCRIPTION: Example of initializing a Firebase app with updated settings, including the new FirebaseServerAppSettings.name field.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = initializeApp({\n  // other config options\n  serverAppSettings: {\n    // name field is now omitted instead of set to undefined\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Converting String to Byte Array in TypeScript\nDESCRIPTION: This constant function converts a string to an array of byte values. It takes a string as input and returns an array of numbers representing the byte values of the string.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const stringToByteArray: (str: string) => number[];\n```\n\n----------------------------------------\n\nTITLE: GtagConfigParams Property: cookie_update\nDESCRIPTION: This property, when set to true, updates cookies on each page load. It defaults to true if not specified. It is part of the GtagConfigParams interface and controls cookie update behavior.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.gtagconfigparams.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n'cookie_update'?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Force Long Polling Property\nDESCRIPTION: Property definition for experimental setting to force long-polling in the WebChannel transport.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestoresettings.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexperimentalForceLongPolling?: boolean;\n```\n\n----------------------------------------\n\nTITLE: ServiceWorkerRegistration Property Definition\nDESCRIPTION: Optional property definition for specifying a service worker registration used for push messaging. Required unless firebase-messaging-sw.js exists at root location.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_sw.gettokenoptions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nserviceWorkerRegistration?: ServiceWorkerRegistration;\n```\n\n----------------------------------------\n\nTITLE: Defining session Property in PhoneMultiFactorEnrollInfoOptions\nDESCRIPTION: This code snippet shows the definition of the session property in the PhoneMultiFactorEnrollInfoOptions interface. It specifies the MultiFactorSession object obtained from MultiFactorUser.getSession().\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phonemultifactorenrollinfooptions.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsession: MultiFactorSession;\n```\n\n----------------------------------------\n\nTITLE: FullMetadata Bucket Property Definition\nDESCRIPTION: TypeScript property definition for the bucket containing the storage object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.fullmetadata.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbucket: string;\n```\n\n----------------------------------------\n\nTITLE: QueryFieldFilterConstraint Type Property Definition\nDESCRIPTION: Definition of the readonly type property that identifies this as a 'where' query constraint.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.queryfieldfilterconstraint.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type = \"where\";\n```\n\n----------------------------------------\n\nTITLE: Major Version Release Notes\nDESCRIPTION: Documentation of major version 1.0.0 release with breaking changes and new features\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/rules-unit-testing/CHANGELOG.md#2025-04-14_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n[`980c7d539`](https://github.com/firebase/firebase-js-sdk/commit/980c7d53964cd28d6c6ad2ab4b859580997a476c) [#3378](https://github.com/firebase/firebase-js-sdk/pull/3378) - Release `@firebase/rules-unit-testing` to replace the `@firebase/testing` package. The new\\npackage is API compatible but has the following breaking behavior changes:\\n\\n- `assertFails()` will now only fail on `PERMISSION DENIED` errors, not any error.\\n- `initializeAdminApp()` now relies on `firebase-admin` rather than imitating the Admin SDK.\n```\n\n----------------------------------------\n\nTITLE: RetrievedContextAttribution Title Property Definition\nDESCRIPTION: Defines the title property of the RetrievedContextAttribution interface as a string type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.retrievedcontextattribution.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: string;\n```\n\n----------------------------------------\n\nTITLE: Defining IntegerSchema Class in TypeScript\nDESCRIPTION: Defines a class for integer schema, extending the Schema class.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class IntegerSchema extends Schema {\n    constructor(schemaParams?: SchemaParams);\n}\n```\n\n----------------------------------------\n\nTITLE: EmulatorConfig.options Property Definition in TypeScript\nDESCRIPTION: The options property definition for EmulatorConfig interface which provides emulator-specific configuration options, including the ability to disable warnings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.emulatorconfig.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly options: {\n        readonly disableWarnings: boolean;\n    };\n```\n\n----------------------------------------\n\nTITLE: PersistenceSettings Property Definition\nDESCRIPTION: Definition of the forceOwnership property within PersistenceSettings interface. Controls whether to force enable persistence for the client, primarily used with Web Workers.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.persistencesettings.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nforceOwnership?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Storage Package Reference\nDESCRIPTION: NPM package reference showing the recommended way to access Firebase Storage functionality through the main firebase package.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/storage-compat/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @firebase/storage\n```\n\n----------------------------------------\n\nTITLE: NotificationPayload.title Property Definition\nDESCRIPTION: Defines the optional 'title' property of the NotificationPayload interface, which represents the notification's title.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.notificationpayload.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntitle?: string;\n```\n\n----------------------------------------\n\nTITLE: Citation uri Property Definition\nDESCRIPTION: Property definition for the optional uri property of a Citation, which specifies the URI/URL reference to the cited content.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.citation.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nuri?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated Item.brand Property\nDESCRIPTION: Declaration of the deprecated brand property for the Item interface. This property is marked as obsolete with a recommendation to use item_brand instead.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbrand?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining VertexAI Location Property Signature\nDESCRIPTION: TypeScript property signature for the location property of the VertexAI interface.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.vertexai.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlocation: string;\n```\n\n----------------------------------------\n\nTITLE: JWT Token Property Definition\nDESCRIPTION: Property definition for the Firebase Auth ID token JWT string.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.idtokenresult.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntoken: string;\n```\n\n----------------------------------------\n\nTITLE: Implementing presencePenalty Property in GenerationConfig\nDESCRIPTION: TypeScript property definition for presencePenalty in GenerationConfig interface, which adjusts penalties for tokens already present in the text.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generationconfig.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\npresencePenalty?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Item.discount Property\nDESCRIPTION: Declaration of the optional discount property for the Item interface, which uses the Currency type to specify a discount amount applied to the item.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndiscount?: Currency;\n```\n\n----------------------------------------\n\nTITLE: Defining the contents Property in GenerateContentRequest Interface\nDESCRIPTION: Specifies the contents property of GenerateContentRequest which is an array of Content objects.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentrequest.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncontents: Content[];\n```\n\n----------------------------------------\n\nTITLE: Defining Segment Interface in TypeScript\nDESCRIPTION: This code snippet defines the Segment interface with three number properties: endIndex, partIndex, and startIndex. It represents a segment of data with start and end points, as well as a part index.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.segment.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Segment {\n  endIndex: number;\n  partIndex: number;\n  startIndex: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UnionToIntersection Type in TypeScript for Firebase SDK\nDESCRIPTION: Creates a type that converts a union type to an intersection type. It uses distributive conditional types and inference from conditional types to achieve this transformation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type UnionToIntersection<U> = (U extends unknown ? (k: U) => void : never) extends (k: infer I) => void ? I : never;\n```\n\n----------------------------------------\n\nTITLE: GtagConfigParams Property: cookie_flags\nDESCRIPTION: This property appends additional flags to the cookie when set. It is part of the GtagConfigParams interface and allows for customization of cookie attributes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.gtagconfigparams.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n'cookie_flags'?: string;\n```\n\n----------------------------------------\n\nTITLE: Declaring totalTokens Property in TypeScript\nDESCRIPTION: This code snippet declares the totalTokens property of the CountTokensResponse interface, which is a required number representing the total number of tokens counted across all instances from the request.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.counttokensresponse.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntotalTokens: number;\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Hosting for Demo App\nDESCRIPTION: Command to configure a Firebase Hosting instance for the demo application.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/demo/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfirebase use --add\n```\n\n----------------------------------------\n\nTITLE: SchemaRequest Required Property Definition\nDESCRIPTION: TypeScript property definition for the optional required array that specifies required properties in the schema.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.schemarequest.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrequired?: string[];\n```\n\n----------------------------------------\n\nTITLE: Logging Checkout Events in Firebase Analytics\nDESCRIPTION: TypeScript function signature for logging checkout option events with parameters for checkout step and option details.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/analytics.api.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function logEvent(analyticsInstance: Analytics, eventName: 'set_checkout_option', eventParams?: {\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Creating Tenant with Password Policy for Testing\nDESCRIPTION: cURL command to create a tenant with a specific password policy configuration for password policy testing. The policy enforces minimum requirements for password length, uppercase, lowercase, numeric, and non-alphanumeric characters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl   -H \"Authorization: Bearer $(gcloud auth print-access-token)\"   -H \"Content-Type: application/json\"   -H \"X-Goog-User-Project: ${PROJECT_ID}\"   -X POST https://identitytoolkit.googleapis.com/v2/projects/${PROJECT_ID}/tenants   -d     '{\n      \"displayName\": \"passpol-tenant\",\n      \"passwordPolicyConfig\": {\n        \"passwordPolicyEnforcementState\": \"ENFORCE\",\n        \"passwordPolicyVersions\": [\n          {\n            \"customStrengthOptions\": {\n              \"minPasswordLength\": 8,\n              \"maxPasswordLength\": 24,\n              \"containsLowercaseCharacter\": true,\n              \"containsUppercaseCharacter\": true,\n              \"containsNumericCharacter\": true,\n              \"containsNonAlphanumericCharacter\": true\n            }\n          }\n        ]\n      }\n    }'\n```\n\n----------------------------------------\n\nTITLE: Declaring Type Property for QueryFieldFilterConstraint in TypeScript\nDESCRIPTION: This code snippet declares the 'type' property for the QueryFieldFilterConstraint class. It is a readonly property set to the string 'where'.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.queryfieldfilterconstraint.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type = \"where\";\n```\n\n----------------------------------------\n\nTITLE: Declaring promptTokensDetails Property in TypeScript\nDESCRIPTION: This code snippet declares the promptTokensDetails property of the CountTokensResponse interface, which is an optional array of ModalityTokenCount objects representing the breakdown of prompt tokens by modality.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.counttokensresponse.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npromptTokensDetails?: ModalityTokenCount[];\n```\n\n----------------------------------------\n\nTITLE: Fixed VAPID Key Compatibility in PushManager\nDESCRIPTION: Implementation fix that reverts VAPID key format from base64 back to ArrayBuffer when providing to PushManager for push subscription to maintain backward compatibility.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/messaging/CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Prior implementation (firebase@7.7.0)\npushManager.subscribe({\n  userVisibleOnly: true,\n  applicationServerKey: base64VapidKey // base64 encoded\n});\n\n// Fixed implementation\npushManager.subscribe({\n  userVisibleOnly: true, \n  applicationServerKey: arrayBufferVapidKey // ArrayBuffer format\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Citation Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for a Citation object which represents a single citation with properties for tracking source information and text range.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.citation.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Citation \n```\n\n----------------------------------------\n\nTITLE: Defining Item.coupon Property\nDESCRIPTION: Declaration of the optional coupon property for the Item interface, which can be used to specify a coupon code associated with the item.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncoupon?: string;\n```\n\n----------------------------------------\n\nTITLE: Implementing Format Property\nDESCRIPTION: Optional string property for specifying data format.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.schemashared.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nformat?: string;\n```\n\n----------------------------------------\n\nTITLE: Firebase Rules Unit Testing API Definition in TypeScript\nDESCRIPTION: Comprehensive TypeScript definition file for the @firebase/rules-unit-testing package. It includes functions for initializing test environments, authenticating contexts, and asserting security rule outcomes. It also defines interfaces for configuring emulators, test environments, and token options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/rules-unit-testing.api.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { default as firebase_2 } from 'firebase/compat/app';\nimport { FirebaseSignInProvider } from '@firebase/util';\n\n// @public\nexport function assertFails(pr: Promise<any>): Promise<any>;\n\n// @public\nexport function assertSucceeds<T>(pr: Promise<T>): Promise<T>;\n\n// @public\nexport type EmulatorConfig = {\n    rules?: string;\n} & (HostAndPort | {});\n\n// @public\nexport interface HostAndPort {\n    host: string;\n    port: number;\n}\n\n// @public\nexport function initializeTestEnvironment(config: TestEnvironmentConfig): Promise<RulesTestEnvironment>;\n\n// @public\nexport interface RulesTestContext {\n    database(databaseURL?: string): firebase_2.database.Database;\n    firestore(settings?: firebase_2.firestore.Settings): firebase_2.firestore.Firestore;\n    storage(bucketUrl?: string): firebase_2.storage.Storage;\n}\n\n// @public\nexport interface RulesTestEnvironment {\n    authenticatedContext(user_id: string, tokenOptions?: TokenOptions): RulesTestContext;\n    cleanup(): Promise<void>;\n    clearDatabase(): Promise<void>;\n    clearFirestore(): Promise<void>;\n    clearStorage(): Promise<void>;\n    readonly emulators: {\n        database?: HostAndPort;\n        firestore?: HostAndPort;\n        storage?: HostAndPort;\n    };\n    readonly projectId: string;\n    unauthenticatedContext(): RulesTestContext;\n    // (undocumented)\n    withSecurityRulesDisabled(callback: (context: RulesTestContext) => Promise<void>): Promise<void>;\n}\n\n// @public\nexport interface TestEnvironmentConfig {\n    database?: EmulatorConfig;\n    firestore?: EmulatorConfig;\n    hub?: HostAndPort;\n    projectId?: string;\n    storage?: EmulatorConfig;\n}\n\n// @public\nexport type TokenOptions = {\n    iat?: number;\n    exp?: number;\n    auth_time?: number;\n    provider_id?: 'anonymous';\n    email?: string;\n    email_verified?: boolean;\n    phone_number?: string;\n    name?: string;\n    picture?: string;\n    firebase?: {\n        sign_in_provider: FirebaseSignInProvider;\n        identities?: {\n            [provider in FirebaseSignInProvider]?: string[];\n        };\n    };\n    aud?: string;\n    iss?: string;\n    [claim: string]: unknown;\n    uid?: never;\n    sub?: never;\n    user_id?: never;\n};\n\n// @public\nexport function withFunctionTriggersDisabled<TResult>(fn: () => TResult | Promise<TResult>): Promise<TResult>;\n\n// @public\nexport function withFunctionTriggersDisabled<TResult>(hub: {\n    host: string;\n    port: number;\n}, fn: () => TResult | Promise<TResult>): Promise<TResult>;\n```\n\n----------------------------------------\n\nTITLE: Fixing PushManager.subscribe() Timing Issue\nDESCRIPTION: Addresses an issue where PushManager.subscribe() was called too soon after registering the default service worker.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/messaging/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.12.15\n\n### Patch Changes\n\n- [`1294e64c8`](https://github.com/firebase/firebase-js-sdk/commit/1294e64c813b6dbfb64f8dc24d90ec69a66f71ae) [#8661](https://github.com/firebase/firebase-js-sdk/pull/8661) (fixes [#7784](https://github.com/firebase/firebase-js-sdk/issues/7784)) - Fix an issue where PushManager.subscribe() is called too soon after registering the default service worker.\n```\n\n----------------------------------------\n\nTITLE: Default Event Parameters Configuration - JavaScript\nDESCRIPTION: Implementation of setDefaultEventParameters() function to configure data that will be included with every Analytics SDK event.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/analytics/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setDefaultEventParameters(params: { [key: string]: any }): void\n```\n\n----------------------------------------\n\nTITLE: ActionCodeInfo Data Property Type Definition\nDESCRIPTION: Defines the data property structure that contains information related to action code operations including email addresses and multi-factor authentication details.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.actioncodeinfo.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndata: {\n        email?: string | null;\n        multiFactorInfo?: MultiFactorInfo | null;\n        previousEmail?: string | null;\n    };\n```\n\n----------------------------------------\n\nTITLE: Add Prefix to Object Keys Type Definition\nDESCRIPTION: Type definition that adds a prefix to all keys in an object type, joining them with a dot separator.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type AddPrefixToKeys<Prefix extends string, T extends Record<string, unknown>> = {\n    [K in keyof T & string as `${Prefix}.${K}`]+?: string extends K ? any : T[K];\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Firebase ASCII Art Banner\nDESCRIPTION: An ASCII art representation of the word 'FIREBASE' created using hash symbols (#), spaces, and other text characters. The banner is 5 lines tall and uses a block-style font pattern.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/scripts/release/utils/banner.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n######## #### ########  ######## ########     ###     ######  ########\n##        ##  ##     ## ##       ##     ##  ##   ##  ##       ##\n######    ##  ########  ######   ########  #########  ######  ######\n##        ##  ##    ##  ##       ##     ## ##     ##       ## ##\n##       #### ##     ## ######## ########  ##     ##  ######  ########\n```\n\n----------------------------------------\n\nTITLE: FirestoreError Message Property Signature\nDESCRIPTION: TypeScript signature for the message property that contains a custom error description.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.firestoreerror.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly message: string;\n```\n\n----------------------------------------\n\nTITLE: Declaring Type Property for QueryEndAtConstraint in TypeScript\nDESCRIPTION: This code defines the 'type' property of the QueryEndAtConstraint class. It specifies whether the constraint is 'endBefore' or 'endAt'.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.queryendatconstraint.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: 'endBefore' | 'endAt';\n```\n\n----------------------------------------\n\nTITLE: Verifying Test User Email for TOTP Testing\nDESCRIPTION: cURL command to send a verification email to the test user account required for TOTP MFA testing. This API call sends an OOB code of type VERIFY_EMAIL and returns the verification link.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl   -H \"Authorization: Bearer $(gcloud auth print-access-token)\"   -H \"Content-Type: application/json\"   -H \"X-Goog-User-Project: ${PROJECT_ID}\"   -X POST https://identitytoolkit.googleapis.com/v1/accounts:sendOobCode   -d     '{\n      \"email\": \"totpuser-donotdelete@test.com\",\n      \"requestType\": \"VERIFY_EMAIL\",\n      \"returnOobLink\": true,\n    }'\n```\n\n----------------------------------------\n\nTITLE: IntegerSchema Class Definition in TypeScript\nDESCRIPTION: Defines the IntegerSchema class that extends Schema for integer type validation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.integerschema.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class IntegerSchema extends Schema \n```\n\n----------------------------------------\n\nTITLE: Defining PersistentSingleTabManager Interface in TypeScript\nDESCRIPTION: This code snippet defines the PersistentSingleTabManager interface. It has a single property 'kind' of type 'persistentSingleTab', indicating that it manages a single persistent tab without synchronization across multiple tabs.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.persistentsingletabmanager.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface PersistentSingleTabManager {\n  kind: 'persistentSingleTab';\n}\n```\n\n----------------------------------------\n\nTITLE: Adding App Check Replay Protection Support\nDESCRIPTION: Addition of support for App Check replay protection in callable functions, introduced in version 0.10.0.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/functions/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ne12e7f53516b77f73e3781ffb64385d52982f653 [#7296](https://github.com/firebase/firebase-js-sdk/pull/7296) - Add support for App Check replay protection in callable functions\n```\n\n----------------------------------------\n\nTITLE: Getting User Agent String in TypeScript\nDESCRIPTION: This function returns the user agent string. It's used to identify the browser or environment in which the Firebase SDK is running.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function getUA(): string;\n```\n\n----------------------------------------\n\nTITLE: Firebase Storage Type Imports\nDESCRIPTION: Imports required types and interfaces from Firebase dependencies for storage functionality\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/storage.api.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { CompleteFn } from '@firebase/util';\nimport { EmulatorMockTokenOptions } from '@firebase/util';\nimport { FirebaseApp } from '@firebase/app';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { FirebaseError } from '@firebase/util';\nimport { _FirebaseService } from '@firebase/app';\nimport { NextFn } from '@firebase/util';\nimport { Provider } from '@firebase/component';\nimport { Subscribe } from '@firebase/util';\nimport { Unsubscribe } from '@firebase/util';\n```\n\n----------------------------------------\n\nTITLE: Defining Item.quantity Property\nDESCRIPTION: Declaration of the optional quantity property for the Item interface, which can be used to specify the number of items purchased or viewed.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nquantity?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCallingConfig Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for FunctionCallingConfig that specifies configuration options for function calling functionality.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.functioncallingconfig.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FunctionCallingConfig \n```\n\n----------------------------------------\n\nTITLE: Authentication Time Property Definition\nDESCRIPTION: Property definition for authentication time in UTC string format, representing when the user authenticated.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.idtokenresult.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nauthTime: string;\n```\n\n----------------------------------------\n\nTITLE: VertexAIError CustomErrorData Property Declaration in TypeScript\nDESCRIPTION: Optional read-only property for accessing custom error data associated with the error.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.vertexaierror.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly customErrorData?: CustomErrorData | undefined;\n```\n\n----------------------------------------\n\nTITLE: Checking Object Emptiness in TypeScript\nDESCRIPTION: This function checks if an object is empty. It takes an object as input and returns a boolean indicating whether the object has no own properties.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function isEmpty(obj: object): obj is {};\n```\n\n----------------------------------------\n\nTITLE: Date_2 Year Property Definition\nDESCRIPTION: Property definition for the year field in the Date_2 interface as a number type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.date_2.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nyear: number;\n```\n\n----------------------------------------\n\nTITLE: Defining BooleanSchema Class in TypeScript\nDESCRIPTION: This code snippet defines the BooleanSchema class, which extends the Schema class. It is used for creating schema definitions for boolean types in the Firebase JavaScript SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.booleanschema.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class BooleanSchema extends Schema \n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Firebase Analytics SDK Documentation\nDESCRIPTION: YAML frontmatter configuration for Firebase Analytics documentation page, setting up project references, book references, and page type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nProject: /docs/reference/js/_project.yaml\nBook: /docs/reference/_book.yaml\npage_type: reference\n```\n\n----------------------------------------\n\nTITLE: Liquid Comment Warning About File Editing\nDESCRIPTION: This Liquid template comment warns against manually editing the file as it is auto-generated by the Firebase JS SDK team. It indicates that changes should be made in the source repository.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% comment %}\nDO NOT EDIT THIS FILE!\nThis is generated by the JS SDK team, and any local changes will be\noverwritten. Changes should be made in the source code at\nhttps://github.com/firebase/firebase-js-sdk\n{% endcomment %}\n```\n\n----------------------------------------\n\nTITLE: Implementing ServerResponse Getter and Setter\nDESCRIPTION: Getter and setter methods for the serverResponse property in the StorageError class.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.storageerror.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nget serverResponse(): null | string;\n\nset serverResponse(serverResponse: string | null);\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Type in TypeScript\nDESCRIPTION: Defines a type alias for Tool, which is currently equivalent to FunctionDeclarationsTool.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport type Tool = FunctionDeclarationsTool;\n```\n\n----------------------------------------\n\nTITLE: Using new query operators in Firestore JavaScript SDK\nDESCRIPTION: Shows how to use the 'in' and 'array-contains-any' query operators with the where() method in Firestore queries.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst query1 = citiesRef.where('country', 'in', ['USA', 'Japan']);\nconst query2 = citiesRef.where('regions', 'array-contains-any', ['west_coast', 'east_coast']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Status Getter and Setter\nDESCRIPTION: Getter and setter methods for the status property in the StorageError class.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.storageerror.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nget status(): number;\n\nset status(status: number);\n```\n\n----------------------------------------\n\nTITLE: PersistentCacheIndexManager Type Property Definition\nDESCRIPTION: Defines a readonly type property that serves as a unique identifier for instances of the PersistentCacheIndexManager class.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.persistentcacheindexmanager.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: 'PersistentCacheIndexManager';\n```\n\n----------------------------------------\n\nTITLE: Defining VertexAIError Class in TypeScript\nDESCRIPTION: Defines a class for VertexAI errors, extending FirebaseError and including error code and custom error data.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class VertexAIError extends FirebaseError {\n    constructor(code: VertexAIErrorCode, message: string, customErrorData?: CustomErrorData | undefined);\n    // (undocumented)\n    readonly code: VertexAIErrorCode;\n    // (undocumented)\n    readonly customErrorData?: CustomErrorData | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Custom Claims in Rules Unit Testing\nDESCRIPTION: Bug fix addressing issues with custom claims functionality in the rules-unit-testing package, ensuring proper handling of authentication claims in security rules testing.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/rules-unit-testing/CHANGELOG.md#2025-04-14_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- [`fe0ae19a9`](https://github.com/firebase/firebase-js-sdk/commit/fe0ae19a91fca422bf071ca4dfc4737daf848c59) [#3915](https://github.com/firebase/firebase-js-sdk/pull/3915) - Fix custom claims in rules-unit-testing\n```\n\n----------------------------------------\n\nTITLE: Detecting Cloudflare Worker Environment in TypeScript\nDESCRIPTION: This function checks if the code is running in a Cloudflare Worker environment. It returns a boolean indicating the result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function isCloudflareWorker(): boolean;\n```\n\n----------------------------------------\n\nTITLE: ActionCodeURL Property Signature - Operation\nDESCRIPTION: Property definition for accessing the action type performed by the email action link.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.actioncodeurl.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly operation: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Video Metadata Interface in TypeScript\nDESCRIPTION: TypeScript interface specifying the structure for video metadata, including start and end offset timestamps.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VideoMetadata {\n    endOffset: string;\n    startOffset: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Version in Firebase JS SDK\nDESCRIPTION: Upgrade TypeScript to version 5.5.4 in the Firebase JavaScript SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/app-types/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [`b80711925`](https://github.com/firebase/firebase-js-sdk/commit/b807119252dacf46b0122344c2b6dfc503cecde1) [#8604](https://github.com/firebase/firebase-js-sdk/pull/8604) - Upgrade to TypeScript 5.5.4\n```\n\n----------------------------------------\n\nTITLE: Setting Link Domain for Action Code Settings\nDESCRIPTION: New ActionCodeSettings.linkDomain property to customize Firebase Hosting link domain for mobile out-of-band email action flows. Replaces deprecated ActionCodeSettings.dynamicLinkDomain.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nActionCodeSettings.linkDomain\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connection with GMPID\nDESCRIPTION: Enhanced websocket connection setup to include Google Mobile Platform ID (GMPID) for better identification and tracking\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/database/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction initWebSocketConnection(config) {\n  const params = new URLSearchParams();\n  if (config.gmpid) {\n    params.append('gmpid', config.gmpid);\n  }\n  return new WebSocket(url + '?' + params.toString());\n}\n```\n\n----------------------------------------\n\nTITLE: InlineDataPart functionResponse Property TypeScript Definition\nDESCRIPTION: Property definition for functionResponse that is explicitly set as never to exclude function response content from this interface type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.inlinedatapart.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionResponse?: never;\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON Test Files with Prettier\nDESCRIPTION: Command to format the JSON test files using Prettier after copying them from the source repository.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/test/unit/remote/bloom_filter_golden_test_data/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ../../../.. && yarn prettier\n```\n\n----------------------------------------\n\nTITLE: GenerateContentCandidate finishMessage Property Definition\nDESCRIPTION: Defines the optional finishMessage property which may contain a message indicating why the generation finished.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentcandidate.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfinishMessage?: string;\n```\n\n----------------------------------------\n\nTITLE: Replacing node-fetch with undici in Node.js SDK\nDESCRIPTION: Replacement of node-fetch v2.6.7 dependency with the latest version of undici (v5.26.5) in Node.js SDK builds for improved performance and security.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/functions/CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nbebecdaad7fa552505055ab7705da478203078b6 [#7705](https://github.com/firebase/firebase-js-sdk/pull/7705) - Replaced node-fetch v2.6.7 dependency with the latest version of undici (v5.26.5) in Node.js SDK\n  builds for auth, firestore, functions and storage.\n```\n\n----------------------------------------\n\nTITLE: TextPart Text Property Definition\nDESCRIPTION: Required property definition that specifies the text content as a string type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.textpart.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntext: string;\n```\n\n----------------------------------------\n\nTITLE: ImagenGenerationConfig Image Format Property Definition\nDESCRIPTION: TypeScript property definition for setting the output image format of generated images.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagengenerationconfig.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimageFormat?: ImagenImageFormat;\n```\n\n----------------------------------------\n\nTITLE: Dependency Updates - Package Versions\nDESCRIPTION: Version updates for multiple Firebase SDK packages including app, performance, firestore, storage, messaging and app-check.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- @firebase/app@0.8.4\n- @firebase/performance@0.5.17\n- @firebase/firestore@3.7.3\n- @firebase/storage@0.9.14\n- @firebase/messaging@0.11.0\n- @firebase/app-check@0.5.17\n- @firebase/app-compat@0.1.39\n- @firebase/performance-compat@0.1.17\n- @firebase/firestore-compat@0.2.3\n- @firebase/storage-compat@0.1.22\n- @firebase/messaging-compat@0.1.21\n- @firebase/app-check-compat@0.2.17\n```\n\n----------------------------------------\n\nTITLE: Authentication Time Property Definition\nDESCRIPTION: Property definition for auth_time that stores the timestamp when authentication was performed.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.parsedtoken.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n'auth_time'?: string;\n```\n\n----------------------------------------\n\nTITLE: TextPart Inline Data Property Definition\nDESCRIPTION: Property definition that explicitly marks inlineData as an optional never type, indicating this property cannot exist on text parts.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.textpart.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninlineData?: never;\n```\n\n----------------------------------------\n\nTITLE: Random Factor Constant in TypeScript\nDESCRIPTION: This constant defines a random factor used in various calculations within the Firebase SDK. It's set to 0.5, representing a 50% factor.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const RANDOM_FACTOR = 0.5;\n```\n\n----------------------------------------\n\nTITLE: FetchResponse Status Property Definition\nDESCRIPTION: Property definition for the HTTP status code that distinguishes between different types of success responses.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.fetchresponse.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatus: number;\n```\n\n----------------------------------------\n\nTITLE: GenerateContentCandidate citationMetadata Property Definition\nDESCRIPTION: Defines the optional citationMetadata property which contains citation information for the generated content.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentcandidate.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncitationMetadata?: CitationMetadata;\n```\n\n----------------------------------------\n\nTITLE: Adding withFunctionTriggersDisabled for Emulator Data Import\nDESCRIPTION: New function that allows importing data into emulated Realtime Database or Firestore without triggering local Cloud Functions. This feature requires Firebase CLI version 8.13.0 or higher.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/rules-unit-testing/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- [`6ef39d4d3`](https://github.com/firebase/firebase-js-sdk/commit/6ef39d4d346e7458f1559f15f82f734dec41611b) [#3928](https://github.com/firebase/firebase-js-sdk/pull/3928) - Add withFunctionTriggersDisabled function which runs a user-provided setup function with emulated Cloud Functions triggers disabled. This can be used to import data into the Realtime Database or Cloud Firestore emulators without triggering locally emulated Cloud Functions. This method only works with Firebase CLI version 8.13.0 or higher.\n```\n\n----------------------------------------\n\nTITLE: Logging Sign Up Events in Firebase Analytics\nDESCRIPTION: TypeScript function signature for logging sign up events with method parameter.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/analytics.api.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function logEvent(analyticsInstance: Analytics, eventName: 'sign_up', eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Unsubscribe Function Type for Firebase Realtime Database (TypeScript)\nDESCRIPTION: Defines the type for an unsubscribe function, which can be invoked to remove a listener from a Firebase Realtime Database query.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type Unsubscribe = () => void;\n```\n\n----------------------------------------\n\nTITLE: Defining TypedSchema Type in TypeScript\nDESCRIPTION: Defines a union type for different schema types used in object properties.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport type TypedSchema = IntegerSchema | NumberSchema | StringSchema | BooleanSchema | ObjectSchema | ArraySchema;\n```\n\n----------------------------------------\n\nTITLE: Export Field Update Changelog Entry\nDESCRIPTION: Changelog entry describing build script updates to work with exports field and corresponding dependency updates.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/analytics-compat/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [`3281315fa`](https://github.com/firebase/firebase-js-sdk/commit/3281315fae9c6f535f9d5052ee17d60861ea569a) [#5708](https://github.com/firebase/firebase-js-sdk/pull/5708) (fixes [#1487](https://github.com/firebase/firebase-js-sdk/issues/1487)) - Update build scripts to work with the exports field\n\n- Updated dependencies [[`3281315fa`](https://github.com/firebase/firebase-js-sdk/commit/3281315fae9c6f535f9d5052ee17d60861ea569a)]:\n  - @firebase/analytics@0.7.4\n  - @firebase/component@0.5.9\n  - @firebase/util@1.4.2\n```\n\n----------------------------------------\n\nTITLE: Declaring state Property\nDESCRIPTION: Property definition for tracking the current state of the upload task.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.uploadtasksnapshot.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstate: TaskState;\n```\n\n----------------------------------------\n\nTITLE: Date_2 Day Property Definition\nDESCRIPTION: Property definition for the day field in the Date_2 interface as a number type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.date_2.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nday: number;\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template Warning\nDESCRIPTION: Warning comment indicating the file is auto-generated and should not be edited directly, with reference to the source repository.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore.md#2025-04-14_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% comment %}\nDO NOT EDIT THIS FILE!\nThis is generated by the JS SDK team, and any local changes will be\noverwritten. Changes should be made in the source code at\nhttps://github.com/firebase/firebase-js-sdk\n{% endcomment %}\n```\n\n----------------------------------------\n\nTITLE: IndexField order Property Type Definition\nDESCRIPTION: Type definition for the order property that specifies sort order for equality and comparison filters. Can be either ASCENDING or DESCENDING.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.indexfield.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly order?: 'ASCENDING' | 'DESCENDING';\n```\n\n----------------------------------------\n\nTITLE: Updating Firebase Database useEmulator Type Definition in JavaScript\nDESCRIPTION: Fixes the type definition for the database.useEmulator method in the Firebase JavaScript SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ndatabase.useEmulator()\n```\n\n----------------------------------------\n\nTITLE: Starting Development Environment for Firebase SDK\nDESCRIPTION: Command to start the development environment, including watch tasks and a sandbox server for the Firebase SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/README.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn dev\n```\n\n----------------------------------------\n\nTITLE: Declaring MemoryLruGarbageCollector Interface in TypeScript\nDESCRIPTION: This code snippet defines the MemoryLruGarbageCollector interface in TypeScript. It includes a single property 'kind' of type 'memoryLru'.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.memorylrugarbagecollector.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface MemoryLruGarbageCollector {\n  kind: 'memoryLru';\n}\n```\n\n----------------------------------------\n\nTITLE: Using FinalizationRegistry in FirebaseServerApp\nDESCRIPTION: Example of how FinalizationRegistry usage is now guarded in FirebaseServerApp initialization based on runtime availability.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof FinalizationRegistry !== 'undefined') {\n  // Use FinalizationRegistry\n} else {\n  // Fallback behavior\n}\n```\n\n----------------------------------------\n\nTITLE: Updating IndexedDB Data Format in Firebase JS SDK\nDESCRIPTION: Changes the format of some IndexedDB data to improve document lookup performance. Provides an option to clear existing data before enabling persistence.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclearIndexedDbPersistence();\nenableIndexedDbPersistence();\n```\n\n----------------------------------------\n\nTITLE: Declaring getToken Function Signature in TypeScript\nDESCRIPTION: This code snippet shows the type declaration for the getToken function within the CustomProviderOptions interface. It specifies that getToken is a function returning a Promise of AppCheckToken.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.customprovideroptions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetToken: () => Promise<AppCheckToken>;\n```\n\n----------------------------------------\n\nTITLE: NotificationPayload Image Property Definition\nDESCRIPTION: Type definition for the notification image URL property that specifies an image to be downloaded and displayed in the notification.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_sw.notificationpayload.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimage?: string;\n```\n\n----------------------------------------\n\nTITLE: Updating Firebase Component Package Version\nDESCRIPTION: This code snippet shows an update to the @firebase/component package version and its dependency on @firebase/util.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/component/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## 0.6.13\n\n### Patch Changes\n\n- Updated dependencies [[`777f465`](https://github.com/firebase/firebase-js-sdk/commit/777f465ff37495ff933a29583769ce8a6b2b59b5)]:\n  - @firebase/util@1.11.0\n```\n\n----------------------------------------\n\nTITLE: Removing ES5 Bundles from Firebase Component\nDESCRIPTION: This change removes ES5 bundles from the @firebase/component package, setting the minimum required ES version to ES2017.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/component/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## 0.6.10\n\n### Patch Changes\n\n- [`479226bf3`](https://github.com/firebase/firebase-js-sdk/commit/479226bf3ebd99017bb12fa21440c75715658702) [#8475](https://github.com/firebase/firebase-js-sdk/pull/8475) - Remove ES5 bundles. The minimum required ES version is now ES2017.\n\n- Updated dependencies [[`479226bf3`](https://github.com/firebase/firebase-js-sdk/commit/479226bf3ebd99017bb12fa21440c75715658702)]:\n  - @firebase/util@1.10.1\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Realtime Database via npm\nDESCRIPTION: This code snippet shows the recommended way to install the Firebase package, which includes the Realtime Database component. It emphasizes that direct usage of the @firebase/database package is not intended.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/database/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@firebase/database\n```\n\nLANGUAGE: markdown\nCODE:\n```\nfirebase\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Version and Removing ES5 Bundles\nDESCRIPTION: Upgrades to TypeScript 5.5.4 and removes ES5 bundles, setting the minimum required ES version to ES2017.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/messaging/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.12.14\n\n### Patch Changes\n\n- [`b80711925`](https://github.com/firebase/firebase-js-sdk/commit/b807119252dacf46b0122344c2b6dfc503cecde1) [#8604](https://github.com/firebase/firebase-js-sdk/pull/8604) - Upgrade to TypeScript 5.5.4\n\n- Updated dependencies [[`b80711925`](https://github.com/firebase/firebase-js-sdk/commit/b807119252dacf46b0122344c2b6dfc503cecde1)]:\n  - @firebase/component@0.6.11\n  - @firebase/installations@0.6.11\n  - @firebase/messaging-interop-types@0.2.3\n  - @firebase/util@1.10.2\n\n## 0.12.13\n\n### Patch Changes\n\n- [`479226bf3`](https://github.com/firebase/firebase-js-sdk/commit/479226bf3ebd99017bb12fa21440c75715658702) [#8475](https://github.com/firebase/firebase-js-sdk/pull/8475) - Remove ES5 bundles. The minimum required ES version is now ES2017.\n```\n\n----------------------------------------\n\nTITLE: FunctionsError Details Property Definition\nDESCRIPTION: Property declaration for the details field that stores additional error information. The details can be any type and will be converted to JSON in the error response.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.functionserror.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly details?: unknown;\n```\n\n----------------------------------------\n\nTITLE: Expanding Firestore WithFieldValue Type in TypeScript\nDESCRIPTION: Expands the Firestore.WithFieldValue<T> type to include T, allowing developers to use wrappers around Firebase types more easily.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nFirestore.WithFieldValue<T>\n```\n\n----------------------------------------\n\nTITLE: TextPart Function Call Property Definition\nDESCRIPTION: Property definition that explicitly marks functionCall as an optional never type, indicating this property cannot exist on text parts.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.textpart.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCall?: never;\n```\n\n----------------------------------------\n\nTITLE: ConsentSettings security_storage Property\nDESCRIPTION: Property definition for security-related storage consent status.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.consentsettings.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsecurity_storage?: ConsentStatusString;\n```\n\n----------------------------------------\n\nTITLE: Host Property Definition\nDESCRIPTION: Property definition for the hostname connection setting.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestoresettings.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nhost?: string;\n```\n\n----------------------------------------\n\nTITLE: MultiFactorError CustomData Property Definition\nDESCRIPTION: TypeScript signature for the customData property of MultiFactorError, defining the structure of error details and operation type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.multifactorerror.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly customData: AuthError['customData'] & {\n        readonly operationType: (typeof OperationTypeMap)[keyof typeof OperationTypeMap];\n    };\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Firebase SDK Development\nDESCRIPTION: Commands to install dependencies and build the Firebase SDK using yarn.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Upgrading TypeScript Version in Firebase Performance Types\nDESCRIPTION: This snippet shows a commit that upgrades the TypeScript version to 5.5.4 for the @firebase/performance-types package.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/performance-types/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [`b80711925`](https://github.com/firebase/firebase-js-sdk/commit/b807119252dacf46b0122344c2b6dfc503cecde1) [#8604](https://github.com/firebase/firebase-js-sdk/pull/8604) - Upgrade to TypeScript 5.5.4\n```\n\n----------------------------------------\n\nTITLE: FileDataPart.text Property Signature\nDESCRIPTION: Signature for the text property which is explicitly set to never type to prevent its use in a FileDataPart.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.filedatapart.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntext?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining RetrievedContextAttribution Interface in TypeScript\nDESCRIPTION: Defines a TypeScript interface for RetrievedContextAttribution with two string properties: title and uri. This interface appears to be used for attribution context in the Firebase JS SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.retrievedcontextattribution.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RetrievedContextAttribution\n```\n\n----------------------------------------\n\nTITLE: Validating Namespace in Firebase JS SDK\nDESCRIPTION: This function validates a namespace string passed to a Firebase SDK method. It checks if the namespace is a valid string and whether it's optional or required.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function validateNamespace(fnName: string, namespace: string, optional: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: ImagenGenerationConfig Number of Images Property Definition\nDESCRIPTION: TypeScript property definition for setting the number of images to generate per request.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagengenerationconfig.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnumberOfImages?: number;\n```\n\n----------------------------------------\n\nTITLE: Adding Port Configuration to Rules Unit Testing\nDESCRIPTION: Feature addition that provides port configuration and discovery methods to the rules-unit-testing package, enabling more flexible setup of local emulator testing environments.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/rules-unit-testing/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [`97f26b716`](https://github.com/firebase/firebase-js-sdk/commit/97f26b7168a2765618c7469f5ed1bf86b7c4ee7e) [#4388](https://github.com/firebase/firebase-js-sdk/pull/4388) - Add port configuration and discovery methods to rules-unit-testing.\n```\n\n----------------------------------------\n\nTITLE: Upgrading TypeScript Version (Markdown)\nDESCRIPTION: Multiple updates to upgrade the TypeScript version used in the project, including versions 4.7.4 and 5.5.4.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/analytics-types/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [`b80711925`](https://github.com/firebase/firebase-js-sdk/commit/b807119252dacf46b0122344c2b6dfc503cecde1) [#8604](https://github.com/firebase/firebase-js-sdk/pull/8604) - Upgrade to TypeScript 5.5.4\n\n- [`1625f7a95`](https://github.com/firebase/firebase-js-sdk/commit/1625f7a95cc3ffb666845db0a8044329be74b5be) [#6799](https://github.com/firebase/firebase-js-sdk/pull/6799) - Update TypeScript version to 4.7.4.\n\n- [`4af28c1a4`](https://github.com/firebase/firebase-js-sdk/commit/4af28c1a42bd25ce2353f694ca1724c6101cbce5) [#6682](https://github.com/firebase/firebase-js-sdk/pull/6682) - Upgrade TypeScript to 4.7.4.\n```\n\n----------------------------------------\n\nTITLE: Defining Web Attribution Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the structure for web attribution data, including title and URI fields.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WebAttribution {\n    title: string;\n    uri: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration for Firestore Testing\nDESCRIPTION: Commands to initialize Terraform and apply the configuration for setting up the Firestore testing environment. This process creates necessary resources in the specified Firebase project.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/test/integration/api/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform apply -var-file=../../config/project.json -auto-approve\n```\n\n----------------------------------------\n\nTITLE: Defining the description Property Signature in FunctionDeclaration\nDESCRIPTION: TypeScript signature for the description property of FunctionDeclaration. This property provides the purpose and description of the function, which helps the model decide how and whether to call the function.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.functiondeclaration.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndescription: string;\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Firebase JS SDK\nDESCRIPTION: Updates the dependencies for @firebase/component, @firebase/installations, and @firebase/util to specific versions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/messaging/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`2cd1cc76f`](https://github.com/firebase/firebase-js-sdk/commit/2cd1cc76f2a308135cd60f424fe09084a34b5cb5)]:\n  - @firebase/component@0.5.15\n  - @firebase/installations@0.5.10\n  - @firebase/util@1.6.1\n```\n\n----------------------------------------\n\nTITLE: Updating Firebase Messaging Package Version\nDESCRIPTION: Updates the version of the @firebase/messaging package to 0.12.17 and lists dependency changes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/messaging/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.12.17\n\n### Patch Changes\n\n- Updated dependencies [[`777f465`](https://github.com/firebase/firebase-js-sdk/commit/777f465ff37495ff933a29583769ce8a6a2b59b5)]:\n  - @firebase/util@1.11.0\n  - @firebase/installations@0.6.13\n  - @firebase/component@0.6.13\n```\n\n----------------------------------------\n\nTITLE: BlockReason Enumeration in TypeScript\nDESCRIPTION: Enumeration defining reasons why a prompt might be blocked, including safety concerns, prohibited content, blocklist matches, and other reasons.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum BlockReason \n{\n  BLOCKLIST = \"BLOCKLIST\",\n  OTHER = \"OTHER\",\n  PROHIBITED_CONTENT = \"PROHIBITED_CONTENT\",\n  SAFETY = \"SAFETY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Custom Path in Firebase Functions Domain\nDESCRIPTION: Update to allow a custom path in Firebase functions custom domain, fixing issue #8440.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/functions/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n2ee2a90aebcf75a0df467c47a5f731b07ce69070 [#8441](https://github.com/firebase/firebase-js-sdk/pull/8441) (fixes [#8440](https://github.com/firebase/firebase-js-sdk/issues/8440)) - Allow a custom path in Firebase functions custom domain\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Project for Deployment\nDESCRIPTION: Command to configure the Firebase CLI to use a specific Firebase project for deployment.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth-compat/demo/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfirebase use --add\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Interface in TypeScript\nDESCRIPTION: Type definition update adding Database interface implemented by FirebaseDatabase class to allow consumer SDKs to export database types as an interface.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/database-types/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Database {\n  // FirebaseDatabase implements this interface\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated Item.category Property\nDESCRIPTION: Declaration of the deprecated category property for the Item interface. This property is marked as obsolete with a recommendation to use item_category instead.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncategory?: string;\n```\n\n----------------------------------------\n\nTITLE: Making eventParams Optional in Analytics logEvent in JavaScript\nDESCRIPTION: Changes the eventParams argument in the analytics().logEvent() method to be optional, allowing events to be logged without parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/CHANGELOG.md#2025-04-14_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nanalytics().logEvent(eventName, eventParams?)\n```\n\n----------------------------------------\n\nTITLE: FirebaseServerApp Name Property Type Definition\nDESCRIPTION: TypeScript type definition for the name property of FirebaseServerApp interface. Defines the name identifier for internal use.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseserverapp.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: IndexField fieldPath Property Type Definition\nDESCRIPTION: Type definition for the required fieldPath property that specifies which field to index.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.indexfield.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly fieldPath: string;\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Firebase Auth Demo from Clean State\nDESCRIPTION: Commands to clear cache and rebuild the auth demo dependencies from scratch.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/demo/README.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd auth/demo\nrm -rf node_modules yarn.lock\nyarn\nyarn build:deps\n```\n\n----------------------------------------\n\nTITLE: Copying Configuration Template\nDESCRIPTION: Command to create a configuration file from the provided sample, which will be used to store Firebase project credentials.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth-compat/demo/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp public/sample-config.js public/config.js\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Package Reference in Markdown\nDESCRIPTION: Shows the npm package link to the officially supported firebase package that should be used instead of directly using the analytics component.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/analytics/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[firebase](https://www.npmjs.com/package/firebase)\n```\n\n----------------------------------------\n\nTITLE: Updating Firebase Database Dependencies\nDESCRIPTION: Dependency version updates for Firebase database components including wire protocol parameter changes for startAfter and endBefore operations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/database-compat/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n@firebase/database@0.14.0\n@firebase/util@1.8.0\n@firebase/component@0.6.0\n@firebase/database-types@0.10.0\n@firebase/logger@0.4.0\n```\n\n----------------------------------------\n\nTITLE: Verifying Development Environment Prerequisites\nDESCRIPTION: Commands to check installed versions of Node.js, yarn, and Java for Firebase SDK development.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ node -v\n$ yarn -v\n$ java -version\n```\n\n----------------------------------------\n\nTITLE: SchemaRequest Type Property Definition\nDESCRIPTION: TypeScript property definition for the mandatory type field that specifies the SchemaType of the property.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.schemarequest.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype: SchemaType;\n```\n\n----------------------------------------\n\nTITLE: Defining prodErrorMap Constant in TypeScript\nDESCRIPTION: A minimal error map with all verbose error messages stripped, used in production environments for Firebase Authentication error handling.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nprodErrorMap: AuthErrorMap\n```\n\n----------------------------------------\n\nTITLE: Implementing Description Property\nDESCRIPTION: Optional string property for describing schema elements.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.schemashared.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndescription?: string;\n```\n\n----------------------------------------\n\nTITLE: Declaring mode Property in FunctionCallingConfig\nDESCRIPTION: Property definition for mode which accepts a FunctionCallingMode type to specify the function calling behavior.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.functioncallingconfig.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmode?: FunctionCallingMode;\n```\n\n----------------------------------------\n\nTITLE: Running Firebase Auth Demo Locally\nDESCRIPTION: Command to run the Firebase Auth demo application locally at http://localhost:5000.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/demo/README.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn run demo\n```\n\n----------------------------------------\n\nTITLE: Releasing Modularized SDKs for Firebase Performance Types\nDESCRIPTION: This snippet shows a commit that releases modularized SDKs for the @firebase/performance-types package, addressing issue #5015.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/performance-types/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [`cdada6c68`](https://github.com/firebase/firebase-js-sdk/commit/cdada6c68f9740d13dd6674bcb658e28e68253b6) [#5345](https://github.com/firebase/firebase-js-sdk/pull/5345) (fixes [#5015](https://github.com/firebase/firebase-js-sdk/issues/5015)) - Release modularized SDKs\n```\n\n----------------------------------------\n\nTITLE: Declaring Session Property Type\nDESCRIPTION: Type declaration for the required session property which holds the MultiFactorSession object obtained from MultiFactorResolver.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phonemultifactorsignininfooptions.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsession: MultiFactorSession;\n```\n\n----------------------------------------\n\nTITLE: ConsentSettings personalization_storage Property\nDESCRIPTION: Property definition for personalization-related storage consent status.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.consentsettings.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\npersonalization_storage?: ConsentStatusString;\n```\n\n----------------------------------------\n\nTITLE: User Credential and Info Interfaces in TypeScript\nDESCRIPTION: Interface definitions for user credentials and basic user information used in Firebase Authentication. Defines structure for user authentication results and profile data.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/auth.api.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UserCredential {\n    operationType: (typeof OperationType)[keyof typeof OperationType];\n    providerId: string | null;\n    user: User;\n}\n\nexport interface UserInfo {\n    readonly displayName: string | null;\n    readonly email: string | null;\n    readonly phoneNumber: string | null;\n    readonly photoURL: string | null;\n    readonly providerId: string;\n    readonly uid: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining filteredReason Property in ImagenGenerationResponse\nDESCRIPTION: Declaration of the optional filteredReason property that explains why images were filtered from the results. This can happen due to safety filter levels or model-specific filtering.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagengenerationresponse.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfilteredReason?: string;\n```\n\n----------------------------------------\n\nTITLE: Adding Stream API for Callable Functions\nDESCRIPTION: Addition of a `.stream()` API for callable functions to consume streaming responses, introduced in version 0.12.0.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/functions/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nf05509e8c526ce44656389ab9997a6e5ee957a3d [#8609](https://github.com/firebase/firebase-js-sdk/pull/8609) - Add `.stream()` api for callable functions for consuming streaming responses.\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Authentication Types Package\nDESCRIPTION: This code snippet shows the package name for Firebase Authentication Types. It is not meant to be directly installed or used, but is a dependency of the main firebase package.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth-types/README.md#2025-04-14_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @firebase/auth-types\n```\n\n----------------------------------------\n\nTITLE: Declaring Type Property for QueryCompositeFilterConstraint in TypeScript\nDESCRIPTION: This code defines the 'type' property of the QueryCompositeFilterConstraint class, which indicates whether the constraint is an 'or' or 'and' operation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.querycompositefilterconstraint.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: 'or' | 'and';\n```\n\n----------------------------------------\n\nTITLE: QueryCompositeFilterConstraint Type Property Definition\nDESCRIPTION: Defines the readonly type property of the QueryCompositeFilterConstraint class, which can be either 'or' or 'and' to specify the logical operation type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.querycompositefilterconstraint.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: 'or' | 'and';\n```\n\n----------------------------------------\n\nTITLE: FullMetadata Updated Property\nDESCRIPTION: TypeScript property definition for the object's last update timestamp.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.fullmetadata.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nupdated: string;\n```\n\n----------------------------------------\n\nTITLE: Upgrading TypeScript Version for Firebase Component\nDESCRIPTION: This snippet shows an upgrade to TypeScript 5.5.4 for the @firebase/component package and its @firebase/util dependency.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/component/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## 0.6.11\n\n### Patch Changes\n\n- [`b80711925`](https://github.com/firebase/firebase-js-sdk/commit/b807119252dacf46b0122344c2b6dfc503cecde1) [#8604](https://github.com/firebase/firebase-js-sdk/pull/8604) - Upgrade to TypeScript 5.5.4\n\n- Updated dependencies [[`b80711925`](https://github.com/firebase/firebase-js-sdk/commit/b807119252dacf46b0122344c2b6dfc503cecde1)]:\n  - @firebase/util@1.10.2\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Firebase JS SDK\nDESCRIPTION: Updates the @firebase/util and @firebase/component dependencies to newer versions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n- Updated dependencies [[`c59f537b1`](https://github.com/firebase/firebase-js-sdk/commit/c59f537b1262b5d7997291b8c1e9324d378effb6)]:\n  - @firebase/util@1.9.3\n  - @firebase/component@0.6.4\n```\n\n----------------------------------------\n\nTITLE: Defining ExperimentalLongPollingOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the ExperimentalLongPollingOptions interface, which is used to configure long-polling options in the Firebase JavaScript SDK. It includes a single property 'timeoutSeconds' for setting the maximum timeout interval for long-polling GET responses.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.experimentallongpollingoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface ExperimentalLongPollingOptions \n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Firebase JS SDK\nDESCRIPTION: Updates the @firebase/util and @firebase/component dependencies to newer versions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n- Updated dependencies [[`434f8418c`](https://github.com/firebase/firebase-js-sdk/commit/434f8418c3db3ae98489a8461c437c248c039070)]:\n  - @firebase/util@1.9.4\n  - @firebase/component@0.6.5\n```\n\n----------------------------------------\n\nTITLE: Defining data Property Type\nDESCRIPTION: Type definition for the data property that allows arbitrary key-value string pairs as payload data.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.messagepayload.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndata?: {\n        [key: string]: string;\n    };\n```\n\n----------------------------------------\n\nTITLE: Waiting for pending writes in Firestore JavaScript SDK\nDESCRIPTION: Demonstrates how to use the waitForPendingWrites() method to wait until all pending writes are acknowledged by the Firestore backend.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.firestore().waitForPendingWrites().then(() => {\n  console.log('All pending writes are now acknowledged by the backend');\n});\n```\n\n----------------------------------------\n\nTITLE: Making FunctionsError Class Public\nDESCRIPTION: Change to make the FunctionsError class publicly exported, fixing issue #8511.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/functions/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\na2146910ccb0efd1e0dc4496c328358d5afdea61 [#8546](https://github.com/firebase/firebase-js-sdk/pull/8546) (fixes [#8511](https://github.com/firebase/firebase-js-sdk/issues/8511)) - Make the `FunctionsError` class publicly exported.\n```\n\n----------------------------------------\n\nTITLE: Preparing Cordova Project Dependencies\nDESCRIPTION: Command to prepare the Cordova project dependencies after configuring the necessary files.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/cordova/demo/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncordova prepare\n```\n\n----------------------------------------\n\nTITLE: Creating AuthCredential from JSON in TypeScript\nDESCRIPTION: Static method to create an AuthCredential from a JSON string or a plain object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.samlauthprovider.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic credentialFromJSON(json: string | object): AuthCredential;\n```\n\n----------------------------------------\n\nTITLE: SafetySetting Method Property Definition\nDESCRIPTION: Defines the optional method property of type HarmBlockMethod.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.safetysetting.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmethod?: HarmBlockMethod;\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Firebase JavaScript SDK\nDESCRIPTION: Command to run all test suites for the Firebase JavaScript SDK using yarn.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/README.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn test\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Version for Firebase SDK Development\nDESCRIPTION: Sets the specific Node.js version required for Firebase SDK development using yarn.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn set version 1.22.11\n```\n\n----------------------------------------\n\nTITLE: Updating Firebase Dependencies in package.json\nDESCRIPTION: Example of updated dependency versions for Firebase packages in a project's package.json file.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"@firebase/app\": \"0.10.12\",\n  \"@firebase/data-connect\": \"0.1.0\",\n  \"@firebase/firestore\": \"4.7.3\",\n  \"@firebase/app-compat\": \"0.2.42\",\n  \"@firebase/firestore-compat\": \"0.3.38\"\n}\n```\n\n----------------------------------------\n\nTITLE: RecaptchaVerifier Parameter Order Change\nDESCRIPTION: Documentation of a change to reorder RecaptchaVerifier parameters to make auth the first parameter.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth-compat/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`1ff891c0d`](https://github.com/firebase/firebase-js-sdk/commit/1ff891c0da15d391b62e186c14a57c59263dde65) [#7326](https://github.com/firebase/firebase-js-sdk/pull/7326)\n```\n\n----------------------------------------\n\nTITLE: Logging Content Selection Events in Firebase Analytics\nDESCRIPTION: TypeScript declaration for logging content selection events with content type and item ID parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'select_content', eventParams?: {\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for Firebase Storage Testing\nDESCRIPTION: JSON configuration for setting CORS rules on a Firebase Storage bucket to allow testing from localhost.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/README.md#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"origin\": [\"http://localhost:8089\"],\n        \"method\": [\"GET\"],\n        \"maxAgeSeconds\": 3600\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Declaring 'kind' Property for PersistentMultipleTabManager in TypeScript\nDESCRIPTION: This code snippet declares the 'kind' property for the PersistentMultipleTabManager interface. It is a readonly property of type string literal 'PersistentMultipleTab'.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.persistentmultipletabmanager.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nkind: 'PersistentMultipleTab';\n```\n\n----------------------------------------\n\nTITLE: Updating Analytics Event Typings (Markdown)\nDESCRIPTION: Updates to event typings to match GA4 specifications and fix formatting of links in comments.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/analytics-types/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [`bd50d8310`](https://github.com/firebase/firebase-js-sdk/commit/bd50d83107be3d87064f72800c608abc94ae3456) [#5206](https://github.com/firebase/firebase-js-sdk/pull/5206) - Fix formatting of links in comments and update some event typings to correctly match GA4 specs.\n```\n\n----------------------------------------\n\nTITLE: Defining ImagenPersonFilterLevel Enum in TypeScript\nDESCRIPTION: Preview API enum for controlling the generation of images containing people or faces with different permission levels.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum ImagenPersonFilterLevel\n```\n\n----------------------------------------\n\nTITLE: GtagConfigParams Property: page_location\nDESCRIPTION: This property sets the URL of the page for Google Analytics tracking. It is part of the GtagConfigParams interface and is used for page view tracking.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.gtagconfigparams.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n'page_location'?: string;\n```\n\n----------------------------------------\n\nTITLE: Cloning the Firebase JS SDK Repository\nDESCRIPTION: Commands to clone the Firebase JS SDK repository and navigate to the Auth Compatibility demo directory.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth-compat/demo/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/firebase/firebase-js-sdk.git\ncd firebase-js-sdk/packages/auth-compat/demo\n```\n\n----------------------------------------\n\nTITLE: Exporting Firestore Spec Tests to Android SDK\nDESCRIPTION: This bash command exports the Firestore Spec Tests to the Android SDK. It assumes the firebase-js-sdk repository is cloned into ~/firebase-js-sdk and the Android SDK is cloned into ~/firebase-android-sdk.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/test/unit/specs/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/firebase-js-sdk/packages/firestore/test/unit && \n./generate_spec_json.sh ~/firebase-android-sdk/firebase-firestore/src/test/resources/json\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Compat Packages\nDESCRIPTION: Example of how to import Firebase compat packages, which are API compatible with Version 8.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/README.md#2025-04-14_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v9 compat packages are API compatible with v8 code\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\n```\n\n----------------------------------------\n\nTITLE: HttpsCallableStreamResult Stream Property Signature\nDESCRIPTION: TypeScript signature for the stream property which returns an AsyncIterable of the StreamData type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.httpscallablestreamresult.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly stream: AsyncIterable<StreamData>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Project and Test Account for E2E Tests (JavaScript)\nDESCRIPTION: This code snippet shows the structure of the 'firebase-config.js' file, which contains the Firebase project configuration and test account credentials. These are required for running the E2E tests.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/e2e/README.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// A config for a project\nexport const config = {\n  apiKey: ************,\n  authDomain: ************,\n  databaseURL: ************,\n  projectId: ************,\n  storageBucket: ************,\n  messagingSenderId: ************,\n  appId: ************,\n  measurementId: ************\n};\n *\n// A user account with read/write privileges in that project\n// for storage, database, firestore\nexport const testAccount = {\n  email: ************,\n  password: ************\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectSchemaInterface Interface in TypeScript\nDESCRIPTION: Defines an interface for object schema, extending SchemaInterface and specifying the type as OBJECT.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ObjectSchemaInterface extends SchemaInterface {\n    // (undocumented)\n    optionalProperties?: string[];\n    // (undocumented)\n    type: SchemaType.OBJECT;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Storage Emulator Support to Rules Unit Testing\nDESCRIPTION: Code snippet adding support for Storage emulator to rules-unit-testing package. This allows testing Firebase Storage security rules in a local emulator environment.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/rules-unit-testing/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [`66deb252d`](https://github.com/firebase/firebase-js-sdk/commit/66deb252d9aebf318d2410d2dee47f19ad0968da) [#4863](https://github.com/firebase/firebase-js-sdk/pull/4863) - Add support for Storage emulator to rules-unit-testing\n```\n\n----------------------------------------\n\nTITLE: Referencing Official Firebase Package\nDESCRIPTION: Shows the npm package name for the officially supported Firebase package that should be used instead of directly using the @firebase/functions component.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/functions/README.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nfirebase\n```\n\n----------------------------------------\n\nTITLE: ConsentSettings functionality_storage Property\nDESCRIPTION: Property definition for functionality-related storage consent status.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.consentsettings.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionality_storage?: ConsentStatusString;\n```\n\n----------------------------------------\n\nTITLE: Detecting UWP Environment in TypeScript\nDESCRIPTION: This function checks if the code is running in a Universal Windows Platform (UWP) environment. It returns a boolean indicating the result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function isUWP(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining SchemaShared Interface in TypeScript\nDESCRIPTION: Generic interface definition for shared Schema properties that includes optional fields for description, enum values, examples, format specifications, nested items, nullability, and property mappings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.schemashared.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SchemaShared<T> \n```\n\n----------------------------------------\n\nTITLE: Fixing assertFails for RTDB Permission Denied Errors\nDESCRIPTION: Bug fix for the assertFails function that corrects how it handles Realtime Database permission denied errors, ensuring proper test validation of security rules.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/rules-unit-testing/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [`5ad7ff2ae`](https://github.com/firebase/firebase-js-sdk/commit/5ad7ff2ae955c297556223e6cb3ad9d4b897f664) [#4713](https://github.com/firebase/firebase-js-sdk/pull/4713) - Fix assertFails not correctly catching RTDB permission denied errors (#4667).\n```\n\n----------------------------------------\n\nTITLE: Releasing Modularized SDKs for Firebase JS SDK\nDESCRIPTION: Implements the release of modularized SDKs for the Firebase JavaScript SDK project, addressing issue #5015.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/remote-config-types/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [`cdada6c68`](https://github.com/firebase/firebase-js-sdk/commit/cdada6c68f9740d13dd6674bcb658e28e68253b6) [#5345](https://github.com/firebase/firebase-js-sdk/pull/5345) (fixes [#5015](https://github.com/firebase/firebase-js-sdk/issues/5015)) - Release modularized SDKs\n```\n\n----------------------------------------\n\nTITLE: Detecting React Native Environment in TypeScript\nDESCRIPTION: This function checks if the code is running in a React Native environment. It returns a boolean indicating the result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function isReactNative(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Upgrading to TypeScript 5.5.4\nDESCRIPTION: Upgrades the project to use TypeScript version 5.5.4.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/storage/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"typescript\": \"^5.5.4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Auto-Initialize Functionality for Project Config\nDESCRIPTION: Add functionality to auto-initialize project config and emulator settings from global defaults provided by framework tooling.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/app-types/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [`fdd4ab464`](https://github.com/firebase/firebase-js-sdk/commit/fdd4ab464b59a107bdcc195df3f01e32efd89ed4) [#6526](https://github.com/firebase/firebase-js-sdk/pull/6526) - Add functionality to auto-initialize project config and emulator settings from global defaults provided by framework tooling.\n```\n\n----------------------------------------\n\nTITLE: Upgrading TypeScript Version for Firebase JS SDK\nDESCRIPTION: Updates the TypeScript version to 4.7.4 for the Firebase JavaScript SDK project.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/remote-config-types/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [`1625f7a95`](https://github.com/firebase/firebase-js-sdk/commit/1625f7a95cc3ffb666845db0a8044329be74b5be) [#6799](https://github.com/firebase/firebase-js-sdk/pull/6799) - Update TypeScript version to 4.7.4.\n```\n\n----------------------------------------\n\nTITLE: Formatting Code in Firebase Remote Config Package\nDESCRIPTION: Command to format code in the Remote Config package using the prettier code formatter to ensure consistent code style.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/remote-config/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn prettier\n```\n\n----------------------------------------\n\nTITLE: FunctionResponse Properties TypeScript Definition\nDESCRIPTION: TypeScript property definitions for the FunctionResponse interface. It defines the 'name' property as a string and the 'response' property as an object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.functionresponse.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse: object;\n```\n\n----------------------------------------\n\nTITLE: Citation startIndex Property Definition\nDESCRIPTION: Property definition for the optional startIndex property of a Citation, which specifies the starting position of cited text.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.citation.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstartIndex?: number;\n```\n\n----------------------------------------\n\nTITLE: Firebase Version History Update\nDESCRIPTION: A markdown formatted changelog showing version updates, dependency changes, and bug fixes for the Firebase JS SDK packages. Notable changes include the addition of ReCAPTCHA Enterprise support and exports field updates.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/app-check-compat/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`38da5d9be`](https://github.com/firebase/firebase-js-sdk/commit/38da5d9be4a001038548947a85c9b612e5275e32)]:\n  - @firebase/app-check@0.5.7\n\n## 0.2.6\n\n### Patch Changes\n\n- Updated dependencies [[`e9e5f6b3c`](https://github.com/firebase/firebase-js-sdk/commit/e9e5f6b3ca9d61323b22f87986d9959f5297ec59)]:\n  - @firebase/util@1.5.2\n  - @firebase/app-check@0.5.6\n  - @firebase/component@0.5.13\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Functions Package Reference\nDESCRIPTION: The code snippet shows the npm package name for the Firebase Functions component, which should not be used directly but only via the official firebase package.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/functions/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@firebase/functions\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in package.json\nDESCRIPTION: Updates the @firebase/util and @firebase/component dependencies to new versions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/storage/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"dependencies\": {\n  \"@firebase/util\": \"1.11.0\",\n  \"@firebase/component\": \"0.6.13\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Screen View Parameters to logEvent (Markdown)\nDESCRIPTION: Addition of 'firebase_screen' and 'firebase_screen_class' parameters to the logEvent() overload for screen_view events.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/analytics-types/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- [`02586c975`](https://github.com/firebase/firebase-js-sdk/commit/02586c9754318b01a0051561d2c7c4906059b5af) [#5070](https://github.com/firebase/firebase-js-sdk/pull/5070) - Add `firebase_screen` and `firebase_screen_class` to `logEvent()` overload for `screen_view` events.\n```\n\n----------------------------------------\n\nTITLE: Testing Firebase JS SDK Changes\nDESCRIPTION: Shell command for running local tests to verify changes made to the Firebase JS SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/CONTRIBUTING.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Validating Context Object in Firebase JS SDK\nDESCRIPTION: This function validates a context object passed to a Firebase SDK method. It checks if the context is of the correct type and whether it's optional or required.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function validateContextObject(fnName: string, argumentName: string, context: unknown, optional: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing the modality Property in ModalityTokenCount Interface\nDESCRIPTION: TypeScript property declaration for the modality property in ModalityTokenCount interface. This property represents the modality associated with the token count.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.modalitytokencount.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmodality: Modality;\n```\n\n----------------------------------------\n\nTITLE: RemoteConfigOptions templateId Property Definition\nDESCRIPTION: Property definition for templateId, which specifies the ID of the template to use for Remote Config. Defaults to \"firebase\" if not provided.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.remoteconfigoptions.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntemplateId?: string;\n```\n\n----------------------------------------\n\nTITLE: GtagConfigParams Property: allow_google_signals\nDESCRIPTION: This property, when set to false, disables all advertising features with gtag.js. It is part of the GtagConfigParams interface and provides control over Google's advertising signals.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.gtagconfigparams.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'allow_google_signals'?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Adding @firebase/logger as Dependency\nDESCRIPTION: Add @firebase/logger as a dependency to @firebase/app-types to ensure it can be resolved when compiling the package in a strict yarn PnP environment.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/app-types/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- [`3d10d33bc`](https://github.com/firebase/firebase-js-sdk/commit/3d10d33bc167177fecbf86d2a6574af2e4e210f9) [#5144](https://github.com/firebase/firebase-js-sdk/pull/5144) - Add @firebase/logger as a dependency to @firebase/app-types to ensure that it can be resolved when compiling the package in a strict yarn PnP environment.\n```\n\n----------------------------------------\n\nTITLE: Emulator Feature Commit Link\nDESCRIPTION: Git commit link for adding Cloud Functions emulator feature\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/functions-types/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`0322c1bda`\n```\n\n----------------------------------------\n\nTITLE: Updating Android Manifest Path in Cordova Plugin\nDESCRIPTION: JavaScript code snippet to update the path to the Android manifest file in the cordova-universal-links-plugin.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/cordova/demo/README.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar pathToManifest = path.join(cordovaContext.opts.projectRoot, 'platforms', 'android', 'app', 'src', 'main', 'AndroidManifest.xml');\n```\n\n----------------------------------------\n\nTITLE: GenerateContentCandidate index Property Definition\nDESCRIPTION: Defines the required index property which represents the numeric index of this candidate in a response that may contain multiple candidates.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.generatecontentcandidate.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nindex: number;\n```\n\n----------------------------------------\n\nTITLE: Running the Local Development Server\nDESCRIPTION: Command to compile necessary files and start a local Firebase server to run the Auth demo on localhost.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth-compat/demo/README.md#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn run demo\n```\n\n----------------------------------------\n\nTITLE: Defining optionalProperties Property in ObjectSchema\nDESCRIPTION: Declaration of the optionalProperties property which is an array of strings representing the names of optional properties in the object schema.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.objectschema.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptionalProperties: string[];\n```\n\n----------------------------------------\n\nTITLE: Performance SDK Retry Mechanism Modification in v0.7.2\nDESCRIPTION: A patch change that modifies the retry mechanism to stop when remaining tries is less than or equal to zero, improving the robustness of retry handling.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/performance/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [`5611175`](https://github.com/firebase/firebase-js-sdk/commit/5611175975deb8d39eb1387a7ef083120f12c8b5) [#8814](https://github.com/firebase/firebase-js-sdk/pull/8814) (fixes [#8813](https://github.com/firebase/firebase-js-sdk/issues/8813)) - Modify the retry mechanism to stop when remaining tries is less than or equal to zero, improving the robustness of the retry handling.\n```\n\n----------------------------------------\n\nTITLE: Declaring Firebase Global Variable for TypeScript Integration Tests\nDESCRIPTION: A TypeScript declaration statement that allows test files to reference the global Firebase object that will be injected at test runtime. This replaces import statements from firebase_export.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/integration/firestore/README.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare var firebase;\n```\n\n----------------------------------------\n\nTITLE: Long Polling Options Property\nDESCRIPTION: Property definition for experimental long-polling configuration options.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.firestoresettings.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexperimentalLongPollingOptions?: ExperimentalLongPollingOptions;\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Firebase JS SDK\nDESCRIPTION: This snippet shows how dependencies are updated in the Firebase JS SDK release notes. It specifies the new versions of @firebase/util, @firebase/component, and @firebase/installations packages.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/analytics/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`efe2000fc`](https://github.com/firebase/firebase-js-sdk/commit/efe2000fc499e2c85c4e5e0fef6741ff3bad2eb0)]:\n  - @firebase/util@1.6.2\n  - @firebase/component@0.5.16\n  - @firebase/installations@0.5.11\n```\n\n----------------------------------------\n\nTITLE: Defining Item.item_category5 Property\nDESCRIPTION: Declaration of the optional item_category5 property for the Item interface, which can be used to specify a fifth category level for the item.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nitem_category5?: string;\n```\n\n----------------------------------------\n\nTITLE: Token Issuance Time Property Definition\nDESCRIPTION: Property definition for iat that stores the timestamp when the token was issued.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.parsedtoken.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n'iat'?: string;\n```\n\n----------------------------------------\n\nTITLE: Updating ThenableReference Properties in TypeScript\nDESCRIPTION: Added non-null parent properties to ThenableReference type definitions in version 1.0.10.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/database-types/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n113c965a34d9d7219d236f1b2cb62029e0f80fda\n```\n\n----------------------------------------\n\nTITLE: Promise with Timeout in TypeScript\nDESCRIPTION: This internal function wraps a promise with a timeout. It takes a promise and an optional timeout duration in milliseconds, returning a new promise that resolves or rejects based on the original promise or the timeout, whichever occurs first.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function promiseWithTimeout<T>(promise: Promise<T>, timeInMS?: number): Promise<T>;\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference for Version 0.5.3\nDESCRIPTION: Git commit hash and pull request reference for TypeScript 5.5.4 upgrade\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/installations-types/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`b80711925`\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 0.2.6\nDESCRIPTION: Documents version 0.2.6 changes including TypeScript upgrade and dependency updates.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/template/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.6\n\n### Patch Changes\n\n- [`b80711925`](https://github.com/firebase/firebase-js-sdk/commit/b807119252dacf46b0122344c2b6dfc503cecde1) [#8604](https://github.com/firebase/firebase-js-sdk/pull/8604) - Upgrade to TypeScript 5.5.4\n\n- Updated dependencies [[`b80711925`](https://github.com/firebase/firebase-js-sdk/commit/b807119252dacf46b0122344c2b6dfc503cecde1)]:\n  - @firebase/template-types@0.2.3\n```\n\n----------------------------------------\n\nTITLE: Updating Repository URL in package.json for Firebase JS SDK\nDESCRIPTION: Updates the repository.url field in all package.json files to NPM's preferred format.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/remote-config-types/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [`0c5150106`](https://github.com/firebase/firebase-js-sdk/commit/0c515010607bf2223b468acb94c672b1279ed1a0) [#8079](https://github.com/firebase/firebase-js-sdk/pull/8079) - Update `repository.url` field in all `package.json` files to NPM's preferred format.\n```\n\n----------------------------------------\n\nTITLE: Dependency Updates Changelog Entry\nDESCRIPTION: Changelog entry showing dependency version updates for @firebase/util, @firebase/analytics, and @firebase/component packages.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/analytics-compat/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`2d672cead`](https://github.com/firebase/firebase-js-sdk/commit/2d672cead167187cb714cd89b638c0884ba58f03)]:\n  - @firebase/util@1.5.0\n  - @firebase/analytics@0.7.6\n  - @firebase/component@0.5.11\n```\n\n----------------------------------------\n\nTITLE: Functions Custom Domain Property Signature\nDESCRIPTION: Type definition for the customDomain property that specifies the custom domain hosting Cloud Functions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.functions.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncustomDomain: string | null;\n```\n\n----------------------------------------\n\nTITLE: Defining ModalityTokenCount Interface in TypeScript\nDESCRIPTION: Defines an interface for token count per modality, used in usage metadata.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ModalityTokenCount {\n    modality: Modality;\n    tokenCount: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Issues in Markdown\nDESCRIPTION: This snippet shows how to reference a GitHub issue number in Markdown format. It's used in the changelog to link fixes to their corresponding issue reports.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/CHANGELOG.md#2025-04-14_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n(fixes [#5392](https://github.com/firebase/firebase-js-sdk/issues/5392))\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Messaging Package Reference\nDESCRIPTION: Reference to the Firebase Messaging npm package name and usage note\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/messaging/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @firebase/messaging\n```\n\n----------------------------------------\n\nTITLE: Version Change Documentation in Markdown\nDESCRIPTION: Documents version changes and dependency updates for Firebase JS SDK packages. Includes commit references, pull request numbers, and issue fixes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/installations-compat/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [`2322b6023`](https://github.com/firebase/firebase-js-sdk/commit/2322b6023c628cd9f4f4172767c17d215dd91684) [#5693](https://github.com/firebase/firebase-js-sdk/pull/5693) - Add exports field to all packages\n\n- Updated dependencies [[`2322b6023`](https://github.com/firebase/firebase-js-sdk/commit/2322b6023c628cd9f4f4172767c17d215dd91684)]:\n  - @firebase/component@0.5.8\n  - @firebase/installations@0.5.3\n  - @firebase/util@1.4.1\n\n## 0.1.2\n\n### Patch Changes\n\n- Updated dependencies [[`93795c780`](https://github.com/firebase/firebase-js-sdk/commit/93795c7801d6b28ccbbe5855fd2f3fc377b1db5f)]:\n  - @firebase/installations@0.5.2\n\n## 0.1.1\n\n### Patch Changes\n\n- Updated dependencies [[`a99943fe3`](https://github.com/firebase/firebase-js-sdk/commit/a99943fe3bd5279761aa29d138ec91272b06df39), [`b835b4cba`](https://github.com/firebase/firebase-js-sdk/commit/b835b4cbabc4b7b180ae38b908c49205ce31a422)]:\n  - @firebase/util@1.4.0\n  - @firebase/component@0.5.7\n  - @firebase/installations@0.5.1\n\n## 0.1.0\n\n### Minor Changes\n\n- [`cdada6c68`](https://github.com/firebase/firebase-js-sdk/commit/cdada6c68f9740d13dd6674bcb658e28e68253b6) [#5345](https://github.com/firebase/firebase-js-sdk/pull/5345) (fixes [#5015](https://github.com/firebase/firebase-js-sdk/issues/5015)) - Release modularized SDKs\n\n### Patch Changes\n\n- Updated dependencies [[`cdada6c68`](https://github.com/firebase/firebase-js-sdk/commit/cdada6c68f9740d13dd6674bcb658e28e68253b6)]:\n  - @firebase/installations@0.5.0\n  - @firebase/installations-types@0.4.0\n```\n\n----------------------------------------\n\nTITLE: Linking GitHub Commit to Pull Request in Markdown\nDESCRIPTION: This snippet demonstrates how to link a GitHub commit hash to its corresponding pull request number in Markdown format. It's used throughout the changelog to reference specific changes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[`08ec55d6d`](https://github.com/firebase/firebase-js-sdk/commit/08ec55d6dfcc85207fbdcdde77d6508f27998603) [#5423](https://github.com/firebase/firebase-js-sdk/pull/5423)\n```\n\n----------------------------------------\n\nTITLE: Setting Data with Priority on Disconnect in TypeScript\nDESCRIPTION: Method signature for setting data with a specified priority at a location when the client disconnects from the Firebase Realtime Database.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.ondisconnect.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsetWithPriority(value: unknown, priority: number | string | null): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Utils with CommonJS\nDESCRIPTION: Shows how to import the entire utilities package using CommonJS require() syntax. All utility functions are accessed through the imported utils object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/util/README.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst utils = require('@firebase/util');\n\n// Do stuff with any of the re-exported `utils`\n```\n\n----------------------------------------\n\nTITLE: Detecting Internet Explorer in TypeScript\nDESCRIPTION: This function checks if the current browser is Internet Explorer. It returns a boolean indicating the result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function isIE(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Creating Git Branch for Firebase JS SDK Contribution\nDESCRIPTION: Shell commands for creating and checking out a new git branch for making changes to the Firebase JS SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b my-fix-branch main\n```\n\n----------------------------------------\n\nTITLE: PersistentSingleTabManagerSettings forceOwnership Property Definition\nDESCRIPTION: Property definition for forceOwnership which controls whether to force-enable IndexedDB cache for a single client. This setting is primarily intended for Web Workers and will prevent other tabs from using IndexedDB cache.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.persistentsingletabmanagersettings.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nforceOwnership?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Specifying VideoMetadata.startOffset Property\nDESCRIPTION: Definition of the startOffset property in the VideoMetadata interface. This property stores the start time position of the video using protobuf Duration format as a string.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.videometadata.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstartOffset: string;\n```\n\n----------------------------------------\n\nTITLE: Displaying RxFire Repository Relocation Notice in Markdown\nDESCRIPTION: This Markdown snippet informs users about the relocation of the RxFire project to a new repository and provides a link to the new location.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/rxfire/README.md#2025-04-14_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# RxFire\n\nRxFire has moved to its own repository, you can find it here [firebaseextended/rxfire](https://github.com/firebaseextended/rxfire).\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies Update\nDESCRIPTION: Dependency update notice removing ES5 bundles and transitioning to native fetch implementation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/functions-compat/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [`479226bf3`](https://github.com/firebase/firebase-js-sdk/commit/479226bf3ebd99017bb12fa21440c75715658702) [#8475](https://github.com/firebase/firebase-js-sdk/pull/8475) - Remove ES5 bundles. The minimum required ES version is now ES2017.\n\n- [`479226bf3`](https://github.com/firebase/firebase-js-sdk/commit/479226bf3ebd99017bb12fa21440c75715658702) [#8475](https://github.com/firebase/firebase-js-sdk/pull/8475) - Removed dependency on undici and node-fetch in our node bundles, replacing them with the native fetch implementation.\n```\n\n----------------------------------------\n\nTITLE: Referencing Firebase Performance Package in Markdown\nDESCRIPTION: This code snippet shows how to reference the Firebase Performance package and the official Firebase package using Markdown syntax for npm package links.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/performance/README.md#2025-04-14_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n@firebase/performance\n\nfirebase\n```\n\n----------------------------------------\n\nTITLE: TransactionOptions maxAttempts Property Definition\nDESCRIPTION: Type definition for the maxAttempts property within TransactionOptions interface. Specifies the maximum number of commit attempts before transaction failure, defaulting to 5.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.transactionoptions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly maxAttempts?: number;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Firebase Project for SDK Testing\nDESCRIPTION: Commands to configure the Firebase project for SDK testing, with options for interactive or command-line setup.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Select the Firebase project via the text-based UI. This will run tools/config.js\n# and deploy from config/ to your Firebase project.\n$ yarn test:setup\n\n# Specify the Firebase project via the command-line arguments.\n$ yarn test:setup --projectId=<test_firebase_project_id>\n```\n\n----------------------------------------\n\nTITLE: InlineDataPart inlineData Property TypeScript Definition\nDESCRIPTION: Property definition for inlineData that holds the binary content as a GenerativeContentBlob. This is the main property for storing the actual content data.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.inlinedatapart.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninlineData: GenerativeContentBlob;\n```\n\n----------------------------------------\n\nTITLE: Replacing IndexedDB Methods in Firebase JS SDK\nDESCRIPTION: Replaces stopgap firebase/util IndexedDB methods with the 'idb' library and updates dependencies.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/messaging/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- [`9c5c9c36d`](https://github.com/firebase/firebase-js-sdk/commit/9c5c9c36da80b98b73cfd60ef2e2965087e9f801) [#6154](https://github.com/firebase/firebase-js-sdk/pull/6154) - Replace stopgap firebase/util IndexedDB methods with `idb` library.\n\n- Updated dependencies [[`9c5c9c36d`](https://github.com/firebase/firebase-js-sdk/commit/9c5c9c36da80b98b73cfd60ef2e2965087e9f801)]:\n  - @firebase/util@1.6.0\n  - @firebase/installations@0.5.9\n  - @firebase/component@0.5.14\n```\n\n----------------------------------------\n\nTITLE: Initializing FirebaseServerApp with App Check Token\nDESCRIPTION: Example of initializing FirebaseServerApp with an App Check token instead of invoking the getToken method. This allows using App Check enforced products in SSR environments where the App Check SDK cannot be initialized.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = FirebaseServerApp.initialize({\n  // ... other config\n  appCheckToken: 'your-app-check-token-here'\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Consent Settings Interface Extensions - JavaScript\nDESCRIPTION: Code change that adds two new consent options to the ConsentSettings interface for analytics: ad_personalization and ad_user_data.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/analytics/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninterface ConsentSettings {\n  ad_personalization: boolean;\n  ad_user_data: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GroundingAttribution Interface in TypeScript\nDESCRIPTION: This code snippet defines the GroundingAttribution interface with properties for confidence score, retrieved context, segment, and web attribution. It is marked as obsolete.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.groundingattribution.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GroundingAttribution {\n  confidenceScore?: number;\n  retrievedContext?: RetrievedContextAttribution;\n  segment: Segment;\n  web?: WebAttribution;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Named Firestore Database Instance in TypeScript (Preview API)\nDESCRIPTION: This preview function returns the existing Firestore instance associated with a FirebaseApp and a specific database ID. If no instance exists, it initializes a new instance with default settings.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getFirestore(app: FirebaseApp, databaseId: string): Firestore;\n```\n\n----------------------------------------\n\nTITLE: Cordova Popup Redirect Resolver Implementation in TypeScript\nDESCRIPTION: An implementation of the PopupRedirectResolver interface specifically designed for Cordova-based applications. This resolver handles authentication flows in the Cordova mobile app environment.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\ncordovaPopupRedirectResolver: PopupRedirectResolver\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference for Version 0.5.2\nDESCRIPTION: Git commit hash and pull request reference for package bump\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/installations-types/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`ab883d016`\n```\n\n----------------------------------------\n\nTITLE: Detecting Safari Browser in TypeScript\nDESCRIPTION: This function checks if the current browser is Safari. It returns a boolean indicating the result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function isSafari(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Cloning the Firebase JS SDK Repository\nDESCRIPTION: Commands to clone the Firebase JS SDK repository and navigate to the Auth demo directory.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/demo/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/firebase/firebase-js-sdk.git\ncd firebase-js-sdk/packages/auth/demo\n```\n\n----------------------------------------\n\nTITLE: Dependency Update Commit Hash\nDESCRIPTION: Git commit hash reference for dependency update\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/installations/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[`777f465`](https://github.com/firebase/firebase-js-sdk/commit/777f465ff37495ff933a29583769ce8a6a2b59b5)]\n```\n\n----------------------------------------\n\nTITLE: Version Control Update - GitHub References\nDESCRIPTION: Links to GitHub commits and pull requests that resolve various issues including missing index error message improvements and transaction.set() failure fixes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [`bf7cc8f69`](https://github.com/firebase/firebase-js-sdk/commit/bf7cc8f691f7a17730b071d3d9c27bd28a6e3980) [#6712](https://github.com/firebase/firebase-js-sdk/pull/6712) (fixes [#6613](https://github.com/firebase/firebase-js-sdk/issues/6613)) - Fix \"missing index\" error message to include the link to create the composite index.\n\n- [`e2a90bf67`](https://github.com/firebase/firebase-js-sdk/commit/e2a90bf678eb6fa505f8b2f627e03cff622607b5) [#6729](https://github.com/firebase/firebase-js-sdk/pull/6729) - Fix transaction.set() failure without retry on \"already-exists\" error.\n```\n\n----------------------------------------\n\nTITLE: RetrievedContextAttribution URI Property Definition\nDESCRIPTION: Defines the uri property of the RetrievedContextAttribution interface as a string type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.retrievedcontextattribution.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nuri: string;\n```\n\n----------------------------------------\n\nTITLE: SDK Modularization Commit Link\nDESCRIPTION: Git commit link for SDK modularization release\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/functions-types/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`cdada6c68`\n```\n\n----------------------------------------\n\nTITLE: Generating Firebase Devsite TOC with API Documenter\nDESCRIPTION: Command-line instruction for generating a table of contents file for Firebase Devsite. It requires specifying an input folder containing API JSON files and the host path for reference documentation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/repo-scripts/api-documenter/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napi-documenter-fire toc -i temp -p \"/docs/reference/js/v9\"\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference for Version 0.4.0\nDESCRIPTION: Git commit hash and pull request reference for SDK modularization\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/installations-types/CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`cdada6c68`\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference for Version 0.5.1\nDESCRIPTION: Git commit hash and pull request reference for repository URL update\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/installations-types/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`0c5150106`\n```\n\n----------------------------------------\n\nTITLE: Adding and Deprecating Methods in Firebase Messaging\nDESCRIPTION: Adds new methods for token management and background messages, while deprecating some existing methods. Also adds new type definitions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/CHANGELOG.md#2025-04-14_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [`29327b21`](https://github.com/firebase/firebase-js-sdk/commit/29327b2198391a9f1e545bcd1172a4b3e12a522c) [#3234](https://github.com/firebase/firebase-js-sdk/pull/3234) - Add `getToken(options:{serviceWorkerRegistration, vapidKey})`,`onBackgroundMessage`.\n  Deprecate `setBackgroundMessageHandler`, `onTokenRefresh`, `useVapidKey`, `useServiceWorker`, `getToken`.\n\n  Add Typing `MessagePayload`, `NotificationPayload`, `FcmOptions`.\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Firebase Remote Config\nDESCRIPTION: Command to execute unit tests for the Remote Config package to verify code functionality.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/remote-config/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Defining NumberSchema Class in TypeScript\nDESCRIPTION: Defines a class for number schema, extending the Schema class.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class NumberSchema extends Schema {\n    constructor(schemaParams?: SchemaParams);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Usage Warning in Markdown\nDESCRIPTION: This code snippet is a Markdown warning message that informs users that the package is not intended for direct usage and should only be used through the official firebase package.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/app-check-interop-types/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @firebase/app-check-interop-types\n\n**This package is not intended for direct usage, and should only be used via the officially supported [firebase](https://www.npmjs.com/package/firebase) package.**\n```\n\n----------------------------------------\n\nTITLE: TypeScript Upgrade Commit Reference\nDESCRIPTION: Git commit hash for TypeScript version upgrade to 5.5.4\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/installations/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[`b80711925`](https://github.com/firebase/firebase-js-sdk/commit/b807119252dacf46b0122344c2b6dfc503cecde1)]\n```\n\n----------------------------------------\n\nTITLE: Service Worker Status Check Enhancement in v0.5.17\nDESCRIPTION: A patch that expands the check in the getServiceWorkerStatus function to account for cases where navigator has a serviceWorker key with a falsy value, improving browser compatibility.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/performance/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [`3f1354f1f`](https://github.com/firebase/firebase-js-sdk/commit/3f1354f1f120f1fe4bcc11122a6e0b12fe3c6ac4) [#6723](https://github.com/firebase/firebase-js-sdk/pull/6723) - Expand check in `getServiceWorkerStatus` to account for a `navigator` that has a key of `serviceWorker` with a falsy value\n```\n\n----------------------------------------\n\nTITLE: Service Worker Registration Property Definition\nDESCRIPTION: TypeScript property definition for the optional service worker registration used in push messaging. Required if a firebase-messaging-sw.js file is not present at the root location.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.gettokenoptions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nserviceWorkerRegistration?: ServiceWorkerRegistration;\n```\n\n----------------------------------------\n\nTITLE: Date_2 Month Property Definition\nDESCRIPTION: Property definition for the month field in the Date_2 interface as a number type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.date_2.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmonth: number;\n```\n\n----------------------------------------\n\nTITLE: Comparing Bytes Objects in TypeScript\nDESCRIPTION: Method to check if the current Bytes object is equal to another Bytes object. Returns a boolean indicating equality.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.bytes.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nisEqual(other: Bytes): boolean;\n```\n\n----------------------------------------\n\nTITLE: Referencing the Firebase NPM Package in Markdown\nDESCRIPTION: Shows how to reference the official firebase npm package which should be used instead of directly using this compatibility layer.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/analytics-compat/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[firebase](https://www.npmjs.com/package/firebase)\n```\n\n----------------------------------------\n\nTITLE: FileDataPart.fileData Property Signature\nDESCRIPTION: Signature for the fileData property which must contain a FileData object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.filedatapart.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfileData: FileData;\n```\n\n----------------------------------------\n\nTITLE: Defining Firebase Auth Error Codes in TypeScript\nDESCRIPTION: Readonly type definitions for Firebase Authentication error codes used for error handling and identification of specific auth failure scenarios.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/auth.api.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly UNSUPPORTED_TENANT_OPERATION: \"auth/unsupported-tenant-operation\";\nreadonly UNVERIFIED_EMAIL: \"auth/unverified-email\";\nreadonly USER_CANCELLED: \"auth/user-cancelled\";\nreadonly USER_DELETED: \"auth/user-not-found\";\nreadonly USER_DISABLED: \"auth/user-disabled\";\nreadonly USER_MISMATCH: \"auth/user-mismatch\";\nreadonly USER_SIGNED_OUT: \"auth/user-signed-out\";\nreadonly WEAK_PASSWORD: \"auth/weak-password\";\nreadonly WEB_STORAGE_UNSUPPORTED: \"auth/web-storage-unsupported\";\nreadonly ALREADY_INITIALIZED: \"auth/already-initialized\";\nreadonly RECAPTCHA_NOT_ENABLED: \"auth/recaptcha-not-enabled\";\nreadonly MISSING_RECAPTCHA_TOKEN: \"auth/missing-recaptcha-token\";\nreadonly INVALID_RECAPTCHA_TOKEN: \"auth/invalid-recaptcha-token\";\nreadonly INVALID_RECAPTCHA_ACTION: \"auth/invalid-recaptcha-action\";\nreadonly MISSING_CLIENT_TYPE: \"auth/missing-client-type\";\nreadonly MISSING_RECAPTCHA_VERSION: \"auth/missing-recaptcha-version\";\nreadonly INVALID_RECAPTCHA_VERSION: \"auth/invalid-recaptcha-version\";\nreadonly INVALID_REQ_TYPE: \"auth/invalid-req-type\";\nreadonly INVALID_HOSTING_LINK_DOMAIN: \"auth/invalid-hosting-link-domain\";\n```\n\n----------------------------------------\n\nTITLE: NotificationPayload.image Property Definition\nDESCRIPTION: Defines the optional 'image' property of the NotificationPayload interface, which specifies the URL of an image to be displayed in the notification.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.notificationpayload.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimage?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Item.creative_name Property\nDESCRIPTION: Declaration of the optional creative_name property for the Item interface, which can be used to specify the name of a creative used in a promotional spot.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncreative_name?: string;\n```\n\n----------------------------------------\n\nTITLE: Detecting Mobile Cordova Environment in TypeScript\nDESCRIPTION: This function checks if the code is running in a Mobile Cordova environment. It returns a boolean indicating the result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function isMobileCordova(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference for Version 0.4.1\nDESCRIPTION: Git commit hash and pull request reference for TypeScript upgrade\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/installations-types/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`4af28c1a4`\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Firebase JS SDK\nDESCRIPTION: Updates dependencies for @firebase/performance and @firebase/firestore packages.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/CHANGELOG.md#2025-04-14_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n- Updated dependencies [[`67501b980`](https://github.com/firebase/firebase-js-sdk/commit/67501b9806c7014738080bc0be945b2c0748c17e), [`960093d5b`](https://github.com/firebase/firebase-js-sdk/commit/960093d5b3ada866709c1a51b4ca175c3a01f1f3), [`b97c7e758`](https://github.com/firebase/firebase-js-sdk/commit/b97c7e758b1e2a370cb72a7aac14c17a54531a36)]:\n  - @firebase/performance@0.4.0\n  - @firebase/firestore@1.16.5\n```\n\n----------------------------------------\n\nTITLE: Declaring totalBytes Property Type\nDESCRIPTION: Property definition for storing the total number of bytes in the bundle being loaded.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.loadbundletaskprogress.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntotalBytes: number;\n```\n\n----------------------------------------\n\nTITLE: Enabling persistence with experimental force owning tab in JavaScript\nDESCRIPTION: Demonstrates how to enable persistence with the experimentalForceOwningTab setting, allowing persistence in environments without LocalStorage, such as Web Workers.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase.firestore().enablePersistence({experimentalForceOwningTab: true});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Update Commit Link\nDESCRIPTION: Git commit link for TypeScript version update to 4.7.4\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/functions-types/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`1625f7a95`\n```\n\n----------------------------------------\n\nTITLE: Package Name Reference in Markdown\nDESCRIPTION: Reference to the package name and usage instructions indicating that direct usage is not recommended.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/app-check-compat/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @firebase/app-check-compat\n```\n\n----------------------------------------\n\nTITLE: Creating Array Schema in TypeScript\nDESCRIPTION: Static method to create an ArraySchema. It takes array parameters including the items schema and returns an ArraySchema instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.schema.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic array(arrayParams: SchemaParams & {\n        items: Schema;\n    }): ArraySchema;\n```\n\n----------------------------------------\n\nTITLE: Fixing User Authentication in Test Environment\nDESCRIPTION: Bug fix that prevents the deletion of the uid property from the user authentication object in the initializeTestApp() function, maintaining proper authentication context for tests.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/rules-unit-testing/CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- [`cb28261e0`](https://github.com/firebase/firebase-js-sdk/commit/cb28261e0e3ef2f6a45badeb883888a6c0bdbed2) [#3923](https://github.com/firebase/firebase-js-sdk/pull/3923) (fixes [#3920](https://github.com/firebase/firebase-js-sdk/issues/3920)) - Do not delete uid property from user auth object in initializeTestApp()\n```\n\n----------------------------------------\n\nTITLE: Firebase Logout and Login for Troubleshooting\nDESCRIPTION: Commands to logout, re-login and launch the demo in case of project access issues.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/demo/README.md#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfirebase logout && firebase login && yarn demo\n```\n\n----------------------------------------\n\nTITLE: Defining Firebase Messaging Package in Markdown\nDESCRIPTION: This snippet provides information about the @firebase/messaging-interop-types package, emphasizing that it should not be used directly but accessed through the official firebase package.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/messaging-interop-types/README.md#2025-04-14_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @firebase/messaging-interop-types\n\n**This package is not intended for direct usage, and should only be used via the officially\nsupported [firebase](https://www.npmjs.com/package/firebase) package.**\n```\n\n----------------------------------------\n\nTITLE: Defining FACTOR_ID Property in TotpMultiFactorGenerator\nDESCRIPTION: Static property defining the identifier for the TOTP second factor as 'totp'.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.totpmultifactorgenerator.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic FACTOR_ID: 'totp';\n```\n\n----------------------------------------\n\nTITLE: GitHub Commit References\nDESCRIPTION: Links to specific commit changes in the Firebase JS SDK repository that impacted the auth module.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth-compat/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[`f002ef36a`](https://github.com/firebase/firebase-js-sdk/commit/f002ef36a6b427fd526696f9cd6077a217ccc6ef), [`68927ced1`](https://github.com/firebase/firebase-js-sdk/commit/68927ced1159d9b79407c7823d7f48d30ccb591e), [`3533b32b1`](https://github.com/firebase/firebase-js-sdk/commit/3533b32b1be6a9800b1b58a6a2b08f50fae18eeb)]\n```\n\n----------------------------------------\n\nTITLE: Defining @type Property in ErrorDetails Interface\nDESCRIPTION: Property definition for the @type field in the ErrorDetails interface. This is an optional string property that specifies the type of error.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.errordetails.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n'@type'?: string;\n```\n\n----------------------------------------\n\nTITLE: Updating Repository URL in Package.json for Firebase Performance Types\nDESCRIPTION: This snippet shows a commit that updates the repository.url field in the package.json file to NPM's preferred format for the @firebase/performance-types package.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/performance-types/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [`0c5150106`](https://github.com/firebase/firebase-js-sdk/commit/0c515010607bf2223b468acb94c672b1279ed1a0) [#8079](https://github.com/firebase/firebase-js-sdk/pull/8079) - Update `repository.url` field in all `package.json` files to NPM's preferred format.\n```\n\n----------------------------------------\n\nTITLE: Implementing Example Property\nDESCRIPTION: Optional property of unknown type for providing usage examples.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.schemashared.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexample?: unknown;\n```\n\n----------------------------------------\n\nTITLE: CustomErrorData statusText Property Definition\nDESCRIPTION: Property definition for optional HTTP status text string from the error response.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.customerrordata.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstatusText?: string;\n```\n\n----------------------------------------\n\nTITLE: Loading Firebase Modules as Script Tags in HTML\nDESCRIPTION: HTML snippet showing how to load Firebase packages as script modules in browsers that support native ES modules.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firebase/README.md#2025-04-14_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- use script module by specifying type=\"module\" -->\n<script type=\"module\">\n    import { initializeApp } from 'https://www.gstatic.com/firebasejs/${FIREBASE_VERSION}/firebase-app.js';\n    import { getFirestore, collection, getDocs } from 'https://www.gstatic.com/firebasejs/${FIREBASE_VERSION}/firebase-firestore-lite.js';\n    // Follow this pattern to import other Firebase services\n    // import {} from \"https://www.gstatic.com/firebasejs/${FIREBASE_VERSION}/firebase-analytics.js\";\n    // import {} from \"https://www.gstatic.com/firebasejs/${FIREBASE_VERSION}/firebase-app-check.js\";\n    // import {} from \"https://www.gstatic.com/firebasejs/${FIREBASE_VERSION}/firebase-auth.js\";\n    // import {} from \"https://www.gstatic.com/firebasejs/${FIREBASE_VERSION}/firebase-functions.js\";\n    // import {} from \"https://www.gstatic.com/firebasejs/${FIREBASE_VERSION}/firebase-firestore.js\";\n    // import {} from \"https://www.gstatic.com/firebasejs/${FIREBASE_VERSION}/firebase-storage.js\";\n    // import {} from \"https://www.gstatic.com/firebasejs/${FIREBASE_VERSION}/firebase-performance.js\";\n    // import {} from \"https://www.gstatic.com/firebasejs/${FIREBASE_VERSION}/firebase-remote-config.js\";\n    // import {} from \"https://www.gstatic.com/firebasejs/${FIREBASE_VERSION}/firebase-messaging.js\";\n    // import {} from \"https://www.gstatic.com/firebasejs/${FIREBASE_VERSION}/firebase-database.js\";\n    \n    // TODO: Replace the following with your app's Firebase project configuration\n    const firebaseConfig = {\n    //...\n    };\n\n    const app = initializeApp(firebaseConfig);\n    const db = getFirestore(app);\n\n    // Get a list of cities from your database\n    async function getCities(db) {\n    const citiesCol = collection(db, 'cities');\n    const citySnapshot = await getDocs(citiesCol);\n    const cityList = citySnapshot.docs.map(doc => doc.data());\n    return cityList;\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing toJSON Method for Firestore Class in TypeScript\nDESCRIPTION: This snippet defines the toJSON method for the Firestore class. It returns a JSON-serializable representation of the Firestore instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.firestore.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntoJSON(): object;\n```\n\n----------------------------------------\n\nTITLE: Next Function Type Definition in TypeScript\nDESCRIPTION: This type defines a function that takes a value of type T as input. It's used in the context of observables and subscriptions.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type NextFn<T> = (value: T) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining HarmSeverity Enum in TypeScript\nDESCRIPTION: Defines an enum for different harm severity levels used in content moderation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport enum HarmSeverity {\n    HARM_SEVERITY_HIGH = \"HARM_SEVERITY_HIGH\",\n    HARM_SEVERITY_LOW = \"HARM_SEVERITY_LOW\",\n    HARM_SEVERITY_MEDIUM = \"HARM_SEVERITY_MEDIUM\",\n    HARM_SEVERITY_NEGLIGIBLE = \"HARM_SEVERITY_NEGLIGIBLE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Change Log Entry - Version Update\nDESCRIPTION: Changelog entry documenting version update with commit hash and pull request reference\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/rules-unit-testing/CHANGELOG.md#2025-04-14_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n[`b9087b90f`](https://github.com/firebase/firebase-js-sdk/commit/b9087b90ff99b85acab6928459783c5683620737) [#3876](https://github.com/firebase/firebase-js-sdk/pull/3876) - Add stronger types to the 'options.auth' option for initializeTestApp\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Firebase JS SDK\nDESCRIPTION: Shell command for committing changes to the Firebase JS SDK repository with the -a flag to automatically add and remove edited files.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -a\n```\n\n----------------------------------------\n\nTITLE: Exporting Firestore Spec Tests to iOS SDK\nDESCRIPTION: This bash command exports the Firestore Spec Tests to the iOS SDK. It assumes the firebase-js-sdk repository is cloned into ~/firebase-js-sdk and the iOS SDK is cloned into ~/firebase-ios-sdk.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/test/unit/specs/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/firebase-js-sdk/packages/firestore/test/unit && \n./generate_spec_json.sh ~/firebase-ios-sdk/Firestore/Example/Tests/SpecTests/json\n```\n\n----------------------------------------\n\nTITLE: Fourth Package Change URL Reference\nDESCRIPTION: Git commit URL for TypeScript version update to 4.7.4\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/template-types/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`1625f7a95`\n```\n\n----------------------------------------\n\nTITLE: Building Auth Package Dependencies\nDESCRIPTION: Command to build all the dependencies required for the Auth package before deployment.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth-compat/demo/README.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:deps\n```\n\n----------------------------------------\n\nTITLE: Declaring bytesLoaded Property Type\nDESCRIPTION: Property definition for tracking how many bytes have been loaded during bundle loading process.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.loadbundletaskprogress.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbytesLoaded: number;\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova CLI and Checking Requirements\nDESCRIPTION: Commands to install the Cordova CLI globally and check system requirements for Cordova development.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/cordova/demo/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g cordova\ncordova requirements\n```\n\n----------------------------------------\n\nTITLE: Defining Firebase Storage Types Package in Markdown\nDESCRIPTION: This snippet provides information about the @firebase/storage-types package, emphasizing that it should not be used directly but through the official firebase package.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/storage-types/README.md#2025-04-14_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @firebase/storage-types\n\n**This package is not intended for direct usage, and should only be used via the officially supported [firebase](https://www.npmjs.com/package/firebase) package.**\n```\n\n----------------------------------------\n\nTITLE: ES Version Update Reference\nDESCRIPTION: Git commit hash showing removal of ES5 bundles and minimum ES version requirement\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/installations/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[[`479226bf3`](https://github.com/firebase/firebase-js-sdk/commit/479226bf3ebd99017bb12fa21440c75715658702)]\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Metadata for Firebase Realtime Database Documentation\nDESCRIPTION: This YAML snippet defines metadata for the Firebase Realtime Database JavaScript SDK reference documentation. It specifies the project and book configurations, as well as the page type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nProject: /docs/reference/js/_project.yaml\nBook: /docs/reference/_book.yaml\npage_type: reference\n```\n\n----------------------------------------\n\nTITLE: Third Package Change URL Reference\nDESCRIPTION: Git commit URL for package.json repository URL update\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/template-types/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`0c5150106`\n```\n\n----------------------------------------\n\nTITLE: Upgrading TypeScript Version in Firebase Performance Types\nDESCRIPTION: This snippet shows a commit that updates the TypeScript version to 4.7.4 for the @firebase/performance-types package.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/performance-types/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [`1625f7a95`](https://github.com/firebase/firebase-js-sdk/commit/1625f7a95cc3ffb666845db0a8044329be74b5be) [#6799](https://github.com/firebase/firebase-js-sdk/pull/6799) - Update TypeScript version to 4.7.4.\n```\n\n----------------------------------------\n\nTITLE: Defining Part Type in TypeScript\nDESCRIPTION: Defines a union type for different parts used in content generation, including text, inline data, function calls, and file data.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport type Part = TextPart | InlineDataPart | FunctionCallPart | FunctionResponsePart | FileDataPart;\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated Item.id Property\nDESCRIPTION: Declaration of the deprecated id property for the Item interface. This property is marked as obsolete with a recommendation to use item_id instead.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nid?: string;\n```\n\n----------------------------------------\n\nTITLE: ImagenGCSImage.mimeType Property Definition\nDESCRIPTION: Property definition for mimeType which specifies the MIME type of the image. It can be either \"image/png\" or \"image/jpeg\" and can be configured through ImagenGenerationConfig.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.imagengcsimage.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmimeType: string;\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Firebase JS SDK Fork\nDESCRIPTION: Shell command for pushing local branch changes to a GitHub fork of the Firebase JS SDK repository.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/CONTRIBUTING.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin my-fix-branch\n```\n\n----------------------------------------\n\nTITLE: Adding Type Declarations to Exports Field\nDESCRIPTION: This code snippet shows a patch that adds type declarations to the exports field in the Firebase JS SDK. It also updates related dependencies.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/analytics/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- [`2cd1cc76f`](https://github.com/firebase/firebase-js-sdk/commit/2cd1cc76f2a308135cd60f424fe09084a34b5cb5) [#6307](https://github.com/firebase/firebase-js-sdk/pull/6307) (fixes [#6300](https://github.com/firebase/firebase-js-sdk/issues/6300)) - fix: add type declarations to exports field\n\n- Updated dependencies [[`2cd1cc76f`](https://github.com/firebase/firebase-js-sdk/commit/2cd1cc76f2a308135cd60f424fe09084a34b5cb5)]:\n  - @firebase/component@0.5.15\n  - @firebase/installations@0.5.10\n  - @firebase/logger@0.3.3\n  - @firebase/util@1.6.1\n```\n\n----------------------------------------\n\nTITLE: Using custom data converters with Firestore in JavaScript\nDESCRIPTION: Demonstrates how to use withConverter() to supply a custom data converter for storing and retrieving custom types in Firestore.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst customConverter = {\n  toFirestore(data) { /* ... */ },\n  fromFirestore(snapshot, options) { /* ... */ }\n};\n\nconst collectionRef = firebase.firestore().collection('items').withConverter(customConverter);\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 0.2.5\nDESCRIPTION: Documents version 0.2.5 changes regarding ES5 bundle removal and minimum ES version requirement.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/template/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.5\n\n### Patch Changes\n\n- [`479226bf3`](https://github.com/firebase/firebase-js-sdk/commit/479226bf3ebd99017bb12fa21440c75715658702) [#8475](https://github.com/firebase/firebase-js-sdk/pull/8475) - Remove ES5 bundles. The minimum required ES version is now ES2017.\n```\n\n----------------------------------------\n\nTITLE: Referencing the Firebase Package in Markdown\nDESCRIPTION: Shows the recommended way to use Firebase Firestore types by referencing the official firebase npm package instead of using this package directly.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore-types/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[firebase](https://www.npmjs.com/package/firebase)\n```\n\n----------------------------------------\n\nTITLE: Converting Bytes to Uint8Array in TypeScript\nDESCRIPTION: Method to convert the Bytes object back to a Uint8Array. This creates a new Uint8Array containing the underlying bytes of the Bytes object.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.bytes.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntoUint8Array(): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Building JavaScript Dependencies and Bundle\nDESCRIPTION: Commands to build the dependencies and create the JavaScript bundle for the Cordova app.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/cordova/demo/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:deps\nnpm run build:js\n```\n\n----------------------------------------\n\nTITLE: Defining Item.item_brand Property\nDESCRIPTION: Declaration of the optional item_brand property for the Item interface, which can be used to specify the brand of the item.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nitem_brand?: string;\n```\n\n----------------------------------------\n\nTITLE: Second Package Change URL Reference\nDESCRIPTION: Git commit URL for package staging fix\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/template-types/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`ab883d016`\n```\n\n----------------------------------------\n\nTITLE: Running Firebase Auth Demo with Auth Emulator\nDESCRIPTION: Command to run the Firebase Auth demo application locally with the Auth Emulator for testing with mocked endpoints.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/demo/README.md#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn run demo:emulator\n```\n\n----------------------------------------\n\nTITLE: CountTokensRequest Tools Property Definition\nDESCRIPTION: Optional property definition for an array of Tool configurations.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.counttokensrequest.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntools?: Tool[];\n```\n\n----------------------------------------\n\nTITLE: Defining ID Change Callback Function Type in TypeScript\nDESCRIPTION: Defines the type for a user-defined callback function that gets called when Installations ID changes. This type is used for the callback parameter in the onIdChange function.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/installations.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type IdChangeCallbackFn = (installationId: string) => void;\n```\n\n----------------------------------------\n\nTITLE: API Documentation for Firebase Util Package in TypeScript\nDESCRIPTION: Complete API documentation for @firebase/util package generated by API Extractor. Includes utility functions for cookies, assertions, base64 encoding/decoding, error handling, and various helper functions used across Firebase JavaScript SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-missing-release-tag) \"areCookiesEnabled\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport function areCookiesEnabled(): boolean;\n\n// Warning: (ae-missing-release-tag) \"assert\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const assert: (assertion: unknown, message: string) => void;\n\n// Warning: (ae-missing-release-tag) \"assertionError\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const assertionError: (message: string) => Error;\n\n// Warning: (ae-missing-release-tag) \"async\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport function async(fn: Function, onError?: ErrorFn): Function;\n\n// Warning: (ae-forgotten-export) The symbol \"Base64\" needs to be exported by the entry point index.d.ts\n// Warning: (ae-missing-release-tag) \"base64\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport const base64: Base64;\n\n// Warning: (ae-missing-release-tag) \"base64Decode\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const base64Decode: (str: string) => string | null;\n\n// Warning: (ae-missing-release-tag) \"base64Encode\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const base64Encode: (str: string) => string;\n\n// Warning: (ae-missing-release-tag) \"base64urlEncodeWithoutPadding\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const base64urlEncodeWithoutPadding: (str: string) => string;\n\n// Warning: (ae-missing-release-tag) \"calculateBackoffMillis\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport function calculateBackoffMillis(backoffCount: number, intervalMillis?: number, backoffFactor?: number): number;\n\n// Warning: (ae-missing-release-tag) \"Compat\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport interface Compat<T> {\n    // (undocumented)\n    _delegate: T;\n}\n\n// Warning: (ae-missing-release-tag) \"CompleteFn\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport type CompleteFn = () => void;\n\n// Warning: (ae-missing-release-tag) \"CONSTANTS\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const CONSTANTS: {\n    NODE_CLIENT: boolean;\n    NODE_ADMIN: boolean;\n    SDK_VERSION: string;\n};\n\n// Warning: (ae-missing-release-tag) \"contains\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport function contains<T extends object>(obj: T, key: string): boolean;\n\n// Warning: (ae-missing-release-tag) \"createMockUserToken\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport function createMockUserToken(token: EmulatorMockTokenOptions, projectId?: string): string;\n\n// Warning: (ae-missing-release-tag) \"createSubscribe\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport function createSubscribe<T>(executor: Executor<T>, onNoObservers?: Executor<T>): Subscribe<T>;\n\n// Warning: (ae-forgotten-export) The symbol \"DecodedToken\" needs to be exported by the entry point index.d.ts\n// Warning: (ae-missing-release-tag) \"decode\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport const decode: (token: string) => DecodedToken;\n\n// Warning: (ae-missing-release-tag) \"DecodeBase64StringError\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport class DecodeBase64StringError extends Error {\n    // (undocumented)\n    readonly name = \"DecodeBase64StringError\";\n}\n\n// Warning: (ae-missing-release-tag) \"deepCopy\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport function deepCopy<T>(value: T): T;\n\n// Warning: (ae-missing-release-tag) \"deepEqual\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport function deepEqual(a: object, b: object): boolean;\n\n// Warning: (ae-missing-release-tag) \"deepExtend\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport function deepExtend(target: unknown, source: unknown): unknown;\n\n// Warning: (ae-missing-release-tag) \"Deferred\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport class Deferred<R> {\n    constructor();\n    // (undocumented)\n    promise: Promise<R>;\n    // (undocumented)\n    reject: (value?: unknown) => void;\n    // (undocumented)\n    resolve: (value?: unknown) => void;\n    wrapCallback(callback?: (error?: unknown, value?: unknown) => void): (error: unknown, value?: unknown) => void;\n}\n\n// Warning: (ae-forgotten-export) The symbol \"FirebaseIdToken\" needs to be exported by the entry point index.d.ts\n// Warning: (ae-missing-release-tag) \"EmulatorMockTokenOptions\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport type EmulatorMockTokenOptions = ({\n    user_id: string;\n} | {\n    sub: string;\n}) & Partial<FirebaseIdToken>;\n\n// Warning: (ae-missing-release-tag) \"ErrorData\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport interface ErrorData {\n    // (undocumented)\n    [key: string]: unknown;\n}\n\n// Warning: (ae-missing-release-tag) \"ErrorFactory\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport class ErrorFactory<ErrorCode extends string, ErrorParams extends {\n    readonly [K in ErrorCode]?: ErrorData;\n} = {}> {\n    constructor(service: string, serviceName: string, errors: ErrorMap<ErrorCode>);\n    // (undocumented)\n    create<K extends ErrorCode>(code: K, ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []): FirebaseError;\n    }\n\n// Warning: (ae-missing-release-tag) \"ErrorFn\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport type ErrorFn = (error: Error) => void;\n\n// Warning: (ae-missing-release-tag) \"ErrorMap\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport type ErrorMap<ErrorCode extends string> = {\n    readonly [K in ErrorCode]: string;\n};\n\n// Warning: (ae-missing-release-tag) \"errorPrefix\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport function errorPrefix(fnName: string, argName: string): string;\n\n// Warning: (ae-missing-release-tag) \"Executor\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport type Executor<T> = (observer: Observer<T>) => void;\n\n// @public\nexport type ExperimentalKey = 'authTokenSyncURL' | 'authIdTokenMaxAge';\n\n// Warning: (ae-missing-release-tag) \"extractQuerystring\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport function extractQuerystring(url: string): string;\n\n// @public\nexport interface FirebaseDefaults {\n    // (undocumented)\n    [key: string]: unknown;\n    // (undocumented)\n    _authIdTokenMaxAge?: number;\n    // (undocumented)\n    _authTokenSyncURL?: string;\n    // (undocumented)\n    config?: Record<string, string>;\n    // (undocumented)\n    emulatorHosts?: Record<string, string>;\n    forceEnvironment?: 'browser' | 'node';\n}\n\n// Warning: (ae-missing-release-tag) \"FirebaseError\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public (undocumented)\nexport class FirebaseError extends Error {\n    constructor(\n    code: string, message: string,\n    customData?: Record<string, unknown> | undefined);\n    readonly code: string;\n    customData?: Record<string, unknown> | undefined;\n    readonly name: string;\n}\n\n// Warning: (ae-missing-release-tag) \"FirebaseSignInProvider\" is exported by the package, but it is missing a release tag (@alpha, @beta, @public, or @internal)\n//\n// @public\nexport type FirebaseSignInProvider = 'custom' | 'email' | 'password' | 'phone' | 'anonymous' | 'google.com' | 'facebook.com' | 'github.com' | 'twitter.com' | 'microsoft.com' | 'apple.com';\n\n// @public\nexport const getDefaultAppConfig: () => Record<string, string> | undefined;\n\n// @public\nexport const getDefaultEmulatorHost: (productName: string) => string | undefined;\n\n// @public\nexport const getDefaultEmulatorHostnameAndPort: (productName: string) => [hostname: string, port: number] | undefined;\n\n// @public\nexport const getDefaults: () => FirebaseDefaults | undefined;\n\n// @public\nexport const getExperimentalSetting: <T extends ExperimentalKey>(name: T) => FirebaseDefaults[`_${T}`];\n\n// @public\nexport function getGlobal(): typeof globalThis;\n```\n\n----------------------------------------\n\nTITLE: Opening iOS Project in Xcode\nDESCRIPTION: Commands to build the iOS app and open the Xcode project for further development or debugging.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/cordova/demo/README.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncordova build ios\nopen ./platforms/ios/HelloWorld.xcworkspace/\n```\n\n----------------------------------------\n\nTITLE: Documentation Generation Comment Block\nDESCRIPTION: Comment block indicating that the file is automatically generated by the JS SDK team and warning against manual edits. Includes reference to the source repository.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% comment %}\nDO NOT EDIT THIS FILE!\nThis is generated by the JS SDK team, and any local changes will be\noverwritten. Changes should be made in the source code at\nhttps://github.com/firebase/firebase-js-sdk\n{% endcomment %}\n```\n\n----------------------------------------\n\nTITLE: Building and Emulating iOS App\nDESCRIPTION: Commands to build the Cordova app for iOS and run it on an emulator.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/cordova/demo/README.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncordova build ios\ncordova emulate ios\n```\n\n----------------------------------------\n\nTITLE: Initializing FirebaseServerApp with App Check Token\nDESCRIPTION: Allows FirebaseServerApp to be initialized with an App Check token instead of invoking the App Check getToken method, enabling use of App Check enforced products in SSR environments.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/storage/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example usage (not actual implementation)\nconst app = FirebaseServerApp.initialize({\n  // ... other config\n  appCheckToken: 'your-app-check-token-here'\n});\n```\n\n----------------------------------------\n\nTITLE: Defining fcmOptions Property Type\nDESCRIPTION: Type definition for FCM-specific options that configure web push features.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.messagepayload.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfcmOptions?: FcmOptions;\n```\n\n----------------------------------------\n\nTITLE: Declaring totalBytes Property\nDESCRIPTION: Property definition for storing the total size of the file being uploaded in bytes.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.uploadtasksnapshot.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntotalBytes: number;\n```\n\n----------------------------------------\n\nTITLE: Detecting Node.js Environment in TypeScript\nDESCRIPTION: This function determines if the code is running in a Node.js environment. It returns a boolean indicating the result.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function isNode(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated Item.name Property\nDESCRIPTION: Declaration of the deprecated name property for the Item interface. This property is marked as obsolete with a recommendation to use item_name instead.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nname?: string;\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase CLI and Firestore Emulator for Testing\nDESCRIPTION: Commands for installing the Firebase CLI globally and setting up the Firestore emulator for local testing of the Firestore component.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g firebase-tools\n```\n\nLANGUAGE: bash\nCODE:\n```\nfirebase setup:emulators:firestore\n```\n\nLANGUAGE: bash\nCODE:\n```\nfirebase emulators:start --only firestore\n```\n\n----------------------------------------\n\nTITLE: Evaluating JSON String in TypeScript\nDESCRIPTION: This function evaluates a JSON string and returns the resulting object. It takes a JSON string as input and returns the parsed object of unknown type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonEval(str: string): unknown;\n```\n\n----------------------------------------\n\nTITLE: Citation endIndex Property Definition\nDESCRIPTION: Property definition for the optional endIndex property of a Citation, which specifies the ending position of cited text.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.citation.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nendIndex?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining MultiFactorAssertion Interface in TypeScript\nDESCRIPTION: Interface declaration for MultiFactorAssertion that serves as the base class for second factor authentication. Used for enrolling new second factors or signing in with existing second factors.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.multifactorassertion.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MultiFactorAssertion \n```\n\n----------------------------------------\n\nTITLE: Defining SettingsOptions Interface in TypeScript\nDESCRIPTION: Interface definition for Firebase Analytics settings that allows customization of dataLayer and gtag function names.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.settingsoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SettingsOptions \n```\n\n----------------------------------------\n\nTITLE: Defining PersistentMultipleTabManager Interface in TypeScript\nDESCRIPTION: This code snippet defines the PersistentMultipleTabManager interface in TypeScript. It specifies a tab manager that supports multiple tabs and synchronizes operations across them using the Firebase SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.persistentmultipletabmanager.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface PersistentMultipleTabManager \n```\n\n----------------------------------------\n\nTITLE: Package Updates and TypeScript Upgrade\nDESCRIPTION: Upgrade of TypeScript to version 4.7.4 along with corresponding package dependency updates.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/database-compat/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n@firebase/component@0.5.21\n@firebase/database@0.13.10\n@firebase/database-types@0.9.17\n@firebase/logger@0.3.4\n@firebase/util@1.7.3\n```\n\n----------------------------------------\n\nTITLE: Static FACTOR_ID Property Definition\nDESCRIPTION: Definition of the static FACTOR_ID property that identifies the phone second factor with the value 'phone'.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.phonemultifactorgenerator.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic FACTOR_ID: string;\n```\n\n----------------------------------------\n\nTITLE: ActionCodeURL Property Signature - Tenant ID\nDESCRIPTION: Property definition for accessing the tenant ID from the email action link. Returns null if the action is from the parent project.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.actioncodeurl.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly tenantId: string | null;\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for Firebase JS SDK\nDESCRIPTION: Commands to generate reference documentation and table of contents for the Firebase JS SDK. Run these in the root directory to create docs-devsite/ files that can be committed to resolve Doc Change Check failures.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/CONTRIBUTING.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn docgen:all\n```\n\n----------------------------------------\n\nTITLE: YAML Project Configuration\nDESCRIPTION: YAML configuration block defining project metadata and book reference for documentation structure.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nProject: /docs/reference/js/_project.yaml\nBook: /docs/reference/_book.yaml\npage_type: reference\n```\n\n----------------------------------------\n\nTITLE: isNewUser Property Definition in AdditionalUserInfo\nDESCRIPTION: Defines the isNewUser property which indicates whether the user is new (created via sign-up) or existing (authenticated using sign-in).\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.additionaluserinfo.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly isNewUser: boolean;\n```\n\n----------------------------------------\n\nTITLE: GtagConfigParams Property: send_page_view\nDESCRIPTION: This property determines whether a page view should be sent automatically upon initialization of analytics. It defaults to true if not specified. It is part of the GtagConfigParams interface and controls automatic page view tracking.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.gtagconfigparams.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n'send_page_view'?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference for Version 0.5.0\nDESCRIPTION: Git commit hash and pull request reference for TypeScript 4.7.4 update\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/installations-types/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`1625f7a95`\n```\n\n----------------------------------------\n\nTITLE: Configuring Firestore to ignore undefined properties in JavaScript\nDESCRIPTION: Shows how to configure Firestore settings to ignore undefined properties inside objects rather than rejecting the API call.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/CHANGELOG.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nFirebaseFirestore.settings({ ignoreUndefinedProperties: true });\n```\n\n----------------------------------------\n\nTITLE: Defining ImagenGCSImage Interface in TypeScript\nDESCRIPTION: Defines an interface for Google Cloud Storage (GCS) images used in image generation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ImagenGCSImage {\n    gcsURI: string;\n    mimeType: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Changeset for Firebase JS SDK\nDESCRIPTION: Shell command for generating a changeset to track version changes in the Firebase JS SDK repository.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/CONTRIBUTING.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn changeset\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Version history entries documenting changes to the @firebase/api-documenter package, including improvements to function documentation, sorting options, and DevSite compatibility updates.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/repo-scripts/api-documenter/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @firebase/api-documenter\n## 0.4.0\n### Minor Changes\n\n- [#7864](https://github.com/firebase/firebase-js-sdk/pull/7864) Fix documentation links for function overloads and improve readability of function headings.\n## 0.3.0\n### Minor Changes\n\n- [#6623](https://github.com/firebase/firebase-js-sdk/pull/6623) Add an option to sort functions by first param. (--sort-functions)\n## 0.2.0\n### Minor Changes\n\n- [#6449](https://github.com/firebase/firebase-js-sdk/pull/6449) Updates to work with devsite changes. Added a required `--project` flag for generating markdown docs.\n## 0.1.2\n### Patch Changes\n\n- [#4931](https://github.com/firebase/firebase-js-sdk/pull/4931) Support toc generation for Firebase devsite.\n## 0.1.1\n### Patch Changes\n\n- [#4869](https://github.com/firebase/firebase-js-sdk/pull/4869) Generate API docs for namespace members\n```\n\n----------------------------------------\n\nTITLE: TypeScript Export Type Declarations in v0.5.10\nDESCRIPTION: A patch that adds type declarations to the exports field in package.json, fixing issues with TypeScript imports when using the SDK with certain module resolution strategies.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/performance/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [`2cd1cc76f`](https://github.com/firebase/firebase-js-sdk/commit/2cd1cc76f2a308135cd60f424fe09084a34b5cb5) [#6307](https://github.com/firebase/firebase-js-sdk/pull/6307) (fixes [#6300](https://github.com/firebase/firebase-js-sdk/issues/6300)) - fix: add type declarations to exports field\n```\n\n----------------------------------------\n\nTITLE: NotificationPayload.icon Property Definition\nDESCRIPTION: Defines the optional 'icon' property of the NotificationPayload interface, which specifies the URL for the notification's icon.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.notificationpayload.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nicon?: string;\n```\n\n----------------------------------------\n\nTITLE: StorageObserver Next Handler Definition\nDESCRIPTION: Definition of the next handler property in the StorageObserver interface. Uses a generic NextFn type with type parameter T or null.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.storageobserver.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnext?: NextFn<T> | null;\n```\n\n----------------------------------------\n\nTITLE: Event Callback Property Definition\nDESCRIPTION: TypeScript property definition for the event_callback parameter which accepts a void callback function.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.controlparams.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nevent_callback?: () => void;\n```\n\n----------------------------------------\n\nTITLE: Importing @firebase/webchannel-wrapper using CommonJS Modules\nDESCRIPTION: This snippet shows how to import the entire @firebase/webchannel-wrapper package using CommonJS module syntax. It allows access to all exposed modules such as ErrorCode, EventType, and others for use in Firebase JS SDK projects.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/webchannel-wrapper/README.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst webchannelWrapper = require('@firebase/webchannel-wrapper');\n\n// Do stuff with webchannelWrapper.ErrorCode, webchannelWrapper.EventType, etc \n```\n\n----------------------------------------\n\nTITLE: Defining reason Property in ErrorDetails Interface\nDESCRIPTION: Property definition for the reason field in the ErrorDetails interface. This optional string property provides the reason for the error occurrence.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.errordetails.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nreason?: string;\n```\n\n----------------------------------------\n\nTITLE: GeoPoint isEqual Method Signature in TypeScript\nDESCRIPTION: Declares the isEqual method for comparing two GeoPoint instances for equality. It takes another GeoPoint as a parameter and returns a boolean.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.geopoint.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisEqual(other: GeoPoint): boolean;\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning for Firebase Analytics Types Package Usage\nDESCRIPTION: This Markdown snippet provides a warning message to users about the intended usage of the @firebase/analytics-types package. It emphasizes that the package should not be used directly, but only through the official firebase npm package.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/analytics-types/README.md#2025-04-14_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @firebase/analytics-types\n\n**This package is not intended for direct usage, and should only be used via the officially supported [firebase](https://www.npmjs.com/package/firebase) package.**\n```\n\n----------------------------------------\n\nTITLE: Defining Item.location_id Property\nDESCRIPTION: Declaration of the optional location_id property for the Item interface, which can be used to specify the ID of the physical location associated with the item.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.item.md#2025-04-14_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nlocation_id?: string;\n```\n\n----------------------------------------\n\nTITLE: Declaring Type Property for QueryEndAtConstraint in TypeScript\nDESCRIPTION: This code defines a readonly 'type' property for the QueryEndAtConstraint class. The type can be either 'endBefore' or 'endAt', indicating the specific end constraint type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.queryendatconstraint.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: 'endBefore' | 'endAt';\n```\n\n----------------------------------------\n\nTITLE: Copying Configuration File for Firebase Auth Demo\nDESCRIPTION: Command to copy the sample configuration file to create a project-specific configuration.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/demo/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp src/sample-config.js src/config.js\n```\n\n----------------------------------------\n\nTITLE: Defining the UploadMetadata Interface in TypeScript for Firebase Storage\nDESCRIPTION: The UploadMetadata interface declaration that extends SettableMetadata, used for specifying metadata when uploading files to Firebase Storage.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/storage.uploadmetadata.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UploadMetadata extends SettableMetadata \n```\n\n----------------------------------------\n\nTITLE: Releasing Modularized SDKs (Markdown)\nDESCRIPTION: Update to release modularized SDKs, addressing issue #5015.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/analytics-types/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [`cdada6c68`](https://github.com/firebase/firebase-js-sdk/commit/cdada6c68f9740d13dd6674bcb658e28e68253b6) [#5345](https://github.com/firebase/firebase-js-sdk/pull/5345) (fixes [#5015](https://github.com/firebase/firebase-js-sdk/issues/5015)) - Release modularized SDKs\n```\n\n----------------------------------------\n\nTITLE: Declaring 'type' Property for Database Class in TypeScript\nDESCRIPTION: This snippet declares the 'type' property for the Database class. It is a readonly property with a string literal type 'database', used to represent the Database instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.database.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly 'type' = \"database\";\n```\n\n----------------------------------------\n\nTITLE: Declaring Query Interface in TypeScript\nDESCRIPTION: Base interface declaration for Query type in Firebase Database\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/database.query.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface Query\n```\n\n----------------------------------------\n\nTITLE: Defining UploadTaskSnapshot Interface for Firebase Storage in TypeScript\nDESCRIPTION: This snippet defines the UploadTaskSnapshot interface, which represents the current state of an upload task in Firebase Storage. It includes properties for tracking progress and accessing task metadata.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/storage.api.md#2025-04-14_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface UploadTaskSnapshot {\n    bytesTransferred: number;\n    metadata: FullMetadata;\n    ref: StorageReference;\n    state: TaskState;\n    task: UploadTask;\n    totalBytes: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading TypeScript Version\nDESCRIPTION: Update to use TypeScript 5.5.4 in version 1.0.7.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/database-types/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nb807119252dacf46b0122344c2b6dfc503cecde1\n```\n\n----------------------------------------\n\nTITLE: Implementing PhoneAuthProvider Class in TypeScript\nDESCRIPTION: This class provides methods for phone authentication, including credential creation and phone number verification.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/auth.api.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport class PhoneAuthProvider {\n    constructor(auth: Auth);\n    static credential(verificationId: string, verificationCode: string): PhoneAuthCredential;\n    static credentialFromError(error: FirebaseError): AuthCredential | null;\n    static credentialFromResult(userCredential: UserCredential): AuthCredential | null;\n    static readonly PHONE_SIGN_IN_METHOD: 'phone';\n    static readonly PROVIDER_ID: 'phone';\n    readonly providerId: \"phone\";\n    verifyPhoneNumber(phoneOptions: PhoneInfoOptions | string, applicationVerifier?: ApplicationVerifier): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TextPart Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for TextPart that specifies a text content part structure. The interface includes properties for text content and explicitly marks function-related properties as never types.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.textpart.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TextPart\n```\n\n----------------------------------------\n\nTITLE: Defining AppCheckTokenResult Interface in TypeScript\nDESCRIPTION: This code snippet defines the AppCheckTokenResult interface, which has a single readonly property 'token' of type string. The token represents the JWT format string returned by the getToken() method.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app-check.appchecktokenresult.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AppCheckTokenResult {\n    readonly token: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FirebaseRemoteConfigObject Interface in TypeScript\nDESCRIPTION: This snippet defines the FirebaseRemoteConfigObject interface, which is used to represent a self-descriptive reference for config key-value pairs in Firebase Remote Config. The interface is exported, allowing it to be used in other parts of the Firebase JavaScript SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/remote-config.firebaseremoteconfigobject.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FirebaseRemoteConfigObject \n```\n\n----------------------------------------\n\nTITLE: Declaring maxAttempts Property in TransactionOptions Interface\nDESCRIPTION: This code snippet shows the declaration of the 'maxAttempts' property within the TransactionOptions interface. It is an optional readonly number property that sets the maximum number of attempts to commit a transaction before it fails.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.transactionoptions.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly maxAttempts?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining GeoPoint Class in TypeScript for Firebase JS SDK\nDESCRIPTION: Declares the GeoPoint class representing an immutable object for geographic locations in Firestore. It includes a constructor, properties for latitude and longitude, and methods for equality comparison and JSON serialization.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.geopoint.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class GeoPoint \n```\n\n----------------------------------------\n\nTITLE: Building Firebase Auth Components\nDESCRIPTION: Command to build the fully resolved Firebase app and auth JavaScript files from the auth-compat package.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth-compat/demo/README.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Consent Status Type Definition\nDESCRIPTION: Type definition for consent status in Firebase Analytics, indicating whether a particular consent type has been granted or denied by the user.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ConsentStatusString = 'granted' | 'denied';\n```\n\n----------------------------------------\n\nTITLE: Updating Repository URL in package.json (Markdown)\nDESCRIPTION: Update to the repository URL field in the package.json file to match NPM's preferred format.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/analytics-types/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [`0c5150106`](https://github.com/firebase/firebase-js-sdk/commit/0c515010607bf2223b468acb94c672b1279ed1a0) [#8079](https://github.com/firebase/firebase-js-sdk/pull/8079) - Update `repository.url` field in all `package.json` files to NPM's preferred format.\n```\n\n----------------------------------------\n\nTITLE: Defining OAuthCredentialOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the OAuthCredentialOptions interface, which specifies the structure for OAuth credential options including accessToken, idToken, and rawNonce.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/auth.api.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface OAuthCredentialOptions {\n    accessToken?: string;\n    idToken?: string;\n    rawNonce?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Aggregation Results in AggregateQuerySnapshot\nDESCRIPTION: Declares a method 'data()' that returns the results of aggregations performed over the underlying query. The return type uses a generic AggregateSpecData type based on the AggregateSpecType.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.aggregatequerysnapshot.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndata(): AggregateSpecData<AggregateSpecType>;\n```\n\n----------------------------------------\n\nTITLE: Package Change URL Reference\nDESCRIPTION: Git commit URL showing package version update details\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/template-types/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`b80711925`\n```\n\n----------------------------------------\n\nTITLE: Firebase Storage Core Interfaces and Classes\nDESCRIPTION: Core Firebase Storage interfaces and implementation classes including FirebaseStorage and _FirebaseStorageImpl\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/storage.api.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FirebaseStorage extends _FirebaseService {\n    readonly app: FirebaseApp;\n    maxOperationRetryTime: number;\n    maxUploadRetryTime: number;\n}\n\nexport class _FirebaseStorageImpl implements FirebaseStorage {\n    constructor(\n    app: FirebaseApp, _authProvider: Provider<FirebaseAuthInternalName>,\n    _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    _url?: string | undefined, _firebaseVersion?: string | undefined);\n    readonly app: FirebaseApp;\n    // ... additional implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: FirebaseServerApp Settings Property Type Definition\nDESCRIPTION: TypeScript type definition for the settings property of FirebaseServerApp interface. Specifies the read-only configuration settings for the server app.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/app.firebaseserverapp.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly settings: FirebaseServerAppSettings;\n```\n\n----------------------------------------\n\nTITLE: Importing WebChannel from @firebase/webchannel-wrapper using ES Modules\nDESCRIPTION: This snippet demonstrates how to import the WebChannel module from the @firebase/webchannel-wrapper package using ES Modules syntax. It allows developers to use the WebChannel functionality in their Firebase JS SDK projects.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/webchannel-wrapper/README.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WebChannel } from '@firebase/webchannel-wrapper'\n\n// Do stuff with WebChannel\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.3.20\nDESCRIPTION: Changelog entry showing dependency updates for Firebase Functions and related packages.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/functions-compat/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`777f465`](https://github.com/firebase/firebase-js-sdk/commit/777f465ff37495ff933a29583769ce8a6a2b59b5)]:\n  - @firebase/util@1.11.0\n  - @firebase/functions@0.12.3\n  - @firebase/component@0.6.13\n```\n\n----------------------------------------\n\nTITLE: Defining HttpsCallableStreamOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for HttpsCallableStreamOptions that specifies configuration options for Firebase callable function streams. Includes options for App Check token usage and stream cancellation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/functions.httpscallablestreamoptions.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface HttpsCallableStreamOptions \n```\n\n----------------------------------------\n\nTITLE: Emulator Auto-initialization\nDESCRIPTION: Added functionality to automatically initialize project configuration and emulator settings from global defaults provided by framework tooling\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/database/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction autoInitialize(config) {\n  if (globalDefaults && globalDefaults.emulator) {\n    config.emulator = globalDefaults.emulator;\n  }\n  return config;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bytes Object from Uint8Array in TypeScript\nDESCRIPTION: Static method to create a new Bytes object from a Uint8Array. It uses the provided array to initialize a new Bytes instance.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.bytes.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic fromUint8Array(array: Uint8Array): Bytes;\n```\n\n----------------------------------------\n\nTITLE: Role Type Definition in TypeScript\nDESCRIPTION: Type definition for a role, which represents the producer of content in a conversation. It uses the predefined POSSIBLE_ROLES constant.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Role = (typeof POSSIBLE_ROLES)[number];\n```\n\n----------------------------------------\n\nTITLE: Comparing Firestore Queries in TypeScript\nDESCRIPTION: Returns true if the provided queries point to the same collection and apply the same constraints.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function queryEqual<AppModelType, DbModelType extends DocumentData>(left: Query<AppModelType, DbModelType>, right: Query<AppModelType, DbModelType>): boolean;\n```\n\n----------------------------------------\n\nTITLE: Updating BloomFilter Test Files from Google Source\nDESCRIPTION: Command for Googlers to update the golden test JSON files by copying them from the Google3 repository.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/firestore/test/unit/remote/bloom_filter_golden_test_data/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp /google/src/head/depot/google3/cloud/datastore/common/testdata/minion_goldens/*.json .\n```\n\n----------------------------------------\n\nTITLE: Referencing Firebase npm Package in Markdown\nDESCRIPTION: This code snippet demonstrates how to reference the official Firebase npm package using Markdown syntax. It provides a link to the package on npmjs.com.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/app-check/README.md#2025-04-14_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[`firebase`](https://www.npmjs.com/package/firebase)\n```\n\n----------------------------------------\n\nTITLE: Referencing Official Firebase Package\nDESCRIPTION: This snippet provides a link to the official firebase npm package, which should be used instead of directly using @firebase/auth-types.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth-types/README.md#2025-04-14_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[firebase](https://www.npmjs.com/package/firebase)\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Firebase Messaging Documentation\nDESCRIPTION: This YAML snippet sets up the configuration for the documentation page, including project and book references, as well as the page type. It also includes a comment warning against manual edits.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nProject: /docs/reference/js/_project.yaml\nBook: /docs/reference/_book.yaml\npage_type: reference\n\n{% comment %}\nDO NOT EDIT THIS FILE!\nThis is generated by the JS SDK team, and any local changes will be\noverwritten. Changes should be made in the source code at\nhttps://github.com/firebase/firebase-js-sdk\n{% endcomment %}\n```\n\n----------------------------------------\n\nTITLE: Declaring documentsLoaded Property Type\nDESCRIPTION: Property definition for tracking the count of documents that have been loaded from the bundle.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.loadbundletaskprogress.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndocumentsLoaded: number;\n```\n\n----------------------------------------\n\nTITLE: YAML Project Configuration for Firebase JS SDK Documentation\nDESCRIPTION: This YAML code defines configuration metadata for the Firebase JS SDK documentation page. It specifies the project path, book reference, and page type.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/auth.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nProject: /docs/reference/js/_project.yaml\nBook: /docs/reference/_book.yaml\npage_type: reference\n```\n\n----------------------------------------\n\nTITLE: Installing Admin SDK Dependencies\nDESCRIPTION: Commands to navigate to the functions directory and install required dependencies for the Firebase Admin SDK.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth-compat/demo/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd functions\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Database Query Get Method\nDESCRIPTION: Implementation of get method for database queries that returns server result when connected, added in version 0.8.0\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/database/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nget(): Promise<DataSnapshot>\n```\n\n----------------------------------------\n\nTITLE: Defining QueryConstraint Abstract Class in TypeScript\nDESCRIPTION: This code snippet defines the abstract QueryConstraint class. It has a single abstract readonly property 'type' of QueryConstraintType.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.queryconstraint.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare abstract class QueryConstraint \n{\n    abstract readonly type: QueryConstraintType;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CORS Rules for Firebase Storage Bucket\nDESCRIPTION: Command to set CORS rules on a Firebase Storage bucket using gsutil for SDK testing.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/README.md#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngsutil cors set cors.json gs://<your-cloud-storage-bucket>\n```\n\n----------------------------------------\n\nTITLE: Logging Cart and Item View Events in Firebase Analytics\nDESCRIPTION: TypeScript function signature for logging cart and item view events with currency, items, and value parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/analytics.api.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport function logEvent(analyticsInstance: Analytics, eventName: 'view_cart' | 'view_item', eventParams?: {\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    value?: EventParams['value'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Currency Type Definition\nDESCRIPTION: Type definition for standard Google Analytics currency representation, which can be either a string or a number.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Currency = string | number;\n```\n\n----------------------------------------\n\nTITLE: Firebase Project Access Troubleshooting\nDESCRIPTION: Commands to logout, re-login and add a Firebase project in case of listing issues.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/auth/demo/README.md#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfirebase logout && firebase login && firebase use --add\n```\n\n----------------------------------------\n\nTITLE: Timestamp Constructor Implementation\nDESCRIPTION: Constructor for creating new Timestamp instances with seconds and nanoseconds parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_.timestamp.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(\n    seconds: number, \n    nanoseconds: number);\n```\n\n----------------------------------------\n\nTITLE: Defining StringSchema Class in TypeScript\nDESCRIPTION: Defines a class for string schema, extending the Schema class and including optional enum values.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/vertexai.api.md#2025-04-14_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class StringSchema extends Schema {\n    constructor(schemaParams?: SchemaParams, enumValues?: string[]);\n    // (undocumented)\n    enum?: string[];\n    // @internal (undocumented)\n    toJSON(): SchemaRequest;\n}\n```\n\n----------------------------------------\n\nTITLE: Version Control Link Example\nDESCRIPTION: Git commit link showing version control reference for TypeScript upgrade\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/functions-types/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`b80711925`\n```\n\n----------------------------------------\n\nTITLE: Calculating String Length in TypeScript\nDESCRIPTION: This constant function calculates the length of a string. It takes a string as input and returns its length as a number.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/util.api.md#2025-04-14_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const stringLength: (str: string) => number;\n```\n\n----------------------------------------\n\nTITLE: CountTokensRequest GenerationConfig Property Definition\nDESCRIPTION: Optional property definition for configuration options that control model response generation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/vertexai.counttokensrequest.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngenerationConfig?: GenerationConfig;\n```\n\n----------------------------------------\n\nTITLE: Building Firebase Remote Config for End-to-End Testing\nDESCRIPTION: Steps to build the Remote Config package and Firebase package for end-to-end testing, followed by instructions to open the test application in a browser.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/remote-config/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: NotificationPayload Title Property Definition\nDESCRIPTION: Type definition for the notification title property which contains the header text of the notification.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_sw.notificationpayload.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntitle?: string;\n```\n\n----------------------------------------\n\nTITLE: Supporting App Check Token in FirebaseServerApp\nDESCRIPTION: Update allowing FirebaseServerApp to be initialized with an App Check token instead of invoking getToken method, unblocking the use of App Check in SSR environments.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/functions/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n97d48c7650e2d4273b7f94c8964dfcb44113952a [#8651](https://github.com/firebase/firebase-js-sdk/pull/8651) - `FirebaseServerApp` can now be initalized with an App Check token instead of invoking the App Check\n  `getToken` method. This should unblock the use of App Check enforced products in SSR environments\n  where the App Check SDK cannot be initialized.\n```\n\n----------------------------------------\n\nTITLE: Logging Item List View Events in Firebase Analytics\nDESCRIPTION: TypeScript function signature for logging item list view events with items and list identification parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/analytics.api.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport function logEvent(analyticsInstance: Analytics, eventName: 'view_item_list', eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Updating Firebase Import Syntax After Browser Field Update\nDESCRIPTION: Example showing how to update Firebase import syntax after the browser field was updated to point to the ESM build. Default import is now required instead of namespace import.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/functions/CHANGELOG.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Before this change\nimport * as firebase from 'firebase/app';\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After this change\nimport firebase from 'firebase/app';\n```\n\n----------------------------------------\n\nTITLE: Logging Checkout Option Events in Firebase Analytics\nDESCRIPTION: TypeScript declaration for logging checkout option events with checkout step and option parameters.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function logEvent(analyticsInstance: Analytics, eventName: 'set_checkout_option', eventParams?: {\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n}, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Updating Repository URL in Package.json Files\nDESCRIPTION: Update the repository.url field in all package.json files to NPM's preferred format.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/app-types/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [`0c5150106`](https://github.com/firebase/firebase-js-sdk/commit/0c515010607bf2223b468acb94c672b1279ed1a0) [#8079](https://github.com/firebase/firebase-js-sdk/pull/8079) - Update `repository.url` field in all `package.json` files to NPM's preferred format.\n```\n\n----------------------------------------\n\nTITLE: Defining from Property Type\nDESCRIPTION: Type definition for the message sender identifier property.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/messaging_.messagepayload.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfrom: string;\n```\n\n----------------------------------------\n\nTITLE: Defining OperationType Constant in TypeScript\nDESCRIPTION: This constant defines the types of authentication operations: link, reauthenticate, and sign in.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/common/api-review/auth.api.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const OperationType: {\n    readonly LINK: \"link\";\n    readonly REAUTHENTICATE: \"reauthenticate\";\n    readonly SIGN_IN: \"signIn\";\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Current Screen in Firebase Analytics (Deprecated)\nDESCRIPTION: Sets the current screen name in Firebase Analytics. This function is now obsolete and users should use logEvent with 'screen_view' event name and relevant event parameters instead.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/analytics.md#2025-04-14_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function setCurrentScreen(analyticsInstance: Analytics, screenName: string, options?: AnalyticsCallOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Repository URL Git Link\nDESCRIPTION: Git commit link for package.json repository URL update\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/packages/functions-types/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`0c5150106`\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Project Settings in YAML\nDESCRIPTION: YAML configuration block that specifies documentation project settings including the project path, book reference, and page type for Firebase Firestore documentation.\nSOURCE: https://github.com/firebase/firebase-js-sdk/blob/main/docs-devsite/firestore_lite.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nProject: /docs/reference/js/_project.yaml\nBook: /docs/reference/_book.yaml\npage_type: reference\n```"
  }
]