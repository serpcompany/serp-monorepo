[
  {
    "owner": "fastapi-users",
    "repo": "fastapi-users",
    "content": "TITLE: Main Entry Point for FastAPI Application with SQLAlchemy\nDESCRIPTION: The main entry point for a FastAPI application using FastAPI Users with SQLAlchemy. This file initializes and runs the application.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/full-example.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/sqlalchemy/main.py\"\n```\n\n----------------------------------------\n\nTITLE: FastAPI Application Setup with Beanie\nDESCRIPTION: Configuration of the FastAPI application with user routes and authentication using Beanie backend. Defines the API endpoints and middleware.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/full-example.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/beanie/app/app.py\"\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Authentication Backend in FastAPI-Users with Python\nDESCRIPTION: This code snippet demonstrates how to create a JWT-based authentication backend using FastAPI-Users. It sets up a BearerTransport, defines a JWTStrategy with a secret key and token lifetime, and combines them into an AuthenticationBackend.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/authentication/backend.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi_users.authentication import AuthenticationBackend, BearerTransport, JWTStrategy\n\nSECRET = \"SECRET\"\n\nbearer_transport = BearerTransport(tokenUrl=\"auth/jwt/login\")\n\ndef get_jwt_strategy() -> JWTStrategy:\n    return JWTStrategy(secret=SECRET, lifetime_seconds=3600)\n\nauth_backend = AuthenticationBackend(\n    name=\"jwt\",\n    transport=bearer_transport,\n    get_strategy=get_jwt_strategy,\n)\n```\n\n----------------------------------------\n\nTITLE: FastAPI Application Setup with SQLAlchemy\nDESCRIPTION: Configuration of the FastAPI application with user routes and authentication using SQLAlchemy backend. Defines the API endpoints and middleware.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/full-example.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/sqlalchemy/app/app.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Register Routes with FastAPI Users in Python\nDESCRIPTION: This code snippet demonstrates how to set up register routes using FastAPI Users. It imports necessary modules, creates a FastAPIUsers instance, and includes the register router in a FastAPI application. The router is configured with specific user schemas and is added under the '/auth' prefix with the 'auth' tag.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/routers/register.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\nfrom fastapi import FastAPI\nfrom fastapi_users import FastAPIUsers\n\nfrom .db import User\nfrom .schemas import UserCreate, UserRead\n\nfastapi_users = FastAPIUsers[User, uuid.UUID](\n    get_user_manager,\n    [auth_backend],\n)\n\napp = FastAPI()\napp.include_router(\n    fastapi_users.get_register_router(UserRead, UserCreate),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\n```\n\n----------------------------------------\n\nTITLE: User Management Logic for SQLAlchemy Implementation\nDESCRIPTION: User management implementation with FastAPI Users using SQLAlchemy, including authentication, user creation, and user operations.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/full-example.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/sqlalchemy/app/users.py\"\n```\n\n----------------------------------------\n\nTITLE: User Management Logic for Beanie Implementation\nDESCRIPTION: User management implementation with FastAPI Users using Beanie, including authentication, user creation, and user operations.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/full-example.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/beanie/app/users.py\"\n```\n\n----------------------------------------\n\nTITLE: Basic Current User Authentication in FastAPI\nDESCRIPTION: Demonstrates how to get the current authenticated user without any additional checks. Returns the user object that can be used in the route.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/current-user.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncurrent_user = fastapi_users.current_user()\n\n@app.get(\"/protected-route\")\ndef protected_route(user: User = Depends(current_user)):\n    return f\"Hello, {user.email}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring User Verification Requirement for Authentication\nDESCRIPTION: This code shows how to require user verification before allowing login. It adds the requires_verification parameter to the router instantiation, ensuring that only users with is_verified=True can log in.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/routers/auth.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.include_router(\n    fastapi_users.get_auth_router(auth_backend, requires_verification=True),\n    prefix=\"/auth/jwt\",\n    tags=[\"auth\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring FastAPIUsers Object in Python\nDESCRIPTION: This snippet demonstrates how to configure the FastAPIUsers object with a user manager and authentication backend. It uses generic types for User and UUID to ensure proper type-checking and auto-completion.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/routers/index.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\nfrom fastapi_users import FastAPIUsers\n\nfrom .db import User\n\nfastapi_users = FastAPIUsers[User, uuid.UUID](\n    get_user_manager,\n    [auth_backend],\n)\n```\n\n----------------------------------------\n\nTITLE: JWT Login Authentication\nDESCRIPTION: Authentication requests using JWT backend with form data submission. Returns an access token used for subsequent authenticated requests.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/flow.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n-H \"Content-Type: multipart/form-data\" \\\n-X POST \\\n-F \"username=king.arthur@camelot.bt\" \\\n-F \"password=guinevere\" \\\nhttp://localhost:8000/auth/jwt/login\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst formData = new FormData();\nformData.set('username', 'king.arthur@camelot.bt');\nformData.set('password', 'guinevere');\naxios.post(\n    'http://localhost:8000/auth/jwt/login',\n    formData,\n    {\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        },\n    },\n)\n.then((response) => console.log(response))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Defining SQLAlchemy User Model with UUID Primary Key\nDESCRIPTION: Creates a SQLAlchemy User model by inheriting from SQLAlchemyBaseUserTableUUID and Base classes. This model includes default user fields and allows for custom field additions.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/databases/sqlalchemy.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass User(SQLAlchemyBaseUserTableUUID, Base):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Authentication Strategy\nDESCRIPTION: Defines a function to create and configure the DatabaseStrategy for authentication. This strategy uses the AccessTokenDatabase adapter and sets a token lifetime. It demonstrates how to set up the database-backed authentication strategy in FastAPI Users.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/authentication/strategies/database.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_database_strategy(\n    access_token_db: AccessTokenDatabase[AccessToken] = Depends(get_access_token_db),\n) -> DatabaseStrategy:\n    return DatabaseStrategy(access_token_db, lifetime_seconds=3600)\n```\n\n----------------------------------------\n\nTITLE: Setting up FastAPI Users Verify Router in Python\nDESCRIPTION: This snippet demonstrates how to initialize and include the verify router in a FastAPI application. It creates a FastAPIUsers instance with a user model and UUID type, then adds the verify router to the FastAPI app with a specified prefix and tags.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/routers/verify.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\nfrom fastapi import FastAPI\nfrom fastapi_users import FastAPIUsers\n\nfrom .db import User\nfrom .schemas import UserRead\n\nfastapi_users = FastAPIUsers[User, uuid.UUID](\n    get_user_manager,\n    [auth_backend],\n)\n\napp = FastAPI()\napp.include_router(\n    fastapi_users.get_verify_router(UserRead),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Active User Authentication in FastAPI\nDESCRIPTION: Shows how to get only active authenticated users. Will throw 401 Unauthorized if the user is inactive.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/current-user.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncurrent_active_user = fastapi_users.current_user(active=True)\n\n@app.get(\"/protected-route\")\ndef protected_route(user: User = Depends(current_active_user)):\n    return f\"Hello, {user.email}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Adapter Dependencies\nDESCRIPTION: Sets up FastAPI dependencies for database session management and user database adapter creation. Includes session factory and user database configuration.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/databases/sqlalchemy.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def get_async_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session\n\nasync def get_user_db(session: AsyncSession = Depends(get_async_session)):\n    yield SQLAlchemyUserDatabase(session, User)\n```\n\n----------------------------------------\n\nTITLE: Superuser Authentication in FastAPI\nDESCRIPTION: Implements authentication for active superusers. Will throw 401 Unauthorized if inactive or 403 Forbidden if not a superuser.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/current-user.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncurrent_superuser = fastapi_users.current_user(active=True, superuser=True)\n\n@app.get(\"/protected-route\")\ndef protected_route(user: User = Depends(current_superuser)):\n    return f\"Hello, {user.email}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing FastAPIUsers - Before and After Comparison\nDESCRIPTION: Shows how the initialization of FastAPIUsers has changed to use generics and no longer requires passing Pydantic schemas directly. The new approach uses type parameters instead of explicit schema parameters.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/9x_to_10x.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfastapi_users = FastAPIUsers(\n    get_user_manager,\n    [auth_backend],\n    User,\n    UserCreate,\n    UserUpdate,\n    UserDB,\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nfastapi_users = FastAPIUsers[User, uuid.UUID](\n    get_user_manager,\n    [auth_backend],\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing FastAPI Users Router\nDESCRIPTION: Sets up basic user management routes in a FastAPI application using FastAPIUsers. Includes configuration of user manager, authentication backend, and route prefix with tags.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/routers/users.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\nfrom fastapi import FastAPI\nfrom fastapi_users import FastAPIUsers\n\nfrom .db import User\nfrom .schemas import UserRead, UserUpdate\n\nfastapi_users = FastAPIUsers[User, uuid.UUID](\n    get_user_manager,\n    [auth_backend],\n)\n\napp = FastAPI()\napp.include_router(\n    fastapi_users.get_users_router(UserRead, UserUpdate),\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a User with cURL in FastAPI-Users\nDESCRIPTION: HTTP DELETE request to remove a user from the system using cURL. Requires a valid JWT token in the Authorization header and the user's UUID as part of the URL path.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/flow.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-X DELETE \\\nhttp://localhost:8000/users/4fd3477b-eccf-4ee3-8f7d-68ad72261476\n```\n\n----------------------------------------\n\nTITLE: Configuring Bearer Transport in FastAPI-Users\nDESCRIPTION: This code shows how to initialize a BearerTransport instance for FastAPI-Users authentication. The tokenUrl parameter specifies the endpoint that will handle JWT login requests, enabling the interactive documentation to discover it and provide a working Authorize button.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/authentication/transports/bearer.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi_users.authentication import BearerTransport\n\nbearer_transport = BearerTransport(tokenUrl=\"auth/jwt/login\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic JWT Strategy in FastAPI Users\nDESCRIPTION: Basic JWT strategy implementation using a secret key and lifetime configuration. Demonstrates how to set up JWT authentication with a simple secret and token expiration time.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/authentication/strategies/jwt.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi_users.authentication import JWTStrategy\n\nSECRET = \"SECRET\"\n\ndef get_jwt_strategy() -> JWTStrategy:\n    return JWTStrategy(secret=SECRET, lifetime_seconds=3600)\n```\n\n----------------------------------------\n\nTITLE: Setting up Beanie Models for OAuth\nDESCRIPTION: Configures OAuth account support for MongoDB using Beanie by embedding OAuth account objects within the User document using a Pydantic model.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/oauth.md#2025-04-23_snippet_4\n\nLANGUAGE: py\nCODE:\n```\n--8<-- \"docs/src/db_beanie_oauth.py\"\n```\n\n----------------------------------------\n\nTITLE: Configuring User Verification Router\nDESCRIPTION: Demonstrates how to set up user routes with mandatory verification requirement. Adds requires_verification parameter to ensure users must be verified to access these routes.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/routers/users.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.include_router(\n    fastapi_users.get_users_router(UserRead, UserUpdate, requires_verification=True),\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Authentication Router in FastAPI Users\nDESCRIPTION: This code demonstrates how to create and include an authentication router in a FastAPI application. It configures login and logout routes for a specific authentication backend with a prefix and tag.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/routers/auth.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\nfrom fastapi import FastAPI\nfrom fastapi_users import FastAPIUsers\n\nfrom .db import User\n\nfastapi_users = FastAPIUsers[User, uuid.UUID](\n    get_user_manager,\n    [auth_backend],\n)\n\napp = FastAPI()\napp.include_router(\n    fastapi_users.get_auth_router(auth_backend),\n    prefix=\"/auth/jwt\",\n    tags=[\"auth\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Using the Create User Function\nDESCRIPTION: Example script showing how to use the create_user function in an async context with asyncio.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/cookbook/create-user-programmatically.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nif __name__ == \"__main__\":\n    asyncio.run(create_user(\"king.arthur@camelot.bt\", \"guinevere\"))\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Account Association by Email\nDESCRIPTION: Configures the OAuth router to automatically associate OAuth logins with existing user accounts that have the same email address, with a warning about potential security implications.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/oauth.md#2025-04-23_snippet_6\n\nLANGUAGE: py\nCODE:\n```\napp.include_router(\n    fastapi_users.get_oauth_router(\n        google_oauth_client,\n        auth_backend,\n        \"SECRET\",\n        associate_by_email=True,\n    ),\n    prefix=\"/auth/google\",\n    tags=[\"auth\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Reset Password Router in FastAPI\nDESCRIPTION: Sets up reset password functionality by configuring FastAPIUsers instance and including the reset password router in a FastAPI application. Creates two endpoints: /forgot-password for requesting reset tokens and /reset-password for changing passwords using those tokens.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/routers/reset.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\nfrom fastapi import FastAPI\nfrom fastapi_users import FastAPIUsers\n\nfrom .db import User\n\nfastapi_users = FastAPIUsers[User, uuid.UUID](\n    get_user_manager,\n    [auth_backend],\n)\n\napp = FastAPI()\napp.include_router(\n    fastapi_users.get_reset_password_router(),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Authentication Strategy for FastAPI Users\nDESCRIPTION: Example configuration for setting up a Redis authentication strategy. It creates a Redis connection and defines a function that returns a RedisStrategy instance with a specified token lifetime.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/authentication/strategies/redis.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport redis.asyncio\nfrom fastapi_users.authentication import RedisStrategy\n\nredis = redis.asyncio.from_url(\"redis://localhost:6379\", decode_responses=True)\n\ndef get_redis_strategy() -> RedisStrategy:\n    return RedisStrategy(redis, lifetime_seconds=3600)\n```\n\n----------------------------------------\n\nTITLE: Configuring FastAPI-Users with SQLAlchemy\nDESCRIPTION: Example code demonstrating how to set up FastAPI-Users with SQLAlchemy as the database backend. It includes user model definition, database configuration, and user manager setup.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/index.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi_users import FastAPIUsers\nfrom fastapi_users.authentication import CookieTransport, AuthenticationBackend\nfrom fastapi_users.authentication import JWTStrategy\n\nfrom user_manager import get_user_manager\nfrom db import User\n\ncookie_transport = CookieTransport(cookie_name=\"bonds\", cookie_max_age=3600)\n\ndef get_jwt_strategy() -> JWTStrategy:\n    return JWTStrategy(secret=\"SECRET\", lifetime_seconds=3600)\n\nauth_backend = AuthenticationBackend(\n    name=\"jwt\",\n    transport=cookie_transport,\n    get_strategy=get_jwt_strategy,\n)\n\nfastapi_users = FastAPIUsers[\nUser, int\n](\n    get_user_manager,\n    [auth_backend],\n)\n\napp = FastAPI()\n\napp.include_router(\n    fastapi_users.get_auth_router(auth_backend),\n    prefix=\"/auth/jwt\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_register_router(UserRead, UserCreate),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_reset_password_router(),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_verify_router(UserRead),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_users_router(UserRead, UserUpdate),\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n\n@app.get(\"/authenticated-route\")\nasync def authenticated_route(user: User = Depends(fastapi_users.current_user())):\n    return {\"message\": f\"Hello {user.email}!\"}\n```\n\n----------------------------------------\n\nTITLE: Extending User Schemas with Custom Fields in Python\nDESCRIPTION: Enhanced implementation of user schemas with additional custom fields. Adds first_name and birthdate fields to all schema variations with appropriate optionality.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/schemas.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nimport uuid\n\nfrom fastapi_users import schemas\n\n\nclass UserRead(schemas.BaseUser[uuid.UUID]):\n    first_name: str\n    birthdate: Optional[datetime.date]\n\n\nclass UserCreate(schemas.BaseUserCreate):\n    first_name: str\n    birthdate: Optional[datetime.date]\n\n\nclass UserUpdate(schemas.BaseUserUpdate):\n    first_name: Optional[str]\n    birthdate: Optional[datetime.date]\n```\n\n----------------------------------------\n\nTITLE: Database Configuration for SQLAlchemy Implementation\nDESCRIPTION: Database setup for the SQLAlchemy implementation of FastAPI Users, including model definitions and database connection configuration.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/full-example.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/sqlalchemy/app/db.py\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Authentication in FastAPI-Users\nDESCRIPTION: Code to set up a cookie authentication transport with customizable expiration time. The CookieTransport class supports configuration for cookie name, lifetime, path, domain, security, and same-site policy.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/authentication/transports/cookie.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi_users.authentication import CookieTransport\n\ncookie_transport = CookieTransport(cookie_max_age=3600)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom PasswordHash with Argon2 in FastAPI Users\nDESCRIPTION: Demonstrates how to create a custom PasswordHash instance that only uses the Argon2 algorithm, and initialize a PasswordHelper with it.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/password-hash.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi_users.password import PasswordHelper\nfrom pwdlib import PasswordHash, exceptions\nfrom pwdlib.hashers.argon2 import Argon2Hasher\n\npassword_hash = PasswordHash((\n    Argon2Hasher(),\n))\npassword_helper = PasswordHelper(password_hash)\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for FastAPI Users Project\nDESCRIPTION: This snippet lists the required Python packages for a FastAPI Users project with SQLAlchemy integration. It includes FastAPI, FastAPI Users with SQLAlchemy support, Uvicorn for running the ASGI server, and aiosqlite for asynchronous SQLite database operations.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/examples/sqlalchemy/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfastapi\nfastapi-users[sqlalchemy]\nuvicorn[standard]\naiosqlite\n```\n\n----------------------------------------\n\nTITLE: Generating OAuth Router for FastAPI\nDESCRIPTION: Adds an OAuth-specific router to a FastAPI application, configuring it with an OAuth client, authentication backend, and security secret.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/oauth.md#2025-04-23_snippet_5\n\nLANGUAGE: py\nCODE:\n```\napp.include_router(\n    fastapi_users.get_oauth_router(google_oauth_client, auth_backend, \"SECRET\"),\n    prefix=\"/auth/google\",\n    tags=[\"auth\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing RS256 JWT Strategy in FastAPI Users\nDESCRIPTION: Advanced JWT strategy implementation using RSA256 algorithm with public/private key pair. Shows how to configure JWT authentication using asymmetric encryption with RSA keys.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/authentication/strategies/jwt.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi_users.authentication import JWTStrategy\n\nPUBLIC_KEY = \"\"\"-----BEGIN PUBLIC KEY-----\n# Your RSA public key in PEM format goes here\n-----END PUBLIC KEY-----\"\"\"\n\nPRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n# Your RSA private key in PEM format goes here\n-----END RSA PRIVATE KEY-----\"\"\"\n\ndef get_jwt_strategy() -> JWTStrategy:\n    return JWTStrategy(\n        secret=PRIVATE_KEY, \n        lifetime_seconds=3600,\n        algorithm=\"RS256\",\n        public_key=PUBLIC_KEY,\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for FastAPI Users with SQLAlchemy and OAuth\nDESCRIPTION: This requirements file specifies the necessary Python packages for a FastAPI application using fastapi-users with SQLAlchemy ORM and OAuth authentication. It includes the ASGI server uvicorn with standard extensions and aiosqlite for asynchronous SQLite database operations.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/examples/sqlalchemy-oauth/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfastapi\nfastapi-users[sqlalchemy,oauth]\nuvicorn[standard]\naiosqlite\n```\n\n----------------------------------------\n\nTITLE: Defining User Manager Dependency with Generator\nDESCRIPTION: Example showing how FastAPI dependencies are typically defined using generators with the yield keyword in the dependency injection system.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/cookbook/create-user-programmatically.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def get_user_manager(user_db: SQLAlchemyUserDatabase = Depends(get_user_db)):\n    yield UserManager(user_db)\n```\n\n----------------------------------------\n\nTITLE: Configuring Beanie Access Token Model and Database Adapter\nDESCRIPTION: Defines an AccessToken ODM model inheriting from BeanieBaseAccessToken and sets up a dependency for instantiating the BeanieAccessTokenDatabase. This snippet shows how to integrate the access token functionality with Beanie ODM in FastAPI Users.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/authentication/strategies/database.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass AccessToken(BeanieBaseAccessToken[PydanticObjectId]):\n    pass\n\nasync def get_access_token_db():\n    yield BeanieAccessTokenDatabase(AccessToken)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Authentication Backends in FastAPI\nDESCRIPTION: Advanced implementation showing how to dynamically enable different authentication backends based on request path. Demonstrates configuration of JWT and Cookie authentication.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/current-user.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Request\nfrom fastapi_users.authentication import AuthenticationBackend, BearerTransport, CookieTransport, JWTStrategy\n\nSECRET = \"SECRET\"\n\nbearer_transport = BearerTransport(tokenUrl=\"auth/jwt/login\")\ncookie_transport = CookieTransport(cookie_max_age=3600)\n\ndef get_jwt_strategy() -> JWTStrategy:\n    return JWTStrategy(secret=SECRET, lifetime_seconds=3600)\n\njwt_backend = AuthenticationBackend(\n    name=\"jwt\",\n    transport=bearer_transport,\n    get_strategy=get_jwt_strategy,\n)\ncookie_backend = AuthenticationBackend(\n    name=\"jwt\",\n    transport=cookie_transport,\n    get_strategy=get_jwt_strategy,\n)\n\nasync def get_enabled_backends(request: Request):\n    \"\"\"Return the enabled dependencies following custom logic.\"\"\"\n    if request.url.path == \"/protected-route-only-jwt\":\n        return [jwt_backend]\n    else:\n        return [cookie_backend, jwt_backend]\n\n\ncurrent_active_user = fastapi_users.current_user(active=True, get_enabled_backends=get_enabled_backends)\n\n\n@app.get(\"/protected-route\")\ndef protected_route(user: User = Depends(current_active_user)):\n    return f\"Hello, {user.email}. You are authenticated with a cookie or a JWT.\"\n\n\n@app.get(\"/protected-route-only-jwt\")\ndef protected_route(user: User = Depends(current_active_user)):\n    return f\"Hello, {user.email}. You are authenticated with a JWT.\"\n```\n\n----------------------------------------\n\nTITLE: Defining Basic User Schemas in Python with FastAPI Users\nDESCRIPTION: Basic implementation of user schemas extending FastAPI Users base classes. Demonstrates setup of UserRead with UUID type, and basic UserCreate and UserUpdate schemas.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/schemas.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\nfrom fastapi_users import schemas\n\n\nclass UserRead(schemas.BaseUser[uuid.UUID]):\n    pass\n\n\nclass UserCreate(schemas.BaseUserCreate):\n    pass\n\n\nclass UserUpdate(schemas.BaseUserUpdate):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Association Router for Authenticated Users\nDESCRIPTION: Sets up a router that allows already authenticated users to associate their account with an OAuth provider for future authentication.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/oauth.md#2025-04-23_snippet_7\n\nLANGUAGE: py\nCODE:\n```\napp.include_router(\n    fastapi_users.get_oauth_associate_router(google_oauth_client, UserRead, \"SECRET\"),\n    prefix=\"/auth/associate/google\",\n    tags=[\"auth\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Writing User Creation Function\nDESCRIPTION: Implementation of a function to create users programmatically, showing proper handling of context managers and required arguments outside the dependency injection system.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/cookbook/create-user-programmatically.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/src/cookbook_create_user_programmatically.py\"\n```\n\n----------------------------------------\n\nTITLE: Migrating UserManager Class in FastAPI Users\nDESCRIPTION: Changes to the UserManager implementation for FastAPI Users v10. The class now requires a parse_id method through mixins and uses generic typing for the native User model class and ID type.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/9x_to_10x.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass UserManager(BaseUserManager[UserCreate, UserDB]):\n    user_db_model = UserDB\n    reset_password_token_secret = SECRET\n    verification_token_secret = SECRET\n\n    async def on_after_register(self, user: UserDB, request: Optional[Request] = None):\n        print(f\"User {user.id} has registered.\")\n\n    async def on_after_forgot_password(\n        self, user: UserDB, token: str, request: Optional[Request] = None\n    ):\n        print(f\"User {user.id} has forgot their password. Reset token: {token}\")\n\n    async def on_after_request_verify(\n        self, user: UserDB, token: str, request: Optional[Request] = None\n    ):\n        print(f\"Verification requested for user {user.id}. Verification token: {token}\")\n```\n\nLANGUAGE: python\nCODE:\n```\nclass UserManager(UUIDIDMixin, BaseUserManager[User, uuid.UUID]):\n    reset_password_token_secret = SECRET\n    verification_token_secret = SECRET\n\n    async def on_after_register(self, user: User, request: Optional[Request] = None):\n        print(f\"User {user.id} has registered.\")\n\n    async def on_after_forgot_password(\n        self, user: User, token: str, request: Optional[Request] = None\n    ):\n        print(f\"User {user.id} has forgot their password. Reset token: {token}\")\n\n    async def on_after_request_verify(\n        self, user: User, token: str, request: Optional[Request] = None\n    ):\n        print(f\"Verification requested for user {user.id}. Verification token: {token}\")\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth Users as Verified by Default\nDESCRIPTION: Configures the OAuth router to automatically mark users registering through OAuth as verified, avoiding the need for email verification when using trusted OAuth providers.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/oauth.md#2025-04-23_snippet_8\n\nLANGUAGE: py\nCODE:\n```\napp.include_router(\n    fastapi_users.get_oauth_router(\n        google_oauth_client,\n        auth_backend,\n        \"SECRET\",\n        is_verified_by_default=True,\n    ),\n    prefix=\"/auth/google\",\n    tags=[\"auth\"],\n)\n```\n\n----------------------------------------\n\nTITLE: User Schema Definitions for SQLAlchemy Implementation\nDESCRIPTION: Pydantic schema definitions for user models in the SQLAlchemy implementation, defining the structure of user data for API requests and responses.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/full-example.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/sqlalchemy/app/schemas.py\"\n```\n\n----------------------------------------\n\nTITLE: Successful Login Response Format with Bearer Authentication\nDESCRIPTION: This JSON snippet shows the format of a successful login response when using Bearer authentication in FastAPI-Users. It includes the access_token (JWT) and token_type fields in the response body.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/authentication/transports/bearer.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI\",\n    \"token_type\": \"bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserManager with Custom PasswordHelper in FastAPI\nDESCRIPTION: Shows how to integrate a custom password helper into the UserManager initialization.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/password-hash.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def get_user_manager(user_db=Depends(get_user_db)):\n    yield UserManager(user_db, password_helper)\n```\n\n----------------------------------------\n\nTITLE: Migrating MongoDB User Database Integration in FastAPI Users\nDESCRIPTION: Complete rewrite of MongoDB integration for FastAPI Users v10, transitioning from direct MongoDB adapter to Beanie ODM. This includes defining a proper User model using Beanie.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/9x_to_10x.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nimport motor.motor_asyncio\nfrom fastapi_users.db import MongoDBUserDatabase\n\nfrom app.models import UserDB\n\nDATABASE_URL = os.environ[\"DATABASE_URL\"]\nclient = motor.motor_asyncio.AsyncIOMotorClient(\n    DATABASE_URL, uuidRepresentation=\"standard\"\n)\ndb = client[\"database_name\"]\ncollection = db[\"users\"]\n\n\nasync def get_user_db():\n    yield MongoDBUserDatabase(UserDB, collection)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport motor.motor_asyncio\nfrom beanie import PydanticObjectId\nfrom fastapi_users.db import BeanieBaseUser, BeanieUserDatabase\n\nDATABASE_URL = \"mongodb://localhost:27017\"\nclient = motor.motor_asyncio.AsyncIOMotorClient(\n    DATABASE_URL, uuidRepresentation=\"standard\"\n)\ndb = client[\"database_name\"]\n\n\nclass User(BeanieBaseUser[PydanticObjectId]):\n    pass\n\n\nasync def get_user_db():\n    yield BeanieUserDatabase(User)\n```\n\n----------------------------------------\n\nTITLE: Visualizing FastAPI Users Library Structure with Mermaid Flowchart\nDESCRIPTION: This Mermaid flowchart illustrates the structure of the FastAPI Users library, showing the relationships between various components such as FastAPIUsers, UserManager, database adapters, authentication backends, and routers.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    FASTAPI_USERS{FastAPIUsers}\n    USER_MANAGER{UserManager}\n    USER_MODEL{User model}\n    DATABASE_DEPENDENCY[[get_user_db]]\n    USER_MANAGER_DEPENDENCY[[get_user_manager]]\n    CURRENT_USER[[current_user]]\n    subgraph SCHEMAS[Schemas]\n        USER[User]\n        USER_CREATE[UserCreate]\n        USER_UPDATE[UserUpdate]\n    end\n    subgraph DATABASE[Database adapters]\n        SQLALCHEMY[SQLAlchemy]\n        BEANIE[Beanie]\n    end\n    subgraph ROUTERS[Routers]\n        AUTH[[get_auth_router]]\n        OAUTH[[get_oauth_router]]\n        OAUTH_ASSOCIATE[[get_oauth_associate_router]]\n        REGISTER[[get_register_router]]\n        VERIFY[[get_verify_router]]\n        RESET[[get_reset_password_router]]\n        USERS[[get_users_router]]\n    end\n    subgraph AUTH_BACKENDS[Authentication]\n        subgraph TRANSPORTS[Transports]\n            COOKIE[CookieTransport]\n            BEARER[BearerTransport]\n        end\n        subgraph STRATEGIES[Strategies]\n            DB[DatabaseStrategy]\n            JWT[JWTStrategy]\n            REDIS[RedisStrategy]\n        end\n        AUTH_BACKEND{AuthenticationBackend}\n    end\n    DATABASE --> DATABASE_DEPENDENCY\n    USER_MODEL --> DATABASE_DEPENDENCY\n    DATABASE_DEPENDENCY --> USER_MANAGER\n\n    USER_MANAGER --> USER_MANAGER_DEPENDENCY\n    USER_MANAGER_DEPENDENCY --> FASTAPI_USERS\n\n    FASTAPI_USERS --> ROUTERS\n\n    TRANSPORTS --> AUTH_BACKEND\n    STRATEGIES --> AUTH_BACKEND\n\n    AUTH_BACKEND --> ROUTERS\n    AUTH_BACKEND --> FASTAPI_USERS\n\n    FASTAPI_USERS --> CURRENT_USER\n\n    SCHEMAS --> ROUTERS\n```\n\n----------------------------------------\n\nTITLE: Setting up SQLAlchemy Models for OAuth\nDESCRIPTION: Defines the SQLAlchemy models needed for OAuth account storage, including the OAuthAccount model and relationship with the User model. Highlights the important components in the implementation.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/oauth.md#2025-04-23_snippet_2\n\nLANGUAGE: py\nCODE:\n```\n--8<-- \"docs/src/db_sqlalchemy_oauth.py\"\n```\n\n----------------------------------------\n\nTITLE: Database Adapter Creation for FastAPI Users\nDESCRIPTION: Sets up the database adapter that connects the database configuration with users logic through a FastAPI dependency.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/databases/beanie.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/src/db_beanie.py\"\n```\n\n----------------------------------------\n\nTITLE: Active and Verified User Authentication in FastAPI\nDESCRIPTION: Implements authentication for active and verified users. Will throw 401 Unauthorized if inactive or 403 Forbidden if not verified.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/current-user.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncurrent_active_verified_user = fastapi_users.current_user(active=True, verified=True)\n\n@app.get(\"/protected-route\")\ndef protected_route(user: User = Depends(current_active_verified_user)):\n    return f\"Hello, {user.email}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Beanie ODM for FastAPI Users\nDESCRIPTION: Code to initialize Beanie ODM during application startup when using FastAPI Users v10 with MongoDB. This needs to be added to the FastAPI application startup event.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/9x_to_10x.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom beanie import init_beanie\n\n\n@app.on_event(\"startup\")\nasync def on_startup():\n    await init_beanie(\n        database=db,\n        document_models=[\n            User,\n        ],\n    )\n```\n\n----------------------------------------\n\nTITLE: User Model Definition with Beanie ODM\nDESCRIPTION: Creates a User model class that inherits from FastAPI Users base class, providing standard user fields with the ability to add custom fields.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/databases/beanie.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/src/db_beanie.py\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom PasswordHelper Protocol in FastAPI Users\nDESCRIPTION: Demonstrates the implementation of a custom PasswordHelper class that follows the PasswordHelperProtocol, showing required methods for password verification, hashing, and generation.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/password-hash.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Tuple\n\nfrom fastapi_users.password import PasswordHelperProtocol\n\nclass PasswordHelper(PasswordHelperProtocol):\n    def verify_and_update(\n        self, plain_password: str, hashed_password: str\n    ) -> Tuple[bool, str]:\n        ...\n\n    def hash(self, password: str) -> str:\n        ...\n\n    def generate(self) -> str:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Updating SQLAlchemy User Database Adapter in FastAPI Users\nDESCRIPTION: Changes to the SQLAlchemy database adapter initialization in FastAPI Users v10. The adapter now only expects the User model instead of both UserDB and UserTable.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/9x_to_10x.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def get_user_db(session: AsyncSession = Depends(get_async_session)):\n    yield SQLAlchemyUserDatabase(UserDB, session, UserTable)\n```\n\nLANGUAGE: python\nCODE:\n```\nasync def get_user_db(session: AsyncSession = Depends(get_async_session)):\n    yield SQLAlchemyUserDatabase(session, User)\n```\n\n----------------------------------------\n\nTITLE: Configuring FastAPI Routers - Before and After Comparison\nDESCRIPTION: Demonstrates how to configure FastAPI authentication routers before and after the design change. In the new approach, Pydantic schemas need to be passed explicitly when initializing each router that requires them, rather than during FastAPIUsers initialization.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/9x_to_10x.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\napp.include_router(\n    fastapi_users.get_auth_router(auth_backend), prefix=\"/auth/jwt\", tags=[\"auth\"]\n)\napp.include_router(fastapi_users.get_register_router(), prefix=\"/auth\", tags=[\"auth\"])\napp.include_router(\n    fastapi_users.get_reset_password_router(),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_verify_router(),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(fastapi_users.get_users_router(), prefix=\"/users\", tags=[\"users\"])\n```\n\nLANGUAGE: python\nCODE:\n```\napp.include_router(\n    fastapi_users.get_auth_router(auth_backend), prefix=\"/auth/jwt\", tags=[\"auth\"]\n)\napp.include_router(\n    fastapi_users.get_register_router(UserRead, UserCreate),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_reset_password_router(),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_verify_router(UserRead),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_users_router(UserRead, UserUpdate),\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Logging Out a User with cURL in FastAPI-Users\nDESCRIPTION: HTTP POST request to end a user session using cURL. Uses cookie-based authentication, requiring the session token to be passed in the Cookie header.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/flow.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n-H \"Content-Type: application/json\" \\\n-H \"Cookie: fastapiusersauth=$TOKEN\" \\\n-X POST \\\nhttp://localhost:8000/auth/cookie/logout\n```\n\n----------------------------------------\n\nTITLE: Dependency-Only Authentication in FastAPI\nDESCRIPTION: Shows how to protect a route with authentication without needing the user object in the route logic using dependencies parameter.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/current-user.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/protected-route\", dependencies=[Depends(current_superuser)])\ndef protected_route():\n    return \"Hello, some user.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication in FastAPI Users v9\nDESCRIPTION: Updated configuration for JWT authentication in FastAPI Users version 9. It separates the transport (BearerTransport) and strategy (JWTStrategy) components, and combines them using AuthenticationBackend.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/8x_to_9x.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi_users.authentication import AuthenticationBackend, BearerTransport, JWTStrategy\n\nSECRET = \"SECRET\"\n\nbearer_transport = BearerTransport(tokenUrl=\"auth/jwt/login\")\n\ndef get_jwt_strategy() -> JWTStrategy:\n    return JWTStrategy(secret=SECRET, lifetime_seconds=3600)\n\nauth_backend = AuthenticationBackend(\n    name=\"jwt\",\n    transport=bearer_transport,\n    get_strategy=get_jwt_strategy,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLAlchemy Access Token Model and Database Adapter\nDESCRIPTION: Defines an AccessToken ORM model inheriting from SQLAlchemyBaseAccessTokenTableUUID and sets up a dependency for instantiating the SQLAlchemyAccessTokenDatabase. This snippet demonstrates how to integrate the access token functionality with SQLAlchemy in FastAPI Users.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/authentication/strategies/database.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AccessToken(SQLAlchemyBaseAccessTokenTableUUID, Base):\n    pass\n\nasync def get_access_token_db(\n    session: AsyncSession = Depends(get_async_session),\n):\n    yield SQLAlchemyAccessTokenDatabase(session, AccessToken)\n```\n\n----------------------------------------\n\nTITLE: Migrating SQLAlchemy User Model in FastAPI Users\nDESCRIPTION: Code changes for the SQLAlchemy user model definition when upgrading to FastAPI Users v10. The base class has changed from 'SQLAlchemyBaseUserTable' to 'SQLAlchemyBaseUserTableUUID'.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/9x_to_10x.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass UserTable(Base, SQLAlchemyBaseUserTable):\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\nclass User(SQLAlchemyBaseUserTableUUID, Base):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Updating Current User in FastAPI Users (JSON)\nDESCRIPTION: JSON payload for updating the current authenticated active user. It includes fields for email and password.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/routes.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"email\": \"king.arthur@tintagel.bt\",\n    \"password\": \"merlin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Main Entry Point for FastAPI Application with Beanie\nDESCRIPTION: The main entry point for a FastAPI application using FastAPI Users with Beanie ODM. This file initializes and runs the application.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/full-example.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/beanie/main.py\"\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables Function\nDESCRIPTION: Implements an async utility function to create all defined database tables. This function should be called during application initialization.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/databases/sqlalchemy.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def create_db_and_tables():\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n```\n\n----------------------------------------\n\nTITLE: Instantiating an OAuth2 Client with Google\nDESCRIPTION: Creates a Google OAuth2 client instance using the httpx_oauth library, which requires client ID and client secret credentials.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/oauth.md#2025-04-23_snippet_1\n\nLANGUAGE: py\nCODE:\n```\nfrom httpx_oauth.clients.google import GoogleOAuth2\n\ngoogle_oauth_client = GoogleOAuth2(\"CLIENT_ID\", \"CLIENT_SECRET\")\n```\n\n----------------------------------------\n\nTITLE: Migrating Pydantic Models (Schemas) in FastAPI Users\nDESCRIPTION: Changes to the Pydantic model structure in FastAPI Users v10. UserDB is removed, User is renamed to UserRead, and BaseUser now accepts a generic type for ID specification.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/9x_to_10x.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi_users import models\n\n\nclass User(models.BaseUser):\n    pass\n\n\nclass UserCreate(models.BaseUserCreate):\n    pass\n\n\nclass UserUpdate(models.BaseUserUpdate):\n    pass\n\n\nclass UserDB(User, models.BaseUserDB):\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\nfrom fastapi_users import schemas\n\n\nclass UserRead(schemas.BaseUser[uuid.UUID]):\n    pass\n\n\nclass UserCreate(schemas.BaseUserCreate):\n    pass\n\n\nclass UserUpdate(schemas.BaseUserUpdate):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Successful User Update Response in FastAPI Users (JSON)\nDESCRIPTION: JSON response for a successful user update operation. It includes user details such as id, email, active status, and superuser status.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/routes.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"57cbb51a-ab71-4009-8802-3f54b4f2e23\",\n    \"email\": \"king.arthur@tintagel.bt\",\n    \"is_active\": true,\n    \"is_superuser\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Beanie Initialization with FastAPI Lifespan Events\nDESCRIPTION: Initializes Beanie ODM using FastAPI's lifespan events to discover and register models when the application starts.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/databases/beanie.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom contextlib import asynccontextmanager\nfrom beanie import init_beanie\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    await init_beanie(\n        database=db,  # (1)!\n        document_models=[\n            User,  # (2)!\n        ],\n    )\n    yield\n\napp = FastAPI(lifespan=lifespan)\n```\n\n----------------------------------------\n\nTITLE: User Registration API Calls\nDESCRIPTION: Examples of how to register a new user with email and password using both cURL and axios. The endpoint returns user details including ID and status flags.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/flow.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d \"{\\\"email\\\": \\\"king.arthur@camelot.bt\\\",\\\"password\\\": \\\"guinevere\\\"}\" \\\nhttp://localhost:8000/auth/register\n```\n\nLANGUAGE: typescript\nCODE:\n```\naxios.post('http://localhost:8000/auth/register', {\n    email: 'king.arthur@camelot.bt',\n    password: 'guinevere',\n})\n.then((response) => console.log(response))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Get User Profile\nDESCRIPTION: Authenticated requests to retrieve the current user's profile using JWT token authentication.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/flow.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport TOKEN=\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiNGZkMzQ3N2ItZWNjZi00ZWUzLThmN2QtNjhhZDcyMjYxNDc2IiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTg3ODE4NDI5fQ.anO3JR8-WYCozZ4_2-PQ2Ov9O38RaLP2RAzQIiZhteM\";\ncurl \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-X GET \\\nhttp://localhost:8000/users/me\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst TOKEN = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiNGZkMzQ3N2ItZWNjZi00ZWUzLThmN2QtNjhhZDcyMjYxNDc2IiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTg3ODE4NDI5fQ.anO3JR8-WYCozZ4_2-PQ2Ov9O38RaLP2RAzQIiZhteM';\naxios.get(\n    'http://localhost:8000/users/me', {\n    headers: {\n        'Authorization': `Bearer ${TOKEN}`,\n    },\n})\n.then((response) => console.log(response))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Converting Dependencies to Context Managers\nDESCRIPTION: Demonstrates how to transform FastAPI dependencies into context managers using contextlib.asynccontextmanager for manual dependency handling.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/cookbook/create-user-programmatically.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/src/cookbook_create_user_programmatically.py\"\n```\n\n----------------------------------------\n\nTITLE: Successful User Update by ID Response in FastAPI Users (JSON)\nDESCRIPTION: JSON response for a successful user update operation by ID. It includes updated user details such as id, email, active status, and superuser status.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/routes.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"57cbb51a-ab71-4009-8802-3f54b4f2e23\",\n    \"email\": \"king.arthur@camelot.bt\",\n    \"is_active\": false,\n    \"is_superuser\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Update User Profile\nDESCRIPTION: Examples of updating user profile information, such as password, using authenticated requests.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/flow.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-X PATCH \\\n-d \"{\\\"password\\\": \\\"lancelot\\\"}\" \\\nhttp://localhost:8000/users/me\n```\n\nLANGUAGE: typescript\nCODE:\n```\naxios.patch(\n    'http://localhost:8000/users/me',\n    {\n        password: 'lancelot',\n    },\n    {\n        headers: {\n            'Authorization': `Bearer ${TOKEN}`,\n        },\n    },\n)\n.then((response) => console.log(response))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI Users with SQLAlchemy Support\nDESCRIPTION: Command to install FastAPI Users with SQLAlchemy database support using pip. This installs the core package along with necessary SQLAlchemy dependencies.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install 'fastapi-users[sqlalchemy]'\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Router in FastAPI Users v9\nDESCRIPTION: Updated configuration for including an OAuth router in FastAPI Users version 9. It now requires specifying the auth_backend in the get_oauth_router function.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/8x_to_9x.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\napp.include_router(\n    fastapi_users.get_oauth_router(google_oauth_client, auth_backend, \"SECRET\"),\n    prefix=\"/auth/google\",\n    tags=[\"auth\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI-Users Package\nDESCRIPTION: Command to install the FastAPI-Users package using pip. It includes optional database backends that can be specified during installation.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install fastapi-users[sqlalchemy]\n```\n\n----------------------------------------\n\nTITLE: Setting up Requirements for Beanie Implementation in FastAPI Users\nDESCRIPTION: Requirements file listing all dependencies needed for the Beanie implementation of FastAPI Users with JWT authentication.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/full-example.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n--8<-- \"examples/beanie/requirements.txt\"\n```\n\n----------------------------------------\n\nTITLE: Database Connection Setup for Beanie ODM with FastAPI Users\nDESCRIPTION: Establishes a MongoDB connection using motor, which is required for Beanie ODM integration.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/databases/beanie.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"docs/src/db_beanie.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Requirements for SQLAlchemy Implementation in FastAPI Users\nDESCRIPTION: Requirements file listing all dependencies needed for the SQLAlchemy implementation of FastAPI Users with JWT authentication.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/full-example.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n--8<-- \"examples/sqlalchemy/requirements.txt\"\n```\n\n----------------------------------------\n\nTITLE: Deleting a User with axios in FastAPI-Users\nDESCRIPTION: HTTP DELETE request to remove a user from the system using axios in TypeScript. Requires a valid JWT token in the Authorization header and the user's UUID as part of the URL path.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/flow.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\naxios.delete(\n    'http://localhost:8000/users/4fd3477b-eccf-4ee3-8f7d-68ad72261476',\n    {\n        headers: {\n            'Authorization': `Bearer ${TOKEN}`,\n        },\n    },\n)\n.then((response) => console.log(response))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI Users with Beanie Support\nDESCRIPTION: Command to install FastAPI Users with Beanie database support using pip. This installs the core package along with necessary Beanie dependencies for MongoDB integration.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install 'fastapi-users[beanie]'\n```\n\n----------------------------------------\n\nTITLE: Login Form Data Example\nDESCRIPTION: Example of form data payload for user login endpoint using application/x-www-form-urlencoded format.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/routes.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusername=king.arthur@camelot.bt&password=guinevere\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI Users with OAuth dependencies\nDESCRIPTION: Commands to install FastAPI Users with OAuth support for either SQLAlchemy or Beanie database adapters.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/oauth.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install 'fastapi-users[sqlalchemy,oauth]'\n```\n\nLANGUAGE: sh\nCODE:\n```\npip install 'fastapi-users[beanie,oauth]'\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication in FastAPI Users v8\nDESCRIPTION: Example of configuring JWT authentication in FastAPI Users version 8. It uses the JWTAuthentication class with secret, lifetime, and tokenUrl parameters.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/8x_to_9x.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi_users.authentication import JWTAuthentication\n\njwt_authentication = JWTAuthentication(\n    secret=SECRET, lifetime_seconds=3600, tokenUrl=\"auth/jwt/login\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI-Users with Redis Dependencies\nDESCRIPTION: Command to install the FastAPI-Users library with the optional Redis dependencies needed for Redis authentication strategy.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/authentication/strategies/redis.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install 'fastapi-users[redis]'\n```\n\n----------------------------------------\n\nTITLE: Forgot Password Request\nDESCRIPTION: JSON payload for initiating password reset process.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/routes.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"email\": \"king.arthur@camelot.bt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for FastAPI Users Project\nDESCRIPTION: This snippet lists the required Python packages for a FastAPI project using fastapi-users with Beanie and OAuth support, as well as the uvicorn ASGI server. These dependencies would typically be used in a requirements.txt file or as part of a package management setup.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/examples/beanie-oauth/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfastapi\nfastapi-users[beanie,oauth]\nuvicorn[standard]\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Authentication in FastAPI Users v9\nDESCRIPTION: Updated configuration for Cookie authentication in FastAPI Users version 9. It separates the transport (CookieTransport) and strategy (JWTStrategy) components, and combines them using AuthenticationBackend.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/8x_to_9x.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi_users.authentication import AuthenticationBackend, CookieTransport, JWTStrategy\n\nSECRET = \"SECRET\"\n\ncookie_transport = CookieTransport(cookie_max_age=3600)\n\ndef get_jwt_strategy() -> JWTStrategy:\n    return JWTStrategy(secret=SECRET, lifetime_seconds=3600)\n\nauth_backend = AuthenticationBackend(\n    name=\"cookie\",\n    transport=cookie_transport,\n    get_strategy=get_jwt_strategy,\n)\n```\n\n----------------------------------------\n\nTITLE: Database Configuration for Beanie Implementation\nDESCRIPTION: Database setup for the Beanie implementation of FastAPI Users, including model definitions and MongoDB connection configuration.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/full-example.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/beanie/app/db.py\"\n```\n\n----------------------------------------\n\nTITLE: Registration Request Payload\nDESCRIPTION: JSON payload for registering a new user with email and password.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/routes.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"email\": \"king.arthur@camelot.bt\",\n    \"password\": \"guinevere\"\n}\n```\n\n----------------------------------------\n\nTITLE: User Schema Definitions for Beanie Implementation\nDESCRIPTION: Pydantic schema definitions for user models in the Beanie implementation, defining the structure of user data for API requests and responses.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/full-example.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/beanie/app/schemas.py\"\n```\n\n----------------------------------------\n\nTITLE: Registration Success Response\nDESCRIPTION: Success response returned after successfully creating a new user account.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/routes.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"57cbb51a-ab71-4009-8802-3f54b4f2e23\",\n    \"email\": \"king.arthur@camelot.bt\",\n    \"is_active\": true,\n    \"is_superuser\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for SQLAlchemy Integration in FastAPI Users\nDESCRIPTION: Changes required in dependencies when upgrading to FastAPI Users v10 with SQLAlchemy. The dependency has changed from 'sqlalchemy2' to 'sqlalchemy'.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/9x_to_10x.md#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nfastapi\nfastapi-users[sqlalchemy2]\nuvicorn[standard]\naiosqlite\n```\n\nLANGUAGE: txt\nCODE:\n```\nfastapi\nfastapi-users[sqlalchemy]\nuvicorn[standard]\naiosqlite\n```\n\n----------------------------------------\n\nTITLE: Migrating PostgreSQL User ID Column to UUID\nDESCRIPTION: SQL script to migrate the user ID column in PostgreSQL from string to UUID type for FastAPI Users 1.x.x compatibility.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/08_to_1x.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\nALTER TABLE \"user\" ADD uuid_id UUID;\nUPDATE \"user\" SET uuid_id = uuid(id);\nALTER TABLE \"user\" DROP id;\nALTER TABLE \"user\" ADD PRIMARY KEY (uuid_id);\nALTER TABLE \"user\" RENAME COLUMN uuid_id TO id;\n```\n\n----------------------------------------\n\nTITLE: Logging Out a User with axios in FastAPI-Users\nDESCRIPTION: HTTP POST request to end a user session using axios in TypeScript. Uses cookie-based authentication, requiring the session token to be passed in the Cookie header.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/flow.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\naxios.post('http://localhost:8000/auth/cookie/logout',\n    null,\n    {\n        headers: {\n            'Cookie': `fastapiusersauth=${TOKEN}`,\n        },\n    }\n)\n.then((response) => console.log(response))\n.catch((error) => console.log(error));\n```\n\n----------------------------------------\n\nTITLE: Migrating MongoDB User IDs to UUID using Python\nDESCRIPTION: Asynchronous Python function to migrate user IDs in MongoDB from string to UUID for FastAPI Users 1.x.x compatibility.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/08_to_1x.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\nimport motor.motor_asyncio\n\n\nasync def migrate_uuid():\n    client = motor.motor_asyncio.AsyncIOMotorClient(\n        DATABASE_URL, uuidRepresentation=\"standard\"\n    )\n    db = client[\"database_name\"]\n    users = db[\"users\"]\n\n    async for user in users.find({}):\n        await users.update_one(\n            {\"_id\": user[\"_id\"]},\n            {\"$set\": {\"id\": uuid.UUID(user[\"id\"])}},\n        )\n```\n\n----------------------------------------\n\nTITLE: OAuth Authorization Request in FastAPI Users v9\nDESCRIPTION: Updated OAuth authorization request for FastAPI Users version 9. The authentication_backend parameter is no longer required in the URL.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/8x_to_9x.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n-H \"Content-Type: application/json\" \\\n-X GET \\\nhttp://localhost:8000/auth/google/authorize\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for MongoDB Integration in FastAPI Users\nDESCRIPTION: Changes to the required dependencies for MongoDB support in FastAPI Users v10. Support is now provided through Beanie ODM instead of the previous MongoDB adapter.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/9x_to_10x.md#2025-04-23_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nfastapi\nfastapi-users[mongodb]\nuvicorn[standard]\naiosqlite\n```\n\nLANGUAGE: txt\nCODE:\n```\nfastapi\nfastapi-users[beanie]\nuvicorn[standard]\naiosqlite\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Primary Key for OAuth Account in SQLAlchemy\nDESCRIPTION: Shows how to customize the primary key type for the OAuth account model in SQLAlchemy, using integers instead of the default UUID type.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/oauth.md#2025-04-23_snippet_3\n\nLANGUAGE: py\nCODE:\n```\nclass OAuthAccount(SQLAlchemyBaseOAuthAccountTable[int], Base):\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n\n    @declared_attr\n    def user_id(cls) -> Mapped[int]:\n        return mapped_column(Integer, ForeignKey(\"user.id\", ondelete=\"cascade\"), nullable=False)\n\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication Response Format in v1.x.x\nDESCRIPTION: The JSON response format for a successful login operation with JWT authentication in FastAPI Users v1.x.x, which returns a simple token property.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/1x_to_2x.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Pydantic Model Field Type for User ID\nDESCRIPTION: Shows how to update Pydantic model field types from str to UUID4 for user IDs in FastAPI Users 1.x.x.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/08_to_1x.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel, UUID4\n\n# Before\nclass Model(BaseModel):\n    user_id: str\n\n# After\nclass Model(BaseModel):\n    user_id: UUID4\n```\n\n----------------------------------------\n\nTITLE: Updating User by ID Payload in FastAPI Users (JSON)\nDESCRIPTION: JSON payload for updating a user by their ID. It includes fields for email, password, active status, and superuser status.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/routes.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"email\": \"king.arthur@tintagel.bt\",\n    \"password\": \"merlin\",\n    \"is_active\": false,\n    \"is_superuser\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FastAPI Users 0.8.x\nDESCRIPTION: Example of configuring FastAPI Users in version 0.8.x, including router setup and event handlers.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/08_to_1x.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\njwt_authentication = JWTAuthentication(secret=SECRET, lifetime_seconds=3600)\n\napp = FastAPI()\nfastapi_users = FastAPIUsers(\n    user_db, [jwt_authentication], User, UserCreate, UserUpdate, UserDB,\n)\napp.include_router(fastapi_users.router, prefix=\"/users\", tags=[\"users\"])\n\n\n@fastapi_users.on_after_register()\ndef on_after_register(user: User, request: Request):\n    print(f\"User {user.id} has registered.\")\n\n\n@fastapi_users.on_after_forgot_password()\ndef on_after_forgot_password(user: User, token: str, request: Request):\n    print(f\"User {user.id} has forgot their password. Reset token: {token}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Client for UUID Representation\nDESCRIPTION: Demonstrates how to configure the MongoDB client to use the 'standard' UUID representation for compatibility with FastAPI Users 1.x.x.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/08_to_1x.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDATABASE_URL = \"mongodb://localhost:27017\"\nclient = motor.motor_asyncio.AsyncIOMotorClient(\n    DATABASE_URL, uuidRepresentation=\"standard\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Router in FastAPI Users v8\nDESCRIPTION: Example of including an OAuth router in FastAPI Users version 8. It uses the get_oauth_router function with the OAuth client and secret.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/8x_to_9x.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp.include_router(\n    fastapi_users.get_oauth_router(google_oauth_client, \"SECRET\"),\n    prefix=\"/auth/google\",\n    tags=[\"auth\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Login Error Response\nDESCRIPTION: JSON response for failed login attempt due to bad credentials or inactive user status.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/routes.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"detail\": \"LOGIN_BAD_CREDENTIALS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reset Password Request\nDESCRIPTION: JSON payload for resetting password using reset token.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/routes.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI\",\n    \"password\": \"merlin\"\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth Authorization Request in FastAPI Users v8\nDESCRIPTION: Example of making an OAuth authorization request in FastAPI Users version 8. It includes the authentication_backend parameter in the URL.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/8x_to_9x.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n-H \"Content-Type: application/json\" \\\n-X GET \\\nhttp://localhost:8000/auth/google/authorize?authentication_backend=jwt\n```\n\n----------------------------------------\n\nTITLE: Duplicate Email Error Response in FastAPI Users (JSON)\nDESCRIPTION: JSON error response when attempting to update a user with an email that already exists in the system.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/routes.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"detail\": \"UPDATE_USER_EMAIL_ALREADY_EXISTS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User by ID Response in FastAPI Users (JSON)\nDESCRIPTION: JSON response for successfully retrieving a user by their ID. It includes user details such as id, email, active status, and superuser status.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/routes.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"57cbb51a-ab71-4009-8802-3f54b4f2e23\",\n    \"email\": \"king.arthur@camelot.bt\",\n    \"is_active\": true,\n    \"is_superuser\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User ID Comparison in Python Tests\nDESCRIPTION: Demonstrates how to update user ID comparisons in Python tests to accommodate the change from string to UUID representation.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/08_to_1x.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Before\nassert \"d35d213e-f3d8-4f08-954a-7e0d1bea286f\" == user.id\n\n# Now\nassert \"d35d213e-f3d8-4f08-954a-7e0d1bea286f\" == str(user.id)\n```\n\n----------------------------------------\n\nTITLE: OAuth Authorization Response\nDESCRIPTION: Success response containing OAuth authorization URL.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/routes.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"authorization_url\": \"https://www.tintagel.bt/oauth/authorize?client_id=CLIENT_ID&scopes=a+b&redirect_uri=https://www.camelot.bt/oauth/callback\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for FastAPI Users with Beanie\nDESCRIPTION: This snippet lists the required Python packages for a project using FastAPI with the fastapi-users authentication package configured for Beanie ODM. It includes the core FastAPI framework, fastapi-users with Beanie integration, and Uvicorn as the ASGI server with standard features.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/examples/beanie/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfastapi\nfastapi-users[beanie]\nuvicorn[standard]\n```\n\n----------------------------------------\n\nTITLE: Updating MySQL User ID Column Type\nDESCRIPTION: SQL command to update the user ID column type in MySQL for FastAPI Users 1.x.x compatibility.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/08_to_1x.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"user\" MODIFY id CHAR(36);\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Hatch for FastAPI Users\nDESCRIPTION: Command to run all unit tests for the FastAPI Users project using Hatch as the environment manager. This executes the test suite defined in the project configuration.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhatch run test:test\n```\n\n----------------------------------------\n\nTITLE: OAuth Account Association Response\nDESCRIPTION: Success response after associating OAuth account with user.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/routes.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"57cbb51a-ab71-4009-8802-3f54b4f2e23\",\n    \"email\": \"king.arthur@tintagel.bt\",\n    \"is_active\": true,\n    \"is_superuser\": false,\n    \"oauth_accounts\": [\n        {\n            \"id\": \"6c98caf5-9bc5-4c4f-8a45-a0ae0c40cd77\",\n            \"oauth_name\": \"TINTAGEL\",\n            \"access_token\": \"ACCESS_TOKEN\",\n            \"expires_at\": \"1641040620\",\n            \"account_id\": \"king_arthur_tintagel\",\n            \"account_email\": \"king.arthur@tintagel.bt\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Password Error Response in FastAPI Users (JSON)\nDESCRIPTION: JSON error response for a failed password validation during user update. It includes an error code and reason for the failure.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/usage/routes.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"detail\": {\n        \"code\": \"UPDATE_USER_INVALID_PASSWORD\",\n        \"reason\": \"Password should be at least 3 characters\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Authentication in FastAPI Users v8\nDESCRIPTION: Example of configuring Cookie authentication in FastAPI Users version 8. It uses the CookieAuthentication class with secret and lifetime parameters.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/8x_to_9x.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi_users.authentication import CookieAuthentication\n\ncookie_authentication = CookieAuthentication(secret=SECRET, lifetime_seconds=3600)\n```\n\n----------------------------------------\n\nTITLE: Serving Documentation Locally for FastAPI Users\nDESCRIPTION: Command to serve the FastAPI Users documentation locally using Hatch. This makes the documentation available on localhost port 8000 for preview purposes.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhatch run docs\n```\n\n----------------------------------------\n\nTITLE: Authenticating API Requests with Bearer Token\nDESCRIPTION: This curl command demonstrates how to authenticate a request to a protected route using the Bearer authentication scheme. The token must be included in the Authorization header with the 'Bearer' prefix.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/configuration/authentication/transports/bearer.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:9000/protected-route -H'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI'\n```\n\n----------------------------------------\n\nTITLE: Configuring FastAPI Users 1.x.x\nDESCRIPTION: Updated configuration for FastAPI Users in version 1.x.x, demonstrating split routers and callback functions.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/08_to_1x.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef on_after_register(user: UserDB, request: Request):\n    print(f\"User {user.id} has registered.\")\n\n\ndef on_after_forgot_password(user: UserDB, token: str, request: Request):\n    print(f\"User {user.id} has forgot their password. Reset token: {token}\")\n\n\njwt_authentication = JWTAuthentication(secret=SECRET, lifetime_seconds=3600)\n\napp = FastAPI()\nfastapi_users = FastAPIUsers(\n    user_db, [jwt_authentication], User, UserCreate, UserUpdate, UserDB,\n)\napp.include_router(\n    fastapi_users.get_auth_router(jwt_authentication), prefix=\"/auth/jwt\", tags=[\"auth\"]\n)\napp.include_router(\n    fastapi_users.get_register_router(on_after_register), prefix=\"/auth\", tags=[\"auth\"]\n)\napp.include_router(\n    fastapi_users.get_reset_password_router(\n        SECRET, after_forgot_password=on_after_forgot_password\n    ),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(fastapi_users.get_users_router(), prefix=\"/users\", tags=[\"users\"])\n```\n\n----------------------------------------\n\nTITLE: Code Formatting and Linting with Hatch for FastAPI Users\nDESCRIPTION: Command to apply linting rules and check typing for the FastAPI Users codebase using Hatch. This ensures code quality and consistency across the project.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhatch run lint\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication Response Format in v2.x.x\nDESCRIPTION: The updated JSON response format for a successful login operation with JWT authentication in FastAPI Users v2.x.x, which now uses 'access_token' and 'token_type' properties for Swagger compatibility.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/1x_to_2x.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI\",\n    \"token_type\": \"bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating MongoDB User IDs to UUID\nDESCRIPTION: JavaScript function to migrate user IDs in MongoDB from string to UUID for FastAPI Users 1.x.x compatibility.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/docs/migration/08_to_1x.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndb.getCollection('users').find().forEach(function(user) {\n  var uuid = UUID(user.id);\n  db.getCollection('users').update({_id: user._id}, [{$set: {id: uuid}}]);\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Table in Markdown\nDESCRIPTION: This code snippet defines an HTML table within a Markdown file to display contributor information. It includes avatars, names, and contribution types for each contributor.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://francoisvoron.com\"><img src=\"https://avatars.githubusercontent.com/u/1144727?v=4?s=100\" width=\"100px;\" alt=\"François Voron\"/><br /><sub><b>François Voron</b></sub></a><br /><a href=\"#maintenance-frankie567\" title=\"Maintenance\">🚧</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/paolodina\"><img src=\"https://avatars.githubusercontent.com/u/1157401?v=4?s=100\" width=\"100px;\" alt=\"Paolo Dina\"/><br /><sub><b>Paolo Dina</b></sub></a><br /><a href=\"#financial-paolodina\" title=\"Financial\">💵</a> <a href=\"https://github.com/fastapi-users/fastapi-users/commits?author=paolodina\" title=\"Code\">💻</a></td>\n      <!-- ... more contributor entries ... -->\n    </tr>\n    <!-- ... more rows ... -->\n  </tbody>\n</table>\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Table in HTML\nDESCRIPTION: HTML table markup showing contributor information with aligned cells, avatar images, usernames and contribution type icons. Each cell includes a GitHub profile link, avatar image, username and contribution indicators.\nSOURCE: https://github.com/fastapi-users/fastapi-users/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Smithybrewer\"><img src=\"https://avatars.githubusercontent.com/u/57669591?v=4?s=100\" width=\"100px;\" alt=\"Smithybrewer\"/><br /><sub><b>Smithybrewer</b></sub></a><br /><a href=\"https://github.com/fastapi-users/fastapi-users/issues?q=author%3ASmithybrewer\" title=\"Bug reports\">🐛</a></td>\n```"
  }
]